{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxMzc5MTI4", "number": 899, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNTozMzoyOFrOEiLPQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNjoxMDoxMFrOEnhLMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MjcxMTcwOnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNTozMzoyOFrOHP53RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwOToyODo0MlrOHUFVoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQzODcyNA==", "bodyText": "remove please", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/899#discussion_r486438724", "createdAt": "2020-09-10T15:33:28Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "diffHunk": "@@ -279,21 +293,27 @@ private String redirectToLoginOrAutoLoginPage(\n     if (StringUtils.isNotEmpty(tempRegId)) {\n       Optional<UserEntity> optUser = userService.findUserByTempRegId(tempRegId);\n       if (optUser.isPresent()) {\n+        // log TEMPORARY_PASSWORD_SUCCEEDED audit log event", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7fc91a1df1139e152dde98feff615a57cb278f7"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgyMTAyNA==", "bodyText": "Fixed review comment.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/899#discussion_r490821024", "createdAt": "2020-09-18T09:28:42Z", "author": {"login": "harisboston"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "diffHunk": "@@ -279,21 +293,27 @@ private String redirectToLoginOrAutoLoginPage(\n     if (StringUtils.isNotEmpty(tempRegId)) {\n       Optional<UserEntity> optUser = userService.findUserByTempRegId(tempRegId);\n       if (optUser.isPresent()) {\n+        // log TEMPORARY_PASSWORD_SUCCEEDED audit log event", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQzODcyNA=="}, "originalCommit": {"oid": "f7fc91a1df1139e152dde98feff615a57cb278f7"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MjcxNjMyOnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNTozNDoyOFrOHP55_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwOTozMTo0MFrOHUFbxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQzOTQyMA==", "bodyText": "this looks out of scope, shouldn't it be moved to line 304?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/899#discussion_r486439420", "createdAt": "2020-09-10T15:34:28Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "diffHunk": "@@ -279,21 +293,27 @@ private String redirectToLoginOrAutoLoginPage(\n     if (StringUtils.isNotEmpty(tempRegId)) {\n       Optional<UserEntity> optUser = userService.findUserByTempRegId(tempRegId);\n       if (optUser.isPresent()) {\n+        // log TEMPORARY_PASSWORD_SUCCEEDED audit log event\n+\n         UserEntity user = optUser.get();\n         logger.exit(\"tempRegId is valid, return to auto login page\");\n         cookieHelper.addCookie(response, USER_ID_COOKIE, user.getUserId());\n         cookieHelper.addCookie(response, TEMP_REG_ID_COOKIE, tempRegId);\n         return AUTO_LOGIN_VIEW_NAME;\n       }\n-\n       logger.exit(\"tempRegId is invalid, return to login page\");\n       return LOGIN_VIEW_NAME;\n     }\n+    auditHelper.logEvent(SIGNIN_FAILED_INVALID_TEMPORARY_PASSWORD, auditRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7fc91a1df1139e152dde98feff615a57cb278f7"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgyMjU5OQ==", "bodyText": "This is a duplicate event as event SIGNIN_WITH_TEMPORARY_PASSWORD_FAILED is already logged in UserServiceImpl.\nSo, removed this event SIGNIN_FAILED_INVALID_TEMPORARY_PASSWORD.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/899#discussion_r490822599", "createdAt": "2020-09-18T09:31:40Z", "author": {"login": "harisboston"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "diffHunk": "@@ -279,21 +293,27 @@ private String redirectToLoginOrAutoLoginPage(\n     if (StringUtils.isNotEmpty(tempRegId)) {\n       Optional<UserEntity> optUser = userService.findUserByTempRegId(tempRegId);\n       if (optUser.isPresent()) {\n+        // log TEMPORARY_PASSWORD_SUCCEEDED audit log event\n+\n         UserEntity user = optUser.get();\n         logger.exit(\"tempRegId is valid, return to auto login page\");\n         cookieHelper.addCookie(response, USER_ID_COOKIE, user.getUserId());\n         cookieHelper.addCookie(response, TEMP_REG_ID_COOKIE, tempRegId);\n         return AUTO_LOGIN_VIEW_NAME;\n       }\n-\n       logger.exit(\"tempRegId is invalid, return to login page\");\n       return LOGIN_VIEW_NAME;\n     }\n+    auditHelper.logEvent(SIGNIN_FAILED_INVALID_TEMPORARY_PASSWORD, auditRequest);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQzOTQyMA=="}, "originalCommit": {"oid": "f7fc91a1df1139e152dde98feff615a57cb278f7"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MjgwMTk5OnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/UserServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNTo1Mzo0NlrOHP6vwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwOTozNDoyNFrOHUFhVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ1MzE4Ng==", "bodyText": "put Instant.now().toEpochMilli() in a variable and use it for audit log.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/899#discussion_r486453186", "createdAt": "2020-09-10T15:53:46Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/UserServiceImpl.java", "diffHunk": "@@ -360,31 +401,29 @@ private AuthenticationResponse updateInvalidLoginAttempts(\n       sendAccountLockedEmail(userEntity, tempPassword);\n       userEntity.setStatus(UserAccountStatus.ACCOUNT_LOCKED.getStatus());\n       userInfo.put(ACCOUNT_LOCK_EMAIL_TIMESTAMP, Instant.now().toEpochMilli());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7fc91a1df1139e152dde98feff615a57cb278f7"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgyNDAyMA==", "bodyText": "Fixed review comment.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/899#discussion_r490824020", "createdAt": "2020-09-18T09:34:24Z", "author": {"login": "harisboston"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/UserServiceImpl.java", "diffHunk": "@@ -360,31 +401,29 @@ private AuthenticationResponse updateInvalidLoginAttempts(\n       sendAccountLockedEmail(userEntity, tempPassword);\n       userEntity.setStatus(UserAccountStatus.ACCOUNT_LOCKED.getStatus());\n       userInfo.put(ACCOUNT_LOCK_EMAIL_TIMESTAMP, Instant.now().toEpochMilli());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ1MzE4Ng=="}, "originalCommit": {"oid": "f7fc91a1df1139e152dde98feff615a57cb278f7"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MjgxNDc5OnYy", "diffSide": "LEFT", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/UserServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNTo1NjozNVrOHP63dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwOTo0NjoyNFrOHUGBRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ1NTE1OQ==", "bodyText": "why was this part removed?\nAnything other than audit log integration is outside of the scope of this PR and should be remove to a separate PR with proper description and test coverage.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/899#discussion_r486455159", "createdAt": "2020-09-10T15:56:35Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/UserServiceImpl.java", "diffHunk": "@@ -360,31 +401,29 @@ private AuthenticationResponse updateInvalidLoginAttempts(\n       sendAccountLockedEmail(userEntity, tempPassword);\n       userEntity.setStatus(UserAccountStatus.ACCOUNT_LOCKED.getStatus());\n       userInfo.put(ACCOUNT_LOCK_EMAIL_TIMESTAMP, Instant.now().toEpochMilli());\n+\n+      Map<String, String> placeHolders = new HashMap<>();\n+      placeHolders.put(\"lock_time\", Instant.now().toString());\n+      placeHolders.put(\"failed_attempts\", String.valueOf(loginAttempts));\n+      auditHelper.logEvent(ACCOUNT_LOCKED, auditRequest, placeHolders);\n     }\n \n     userEntity.setUserInfo(userInfo);\n     userEntity = repository.saveAndFlush(userEntity);\n \n-    errorCode =\n+    ErrorCode errorCode =\n         UserAccountStatus.ACCOUNT_LOCKED.equals(UserAccountStatus.valueOf(userEntity.getStatus()))\n             ? ErrorCode.ACCOUNT_LOCKED\n-            : errorCode;\n+            : ErrorCode.INVALID_LOGIN_CREDENTIALS;\n \n     throw new ErrorCodeException(errorCode);\n   }\n \n   private AuthenticationResponse updateLoginAttemptsAndAuthenticationTime(\n-      UserEntity userEntity, JsonNode userInfoJsonNode) {\n+      UserEntity userEntity, JsonNode userInfoJsonNode, AuditLogEventRequest auditRequest) {\n+    int accountStatus = userEntity.getStatus();\n     ObjectNode passwordNode = (ObjectNode) userInfoJsonNode.get(PASSWORD);\n-    UserAccountStatus status = UserAccountStatus.valueOf(userEntity.getStatus());\n     passwordNode.remove(EXPIRE_TIMESTAMP);\n-    if (UserAccountStatus.PASSWORD_RESET.equals(status)\n-        || UserAccountStatus.ACCOUNT_LOCKED.equals(status)) {\n-      passwordNode.remove(EXPIRE_TIMESTAMP);\n-      passwordNode.put(OTP_USED, true);\n-    } else {\n-      passwordNode.remove(OTP_USED);\n-    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7fc91a1df1139e152dde98feff615a57cb278f7"}, "originalPosition": 222}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgzMjE5Nw==", "bodyText": "My bad, I have reverted the changes.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/899#discussion_r490832197", "createdAt": "2020-09-18T09:46:24Z", "author": {"login": "harisboston"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/UserServiceImpl.java", "diffHunk": "@@ -360,31 +401,29 @@ private AuthenticationResponse updateInvalidLoginAttempts(\n       sendAccountLockedEmail(userEntity, tempPassword);\n       userEntity.setStatus(UserAccountStatus.ACCOUNT_LOCKED.getStatus());\n       userInfo.put(ACCOUNT_LOCK_EMAIL_TIMESTAMP, Instant.now().toEpochMilli());\n+\n+      Map<String, String> placeHolders = new HashMap<>();\n+      placeHolders.put(\"lock_time\", Instant.now().toString());\n+      placeHolders.put(\"failed_attempts\", String.valueOf(loginAttempts));\n+      auditHelper.logEvent(ACCOUNT_LOCKED, auditRequest, placeHolders);\n     }\n \n     userEntity.setUserInfo(userInfo);\n     userEntity = repository.saveAndFlush(userEntity);\n \n-    errorCode =\n+    ErrorCode errorCode =\n         UserAccountStatus.ACCOUNT_LOCKED.equals(UserAccountStatus.valueOf(userEntity.getStatus()))\n             ? ErrorCode.ACCOUNT_LOCKED\n-            : errorCode;\n+            : ErrorCode.INVALID_LOGIN_CREDENTIALS;\n \n     throw new ErrorCodeException(errorCode);\n   }\n \n   private AuthenticationResponse updateLoginAttemptsAndAuthenticationTime(\n-      UserEntity userEntity, JsonNode userInfoJsonNode) {\n+      UserEntity userEntity, JsonNode userInfoJsonNode, AuditLogEventRequest auditRequest) {\n+    int accountStatus = userEntity.getStatus();\n     ObjectNode passwordNode = (ObjectNode) userInfoJsonNode.get(PASSWORD);\n-    UserAccountStatus status = UserAccountStatus.valueOf(userEntity.getStatus());\n     passwordNode.remove(EXPIRE_TIMESTAMP);\n-    if (UserAccountStatus.PASSWORD_RESET.equals(status)\n-        || UserAccountStatus.ACCOUNT_LOCKED.equals(status)) {\n-      passwordNode.remove(EXPIRE_TIMESTAMP);\n-      passwordNode.put(OTP_USED, true);\n-    } else {\n-      passwordNode.remove(OTP_USED);\n-    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ1NTE1OQ=="}, "originalCommit": {"oid": "f7fc91a1df1139e152dde98feff615a57cb278f7"}, "originalPosition": 222}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MjgyMTUyOnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/UserServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNTo1ODowOFrOHP67kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMDoxNDoxMVrOHUG3yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ1NjIwOQ==", "bodyText": "why is this related to signin with temporary password?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/899#discussion_r486456209", "createdAt": "2020-09-10T15:58:08Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/UserServiceImpl.java", "diffHunk": "@@ -395,26 +434,40 @@ private AuthenticationResponse updateLoginAttemptsAndAuthenticationTime(\n     userEntity.setUserInfo(userInfo);\n     userEntity = repository.saveAndFlush(userEntity);\n \n+    if (UserAccountStatus.ACTIVE.getStatus() != accountStatus) {\n+      auditHelper.logEvent(SIGNIN_WITH_TEMPORARY_PASSWORD_SUCCEEDED, auditRequest);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7fc91a1df1139e152dde98feff615a57cb278f7"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg0NjE1Mw==", "bodyText": "As per the requirement, SIGNIN_SUCCEEDED event is logged is account status is ACTIVE otherwise SIGNIN_WITH_TEMPORARY_PASSWORD_SUCCEEDED event is logged on successful login consent flow completion.\nThis code has been moved to LoginController class.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/899#discussion_r490846153", "createdAt": "2020-09-18T10:14:11Z", "author": {"login": "harisboston"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/UserServiceImpl.java", "diffHunk": "@@ -395,26 +434,40 @@ private AuthenticationResponse updateLoginAttemptsAndAuthenticationTime(\n     userEntity.setUserInfo(userInfo);\n     userEntity = repository.saveAndFlush(userEntity);\n \n+    if (UserAccountStatus.ACTIVE.getStatus() != accountStatus) {\n+      auditHelper.logEvent(SIGNIN_WITH_TEMPORARY_PASSWORD_SUCCEEDED, auditRequest);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ1NjIwOQ=="}, "originalCommit": {"oid": "f7fc91a1df1139e152dde98feff615a57cb278f7"}, "originalPosition": 232}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MjgyNTcwOnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/UserServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNTo1OTowNFrOHP6-RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMDozNDozMFrOHUHffQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ1NjkwMQ==", "bodyText": "code change is out of scope of this PR, please move to a separate PR with detailed description + test coverage.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/899#discussion_r486456901", "createdAt": "2020-09-10T15:59:04Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/UserServiceImpl.java", "diffHunk": "@@ -395,26 +434,40 @@ private AuthenticationResponse updateLoginAttemptsAndAuthenticationTime(\n     userEntity.setUserInfo(userInfo);\n     userEntity = repository.saveAndFlush(userEntity);\n \n+    if (UserAccountStatus.ACTIVE.getStatus() != accountStatus) {\n+      auditHelper.logEvent(SIGNIN_WITH_TEMPORARY_PASSWORD_SUCCEEDED, auditRequest);\n+    }\n+\n     AuthenticationResponse authenticationResponse = new AuthenticationResponse();\n     authenticationResponse.setUserId(userEntity.getUserId());\n     authenticationResponse.setAccountStatus(userEntity.getStatus());\n     authenticationResponse.setHttpStatusCode(HttpStatus.OK.value());\n     return authenticationResponse;\n   }\n \n-  private ErrorCode validatePasswordExpiryAndAccountStatus(\n-      UserEntity userEntity, JsonNode userInfo) {\n+  private void validatePasswordExpiryAndAccountStatus(\n+      UserEntity userEntity, JsonNode userInfo, AuditLogEventRequest auditRequest) {\n     JsonNode passwordNode = userInfo.get(PASSWORD);\n+    boolean passwordExpired = isPasswordExpired(passwordNode);\n     UserAccountStatus accountStatus = UserAccountStatus.valueOf(userEntity.getStatus());\n     switch (accountStatus) {\n       case DEACTIVATED:\n-        return ErrorCode.ACCOUNT_DEACTIVATED;\n+        throw new ErrorCodeException(ErrorCode.ACCOUNT_DEACTIVATED);\n       case ACCOUNT_LOCKED:\n-        return isPasswordExpired(passwordNode) ? ErrorCode.TEMP_PASSWORD_EXPIRED : null;\n+        if (passwordExpired) {\n+          auditHelper.logEvent(SIGNIN_FAILED_EXPIRED_TEMPORARY_PASSWORD, auditRequest);\n+          throw new ErrorCodeException(ErrorCode.TEMP_PASSWORD_EXPIRED);\n+        }\n       case PASSWORD_RESET:\n-        return isPasswordExpired(passwordNode) ? ErrorCode.TEMP_PASSWORD_EXPIRED : null;\n+        if (passwordExpired) {\n+          auditHelper.logEvent(SIGNIN_FAILED_EXPIRED_TEMPORARY_PASSWORD, auditRequest);\n+          throw new ErrorCodeException(ErrorCode.TEMP_PASSWORD_EXPIRED);\n+        }\n       default:\n-        return isPasswordExpired(passwordNode) ? ErrorCode.PASSWORD_EXPIRED : null;\n+        if (passwordExpired) {\n+          auditHelper.logEvent(SIGNIN_FAILED_EXPIRED_PASSWORD, auditRequest);\n+          throw new ErrorCodeException(ErrorCode.PASSWORD_EXPIRED);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7fc91a1df1139e152dde98feff615a57cb278f7"}, "originalPosition": 269}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg1NjMxNw==", "bodyText": "Added shouldReturnPasswordExpiredErrorCode() and shouldReturnTempPasswordExpiredErrorCode() test in LoginControllerTest class.\nThis is not out of scope, small refactoring needed for audit log events.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/899#discussion_r490856317", "createdAt": "2020-09-18T10:34:30Z", "author": {"login": "harisboston"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/UserServiceImpl.java", "diffHunk": "@@ -395,26 +434,40 @@ private AuthenticationResponse updateLoginAttemptsAndAuthenticationTime(\n     userEntity.setUserInfo(userInfo);\n     userEntity = repository.saveAndFlush(userEntity);\n \n+    if (UserAccountStatus.ACTIVE.getStatus() != accountStatus) {\n+      auditHelper.logEvent(SIGNIN_WITH_TEMPORARY_PASSWORD_SUCCEEDED, auditRequest);\n+    }\n+\n     AuthenticationResponse authenticationResponse = new AuthenticationResponse();\n     authenticationResponse.setUserId(userEntity.getUserId());\n     authenticationResponse.setAccountStatus(userEntity.getStatus());\n     authenticationResponse.setHttpStatusCode(HttpStatus.OK.value());\n     return authenticationResponse;\n   }\n \n-  private ErrorCode validatePasswordExpiryAndAccountStatus(\n-      UserEntity userEntity, JsonNode userInfo) {\n+  private void validatePasswordExpiryAndAccountStatus(\n+      UserEntity userEntity, JsonNode userInfo, AuditLogEventRequest auditRequest) {\n     JsonNode passwordNode = userInfo.get(PASSWORD);\n+    boolean passwordExpired = isPasswordExpired(passwordNode);\n     UserAccountStatus accountStatus = UserAccountStatus.valueOf(userEntity.getStatus());\n     switch (accountStatus) {\n       case DEACTIVATED:\n-        return ErrorCode.ACCOUNT_DEACTIVATED;\n+        throw new ErrorCodeException(ErrorCode.ACCOUNT_DEACTIVATED);\n       case ACCOUNT_LOCKED:\n-        return isPasswordExpired(passwordNode) ? ErrorCode.TEMP_PASSWORD_EXPIRED : null;\n+        if (passwordExpired) {\n+          auditHelper.logEvent(SIGNIN_FAILED_EXPIRED_TEMPORARY_PASSWORD, auditRequest);\n+          throw new ErrorCodeException(ErrorCode.TEMP_PASSWORD_EXPIRED);\n+        }\n       case PASSWORD_RESET:\n-        return isPasswordExpired(passwordNode) ? ErrorCode.TEMP_PASSWORD_EXPIRED : null;\n+        if (passwordExpired) {\n+          auditHelper.logEvent(SIGNIN_FAILED_EXPIRED_TEMPORARY_PASSWORD, auditRequest);\n+          throw new ErrorCodeException(ErrorCode.TEMP_PASSWORD_EXPIRED);\n+        }\n       default:\n-        return isPasswordExpired(passwordNode) ? ErrorCode.PASSWORD_EXPIRED : null;\n+        if (passwordExpired) {\n+          auditHelper.logEvent(SIGNIN_FAILED_EXPIRED_PASSWORD, auditRequest);\n+          throw new ErrorCodeException(ErrorCode.PASSWORD_EXPIRED);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ1NjkwMQ=="}, "originalCommit": {"oid": "f7fc91a1df1139e152dde98feff615a57cb278f7"}, "originalPosition": 269}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MjgzMjQ5OnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/test/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/ConsentControllerTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjowMDo0NFrOHP7CoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjoxOToxNVrOHXiqHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ1ODAxNg==", "bodyText": "Is there no validation that these values match our components?\nplease file a bug to add proper validation for enum values.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/899#discussion_r486458016", "createdAt": "2020-09-10T16:00:44Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/test/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/ConsentControllerTest.java", "diffHunk": "@@ -65,9 +73,37 @@ public void shouldReturnLoginPage() throws Exception {\n         .andReturn();\n   }\n \n+  @Test\n+  public void shouldReturnErrorPage() throws Exception {\n+    MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.CONSENT_PAGE.getPath())\n+                .headers(getCommonHeaders())\n+                .contextPath(getContextPath())\n+                .queryParams(queryParams))\n+        .andDo(print())\n+        .andExpect(view().name(ERROR_VIEW_NAME));\n+\n+    verifyAuditEventCall(SIGNIN_FAILED);\n+  }\n+\n   private MultiValueMap<String, String> getConsentQSParams() {\n     MultiValueMap<String, String> requestParams = new LinkedMultiValueMap<>();\n     requestParams.add(CONSENT_CHALLENGE, CONSENT_CHALLENGE_VALUE);\n     return requestParams;\n   }\n+\n+  private HttpHeaders getCommonHeaders() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n+    headers.set(\"Content-Type\", \"application/x-www-form-urlencoded;charset=UTF-8\");\n+    headers.add(AUTHORIZATION, VALID_BEARER_TOKEN);\n+    headers.add(\"appVersion\", \"1.0\");\n+    headers.add(\"appId\", \"GCPMS001\");\n+    headers.add(\"studyId\", \"MyStudies\");\n+    headers.add(\"source\", \"IntegrationTests\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7fc91a1df1139e152dde98feff615a57cb278f7"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg1ODQ1MQ==", "bodyText": "Changed appId to SCIM AUTH SERVER", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/899#discussion_r490858451", "createdAt": "2020-09-18T10:38:45Z", "author": {"login": "harisboston"}, "path": "oauth-scim-module/oauth-scim-service/src/test/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/ConsentControllerTest.java", "diffHunk": "@@ -65,9 +73,37 @@ public void shouldReturnLoginPage() throws Exception {\n         .andReturn();\n   }\n \n+  @Test\n+  public void shouldReturnErrorPage() throws Exception {\n+    MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.CONSENT_PAGE.getPath())\n+                .headers(getCommonHeaders())\n+                .contextPath(getContextPath())\n+                .queryParams(queryParams))\n+        .andDo(print())\n+        .andExpect(view().name(ERROR_VIEW_NAME));\n+\n+    verifyAuditEventCall(SIGNIN_FAILED);\n+  }\n+\n   private MultiValueMap<String, String> getConsentQSParams() {\n     MultiValueMap<String, String> requestParams = new LinkedMultiValueMap<>();\n     requestParams.add(CONSENT_CHALLENGE, CONSENT_CHALLENGE_VALUE);\n     return requestParams;\n   }\n+\n+  private HttpHeaders getCommonHeaders() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n+    headers.set(\"Content-Type\", \"application/x-www-form-urlencoded;charset=UTF-8\");\n+    headers.add(AUTHORIZATION, VALID_BEARER_TOKEN);\n+    headers.add(\"appVersion\", \"1.0\");\n+    headers.add(\"appId\", \"GCPMS001\");\n+    headers.add(\"studyId\", \"MyStudies\");\n+    headers.add(\"source\", \"IntegrationTests\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ1ODAxNg=="}, "originalCommit": {"oid": "f7fc91a1df1139e152dde98feff615a57cb278f7"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1NTk4Mg==", "bodyText": "That doesn't address the underlying issue, and validation is still needed. Please file the bug.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/899#discussion_r492255982", "createdAt": "2020-09-21T18:16:05Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/test/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/ConsentControllerTest.java", "diffHunk": "@@ -65,9 +73,37 @@ public void shouldReturnLoginPage() throws Exception {\n         .andReturn();\n   }\n \n+  @Test\n+  public void shouldReturnErrorPage() throws Exception {\n+    MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.CONSENT_PAGE.getPath())\n+                .headers(getCommonHeaders())\n+                .contextPath(getContextPath())\n+                .queryParams(queryParams))\n+        .andDo(print())\n+        .andExpect(view().name(ERROR_VIEW_NAME));\n+\n+    verifyAuditEventCall(SIGNIN_FAILED);\n+  }\n+\n   private MultiValueMap<String, String> getConsentQSParams() {\n     MultiValueMap<String, String> requestParams = new LinkedMultiValueMap<>();\n     requestParams.add(CONSENT_CHALLENGE, CONSENT_CHALLENGE_VALUE);\n     return requestParams;\n   }\n+\n+  private HttpHeaders getCommonHeaders() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n+    headers.set(\"Content-Type\", \"application/x-www-form-urlencoded;charset=UTF-8\");\n+    headers.add(AUTHORIZATION, VALID_BEARER_TOKEN);\n+    headers.add(\"appVersion\", \"1.0\");\n+    headers.add(\"appId\", \"GCPMS001\");\n+    headers.add(\"studyId\", \"MyStudies\");\n+    headers.add(\"source\", \"IntegrationTests\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ1ODAxNg=="}, "originalCommit": {"oid": "f7fc91a1df1139e152dde98feff615a57cb278f7"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ0NzEzMg==", "bodyText": "Added validation code in AuditEventMapper, PlatformComponent and BaseMockIT class.\nAccordingly modified the value of source for other modules as well.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/899#discussion_r494447132", "createdAt": "2020-09-24T16:19:15Z", "author": {"login": "harisboston"}, "path": "oauth-scim-module/oauth-scim-service/src/test/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/ConsentControllerTest.java", "diffHunk": "@@ -65,9 +73,37 @@ public void shouldReturnLoginPage() throws Exception {\n         .andReturn();\n   }\n \n+  @Test\n+  public void shouldReturnErrorPage() throws Exception {\n+    MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.CONSENT_PAGE.getPath())\n+                .headers(getCommonHeaders())\n+                .contextPath(getContextPath())\n+                .queryParams(queryParams))\n+        .andDo(print())\n+        .andExpect(view().name(ERROR_VIEW_NAME));\n+\n+    verifyAuditEventCall(SIGNIN_FAILED);\n+  }\n+\n   private MultiValueMap<String, String> getConsentQSParams() {\n     MultiValueMap<String, String> requestParams = new LinkedMultiValueMap<>();\n     requestParams.add(CONSENT_CHALLENGE, CONSENT_CHALLENGE_VALUE);\n     return requestParams;\n   }\n+\n+  private HttpHeaders getCommonHeaders() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n+    headers.set(\"Content-Type\", \"application/x-www-form-urlencoded;charset=UTF-8\");\n+    headers.add(AUTHORIZATION, VALID_BEARER_TOKEN);\n+    headers.add(\"appVersion\", \"1.0\");\n+    headers.add(\"appId\", \"GCPMS001\");\n+    headers.add(\"studyId\", \"MyStudies\");\n+    headers.add(\"source\", \"IntegrationTests\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ1ODAxNg=="}, "originalCommit": {"oid": "f7fc91a1df1139e152dde98feff615a57cb278f7"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDU1NTk5OnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/common/AuthScimEvent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODoxNzoxN1rOHVc9cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOTo1NjowM1rOHXS1wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1NjYyNA==", "bodyText": "description seems redundant", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/899#discussion_r492256624", "createdAt": "2020-09-21T18:17:17Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/common/AuthScimEvent.java", "diffHunk": "@@ -18,19 +18,111 @@\n \n @Getter\n public enum AuthScimEvent implements AuditLogEvent {\n-  PASSWORD_RESET_SUCCESS(\n+  SIGNIN_SUCCEEDED(null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"SIGNIN_SUCCEEDED\"),\n+\n+  SIGNIN_FAILED(null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"SIGNIN_FAILED\"),\n+\n+  SIGNIN_FAILED_UNREGISTERED_USER(\n+      null,\n+      SCIM_AUTH_SERVER,\n+      PARTICIPANT_DATASTORE,\n+      \"Sign-in failure due to unregistered username.\",\n+      \"SIGNIN_FAILED_UNREGISTERED_USER\"),\n+\n+  SIGNIN_FAILED_INVALID_PASSWORD(\n+      null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"SIGNIN_FAILED_INVALID_PASSWORD\"),\n+\n+  SIGNIN_FAILED_EXPIRED_PASSWORD(\n+      null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"SIGNIN_FAILED_EXPIRED_PASSWORD\"),\n+\n+  PASSWORD_HELP_REQUESTED(\n+      null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"PASSWORD_HELP_REQUESTED\"),\n+\n+  PASSWORD_HELP_REQUESTED_FOR_UNREGISTERED_USERNAME(\n+      null,\n+      SCIM_AUTH_SERVER,\n       PARTICIPANT_DATASTORE,\n+      null,\n+      \"PASSWORD_HELP_REQUESTED_FOR_UNREGISTERED_USERNAME\"),\n+\n+  PASSWORD_HELP_EMAIL_SENT(\n+      null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"PASSWORD_HELP_EMAIL_SENT\"),\n+\n+  PASSWORD_HELP_EMAIL_FAILED(\n+      null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"PASSWORD_HELP_EMAIL_FAILED\"),\n+\n+  SIGNIN_WITH_TEMPORARY_PASSWORD_SUCCEEDED(\n+      null,\n+      SCIM_AUTH_SERVER,\n+      PARTICIPANT_DATASTORE,\n+      \"User signed in with temporary password.\",\n+      \"SIGNIN_WITH_TEMPORARY_PASSWORD_SUCCEEDED\"),\n+\n+  SIGNIN_WITH_TEMPORARY_PASSWORD_FAILED(\n+      null,\n+      SCIM_AUTH_SERVER,\n+      PARTICIPANT_DATASTORE,\n+      \"Sign-in with temporary password failed.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b873375b90d3341ff8c43c194985aa1d85b8c3d3"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE4Nzk2OQ==", "bodyText": "Fixed review comment.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/899#discussion_r494187969", "createdAt": "2020-09-24T09:56:03Z", "author": {"login": "harisboston"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/common/AuthScimEvent.java", "diffHunk": "@@ -18,19 +18,111 @@\n \n @Getter\n public enum AuthScimEvent implements AuditLogEvent {\n-  PASSWORD_RESET_SUCCESS(\n+  SIGNIN_SUCCEEDED(null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"SIGNIN_SUCCEEDED\"),\n+\n+  SIGNIN_FAILED(null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"SIGNIN_FAILED\"),\n+\n+  SIGNIN_FAILED_UNREGISTERED_USER(\n+      null,\n+      SCIM_AUTH_SERVER,\n+      PARTICIPANT_DATASTORE,\n+      \"Sign-in failure due to unregistered username.\",\n+      \"SIGNIN_FAILED_UNREGISTERED_USER\"),\n+\n+  SIGNIN_FAILED_INVALID_PASSWORD(\n+      null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"SIGNIN_FAILED_INVALID_PASSWORD\"),\n+\n+  SIGNIN_FAILED_EXPIRED_PASSWORD(\n+      null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"SIGNIN_FAILED_EXPIRED_PASSWORD\"),\n+\n+  PASSWORD_HELP_REQUESTED(\n+      null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"PASSWORD_HELP_REQUESTED\"),\n+\n+  PASSWORD_HELP_REQUESTED_FOR_UNREGISTERED_USERNAME(\n+      null,\n+      SCIM_AUTH_SERVER,\n       PARTICIPANT_DATASTORE,\n+      null,\n+      \"PASSWORD_HELP_REQUESTED_FOR_UNREGISTERED_USERNAME\"),\n+\n+  PASSWORD_HELP_EMAIL_SENT(\n+      null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"PASSWORD_HELP_EMAIL_SENT\"),\n+\n+  PASSWORD_HELP_EMAIL_FAILED(\n+      null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"PASSWORD_HELP_EMAIL_FAILED\"),\n+\n+  SIGNIN_WITH_TEMPORARY_PASSWORD_SUCCEEDED(\n+      null,\n+      SCIM_AUTH_SERVER,\n+      PARTICIPANT_DATASTORE,\n+      \"User signed in with temporary password.\",\n+      \"SIGNIN_WITH_TEMPORARY_PASSWORD_SUCCEEDED\"),\n+\n+  SIGNIN_WITH_TEMPORARY_PASSWORD_FAILED(\n+      null,\n+      SCIM_AUTH_SERVER,\n+      PARTICIPANT_DATASTORE,\n+      \"Sign-in with temporary password failed.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1NjYyNA=="}, "originalCommit": {"oid": "b873375b90d3341ff8c43c194985aa1d85b8c3d3"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDU1NjkyOnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/common/AuthScimEvent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODoxNzozMlrOHVc99g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOTo1NjoyMFrOHXS2bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1Njc1OA==", "bodyText": "description seems redundant.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/899#discussion_r492256758", "createdAt": "2020-09-21T18:17:32Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/common/AuthScimEvent.java", "diffHunk": "@@ -18,19 +18,111 @@\n \n @Getter\n public enum AuthScimEvent implements AuditLogEvent {\n-  PASSWORD_RESET_SUCCESS(\n+  SIGNIN_SUCCEEDED(null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"SIGNIN_SUCCEEDED\"),\n+\n+  SIGNIN_FAILED(null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"SIGNIN_FAILED\"),\n+\n+  SIGNIN_FAILED_UNREGISTERED_USER(\n+      null,\n+      SCIM_AUTH_SERVER,\n+      PARTICIPANT_DATASTORE,\n+      \"Sign-in failure due to unregistered username.\",\n+      \"SIGNIN_FAILED_UNREGISTERED_USER\"),\n+\n+  SIGNIN_FAILED_INVALID_PASSWORD(\n+      null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"SIGNIN_FAILED_INVALID_PASSWORD\"),\n+\n+  SIGNIN_FAILED_EXPIRED_PASSWORD(\n+      null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"SIGNIN_FAILED_EXPIRED_PASSWORD\"),\n+\n+  PASSWORD_HELP_REQUESTED(\n+      null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"PASSWORD_HELP_REQUESTED\"),\n+\n+  PASSWORD_HELP_REQUESTED_FOR_UNREGISTERED_USERNAME(\n+      null,\n+      SCIM_AUTH_SERVER,\n       PARTICIPANT_DATASTORE,\n+      null,\n+      \"PASSWORD_HELP_REQUESTED_FOR_UNREGISTERED_USERNAME\"),\n+\n+  PASSWORD_HELP_EMAIL_SENT(\n+      null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"PASSWORD_HELP_EMAIL_SENT\"),\n+\n+  PASSWORD_HELP_EMAIL_FAILED(\n+      null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"PASSWORD_HELP_EMAIL_FAILED\"),\n+\n+  SIGNIN_WITH_TEMPORARY_PASSWORD_SUCCEEDED(\n+      null,\n+      SCIM_AUTH_SERVER,\n+      PARTICIPANT_DATASTORE,\n+      \"User signed in with temporary password.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b873375b90d3341ff8c43c194985aa1d85b8c3d3"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE4ODE0MA==", "bodyText": "Fixed review comment.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/899#discussion_r494188140", "createdAt": "2020-09-24T09:56:20Z", "author": {"login": "harisboston"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/common/AuthScimEvent.java", "diffHunk": "@@ -18,19 +18,111 @@\n \n @Getter\n public enum AuthScimEvent implements AuditLogEvent {\n-  PASSWORD_RESET_SUCCESS(\n+  SIGNIN_SUCCEEDED(null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"SIGNIN_SUCCEEDED\"),\n+\n+  SIGNIN_FAILED(null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"SIGNIN_FAILED\"),\n+\n+  SIGNIN_FAILED_UNREGISTERED_USER(\n+      null,\n+      SCIM_AUTH_SERVER,\n+      PARTICIPANT_DATASTORE,\n+      \"Sign-in failure due to unregistered username.\",\n+      \"SIGNIN_FAILED_UNREGISTERED_USER\"),\n+\n+  SIGNIN_FAILED_INVALID_PASSWORD(\n+      null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"SIGNIN_FAILED_INVALID_PASSWORD\"),\n+\n+  SIGNIN_FAILED_EXPIRED_PASSWORD(\n+      null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"SIGNIN_FAILED_EXPIRED_PASSWORD\"),\n+\n+  PASSWORD_HELP_REQUESTED(\n+      null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"PASSWORD_HELP_REQUESTED\"),\n+\n+  PASSWORD_HELP_REQUESTED_FOR_UNREGISTERED_USERNAME(\n+      null,\n+      SCIM_AUTH_SERVER,\n       PARTICIPANT_DATASTORE,\n+      null,\n+      \"PASSWORD_HELP_REQUESTED_FOR_UNREGISTERED_USERNAME\"),\n+\n+  PASSWORD_HELP_EMAIL_SENT(\n+      null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"PASSWORD_HELP_EMAIL_SENT\"),\n+\n+  PASSWORD_HELP_EMAIL_FAILED(\n+      null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"PASSWORD_HELP_EMAIL_FAILED\"),\n+\n+  SIGNIN_WITH_TEMPORARY_PASSWORD_SUCCEEDED(\n+      null,\n+      SCIM_AUTH_SERVER,\n+      PARTICIPANT_DATASTORE,\n+      \"User signed in with temporary password.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1Njc1OA=="}, "originalCommit": {"oid": "b873375b90d3341ff8c43c194985aa1d85b8c3d3"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDU1Nzk2OnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/common/AuthScimEvent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODoxNzo0OFrOHVc-mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOTo1NjoyN1rOHXS2uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1NjkyMg==", "bodyText": "description is redundant.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/899#discussion_r492256922", "createdAt": "2020-09-21T18:17:48Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/common/AuthScimEvent.java", "diffHunk": "@@ -18,19 +18,111 @@\n \n @Getter\n public enum AuthScimEvent implements AuditLogEvent {\n-  PASSWORD_RESET_SUCCESS(\n+  SIGNIN_SUCCEEDED(null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"SIGNIN_SUCCEEDED\"),\n+\n+  SIGNIN_FAILED(null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"SIGNIN_FAILED\"),\n+\n+  SIGNIN_FAILED_UNREGISTERED_USER(\n+      null,\n+      SCIM_AUTH_SERVER,\n+      PARTICIPANT_DATASTORE,\n+      \"Sign-in failure due to unregistered username.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b873375b90d3341ff8c43c194985aa1d85b8c3d3"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE4ODIxNw==", "bodyText": "Fixed review comment.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/899#discussion_r494188217", "createdAt": "2020-09-24T09:56:27Z", "author": {"login": "harisboston"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/common/AuthScimEvent.java", "diffHunk": "@@ -18,19 +18,111 @@\n \n @Getter\n public enum AuthScimEvent implements AuditLogEvent {\n-  PASSWORD_RESET_SUCCESS(\n+  SIGNIN_SUCCEEDED(null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"SIGNIN_SUCCEEDED\"),\n+\n+  SIGNIN_FAILED(null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"SIGNIN_FAILED\"),\n+\n+  SIGNIN_FAILED_UNREGISTERED_USER(\n+      null,\n+      SCIM_AUTH_SERVER,\n+      PARTICIPANT_DATASTORE,\n+      \"Sign-in failure due to unregistered username.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1NjkyMg=="}, "originalCommit": {"oid": "b873375b90d3341ff8c43c194985aa1d85b8c3d3"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDU3MjE5OnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/UserServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODoyMTo0M1rOHVdHPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDoyMDo1NlrOHXdUlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1OTEzMw==", "bodyText": "to me it seems like PASSWORD_RESET_SUCCEEDED should only be posted when a password has been reset successfully by the user. from the code it seems like we are logging this event when the account is still locked and/or not properly setup.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/899#discussion_r492259133", "createdAt": "2020-09-21T18:21:43Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/UserServiceImpl.java", "diffHunk": "@@ -193,17 +212,26 @@ public ResetPasswordResponse resetPassword(\n     EmailResponse emailResponse = sendPasswordResetEmail(resetPasswordRequest, tempPassword);\n \n     if (HttpStatus.ACCEPTED.value() == emailResponse.getHttpStatusCode()) {\n-\n       ObjectNode userInfo = (ObjectNode) userEntity.getUserInfo();\n       setPasswordAndPasswordHistoryFields(tempPassword, userInfo, userEntity.getStatus());\n       userEntity.setUserInfo(userInfo);\n       repository.saveAndFlush(userEntity);\n+      auditHelper.logEvent(PASSWORD_HELP_EMAIL_SENT, auditRequest);\n+      if (userEntity.getStatus() == UserAccountStatus.ACCOUNT_LOCKED.getStatus()) {\n+        auditHelper.logEvent(PASSWORD_RESET_EMAIL_SENT_FOR_LOCKED_ACCOUNT, auditRequest);\n+      }\n+\n+      auditHelper.logEvent(PASSWORD_RESET_SUCCEEDED, auditRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b873375b90d3341ff8c43c194985aa1d85b8c3d3"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM1OTcwMg==", "bodyText": "Moved PASSWORD_RESET_SUCCEEDED event to UserController class.\nLogging PASSWORD_RESET_SUCCEEDED event after validating resetPasswordResponse.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/899#discussion_r494359702", "createdAt": "2020-09-24T14:20:56Z", "author": {"login": "harisboston"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/UserServiceImpl.java", "diffHunk": "@@ -193,17 +212,26 @@ public ResetPasswordResponse resetPassword(\n     EmailResponse emailResponse = sendPasswordResetEmail(resetPasswordRequest, tempPassword);\n \n     if (HttpStatus.ACCEPTED.value() == emailResponse.getHttpStatusCode()) {\n-\n       ObjectNode userInfo = (ObjectNode) userEntity.getUserInfo();\n       setPasswordAndPasswordHistoryFields(tempPassword, userInfo, userEntity.getStatus());\n       userEntity.setUserInfo(userInfo);\n       repository.saveAndFlush(userEntity);\n+      auditHelper.logEvent(PASSWORD_HELP_EMAIL_SENT, auditRequest);\n+      if (userEntity.getStatus() == UserAccountStatus.ACCOUNT_LOCKED.getStatus()) {\n+        auditHelper.logEvent(PASSWORD_RESET_EMAIL_SENT_FOR_LOCKED_ACCOUNT, auditRequest);\n+      }\n+\n+      auditHelper.logEvent(PASSWORD_RESET_SUCCEEDED, auditRequest);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1OTEzMw=="}, "originalCommit": {"oid": "b873375b90d3341ff8c43c194985aa1d85b8c3d3"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDU3NDMwOnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/UserServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODoyMjoxNlrOHVdIkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNjowMzozNFrOHVrPXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1OTQ3NA==", "bodyText": "remove redundant comment", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/899#discussion_r492259474", "createdAt": "2020-09-21T18:22:16Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/UserServiceImpl.java", "diffHunk": "@@ -291,13 +322,16 @@ private ErrorCode validateChangePasswordRequest(\n \n   @Override\n   @Transactional(noRollbackFor = ErrorCodeException.class)\n-  public AuthenticationResponse authenticate(UserRequest user) throws JsonProcessingException {\n+  public AuthenticationResponse authenticate(UserRequest user, AuditLogEventRequest auditRequest)\n+      throws JsonProcessingException {\n     logger.entry(\"begin authenticate(user)\");\n     // check if the email present in the database\n     Optional<UserEntity> optUserEntity =\n         repository.findByAppIdAndEmail(user.getAppId(), user.getEmail());\n \n     if (!optUserEntity.isPresent()) {\n+      // log SIGNIN_FAILED_UNREGISTERED_USER event", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b873375b90d3341ff8c43c194985aa1d85b8c3d3"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ5MDU4OA==", "bodyText": "Fixed review comment", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/899#discussion_r492490588", "createdAt": "2020-09-22T06:03:34Z", "author": {"login": "harisboston"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/UserServiceImpl.java", "diffHunk": "@@ -291,13 +322,16 @@ private ErrorCode validateChangePasswordRequest(\n \n   @Override\n   @Transactional(noRollbackFor = ErrorCodeException.class)\n-  public AuthenticationResponse authenticate(UserRequest user) throws JsonProcessingException {\n+  public AuthenticationResponse authenticate(UserRequest user, AuditLogEventRequest auditRequest)\n+      throws JsonProcessingException {\n     logger.entry(\"begin authenticate(user)\");\n     // check if the email present in the database\n     Optional<UserEntity> optUserEntity =\n         repository.findByAppIdAndEmail(user.getAppId(), user.getEmail());\n \n     if (!optUserEntity.isPresent()) {\n+      // log SIGNIN_FAILED_UNREGISTERED_USER event", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1OTQ3NA=="}, "originalCommit": {"oid": "b873375b90d3341ff8c43c194985aa1d85b8c3d3"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5ODcxNTc5OnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/common/AuthScimEvent.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNjowNDo1NFrOHYJwpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNjo1MToyMFrOHYLSDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA4Nzc4Mg==", "bodyText": "description is redundant.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/899#discussion_r495087782", "createdAt": "2020-09-25T16:04:54Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/common/AuthScimEvent.java", "diffHunk": "@@ -18,19 +18,103 @@\n \n @Getter\n public enum AuthScimEvent implements AuditLogEvent {\n-  PASSWORD_RESET_SUCCESS(\n+  SIGNIN_SUCCEEDED(null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"SIGNIN_SUCCEEDED\"),\n+\n+  SIGNIN_FAILED(null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"SIGNIN_FAILED\"),\n+\n+  SIGNIN_FAILED_UNREGISTERED_USER(\n+      null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"SIGNIN_FAILED_UNREGISTERED_USER\"),\n+\n+  SIGNIN_FAILED_INVALID_PASSWORD(\n+      null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"SIGNIN_FAILED_INVALID_PASSWORD\"),\n+\n+  SIGNIN_FAILED_EXPIRED_PASSWORD(\n+      null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"SIGNIN_FAILED_EXPIRED_PASSWORD\"),\n+\n+  PASSWORD_HELP_REQUESTED(\n+      null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"PASSWORD_HELP_REQUESTED\"),\n+\n+  PASSWORD_HELP_REQUESTED_FOR_UNREGISTERED_USERNAME(\n+      null,\n+      SCIM_AUTH_SERVER,\n+      PARTICIPANT_DATASTORE,\n+      null,\n+      \"PASSWORD_HELP_REQUESTED_FOR_UNREGISTERED_USERNAME\"),\n+\n+  PASSWORD_HELP_EMAIL_SENT(\n+      null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"PASSWORD_HELP_EMAIL_SENT\"),\n+\n+  PASSWORD_HELP_EMAIL_FAILED(\n+      null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"PASSWORD_HELP_EMAIL_FAILED\"),\n+\n+  SIGNIN_WITH_TEMPORARY_PASSWORD_SUCCEEDED(\n+      null,\n+      SCIM_AUTH_SERVER,\n       PARTICIPANT_DATASTORE,\n+      null,\n+      \"SIGNIN_WITH_TEMPORARY_PASSWORD_SUCCEEDED\"),\n+\n+  SIGNIN_WITH_TEMPORARY_PASSWORD_FAILED(\n+      null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"SIGNIN_WITH_TEMPORARY_PASSWORD_FAILED\"),\n+\n+  SIGNIN_FAILED_EXPIRED_TEMPORARY_PASSWORD(\n+      null,\n       SCIM_AUTH_SERVER,\n       PARTICIPANT_DATASTORE,\n-      \"Password reset successful.\",\n-      \"PASSWORD_RESET_SUCCESS\"),\n+      \"Sign-in failure due to expired temporary password.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1522c2be5a45fac676ed8ca3c5e7141b1d2a0b12"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTExMjcxOA==", "bodyText": "Fixed review comment", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/899#discussion_r495112718", "createdAt": "2020-09-25T16:51:20Z", "author": {"login": "harisboston"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/common/AuthScimEvent.java", "diffHunk": "@@ -18,19 +18,103 @@\n \n @Getter\n public enum AuthScimEvent implements AuditLogEvent {\n-  PASSWORD_RESET_SUCCESS(\n+  SIGNIN_SUCCEEDED(null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"SIGNIN_SUCCEEDED\"),\n+\n+  SIGNIN_FAILED(null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"SIGNIN_FAILED\"),\n+\n+  SIGNIN_FAILED_UNREGISTERED_USER(\n+      null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"SIGNIN_FAILED_UNREGISTERED_USER\"),\n+\n+  SIGNIN_FAILED_INVALID_PASSWORD(\n+      null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"SIGNIN_FAILED_INVALID_PASSWORD\"),\n+\n+  SIGNIN_FAILED_EXPIRED_PASSWORD(\n+      null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"SIGNIN_FAILED_EXPIRED_PASSWORD\"),\n+\n+  PASSWORD_HELP_REQUESTED(\n+      null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"PASSWORD_HELP_REQUESTED\"),\n+\n+  PASSWORD_HELP_REQUESTED_FOR_UNREGISTERED_USERNAME(\n+      null,\n+      SCIM_AUTH_SERVER,\n+      PARTICIPANT_DATASTORE,\n+      null,\n+      \"PASSWORD_HELP_REQUESTED_FOR_UNREGISTERED_USERNAME\"),\n+\n+  PASSWORD_HELP_EMAIL_SENT(\n+      null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"PASSWORD_HELP_EMAIL_SENT\"),\n+\n+  PASSWORD_HELP_EMAIL_FAILED(\n+      null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"PASSWORD_HELP_EMAIL_FAILED\"),\n+\n+  SIGNIN_WITH_TEMPORARY_PASSWORD_SUCCEEDED(\n+      null,\n+      SCIM_AUTH_SERVER,\n       PARTICIPANT_DATASTORE,\n+      null,\n+      \"SIGNIN_WITH_TEMPORARY_PASSWORD_SUCCEEDED\"),\n+\n+  SIGNIN_WITH_TEMPORARY_PASSWORD_FAILED(\n+      null, SCIM_AUTH_SERVER, PARTICIPANT_DATASTORE, null, \"SIGNIN_WITH_TEMPORARY_PASSWORD_FAILED\"),\n+\n+  SIGNIN_FAILED_EXPIRED_TEMPORARY_PASSWORD(\n+      null,\n       SCIM_AUTH_SERVER,\n       PARTICIPANT_DATASTORE,\n-      \"Password reset successful.\",\n-      \"PASSWORD_RESET_SUCCESS\"),\n+      \"Sign-in failure due to expired temporary password.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA4Nzc4Mg=="}, "originalCommit": {"oid": "1522c2be5a45fac676ed8ca3c5e7141b1d2a0b12"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5ODczNDU2OnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/UserServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNjoxMDoxMFrOHYJ8MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNjo1Njo0NlrOHYLdeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA5MDczNw==", "bodyText": "do we need to log both PASSWORD_HELP_EMAIL_FAILED and PASSWORD_HELP_EMAIL_FAILED for this case?\nand similarly for the success, do we need to log both PASSWORD_HELP_EMAIL_SENT and PASSWORD_RESET_EMAIL_SENT_FOR_LOCKED_ACCOUNT when account is locked?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/899#discussion_r495090737", "createdAt": "2020-09-25T16:10:10Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/UserServiceImpl.java", "diffHunk": "@@ -193,17 +211,25 @@ public ResetPasswordResponse resetPassword(\n     EmailResponse emailResponse = sendPasswordResetEmail(resetPasswordRequest, tempPassword);\n \n     if (HttpStatus.ACCEPTED.value() == emailResponse.getHttpStatusCode()) {\n-\n       ObjectNode userInfo = (ObjectNode) userEntity.getUserInfo();\n       setPasswordAndPasswordHistoryFields(tempPassword, userInfo, userEntity.getStatus());\n       userEntity.setUserInfo(userInfo);\n       repository.saveAndFlush(userEntity);\n+      auditHelper.logEvent(PASSWORD_HELP_EMAIL_SENT, auditRequest);\n+      if (userEntity.getStatus() == UserAccountStatus.ACCOUNT_LOCKED.getStatus()) {\n+        auditHelper.logEvent(PASSWORD_RESET_EMAIL_SENT_FOR_LOCKED_ACCOUNT, auditRequest);\n+      }\n+\n       logger.exit(MessageCode.PASSWORD_RESET_SUCCESS);\n-      auditHelper.logEvent(PASSWORD_RESET_SUCCESS, auditRequest);\n       return new ResetPasswordResponse(MessageCode.PASSWORD_RESET_SUCCESS);\n-    } else {\n-      auditHelper.logEvent(PASSWORD_RESET_FAILED, auditRequest);\n     }\n+\n+    auditHelper.logEvent(PASSWORD_HELP_EMAIL_FAILED, auditRequest);\n+    auditHelper.logEvent(PASSWORD_RESET_FAILED, auditRequest);\n+    if (userEntity.getStatus() == UserAccountStatus.ACCOUNT_LOCKED.getStatus()) {\n+      auditHelper.logEvent(PASSWORD_RESET_EMAIL_FAILED_FOR_LOCKED_ACCOUNT, auditRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1522c2be5a45fac676ed8ca3c5e7141b1d2a0b12"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTExNTY0MA==", "bodyText": "Confirmed with Shanthala,\nEvent PASSWORD_HELP_EMAIL_SENT will be logged for users whose account status is ACTIVE.\nEvent PASSWORD_RESET_EMAIL_SENT_FOR_LOCKED_ACCOUNT will be logged for users whose account status is LOCKED.\nAccordingly modified the code and added test case as well shouldSendPasswordResetEmail().", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/899#discussion_r495115640", "createdAt": "2020-09-25T16:56:46Z", "author": {"login": "harisboston"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/UserServiceImpl.java", "diffHunk": "@@ -193,17 +211,25 @@ public ResetPasswordResponse resetPassword(\n     EmailResponse emailResponse = sendPasswordResetEmail(resetPasswordRequest, tempPassword);\n \n     if (HttpStatus.ACCEPTED.value() == emailResponse.getHttpStatusCode()) {\n-\n       ObjectNode userInfo = (ObjectNode) userEntity.getUserInfo();\n       setPasswordAndPasswordHistoryFields(tempPassword, userInfo, userEntity.getStatus());\n       userEntity.setUserInfo(userInfo);\n       repository.saveAndFlush(userEntity);\n+      auditHelper.logEvent(PASSWORD_HELP_EMAIL_SENT, auditRequest);\n+      if (userEntity.getStatus() == UserAccountStatus.ACCOUNT_LOCKED.getStatus()) {\n+        auditHelper.logEvent(PASSWORD_RESET_EMAIL_SENT_FOR_LOCKED_ACCOUNT, auditRequest);\n+      }\n+\n       logger.exit(MessageCode.PASSWORD_RESET_SUCCESS);\n-      auditHelper.logEvent(PASSWORD_RESET_SUCCESS, auditRequest);\n       return new ResetPasswordResponse(MessageCode.PASSWORD_RESET_SUCCESS);\n-    } else {\n-      auditHelper.logEvent(PASSWORD_RESET_FAILED, auditRequest);\n     }\n+\n+    auditHelper.logEvent(PASSWORD_HELP_EMAIL_FAILED, auditRequest);\n+    auditHelper.logEvent(PASSWORD_RESET_FAILED, auditRequest);\n+    if (userEntity.getStatus() == UserAccountStatus.ACCOUNT_LOCKED.getStatus()) {\n+      auditHelper.logEvent(PASSWORD_RESET_EMAIL_FAILED_FOR_LOCKED_ACCOUNT, auditRequest);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA5MDczNw=="}, "originalCommit": {"oid": "1522c2be5a45fac676ed8ca3c5e7141b1d2a0b12"}, "originalPosition": 87}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1967, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}