{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzMzEyNjA0", "number": 1377, "title": "Fixed issue #1205 Weak password generation process", "bodyText": "Fixed issue #1205 Weak password generation process\nAdded test case\ncode format + organize import", "createdAt": "2020-10-14T11:42:32Z", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1377", "merged": true, "mergeCommit": {"oid": "4d77a405413506376fe3fb2d4f447c394937ee12"}, "closed": true, "closedAt": "2020-10-23T04:08:01Z", "author": {"login": "harisboston"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdSbopDAH2gAyNTAzMzEyNjA0OjdlY2NhZjQyMjg0NTA0YWZiODA3ZDYyM2VhNGIwNjBjZDQxNTNjODU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdVOgo7AH2gAyNTAzMzEyNjA0OjU3Mjc1NmY0NGY2NGUyNDMyNDBjNGY5ZmIwYjBhZThkYmMxZDU0Njg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7eccaf42284504afb807d623ea4b060cd4153c85", "author": {"user": {"login": "harisboston", "name": "Haris Hasan"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/7eccaf42284504afb807d623ea4b060cd4153c85", "committedDate": "2020-10-14T11:39:42Z", "message": "Fixed security issue Weak password generation process #1205\n\nFixed security issue Weak password generation process #1205.\nAdded test case.\ncode format + organize import."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4Mzk0NjAy", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1377#pullrequestreview-508394602", "createdAt": "2020-10-14T14:15:52Z", "commit": {"oid": "7eccaf42284504afb807d623ea4b060cd4153c85"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDoxNTo1MlrOHhVSSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDoxNjoyNlrOHhVT4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcxMzgwMQ==", "bodyText": "You are still using shuffle, the bug specifically asking to not use shuffle.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1377#discussion_r504713801", "createdAt": "2020-10-14T14:15:52Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/PasswordGenerator.java", "diffHunk": "@@ -8,42 +8,40 @@\n \n package com.google.cloud.healthcare.fdamystudies.common;\n \n-import java.security.SecureRandom;\n-import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.commons.text.RandomStringGenerator;\n+import org.apache.commons.text.RandomStringGenerator.Builder;\n+import org.apache.syncope.common.lib.SecureTextRandomProvider;\n \n public final class PasswordGenerator {\n \n-  private static final String[] ALLOWED_CHAR_GROUPS =\n-      new String[] {\n-        \"abcdefghijklmnopqrstuvwxyz\", \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", \"0123456789\", \"!#$%&\"\n-      };\n-\n-  private static SecureRandom secureRandom = new SecureRandom();\n+  public static final String SPECIAL_CHARS = \"!#$%&()*?@{}\";\n \n   private PasswordGenerator() {}\n \n   public static String generate(int length) {\n-    StringBuilder password = new StringBuilder();\n+    int count = length / 4;\n+    int extra = length % 4;\n \n-    while (password.length() < length) {\n-      for (int i = 0; i < ALLOWED_CHAR_GROUPS.length; i++) {\n-        int randomIndex = secureRandom.nextInt(ALLOWED_CHAR_GROUPS[i].length());\n-        password.append(ALLOWED_CHAR_GROUPS[i].charAt(randomIndex));\n-      }\n-    }\n+    Builder builder =\n+        new RandomStringGenerator.Builder().usingRandom(new SecureTextRandomProvider());\n \n-    return shuffle(password.toString());\n-  }\n-\n-  private static String shuffle(String value) {\n-    List<String> letters = Arrays.asList(value.split(\"\"));\n-    Collections.shuffle(letters);\n-    StringBuilder builder = new StringBuilder();\n-    for (String letter : letters) {\n-      builder.append(letter);\n-    }\n-    return builder.toString();\n+    StringBuilder password = new StringBuilder();\n+    password\n+        .append(builder.withinRange(48, 57).build().generate(count)) // numbers\n+        .append(builder.withinRange(65, 90).build().generate(count + extra)) // upper case letters\n+        .append(builder.withinRange(97, 122).build().generate(count)) // lower case letters\n+        .append(builder.selectFrom(SPECIAL_CHARS.toCharArray()).build().generate(count));\n+\n+    List<Character> passwordChars =\n+        password.chars().mapToObj(data -> (char) data).collect(Collectors.toList());\n+    Collections.shuffle(passwordChars);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7eccaf42284504afb807d623ea4b060cd4153c85"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcxNDIwOQ==", "bodyText": "How about allowing your RandomStringGenerator to choose the order and placement of characters?\nnew RandomStringGenerator.Builder()\n            .usingRandom(new SecureTextRandomProvider())\n            .filteredBy(\n                    codePoint -> (codePoint >= 'a' && codePoint <= 'z') || (codePoint >= '0' && codePoint <= '9') || (codePoint >= 'A' && codePoint <= 'Z'))\n            .build();", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1377#discussion_r504714209", "createdAt": "2020-10-14T14:16:26Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/PasswordGenerator.java", "diffHunk": "@@ -8,42 +8,40 @@\n \n package com.google.cloud.healthcare.fdamystudies.common;\n \n-import java.security.SecureRandom;\n-import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.commons.text.RandomStringGenerator;\n+import org.apache.commons.text.RandomStringGenerator.Builder;\n+import org.apache.syncope.common.lib.SecureTextRandomProvider;\n \n public final class PasswordGenerator {\n \n-  private static final String[] ALLOWED_CHAR_GROUPS =\n-      new String[] {\n-        \"abcdefghijklmnopqrstuvwxyz\", \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", \"0123456789\", \"!#$%&\"\n-      };\n-\n-  private static SecureRandom secureRandom = new SecureRandom();\n+  public static final String SPECIAL_CHARS = \"!#$%&()*?@{}\";\n \n   private PasswordGenerator() {}\n \n   public static String generate(int length) {\n-    StringBuilder password = new StringBuilder();\n+    int count = length / 4;\n+    int extra = length % 4;\n \n-    while (password.length() < length) {\n-      for (int i = 0; i < ALLOWED_CHAR_GROUPS.length; i++) {\n-        int randomIndex = secureRandom.nextInt(ALLOWED_CHAR_GROUPS[i].length());\n-        password.append(ALLOWED_CHAR_GROUPS[i].charAt(randomIndex));\n-      }\n-    }\n+    Builder builder =\n+        new RandomStringGenerator.Builder().usingRandom(new SecureTextRandomProvider());\n \n-    return shuffle(password.toString());\n-  }\n-\n-  private static String shuffle(String value) {\n-    List<String> letters = Arrays.asList(value.split(\"\"));\n-    Collections.shuffle(letters);\n-    StringBuilder builder = new StringBuilder();\n-    for (String letter : letters) {\n-      builder.append(letter);\n-    }\n-    return builder.toString();\n+    StringBuilder password = new StringBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7eccaf42284504afb807d623ea4b060cd4153c85"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b2ceb452487dedaa8ba8f5fd2e03b6904afe17e", "author": {"user": {"login": "harisboston", "name": "Haris Hasan"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/6b2ceb452487dedaa8ba8f5fd2e03b6904afe17e", "committedDate": "2020-10-14T14:52:25Z", "message": "Merge branch 'develop' into oauth-server-password-generation-issue-1205"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4NDk3MDE0", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1377#pullrequestreview-508497014", "createdAt": "2020-10-14T15:56:18Z", "commit": {"oid": "6b2ceb452487dedaa8ba8f5fd2e03b6904afe17e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNTo1NjoxOVrOHhaDmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNTo1NjoxOVrOHhaDmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc5MTk2Mw==", "bodyText": "Using filter is easier to read, less code and removes the need to shuffle the characters afterwards. Please use filter.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1377#discussion_r504791963", "createdAt": "2020-10-14T15:56:19Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/PasswordGenerator.java", "diffHunk": "@@ -8,42 +8,40 @@\n \n package com.google.cloud.healthcare.fdamystudies.common;\n \n-import java.security.SecureRandom;\n-import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.commons.text.RandomStringGenerator;\n+import org.apache.commons.text.RandomStringGenerator.Builder;\n+import org.apache.syncope.common.lib.SecureTextRandomProvider;\n \n public final class PasswordGenerator {\n \n-  private static final String[] ALLOWED_CHAR_GROUPS =\n-      new String[] {\n-        \"abcdefghijklmnopqrstuvwxyz\", \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", \"0123456789\", \"!#$%&\"\n-      };\n-\n-  private static SecureRandom secureRandom = new SecureRandom();\n+  public static final String SPECIAL_CHARS = \"!#$%&()*?@{}\";\n \n   private PasswordGenerator() {}\n \n   public static String generate(int length) {\n-    StringBuilder password = new StringBuilder();\n+    int count = length / 4;\n+    int extra = length % 4;\n \n-    while (password.length() < length) {\n-      for (int i = 0; i < ALLOWED_CHAR_GROUPS.length; i++) {\n-        int randomIndex = secureRandom.nextInt(ALLOWED_CHAR_GROUPS[i].length());\n-        password.append(ALLOWED_CHAR_GROUPS[i].charAt(randomIndex));\n-      }\n-    }\n+    Builder builder =\n+        new RandomStringGenerator.Builder().usingRandom(new SecureTextRandomProvider());\n \n-    return shuffle(password.toString());\n-  }\n-\n-  private static String shuffle(String value) {\n-    List<String> letters = Arrays.asList(value.split(\"\"));\n-    Collections.shuffle(letters);\n-    StringBuilder builder = new StringBuilder();\n-    for (String letter : letters) {\n-      builder.append(letter);\n-    }\n-    return builder.toString();\n+    StringBuilder password = new StringBuilder();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcxNDIwOQ=="}, "originalCommit": {"oid": "7eccaf42284504afb807d623ea4b060cd4153c85"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21f6b4213a5c72ed98ea741f1c2645188515e5f8", "author": {"user": {"login": "harisboston", "name": "Haris Hasan"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/21f6b4213a5c72ed98ea741f1c2645188515e5f8", "committedDate": "2020-10-14T17:45:51Z", "message": "Used number/letters instead of ASCII code\n\nUsed number/letters instead of ASCII code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c51f46c23a41a59d2133f246969c950db5a7d68", "author": {"user": {"login": "dhanyak-btc", "name": "Dhanya Kumar KV"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/7c51f46c23a41a59d2133f246969c950db5a7d68", "committedDate": "2020-10-15T10:35:53Z", "message": "Refactored the code to match password criteria and fix review comments\n\nRefactored the code to match password criteria and fix review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44fa888d187ee5dad6768692aaa446e07763c5d8", "author": {"user": {"login": "dhanyak-btc", "name": "Dhanya Kumar KV"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/44fa888d187ee5dad6768692aaa446e07763c5d8", "committedDate": "2020-10-15T10:52:57Z", "message": "Merge branch 'develop' into oauth-server-password-generation-issue-1205"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5NDU4NjY3", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1377#pullrequestreview-509458667", "createdAt": "2020-10-15T14:44:08Z", "commit": {"oid": "44fa888d187ee5dad6768692aaa446e07763c5d8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNDo0NDowOFrOHiLcHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNTowMDo0M1rOHiMRmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYwMTA1Mw==", "bodyText": "please generate multiple passwords, e.g. 100, verify that each password is unique and that they are all valid.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1377#discussion_r505601053", "createdAt": "2020-10-15T14:44:08Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/test/java/com/google/cloud/healthcare/fdamystudies/oauthscim/common/PasswordGeneratorTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.common;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import com.google.cloud.healthcare.fdamystudies.common.PasswordGenerator;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+public class PasswordGeneratorTest {\n+\n+  @ParameterizedTest\n+  @ValueSource(ints = {8, 10, 12})\n+  public void isValidPassword(int passwordLength) {\n+    String password = PasswordGenerator.generate(passwordLength);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44fa888d187ee5dad6768692aaa446e07763c5d8"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYwMjI0Mg==", "bodyText": "Sort gets called when countMap is missing one of the categories, which means it only contains 2 keys at most.\nSort is a bit of an overkill when comparing these two keys; also you only want one that has > 1 character really.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1377#discussion_r505602242", "createdAt": "2020-10-15T14:45:40Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/PasswordGenerator.java", "diffHunk": "@@ -9,41 +9,134 @@\n package com.google.cloud.healthcare.fdamystudies.common;\n \n import java.security.SecureRandom;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.commons.text.RandomStringGenerator;\n+import org.apache.syncope.common.lib.SecureTextRandomProvider;\n \n public final class PasswordGenerator {\n \n-  private static final String[] ALLOWED_CHAR_GROUPS =\n-      new String[] {\n-        \"abcdefghijklmnopqrstuvwxyz\", \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", \"0123456789\", \"!#$%&\"\n-      };\n+  private static final String UPPERCASE_KEY = \"uppercase\";\n+\n+  private static final String LOWERCASE_KEY = \"lowercase\";\n+\n+  private static final String DIGITS_KEY = \"digits\";\n \n   private static SecureRandom secureRandom = new SecureRandom();\n \n+  public static final String SPECIAL_CHARS = \"!#$%&()*?@{}\";\n+\n   private PasswordGenerator() {}\n \n   public static String generate(int length) {\n-    StringBuilder password = new StringBuilder();\n+    if (length < 8) {\n+      throw new IllegalArgumentException(\"Password should be 8 characters long\");\n+    }\n+\n+    String password =\n+        new RandomStringGenerator.Builder()\n+            .usingRandom(new SecureTextRandomProvider())\n+            .filteredBy(\n+                codePoint ->\n+                    (codePoint >= 'a' && codePoint <= 'z')\n+                        || (codePoint >= '0' && codePoint <= '9')\n+                        || (codePoint >= 'A' && codePoint <= 'Z'))\n+            .build()\n+            .generate(length - 1);\n+\n+    StringBuilder builder = new StringBuilder(password);\n+    char specialChar = SPECIAL_CHARS.charAt(secureRandom.nextInt(SPECIAL_CHARS.length()));\n+    int position = secureRandom.nextInt(password.length());\n+    builder.insert(position, specialChar);\n \n-    while (password.length() < length) {\n-      for (int i = 0; i < ALLOWED_CHAR_GROUPS.length; i++) {\n-        int randomIndex = secureRandom.nextInt(ALLOWED_CHAR_GROUPS[i].length());\n-        password.append(ALLOWED_CHAR_GROUPS[i].charAt(randomIndex));\n+    return convertToValidPassword(builder.toString());\n+  }\n+\n+  private static String convertToValidPassword(String password) {\n+    char[] passwordChars = password.toCharArray();\n+    Map<String, Integer> countMap = new HashMap<>();\n+    for (char c : passwordChars) {\n+      if (Character.isDigit(c)) {\n+        incrementCount(countMap, DIGITS_KEY);\n+      } else if (Character.isLowerCase(c)) {\n+        incrementCount(countMap, LOWERCASE_KEY);\n+      } else if (Character.isUpperCase(c)) {\n+        incrementCount(countMap, UPPERCASE_KEY);\n       }\n     }\n \n-    return shuffle(password.toString());\n+    if (countMap.containsKey(DIGITS_KEY)\n+        && countMap.containsKey(LOWERCASE_KEY)\n+        && countMap.containsKey(UPPERCASE_KEY)) {\n+      return password;\n+    }\n+\n+    addMissingChar(passwordChars, countMap, DIGITS_KEY);\n+    addMissingChar(passwordChars, countMap, LOWERCASE_KEY);\n+    addMissingChar(passwordChars, countMap, UPPERCASE_KEY);\n+    return String.valueOf(passwordChars);\n+  }\n+\n+  private static void addMissingChar(\n+      char[] passwordChars, Map<String, Integer> countMap, String key) {\n+    char randomChar = getRandomChar(key);\n+    if (!countMap.containsKey(key)) {\n+      countMap = sortMapByValue(countMap);\n+      String firstKey = countMap.entrySet().iterator().next().getKey();\n+      int position = findFirstIndexOf(passwordChars, firstKey);\n+      passwordChars[position] = randomChar;\n+      countMap.put(key, 1);\n+    }\n+  }\n+\n+  private static char getRandomChar(String key) {\n+    char value = 0;\n+    if (DIGITS_KEY.equals(key)) {\n+      int digit = secureRandom.nextInt(9);\n+      value = Character.forDigit(digit, 10);\n+    } else if (LOWERCASE_KEY.equals(key)) {\n+      value = RandomStringUtils.randomAlphabetic(1).toLowerCase().charAt(0);\n+    } else if (UPPERCASE_KEY.equals(key)) {\n+      value = RandomStringUtils.randomAlphabetic(1).toUpperCase().charAt(0);\n+    }\n+    return value;\n   }\n \n-  private static String shuffle(String value) {\n-    List<String> letters = Arrays.asList(value.split(\"\"));\n-    Collections.shuffle(letters);\n-    StringBuilder builder = new StringBuilder();\n-    for (String letter : letters) {\n-      builder.append(letter);\n+  private static void incrementCount(Map<String, Integer> countMap, String key) {\n+    if (countMap.containsKey(key)) {\n+      countMap.put(key, countMap.get(key) + 1);\n+    } else {\n+      countMap.put(key, 1);\n     }\n-    return builder.toString();\n+  }\n+\n+  private static int findFirstIndexOf(char[] letters, String key) {\n+    for (int i = 0; i < letters.length; i++) {\n+      if (Character.isDigit(letters[i]) && DIGITS_KEY.equals(key)) {\n+        return i;\n+      } else if (Character.isLowerCase(letters[i]) && LOWERCASE_KEY.equals(key)) {\n+        return i;\n+      } else if (Character.isUpperCase(letters[i]) && UPPERCASE_KEY.equals(key)) {\n+        return i;\n+      }\n+    }\n+    return 0;\n+  }\n+\n+  private static Map<String, Integer> sortMapByValue(Map<String, Integer> countMap) {\n+    return countMap\n+        .entrySet()\n+        .stream()\n+        .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+        .collect(\n+            Collectors.toMap(\n+                Map.Entry::getKey,\n+                Map.Entry::getValue,\n+                (oldValue, newValue) -> oldValue,\n+                LinkedHashMap::new));\n   }\n }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44fa888d187ee5dad6768692aaa446e07763c5d8"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYxNDc0Ng==", "bodyText": "instead of doing this, I would select a random position; check if the countMap for that key exists and if it does whether there are more than one, then replace it with my random character of different type. Finally update the countMap for both keys.\nprivate static bool insertNewChar(Map<String, Integer> countMap, String key) {\n  int position = secureRandom.nextInt(password.length());\n  char newChar = getRandomChar(key);\n  char oldChar = passwordChars[position];\n  if (Character.isDigit(oldChar) && CountMap.get(DIGITS_KEY) > 1) {\n    passwordChars[position] = newChar;\n    incrementCount(countMap, key);\n    decrementCount(countMap, DIGITS_KEY);\n    return true;\n  } else if (Character.isLowerCase(oldChar) && LOWERCASE_KEY.equals(key)) {\n    // same for other two\n  } else {\n    return false;\n  }\n}\n\n// inside addMissingChar ...\n...\nwhile !insertNewChar(countMap, key) {}", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1377#discussion_r505614746", "createdAt": "2020-10-15T15:00:43Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/PasswordGenerator.java", "diffHunk": "@@ -9,41 +9,134 @@\n package com.google.cloud.healthcare.fdamystudies.common;\n \n import java.security.SecureRandom;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.commons.text.RandomStringGenerator;\n+import org.apache.syncope.common.lib.SecureTextRandomProvider;\n \n public final class PasswordGenerator {\n \n-  private static final String[] ALLOWED_CHAR_GROUPS =\n-      new String[] {\n-        \"abcdefghijklmnopqrstuvwxyz\", \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", \"0123456789\", \"!#$%&\"\n-      };\n+  private static final String UPPERCASE_KEY = \"uppercase\";\n+\n+  private static final String LOWERCASE_KEY = \"lowercase\";\n+\n+  private static final String DIGITS_KEY = \"digits\";\n \n   private static SecureRandom secureRandom = new SecureRandom();\n \n+  public static final String SPECIAL_CHARS = \"!#$%&()*?@{}\";\n+\n   private PasswordGenerator() {}\n \n   public static String generate(int length) {\n-    StringBuilder password = new StringBuilder();\n+    if (length < 8) {\n+      throw new IllegalArgumentException(\"Password should be 8 characters long\");\n+    }\n+\n+    String password =\n+        new RandomStringGenerator.Builder()\n+            .usingRandom(new SecureTextRandomProvider())\n+            .filteredBy(\n+                codePoint ->\n+                    (codePoint >= 'a' && codePoint <= 'z')\n+                        || (codePoint >= '0' && codePoint <= '9')\n+                        || (codePoint >= 'A' && codePoint <= 'Z'))\n+            .build()\n+            .generate(length - 1);\n+\n+    StringBuilder builder = new StringBuilder(password);\n+    char specialChar = SPECIAL_CHARS.charAt(secureRandom.nextInt(SPECIAL_CHARS.length()));\n+    int position = secureRandom.nextInt(password.length());\n+    builder.insert(position, specialChar);\n \n-    while (password.length() < length) {\n-      for (int i = 0; i < ALLOWED_CHAR_GROUPS.length; i++) {\n-        int randomIndex = secureRandom.nextInt(ALLOWED_CHAR_GROUPS[i].length());\n-        password.append(ALLOWED_CHAR_GROUPS[i].charAt(randomIndex));\n+    return convertToValidPassword(builder.toString());\n+  }\n+\n+  private static String convertToValidPassword(String password) {\n+    char[] passwordChars = password.toCharArray();\n+    Map<String, Integer> countMap = new HashMap<>();\n+    for (char c : passwordChars) {\n+      if (Character.isDigit(c)) {\n+        incrementCount(countMap, DIGITS_KEY);\n+      } else if (Character.isLowerCase(c)) {\n+        incrementCount(countMap, LOWERCASE_KEY);\n+      } else if (Character.isUpperCase(c)) {\n+        incrementCount(countMap, UPPERCASE_KEY);\n       }\n     }\n \n-    return shuffle(password.toString());\n+    if (countMap.containsKey(DIGITS_KEY)\n+        && countMap.containsKey(LOWERCASE_KEY)\n+        && countMap.containsKey(UPPERCASE_KEY)) {\n+      return password;\n+    }\n+\n+    addMissingChar(passwordChars, countMap, DIGITS_KEY);\n+    addMissingChar(passwordChars, countMap, LOWERCASE_KEY);\n+    addMissingChar(passwordChars, countMap, UPPERCASE_KEY);\n+    return String.valueOf(passwordChars);\n+  }\n+\n+  private static void addMissingChar(\n+      char[] passwordChars, Map<String, Integer> countMap, String key) {\n+    char randomChar = getRandomChar(key);\n+    if (!countMap.containsKey(key)) {\n+      countMap = sortMapByValue(countMap);\n+      String firstKey = countMap.entrySet().iterator().next().getKey();\n+      int position = findFirstIndexOf(passwordChars, firstKey);\n+      passwordChars[position] = randomChar;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44fa888d187ee5dad6768692aaa446e07763c5d8"}, "originalPosition": 96}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e8f40c8cb708de57a5a105064c81bb52ec9143b", "author": {"user": {"login": "harisboston", "name": "Haris Hasan"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/1e8f40c8cb708de57a5a105064c81bb52ec9143b", "committedDate": "2020-10-16T17:02:23Z", "message": "Modified test case\n\nModified test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f97a68ab6109a91bd712d3e933622e330ce055ff", "author": {"user": {"login": "harisboston", "name": "Haris Hasan"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/f97a68ab6109a91bd712d3e933622e330ce055ff", "committedDate": "2020-10-18T17:39:32Z", "message": "working on PR\n\nworking on PR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2872577dffd6fd7a72570fa4b10ba14358b750d", "author": {"user": {"login": "harisboston", "name": "Haris Hasan"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/b2872577dffd6fd7a72570fa4b10ba14358b750d", "committedDate": "2020-10-22T10:22:41Z", "message": "Fixed issue #1205 Weak password generation process #1377\n\nFixed issue #1205 Weak password generation process\n#1377"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "060565dd86b52ec713f1262c5148210a4f7bbc6a", "author": {"user": {"login": "harisboston", "name": "Haris Hasan"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/060565dd86b52ec713f1262c5148210a4f7bbc6a", "committedDate": "2020-10-22T10:56:53Z", "message": "Fixed issue #1205 Weak password generation process #1377\n\nFixed issue #1205 Weak password generation process\n#1377"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0NjAyOTM4", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1377#pullrequestreview-514602938", "createdAt": "2020-10-22T10:57:53Z", "commit": {"oid": "060565dd86b52ec713f1262c5148210a4f7bbc6a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMDo1Nzo1NFrOHmcKfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMDo1Nzo1NFrOHmcKgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA2OTM3NQ==", "bodyText": "[auth-server Checks] reported by reviewdog \ud83d\udc36\nMissing a Javadoc comment.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1377#discussion_r510069375", "createdAt": "2020-10-22T10:57:54Z", "author": {"login": "github-actions"}, "path": "oauth-scim-module/oauth-scim-service/src/test/java/com/google/cloud/healthcare/fdamystudies/oauthscim/common/PasswordGeneratorTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.common;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import com.google.cloud.healthcare.fdamystudies.common.PasswordGenerator;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+public class PasswordGeneratorTest {\n+\n+  @ParameterizedTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "060565dd86b52ec713f1262c5148210a4f7bbc6a"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA2OTM3OA==", "bodyText": "[auth-server Checks] reported by reviewdog \ud83d\udc36\nMissing a Javadoc comment.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1377#discussion_r510069378", "createdAt": "2020-10-22T10:57:54Z", "author": {"login": "github-actions"}, "path": "oauth-scim-module/oauth-scim-service/src/test/java/com/google/cloud/healthcare/fdamystudies/oauthscim/common/PasswordGeneratorTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.common;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import com.google.cloud.healthcare.fdamystudies.common.PasswordGenerator;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+public class PasswordGeneratorTest {\n+\n+  @ParameterizedTest\n+  @ValueSource(ints = {8, 10, 12})\n+  public void genaratePassword(int passwordLength) {\n+    Set<String> passwords = new HashSet<>();\n+    for (int i = 0; i < 100; i++) {\n+      String password = genarateUniqueValidPassword(passwordLength);\n+      assertTrue(passwords.add(password));\n+    }\n+  }\n+\n+  public String genarateUniqueValidPassword(int passwordLength) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "060565dd86b52ec713f1262c5148210a4f7bbc6a"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0NzYyNzYx", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1377#pullrequestreview-514762761", "createdAt": "2020-10-22T14:03:13Z", "commit": {"oid": "060565dd86b52ec713f1262c5148210a4f7bbc6a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNDowMzoxNFrOHmjZ1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNDowODoyOVrOHmjpcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE4Nzk4OQ==", "bodyText": "the list is very limited, some other possible characters to consider: .;:,-_'\"/\\|=+^", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1377#discussion_r510187989", "createdAt": "2020-10-22T14:03:14Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/PasswordGenerator.java", "diffHunk": "@@ -9,41 +9,134 @@\n package com.google.cloud.healthcare.fdamystudies.common;\n \n import java.security.SecureRandom;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.commons.text.RandomStringGenerator;\n+import org.apache.syncope.common.lib.SecureTextRandomProvider;\n \n public final class PasswordGenerator {\n \n-  private static final String[] ALLOWED_CHAR_GROUPS =\n-      new String[] {\n-        \"abcdefghijklmnopqrstuvwxyz\", \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", \"0123456789\", \"!#$%&\"\n-      };\n+  private static final String UPPERCASE_KEY = \"uppercase\";\n+\n+  private static final String LOWERCASE_KEY = \"lowercase\";\n+\n+  private static final String DIGITS_KEY = \"digits\";\n \n   private static SecureRandom secureRandom = new SecureRandom();\n \n+  public static final String SPECIAL_CHARS = \"!#$%&()*?@{}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "060565dd86b52ec713f1262c5148210a4f7bbc6a"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE5MTk4NA==", "bodyText": "these two lines are not checking anything; your if condition matches your assertTrue condition.\nAlso considering we test for length 8, 10 and 12, password.length() should never be zero, if that happens your test should fail.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1377#discussion_r510191984", "createdAt": "2020-10-22T14:08:29Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/test/java/com/google/cloud/healthcare/fdamystudies/oauthscim/common/PasswordGeneratorTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.common;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import com.google.cloud.healthcare.fdamystudies.common.PasswordGenerator;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+public class PasswordGeneratorTest {\n+\n+  @ParameterizedTest\n+  @ValueSource(ints = {8, 10, 12})\n+  public void genaratePassword(int passwordLength) {\n+    Set<String> passwords = new HashSet<>();\n+    for (int i = 0; i < 100; i++) {\n+      String password = genarateUniqueValidPassword(passwordLength);\n+      assertTrue(passwords.add(password));\n+    }\n+  }\n+\n+  public String genarateUniqueValidPassword(int passwordLength) {\n+    String password = PasswordGenerator.generate(passwordLength);\n+\n+    boolean lowerCase = false;\n+    boolean upperCase = false;\n+    boolean numeric = false;\n+    boolean specialChar = false;\n+\n+    for (char c : password.toCharArray()) {\n+      if (Character.isDigit(c)) {\n+        numeric = true;\n+      } else if (Character.isLowerCase(c)) {\n+        lowerCase = true;\n+      } else if (Character.isUpperCase(c)) {\n+        upperCase = true;\n+      } else if (PasswordGenerator.SPECIAL_CHARS.contains(String.valueOf(c))) {\n+        specialChar = true;\n+      }\n+    }\n+\n+    if (password.length() == 0) {\n+      assertTrue(\"should return empty value\", password.length() == 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "060565dd86b52ec713f1262c5148210a4f7bbc6a"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2d767154fcecd54ed9775898f0ba00b7929d52b", "author": {"user": {"login": "harisboston", "name": "Haris Hasan"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/d2d767154fcecd54ed9775898f0ba00b7929d52b", "committedDate": "2020-10-22T15:16:38Z", "message": "Firxed review comments #1377\n\nFirxed review comments #1377"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24b2b36eba3e858890df0e4c73a64dc3ff143bea", "author": {"user": {"login": "harisboston", "name": "Haris Hasan"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/24b2b36eba3e858890df0e4c73a64dc3ff143bea", "committedDate": "2020-10-22T15:20:03Z", "message": "Merge branch 'develop' into oauth-server-password-generation-issue-1205"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4b1b4a77dbc7b1318afe5ff07c5202a8800a725", "author": {"user": {"login": "harisboston", "name": "Haris Hasan"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/e4b1b4a77dbc7b1318afe5ff07c5202a8800a725", "committedDate": "2020-10-22T17:30:38Z", "message": "Fixed build issue\n\nFixed build issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3147d497bea02da38b7421319a044404dfcfa5a", "author": {"user": {"login": "harisboston", "name": "Haris Hasan"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/d3147d497bea02da38b7421319a044404dfcfa5a", "committedDate": "2020-10-22T17:52:44Z", "message": "Fixed build issue\n\nFixed build issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85f8f626ec617ea3fa376a192f7adb1dd4598369", "author": {"user": {"login": "harisboston", "name": "Haris Hasan"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/85f8f626ec617ea3fa376a192f7adb1dd4598369", "committedDate": "2020-10-22T18:02:08Z", "message": "Merge branch 'develop' into oauth-server-password-generation-issue-1205"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MDMxODU2", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1377#pullrequestreview-515031856", "createdAt": "2020-10-22T19:01:33Z", "commit": {"oid": "85f8f626ec617ea3fa376a192f7adb1dd4598369"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "572756f44f64e243240c4f9fb0b0ae8dbc1d5468", "author": {"user": {"login": "harisboston", "name": "Haris Hasan"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/572756f44f64e243240c4f9fb0b0ae8dbc1d5468", "committedDate": "2020-10-23T04:03:58Z", "message": "Merge branch 'develop' into oauth-server-password-generation-issue-1205"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 230, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}