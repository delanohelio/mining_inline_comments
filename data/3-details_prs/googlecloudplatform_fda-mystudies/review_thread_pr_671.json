{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2MjMwNzkw", "number": 671, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxODowMDowNVrOES7QQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMjowNDowMlrOETcatA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MjgwNjQxOnYy", "diffSide": "RIGHT", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/ErrorCode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxODowMDowNVrOG4YM5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOToxNjowM1rOG4v3ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc2OTk1Ng==", "bodyText": "Shouldn't the message be Not Found instead of Bad Request for this one?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              SITE_NOT_FOUND(404, \"EC-94\", Constants.BAD_REQUEST, \"Site not found\"),\n          \n          \n            \n              SITE_NOT_FOUND(404, \"EC-94\", HttpStatus.NOT_FOUND.toString(), \"Site not found\"),\n          \n      \n    \n    \n  \n\nAlso any particular reason why sometimes we are using the String from HttpStatus and sometimes from Constants?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/671#discussion_r461769956", "createdAt": "2020-07-28T18:00:05Z", "author": {"login": "saminguyen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/ErrorCode.java", "diffHunk": "@@ -120,6 +120,11 @@\n   SITE_NOT_EXIST_OR_INACTIVE(\n       400, \"EC-869\", Constants.BAD_REQUEST, \"Site doesn't exists or is inactive\"),\n \n+  SITE_NOT_FOUND(404, \"EC-94\", Constants.BAD_REQUEST, \"Site not found\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "943b6346cca4e7ef6d6454e630184b71d814c83f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE1NzczMQ==", "bodyText": "changed to HttpStatus.NOT_FOUND.toString(), before we are using Constants later we come to know that we can make use of HttpStatus so we started using String from HttpStatus", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/671#discussion_r462157731", "createdAt": "2020-07-29T09:16:03Z", "author": {"login": "navya-BTC"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/ErrorCode.java", "diffHunk": "@@ -120,6 +120,11 @@\n   SITE_NOT_EXIST_OR_INACTIVE(\n       400, \"EC-869\", Constants.BAD_REQUEST, \"Site doesn't exists or is inactive\"),\n \n+  SITE_NOT_FOUND(404, \"EC-94\", Constants.BAD_REQUEST, \"Site not found\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc2OTk1Ng=="}, "originalCommit": {"oid": "943b6346cca4e7ef6d6454e630184b71d814c83f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4Mjg1NjU0OnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/SiteServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxODoxNDoxOFrOG4YsQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOToxNjozMFrOG4v4uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc3Nzk4NQ==", "bodyText": "I would avoid using hard coded value like this for readability. Do we have enum for all the OnboardingStatus", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/671#discussion_r461777985", "createdAt": "2020-07-28T18:14:18Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/SiteServiceImpl.java", "diffHunk": "@@ -239,4 +250,91 @@ private ErrorCode validationForAddNewParticipant(\n     }\n     return null;\n   }\n+\n+  @Override\n+  public ParticipantRegistryResponse getParticipants(\n+      String userId, String siteId, String onboardingStatus) {\n+    logger.info(\"getParticipants()\");\n+    Optional<SiteEntity> optSite = siteRepository.findById(siteId);\n+\n+    if (!optSite.isPresent()) {\n+      logger.exit(ErrorCode.SITE_NOT_FOUND);\n+      return new ParticipantRegistryResponse(ErrorCode.SITE_NOT_FOUND);\n+    }\n+\n+    Optional<SitePermissionEntity> optSitePermission =\n+        sitePermissionRepository.findByUserIdAndSiteId(userId, siteId);\n+\n+    if (!optSitePermission.isPresent()\n+        || Permission.NO_PERMISSION == Permission.fromValue(optSitePermission.get().getCanEdit())) {\n+      logger.exit(ErrorCode.MANAGE_SITE_PERMISSION_ACCESS_DENIED);\n+      return new ParticipantRegistryResponse(ErrorCode.MANAGE_SITE_PERMISSION_ACCESS_DENIED);\n+    }\n+\n+    ParticipantRegistryDetail participantRegistry =\n+        ParticipantMapper.fromSite(optSite.get(), optSitePermission.get(), siteId);\n+    Map<String, Long> statusWithCountMap = getOnboardingStatusWithCount(siteId);\n+    participantRegistry.setCountByStatus(statusWithCountMap);\n+\n+    List<ParticipantRegistrySiteEntity> registryParticipants = null;\n+    if (StringUtils.isEmpty(onboardingStatus)) {\n+      registryParticipants = participantRegistrySiteRepository.findBySiteId(siteId);\n+    } else {\n+      registryParticipants =\n+          participantRegistrySiteRepository.findBySiteIdAndStatus(siteId, onboardingStatus);\n+    }\n+\n+    addRegistryParticipants(participantRegistry, registryParticipants);\n+\n+    ParticipantRegistryResponse participantRegistryResponse =\n+        new ParticipantRegistryResponse(\n+            MessageCode.GET_PARTICIPANT_REGISTRY_SUCCESS, participantRegistry);\n+\n+    logger.exit(String.format(\"message=%s\", participantRegistryResponse.getMessage()));\n+    return participantRegistryResponse;\n+  }\n+\n+  private Map<String, Long> getOnboardingStatusWithCount(String siteId) {\n+    List<ParticipantRegistrySiteCount> statusCount =\n+        (List<ParticipantRegistrySiteCount>)\n+            CollectionUtils.emptyIfNull(\n+                participantRegistrySiteRepository.findStatusCountBySiteId(siteId));\n+\n+    Map<String, Long> statusWithCountMap = new HashMap<>();\n+    for (OnboardingStatus onboardingStatus : OnboardingStatus.values()) {\n+      statusWithCountMap.put(onboardingStatus.getCode(), (long) 0);\n+    }\n+\n+    long total = 0;\n+    for (ParticipantRegistrySiteCount count : statusCount) {\n+      total += count.getCount();\n+      statusWithCountMap.put(count.getOnboardingStatus(), count.getCount());\n+    }\n+\n+    statusWithCountMap.put(\"A\", total);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "943b6346cca4e7ef6d6454e630184b71d814c83f"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE1ODAwOQ==", "bodyText": "used OnboardingStatus enum", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/671#discussion_r462158009", "createdAt": "2020-07-29T09:16:30Z", "author": {"login": "navya-BTC"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/SiteServiceImpl.java", "diffHunk": "@@ -239,4 +250,91 @@ private ErrorCode validationForAddNewParticipant(\n     }\n     return null;\n   }\n+\n+  @Override\n+  public ParticipantRegistryResponse getParticipants(\n+      String userId, String siteId, String onboardingStatus) {\n+    logger.info(\"getParticipants()\");\n+    Optional<SiteEntity> optSite = siteRepository.findById(siteId);\n+\n+    if (!optSite.isPresent()) {\n+      logger.exit(ErrorCode.SITE_NOT_FOUND);\n+      return new ParticipantRegistryResponse(ErrorCode.SITE_NOT_FOUND);\n+    }\n+\n+    Optional<SitePermissionEntity> optSitePermission =\n+        sitePermissionRepository.findByUserIdAndSiteId(userId, siteId);\n+\n+    if (!optSitePermission.isPresent()\n+        || Permission.NO_PERMISSION == Permission.fromValue(optSitePermission.get().getCanEdit())) {\n+      logger.exit(ErrorCode.MANAGE_SITE_PERMISSION_ACCESS_DENIED);\n+      return new ParticipantRegistryResponse(ErrorCode.MANAGE_SITE_PERMISSION_ACCESS_DENIED);\n+    }\n+\n+    ParticipantRegistryDetail participantRegistry =\n+        ParticipantMapper.fromSite(optSite.get(), optSitePermission.get(), siteId);\n+    Map<String, Long> statusWithCountMap = getOnboardingStatusWithCount(siteId);\n+    participantRegistry.setCountByStatus(statusWithCountMap);\n+\n+    List<ParticipantRegistrySiteEntity> registryParticipants = null;\n+    if (StringUtils.isEmpty(onboardingStatus)) {\n+      registryParticipants = participantRegistrySiteRepository.findBySiteId(siteId);\n+    } else {\n+      registryParticipants =\n+          participantRegistrySiteRepository.findBySiteIdAndStatus(siteId, onboardingStatus);\n+    }\n+\n+    addRegistryParticipants(participantRegistry, registryParticipants);\n+\n+    ParticipantRegistryResponse participantRegistryResponse =\n+        new ParticipantRegistryResponse(\n+            MessageCode.GET_PARTICIPANT_REGISTRY_SUCCESS, participantRegistry);\n+\n+    logger.exit(String.format(\"message=%s\", participantRegistryResponse.getMessage()));\n+    return participantRegistryResponse;\n+  }\n+\n+  private Map<String, Long> getOnboardingStatusWithCount(String siteId) {\n+    List<ParticipantRegistrySiteCount> statusCount =\n+        (List<ParticipantRegistrySiteCount>)\n+            CollectionUtils.emptyIfNull(\n+                participantRegistrySiteRepository.findStatusCountBySiteId(siteId));\n+\n+    Map<String, Long> statusWithCountMap = new HashMap<>();\n+    for (OnboardingStatus onboardingStatus : OnboardingStatus.values()) {\n+      statusWithCountMap.put(onboardingStatus.getCode(), (long) 0);\n+    }\n+\n+    long total = 0;\n+    for (ParticipantRegistrySiteCount count : statusCount) {\n+      total += count.getCount();\n+      statusWithCountMap.put(count.getOnboardingStatus(), count.getCount());\n+    }\n+\n+    statusWithCountMap.put(\"A\", total);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc3Nzk4NQ=="}, "originalCommit": {"oid": "943b6346cca4e7ef6d6454e630184b71d814c83f"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MzU0Mzc0OnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/SiteServiceImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMToxNjo1OFrOG4fNlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMTo1NTowOVrOG5LoBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg4NDgyMA==", "bodyText": "move the error code handling out of the Service layer. If not done here make sure to keep track of it (maybe with a TODO comment)", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/671#discussion_r461884820", "createdAt": "2020-07-28T21:16:58Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/SiteServiceImpl.java", "diffHunk": "@@ -239,4 +250,91 @@ private ErrorCode validationForAddNewParticipant(\n     }\n     return null;\n   }\n+\n+  @Override\n+  public ParticipantRegistryResponse getParticipants(\n+      String userId, String siteId, String onboardingStatus) {\n+    logger.info(\"getParticipants()\");\n+    Optional<SiteEntity> optSite = siteRepository.findById(siteId);\n+\n+    if (!optSite.isPresent()) {\n+      logger.exit(ErrorCode.SITE_NOT_FOUND);\n+      return new ParticipantRegistryResponse(ErrorCode.SITE_NOT_FOUND);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "943b6346cca4e7ef6d6454e630184b71d814c83f"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE0OTc1OQ==", "bodyText": "#702 issue created to address this comment", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/671#discussion_r462149759", "createdAt": "2020-07-29T09:02:38Z", "author": {"login": "navya-BTC"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/SiteServiceImpl.java", "diffHunk": "@@ -239,4 +250,91 @@ private ErrorCode validationForAddNewParticipant(\n     }\n     return null;\n   }\n+\n+  @Override\n+  public ParticipantRegistryResponse getParticipants(\n+      String userId, String siteId, String onboardingStatus) {\n+    logger.info(\"getParticipants()\");\n+    Optional<SiteEntity> optSite = siteRepository.findById(siteId);\n+\n+    if (!optSite.isPresent()) {\n+      logger.exit(ErrorCode.SITE_NOT_FOUND);\n+      return new ParticipantRegistryResponse(ErrorCode.SITE_NOT_FOUND);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg4NDgyMA=="}, "originalCommit": {"oid": "943b6346cca4e7ef6d6454e630184b71d814c83f"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYxMjQ4Ng==", "bodyText": "Gotcha", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/671#discussion_r462612486", "createdAt": "2020-07-29T21:55:09Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/SiteServiceImpl.java", "diffHunk": "@@ -239,4 +250,91 @@ private ErrorCode validationForAddNewParticipant(\n     }\n     return null;\n   }\n+\n+  @Override\n+  public ParticipantRegistryResponse getParticipants(\n+      String userId, String siteId, String onboardingStatus) {\n+    logger.info(\"getParticipants()\");\n+    Optional<SiteEntity> optSite = siteRepository.findById(siteId);\n+\n+    if (!optSite.isPresent()) {\n+      logger.exit(ErrorCode.SITE_NOT_FOUND);\n+      return new ParticipantRegistryResponse(ErrorCode.SITE_NOT_FOUND);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg4NDgyMA=="}, "originalCommit": {"oid": "943b6346cca4e7ef6d6454e630184b71d814c83f"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDY0OTAwOnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/SiteServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNTo0MDowMlrOG4pULA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOToxNzoxMlrOG4v6RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA1MDM0OA==", "bodyText": "You should probably name this participantRegistryDetail, line 287 looks incredibly confusing", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/671#discussion_r462050348", "createdAt": "2020-07-29T05:40:02Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/SiteServiceImpl.java", "diffHunk": "@@ -239,4 +250,91 @@ private ErrorCode validationForAddNewParticipant(\n     }\n     return null;\n   }\n+\n+  @Override\n+  public ParticipantRegistryResponse getParticipants(\n+      String userId, String siteId, String onboardingStatus) {\n+    logger.info(\"getParticipants()\");\n+    Optional<SiteEntity> optSite = siteRepository.findById(siteId);\n+\n+    if (!optSite.isPresent()) {\n+      logger.exit(ErrorCode.SITE_NOT_FOUND);\n+      return new ParticipantRegistryResponse(ErrorCode.SITE_NOT_FOUND);\n+    }\n+\n+    Optional<SitePermissionEntity> optSitePermission =\n+        sitePermissionRepository.findByUserIdAndSiteId(userId, siteId);\n+\n+    if (!optSitePermission.isPresent()\n+        || Permission.NO_PERMISSION == Permission.fromValue(optSitePermission.get().getCanEdit())) {\n+      logger.exit(ErrorCode.MANAGE_SITE_PERMISSION_ACCESS_DENIED);\n+      return new ParticipantRegistryResponse(ErrorCode.MANAGE_SITE_PERMISSION_ACCESS_DENIED);\n+    }\n+\n+    ParticipantRegistryDetail participantRegistry =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "943b6346cca4e7ef6d6454e630184b71d814c83f"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE1ODQwNQ==", "bodyText": "changed variables name", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/671#discussion_r462158405", "createdAt": "2020-07-29T09:17:12Z", "author": {"login": "navya-BTC"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/SiteServiceImpl.java", "diffHunk": "@@ -239,4 +250,91 @@ private ErrorCode validationForAddNewParticipant(\n     }\n     return null;\n   }\n+\n+  @Override\n+  public ParticipantRegistryResponse getParticipants(\n+      String userId, String siteId, String onboardingStatus) {\n+    logger.info(\"getParticipants()\");\n+    Optional<SiteEntity> optSite = siteRepository.findById(siteId);\n+\n+    if (!optSite.isPresent()) {\n+      logger.exit(ErrorCode.SITE_NOT_FOUND);\n+      return new ParticipantRegistryResponse(ErrorCode.SITE_NOT_FOUND);\n+    }\n+\n+    Optional<SitePermissionEntity> optSitePermission =\n+        sitePermissionRepository.findByUserIdAndSiteId(userId, siteId);\n+\n+    if (!optSitePermission.isPresent()\n+        || Permission.NO_PERMISSION == Permission.fromValue(optSitePermission.get().getCanEdit())) {\n+      logger.exit(ErrorCode.MANAGE_SITE_PERMISSION_ACCESS_DENIED);\n+      return new ParticipantRegistryResponse(ErrorCode.MANAGE_SITE_PERMISSION_ACCESS_DENIED);\n+    }\n+\n+    ParticipantRegistryDetail participantRegistry =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA1MDM0OA=="}, "originalCommit": {"oid": "943b6346cca4e7ef6d6454e630184b71d814c83f"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDY1MDczOnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/SiteServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNTo0MDo1MVrOG4pVHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOToxNzozNlrOG4v7RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA1MDU5MQ==", "bodyText": "needs better naming for these vars", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/671#discussion_r462050591", "createdAt": "2020-07-29T05:40:51Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/SiteServiceImpl.java", "diffHunk": "@@ -239,4 +250,91 @@ private ErrorCode validationForAddNewParticipant(\n     }\n     return null;\n   }\n+\n+  @Override\n+  public ParticipantRegistryResponse getParticipants(\n+      String userId, String siteId, String onboardingStatus) {\n+    logger.info(\"getParticipants()\");\n+    Optional<SiteEntity> optSite = siteRepository.findById(siteId);\n+\n+    if (!optSite.isPresent()) {\n+      logger.exit(ErrorCode.SITE_NOT_FOUND);\n+      return new ParticipantRegistryResponse(ErrorCode.SITE_NOT_FOUND);\n+    }\n+\n+    Optional<SitePermissionEntity> optSitePermission =\n+        sitePermissionRepository.findByUserIdAndSiteId(userId, siteId);\n+\n+    if (!optSitePermission.isPresent()\n+        || Permission.NO_PERMISSION == Permission.fromValue(optSitePermission.get().getCanEdit())) {\n+      logger.exit(ErrorCode.MANAGE_SITE_PERMISSION_ACCESS_DENIED);\n+      return new ParticipantRegistryResponse(ErrorCode.MANAGE_SITE_PERMISSION_ACCESS_DENIED);\n+    }\n+\n+    ParticipantRegistryDetail participantRegistry =\n+        ParticipantMapper.fromSite(optSite.get(), optSitePermission.get(), siteId);\n+    Map<String, Long> statusWithCountMap = getOnboardingStatusWithCount(siteId);\n+    participantRegistry.setCountByStatus(statusWithCountMap);\n+\n+    List<ParticipantRegistrySiteEntity> registryParticipants = null;\n+    if (StringUtils.isEmpty(onboardingStatus)) {\n+      registryParticipants = participantRegistrySiteRepository.findBySiteId(siteId);\n+    } else {\n+      registryParticipants =\n+          participantRegistrySiteRepository.findBySiteIdAndStatus(siteId, onboardingStatus);\n+    }\n+\n+    addRegistryParticipants(participantRegistry, registryParticipants);\n+\n+    ParticipantRegistryResponse participantRegistryResponse =\n+        new ParticipantRegistryResponse(\n+            MessageCode.GET_PARTICIPANT_REGISTRY_SUCCESS, participantRegistry);\n+\n+    logger.exit(String.format(\"message=%s\", participantRegistryResponse.getMessage()));\n+    return participantRegistryResponse;\n+  }\n+\n+  private Map<String, Long> getOnboardingStatusWithCount(String siteId) {\n+    List<ParticipantRegistrySiteCount> statusCount =\n+        (List<ParticipantRegistrySiteCount>)\n+            CollectionUtils.emptyIfNull(\n+                participantRegistrySiteRepository.findStatusCountBySiteId(siteId));\n+\n+    Map<String, Long> statusWithCountMap = new HashMap<>();\n+    for (OnboardingStatus onboardingStatus : OnboardingStatus.values()) {\n+      statusWithCountMap.put(onboardingStatus.getCode(), (long) 0);\n+    }\n+\n+    long total = 0;\n+    for (ParticipantRegistrySiteCount count : statusCount) {\n+      total += count.getCount();\n+      statusWithCountMap.put(count.getOnboardingStatus(), count.getCount());\n+    }\n+\n+    statusWithCountMap.put(\"A\", total);\n+    return statusWithCountMap;\n+  }\n+\n+  private void addRegistryParticipants(\n+      ParticipantRegistryDetail participantRegistry,\n+      List<ParticipantRegistrySiteEntity> registryParticipants) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "943b6346cca4e7ef6d6454e630184b71d814c83f"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE1ODY2MA==", "bodyText": "changed naming for these vars", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/671#discussion_r462158660", "createdAt": "2020-07-29T09:17:36Z", "author": {"login": "navya-BTC"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/SiteServiceImpl.java", "diffHunk": "@@ -239,4 +250,91 @@ private ErrorCode validationForAddNewParticipant(\n     }\n     return null;\n   }\n+\n+  @Override\n+  public ParticipantRegistryResponse getParticipants(\n+      String userId, String siteId, String onboardingStatus) {\n+    logger.info(\"getParticipants()\");\n+    Optional<SiteEntity> optSite = siteRepository.findById(siteId);\n+\n+    if (!optSite.isPresent()) {\n+      logger.exit(ErrorCode.SITE_NOT_FOUND);\n+      return new ParticipantRegistryResponse(ErrorCode.SITE_NOT_FOUND);\n+    }\n+\n+    Optional<SitePermissionEntity> optSitePermission =\n+        sitePermissionRepository.findByUserIdAndSiteId(userId, siteId);\n+\n+    if (!optSitePermission.isPresent()\n+        || Permission.NO_PERMISSION == Permission.fromValue(optSitePermission.get().getCanEdit())) {\n+      logger.exit(ErrorCode.MANAGE_SITE_PERMISSION_ACCESS_DENIED);\n+      return new ParticipantRegistryResponse(ErrorCode.MANAGE_SITE_PERMISSION_ACCESS_DENIED);\n+    }\n+\n+    ParticipantRegistryDetail participantRegistry =\n+        ParticipantMapper.fromSite(optSite.get(), optSitePermission.get(), siteId);\n+    Map<String, Long> statusWithCountMap = getOnboardingStatusWithCount(siteId);\n+    participantRegistry.setCountByStatus(statusWithCountMap);\n+\n+    List<ParticipantRegistrySiteEntity> registryParticipants = null;\n+    if (StringUtils.isEmpty(onboardingStatus)) {\n+      registryParticipants = participantRegistrySiteRepository.findBySiteId(siteId);\n+    } else {\n+      registryParticipants =\n+          participantRegistrySiteRepository.findBySiteIdAndStatus(siteId, onboardingStatus);\n+    }\n+\n+    addRegistryParticipants(participantRegistry, registryParticipants);\n+\n+    ParticipantRegistryResponse participantRegistryResponse =\n+        new ParticipantRegistryResponse(\n+            MessageCode.GET_PARTICIPANT_REGISTRY_SUCCESS, participantRegistry);\n+\n+    logger.exit(String.format(\"message=%s\", participantRegistryResponse.getMessage()));\n+    return participantRegistryResponse;\n+  }\n+\n+  private Map<String, Long> getOnboardingStatusWithCount(String siteId) {\n+    List<ParticipantRegistrySiteCount> statusCount =\n+        (List<ParticipantRegistrySiteCount>)\n+            CollectionUtils.emptyIfNull(\n+                participantRegistrySiteRepository.findStatusCountBySiteId(siteId));\n+\n+    Map<String, Long> statusWithCountMap = new HashMap<>();\n+    for (OnboardingStatus onboardingStatus : OnboardingStatus.values()) {\n+      statusWithCountMap.put(onboardingStatus.getCode(), (long) 0);\n+    }\n+\n+    long total = 0;\n+    for (ParticipantRegistrySiteCount count : statusCount) {\n+      total += count.getCount();\n+      statusWithCountMap.put(count.getOnboardingStatus(), count.getCount());\n+    }\n+\n+    statusWithCountMap.put(\"A\", total);\n+    return statusWithCountMap;\n+  }\n+\n+  private void addRegistryParticipants(\n+      ParticipantRegistryDetail participantRegistry,\n+      List<ParticipantRegistrySiteEntity> registryParticipants) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA1MDU5MQ=="}, "originalCommit": {"oid": "943b6346cca4e7ef6d6454e630184b71d814c83f"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDY1Nzk2OnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/SiteController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNTo0NDo0MFrOG4pZhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOTowODozNFrOG4vmGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA1MTcxOA==", "bodyText": "handle this in service?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/671#discussion_r462051718", "createdAt": "2020-07-29T05:44:40Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/SiteController.java", "diffHunk": "@@ -68,12 +75,32 @@\n   public ResponseEntity<ParticipantResponse> addNewParticipant(\n       @PathVariable String siteId,\n       @RequestHeader(name = USER_ID_HEADER) String userId,\n-      @RequestBody ParticipantDetail participant,\n+      @Valid @RequestBody ParticipantDetailRequest participant,\n       HttpServletRequest request) {\n     logger.entry(BEGIN_REQUEST_LOG, request.getRequestURI());\n     participant.setSiteId(siteId);\n     ParticipantResponse participantResponse = siteService.addNewParticipant(participant, userId);\n     logger.exit(String.format(STATUS_LOG, participantResponse.getHttpStatusCode()));\n     return ResponseEntity.status(participantResponse.getHttpStatusCode()).body(participantResponse);\n   }\n+\n+  @GetMapping(value = \"/sites/{siteId}/participants\", produces = MediaType.APPLICATION_JSON_VALUE)\n+  public ResponseEntity<ParticipantRegistryResponse> getSiteParticipant(\n+      @PathVariable String siteId,\n+      @RequestHeader(name = USER_ID_HEADER) String userId,\n+      @RequestParam(name = \"onboardingStatus\", required = false) String onboardingStatus,\n+      HttpServletRequest request) {\n+    logger.entry(BEGIN_REQUEST_LOG, request.getRequestURI());\n+\n+    if (StringUtils.isNotEmpty(onboardingStatus)\n+        && OnboardingStatus.fromCode(onboardingStatus) == null) {\n+      return ResponseEntity.status(HttpStatus.BAD_REQUEST)\n+          .body(new ParticipantRegistryResponse(ErrorCode.INVALID_ONBOARDING_STATUS));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "943b6346cca4e7ef6d6454e630184b71d814c83f"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE1MzI0Mg==", "bodyText": "onboardingStatus is an optional field, hence we are checking correctness of the value before calling service method, I think its okay to have it in controller layer", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/671#discussion_r462153242", "createdAt": "2020-07-29T09:08:34Z", "author": {"login": "navya-BTC"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/SiteController.java", "diffHunk": "@@ -68,12 +75,32 @@\n   public ResponseEntity<ParticipantResponse> addNewParticipant(\n       @PathVariable String siteId,\n       @RequestHeader(name = USER_ID_HEADER) String userId,\n-      @RequestBody ParticipantDetail participant,\n+      @Valid @RequestBody ParticipantDetailRequest participant,\n       HttpServletRequest request) {\n     logger.entry(BEGIN_REQUEST_LOG, request.getRequestURI());\n     participant.setSiteId(siteId);\n     ParticipantResponse participantResponse = siteService.addNewParticipant(participant, userId);\n     logger.exit(String.format(STATUS_LOG, participantResponse.getHttpStatusCode()));\n     return ResponseEntity.status(participantResponse.getHttpStatusCode()).body(participantResponse);\n   }\n+\n+  @GetMapping(value = \"/sites/{siteId}/participants\", produces = MediaType.APPLICATION_JSON_VALUE)\n+  public ResponseEntity<ParticipantRegistryResponse> getSiteParticipant(\n+      @PathVariable String siteId,\n+      @RequestHeader(name = USER_ID_HEADER) String userId,\n+      @RequestParam(name = \"onboardingStatus\", required = false) String onboardingStatus,\n+      HttpServletRequest request) {\n+    logger.entry(BEGIN_REQUEST_LOG, request.getRequestURI());\n+\n+    if (StringUtils.isNotEmpty(onboardingStatus)\n+        && OnboardingStatus.fromCode(onboardingStatus) == null) {\n+      return ResponseEntity.status(HttpStatus.BAD_REQUEST)\n+          .body(new ParticipantRegistryResponse(ErrorCode.INVALID_ONBOARDING_STATUS));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA1MTcxOA=="}, "originalCommit": {"oid": "943b6346cca4e7ef6d6454e630184b71d814c83f"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDY2NDg3OnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/SitesControllerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNTo0ODoxMVrOG4pdpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOToxODozMlrOG4v9Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA1Mjc3NQ==", "bodyText": "Shouldn't we check for the registryParticipants list returned here, too?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/671#discussion_r462052775", "createdAt": "2020-07-29T05:48:11Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/SitesControllerTest.java", "diffHunk": "@@ -328,6 +332,96 @@ public void shouldAddNewParticipant() throws Exception {\n     assertEquals(participantRequest.getEmail(), optParticipantRegistrySite.get().getEmail());\n   }\n \n+  @Test\n+  public void shouldReturnSiteNotFoundError() throws Exception {\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_SITE_PARTICIPANTS.getPath(), IdGenerator.id())\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isNotFound())\n+        .andExpect(jsonPath(\"$.error_description\", is(SITE_NOT_FOUND.getDescription())));\n+  }\n+\n+  @Test\n+  public void shouldReturnSitePermissionAccessDeniedError() throws Exception {\n+    // Site 1: set manage site permission to no permission\n+    sitePermissionEntity = siteEntity.getSitePermissions().get(0);\n+    sitePermissionEntity.setCanEdit(Permission.NO_PERMISSION.value());\n+    testDataHelper.getSiteRepository().saveAndFlush(siteEntity);\n+\n+    // Step 2: Call API and expect MANAGE_SITE_PERMISSION_ACCESS_DENIED error\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_SITE_PARTICIPANTS.getPath(), siteEntity.getId())\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isForbidden())\n+        .andExpect(\n+            jsonPath(\n+                \"$.error_description\", is(MANAGE_SITE_PERMISSION_ACCESS_DENIED.getDescription())));\n+  }\n+\n+  @Test\n+  public void shouldReturnInvalidOnboardingStatusError() throws Exception {\n+    // Step 1: set study entity\n+    siteEntity.setStudy(studyEntity);\n+    testDataHelper.getSiteRepository().saveAndFlush(siteEntity);\n+    testDataHelper\n+        .getParticipantRegistrySiteRepository()\n+        .saveAndFlush(participantRegistrySiteEntity);\n+\n+    // Step 2: Call API and expect INVALID_ONBOARDING_STATUS error\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_SITE_PARTICIPANTS.getPath(), siteEntity.getId())\n+                .headers(headers)\n+                .param(\"onboardingStatus\", \"NEW\")\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isBadRequest())\n+        .andExpect(jsonPath(\"$.error_description\", is(INVALID_ONBOARDING_STATUS.getDescription())));\n+  }\n+\n+  @Test\n+  public void shouldReturnSiteParticipantsRegistry() throws Exception {\n+    // Step 1: set onboarding status to 'N'\n+    siteEntity.setStudy(studyEntity);\n+    testDataHelper.getSiteRepository().saveAndFlush(siteEntity);\n+    participantRegistrySiteEntity.setOnboardingStatus(OnboardingStatus.NEW.getCode());\n+    testDataHelper\n+        .getParticipantRegistrySiteRepository()\n+        .saveAndFlush(participantRegistrySiteEntity);\n+\n+    // Step 2: Call API and expect  GET_PARTICIPANT_REGISTRY_SUCCESS\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_SITE_PARTICIPANTS.getPath(), siteEntity.getId())\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(jsonPath(\"$.participantRegistryDetail\", notNullValue()))\n+        .andExpect(jsonPath(\"$.participantRegistryDetail.studyId\", is(studyEntity.getId())))\n+        .andExpect(jsonPath(\"$.participantRegistryDetail.siteStatus\", is(siteEntity.getStatus())))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "943b6346cca4e7ef6d6454e630184b71d814c83f"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE1OTIwMg==", "bodyText": "Added assertion for registryParticipants list", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/671#discussion_r462159202", "createdAt": "2020-07-29T09:18:32Z", "author": {"login": "navya-BTC"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/SitesControllerTest.java", "diffHunk": "@@ -328,6 +332,96 @@ public void shouldAddNewParticipant() throws Exception {\n     assertEquals(participantRequest.getEmail(), optParticipantRegistrySite.get().getEmail());\n   }\n \n+  @Test\n+  public void shouldReturnSiteNotFoundError() throws Exception {\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_SITE_PARTICIPANTS.getPath(), IdGenerator.id())\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isNotFound())\n+        .andExpect(jsonPath(\"$.error_description\", is(SITE_NOT_FOUND.getDescription())));\n+  }\n+\n+  @Test\n+  public void shouldReturnSitePermissionAccessDeniedError() throws Exception {\n+    // Site 1: set manage site permission to no permission\n+    sitePermissionEntity = siteEntity.getSitePermissions().get(0);\n+    sitePermissionEntity.setCanEdit(Permission.NO_PERMISSION.value());\n+    testDataHelper.getSiteRepository().saveAndFlush(siteEntity);\n+\n+    // Step 2: Call API and expect MANAGE_SITE_PERMISSION_ACCESS_DENIED error\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_SITE_PARTICIPANTS.getPath(), siteEntity.getId())\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isForbidden())\n+        .andExpect(\n+            jsonPath(\n+                \"$.error_description\", is(MANAGE_SITE_PERMISSION_ACCESS_DENIED.getDescription())));\n+  }\n+\n+  @Test\n+  public void shouldReturnInvalidOnboardingStatusError() throws Exception {\n+    // Step 1: set study entity\n+    siteEntity.setStudy(studyEntity);\n+    testDataHelper.getSiteRepository().saveAndFlush(siteEntity);\n+    testDataHelper\n+        .getParticipantRegistrySiteRepository()\n+        .saveAndFlush(participantRegistrySiteEntity);\n+\n+    // Step 2: Call API and expect INVALID_ONBOARDING_STATUS error\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_SITE_PARTICIPANTS.getPath(), siteEntity.getId())\n+                .headers(headers)\n+                .param(\"onboardingStatus\", \"NEW\")\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isBadRequest())\n+        .andExpect(jsonPath(\"$.error_description\", is(INVALID_ONBOARDING_STATUS.getDescription())));\n+  }\n+\n+  @Test\n+  public void shouldReturnSiteParticipantsRegistry() throws Exception {\n+    // Step 1: set onboarding status to 'N'\n+    siteEntity.setStudy(studyEntity);\n+    testDataHelper.getSiteRepository().saveAndFlush(siteEntity);\n+    participantRegistrySiteEntity.setOnboardingStatus(OnboardingStatus.NEW.getCode());\n+    testDataHelper\n+        .getParticipantRegistrySiteRepository()\n+        .saveAndFlush(participantRegistrySiteEntity);\n+\n+    // Step 2: Call API and expect  GET_PARTICIPANT_REGISTRY_SUCCESS\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_SITE_PARTICIPANTS.getPath(), siteEntity.getId())\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(jsonPath(\"$.participantRegistryDetail\", notNullValue()))\n+        .andExpect(jsonPath(\"$.participantRegistryDetail.studyId\", is(studyEntity.getId())))\n+        .andExpect(jsonPath(\"$.participantRegistryDetail.siteStatus\", is(siteEntity.getStatus())))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA1Mjc3NQ=="}, "originalCommit": {"oid": "943b6346cca4e7ef6d6454e630184b71d814c83f"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODIzOTQ5OnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/mapper/ParticipantMapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMjowMzo1MVrOG5L3LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDoxNjo0NFrOG5c_Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYxNjM2NA==", "bodyText": "fromAppInfo -> setParticipantRegistryAppInfo (?)", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/671#discussion_r462616364", "createdAt": "2020-07-29T22:03:51Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/mapper/ParticipantMapper.java", "diffHunk": "@@ -67,4 +74,70 @@ public static ParticipantRegistrySiteEntity fromParticipantRequest(\n     participantRegistrySite.setStudy(site.getStudy());\n     return participantRegistrySite;\n   }\n+\n+  public static ParticipantRegistryDetail fromSite(\n+      SiteEntity site, SitePermissionEntity sitePermission, String siteId) {\n+    ParticipantRegistryDetail participants = new ParticipantRegistryDetail();\n+    participants.setSiteStatus(site.getStatus());\n+    participants.setSiteId(siteId);\n+    if (site.getStudy() != null) {\n+      StudyEntity study = site.getStudy();\n+      participants.setStudyId(study.getId());\n+      participants.setStudyName(study.getName());\n+      participants.setCustomStudyId(study.getCustomId());\n+      participants.setSitePermission(sitePermission.getCanEdit());\n+      fromAppInfo(participants, study);\n+      fromLocation(site, participants);\n+    }\n+    return participants;\n+  }\n+\n+  private static void fromAppInfo(ParticipantRegistryDetail participants, StudyEntity study) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00ba48fc237678cffcf57f01e2db12ddbd0a6eb5"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg5Njk4Ng==", "bodyText": "changed to setParticipantRegistryAppInfo", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/671#discussion_r462896986", "createdAt": "2020-07-30T10:16:44Z", "author": {"login": "navya-BTC"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/mapper/ParticipantMapper.java", "diffHunk": "@@ -67,4 +74,70 @@ public static ParticipantRegistrySiteEntity fromParticipantRequest(\n     participantRegistrySite.setStudy(site.getStudy());\n     return participantRegistrySite;\n   }\n+\n+  public static ParticipantRegistryDetail fromSite(\n+      SiteEntity site, SitePermissionEntity sitePermission, String siteId) {\n+    ParticipantRegistryDetail participants = new ParticipantRegistryDetail();\n+    participants.setSiteStatus(site.getStatus());\n+    participants.setSiteId(siteId);\n+    if (site.getStudy() != null) {\n+      StudyEntity study = site.getStudy();\n+      participants.setStudyId(study.getId());\n+      participants.setStudyName(study.getName());\n+      participants.setCustomStudyId(study.getCustomId());\n+      participants.setSitePermission(sitePermission.getCanEdit());\n+      fromAppInfo(participants, study);\n+      fromLocation(site, participants);\n+    }\n+    return participants;\n+  }\n+\n+  private static void fromAppInfo(ParticipantRegistryDetail participants, StudyEntity study) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYxNjM2NA=="}, "originalCommit": {"oid": "00ba48fc237678cffcf57f01e2db12ddbd0a6eb5"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODIzOTg4OnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/mapper/ParticipantMapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMjowNDowMlrOG5L3cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNDo0MTowNVrOG5S0wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYxNjQzMg==", "bodyText": "same as above", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/671#discussion_r462616432", "createdAt": "2020-07-29T22:04:02Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/mapper/ParticipantMapper.java", "diffHunk": "@@ -67,4 +74,70 @@ public static ParticipantRegistrySiteEntity fromParticipantRequest(\n     participantRegistrySite.setStudy(site.getStudy());\n     return participantRegistrySite;\n   }\n+\n+  public static ParticipantRegistryDetail fromSite(\n+      SiteEntity site, SitePermissionEntity sitePermission, String siteId) {\n+    ParticipantRegistryDetail participants = new ParticipantRegistryDetail();\n+    participants.setSiteStatus(site.getStatus());\n+    participants.setSiteId(siteId);\n+    if (site.getStudy() != null) {\n+      StudyEntity study = site.getStudy();\n+      participants.setStudyId(study.getId());\n+      participants.setStudyName(study.getName());\n+      participants.setCustomStudyId(study.getCustomId());\n+      participants.setSitePermission(sitePermission.getCanEdit());\n+      fromAppInfo(participants, study);\n+      fromLocation(site, participants);\n+    }\n+    return participants;\n+  }\n+\n+  private static void fromAppInfo(ParticipantRegistryDetail participants, StudyEntity study) {\n+    if (study.getAppInfo() != null) {\n+      participants.setAppName(study.getAppInfo().getAppName());\n+      participants.setCustomAppId(study.getAppInfo().getAppId());\n+      participants.setAppId(study.getAppInfo().getAppId());\n+    }\n+  }\n+\n+  private static void fromLocation(SiteEntity site, ParticipantRegistryDetail participants) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00ba48fc237678cffcf57f01e2db12ddbd0a6eb5"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjczMDQzMg==", "bodyText": "changed to setParticipantRegistryLocation", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/671#discussion_r462730432", "createdAt": "2020-07-30T04:41:05Z", "author": {"login": "navya-BTC"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/mapper/ParticipantMapper.java", "diffHunk": "@@ -67,4 +74,70 @@ public static ParticipantRegistrySiteEntity fromParticipantRequest(\n     participantRegistrySite.setStudy(site.getStudy());\n     return participantRegistrySite;\n   }\n+\n+  public static ParticipantRegistryDetail fromSite(\n+      SiteEntity site, SitePermissionEntity sitePermission, String siteId) {\n+    ParticipantRegistryDetail participants = new ParticipantRegistryDetail();\n+    participants.setSiteStatus(site.getStatus());\n+    participants.setSiteId(siteId);\n+    if (site.getStudy() != null) {\n+      StudyEntity study = site.getStudy();\n+      participants.setStudyId(study.getId());\n+      participants.setStudyName(study.getName());\n+      participants.setCustomStudyId(study.getCustomId());\n+      participants.setSitePermission(sitePermission.getCanEdit());\n+      fromAppInfo(participants, study);\n+      fromLocation(site, participants);\n+    }\n+    return participants;\n+  }\n+\n+  private static void fromAppInfo(ParticipantRegistryDetail participants, StudyEntity study) {\n+    if (study.getAppInfo() != null) {\n+      participants.setAppName(study.getAppInfo().getAppName());\n+      participants.setCustomAppId(study.getAppInfo().getAppId());\n+      participants.setAppId(study.getAppInfo().getAppId());\n+    }\n+  }\n+\n+  private static void fromLocation(SiteEntity site, ParticipantRegistryDetail participants) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYxNjQzMg=="}, "originalCommit": {"oid": "00ba48fc237678cffcf57f01e2db12ddbd0a6eb5"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2334, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}