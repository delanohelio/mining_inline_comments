{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1NzA0ODk1", "number": 37, "reviewThreads": {"totalCount": 52, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo0Mjo1MlrODsvA0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzozMjo0OFrODuDplA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjM0MTk1OnYy", "diffSide": "RIGHT", "path": ".github/workflows/build-user-registration-server-user-mgmt.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo0Mjo1MlrOF9wEKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTozNjoyMVrOF_xK_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5NDk1Mg==", "bodyText": "It might make sense to either use wildcard for branch name, or simply use branch-ignore if the goal is to exclude certain other branches", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400294952", "createdAt": "2020-03-30T15:42:52Z", "author": {"login": "zohrehj"}, "path": ".github/workflows/build-user-registration-server-user-mgmt.yml", "diffHunk": "@@ -1,6 +1,6 @@\n on:\n   pull_request:\n-    branches: [ unc-cv19 ]\n+    branches: [ early-access ]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxMDIzNg==", "bodyText": "This change was required to trigger build check as per the branch name. However we will look into this how it can be handled in better way.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402410236", "createdAt": "2020-04-02T15:36:21Z", "author": {"login": "aswinijena100"}, "path": ".github/workflows/build-user-registration-server-user-mgmt.yml", "diffHunk": "@@ -1,6 +1,6 @@\n on:\n   pull_request:\n-    branches: [ unc-cv19 ]\n+    branches: [ early-access ]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5NDk1Mg=="}, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjM1ODczOnYy", "diffSide": "RIGHT", "path": "WCP-WS/src/main/resources/application_local.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo0NjozOVrOF9wO-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTozNjo0M1rOF_xMDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5NzcyMA==", "bodyText": "please remove actual values from the code", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400297720", "createdAt": "2020-03-30T15:46:39Z", "author": {"login": "zohrehj"}, "path": "WCP-WS/src/main/resources/application_local.properties", "diffHunk": "@@ -55,9 +58,9 @@ userRegistrationServerUrl=http://dummy-value/myStudiesUserMgmtWS/studies/studyme\n responseServerUrl=http://dummy-value/mystudies-response-server/studymetadata\n \n #clientId\n-WCPClientId=TEST\n+WCPClientId=a7ff979d-8b11-46d7-9003-3954c42041eg", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxMDUwOQ==", "bodyText": "Fixed in todays PR", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402410509", "createdAt": "2020-04-02T15:36:43Z", "author": {"login": "aswinijena100"}, "path": "WCP-WS/src/main/resources/application_local.properties", "diffHunk": "@@ -55,9 +58,9 @@ userRegistrationServerUrl=http://dummy-value/myStudiesUserMgmtWS/studies/studyme\n responseServerUrl=http://dummy-value/mystudies-response-server/studymetadata\n \n #clientId\n-WCPClientId=TEST\n+WCPClientId=a7ff979d-8b11-46d7-9003-3954c42041eg", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5NzcyMA=="}, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjM1OTI3OnYy", "diffSide": "RIGHT", "path": "WCP-WS/src/main/resources/application_local.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo0Njo0NlrOF9wPTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo0Njo0NlrOF9wPTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5NzgwNQ==", "bodyText": "same here", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400297805", "createdAt": "2020-03-30T15:46:46Z", "author": {"login": "zohrehj"}, "path": "WCP-WS/src/main/resources/application_local.properties", "diffHunk": "@@ -55,9 +58,9 @@ userRegistrationServerUrl=http://dummy-value/myStudiesUserMgmtWS/studies/studyme\n responseServerUrl=http://dummy-value/mystudies-response-server/studymetadata\n \n #clientId\n-WCPClientId=TEST\n+WCPClientId=a7ff979d-8b11-46d7-9003-3954c42041eg\n \n #SecretKey\n-WCPSecretKey=TEST\n+WCPSecretKey=df109e51185345c4b1ba32910bb44da285f1039b43d00649f01dc3b1624eb32a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjM2NTAyOnYy", "diffSide": "RIGHT", "path": "WCP-WS/src/main/resources/application_local.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo0ODowM1rOF9wS6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTozODowMVrOF_xPoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5ODczMQ==", "bodyText": "please follow the format put in place in PR #36", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400298731", "createdAt": "2020-03-30T15:48:03Z", "author": {"login": "zohrehj"}, "path": "WCP-WS/src/main/resources/application_local.properties", "diffHunk": "@@ -5,6 +5,9 @@ sslfactory.value=javax.net.ssl.SSLSocketFactory\n smtp.portvalue=dummy-value\n smtp.hostname=dummy-value\n \n+#User registration server root URL\n+fda.registration.root.url=http://dummy-value/myStudiesUserMgmtWS", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxMTQyNQ==", "bodyText": "we haven't done changes related to variable name format , will look into this in future PR", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402411425", "createdAt": "2020-04-02T15:38:01Z", "author": {"login": "aswinijena100"}, "path": "WCP-WS/src/main/resources/application_local.properties", "diffHunk": "@@ -5,6 +5,9 @@ sslfactory.value=javax.net.ssl.SSLSocketFactory\n smtp.portvalue=dummy-value\n smtp.hostname=dummy-value\n \n+#User registration server root URL\n+fda.registration.root.url=http://dummy-value/myStudiesUserMgmtWS", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5ODczMQ=="}, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjM2NjYwOnYy", "diffSide": "RIGHT", "path": "WCP-WS/src/main/resources/application_local.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo0ODoyNlrOF9wT9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTozODoyNFrOF_xQng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5ODk5Nw==", "bodyText": "nit: missing space before User", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400298997", "createdAt": "2020-03-30T15:48:26Z", "author": {"login": "zohrehj"}, "path": "WCP-WS/src/main/resources/application_local.properties", "diffHunk": "@@ -5,6 +5,9 @@ sslfactory.value=javax.net.ssl.SSLSocketFactory\n smtp.portvalue=dummy-value\n smtp.hostname=dummy-value\n \n+#User registration server root URL", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxMTY3OA==", "bodyText": "fixed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402411678", "createdAt": "2020-04-02T15:38:24Z", "author": {"login": "aswinijena100"}, "path": "WCP-WS/src/main/resources/application_local.properties", "diffHunk": "@@ -5,6 +5,9 @@ sslfactory.value=javax.net.ssl.SSLSocketFactory\n smtp.portvalue=dummy-value\n smtp.hostname=dummy-value\n \n+#User registration server root URL", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5ODk5Nw=="}, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjM5NTk5OnYy", "diffSide": "RIGHT", "path": "WCP/fdahpStudyDesigner/src/main/java/com/fdahpstudydesigner/scheduler/FDASchedulerService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo1NDoyN1rOF9wlyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTozOTo1NlrOF_xU4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwMzU2Mw==", "bodyText": "please do not change the format of the license. The previous format was consistent with other files, this change will make this one look different.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400303563", "createdAt": "2020-03-30T15:54:27Z", "author": {"login": "zohrehj"}, "path": "WCP/fdahpStudyDesigner/src/main/java/com/fdahpstudydesigner/scheduler/FDASchedulerService.java", "diffHunk": "@@ -1,24 +1,23 @@\n /*\n- * Copyright \u00c2\u00a9 2017-2018 Harvard Pilgrim Health Care Institute (HPHCI) and its Contributors.\n+ * Copyright \u00a9 2017-2018 Harvard Pilgrim Health Care Institute (HPHCI) and its Contributors.\n+ * Copyright 2020 Google LLC\n  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and\n- * associated documentation files (the \"Software\"), to deal in the Software without restriction, including\n- * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n- * of the Software, and to permit persons to whom the Software is furnished to do so, subject to the\n- * following conditions:\n+ * associated documentation files (the \"Software\"), to deal in the Software without restriction,\n+ * including without limitation the rights to use, copy, modify, merge, publish, distribute,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxMjc2OQ==", "bodyText": "Fixed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402412769", "createdAt": "2020-04-02T15:39:56Z", "author": {"login": "aswinijena100"}, "path": "WCP/fdahpStudyDesigner/src/main/java/com/fdahpstudydesigner/scheduler/FDASchedulerService.java", "diffHunk": "@@ -1,24 +1,23 @@\n /*\n- * Copyright \u00c2\u00a9 2017-2018 Harvard Pilgrim Health Care Institute (HPHCI) and its Contributors.\n+ * Copyright \u00a9 2017-2018 Harvard Pilgrim Health Care Institute (HPHCI) and its Contributors.\n+ * Copyright 2020 Google LLC\n  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and\n- * associated documentation files (the \"Software\"), to deal in the Software without restriction, including\n- * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n- * of the Software, and to permit persons to whom the Software is furnished to do so, subject to the\n- * following conditions:\n+ * associated documentation files (the \"Software\"), to deal in the Software without restriction,\n+ * including without limitation the rights to use, copy, modify, merge, publish, distribute,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwMzU2Mw=="}, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjQwNTMzOnYy", "diffSide": "RIGHT", "path": "WCP/fdahpStudyDesigner/src/main/resources/application_local.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo1NjoyN1rOF9wrfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTo0MDoyMlrOF_xWKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwNTAyMQ==", "bodyText": "please do not check in actual values in here. Use variable similar to #36 that can be later replaced with actual values.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400305021", "createdAt": "2020-03-30T15:56:27Z", "author": {"login": "zohrehj"}, "path": "WCP/fdahpStudyDesigner/src/main/resources/application_local.properties", "diffHunk": "@@ -55,9 +58,9 @@ userRegistrationServerUrl=http://dummy-value/myStudiesUserMgmtWS/studies/studyme\n responseServerUrl=http://dummy-value/mystudies-response-server/studymetadata\n \n #clientId\n-WCPClientId=TEST\n+WCPClientId=a7ff979d-8b11-46d7-9003-3954c42041eg", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxMzA5OQ==", "bodyText": "Fixed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402413099", "createdAt": "2020-04-02T15:40:22Z", "author": {"login": "aswinijena100"}, "path": "WCP/fdahpStudyDesigner/src/main/resources/application_local.properties", "diffHunk": "@@ -55,9 +58,9 @@ userRegistrationServerUrl=http://dummy-value/myStudiesUserMgmtWS/studies/studyme\n responseServerUrl=http://dummy-value/mystudies-response-server/studymetadata\n \n #clientId\n-WCPClientId=TEST\n+WCPClientId=a7ff979d-8b11-46d7-9003-3954c42041eg", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwNTAyMQ=="}, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjQwNzI4OnYy", "diffSide": "RIGHT", "path": "WCP/fdahpStudyDesigner/src/main/resources/application_local.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo1Njo0OVrOF9wssQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo1Njo0OVrOF9wssQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwNTMyOQ==", "bodyText": "please follow the formatting in #36", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400305329", "createdAt": "2020-03-30T15:56:49Z", "author": {"login": "zohrehj"}, "path": "WCP/fdahpStudyDesigner/src/main/resources/application_local.properties", "diffHunk": "@@ -10,6 +10,9 @@ fda.imgUploadPath=/webapps/fdaResources/\n fda.currentPath=catalina.home\n fda.imgDisplaydPath=/fdaResources/\n \n+#User registration server root URL\n+fda.registration.root.url=http://dummy-value/myStudiesUserMgmtWS", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjQwODE2OnYy", "diffSide": "RIGHT", "path": "WCP/fdahpStudyDesigner/src/main/resources/application_local.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo1NzowMVrOF9wtTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTo0MDo1MFrOF_xXmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwNTQ4Nw==", "bodyText": "same here", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400305487", "createdAt": "2020-03-30T15:57:01Z", "author": {"login": "zohrehj"}, "path": "WCP/fdahpStudyDesigner/src/main/resources/application_local.properties", "diffHunk": "@@ -55,9 +58,9 @@ userRegistrationServerUrl=http://dummy-value/myStudiesUserMgmtWS/studies/studyme\n responseServerUrl=http://dummy-value/mystudies-response-server/studymetadata\n \n #clientId\n-WCPClientId=TEST\n+WCPClientId=a7ff979d-8b11-46d7-9003-3954c42041eg\n \n #SecretKey\n-WCPSecretKey=TEST\n+WCPSecretKey=joef42g64ogfIFOCWHFeb4efca157245259ed65thla9a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxMzQ2Ng==", "bodyText": "Fixed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402413466", "createdAt": "2020-04-02T15:40:50Z", "author": {"login": "aswinijena100"}, "path": "WCP/fdahpStudyDesigner/src/main/resources/application_local.properties", "diffHunk": "@@ -55,9 +58,9 @@ userRegistrationServerUrl=http://dummy-value/myStudiesUserMgmtWS/studies/studyme\n responseServerUrl=http://dummy-value/mystudies-response-server/studymetadata\n \n #clientId\n-WCPClientId=TEST\n+WCPClientId=a7ff979d-8b11-46d7-9003-3954c42041eg\n \n #SecretKey\n-WCPSecretKey=TEST\n+WCPSecretKey=joef42g64ogfIFOCWHFeb4efca157245259ed65thla9a", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwNTQ4Nw=="}, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjQyOTAzOnYy", "diffSide": "RIGHT", "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/AuthenticationController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjowMToxM1rOF9w5wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTo0MTowM1rOF_xYJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwODY3NA==", "bodyText": "would this code allow validation of a service with another service's credential? i.e. RS with WCP id and secret or vice versa?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400308674", "createdAt": "2020-03-30T16:01:13Z", "author": {"login": "zohrehj"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/AuthenticationController.java", "diffHunk": "@@ -264,7 +264,8 @@\n       if (AppConstants.MA.equals(appCode)\n           || AppConstants.USWS.equals(appCode)\n           || AppConstants.URS.equals(appCode)\n-          || AppConstants.RS.equals(appCode)) {\n+          || AppConstants.RS.equals(appCode)\n+          || AppConstants.WCP.equals(appCode)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxMzYwNw==", "bodyText": "Fixed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402413607", "createdAt": "2020-04-02T15:41:03Z", "author": {"login": "aswinijena100"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/AuthenticationController.java", "diffHunk": "@@ -264,7 +264,8 @@\n       if (AppConstants.MA.equals(appCode)\n           || AppConstants.USWS.equals(appCode)\n           || AppConstants.URS.equals(appCode)\n-          || AppConstants.RS.equals(appCode)) {\n+          || AppConstants.RS.equals(appCode)\n+          || AppConstants.WCP.equals(appCode)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwODY3NA=="}, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjQ0NzM1OnYy", "diffSide": "RIGHT", "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserDetailsServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjowNTowN1rOF9xFHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjowNTowN1rOF9xFHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMxMTU4Mg==", "bodyText": "are these pwsIds sequential?\nI am guessing these are database Ids and sequential, so is it possible to just fetch them in an ordered manner and not do a post sort instead?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400311582", "createdAt": "2020-03-30T16:05:07Z", "author": {"login": "zohrehj"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserDetailsServiceImpl.java", "diffHunk": "@@ -619,15 +621,17 @@ public String savePasswordHistory(String userId, String password, String salt) {\n     PasswordHistoryBO passHistoryBo = null;\n     String passwordHistoryCount = appConfig.getPasswordHistoryCount();\n     List<PasswordHistoryBO> passwordHistories = null;\n+    List<Integer> pwsIds = new ArrayList<>();\n     try {\n       passwordHistories = passHistoryRepo.findByUserId(userId);\n       if (passwordHistories != null\n+          && !passwordHistories.isEmpty()\n           && passwordHistories.size() > (Integer.parseInt(passwordHistoryCount) - 1)) {\n-        for (int i = 0;\n-            i < ((passwordHistories.size() - Integer.parseInt(passwordHistoryCount)) + 1);\n-            i++) {\n-          passHistoryRepo.deleteByUserId(userId);\n+        for (PasswordHistoryBO passwordHistoryBO : passwordHistories) {\n+          pwsIds.add(passwordHistoryBO.getPasswordHistoryId());\n         }\n+        Collections.sort(pwsIds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjQ2MzU5OnYy", "diffSide": "RIGHT", "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/PingController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjowODo0OFrOF9xPVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTo0MToxOFrOF_xY1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMxNDE5OA==", "bodyText": "nit: please rename to health controller.\nwith \"/health\" mapping for service health check.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400314198", "createdAt": "2020-03-30T16:08:48Z", "author": {"login": "zohrehj"}, "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/PingController.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+public class PingController {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxMzc4MA==", "bodyText": "Fixed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402413780", "createdAt": "2020-04-02T15:41:18Z", "author": {"login": "aswinijena100"}, "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/PingController.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+public class PingController {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMxNDE5OA=="}, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjQ3NTE1OnYy", "diffSide": "RIGHT", "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/ProcessActivityResponseController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjoxMTozMlrOF9xWoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjoxMTozMlrOF9xWoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMxNjA2NQ==", "bodyText": "thanks for addressing all these issues!", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400316065", "createdAt": "2020-03-30T16:11:32Z", "author": {"login": "zohrehj"}, "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/ProcessActivityResponseController.java", "diffHunk": "@@ -150,14 +148,9 @@\n \n         // Get ParticipantStudyInfo from Registration Server\n         ParticipantStudyInformation partStudyInfo =\n-            partStudyInfoService.getParticipantStudyInfo(\n-                orgId, applicationId, studyId, participantId);\n+            partStudyInfoService.getParticipantStudyInfo(studyId, participantId);\n         if (partStudyInfo == null) {\n-          logger.error(\n-              \"Input values are :\\n Study Id: \"\n-                  + studyId\n-                  + \"\\n participantId Id: \"\n-                  + participantId);\n+          logger.error(\"GetParticipantStudyInfo() - ParticipantInfo is null. Study Id: \" + studyId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjQ4MTU3OnYy", "diffSide": "RIGHT", "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/service/CommonServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjoxMjo1OVrOF9xadA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTo0MjoxMlrOF_xbUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMxNzA0NA==", "bodyText": "nit: should we change this to client credentials to be consistent with other auth errors?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400317044", "createdAt": "2020-03-30T16:12:59Z", "author": {"login": "zohrehj"}, "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/service/CommonServiceImpl.java", "diffHunk": "@@ -77,7 +77,7 @@ public boolean validateServerClientCredentials(String clientId, String clientSec\n       logger.error(\"ERROR: \", e);\n \n       if (e.getRawStatusCode() == 401) {\n-        logger.error(\"Invalid client Id or client secret. Client id is: \" + clientId);\n+        logger.error(\"Invalid client Id or client secret.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxNDQxOQ==", "bodyText": "Fixed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402414419", "createdAt": "2020-04-02T15:42:12Z", "author": {"login": "aswinijena100"}, "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/service/CommonServiceImpl.java", "diffHunk": "@@ -77,7 +77,7 @@ public boolean validateServerClientCredentials(String clientId, String clientSec\n       logger.error(\"ERROR: \", e);\n \n       if (e.getRawStatusCode() == 401) {\n-        logger.error(\"Invalid client Id or client secret. Client id is: \" + clientId);\n+        logger.error(\"Invalid client Id or client secret.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMxNzA0NA=="}, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjQ5ODU1OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/TestPDFUpload.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjoxNzowOVrOF9xlSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjoxODowMVrOF9xnfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMxOTgxNg==", "bodyText": "is this a test file? if yes, should it moved to the test directory instead?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400319816", "createdAt": "2020-03-30T16:17:09Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/TestPDFUpload.java", "diffHunk": "@@ -40,7 +40,7 @@\n             + fileName);\n \n     try {\n-      logger.info(\"first try block starts\");\n+      logger.info(\"first try block starts in testPDFUpload\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMyMDM4Mg==", "bodyText": "I realize this is out of scope of this PR, but I would like to identify if there is an area for improvement in later stages.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400320382", "createdAt": "2020-03-30T16:18:01Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/TestPDFUpload.java", "diffHunk": "@@ -40,7 +40,7 @@\n             + fileName);\n \n     try {\n-      logger.info(\"first try block starts\");\n+      logger.info(\"first try block starts in testPDFUpload\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMxOTgxNg=="}, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjUxMTc1OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/CloudStorageService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjoyMDoxMFrOF9xtQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTo0NDo0M1rOF_xiRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMyMTg1OQ==", "bodyText": "why is this needed?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400321859", "createdAt": "2020-03-30T16:20:10Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/CloudStorageService.java", "diffHunk": "@@ -53,7 +54,8 @@ public String saveFile(String fileName, String content, String underDirectory) {\n       byte[] bytes = null;\n \n       try (WriteChannel writer = storageService.writer(blobInfo)) {\n-        bytes = content.getBytes();\n+        bytes = Base64.getDecoder().decode(content.replaceAll(\"\\n\", \"\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxNjE5OQ==", "bodyText": "Without decoding if we store the file , file was getting corrupted . Hence to store as proper file we need to decode the Base64 encoded file and store it cloud storage and vice versa.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402416199", "createdAt": "2020-04-02T15:44:43Z", "author": {"login": "aswinijena100"}, "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/CloudStorageService.java", "diffHunk": "@@ -53,7 +54,8 @@ public String saveFile(String fileName, String content, String underDirectory) {\n       byte[] bytes = null;\n \n       try (WriteChannel writer = storageService.writer(blobInfo)) {\n-        bytes = content.getBytes();\n+        bytes = Base64.getDecoder().decode(content.replaceAll(\"\\n\", \"\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMyMTg1OQ=="}, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjUzMDIyOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/EnrollmentTokenDaoImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjoyNDoyMFrOF9x40Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTo0NDo1MVrOF_xivw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMyNDgxNw==", "bodyText": "please remove commented code.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400324817", "createdAt": "2020-03-30T16:24:20Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/EnrollmentTokenDaoImpl.java", "diffHunk": "@@ -263,12 +263,12 @@ public EnrollmentResponseBean enrollParticipant(\n                 countAddParticipant = (Integer) session.save(participants);\n               }\n               if (countAddParticipant > 0) {\n-                SiteBo sites = session.get(SiteBo.class, siteBo.getId());\n-                participantRegistry.setSites(sites);\n-                participantRegistry.setInvitationDate(\n-                    EnrollmentManagementUtil.getCurrentUtilDateTime());\n-                participantRegistry.setOnboardingStatus(\"E\");\n-                session.update(participantRegistry);\n+                //                SiteBo sites = session.get(SiteBo.class, siteBo.getId());\n+                //                participantRegistry.setSites(sites);\n+                //                participantRegistry.setInvitationDate(\n+                //                    EnrollmentManagementUtil.getCurrentUtilDateTime());\n+                //                participantRegistry.setOnboardingStatus(\"E\");\n+                //                session.update(participantRegistry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxNjMxOQ==", "bodyText": "Fixed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402416319", "createdAt": "2020-04-02T15:44:51Z", "author": {"login": "aswinijena100"}, "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/EnrollmentTokenDaoImpl.java", "diffHunk": "@@ -263,12 +263,12 @@ public EnrollmentResponseBean enrollParticipant(\n                 countAddParticipant = (Integer) session.save(participants);\n               }\n               if (countAddParticipant > 0) {\n-                SiteBo sites = session.get(SiteBo.class, siteBo.getId());\n-                participantRegistry.setSites(sites);\n-                participantRegistry.setInvitationDate(\n-                    EnrollmentManagementUtil.getCurrentUtilDateTime());\n-                participantRegistry.setOnboardingStatus(\"E\");\n-                session.update(participantRegistry);\n+                //                SiteBo sites = session.get(SiteBo.class, siteBo.getId());\n+                //                participantRegistry.setSites(sites);\n+                //                participantRegistry.setInvitationDate(\n+                //                    EnrollmentManagementUtil.getCurrentUtilDateTime());\n+                //                participantRegistry.setOnboardingStatus(\"E\");\n+                //                session.update(participantRegistry);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMyNDgxNw=="}, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjU4MTg2OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjozNjoxNlrOF9yYgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTo0NjoyMFrOF_xmxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzMjkzMA==", "bodyText": "please remove", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400332930", "createdAt": "2020-03-30T16:36:16Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/pom.xml", "diffHunk": "@@ -34,11 +34,11 @@\n \t\t\t\t</exclusion>\n \t\t\t</exclusions>\n \t\t</dependency>\n-\t\t<dependency>\n+<!-- \t\t<dependency>\n                    <groupId>org.springframework.boot</groupId>\n                    <artifactId>spring-boot-starter-web</artifactId>\n                    <scope>provided</scope>\n-        </dependency>\n+        </dependency> -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxNzM1MQ==", "bodyText": "Fixed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402417351", "createdAt": "2020-04-02T15:46:20Z", "author": {"login": "aswinijena100"}, "path": "user-registration-server-ws/user-mgmt/pom.xml", "diffHunk": "@@ -34,11 +34,11 @@\n \t\t\t\t</exclusion>\n \t\t\t</exclusions>\n \t\t</dependency>\n-\t\t<dependency>\n+<!-- \t\t<dependency>\n                    <groupId>org.springframework.boot</groupId>\n                    <artifactId>spring-boot-starter-web</artifactId>\n                    <scope>provided</scope>\n-        </dependency>\n+        </dependency> -->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzMjkzMA=="}, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjU5Nzc4OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/StudiesController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjozOTo1OFrOF9yigA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTo0NjozMVrOF_xnVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzNTQ4OA==", "bodyText": "if (notificationForm == null\n    || notificationForm.getNotifications() == null\n    || notificationForm.getNotifications().isEmpty()\n    || errorBean.getCode() != ErrorCode.EC_200.code()) {\n  return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n}```", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400335488", "createdAt": "2020-03-30T16:39:58Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/StudiesController.java", "diffHunk": "@@ -52,7 +56,32 @@\n       errorBean = new ErrorBean(ErrorCode.EC_500.code(), ErrorCode.EC_500.errorMessage());\n       return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n     }\n-    logger.error(\"StudiesController - getStudyParticipants() : ends\");\n+    logger.info(\"StudiesController - getStudyParticipants() : ends\");\n+    return new ResponseEntity<>(errorBean, HttpStatus.OK);\n+  }\n+\n+  @PostMapping(\"/sendNotification\")\n+  public ResponseEntity<?> SendNotification(@RequestBody NotificationForm notificationForm) {\n+    logger.error(\"StudiesController - SendNotification() : starts\");\n+    ErrorBean errorBean = null;\n+    try {\n+      if (notificationForm != null\n+          && notificationForm.getNotifications() != null\n+          && !notificationForm.getNotifications().isEmpty()) {\n+        errorBean = studiesServices.SendNotificationAction(notificationForm);\n+        if (errorBean.getCode() != ErrorCode.EC_200.code()) {\n+          return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n+        }\n+      } else {\n+        return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxNzQ5NA==", "bodyText": "Fixed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402417494", "createdAt": "2020-04-02T15:46:31Z", "author": {"login": "aswinijena100"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/StudiesController.java", "diffHunk": "@@ -52,7 +56,32 @@\n       errorBean = new ErrorBean(ErrorCode.EC_500.code(), ErrorCode.EC_500.errorMessage());\n       return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n     }\n-    logger.error(\"StudiesController - getStudyParticipants() : ends\");\n+    logger.info(\"StudiesController - getStudyParticipants() : ends\");\n+    return new ResponseEntity<>(errorBean, HttpStatus.OK);\n+  }\n+\n+  @PostMapping(\"/sendNotification\")\n+  public ResponseEntity<?> SendNotification(@RequestBody NotificationForm notificationForm) {\n+    logger.error(\"StudiesController - SendNotification() : starts\");\n+    ErrorBean errorBean = null;\n+    try {\n+      if (notificationForm != null\n+          && notificationForm.getNotifications() != null\n+          && !notificationForm.getNotifications().isEmpty()) {\n+        errorBean = studiesServices.SendNotificationAction(notificationForm);\n+        if (errorBean.getCode() != ErrorCode.EC_200.code()) {\n+          return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n+        }\n+      } else {\n+        return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzNTQ4OA=="}, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjYwMjkwOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/StudiesController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjo0MToxMVrOF9ylyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzozODo0M1rOF_2UAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzNjMzMA==", "bodyText": "this should not be logger.error. logger.info or logger.debug would be more appropriate", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400336330", "createdAt": "2020-03-30T16:41:11Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/StudiesController.java", "diffHunk": "@@ -52,7 +56,32 @@\n       errorBean = new ErrorBean(ErrorCode.EC_500.code(), ErrorCode.EC_500.errorMessage());\n       return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n     }\n-    logger.error(\"StudiesController - getStudyParticipants() : ends\");\n+    logger.info(\"StudiesController - getStudyParticipants() : ends\");\n+    return new ResponseEntity<>(errorBean, HttpStatus.OK);\n+  }\n+\n+  @PostMapping(\"/sendNotification\")\n+  public ResponseEntity<?> SendNotification(@RequestBody NotificationForm notificationForm) {\n+    logger.error(\"StudiesController - SendNotification() : starts\");\n+    ErrorBean errorBean = null;\n+    try {\n+      if (notificationForm != null\n+          && notificationForm.getNotifications() != null\n+          && !notificationForm.getNotifications().isEmpty()) {\n+        errorBean = studiesServices.SendNotificationAction(notificationForm);\n+        if (errorBean.getCode() != ErrorCode.EC_200.code()) {\n+          return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n+        }\n+      } else {\n+        return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n+      }\n+    } catch (Exception e) {\n+      logger.error(\"StudiesController - SendNotification() : error\", e);\n+      errorBean = new ErrorBean(ErrorCode.EC_500.code(), ErrorCode.EC_500.errorMessage());\n+      return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n+    }\n+    logger.error(\"StudiesController - SendNotification() : ends\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ5NDQ2NA==", "bodyText": "please address this issue", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402494464", "createdAt": "2020-04-02T17:38:43Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/StudiesController.java", "diffHunk": "@@ -52,7 +56,32 @@\n       errorBean = new ErrorBean(ErrorCode.EC_500.code(), ErrorCode.EC_500.errorMessage());\n       return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n     }\n-    logger.error(\"StudiesController - getStudyParticipants() : ends\");\n+    logger.info(\"StudiesController - getStudyParticipants() : ends\");\n+    return new ResponseEntity<>(errorBean, HttpStatus.OK);\n+  }\n+\n+  @PostMapping(\"/sendNotification\")\n+  public ResponseEntity<?> SendNotification(@RequestBody NotificationForm notificationForm) {\n+    logger.error(\"StudiesController - SendNotification() : starts\");\n+    ErrorBean errorBean = null;\n+    try {\n+      if (notificationForm != null\n+          && notificationForm.getNotifications() != null\n+          && !notificationForm.getNotifications().isEmpty()) {\n+        errorBean = studiesServices.SendNotificationAction(notificationForm);\n+        if (errorBean.getCode() != ErrorCode.EC_200.code()) {\n+          return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n+        }\n+      } else {\n+        return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n+      }\n+    } catch (Exception e) {\n+      logger.error(\"StudiesController - SendNotification() : error\", e);\n+      errorBean = new ErrorBean(ErrorCode.EC_500.code(), ErrorCode.EC_500.errorMessage());\n+      return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n+    }\n+    logger.error(\"StudiesController - SendNotification() : ends\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzNjMzMA=="}, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjYxMTQyOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/AuthInfoBODaoImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjo0MzoxNFrOF9yrMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTo0Njo0MlrOF_xn7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzNzcxNA==", "bodyText": "nit: rename to androidJsonArray for consistency.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400337714", "createdAt": "2020-03-30T16:43:14Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/AuthInfoBODaoImpl.java", "diffHunk": "@@ -37,4 +42,37 @@ public AuthInfoBO save(AuthInfoBO authInfo) throws SystemException {\n       }\n     } else return null;\n   }\n+\n+  @Override\n+  public Map<String, JSONArray> getDeviceTokenOfAllUsers(List<Integer> appIds) {\n+    logger.info(\"AuthInfoBODaoImpl.getDeviceTokenOfAllUsers()-Start\");\n+    JSONArray jsonArray = null;\n+    JSONArray iosJsonArray = null;\n+    Map<String, JSONArray> deviceMap = new HashMap<>();\n+    try {\n+      List<AuthInfoBO> authInfos = authInfoRepository.findDevicesTokens(appIds);\n+      System.out.println(authInfos);\n+      if (authInfos != null && !authInfos.isEmpty()) {\n+        jsonArray = new JSONArray();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxNzY0Nw==", "bodyText": "Fixed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402417647", "createdAt": "2020-04-02T15:46:42Z", "author": {"login": "aswinijena100"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/AuthInfoBODaoImpl.java", "diffHunk": "@@ -37,4 +42,37 @@ public AuthInfoBO save(AuthInfoBO authInfo) throws SystemException {\n       }\n     } else return null;\n   }\n+\n+  @Override\n+  public Map<String, JSONArray> getDeviceTokenOfAllUsers(List<Integer> appIds) {\n+    logger.info(\"AuthInfoBODaoImpl.getDeviceTokenOfAllUsers()-Start\");\n+    JSONArray jsonArray = null;\n+    JSONArray iosJsonArray = null;\n+    Map<String, JSONArray> deviceMap = new HashMap<>();\n+    try {\n+      List<AuthInfoBO> authInfos = authInfoRepository.findDevicesTokens(appIds);\n+      System.out.println(authInfos);\n+      if (authInfos != null && !authInfos.isEmpty()) {\n+        jsonArray = new JSONArray();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzNzcxNA=="}, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjYxNTQzOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/AuthInfoBODaoImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjo0NDowN1rOF9ytoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzozOTo1OFrOF_2ZPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzODMzNw==", "bodyText": "how do we handle other devices? should there be a log or exception in that case?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400338337", "createdAt": "2020-03-30T16:44:07Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/AuthInfoBODaoImpl.java", "diffHunk": "@@ -37,4 +42,37 @@ public AuthInfoBO save(AuthInfoBO authInfo) throws SystemException {\n       }\n     } else return null;\n   }\n+\n+  @Override\n+  public Map<String, JSONArray> getDeviceTokenOfAllUsers(List<Integer> appIds) {\n+    logger.info(\"AuthInfoBODaoImpl.getDeviceTokenOfAllUsers()-Start\");\n+    JSONArray jsonArray = null;\n+    JSONArray iosJsonArray = null;\n+    Map<String, JSONArray> deviceMap = new HashMap<>();\n+    try {\n+      List<AuthInfoBO> authInfos = authInfoRepository.findDevicesTokens(appIds);\n+      System.out.println(authInfos);\n+      if (authInfos != null && !authInfos.isEmpty()) {\n+        jsonArray = new JSONArray();\n+        iosJsonArray = new JSONArray();\n+        for (AuthInfoBO authInfoBO : authInfos) {\n+          String devicetoken = authInfoBO.getDeviceToken();\n+          String devicetype = authInfoBO.getDeviceType();\n+          if (devicetoken != null && devicetype != null) {\n+            if (devicetype.equalsIgnoreCase(AppConstants.DEVICE_ANDROID)) {\n+              jsonArray.put(devicetoken.trim());\n+            } else if (devicetype.equalsIgnoreCase(AppConstants.DEVICE_IOS)) {\n+              iosJsonArray.put(devicetoken.trim());\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ5NTgwNg==", "bodyText": "not addressed.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402495806", "createdAt": "2020-04-02T17:39:58Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/AuthInfoBODaoImpl.java", "diffHunk": "@@ -37,4 +42,37 @@ public AuthInfoBO save(AuthInfoBO authInfo) throws SystemException {\n       }\n     } else return null;\n   }\n+\n+  @Override\n+  public Map<String, JSONArray> getDeviceTokenOfAllUsers(List<Integer> appIds) {\n+    logger.info(\"AuthInfoBODaoImpl.getDeviceTokenOfAllUsers()-Start\");\n+    JSONArray jsonArray = null;\n+    JSONArray iosJsonArray = null;\n+    Map<String, JSONArray> deviceMap = new HashMap<>();\n+    try {\n+      List<AuthInfoBO> authInfos = authInfoRepository.findDevicesTokens(appIds);\n+      System.out.println(authInfos);\n+      if (authInfos != null && !authInfos.isEmpty()) {\n+        jsonArray = new JSONArray();\n+        iosJsonArray = new JSONArray();\n+        for (AuthInfoBO authInfoBO : authInfos) {\n+          String devicetoken = authInfoBO.getDeviceToken();\n+          String devicetype = authInfoBO.getDeviceType();\n+          if (devicetoken != null && devicetype != null) {\n+            if (devicetype.equalsIgnoreCase(AppConstants.DEVICE_ANDROID)) {\n+              jsonArray.put(devicetoken.trim());\n+            } else if (devicetype.equalsIgnoreCase(AppConstants.DEVICE_IOS)) {\n+              iosJsonArray.put(devicetoken.trim());\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzODMzNw=="}, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjYyMjQ0OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/CommonDao.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjo0NTo0NlrOF9yx8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTo0Njo1NFrOF_xocA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzOTQ0MQ==", "bodyText": "nit: please rename to something more readable, e.g. studyInfoSet", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400339441", "createdAt": "2020-03-30T16:45:46Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/CommonDao.java", "diffHunk": "@@ -17,4 +23,13 @@\n   public AppOrgInfoBean getUserAppDetailsByAllApi(String userId, String appId, String orgId);\n \n   public Integer getUserInfoDetails(String userId);\n+\n+  public List<AppInfoDetailsBO> getAppInfoIds(HashSet<String> appIds);\n+\n+  public List<StudyInfoBO> getStudyInfoIds(HashSet<String> studySetSet);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxNzc3Ng==", "bodyText": "Fixed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402417776", "createdAt": "2020-04-02T15:46:54Z", "author": {"login": "aswinijena100"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/CommonDao.java", "diffHunk": "@@ -17,4 +23,13 @@\n   public AppOrgInfoBean getUserAppDetailsByAllApi(String userId, String appId, String orgId);\n \n   public Integer getUserInfoDetails(String userId);\n+\n+  public List<AppInfoDetailsBO> getAppInfoIds(HashSet<String> appIds);\n+\n+  public List<StudyInfoBO> getStudyInfoIds(HashSet<String> studySetSet);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzOTQ0MQ=="}, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjYyNTA3OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/CommonDaoImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjo0NjoyNFrOF9yzkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTo0NzowNlrOF_xpAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzOTg1Nw==", "bodyText": "logger.error?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400339857", "createdAt": "2020-03-30T16:46:24Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/CommonDaoImpl.java", "diffHunk": "@@ -203,4 +210,145 @@ public Integer getUserInfoDetails(String userId) {\n     logger.info(\"CommonDaoImpl getUserInfoDetails() - Ends \");\n     return userDetailsId;\n   }\n+\n+  @Override\n+  public List<AppInfoDetailsBO> getAppInfoIds(HashSet<String> appIds) {\n+    logger.info(\"CommonDaoImpl getAppInfoIds() - starts \");\n+    List<AppInfoDetailsBO> appInfos = new ArrayList();\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+      appInfos =\n+          session\n+              .createQuery(\"From AppInfoDetailsBO where appId in :appIds\")\n+              .setParameterList(\"appIds\", appIds)\n+              .getResultList();\n+\n+    } catch (Exception e) {\n+      logger.info(\"CommonDaoImpl getAppInfoIds() - error \", e);\n+    }\n+    logger.info(\"CommonDaoImpl getAppInfoIds() - ends \");\n+\n+    return appInfos;\n+  }\n+\n+  @Override\n+  public List<StudyInfoBO> getStudyInfoIds(HashSet<String> studyIdSet) {\n+    logger.info(\"CommonDaoImpl getStudyInfoIds() - starts \");\n+    List<StudyInfoBO> studyInfos = new ArrayList();\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+      studyInfos =\n+          session\n+              .createQuery(\"From StudyInfoBO where customId in :studyIdSet\")\n+              .setParameterList(\"studyIdSet\", studyIdSet)\n+              .getResultList();\n+\n+    } catch (Exception e) {\n+      logger.info(\"CommonDaoImpl getStudyInfoIds() - error \", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxNzkyMg==", "bodyText": "Fixed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402417922", "createdAt": "2020-04-02T15:47:06Z", "author": {"login": "aswinijena100"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/CommonDaoImpl.java", "diffHunk": "@@ -203,4 +210,145 @@ public Integer getUserInfoDetails(String userId) {\n     logger.info(\"CommonDaoImpl getUserInfoDetails() - Ends \");\n     return userDetailsId;\n   }\n+\n+  @Override\n+  public List<AppInfoDetailsBO> getAppInfoIds(HashSet<String> appIds) {\n+    logger.info(\"CommonDaoImpl getAppInfoIds() - starts \");\n+    List<AppInfoDetailsBO> appInfos = new ArrayList();\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+      appInfos =\n+          session\n+              .createQuery(\"From AppInfoDetailsBO where appId in :appIds\")\n+              .setParameterList(\"appIds\", appIds)\n+              .getResultList();\n+\n+    } catch (Exception e) {\n+      logger.info(\"CommonDaoImpl getAppInfoIds() - error \", e);\n+    }\n+    logger.info(\"CommonDaoImpl getAppInfoIds() - ends \");\n+\n+    return appInfos;\n+  }\n+\n+  @Override\n+  public List<StudyInfoBO> getStudyInfoIds(HashSet<String> studyIdSet) {\n+    logger.info(\"CommonDaoImpl getStudyInfoIds() - starts \");\n+    List<StudyInfoBO> studyInfos = new ArrayList();\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+      studyInfos =\n+          session\n+              .createQuery(\"From StudyInfoBO where customId in :studyIdSet\")\n+              .setParameterList(\"studyIdSet\", studyIdSet)\n+              .getResultList();\n+\n+    } catch (Exception e) {\n+      logger.info(\"CommonDaoImpl getStudyInfoIds() - error \", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzOTg1Nw=="}, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjYzMTU0OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/CommonDaoImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjo0Nzo1N1rOF9y3nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjo0Nzo1N1rOF9y3nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM0MDg5Mg==", "bodyText": "nit: CommonDaoImpl.getStudyLevelDeviceToken() - Start", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400340892", "createdAt": "2020-03-30T16:47:57Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/CommonDaoImpl.java", "diffHunk": "@@ -203,4 +210,145 @@ public Integer getUserInfoDetails(String userId) {\n     logger.info(\"CommonDaoImpl getUserInfoDetails() - Ends \");\n     return userDetailsId;\n   }\n+\n+  @Override\n+  public List<AppInfoDetailsBO> getAppInfoIds(HashSet<String> appIds) {\n+    logger.info(\"CommonDaoImpl getAppInfoIds() - starts \");\n+    List<AppInfoDetailsBO> appInfos = new ArrayList();\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+      appInfos =\n+          session\n+              .createQuery(\"From AppInfoDetailsBO where appId in :appIds\")\n+              .setParameterList(\"appIds\", appIds)\n+              .getResultList();\n+\n+    } catch (Exception e) {\n+      logger.info(\"CommonDaoImpl getAppInfoIds() - error \", e);\n+    }\n+    logger.info(\"CommonDaoImpl getAppInfoIds() - ends \");\n+\n+    return appInfos;\n+  }\n+\n+  @Override\n+  public List<StudyInfoBO> getStudyInfoIds(HashSet<String> studyIdSet) {\n+    logger.info(\"CommonDaoImpl getStudyInfoIds() - starts \");\n+    List<StudyInfoBO> studyInfos = new ArrayList();\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+      studyInfos =\n+          session\n+              .createQuery(\"From StudyInfoBO where customId in :studyIdSet\")\n+              .setParameterList(\"studyIdSet\", studyIdSet)\n+              .getResultList();\n+\n+    } catch (Exception e) {\n+      logger.info(\"CommonDaoImpl getStudyInfoIds() - error \", e);\n+    }\n+    logger.info(\"CommonDaoImpl getStudyInfoIds() - ends \");\n+\n+    return studyInfos;\n+  }\n+\n+  @Override\n+  public Map<Integer, Map<String, JSONArray>> getStudyLevelDeviceToken(\n+      List<Integer> studyInfoIds, List<Integer> appInfoIds) {\n+    logger.info(\"CommonDaoImpl.getStudyLevelDeviceToken()-Start\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjYzNTI4OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/CommonDaoImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjo0ODo0NVrOF9y54w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTo0NzoyMVrOF_xpsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM0MTQ3NQ==", "bodyText": "please remove", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400341475", "createdAt": "2020-03-30T16:48:45Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/CommonDaoImpl.java", "diffHunk": "@@ -203,4 +210,145 @@ public Integer getUserInfoDetails(String userId) {\n     logger.info(\"CommonDaoImpl getUserInfoDetails() - Ends \");\n     return userDetailsId;\n   }\n+\n+  @Override\n+  public List<AppInfoDetailsBO> getAppInfoIds(HashSet<String> appIds) {\n+    logger.info(\"CommonDaoImpl getAppInfoIds() - starts \");\n+    List<AppInfoDetailsBO> appInfos = new ArrayList();\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+      appInfos =\n+          session\n+              .createQuery(\"From AppInfoDetailsBO where appId in :appIds\")\n+              .setParameterList(\"appIds\", appIds)\n+              .getResultList();\n+\n+    } catch (Exception e) {\n+      logger.info(\"CommonDaoImpl getAppInfoIds() - error \", e);\n+    }\n+    logger.info(\"CommonDaoImpl getAppInfoIds() - ends \");\n+\n+    return appInfos;\n+  }\n+\n+  @Override\n+  public List<StudyInfoBO> getStudyInfoIds(HashSet<String> studyIdSet) {\n+    logger.info(\"CommonDaoImpl getStudyInfoIds() - starts \");\n+    List<StudyInfoBO> studyInfos = new ArrayList();\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+      studyInfos =\n+          session\n+              .createQuery(\"From StudyInfoBO where customId in :studyIdSet\")\n+              .setParameterList(\"studyIdSet\", studyIdSet)\n+              .getResultList();\n+\n+    } catch (Exception e) {\n+      logger.info(\"CommonDaoImpl getStudyInfoIds() - error \", e);\n+    }\n+    logger.info(\"CommonDaoImpl getStudyInfoIds() - ends \");\n+\n+    return studyInfos;\n+  }\n+\n+  @Override\n+  public Map<Integer, Map<String, JSONArray>> getStudyLevelDeviceToken(\n+      List<Integer> studyInfoIds, List<Integer> appInfoIds) {\n+    logger.info(\"CommonDaoImpl.getStudyLevelDeviceToken()-Start\");\n+\n+    Map<Integer, Map<String, JSONArray>> studyDeviceTokenMap = new HashMap<>();\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+      List<Object[]> rs =\n+          session\n+              .createSQLQuery(\n+                  \"SELECT sp.study_info_id, GROUP_CONCAT(a.device_token) as device_token,GROUP_CONCAT(a.device_type) as device_type FROM participant_study_info sp, auth_info a\\r\\n\"\n+                      + \" where sp.user_details_id = a.user_details_id and sp.status not in('yetToJoin','withdrawn','notEligible') and a.auth_key != '0' and a.remote_notification_flag=1 \\r\\n\"\n+                      + \"and sp.study_info_id in (:studyIds)  and (a.device_token is not NULL and a.device_token != '' and a.device_type is not \\r\\n\"\n+                      + \"NULL and a.device_type != '') GROUP BY sp.study_info_id\")\n+              .setParameterList(\"studyIds\", studyInfoIds)\n+              .getResultList();\n+      System.out.println(rs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxODA5OQ==", "bodyText": "Fixed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402418099", "createdAt": "2020-04-02T15:47:21Z", "author": {"login": "aswinijena100"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/CommonDaoImpl.java", "diffHunk": "@@ -203,4 +210,145 @@ public Integer getUserInfoDetails(String userId) {\n     logger.info(\"CommonDaoImpl getUserInfoDetails() - Ends \");\n     return userDetailsId;\n   }\n+\n+  @Override\n+  public List<AppInfoDetailsBO> getAppInfoIds(HashSet<String> appIds) {\n+    logger.info(\"CommonDaoImpl getAppInfoIds() - starts \");\n+    List<AppInfoDetailsBO> appInfos = new ArrayList();\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+      appInfos =\n+          session\n+              .createQuery(\"From AppInfoDetailsBO where appId in :appIds\")\n+              .setParameterList(\"appIds\", appIds)\n+              .getResultList();\n+\n+    } catch (Exception e) {\n+      logger.info(\"CommonDaoImpl getAppInfoIds() - error \", e);\n+    }\n+    logger.info(\"CommonDaoImpl getAppInfoIds() - ends \");\n+\n+    return appInfos;\n+  }\n+\n+  @Override\n+  public List<StudyInfoBO> getStudyInfoIds(HashSet<String> studyIdSet) {\n+    logger.info(\"CommonDaoImpl getStudyInfoIds() - starts \");\n+    List<StudyInfoBO> studyInfos = new ArrayList();\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+      studyInfos =\n+          session\n+              .createQuery(\"From StudyInfoBO where customId in :studyIdSet\")\n+              .setParameterList(\"studyIdSet\", studyIdSet)\n+              .getResultList();\n+\n+    } catch (Exception e) {\n+      logger.info(\"CommonDaoImpl getStudyInfoIds() - error \", e);\n+    }\n+    logger.info(\"CommonDaoImpl getStudyInfoIds() - ends \");\n+\n+    return studyInfos;\n+  }\n+\n+  @Override\n+  public Map<Integer, Map<String, JSONArray>> getStudyLevelDeviceToken(\n+      List<Integer> studyInfoIds, List<Integer> appInfoIds) {\n+    logger.info(\"CommonDaoImpl.getStudyLevelDeviceToken()-Start\");\n+\n+    Map<Integer, Map<String, JSONArray>> studyDeviceTokenMap = new HashMap<>();\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+      List<Object[]> rs =\n+          session\n+              .createSQLQuery(\n+                  \"SELECT sp.study_info_id, GROUP_CONCAT(a.device_token) as device_token,GROUP_CONCAT(a.device_type) as device_type FROM participant_study_info sp, auth_info a\\r\\n\"\n+                      + \" where sp.user_details_id = a.user_details_id and sp.status not in('yetToJoin','withdrawn','notEligible') and a.auth_key != '0' and a.remote_notification_flag=1 \\r\\n\"\n+                      + \"and sp.study_info_id in (:studyIds)  and (a.device_token is not NULL and a.device_token != '' and a.device_type is not \\r\\n\"\n+                      + \"NULL and a.device_type != '') GROUP BY sp.study_info_id\")\n+              .setParameterList(\"studyIds\", studyInfoIds)\n+              .getResultList();\n+      System.out.println(rs);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM0MTQ3NQ=="}, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjY0ODk0OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/CommonDaoImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjo1MjowM1rOF9zCVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTo0NzozMlrOF_xqKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM0MzYzNg==", "bodyText": "please remove \\r\\n from query.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400343636", "createdAt": "2020-03-30T16:52:03Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/CommonDaoImpl.java", "diffHunk": "@@ -203,4 +210,145 @@ public Integer getUserInfoDetails(String userId) {\n     logger.info(\"CommonDaoImpl getUserInfoDetails() - Ends \");\n     return userDetailsId;\n   }\n+\n+  @Override\n+  public List<AppInfoDetailsBO> getAppInfoIds(HashSet<String> appIds) {\n+    logger.info(\"CommonDaoImpl getAppInfoIds() - starts \");\n+    List<AppInfoDetailsBO> appInfos = new ArrayList();\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+      appInfos =\n+          session\n+              .createQuery(\"From AppInfoDetailsBO where appId in :appIds\")\n+              .setParameterList(\"appIds\", appIds)\n+              .getResultList();\n+\n+    } catch (Exception e) {\n+      logger.info(\"CommonDaoImpl getAppInfoIds() - error \", e);\n+    }\n+    logger.info(\"CommonDaoImpl getAppInfoIds() - ends \");\n+\n+    return appInfos;\n+  }\n+\n+  @Override\n+  public List<StudyInfoBO> getStudyInfoIds(HashSet<String> studyIdSet) {\n+    logger.info(\"CommonDaoImpl getStudyInfoIds() - starts \");\n+    List<StudyInfoBO> studyInfos = new ArrayList();\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+      studyInfos =\n+          session\n+              .createQuery(\"From StudyInfoBO where customId in :studyIdSet\")\n+              .setParameterList(\"studyIdSet\", studyIdSet)\n+              .getResultList();\n+\n+    } catch (Exception e) {\n+      logger.info(\"CommonDaoImpl getStudyInfoIds() - error \", e);\n+    }\n+    logger.info(\"CommonDaoImpl getStudyInfoIds() - ends \");\n+\n+    return studyInfos;\n+  }\n+\n+  @Override\n+  public Map<Integer, Map<String, JSONArray>> getStudyLevelDeviceToken(\n+      List<Integer> studyInfoIds, List<Integer> appInfoIds) {\n+    logger.info(\"CommonDaoImpl.getStudyLevelDeviceToken()-Start\");\n+\n+    Map<Integer, Map<String, JSONArray>> studyDeviceTokenMap = new HashMap<>();\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+      List<Object[]> rs =\n+          session\n+              .createSQLQuery(\n+                  \"SELECT sp.study_info_id, GROUP_CONCAT(a.device_token) as device_token,GROUP_CONCAT(a.device_type) as device_type FROM participant_study_info sp, auth_info a\\r\\n\"\n+                      + \" where sp.user_details_id = a.user_details_id and sp.status not in('yetToJoin','withdrawn','notEligible') and a.auth_key != '0' and a.remote_notification_flag=1 \\r\\n\"\n+                      + \"and sp.study_info_id in (:studyIds)  and (a.device_token is not NULL and a.device_token != '' and a.device_type is not \\r\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxODIxNg==", "bodyText": "Fixed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402418216", "createdAt": "2020-04-02T15:47:32Z", "author": {"login": "aswinijena100"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/CommonDaoImpl.java", "diffHunk": "@@ -203,4 +210,145 @@ public Integer getUserInfoDetails(String userId) {\n     logger.info(\"CommonDaoImpl getUserInfoDetails() - Ends \");\n     return userDetailsId;\n   }\n+\n+  @Override\n+  public List<AppInfoDetailsBO> getAppInfoIds(HashSet<String> appIds) {\n+    logger.info(\"CommonDaoImpl getAppInfoIds() - starts \");\n+    List<AppInfoDetailsBO> appInfos = new ArrayList();\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+      appInfos =\n+          session\n+              .createQuery(\"From AppInfoDetailsBO where appId in :appIds\")\n+              .setParameterList(\"appIds\", appIds)\n+              .getResultList();\n+\n+    } catch (Exception e) {\n+      logger.info(\"CommonDaoImpl getAppInfoIds() - error \", e);\n+    }\n+    logger.info(\"CommonDaoImpl getAppInfoIds() - ends \");\n+\n+    return appInfos;\n+  }\n+\n+  @Override\n+  public List<StudyInfoBO> getStudyInfoIds(HashSet<String> studyIdSet) {\n+    logger.info(\"CommonDaoImpl getStudyInfoIds() - starts \");\n+    List<StudyInfoBO> studyInfos = new ArrayList();\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+      studyInfos =\n+          session\n+              .createQuery(\"From StudyInfoBO where customId in :studyIdSet\")\n+              .setParameterList(\"studyIdSet\", studyIdSet)\n+              .getResultList();\n+\n+    } catch (Exception e) {\n+      logger.info(\"CommonDaoImpl getStudyInfoIds() - error \", e);\n+    }\n+    logger.info(\"CommonDaoImpl getStudyInfoIds() - ends \");\n+\n+    return studyInfos;\n+  }\n+\n+  @Override\n+  public Map<Integer, Map<String, JSONArray>> getStudyLevelDeviceToken(\n+      List<Integer> studyInfoIds, List<Integer> appInfoIds) {\n+    logger.info(\"CommonDaoImpl.getStudyLevelDeviceToken()-Start\");\n+\n+    Map<Integer, Map<String, JSONArray>> studyDeviceTokenMap = new HashMap<>();\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+      List<Object[]> rs =\n+          session\n+              .createSQLQuery(\n+                  \"SELECT sp.study_info_id, GROUP_CONCAT(a.device_token) as device_token,GROUP_CONCAT(a.device_type) as device_type FROM participant_study_info sp, auth_info a\\r\\n\"\n+                      + \" where sp.user_details_id = a.user_details_id and sp.status not in('yetToJoin','withdrawn','notEligible') and a.auth_key != '0' and a.remote_notification_flag=1 \\r\\n\"\n+                      + \"and sp.study_info_id in (:studyIds)  and (a.device_token is not NULL and a.device_token != '' and a.device_type is not \\r\\n\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM0MzYzNg=="}, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjY1NjYyOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/CommonDaoImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjo1Mzo0OFrOF9zHDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTo0Nzo0MVrOF_xqng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM0NDg0Nw==", "bodyText": "nit: studyId", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400344847", "createdAt": "2020-03-30T16:53:48Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/CommonDaoImpl.java", "diffHunk": "@@ -203,4 +210,145 @@ public Integer getUserInfoDetails(String userId) {\n     logger.info(\"CommonDaoImpl getUserInfoDetails() - Ends \");\n     return userDetailsId;\n   }\n+\n+  @Override\n+  public List<AppInfoDetailsBO> getAppInfoIds(HashSet<String> appIds) {\n+    logger.info(\"CommonDaoImpl getAppInfoIds() - starts \");\n+    List<AppInfoDetailsBO> appInfos = new ArrayList();\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+      appInfos =\n+          session\n+              .createQuery(\"From AppInfoDetailsBO where appId in :appIds\")\n+              .setParameterList(\"appIds\", appIds)\n+              .getResultList();\n+\n+    } catch (Exception e) {\n+      logger.info(\"CommonDaoImpl getAppInfoIds() - error \", e);\n+    }\n+    logger.info(\"CommonDaoImpl getAppInfoIds() - ends \");\n+\n+    return appInfos;\n+  }\n+\n+  @Override\n+  public List<StudyInfoBO> getStudyInfoIds(HashSet<String> studyIdSet) {\n+    logger.info(\"CommonDaoImpl getStudyInfoIds() - starts \");\n+    List<StudyInfoBO> studyInfos = new ArrayList();\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+      studyInfos =\n+          session\n+              .createQuery(\"From StudyInfoBO where customId in :studyIdSet\")\n+              .setParameterList(\"studyIdSet\", studyIdSet)\n+              .getResultList();\n+\n+    } catch (Exception e) {\n+      logger.info(\"CommonDaoImpl getStudyInfoIds() - error \", e);\n+    }\n+    logger.info(\"CommonDaoImpl getStudyInfoIds() - ends \");\n+\n+    return studyInfos;\n+  }\n+\n+  @Override\n+  public Map<Integer, Map<String, JSONArray>> getStudyLevelDeviceToken(\n+      List<Integer> studyInfoIds, List<Integer> appInfoIds) {\n+    logger.info(\"CommonDaoImpl.getStudyLevelDeviceToken()-Start\");\n+\n+    Map<Integer, Map<String, JSONArray>> studyDeviceTokenMap = new HashMap<>();\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+      List<Object[]> rs =\n+          session\n+              .createSQLQuery(\n+                  \"SELECT sp.study_info_id, GROUP_CONCAT(a.device_token) as device_token,GROUP_CONCAT(a.device_type) as device_type FROM participant_study_info sp, auth_info a\\r\\n\"\n+                      + \" where sp.user_details_id = a.user_details_id and sp.status not in('yetToJoin','withdrawn','notEligible') and a.auth_key != '0' and a.remote_notification_flag=1 \\r\\n\"\n+                      + \"and sp.study_info_id in (:studyIds)  and (a.device_token is not NULL and a.device_token != '' and a.device_type is not \\r\\n\"\n+                      + \"NULL and a.device_type != '') GROUP BY sp.study_info_id\")\n+              .setParameterList(\"studyIds\", studyInfoIds)\n+              .getResultList();\n+      System.out.println(rs);\n+      if (rs != null) {\n+        for (Object[] objects : rs) {\n+\n+          Integer studyid = (Integer) objects[0];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxODMzNA==", "bodyText": "Fixed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402418334", "createdAt": "2020-04-02T15:47:41Z", "author": {"login": "aswinijena100"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/CommonDaoImpl.java", "diffHunk": "@@ -203,4 +210,145 @@ public Integer getUserInfoDetails(String userId) {\n     logger.info(\"CommonDaoImpl getUserInfoDetails() - Ends \");\n     return userDetailsId;\n   }\n+\n+  @Override\n+  public List<AppInfoDetailsBO> getAppInfoIds(HashSet<String> appIds) {\n+    logger.info(\"CommonDaoImpl getAppInfoIds() - starts \");\n+    List<AppInfoDetailsBO> appInfos = new ArrayList();\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+      appInfos =\n+          session\n+              .createQuery(\"From AppInfoDetailsBO where appId in :appIds\")\n+              .setParameterList(\"appIds\", appIds)\n+              .getResultList();\n+\n+    } catch (Exception e) {\n+      logger.info(\"CommonDaoImpl getAppInfoIds() - error \", e);\n+    }\n+    logger.info(\"CommonDaoImpl getAppInfoIds() - ends \");\n+\n+    return appInfos;\n+  }\n+\n+  @Override\n+  public List<StudyInfoBO> getStudyInfoIds(HashSet<String> studyIdSet) {\n+    logger.info(\"CommonDaoImpl getStudyInfoIds() - starts \");\n+    List<StudyInfoBO> studyInfos = new ArrayList();\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+      studyInfos =\n+          session\n+              .createQuery(\"From StudyInfoBO where customId in :studyIdSet\")\n+              .setParameterList(\"studyIdSet\", studyIdSet)\n+              .getResultList();\n+\n+    } catch (Exception e) {\n+      logger.info(\"CommonDaoImpl getStudyInfoIds() - error \", e);\n+    }\n+    logger.info(\"CommonDaoImpl getStudyInfoIds() - ends \");\n+\n+    return studyInfos;\n+  }\n+\n+  @Override\n+  public Map<Integer, Map<String, JSONArray>> getStudyLevelDeviceToken(\n+      List<Integer> studyInfoIds, List<Integer> appInfoIds) {\n+    logger.info(\"CommonDaoImpl.getStudyLevelDeviceToken()-Start\");\n+\n+    Map<Integer, Map<String, JSONArray>> studyDeviceTokenMap = new HashMap<>();\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+      List<Object[]> rs =\n+          session\n+              .createSQLQuery(\n+                  \"SELECT sp.study_info_id, GROUP_CONCAT(a.device_token) as device_token,GROUP_CONCAT(a.device_type) as device_type FROM participant_study_info sp, auth_info a\\r\\n\"\n+                      + \" where sp.user_details_id = a.user_details_id and sp.status not in('yetToJoin','withdrawn','notEligible') and a.auth_key != '0' and a.remote_notification_flag=1 \\r\\n\"\n+                      + \"and sp.study_info_id in (:studyIds)  and (a.device_token is not NULL and a.device_token != '' and a.device_type is not \\r\\n\"\n+                      + \"NULL and a.device_type != '') GROUP BY sp.study_info_id\")\n+              .setParameterList(\"studyIds\", studyInfoIds)\n+              .getResultList();\n+      System.out.println(rs);\n+      if (rs != null) {\n+        for (Object[] objects : rs) {\n+\n+          Integer studyid = (Integer) objects[0];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM0NDg0Nw=="}, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjY3MDYzOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/CommonDaoImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjo1NzoyMFrOF9zQBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjo1NzoyMFrOF9zQBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM0NzE0Mg==", "bodyText": "please handle the exception case, we need to identify if we are miscategorizing devices or missing new ones", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400347142", "createdAt": "2020-03-30T16:57:20Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/CommonDaoImpl.java", "diffHunk": "@@ -203,4 +210,145 @@ public Integer getUserInfoDetails(String userId) {\n     logger.info(\"CommonDaoImpl getUserInfoDetails() - Ends \");\n     return userDetailsId;\n   }\n+\n+  @Override\n+  public List<AppInfoDetailsBO> getAppInfoIds(HashSet<String> appIds) {\n+    logger.info(\"CommonDaoImpl getAppInfoIds() - starts \");\n+    List<AppInfoDetailsBO> appInfos = new ArrayList();\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+      appInfos =\n+          session\n+              .createQuery(\"From AppInfoDetailsBO where appId in :appIds\")\n+              .setParameterList(\"appIds\", appIds)\n+              .getResultList();\n+\n+    } catch (Exception e) {\n+      logger.info(\"CommonDaoImpl getAppInfoIds() - error \", e);\n+    }\n+    logger.info(\"CommonDaoImpl getAppInfoIds() - ends \");\n+\n+    return appInfos;\n+  }\n+\n+  @Override\n+  public List<StudyInfoBO> getStudyInfoIds(HashSet<String> studyIdSet) {\n+    logger.info(\"CommonDaoImpl getStudyInfoIds() - starts \");\n+    List<StudyInfoBO> studyInfos = new ArrayList();\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+      studyInfos =\n+          session\n+              .createQuery(\"From StudyInfoBO where customId in :studyIdSet\")\n+              .setParameterList(\"studyIdSet\", studyIdSet)\n+              .getResultList();\n+\n+    } catch (Exception e) {\n+      logger.info(\"CommonDaoImpl getStudyInfoIds() - error \", e);\n+    }\n+    logger.info(\"CommonDaoImpl getStudyInfoIds() - ends \");\n+\n+    return studyInfos;\n+  }\n+\n+  @Override\n+  public Map<Integer, Map<String, JSONArray>> getStudyLevelDeviceToken(\n+      List<Integer> studyInfoIds, List<Integer> appInfoIds) {\n+    logger.info(\"CommonDaoImpl.getStudyLevelDeviceToken()-Start\");\n+\n+    Map<Integer, Map<String, JSONArray>> studyDeviceTokenMap = new HashMap<>();\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+      List<Object[]> rs =\n+          session\n+              .createSQLQuery(\n+                  \"SELECT sp.study_info_id, GROUP_CONCAT(a.device_token) as device_token,GROUP_CONCAT(a.device_type) as device_type FROM participant_study_info sp, auth_info a\\r\\n\"\n+                      + \" where sp.user_details_id = a.user_details_id and sp.status not in('yetToJoin','withdrawn','notEligible') and a.auth_key != '0' and a.remote_notification_flag=1 \\r\\n\"\n+                      + \"and sp.study_info_id in (:studyIds)  and (a.device_token is not NULL and a.device_token != '' and a.device_type is not \\r\\n\"\n+                      + \"NULL and a.device_type != '') GROUP BY sp.study_info_id\")\n+              .setParameterList(\"studyIds\", studyInfoIds)\n+              .getResultList();\n+      System.out.println(rs);\n+      if (rs != null) {\n+        for (Object[] objects : rs) {\n+\n+          Integer studyid = (Integer) objects[0];\n+          String deviceToken = (String) objects[1];\n+          String deviceType = (String) objects[2];\n+          if (deviceToken != null) {\n+            String[] deviceTokens = deviceToken.split(\",\");\n+            String[] deviceTypes = deviceType.split(\",\");\n+\n+            if (((deviceTokens != null && deviceTokens.length > 0)\n+                    && (deviceType != null && deviceTypes.length > 0))\n+                && (deviceTokens.length == deviceTypes.length)) {\n+\n+              JSONArray jsonArray = new JSONArray();\n+              JSONArray iosJsonArray = new JSONArray();\n+              Map<String, JSONArray> deviceMap = new HashMap<>();\n+              for (int i = 0; i < deviceTokens.length; i++) {\n+                if (deviceTypes[i] != null\n+                    && deviceTypes[i].equalsIgnoreCase(AppConstants.DEVICE_ANDROID)) {\n+                  jsonArray.put(deviceTokens[i].trim());\n+                } else if (deviceTypes[i] != null\n+                    && deviceTypes[i].equalsIgnoreCase(AppConstants.DEVICE_IOS)) {\n+                  iosJsonArray.put(deviceTokens[i].trim());\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjY3MjgyOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/CommonDaoImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjo1Nzo0OFrOF9zRZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTo0Nzo1MlrOF_xrRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM0NzQ5NA==", "bodyText": "logger.error\nalso missing spaces in comment", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400347494", "createdAt": "2020-03-30T16:57:48Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/CommonDaoImpl.java", "diffHunk": "@@ -203,4 +210,145 @@ public Integer getUserInfoDetails(String userId) {\n     logger.info(\"CommonDaoImpl getUserInfoDetails() - Ends \");\n     return userDetailsId;\n   }\n+\n+  @Override\n+  public List<AppInfoDetailsBO> getAppInfoIds(HashSet<String> appIds) {\n+    logger.info(\"CommonDaoImpl getAppInfoIds() - starts \");\n+    List<AppInfoDetailsBO> appInfos = new ArrayList();\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+      appInfos =\n+          session\n+              .createQuery(\"From AppInfoDetailsBO where appId in :appIds\")\n+              .setParameterList(\"appIds\", appIds)\n+              .getResultList();\n+\n+    } catch (Exception e) {\n+      logger.info(\"CommonDaoImpl getAppInfoIds() - error \", e);\n+    }\n+    logger.info(\"CommonDaoImpl getAppInfoIds() - ends \");\n+\n+    return appInfos;\n+  }\n+\n+  @Override\n+  public List<StudyInfoBO> getStudyInfoIds(HashSet<String> studyIdSet) {\n+    logger.info(\"CommonDaoImpl getStudyInfoIds() - starts \");\n+    List<StudyInfoBO> studyInfos = new ArrayList();\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+      studyInfos =\n+          session\n+              .createQuery(\"From StudyInfoBO where customId in :studyIdSet\")\n+              .setParameterList(\"studyIdSet\", studyIdSet)\n+              .getResultList();\n+\n+    } catch (Exception e) {\n+      logger.info(\"CommonDaoImpl getStudyInfoIds() - error \", e);\n+    }\n+    logger.info(\"CommonDaoImpl getStudyInfoIds() - ends \");\n+\n+    return studyInfos;\n+  }\n+\n+  @Override\n+  public Map<Integer, Map<String, JSONArray>> getStudyLevelDeviceToken(\n+      List<Integer> studyInfoIds, List<Integer> appInfoIds) {\n+    logger.info(\"CommonDaoImpl.getStudyLevelDeviceToken()-Start\");\n+\n+    Map<Integer, Map<String, JSONArray>> studyDeviceTokenMap = new HashMap<>();\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+      List<Object[]> rs =\n+          session\n+              .createSQLQuery(\n+                  \"SELECT sp.study_info_id, GROUP_CONCAT(a.device_token) as device_token,GROUP_CONCAT(a.device_type) as device_type FROM participant_study_info sp, auth_info a\\r\\n\"\n+                      + \" where sp.user_details_id = a.user_details_id and sp.status not in('yetToJoin','withdrawn','notEligible') and a.auth_key != '0' and a.remote_notification_flag=1 \\r\\n\"\n+                      + \"and sp.study_info_id in (:studyIds)  and (a.device_token is not NULL and a.device_token != '' and a.device_type is not \\r\\n\"\n+                      + \"NULL and a.device_type != '') GROUP BY sp.study_info_id\")\n+              .setParameterList(\"studyIds\", studyInfoIds)\n+              .getResultList();\n+      System.out.println(rs);\n+      if (rs != null) {\n+        for (Object[] objects : rs) {\n+\n+          Integer studyid = (Integer) objects[0];\n+          String deviceToken = (String) objects[1];\n+          String deviceType = (String) objects[2];\n+          if (deviceToken != null) {\n+            String[] deviceTokens = deviceToken.split(\",\");\n+            String[] deviceTypes = deviceType.split(\",\");\n+\n+            if (((deviceTokens != null && deviceTokens.length > 0)\n+                    && (deviceType != null && deviceTypes.length > 0))\n+                && (deviceTokens.length == deviceTypes.length)) {\n+\n+              JSONArray jsonArray = new JSONArray();\n+              JSONArray iosJsonArray = new JSONArray();\n+              Map<String, JSONArray> deviceMap = new HashMap<>();\n+              for (int i = 0; i < deviceTokens.length; i++) {\n+                if (deviceTypes[i] != null\n+                    && deviceTypes[i].equalsIgnoreCase(AppConstants.DEVICE_ANDROID)) {\n+                  jsonArray.put(deviceTokens[i].trim());\n+                } else if (deviceTypes[i] != null\n+                    && deviceTypes[i].equalsIgnoreCase(AppConstants.DEVICE_IOS)) {\n+                  iosJsonArray.put(deviceTokens[i].trim());\n+                }\n+              }\n+              deviceMap.put(AppConstants.DEVICE_ANDROID, jsonArray);\n+              deviceMap.put(AppConstants.DEVICE_IOS, iosJsonArray);\n+\n+              studyDeviceTokenMap.put(studyid, deviceMap);\n+            }\n+          }\n+        }\n+      }\n+\n+    } catch (Exception e) {\n+      logger.info(\"CommonDaoImpl.getStudyLevelDeviceToken()-error \", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxODUwMA==", "bodyText": "Fixed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402418500", "createdAt": "2020-04-02T15:47:52Z", "author": {"login": "aswinijena100"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/CommonDaoImpl.java", "diffHunk": "@@ -203,4 +210,145 @@ public Integer getUserInfoDetails(String userId) {\n     logger.info(\"CommonDaoImpl getUserInfoDetails() - Ends \");\n     return userDetailsId;\n   }\n+\n+  @Override\n+  public List<AppInfoDetailsBO> getAppInfoIds(HashSet<String> appIds) {\n+    logger.info(\"CommonDaoImpl getAppInfoIds() - starts \");\n+    List<AppInfoDetailsBO> appInfos = new ArrayList();\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+      appInfos =\n+          session\n+              .createQuery(\"From AppInfoDetailsBO where appId in :appIds\")\n+              .setParameterList(\"appIds\", appIds)\n+              .getResultList();\n+\n+    } catch (Exception e) {\n+      logger.info(\"CommonDaoImpl getAppInfoIds() - error \", e);\n+    }\n+    logger.info(\"CommonDaoImpl getAppInfoIds() - ends \");\n+\n+    return appInfos;\n+  }\n+\n+  @Override\n+  public List<StudyInfoBO> getStudyInfoIds(HashSet<String> studyIdSet) {\n+    logger.info(\"CommonDaoImpl getStudyInfoIds() - starts \");\n+    List<StudyInfoBO> studyInfos = new ArrayList();\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+      studyInfos =\n+          session\n+              .createQuery(\"From StudyInfoBO where customId in :studyIdSet\")\n+              .setParameterList(\"studyIdSet\", studyIdSet)\n+              .getResultList();\n+\n+    } catch (Exception e) {\n+      logger.info(\"CommonDaoImpl getStudyInfoIds() - error \", e);\n+    }\n+    logger.info(\"CommonDaoImpl getStudyInfoIds() - ends \");\n+\n+    return studyInfos;\n+  }\n+\n+  @Override\n+  public Map<Integer, Map<String, JSONArray>> getStudyLevelDeviceToken(\n+      List<Integer> studyInfoIds, List<Integer> appInfoIds) {\n+    logger.info(\"CommonDaoImpl.getStudyLevelDeviceToken()-Start\");\n+\n+    Map<Integer, Map<String, JSONArray>> studyDeviceTokenMap = new HashMap<>();\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+      List<Object[]> rs =\n+          session\n+              .createSQLQuery(\n+                  \"SELECT sp.study_info_id, GROUP_CONCAT(a.device_token) as device_token,GROUP_CONCAT(a.device_type) as device_type FROM participant_study_info sp, auth_info a\\r\\n\"\n+                      + \" where sp.user_details_id = a.user_details_id and sp.status not in('yetToJoin','withdrawn','notEligible') and a.auth_key != '0' and a.remote_notification_flag=1 \\r\\n\"\n+                      + \"and sp.study_info_id in (:studyIds)  and (a.device_token is not NULL and a.device_token != '' and a.device_type is not \\r\\n\"\n+                      + \"NULL and a.device_type != '') GROUP BY sp.study_info_id\")\n+              .setParameterList(\"studyIds\", studyInfoIds)\n+              .getResultList();\n+      System.out.println(rs);\n+      if (rs != null) {\n+        for (Object[] objects : rs) {\n+\n+          Integer studyid = (Integer) objects[0];\n+          String deviceToken = (String) objects[1];\n+          String deviceType = (String) objects[2];\n+          if (deviceToken != null) {\n+            String[] deviceTokens = deviceToken.split(\",\");\n+            String[] deviceTypes = deviceType.split(\",\");\n+\n+            if (((deviceTokens != null && deviceTokens.length > 0)\n+                    && (deviceType != null && deviceTypes.length > 0))\n+                && (deviceTokens.length == deviceTypes.length)) {\n+\n+              JSONArray jsonArray = new JSONArray();\n+              JSONArray iosJsonArray = new JSONArray();\n+              Map<String, JSONArray> deviceMap = new HashMap<>();\n+              for (int i = 0; i < deviceTokens.length; i++) {\n+                if (deviceTypes[i] != null\n+                    && deviceTypes[i].equalsIgnoreCase(AppConstants.DEVICE_ANDROID)) {\n+                  jsonArray.put(deviceTokens[i].trim());\n+                } else if (deviceTypes[i] != null\n+                    && deviceTypes[i].equalsIgnoreCase(AppConstants.DEVICE_IOS)) {\n+                  iosJsonArray.put(deviceTokens[i].trim());\n+                }\n+              }\n+              deviceMap.put(AppConstants.DEVICE_ANDROID, jsonArray);\n+              deviceMap.put(AppConstants.DEVICE_IOS, iosJsonArray);\n+\n+              studyDeviceTokenMap.put(studyid, deviceMap);\n+            }\n+          }\n+        }\n+      }\n+\n+    } catch (Exception e) {\n+      logger.info(\"CommonDaoImpl.getStudyLevelDeviceToken()-error \", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM0NzQ5NA=="}, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjY4Mjk2OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/model/AppInfoDetailsBO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzowMDoxMlrOF9zXpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTo0OTowOFrOF_xvHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM0OTA5NQ==", "bodyText": "why do we need to store this?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400349095", "createdAt": "2020-03-30T17:00:12Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/model/AppInfoDetailsBO.java", "diffHunk": "@@ -53,7 +53,7 @@\n   @Column(name = \"android_bundle_id\")\n   private String androidBundleId;\n \n-  @Column(name = \"ios_certificate\")\n+  @Column(name = \"ios_certificate\", columnDefinition = \"VARCHAR(5000)\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxOTQ4NQ==", "bodyText": "we are storing base64 value of IOS certificate, which will be required  for sending push notification to IOS deveices", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402419485", "createdAt": "2020-04-02T15:49:08Z", "author": {"login": "aswinijena100"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/model/AppInfoDetailsBO.java", "diffHunk": "@@ -53,7 +53,7 @@\n   @Column(name = \"android_bundle_id\")\n   private String androidBundleId;\n \n-  @Column(name = \"ios_certificate\")\n+  @Column(name = \"ios_certificate\", columnDefinition = \"VARCHAR(5000)\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM0OTA5NQ=="}, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjcwMzA4OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudiesServicesImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzowNTozN1rOF9zkjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTo0OToxOFrOF_xvig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1MjM5Ng==", "bodyText": "please reverse this change. Previous format was correct.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400352396", "createdAt": "2020-03-30T17:05:37Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudiesServicesImpl.java", "diffHunk": "@@ -1,21 +1,45 @@\n /*\n- * Copyright 2020 Google LLC\n+ *Copyright 2020 Google LLC\n  *\n- * Use of this source code is governed by an MIT-style\n- * license that can be found in the LICENSE file or at\n- * https://opensource.org/licenses/MIT.\n+ *Use of this source code is governed by an MIT-style license that can be found in the LICENSE file", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxOTU5NA==", "bodyText": "Fixed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402419594", "createdAt": "2020-04-02T15:49:18Z", "author": {"login": "aswinijena100"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudiesServicesImpl.java", "diffHunk": "@@ -1,21 +1,45 @@\n /*\n- * Copyright 2020 Google LLC\n+ *Copyright 2020 Google LLC\n  *\n- * Use of this source code is governed by an MIT-style\n- * license that can be found in the LICENSE file or at\n- * https://opensource.org/licenses/MIT.\n+ *Use of this source code is governed by an MIT-style license that can be found in the LICENSE file", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1MjM5Ng=="}, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjcwNzUyOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/resources/appConfigurations.properties", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzowNjo0N1rOF9znRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzowNjo0N1rOF9znRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1MzA5NA==", "bodyText": "please use variable format similar to #36", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400353094", "createdAt": "2020-03-30T17:06:47Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/resources/appConfigurations.properties", "diffHunk": "@@ -17,6 +20,13 @@ auth.server.url= http://dummy-value/AuthServer\n register.url= http://dummy-value/AuthServer/register\n auth.server.updateStatusUrl = http://dummy-value/AuthServer/updateStatus\n auth.server.deleteStatusUrl = http://dummy-value/AuthServer/deleteUser\n+authServerClientValidationUrl=http://dummy-value/AuthServer/validateClientCredentials\n+\n+#Response Server Withdraw Api call while Deactivate Account\n+response.server.url.participant.withdraw=http://dummy-value/mystudies-response-server/participant/withdraw\n+\n+clientId=dummy-value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Mjk1NjU3OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/CommonServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODowOTozNVrOF92C9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTo0OTozMVrOF_xwHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM5Mjk0OA==", "bodyText": "please remove client ID from logs", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400392948", "createdAt": "2020-03-30T18:09:35Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/CommonServiceImpl.java", "diffHunk": "@@ -120,4 +125,44 @@ public ActivityLog createActivityLog(String userId, String activityName, String\n     logger.info(\"CommonServiceImpl createActivityLog() - ends\");\n     return activityLog;\n   }\n+\n+  @Override\n+  public boolean validateServerClientCredentials(String clientId, String clientSecret)\n+      throws SystemException, UnAuthorizedRequestException, InvalidRequestException {\n+\n+    HttpHeaders headers = null;\n+    HttpEntity<BodyForProvider> requestBody = null;\n+    ResponseEntity<?> responseEntity = null;\n+    try {\n+      headers = new HttpHeaders();\n+      headers.setContentType(MediaType.APPLICATION_JSON);\n+      headers.set(AppConstants.CLIENT_ID, clientId);\n+      headers.set(AppConstants.SECRET_KEY, clientSecret);\n+      requestBody = new HttpEntity<>(null, headers);\n+      logger.debug(\"CommonServiceImpl validateServerClientCredentials() Begin\");\n+      responseEntity =\n+          restTemplate.exchange(\n+              appConfig.getAuthServerClientValidationUrl(),\n+              HttpMethod.POST,\n+              requestBody,\n+              String.class);\n+      HttpStatus status = responseEntity.getStatusCode();\n+      if (status == HttpStatus.OK) {\n+        return true;\n+      }\n+    } catch (RestClientResponseException e) {\n+\n+      if (e.getRawStatusCode() == 401) {\n+        logger.error(\"Invalid client Id or client secret. Client id is: \" + clientId);\n+        throw new UnAuthorizedRequestException();\n+      } else if (e.getRawStatusCode() == 400) {\n+        logger.error(\"Client verification ended with Bad Request\");\n+        throw new InvalidRequestException();\n+      } else {\n+        throw new SystemException();\n+      }\n+    }\n+    logger.error(\"Invalid client Id or client secret. Client id is: \" + clientId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxOTc0MQ==", "bodyText": "Fixed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402419741", "createdAt": "2020-04-02T15:49:31Z", "author": {"login": "aswinijena100"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/CommonServiceImpl.java", "diffHunk": "@@ -120,4 +125,44 @@ public ActivityLog createActivityLog(String userId, String activityName, String\n     logger.info(\"CommonServiceImpl createActivityLog() - ends\");\n     return activityLog;\n   }\n+\n+  @Override\n+  public boolean validateServerClientCredentials(String clientId, String clientSecret)\n+      throws SystemException, UnAuthorizedRequestException, InvalidRequestException {\n+\n+    HttpHeaders headers = null;\n+    HttpEntity<BodyForProvider> requestBody = null;\n+    ResponseEntity<?> responseEntity = null;\n+    try {\n+      headers = new HttpHeaders();\n+      headers.setContentType(MediaType.APPLICATION_JSON);\n+      headers.set(AppConstants.CLIENT_ID, clientId);\n+      headers.set(AppConstants.SECRET_KEY, clientSecret);\n+      requestBody = new HttpEntity<>(null, headers);\n+      logger.debug(\"CommonServiceImpl validateServerClientCredentials() Begin\");\n+      responseEntity =\n+          restTemplate.exchange(\n+              appConfig.getAuthServerClientValidationUrl(),\n+              HttpMethod.POST,\n+              requestBody,\n+              String.class);\n+      HttpStatus status = responseEntity.getStatusCode();\n+      if (status == HttpStatus.OK) {\n+        return true;\n+      }\n+    } catch (RestClientResponseException e) {\n+\n+      if (e.getRawStatusCode() == 401) {\n+        logger.error(\"Invalid client Id or client secret. Client id is: \" + clientId);\n+        throw new UnAuthorizedRequestException();\n+      } else if (e.getRawStatusCode() == 400) {\n+        logger.error(\"Client verification ended with Bad Request\");\n+        throw new InvalidRequestException();\n+      } else {\n+        throw new SystemException();\n+      }\n+    }\n+    logger.error(\"Invalid client Id or client secret. Client id is: \" + clientId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM5Mjk0OA=="}, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Mjk1ODM5OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/CommonServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODoxMDowNFrOF92EAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODoxMDowNFrOF92EAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM5MzIxNg==", "bodyText": "please do not log client id", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400393216", "createdAt": "2020-03-30T18:10:04Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/CommonServiceImpl.java", "diffHunk": "@@ -120,4 +125,44 @@ public ActivityLog createActivityLog(String userId, String activityName, String\n     logger.info(\"CommonServiceImpl createActivityLog() - ends\");\n     return activityLog;\n   }\n+\n+  @Override\n+  public boolean validateServerClientCredentials(String clientId, String clientSecret)\n+      throws SystemException, UnAuthorizedRequestException, InvalidRequestException {\n+\n+    HttpHeaders headers = null;\n+    HttpEntity<BodyForProvider> requestBody = null;\n+    ResponseEntity<?> responseEntity = null;\n+    try {\n+      headers = new HttpHeaders();\n+      headers.setContentType(MediaType.APPLICATION_JSON);\n+      headers.set(AppConstants.CLIENT_ID, clientId);\n+      headers.set(AppConstants.SECRET_KEY, clientSecret);\n+      requestBody = new HttpEntity<>(null, headers);\n+      logger.debug(\"CommonServiceImpl validateServerClientCredentials() Begin\");\n+      responseEntity =\n+          restTemplate.exchange(\n+              appConfig.getAuthServerClientValidationUrl(),\n+              HttpMethod.POST,\n+              requestBody,\n+              String.class);\n+      HttpStatus status = responseEntity.getStatusCode();\n+      if (status == HttpStatus.OK) {\n+        return true;\n+      }\n+    } catch (RestClientResponseException e) {\n+\n+      if (e.getRawStatusCode() == 401) {\n+        logger.error(\"Invalid client Id or client secret. Client id is: \" + clientId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Mjk2ODY4OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudiesServicesImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODoxMjo0MVrOF92KNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTo1MDoxNVrOF_xyPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM5NDgwNQ==", "bodyText": "please add a comment explaining why this is needed.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400394805", "createdAt": "2020-03-30T18:12:41Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudiesServicesImpl.java", "diffHunk": "@@ -37,4 +67,259 @@ public ErrorBean saveStudyMetadata(StudyMetadataBean studyMetadataBean) {\n     logger.info(\"StudiesServicesImpl - saveStudyMetadata() : ends\");\n     return errorBean;\n   }\n+\n+  @SuppressWarnings(\"unlikely-arg-type\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyMDI4NQ==", "bodyText": "This was not required , hence removed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402420285", "createdAt": "2020-04-02T15:50:15Z", "author": {"login": "aswinijena100"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudiesServicesImpl.java", "diffHunk": "@@ -37,4 +67,259 @@ public ErrorBean saveStudyMetadata(StudyMetadataBean studyMetadataBean) {\n     logger.info(\"StudiesServicesImpl - saveStudyMetadata() : ends\");\n     return errorBean;\n   }\n+\n+  @SuppressWarnings(\"unlikely-arg-type\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM5NDgwNQ=="}, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Mjk3MzQyOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudiesServicesImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODoxMzo0OFrOF92NCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTo1MDoyNFrOF_xygQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM5NTUyOQ==", "bodyText": "nit: previous format was: StudiesServicesImpl.SendNotificationAction() - Starts", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400395529", "createdAt": "2020-03-30T18:13:48Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudiesServicesImpl.java", "diffHunk": "@@ -37,4 +67,259 @@ public ErrorBean saveStudyMetadata(StudyMetadataBean studyMetadataBean) {\n     logger.info(\"StudiesServicesImpl - saveStudyMetadata() : ends\");\n     return errorBean;\n   }\n+\n+  @SuppressWarnings(\"unlikely-arg-type\")\n+  @Override\n+  public ErrorBean SendNotificationAction(NotificationForm notificationForm) {\n+    HashSet<String> studySet = new HashSet<>();\n+    HashSet<String> appSet = new HashSet<>();\n+    Map<Integer, Map<String, JSONArray>> studiesMap = null;\n+    ErrorBean errorBean = null;\n+    List<Integer> studyInfoIds = new ArrayList<Integer>();\n+    Map<Object, StudyInfoBO> studyInfobyStudyCustomId = new HashMap<>();\n+    Map<String, JSONArray> allDeviceTokens = new HashMap<>();\n+    List<Integer> appInfoIds = new ArrayList<>();\n+    Map<Object, AppInfoDetailsBO> appInfobyAppCustomId = new HashMap<>();\n+    logger.info(\"StudiesServicesImpl - SendNotificationAction() : starts\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyMDM1Mw==", "bodyText": "Fixed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402420353", "createdAt": "2020-04-02T15:50:24Z", "author": {"login": "aswinijena100"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudiesServicesImpl.java", "diffHunk": "@@ -37,4 +67,259 @@ public ErrorBean saveStudyMetadata(StudyMetadataBean studyMetadataBean) {\n     logger.info(\"StudiesServicesImpl - saveStudyMetadata() : ends\");\n     return errorBean;\n   }\n+\n+  @SuppressWarnings(\"unlikely-arg-type\")\n+  @Override\n+  public ErrorBean SendNotificationAction(NotificationForm notificationForm) {\n+    HashSet<String> studySet = new HashSet<>();\n+    HashSet<String> appSet = new HashSet<>();\n+    Map<Integer, Map<String, JSONArray>> studiesMap = null;\n+    ErrorBean errorBean = null;\n+    List<Integer> studyInfoIds = new ArrayList<Integer>();\n+    Map<Object, StudyInfoBO> studyInfobyStudyCustomId = new HashMap<>();\n+    Map<String, JSONArray> allDeviceTokens = new HashMap<>();\n+    List<Integer> appInfoIds = new ArrayList<>();\n+    Map<Object, AppInfoDetailsBO> appInfobyAppCustomId = new HashMap<>();\n+    logger.info(\"StudiesServicesImpl - SendNotificationAction() : starts\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM5NTUyOQ=="}, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Mjk4NzQzOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudiesServicesImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODoxNzozOVrOF92WIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTo1MDozOFrOF_xzFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM5Nzg1Ng==", "bodyText": "this code is very complicated and hard to follow; it is not clear if all cases are covered.\nMoving the code into smaller functions or even simplifying some of the condition combinations into variable or methods might improve the readability of this block.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400397856", "createdAt": "2020-03-30T18:17:39Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudiesServicesImpl.java", "diffHunk": "@@ -37,4 +67,259 @@ public ErrorBean saveStudyMetadata(StudyMetadataBean studyMetadataBean) {\n     logger.info(\"StudiesServicesImpl - saveStudyMetadata() : ends\");\n     return errorBean;\n   }\n+\n+  @SuppressWarnings(\"unlikely-arg-type\")\n+  @Override\n+  public ErrorBean SendNotificationAction(NotificationForm notificationForm) {\n+    HashSet<String> studySet = new HashSet<>();\n+    HashSet<String> appSet = new HashSet<>();\n+    Map<Integer, Map<String, JSONArray>> studiesMap = null;\n+    ErrorBean errorBean = null;\n+    List<Integer> studyInfoIds = new ArrayList<Integer>();\n+    Map<Object, StudyInfoBO> studyInfobyStudyCustomId = new HashMap<>();\n+    Map<String, JSONArray> allDeviceTokens = new HashMap<>();\n+    List<Integer> appInfoIds = new ArrayList<>();\n+    Map<Object, AppInfoDetailsBO> appInfobyAppCustomId = new HashMap<>();\n+    logger.info(\"StudiesServicesImpl - SendNotificationAction() : starts\");\n+    try {\n+\n+      for (NotificationBean notificationBean : notificationForm.getNotifications()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyMDUwMA==", "bodyText": "Fixed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402420500", "createdAt": "2020-04-02T15:50:38Z", "author": {"login": "aswinijena100"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudiesServicesImpl.java", "diffHunk": "@@ -37,4 +67,259 @@ public ErrorBean saveStudyMetadata(StudyMetadataBean studyMetadataBean) {\n     logger.info(\"StudiesServicesImpl - saveStudyMetadata() : ends\");\n     return errorBean;\n   }\n+\n+  @SuppressWarnings(\"unlikely-arg-type\")\n+  @Override\n+  public ErrorBean SendNotificationAction(NotificationForm notificationForm) {\n+    HashSet<String> studySet = new HashSet<>();\n+    HashSet<String> appSet = new HashSet<>();\n+    Map<Integer, Map<String, JSONArray>> studiesMap = null;\n+    ErrorBean errorBean = null;\n+    List<Integer> studyInfoIds = new ArrayList<Integer>();\n+    Map<Object, StudyInfoBO> studyInfobyStudyCustomId = new HashMap<>();\n+    Map<String, JSONArray> allDeviceTokens = new HashMap<>();\n+    List<Integer> appInfoIds = new ArrayList<>();\n+    Map<Object, AppInfoDetailsBO> appInfobyAppCustomId = new HashMap<>();\n+    logger.info(\"StudiesServicesImpl - SendNotificationAction() : starts\");\n+    try {\n+\n+      for (NotificationBean notificationBean : notificationForm.getNotifications()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM5Nzg1Ng=="}, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Mjk5Mjg1OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudiesServicesImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODoxOTowOVrOF92ZjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTo1MDo1MFrOF_xzlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM5ODczMw==", "bodyText": "how about:\nif (notificationBean.getNotificationType().equalsIgnoreCase(AppConstants.STUDY_LEVEL)) {\n  studySet.add(notificationBean.getCustomStudyId());\n}\nappSet.add(notificationBean.getAppId());", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400398733", "createdAt": "2020-03-30T18:19:09Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudiesServicesImpl.java", "diffHunk": "@@ -37,4 +67,259 @@ public ErrorBean saveStudyMetadata(StudyMetadataBean studyMetadataBean) {\n     logger.info(\"StudiesServicesImpl - saveStudyMetadata() : ends\");\n     return errorBean;\n   }\n+\n+  @SuppressWarnings(\"unlikely-arg-type\")\n+  @Override\n+  public ErrorBean SendNotificationAction(NotificationForm notificationForm) {\n+    HashSet<String> studySet = new HashSet<>();\n+    HashSet<String> appSet = new HashSet<>();\n+    Map<Integer, Map<String, JSONArray>> studiesMap = null;\n+    ErrorBean errorBean = null;\n+    List<Integer> studyInfoIds = new ArrayList<Integer>();\n+    Map<Object, StudyInfoBO> studyInfobyStudyCustomId = new HashMap<>();\n+    Map<String, JSONArray> allDeviceTokens = new HashMap<>();\n+    List<Integer> appInfoIds = new ArrayList<>();\n+    Map<Object, AppInfoDetailsBO> appInfobyAppCustomId = new HashMap<>();\n+    logger.info(\"StudiesServicesImpl - SendNotificationAction() : starts\");\n+    try {\n+\n+      for (NotificationBean notificationBean : notificationForm.getNotifications()) {\n+        if (notificationBean.getNotificationType().equalsIgnoreCase(AppConstants.STUDY_LEVEL)) {\n+          studySet.add(notificationBean.getCustomStudyId());\n+          appSet.add(notificationBean.getAppId());\n+        } else {\n+          appSet.add(notificationBean.getAppId());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyMDYzMA==", "bodyText": "Fixed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402420630", "createdAt": "2020-04-02T15:50:50Z", "author": {"login": "aswinijena100"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudiesServicesImpl.java", "diffHunk": "@@ -37,4 +67,259 @@ public ErrorBean saveStudyMetadata(StudyMetadataBean studyMetadataBean) {\n     logger.info(\"StudiesServicesImpl - saveStudyMetadata() : ends\");\n     return errorBean;\n   }\n+\n+  @SuppressWarnings(\"unlikely-arg-type\")\n+  @Override\n+  public ErrorBean SendNotificationAction(NotificationForm notificationForm) {\n+    HashSet<String> studySet = new HashSet<>();\n+    HashSet<String> appSet = new HashSet<>();\n+    Map<Integer, Map<String, JSONArray>> studiesMap = null;\n+    ErrorBean errorBean = null;\n+    List<Integer> studyInfoIds = new ArrayList<Integer>();\n+    Map<Object, StudyInfoBO> studyInfobyStudyCustomId = new HashMap<>();\n+    Map<String, JSONArray> allDeviceTokens = new HashMap<>();\n+    List<Integer> appInfoIds = new ArrayList<>();\n+    Map<Object, AppInfoDetailsBO> appInfobyAppCustomId = new HashMap<>();\n+    logger.info(\"StudiesServicesImpl - SendNotificationAction() : starts\");\n+    try {\n+\n+      for (NotificationBean notificationBean : notificationForm.getNotifications()) {\n+        if (notificationBean.getNotificationType().equalsIgnoreCase(AppConstants.STUDY_LEVEL)) {\n+          studySet.add(notificationBean.getCustomStudyId());\n+          appSet.add(notificationBean.getAppId());\n+        } else {\n+          appSet.add(notificationBean.getAppId());\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM5ODczMw=="}, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzAwMDM2OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudiesServicesImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODoyMToyM1rOF92eUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTo1MToxMlrOF_x0iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM5OTk1NA==", "bodyText": "using early exits can reduce the nesting and improve code readability, e.g.\nif (appSet == null || appSet.isEmpty()) {\n   return new ErrorBean(ErrorCode.EC_400.code(), ErrorCode.EC_400.errorMessage());\n}\n....", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400399954", "createdAt": "2020-03-30T18:21:23Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudiesServicesImpl.java", "diffHunk": "@@ -37,4 +67,259 @@ public ErrorBean saveStudyMetadata(StudyMetadataBean studyMetadataBean) {\n     logger.info(\"StudiesServicesImpl - saveStudyMetadata() : ends\");\n     return errorBean;\n   }\n+\n+  @SuppressWarnings(\"unlikely-arg-type\")\n+  @Override\n+  public ErrorBean SendNotificationAction(NotificationForm notificationForm) {\n+    HashSet<String> studySet = new HashSet<>();\n+    HashSet<String> appSet = new HashSet<>();\n+    Map<Integer, Map<String, JSONArray>> studiesMap = null;\n+    ErrorBean errorBean = null;\n+    List<Integer> studyInfoIds = new ArrayList<Integer>();\n+    Map<Object, StudyInfoBO> studyInfobyStudyCustomId = new HashMap<>();\n+    Map<String, JSONArray> allDeviceTokens = new HashMap<>();\n+    List<Integer> appInfoIds = new ArrayList<>();\n+    Map<Object, AppInfoDetailsBO> appInfobyAppCustomId = new HashMap<>();\n+    logger.info(\"StudiesServicesImpl - SendNotificationAction() : starts\");\n+    try {\n+\n+      for (NotificationBean notificationBean : notificationForm.getNotifications()) {\n+        if (notificationBean.getNotificationType().equalsIgnoreCase(AppConstants.STUDY_LEVEL)) {\n+          studySet.add(notificationBean.getCustomStudyId());\n+          appSet.add(notificationBean.getAppId());\n+        } else {\n+          appSet.add(notificationBean.getAppId());\n+        }\n+      }\n+      if (appSet != null && !appSet.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyMDg3NQ==", "bodyText": "Fixed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402420875", "createdAt": "2020-04-02T15:51:12Z", "author": {"login": "aswinijena100"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudiesServicesImpl.java", "diffHunk": "@@ -37,4 +67,259 @@ public ErrorBean saveStudyMetadata(StudyMetadataBean studyMetadataBean) {\n     logger.info(\"StudiesServicesImpl - saveStudyMetadata() : ends\");\n     return errorBean;\n   }\n+\n+  @SuppressWarnings(\"unlikely-arg-type\")\n+  @Override\n+  public ErrorBean SendNotificationAction(NotificationForm notificationForm) {\n+    HashSet<String> studySet = new HashSet<>();\n+    HashSet<String> appSet = new HashSet<>();\n+    Map<Integer, Map<String, JSONArray>> studiesMap = null;\n+    ErrorBean errorBean = null;\n+    List<Integer> studyInfoIds = new ArrayList<Integer>();\n+    Map<Object, StudyInfoBO> studyInfobyStudyCustomId = new HashMap<>();\n+    Map<String, JSONArray> allDeviceTokens = new HashMap<>();\n+    List<Integer> appInfoIds = new ArrayList<>();\n+    Map<Object, AppInfoDetailsBO> appInfobyAppCustomId = new HashMap<>();\n+    logger.info(\"StudiesServicesImpl - SendNotificationAction() : starts\");\n+    try {\n+\n+      for (NotificationBean notificationBean : notificationForm.getNotifications()) {\n+        if (notificationBean.getNotificationType().equalsIgnoreCase(AppConstants.STUDY_LEVEL)) {\n+          studySet.add(notificationBean.getCustomStudyId());\n+          appSet.add(notificationBean.getAppId());\n+        } else {\n+          appSet.add(notificationBean.getAppId());\n+        }\n+      }\n+      if (appSet != null && !appSet.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM5OTk1NA=="}, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzAzMTQwOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudiesServicesImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODoyOToxMFrOF92xkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTo1MToyMVrOF_x07w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQwNDg4Mw==", "bodyText": "please remove these across the project", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400404883", "createdAt": "2020-03-30T18:29:10Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudiesServicesImpl.java", "diffHunk": "@@ -37,4 +67,259 @@ public ErrorBean saveStudyMetadata(StudyMetadataBean studyMetadataBean) {\n     logger.info(\"StudiesServicesImpl - saveStudyMetadata() : ends\");\n     return errorBean;\n   }\n+\n+  @SuppressWarnings(\"unlikely-arg-type\")\n+  @Override\n+  public ErrorBean SendNotificationAction(NotificationForm notificationForm) {\n+    HashSet<String> studySet = new HashSet<>();\n+    HashSet<String> appSet = new HashSet<>();\n+    Map<Integer, Map<String, JSONArray>> studiesMap = null;\n+    ErrorBean errorBean = null;\n+    List<Integer> studyInfoIds = new ArrayList<Integer>();\n+    Map<Object, StudyInfoBO> studyInfobyStudyCustomId = new HashMap<>();\n+    Map<String, JSONArray> allDeviceTokens = new HashMap<>();\n+    List<Integer> appInfoIds = new ArrayList<>();\n+    Map<Object, AppInfoDetailsBO> appInfobyAppCustomId = new HashMap<>();\n+    logger.info(\"StudiesServicesImpl - SendNotificationAction() : starts\");\n+    try {\n+\n+      for (NotificationBean notificationBean : notificationForm.getNotifications()) {\n+        if (notificationBean.getNotificationType().equalsIgnoreCase(AppConstants.STUDY_LEVEL)) {\n+          studySet.add(notificationBean.getCustomStudyId());\n+          appSet.add(notificationBean.getAppId());\n+        } else {\n+          appSet.add(notificationBean.getAppId());\n+        }\n+      }\n+      if (appSet != null && !appSet.isEmpty()) {\n+        List<AppInfoDetailsBO> appInfos = commonDao.getAppInfoIds(appSet);\n+        if (appInfos != null && !appInfos.isEmpty()) {\n+          appInfoIds =\n+              appInfos.stream().map(a -> a.getAppInfoId()).distinct().collect(Collectors.toList());\n+\n+          appInfobyAppCustomId =\n+              appInfos\n+                  .stream()\n+                  .collect(Collectors.toMap(AppInfoDetailsBO::getAppId, Function.identity()));\n+\n+          if (appInfoIds != null && !appInfoIds.isEmpty()) {\n+            allDeviceTokens = authInfoBODao.getDeviceTokenOfAllUsers(appInfoIds);\n+          }\n+        }\n+        if (studySet != null\n+            && !studySet.isEmpty()\n+            && appInfoIds != null\n+            && !appInfoIds.isEmpty()) {\n+\n+          List<StudyInfoBO> studyInfos = commonDao.getStudyInfoIds(studySet);\n+          if (studyInfos != null && !studyInfos.isEmpty()) {\n+            studyInfoIds =\n+                studyInfos.stream().map(a -> a.getId()).distinct().collect(Collectors.toList());\n+\n+            studyInfobyStudyCustomId =\n+                studyInfos\n+                    .stream()\n+                    .collect(Collectors.toMap(StudyInfoBO::getCustomId, Function.identity()));\n+\n+            if (studyInfoIds != null && !studyInfoIds.isEmpty()) {\n+              studiesMap = commonDao.getStudyLevelDeviceToken(studyInfoIds, appInfoIds);\n+            }\n+          }\n+        }\n+        if ((allDeviceTokens != null && !allDeviceTokens.isEmpty())\n+            || (studiesMap != null && !studiesMap.isEmpty())) {\n+          for (NotificationBean notificationBean : notificationForm.getNotifications()) {\n+            if (notificationBean\n+                .getNotificationType()\n+                .equalsIgnoreCase(AppConstants.GATEWAY_LEVEL)) {\n+\n+              notificationBean.setNotificationType(AppConstants.GATEWAY);\n+              if (allDeviceTokens.get(AppConstants.DEVICE_ANDROID) != null\n+                  && allDeviceTokens.get(AppConstants.DEVICE_ANDROID).length() != 0) {\n+\n+                notificationBean.setDeviceToken(allDeviceTokens.get(AppConstants.DEVICE_ANDROID));\n+                if (notificationBean.getDeviceToken() != null\n+                    && notificationBean.getDeviceToken().length() > 0\n+                    && appInfobyAppCustomId != null\n+                    && appInfobyAppCustomId.get(notificationBean.getAppId()) != null) {\n+                  pushFCMNotification(\n+                      notificationBean, appInfobyAppCustomId.get(notificationBean.getAppId()));\n+                }\n+              }\n+              if (allDeviceTokens.get(AppConstants.DEVICE_IOS) != null) {\n+\n+                notificationBean.setDeviceToken(allDeviceTokens.get(AppConstants.DEVICE_IOS));\n+                if (notificationBean.getDeviceToken() != null\n+                    && notificationBean.getDeviceToken().length() > 0\n+                    && appInfobyAppCustomId != null\n+                    && appInfobyAppCustomId.get(notificationBean.getAppId()) != null) {\n+                  pushNotification(\n+                      notificationBean, appInfobyAppCustomId.get(notificationBean.getAppId()));\n+                }\n+              }\n+            } else if (notificationBean\n+                    .getNotificationType()\n+                    .equalsIgnoreCase(AppConstants.STUDY_LEVEL)\n+                && studyInfobyStudyCustomId != null\n+                && studyInfobyStudyCustomId.get(notificationBean.getCustomStudyId()) != null\n+                && studiesMap != null) {\n+              Map<String, JSONArray> deviceTokensMap =\n+                  studiesMap.get(\n+                      studyInfobyStudyCustomId.get(notificationBean.getCustomStudyId()).getId());\n+\n+              notificationBean.setNotificationType(AppConstants.STUDY);\n+              if (deviceTokensMap != null) {\n+                if (deviceTokensMap.get(AppConstants.DEVICE_ANDROID) != null) {\n+\n+                  notificationBean.setDeviceToken(deviceTokensMap.get(AppConstants.DEVICE_ANDROID));\n+                  if (notificationBean.getDeviceToken() != null\n+                      && notificationBean.getDeviceToken().length() > 0\n+                      && appInfobyAppCustomId != null\n+                      && appInfobyAppCustomId.get(notificationBean.getAppId()) != null) {\n+                    pushFCMNotification(\n+                        notificationBean, appInfobyAppCustomId.get(notificationBean.getAppId()));\n+                  }\n+                }\n+                if (deviceTokensMap.get(AppConstants.DEVICE_IOS) != null) {\n+\n+                  notificationBean.setDeviceToken(deviceTokensMap.get(AppConstants.DEVICE_IOS));\n+                  if (notificationBean.getDeviceToken() != null\n+                      && notificationBean.getDeviceToken().length() > 0\n+                      && appInfobyAppCustomId != null\n+                      && appInfobyAppCustomId.get(notificationBean.getAppId()) != null) {\n+                    pushNotification(\n+                        notificationBean, appInfobyAppCustomId.get(notificationBean.getAppId()));\n+                  }\n+                }\n+              }\n+            }\n+          }\n+        }\n+      } else {\n+        errorBean = new ErrorBean(ErrorCode.EC_400.code(), ErrorCode.EC_400.errorMessage());\n+        return errorBean;\n+      }\n+      errorBean = new ErrorBean(ErrorCode.EC_200.code(), ErrorCode.EC_200.errorMessage());\n+    } catch (Exception e) {\n+      logger.info(\"StudiesServicesImpl - SendNotificationAction() : error\", e);\n+      errorBean = new ErrorBean(ErrorCode.EC_500.code(), ErrorCode.EC_500.errorMessage());\n+    }\n+    logger.info(\"StudiesServicesImpl - SendNotificationAction() : ends\");\n+    return errorBean;\n+  }\n+  /**\n+   * Andriod push notification\n+   *\n+   * @param notification\n+   */\n+  public void pushFCMNotification(\n+      NotificationBean notification, AppInfoDetailsBO appPropertiesDetails) {\n+    String authKey = \"\";\n+    logger.info(\"StudiesServicesImpl - pushFCMNotification() : starts\");\n+    try {\n+\n+      if (appPropertiesDetails != null) {\n+        authKey = appPropertiesDetails.getAndroidServerKey(); // You FCM AUTH key\n+\n+        URL url = new URL((String) applicationPropertyConfiguration.getApiUrlFcm());\n+        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n+\n+        conn.setUseCaches(false);\n+        conn.setDoInput(true);\n+        conn.setDoOutput(true);\n+\n+        conn.setRequestMethod(\"POST\");\n+        conn.setRequestProperty(\"Authorization\", \"key=\" + authKey);\n+        conn.setRequestProperty(\"Content-Type\", \"application/json\");\n+\n+        JSONObject json = new JSONObject();\n+\n+        json.put(\"registration_ids\", notification.getDeviceToken());\n+        json.put(\"priority\", \"high\");\n+\n+        JSONObject dataInfo = new JSONObject();\n+        dataInfo.put(\"subtype\", notification.getNotificationSubType());\n+        dataInfo.put(\"type\", notification.getNotificationType());\n+        dataInfo.put(\"title\", notification.getNotificationTitle());\n+        dataInfo.put(\"message\", notification.getNotificationText());\n+        if (notification.getCustomStudyId() != null\n+            && StringUtils.isNotEmpty(notification.getCustomStudyId())) {\n+          dataInfo.put(\"studyId\", notification.getCustomStudyId());\n+        }\n+        json.put(\"data\", dataInfo);\n+        OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\n+        wr.write(json.toString());\n+        wr.flush();\n+        conn.getInputStream();\n+      }\n+    } catch (Exception e) {\n+      logger.info(\"StudiesServicesImpl - pushFCMNotification() : error\", e);\n+    }\n+    logger.info(\"StudiesServicesImpl - pushFCMNotification() : ends\");\n+  }\n+\n+  public static void pushNotification(\n+      NotificationBean notificationBean, AppInfoDetailsBO appPropertiesDetails) {\n+    logger.info(\"StudiesServicesImpl - pushNotification() : starts\");\n+    String certificatePassword = \"\";\n+    try {\n+      File file = null;\n+      if (appPropertiesDetails != null) {\n+        File root = null;\n+        certificatePassword = appPropertiesDetails.getIosCertificatePassword();\n+        try {\n+          byte[] decodedBytes;\n+          FileOutputStream fop;\n+          decodedBytes =\n+              java.util.Base64.getDecoder()\n+                  .decode(appPropertiesDetails.getIosCertificate().replaceAll(\"\\n\", \"\"));\n+          file = File.createTempFile(\"pushCert_\" + appPropertiesDetails.getAppId(), \".p12\");\n+          System.out.println(file.getAbsolutePath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 274}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyMDk3NQ==", "bodyText": "Fixed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402420975", "createdAt": "2020-04-02T15:51:21Z", "author": {"login": "aswinijena100"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudiesServicesImpl.java", "diffHunk": "@@ -37,4 +67,259 @@ public ErrorBean saveStudyMetadata(StudyMetadataBean studyMetadataBean) {\n     logger.info(\"StudiesServicesImpl - saveStudyMetadata() : ends\");\n     return errorBean;\n   }\n+\n+  @SuppressWarnings(\"unlikely-arg-type\")\n+  @Override\n+  public ErrorBean SendNotificationAction(NotificationForm notificationForm) {\n+    HashSet<String> studySet = new HashSet<>();\n+    HashSet<String> appSet = new HashSet<>();\n+    Map<Integer, Map<String, JSONArray>> studiesMap = null;\n+    ErrorBean errorBean = null;\n+    List<Integer> studyInfoIds = new ArrayList<Integer>();\n+    Map<Object, StudyInfoBO> studyInfobyStudyCustomId = new HashMap<>();\n+    Map<String, JSONArray> allDeviceTokens = new HashMap<>();\n+    List<Integer> appInfoIds = new ArrayList<>();\n+    Map<Object, AppInfoDetailsBO> appInfobyAppCustomId = new HashMap<>();\n+    logger.info(\"StudiesServicesImpl - SendNotificationAction() : starts\");\n+    try {\n+\n+      for (NotificationBean notificationBean : notificationForm.getNotifications()) {\n+        if (notificationBean.getNotificationType().equalsIgnoreCase(AppConstants.STUDY_LEVEL)) {\n+          studySet.add(notificationBean.getCustomStudyId());\n+          appSet.add(notificationBean.getAppId());\n+        } else {\n+          appSet.add(notificationBean.getAppId());\n+        }\n+      }\n+      if (appSet != null && !appSet.isEmpty()) {\n+        List<AppInfoDetailsBO> appInfos = commonDao.getAppInfoIds(appSet);\n+        if (appInfos != null && !appInfos.isEmpty()) {\n+          appInfoIds =\n+              appInfos.stream().map(a -> a.getAppInfoId()).distinct().collect(Collectors.toList());\n+\n+          appInfobyAppCustomId =\n+              appInfos\n+                  .stream()\n+                  .collect(Collectors.toMap(AppInfoDetailsBO::getAppId, Function.identity()));\n+\n+          if (appInfoIds != null && !appInfoIds.isEmpty()) {\n+            allDeviceTokens = authInfoBODao.getDeviceTokenOfAllUsers(appInfoIds);\n+          }\n+        }\n+        if (studySet != null\n+            && !studySet.isEmpty()\n+            && appInfoIds != null\n+            && !appInfoIds.isEmpty()) {\n+\n+          List<StudyInfoBO> studyInfos = commonDao.getStudyInfoIds(studySet);\n+          if (studyInfos != null && !studyInfos.isEmpty()) {\n+            studyInfoIds =\n+                studyInfos.stream().map(a -> a.getId()).distinct().collect(Collectors.toList());\n+\n+            studyInfobyStudyCustomId =\n+                studyInfos\n+                    .stream()\n+                    .collect(Collectors.toMap(StudyInfoBO::getCustomId, Function.identity()));\n+\n+            if (studyInfoIds != null && !studyInfoIds.isEmpty()) {\n+              studiesMap = commonDao.getStudyLevelDeviceToken(studyInfoIds, appInfoIds);\n+            }\n+          }\n+        }\n+        if ((allDeviceTokens != null && !allDeviceTokens.isEmpty())\n+            || (studiesMap != null && !studiesMap.isEmpty())) {\n+          for (NotificationBean notificationBean : notificationForm.getNotifications()) {\n+            if (notificationBean\n+                .getNotificationType()\n+                .equalsIgnoreCase(AppConstants.GATEWAY_LEVEL)) {\n+\n+              notificationBean.setNotificationType(AppConstants.GATEWAY);\n+              if (allDeviceTokens.get(AppConstants.DEVICE_ANDROID) != null\n+                  && allDeviceTokens.get(AppConstants.DEVICE_ANDROID).length() != 0) {\n+\n+                notificationBean.setDeviceToken(allDeviceTokens.get(AppConstants.DEVICE_ANDROID));\n+                if (notificationBean.getDeviceToken() != null\n+                    && notificationBean.getDeviceToken().length() > 0\n+                    && appInfobyAppCustomId != null\n+                    && appInfobyAppCustomId.get(notificationBean.getAppId()) != null) {\n+                  pushFCMNotification(\n+                      notificationBean, appInfobyAppCustomId.get(notificationBean.getAppId()));\n+                }\n+              }\n+              if (allDeviceTokens.get(AppConstants.DEVICE_IOS) != null) {\n+\n+                notificationBean.setDeviceToken(allDeviceTokens.get(AppConstants.DEVICE_IOS));\n+                if (notificationBean.getDeviceToken() != null\n+                    && notificationBean.getDeviceToken().length() > 0\n+                    && appInfobyAppCustomId != null\n+                    && appInfobyAppCustomId.get(notificationBean.getAppId()) != null) {\n+                  pushNotification(\n+                      notificationBean, appInfobyAppCustomId.get(notificationBean.getAppId()));\n+                }\n+              }\n+            } else if (notificationBean\n+                    .getNotificationType()\n+                    .equalsIgnoreCase(AppConstants.STUDY_LEVEL)\n+                && studyInfobyStudyCustomId != null\n+                && studyInfobyStudyCustomId.get(notificationBean.getCustomStudyId()) != null\n+                && studiesMap != null) {\n+              Map<String, JSONArray> deviceTokensMap =\n+                  studiesMap.get(\n+                      studyInfobyStudyCustomId.get(notificationBean.getCustomStudyId()).getId());\n+\n+              notificationBean.setNotificationType(AppConstants.STUDY);\n+              if (deviceTokensMap != null) {\n+                if (deviceTokensMap.get(AppConstants.DEVICE_ANDROID) != null) {\n+\n+                  notificationBean.setDeviceToken(deviceTokensMap.get(AppConstants.DEVICE_ANDROID));\n+                  if (notificationBean.getDeviceToken() != null\n+                      && notificationBean.getDeviceToken().length() > 0\n+                      && appInfobyAppCustomId != null\n+                      && appInfobyAppCustomId.get(notificationBean.getAppId()) != null) {\n+                    pushFCMNotification(\n+                        notificationBean, appInfobyAppCustomId.get(notificationBean.getAppId()));\n+                  }\n+                }\n+                if (deviceTokensMap.get(AppConstants.DEVICE_IOS) != null) {\n+\n+                  notificationBean.setDeviceToken(deviceTokensMap.get(AppConstants.DEVICE_IOS));\n+                  if (notificationBean.getDeviceToken() != null\n+                      && notificationBean.getDeviceToken().length() > 0\n+                      && appInfobyAppCustomId != null\n+                      && appInfobyAppCustomId.get(notificationBean.getAppId()) != null) {\n+                    pushNotification(\n+                        notificationBean, appInfobyAppCustomId.get(notificationBean.getAppId()));\n+                  }\n+                }\n+              }\n+            }\n+          }\n+        }\n+      } else {\n+        errorBean = new ErrorBean(ErrorCode.EC_400.code(), ErrorCode.EC_400.errorMessage());\n+        return errorBean;\n+      }\n+      errorBean = new ErrorBean(ErrorCode.EC_200.code(), ErrorCode.EC_200.errorMessage());\n+    } catch (Exception e) {\n+      logger.info(\"StudiesServicesImpl - SendNotificationAction() : error\", e);\n+      errorBean = new ErrorBean(ErrorCode.EC_500.code(), ErrorCode.EC_500.errorMessage());\n+    }\n+    logger.info(\"StudiesServicesImpl - SendNotificationAction() : ends\");\n+    return errorBean;\n+  }\n+  /**\n+   * Andriod push notification\n+   *\n+   * @param notification\n+   */\n+  public void pushFCMNotification(\n+      NotificationBean notification, AppInfoDetailsBO appPropertiesDetails) {\n+    String authKey = \"\";\n+    logger.info(\"StudiesServicesImpl - pushFCMNotification() : starts\");\n+    try {\n+\n+      if (appPropertiesDetails != null) {\n+        authKey = appPropertiesDetails.getAndroidServerKey(); // You FCM AUTH key\n+\n+        URL url = new URL((String) applicationPropertyConfiguration.getApiUrlFcm());\n+        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n+\n+        conn.setUseCaches(false);\n+        conn.setDoInput(true);\n+        conn.setDoOutput(true);\n+\n+        conn.setRequestMethod(\"POST\");\n+        conn.setRequestProperty(\"Authorization\", \"key=\" + authKey);\n+        conn.setRequestProperty(\"Content-Type\", \"application/json\");\n+\n+        JSONObject json = new JSONObject();\n+\n+        json.put(\"registration_ids\", notification.getDeviceToken());\n+        json.put(\"priority\", \"high\");\n+\n+        JSONObject dataInfo = new JSONObject();\n+        dataInfo.put(\"subtype\", notification.getNotificationSubType());\n+        dataInfo.put(\"type\", notification.getNotificationType());\n+        dataInfo.put(\"title\", notification.getNotificationTitle());\n+        dataInfo.put(\"message\", notification.getNotificationText());\n+        if (notification.getCustomStudyId() != null\n+            && StringUtils.isNotEmpty(notification.getCustomStudyId())) {\n+          dataInfo.put(\"studyId\", notification.getCustomStudyId());\n+        }\n+        json.put(\"data\", dataInfo);\n+        OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\n+        wr.write(json.toString());\n+        wr.flush();\n+        conn.getInputStream();\n+      }\n+    } catch (Exception e) {\n+      logger.info(\"StudiesServicesImpl - pushFCMNotification() : error\", e);\n+    }\n+    logger.info(\"StudiesServicesImpl - pushFCMNotification() : ends\");\n+  }\n+\n+  public static void pushNotification(\n+      NotificationBean notificationBean, AppInfoDetailsBO appPropertiesDetails) {\n+    logger.info(\"StudiesServicesImpl - pushNotification() : starts\");\n+    String certificatePassword = \"\";\n+    try {\n+      File file = null;\n+      if (appPropertiesDetails != null) {\n+        File root = null;\n+        certificatePassword = appPropertiesDetails.getIosCertificatePassword();\n+        try {\n+          byte[] decodedBytes;\n+          FileOutputStream fop;\n+          decodedBytes =\n+              java.util.Base64.getDecoder()\n+                  .decode(appPropertiesDetails.getIosCertificate().replaceAll(\"\\n\", \"\"));\n+          file = File.createTempFile(\"pushCert_\" + appPropertiesDetails.getAppId(), \".p12\");\n+          System.out.println(file.getAbsolutePath());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQwNDg4Mw=="}, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 274}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzAzMjY1OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudiesServicesImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODoyOToyNlrOF92yPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTo1MTozNVrOF_x1lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQwNTA1NQ==", "bodyText": "please remove commented code", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400405055", "createdAt": "2020-03-30T18:29:26Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudiesServicesImpl.java", "diffHunk": "@@ -37,4 +67,259 @@ public ErrorBean saveStudyMetadata(StudyMetadataBean studyMetadataBean) {\n     logger.info(\"StudiesServicesImpl - saveStudyMetadata() : ends\");\n     return errorBean;\n   }\n+\n+  @SuppressWarnings(\"unlikely-arg-type\")\n+  @Override\n+  public ErrorBean SendNotificationAction(NotificationForm notificationForm) {\n+    HashSet<String> studySet = new HashSet<>();\n+    HashSet<String> appSet = new HashSet<>();\n+    Map<Integer, Map<String, JSONArray>> studiesMap = null;\n+    ErrorBean errorBean = null;\n+    List<Integer> studyInfoIds = new ArrayList<Integer>();\n+    Map<Object, StudyInfoBO> studyInfobyStudyCustomId = new HashMap<>();\n+    Map<String, JSONArray> allDeviceTokens = new HashMap<>();\n+    List<Integer> appInfoIds = new ArrayList<>();\n+    Map<Object, AppInfoDetailsBO> appInfobyAppCustomId = new HashMap<>();\n+    logger.info(\"StudiesServicesImpl - SendNotificationAction() : starts\");\n+    try {\n+\n+      for (NotificationBean notificationBean : notificationForm.getNotifications()) {\n+        if (notificationBean.getNotificationType().equalsIgnoreCase(AppConstants.STUDY_LEVEL)) {\n+          studySet.add(notificationBean.getCustomStudyId());\n+          appSet.add(notificationBean.getAppId());\n+        } else {\n+          appSet.add(notificationBean.getAppId());\n+        }\n+      }\n+      if (appSet != null && !appSet.isEmpty()) {\n+        List<AppInfoDetailsBO> appInfos = commonDao.getAppInfoIds(appSet);\n+        if (appInfos != null && !appInfos.isEmpty()) {\n+          appInfoIds =\n+              appInfos.stream().map(a -> a.getAppInfoId()).distinct().collect(Collectors.toList());\n+\n+          appInfobyAppCustomId =\n+              appInfos\n+                  .stream()\n+                  .collect(Collectors.toMap(AppInfoDetailsBO::getAppId, Function.identity()));\n+\n+          if (appInfoIds != null && !appInfoIds.isEmpty()) {\n+            allDeviceTokens = authInfoBODao.getDeviceTokenOfAllUsers(appInfoIds);\n+          }\n+        }\n+        if (studySet != null\n+            && !studySet.isEmpty()\n+            && appInfoIds != null\n+            && !appInfoIds.isEmpty()) {\n+\n+          List<StudyInfoBO> studyInfos = commonDao.getStudyInfoIds(studySet);\n+          if (studyInfos != null && !studyInfos.isEmpty()) {\n+            studyInfoIds =\n+                studyInfos.stream().map(a -> a.getId()).distinct().collect(Collectors.toList());\n+\n+            studyInfobyStudyCustomId =\n+                studyInfos\n+                    .stream()\n+                    .collect(Collectors.toMap(StudyInfoBO::getCustomId, Function.identity()));\n+\n+            if (studyInfoIds != null && !studyInfoIds.isEmpty()) {\n+              studiesMap = commonDao.getStudyLevelDeviceToken(studyInfoIds, appInfoIds);\n+            }\n+          }\n+        }\n+        if ((allDeviceTokens != null && !allDeviceTokens.isEmpty())\n+            || (studiesMap != null && !studiesMap.isEmpty())) {\n+          for (NotificationBean notificationBean : notificationForm.getNotifications()) {\n+            if (notificationBean\n+                .getNotificationType()\n+                .equalsIgnoreCase(AppConstants.GATEWAY_LEVEL)) {\n+\n+              notificationBean.setNotificationType(AppConstants.GATEWAY);\n+              if (allDeviceTokens.get(AppConstants.DEVICE_ANDROID) != null\n+                  && allDeviceTokens.get(AppConstants.DEVICE_ANDROID).length() != 0) {\n+\n+                notificationBean.setDeviceToken(allDeviceTokens.get(AppConstants.DEVICE_ANDROID));\n+                if (notificationBean.getDeviceToken() != null\n+                    && notificationBean.getDeviceToken().length() > 0\n+                    && appInfobyAppCustomId != null\n+                    && appInfobyAppCustomId.get(notificationBean.getAppId()) != null) {\n+                  pushFCMNotification(\n+                      notificationBean, appInfobyAppCustomId.get(notificationBean.getAppId()));\n+                }\n+              }\n+              if (allDeviceTokens.get(AppConstants.DEVICE_IOS) != null) {\n+\n+                notificationBean.setDeviceToken(allDeviceTokens.get(AppConstants.DEVICE_IOS));\n+                if (notificationBean.getDeviceToken() != null\n+                    && notificationBean.getDeviceToken().length() > 0\n+                    && appInfobyAppCustomId != null\n+                    && appInfobyAppCustomId.get(notificationBean.getAppId()) != null) {\n+                  pushNotification(\n+                      notificationBean, appInfobyAppCustomId.get(notificationBean.getAppId()));\n+                }\n+              }\n+            } else if (notificationBean\n+                    .getNotificationType()\n+                    .equalsIgnoreCase(AppConstants.STUDY_LEVEL)\n+                && studyInfobyStudyCustomId != null\n+                && studyInfobyStudyCustomId.get(notificationBean.getCustomStudyId()) != null\n+                && studiesMap != null) {\n+              Map<String, JSONArray> deviceTokensMap =\n+                  studiesMap.get(\n+                      studyInfobyStudyCustomId.get(notificationBean.getCustomStudyId()).getId());\n+\n+              notificationBean.setNotificationType(AppConstants.STUDY);\n+              if (deviceTokensMap != null) {\n+                if (deviceTokensMap.get(AppConstants.DEVICE_ANDROID) != null) {\n+\n+                  notificationBean.setDeviceToken(deviceTokensMap.get(AppConstants.DEVICE_ANDROID));\n+                  if (notificationBean.getDeviceToken() != null\n+                      && notificationBean.getDeviceToken().length() > 0\n+                      && appInfobyAppCustomId != null\n+                      && appInfobyAppCustomId.get(notificationBean.getAppId()) != null) {\n+                    pushFCMNotification(\n+                        notificationBean, appInfobyAppCustomId.get(notificationBean.getAppId()));\n+                  }\n+                }\n+                if (deviceTokensMap.get(AppConstants.DEVICE_IOS) != null) {\n+\n+                  notificationBean.setDeviceToken(deviceTokensMap.get(AppConstants.DEVICE_IOS));\n+                  if (notificationBean.getDeviceToken() != null\n+                      && notificationBean.getDeviceToken().length() > 0\n+                      && appInfobyAppCustomId != null\n+                      && appInfobyAppCustomId.get(notificationBean.getAppId()) != null) {\n+                    pushNotification(\n+                        notificationBean, appInfobyAppCustomId.get(notificationBean.getAppId()));\n+                  }\n+                }\n+              }\n+            }\n+          }\n+        }\n+      } else {\n+        errorBean = new ErrorBean(ErrorCode.EC_400.code(), ErrorCode.EC_400.errorMessage());\n+        return errorBean;\n+      }\n+      errorBean = new ErrorBean(ErrorCode.EC_200.code(), ErrorCode.EC_200.errorMessage());\n+    } catch (Exception e) {\n+      logger.info(\"StudiesServicesImpl - SendNotificationAction() : error\", e);\n+      errorBean = new ErrorBean(ErrorCode.EC_500.code(), ErrorCode.EC_500.errorMessage());\n+    }\n+    logger.info(\"StudiesServicesImpl - SendNotificationAction() : ends\");\n+    return errorBean;\n+  }\n+  /**\n+   * Andriod push notification\n+   *\n+   * @param notification\n+   */\n+  public void pushFCMNotification(\n+      NotificationBean notification, AppInfoDetailsBO appPropertiesDetails) {\n+    String authKey = \"\";\n+    logger.info(\"StudiesServicesImpl - pushFCMNotification() : starts\");\n+    try {\n+\n+      if (appPropertiesDetails != null) {\n+        authKey = appPropertiesDetails.getAndroidServerKey(); // You FCM AUTH key\n+\n+        URL url = new URL((String) applicationPropertyConfiguration.getApiUrlFcm());\n+        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n+\n+        conn.setUseCaches(false);\n+        conn.setDoInput(true);\n+        conn.setDoOutput(true);\n+\n+        conn.setRequestMethod(\"POST\");\n+        conn.setRequestProperty(\"Authorization\", \"key=\" + authKey);\n+        conn.setRequestProperty(\"Content-Type\", \"application/json\");\n+\n+        JSONObject json = new JSONObject();\n+\n+        json.put(\"registration_ids\", notification.getDeviceToken());\n+        json.put(\"priority\", \"high\");\n+\n+        JSONObject dataInfo = new JSONObject();\n+        dataInfo.put(\"subtype\", notification.getNotificationSubType());\n+        dataInfo.put(\"type\", notification.getNotificationType());\n+        dataInfo.put(\"title\", notification.getNotificationTitle());\n+        dataInfo.put(\"message\", notification.getNotificationText());\n+        if (notification.getCustomStudyId() != null\n+            && StringUtils.isNotEmpty(notification.getCustomStudyId())) {\n+          dataInfo.put(\"studyId\", notification.getCustomStudyId());\n+        }\n+        json.put(\"data\", dataInfo);\n+        OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\n+        wr.write(json.toString());\n+        wr.flush();\n+        conn.getInputStream();\n+      }\n+    } catch (Exception e) {\n+      logger.info(\"StudiesServicesImpl - pushFCMNotification() : error\", e);\n+    }\n+    logger.info(\"StudiesServicesImpl - pushFCMNotification() : ends\");\n+  }\n+\n+  public static void pushNotification(\n+      NotificationBean notificationBean, AppInfoDetailsBO appPropertiesDetails) {\n+    logger.info(\"StudiesServicesImpl - pushNotification() : starts\");\n+    String certificatePassword = \"\";\n+    try {\n+      File file = null;\n+      if (appPropertiesDetails != null) {\n+        File root = null;\n+        certificatePassword = appPropertiesDetails.getIosCertificatePassword();\n+        try {\n+          byte[] decodedBytes;\n+          FileOutputStream fop;\n+          decodedBytes =\n+              java.util.Base64.getDecoder()\n+                  .decode(appPropertiesDetails.getIosCertificate().replaceAll(\"\\n\", \"\"));\n+          file = File.createTempFile(\"pushCert_\" + appPropertiesDetails.getAppId(), \".p12\");\n+          System.out.println(file.getAbsolutePath());\n+          fop = new FileOutputStream(file);\n+          fop.write(decodedBytes);\n+          fop.flush();\n+          fop.close();\n+          file.deleteOnExit();\n+        } catch (Exception e) {\n+          logger.error(\"FdahpUserRegWSController pushNotificationCertCreation:\", e);\n+        }\n+        ApnsService service = null;\n+        if (file != null) {\n+          service =\n+              APNS.newService()\n+                  .withCert(file.getPath(), certificatePassword)\n+                  .withProductionDestination()\n+                  .build();\n+          // for Production with production certificate\n+          /* service =\n+          APNS.newService()\n+              .withCert(file.getPath(), certificatePassword)\n+              .withSandboxDestination()\n+              .build();*/\n+          // for Test and UAT with dev certificate", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 296}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyMTE0Mw==", "bodyText": "Fixed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402421143", "createdAt": "2020-04-02T15:51:35Z", "author": {"login": "aswinijena100"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudiesServicesImpl.java", "diffHunk": "@@ -37,4 +67,259 @@ public ErrorBean saveStudyMetadata(StudyMetadataBean studyMetadataBean) {\n     logger.info(\"StudiesServicesImpl - saveStudyMetadata() : ends\");\n     return errorBean;\n   }\n+\n+  @SuppressWarnings(\"unlikely-arg-type\")\n+  @Override\n+  public ErrorBean SendNotificationAction(NotificationForm notificationForm) {\n+    HashSet<String> studySet = new HashSet<>();\n+    HashSet<String> appSet = new HashSet<>();\n+    Map<Integer, Map<String, JSONArray>> studiesMap = null;\n+    ErrorBean errorBean = null;\n+    List<Integer> studyInfoIds = new ArrayList<Integer>();\n+    Map<Object, StudyInfoBO> studyInfobyStudyCustomId = new HashMap<>();\n+    Map<String, JSONArray> allDeviceTokens = new HashMap<>();\n+    List<Integer> appInfoIds = new ArrayList<>();\n+    Map<Object, AppInfoDetailsBO> appInfobyAppCustomId = new HashMap<>();\n+    logger.info(\"StudiesServicesImpl - SendNotificationAction() : starts\");\n+    try {\n+\n+      for (NotificationBean notificationBean : notificationForm.getNotifications()) {\n+        if (notificationBean.getNotificationType().equalsIgnoreCase(AppConstants.STUDY_LEVEL)) {\n+          studySet.add(notificationBean.getCustomStudyId());\n+          appSet.add(notificationBean.getAppId());\n+        } else {\n+          appSet.add(notificationBean.getAppId());\n+        }\n+      }\n+      if (appSet != null && !appSet.isEmpty()) {\n+        List<AppInfoDetailsBO> appInfos = commonDao.getAppInfoIds(appSet);\n+        if (appInfos != null && !appInfos.isEmpty()) {\n+          appInfoIds =\n+              appInfos.stream().map(a -> a.getAppInfoId()).distinct().collect(Collectors.toList());\n+\n+          appInfobyAppCustomId =\n+              appInfos\n+                  .stream()\n+                  .collect(Collectors.toMap(AppInfoDetailsBO::getAppId, Function.identity()));\n+\n+          if (appInfoIds != null && !appInfoIds.isEmpty()) {\n+            allDeviceTokens = authInfoBODao.getDeviceTokenOfAllUsers(appInfoIds);\n+          }\n+        }\n+        if (studySet != null\n+            && !studySet.isEmpty()\n+            && appInfoIds != null\n+            && !appInfoIds.isEmpty()) {\n+\n+          List<StudyInfoBO> studyInfos = commonDao.getStudyInfoIds(studySet);\n+          if (studyInfos != null && !studyInfos.isEmpty()) {\n+            studyInfoIds =\n+                studyInfos.stream().map(a -> a.getId()).distinct().collect(Collectors.toList());\n+\n+            studyInfobyStudyCustomId =\n+                studyInfos\n+                    .stream()\n+                    .collect(Collectors.toMap(StudyInfoBO::getCustomId, Function.identity()));\n+\n+            if (studyInfoIds != null && !studyInfoIds.isEmpty()) {\n+              studiesMap = commonDao.getStudyLevelDeviceToken(studyInfoIds, appInfoIds);\n+            }\n+          }\n+        }\n+        if ((allDeviceTokens != null && !allDeviceTokens.isEmpty())\n+            || (studiesMap != null && !studiesMap.isEmpty())) {\n+          for (NotificationBean notificationBean : notificationForm.getNotifications()) {\n+            if (notificationBean\n+                .getNotificationType()\n+                .equalsIgnoreCase(AppConstants.GATEWAY_LEVEL)) {\n+\n+              notificationBean.setNotificationType(AppConstants.GATEWAY);\n+              if (allDeviceTokens.get(AppConstants.DEVICE_ANDROID) != null\n+                  && allDeviceTokens.get(AppConstants.DEVICE_ANDROID).length() != 0) {\n+\n+                notificationBean.setDeviceToken(allDeviceTokens.get(AppConstants.DEVICE_ANDROID));\n+                if (notificationBean.getDeviceToken() != null\n+                    && notificationBean.getDeviceToken().length() > 0\n+                    && appInfobyAppCustomId != null\n+                    && appInfobyAppCustomId.get(notificationBean.getAppId()) != null) {\n+                  pushFCMNotification(\n+                      notificationBean, appInfobyAppCustomId.get(notificationBean.getAppId()));\n+                }\n+              }\n+              if (allDeviceTokens.get(AppConstants.DEVICE_IOS) != null) {\n+\n+                notificationBean.setDeviceToken(allDeviceTokens.get(AppConstants.DEVICE_IOS));\n+                if (notificationBean.getDeviceToken() != null\n+                    && notificationBean.getDeviceToken().length() > 0\n+                    && appInfobyAppCustomId != null\n+                    && appInfobyAppCustomId.get(notificationBean.getAppId()) != null) {\n+                  pushNotification(\n+                      notificationBean, appInfobyAppCustomId.get(notificationBean.getAppId()));\n+                }\n+              }\n+            } else if (notificationBean\n+                    .getNotificationType()\n+                    .equalsIgnoreCase(AppConstants.STUDY_LEVEL)\n+                && studyInfobyStudyCustomId != null\n+                && studyInfobyStudyCustomId.get(notificationBean.getCustomStudyId()) != null\n+                && studiesMap != null) {\n+              Map<String, JSONArray> deviceTokensMap =\n+                  studiesMap.get(\n+                      studyInfobyStudyCustomId.get(notificationBean.getCustomStudyId()).getId());\n+\n+              notificationBean.setNotificationType(AppConstants.STUDY);\n+              if (deviceTokensMap != null) {\n+                if (deviceTokensMap.get(AppConstants.DEVICE_ANDROID) != null) {\n+\n+                  notificationBean.setDeviceToken(deviceTokensMap.get(AppConstants.DEVICE_ANDROID));\n+                  if (notificationBean.getDeviceToken() != null\n+                      && notificationBean.getDeviceToken().length() > 0\n+                      && appInfobyAppCustomId != null\n+                      && appInfobyAppCustomId.get(notificationBean.getAppId()) != null) {\n+                    pushFCMNotification(\n+                        notificationBean, appInfobyAppCustomId.get(notificationBean.getAppId()));\n+                  }\n+                }\n+                if (deviceTokensMap.get(AppConstants.DEVICE_IOS) != null) {\n+\n+                  notificationBean.setDeviceToken(deviceTokensMap.get(AppConstants.DEVICE_IOS));\n+                  if (notificationBean.getDeviceToken() != null\n+                      && notificationBean.getDeviceToken().length() > 0\n+                      && appInfobyAppCustomId != null\n+                      && appInfobyAppCustomId.get(notificationBean.getAppId()) != null) {\n+                    pushNotification(\n+                        notificationBean, appInfobyAppCustomId.get(notificationBean.getAppId()));\n+                  }\n+                }\n+              }\n+            }\n+          }\n+        }\n+      } else {\n+        errorBean = new ErrorBean(ErrorCode.EC_400.code(), ErrorCode.EC_400.errorMessage());\n+        return errorBean;\n+      }\n+      errorBean = new ErrorBean(ErrorCode.EC_200.code(), ErrorCode.EC_200.errorMessage());\n+    } catch (Exception e) {\n+      logger.info(\"StudiesServicesImpl - SendNotificationAction() : error\", e);\n+      errorBean = new ErrorBean(ErrorCode.EC_500.code(), ErrorCode.EC_500.errorMessage());\n+    }\n+    logger.info(\"StudiesServicesImpl - SendNotificationAction() : ends\");\n+    return errorBean;\n+  }\n+  /**\n+   * Andriod push notification\n+   *\n+   * @param notification\n+   */\n+  public void pushFCMNotification(\n+      NotificationBean notification, AppInfoDetailsBO appPropertiesDetails) {\n+    String authKey = \"\";\n+    logger.info(\"StudiesServicesImpl - pushFCMNotification() : starts\");\n+    try {\n+\n+      if (appPropertiesDetails != null) {\n+        authKey = appPropertiesDetails.getAndroidServerKey(); // You FCM AUTH key\n+\n+        URL url = new URL((String) applicationPropertyConfiguration.getApiUrlFcm());\n+        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n+\n+        conn.setUseCaches(false);\n+        conn.setDoInput(true);\n+        conn.setDoOutput(true);\n+\n+        conn.setRequestMethod(\"POST\");\n+        conn.setRequestProperty(\"Authorization\", \"key=\" + authKey);\n+        conn.setRequestProperty(\"Content-Type\", \"application/json\");\n+\n+        JSONObject json = new JSONObject();\n+\n+        json.put(\"registration_ids\", notification.getDeviceToken());\n+        json.put(\"priority\", \"high\");\n+\n+        JSONObject dataInfo = new JSONObject();\n+        dataInfo.put(\"subtype\", notification.getNotificationSubType());\n+        dataInfo.put(\"type\", notification.getNotificationType());\n+        dataInfo.put(\"title\", notification.getNotificationTitle());\n+        dataInfo.put(\"message\", notification.getNotificationText());\n+        if (notification.getCustomStudyId() != null\n+            && StringUtils.isNotEmpty(notification.getCustomStudyId())) {\n+          dataInfo.put(\"studyId\", notification.getCustomStudyId());\n+        }\n+        json.put(\"data\", dataInfo);\n+        OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\n+        wr.write(json.toString());\n+        wr.flush();\n+        conn.getInputStream();\n+      }\n+    } catch (Exception e) {\n+      logger.info(\"StudiesServicesImpl - pushFCMNotification() : error\", e);\n+    }\n+    logger.info(\"StudiesServicesImpl - pushFCMNotification() : ends\");\n+  }\n+\n+  public static void pushNotification(\n+      NotificationBean notificationBean, AppInfoDetailsBO appPropertiesDetails) {\n+    logger.info(\"StudiesServicesImpl - pushNotification() : starts\");\n+    String certificatePassword = \"\";\n+    try {\n+      File file = null;\n+      if (appPropertiesDetails != null) {\n+        File root = null;\n+        certificatePassword = appPropertiesDetails.getIosCertificatePassword();\n+        try {\n+          byte[] decodedBytes;\n+          FileOutputStream fop;\n+          decodedBytes =\n+              java.util.Base64.getDecoder()\n+                  .decode(appPropertiesDetails.getIosCertificate().replaceAll(\"\\n\", \"\"));\n+          file = File.createTempFile(\"pushCert_\" + appPropertiesDetails.getAppId(), \".p12\");\n+          System.out.println(file.getAbsolutePath());\n+          fop = new FileOutputStream(file);\n+          fop.write(decodedBytes);\n+          fop.flush();\n+          fop.close();\n+          file.deleteOnExit();\n+        } catch (Exception e) {\n+          logger.error(\"FdahpUserRegWSController pushNotificationCertCreation:\", e);\n+        }\n+        ApnsService service = null;\n+        if (file != null) {\n+          service =\n+              APNS.newService()\n+                  .withCert(file.getPath(), certificatePassword)\n+                  .withProductionDestination()\n+                  .build();\n+          // for Production with production certificate\n+          /* service =\n+          APNS.newService()\n+              .withCert(file.getPath(), certificatePassword)\n+              .withSandboxDestination()\n+              .build();*/\n+          // for Test and UAT with dev certificate", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQwNTA1NQ=="}, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 296}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzAzNjIzOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudiesServicesImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODozMDozMFrOF920pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTozODo0MVrOF_xRWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQwNTY3MA==", "bodyText": "can this be turned into an early exit? e.g.\n if (notificationBean.getDeviceToken() == null) return;", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400405670", "createdAt": "2020-03-30T18:30:30Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudiesServicesImpl.java", "diffHunk": "@@ -37,4 +67,259 @@ public ErrorBean saveStudyMetadata(StudyMetadataBean studyMetadataBean) {\n     logger.info(\"StudiesServicesImpl - saveStudyMetadata() : ends\");\n     return errorBean;\n   }\n+\n+  @SuppressWarnings(\"unlikely-arg-type\")\n+  @Override\n+  public ErrorBean SendNotificationAction(NotificationForm notificationForm) {\n+    HashSet<String> studySet = new HashSet<>();\n+    HashSet<String> appSet = new HashSet<>();\n+    Map<Integer, Map<String, JSONArray>> studiesMap = null;\n+    ErrorBean errorBean = null;\n+    List<Integer> studyInfoIds = new ArrayList<Integer>();\n+    Map<Object, StudyInfoBO> studyInfobyStudyCustomId = new HashMap<>();\n+    Map<String, JSONArray> allDeviceTokens = new HashMap<>();\n+    List<Integer> appInfoIds = new ArrayList<>();\n+    Map<Object, AppInfoDetailsBO> appInfobyAppCustomId = new HashMap<>();\n+    logger.info(\"StudiesServicesImpl - SendNotificationAction() : starts\");\n+    try {\n+\n+      for (NotificationBean notificationBean : notificationForm.getNotifications()) {\n+        if (notificationBean.getNotificationType().equalsIgnoreCase(AppConstants.STUDY_LEVEL)) {\n+          studySet.add(notificationBean.getCustomStudyId());\n+          appSet.add(notificationBean.getAppId());\n+        } else {\n+          appSet.add(notificationBean.getAppId());\n+        }\n+      }\n+      if (appSet != null && !appSet.isEmpty()) {\n+        List<AppInfoDetailsBO> appInfos = commonDao.getAppInfoIds(appSet);\n+        if (appInfos != null && !appInfos.isEmpty()) {\n+          appInfoIds =\n+              appInfos.stream().map(a -> a.getAppInfoId()).distinct().collect(Collectors.toList());\n+\n+          appInfobyAppCustomId =\n+              appInfos\n+                  .stream()\n+                  .collect(Collectors.toMap(AppInfoDetailsBO::getAppId, Function.identity()));\n+\n+          if (appInfoIds != null && !appInfoIds.isEmpty()) {\n+            allDeviceTokens = authInfoBODao.getDeviceTokenOfAllUsers(appInfoIds);\n+          }\n+        }\n+        if (studySet != null\n+            && !studySet.isEmpty()\n+            && appInfoIds != null\n+            && !appInfoIds.isEmpty()) {\n+\n+          List<StudyInfoBO> studyInfos = commonDao.getStudyInfoIds(studySet);\n+          if (studyInfos != null && !studyInfos.isEmpty()) {\n+            studyInfoIds =\n+                studyInfos.stream().map(a -> a.getId()).distinct().collect(Collectors.toList());\n+\n+            studyInfobyStudyCustomId =\n+                studyInfos\n+                    .stream()\n+                    .collect(Collectors.toMap(StudyInfoBO::getCustomId, Function.identity()));\n+\n+            if (studyInfoIds != null && !studyInfoIds.isEmpty()) {\n+              studiesMap = commonDao.getStudyLevelDeviceToken(studyInfoIds, appInfoIds);\n+            }\n+          }\n+        }\n+        if ((allDeviceTokens != null && !allDeviceTokens.isEmpty())\n+            || (studiesMap != null && !studiesMap.isEmpty())) {\n+          for (NotificationBean notificationBean : notificationForm.getNotifications()) {\n+            if (notificationBean\n+                .getNotificationType()\n+                .equalsIgnoreCase(AppConstants.GATEWAY_LEVEL)) {\n+\n+              notificationBean.setNotificationType(AppConstants.GATEWAY);\n+              if (allDeviceTokens.get(AppConstants.DEVICE_ANDROID) != null\n+                  && allDeviceTokens.get(AppConstants.DEVICE_ANDROID).length() != 0) {\n+\n+                notificationBean.setDeviceToken(allDeviceTokens.get(AppConstants.DEVICE_ANDROID));\n+                if (notificationBean.getDeviceToken() != null\n+                    && notificationBean.getDeviceToken().length() > 0\n+                    && appInfobyAppCustomId != null\n+                    && appInfobyAppCustomId.get(notificationBean.getAppId()) != null) {\n+                  pushFCMNotification(\n+                      notificationBean, appInfobyAppCustomId.get(notificationBean.getAppId()));\n+                }\n+              }\n+              if (allDeviceTokens.get(AppConstants.DEVICE_IOS) != null) {\n+\n+                notificationBean.setDeviceToken(allDeviceTokens.get(AppConstants.DEVICE_IOS));\n+                if (notificationBean.getDeviceToken() != null\n+                    && notificationBean.getDeviceToken().length() > 0\n+                    && appInfobyAppCustomId != null\n+                    && appInfobyAppCustomId.get(notificationBean.getAppId()) != null) {\n+                  pushNotification(\n+                      notificationBean, appInfobyAppCustomId.get(notificationBean.getAppId()));\n+                }\n+              }\n+            } else if (notificationBean\n+                    .getNotificationType()\n+                    .equalsIgnoreCase(AppConstants.STUDY_LEVEL)\n+                && studyInfobyStudyCustomId != null\n+                && studyInfobyStudyCustomId.get(notificationBean.getCustomStudyId()) != null\n+                && studiesMap != null) {\n+              Map<String, JSONArray> deviceTokensMap =\n+                  studiesMap.get(\n+                      studyInfobyStudyCustomId.get(notificationBean.getCustomStudyId()).getId());\n+\n+              notificationBean.setNotificationType(AppConstants.STUDY);\n+              if (deviceTokensMap != null) {\n+                if (deviceTokensMap.get(AppConstants.DEVICE_ANDROID) != null) {\n+\n+                  notificationBean.setDeviceToken(deviceTokensMap.get(AppConstants.DEVICE_ANDROID));\n+                  if (notificationBean.getDeviceToken() != null\n+                      && notificationBean.getDeviceToken().length() > 0\n+                      && appInfobyAppCustomId != null\n+                      && appInfobyAppCustomId.get(notificationBean.getAppId()) != null) {\n+                    pushFCMNotification(\n+                        notificationBean, appInfobyAppCustomId.get(notificationBean.getAppId()));\n+                  }\n+                }\n+                if (deviceTokensMap.get(AppConstants.DEVICE_IOS) != null) {\n+\n+                  notificationBean.setDeviceToken(deviceTokensMap.get(AppConstants.DEVICE_IOS));\n+                  if (notificationBean.getDeviceToken() != null\n+                      && notificationBean.getDeviceToken().length() > 0\n+                      && appInfobyAppCustomId != null\n+                      && appInfobyAppCustomId.get(notificationBean.getAppId()) != null) {\n+                    pushNotification(\n+                        notificationBean, appInfobyAppCustomId.get(notificationBean.getAppId()));\n+                  }\n+                }\n+              }\n+            }\n+          }\n+        }\n+      } else {\n+        errorBean = new ErrorBean(ErrorCode.EC_400.code(), ErrorCode.EC_400.errorMessage());\n+        return errorBean;\n+      }\n+      errorBean = new ErrorBean(ErrorCode.EC_200.code(), ErrorCode.EC_200.errorMessage());\n+    } catch (Exception e) {\n+      logger.info(\"StudiesServicesImpl - SendNotificationAction() : error\", e);\n+      errorBean = new ErrorBean(ErrorCode.EC_500.code(), ErrorCode.EC_500.errorMessage());\n+    }\n+    logger.info(\"StudiesServicesImpl - SendNotificationAction() : ends\");\n+    return errorBean;\n+  }\n+  /**\n+   * Andriod push notification\n+   *\n+   * @param notification\n+   */\n+  public void pushFCMNotification(\n+      NotificationBean notification, AppInfoDetailsBO appPropertiesDetails) {\n+    String authKey = \"\";\n+    logger.info(\"StudiesServicesImpl - pushFCMNotification() : starts\");\n+    try {\n+\n+      if (appPropertiesDetails != null) {\n+        authKey = appPropertiesDetails.getAndroidServerKey(); // You FCM AUTH key\n+\n+        URL url = new URL((String) applicationPropertyConfiguration.getApiUrlFcm());\n+        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n+\n+        conn.setUseCaches(false);\n+        conn.setDoInput(true);\n+        conn.setDoOutput(true);\n+\n+        conn.setRequestMethod(\"POST\");\n+        conn.setRequestProperty(\"Authorization\", \"key=\" + authKey);\n+        conn.setRequestProperty(\"Content-Type\", \"application/json\");\n+\n+        JSONObject json = new JSONObject();\n+\n+        json.put(\"registration_ids\", notification.getDeviceToken());\n+        json.put(\"priority\", \"high\");\n+\n+        JSONObject dataInfo = new JSONObject();\n+        dataInfo.put(\"subtype\", notification.getNotificationSubType());\n+        dataInfo.put(\"type\", notification.getNotificationType());\n+        dataInfo.put(\"title\", notification.getNotificationTitle());\n+        dataInfo.put(\"message\", notification.getNotificationText());\n+        if (notification.getCustomStudyId() != null\n+            && StringUtils.isNotEmpty(notification.getCustomStudyId())) {\n+          dataInfo.put(\"studyId\", notification.getCustomStudyId());\n+        }\n+        json.put(\"data\", dataInfo);\n+        OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\n+        wr.write(json.toString());\n+        wr.flush();\n+        conn.getInputStream();\n+      }\n+    } catch (Exception e) {\n+      logger.info(\"StudiesServicesImpl - pushFCMNotification() : error\", e);\n+    }\n+    logger.info(\"StudiesServicesImpl - pushFCMNotification() : ends\");\n+  }\n+\n+  public static void pushNotification(\n+      NotificationBean notificationBean, AppInfoDetailsBO appPropertiesDetails) {\n+    logger.info(\"StudiesServicesImpl - pushNotification() : starts\");\n+    String certificatePassword = \"\";\n+    try {\n+      File file = null;\n+      if (appPropertiesDetails != null) {\n+        File root = null;\n+        certificatePassword = appPropertiesDetails.getIosCertificatePassword();\n+        try {\n+          byte[] decodedBytes;\n+          FileOutputStream fop;\n+          decodedBytes =\n+              java.util.Base64.getDecoder()\n+                  .decode(appPropertiesDetails.getIosCertificate().replaceAll(\"\\n\", \"\"));\n+          file = File.createTempFile(\"pushCert_\" + appPropertiesDetails.getAppId(), \".p12\");\n+          System.out.println(file.getAbsolutePath());\n+          fop = new FileOutputStream(file);\n+          fop.write(decodedBytes);\n+          fop.flush();\n+          fop.close();\n+          file.deleteOnExit();\n+        } catch (Exception e) {\n+          logger.error(\"FdahpUserRegWSController pushNotificationCertCreation:\", e);\n+        }\n+        ApnsService service = null;\n+        if (file != null) {\n+          service =\n+              APNS.newService()\n+                  .withCert(file.getPath(), certificatePassword)\n+                  .withProductionDestination()\n+                  .build();\n+          // for Production with production certificate\n+          /* service =\n+          APNS.newService()\n+              .withCert(file.getPath(), certificatePassword)\n+              .withSandboxDestination()\n+              .build();*/\n+          // for Test and UAT with dev certificate\n+\n+          List<String> tokens = new ArrayList<String>();\n+          if (notificationBean.getDeviceToken() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 299}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxMTg2Ng==", "bodyText": "fixed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402411866", "createdAt": "2020-04-02T15:38:41Z", "author": {"login": "aswinijena100"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudiesServicesImpl.java", "diffHunk": "@@ -37,4 +67,259 @@ public ErrorBean saveStudyMetadata(StudyMetadataBean studyMetadataBean) {\n     logger.info(\"StudiesServicesImpl - saveStudyMetadata() : ends\");\n     return errorBean;\n   }\n+\n+  @SuppressWarnings(\"unlikely-arg-type\")\n+  @Override\n+  public ErrorBean SendNotificationAction(NotificationForm notificationForm) {\n+    HashSet<String> studySet = new HashSet<>();\n+    HashSet<String> appSet = new HashSet<>();\n+    Map<Integer, Map<String, JSONArray>> studiesMap = null;\n+    ErrorBean errorBean = null;\n+    List<Integer> studyInfoIds = new ArrayList<Integer>();\n+    Map<Object, StudyInfoBO> studyInfobyStudyCustomId = new HashMap<>();\n+    Map<String, JSONArray> allDeviceTokens = new HashMap<>();\n+    List<Integer> appInfoIds = new ArrayList<>();\n+    Map<Object, AppInfoDetailsBO> appInfobyAppCustomId = new HashMap<>();\n+    logger.info(\"StudiesServicesImpl - SendNotificationAction() : starts\");\n+    try {\n+\n+      for (NotificationBean notificationBean : notificationForm.getNotifications()) {\n+        if (notificationBean.getNotificationType().equalsIgnoreCase(AppConstants.STUDY_LEVEL)) {\n+          studySet.add(notificationBean.getCustomStudyId());\n+          appSet.add(notificationBean.getAppId());\n+        } else {\n+          appSet.add(notificationBean.getAppId());\n+        }\n+      }\n+      if (appSet != null && !appSet.isEmpty()) {\n+        List<AppInfoDetailsBO> appInfos = commonDao.getAppInfoIds(appSet);\n+        if (appInfos != null && !appInfos.isEmpty()) {\n+          appInfoIds =\n+              appInfos.stream().map(a -> a.getAppInfoId()).distinct().collect(Collectors.toList());\n+\n+          appInfobyAppCustomId =\n+              appInfos\n+                  .stream()\n+                  .collect(Collectors.toMap(AppInfoDetailsBO::getAppId, Function.identity()));\n+\n+          if (appInfoIds != null && !appInfoIds.isEmpty()) {\n+            allDeviceTokens = authInfoBODao.getDeviceTokenOfAllUsers(appInfoIds);\n+          }\n+        }\n+        if (studySet != null\n+            && !studySet.isEmpty()\n+            && appInfoIds != null\n+            && !appInfoIds.isEmpty()) {\n+\n+          List<StudyInfoBO> studyInfos = commonDao.getStudyInfoIds(studySet);\n+          if (studyInfos != null && !studyInfos.isEmpty()) {\n+            studyInfoIds =\n+                studyInfos.stream().map(a -> a.getId()).distinct().collect(Collectors.toList());\n+\n+            studyInfobyStudyCustomId =\n+                studyInfos\n+                    .stream()\n+                    .collect(Collectors.toMap(StudyInfoBO::getCustomId, Function.identity()));\n+\n+            if (studyInfoIds != null && !studyInfoIds.isEmpty()) {\n+              studiesMap = commonDao.getStudyLevelDeviceToken(studyInfoIds, appInfoIds);\n+            }\n+          }\n+        }\n+        if ((allDeviceTokens != null && !allDeviceTokens.isEmpty())\n+            || (studiesMap != null && !studiesMap.isEmpty())) {\n+          for (NotificationBean notificationBean : notificationForm.getNotifications()) {\n+            if (notificationBean\n+                .getNotificationType()\n+                .equalsIgnoreCase(AppConstants.GATEWAY_LEVEL)) {\n+\n+              notificationBean.setNotificationType(AppConstants.GATEWAY);\n+              if (allDeviceTokens.get(AppConstants.DEVICE_ANDROID) != null\n+                  && allDeviceTokens.get(AppConstants.DEVICE_ANDROID).length() != 0) {\n+\n+                notificationBean.setDeviceToken(allDeviceTokens.get(AppConstants.DEVICE_ANDROID));\n+                if (notificationBean.getDeviceToken() != null\n+                    && notificationBean.getDeviceToken().length() > 0\n+                    && appInfobyAppCustomId != null\n+                    && appInfobyAppCustomId.get(notificationBean.getAppId()) != null) {\n+                  pushFCMNotification(\n+                      notificationBean, appInfobyAppCustomId.get(notificationBean.getAppId()));\n+                }\n+              }\n+              if (allDeviceTokens.get(AppConstants.DEVICE_IOS) != null) {\n+\n+                notificationBean.setDeviceToken(allDeviceTokens.get(AppConstants.DEVICE_IOS));\n+                if (notificationBean.getDeviceToken() != null\n+                    && notificationBean.getDeviceToken().length() > 0\n+                    && appInfobyAppCustomId != null\n+                    && appInfobyAppCustomId.get(notificationBean.getAppId()) != null) {\n+                  pushNotification(\n+                      notificationBean, appInfobyAppCustomId.get(notificationBean.getAppId()));\n+                }\n+              }\n+            } else if (notificationBean\n+                    .getNotificationType()\n+                    .equalsIgnoreCase(AppConstants.STUDY_LEVEL)\n+                && studyInfobyStudyCustomId != null\n+                && studyInfobyStudyCustomId.get(notificationBean.getCustomStudyId()) != null\n+                && studiesMap != null) {\n+              Map<String, JSONArray> deviceTokensMap =\n+                  studiesMap.get(\n+                      studyInfobyStudyCustomId.get(notificationBean.getCustomStudyId()).getId());\n+\n+              notificationBean.setNotificationType(AppConstants.STUDY);\n+              if (deviceTokensMap != null) {\n+                if (deviceTokensMap.get(AppConstants.DEVICE_ANDROID) != null) {\n+\n+                  notificationBean.setDeviceToken(deviceTokensMap.get(AppConstants.DEVICE_ANDROID));\n+                  if (notificationBean.getDeviceToken() != null\n+                      && notificationBean.getDeviceToken().length() > 0\n+                      && appInfobyAppCustomId != null\n+                      && appInfobyAppCustomId.get(notificationBean.getAppId()) != null) {\n+                    pushFCMNotification(\n+                        notificationBean, appInfobyAppCustomId.get(notificationBean.getAppId()));\n+                  }\n+                }\n+                if (deviceTokensMap.get(AppConstants.DEVICE_IOS) != null) {\n+\n+                  notificationBean.setDeviceToken(deviceTokensMap.get(AppConstants.DEVICE_IOS));\n+                  if (notificationBean.getDeviceToken() != null\n+                      && notificationBean.getDeviceToken().length() > 0\n+                      && appInfobyAppCustomId != null\n+                      && appInfobyAppCustomId.get(notificationBean.getAppId()) != null) {\n+                    pushNotification(\n+                        notificationBean, appInfobyAppCustomId.get(notificationBean.getAppId()));\n+                  }\n+                }\n+              }\n+            }\n+          }\n+        }\n+      } else {\n+        errorBean = new ErrorBean(ErrorCode.EC_400.code(), ErrorCode.EC_400.errorMessage());\n+        return errorBean;\n+      }\n+      errorBean = new ErrorBean(ErrorCode.EC_200.code(), ErrorCode.EC_200.errorMessage());\n+    } catch (Exception e) {\n+      logger.info(\"StudiesServicesImpl - SendNotificationAction() : error\", e);\n+      errorBean = new ErrorBean(ErrorCode.EC_500.code(), ErrorCode.EC_500.errorMessage());\n+    }\n+    logger.info(\"StudiesServicesImpl - SendNotificationAction() : ends\");\n+    return errorBean;\n+  }\n+  /**\n+   * Andriod push notification\n+   *\n+   * @param notification\n+   */\n+  public void pushFCMNotification(\n+      NotificationBean notification, AppInfoDetailsBO appPropertiesDetails) {\n+    String authKey = \"\";\n+    logger.info(\"StudiesServicesImpl - pushFCMNotification() : starts\");\n+    try {\n+\n+      if (appPropertiesDetails != null) {\n+        authKey = appPropertiesDetails.getAndroidServerKey(); // You FCM AUTH key\n+\n+        URL url = new URL((String) applicationPropertyConfiguration.getApiUrlFcm());\n+        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n+\n+        conn.setUseCaches(false);\n+        conn.setDoInput(true);\n+        conn.setDoOutput(true);\n+\n+        conn.setRequestMethod(\"POST\");\n+        conn.setRequestProperty(\"Authorization\", \"key=\" + authKey);\n+        conn.setRequestProperty(\"Content-Type\", \"application/json\");\n+\n+        JSONObject json = new JSONObject();\n+\n+        json.put(\"registration_ids\", notification.getDeviceToken());\n+        json.put(\"priority\", \"high\");\n+\n+        JSONObject dataInfo = new JSONObject();\n+        dataInfo.put(\"subtype\", notification.getNotificationSubType());\n+        dataInfo.put(\"type\", notification.getNotificationType());\n+        dataInfo.put(\"title\", notification.getNotificationTitle());\n+        dataInfo.put(\"message\", notification.getNotificationText());\n+        if (notification.getCustomStudyId() != null\n+            && StringUtils.isNotEmpty(notification.getCustomStudyId())) {\n+          dataInfo.put(\"studyId\", notification.getCustomStudyId());\n+        }\n+        json.put(\"data\", dataInfo);\n+        OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\n+        wr.write(json.toString());\n+        wr.flush();\n+        conn.getInputStream();\n+      }\n+    } catch (Exception e) {\n+      logger.info(\"StudiesServicesImpl - pushFCMNotification() : error\", e);\n+    }\n+    logger.info(\"StudiesServicesImpl - pushFCMNotification() : ends\");\n+  }\n+\n+  public static void pushNotification(\n+      NotificationBean notificationBean, AppInfoDetailsBO appPropertiesDetails) {\n+    logger.info(\"StudiesServicesImpl - pushNotification() : starts\");\n+    String certificatePassword = \"\";\n+    try {\n+      File file = null;\n+      if (appPropertiesDetails != null) {\n+        File root = null;\n+        certificatePassword = appPropertiesDetails.getIosCertificatePassword();\n+        try {\n+          byte[] decodedBytes;\n+          FileOutputStream fop;\n+          decodedBytes =\n+              java.util.Base64.getDecoder()\n+                  .decode(appPropertiesDetails.getIosCertificate().replaceAll(\"\\n\", \"\"));\n+          file = File.createTempFile(\"pushCert_\" + appPropertiesDetails.getAppId(), \".p12\");\n+          System.out.println(file.getAbsolutePath());\n+          fop = new FileOutputStream(file);\n+          fop.write(decodedBytes);\n+          fop.flush();\n+          fop.close();\n+          file.deleteOnExit();\n+        } catch (Exception e) {\n+          logger.error(\"FdahpUserRegWSController pushNotificationCertCreation:\", e);\n+        }\n+        ApnsService service = null;\n+        if (file != null) {\n+          service =\n+              APNS.newService()\n+                  .withCert(file.getPath(), certificatePassword)\n+                  .withProductionDestination()\n+                  .build();\n+          // for Production with production certificate\n+          /* service =\n+          APNS.newService()\n+              .withCert(file.getPath(), certificatePassword)\n+              .withSandboxDestination()\n+              .build();*/\n+          // for Test and UAT with dev certificate\n+\n+          List<String> tokens = new ArrayList<String>();\n+          if (notificationBean.getDeviceToken() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQwNTY3MA=="}, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 299}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzA3NjE4OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/AuthenticationFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODo0MToyM1rOF93NZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTozODo1NFrOF_xSCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxMjAwNQ==", "bodyText": "these headers are repeated three times; please extract them into a separate method", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400412005", "createdAt": "2020-03-30T18:41:23Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/AuthenticationFilter.java", "diffHunk": "@@ -41,70 +43,182 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha\n     HttpServletRequest httpServletRequest = (HttpServletRequest) request;\n     HttpServletResponse httpServletResponse = (HttpServletResponse) response;\n     if (request instanceof HttpServletRequest) {\n-      if (!\"OPTIONS\".equalsIgnoreCase(httpServletRequest.getMethod())) {\n-        String userId = httpServletRequest.getHeader(\"userId\");\n-        String accessToken = httpServletRequest.getHeader(\"accessToken\");\n-        String clientToken = httpServletRequest.getHeader(\"clientToken\");\n-\n+      if (!AppConstants.OPTIONS_METHOD.equalsIgnoreCase(httpServletRequest.getMethod())) {\n+        String userId = httpServletRequest.getHeader(AppConstants.KEY_USERID);\n+        String accessToken = httpServletRequest.getHeader(AppConstants.ACCESS_TOKEN);\n+        String clientToken = httpServletRequest.getHeader(AppConstants.CLIENT_TOKEN);\n         Integer value = null;\n+        boolean isValid = false;\n         boolean isInterceptorURL = false;\n-        boolean isInvalidURL = false;\n-        ApplicationPropertyConfiguration applicationConfiguratation =\n+        boolean isServerApiUrl = false;\n+        ApplicationPropertyConfiguration applicationConfiguration =\n             BeanUtil.getBean(ApplicationPropertyConfiguration.class);\n-        String interceptorURL = applicationConfiguratation.getInterceptorUrls();\n+        String interceptorURL = applicationConfiguration.getInterceptorUrls();\n+        String serverApiUrls = applicationConfiguration.getServerApiUrls();\n         String uri = ((HttpServletRequest) request).getRequestURI();\n         String[] list = interceptorURL.split(\",\");\n         for (int i = 0; i < list.length; i++) {\n-          logger.info(list[i]);\n           if (uri.endsWith(list[i].trim())) {\n             isInterceptorURL = true;\n+            break;\n+          }\n+        }\n+        if (!isInterceptorURL) {\n+          String[] listServerApiUrls = serverApiUrls.split(\",\");\n+          for (int i = 0; i < listServerApiUrls.length; i++) {\n+            if (uri.endsWith(listServerApiUrls[i].trim())) {\n+              isServerApiUrl = true;\n+              break;\n+            }\n           }\n         }\n \n         if (isInterceptorURL) {\n-          httpServletResponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n-          httpServletResponse.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n-          httpServletResponse.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n+          httpServletResponse.setHeader(AppConstants.ACCESS_CONTROL_ALLOW_ORIGIN, \"*\");\n+          httpServletResponse.setHeader(AppConstants.ACCESS_CONTROL_ALLOW_HEADERS, \"*\");\n           httpServletResponse.setHeader(\n-              \"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS, HEAD\");\n+              AppConstants.ACCESS_CONTROL_ALLOW_CREDENTIALS, AppConstants.TRUE_STR);\n+          httpServletResponse.setHeader(\n+              AppConstants.ACCESS_CONTROL_ALLOW_METHODS, AppConstants.HTTP_METHODS);\n           chain.doFilter(request, response);\n+\n+        } else if (isServerApiUrl) {\n+          String clientId = httpServletRequest.getHeader(AppConstants.CLIENT_ID);\n+          String clientSecret = httpServletRequest.getHeader(AppConstants.SECRET_KEY);\n+          CommonServiceImpl commonService = BeanUtil.getBean(CommonServiceImpl.class);\n+          boolean isAllowed = false;\n+          try {\n+            isAllowed = commonService.validateServerClientCredentials(clientId, clientSecret);\n+            if (isAllowed) {\n+              httpServletResponse.setHeader(AppConstants.ACCESS_CONTROL_ALLOW_ORIGIN, \"*\");\n+              httpServletResponse.setHeader(AppConstants.ACCESS_CONTROL_ALLOW_HEADERS, \"*\");\n+              httpServletResponse.setHeader(\n+                  AppConstants.ACCESS_CONTROL_ALLOW_CREDENTIALS, AppConstants.TRUE_STR);\n+\n+              httpServletResponse.setHeader(\n+                  AppConstants.ACCESS_CONTROL_ALLOW_METHODS, AppConstants.HTTP_METHODS);\n+              chain.doFilter(request, response);\n+            } else {\n+              if (response instanceof HttpServletResponse) {\n+                httpServletResponse.setHeader(AppConstants.ACCESS_CONTROL_ALLOW_ORIGIN, \"*\");\n+                httpServletResponse.setHeader(AppConstants.ACCESS_CONTROL_ALLOW_HEADERS, \"*\");\n+                httpServletResponse.setHeader(\n+                    AppConstants.ACCESS_CONTROL_ALLOW_CREDENTIALS, AppConstants.TRUE_STR);\n+                httpServletResponse.setHeader(\n+                    AppConstants.ACCESS_CONTROL_ALLOW_METHODS, AppConstants.HTTP_METHODS);\n+                httpServletResponse.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n+\n+                httpServletResponse.sendError(\n+                    HttpServletResponse.SC_UNAUTHORIZED, ErrorCode.EC_718.errorMessage());\n+              }\n+            }\n+          } catch (UnAuthorizedRequestException e) {\n+            httpServletResponse.setHeader(AppConstants.ACCESS_CONTROL_ALLOW_ORIGIN, \"*\");\n+            httpServletResponse.setHeader(AppConstants.ACCESS_CONTROL_ALLOW_HEADERS, \"*\");\n+            httpServletResponse.setHeader(\n+                AppConstants.ACCESS_CONTROL_ALLOW_CREDENTIALS, AppConstants.TRUE_STR);\n+            httpServletResponse.setHeader(\n+                AppConstants.ACCESS_CONTROL_ALLOW_METHODS, AppConstants.HTTP_METHODS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxMjA0MQ==", "bodyText": "Fixed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402412041", "createdAt": "2020-04-02T15:38:54Z", "author": {"login": "aswinijena100"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/AuthenticationFilter.java", "diffHunk": "@@ -41,70 +43,182 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha\n     HttpServletRequest httpServletRequest = (HttpServletRequest) request;\n     HttpServletResponse httpServletResponse = (HttpServletResponse) response;\n     if (request instanceof HttpServletRequest) {\n-      if (!\"OPTIONS\".equalsIgnoreCase(httpServletRequest.getMethod())) {\n-        String userId = httpServletRequest.getHeader(\"userId\");\n-        String accessToken = httpServletRequest.getHeader(\"accessToken\");\n-        String clientToken = httpServletRequest.getHeader(\"clientToken\");\n-\n+      if (!AppConstants.OPTIONS_METHOD.equalsIgnoreCase(httpServletRequest.getMethod())) {\n+        String userId = httpServletRequest.getHeader(AppConstants.KEY_USERID);\n+        String accessToken = httpServletRequest.getHeader(AppConstants.ACCESS_TOKEN);\n+        String clientToken = httpServletRequest.getHeader(AppConstants.CLIENT_TOKEN);\n         Integer value = null;\n+        boolean isValid = false;\n         boolean isInterceptorURL = false;\n-        boolean isInvalidURL = false;\n-        ApplicationPropertyConfiguration applicationConfiguratation =\n+        boolean isServerApiUrl = false;\n+        ApplicationPropertyConfiguration applicationConfiguration =\n             BeanUtil.getBean(ApplicationPropertyConfiguration.class);\n-        String interceptorURL = applicationConfiguratation.getInterceptorUrls();\n+        String interceptorURL = applicationConfiguration.getInterceptorUrls();\n+        String serverApiUrls = applicationConfiguration.getServerApiUrls();\n         String uri = ((HttpServletRequest) request).getRequestURI();\n         String[] list = interceptorURL.split(\",\");\n         for (int i = 0; i < list.length; i++) {\n-          logger.info(list[i]);\n           if (uri.endsWith(list[i].trim())) {\n             isInterceptorURL = true;\n+            break;\n+          }\n+        }\n+        if (!isInterceptorURL) {\n+          String[] listServerApiUrls = serverApiUrls.split(\",\");\n+          for (int i = 0; i < listServerApiUrls.length; i++) {\n+            if (uri.endsWith(listServerApiUrls[i].trim())) {\n+              isServerApiUrl = true;\n+              break;\n+            }\n           }\n         }\n \n         if (isInterceptorURL) {\n-          httpServletResponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n-          httpServletResponse.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n-          httpServletResponse.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n+          httpServletResponse.setHeader(AppConstants.ACCESS_CONTROL_ALLOW_ORIGIN, \"*\");\n+          httpServletResponse.setHeader(AppConstants.ACCESS_CONTROL_ALLOW_HEADERS, \"*\");\n           httpServletResponse.setHeader(\n-              \"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS, HEAD\");\n+              AppConstants.ACCESS_CONTROL_ALLOW_CREDENTIALS, AppConstants.TRUE_STR);\n+          httpServletResponse.setHeader(\n+              AppConstants.ACCESS_CONTROL_ALLOW_METHODS, AppConstants.HTTP_METHODS);\n           chain.doFilter(request, response);\n+\n+        } else if (isServerApiUrl) {\n+          String clientId = httpServletRequest.getHeader(AppConstants.CLIENT_ID);\n+          String clientSecret = httpServletRequest.getHeader(AppConstants.SECRET_KEY);\n+          CommonServiceImpl commonService = BeanUtil.getBean(CommonServiceImpl.class);\n+          boolean isAllowed = false;\n+          try {\n+            isAllowed = commonService.validateServerClientCredentials(clientId, clientSecret);\n+            if (isAllowed) {\n+              httpServletResponse.setHeader(AppConstants.ACCESS_CONTROL_ALLOW_ORIGIN, \"*\");\n+              httpServletResponse.setHeader(AppConstants.ACCESS_CONTROL_ALLOW_HEADERS, \"*\");\n+              httpServletResponse.setHeader(\n+                  AppConstants.ACCESS_CONTROL_ALLOW_CREDENTIALS, AppConstants.TRUE_STR);\n+\n+              httpServletResponse.setHeader(\n+                  AppConstants.ACCESS_CONTROL_ALLOW_METHODS, AppConstants.HTTP_METHODS);\n+              chain.doFilter(request, response);\n+            } else {\n+              if (response instanceof HttpServletResponse) {\n+                httpServletResponse.setHeader(AppConstants.ACCESS_CONTROL_ALLOW_ORIGIN, \"*\");\n+                httpServletResponse.setHeader(AppConstants.ACCESS_CONTROL_ALLOW_HEADERS, \"*\");\n+                httpServletResponse.setHeader(\n+                    AppConstants.ACCESS_CONTROL_ALLOW_CREDENTIALS, AppConstants.TRUE_STR);\n+                httpServletResponse.setHeader(\n+                    AppConstants.ACCESS_CONTROL_ALLOW_METHODS, AppConstants.HTTP_METHODS);\n+                httpServletResponse.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n+\n+                httpServletResponse.sendError(\n+                    HttpServletResponse.SC_UNAUTHORIZED, ErrorCode.EC_718.errorMessage());\n+              }\n+            }\n+          } catch (UnAuthorizedRequestException e) {\n+            httpServletResponse.setHeader(AppConstants.ACCESS_CONTROL_ALLOW_ORIGIN, \"*\");\n+            httpServletResponse.setHeader(AppConstants.ACCESS_CONTROL_ALLOW_HEADERS, \"*\");\n+            httpServletResponse.setHeader(\n+                AppConstants.ACCESS_CONTROL_ALLOW_CREDENTIALS, AppConstants.TRUE_STR);\n+            httpServletResponse.setHeader(\n+                AppConstants.ACCESS_CONTROL_ALLOW_METHODS, AppConstants.HTTP_METHODS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxMjAwNQ=="}, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzA4MjQ1OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/UserManagementUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODo0MzoxNVrOF93RdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTozOTowNVrOF_xSlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxMzA0NQ==", "bodyText": "should be an error", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400413045", "createdAt": "2020-03-30T18:43:15Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/UserManagementUtil.java", "diffHunk": "@@ -419,4 +425,67 @@ public static Date getCurrentUtilDateTime() {\n     }\n     return date;\n   }\n+\n+  public static String getHashedValue(String input) {\n+    String generatedHash = null;\n+    try {\n+      MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n+      byte[] bytes = md.digest(input.getBytes());\n+      StringBuilder sb = new StringBuilder();\n+      for (int i = 0; i < bytes.length; i++) {\n+        sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));\n+      }\n+      generatedHash = sb.toString();\n+    } catch (NoSuchAlgorithmException e) {\n+      logger.info(\"No Such Algorithm Exception: \", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxMjE4MA==", "bodyText": "fixed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402412180", "createdAt": "2020-04-02T15:39:05Z", "author": {"login": "aswinijena100"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/UserManagementUtil.java", "diffHunk": "@@ -419,4 +425,67 @@ public static Date getCurrentUtilDateTime() {\n     }\n     return date;\n   }\n+\n+  public static String getHashedValue(String input) {\n+    String generatedHash = null;\n+    try {\n+      MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n+      byte[] bytes = md.digest(input.getBytes());\n+      StringBuilder sb = new StringBuilder();\n+      for (int i = 0; i < bytes.length; i++) {\n+        sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));\n+      }\n+      generatedHash = sb.toString();\n+    } catch (NoSuchAlgorithmException e) {\n+      logger.info(\"No Such Algorithm Exception: \", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxMzA0NQ=="}, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzA4NjQ2OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/UserManagementUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODo0NDoxN1rOF93UDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTozOToxNlrOF_xTDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxMzcxMQ==", "bodyText": "nit: typo withdrawParticipantFromStudy", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400413711", "createdAt": "2020-03-30T18:44:17Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/UserManagementUtil.java", "diffHunk": "@@ -419,4 +425,67 @@ public static Date getCurrentUtilDateTime() {\n     }\n     return date;\n   }\n+\n+  public static String getHashedValue(String input) {\n+    String generatedHash = null;\n+    try {\n+      MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n+      byte[] bytes = md.digest(input.getBytes());\n+      StringBuilder sb = new StringBuilder();\n+      for (int i = 0; i < bytes.length; i++) {\n+        sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));\n+      }\n+      generatedHash = sb.toString();\n+    } catch (NoSuchAlgorithmException e) {\n+      logger.info(\"No Such Algorithm Exception: \", e);\n+    }\n+    return generatedHash;\n+  }\n+\n+  public String withDrawParticipantFromStudy(String participantId, String studyId, boolean delete)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxMjMwMw==", "bodyText": "Fixed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402412303", "createdAt": "2020-04-02T15:39:16Z", "author": {"login": "aswinijena100"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/UserManagementUtil.java", "diffHunk": "@@ -419,4 +425,67 @@ public static Date getCurrentUtilDateTime() {\n     }\n     return date;\n   }\n+\n+  public static String getHashedValue(String input) {\n+    String generatedHash = null;\n+    try {\n+      MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n+      byte[] bytes = md.digest(input.getBytes());\n+      StringBuilder sb = new StringBuilder();\n+      for (int i = 0; i < bytes.length; i++) {\n+        sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));\n+      }\n+      generatedHash = sb.toString();\n+    } catch (NoSuchAlgorithmException e) {\n+      logger.info(\"No Such Algorithm Exception: \", e);\n+    }\n+    return generatedHash;\n+  }\n+\n+  public String withDrawParticipantFromStudy(String participantId, String studyId, boolean delete)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxMzcxMQ=="}, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzA4ODQ4OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/UserManagementUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODo0NDo1MlrOF93VVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTozOToyOVrOF_xTpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxNDAzNg==", "bodyText": "please log this as an error as well.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r400414036", "createdAt": "2020-03-30T18:44:52Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/UserManagementUtil.java", "diffHunk": "@@ -419,4 +425,67 @@ public static Date getCurrentUtilDateTime() {\n     }\n     return date;\n   }\n+\n+  public static String getHashedValue(String input) {\n+    String generatedHash = null;\n+    try {\n+      MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n+      byte[] bytes = md.digest(input.getBytes());\n+      StringBuilder sb = new StringBuilder();\n+      for (int i = 0; i < bytes.length; i++) {\n+        sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));\n+      }\n+      generatedHash = sb.toString();\n+    } catch (NoSuchAlgorithmException e) {\n+      logger.info(\"No Such Algorithm Exception: \", e);\n+    }\n+    return generatedHash;\n+  }\n+\n+  public String withDrawParticipantFromStudy(String participantId, String studyId, boolean delete)\n+      throws UnAuthorizedRequestException, InvalidRequestException, SystemException {\n+    logger.info(\"EnrollmentManagementUtil withDrawParticipantFromStudy() - starts \");\n+    HttpHeaders headers = null;\n+    HttpEntity<WithdrawFromStudyBodyProvider> request = null;\n+\n+    String message = MyStudiesUserRegUtil.ErrorCodes.FAILURE.getValue();\n+    try {\n+      headers = new HttpHeaders();\n+      headers.setContentType(MediaType.APPLICATION_JSON);\n+      headers.set(AppConstants.APPLICATION_ID, null);\n+      headers.set(AppConstants.CLIENT_ID, appConfig.getClientId());\n+      headers.set(AppConstants.SECRET_KEY, getHashedValue(appConfig.getSecretKey()));\n+\n+      request = new HttpEntity<>(null, headers);\n+\n+      String url =\n+          appConfig.getWithdrawStudyUrl()\n+              + \"?studyId=\"\n+              + studyId\n+              + \"&participantId=\"\n+              + participantId\n+              + \"&deleteResponses=\"\n+              + String.valueOf(delete);\n+\n+      ResponseEntity<?> response = restTemplate.postForEntity(url, request, String.class);\n+\n+      if (response.getStatusCode() == HttpStatus.OK) {\n+        message = MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue();\n+      }\n+\n+    } catch (RestClientResponseException e) {\n+      message = MyStudiesUserRegUtil.ErrorCodes.FAILURE.getValue();\n+      if (e.getRawStatusCode() == 401) {\n+        logger.error(\"Invalid client Id or client secret. Client id is: \" + AppConstants.CLIENT_ID);\n+        throw new UnAuthorizedRequestException();\n+      } else if (e.getRawStatusCode() == 400) {\n+        logger.error(\"Client verification ended with Bad Request\");\n+        throw new InvalidRequestException();\n+      } else {\n+        throw new SystemException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxMjQ1NA==", "bodyText": "Fixed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402412454", "createdAt": "2020-04-02T15:39:29Z", "author": {"login": "aswinijena100"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/UserManagementUtil.java", "diffHunk": "@@ -419,4 +425,67 @@ public static Date getCurrentUtilDateTime() {\n     }\n     return date;\n   }\n+\n+  public static String getHashedValue(String input) {\n+    String generatedHash = null;\n+    try {\n+      MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n+      byte[] bytes = md.digest(input.getBytes());\n+      StringBuilder sb = new StringBuilder();\n+      for (int i = 0; i < bytes.length; i++) {\n+        sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));\n+      }\n+      generatedHash = sb.toString();\n+    } catch (NoSuchAlgorithmException e) {\n+      logger.info(\"No Such Algorithm Exception: \", e);\n+    }\n+    return generatedHash;\n+  }\n+\n+  public String withDrawParticipantFromStudy(String participantId, String studyId, boolean delete)\n+      throws UnAuthorizedRequestException, InvalidRequestException, SystemException {\n+    logger.info(\"EnrollmentManagementUtil withDrawParticipantFromStudy() - starts \");\n+    HttpHeaders headers = null;\n+    HttpEntity<WithdrawFromStudyBodyProvider> request = null;\n+\n+    String message = MyStudiesUserRegUtil.ErrorCodes.FAILURE.getValue();\n+    try {\n+      headers = new HttpHeaders();\n+      headers.setContentType(MediaType.APPLICATION_JSON);\n+      headers.set(AppConstants.APPLICATION_ID, null);\n+      headers.set(AppConstants.CLIENT_ID, appConfig.getClientId());\n+      headers.set(AppConstants.SECRET_KEY, getHashedValue(appConfig.getSecretKey()));\n+\n+      request = new HttpEntity<>(null, headers);\n+\n+      String url =\n+          appConfig.getWithdrawStudyUrl()\n+              + \"?studyId=\"\n+              + studyId\n+              + \"&participantId=\"\n+              + participantId\n+              + \"&deleteResponses=\"\n+              + String.valueOf(delete);\n+\n+      ResponseEntity<?> response = restTemplate.postForEntity(url, request, String.class);\n+\n+      if (response.getStatusCode() == HttpStatus.OK) {\n+        message = MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue();\n+      }\n+\n+    } catch (RestClientResponseException e) {\n+      message = MyStudiesUserRegUtil.ErrorCodes.FAILURE.getValue();\n+      if (e.getRawStatusCode() == 401) {\n+        logger.error(\"Invalid client Id or client secret. Client id is: \" + AppConstants.CLIENT_ID);\n+        throw new UnAuthorizedRequestException();\n+      } else if (e.getRawStatusCode() == 400) {\n+        logger.error(\"Client verification ended with Bad Request\");\n+        throw new InvalidRequestException();\n+      } else {\n+        throw new SystemException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxNDAzNg=="}, "originalCommit": {"oid": "0d8f011cb950c18117c78f750bd7ec7e19918a73"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjE4NjExOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserConsentManagementServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzoyODo0MFrOF_1xTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzoyODo0MFrOF_1xTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ4NTU4Mg==", "bodyText": "please remove", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402485582", "createdAt": "2020-04-02T17:28:40Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserConsentManagementServiceImpl.java", "diffHunk": "@@ -107,7 +108,11 @@ public ConsentStudyResponseBean getStudyConsentDetails(\n \n           ByteArrayOutputStream baos = new ByteArrayOutputStream();\n           cloudStorageService.downloadFileTo(path, baos);\n-          consentStudyResponseBean.getConsent().setContent(new String(baos.toByteArray()));\n+          //          consentStudyResponseBean.getConsent().setContent(new\n+          // String(baos.toByteArray()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fda9008fe5ef2125034871af543422ab6ed6e8ae"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjE5MTY0OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/DeactivateAcctBean.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzoyOTo1MVrOF_10eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzoyOTo1MVrOF_10eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ4NjM5Mw==", "bodyText": "please remove", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402486393", "createdAt": "2020-04-02T17:29:51Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/DeactivateAcctBean.java", "diffHunk": "@@ -9,11 +9,13 @@\n package com.google.cloud.healthcare.fdamystudies.beans;\n \n import java.util.List;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyReqBean;\n import lombok.Getter;\n import lombok.Setter;\n \n @Setter\n @Getter\n public class DeactivateAcctBean {\n-  private List<String> deleteData;\n+  //  private List<String> deleteData;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fda9008fe5ef2125034871af543422ab6ed6e8ae"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjE5MzA1OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/WithdrawFromStudyBean.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzozMDowNlrOF_11Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzozMDowNlrOF_11Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ4NjYxNA==", "bodyText": "same here, please remove commented code", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402486614", "createdAt": "2020-04-02T17:30:06Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/WithdrawFromStudyBean.java", "diffHunk": "@@ -16,5 +17,7 @@\n \n   private String participantId;\n   private String studyId;\n-  private boolean delete;\n+  //  private boolean delete;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fda9008fe5ef2125034871af543422ab6ed6e8ae"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjIwNDUxOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/StudiesDaoImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzozMjowNVrOF_18Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzozMjowNVrOF_18Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ4ODQxNQ==", "bodyText": "please remove", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402488415", "createdAt": "2020-04-02T17:32:05Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/StudiesDaoImpl.java", "diffHunk": "@@ -211,4 +215,61 @@ private void decommisionSiteFromStudy(Session session, Integer studyId) {\n     }\n     logger.info(\"StudiesDaoImpl - decommisionSiteFromStudy() : ends\");\n   }\n+\n+  @Override\n+  public String withdrawFromStudy(String participantId, String studyId, boolean delete) {\n+    logger.info(\"StudiesDaoImpl withdrawFromStudy() - Ends \");\n+    String message = MyStudiesUserRegUtil.ErrorCodes.FAILURE.getValue();\n+    Transaction transaction = null;\n+    CriteriaBuilder criteriaBuilder = null;\n+\n+    CriteriaQuery<StudyInfoBO> studiesBoCriteria = null;\n+    Root<StudyInfoBO> studiesBoRoot = null;\n+    Predicate[] studiesBoPredicates = new Predicate[1];\n+    List<StudyInfoBO> studiesBoList = null;\n+    StudyInfoBO studyInfo = null;\n+\n+    CriteriaUpdate<ParticipantStudiesBO> criteriaUpdate = null;\n+    Root<ParticipantStudiesBO> participantStudiesBoRoot = null;\n+    List<Predicate> predicates = new ArrayList<>();\n+    int isUpdated = 0;\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+\n+      transaction = session.beginTransaction();\n+      criteriaBuilder = session.getCriteriaBuilder();\n+\n+      studiesBoCriteria = criteriaBuilder.createQuery(StudyInfoBO.class);\n+      studiesBoRoot = studiesBoCriteria.from(StudyInfoBO.class);\n+      studiesBoPredicates[0] = criteriaBuilder.equal(studiesBoRoot.get(\"customId\"), studyId);\n+      studiesBoCriteria.select(studiesBoRoot).where(studiesBoPredicates);\n+      studiesBoList = session.createQuery(studiesBoCriteria).getResultList();\n+      if (!studiesBoList.isEmpty()) {\n+        studyInfo = studiesBoList.get(0);\n+        criteriaUpdate = criteriaBuilder.createCriteriaUpdate(ParticipantStudiesBO.class);\n+        participantStudiesBoRoot = criteriaUpdate.from(ParticipantStudiesBO.class);\n+        criteriaUpdate.set(\"status\", AppConstants.WITHDRAWN);\n+        //        criteriaUpdate.set(\"participantId\", \"NULL\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fda9008fe5ef2125034871af543422ab6ed6e8ae"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjIwODg0OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/UserProfileManagementDao.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzozMjo0OFrOF_1_Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzozMjo0OFrOF_1_Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ4OTA5MQ==", "bodyText": "please remove", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/37#discussion_r402489091", "createdAt": "2020-04-02T17:32:48Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/UserProfileManagementDao.java", "diffHunk": "@@ -36,6 +36,8 @@ public UserDetailsBO getParticipantDetailsByEmail(\n \n   public UserDetailsBO getParticipantDetails(String id);\n \n-  public boolean deActivateAcct(\n-      String userId, DeactivateAcctBean deactivateBean, Integer userDetailsId);\n+  /*  public boolean deActivateAcct(\n+  String userId, DeactivateAcctBean deactivateBean, Integer userDetailsId);*/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fda9008fe5ef2125034871af543422ab6ed6e8ae"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1233, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}