{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NDk5NjM0", "number": 192, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNzowODoyOFrOD0VrUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNzowODoyOFrOD0VrUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MjA3Njk3OnYy", "diffSide": "RIGHT", "path": "iOS/HPHC/HPHC/Controllers/GatewayUI/StudyUI/StudyFilterViewController.swift", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNzowODoyOFrOGJPAPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjoxMTo1N1rOGJlChA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMzNjE5MQ==", "bodyText": "you can just assign to the boolean value", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/192#discussion_r412336191", "createdAt": "2020-04-21T17:08:28Z", "author": {"login": "nikklassen"}, "path": "iOS/HPHC/HPHC/Controllers/GatewayUI/StudyUI/StudyFilterViewController.swift", "diffHunk": "@@ -235,62 +245,56 @@ extension AppDelegate {\n   /// setter method to set the default filter options if none are selected.\n   func setDefaultFilters(previousCollectionData: [[String]]) {\n \n-    var filterData: NSMutableArray?\n-    var resource = \"AnanomousFilterData\"\n-\n-    if User.currentUser.userType == .FDAUser {\n-      resource = \"FilterData\"\n-    }\n+    let resource = (User.currentUser.userType == .FDAUser) ? \"FilterData\" : \"AnonymousFilterData\"\n \n-    let plistPath = Bundle.main.path(forResource: resource, ofType: \".plist\", inDirectory: nil)\n-    filterData = NSMutableArray.init(contentsOfFile: plistPath!)!\n+    let plistPath = Bundle.main.path(forResource: resource, ofType: \".plist\", inDirectory: nil) ?? \"\"\n+    guard let filterData = NSMutableArray.init(contentsOfFile: plistPath) else { return }\n \n     StudyFilterHandler.instance.filterOptions = []\n     var filterOptionsList: [FilterOptions] = []\n-    var i = 0\n \n-    for options in filterData! {\n-      let values = ((options as? [String: Any])![\"studyData\"] as? [[String: Any]])!\n-      let filterOptions = FilterOptions()\n-      filterOptions.title = ((options as? [String: Any])![\"headerText\"] as? String)!\n+    for (index, options) in filterData.enumerated() {\n+\n+      guard let dataDict = options as? JSONDictionary,\n+        let valuesDict = dataDict[\"studyData\"] as? [JSONDictionary]\n+      else { continue }\n+\n+      let headerTitle = dataDict[\"headerText\"] as? String ?? \"\"\n+      let type = dataDict[\"type\"] as? String ?? \"\"\n+\n+      guard let filterType = FilterType(rawValue: type) else { continue }\n+\n+      let filterOptions = FilterOptions(title: headerTitle, type: filterType)\n \n       var selectedValues: [String] = []\n       if previousCollectionData.count > 0 {\n-        selectedValues = previousCollectionData[i]\n+        selectedValues = previousCollectionData[index]\n       }\n \n       var filterValues: [FilterValues] = []\n-      for value in values {\n-\n-        var isContained = false\n+      for value in valuesDict {\n \n         let filterValue = FilterValues()\n-        filterValue.title = (value[\"name\"] as? String)!\n-\n-        if selectedValues.count > 0 {\n-          isContained = selectedValues.contains((value[\"name\"] as? String)!)\n-        }\n+        let name = value[\"name\"] as? String ?? \"\"\n+        filterValue.title = name\n+        let isContained = selectedValues.contains(name) ? true : false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "250fd3ad6e2440cd243cc69ab8cf712b6d5e1e9d"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY5NTk5OQ==", "bodyText": "Thanks, I see that the operator isn't required.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/192#discussion_r412695999", "createdAt": "2020-04-22T06:09:11Z", "author": {"login": "tushar-boston"}, "path": "iOS/HPHC/HPHC/Controllers/GatewayUI/StudyUI/StudyFilterViewController.swift", "diffHunk": "@@ -235,62 +245,56 @@ extension AppDelegate {\n   /// setter method to set the default filter options if none are selected.\n   func setDefaultFilters(previousCollectionData: [[String]]) {\n \n-    var filterData: NSMutableArray?\n-    var resource = \"AnanomousFilterData\"\n-\n-    if User.currentUser.userType == .FDAUser {\n-      resource = \"FilterData\"\n-    }\n+    let resource = (User.currentUser.userType == .FDAUser) ? \"FilterData\" : \"AnonymousFilterData\"\n \n-    let plistPath = Bundle.main.path(forResource: resource, ofType: \".plist\", inDirectory: nil)\n-    filterData = NSMutableArray.init(contentsOfFile: plistPath!)!\n+    let plistPath = Bundle.main.path(forResource: resource, ofType: \".plist\", inDirectory: nil) ?? \"\"\n+    guard let filterData = NSMutableArray.init(contentsOfFile: plistPath) else { return }\n \n     StudyFilterHandler.instance.filterOptions = []\n     var filterOptionsList: [FilterOptions] = []\n-    var i = 0\n \n-    for options in filterData! {\n-      let values = ((options as? [String: Any])![\"studyData\"] as? [[String: Any]])!\n-      let filterOptions = FilterOptions()\n-      filterOptions.title = ((options as? [String: Any])![\"headerText\"] as? String)!\n+    for (index, options) in filterData.enumerated() {\n+\n+      guard let dataDict = options as? JSONDictionary,\n+        let valuesDict = dataDict[\"studyData\"] as? [JSONDictionary]\n+      else { continue }\n+\n+      let headerTitle = dataDict[\"headerText\"] as? String ?? \"\"\n+      let type = dataDict[\"type\"] as? String ?? \"\"\n+\n+      guard let filterType = FilterType(rawValue: type) else { continue }\n+\n+      let filterOptions = FilterOptions(title: headerTitle, type: filterType)\n \n       var selectedValues: [String] = []\n       if previousCollectionData.count > 0 {\n-        selectedValues = previousCollectionData[i]\n+        selectedValues = previousCollectionData[index]\n       }\n \n       var filterValues: [FilterValues] = []\n-      for value in values {\n-\n-        var isContained = false\n+      for value in valuesDict {\n \n         let filterValue = FilterValues()\n-        filterValue.title = (value[\"name\"] as? String)!\n-\n-        if selectedValues.count > 0 {\n-          isContained = selectedValues.contains((value[\"name\"] as? String)!)\n-        }\n+        let name = value[\"name\"] as? String ?? \"\"\n+        filterValue.title = name\n+        let isContained = selectedValues.contains(name) ? true : false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMzNjE5MQ=="}, "originalCommit": {"oid": "250fd3ad6e2440cd243cc69ab8cf712b6d5e1e9d"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY5NzIyMA==", "bodyText": "I've fixed this in new PR as already made a couple of more commits in this same branch.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/192#discussion_r412697220", "createdAt": "2020-04-22T06:11:57Z", "author": {"login": "tushar-boston"}, "path": "iOS/HPHC/HPHC/Controllers/GatewayUI/StudyUI/StudyFilterViewController.swift", "diffHunk": "@@ -235,62 +245,56 @@ extension AppDelegate {\n   /// setter method to set the default filter options if none are selected.\n   func setDefaultFilters(previousCollectionData: [[String]]) {\n \n-    var filterData: NSMutableArray?\n-    var resource = \"AnanomousFilterData\"\n-\n-    if User.currentUser.userType == .FDAUser {\n-      resource = \"FilterData\"\n-    }\n+    let resource = (User.currentUser.userType == .FDAUser) ? \"FilterData\" : \"AnonymousFilterData\"\n \n-    let plistPath = Bundle.main.path(forResource: resource, ofType: \".plist\", inDirectory: nil)\n-    filterData = NSMutableArray.init(contentsOfFile: plistPath!)!\n+    let plistPath = Bundle.main.path(forResource: resource, ofType: \".plist\", inDirectory: nil) ?? \"\"\n+    guard let filterData = NSMutableArray.init(contentsOfFile: plistPath) else { return }\n \n     StudyFilterHandler.instance.filterOptions = []\n     var filterOptionsList: [FilterOptions] = []\n-    var i = 0\n \n-    for options in filterData! {\n-      let values = ((options as? [String: Any])![\"studyData\"] as? [[String: Any]])!\n-      let filterOptions = FilterOptions()\n-      filterOptions.title = ((options as? [String: Any])![\"headerText\"] as? String)!\n+    for (index, options) in filterData.enumerated() {\n+\n+      guard let dataDict = options as? JSONDictionary,\n+        let valuesDict = dataDict[\"studyData\"] as? [JSONDictionary]\n+      else { continue }\n+\n+      let headerTitle = dataDict[\"headerText\"] as? String ?? \"\"\n+      let type = dataDict[\"type\"] as? String ?? \"\"\n+\n+      guard let filterType = FilterType(rawValue: type) else { continue }\n+\n+      let filterOptions = FilterOptions(title: headerTitle, type: filterType)\n \n       var selectedValues: [String] = []\n       if previousCollectionData.count > 0 {\n-        selectedValues = previousCollectionData[i]\n+        selectedValues = previousCollectionData[index]\n       }\n \n       var filterValues: [FilterValues] = []\n-      for value in values {\n-\n-        var isContained = false\n+      for value in valuesDict {\n \n         let filterValue = FilterValues()\n-        filterValue.title = (value[\"name\"] as? String)!\n-\n-        if selectedValues.count > 0 {\n-          isContained = selectedValues.contains((value[\"name\"] as? String)!)\n-        }\n+        let name = value[\"name\"] as? String ?? \"\"\n+        filterValue.title = name\n+        let isContained = selectedValues.contains(name) ? true : false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMzNjE5MQ=="}, "originalCommit": {"oid": "250fd3ad6e2440cd243cc69ab8cf712b6d5e1e9d"}, "originalPosition": 160}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1168, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}