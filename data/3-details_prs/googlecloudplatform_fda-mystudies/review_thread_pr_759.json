{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4Nzc5NTA1", "number": 759, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMzozOTozM1rOEZDMVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDowOTozNVrOEZ_txg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzAyMTY0OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/participant-details/participant-details.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMzozOTozM1rOHBpKyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMTowNDoxNFrOHDCUOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ4NTEyOA==", "bodyText": "You already have a bunch of these types declared in participant.ts. Can you move these types to somewhere they can be shared? Having 1 file per type is fine", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/759#discussion_r471485128", "createdAt": "2020-08-17T13:39:33Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/participant-details/participant-details.ts", "diffHunk": "@@ -0,0 +1,82 @@\n+import {ApiResponse} from 'src/app/entity/api.response.model';\n+\n+export interface StatusUpdate {\n+  ids: string[];\n+  status: string;\n+}\n+\n+export interface InviteSend {\n+  ids: string[];\n+}\n+\n+export interface ConsentFile extends ApiResponse {\n+  version: string;\n+  type: string;\n+  content: string;\n+}\n+\n+export interface UpdateInviteResponse extends ApiResponse {\n+  invitedParticipantIds: string[];\n+  failedParticipantIds: string[];\n+}\n+\n+export interface Enrollment {\n+  participantId: string;\n+  withdrawalDate: string;\n+  enrollmentStatus: string;\n+  enrollmentDate: string;\n+}\n+\n+export interface ConsentHistory {\n+  id: string;\n+  consentVersion: string;\n+  consentedDate: string;\n+  consentDocumentPath: string;\n+  dataSharingPermissions: string;\n+}\n+\n+export interface Site {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99140c62eafcfc3cde5f682bcea80fb70099739b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk0NTcyMw==", "bodyText": "Updated", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/759#discussion_r472945723", "createdAt": "2020-08-19T11:04:14Z", "author": {"login": "rohithd-btc"}, "path": "UR-web-app/src/app/site-coordinator/participant-details/participant-details.ts", "diffHunk": "@@ -0,0 +1,82 @@\n+import {ApiResponse} from 'src/app/entity/api.response.model';\n+\n+export interface StatusUpdate {\n+  ids: string[];\n+  status: string;\n+}\n+\n+export interface InviteSend {\n+  ids: string[];\n+}\n+\n+export interface ConsentFile extends ApiResponse {\n+  version: string;\n+  type: string;\n+  content: string;\n+}\n+\n+export interface UpdateInviteResponse extends ApiResponse {\n+  invitedParticipantIds: string[];\n+  failedParticipantIds: string[];\n+}\n+\n+export interface Enrollment {\n+  participantId: string;\n+  withdrawalDate: string;\n+  enrollmentStatus: string;\n+  enrollmentDate: string;\n+}\n+\n+export interface ConsentHistory {\n+  id: string;\n+  consentVersion: string;\n+  consentedDate: string;\n+  consentDocumentPath: string;\n+  dataSharingPermissions: string;\n+}\n+\n+export interface Site {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ4NTEyOA=="}, "originalCommit": {"oid": "99140c62eafcfc3cde5f682bcea80fb70099739b"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzAyNjM5OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/entity/mock-participant-data.ts", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMzo0MDozN1rOHBpNrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDoxMzowN1rOHDJW1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ4NTg3MA==", "bodyText": "TypeDeclared is not an appropriate name. Why not just import them as\nimport { Participant, StatusUpdate, ... } from '../site-coordinator/participant-details/participant-details'\nThis should've been identified in internal code review.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/759#discussion_r471485870", "createdAt": "2020-08-17T13:40:37Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/entity/mock-participant-data.ts", "diffHunk": "@@ -0,0 +1,71 @@\n+import * as TypeDeclared from '../site-coordinator/participant-details/participant-details';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99140c62eafcfc3cde5f682bcea80fb70099739b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk0NTY2Mg==", "bodyText": "As previously received comment on that so i have change it.Now i have replaced it.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/759#discussion_r472945662", "createdAt": "2020-08-19T11:04:07Z", "author": {"login": "rohithd-btc"}, "path": "UR-web-app/src/app/entity/mock-participant-data.ts", "diffHunk": "@@ -0,0 +1,71 @@\n+import * as TypeDeclared from '../site-coordinator/participant-details/participant-details';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ4NTg3MA=="}, "originalCommit": {"oid": "99140c62eafcfc3cde5f682bcea80fb70099739b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA2MTA3Ng==", "bodyText": "Importing as * is fine, for only 4 types though it's not usually necessary, it's only if you are importing a large number of types. My bigger issue though was with calling it TypeDeclared. This name doesn't tell me anything about what you are importing, it's like calling it Something. I can't accept code with variable names like this, see also my comment on buttonText1.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/759#discussion_r473061076", "createdAt": "2020-08-19T14:13:07Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/entity/mock-participant-data.ts", "diffHunk": "@@ -0,0 +1,71 @@\n+import * as TypeDeclared from '../site-coordinator/participant-details/participant-details';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ4NTg3MA=="}, "originalCommit": {"oid": "99140c62eafcfc3cde5f682bcea80fb70099739b"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzA3NzM4OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/participant-details/participant-details.component.html", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMzo1Mjo0OVrOHBps3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMTowMjo1MlrOHDCRvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ5Mzg1NQ==", "bodyText": "Consider using ng-template to reuse markup (these buttons are the same as above).", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/759#discussion_r471493855", "createdAt": "2020-08-17T13:52:49Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/participant-details/participant-details.component.html", "diffHunk": "@@ -0,0 +1,261 @@\n+<ng-container *ngIf=\"participant$ | async as participant\">\n+  <section\n+    *ngIf=\"participant.participantDetail\"\n+    class=\"subheader p-none pl-none\"\n+  >\n+    <div class=\"max__w__1280 m-none\">\n+      <div class=\"flex__justify__space-between\">\n+        <div\n+          class=\"subheader__title flex__justify__space-between align__items__baseline\"\n+        >\n+          <div>\n+            <a routerLink=\"/coordinator/apps\" class=\"subheader__title\"></a>\n+            <img src=\"assets/svgs/back-arrow.svg\" alt=\"go back\" />\n+          </div>\n+          <div>\n+            <div class=\"mb-xs\">Participant Details</div>\n+            <div class=\"display-inline-flex overflow__auto\">\n+              <div class=\"pr-xlg\">\n+                <div class=\"banner__label\">\n+                  {{ participant.participantDetail.customLocationId }}\n+                </div>\n+                <div class=\"banner__text\">\n+                  {{ participant.participantDetail.locationName }}\n+                </div>\n+              </div>\n+              <div class=\"pr-xlg\">\n+                <div class=\"banner__label\">\n+                  {{ participant.participantDetail.customStudyId }}\n+                </div>\n+                <div class=\"banner__text\">\n+                  {{ participant.participantDetail.studyName }}\n+                </div>\n+              </div>\n+              <div>\n+                <div class=\"banner__label\">\n+                  {{ participant.participantDetail.customAppId }}\n+                </div>\n+                <div class=\"banner__text\">\n+                  {{ participant.participantDetail.appName }}\n+                </div>\n+              </div>\n+            </div>\n+          </div>\n+        </div>\n+        <section class=\"desk__view\">\n+          <div class=\"flex__justify__space-between\">\n+            <div\n+              class=\"mr-sm\"\n+              *ngIf=\"\n+                participant.participantDetail.onboardingStatus !==\n+                onBoardingStatus.Disabled\n+              \"\n+            >\n+              <button\n+                type=\"submit\"\n+                class=\"btn banner__primary__btn white__text flex__row__reverse pad__5__13 font14\"\n+                (click)=\"sendInvitation(participant.participantDetail.siteId)\"\n+              >\n+                {{\n+                  participant.participantDetail.onboardingStatus ===\n+                  onBoardingStatus.New\n+                    ? \"Send Invitation\"\n+                    : \"Resend Invitation\"\n+                }}\n+              </button>\n+            </div>\n+            <div>\n+              <button\n+                type=\"submit\"\n+                class=\"btn banner__default__btn flex__row__reverse pad__5__13 font14\"\n+                (click)=\"\n+                  toggleInvitation(\n+                    participant.participantDetail.siteId,\n+                    participant.participantDetail.onboardingStatus\n+                  )\n+                \"\n+              >\n+                {{\n+                  participant.participantDetail.onboardingStatus ===\n+                  onBoardingStatus.Disabled\n+                    ? \"Enable Invitation\"\n+                    : \"Disable Invitation\"\n+                }}\n+              </button>\n+            </div>\n+          </div>\n+        </section>\n+      </div>\n+    </div>\n+  </section>\n+\n+  <section class=\"subheader p-none pl-none mobile__view border-top__c4d1e6\">\n+    <div class=\"flex__ flex__justify__center\">\n+      <button", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99140c62eafcfc3cde5f682bcea80fb70099739b"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk0NTA4NA==", "bodyText": "Updated", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/759#discussion_r472945084", "createdAt": "2020-08-19T11:02:52Z", "author": {"login": "rohithd-btc"}, "path": "UR-web-app/src/app/site-coordinator/participant-details/participant-details.component.html", "diffHunk": "@@ -0,0 +1,261 @@\n+<ng-container *ngIf=\"participant$ | async as participant\">\n+  <section\n+    *ngIf=\"participant.participantDetail\"\n+    class=\"subheader p-none pl-none\"\n+  >\n+    <div class=\"max__w__1280 m-none\">\n+      <div class=\"flex__justify__space-between\">\n+        <div\n+          class=\"subheader__title flex__justify__space-between align__items__baseline\"\n+        >\n+          <div>\n+            <a routerLink=\"/coordinator/apps\" class=\"subheader__title\"></a>\n+            <img src=\"assets/svgs/back-arrow.svg\" alt=\"go back\" />\n+          </div>\n+          <div>\n+            <div class=\"mb-xs\">Participant Details</div>\n+            <div class=\"display-inline-flex overflow__auto\">\n+              <div class=\"pr-xlg\">\n+                <div class=\"banner__label\">\n+                  {{ participant.participantDetail.customLocationId }}\n+                </div>\n+                <div class=\"banner__text\">\n+                  {{ participant.participantDetail.locationName }}\n+                </div>\n+              </div>\n+              <div class=\"pr-xlg\">\n+                <div class=\"banner__label\">\n+                  {{ participant.participantDetail.customStudyId }}\n+                </div>\n+                <div class=\"banner__text\">\n+                  {{ participant.participantDetail.studyName }}\n+                </div>\n+              </div>\n+              <div>\n+                <div class=\"banner__label\">\n+                  {{ participant.participantDetail.customAppId }}\n+                </div>\n+                <div class=\"banner__text\">\n+                  {{ participant.participantDetail.appName }}\n+                </div>\n+              </div>\n+            </div>\n+          </div>\n+        </div>\n+        <section class=\"desk__view\">\n+          <div class=\"flex__justify__space-between\">\n+            <div\n+              class=\"mr-sm\"\n+              *ngIf=\"\n+                participant.participantDetail.onboardingStatus !==\n+                onBoardingStatus.Disabled\n+              \"\n+            >\n+              <button\n+                type=\"submit\"\n+                class=\"btn banner__primary__btn white__text flex__row__reverse pad__5__13 font14\"\n+                (click)=\"sendInvitation(participant.participantDetail.siteId)\"\n+              >\n+                {{\n+                  participant.participantDetail.onboardingStatus ===\n+                  onBoardingStatus.New\n+                    ? \"Send Invitation\"\n+                    : \"Resend Invitation\"\n+                }}\n+              </button>\n+            </div>\n+            <div>\n+              <button\n+                type=\"submit\"\n+                class=\"btn banner__default__btn flex__row__reverse pad__5__13 font14\"\n+                (click)=\"\n+                  toggleInvitation(\n+                    participant.participantDetail.siteId,\n+                    participant.participantDetail.onboardingStatus\n+                  )\n+                \"\n+              >\n+                {{\n+                  participant.participantDetail.onboardingStatus ===\n+                  onBoardingStatus.Disabled\n+                    ? \"Enable Invitation\"\n+                    : \"Disable Invitation\"\n+                }}\n+              </button>\n+            </div>\n+          </div>\n+        </section>\n+      </div>\n+    </div>\n+  </section>\n+\n+  <section class=\"subheader p-none pl-none mobile__view border-top__c4d1e6\">\n+    <div class=\"flex__ flex__justify__center\">\n+      <button", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ5Mzg1NQ=="}, "originalCommit": {"oid": "99140c62eafcfc3cde5f682bcea80fb70099739b"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzMwNTk5OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/participant-details/participant-details.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNDo0NTozOVrOHBr3yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMTowMjo0OFrOHDCRlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTUyOTQxNw==", "bodyText": "Why do you need to create another subscription to params? I believe you just want to call this.getParticipant() again", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/759#discussion_r471529417", "createdAt": "2020-08-17T14:45:39Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/participant-details/participant-details.component.ts", "diffHunk": "@@ -0,0 +1,97 @@\n+import {Component, OnInit} from '@angular/core';\n+import {Participant, UpdateInviteResponse} from './participant-details';\n+import {Observable, of} from 'rxjs';\n+import {UnsubscribeOnDestroyAdapter} from 'src/app/unsubscribe-on-destroy-adapter';\n+import {ParticipantDetailsService} from './participant-details.service';\n+import {ActivatedRoute} from '@angular/router';\n+import {ToastrService} from 'ngx-toastr';\n+import {getMessage} from 'src/app/shared/success.codes.enum';\n+import {OnboardingStatus} from 'src/app/shared/enums';\n+import {ApiResponse} from 'src/app/entity/api.response.model';\n+\n+@Component({\n+  selector: 'app-participant-details',\n+  templateUrl: './participant-details.component.html',\n+  styleUrls: ['./participant-details.component.scss'],\n+})\n+export class ParticipantDetailsComponent extends UnsubscribeOnDestroyAdapter\n+  implements OnInit {\n+  participantId = '';\n+  participant$: Observable<Participant> = of();\n+  onBoardingStatus = OnboardingStatus;\n+\n+  constructor(\n+    private readonly participantDetailsService: ParticipantDetailsService,\n+    private readonly route: ActivatedRoute,\n+    private readonly toastr: ToastrService,\n+  ) {\n+    super();\n+  }\n+\n+  ngOnInit(): void {\n+    this.subs.add(\n+      this.route.params.subscribe((params) => {\n+        if (params.participantId) {\n+          this.participantId = params.participantId as string;\n+        }\n+        this.getParticipant();\n+      }),\n+    );\n+  }\n+\n+  getParticipant(): void {\n+    this.participant$ = this.participantDetailsService.get(this.participantId);\n+  }\n+\n+  downloadPDF(consentId: string): void {\n+    this.participantDetailsService\n+      .getConsentFile(consentId)\n+      .subscribe((consentProp) => {\n+        const currentTime = Date.now();\n+        const fileName = `consent_${currentTime}.pdf`;\n+        const downloadLink = document.createElement('a');\n+        const linkSource = `data:${consentProp.type};base64,${consentProp.content}`;\n+        downloadLink.href = linkSource;\n+        downloadLink.download = fileName;\n+        downloadLink.click();\n+      });\n+  }\n+\n+  sendInvitation(siteId: string) {\n+    const sendInvitations = {\n+      ids: [this.participantId],\n+    };\n+    this.subs.add(\n+      this.participantDetailsService\n+        .sendInvitation(siteId, sendInvitations)\n+        .subscribe((successResponse: UpdateInviteResponse) => {\n+          if (getMessage(successResponse.code)) {\n+            this.toastr.success(getMessage(successResponse.code));\n+          } else {\n+            this.toastr.success('Success');\n+            this.ngOnInit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99140c62eafcfc3cde5f682bcea80fb70099739b"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk0NTA0Ng==", "bodyText": "Updated", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/759#discussion_r472945046", "createdAt": "2020-08-19T11:02:48Z", "author": {"login": "rohithd-btc"}, "path": "UR-web-app/src/app/site-coordinator/participant-details/participant-details.component.ts", "diffHunk": "@@ -0,0 +1,97 @@\n+import {Component, OnInit} from '@angular/core';\n+import {Participant, UpdateInviteResponse} from './participant-details';\n+import {Observable, of} from 'rxjs';\n+import {UnsubscribeOnDestroyAdapter} from 'src/app/unsubscribe-on-destroy-adapter';\n+import {ParticipantDetailsService} from './participant-details.service';\n+import {ActivatedRoute} from '@angular/router';\n+import {ToastrService} from 'ngx-toastr';\n+import {getMessage} from 'src/app/shared/success.codes.enum';\n+import {OnboardingStatus} from 'src/app/shared/enums';\n+import {ApiResponse} from 'src/app/entity/api.response.model';\n+\n+@Component({\n+  selector: 'app-participant-details',\n+  templateUrl: './participant-details.component.html',\n+  styleUrls: ['./participant-details.component.scss'],\n+})\n+export class ParticipantDetailsComponent extends UnsubscribeOnDestroyAdapter\n+  implements OnInit {\n+  participantId = '';\n+  participant$: Observable<Participant> = of();\n+  onBoardingStatus = OnboardingStatus;\n+\n+  constructor(\n+    private readonly participantDetailsService: ParticipantDetailsService,\n+    private readonly route: ActivatedRoute,\n+    private readonly toastr: ToastrService,\n+  ) {\n+    super();\n+  }\n+\n+  ngOnInit(): void {\n+    this.subs.add(\n+      this.route.params.subscribe((params) => {\n+        if (params.participantId) {\n+          this.participantId = params.participantId as string;\n+        }\n+        this.getParticipant();\n+      }),\n+    );\n+  }\n+\n+  getParticipant(): void {\n+    this.participant$ = this.participantDetailsService.get(this.participantId);\n+  }\n+\n+  downloadPDF(consentId: string): void {\n+    this.participantDetailsService\n+      .getConsentFile(consentId)\n+      .subscribe((consentProp) => {\n+        const currentTime = Date.now();\n+        const fileName = `consent_${currentTime}.pdf`;\n+        const downloadLink = document.createElement('a');\n+        const linkSource = `data:${consentProp.type};base64,${consentProp.content}`;\n+        downloadLink.href = linkSource;\n+        downloadLink.download = fileName;\n+        downloadLink.click();\n+      });\n+  }\n+\n+  sendInvitation(siteId: string) {\n+    const sendInvitations = {\n+      ids: [this.participantId],\n+    };\n+    this.subs.add(\n+      this.participantDetailsService\n+        .sendInvitation(siteId, sendInvitations)\n+        .subscribe((successResponse: UpdateInviteResponse) => {\n+          if (getMessage(successResponse.code)) {\n+            this.toastr.success(getMessage(successResponse.code));\n+          } else {\n+            this.toastr.success('Success');\n+            this.ngOnInit();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTUyOTQxNw=="}, "originalCommit": {"oid": "99140c62eafcfc3cde5f682bcea80fb70099739b"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzMxOTE3OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/participant-details/participant-details.service.spec.ts", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNDo0ODo0OVrOHBr_7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNDoyNDo0MVrOHDpDIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTUzMTUwMw==", "bodyText": "Prefer using the HttpClientTestingModule instead of spying on the HttpClient", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/759#discussion_r471531503", "createdAt": "2020-08-17T14:48:49Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/participant-details/participant-details.service.spec.ts", "diffHunk": "@@ -0,0 +1,143 @@\n+import {TestBed, fakeAsync, tick} from '@angular/core/testing';\n+import {HttpClientTestingModule} from '@angular/common/http/testing';\n+import {SiteCoordinatorModule} from '../site-coordinator.module';\n+import {NO_ERRORS_SCHEMA} from '@angular/core';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {EntityService} from '../../service/entity.service';\n+import {throwError, of} from 'rxjs';\n+import {ParticipantDetailsService} from './participant-details.service';\n+import {HttpClient} from '@angular/common/http';\n+import {Participant, UpdateInviteResponse} from './participant-details';\n+import * as expectedResult from 'src/app/entity/mock-participant-data';\n+import {ApiResponse} from 'src/app/entity/api.response.model';\n+\n+describe('ParticipantDetailsService', () => {\n+  let participantDetailsService: ParticipantDetailsService;\n+  let httpServiceSpyObj: jasmine.SpyObj<HttpClient>;\n+  beforeEach(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        SiteCoordinatorModule,\n+        RouterTestingModule.withRoutes([]),\n+      ],\n+      schemas: [NO_ERRORS_SCHEMA],\n+      providers: [ParticipantDetailsService, EntityService],\n+    });\n+  });\n+\n+  it('should be created', () => {\n+    const service: ParticipantDetailsService = TestBed.get(\n+      ParticipantDetailsService,\n+    ) as ParticipantDetailsService;\n+    expect(service).toBeTruthy();\n+  });\n+\n+  it('should get the participant details for id', fakeAsync(() => {\n+    const entityServiceSpy = jasmine.createSpyObj<EntityService<Participant>>(\n+      'EntityService',\n+      {get: of(expectedResult.expectedParticipantDetails)},\n+    );\n+    participantDetailsService = new ParticipantDetailsService(\n+      entityServiceSpy,\n+      httpServiceSpyObj,\n+    );\n+\n+    participantDetailsService\n+      .get(expectedResult.expectedParticipantId.id)\n+      .subscribe(\n+        (participant) =>\n+          expect(participant).toEqual(\n+            expectedResult.expectedParticipantDetails,\n+            'expected participant details',\n+          ),\n+        fail,\n+      );\n+\n+    expect(entityServiceSpy.get).toHaveBeenCalledTimes(1);\n+  }));\n+\n+  it('should change the status Enable/Disable invitation', () => {\n+    const entityServiceSpyObj = jasmine.createSpyObj<\n+      EntityService<Participant>\n+    >('EntityService', ['post']);\n+\n+    const httpServiceSpyObj = jasmine.createSpyObj<HttpClient>('HttpClient', {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99140c62eafcfc3cde5f682bcea80fb70099739b"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkyMTc4Ng==", "bodyText": "I have tried this way by spending more than a day, but am facing an error i.e\n\"Error: Expected one matching request for criteria \"Match URL: http://35.193.185.224:8093/participant-manager-service/sites/1/participants/activate\", found none. Requests received are: PATCH 1.\" it will still require some more time,if we have to implement this and considering the time constraints,we will defer for  this implementation now\nBelow is the test case\nit('should change the status Enable/Disable invitation', fakeAsync(() => {\nhttpClient\n  .patch(\n    expectedResult.expectedSiteId.siteId,\n    expectedResult.expectedToggleInvitation,\n  )\n  .subscribe((successResponse) =>\n    expect(successResponse).toEqual(expectedResult.expectedToggleResponse),\n  );\n\nconst httpReq = httpTestingController.expectOne(\n  `${environment.baseUrl}/sites/${expectedResult.expectedSiteId.siteId}/participants/activate`,\n);\nexpect(httpReq.request.method).toEqual('PATCH');\n\nhttpReq.flush(expectedResult.expectedToggleResponse);\nhttpTestingController.verify();\n\n}));", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/759#discussion_r472921786", "createdAt": "2020-08-19T10:19:37Z", "author": {"login": "rohithd-btc"}, "path": "UR-web-app/src/app/site-coordinator/participant-details/participant-details.service.spec.ts", "diffHunk": "@@ -0,0 +1,143 @@\n+import {TestBed, fakeAsync, tick} from '@angular/core/testing';\n+import {HttpClientTestingModule} from '@angular/common/http/testing';\n+import {SiteCoordinatorModule} from '../site-coordinator.module';\n+import {NO_ERRORS_SCHEMA} from '@angular/core';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {EntityService} from '../../service/entity.service';\n+import {throwError, of} from 'rxjs';\n+import {ParticipantDetailsService} from './participant-details.service';\n+import {HttpClient} from '@angular/common/http';\n+import {Participant, UpdateInviteResponse} from './participant-details';\n+import * as expectedResult from 'src/app/entity/mock-participant-data';\n+import {ApiResponse} from 'src/app/entity/api.response.model';\n+\n+describe('ParticipantDetailsService', () => {\n+  let participantDetailsService: ParticipantDetailsService;\n+  let httpServiceSpyObj: jasmine.SpyObj<HttpClient>;\n+  beforeEach(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        SiteCoordinatorModule,\n+        RouterTestingModule.withRoutes([]),\n+      ],\n+      schemas: [NO_ERRORS_SCHEMA],\n+      providers: [ParticipantDetailsService, EntityService],\n+    });\n+  });\n+\n+  it('should be created', () => {\n+    const service: ParticipantDetailsService = TestBed.get(\n+      ParticipantDetailsService,\n+    ) as ParticipantDetailsService;\n+    expect(service).toBeTruthy();\n+  });\n+\n+  it('should get the participant details for id', fakeAsync(() => {\n+    const entityServiceSpy = jasmine.createSpyObj<EntityService<Participant>>(\n+      'EntityService',\n+      {get: of(expectedResult.expectedParticipantDetails)},\n+    );\n+    participantDetailsService = new ParticipantDetailsService(\n+      entityServiceSpy,\n+      httpServiceSpyObj,\n+    );\n+\n+    participantDetailsService\n+      .get(expectedResult.expectedParticipantId.id)\n+      .subscribe(\n+        (participant) =>\n+          expect(participant).toEqual(\n+            expectedResult.expectedParticipantDetails,\n+            'expected participant details',\n+          ),\n+        fail,\n+      );\n+\n+    expect(entityServiceSpy.get).toHaveBeenCalledTimes(1);\n+  }));\n+\n+  it('should change the status Enable/Disable invitation', () => {\n+    const entityServiceSpyObj = jasmine.createSpyObj<\n+      EntityService<Participant>\n+    >('EntityService', ['post']);\n+\n+    const httpServiceSpyObj = jasmine.createSpyObj<HttpClient>('HttpClient', {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTUzMTUwMw=="}, "originalCommit": {"oid": "99140c62eafcfc3cde5f682bcea80fb70099739b"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA1NzgwMw==", "bodyText": "This is almost right, but I don't know why you are calling the HTTP client in your test. It should look like this.\n it('should change the status Enable/Disable invitation', fakeAsync(() => {\n    participantDetailsService = TestBed.inject<ParticipantDetailsService>(\n      ParticipantDetailsService,\n    );\n    const httpTest = TestBed.inject(HttpTestingController);\n\n    participantDetailsService\n      .toggleInvitation(\n        expectedResult.expectedSiteId.siteId,\n        expectedResult.expectedToggleInvitation,\n      )\n      .subscribe((successResponse: ApiResponse) =>\n        expect(successResponse).toEqual(expectedResult.expectedToggleResponse),\n      );\n\n    const httpReq = httpTest.expectOne(\n      `${environment.baseUrl}/sites/${expectedResult.expectedSiteId.siteId}/participants/activate`,\n    );\n    expect(httpReq.request.method).toEqual('PATCH');\n\n    httpReq.flush(expectedResult.expectedToggleResponse);\n    httpTest.verify();\n  }));", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/759#discussion_r473057803", "createdAt": "2020-08-19T14:08:32Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/participant-details/participant-details.service.spec.ts", "diffHunk": "@@ -0,0 +1,143 @@\n+import {TestBed, fakeAsync, tick} from '@angular/core/testing';\n+import {HttpClientTestingModule} from '@angular/common/http/testing';\n+import {SiteCoordinatorModule} from '../site-coordinator.module';\n+import {NO_ERRORS_SCHEMA} from '@angular/core';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {EntityService} from '../../service/entity.service';\n+import {throwError, of} from 'rxjs';\n+import {ParticipantDetailsService} from './participant-details.service';\n+import {HttpClient} from '@angular/common/http';\n+import {Participant, UpdateInviteResponse} from './participant-details';\n+import * as expectedResult from 'src/app/entity/mock-participant-data';\n+import {ApiResponse} from 'src/app/entity/api.response.model';\n+\n+describe('ParticipantDetailsService', () => {\n+  let participantDetailsService: ParticipantDetailsService;\n+  let httpServiceSpyObj: jasmine.SpyObj<HttpClient>;\n+  beforeEach(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        SiteCoordinatorModule,\n+        RouterTestingModule.withRoutes([]),\n+      ],\n+      schemas: [NO_ERRORS_SCHEMA],\n+      providers: [ParticipantDetailsService, EntityService],\n+    });\n+  });\n+\n+  it('should be created', () => {\n+    const service: ParticipantDetailsService = TestBed.get(\n+      ParticipantDetailsService,\n+    ) as ParticipantDetailsService;\n+    expect(service).toBeTruthy();\n+  });\n+\n+  it('should get the participant details for id', fakeAsync(() => {\n+    const entityServiceSpy = jasmine.createSpyObj<EntityService<Participant>>(\n+      'EntityService',\n+      {get: of(expectedResult.expectedParticipantDetails)},\n+    );\n+    participantDetailsService = new ParticipantDetailsService(\n+      entityServiceSpy,\n+      httpServiceSpyObj,\n+    );\n+\n+    participantDetailsService\n+      .get(expectedResult.expectedParticipantId.id)\n+      .subscribe(\n+        (participant) =>\n+          expect(participant).toEqual(\n+            expectedResult.expectedParticipantDetails,\n+            'expected participant details',\n+          ),\n+        fail,\n+      );\n+\n+    expect(entityServiceSpy.get).toHaveBeenCalledTimes(1);\n+  }));\n+\n+  it('should change the status Enable/Disable invitation', () => {\n+    const entityServiceSpyObj = jasmine.createSpyObj<\n+      EntityService<Participant>\n+    >('EntityService', ['post']);\n+\n+    const httpServiceSpyObj = jasmine.createSpyObj<HttpClient>('HttpClient', {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTUzMTUwMw=="}, "originalCommit": {"oid": "99140c62eafcfc3cde5f682bcea80fb70099739b"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU4MDMyMQ==", "bodyText": "Thanks Nik,i tried this its working fine. Actually i was calling httpTest = TestBed.inject(HttpTestingController) inside component().then()  function.Thank for the help.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/759#discussion_r473580321", "createdAt": "2020-08-20T04:24:41Z", "author": {"login": "rohithd-btc"}, "path": "UR-web-app/src/app/site-coordinator/participant-details/participant-details.service.spec.ts", "diffHunk": "@@ -0,0 +1,143 @@\n+import {TestBed, fakeAsync, tick} from '@angular/core/testing';\n+import {HttpClientTestingModule} from '@angular/common/http/testing';\n+import {SiteCoordinatorModule} from '../site-coordinator.module';\n+import {NO_ERRORS_SCHEMA} from '@angular/core';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {EntityService} from '../../service/entity.service';\n+import {throwError, of} from 'rxjs';\n+import {ParticipantDetailsService} from './participant-details.service';\n+import {HttpClient} from '@angular/common/http';\n+import {Participant, UpdateInviteResponse} from './participant-details';\n+import * as expectedResult from 'src/app/entity/mock-participant-data';\n+import {ApiResponse} from 'src/app/entity/api.response.model';\n+\n+describe('ParticipantDetailsService', () => {\n+  let participantDetailsService: ParticipantDetailsService;\n+  let httpServiceSpyObj: jasmine.SpyObj<HttpClient>;\n+  beforeEach(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        SiteCoordinatorModule,\n+        RouterTestingModule.withRoutes([]),\n+      ],\n+      schemas: [NO_ERRORS_SCHEMA],\n+      providers: [ParticipantDetailsService, EntityService],\n+    });\n+  });\n+\n+  it('should be created', () => {\n+    const service: ParticipantDetailsService = TestBed.get(\n+      ParticipantDetailsService,\n+    ) as ParticipantDetailsService;\n+    expect(service).toBeTruthy();\n+  });\n+\n+  it('should get the participant details for id', fakeAsync(() => {\n+    const entityServiceSpy = jasmine.createSpyObj<EntityService<Participant>>(\n+      'EntityService',\n+      {get: of(expectedResult.expectedParticipantDetails)},\n+    );\n+    participantDetailsService = new ParticipantDetailsService(\n+      entityServiceSpy,\n+      httpServiceSpyObj,\n+    );\n+\n+    participantDetailsService\n+      .get(expectedResult.expectedParticipantId.id)\n+      .subscribe(\n+        (participant) =>\n+          expect(participant).toEqual(\n+            expectedResult.expectedParticipantDetails,\n+            'expected participant details',\n+          ),\n+        fail,\n+      );\n+\n+    expect(entityServiceSpy.get).toHaveBeenCalledTimes(1);\n+  }));\n+\n+  it('should change the status Enable/Disable invitation', () => {\n+    const entityServiceSpyObj = jasmine.createSpyObj<\n+      EntityService<Participant>\n+    >('EntityService', ['post']);\n+\n+    const httpServiceSpyObj = jasmine.createSpyObj<HttpClient>('HttpClient', {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTUzMTUwMw=="}, "originalCommit": {"oid": "99140c62eafcfc3cde5f682bcea80fb70099739b"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzMzNTg1OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/participant-details/participant-details.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNDo1Mjo0NVrOHBsKGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMTowMjozOFrOHDCRRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTUzNDEwNg==", "bodyText": "participantId should always be true because of your routing", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/759#discussion_r471534106", "createdAt": "2020-08-17T14:52:45Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/participant-details/participant-details.component.ts", "diffHunk": "@@ -0,0 +1,97 @@\n+import {Component, OnInit} from '@angular/core';\n+import {Participant, UpdateInviteResponse} from './participant-details';\n+import {Observable, of} from 'rxjs';\n+import {UnsubscribeOnDestroyAdapter} from 'src/app/unsubscribe-on-destroy-adapter';\n+import {ParticipantDetailsService} from './participant-details.service';\n+import {ActivatedRoute} from '@angular/router';\n+import {ToastrService} from 'ngx-toastr';\n+import {getMessage} from 'src/app/shared/success.codes.enum';\n+import {OnboardingStatus} from 'src/app/shared/enums';\n+import {ApiResponse} from 'src/app/entity/api.response.model';\n+\n+@Component({\n+  selector: 'app-participant-details',\n+  templateUrl: './participant-details.component.html',\n+  styleUrls: ['./participant-details.component.scss'],\n+})\n+export class ParticipantDetailsComponent extends UnsubscribeOnDestroyAdapter\n+  implements OnInit {\n+  participantId = '';\n+  participant$: Observable<Participant> = of();\n+  onBoardingStatus = OnboardingStatus;\n+\n+  constructor(\n+    private readonly participantDetailsService: ParticipantDetailsService,\n+    private readonly route: ActivatedRoute,\n+    private readonly toastr: ToastrService,\n+  ) {\n+    super();\n+  }\n+\n+  ngOnInit(): void {\n+    this.subs.add(\n+      this.route.params.subscribe((params) => {\n+        if (params.participantId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99140c62eafcfc3cde5f682bcea80fb70099739b"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk0NDk2Nw==", "bodyText": "Updated", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/759#discussion_r472944967", "createdAt": "2020-08-19T11:02:38Z", "author": {"login": "rohithd-btc"}, "path": "UR-web-app/src/app/site-coordinator/participant-details/participant-details.component.ts", "diffHunk": "@@ -0,0 +1,97 @@\n+import {Component, OnInit} from '@angular/core';\n+import {Participant, UpdateInviteResponse} from './participant-details';\n+import {Observable, of} from 'rxjs';\n+import {UnsubscribeOnDestroyAdapter} from 'src/app/unsubscribe-on-destroy-adapter';\n+import {ParticipantDetailsService} from './participant-details.service';\n+import {ActivatedRoute} from '@angular/router';\n+import {ToastrService} from 'ngx-toastr';\n+import {getMessage} from 'src/app/shared/success.codes.enum';\n+import {OnboardingStatus} from 'src/app/shared/enums';\n+import {ApiResponse} from 'src/app/entity/api.response.model';\n+\n+@Component({\n+  selector: 'app-participant-details',\n+  templateUrl: './participant-details.component.html',\n+  styleUrls: ['./participant-details.component.scss'],\n+})\n+export class ParticipantDetailsComponent extends UnsubscribeOnDestroyAdapter\n+  implements OnInit {\n+  participantId = '';\n+  participant$: Observable<Participant> = of();\n+  onBoardingStatus = OnboardingStatus;\n+\n+  constructor(\n+    private readonly participantDetailsService: ParticipantDetailsService,\n+    private readonly route: ActivatedRoute,\n+    private readonly toastr: ToastrService,\n+  ) {\n+    super();\n+  }\n+\n+  ngOnInit(): void {\n+    this.subs.add(\n+      this.route.params.subscribe((params) => {\n+        if (params.participantId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTUzNDEwNg=="}, "originalCommit": {"oid": "99140c62eafcfc3cde5f682bcea80fb70099739b"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NjgwMzg5OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/button-template/button-template.component.html", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMzozOTozMVrOHDH4HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjozNToyMFrOHDP55w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAzNjgyOA==", "bodyText": "This shouldn't be another component, you could've done this within participant-details.component.html. This creates a lot of unnecessary boilerplate/abstraction. Please just inline this template (use the let- variables on the template to pass in the callback).\ni.e.\n<ng-container *ngTemplateOutlet=\"button\" [click]=\"click\"></ng-container>\n<ng-template #button let-click>\n    <button (click)=\"click()\">Button</button>\n</ng-template>\nOr just do it the previous way with the button text extracted out, it's not the best but I prefer it to this.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/759#discussion_r473036828", "createdAt": "2020-08-19T13:39:31Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/button-template/button-template.component.html", "diffHunk": "@@ -0,0 +1,11 @@\n+<ng-container *ngTemplateOutlet=\"text\"></ng-container>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f87bcd240954bae95e046bbe7f606a4bb6585de"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE2ODM1OQ==", "bodyText": "Currently going with old approach,as per our internal discussion.Removed the newly created template files.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/759#discussion_r473168359", "createdAt": "2020-08-19T16:35:20Z", "author": {"login": "rohithd-btc"}, "path": "UR-web-app/src/app/site-coordinator/button-template/button-template.component.html", "diffHunk": "@@ -0,0 +1,11 @@\n+<ng-container *ngTemplateOutlet=\"text\"></ng-container>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAzNjgyOA=="}, "originalCommit": {"oid": "0f87bcd240954bae95e046bbe7f606a4bb6585de"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NjgwODg4OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/button-template/button-template.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMzo0MDozNFrOHDH7DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjozNTo1MFrOHDP7qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAzNzU4MQ==", "bodyText": "Just for future reference, this should be re-emiting the original event, or use void.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/759#discussion_r473037581", "createdAt": "2020-08-19T13:40:34Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/button-template/button-template.component.ts", "diffHunk": "@@ -0,0 +1,16 @@\n+import {Component, Input, Output, EventEmitter} from '@angular/core';\n+\n+@Component({\n+  selector: 'app-button-template',\n+  templateUrl: './button-template.component.html',\n+  styleUrls: ['./button-template.component.scss'],\n+})\n+export class ButtonTemplateComponent {\n+  @Input()\n+  buttonName = '';\n+  @Output() textBtnClickEmt: EventEmitter<string> = new EventEmitter<string>();\n+\n+  onBtnClick() {\n+    this.textBtnClickEmt.emit('You have clicked on button.');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f87bcd240954bae95e046bbe7f606a4bb6585de"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE2ODgxMA==", "bodyText": "Thank you for the reference.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/759#discussion_r473168810", "createdAt": "2020-08-19T16:35:50Z", "author": {"login": "rohithd-btc"}, "path": "UR-web-app/src/app/site-coordinator/button-template/button-template.component.ts", "diffHunk": "@@ -0,0 +1,16 @@\n+import {Component, Input, Output, EventEmitter} from '@angular/core';\n+\n+@Component({\n+  selector: 'app-button-template',\n+  templateUrl: './button-template.component.html',\n+  styleUrls: ['./button-template.component.scss'],\n+})\n+export class ButtonTemplateComponent {\n+  @Input()\n+  buttonName = '';\n+  @Output() textBtnClickEmt: EventEmitter<string> = new EventEmitter<string>();\n+\n+  onBtnClick() {\n+    this.textBtnClickEmt.emit('You have clicked on button.');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAzNzU4MQ=="}, "originalCommit": {"oid": "0f87bcd240954bae95e046bbe7f606a4bb6585de"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NjgyMjgxOnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/participant-details/participant-details.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMzo0Mzo1MlrOHDID2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjozNDoyMVrOHDP1hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAzOTgzNQ==", "bodyText": "This doesn't tell me anything about how this is used. Please use a more informative name.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/759#discussion_r473039835", "createdAt": "2020-08-19T13:43:52Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/participant-details/participant-details.component.ts", "diffHunk": "@@ -17,6 +17,8 @@ import {ApiResponse} from 'src/app/entity/api.response.model';\n export class ParticipantDetailsComponent extends UnsubscribeOnDestroyAdapter\n   implements OnInit {\n   participantId = '';\n+  buttonText1 = '';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f87bcd240954bae95e046bbe7f606a4bb6585de"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE2NzIzOQ==", "bodyText": "chnaged the button name according to its functionality", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/759#discussion_r473167239", "createdAt": "2020-08-19T16:34:21Z", "author": {"login": "rohithd-btc"}, "path": "UR-web-app/src/app/site-coordinator/participant-details/participant-details.component.ts", "diffHunk": "@@ -17,6 +17,8 @@ import {ApiResponse} from 'src/app/entity/api.response.model';\n export class ParticipantDetailsComponent extends UnsubscribeOnDestroyAdapter\n   implements OnInit {\n   participantId = '';\n+  buttonText1 = '';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAzOTgzNQ=="}, "originalCommit": {"oid": "0f87bcd240954bae95e046bbe7f606a4bb6585de"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NjkzNzY2OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/participant-details/participant-details.service.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDowOTozNVrOHDJM6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjozMzo0OVrOHDPzcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA1ODUzOA==", "bodyText": "This should be '@environment' so that it imports dev in the dev environment", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/759#discussion_r473058538", "createdAt": "2020-08-19T14:09:35Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/participant-details/participant-details.service.ts", "diffHunk": "@@ -0,0 +1,61 @@\n+import {Injectable} from '@angular/core';\n+import {\n+  Participant,\n+  StatusUpdate,\n+  UpdateInviteResponse,\n+  InviteSend,\n+  ConsentFile,\n+} from './participant-details';\n+import {EntityService} from 'src/app/service/entity.service';\n+import {Observable} from 'rxjs';\n+import {HttpClient} from '@angular/common/http';\n+import {environment} from 'src/environments/environment.prod';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f87bcd240954bae95e046bbe7f606a4bb6585de"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE2NjcwNw==", "bodyText": "Updated", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/759#discussion_r473166707", "createdAt": "2020-08-19T16:33:49Z", "author": {"login": "rohithd-btc"}, "path": "UR-web-app/src/app/site-coordinator/participant-details/participant-details.service.ts", "diffHunk": "@@ -0,0 +1,61 @@\n+import {Injectable} from '@angular/core';\n+import {\n+  Participant,\n+  StatusUpdate,\n+  UpdateInviteResponse,\n+  InviteSend,\n+  ConsentFile,\n+} from './participant-details';\n+import {EntityService} from 'src/app/service/entity.service';\n+import {Observable} from 'rxjs';\n+import {HttpClient} from '@angular/common/http';\n+import {environment} from 'src/environments/environment.prod';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA1ODUzOA=="}, "originalCommit": {"oid": "0f87bcd240954bae95e046bbe7f606a4bb6585de"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2133, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}