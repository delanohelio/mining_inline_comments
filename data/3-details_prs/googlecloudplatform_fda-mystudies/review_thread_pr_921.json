{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyODkwMDI1", "number": 921, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODoxMDoyNlrOEhy-fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNzozMTo0NVrOEoMJqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODczNjYwOnYy", "diffSide": "RIGHT", "path": "iOS/HPHC/HPHC/Default.xcconfig", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODoxMDoyNlrOHPT99g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNToyNDoyMFrOHWW03A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxNzg0Ng==", "bodyText": "what is the difference between these three?\nplease update the example according to what these values should be in our deployment.\ne.g. if out hydra login path is configured to /login, add that in the example", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/921#discussion_r485817846", "createdAt": "2020-09-09T18:10:26Z", "author": {"login": "zohrehj"}, "path": "iOS/HPHC/HPHC/Default.xcconfig", "diffHunk": "@@ -36,6 +36,17 @@ CONSENTMGMT_URL = xxxxxx\n // e.g. mystudiesdeployment.com/AuthServer/\n AUTH_URL = xxxxxx\n \n+// Hydra URL for auth services\n+// e.g. mystudiesdeployment.com\n+HYDRA_REST_BASE_URL = xxxxx\n+\n+// Hydra URL to load web login page.\n+// e.g. mystudieshydradeployment.com\n+HYDRA_WEB_BASE_URL = xxxxxx\n+\n+// Hydra redirect URL\n+AUTH_REDIRECT_BASE_URL = xxxx", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d696cf1d465f9f4a4a7a9edf75d9a6df7506c3a3"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIwNDcwMA==", "bodyText": "I've updated it. Auth will have one base URL.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/921#discussion_r493204700", "createdAt": "2020-09-23T05:24:20Z", "author": {"login": "tushar-boston"}, "path": "iOS/HPHC/HPHC/Default.xcconfig", "diffHunk": "@@ -36,6 +36,17 @@ CONSENTMGMT_URL = xxxxxx\n // e.g. mystudiesdeployment.com/AuthServer/\n AUTH_URL = xxxxxx\n \n+// Hydra URL for auth services\n+// e.g. mystudiesdeployment.com\n+HYDRA_REST_BASE_URL = xxxxx\n+\n+// Hydra URL to load web login page.\n+// e.g. mystudieshydradeployment.com\n+HYDRA_WEB_BASE_URL = xxxxxx\n+\n+// Hydra redirect URL\n+AUTH_REDIRECT_BASE_URL = xxxx", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxNzg0Ng=="}, "originalCommit": {"oid": "d696cf1d465f9f4a4a7a9edf75d9a6df7506c3a3"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODc0MjUwOnYy", "diffSide": "RIGHT", "path": "iOS/HPHC/HPHC/Models/UserModel/User.swift", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODoxMjoyMFrOHPUBkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNToyNDoyOVrOHWW1Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxODc2OA==", "bodyText": "nit: isLoggedInWithTempPassword", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/921#discussion_r485818768", "createdAt": "2020-09-09T18:12:20Z", "author": {"login": "zohrehj"}, "path": "iOS/HPHC/HPHC/Models/UserModel/User.swift", "diffHunk": "@@ -469,6 +486,31 @@ class User {\n     return .yetToJoin\n   }\n \n+  func authenticate(with dict: JSONDictionary) {\n+\n+    let tokenType = dict[JSONKey.tokenType] as? String ?? \"\"\n+    let accessToken = dict[JSONKey.accessToken] as? String ?? \"\"\n+    authToken = tokenType.capitalized + \" \" + accessToken\n+    refreshToken = dict[JSONKey.refreshToken] as? String ?? \"\"\n+\n+    if self.verified && !self.isLoginWithTempPassword {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d696cf1d465f9f4a4a7a9edf75d9a6df7506c3a3"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIwNDc0Mw==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/921#discussion_r493204743", "createdAt": "2020-09-23T05:24:29Z", "author": {"login": "tushar-boston"}, "path": "iOS/HPHC/HPHC/Models/UserModel/User.swift", "diffHunk": "@@ -469,6 +486,31 @@ class User {\n     return .yetToJoin\n   }\n \n+  func authenticate(with dict: JSONDictionary) {\n+\n+    let tokenType = dict[JSONKey.tokenType] as? String ?? \"\"\n+    let accessToken = dict[JSONKey.accessToken] as? String ?? \"\"\n+    authToken = tokenType.capitalized + \" \" + accessToken\n+    refreshToken = dict[JSONKey.refreshToken] as? String ?? \"\"\n+\n+    if self.verified && !self.isLoginWithTempPassword {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxODc2OA=="}, "originalCommit": {"oid": "d696cf1d465f9f4a4a7a9edf75d9a6df7506c3a3"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzQ1MDkxOnYy", "diffSide": "RIGHT", "path": "iOS/HPHC/HPHC/Controllers/LoginRegisterUI/LoginUI/SignInViewController.swift", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjoxODoxNVrOHXXsKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNjowOToxNVrOHYvl-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI2NzQzMg==", "bodyText": "please get all new text reviewed.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/921#discussion_r494267432", "createdAt": "2020-09-24T12:18:15Z", "author": {"login": "zohrehj"}, "path": "iOS/HPHC/HPHC/Controllers/LoginRegisterUI/LoginUI/SignInViewController.swift", "diffHunk": "@@ -140,74 +101,131 @@ class SignInViewController: UIViewController {\n     }\n   }\n \n-  // MARK: - Button Action\n-\n-  @IBAction func signInButtonAction(_ sender: Any) {\n+  // MARK: - UI Utils\n \n-    self.view.endEditing(true)\n-    if (user.emailId?.isEmpty)! && (user.password?.isEmpty)! {\n-      self.showAlertMessages(textMessage: kMessageAllFieldsAreEmpty)\n-    } else if user.emailId == \"\" {\n-      self.showAlertMessages(textMessage: kMessageEmailBlank)\n-    } else if !(Utilities.isValidEmail(testStr: user.emailId!)) {\n-      self.showAlertMessages(textMessage: kMessageValidEmail)\n-\n-    } else if user.password == \"\" {\n-      self.showAlertMessages(textMessage: kMessagePasswordBlank)\n+  private func setupNavigation() {\n+    self.navigationItem.rightBarButtonItem = UIBarButtonItem(\n+      image: UIImage(named: \"info\"),\n+      style: .done,\n+      target: self,\n+      action: #selector(self.buttonInfoAction(_:))\n+    )\n+    self.title = NSLocalizedString(kSignInTitleText, comment: \"\")\n+  }\n \n-    } else {\n+  private func setupProgressView() {\n+    guard let navigationBar = navigationController?.navigationBar else { return }\n+    progressView.translatesAutoresizingMaskIntoConstraints = false\n+    navigationBar.addSubview(progressView)\n+    progressView.isHidden = true\n+    NSLayoutConstraint.activate([\n+      progressView.leadingAnchor.constraint(equalTo: navigationBar.leadingAnchor),\n+      progressView.trailingAnchor.constraint(equalTo: navigationBar.trailingAnchor),\n+      progressView.bottomAnchor.constraint(equalTo: navigationBar.bottomAnchor),\n+      progressView.heightAnchor.constraint(equalToConstant: 2.0),\n+    ])\n+  }\n \n-      let ud = UserDefaults.standard\n-      if user.emailId == kStagingUserEmailId {\n-        ud.set(true, forKey: kIsStagingUser)\n-      } else {\n-        ud.set(false, forKey: kIsStagingUser)\n-      }\n-      ud.synchronize()\n+  // MARK: - Utils\n \n-      AuthServices().loginUser(self)\n+  private func setupEstimatedProgressObserver() {\n+    estimatedProgressObserver = webKitView.observe(\\.estimatedProgress, options: [.new]) { [weak self] webView, _ in\n+      self?.progressView.progress = Float(webView.estimatedProgress)\n     }\n   }\n \n-  /// To Display registration information.\n-  @IBAction func buttonInfoAction(_ sender: Any) {\n-    UIUtilities.showAlertWithTitleAndMessage(\n-      title: \"Why Register?\",\n-      message: kRegistrationInfoMessage as NSString\n-    )\n+  func initializeTermsAndPolicy() {\n+    TermsAndPolicy.currentTermsAndPolicy = TermsAndPolicy()\n+    let policyURL = Branding.privacyPolicyURL\n+    let terms = Branding.termsAndConditionURL\n+    TermsAndPolicy.currentTermsAndPolicy?.initWith(terms: terms, policy: policyURL)\n   }\n \n-  // MARK: -\n-\n-  /// Initial Data Setup which displays email and password.\n-  func setInitialDate() {\n-\n-    // if textfield have data then we are updating same to model object\n-\n-    var selectedCell: SignInTableViewCell =\n-      (tableView!.cellForRow(at: IndexPath(row: 0, section: 0)) as? SignInTableViewCell)!\n-\n-    let emailTextFieldValue = selectedCell.textFieldValue?.text\n-    selectedCell = (tableView!.cellForRow(at: IndexPath(row: 1, section: 0)) as? SignInTableViewCell)!\n+  /// Loads the Login request on webview.\n+  private func load() {\n+    if let request = HydraAPI.loginRequest() {\n+      webKitView.load(request)\n+    }\n+  }\n \n-    let passwordTextFieldValue = selectedCell.textFieldValue?.text\n+  fileprivate func handleDataCallback(_ url: URL) {\n+    if let code = url[\"code\"],\n+      let userID = url[\"userId\"],\n+      let status = Int(url[\"accountStatus\"] ?? \"\"),\n+      let accountStatus = AccountStatus(rawValue: status)\n+    {\n+      let delegate = UIApplication.shared.delegate as? AppDelegate\n+      delegate?.calculateTimeZoneChange()\n+      User.currentUser.userId = userID\n+      switch accountStatus {\n+      case .verified:\n+        User.currentUser.verified = true\n+        HydraAPI.grant(user: User.currentUser, with: code) { [weak self] (status, error) in\n+          if status {\n+            self?.userDidLoggedIn()\n+          } else if let error = error {\n+            self?.presentDefaultAlertWithError(\n+              error: error,\n+              animated: true,\n+              action: {\n+                SessionService.resetSession()  // Reset the session.\n+                self?.load()  // Load the login again.\n+              },\n+              completion: nil\n+            )\n+          }\n+        }\n+      case .pending:\n+        User.currentUser.verified = false\n+        navigateToVerifyController()\n+      case .tempPassword:\n+        User.currentUser.isLoggedInWithTempPassword = true\n+        self.userDidLoggedIn()\n+      }\n+    }\n+  }\n \n-    if emailTextFieldValue?.isEmpty == false && (emailTextFieldValue?.count)! > 0 {\n-      user.emailId = emailTextFieldValue\n+  private func handleScheme(for url: URL) {\n+    guard let scheme = SignInScheme(rawValue: url.lastPathComponent) else { return }\n+    switch scheme {\n+    case .forgotPassword, .signup:\n+      self.performSegue(withIdentifier: scheme.rawValue, sender: self)\n+    case .terms:\n+      let link = TermsAndPolicy.currentTermsAndPolicy?.termsURL ?? \"\"\n+      didLoadPrivacyOrTerms(title: kNavigationTitleTerms, link: link)\n+    case .privacyPolicy:\n+      let link = TermsAndPolicy.currentTermsAndPolicy?.policyURL ?? \"\"\n+      didLoadPrivacyOrTerms(title: kNavigationTitlePrivacyPolicy, link: link)\n+    case .callback:\n+      handleDataCallback(url)\n     }\n-    if passwordTextFieldValue?.isEmpty == false && (passwordTextFieldValue?.count)! > 0 {\n-      user.password = passwordTextFieldValue\n+  }\n+\n+  // MARK: - Actions\n+\n+  /// Loads the privacy or Terms screen\n+  /// - Parameters:\n+  ///   - title: Title for the screen.\n+  ///   - link: Link to load in webview.\n+  private func didLoadPrivacyOrTerms(title: String, link: String) {\n+    let mainStoryboard = UIStoryboard(name: \"Main\", bundle: .main)\n+    if let webViewController = mainStoryboard.instantiateViewController(withIdentifier: \"WebViewController\")\n+      as? UINavigationController,\n+      let webview = webViewController.viewControllers.first as? WebViewController\n+    {\n+      webview.requestLink = link\n+      webview.title = title\n+      self.navigationController?.present(webViewController, animated: true, completion: nil)\n     }\n-    self.tableView?.reloadData()\n   }\n \n-  /// Used to show the alert using Utility.\n-  func showAlertMessages(textMessage: String) {\n-    UIUtilities.showAlertMessage(\n-      \"\",\n-      errorMessage: NSLocalizedString(textMessage, comment: \"\"),\n-      errorAlertActionTitle: NSLocalizedString(\"OK\", comment: \"\"),\n-      viewControllerUsed: self\n+  // MARK: - Button Action\n+\n+  /// To Display registration information.\n+  @IBAction func buttonInfoAction(_ sender: Any) {\n+    UIUtilities.showAlertWithTitleAndMessage(\n+      title: \"Why Register?\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c34a304989d2d581dce0f276d55b373d374d7592"}, "originalPosition": 308}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcwNzY0MQ==", "bodyText": "No new texts are added in this PR. This text was moved from another place.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/921#discussion_r495707641", "createdAt": "2020-09-28T06:09:15Z", "author": {"login": "tushar-boston"}, "path": "iOS/HPHC/HPHC/Controllers/LoginRegisterUI/LoginUI/SignInViewController.swift", "diffHunk": "@@ -140,74 +101,131 @@ class SignInViewController: UIViewController {\n     }\n   }\n \n-  // MARK: - Button Action\n-\n-  @IBAction func signInButtonAction(_ sender: Any) {\n+  // MARK: - UI Utils\n \n-    self.view.endEditing(true)\n-    if (user.emailId?.isEmpty)! && (user.password?.isEmpty)! {\n-      self.showAlertMessages(textMessage: kMessageAllFieldsAreEmpty)\n-    } else if user.emailId == \"\" {\n-      self.showAlertMessages(textMessage: kMessageEmailBlank)\n-    } else if !(Utilities.isValidEmail(testStr: user.emailId!)) {\n-      self.showAlertMessages(textMessage: kMessageValidEmail)\n-\n-    } else if user.password == \"\" {\n-      self.showAlertMessages(textMessage: kMessagePasswordBlank)\n+  private func setupNavigation() {\n+    self.navigationItem.rightBarButtonItem = UIBarButtonItem(\n+      image: UIImage(named: \"info\"),\n+      style: .done,\n+      target: self,\n+      action: #selector(self.buttonInfoAction(_:))\n+    )\n+    self.title = NSLocalizedString(kSignInTitleText, comment: \"\")\n+  }\n \n-    } else {\n+  private func setupProgressView() {\n+    guard let navigationBar = navigationController?.navigationBar else { return }\n+    progressView.translatesAutoresizingMaskIntoConstraints = false\n+    navigationBar.addSubview(progressView)\n+    progressView.isHidden = true\n+    NSLayoutConstraint.activate([\n+      progressView.leadingAnchor.constraint(equalTo: navigationBar.leadingAnchor),\n+      progressView.trailingAnchor.constraint(equalTo: navigationBar.trailingAnchor),\n+      progressView.bottomAnchor.constraint(equalTo: navigationBar.bottomAnchor),\n+      progressView.heightAnchor.constraint(equalToConstant: 2.0),\n+    ])\n+  }\n \n-      let ud = UserDefaults.standard\n-      if user.emailId == kStagingUserEmailId {\n-        ud.set(true, forKey: kIsStagingUser)\n-      } else {\n-        ud.set(false, forKey: kIsStagingUser)\n-      }\n-      ud.synchronize()\n+  // MARK: - Utils\n \n-      AuthServices().loginUser(self)\n+  private func setupEstimatedProgressObserver() {\n+    estimatedProgressObserver = webKitView.observe(\\.estimatedProgress, options: [.new]) { [weak self] webView, _ in\n+      self?.progressView.progress = Float(webView.estimatedProgress)\n     }\n   }\n \n-  /// To Display registration information.\n-  @IBAction func buttonInfoAction(_ sender: Any) {\n-    UIUtilities.showAlertWithTitleAndMessage(\n-      title: \"Why Register?\",\n-      message: kRegistrationInfoMessage as NSString\n-    )\n+  func initializeTermsAndPolicy() {\n+    TermsAndPolicy.currentTermsAndPolicy = TermsAndPolicy()\n+    let policyURL = Branding.privacyPolicyURL\n+    let terms = Branding.termsAndConditionURL\n+    TermsAndPolicy.currentTermsAndPolicy?.initWith(terms: terms, policy: policyURL)\n   }\n \n-  // MARK: -\n-\n-  /// Initial Data Setup which displays email and password.\n-  func setInitialDate() {\n-\n-    // if textfield have data then we are updating same to model object\n-\n-    var selectedCell: SignInTableViewCell =\n-      (tableView!.cellForRow(at: IndexPath(row: 0, section: 0)) as? SignInTableViewCell)!\n-\n-    let emailTextFieldValue = selectedCell.textFieldValue?.text\n-    selectedCell = (tableView!.cellForRow(at: IndexPath(row: 1, section: 0)) as? SignInTableViewCell)!\n+  /// Loads the Login request on webview.\n+  private func load() {\n+    if let request = HydraAPI.loginRequest() {\n+      webKitView.load(request)\n+    }\n+  }\n \n-    let passwordTextFieldValue = selectedCell.textFieldValue?.text\n+  fileprivate func handleDataCallback(_ url: URL) {\n+    if let code = url[\"code\"],\n+      let userID = url[\"userId\"],\n+      let status = Int(url[\"accountStatus\"] ?? \"\"),\n+      let accountStatus = AccountStatus(rawValue: status)\n+    {\n+      let delegate = UIApplication.shared.delegate as? AppDelegate\n+      delegate?.calculateTimeZoneChange()\n+      User.currentUser.userId = userID\n+      switch accountStatus {\n+      case .verified:\n+        User.currentUser.verified = true\n+        HydraAPI.grant(user: User.currentUser, with: code) { [weak self] (status, error) in\n+          if status {\n+            self?.userDidLoggedIn()\n+          } else if let error = error {\n+            self?.presentDefaultAlertWithError(\n+              error: error,\n+              animated: true,\n+              action: {\n+                SessionService.resetSession()  // Reset the session.\n+                self?.load()  // Load the login again.\n+              },\n+              completion: nil\n+            )\n+          }\n+        }\n+      case .pending:\n+        User.currentUser.verified = false\n+        navigateToVerifyController()\n+      case .tempPassword:\n+        User.currentUser.isLoggedInWithTempPassword = true\n+        self.userDidLoggedIn()\n+      }\n+    }\n+  }\n \n-    if emailTextFieldValue?.isEmpty == false && (emailTextFieldValue?.count)! > 0 {\n-      user.emailId = emailTextFieldValue\n+  private func handleScheme(for url: URL) {\n+    guard let scheme = SignInScheme(rawValue: url.lastPathComponent) else { return }\n+    switch scheme {\n+    case .forgotPassword, .signup:\n+      self.performSegue(withIdentifier: scheme.rawValue, sender: self)\n+    case .terms:\n+      let link = TermsAndPolicy.currentTermsAndPolicy?.termsURL ?? \"\"\n+      didLoadPrivacyOrTerms(title: kNavigationTitleTerms, link: link)\n+    case .privacyPolicy:\n+      let link = TermsAndPolicy.currentTermsAndPolicy?.policyURL ?? \"\"\n+      didLoadPrivacyOrTerms(title: kNavigationTitlePrivacyPolicy, link: link)\n+    case .callback:\n+      handleDataCallback(url)\n     }\n-    if passwordTextFieldValue?.isEmpty == false && (passwordTextFieldValue?.count)! > 0 {\n-      user.password = passwordTextFieldValue\n+  }\n+\n+  // MARK: - Actions\n+\n+  /// Loads the privacy or Terms screen\n+  /// - Parameters:\n+  ///   - title: Title for the screen.\n+  ///   - link: Link to load in webview.\n+  private func didLoadPrivacyOrTerms(title: String, link: String) {\n+    let mainStoryboard = UIStoryboard(name: \"Main\", bundle: .main)\n+    if let webViewController = mainStoryboard.instantiateViewController(withIdentifier: \"WebViewController\")\n+      as? UINavigationController,\n+      let webview = webViewController.viewControllers.first as? WebViewController\n+    {\n+      webview.requestLink = link\n+      webview.title = title\n+      self.navigationController?.present(webViewController, animated: true, completion: nil)\n     }\n-    self.tableView?.reloadData()\n   }\n \n-  /// Used to show the alert using Utility.\n-  func showAlertMessages(textMessage: String) {\n-    UIUtilities.showAlertMessage(\n-      \"\",\n-      errorMessage: NSLocalizedString(textMessage, comment: \"\"),\n-      errorAlertActionTitle: NSLocalizedString(\"OK\", comment: \"\"),\n-      viewControllerUsed: self\n+  // MARK: - Button Action\n+\n+  /// To Display registration information.\n+  @IBAction func buttonInfoAction(_ sender: Any) {\n+    UIUtilities.showAlertWithTitleAndMessage(\n+      title: \"Why Register?\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI2NzQzMg=="}, "originalCommit": {"oid": "c34a304989d2d581dce0f276d55b373d374d7592"}, "originalPosition": 308}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzQ2NDcyOnYy", "diffSide": "RIGHT", "path": "iOS/HPHC/HPHC/Info.plist", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjoyMTo0NlrOHXX0mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNTo1Nzo1MlrOHYvYtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI2OTU5NA==", "bodyText": "what this parameter contain, base url or redirect url?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/921#discussion_r494269594", "createdAt": "2020-09-24T12:21:46Z", "author": {"login": "zohrehj"}, "path": "iOS/HPHC/HPHC/Info.plist", "diffHunk": "@@ -2,6 +2,12 @@\n <!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n <plist version=\"1.0\">\n <dict>\n+\t<key>HYDRA_WEB_BASE_URL</key>\n+\t<string>$(HYDRA_WEB_BASE_URL)</string>\n+\t<key>HYDRA_REST_BASE_URL</key>\n+\t<string>$(HYDRA_REST_BASE_URL)</string>\n+\t<key>AUTH_REDIRECT_BASE_URL</key>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c34a304989d2d581dce0f276d55b373d374d7592"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcwNDI0NQ==", "bodyText": "I've updated it after the recent deployment.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/921#discussion_r495704245", "createdAt": "2020-09-28T05:57:52Z", "author": {"login": "tushar-boston"}, "path": "iOS/HPHC/HPHC/Info.plist", "diffHunk": "@@ -2,6 +2,12 @@\n <!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n <plist version=\"1.0\">\n <dict>\n+\t<key>HYDRA_WEB_BASE_URL</key>\n+\t<string>$(HYDRA_WEB_BASE_URL)</string>\n+\t<key>HYDRA_REST_BASE_URL</key>\n+\t<string>$(HYDRA_REST_BASE_URL)</string>\n+\t<key>AUTH_REDIRECT_BASE_URL</key>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI2OTU5NA=="}, "originalCommit": {"oid": "c34a304989d2d581dce0f276d55b373d374d7592"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzQ2NzkzOnYy", "diffSide": "RIGHT", "path": "iOS/HPHC/HPHC/Info.plist", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjoyMjo0MFrOHXX2ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNTo1ODoyOVrOHYvZZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI3MDA5MA==", "bodyText": "this is the first time I am seeing two Hydra base URLs, what's the difference?\nalso I am only seeing the REST one in the config file", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/921#discussion_r494270090", "createdAt": "2020-09-24T12:22:40Z", "author": {"login": "zohrehj"}, "path": "iOS/HPHC/HPHC/Info.plist", "diffHunk": "@@ -2,6 +2,12 @@\n <!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n <plist version=\"1.0\">\n <dict>\n+\t<key>HYDRA_WEB_BASE_URL</key>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c34a304989d2d581dce0f276d55b373d374d7592"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcwNDQyMw==", "bodyText": "I've updated it after the recent deployment. There's only one base URL now.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/921#discussion_r495704423", "createdAt": "2020-09-28T05:58:29Z", "author": {"login": "tushar-boston"}, "path": "iOS/HPHC/HPHC/Info.plist", "diffHunk": "@@ -2,6 +2,12 @@\n <!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n <plist version=\"1.0\">\n <dict>\n+\t<key>HYDRA_WEB_BASE_URL</key>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI3MDA5MA=="}, "originalCommit": {"oid": "c34a304989d2d581dce0f276d55b373d374d7592"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDkxNDEyOnYy", "diffSide": "RIGHT", "path": "iOS/HPHC/HPHC/Default.xcconfig", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDozMTozMFrOHZAf_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNTo0NzozOVrOHZEurw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4NDYzNw==", "bodyText": "please fix the example URL to show our recommended deployment path; I don't think anyone would deploy Hydra to the base domain URL.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/921#discussion_r495984637", "createdAt": "2020-09-28T14:31:30Z", "author": {"login": "zohrehj"}, "path": "iOS/HPHC/HPHC/Default.xcconfig", "diffHunk": "@@ -32,9 +32,12 @@ ENROLLMENT_URL = xxxxxx\n // e.g. mystudiesdeployment.com/myStudiesConsentMgmtWS/\n CONSENTMGMT_URL = xxxxxx\n \n-// URL of AuthServer.\n-// e.g. mystudiesdeployment.com/AuthServer/\n-AUTH_URL = xxxxxx\n+// Hydra URL for auth services\n+// e.g. mystudiesdeployment.com", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0cd8f07b9362f05130bc859868a030dbe0041f8"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA1MzkzNQ==", "bodyText": "I was generating the Hydra URL and scim server URL from the AuthRouter in the code. I've now moved it into the configuration file for better clarity.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/921#discussion_r496053935", "createdAt": "2020-09-28T15:47:39Z", "author": {"login": "tushar-boston"}, "path": "iOS/HPHC/HPHC/Default.xcconfig", "diffHunk": "@@ -32,9 +32,12 @@ ENROLLMENT_URL = xxxxxx\n // e.g. mystudiesdeployment.com/myStudiesConsentMgmtWS/\n CONSENTMGMT_URL = xxxxxx\n \n-// URL of AuthServer.\n-// e.g. mystudiesdeployment.com/AuthServer/\n-AUTH_URL = xxxxxx\n+// Hydra URL for auth services\n+// e.g. mystudiesdeployment.com", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4NDYzNw=="}, "originalCommit": {"oid": "e0cd8f07b9362f05130bc859868a030dbe0041f8"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDkxNzI3OnYy", "diffSide": "RIGHT", "path": "iOS/HPHC/HPHC/Info.plist", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDozMjoxMFrOHZAh7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNTo0OToxOFrOHZEy_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4NTEzMg==", "bodyText": "Is this referring to the SCIM_OAUTH server? if yes, please keep the naming consistent with other deployments.\nIf it is the old AUTH_URL, then it should be removed since it is no longer be used. Please remove all other unused values as well.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/921#discussion_r495985132", "createdAt": "2020-09-28T14:32:10Z", "author": {"login": "zohrehj"}, "path": "iOS/HPHC/HPHC/Info.plist", "diffHunk": "@@ -2,6 +2,8 @@\n <!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n <plist version=\"1.0\">\n <dict>\n+\t<key>HYDRA_CLIENT_ID</key>\n+\t<string>$(HYDRA_CLIENT_ID)</string>\n \t<key>AUTH_PASSWORD</key>\n \t<string>$(AUTH_PASSWORD)</string>\n \t<key>AUTH_URL</key>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0cd8f07b9362f05130bc859868a030dbe0041f8"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA1NTAzNg==", "bodyText": "It's referring to scim server.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/921#discussion_r496055036", "createdAt": "2020-09-28T15:49:18Z", "author": {"login": "tushar-boston"}, "path": "iOS/HPHC/HPHC/Info.plist", "diffHunk": "@@ -2,6 +2,8 @@\n <!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n <plist version=\"1.0\">\n <dict>\n+\t<key>HYDRA_CLIENT_ID</key>\n+\t<string>$(HYDRA_CLIENT_ID)</string>\n \t<key>AUTH_PASSWORD</key>\n \t<string>$(AUTH_PASSWORD)</string>\n \t<key>AUTH_URL</key>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4NTEzMg=="}, "originalCommit": {"oid": "e0cd8f07b9362f05130bc859868a030dbe0041f8"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTQwODY5OnYy", "diffSide": "RIGHT", "path": "iOS/HPHC/HPHCTests/AuthTest.swift", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNTo1ODozMVrOHZFMOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjo1MDoxMFrOHZHK6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2MTQ5OQ==", "bodyText": "this is a very generic stub (uri can even be empty); please make sure you are mocking something that is very specific to your expected case.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/921#discussion_r496061499", "createdAt": "2020-09-28T15:58:31Z", "author": {"login": "zohrehj"}, "path": "iOS/HPHC/HPHCTests/AuthTest.swift", "diffHunk": "@@ -0,0 +1,69 @@\n+//  Copyright 2020 Google LLC\n+//\n+//  Use of this source code is governed by an MIT-style\n+//  license that can be found in the LICENSE file or at\n+//  https://opensource.org/licenses/MIT.\n+\n+import Mockingjay\n+import XCTest\n+\n+@testable import FDA_MyStudies\n+\n+class LoginTest: XCTestCase {\n+\n+  func testGrantCode() {\n+    guard let url = try? AuthRouter.codeGrant(params: [:], headers: [:]).asURLRequest().url\n+    else { return XCTFail() }\n+\n+    let responseDict: JSONDictionary = [\n+      User.JSONKey.accessToken: \"accesstoken-12345\",\n+      User.JSONKey.refreshToken: \"FXm_WOcEddMDzumj\",\n+      User.JSONKey.tokenType: \"bearer\",\n+    ]\n+\n+    guard let responseData = Utilities.dictionaryToData(value: responseDict)\n+    else { return XCTFail() }\n+\n+    // Mock the response.\n+    stub(http(.post, uri: url?.absoluteString ?? \"\"), jsonData(responseData))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e35d99028ce35c8f586bcf7ef4120534074efddb"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5MzkyOQ==", "bodyText": "I'm testing the User model layer here with the grant API. It covers the success scenario only here. The failure scenario will return some error which will be displayed on the web view. I'm not able to write UI test case for that as it's on the web which can't be mocked.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/921#discussion_r496093929", "createdAt": "2020-09-28T16:50:10Z", "author": {"login": "tushar-boston"}, "path": "iOS/HPHC/HPHCTests/AuthTest.swift", "diffHunk": "@@ -0,0 +1,69 @@\n+//  Copyright 2020 Google LLC\n+//\n+//  Use of this source code is governed by an MIT-style\n+//  license that can be found in the LICENSE file or at\n+//  https://opensource.org/licenses/MIT.\n+\n+import Mockingjay\n+import XCTest\n+\n+@testable import FDA_MyStudies\n+\n+class LoginTest: XCTestCase {\n+\n+  func testGrantCode() {\n+    guard let url = try? AuthRouter.codeGrant(params: [:], headers: [:]).asURLRequest().url\n+    else { return XCTFail() }\n+\n+    let responseDict: JSONDictionary = [\n+      User.JSONKey.accessToken: \"accesstoken-12345\",\n+      User.JSONKey.refreshToken: \"FXm_WOcEddMDzumj\",\n+      User.JSONKey.tokenType: \"bearer\",\n+    ]\n+\n+    guard let responseData = Utilities.dictionaryToData(value: responseDict)\n+    else { return XCTFail() }\n+\n+    // Mock the response.\n+    stub(http(.post, uri: url?.absoluteString ?? \"\"), jsonData(responseData))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2MTQ5OQ=="}, "originalCommit": {"oid": "e35d99028ce35c8f586bcf7ef4120534074efddb"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTQyMTQ0OnYy", "diffSide": "RIGHT", "path": "iOS/HPHC/HPHCTests/AuthTest.swift", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjowMTozM1rOHZFUVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNzo0MDo1MlrOHZJBTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2MzU3NQ==", "bodyText": "It is better to fail when something unexpected happens in test. We do not need a test to run successfully if there are changes/errors or if it is not verifying the correct things", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/921#discussion_r496063575", "createdAt": "2020-09-28T16:01:33Z", "author": {"login": "zohrehj"}, "path": "iOS/HPHC/HPHCTests/AuthTest.swift", "diffHunk": "@@ -0,0 +1,69 @@\n+//  Copyright 2020 Google LLC\n+//\n+//  Use of this source code is governed by an MIT-style\n+//  license that can be found in the LICENSE file or at\n+//  https://opensource.org/licenses/MIT.\n+\n+import Mockingjay\n+import XCTest\n+\n+@testable import FDA_MyStudies\n+\n+class LoginTest: XCTestCase {\n+\n+  func testGrantCode() {\n+    guard let url = try? AuthRouter.codeGrant(params: [:], headers: [:]).asURLRequest().url", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e35d99028ce35c8f586bcf7ef4120534074efddb"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjExNzE3Mg==", "bodyText": "please address", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/921#discussion_r496117172", "createdAt": "2020-09-28T17:28:18Z", "author": {"login": "zohrehj"}, "path": "iOS/HPHC/HPHCTests/AuthTest.swift", "diffHunk": "@@ -0,0 +1,69 @@\n+//  Copyright 2020 Google LLC\n+//\n+//  Use of this source code is governed by an MIT-style\n+//  license that can be found in the LICENSE file or at\n+//  https://opensource.org/licenses/MIT.\n+\n+import Mockingjay\n+import XCTest\n+\n+@testable import FDA_MyStudies\n+\n+class LoginTest: XCTestCase {\n+\n+  func testGrantCode() {\n+    guard let url = try? AuthRouter.codeGrant(params: [:], headers: [:]).asURLRequest().url", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2MzU3NQ=="}, "originalCommit": {"oid": "e35d99028ce35c8f586bcf7ef4120534074efddb"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEyNDIzOQ==", "bodyText": "I'm trying to generate a URL using AuthRouter and the test will fail if it returns nil. Please check the else scenario.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/921#discussion_r496124239", "createdAt": "2020-09-28T17:40:52Z", "author": {"login": "tushar-boston"}, "path": "iOS/HPHC/HPHCTests/AuthTest.swift", "diffHunk": "@@ -0,0 +1,69 @@\n+//  Copyright 2020 Google LLC\n+//\n+//  Use of this source code is governed by an MIT-style\n+//  license that can be found in the LICENSE file or at\n+//  https://opensource.org/licenses/MIT.\n+\n+import Mockingjay\n+import XCTest\n+\n+@testable import FDA_MyStudies\n+\n+class LoginTest: XCTestCase {\n+\n+  func testGrantCode() {\n+    guard let url = try? AuthRouter.codeGrant(params: [:], headers: [:]).asURLRequest().url", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2MzU3NQ=="}, "originalCommit": {"oid": "e35d99028ce35c8f586bcf7ef4120534074efddb"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTQzMzU0OnYy", "diffSide": "RIGHT", "path": "iOS/HPHC/HPHCTests/UtilitiesTest.swift", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjowNDozM1rOHZFbxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjo1MTo0M1rOHZHOew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2NTQ3OA==", "bodyText": "no need to add tests for libraries; our test should only cover our code's functionality.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/921#discussion_r496065478", "createdAt": "2020-09-28T16:04:33Z", "author": {"login": "zohrehj"}, "path": "iOS/HPHC/HPHCTests/UtilitiesTest.swift", "diffHunk": "@@ -0,0 +1,58 @@\n+//  Copyright 2020 Google LLC\n+//\n+//  Use of this source code is governed by an MIT-style\n+//  license that can be found in the LICENSE file or at\n+//  https://opensource.org/licenses/MIT.\n+\n+import XCTest\n+\n+@testable import FDA_MyStudies\n+\n+class UtilitiesTest: XCTestCase {\n+\n+  func testDictionaryToData() {\n+    let dict: JSONDictionary = [\n+      \"key1\": \"value1\",\n+      \"key2\": \"value2\",\n+    ]\n+\n+    guard let dictToData = Utilities.dictionaryToData(value: dict)\n+    else { return XCTFail() }\n+\n+    let expection = XCTestExpectation(description: \"Dictionary To JSONData\")\n+\n+    if let authDict = dictToData.toJSONDictionary() {\n+      let valueCheck = authDict[\"key1\"] as? String ?? \"\"\n+      XCTAssertEqual(valueCheck, \"value1\")\n+      expection.fulfill()\n+    } else {\n+      XCTFail()\n+    }\n+  }\n+\n+  func testRandomString() {\n+    let randomString = Utilities.randomString(length: 12)\n+\n+    let expection = XCTestExpectation(description: \"Random String Length Verified\")\n+\n+    // Result lenght\n+    let resultLenght = randomString.count\n+    XCTAssertEqual(resultLenght, 12)\n+\n+    let allowedCharacters = CharacterSet(charactersIn: \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\")\n+    let characterSet = CharacterSet(charactersIn: randomString)\n+\n+    // Allowed characters\n+    let inCharRange = allowedCharacters.isSuperset(of: characterSet)\n+    XCTAssertEqual(inCharRange, true)\n+\n+    expection.fulfill()\n+  }\n+\n+  func testBase64ToBase64url() {\n+    let testString = \"HG++thTs//\"\n+    let resultString = testString.base64ToBase64url()\n+    XCTAssertEqual(resultString, \"HG--thTs__\")\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e35d99028ce35c8f586bcf7ef4120534074efddb"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5NDg0Mw==", "bodyText": "This isn't testing any code from the library here. base64ToBase64url was new method written in the Utilities.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/921#discussion_r496094843", "createdAt": "2020-09-28T16:51:43Z", "author": {"login": "tushar-boston"}, "path": "iOS/HPHC/HPHCTests/UtilitiesTest.swift", "diffHunk": "@@ -0,0 +1,58 @@\n+//  Copyright 2020 Google LLC\n+//\n+//  Use of this source code is governed by an MIT-style\n+//  license that can be found in the LICENSE file or at\n+//  https://opensource.org/licenses/MIT.\n+\n+import XCTest\n+\n+@testable import FDA_MyStudies\n+\n+class UtilitiesTest: XCTestCase {\n+\n+  func testDictionaryToData() {\n+    let dict: JSONDictionary = [\n+      \"key1\": \"value1\",\n+      \"key2\": \"value2\",\n+    ]\n+\n+    guard let dictToData = Utilities.dictionaryToData(value: dict)\n+    else { return XCTFail() }\n+\n+    let expection = XCTestExpectation(description: \"Dictionary To JSONData\")\n+\n+    if let authDict = dictToData.toJSONDictionary() {\n+      let valueCheck = authDict[\"key1\"] as? String ?? \"\"\n+      XCTAssertEqual(valueCheck, \"value1\")\n+      expection.fulfill()\n+    } else {\n+      XCTFail()\n+    }\n+  }\n+\n+  func testRandomString() {\n+    let randomString = Utilities.randomString(length: 12)\n+\n+    let expection = XCTestExpectation(description: \"Random String Length Verified\")\n+\n+    // Result lenght\n+    let resultLenght = randomString.count\n+    XCTAssertEqual(resultLenght, 12)\n+\n+    let allowedCharacters = CharacterSet(charactersIn: \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\")\n+    let characterSet = CharacterSet(charactersIn: randomString)\n+\n+    // Allowed characters\n+    let inCharRange = allowedCharacters.isSuperset(of: characterSet)\n+    XCTAssertEqual(inCharRange, true)\n+\n+    expection.fulfill()\n+  }\n+\n+  func testBase64ToBase64url() {\n+    let testString = \"HG++thTs//\"\n+    let resultString = testString.base64ToBase64url()\n+    XCTAssertEqual(resultString, \"HG--thTs__\")\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2NTQ3OA=="}, "originalCommit": {"oid": "e35d99028ce35c8f586bcf7ef4120534074efddb"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTc3NTc3OnYy", "diffSide": "RIGHT", "path": "iOS/HPHC/HPHCTests/AuthTest.swift", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNzozMTo0NVrOHZItdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMzozODoyMVrOHbK0uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjExOTE1OA==", "bodyText": "My previous comment is not showing up any more. I had a comment regarding stubbing all requests by passing an empty URI. Please address that.\nThe whole purpose of this test is to make sure that your code is calling the correct endpoint; so you need to provide a very specific URL (including all needed parameters) to the stub.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/921#discussion_r496119158", "createdAt": "2020-09-28T17:31:45Z", "author": {"login": "zohrehj"}, "path": "iOS/HPHC/HPHCTests/AuthTest.swift", "diffHunk": "@@ -0,0 +1,64 @@\n+//  Copyright 2020 Google LLC\n+//\n+//  Use of this source code is governed by an MIT-style\n+//  license that can be found in the LICENSE file or at\n+//  https://opensource.org/licenses/MIT.\n+\n+import Mockingjay\n+import XCTest\n+\n+@testable import FDA_MyStudies\n+\n+class LoginTest: XCTestCase {\n+\n+  func testGrantCode() {\n+    guard let url = try? AuthRouter.codeGrant(params: [:], headers: [:]).asURLRequest().url\n+    else { return XCTFail() }\n+\n+    let responseDict: JSONDictionary = [\n+      User.JSONKey.accessToken: \"accesstoken-12345\",\n+      User.JSONKey.refreshToken: \"FXm_WOcEddMDzumj\",\n+      User.JSONKey.tokenType: \"bearer\",\n+    ]\n+\n+    // Mock the response.\n+    stub(http(.post, uri: url?.absoluteString ?? \"\"), json(responseDict))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd6e5bc4cb6c64f534cc45fc3beb307e61e63464"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc5Njg1MA==", "bodyText": "Do you want me to generate a URL with a string in the test case instead of getting it from the AuthRouter? stub doesn't take any parameters here. It mocks the API based on the Uri.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/921#discussion_r496796850", "createdAt": "2020-09-29T15:08:50Z", "author": {"login": "tushar-boston"}, "path": "iOS/HPHC/HPHCTests/AuthTest.swift", "diffHunk": "@@ -0,0 +1,64 @@\n+//  Copyright 2020 Google LLC\n+//\n+//  Use of this source code is governed by an MIT-style\n+//  license that can be found in the LICENSE file or at\n+//  https://opensource.org/licenses/MIT.\n+\n+import Mockingjay\n+import XCTest\n+\n+@testable import FDA_MyStudies\n+\n+class LoginTest: XCTestCase {\n+\n+  func testGrantCode() {\n+    guard let url = try? AuthRouter.codeGrant(params: [:], headers: [:]).asURLRequest().url\n+    else { return XCTFail() }\n+\n+    let responseDict: JSONDictionary = [\n+      User.JSONKey.accessToken: \"accesstoken-12345\",\n+      User.JSONKey.refreshToken: \"FXm_WOcEddMDzumj\",\n+      User.JSONKey.tokenType: \"bearer\",\n+    ]\n+\n+    // Mock the response.\n+    stub(http(.post, uri: url?.absoluteString ?? \"\"), json(responseDict))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjExOTE1OA=="}, "originalCommit": {"oid": "bd6e5bc4cb6c64f534cc45fc3beb307e61e63464"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI1MDkzOQ==", "bodyText": "I've updated it to fail the test case for an empty URL string.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/921#discussion_r498250939", "createdAt": "2020-10-01T13:38:21Z", "author": {"login": "tushar-boston"}, "path": "iOS/HPHC/HPHCTests/AuthTest.swift", "diffHunk": "@@ -0,0 +1,64 @@\n+//  Copyright 2020 Google LLC\n+//\n+//  Use of this source code is governed by an MIT-style\n+//  license that can be found in the LICENSE file or at\n+//  https://opensource.org/licenses/MIT.\n+\n+import Mockingjay\n+import XCTest\n+\n+@testable import FDA_MyStudies\n+\n+class LoginTest: XCTestCase {\n+\n+  func testGrantCode() {\n+    guard let url = try? AuthRouter.codeGrant(params: [:], headers: [:]).asURLRequest().url\n+    else { return XCTFail() }\n+\n+    let responseDict: JSONDictionary = [\n+      User.JSONKey.accessToken: \"accesstoken-12345\",\n+      User.JSONKey.refreshToken: \"FXm_WOcEddMDzumj\",\n+      User.JSONKey.tokenType: \"bearer\",\n+    ]\n+\n+    // Mock the response.\n+    stub(http(.post, uri: url?.absoluteString ?? \"\"), json(responseDict))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjExOTE1OA=="}, "originalCommit": {"oid": "bd6e5bc4cb6c64f534cc45fc3beb307e61e63464"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1977, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}