{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1MzE3NTEw", "number": 367, "title": "backend changes for update email verification API and flow [ dependent PR##357 ]", "bodyText": "This PR contains the back end changes for update email verification API and flow. This is a dependent PR for PR#357 .", "createdAt": "2020-05-08T16:25:57Z", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367", "merged": true, "mergeCommit": {"oid": "d2d44bcdae82dc9e85255f76ca86d26d12a1abbf"}, "closed": true, "closedAt": "2020-06-23T10:51:51Z", "author": {"login": "aswinijena100"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcfUAbNAH2gAyNDE1MzE3NTEwOjViNTM1YjJlM2FlYzU2NjA4ZGQzY2IxYzgxYmQ1NDcyMjljMmE1NjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuDIo6gH2gAyNDE1MzE3NTEwOjc3ODRkMTYxYjlkODIwZWJiYjRlMjlhMDY2N2RjZDlkN2RjMDNjNWQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5b535b2e3aec56608dd3cb1c81bd547229c2a560", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/5b535b2e3aec56608dd3cb1c81bd547229c2a560", "committedDate": "2020-05-08T15:56:18Z", "message": "code commit for update email verification API and flow [ Part of Pull Request #357 ]"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcaa55cca0c7bed4a3c35e4bc893037d4077cbd8", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/bcaa55cca0c7bed4a3c35e4bc893037d4077cbd8", "committedDate": "2020-05-11T12:18:59Z", "message": "Merge branch 'early-access' into early-access-verifyemail-issue-fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5MTc1MzMz", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#pullrequestreview-409175333", "createdAt": "2020-05-11T13:33:27Z", "commit": {"oid": "bcaa55cca0c7bed4a3c35e4bc893037d4077cbd8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMzozMzoyN1rOGTccJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNToxNDowMFrOGTg0Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA0MjA4NQ==", "bodyText": "This function is too complicated. Please break it into smaller pieces.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r423042085", "createdAt": "2020-05-11T13:33:27Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java", "diffHunk": "@@ -44,21 +47,24 @@\n   @Autowired private UserManagementUtil userManagementUtil;\n \n   @Autowired private CommonService commonService;\n+  @Autowired UserManagementProfileService userManagementProfService;\n \n   @PostMapping(\"/verifyEmailId\")\n   public ResponseEntity<?> verifyEmailId(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcaa55cca0c7bed4a3c35e4bc893037d4077cbd8"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzExMzc5NA==", "bodyText": "Use brackets\nWhy is comment here? Should the exception be a different type?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r423113794", "createdAt": "2020-05-11T15:14:00Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java", "diffHunk": "@@ -74,74 +80,104 @@\n       return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n     }\n     try {\n-      verificationCode = verificationForm.getCode().trim(); // trim the surrounding whitespace.\n-      VerifyCodeResponse serviceResult = userDetailsService.verifyCode(verificationCode, userId);\n-\n-      if (serviceResult != null && Boolean.TRUE.equals(serviceResult.getIsCodeVerified())) {\n-        UpdateAccountInfo accountStatus = new UpdateAccountInfo();\n-        accountStatus.setEmailVerified(true);\n-        UpdateAccountInfoResponseBean authResponse =\n-            userManagementUtil.updateUserInfoInAuthServer(\n-                accountStatus, userId, accessToken, clientToken);\n-\n-        if (authResponse != null && \"200\".equals(authResponse.getCode())) {\n-          MyStudiesUserRegUtil.getFailureResponse(\n-              MyStudiesUserRegUtil.ErrorCodes.STATUS_200.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n-              response);\n-          verifyEmailIdResponse = new VerifyEmailIdResponse();\n-          verifyEmailIdResponse.setCode(ErrorCode.EC_200.code());\n-          verifyEmailIdResponse.setMessage(ErrorCode.EC_200.errorMessage());\n-          verifyEmailIdResponse.setVerified(serviceResult.getIsCodeVerified());\n-          logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-          commonService.createActivityLog(\n-              userId,\n-              \"User Verification\",\n-              \"User verified for email \" + serviceResult.getEmailId() + \".\");\n-          return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.OK);\n-\n-        } else if (authResponse != null && \"400\".equals(authResponse.getHttpStatusCode())) {\n-          if (AppConstants.INVALID_CLIENTID_SECRETKEY.equals(authResponse.getMessage())) {\n-            MyStudiesUserRegUtil.getFailureResponse(\n-                authResponse.getCode(),\n-                MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                authResponse.getMessage(),\n-                response);\n-            verifyEmailIdResponse = new VerifyEmailIdResponse();\n-            verifyEmailIdResponse.setCode(HttpStatus.UNAUTHORIZED.value());\n-            verifyEmailIdResponse.setMessage(\n-                MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue());\n-            logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-            return new ResponseEntity<>(authResponse, HttpStatus.UNAUTHORIZED);\n-          } else {\n-            MyStudiesUserRegUtil.getFailureResponse(\n-                authResponse.getCode(),\n-                MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                authResponse.getMessage(),\n-                response);\n-            verifyEmailIdResponse = new VerifyEmailIdResponse();\n-            verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-            verifyEmailIdResponse.setMessage(\n-                MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n-            logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-            return new ResponseEntity<>(authResponse, HttpStatus.BAD_REQUEST);\n-          }\n+      isValidAppMsg =\n+          commonService.validatedUserAppDetailsByAllApi(\n+              \"\", verificationForm.getEmailId(), appId, orgId);\n+      if (!StringUtils.isEmpty(isValidAppMsg)) {\n+        AppOrgInfoBean appOrgInfoBean =\n+            commonService.getUserAppDetailsByAllApi(\n+                \"\", verificationForm.getEmailId(), appId, orgId);\n+        if (appOrgInfoBean != null) {\n+          participantDetails =\n+              userManagementProfService.getParticipantDetailsByEmail(\n+                  verificationForm.getEmailId(),\n+                  appOrgInfoBean.getAppInfoId(),\n+                  appOrgInfoBean.getOrgInfoId());\n+        }\n+        if (participantDetails != null && !participantDetails.getUserId().isEmpty()) {\n+          userId = participantDetails.getUserId();\n+          verificationCode = verificationForm.getCode().trim(); // trim the surrounding whitespace.\n+          VerifyCodeResponse serviceResult =\n+              userDetailsService.verifyCode(verificationCode, userId);\n+\n+          if (serviceResult != null && Boolean.TRUE.equals(serviceResult.getIsCodeVerified())) {\n+            UpdateAccountInfo accountStatus = new UpdateAccountInfo();\n+            accountStatus.setEmailVerified(true);\n+            UpdateAccountInfoResponseBean authResponse =\n+                userManagementUtil.updateUserInfoInAuthServer(accountStatus, userId, \"\", \"\");\n+\n+            if (authResponse != null && \"200\".equals(authResponse.getCode())) {\n+              MyStudiesUserRegUtil.getFailureResponse(\n+                  MyStudiesUserRegUtil.ErrorCodes.STATUS_200.getValue(),\n+                  MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n+                  MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n+                  response);\n+              verifyEmailIdResponse = new VerifyEmailIdResponse();\n+              verifyEmailIdResponse.setCode(ErrorCode.EC_200.code());\n+              verifyEmailIdResponse.setMessage(ErrorCode.EC_200.errorMessage());\n+              verifyEmailIdResponse.setVerified(serviceResult.getIsCodeVerified());\n+              logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n+              return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.OK);\n+\n+            } else if (authResponse != null && \"400\".equals(authResponse.getHttpStatusCode())) {\n+              if (AppConstants.INVALID_CLIENTID_SECRETKEY.equals(authResponse.getMessage())) {\n+                MyStudiesUserRegUtil.getFailureResponse(\n+                    authResponse.getCode(),\n+                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+                    authResponse.getMessage(),\n+                    response);\n+                verifyEmailIdResponse = new VerifyEmailIdResponse();\n+                verifyEmailIdResponse.setCode(HttpStatus.UNAUTHORIZED.value());\n+                verifyEmailIdResponse.setMessage(\n+                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue());\n+                logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n+\n+                return new ResponseEntity<>(authResponse, HttpStatus.UNAUTHORIZED);\n+              } else {\n+                MyStudiesUserRegUtil.getFailureResponse(\n+                    authResponse.getCode(),\n+                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+                    authResponse.getMessage(),\n+                    response);\n+                verifyEmailIdResponse = new VerifyEmailIdResponse();\n+                verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n+                verifyEmailIdResponse.setMessage(\n+                    MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n+                logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n+\n+                return new ResponseEntity<>(authResponse, HttpStatus.BAD_REQUEST);\n+              }\n+            } else {\n+              MyStudiesUserRegUtil.getFailureResponse(\n+                  500 + \"\",\n+                  MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n+                  MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n+                  response);\n+\n+              verifyEmailIdResponse = new VerifyEmailIdResponse();\n+              verifyEmailIdResponse.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n+              verifyEmailIdResponse.setMessage(\n+                  MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n+              logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n+              return new ResponseEntity<>(authResponse, HttpStatus.INTERNAL_SERVER_ERROR);\n+            }\n+          } else throw new InvalidUserIdException(); // InvalidEmailCodeException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcaa55cca0c7bed4a3c35e4bc893037d4077cbd8"}, "originalPosition": 188}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d43bece3904d796e3ef5d5ce365c971ac22cedf", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/7d43bece3904d796e3ef5d5ce365c971ac22cedf", "committedDate": "2020-05-11T15:49:51Z", "message": "Merge branch 'early-access' into early-access-verifyemail-issue-fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b123177852fc2eaa4214bedc761e2ff0e8975cb9", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/b123177852fc2eaa4214bedc761e2ff0e8975cb9", "committedDate": "2020-05-12T06:18:22Z", "message": "Merge branch 'early-access' into early-access-verifyemail-issue-fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8706d440357d30bab48cc83b4916bab2e2e9edbf", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/8706d440357d30bab48cc83b4916bab2e2e9edbf", "committedDate": "2020-05-18T07:48:00Z", "message": "Merge branch 'early-access' into early-access-verifyemail-issue-fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb52401250aeb6f60d53245009c991a50cd552a9", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/fb52401250aeb6f60d53245009c991a50cd552a9", "committedDate": "2020-05-26T07:59:49Z", "message": "Merge branch 'early-access' of https://github.com/GoogleCloudPlatform/fda-mystudies into early-access-verifyemail-issue-fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43b807b9589b567a9585f1d69072cb1f00c3536a", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/43b807b9589b567a9585f1d69072cb1f00c3536a", "committedDate": "2020-05-26T08:29:54Z", "message": "Merge branch 'early-access' into early-access-verifyemail-issue-fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c4e48d1db3aa600c6b123e3cf7df8fa05d26ab1", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/9c4e48d1db3aa600c6b123e3cf7df8fa05d26ab1", "committedDate": "2020-05-26T12:58:10Z", "message": "Merge branch 'early-access-verifyemail-issue-fix' of https://github.com/GoogleCloudPlatform/fda-mystudies into early-access-verifyemail-issue-fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43ea1c792901be898b75c15d54c902ab2ab5a2fb", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/43ea1c792901be898b75c15d54c902ab2ab5a2fb", "committedDate": "2020-05-28T09:41:32Z", "message": "code commit for issue fixes based PR#367 comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d153371e1ecfb6578c154b03a9c1e7ffa195596", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/9d153371e1ecfb6578c154b03a9c1e7ffa195596", "committedDate": "2020-05-28T13:15:34Z", "message": "Merge branch 'early-access' into early-access-verifyemail-issue-fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwMTQxMjY0", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#pullrequestreview-420141264", "createdAt": "2020-05-28T14:04:49Z", "commit": {"oid": "9d153371e1ecfb6578c154b03a9c1e7ffa195596"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNDowNDo0OVrOGb2r6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNToxNTowMlrOGb6FtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg2MDcxNQ==", "bodyText": "if (!serviceResult) {\n    throw new InvalidUserIdException();\n}\nbool serviceResponse ...", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r431860715", "createdAt": "2020-05-28T14:04:49Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java", "diffHunk": "@@ -55,170 +52,175 @@\n       @RequestHeader(\"appId\") String appId,\n       @RequestHeader(\"orgId\") String orgId,\n       @Context HttpServletResponse response) {\n+\n     logger.info(\"VerifyEmailIdController verifyEmailId() - starts\");\n     VerifyEmailIdResponse verifyEmailIdResponse = null;\n-    String verificationCode = \"\";\n     String isValidAppMsg = \"\";\n     UserDetailsBO participantDetails = null;\n-    String userId = \"\";\n+\n     if (verificationForm == null\n-        || StringUtils.isEmpty(verificationForm.getEmailId())\n-        || StringUtils.isEmpty(appId)\n-        || StringUtils.isEmpty(orgId)\n-        || StringUtils.isEmpty(verificationForm.getCode())) {\n-\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n-          response);\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue());\n+        || StringUtils.isBlank(verificationForm.getEmailId())\n+        || StringUtils.isBlank(appId)\n+        || StringUtils.isBlank(orgId)\n+        || StringUtils.isBlank(verificationForm.getCode())) {\n+\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.MISSING_REQUIRED_PARAMETER);\n       logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n       return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n     }\n     try {\n       isValidAppMsg =\n           commonService.validatedUserAppDetailsByAllApi(\n               \"\", verificationForm.getEmailId(), appId, orgId);\n-      if (!StringUtils.isEmpty(isValidAppMsg)) {\n-        AppOrgInfoBean appOrgInfoBean =\n-            commonService.getUserAppDetailsByAllApi(\n-                \"\", verificationForm.getEmailId(), appId, orgId);\n-        if (appOrgInfoBean != null) {\n-          participantDetails =\n-              userManagementProfService.getParticipantDetailsByEmail(\n-                  verificationForm.getEmailId(),\n-                  appOrgInfoBean.getAppInfoId(),\n-                  appOrgInfoBean.getOrgInfoId());\n-        }\n-        if (participantDetails != null && !participantDetails.getUserId().isEmpty()) {\n-          userId = participantDetails.getUserId();\n-          verificationCode = verificationForm.getCode().trim(); // trim the surrounding whitespace.\n-          VerifyCodeResponse serviceResult =\n-              userDetailsService.verifyCode(verificationCode, userId);\n-\n-          if (serviceResult != null && Boolean.TRUE.equals(serviceResult.getIsCodeVerified())) {\n-            UpdateAccountInfo accountStatus = new UpdateAccountInfo();\n-            accountStatus.setEmailVerified(true);\n-            UpdateAccountInfoResponseBean authResponse =\n-                userManagementUtil.updateUserInfoInAuthServer(accountStatus, userId, \"\", \"\");\n-\n-            if (authResponse != null && \"200\".equals(authResponse.getCode())) {\n-              MyStudiesUserRegUtil.getFailureResponse(\n-                  MyStudiesUserRegUtil.ErrorCodes.STATUS_200.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n-                  response);\n-              verifyEmailIdResponse = new VerifyEmailIdResponse();\n-              verifyEmailIdResponse.setCode(ErrorCode.EC_200.code());\n-              verifyEmailIdResponse.setMessage(ErrorCode.EC_200.errorMessage());\n-              verifyEmailIdResponse.setVerified(serviceResult.getIsCodeVerified());\n-              logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-              return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.OK);\n-\n-            } else if (authResponse != null && \"400\".equals(authResponse.getHttpStatusCode())) {\n-              if (AppConstants.INVALID_CLIENTID_SECRETKEY.equals(authResponse.getMessage())) {\n-                MyStudiesUserRegUtil.getFailureResponse(\n-                    authResponse.getCode(),\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                    authResponse.getMessage(),\n-                    response);\n-                verifyEmailIdResponse = new VerifyEmailIdResponse();\n-                verifyEmailIdResponse.setCode(HttpStatus.UNAUTHORIZED.value());\n-                verifyEmailIdResponse.setMessage(\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue());\n-                logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-\n-                return new ResponseEntity<>(authResponse, HttpStatus.UNAUTHORIZED);\n-              } else {\n-                MyStudiesUserRegUtil.getFailureResponse(\n-                    authResponse.getCode(),\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                    authResponse.getMessage(),\n-                    response);\n-                verifyEmailIdResponse = new VerifyEmailIdResponse();\n-                verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-                verifyEmailIdResponse.setMessage(\n-                    MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n-                logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-\n-                return new ResponseEntity<>(authResponse, HttpStatus.BAD_REQUEST);\n-              }\n-            } else {\n-              MyStudiesUserRegUtil.getFailureResponse(\n-                  500 + \"\",\n-                  MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n-                  response);\n-\n-              verifyEmailIdResponse = new VerifyEmailIdResponse();\n-              verifyEmailIdResponse.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n-              verifyEmailIdResponse.setMessage(\n-                  MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n-              logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-              return new ResponseEntity<>(authResponse, HttpStatus.INTERNAL_SERVER_ERROR);\n-            }\n-          } else throw new InvalidUserIdException(); // InvalidEmailCodeException\n-        } else {\n-          MyStudiesUserRegUtil.getFailureResponse(\n-              MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS.getValue(),\n-              response);\n-          return null;\n-        }\n-      } else {\n+\n+      if (!StringUtils.isNotEmpty(isValidAppMsg)) {\n         MyStudiesUserRegUtil.getFailureResponse(\n             MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n             MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n             MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n             response);\n         return null;\n       }\n+      AppOrgInfoBean appOrgInfoBean =\n+          commonService.getUserAppDetailsByAllApi(\"\", verificationForm.getEmailId(), appId, orgId);\n+      if (appOrgInfoBean != null) {\n+        participantDetails =\n+            userManagementProfService.getParticipantDetailsByEmail(\n+                verificationForm.getEmailId(),\n+                appOrgInfoBean.getAppInfoId(),\n+                appOrgInfoBean.getOrgInfoId());\n+      }\n+      if (participantDetails == null) {\n+        return prepareEmailNotExistsErrorResponse(response);\n+      }\n+      boolean serviceResult =\n+          verifyEmailCode(verificationForm.getCode().trim(), participantDetails.getUserId());\n+\n+      if (Boolean.TRUE.equals(serviceResult)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d153371e1ecfb6578c154b03a9c1e7ffa195596"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg2MjMwNw==", "bodyText": "if (!serviceResponse) {\n    throw new SystemException();\n}\nverifyEmailIdResponse = ...", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r431862307", "createdAt": "2020-05-28T14:07:00Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java", "diffHunk": "@@ -55,170 +52,175 @@\n       @RequestHeader(\"appId\") String appId,\n       @RequestHeader(\"orgId\") String orgId,\n       @Context HttpServletResponse response) {\n+\n     logger.info(\"VerifyEmailIdController verifyEmailId() - starts\");\n     VerifyEmailIdResponse verifyEmailIdResponse = null;\n-    String verificationCode = \"\";\n     String isValidAppMsg = \"\";\n     UserDetailsBO participantDetails = null;\n-    String userId = \"\";\n+\n     if (verificationForm == null\n-        || StringUtils.isEmpty(verificationForm.getEmailId())\n-        || StringUtils.isEmpty(appId)\n-        || StringUtils.isEmpty(orgId)\n-        || StringUtils.isEmpty(verificationForm.getCode())) {\n-\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n-          response);\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue());\n+        || StringUtils.isBlank(verificationForm.getEmailId())\n+        || StringUtils.isBlank(appId)\n+        || StringUtils.isBlank(orgId)\n+        || StringUtils.isBlank(verificationForm.getCode())) {\n+\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.MISSING_REQUIRED_PARAMETER);\n       logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n       return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n     }\n     try {\n       isValidAppMsg =\n           commonService.validatedUserAppDetailsByAllApi(\n               \"\", verificationForm.getEmailId(), appId, orgId);\n-      if (!StringUtils.isEmpty(isValidAppMsg)) {\n-        AppOrgInfoBean appOrgInfoBean =\n-            commonService.getUserAppDetailsByAllApi(\n-                \"\", verificationForm.getEmailId(), appId, orgId);\n-        if (appOrgInfoBean != null) {\n-          participantDetails =\n-              userManagementProfService.getParticipantDetailsByEmail(\n-                  verificationForm.getEmailId(),\n-                  appOrgInfoBean.getAppInfoId(),\n-                  appOrgInfoBean.getOrgInfoId());\n-        }\n-        if (participantDetails != null && !participantDetails.getUserId().isEmpty()) {\n-          userId = participantDetails.getUserId();\n-          verificationCode = verificationForm.getCode().trim(); // trim the surrounding whitespace.\n-          VerifyCodeResponse serviceResult =\n-              userDetailsService.verifyCode(verificationCode, userId);\n-\n-          if (serviceResult != null && Boolean.TRUE.equals(serviceResult.getIsCodeVerified())) {\n-            UpdateAccountInfo accountStatus = new UpdateAccountInfo();\n-            accountStatus.setEmailVerified(true);\n-            UpdateAccountInfoResponseBean authResponse =\n-                userManagementUtil.updateUserInfoInAuthServer(accountStatus, userId, \"\", \"\");\n-\n-            if (authResponse != null && \"200\".equals(authResponse.getCode())) {\n-              MyStudiesUserRegUtil.getFailureResponse(\n-                  MyStudiesUserRegUtil.ErrorCodes.STATUS_200.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n-                  response);\n-              verifyEmailIdResponse = new VerifyEmailIdResponse();\n-              verifyEmailIdResponse.setCode(ErrorCode.EC_200.code());\n-              verifyEmailIdResponse.setMessage(ErrorCode.EC_200.errorMessage());\n-              verifyEmailIdResponse.setVerified(serviceResult.getIsCodeVerified());\n-              logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-              return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.OK);\n-\n-            } else if (authResponse != null && \"400\".equals(authResponse.getHttpStatusCode())) {\n-              if (AppConstants.INVALID_CLIENTID_SECRETKEY.equals(authResponse.getMessage())) {\n-                MyStudiesUserRegUtil.getFailureResponse(\n-                    authResponse.getCode(),\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                    authResponse.getMessage(),\n-                    response);\n-                verifyEmailIdResponse = new VerifyEmailIdResponse();\n-                verifyEmailIdResponse.setCode(HttpStatus.UNAUTHORIZED.value());\n-                verifyEmailIdResponse.setMessage(\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue());\n-                logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-\n-                return new ResponseEntity<>(authResponse, HttpStatus.UNAUTHORIZED);\n-              } else {\n-                MyStudiesUserRegUtil.getFailureResponse(\n-                    authResponse.getCode(),\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                    authResponse.getMessage(),\n-                    response);\n-                verifyEmailIdResponse = new VerifyEmailIdResponse();\n-                verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-                verifyEmailIdResponse.setMessage(\n-                    MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n-                logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-\n-                return new ResponseEntity<>(authResponse, HttpStatus.BAD_REQUEST);\n-              }\n-            } else {\n-              MyStudiesUserRegUtil.getFailureResponse(\n-                  500 + \"\",\n-                  MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n-                  response);\n-\n-              verifyEmailIdResponse = new VerifyEmailIdResponse();\n-              verifyEmailIdResponse.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n-              verifyEmailIdResponse.setMessage(\n-                  MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n-              logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-              return new ResponseEntity<>(authResponse, HttpStatus.INTERNAL_SERVER_ERROR);\n-            }\n-          } else throw new InvalidUserIdException(); // InvalidEmailCodeException\n-        } else {\n-          MyStudiesUserRegUtil.getFailureResponse(\n-              MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS.getValue(),\n-              response);\n-          return null;\n-        }\n-      } else {\n+\n+      if (!StringUtils.isNotEmpty(isValidAppMsg)) {\n         MyStudiesUserRegUtil.getFailureResponse(\n             MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n             MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n             MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n             response);\n         return null;\n       }\n+      AppOrgInfoBean appOrgInfoBean =\n+          commonService.getUserAppDetailsByAllApi(\"\", verificationForm.getEmailId(), appId, orgId);\n+      if (appOrgInfoBean != null) {\n+        participantDetails =\n+            userManagementProfService.getParticipantDetailsByEmail(\n+                verificationForm.getEmailId(),\n+                appOrgInfoBean.getAppInfoId(),\n+                appOrgInfoBean.getOrgInfoId());\n+      }\n+      if (participantDetails == null) {\n+        return prepareEmailNotExistsErrorResponse(response);\n+      }\n+      boolean serviceResult =\n+          verifyEmailCode(verificationForm.getCode().trim(), participantDetails.getUserId());\n+\n+      if (Boolean.TRUE.equals(serviceResult)) {\n+        boolean serviceResponse = changeStatusInBothServers(participantDetails);\n+        if (serviceResponse) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d153371e1ecfb6578c154b03a9c1e7ffa195596"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg2NTQ1OQ==", "bodyText": "All of these catch statements are very similar. I would do\ncatch (InvalidUserIdException|InvalidEmailCodeException|InvalidRequestException e) {\n    String errMessage = mapExceptionToMessage(e);\n    verifyEmailIdResponse = prepareResponse(response, errMessage);\n    logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n    return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n}\n\nOr better yet use the type in prepareResponse instead of creating another constant", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r431865459", "createdAt": "2020-05-28T14:11:23Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java", "diffHunk": "@@ -55,170 +52,175 @@\n       @RequestHeader(\"appId\") String appId,\n       @RequestHeader(\"orgId\") String orgId,\n       @Context HttpServletResponse response) {\n+\n     logger.info(\"VerifyEmailIdController verifyEmailId() - starts\");\n     VerifyEmailIdResponse verifyEmailIdResponse = null;\n-    String verificationCode = \"\";\n     String isValidAppMsg = \"\";\n     UserDetailsBO participantDetails = null;\n-    String userId = \"\";\n+\n     if (verificationForm == null\n-        || StringUtils.isEmpty(verificationForm.getEmailId())\n-        || StringUtils.isEmpty(appId)\n-        || StringUtils.isEmpty(orgId)\n-        || StringUtils.isEmpty(verificationForm.getCode())) {\n-\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n-          response);\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue());\n+        || StringUtils.isBlank(verificationForm.getEmailId())\n+        || StringUtils.isBlank(appId)\n+        || StringUtils.isBlank(orgId)\n+        || StringUtils.isBlank(verificationForm.getCode())) {\n+\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.MISSING_REQUIRED_PARAMETER);\n       logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n       return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n     }\n     try {\n       isValidAppMsg =\n           commonService.validatedUserAppDetailsByAllApi(\n               \"\", verificationForm.getEmailId(), appId, orgId);\n-      if (!StringUtils.isEmpty(isValidAppMsg)) {\n-        AppOrgInfoBean appOrgInfoBean =\n-            commonService.getUserAppDetailsByAllApi(\n-                \"\", verificationForm.getEmailId(), appId, orgId);\n-        if (appOrgInfoBean != null) {\n-          participantDetails =\n-              userManagementProfService.getParticipantDetailsByEmail(\n-                  verificationForm.getEmailId(),\n-                  appOrgInfoBean.getAppInfoId(),\n-                  appOrgInfoBean.getOrgInfoId());\n-        }\n-        if (participantDetails != null && !participantDetails.getUserId().isEmpty()) {\n-          userId = participantDetails.getUserId();\n-          verificationCode = verificationForm.getCode().trim(); // trim the surrounding whitespace.\n-          VerifyCodeResponse serviceResult =\n-              userDetailsService.verifyCode(verificationCode, userId);\n-\n-          if (serviceResult != null && Boolean.TRUE.equals(serviceResult.getIsCodeVerified())) {\n-            UpdateAccountInfo accountStatus = new UpdateAccountInfo();\n-            accountStatus.setEmailVerified(true);\n-            UpdateAccountInfoResponseBean authResponse =\n-                userManagementUtil.updateUserInfoInAuthServer(accountStatus, userId, \"\", \"\");\n-\n-            if (authResponse != null && \"200\".equals(authResponse.getCode())) {\n-              MyStudiesUserRegUtil.getFailureResponse(\n-                  MyStudiesUserRegUtil.ErrorCodes.STATUS_200.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n-                  response);\n-              verifyEmailIdResponse = new VerifyEmailIdResponse();\n-              verifyEmailIdResponse.setCode(ErrorCode.EC_200.code());\n-              verifyEmailIdResponse.setMessage(ErrorCode.EC_200.errorMessage());\n-              verifyEmailIdResponse.setVerified(serviceResult.getIsCodeVerified());\n-              logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-              return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.OK);\n-\n-            } else if (authResponse != null && \"400\".equals(authResponse.getHttpStatusCode())) {\n-              if (AppConstants.INVALID_CLIENTID_SECRETKEY.equals(authResponse.getMessage())) {\n-                MyStudiesUserRegUtil.getFailureResponse(\n-                    authResponse.getCode(),\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                    authResponse.getMessage(),\n-                    response);\n-                verifyEmailIdResponse = new VerifyEmailIdResponse();\n-                verifyEmailIdResponse.setCode(HttpStatus.UNAUTHORIZED.value());\n-                verifyEmailIdResponse.setMessage(\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue());\n-                logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-\n-                return new ResponseEntity<>(authResponse, HttpStatus.UNAUTHORIZED);\n-              } else {\n-                MyStudiesUserRegUtil.getFailureResponse(\n-                    authResponse.getCode(),\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                    authResponse.getMessage(),\n-                    response);\n-                verifyEmailIdResponse = new VerifyEmailIdResponse();\n-                verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-                verifyEmailIdResponse.setMessage(\n-                    MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n-                logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-\n-                return new ResponseEntity<>(authResponse, HttpStatus.BAD_REQUEST);\n-              }\n-            } else {\n-              MyStudiesUserRegUtil.getFailureResponse(\n-                  500 + \"\",\n-                  MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n-                  response);\n-\n-              verifyEmailIdResponse = new VerifyEmailIdResponse();\n-              verifyEmailIdResponse.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n-              verifyEmailIdResponse.setMessage(\n-                  MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n-              logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-              return new ResponseEntity<>(authResponse, HttpStatus.INTERNAL_SERVER_ERROR);\n-            }\n-          } else throw new InvalidUserIdException(); // InvalidEmailCodeException\n-        } else {\n-          MyStudiesUserRegUtil.getFailureResponse(\n-              MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS.getValue(),\n-              response);\n-          return null;\n-        }\n-      } else {\n+\n+      if (!StringUtils.isNotEmpty(isValidAppMsg)) {\n         MyStudiesUserRegUtil.getFailureResponse(\n             MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n             MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n             MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n             response);\n         return null;\n       }\n+      AppOrgInfoBean appOrgInfoBean =\n+          commonService.getUserAppDetailsByAllApi(\"\", verificationForm.getEmailId(), appId, orgId);\n+      if (appOrgInfoBean != null) {\n+        participantDetails =\n+            userManagementProfService.getParticipantDetailsByEmail(\n+                verificationForm.getEmailId(),\n+                appOrgInfoBean.getAppInfoId(),\n+                appOrgInfoBean.getOrgInfoId());\n+      }\n+      if (participantDetails == null) {\n+        return prepareEmailNotExistsErrorResponse(response);\n+      }\n+      boolean serviceResult =\n+          verifyEmailCode(verificationForm.getCode().trim(), participantDetails.getUserId());\n+\n+      if (Boolean.TRUE.equals(serviceResult)) {\n+        boolean serviceResponse = changeStatusInBothServers(participantDetails);\n+        if (serviceResponse) {\n+          verifyEmailIdResponse = prepareResponse(response, AppConstants.SUCCESS_RESPONSE);\n+          return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.OK);\n+        } else {\n+          throw new SystemException();\n+        }\n+      } else {\n+        throw new InvalidUserIdException();\n+      }\n     } catch (InvalidUserIdException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d153371e1ecfb6578c154b03a9c1e7ffa195596"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg2NTkyNA==", "bodyText": "Don't catch Exception, explicitly catch SystemException here.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r431865924", "createdAt": "2020-05-28T14:12:06Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java", "diffHunk": "@@ -55,170 +52,175 @@\n       @RequestHeader(\"appId\") String appId,\n       @RequestHeader(\"orgId\") String orgId,\n       @Context HttpServletResponse response) {\n+\n     logger.info(\"VerifyEmailIdController verifyEmailId() - starts\");\n     VerifyEmailIdResponse verifyEmailIdResponse = null;\n-    String verificationCode = \"\";\n     String isValidAppMsg = \"\";\n     UserDetailsBO participantDetails = null;\n-    String userId = \"\";\n+\n     if (verificationForm == null\n-        || StringUtils.isEmpty(verificationForm.getEmailId())\n-        || StringUtils.isEmpty(appId)\n-        || StringUtils.isEmpty(orgId)\n-        || StringUtils.isEmpty(verificationForm.getCode())) {\n-\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n-          response);\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue());\n+        || StringUtils.isBlank(verificationForm.getEmailId())\n+        || StringUtils.isBlank(appId)\n+        || StringUtils.isBlank(orgId)\n+        || StringUtils.isBlank(verificationForm.getCode())) {\n+\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.MISSING_REQUIRED_PARAMETER);\n       logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n       return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n     }\n     try {\n       isValidAppMsg =\n           commonService.validatedUserAppDetailsByAllApi(\n               \"\", verificationForm.getEmailId(), appId, orgId);\n-      if (!StringUtils.isEmpty(isValidAppMsg)) {\n-        AppOrgInfoBean appOrgInfoBean =\n-            commonService.getUserAppDetailsByAllApi(\n-                \"\", verificationForm.getEmailId(), appId, orgId);\n-        if (appOrgInfoBean != null) {\n-          participantDetails =\n-              userManagementProfService.getParticipantDetailsByEmail(\n-                  verificationForm.getEmailId(),\n-                  appOrgInfoBean.getAppInfoId(),\n-                  appOrgInfoBean.getOrgInfoId());\n-        }\n-        if (participantDetails != null && !participantDetails.getUserId().isEmpty()) {\n-          userId = participantDetails.getUserId();\n-          verificationCode = verificationForm.getCode().trim(); // trim the surrounding whitespace.\n-          VerifyCodeResponse serviceResult =\n-              userDetailsService.verifyCode(verificationCode, userId);\n-\n-          if (serviceResult != null && Boolean.TRUE.equals(serviceResult.getIsCodeVerified())) {\n-            UpdateAccountInfo accountStatus = new UpdateAccountInfo();\n-            accountStatus.setEmailVerified(true);\n-            UpdateAccountInfoResponseBean authResponse =\n-                userManagementUtil.updateUserInfoInAuthServer(accountStatus, userId, \"\", \"\");\n-\n-            if (authResponse != null && \"200\".equals(authResponse.getCode())) {\n-              MyStudiesUserRegUtil.getFailureResponse(\n-                  MyStudiesUserRegUtil.ErrorCodes.STATUS_200.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n-                  response);\n-              verifyEmailIdResponse = new VerifyEmailIdResponse();\n-              verifyEmailIdResponse.setCode(ErrorCode.EC_200.code());\n-              verifyEmailIdResponse.setMessage(ErrorCode.EC_200.errorMessage());\n-              verifyEmailIdResponse.setVerified(serviceResult.getIsCodeVerified());\n-              logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-              return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.OK);\n-\n-            } else if (authResponse != null && \"400\".equals(authResponse.getHttpStatusCode())) {\n-              if (AppConstants.INVALID_CLIENTID_SECRETKEY.equals(authResponse.getMessage())) {\n-                MyStudiesUserRegUtil.getFailureResponse(\n-                    authResponse.getCode(),\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                    authResponse.getMessage(),\n-                    response);\n-                verifyEmailIdResponse = new VerifyEmailIdResponse();\n-                verifyEmailIdResponse.setCode(HttpStatus.UNAUTHORIZED.value());\n-                verifyEmailIdResponse.setMessage(\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue());\n-                logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-\n-                return new ResponseEntity<>(authResponse, HttpStatus.UNAUTHORIZED);\n-              } else {\n-                MyStudiesUserRegUtil.getFailureResponse(\n-                    authResponse.getCode(),\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                    authResponse.getMessage(),\n-                    response);\n-                verifyEmailIdResponse = new VerifyEmailIdResponse();\n-                verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-                verifyEmailIdResponse.setMessage(\n-                    MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n-                logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-\n-                return new ResponseEntity<>(authResponse, HttpStatus.BAD_REQUEST);\n-              }\n-            } else {\n-              MyStudiesUserRegUtil.getFailureResponse(\n-                  500 + \"\",\n-                  MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n-                  response);\n-\n-              verifyEmailIdResponse = new VerifyEmailIdResponse();\n-              verifyEmailIdResponse.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n-              verifyEmailIdResponse.setMessage(\n-                  MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n-              logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-              return new ResponseEntity<>(authResponse, HttpStatus.INTERNAL_SERVER_ERROR);\n-            }\n-          } else throw new InvalidUserIdException(); // InvalidEmailCodeException\n-        } else {\n-          MyStudiesUserRegUtil.getFailureResponse(\n-              MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS.getValue(),\n-              response);\n-          return null;\n-        }\n-      } else {\n+\n+      if (!StringUtils.isNotEmpty(isValidAppMsg)) {\n         MyStudiesUserRegUtil.getFailureResponse(\n             MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n             MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n             MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n             response);\n         return null;\n       }\n+      AppOrgInfoBean appOrgInfoBean =\n+          commonService.getUserAppDetailsByAllApi(\"\", verificationForm.getEmailId(), appId, orgId);\n+      if (appOrgInfoBean != null) {\n+        participantDetails =\n+            userManagementProfService.getParticipantDetailsByEmail(\n+                verificationForm.getEmailId(),\n+                appOrgInfoBean.getAppInfoId(),\n+                appOrgInfoBean.getOrgInfoId());\n+      }\n+      if (participantDetails == null) {\n+        return prepareEmailNotExistsErrorResponse(response);\n+      }\n+      boolean serviceResult =\n+          verifyEmailCode(verificationForm.getCode().trim(), participantDetails.getUserId());\n+\n+      if (Boolean.TRUE.equals(serviceResult)) {\n+        boolean serviceResponse = changeStatusInBothServers(participantDetails);\n+        if (serviceResponse) {\n+          verifyEmailIdResponse = prepareResponse(response, AppConstants.SUCCESS_RESPONSE);\n+          return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.OK);\n+        } else {\n+          throw new SystemException();\n+        }\n+      } else {\n+        throw new InvalidUserIdException();\n+      }\n     } catch (InvalidUserIdException e) {\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_USER_ID.getValue(),\n-          response);\n-\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(MyStudiesUserRegUtil.ErrorCodes.INVALID_USER_ID.getValue());\n-\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.INVALID_USERID_EXCEPTION);\n       logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n       return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n+\n     } catch (InvalidEmailCodeException e) {\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_CODE.getValue(),\n-          response);\n-\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_CODE.getValue());\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.INVALID_EMAIL_CODE_EXCEPTION);\n       logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n       return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n-    } catch (Exception e) {\n-      // prepare system failure Response\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          500 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n-          response);\n-\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n \n+    } catch (InvalidRequestException e) {\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.INVALID_REQUEST_EXCEPTION);\n+      logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n+      return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n+\n+    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d153371e1ecfb6578c154b03a9c1e7ffa195596"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg5Njc0MA==", "bodyText": "what is included in \"both\". Also you should use consistent language, since this calls an \"update\" function it should also be \"update\".", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r431896740", "createdAt": "2020-05-28T14:48:29Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java", "diffHunk": "@@ -55,170 +52,175 @@\n       @RequestHeader(\"appId\") String appId,\n       @RequestHeader(\"orgId\") String orgId,\n       @Context HttpServletResponse response) {\n+\n     logger.info(\"VerifyEmailIdController verifyEmailId() - starts\");\n     VerifyEmailIdResponse verifyEmailIdResponse = null;\n-    String verificationCode = \"\";\n     String isValidAppMsg = \"\";\n     UserDetailsBO participantDetails = null;\n-    String userId = \"\";\n+\n     if (verificationForm == null\n-        || StringUtils.isEmpty(verificationForm.getEmailId())\n-        || StringUtils.isEmpty(appId)\n-        || StringUtils.isEmpty(orgId)\n-        || StringUtils.isEmpty(verificationForm.getCode())) {\n-\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n-          response);\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue());\n+        || StringUtils.isBlank(verificationForm.getEmailId())\n+        || StringUtils.isBlank(appId)\n+        || StringUtils.isBlank(orgId)\n+        || StringUtils.isBlank(verificationForm.getCode())) {\n+\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.MISSING_REQUIRED_PARAMETER);\n       logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n       return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n     }\n     try {\n       isValidAppMsg =\n           commonService.validatedUserAppDetailsByAllApi(\n               \"\", verificationForm.getEmailId(), appId, orgId);\n-      if (!StringUtils.isEmpty(isValidAppMsg)) {\n-        AppOrgInfoBean appOrgInfoBean =\n-            commonService.getUserAppDetailsByAllApi(\n-                \"\", verificationForm.getEmailId(), appId, orgId);\n-        if (appOrgInfoBean != null) {\n-          participantDetails =\n-              userManagementProfService.getParticipantDetailsByEmail(\n-                  verificationForm.getEmailId(),\n-                  appOrgInfoBean.getAppInfoId(),\n-                  appOrgInfoBean.getOrgInfoId());\n-        }\n-        if (participantDetails != null && !participantDetails.getUserId().isEmpty()) {\n-          userId = participantDetails.getUserId();\n-          verificationCode = verificationForm.getCode().trim(); // trim the surrounding whitespace.\n-          VerifyCodeResponse serviceResult =\n-              userDetailsService.verifyCode(verificationCode, userId);\n-\n-          if (serviceResult != null && Boolean.TRUE.equals(serviceResult.getIsCodeVerified())) {\n-            UpdateAccountInfo accountStatus = new UpdateAccountInfo();\n-            accountStatus.setEmailVerified(true);\n-            UpdateAccountInfoResponseBean authResponse =\n-                userManagementUtil.updateUserInfoInAuthServer(accountStatus, userId, \"\", \"\");\n-\n-            if (authResponse != null && \"200\".equals(authResponse.getCode())) {\n-              MyStudiesUserRegUtil.getFailureResponse(\n-                  MyStudiesUserRegUtil.ErrorCodes.STATUS_200.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n-                  response);\n-              verifyEmailIdResponse = new VerifyEmailIdResponse();\n-              verifyEmailIdResponse.setCode(ErrorCode.EC_200.code());\n-              verifyEmailIdResponse.setMessage(ErrorCode.EC_200.errorMessage());\n-              verifyEmailIdResponse.setVerified(serviceResult.getIsCodeVerified());\n-              logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-              return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.OK);\n-\n-            } else if (authResponse != null && \"400\".equals(authResponse.getHttpStatusCode())) {\n-              if (AppConstants.INVALID_CLIENTID_SECRETKEY.equals(authResponse.getMessage())) {\n-                MyStudiesUserRegUtil.getFailureResponse(\n-                    authResponse.getCode(),\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                    authResponse.getMessage(),\n-                    response);\n-                verifyEmailIdResponse = new VerifyEmailIdResponse();\n-                verifyEmailIdResponse.setCode(HttpStatus.UNAUTHORIZED.value());\n-                verifyEmailIdResponse.setMessage(\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue());\n-                logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-\n-                return new ResponseEntity<>(authResponse, HttpStatus.UNAUTHORIZED);\n-              } else {\n-                MyStudiesUserRegUtil.getFailureResponse(\n-                    authResponse.getCode(),\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                    authResponse.getMessage(),\n-                    response);\n-                verifyEmailIdResponse = new VerifyEmailIdResponse();\n-                verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-                verifyEmailIdResponse.setMessage(\n-                    MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n-                logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-\n-                return new ResponseEntity<>(authResponse, HttpStatus.BAD_REQUEST);\n-              }\n-            } else {\n-              MyStudiesUserRegUtil.getFailureResponse(\n-                  500 + \"\",\n-                  MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n-                  response);\n-\n-              verifyEmailIdResponse = new VerifyEmailIdResponse();\n-              verifyEmailIdResponse.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n-              verifyEmailIdResponse.setMessage(\n-                  MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n-              logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-              return new ResponseEntity<>(authResponse, HttpStatus.INTERNAL_SERVER_ERROR);\n-            }\n-          } else throw new InvalidUserIdException(); // InvalidEmailCodeException\n-        } else {\n-          MyStudiesUserRegUtil.getFailureResponse(\n-              MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS.getValue(),\n-              response);\n-          return null;\n-        }\n-      } else {\n+\n+      if (!StringUtils.isNotEmpty(isValidAppMsg)) {\n         MyStudiesUserRegUtil.getFailureResponse(\n             MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n             MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n             MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n             response);\n         return null;\n       }\n+      AppOrgInfoBean appOrgInfoBean =\n+          commonService.getUserAppDetailsByAllApi(\"\", verificationForm.getEmailId(), appId, orgId);\n+      if (appOrgInfoBean != null) {\n+        participantDetails =\n+            userManagementProfService.getParticipantDetailsByEmail(\n+                verificationForm.getEmailId(),\n+                appOrgInfoBean.getAppInfoId(),\n+                appOrgInfoBean.getOrgInfoId());\n+      }\n+      if (participantDetails == null) {\n+        return prepareEmailNotExistsErrorResponse(response);\n+      }\n+      boolean serviceResult =\n+          verifyEmailCode(verificationForm.getCode().trim(), participantDetails.getUserId());\n+\n+      if (Boolean.TRUE.equals(serviceResult)) {\n+        boolean serviceResponse = changeStatusInBothServers(participantDetails);\n+        if (serviceResponse) {\n+          verifyEmailIdResponse = prepareResponse(response, AppConstants.SUCCESS_RESPONSE);\n+          return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.OK);\n+        } else {\n+          throw new SystemException();\n+        }\n+      } else {\n+        throw new InvalidUserIdException();\n+      }\n     } catch (InvalidUserIdException e) {\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_USER_ID.getValue(),\n-          response);\n-\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(MyStudiesUserRegUtil.ErrorCodes.INVALID_USER_ID.getValue());\n-\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.INVALID_USERID_EXCEPTION);\n       logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n       return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n+\n     } catch (InvalidEmailCodeException e) {\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_CODE.getValue(),\n-          response);\n-\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_CODE.getValue());\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.INVALID_EMAIL_CODE_EXCEPTION);\n       logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n       return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n-    } catch (Exception e) {\n-      // prepare system failure Response\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          500 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n-          response);\n-\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n \n+    } catch (InvalidRequestException e) {\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.INVALID_REQUEST_EXCEPTION);\n+      logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n+      return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n+\n+    } catch (Exception e) {\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.SYSTEM_EXCEPTION);\n       logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n       return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.INTERNAL_SERVER_ERROR);\n     }\n   }\n+\n+  private VerifyEmailIdResponse prepareResponse(HttpServletResponse response, String flag) {\n+    VerifyEmailIdResponse verifyEmailIdResponse = new VerifyEmailIdResponse();\n+    switch (flag) {\n+      case AppConstants.MISSING_REQUIRED_PARAMETER:\n+      case AppConstants.INVALID_REQUEST_EXCEPTION:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_400.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n+            response);\n+        verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n+        verifyEmailIdResponse.setMessage(\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue());\n+        return verifyEmailIdResponse;\n+      case AppConstants.INVALID_EMAIL_CODE_EXCEPTION:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_400.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_CODE.getValue(),\n+            response);\n+        verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n+        verifyEmailIdResponse.setMessage(\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_CODE.getValue());\n+        return verifyEmailIdResponse;\n+      case AppConstants.INVALID_USERID_EXCEPTION:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_400.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_USER_ID.getValue(),\n+            response);\n+        verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n+        verifyEmailIdResponse.setMessage(\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_USER_ID.getValue());\n+        return verifyEmailIdResponse;\n+      case AppConstants.SYSTEM_EXCEPTION:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.EC_500.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n+            response);\n+        verifyEmailIdResponse.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n+        verifyEmailIdResponse.setMessage(\n+            MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n+        return verifyEmailIdResponse;\n+      case AppConstants.SUCCESS_RESPONSE:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_200.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n+            response);\n+        verifyEmailIdResponse.setCode(ErrorCode.EC_200.code());\n+        verifyEmailIdResponse.setMessage(ErrorCode.EC_200.errorMessage());\n+        verifyEmailIdResponse.setVerified(true);\n+        return verifyEmailIdResponse;\n+\n+      default:\n+        return null;\n+    }\n+  }\n+\n+  /*\n+   * prepare email doesn't exists Error Response\n+   */\n+  private ResponseEntity<?> prepareEmailNotExistsErrorResponse(HttpServletResponse response) {\n+    MyStudiesUserRegUtil.getFailureResponse(\n+        MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n+        MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS.getValue(),\n+        MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS.getValue(),\n+        response);\n+    return null;\n+  }\n+\n+  /*\n+   * changing status in both servers", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d153371e1ecfb6578c154b03a9c1e7ffa195596"}, "originalPosition": 323}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwMDUwNQ==", "bodyText": "In fact, this is essentially recreating the logic of @ExceptionHandler. If you create a @ControllerAdvice you only need to write this once.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r431900505", "createdAt": "2020-05-28T14:53:14Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java", "diffHunk": "@@ -55,170 +52,175 @@\n       @RequestHeader(\"appId\") String appId,\n       @RequestHeader(\"orgId\") String orgId,\n       @Context HttpServletResponse response) {\n+\n     logger.info(\"VerifyEmailIdController verifyEmailId() - starts\");\n     VerifyEmailIdResponse verifyEmailIdResponse = null;\n-    String verificationCode = \"\";\n     String isValidAppMsg = \"\";\n     UserDetailsBO participantDetails = null;\n-    String userId = \"\";\n+\n     if (verificationForm == null\n-        || StringUtils.isEmpty(verificationForm.getEmailId())\n-        || StringUtils.isEmpty(appId)\n-        || StringUtils.isEmpty(orgId)\n-        || StringUtils.isEmpty(verificationForm.getCode())) {\n-\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n-          response);\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue());\n+        || StringUtils.isBlank(verificationForm.getEmailId())\n+        || StringUtils.isBlank(appId)\n+        || StringUtils.isBlank(orgId)\n+        || StringUtils.isBlank(verificationForm.getCode())) {\n+\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.MISSING_REQUIRED_PARAMETER);\n       logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n       return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n     }\n     try {\n       isValidAppMsg =\n           commonService.validatedUserAppDetailsByAllApi(\n               \"\", verificationForm.getEmailId(), appId, orgId);\n-      if (!StringUtils.isEmpty(isValidAppMsg)) {\n-        AppOrgInfoBean appOrgInfoBean =\n-            commonService.getUserAppDetailsByAllApi(\n-                \"\", verificationForm.getEmailId(), appId, orgId);\n-        if (appOrgInfoBean != null) {\n-          participantDetails =\n-              userManagementProfService.getParticipantDetailsByEmail(\n-                  verificationForm.getEmailId(),\n-                  appOrgInfoBean.getAppInfoId(),\n-                  appOrgInfoBean.getOrgInfoId());\n-        }\n-        if (participantDetails != null && !participantDetails.getUserId().isEmpty()) {\n-          userId = participantDetails.getUserId();\n-          verificationCode = verificationForm.getCode().trim(); // trim the surrounding whitespace.\n-          VerifyCodeResponse serviceResult =\n-              userDetailsService.verifyCode(verificationCode, userId);\n-\n-          if (serviceResult != null && Boolean.TRUE.equals(serviceResult.getIsCodeVerified())) {\n-            UpdateAccountInfo accountStatus = new UpdateAccountInfo();\n-            accountStatus.setEmailVerified(true);\n-            UpdateAccountInfoResponseBean authResponse =\n-                userManagementUtil.updateUserInfoInAuthServer(accountStatus, userId, \"\", \"\");\n-\n-            if (authResponse != null && \"200\".equals(authResponse.getCode())) {\n-              MyStudiesUserRegUtil.getFailureResponse(\n-                  MyStudiesUserRegUtil.ErrorCodes.STATUS_200.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n-                  response);\n-              verifyEmailIdResponse = new VerifyEmailIdResponse();\n-              verifyEmailIdResponse.setCode(ErrorCode.EC_200.code());\n-              verifyEmailIdResponse.setMessage(ErrorCode.EC_200.errorMessage());\n-              verifyEmailIdResponse.setVerified(serviceResult.getIsCodeVerified());\n-              logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-              return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.OK);\n-\n-            } else if (authResponse != null && \"400\".equals(authResponse.getHttpStatusCode())) {\n-              if (AppConstants.INVALID_CLIENTID_SECRETKEY.equals(authResponse.getMessage())) {\n-                MyStudiesUserRegUtil.getFailureResponse(\n-                    authResponse.getCode(),\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                    authResponse.getMessage(),\n-                    response);\n-                verifyEmailIdResponse = new VerifyEmailIdResponse();\n-                verifyEmailIdResponse.setCode(HttpStatus.UNAUTHORIZED.value());\n-                verifyEmailIdResponse.setMessage(\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue());\n-                logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-\n-                return new ResponseEntity<>(authResponse, HttpStatus.UNAUTHORIZED);\n-              } else {\n-                MyStudiesUserRegUtil.getFailureResponse(\n-                    authResponse.getCode(),\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                    authResponse.getMessage(),\n-                    response);\n-                verifyEmailIdResponse = new VerifyEmailIdResponse();\n-                verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-                verifyEmailIdResponse.setMessage(\n-                    MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n-                logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-\n-                return new ResponseEntity<>(authResponse, HttpStatus.BAD_REQUEST);\n-              }\n-            } else {\n-              MyStudiesUserRegUtil.getFailureResponse(\n-                  500 + \"\",\n-                  MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n-                  response);\n-\n-              verifyEmailIdResponse = new VerifyEmailIdResponse();\n-              verifyEmailIdResponse.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n-              verifyEmailIdResponse.setMessage(\n-                  MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n-              logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-              return new ResponseEntity<>(authResponse, HttpStatus.INTERNAL_SERVER_ERROR);\n-            }\n-          } else throw new InvalidUserIdException(); // InvalidEmailCodeException\n-        } else {\n-          MyStudiesUserRegUtil.getFailureResponse(\n-              MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS.getValue(),\n-              response);\n-          return null;\n-        }\n-      } else {\n+\n+      if (!StringUtils.isNotEmpty(isValidAppMsg)) {\n         MyStudiesUserRegUtil.getFailureResponse(\n             MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n             MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n             MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n             response);\n         return null;\n       }\n+      AppOrgInfoBean appOrgInfoBean =\n+          commonService.getUserAppDetailsByAllApi(\"\", verificationForm.getEmailId(), appId, orgId);\n+      if (appOrgInfoBean != null) {\n+        participantDetails =\n+            userManagementProfService.getParticipantDetailsByEmail(\n+                verificationForm.getEmailId(),\n+                appOrgInfoBean.getAppInfoId(),\n+                appOrgInfoBean.getOrgInfoId());\n+      }\n+      if (participantDetails == null) {\n+        return prepareEmailNotExistsErrorResponse(response);\n+      }\n+      boolean serviceResult =\n+          verifyEmailCode(verificationForm.getCode().trim(), participantDetails.getUserId());\n+\n+      if (Boolean.TRUE.equals(serviceResult)) {\n+        boolean serviceResponse = changeStatusInBothServers(participantDetails);\n+        if (serviceResponse) {\n+          verifyEmailIdResponse = prepareResponse(response, AppConstants.SUCCESS_RESPONSE);\n+          return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.OK);\n+        } else {\n+          throw new SystemException();\n+        }\n+      } else {\n+        throw new InvalidUserIdException();\n+      }\n     } catch (InvalidUserIdException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg2NTQ1OQ=="}, "originalCommit": {"oid": "9d153371e1ecfb6578c154b03a9c1e7ffa195596"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwNjI1NQ==", "bodyText": "you should let userDetailsService manage its own input validation.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r431906255", "createdAt": "2020-05-28T15:00:51Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java", "diffHunk": "@@ -55,170 +52,175 @@\n       @RequestHeader(\"appId\") String appId,\n       @RequestHeader(\"orgId\") String orgId,\n       @Context HttpServletResponse response) {\n+\n     logger.info(\"VerifyEmailIdController verifyEmailId() - starts\");\n     VerifyEmailIdResponse verifyEmailIdResponse = null;\n-    String verificationCode = \"\";\n     String isValidAppMsg = \"\";\n     UserDetailsBO participantDetails = null;\n-    String userId = \"\";\n+\n     if (verificationForm == null\n-        || StringUtils.isEmpty(verificationForm.getEmailId())\n-        || StringUtils.isEmpty(appId)\n-        || StringUtils.isEmpty(orgId)\n-        || StringUtils.isEmpty(verificationForm.getCode())) {\n-\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n-          response);\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue());\n+        || StringUtils.isBlank(verificationForm.getEmailId())\n+        || StringUtils.isBlank(appId)\n+        || StringUtils.isBlank(orgId)\n+        || StringUtils.isBlank(verificationForm.getCode())) {\n+\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.MISSING_REQUIRED_PARAMETER);\n       logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n       return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n     }\n     try {\n       isValidAppMsg =\n           commonService.validatedUserAppDetailsByAllApi(\n               \"\", verificationForm.getEmailId(), appId, orgId);\n-      if (!StringUtils.isEmpty(isValidAppMsg)) {\n-        AppOrgInfoBean appOrgInfoBean =\n-            commonService.getUserAppDetailsByAllApi(\n-                \"\", verificationForm.getEmailId(), appId, orgId);\n-        if (appOrgInfoBean != null) {\n-          participantDetails =\n-              userManagementProfService.getParticipantDetailsByEmail(\n-                  verificationForm.getEmailId(),\n-                  appOrgInfoBean.getAppInfoId(),\n-                  appOrgInfoBean.getOrgInfoId());\n-        }\n-        if (participantDetails != null && !participantDetails.getUserId().isEmpty()) {\n-          userId = participantDetails.getUserId();\n-          verificationCode = verificationForm.getCode().trim(); // trim the surrounding whitespace.\n-          VerifyCodeResponse serviceResult =\n-              userDetailsService.verifyCode(verificationCode, userId);\n-\n-          if (serviceResult != null && Boolean.TRUE.equals(serviceResult.getIsCodeVerified())) {\n-            UpdateAccountInfo accountStatus = new UpdateAccountInfo();\n-            accountStatus.setEmailVerified(true);\n-            UpdateAccountInfoResponseBean authResponse =\n-                userManagementUtil.updateUserInfoInAuthServer(accountStatus, userId, \"\", \"\");\n-\n-            if (authResponse != null && \"200\".equals(authResponse.getCode())) {\n-              MyStudiesUserRegUtil.getFailureResponse(\n-                  MyStudiesUserRegUtil.ErrorCodes.STATUS_200.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n-                  response);\n-              verifyEmailIdResponse = new VerifyEmailIdResponse();\n-              verifyEmailIdResponse.setCode(ErrorCode.EC_200.code());\n-              verifyEmailIdResponse.setMessage(ErrorCode.EC_200.errorMessage());\n-              verifyEmailIdResponse.setVerified(serviceResult.getIsCodeVerified());\n-              logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-              return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.OK);\n-\n-            } else if (authResponse != null && \"400\".equals(authResponse.getHttpStatusCode())) {\n-              if (AppConstants.INVALID_CLIENTID_SECRETKEY.equals(authResponse.getMessage())) {\n-                MyStudiesUserRegUtil.getFailureResponse(\n-                    authResponse.getCode(),\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                    authResponse.getMessage(),\n-                    response);\n-                verifyEmailIdResponse = new VerifyEmailIdResponse();\n-                verifyEmailIdResponse.setCode(HttpStatus.UNAUTHORIZED.value());\n-                verifyEmailIdResponse.setMessage(\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue());\n-                logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-\n-                return new ResponseEntity<>(authResponse, HttpStatus.UNAUTHORIZED);\n-              } else {\n-                MyStudiesUserRegUtil.getFailureResponse(\n-                    authResponse.getCode(),\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                    authResponse.getMessage(),\n-                    response);\n-                verifyEmailIdResponse = new VerifyEmailIdResponse();\n-                verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-                verifyEmailIdResponse.setMessage(\n-                    MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n-                logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-\n-                return new ResponseEntity<>(authResponse, HttpStatus.BAD_REQUEST);\n-              }\n-            } else {\n-              MyStudiesUserRegUtil.getFailureResponse(\n-                  500 + \"\",\n-                  MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n-                  response);\n-\n-              verifyEmailIdResponse = new VerifyEmailIdResponse();\n-              verifyEmailIdResponse.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n-              verifyEmailIdResponse.setMessage(\n-                  MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n-              logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-              return new ResponseEntity<>(authResponse, HttpStatus.INTERNAL_SERVER_ERROR);\n-            }\n-          } else throw new InvalidUserIdException(); // InvalidEmailCodeException\n-        } else {\n-          MyStudiesUserRegUtil.getFailureResponse(\n-              MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS.getValue(),\n-              response);\n-          return null;\n-        }\n-      } else {\n+\n+      if (!StringUtils.isNotEmpty(isValidAppMsg)) {\n         MyStudiesUserRegUtil.getFailureResponse(\n             MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n             MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n             MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n             response);\n         return null;\n       }\n+      AppOrgInfoBean appOrgInfoBean =\n+          commonService.getUserAppDetailsByAllApi(\"\", verificationForm.getEmailId(), appId, orgId);\n+      if (appOrgInfoBean != null) {\n+        participantDetails =\n+            userManagementProfService.getParticipantDetailsByEmail(\n+                verificationForm.getEmailId(),\n+                appOrgInfoBean.getAppInfoId(),\n+                appOrgInfoBean.getOrgInfoId());\n+      }\n+      if (participantDetails == null) {\n+        return prepareEmailNotExistsErrorResponse(response);\n+      }\n+      boolean serviceResult =\n+          verifyEmailCode(verificationForm.getCode().trim(), participantDetails.getUserId());\n+\n+      if (Boolean.TRUE.equals(serviceResult)) {\n+        boolean serviceResponse = changeStatusInBothServers(participantDetails);\n+        if (serviceResponse) {\n+          verifyEmailIdResponse = prepareResponse(response, AppConstants.SUCCESS_RESPONSE);\n+          return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.OK);\n+        } else {\n+          throw new SystemException();\n+        }\n+      } else {\n+        throw new InvalidUserIdException();\n+      }\n     } catch (InvalidUserIdException e) {\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_USER_ID.getValue(),\n-          response);\n-\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(MyStudiesUserRegUtil.ErrorCodes.INVALID_USER_ID.getValue());\n-\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.INVALID_USERID_EXCEPTION);\n       logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n       return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n+\n     } catch (InvalidEmailCodeException e) {\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_CODE.getValue(),\n-          response);\n-\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_CODE.getValue());\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.INVALID_EMAIL_CODE_EXCEPTION);\n       logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n       return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n-    } catch (Exception e) {\n-      // prepare system failure Response\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          500 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n-          response);\n-\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n \n+    } catch (InvalidRequestException e) {\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.INVALID_REQUEST_EXCEPTION);\n+      logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n+      return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n+\n+    } catch (Exception e) {\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.SYSTEM_EXCEPTION);\n       logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n       return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.INTERNAL_SERVER_ERROR);\n     }\n   }\n+\n+  private VerifyEmailIdResponse prepareResponse(HttpServletResponse response, String flag) {\n+    VerifyEmailIdResponse verifyEmailIdResponse = new VerifyEmailIdResponse();\n+    switch (flag) {\n+      case AppConstants.MISSING_REQUIRED_PARAMETER:\n+      case AppConstants.INVALID_REQUEST_EXCEPTION:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_400.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n+            response);\n+        verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n+        verifyEmailIdResponse.setMessage(\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue());\n+        return verifyEmailIdResponse;\n+      case AppConstants.INVALID_EMAIL_CODE_EXCEPTION:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_400.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_CODE.getValue(),\n+            response);\n+        verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n+        verifyEmailIdResponse.setMessage(\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_CODE.getValue());\n+        return verifyEmailIdResponse;\n+      case AppConstants.INVALID_USERID_EXCEPTION:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_400.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_USER_ID.getValue(),\n+            response);\n+        verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n+        verifyEmailIdResponse.setMessage(\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_USER_ID.getValue());\n+        return verifyEmailIdResponse;\n+      case AppConstants.SYSTEM_EXCEPTION:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.EC_500.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n+            response);\n+        verifyEmailIdResponse.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n+        verifyEmailIdResponse.setMessage(\n+            MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n+        return verifyEmailIdResponse;\n+      case AppConstants.SUCCESS_RESPONSE:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_200.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n+            response);\n+        verifyEmailIdResponse.setCode(ErrorCode.EC_200.code());\n+        verifyEmailIdResponse.setMessage(ErrorCode.EC_200.errorMessage());\n+        verifyEmailIdResponse.setVerified(true);\n+        return verifyEmailIdResponse;\n+\n+      default:\n+        return null;\n+    }\n+  }\n+\n+  /*\n+   * prepare email doesn't exists Error Response\n+   */\n+  private ResponseEntity<?> prepareEmailNotExistsErrorResponse(HttpServletResponse response) {\n+    MyStudiesUserRegUtil.getFailureResponse(\n+        MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n+        MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS.getValue(),\n+        MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS.getValue(),\n+        response);\n+    return null;\n+  }\n+\n+  /*\n+   * changing status in both servers\n+   */\n+  private boolean changeStatusInBothServers(UserDetailsBO participantDetails)\n+      throws InvalidRequestException, SystemException {\n+    if (participantDetails != null) {\n+      return userDetailsService.updateStatus(participantDetails);\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  /*\n+   * verifying EmailCode(OTP)\n+   */\n+  private boolean verifyEmailCode(String verificationCode, String userId)\n+      throws SystemException, InvalidEmailCodeException, InvalidUserIdException {\n+    if (verificationCode == null || userId == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d153371e1ecfb6578c154b03a9c1e7ffa195596"}, "originalPosition": 339}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwNjY5Mw==", "bodyText": "userDetailsService.updateStatus already has this logic.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r431906693", "createdAt": "2020-05-28T15:01:33Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java", "diffHunk": "@@ -55,170 +52,175 @@\n       @RequestHeader(\"appId\") String appId,\n       @RequestHeader(\"orgId\") String orgId,\n       @Context HttpServletResponse response) {\n+\n     logger.info(\"VerifyEmailIdController verifyEmailId() - starts\");\n     VerifyEmailIdResponse verifyEmailIdResponse = null;\n-    String verificationCode = \"\";\n     String isValidAppMsg = \"\";\n     UserDetailsBO participantDetails = null;\n-    String userId = \"\";\n+\n     if (verificationForm == null\n-        || StringUtils.isEmpty(verificationForm.getEmailId())\n-        || StringUtils.isEmpty(appId)\n-        || StringUtils.isEmpty(orgId)\n-        || StringUtils.isEmpty(verificationForm.getCode())) {\n-\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n-          response);\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue());\n+        || StringUtils.isBlank(verificationForm.getEmailId())\n+        || StringUtils.isBlank(appId)\n+        || StringUtils.isBlank(orgId)\n+        || StringUtils.isBlank(verificationForm.getCode())) {\n+\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.MISSING_REQUIRED_PARAMETER);\n       logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n       return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n     }\n     try {\n       isValidAppMsg =\n           commonService.validatedUserAppDetailsByAllApi(\n               \"\", verificationForm.getEmailId(), appId, orgId);\n-      if (!StringUtils.isEmpty(isValidAppMsg)) {\n-        AppOrgInfoBean appOrgInfoBean =\n-            commonService.getUserAppDetailsByAllApi(\n-                \"\", verificationForm.getEmailId(), appId, orgId);\n-        if (appOrgInfoBean != null) {\n-          participantDetails =\n-              userManagementProfService.getParticipantDetailsByEmail(\n-                  verificationForm.getEmailId(),\n-                  appOrgInfoBean.getAppInfoId(),\n-                  appOrgInfoBean.getOrgInfoId());\n-        }\n-        if (participantDetails != null && !participantDetails.getUserId().isEmpty()) {\n-          userId = participantDetails.getUserId();\n-          verificationCode = verificationForm.getCode().trim(); // trim the surrounding whitespace.\n-          VerifyCodeResponse serviceResult =\n-              userDetailsService.verifyCode(verificationCode, userId);\n-\n-          if (serviceResult != null && Boolean.TRUE.equals(serviceResult.getIsCodeVerified())) {\n-            UpdateAccountInfo accountStatus = new UpdateAccountInfo();\n-            accountStatus.setEmailVerified(true);\n-            UpdateAccountInfoResponseBean authResponse =\n-                userManagementUtil.updateUserInfoInAuthServer(accountStatus, userId, \"\", \"\");\n-\n-            if (authResponse != null && \"200\".equals(authResponse.getCode())) {\n-              MyStudiesUserRegUtil.getFailureResponse(\n-                  MyStudiesUserRegUtil.ErrorCodes.STATUS_200.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n-                  response);\n-              verifyEmailIdResponse = new VerifyEmailIdResponse();\n-              verifyEmailIdResponse.setCode(ErrorCode.EC_200.code());\n-              verifyEmailIdResponse.setMessage(ErrorCode.EC_200.errorMessage());\n-              verifyEmailIdResponse.setVerified(serviceResult.getIsCodeVerified());\n-              logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-              return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.OK);\n-\n-            } else if (authResponse != null && \"400\".equals(authResponse.getHttpStatusCode())) {\n-              if (AppConstants.INVALID_CLIENTID_SECRETKEY.equals(authResponse.getMessage())) {\n-                MyStudiesUserRegUtil.getFailureResponse(\n-                    authResponse.getCode(),\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                    authResponse.getMessage(),\n-                    response);\n-                verifyEmailIdResponse = new VerifyEmailIdResponse();\n-                verifyEmailIdResponse.setCode(HttpStatus.UNAUTHORIZED.value());\n-                verifyEmailIdResponse.setMessage(\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue());\n-                logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-\n-                return new ResponseEntity<>(authResponse, HttpStatus.UNAUTHORIZED);\n-              } else {\n-                MyStudiesUserRegUtil.getFailureResponse(\n-                    authResponse.getCode(),\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                    authResponse.getMessage(),\n-                    response);\n-                verifyEmailIdResponse = new VerifyEmailIdResponse();\n-                verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-                verifyEmailIdResponse.setMessage(\n-                    MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n-                logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-\n-                return new ResponseEntity<>(authResponse, HttpStatus.BAD_REQUEST);\n-              }\n-            } else {\n-              MyStudiesUserRegUtil.getFailureResponse(\n-                  500 + \"\",\n-                  MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n-                  response);\n-\n-              verifyEmailIdResponse = new VerifyEmailIdResponse();\n-              verifyEmailIdResponse.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n-              verifyEmailIdResponse.setMessage(\n-                  MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n-              logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-              return new ResponseEntity<>(authResponse, HttpStatus.INTERNAL_SERVER_ERROR);\n-            }\n-          } else throw new InvalidUserIdException(); // InvalidEmailCodeException\n-        } else {\n-          MyStudiesUserRegUtil.getFailureResponse(\n-              MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS.getValue(),\n-              response);\n-          return null;\n-        }\n-      } else {\n+\n+      if (!StringUtils.isNotEmpty(isValidAppMsg)) {\n         MyStudiesUserRegUtil.getFailureResponse(\n             MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n             MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n             MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n             response);\n         return null;\n       }\n+      AppOrgInfoBean appOrgInfoBean =\n+          commonService.getUserAppDetailsByAllApi(\"\", verificationForm.getEmailId(), appId, orgId);\n+      if (appOrgInfoBean != null) {\n+        participantDetails =\n+            userManagementProfService.getParticipantDetailsByEmail(\n+                verificationForm.getEmailId(),\n+                appOrgInfoBean.getAppInfoId(),\n+                appOrgInfoBean.getOrgInfoId());\n+      }\n+      if (participantDetails == null) {\n+        return prepareEmailNotExistsErrorResponse(response);\n+      }\n+      boolean serviceResult =\n+          verifyEmailCode(verificationForm.getCode().trim(), participantDetails.getUserId());\n+\n+      if (Boolean.TRUE.equals(serviceResult)) {\n+        boolean serviceResponse = changeStatusInBothServers(participantDetails);\n+        if (serviceResponse) {\n+          verifyEmailIdResponse = prepareResponse(response, AppConstants.SUCCESS_RESPONSE);\n+          return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.OK);\n+        } else {\n+          throw new SystemException();\n+        }\n+      } else {\n+        throw new InvalidUserIdException();\n+      }\n     } catch (InvalidUserIdException e) {\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_USER_ID.getValue(),\n-          response);\n-\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(MyStudiesUserRegUtil.ErrorCodes.INVALID_USER_ID.getValue());\n-\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.INVALID_USERID_EXCEPTION);\n       logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n       return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n+\n     } catch (InvalidEmailCodeException e) {\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_CODE.getValue(),\n-          response);\n-\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_CODE.getValue());\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.INVALID_EMAIL_CODE_EXCEPTION);\n       logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n       return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n-    } catch (Exception e) {\n-      // prepare system failure Response\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          500 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n-          response);\n-\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n \n+    } catch (InvalidRequestException e) {\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.INVALID_REQUEST_EXCEPTION);\n+      logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n+      return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n+\n+    } catch (Exception e) {\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.SYSTEM_EXCEPTION);\n       logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n       return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.INTERNAL_SERVER_ERROR);\n     }\n   }\n+\n+  private VerifyEmailIdResponse prepareResponse(HttpServletResponse response, String flag) {\n+    VerifyEmailIdResponse verifyEmailIdResponse = new VerifyEmailIdResponse();\n+    switch (flag) {\n+      case AppConstants.MISSING_REQUIRED_PARAMETER:\n+      case AppConstants.INVALID_REQUEST_EXCEPTION:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_400.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n+            response);\n+        verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n+        verifyEmailIdResponse.setMessage(\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue());\n+        return verifyEmailIdResponse;\n+      case AppConstants.INVALID_EMAIL_CODE_EXCEPTION:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_400.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_CODE.getValue(),\n+            response);\n+        verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n+        verifyEmailIdResponse.setMessage(\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_CODE.getValue());\n+        return verifyEmailIdResponse;\n+      case AppConstants.INVALID_USERID_EXCEPTION:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_400.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_USER_ID.getValue(),\n+            response);\n+        verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n+        verifyEmailIdResponse.setMessage(\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_USER_ID.getValue());\n+        return verifyEmailIdResponse;\n+      case AppConstants.SYSTEM_EXCEPTION:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.EC_500.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n+            response);\n+        verifyEmailIdResponse.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n+        verifyEmailIdResponse.setMessage(\n+            MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n+        return verifyEmailIdResponse;\n+      case AppConstants.SUCCESS_RESPONSE:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_200.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n+            response);\n+        verifyEmailIdResponse.setCode(ErrorCode.EC_200.code());\n+        verifyEmailIdResponse.setMessage(ErrorCode.EC_200.errorMessage());\n+        verifyEmailIdResponse.setVerified(true);\n+        return verifyEmailIdResponse;\n+\n+      default:\n+        return null;\n+    }\n+  }\n+\n+  /*\n+   * prepare email doesn't exists Error Response\n+   */\n+  private ResponseEntity<?> prepareEmailNotExistsErrorResponse(HttpServletResponse response) {\n+    MyStudiesUserRegUtil.getFailureResponse(\n+        MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n+        MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS.getValue(),\n+        MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS.getValue(),\n+        response);\n+    return null;\n+  }\n+\n+  /*\n+   * changing status in both servers\n+   */\n+  private boolean changeStatusInBothServers(UserDetailsBO participantDetails)\n+      throws InvalidRequestException, SystemException {\n+    if (participantDetails != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d153371e1ecfb6578c154b03a9c1e7ffa195596"}, "originalPosition": 327}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwNzA3OQ==", "bodyText": "Doesn't the logger already have the class information?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r431907079", "createdAt": "2020-05-28T15:02:07Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/FdaEaUserDetailsDaoImpl.java", "diffHunk": "@@ -36,7 +49,7 @@ public UserDetailsBO loadUserDetailsByUserId(String userId) throws SystemExcepti\n       logger.info(\"FdaEaUserDetailsDaoImpl loadUserDetailsByUserId() - ends\");\n       return userDetailsBO;\n     } catch (Exception e) {\n-      logger.error(\"UserRegistrationController.registerUser(): \", e);\n+      logger.error(\"FdaEaUserDetailsDaoImpl.loadUserDetailsByUserId(): \", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d153371e1ecfb6578c154b03a9c1e7ffa195596"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwODYxMA==", "bodyText": "if (participantDetails == null) {\n    throw new InvalidArgumentException();\n}", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r431908610", "createdAt": "2020-05-28T15:04:08Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/FdaEaUserDetailsDaoImpl.java", "diffHunk": "@@ -71,8 +84,87 @@ public UserDetailsBO loadEmailCodeByUserId(String userId) throws SystemException\n         return dbResponse;\n       }\n     } catch (Exception e) {\n-      logger.error(\"FdaEaUserDetailsDaoImpl.loadEmailCodeByUserId(): \", e);\n+      logger.error(\"FdaEaUserDetailsDaoImpl loadEmailCodeByUserId(): \", e);\n       throw new SystemException();\n     }\n   }\n+\n+  @Override\n+  public boolean updateStatus(UserDetailsBO participantDetails)\n+      throws InvalidRequestException, SystemException {\n+\n+    logger.info(\"FdaEaUserDetailsDaoImpl updateStatus() - starts\");\n+    if (participantDetails != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d153371e1ecfb6578c154b03a9c1e7ffa195596"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwODkyNA==", "bodyText": "@Transactional?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r431908924", "createdAt": "2020-05-28T15:04:36Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/FdaEaUserDetailsDaoImpl.java", "diffHunk": "@@ -71,8 +84,87 @@ public UserDetailsBO loadEmailCodeByUserId(String userId) throws SystemException\n         return dbResponse;\n       }\n     } catch (Exception e) {\n-      logger.error(\"FdaEaUserDetailsDaoImpl.loadEmailCodeByUserId(): \", e);\n+      logger.error(\"FdaEaUserDetailsDaoImpl loadEmailCodeByUserId(): \", e);\n       throw new SystemException();\n     }\n   }\n+\n+  @Override\n+  public boolean updateStatus(UserDetailsBO participantDetails)\n+      throws InvalidRequestException, SystemException {\n+\n+    logger.info(\"FdaEaUserDetailsDaoImpl updateStatus() - starts\");\n+    if (participantDetails != null) {\n+      Transaction transaction = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d153371e1ecfb6578c154b03a9c1e7ffa195596"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwOTA0MA==", "bodyText": "Constant?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r431909040", "createdAt": "2020-05-28T15:04:46Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/FdaEaUserDetailsDaoImpl.java", "diffHunk": "@@ -71,8 +84,87 @@ public UserDetailsBO loadEmailCodeByUserId(String userId) throws SystemException\n         return dbResponse;\n       }\n     } catch (Exception e) {\n-      logger.error(\"FdaEaUserDetailsDaoImpl.loadEmailCodeByUserId(): \", e);\n+      logger.error(\"FdaEaUserDetailsDaoImpl loadEmailCodeByUserId(): \", e);\n       throw new SystemException();\n     }\n   }\n+\n+  @Override\n+  public boolean updateStatus(UserDetailsBO participantDetails)\n+      throws InvalidRequestException, SystemException {\n+\n+    logger.info(\"FdaEaUserDetailsDaoImpl updateStatus() - starts\");\n+    if (participantDetails != null) {\n+      Transaction transaction = null;\n+      try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+        transaction = session.beginTransaction();\n+\n+        participantDetails.setEmailCode(null);\n+        participantDetails.setCodeExpireDate(null);\n+        participantDetails.setStatus(1); // status 1--->> user's emailId verified", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d153371e1ecfb6578c154b03a9c1e7ffa195596"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwOTc2MQ==", "bodyText": "You should create another constructor that wraps the thrown exception to help with debugging.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r431909761", "createdAt": "2020-05-28T15:05:50Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/FdaEaUserDetailsDaoImpl.java", "diffHunk": "@@ -71,8 +84,87 @@ public UserDetailsBO loadEmailCodeByUserId(String userId) throws SystemException\n         return dbResponse;\n       }\n     } catch (Exception e) {\n-      logger.error(\"FdaEaUserDetailsDaoImpl.loadEmailCodeByUserId(): \", e);\n+      logger.error(\"FdaEaUserDetailsDaoImpl loadEmailCodeByUserId(): \", e);\n       throw new SystemException();\n     }\n   }\n+\n+  @Override\n+  public boolean updateStatus(UserDetailsBO participantDetails)\n+      throws InvalidRequestException, SystemException {\n+\n+    logger.info(\"FdaEaUserDetailsDaoImpl updateStatus() - starts\");\n+    if (participantDetails != null) {\n+      Transaction transaction = null;\n+      try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+        transaction = session.beginTransaction();\n+\n+        participantDetails.setEmailCode(null);\n+        participantDetails.setCodeExpireDate(null);\n+        participantDetails.setStatus(1); // status 1--->> user's emailId verified\n+        session.update(participantDetails);\n+\n+        UpdateAccountInfo accountStatus = new UpdateAccountInfo();\n+        accountStatus.setEmailVerified(true);\n+        userManagementUtil.updateUserInfoInAuthServer(\n+            accountStatus, participantDetails.getUserId());\n+\n+        transaction.commit();\n+        return true;\n+      } catch (Exception e) {\n+        logger.error(\"FdaEaUserDetailsDaoImpl updateStatus(): \", e);\n+        if (transaction != null) {\n+          try {\n+            transaction.rollback();\n+          } catch (Exception e1) {\n+            logger.error(\"FdaEaUserDetailsDaoImpl updateStatus(): \", e);\n+          }\n+        }\n+        if (e instanceof InvalidRequestException) {\n+          throw new InvalidRequestException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d153371e1ecfb6578c154b03a9c1e7ffa195596"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxMDA3MA==", "bodyText": "Same issues as the previous method.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r431910070", "createdAt": "2020-05-28T15:06:17Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/FdaEaUserDetailsDaoImpl.java", "diffHunk": "@@ -71,8 +84,87 @@ public UserDetailsBO loadEmailCodeByUserId(String userId) throws SystemException\n         return dbResponse;\n       }\n     } catch (Exception e) {\n-      logger.error(\"FdaEaUserDetailsDaoImpl.loadEmailCodeByUserId(): \", e);\n+      logger.error(\"FdaEaUserDetailsDaoImpl loadEmailCodeByUserId(): \", e);\n       throw new SystemException();\n     }\n   }\n+\n+  @Override\n+  public boolean updateStatus(UserDetailsBO participantDetails)\n+      throws InvalidRequestException, SystemException {\n+\n+    logger.info(\"FdaEaUserDetailsDaoImpl updateStatus() - starts\");\n+    if (participantDetails != null) {\n+      Transaction transaction = null;\n+      try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+        transaction = session.beginTransaction();\n+\n+        participantDetails.setEmailCode(null);\n+        participantDetails.setCodeExpireDate(null);\n+        participantDetails.setStatus(1); // status 1--->> user's emailId verified\n+        session.update(participantDetails);\n+\n+        UpdateAccountInfo accountStatus = new UpdateAccountInfo();\n+        accountStatus.setEmailVerified(true);\n+        userManagementUtil.updateUserInfoInAuthServer(\n+            accountStatus, participantDetails.getUserId());\n+\n+        transaction.commit();\n+        return true;\n+      } catch (Exception e) {\n+        logger.error(\"FdaEaUserDetailsDaoImpl updateStatus(): \", e);\n+        if (transaction != null) {\n+          try {\n+            transaction.rollback();\n+          } catch (Exception e1) {\n+            logger.error(\"FdaEaUserDetailsDaoImpl updateStatus(): \", e);\n+          }\n+        }\n+        if (e instanceof InvalidRequestException) {\n+          throw new InvalidRequestException();\n+        } else {\n+          throw new SystemException();\n+        }\n+      }\n+    } else {\n+      logger.info(\"FdaEaUserDetailsDaoImpl updateStatus() - ends\");\n+      return false;\n+    }\n+  }\n+\n+  @Override\n+  public boolean saveAllRecords(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d153371e1ecfb6578c154b03a9c1e7ffa195596"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxMTE5OA==", "bodyText": "if (userId == null) {\n    throw new Invalid...Exception();\n}", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r431911198", "createdAt": "2020-05-28T15:07:50Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/FdaEaUserDetailsServiceImpl.java", "diffHunk": "@@ -77,11 +77,11 @@ public UserDetailsBO loadUserDetailsByUserId(String userId) throws SystemExcepti\n   }\n \n   @Override\n-  public VerifyCodeResponse verifyCode(String code, String userId)\n-      throws SystemException, InvalidUserIdException, InvalidEmailCodeException {\n+  public boolean verifyCode(String code, String userId)\n+      throws InvalidUserIdException, InvalidEmailCodeException, SystemException {\n \n-    logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - calls\");\n-    VerifyCodeResponse response = null;\n+    logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - startes\");\n+    boolean response = false;\n     UserDetailsBO daoResopnse = null;\n     if (userId != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d153371e1ecfb6578c154b03a9c1e7ffa195596"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxMTI4Mw==", "bodyText": "typo", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r431911283", "createdAt": "2020-05-28T15:07:57Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/FdaEaUserDetailsServiceImpl.java", "diffHunk": "@@ -77,11 +77,11 @@ public UserDetailsBO loadUserDetailsByUserId(String userId) throws SystemExcepti\n   }\n \n   @Override\n-  public VerifyCodeResponse verifyCode(String code, String userId)\n-      throws SystemException, InvalidUserIdException, InvalidEmailCodeException {\n+  public boolean verifyCode(String code, String userId)\n+      throws InvalidUserIdException, InvalidEmailCodeException, SystemException {\n \n-    logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - calls\");\n-    VerifyCodeResponse response = null;\n+    logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - startes\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d153371e1ecfb6578c154b03a9c1e7ffa195596"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxMjUzMg==", "bodyText": "All code paths either throw an Exception or return true. You should either return false and throw and exception from the caller, or return void.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r431912532", "createdAt": "2020-05-28T15:09:40Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/FdaEaUserDetailsServiceImpl.java", "diffHunk": "@@ -90,26 +90,28 @@ public VerifyCodeResponse verifyCode(String code, String userId)\n         if (code.equals(daoResopnse.getEmailCode())\n             && LocalDateTime.now().isBefore(daoResopnse.getCodeExpireDate())) {\n           logger.info(\"(S)......OTP CODE VERIFIED as true\");\n-\n-          daoResopnse.setStatus(1);\n-          daoResopnse.setEmailCode(null);\n-          daoResopnse.setCodeExpireDate(null);\n-          UserDetailsBO updatedUserDetails = userDetailsDao.saveUser(daoResopnse);\n-\n-          if (updatedUserDetails != null) {\n-            if (updatedUserDetails.getStatus() == 1) {\n-              response = new VerifyCodeResponse();\n-              response.setEmailId(updatedUserDetails.getEmail());\n-              response.setIsCodeVerified(true);\n-              return response;\n-            } else return response;\n-          } else throw new SystemException();\n-        } else throw new InvalidEmailCodeException();\n+          return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d153371e1ecfb6578c154b03a9c1e7ffa195596"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxMjk3Nw==", "bodyText": "Same as before, let updateStatus do its own validation.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r431912977", "createdAt": "2020-05-28T15:10:17Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/FdaEaUserDetailsServiceImpl.java", "diffHunk": "@@ -90,26 +90,28 @@ public VerifyCodeResponse verifyCode(String code, String userId)\n         if (code.equals(daoResopnse.getEmailCode())\n             && LocalDateTime.now().isBefore(daoResopnse.getCodeExpireDate())) {\n           logger.info(\"(S)......OTP CODE VERIFIED as true\");\n-\n-          daoResopnse.setStatus(1);\n-          daoResopnse.setEmailCode(null);\n-          daoResopnse.setCodeExpireDate(null);\n-          UserDetailsBO updatedUserDetails = userDetailsDao.saveUser(daoResopnse);\n-\n-          if (updatedUserDetails != null) {\n-            if (updatedUserDetails.getStatus() == 1) {\n-              response = new VerifyCodeResponse();\n-              response.setEmailId(updatedUserDetails.getEmail());\n-              response.setIsCodeVerified(true);\n-              return response;\n-            } else return response;\n-          } else throw new SystemException();\n-        } else throw new InvalidEmailCodeException();\n+          return true;\n+        } else {\n+          logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - ends\");\n+          throw new InvalidEmailCodeException();\n+        }\n       } else {\n-        logger.info(\"No User Found Exception\");\n+        logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - ends\");\n         throw new InvalidUserIdException();\n       }\n     }\n     return response;\n   }\n+\n+  @Override\n+  public boolean updateStatus(UserDetailsBO participantDetails)\n+      throws InvalidRequestException, SystemException {\n+    logger.info(\"FdaEaUserDetailsServiceImpl updateStatus() - starts\");\n+    if (participantDetails != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d153371e1ecfb6578c154b03a9c1e7ffa195596"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxNjIzMA==", "bodyText": "move log outside if statement so you don't have to duplicate?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r431916230", "createdAt": "2020-05-28T15:14:43Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/UserManagementUtil.java", "diffHunk": "@@ -173,40 +168,13 @@ public UpdateAccountInfoResponseBean updateUserInfoInAuthServer(\n \n     } catch (RestClientResponseException e) {\n \n-      if (e.getRawStatusCode() == 401) {\n-        Set<Entry<String, List<String>>> headerSet = e.getResponseHeaders().entrySet();\n-        authResponse = new UpdateAccountInfoResponseBean();\n-        for (Entry<String, List<String>> entry : headerSet) {\n-\n-          if (AppConstants.STATUS.equals(entry.getKey())) {\n-            authResponse.setCode(entry.getValue().get(0));\n-          }\n-          if (AppConstants.STATUS_MESSAGE.equals(entry.getKey())) {\n-            authResponse.setMessage(entry.getValue().get(0));\n-          }\n-        }\n-        authResponse.setHttpStatusCode(401 + \"\");\n-\n-      } else if (e.getRawStatusCode() == 500) {\n-        authResponse = new UpdateAccountInfoResponseBean();\n-        authResponse.setHttpStatusCode(500 + \"\");\n-\n+      if (e.getRawStatusCode() == 400) {\n+        logger.info(\"(Util)....UserRegistrationController.updateUserInfoInAuthServer()......ENDED\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d153371e1ecfb6578c154b03a9c1e7ffa195596"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxNjQ2OA==", "bodyText": "wrap original exception", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r431916468", "createdAt": "2020-05-28T15:15:02Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/UserManagementUtil.java", "diffHunk": "@@ -173,40 +168,13 @@ public UpdateAccountInfoResponseBean updateUserInfoInAuthServer(\n \n     } catch (RestClientResponseException e) {\n \n-      if (e.getRawStatusCode() == 401) {\n-        Set<Entry<String, List<String>>> headerSet = e.getResponseHeaders().entrySet();\n-        authResponse = new UpdateAccountInfoResponseBean();\n-        for (Entry<String, List<String>> entry : headerSet) {\n-\n-          if (AppConstants.STATUS.equals(entry.getKey())) {\n-            authResponse.setCode(entry.getValue().get(0));\n-          }\n-          if (AppConstants.STATUS_MESSAGE.equals(entry.getKey())) {\n-            authResponse.setMessage(entry.getValue().get(0));\n-          }\n-        }\n-        authResponse.setHttpStatusCode(401 + \"\");\n-\n-      } else if (e.getRawStatusCode() == 500) {\n-        authResponse = new UpdateAccountInfoResponseBean();\n-        authResponse.setHttpStatusCode(500 + \"\");\n-\n+      if (e.getRawStatusCode() == 400) {\n+        logger.info(\"(Util)....UserRegistrationController.updateUserInfoInAuthServer()......ENDED\");\n+        throw new InvalidRequestException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d153371e1ecfb6578c154b03a9c1e7ffa195596"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwMjIxMTAz", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#pullrequestreview-420221103", "createdAt": "2020-05-28T15:19:17Z", "commit": {"oid": "9d153371e1ecfb6578c154b03a9c1e7ffa195596"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNToxOToxN1rOGb6R3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNToxOToxN1rOGb6R3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxOTU4MQ==", "bodyText": "Use HttpStatus code instead", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r431919581", "createdAt": "2020-05-28T15:19:17Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/MyStudiesUserRegUtil.java", "diffHunk": "@@ -50,6 +50,9 @@\n     STATUS_129(\"129\"), // Client Id is missing\n     STATUS_130(\"130\"), // Secret Key is missing\n \n+    STATUS_400(\"400\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d153371e1ecfb6578c154b03a9c1e7ffa195596"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d1351fff9816f936498af4c2605a95b36f7aa11", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/1d1351fff9816f936498af4c2605a95b36f7aa11", "committedDate": "2020-05-29T05:56:35Z", "message": "Merge branch 'early-access' into early-access-verifyemail-issue-fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a7739ebae1d9e5fbf779622b291603ec47dbf29", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/6a7739ebae1d9e5fbf779622b291603ec47dbf29", "committedDate": "2020-06-02T16:43:46Z", "message": "Merge branch 'early-access' into early-access-verifyemail-issue-fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d485c74a75e6ab87ecc8e4f146ab8308c3de809", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/1d485c74a75e6ab87ecc8e4f146ab8308c3de809", "committedDate": "2020-06-10T18:20:04Z", "message": "PR comment issue fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cf6db4d27ced2c86d7e08583022b88cf72e346b", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/5cf6db4d27ced2c86d7e08583022b88cf72e346b", "committedDate": "2020-06-10T18:52:17Z", "message": "Merge branch 'early-access' into early-access-verifyemail-issue-fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MDUyODgz", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#pullrequestreview-429052883", "createdAt": "2020-06-11T15:50:29Z", "commit": {"oid": "5cf6db4d27ced2c86d7e08583022b88cf72e346b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNTo1MDoyOVrOGijyIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzoxODoyN1rOGinFfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg5MTA0Mw==", "bodyText": "Remove debugging statement", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r438891043", "createdAt": "2020-06-11T15:50:29Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/UserManagementUtil.java", "diffHunk": "@@ -228,21 +177,21 @@ public DeleteAccountInfoResponseBean deleteUserInfoInAuthServer(\n           restTemplate.exchange(\n               appConfig.getAuthServerDeleteStatusUrl(), HttpMethod.DELETE, request, String.class);\n \n-      if (responseEntity.getStatusCode() != HttpStatus.OK) {\n-        return authResponse;\n-      }\n-\n-      String body = (String) responseEntity.getBody();\n-      objectMapper = new ObjectMapper();\n-\n-      try {\n-        authResponse = objectMapper.readValue(body, DeleteAccountInfoResponseBean.class);\n-        return authResponse;\n-      } catch (JsonParseException e) {\n-        return authResponse;\n-      } catch (JsonMappingException e) {\n-        return authResponse;\n-      } catch (IOException e) {\n+      if (responseEntity.getStatusCode() == HttpStatus.OK) {\n+        String body = (String) responseEntity.getBody();\n+        objectMapper = new ObjectMapper();\n+        try {\n+          authResponse = objectMapper.readValue(body, DeleteAccountInfoResponseBean.class);\n+          logger.info(\"authResponse: \" + authResponse);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cf6db4d27ced2c86d7e08583022b88cf72e346b"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg5MzA3OQ==", "bodyText": "These 4 values aren't used anywhere. Please remove.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r438893079", "createdAt": "2020-06-11T15:52:40Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/AppConstants.java", "diffHunk": "@@ -70,4 +70,19 @@ private AppConstants() {}\n   public static final String GATEWAY = \"Gateway\";\n \n   public static final String WITHDRAWN = \"Withdrawn\";\n+\n+  public static final String STATUS_200 = \"200\";\n+  public static final String STATUS_400 = \"400\";\n+  public static final String STATUS_401 = \"401\";\n+  public static final String OK = \"OK\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cf6db4d27ced2c86d7e08583022b88cf72e346b"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg5MzYwNA==", "bodyText": "SUCCESS_RESPONSE, EMAIL_EXISTS_RESPONSE and INVALID_APPID_AND_ORGID are also not used.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r438893604", "createdAt": "2020-06-11T15:53:10Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/AppConstants.java", "diffHunk": "@@ -70,4 +70,19 @@ private AppConstants() {}\n   public static final String GATEWAY = \"Gateway\";\n \n   public static final String WITHDRAWN = \"Withdrawn\";\n+\n+  public static final String STATUS_200 = \"200\";\n+  public static final String STATUS_400 = \"400\";\n+  public static final String STATUS_401 = \"401\";\n+  public static final String OK = \"OK\";\n+  public static final String MISSING_REQUIRED_PARAMETER = \"MissingRequiredParameter\";\n+  public static final String INVALID_REQUEST_EXCEPTION = \"InvalidRequestException\";\n+  public static final String INVALID_EMAIL_CODE_EXCEPTION = \"InvalidEmailCodeException\";\n+  public static final String INVALID_USERID_EXCEPTION = \"InvalidUserIdException\";\n+  public static final String SYSTEM_EXCEPTION = \"SystemException\";\n+  public static final String SUCCESS_RESPONSE = \"SuccessResponse\";\n+  public static final String EMAIL_EXISTS_RESPONSE = \"EmailExistsResponse\";\n+  public static final String INVALID_APPID_AND_ORGID = \"INVALID_APPID_AND_ORGID\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cf6db4d27ced2c86d7e08583022b88cf72e346b"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg5Mzk1Mg==", "bodyText": "Comment is unnecessary, constant name is clear.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r438893952", "createdAt": "2020-06-11T15:53:33Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/FdaEaUserDetailsServiceImpl.java", "diffHunk": "@@ -77,39 +81,46 @@ public UserDetailsBO loadUserDetailsByUserId(String userId) throws SystemExcepti\n   }\n \n   @Override\n-  public VerifyCodeResponse verifyCode(String code, String userId)\n-      throws SystemException, InvalidUserIdException, InvalidEmailCodeException {\n-\n-    logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - calls\");\n-    VerifyCodeResponse response = null;\n-    UserDetailsBO daoResopnse = null;\n-    if (userId != null) {\n-      daoResopnse = userDetailsDao.loadEmailCodeByUserId(userId);\n-\n-      if (daoResopnse != null) {\n-        if (code.equals(daoResopnse.getEmailCode())\n-            && !LocalDateTime.now().isAfter(daoResopnse.getCodeExpireDate())) {\n-          logger.info(\"(S)......OTP CODE VERIFIED as true\");\n-\n-          daoResopnse.setStatus(1);\n-          daoResopnse.setEmailCode(null);\n-          daoResopnse.setCodeExpireDate(null);\n-          UserDetailsBO updatedUserDetails = userDetailsDao.saveUser(daoResopnse);\n+  public boolean verifyCode(String code, UserDetailsBO participantDetails) throws SystemException {\n+    logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - starts\");\n+    boolean result = code == null || participantDetails == null;\n+    if (result) {\n+      throw new IllegalArgumentException();\n+    }\n+    if (code.equals(participantDetails.getEmailCode())\n+        && LocalDateTime.now().isBefore(participantDetails.getCodeExpireDate())) {\n+      return true;\n+    } else {\n+      logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - ends\");\n+      return false;\n+    }\n+  }\n \n-          if (updatedUserDetails != null) {\n-            if (updatedUserDetails.getStatus() == 1) {\n-              response = new VerifyCodeResponse();\n-              response.setEmailId(updatedUserDetails.getEmail());\n-              response.setIsCodeVerified(true);\n-              return response;\n-            } else return response;\n-          } else throw new SystemException();\n-        } else throw new InvalidEmailCodeException();\n-      } else {\n-        logger.info(\"No User Found Exception\");\n-        throw new InvalidUserIdException();\n+  @Override\n+  public boolean updateStatus(UserDetailsBO participantDetails) {\n+    logger.info(\"FdaEaUserDetailsServiceImpl updateStatus() - starts\");\n+    UserDetailsBO userDetailsBO = SerializationUtils.clone(participantDetails);\n+    userDetailsBO.setUserDetailsId(participantDetails.getUserDetailsId());\n+    userDetailsBO.setEmailCode(null);\n+    userDetailsBO.setCodeExpireDate(null);\n+    userDetailsBO.setStatus(\n+        AppConstants.EMAILID_VERIFIED_STATUS); // status 1--->> user's emailId verified", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cf6db4d27ced2c86d7e08583022b88cf72e346b"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg5NDU2Nw==", "bodyText": "HttpStatus.OK", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r438894567", "createdAt": "2020-06-11T15:54:12Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/FdaEaUserDetailsServiceImpl.java", "diffHunk": "@@ -77,39 +81,46 @@ public UserDetailsBO loadUserDetailsByUserId(String userId) throws SystemExcepti\n   }\n \n   @Override\n-  public VerifyCodeResponse verifyCode(String code, String userId)\n-      throws SystemException, InvalidUserIdException, InvalidEmailCodeException {\n-\n-    logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - calls\");\n-    VerifyCodeResponse response = null;\n-    UserDetailsBO daoResopnse = null;\n-    if (userId != null) {\n-      daoResopnse = userDetailsDao.loadEmailCodeByUserId(userId);\n-\n-      if (daoResopnse != null) {\n-        if (code.equals(daoResopnse.getEmailCode())\n-            && !LocalDateTime.now().isAfter(daoResopnse.getCodeExpireDate())) {\n-          logger.info(\"(S)......OTP CODE VERIFIED as true\");\n-\n-          daoResopnse.setStatus(1);\n-          daoResopnse.setEmailCode(null);\n-          daoResopnse.setCodeExpireDate(null);\n-          UserDetailsBO updatedUserDetails = userDetailsDao.saveUser(daoResopnse);\n+  public boolean verifyCode(String code, UserDetailsBO participantDetails) throws SystemException {\n+    logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - starts\");\n+    boolean result = code == null || participantDetails == null;\n+    if (result) {\n+      throw new IllegalArgumentException();\n+    }\n+    if (code.equals(participantDetails.getEmailCode())\n+        && LocalDateTime.now().isBefore(participantDetails.getCodeExpireDate())) {\n+      return true;\n+    } else {\n+      logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - ends\");\n+      return false;\n+    }\n+  }\n \n-          if (updatedUserDetails != null) {\n-            if (updatedUserDetails.getStatus() == 1) {\n-              response = new VerifyCodeResponse();\n-              response.setEmailId(updatedUserDetails.getEmail());\n-              response.setIsCodeVerified(true);\n-              return response;\n-            } else return response;\n-          } else throw new SystemException();\n-        } else throw new InvalidEmailCodeException();\n-      } else {\n-        logger.info(\"No User Found Exception\");\n-        throw new InvalidUserIdException();\n+  @Override\n+  public boolean updateStatus(UserDetailsBO participantDetails) {\n+    logger.info(\"FdaEaUserDetailsServiceImpl updateStatus() - starts\");\n+    UserDetailsBO userDetailsBO = SerializationUtils.clone(participantDetails);\n+    userDetailsBO.setUserDetailsId(participantDetails.getUserDetailsId());\n+    userDetailsBO.setEmailCode(null);\n+    userDetailsBO.setCodeExpireDate(null);\n+    userDetailsBO.setStatus(\n+        AppConstants.EMAILID_VERIFIED_STATUS); // status 1--->> user's emailId verified\n+    boolean status = userDetailsDao.updateStatus(userDetailsBO);\n+\n+    if (status) {\n+      UpdateAccountInfo accountStatus = new UpdateAccountInfo();\n+      accountStatus.setEmailVerified(true);\n+      UpdateAccountInfoResponseBean value =\n+          userManagementUtil.updateUserInfoInAuthServer(\n+              accountStatus, participantDetails.getUserId());\n+      if (value.getHttpStatusCode() != 200) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cf6db4d27ced2c86d7e08583022b88cf72e346b"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg5NTQyMg==", "bodyText": "No SystemException thrown.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r438895422", "createdAt": "2020-06-11T15:55:18Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/FdaEaUserDetailsServiceImpl.java", "diffHunk": "@@ -77,39 +81,46 @@ public UserDetailsBO loadUserDetailsByUserId(String userId) throws SystemExcepti\n   }\n \n   @Override\n-  public VerifyCodeResponse verifyCode(String code, String userId)\n-      throws SystemException, InvalidUserIdException, InvalidEmailCodeException {\n-\n-    logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - calls\");\n-    VerifyCodeResponse response = null;\n-    UserDetailsBO daoResopnse = null;\n-    if (userId != null) {\n-      daoResopnse = userDetailsDao.loadEmailCodeByUserId(userId);\n-\n-      if (daoResopnse != null) {\n-        if (code.equals(daoResopnse.getEmailCode())\n-            && !LocalDateTime.now().isAfter(daoResopnse.getCodeExpireDate())) {\n-          logger.info(\"(S)......OTP CODE VERIFIED as true\");\n-\n-          daoResopnse.setStatus(1);\n-          daoResopnse.setEmailCode(null);\n-          daoResopnse.setCodeExpireDate(null);\n-          UserDetailsBO updatedUserDetails = userDetailsDao.saveUser(daoResopnse);\n+  public boolean verifyCode(String code, UserDetailsBO participantDetails) throws SystemException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cf6db4d27ced2c86d7e08583022b88cf72e346b"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0MzYxMA==", "bodyText": "Call this function directly", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r438943610", "createdAt": "2020-06-11T17:15:29Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java", "diffHunk": "@@ -41,147 +41,103 @@\n \n   @Autowired private FdaEaUserDetailsService userDetailsService;\n \n-  @Autowired private UserManagementUtil userManagementUtil;\n-\n   @Autowired private CommonService commonService;\n \n+  @Autowired UserManagementProfileService userManagementProfService;\n+\n   @PostMapping(\"/verifyEmailId\")\n   public ResponseEntity<?> verifyEmailId(\n       @RequestBody EmailIdVerificationForm verificationForm,\n-      @RequestHeader(\"userId\") String userId,\n-      @RequestHeader(\"clientToken\") String clientToken,\n-      @RequestHeader(\"accessToken\") String accessToken,\n+      @RequestHeader(\"appId\") String appId,\n+      @RequestHeader(\"orgId\") String orgId,\n       @Context HttpServletResponse response) {\n+\n     logger.info(\"VerifyEmailIdController verifyEmailId() - starts\");\n     VerifyEmailIdResponse verifyEmailIdResponse = null;\n-    String verificationCode = \"\";\n-\n-     if (StringUtils.isEmpty(clientToken)\n-        || StringUtils.isEmpty(accessToken)\n-        || StringUtils.isEmpty(userId)\n-        || StringUtils.isEmpty(verificationForm.getCode())) {\n-\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n-          response);\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue());\n-      logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-      return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n+    String isValidAppMsg = \"\";\n+    UserDetailsBO participantDetails = null;\n+\n+    if (verificationForm == null\n+        || StringUtils.isBlank(verificationForm.getEmailId())\n+        || StringUtils.isBlank(appId)\n+        || StringUtils.isBlank(orgId)\n+        || StringUtils.isBlank(verificationForm.getCode())) {\n+      ResponseBean respBean =\n+          ResponseUtil.prepareBadRequestResponse(response, AppConstants.MISSING_REQUIRED_PARAMETER);\n+      return new ResponseEntity<>(respBean, HttpStatus.BAD_REQUEST);\n     }\n     try {\n-      verificationCode = verificationForm.getCode().trim(); // trim the surrounding whitespace.\n-      VerifyCodeResponse serviceResult = userDetailsService.verifyCode(verificationCode, userId);\n-\n-      if (serviceResult != null && Boolean.TRUE.equals(serviceResult.getIsCodeVerified())) {\n-        UpdateAccountInfo accountStatus = new UpdateAccountInfo();\n-        accountStatus.setEmailVerified(true);\n-        UpdateAccountInfoResponseBean authResponse =\n-            userManagementUtil.updateUserInfoInAuthServer(\n-                accountStatus, userId, accessToken, clientToken);\n-\n-        if (authResponse != null && \"200\".equals(authResponse.getCode())) {\n-          MyStudiesUserRegUtil.getFailureResponse(\n-              MyStudiesUserRegUtil.ErrorCodes.STATUS_200.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n-              response);\n-          verifyEmailIdResponse = new VerifyEmailIdResponse();\n-          verifyEmailIdResponse.setCode(ErrorCode.EC_200.code());\n-          verifyEmailIdResponse.setMessage(ErrorCode.EC_200.errorMessage());\n-          verifyEmailIdResponse.setVerified(serviceResult.getIsCodeVerified());\n-          logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-          commonService.createActivityLog(\n-              userId,\n-              \"User Verification\",\n-              \"User verified for email \" + serviceResult.getEmailId() + \".\");\n-          return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.OK);\n-\n-        } else if (authResponse != null && \"400\".equals(authResponse.getHttpStatusCode())) {\n-          if (AppConstants.INVALID_CLIENTID_SECRETKEY.equals(authResponse.getMessage())) {\n-            MyStudiesUserRegUtil.getFailureResponse(\n-                authResponse.getCode(),\n-                MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                authResponse.getMessage(),\n-                response);\n-            verifyEmailIdResponse = new VerifyEmailIdResponse();\n-            verifyEmailIdResponse.setCode(HttpStatus.UNAUTHORIZED.value());\n-            verifyEmailIdResponse.setMessage(\n-                MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue());\n-            logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-            return new ResponseEntity<>(authResponse, HttpStatus.UNAUTHORIZED);\n-          } else {\n-            MyStudiesUserRegUtil.getFailureResponse(\n-                authResponse.getCode(),\n-                MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                authResponse.getMessage(),\n-                response);\n-            verifyEmailIdResponse = new VerifyEmailIdResponse();\n-            verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-            verifyEmailIdResponse.setMessage(\n-                MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n-            logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-            return new ResponseEntity<>(authResponse, HttpStatus.BAD_REQUEST);\n-          }\n-        } else {\n-          MyStudiesUserRegUtil.getFailureResponse(\n-              500 + \"\",\n-              MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n-              response);\n-\n-          verifyEmailIdResponse = new VerifyEmailIdResponse();\n-          verifyEmailIdResponse.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n-          verifyEmailIdResponse.setMessage(\n-              MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n-          logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-          return new ResponseEntity<>(authResponse, HttpStatus.INTERNAL_SERVER_ERROR);\n-        }\n-      } else throw new InvalidUserIdException(); // InvalidEmailCodeException\n-    } catch (InvalidUserIdException e) {\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_USER_ID.getValue(),\n-          response);\n-\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(MyStudiesUserRegUtil.ErrorCodes.INVALID_USER_ID.getValue());\n+      isValidAppMsg =\n+          commonService.validatedUserAppDetailsByAllApi(\n+              \"\", verificationForm.getEmailId(), appId, orgId);\n+\n+      if (!StringUtils.isNotEmpty(isValidAppMsg)) {\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n+            response);\n+        return null;\n+      }\n+      AppOrgInfoBean appOrgInfoBean =\n+          commonService.getUserAppDetailsByAllApi(\"\", verificationForm.getEmailId(), appId, orgId);\n+      if (appOrgInfoBean != null) {\n+        participantDetails = getParticipantDetails(verificationForm, appOrgInfoBean);\n+      }\n+      if (participantDetails == null) {\n+        ResponseBean responseBean =\n+            ResponseUtil.prepareBadRequestResponse(response, AppConstants.EMAIL_NOT_EXISTS);\n+        return new ResponseEntity<>(responseBean, HttpStatus.BAD_REQUEST);\n+      }\n+      boolean verifyEmailCodeResponse =\n+          verifyEmailCode(verificationForm.getCode().trim(), participantDetails);\n+\n+      if (!verifyEmailCodeResponse) {\n+        ResponseBean respBean =\n+            ResponseUtil.prepareBadRequestResponse(response, new InvalidEmailCodeException());\n+        return new ResponseEntity<>(respBean, HttpStatus.BAD_REQUEST);\n+      }\n+\n+      boolean serviceResponse = updateStatus(participantDetails);\n+      if (!serviceResponse) {\n+        ResponseBean respBean = ResponseUtil.prepareSystemExceptionResponse(response);\n+        return new ResponseEntity<>(respBean, HttpStatus.INTERNAL_SERVER_ERROR);\n+      }\n+\n+      ResponseBean respBean = ResponseUtil.prepareSuccessResponse(response);\n+      verifyEmailIdResponse =\n+          new VerifyEmailIdResponse(respBean.getCode(), respBean.getMessage(), true);\n+      return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.OK);\n+\n+    } catch (IllegalArgumentException e) {\n+      ResponseBean respBean = ResponseUtil.prepareBadRequestResponse(response, e);\n       logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n-      return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n-    } catch (InvalidEmailCodeException e) {\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_CODE.getValue(),\n-          response);\n-\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_CODE.getValue());\n-      logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n-      return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n-    } catch (Exception e) {\n-      // prepare system failure Response\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          500 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n-          response);\n-\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n+      return new ResponseEntity<>(respBean, HttpStatus.BAD_REQUEST);\n \n+    } catch (SystemException e) {\n+      ResponseBean respBean = ResponseUtil.prepareSystemExceptionResponse(response);\n       logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n-      return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.INTERNAL_SERVER_ERROR);\n+      return new ResponseEntity<>(respBean, HttpStatus.INTERNAL_SERVER_ERROR);\n     }\n   }\n+\n+  private UserDetailsBO getParticipantDetails(\n+      EmailIdVerificationForm verificationForm, AppOrgInfoBean appOrgInfoBean) {\n+    UserDetailsBO participantDetails = null;\n+    participantDetails =\n+        userManagementProfService.getParticipantDetailsByEmail(\n+            verificationForm.getEmailId(),\n+            appOrgInfoBean.getAppInfoId(),\n+            appOrgInfoBean.getOrgInfoId());\n+    return participantDetails;\n+  }\n+\n+  private boolean updateStatus(UserDetailsBO participantDetails) {\n+    return userDetailsService.updateStatus(participantDetails);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cf6db4d27ced2c86d7e08583022b88cf72e346b"}, "originalPosition": 250}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0MzY1MA==", "bodyText": "Call this function directly", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r438943650", "createdAt": "2020-06-11T17:15:33Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java", "diffHunk": "@@ -41,147 +41,103 @@\n \n   @Autowired private FdaEaUserDetailsService userDetailsService;\n \n-  @Autowired private UserManagementUtil userManagementUtil;\n-\n   @Autowired private CommonService commonService;\n \n+  @Autowired UserManagementProfileService userManagementProfService;\n+\n   @PostMapping(\"/verifyEmailId\")\n   public ResponseEntity<?> verifyEmailId(\n       @RequestBody EmailIdVerificationForm verificationForm,\n-      @RequestHeader(\"userId\") String userId,\n-      @RequestHeader(\"clientToken\") String clientToken,\n-      @RequestHeader(\"accessToken\") String accessToken,\n+      @RequestHeader(\"appId\") String appId,\n+      @RequestHeader(\"orgId\") String orgId,\n       @Context HttpServletResponse response) {\n+\n     logger.info(\"VerifyEmailIdController verifyEmailId() - starts\");\n     VerifyEmailIdResponse verifyEmailIdResponse = null;\n-    String verificationCode = \"\";\n-\n-     if (StringUtils.isEmpty(clientToken)\n-        || StringUtils.isEmpty(accessToken)\n-        || StringUtils.isEmpty(userId)\n-        || StringUtils.isEmpty(verificationForm.getCode())) {\n-\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n-          response);\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue());\n-      logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-      return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n+    String isValidAppMsg = \"\";\n+    UserDetailsBO participantDetails = null;\n+\n+    if (verificationForm == null\n+        || StringUtils.isBlank(verificationForm.getEmailId())\n+        || StringUtils.isBlank(appId)\n+        || StringUtils.isBlank(orgId)\n+        || StringUtils.isBlank(verificationForm.getCode())) {\n+      ResponseBean respBean =\n+          ResponseUtil.prepareBadRequestResponse(response, AppConstants.MISSING_REQUIRED_PARAMETER);\n+      return new ResponseEntity<>(respBean, HttpStatus.BAD_REQUEST);\n     }\n     try {\n-      verificationCode = verificationForm.getCode().trim(); // trim the surrounding whitespace.\n-      VerifyCodeResponse serviceResult = userDetailsService.verifyCode(verificationCode, userId);\n-\n-      if (serviceResult != null && Boolean.TRUE.equals(serviceResult.getIsCodeVerified())) {\n-        UpdateAccountInfo accountStatus = new UpdateAccountInfo();\n-        accountStatus.setEmailVerified(true);\n-        UpdateAccountInfoResponseBean authResponse =\n-            userManagementUtil.updateUserInfoInAuthServer(\n-                accountStatus, userId, accessToken, clientToken);\n-\n-        if (authResponse != null && \"200\".equals(authResponse.getCode())) {\n-          MyStudiesUserRegUtil.getFailureResponse(\n-              MyStudiesUserRegUtil.ErrorCodes.STATUS_200.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n-              response);\n-          verifyEmailIdResponse = new VerifyEmailIdResponse();\n-          verifyEmailIdResponse.setCode(ErrorCode.EC_200.code());\n-          verifyEmailIdResponse.setMessage(ErrorCode.EC_200.errorMessage());\n-          verifyEmailIdResponse.setVerified(serviceResult.getIsCodeVerified());\n-          logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-          commonService.createActivityLog(\n-              userId,\n-              \"User Verification\",\n-              \"User verified for email \" + serviceResult.getEmailId() + \".\");\n-          return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.OK);\n-\n-        } else if (authResponse != null && \"400\".equals(authResponse.getHttpStatusCode())) {\n-          if (AppConstants.INVALID_CLIENTID_SECRETKEY.equals(authResponse.getMessage())) {\n-            MyStudiesUserRegUtil.getFailureResponse(\n-                authResponse.getCode(),\n-                MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                authResponse.getMessage(),\n-                response);\n-            verifyEmailIdResponse = new VerifyEmailIdResponse();\n-            verifyEmailIdResponse.setCode(HttpStatus.UNAUTHORIZED.value());\n-            verifyEmailIdResponse.setMessage(\n-                MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue());\n-            logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-            return new ResponseEntity<>(authResponse, HttpStatus.UNAUTHORIZED);\n-          } else {\n-            MyStudiesUserRegUtil.getFailureResponse(\n-                authResponse.getCode(),\n-                MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                authResponse.getMessage(),\n-                response);\n-            verifyEmailIdResponse = new VerifyEmailIdResponse();\n-            verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-            verifyEmailIdResponse.setMessage(\n-                MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n-            logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-            return new ResponseEntity<>(authResponse, HttpStatus.BAD_REQUEST);\n-          }\n-        } else {\n-          MyStudiesUserRegUtil.getFailureResponse(\n-              500 + \"\",\n-              MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n-              response);\n-\n-          verifyEmailIdResponse = new VerifyEmailIdResponse();\n-          verifyEmailIdResponse.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n-          verifyEmailIdResponse.setMessage(\n-              MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n-          logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-          return new ResponseEntity<>(authResponse, HttpStatus.INTERNAL_SERVER_ERROR);\n-        }\n-      } else throw new InvalidUserIdException(); // InvalidEmailCodeException\n-    } catch (InvalidUserIdException e) {\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_USER_ID.getValue(),\n-          response);\n-\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(MyStudiesUserRegUtil.ErrorCodes.INVALID_USER_ID.getValue());\n+      isValidAppMsg =\n+          commonService.validatedUserAppDetailsByAllApi(\n+              \"\", verificationForm.getEmailId(), appId, orgId);\n+\n+      if (!StringUtils.isNotEmpty(isValidAppMsg)) {\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n+            response);\n+        return null;\n+      }\n+      AppOrgInfoBean appOrgInfoBean =\n+          commonService.getUserAppDetailsByAllApi(\"\", verificationForm.getEmailId(), appId, orgId);\n+      if (appOrgInfoBean != null) {\n+        participantDetails = getParticipantDetails(verificationForm, appOrgInfoBean);\n+      }\n+      if (participantDetails == null) {\n+        ResponseBean responseBean =\n+            ResponseUtil.prepareBadRequestResponse(response, AppConstants.EMAIL_NOT_EXISTS);\n+        return new ResponseEntity<>(responseBean, HttpStatus.BAD_REQUEST);\n+      }\n+      boolean verifyEmailCodeResponse =\n+          verifyEmailCode(verificationForm.getCode().trim(), participantDetails);\n+\n+      if (!verifyEmailCodeResponse) {\n+        ResponseBean respBean =\n+            ResponseUtil.prepareBadRequestResponse(response, new InvalidEmailCodeException());\n+        return new ResponseEntity<>(respBean, HttpStatus.BAD_REQUEST);\n+      }\n+\n+      boolean serviceResponse = updateStatus(participantDetails);\n+      if (!serviceResponse) {\n+        ResponseBean respBean = ResponseUtil.prepareSystemExceptionResponse(response);\n+        return new ResponseEntity<>(respBean, HttpStatus.INTERNAL_SERVER_ERROR);\n+      }\n+\n+      ResponseBean respBean = ResponseUtil.prepareSuccessResponse(response);\n+      verifyEmailIdResponse =\n+          new VerifyEmailIdResponse(respBean.getCode(), respBean.getMessage(), true);\n+      return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.OK);\n+\n+    } catch (IllegalArgumentException e) {\n+      ResponseBean respBean = ResponseUtil.prepareBadRequestResponse(response, e);\n       logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n-      return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n-    } catch (InvalidEmailCodeException e) {\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_CODE.getValue(),\n-          response);\n-\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_CODE.getValue());\n-      logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n-      return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n-    } catch (Exception e) {\n-      // prepare system failure Response\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          500 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n-          response);\n-\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n+      return new ResponseEntity<>(respBean, HttpStatus.BAD_REQUEST);\n \n+    } catch (SystemException e) {\n+      ResponseBean respBean = ResponseUtil.prepareSystemExceptionResponse(response);\n       logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n-      return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.INTERNAL_SERVER_ERROR);\n+      return new ResponseEntity<>(respBean, HttpStatus.INTERNAL_SERVER_ERROR);\n     }\n   }\n+\n+  private UserDetailsBO getParticipantDetails(\n+      EmailIdVerificationForm verificationForm, AppOrgInfoBean appOrgInfoBean) {\n+    UserDetailsBO participantDetails = null;\n+    participantDetails =\n+        userManagementProfService.getParticipantDetailsByEmail(\n+            verificationForm.getEmailId(),\n+            appOrgInfoBean.getAppInfoId(),\n+            appOrgInfoBean.getOrgInfoId());\n+    return participantDetails;\n+  }\n+\n+  private boolean updateStatus(UserDetailsBO participantDetails) {\n+    return userDetailsService.updateStatus(participantDetails);\n+  }\n+\n+  private boolean verifyEmailCode(String verificationCode, UserDetailsBO participantDetails)\n+      throws SystemException {\n+    return userDetailsService.verifyCode(verificationCode, participantDetails);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cf6db4d27ced2c86d7e08583022b88cf72e346b"}, "originalPosition": 255}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0NDIzNw==", "bodyText": "As far as I can tell, you don't need to guard these log statements.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r438944237", "createdAt": "2020-06-11T17:16:42Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/ResponseUtil.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.google.cloud.healthcare.fdamystudies.util;\n+\n+import javax.servlet.http.HttpServletResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpStatus;\n+import com.google.cloud.healthcare.fdamystudies.bean.ResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.exceptions.InvalidEmailCodeException;\n+import com.google.cloud.healthcare.fdamystudies.exceptions.InvalidRequestException;\n+import com.google.cloud.healthcare.fdamystudies.exceptions.InvalidUserIdException;\n+import com.google.cloud.healthcare.fdamystudies.exceptions.SystemException;\n+import com.google.cloud.healthcare.fdamystudies.util.MyStudiesUserRegUtil.ErrorCodes;\n+\n+public final class ResponseUtil {\n+\n+  private ResponseUtil() {}\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(ResponseUtil.class);\n+\n+  public static ResponseBean prepareBadRequestResponse(\n+      HttpServletResponse response, String errorType) {\n+    return prepareBadRequestResponse(response, null, errorType);\n+  }\n+\n+  public static ResponseBean prepareBadRequestResponse(\n+      HttpServletResponse response, Exception e, String... errorTypes) {\n+    String errorType = e != null ? mapExceptionToErrorType(e) : errorTypes[0];\n+    ResponseBean responseBean = new ResponseBean();\n+    // Default error code for missing required parameter and InvalidRequestException\n+    ErrorCodes errorMsg = MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG;\n+\n+    switch (errorType) {\n+      case AppConstants.INVALID_EMAIL_CODE_EXCEPTION:\n+        errorMsg = MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_CODE;\n+        break;\n+      case AppConstants.INVALID_USERID_EXCEPTION:\n+        errorMsg = MyStudiesUserRegUtil.ErrorCodes.INVALID_USER_ID;\n+        break;\n+      case AppConstants.EMAIL_NOT_EXISTS:\n+        errorMsg = MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS;\n+        break;\n+      case AppConstants.MISSING_REQUIRED_PARAMETER:\n+        errorMsg = MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG;\n+        break;\n+    }\n+\n+    MyStudiesUserRegUtil.getFailureResponse(\n+        HttpStatus.BAD_REQUEST.toString(),\n+        MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+        errorMsg.getValue(),\n+        response);\n+    responseBean.setCode(HttpStatus.BAD_REQUEST.value());\n+    responseBean.setMessage(errorMsg.getValue());\n+    if (LOG.isDebugEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cf6db4d27ced2c86d7e08583022b88cf72e346b"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0NTE0OA==", "bodyText": "HttpStatus.OK.value()", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r438945148", "createdAt": "2020-06-11T17:18:27Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/ResponseUtil.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.google.cloud.healthcare.fdamystudies.util;\n+\n+import javax.servlet.http.HttpServletResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpStatus;\n+import com.google.cloud.healthcare.fdamystudies.bean.ResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.exceptions.InvalidEmailCodeException;\n+import com.google.cloud.healthcare.fdamystudies.exceptions.InvalidRequestException;\n+import com.google.cloud.healthcare.fdamystudies.exceptions.InvalidUserIdException;\n+import com.google.cloud.healthcare.fdamystudies.exceptions.SystemException;\n+import com.google.cloud.healthcare.fdamystudies.util.MyStudiesUserRegUtil.ErrorCodes;\n+\n+public final class ResponseUtil {\n+\n+  private ResponseUtil() {}\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(ResponseUtil.class);\n+\n+  public static ResponseBean prepareBadRequestResponse(\n+      HttpServletResponse response, String errorType) {\n+    return prepareBadRequestResponse(response, null, errorType);\n+  }\n+\n+  public static ResponseBean prepareBadRequestResponse(\n+      HttpServletResponse response, Exception e, String... errorTypes) {\n+    String errorType = e != null ? mapExceptionToErrorType(e) : errorTypes[0];\n+    ResponseBean responseBean = new ResponseBean();\n+    // Default error code for missing required parameter and InvalidRequestException\n+    ErrorCodes errorMsg = MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG;\n+\n+    switch (errorType) {\n+      case AppConstants.INVALID_EMAIL_CODE_EXCEPTION:\n+        errorMsg = MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_CODE;\n+        break;\n+      case AppConstants.INVALID_USERID_EXCEPTION:\n+        errorMsg = MyStudiesUserRegUtil.ErrorCodes.INVALID_USER_ID;\n+        break;\n+      case AppConstants.EMAIL_NOT_EXISTS:\n+        errorMsg = MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS;\n+        break;\n+      case AppConstants.MISSING_REQUIRED_PARAMETER:\n+        errorMsg = MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG;\n+        break;\n+    }\n+\n+    MyStudiesUserRegUtil.getFailureResponse(\n+        HttpStatus.BAD_REQUEST.toString(),\n+        MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+        errorMsg.getValue(),\n+        response);\n+    responseBean.setCode(HttpStatus.BAD_REQUEST.value());\n+    responseBean.setMessage(errorMsg.getValue());\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(String.format(\"Bad Request Response =%s\", responseBean));\n+    }\n+    return responseBean;\n+  }\n+\n+  public static ResponseBean prepareSystemExceptionResponse(HttpServletResponse response) {\n+    MyStudiesUserRegUtil.getFailureResponse(\n+        HttpStatus.INTERNAL_SERVER_ERROR.toString(),\n+        MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n+        MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n+        response);\n+    ResponseBean responseBean = new ResponseBean();\n+    responseBean.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n+    responseBean.setMessage(MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n+    return responseBean;\n+  }\n+\n+  public static ResponseBean prepareSuccessResponse(HttpServletResponse response) {\n+    MyStudiesUserRegUtil.getFailureResponse(\n+        HttpStatus.OK.toString(),\n+        MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n+        MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n+        response);\n+    ResponseBean responseBean = new ResponseBean();\n+    responseBean.setCode(ErrorCode.EC_200.code());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cf6db4d27ced2c86d7e08583022b88cf72e346b"}, "originalPosition": 79}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4edaaac95a64f76ae7479aa8e50205a9769beb08", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/4edaaac95a64f76ae7479aa8e50205a9769beb08", "committedDate": "2020-06-12T17:01:45Z", "message": "PR review  comment fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40bc3d5508c975b14cc239820be5e84222025020", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/40bc3d5508c975b14cc239820be5e84222025020", "committedDate": "2020-06-13T11:58:37Z", "message": "PR comment review fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1616edbd5f1b78f68114da116f35dfd131c056e3", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/1616edbd5f1b78f68114da116f35dfd131c056e3", "committedDate": "2020-06-13T12:00:56Z", "message": "added removed log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94ee300b5520e14c7316aa16a7ec4c959a27b0e6", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/94ee300b5520e14c7316aa16a7ec4c959a27b0e6", "committedDate": "2020-06-13T12:06:13Z", "message": "Merge branch 'early-access' into early-access-verifyemail-issue-fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1Mjg1Njkx", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#pullrequestreview-435285691", "createdAt": "2020-06-22T21:26:22Z", "commit": {"oid": "94ee300b5520e14c7316aa16a7ec4c959a27b0e6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adbff98b46cafccc1a4e1b69bd2a61811629bff9", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/adbff98b46cafccc1a4e1b69bd2a61811629bff9", "committedDate": "2020-06-23T10:43:21Z", "message": "conflict issue fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7784d161b9d820ebbb4e29a0667dcd9d7dc03c5d", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/7784d161b9d820ebbb4e29a0667dcd9d7dc03c5d", "committedDate": "2020-06-23T10:45:45Z", "message": "Merge branch 'early-access' of https://github.com/GoogleCloudPlatform/fda-mystudies into early-access-verifyemail-issue-fix\n\n# Conflicts:\n#\tuser-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/EmailIdVerificationForm.java\n#\tuser-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1025, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}