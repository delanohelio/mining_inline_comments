{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3OTY3OTUz", "number": 540, "title": "Audit Log Service - /v1/events endpoint implementation", "bodyText": "Moved HealthController class to common-service module\nUsed everit-org JSON Schema validator (Apache 2.0 license) for event request validation.\nUsed JSoup (MIT license) to extract the error response details from RestClientResponseException thrown by tomcat server\nAdded Spring Boot Actuator to view the log file when deployed to DEV/QA environment and the mapping details. This will help during deployment and while integrating the APIs.\nImplemented /v1/events endpoint\nAdded token introspection filter and common exception handler for filters in common-service.", "createdAt": "2020-06-22T14:07:15Z", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540", "merged": true, "mergeCommit": {"oid": "7e748969065764edfb36a95f563208641de56cfe"}, "closed": true, "closedAt": "2020-06-26T04:40:55Z", "author": {"login": "dhanyak-btc"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABctDkqVAH2gAyNDM3OTY3OTUzOjRlYzE3ZGM3Yzk4ZDZhMWM3ZDA2YTVhYjBmZTFlOTFjNzVhYjhlNTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcu7o4XgH2gAyNDM3OTY3OTUzOjI5MjA5MDJlNmY5MTEyMzM2OWJmYWQzMmFmZWE1NGIyYzcxNDQzYmY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54", "author": {"user": {"login": "dhanyak-btc", "name": "Dhanya Kumar KV"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54", "committedDate": "2020-06-20T08:42:26Z", "message": "/v1/events endpoint implmentation\n\nMoved filters and health controller to common-service, added actuator, added JSoup to extract error message from Html etc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fe92752ca19de8e1618a8d36084f9ad3399d42d", "author": {"user": {"login": "dhanyak-btc", "name": "Dhanya Kumar KV"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/8fe92752ca19de8e1618a8d36084f9ad3399d42d", "committedDate": "2020-06-20T10:21:58Z", "message": "Refactored AuditLogEventValidator\n\nconvert xpath to json path"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3b4ade2159f7996752d05425678a83bb3ba08ce", "author": {"user": {"login": "dhanyak-btc", "name": "Dhanya Kumar KV"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/e3b4ade2159f7996752d05425678a83bb3ba08ce", "committedDate": "2020-06-20T11:29:02Z", "message": "minor refactoring and removed unused method\n\nminor refactoring and removed unused getEncodedAuthorization() from BaseServiceImpl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6bfb2a698ca4238090bc11dedb84f13a4f16d186", "author": {"user": {"login": "dhanyak-btc", "name": "Dhanya Kumar KV"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/6bfb2a698ca4238090bc11dedb84f13a4f16d186", "committedDate": "2020-06-20T13:01:28Z", "message": "Added postman collection & BaseTokenIntrospectionFilter\n\nAdded getUriTemplateAndHttpMethodsMap() abstract method to BaseTokenIntrospectionFilter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5", "author": {"user": {"login": "dhanyak-btc", "name": "Dhanya Kumar KV"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/78db1c61d867b77fd4025c62d9cf5c65dc7afed5", "committedDate": "2020-06-20T13:35:02Z", "message": "Removed unused method\n\nRemoved unused method: getEventInfo() from AuditLogEventEntity"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0OTg2NjY2", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#pullrequestreview-434986666", "createdAt": "2020-06-22T14:36:33Z", "commit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "state": "COMMENTED", "comments": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDozNjozM1rOGnDkMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjowOTowOVrOGnHh9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwNjA2NQ==", "bodyText": "probably not a good idea to expose request body to the logs, just in case any PII or PHI is ever included in the audit logs.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443606065", "createdAt": "2020-06-22T14:36:33Z", "author": {"login": "zohrehj"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/controller/AuditLogEventController.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.controller;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.service.AuditLogEventService;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.validator.AuditLogEventValidator;\n+import com.google.cloud.healthcare.fdamystudies.common.JsonUtils;\n+\n+@RestController\n+@RequestMapping(\"/v1\")\n+public class AuditLogEventController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(AuditLogEventController.class.getName());\n+\n+  private static final String ERROR_DESCRIPTION = \"error_description\";\n+\n+  @Autowired private AuditLogEventService aleService;\n+\n+  @Autowired private AuditLogEventValidator validator;\n+\n+  @PostMapping(\n+      value = \"/events\",\n+      produces = {MediaType.APPLICATION_JSON_VALUE},\n+      consumes = {MediaType.APPLICATION_JSON_VALUE})\n+  public ResponseEntity<JsonNode> logEvent(\n+      @RequestBody JsonNode requestBody, HttpServletRequest request) {\n+    logger.entry(\n+        String.format(\n+            \"begin %s request with requestBody= %s\", request.getRequestURI(), requestBody));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYxMzI3OQ==", "bodyText": "nit: extractFieldNameFromValidationError might be more descriptive.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443613279", "createdAt": "2020-06-22T14:45:51Z", "author": {"login": "zohrehj"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/validator/AuditLogEventValidator.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.validator;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getArrayNode;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectNode;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getTextValue;\n+import java.util.List;\n+import javax.annotation.PostConstruct;\n+import org.apache.commons.lang3.StringUtils;\n+import org.everit.json.schema.Schema;\n+import org.everit.json.schema.ValidationException;\n+import org.everit.json.schema.loader.SchemaLoader;\n+import org.json.JSONObject;\n+import org.json.JSONTokener;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Component;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+@Component\n+public final class AuditLogEventValidator {\n+\n+  private static final String ERROR_DESCRIPTION = \"error_description\";\n+\n+  private static final String ERROR_TYPE = \"error_type\";\n+\n+  private static final String FILED_NAME = \"fieldName\";\n+\n+  private static final String ERRORS = \"errors\";\n+\n+  private static final String STATUS = \"status\";\n+\n+  private static final String USER_ID = \"user_id\";\n+\n+  private Schema schema;\n+\n+  @PostConstruct\n+  public void loadSchema() {\n+    JSONObject jsonSchema =\n+        new JSONObject(\n+            new JSONTokener(\n+                AuditLogEventValidator.class.getResourceAsStream(\"/audit-log-event-schema.json\")));\n+    this.schema = SchemaLoader.load(jsonSchema);\n+  }\n+\n+  public JsonNode validateJson(JsonNode eventParams) {\n+    try {\n+      JSONObject jsonSubject = new JSONObject(eventParams.toString());\n+      schema.validate(jsonSubject);\n+    } catch (ValidationException e) {\n+      List<String> messages = e.getAllMessages();\n+      ArrayNode errors = getArrayNode();\n+      for (String msg : messages) {\n+        ObjectNode err = getObjectNode();\n+        err.put(FILED_NAME, extractFieldName(msg));\n+        err.put(ERROR_DESCRIPTION, msg);\n+        errors.add(err);\n+      }\n+\n+      return buildValidationResponse(eventParams, errors);\n+    }\n+\n+    return null;\n+  }\n+\n+  private JsonNode buildValidationResponse(JsonNode eventParams, ArrayNode errors) {\n+    StringBuilder errorDescription = new StringBuilder(\"Audit log event validation failed\");\n+    if (eventParams.hasNonNull(USER_ID)) {\n+      errorDescription.append(\" for user_id=\").append(getTextValue(eventParams, USER_ID));\n+    }\n+    ObjectNode result = getObjectNode();\n+    result.set(ERRORS, errors);\n+    result.put(ERROR_TYPE, HttpStatus.BAD_REQUEST.getReasonPhrase());\n+    result.put(STATUS, HttpStatus.BAD_REQUEST.value());\n+    result.put(ERROR_DESCRIPTION, errorDescription.toString());\n+    return result;\n+  }\n+\n+  private String extractFieldName(String msg) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYyMDg1NA==", "bodyText": "what is alert used for? and why is it required.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443620854", "createdAt": "2020-06-22T14:56:04Z", "author": {"login": "zohrehj"}, "path": "audit-log-module/audit-log-service/src/main/resources/audit-log-event-schema.json", "diffHunk": "@@ -0,0 +1,103 @@\n+{\n+\t\"$schema\": \"http://json-schema.org/draft-04/schema#\",\n+\t\"type\": \"object\",\n+\t\"additionalProperties\": false,\n+\t\"required\": [\n+\t\t\"alert\",\n+\t\t\"user_id\",\n+\t\t\"system_id\",\n+\t\t\"event_info\",\n+\t\t\"event_name\",\n+\t\t\"correlation_id\",\n+\t\t\"event_timestamp\"\n+\t],\n+\t\"properties\": {\n+\t\t\"alert\": {\n+\t\t\t\"type\": \"boolean\"\n+\t\t},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYyMjQyNg==", "bodyText": "all values that can be made into enums should ideally be stored as such to preserve space.\nThat would not change the json schema much per say, but if we make that change the validation step should ideally verify that the value is within the accepted inputs.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443622426", "createdAt": "2020-06-22T14:58:10Z", "author": {"login": "zohrehj"}, "path": "audit-log-module/audit-log-service/src/main/resources/audit-log-event-schema.json", "diffHunk": "@@ -0,0 +1,103 @@\n+{\n+\t\"$schema\": \"http://json-schema.org/draft-04/schema#\",\n+\t\"type\": \"object\",\n+\t\"additionalProperties\": false,\n+\t\"required\": [\n+\t\t\"alert\",\n+\t\t\"user_id\",\n+\t\t\"system_id\",\n+\t\t\"event_info\",\n+\t\t\"event_name\",\n+\t\t\"correlation_id\",\n+\t\t\"event_timestamp\"\n+\t],\n+\t\"properties\": {\n+\t\t\"alert\": {\n+\t\t\t\"type\": \"boolean\"\n+\t\t},\n+\t\t\"app_id\": {\n+\t\t\t\"type\": \"string\"\n+\t\t},\n+\t\t\"org_id\": {\n+\t\t\t\"type\": \"string\"\n+\t\t},\n+\t\t\"user_id\": {\n+\t\t\t\"type\": \"string\"\n+\t\t},\n+\t\t\"system_id\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"minLength\":3\n+\t\t},\n+\t\t\"event_name\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"minLength\":3\n+\t\t},\n+\t\t\"correlation_id\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"minLength\":10\n+\t\t},\n+\t\t\"event_timestamp\": {\n+\t\t\t\"type\": \"integer\"\n+\t\t},\n+\t\t\"event_info\": {\n+\t\t\t\"type\": \"object\",\n+\t\t\t\"additionalProperties\": false,\n+\t\t\t\"required\": [\n+\t\t\t\t\"system_ip\",\n+\t\t\t\t\"description\",\n+\t\t\t\t\"event_detail\",\n+\t\t\t\t\"application_version\",\n+\t\t\t\t\"application_component_name\"\n+\t\t\t],\n+\t\t\t\"properties\": {\n+\t\t\t\t\"email\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"client_id\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"system_ip\": {\n+\t\t\t\t\t\"type\": \"string\",\n+\t\t\t\t\t\"minLength\":7\n+\t\t\t\t},\n+\t\t\t\t\"description\": {\n+\t\t\t\t\t\"type\": \"string\",\n+\t\t\t\t\t\"minLength\":1\n+\t\t\t\t},\n+\t\t\t\t\"device_type\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"request_uri\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"access_level\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYyMzAzNQ==", "bodyText": "if we have the even name, and its source and destination, then I do not see why we need to log the request URL as well.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443623035", "createdAt": "2020-06-22T14:58:59Z", "author": {"login": "zohrehj"}, "path": "audit-log-module/audit-log-service/src/main/resources/audit-log-event-schema.json", "diffHunk": "@@ -0,0 +1,103 @@\n+{\n+\t\"$schema\": \"http://json-schema.org/draft-04/schema#\",\n+\t\"type\": \"object\",\n+\t\"additionalProperties\": false,\n+\t\"required\": [\n+\t\t\"alert\",\n+\t\t\"user_id\",\n+\t\t\"system_id\",\n+\t\t\"event_info\",\n+\t\t\"event_name\",\n+\t\t\"correlation_id\",\n+\t\t\"event_timestamp\"\n+\t],\n+\t\"properties\": {\n+\t\t\"alert\": {\n+\t\t\t\"type\": \"boolean\"\n+\t\t},\n+\t\t\"app_id\": {\n+\t\t\t\"type\": \"string\"\n+\t\t},\n+\t\t\"org_id\": {\n+\t\t\t\"type\": \"string\"\n+\t\t},\n+\t\t\"user_id\": {\n+\t\t\t\"type\": \"string\"\n+\t\t},\n+\t\t\"system_id\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"minLength\":3\n+\t\t},\n+\t\t\"event_name\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"minLength\":3\n+\t\t},\n+\t\t\"correlation_id\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"minLength\":10\n+\t\t},\n+\t\t\"event_timestamp\": {\n+\t\t\t\"type\": \"integer\"\n+\t\t},\n+\t\t\"event_info\": {\n+\t\t\t\"type\": \"object\",\n+\t\t\t\"additionalProperties\": false,\n+\t\t\t\"required\": [\n+\t\t\t\t\"system_ip\",\n+\t\t\t\t\"description\",\n+\t\t\t\t\"event_detail\",\n+\t\t\t\t\"application_version\",\n+\t\t\t\t\"application_component_name\"\n+\t\t\t],\n+\t\t\t\"properties\": {\n+\t\t\t\t\"email\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"client_id\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"system_ip\": {\n+\t\t\t\t\t\"type\": \"string\",\n+\t\t\t\t\t\"minLength\":7\n+\t\t\t\t},\n+\t\t\t\t\"description\": {\n+\t\t\t\t\t\"type\": \"string\",\n+\t\t\t\t\t\"minLength\":1\n+\t\t\t\t},\n+\t\t\t\t\"device_type\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"request_uri\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYyMzQzMg==", "bodyText": "also can be an enum", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443623432", "createdAt": "2020-06-22T14:59:30Z", "author": {"login": "zohrehj"}, "path": "audit-log-module/audit-log-service/src/main/resources/audit-log-event-schema.json", "diffHunk": "@@ -0,0 +1,103 @@\n+{\n+\t\"$schema\": \"http://json-schema.org/draft-04/schema#\",\n+\t\"type\": \"object\",\n+\t\"additionalProperties\": false,\n+\t\"required\": [\n+\t\t\"alert\",\n+\t\t\"user_id\",\n+\t\t\"system_id\",\n+\t\t\"event_info\",\n+\t\t\"event_name\",\n+\t\t\"correlation_id\",\n+\t\t\"event_timestamp\"\n+\t],\n+\t\"properties\": {\n+\t\t\"alert\": {\n+\t\t\t\"type\": \"boolean\"\n+\t\t},\n+\t\t\"app_id\": {\n+\t\t\t\"type\": \"string\"\n+\t\t},\n+\t\t\"org_id\": {\n+\t\t\t\"type\": \"string\"\n+\t\t},\n+\t\t\"user_id\": {\n+\t\t\t\"type\": \"string\"\n+\t\t},\n+\t\t\"system_id\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"minLength\":3\n+\t\t},\n+\t\t\"event_name\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"minLength\":3\n+\t\t},\n+\t\t\"correlation_id\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"minLength\":10\n+\t\t},\n+\t\t\"event_timestamp\": {\n+\t\t\t\"type\": \"integer\"\n+\t\t},\n+\t\t\"event_info\": {\n+\t\t\t\"type\": \"object\",\n+\t\t\t\"additionalProperties\": false,\n+\t\t\t\"required\": [\n+\t\t\t\t\"system_ip\",\n+\t\t\t\t\"description\",\n+\t\t\t\t\"event_detail\",\n+\t\t\t\t\"application_version\",\n+\t\t\t\t\"application_component_name\"\n+\t\t\t],\n+\t\t\t\"properties\": {\n+\t\t\t\t\"email\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"client_id\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"system_ip\": {\n+\t\t\t\t\t\"type\": \"string\",\n+\t\t\t\t\t\"minLength\":7\n+\t\t\t\t},\n+\t\t\t\t\"description\": {\n+\t\t\t\t\t\"type\": \"string\",\n+\t\t\t\t\t\"minLength\":1\n+\t\t\t\t},\n+\t\t\t\t\"device_type\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"request_uri\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"access_level\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"event_detail\": {\n+\t\t\t\t\t\"type\": \"string\",\n+\t\t\t\t\t\"minLength\":1\n+\t\t\t\t},\n+\t\t\t\t\"device_platform\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"resource_server\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"client_app_version\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"application_version\": {\n+\t\t\t\t\t\"type\": \"string\",\n+\t\t\t\t\t\"minLength\":1\n+\t\t\t\t},\n+\t\t\t\t\"client_access_level\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"application_component_name\": {\n+\t\t\t\t\t\"type\": \"string\",\n+\t\t\t\t\t\"minLength\":1\n+\t\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1MzQ3OQ==", "bodyText": "I have noticed that you are using different logger libraries; why is that? wouldn't it be better to use the same logger across the code", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443653479", "createdAt": "2020-06-22T15:42:57Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/RestExceptionHandler.java", "diffHunk": "@@ -1,19 +1,41 @@\n package com.google.cloud.healthcare.fdamystudies.common;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2MDU2Mw==", "bodyText": "please remove all logs from the health method.\nThe current kubernetes deployment is using health method as readinessprobe/livenessprobe and calls the method constantly.\nHaving any logs in the method will therefore make server logs almost unusable.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443660563", "createdAt": "2020-06-22T15:53:30Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/HealthController.java", "diffHunk": "@@ -6,31 +6,35 @@\n  * https://opensource.org/licenses/MIT.\n  */\n \n-package com.google.cloud.healthcare.fdamystudies.auditlog.controller;\n+package com.google.cloud.healthcare.fdamystudies.controller;\n \n import javax.servlet.http.HttpServletRequest;\n import org.slf4j.ext.XLogger;\n import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RestController;\n import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.service.OAuthService;\n \n @RestController\n @RequestMapping(\"/v1\")\n-public class HealthController extends BaseController {\n+public class HealthController {\n \n   private XLogger logger = XLoggerFactory.getXLogger(HealthController.class.getName());\n \n+  @Autowired private OAuthService oauthService;\n+\n   @GetMapping(\n       value = \"/health\",\n       produces = {MediaType.APPLICATION_JSON_VALUE})\n   public ResponseEntity<JsonNode> health(HttpServletRequest request) {\n     logger.entry(String.format(\"begin %s request with no args\", request.getRequestURI()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2MTI0Mw==", "bodyText": "please remove this logger entry. It gets called too frequently and causes a lot of spam in the logs.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443661243", "createdAt": "2020-06-22T15:54:28Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/FilterChainExceptionHandler.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.google.cloud.healthcare.fdamystudies.filter;\n+\n+import java.io.IOException;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.springframework.web.client.HttpServerErrorException;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.JsonUtils;\n+\n+@Component\n+@Order(1)\n+public class FilterChainExceptionHandler extends OncePerRequestFilter {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(FilterChainExceptionHandler.class.getName());\n+\n+  @Override\n+  protected void doFilterInternal(\n+      HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n+      throws ServletException, IOException {\n+    logger.entry(String.format(\"begin doFilterInternal() for %s\", request.getRequestURI()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2MzE4Nw==", "bodyText": "change to healthCheck for consistency with other services", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443663187", "createdAt": "2020-06-22T15:57:16Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/HealthController.java", "diffHunk": "@@ -6,31 +6,35 @@\n  * https://opensource.org/licenses/MIT.\n  */\n \n-package com.google.cloud.healthcare.fdamystudies.auditlog.controller;\n+package com.google.cloud.healthcare.fdamystudies.controller;\n \n import javax.servlet.http.HttpServletRequest;\n import org.slf4j.ext.XLogger;\n import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RestController;\n import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.service.OAuthService;\n \n @RestController\n @RequestMapping(\"/v1\")\n-public class HealthController extends BaseController {\n+public class HealthController {\n \n   private XLogger logger = XLoggerFactory.getXLogger(HealthController.class.getName());\n \n+  @Autowired private OAuthService oauthService;\n+\n   @GetMapping(\n       value = \"/health\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2MzM5OQ==", "bodyText": "please remove info level logs from very common methods; they cause too much noise in the logs.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443663399", "createdAt": "2020-06-22T15:57:34Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/TokenIntrospectionFilter.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.filter;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.annotation.PostConstruct;\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.http.server.PathContainer;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.util.pattern.PathPattern;\n+import org.springframework.web.util.pattern.PathPatternParser;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.JsonUtils;\n+import com.google.cloud.healthcare.fdamystudies.service.OAuthService;\n+\n+@Component\n+@Order(2)\n+public class TokenIntrospectionFilter implements Filter {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(TokenIntrospectionFilter.class.getName());\n+\n+  public static final String TOKEN = \"token\";\n+\n+  public static final String ACTIVE = \"active\";\n+\n+  @Autowired ServletContext context;\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  private Map<String, String[]> uriTemplateAndMethods = new HashMap<>();\n+\n+  @PostConstruct\n+  public void init() {\n+    // list of paths and methods for token introspection\n+    uriTemplateAndMethods.put(\n+        String.format(\"%s/v1/events\", context.getContextPath()), new String[] {\"POST\"});\n+  }\n+\n+  @Override\n+  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n+      throws IOException, ServletException {\n+    logger.entry(\n+        String.format(\"begin doFilter() for %s\", ((HttpServletRequest) request).getRequestURI()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2NDQxOQ==", "bodyText": "why is this needed?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443664419", "createdAt": "2020-06-22T15:59:00Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/TokenIntrospectionFilter.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.filter;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.annotation.PostConstruct;\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.http.server.PathContainer;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.util.pattern.PathPattern;\n+import org.springframework.web.util.pattern.PathPatternParser;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.JsonUtils;\n+import com.google.cloud.healthcare.fdamystudies.service.OAuthService;\n+\n+@Component\n+@Order(2)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2NjU2Ng==", "bodyText": "does this expose tokens to logs?\nIf that is the case, please remove the log entry.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443666566", "createdAt": "2020-06-22T16:02:11Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/OAuthServiceImpl.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.addTextFields;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getTextValue;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+@Service\n+public class OAuthServiceImpl extends BaseServiceImpl implements OAuthService {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(OAuthServiceImpl.class.getName());\n+\n+  private static final String TOKEN = \"token\";\n+\n+  private static final String SCOPE = \"scope\";\n+\n+  private static final String AUTHORIZATION = \"Authorization\";\n+\n+  private static final String CONTENT_TYPE = \"Content-Type\";\n+\n+  @Value(\"${security.oauth2.health_endpoint}\")\n+  private String healthEndpoint;\n+\n+  @Value(\"${security.oauth2.introspection_endpoint}\")\n+  private String introspectEndpoint;\n+\n+  @Override\n+  public ResponseEntity<JsonNode> health() {\n+    return getForJson(healthEndpoint);\n+  }\n+\n+  @Override\n+  public ResponseEntity<JsonNode> introspectToken(JsonNode params) {\n+    logger.entry(String.format(\"begin introspectToken() with params=%s\", params));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2Nzg3OA==", "bodyText": "why was this removed?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443667878", "createdAt": "2020-06-22T16:04:14Z", "author": {"login": "zohrehj"}, "path": "audit-log-module/audit-log-service/src/test/resources/invalid_audit_log_event.json", "diffHunk": "@@ -21,7 +21,7 @@\n \t\t\"device_platform\": null,\n \t\t\"resource_server\": \"Participant Datastore\",\n \t\t\"client_app_version\": null,\n-\t\t\"application_version\": \"v1.0\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fe92752ca19de8e1618a8d36084f9ad3399d42d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2ODIzOQ==", "bodyText": "nit: space needed after the #", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443668239", "createdAt": "2020-06-22T16:04:48Z", "author": {"login": "zohrehj"}, "path": "audit-log-module/audit-log-service/src/main/resources/application-local.properties", "diffHunk": "@@ -29,12 +29,9 @@ spring.jpa.hibernate.naming.strategy=org.hibernate.cfg.ImprovedNamingStrategy\n spring.jpa.hibernate.ddl-auto = update\n spring.jpa.show-sql=true\n \n-#actuator config, check the details at http://localhost:8001/audit-log-service/actuator\n-management.security.enabled=false\n+#actuator configs, check the details at http://localhost:8001/audit-log-service/actuator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3b4ade2159f7996752d05425678a83bb3ba08ce"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2ODQyMA==", "bodyText": "please remove if not needed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443668420", "createdAt": "2020-06-22T16:05:04Z", "author": {"login": "zohrehj"}, "path": "audit-log-module/audit-log-service/src/main/resources/application-local.properties", "diffHunk": "@@ -29,12 +29,9 @@ spring.jpa.hibernate.naming.strategy=org.hibernate.cfg.ImprovedNamingStrategy\n spring.jpa.hibernate.ddl-auto = update\n spring.jpa.show-sql=true\n \n-#actuator config, check the details at http://localhost:8001/audit-log-service/actuator\n-management.security.enabled=false\n+#actuator configs, check the details at http://localhost:8001/audit-log-service/actuator\n management.endpoints.enabled-by-default=true\n-management.endpoints.web.cors.allowed-origins=http://localhost:8002/oauth-scim-service/\n-management.endpoints.web.cors.allowed-methods=POST\n-management.endpoints.web.exposure.exclude=env,beans\n+#management.endpoints.web.exposure.exclude=", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3b4ade2159f7996752d05425678a83bb3ba08ce"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2OTI1Nw==", "bodyText": "I think these two should be moved to the block below with the rest of  com.google.cloud.healthcare.fdamystudies.common import lines.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443669257", "createdAt": "2020-06-22T16:06:21Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/TokenIntrospectionFilter.java", "diffHunk": "@@ -8,6 +8,8 @@\n \n package com.google.cloud.healthcare.fdamystudies.filter;\n \n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectMapper;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectNode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3b4ade2159f7996752d05425678a83bb3ba08ce"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MDI3Ng==", "bodyText": "since this method is returning a boolean, maybe renaming to something like:\npathAndMethodAreValid or validatePathAndHttpMethod would make it more readable.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443670276", "createdAt": "2020-06-22T16:07:54Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/TokenIntrospectionFilter.java", "diffHunk": "@@ -84,7 +85,7 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha\n     }\n   }\n \n-  private boolean applyFilter(HttpServletRequest req) {\n+  private boolean checkPathAndHttpMethodMatches(HttpServletRequest req) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3b4ade2159f7996752d05425678a83bb3ba08ce"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MDg1MQ==", "bodyText": "where is this file used?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443670851", "createdAt": "2020-06-22T16:08:53Z", "author": {"login": "zohrehj"}, "path": "audit-log-module/audit-log-service/audit-log-service.postman_collection.json", "diffHunk": "@@ -0,0 +1,141 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bfb2a698ca4238090bc11dedb84f13a4f16d186"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MTAyOA==", "bodyText": "why is this order needed here?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443671028", "createdAt": "2020-06-22T16:09:09Z", "author": {"login": "zohrehj"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/filter/TokenIntrospectionFilter.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package com.google.cloud.healthcare.fdamystudies.auditlog.filter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.annotation.PostConstruct;\n+import javax.servlet.ServletContext;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.stereotype.Component;\n+import com.google.cloud.healthcare.fdamystudies.filter.BaseTokenIntrospectionFilter;\n+\n+@Component\n+@Order(2)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bfb2a698ca4238090bc11dedb84f13a4f16d186"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8742363e61a5bdcbd25bc77d321b708b556ab3ac", "author": {"user": {"login": "dhanyak-btc", "name": "Dhanya Kumar KV"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/8742363e61a5bdcbd25bc77d321b708b556ab3ac", "committedDate": "2020-06-22T18:41:34Z", "message": "Fixed PR#540 comments\n\nFixed PR#540 comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MTE3NjI1", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#pullrequestreview-435117625", "createdAt": "2020-06-22T17:06:29Z", "commit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzowNjoyOVrOGnJmTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxOTowMDowNlrOGnNOqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcwNDkxMA==", "bodyText": "I thought we had said we were going to prefer using Java/Bean validators, especially for the cases where the validation is running on every request.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443704910", "createdAt": "2020-06-22T17:06:29Z", "author": {"login": "nikklassen"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/validator/AuditLogEventValidator.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.validator;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getArrayNode;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectNode;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getTextValue;\n+import java.util.List;\n+import javax.annotation.PostConstruct;\n+import org.apache.commons.lang3.StringUtils;\n+import org.everit.json.schema.Schema;\n+import org.everit.json.schema.ValidationException;\n+import org.everit.json.schema.loader.SchemaLoader;\n+import org.json.JSONObject;\n+import org.json.JSONTokener;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Component;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+@Component\n+public final class AuditLogEventValidator {\n+\n+  private static final String ERROR_DESCRIPTION = \"error_description\";\n+\n+  private static final String ERROR_TYPE = \"error_type\";\n+\n+  private static final String FILED_PATH = \"fieldPath\";\n+\n+  private static final String ERRORS = \"errors\";\n+\n+  private static final String STATUS = \"status\";\n+\n+  private static final String USER_ID = \"user_id\";\n+\n+  private Schema schema;\n+\n+  @PostConstruct\n+  public void loadSchema() {\n+    JSONObject jsonSchema =\n+        new JSONObject(\n+            new JSONTokener(\n+                AuditLogEventValidator.class.getResourceAsStream(\"/audit-log-event-schema.json\")));\n+    this.schema = SchemaLoader.load(jsonSchema);\n+  }\n+\n+  public JsonNode validateJson(JsonNode eventParams) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcwNTkyNQ==", "bodyText": "This should not be operating on JsonNode. You should parse the JSON into the entity type directly.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443705925", "createdAt": "2020-06-22T17:08:28Z", "author": {"login": "nikklassen"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/AuditLogEventService.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package com.google.cloud.healthcare.fdamystudies.auditlog.service;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+public interface AuditLogEventService {\n+\n+  public long saveAuditLogEvent(JsonNode eventParams);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcwNjU4Mg==", "bodyText": "This should all be done with the JSON deserialization code we went over in the last PR.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443706582", "createdAt": "2020-06-22T17:09:37Z", "author": {"login": "nikklassen"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/AuditLogEventServiceImpl.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package com.google.cloud.healthcare.fdamystudies.auditlog.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.AuditLogConstants.ALERT;\n+import static com.google.cloud.healthcare.fdamystudies.common.AuditLogConstants.APP_ID;\n+import static com.google.cloud.healthcare.fdamystudies.common.AuditLogConstants.CORRELATION_ID;\n+import static com.google.cloud.healthcare.fdamystudies.common.AuditLogConstants.EVENT_INFO;\n+import static com.google.cloud.healthcare.fdamystudies.common.AuditLogConstants.EVENT_NAME;\n+import static com.google.cloud.healthcare.fdamystudies.common.AuditLogConstants.EVENT_TIMESTAMP;\n+import static com.google.cloud.healthcare.fdamystudies.common.AuditLogConstants.ORG_ID;\n+import static com.google.cloud.healthcare.fdamystudies.common.AuditLogConstants.PLATFORM_VERSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.AuditLogConstants.SYSTEM_ID;\n+import static com.google.cloud.healthcare.fdamystudies.common.AuditLogConstants.USER_ID;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectNode;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getTextValue;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.model.AuditLogEventEntity;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.repository.AuditLogEventRepository;\n+import com.google.cloud.healthcare.fdamystudies.common.DateTimeUtils;\n+import com.google.cloud.healthcare.fdamystudies.service.BaseServiceImpl;\n+\n+@Service\n+public class AuditLogEventServiceImpl extends BaseServiceImpl implements AuditLogEventService {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(AuditLogEventServiceImpl.class.getName());\n+\n+  @Autowired private AuditLogEventRepository repository;\n+\n+  @Value(\"${auditlog.platform-version}\")\n+  private String platformVersion;\n+\n+  @Override\n+  public long saveAuditLogEvent(JsonNode eventParams) {\n+    logger.entry(String.format(\"begin saveAuditLogEvent() with eventParams=%s\", eventParams));\n+    AuditLogEventEntity event = new AuditLogEventEntity();\n+\n+    event.setCorrelationId(getTextValue(eventParams, CORRELATION_ID));\n+    event.setEventName(getTextValue(eventParams, EVENT_NAME));\n+    event.setSystemId(getTextValue(eventParams, SYSTEM_ID));\n+    event.setAppId(getTextValue(eventParams, APP_ID));\n+    event.setOrgId(getTextValue(eventParams, ORG_ID));\n+    event.setUserId(getTextValue(eventParams, USER_ID));\n+    event.setCreatedTimestamp(DateTimeUtils.getSystemDateTimestamp());\n+    event.setEventTimestamp(eventParams.get(EVENT_TIMESTAMP).longValue());\n+    event.setAlert(eventParams.get(ALERT).booleanValue());\n+\n+    ObjectNode eventInfo = getObjectNode();\n+    eventInfo.put(PLATFORM_VERSION, platformVersion);\n+    eventInfo.setAll((ObjectNode) eventParams.get(EVENT_INFO));\n+    event.setEventInfo(eventInfo.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcwODI1Ng==", "bodyText": "These length limits don't appear to be enforced anywhere.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443708256", "createdAt": "2020-06-22T17:12:34Z", "author": {"login": "nikklassen"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/model/AuditLogEventEntity.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.model;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+@Setter\n+@Getter\n+@Entity\n+@Table(name = \"audit_log_events\")\n+public class AuditLogEventEntity {\n+\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  @Column(name = \"id\", updatable = false, nullable = false)\n+  private long id;\n+\n+  @Column(name = \"correlation_id\", nullable = false, length = 255)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcxMDMyNg==", "bodyText": "Can we use a UUID for the UUID? It seems that Hibernate supports this easily. https://xebia.com/blog/jpa-implementation-patterns-using-uuids-as-primary-keys/", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443710326", "createdAt": "2020-06-22T17:16:31Z", "author": {"login": "nikklassen"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/model/AuditLogEventEntity.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.model;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+@Setter\n+@Getter\n+@Entity\n+@Table(name = \"audit_log_events\")\n+public class AuditLogEventEntity {\n+\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  @Column(name = \"id\", updatable = false, nullable = false)\n+  private long id;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzczODQ5Nw==", "bodyText": "This is an example of some of my concerns about using performPost and other methods you have created. I don't know what StringUtils.EMPTY is for if I'm just looking at this code (i.e. without an IDE). And you aren't able to use other matchers. This test is much easier to read when written like this\n    mockMvc.perform(post(ApiEndpoint.EVENTS.getPath()).headers(headers))\n        .andDo(print())\n        .andExpect(status().isCreated())\n        .andExpect(content().string(containsString(validAuditLogEvent)))\n        .andExpect(model().attribute(\"event_id\", greaterThan(0)));\nI think we are overoptimizing here to remove the duplicated code, but the function call just removes too much flexibility and information.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443738497", "createdAt": "2020-06-22T18:08:45Z", "author": {"login": "nikklassen"}, "path": "audit-log-module/audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/controller/AuditLogEventControllerTest.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.controller;\n+\n+import static org.junit.Assert.assertTrue;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.UUID;\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.web.servlet.MvcResult;\n+import com.fasterxml.jackson.core.JsonParseException;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.common.ApiEndpoint;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.validator.AuditLogEventValidator;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.jayway.jsonpath.JsonPath;\n+\n+public class AuditLogEventControllerTest extends BaseMockIT {\n+\n+  @Autowired AuditLogEventValidator validator;\n+\n+  private static String validAuditLogEvent;\n+\n+  private static String invalidAuditLogEvent;\n+\n+  private static ObjectMapper objMapper = new ObjectMapper();\n+\n+  @BeforeAll\n+  public static void loadEvents() throws JsonParseException, JsonMappingException, IOException {\n+    invalidAuditLogEvent =\n+        objMapper\n+            .readValue(\n+                AuditLogEventControllerTest.class.getResourceAsStream(\n+                    \"/invalid_audit_log_event.json\"),\n+                JsonNode.class)\n+            .toString();\n+\n+    validAuditLogEvent =\n+        objMapper\n+            .readValue(\n+                AuditLogEventControllerTest.class.getResourceAsStream(\n+                    \"/valid_audit_log_event.json\"),\n+                JsonNode.class)\n+            .toString();\n+  }\n+\n+  @Test\n+  public void shouldSaveAuditLogEvent() throws Exception {\n+    HttpHeaders headers = getCommonHeaders();\n+    headers.add(\"Authorization\", VALID_BEARER_TOKEN);\n+    MvcResult result =\n+        performPost(\n+            ApiEndpoint.EVENTS.getPath(), validAuditLogEvent, headers, StringUtils.EMPTY, CREATED);\n+    int eventId = JsonPath.read(result.getResponse().getContentAsString(), \"$.event_id\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1MjIzNA==", "bodyText": "This test suite isn't for the FilterChainExceptionHandler. So I wouldn't mention it here. We are only testing that we get a \"Not Found\", it doesn't matter how that is implement.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443752234", "createdAt": "2020-06-22T18:35:41Z", "author": {"login": "nikklassen"}, "path": "audit-log-module/audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/controller/AuditLogEventControllerTest.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.controller;\n+\n+import static org.junit.Assert.assertTrue;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.UUID;\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.web.servlet.MvcResult;\n+import com.fasterxml.jackson.core.JsonParseException;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.common.ApiEndpoint;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.validator.AuditLogEventValidator;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.jayway.jsonpath.JsonPath;\n+\n+public class AuditLogEventControllerTest extends BaseMockIT {\n+\n+  @Autowired AuditLogEventValidator validator;\n+\n+  private static String validAuditLogEvent;\n+\n+  private static String invalidAuditLogEvent;\n+\n+  private static ObjectMapper objMapper = new ObjectMapper();\n+\n+  @BeforeAll\n+  public static void loadEvents() throws JsonParseException, JsonMappingException, IOException {\n+    invalidAuditLogEvent =\n+        objMapper\n+            .readValue(\n+                AuditLogEventControllerTest.class.getResourceAsStream(\n+                    \"/invalid_audit_log_event.json\"),\n+                JsonNode.class)\n+            .toString();\n+\n+    validAuditLogEvent =\n+        objMapper\n+            .readValue(\n+                AuditLogEventControllerTest.class.getResourceAsStream(\n+                    \"/valid_audit_log_event.json\"),\n+                JsonNode.class)\n+            .toString();\n+  }\n+\n+  @Test\n+  public void shouldSaveAuditLogEvent() throws Exception {\n+    HttpHeaders headers = getCommonHeaders();\n+    headers.add(\"Authorization\", VALID_BEARER_TOKEN);\n+    MvcResult result =\n+        performPost(\n+            ApiEndpoint.EVENTS.getPath(), validAuditLogEvent, headers, StringUtils.EMPTY, CREATED);\n+    int eventId = JsonPath.read(result.getResponse().getContentAsString(), \"$.event_id\");\n+    assertTrue(eventId > 0);\n+  }\n+\n+  @Test\n+  public void shouldReturnUnauthorized() throws Exception {\n+    HttpHeaders headers = getCommonHeaders();\n+    headers.add(\"Authorization\", INVALID_BEARER_TOKEN);\n+\n+    performPost(\n+        ApiEndpoint.EVENTS.getPath(), validAuditLogEvent, headers, \"Invalid token\", UNAUTHORIZED);\n+  }\n+\n+  @Test\n+  public void shouldReturnNotFoundForRestClientErrorException() throws Exception {\n+    HttpHeaders headers = getCommonHeaders();\n+    headers.add(\"Authorization\", \"Bearer \" + UUID.randomUUID().toString());\n+\n+    // expect FilterChainExceptionHandler extracts status code and error message from", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1MzEyOA==", "bodyText": "This doesn't appear to be used by this PR", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443753128", "createdAt": "2020-06-22T18:37:35Z", "author": {"login": "nikklassen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/DateTimeUtils.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.common;\n+\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+\n+public final class DateTimeUtils {\n+\n+  private DateTimeUtils() {}\n+\n+  public static long getSystemDateTimestamp() {\n+    return Instant.now().toEpochMilli();\n+  }\n+\n+  public static long getSystemDateTimestamp(long days, long hours, long minutes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1NDE5OA==", "bodyText": "Why are we trying to process HTML responses and pull out error details? We should be handling the exceptions before they are formatted as HTML.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443754198", "createdAt": "2020-06-22T18:39:41Z", "author": {"login": "nikklassen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/ErrorResponse.java", "diffHunk": "@@ -23,13 +28,53 @@\n @JsonSerialize(using = ErrorResponse.ErrorResponseSerializer.class)\n public class ErrorResponse {\n \n-  private String requestUri;\n+  private XLogger logger = XLoggerFactory.getXLogger(ErrorResponse.class.getName());\n \n-  private RestClientResponseException restClientResponseException;\n+  private String errorDescription;\n \n-  public ErrorResponse(String requestUri, RestClientResponseException restClientResponseException) {\n-    this.requestUri = requestUri;\n-    this.restClientResponseException = restClientResponseException;\n+  private String errorType;\n+\n+  private int status;\n+\n+  private long timestamp = Instant.now().toEpochMilli();\n+\n+  public ErrorResponse(RestClientResponseException restClientResponseException) {\n+    populateErrorFields(restClientResponseException);\n+  }\n+\n+  private void populateErrorFields(RestClientResponseException restClientResponseException) {\n+    status = restClientResponseException.getRawStatusCode();\n+    errorType = restClientResponseException.getClass().getSimpleName();\n+    errorDescription = restClientResponseException.getResponseBodyAsString();\n+\n+    // tomcat sets response body as html\n+    if (StringUtils.containsIgnoreCase(errorDescription, \"html\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1NTM0Mg==", "bodyText": "You've implemented serialization for ErrorResponse, so you don't need to return a ResponseEntity, just return the ErrorResponse. You can set the status code with @StatusCode to HttpStatus.Internal.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443755342", "createdAt": "2020-06-22T18:41:58Z", "author": {"login": "nikklassen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/RestExceptionHandler.java", "diffHunk": "@@ -1,19 +1,41 @@\n package com.google.cloud.healthcare.fdamystudies.common;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n import org.springframework.web.bind.annotation.ControllerAdvice;\n import org.springframework.web.bind.annotation.ExceptionHandler;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.springframework.web.client.RestClientResponseException;\n+import org.springframework.web.context.request.ServletWebRequest;\n import org.springframework.web.context.request.WebRequest;\n import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;\n \n @ControllerAdvice\n public class RestExceptionHandler extends ResponseEntityExceptionHandler {\n \n+  private static final Logger LOG = LoggerFactory.getLogger(RestExceptionHandler.class);\n+\n   @SuppressWarnings(\"rawtypes\")\n   @ExceptionHandler(Exception.class)\n   public ResponseEntity handleSystemException(Exception ex, WebRequest request) {\n+    String uri = ((ServletWebRequest) request).getRequest().getRequestURI();\n+    LOG.error(String.format(\"%s request failed with an exception\", uri), ex);\n     return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n         .body(ErrorCode.APPLICATION_ERROR);\n   }\n+\n+  @SuppressWarnings(\"rawtypes\")\n+  @ExceptionHandler(RestClientResponseException.class)\n+  public ResponseEntity handleRestClientResponseException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1ODk2MA==", "bodyText": "I don't think we should be forwarding the OAuth server's response here. I think we should just return a generic \"Unauthorized\" like in the \"not ACTIVE\" code path.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443758960", "createdAt": "2020-06-22T18:49:30Z", "author": {"login": "nikklassen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/BaseTokenIntrospectionFilter.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.filter;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectMapper;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectNode;\n+import java.io.IOException;\n+import java.util.Map;\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.http.server.PathContainer;\n+import org.springframework.web.util.pattern.PathPattern;\n+import org.springframework.web.util.pattern.PathPatternParser;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.service.OAuthService;\n+\n+public abstract class BaseTokenIntrospectionFilter implements Filter {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(BaseTokenIntrospectionFilter.class.getName());\n+\n+  public static final String TOKEN = \"token\";\n+\n+  public static final String ACTIVE = \"active\";\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Override\n+  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n+      throws IOException, ServletException {\n+    logger.entry(\n+        String.format(\"begin doFilter() for %s\", ((HttpServletRequest) request).getRequestURI()));\n+    HttpServletRequest req = (HttpServletRequest) request;\n+    if (checkPathAndHttpMethodMatches(req)) {\n+      logger.info(String.format(\"validate token for %s\", req.getRequestURI()));\n+\n+      String auth = req.getHeader(\"Authorization\");\n+      if (StringUtils.isEmpty(auth)) {\n+        logger.exit(\"token is empty, return 401 Unauthorized response\");\n+        setUnauthorizedResponse(response);\n+      } else {\n+        validateOAuthToken(request, response, chain, auth);\n+      }\n+    } else {\n+      logger.info(String.format(\"skip token validation for %s\", req.getRequestURI()));\n+      chain.doFilter(request, response);\n+    }\n+  }\n+\n+  private boolean checkPathAndHttpMethodMatches(HttpServletRequest req) {\n+    String method = req.getMethod().toUpperCase();\n+    for (Map.Entry<String, String[]> entry : getUriTemplateAndHttpMethodsMap().entrySet()) {\n+      if (ArrayUtils.contains(entry.getValue(), method)\n+          && checkPathMatches(entry.getKey(), req.getRequestURI())) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n+\n+  private static boolean checkPathMatches(String uriTemplate, String path) {\n+    PathPatternParser parser = new PathPatternParser();\n+    parser.setMatchOptionalTrailingSeparator(true);\n+    PathPattern p = parser.parse(uriTemplate);\n+    return p.matches(PathContainer.parsePath(path));\n+  }\n+\n+  private void validateOAuthToken(\n+      ServletRequest request, ServletResponse response, FilterChain chain, String auth)\n+      throws IOException, ServletException {\n+    String token = StringUtils.replace(auth, \"Bearer\", \"\").trim();\n+    ObjectNode params = getObjectNode();\n+    params.put(TOKEN, token);\n+    ResponseEntity<JsonNode> oauthResponse = oauthService.introspectToken(params);\n+    if (oauthResponse.getStatusCode().is2xxSuccessful()) {\n+      if (oauthResponse.getBody().get(ACTIVE).booleanValue()) {\n+        chain.doFilter(request, response);\n+      } else {\n+        logger.exit(\"token is invalid, return 401 Unauthorized response\");\n+        setUnauthorizedResponse(response);\n+      }\n+    } else {\n+      logger.exit(\n+          String.format(\n+              \"status=%d, response=%s\",\n+              oauthResponse.getStatusCodeValue(), oauthResponse.getBody()));\n+      HttpServletResponse res = (HttpServletResponse) response;\n+      res.setStatus(oauthResponse.getStatusCodeValue());\n+      res.setContentType(MediaType.APPLICATION_JSON_VALUE);\n+      res.getOutputStream().write(oauthResponse.getBody().toString().getBytes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2MDUxMg==", "bodyText": "I don't think this should be a filter. We want to handle most errors with @ExceptionHandler. For catching errors in other Filters I would put they try-catch logic in those classes.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443760512", "createdAt": "2020-06-22T18:52:31Z", "author": {"login": "nikklassen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/FilterChainExceptionHandler.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.google.cloud.healthcare.fdamystudies.filter;\n+\n+import java.io.IOException;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.springframework.web.client.HttpServerErrorException;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.JsonUtils;\n+\n+@Component\n+@Order(1)\n+public class FilterChainExceptionHandler extends OncePerRequestFilter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2MDgzMg==", "bodyText": "avoid wrapping one-liners.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443760832", "createdAt": "2020-06-22T18:53:12Z", "author": {"login": "nikklassen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/BaseServiceImpl.java", "diffHunk": "@@ -9,83 +9,44 @@\n package com.google.cloud.healthcare.fdamystudies.service;\n \n import java.util.Collections;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpEntity;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpMethod;\n import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n import org.springframework.util.MultiValueMap;\n-import org.springframework.web.client.HttpClientErrorException;\n-import org.springframework.web.client.HttpServerErrorException;\n import org.springframework.web.client.RestTemplate;\n import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.node.ObjectNode;\n-import com.google.cloud.healthcare.fdamystudies.common.ErrorResponse;\n \n public abstract class BaseServiceImpl {\n \n-  private static final String REQUEST_FAILED_WITH_AN_EXCEPTION =\n-      \"%s request failed with an exception\";\n-\n-  private static final Logger LOG = LoggerFactory.getLogger(BaseServiceImpl.class);\n-\n-  @Autowired private ObjectMapper objectMapper;\n-\n   @Autowired private RestTemplate restTemplate;\n \n-  @SuppressWarnings(\"rawtypes\")\n-  protected ResponseEntity exchangeForJson(\n+  protected ResponseEntity<JsonNode> exchangeForJson(\n       String url,\n       HttpHeaders headers,\n       JsonNode request,\n       HttpMethod method,\n       Object... uriVariables) {\n     headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n     HttpEntity<JsonNode> requestEntity = new HttpEntity<>(request, headers);\n-    try {\n-      return restTemplate.exchange(url, method, requestEntity, JsonNode.class, uriVariables);\n-    } catch (HttpClientErrorException | HttpServerErrorException e) {\n-      LOG.error(String.format(REQUEST_FAILED_WITH_AN_EXCEPTION, url), e);\n-      ErrorResponse err = new ErrorResponse(url, e);\n-      return ResponseEntity.status(e.getRawStatusCode()).body(err);\n-    }\n+    return restTemplate.exchange(url, method, requestEntity, JsonNode.class, uriVariables);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2MTA1MQ==", "bodyText": "avoid wrapping one-liners.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443761051", "createdAt": "2020-06-22T18:53:37Z", "author": {"login": "nikklassen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/BaseServiceImpl.java", "diffHunk": "@@ -9,83 +9,44 @@\n package com.google.cloud.healthcare.fdamystudies.service;\n \n import java.util.Collections;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpEntity;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpMethod;\n import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n import org.springframework.util.MultiValueMap;\n-import org.springframework.web.client.HttpClientErrorException;\n-import org.springframework.web.client.HttpServerErrorException;\n import org.springframework.web.client.RestTemplate;\n import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.node.ObjectNode;\n-import com.google.cloud.healthcare.fdamystudies.common.ErrorResponse;\n \n public abstract class BaseServiceImpl {\n \n-  private static final String REQUEST_FAILED_WITH_AN_EXCEPTION =\n-      \"%s request failed with an exception\";\n-\n-  private static final Logger LOG = LoggerFactory.getLogger(BaseServiceImpl.class);\n-\n-  @Autowired private ObjectMapper objectMapper;\n-\n   @Autowired private RestTemplate restTemplate;\n \n-  @SuppressWarnings(\"rawtypes\")\n-  protected ResponseEntity exchangeForJson(\n+  protected ResponseEntity<JsonNode> exchangeForJson(\n       String url,\n       HttpHeaders headers,\n       JsonNode request,\n       HttpMethod method,\n       Object... uriVariables) {\n     headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n     HttpEntity<JsonNode> requestEntity = new HttpEntity<>(request, headers);\n-    try {\n-      return restTemplate.exchange(url, method, requestEntity, JsonNode.class, uriVariables);\n-    } catch (HttpClientErrorException | HttpServerErrorException e) {\n-      LOG.error(String.format(REQUEST_FAILED_WITH_AN_EXCEPTION, url), e);\n-      ErrorResponse err = new ErrorResponse(url, e);\n-      return ResponseEntity.status(e.getRawStatusCode()).body(err);\n-    }\n+    return restTemplate.exchange(url, method, requestEntity, JsonNode.class, uriVariables);\n   }\n \n-  @SuppressWarnings(\"rawtypes\")\n-  protected ResponseEntity exchangeForJson(\n+  protected ResponseEntity<JsonNode> exchangeForJson(\n       String url,\n       HttpHeaders headers,\n       MultiValueMap<String, String> request,\n       HttpMethod method,\n       Object... uriVariables) {\n     headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n     HttpEntity<MultiValueMap<String, String>> requestEntity = new HttpEntity<>(request, headers);\n-    try {\n-      return restTemplate.exchange(url, method, requestEntity, JsonNode.class, uriVariables);\n-    } catch (HttpClientErrorException | HttpServerErrorException e) {\n-      LOG.error(String.format(REQUEST_FAILED_WITH_AN_EXCEPTION, url), e);\n-      ErrorResponse err = new ErrorResponse(url, e);\n-      return ResponseEntity.status(e.getRawStatusCode()).body(err);\n-    }\n-  }\n-\n-  @SuppressWarnings(\"rawtypes\")\n-  protected ResponseEntity getForJson(String url, Object... uriVariables) {\n-    try {\n-      return restTemplate.getForEntity(url, JsonNode.class, uriVariables);\n-    } catch (HttpClientErrorException | HttpServerErrorException e) {\n-      LOG.error(String.format(REQUEST_FAILED_WITH_AN_EXCEPTION, url), e);\n-      ErrorResponse err = new ErrorResponse(url, e);\n-      return ResponseEntity.status(e.getRawStatusCode()).body(err);\n-    }\n+    return restTemplate.exchange(url, method, requestEntity, JsonNode.class, uriVariables);\n   }\n \n-  protected ObjectNode getObjectNode() {\n-    return objectMapper.createObjectNode();\n+  protected ResponseEntity<JsonNode> getForJson(String url, Object... uriVariables) {\n+    return restTemplate.getForEntity(url, JsonNode.class, uriVariables);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2NDM5NA==", "bodyText": "This will still provide a lot of noise in the TRACE logs so I also think it should be removed, even though it won't be logging in production.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443764394", "createdAt": "2020-06-22T19:00:06Z", "author": {"login": "nikklassen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/HealthController.java", "diffHunk": "@@ -6,31 +6,35 @@\n  * https://opensource.org/licenses/MIT.\n  */\n \n-package com.google.cloud.healthcare.fdamystudies.auditlog.controller;\n+package com.google.cloud.healthcare.fdamystudies.controller;\n \n import javax.servlet.http.HttpServletRequest;\n import org.slf4j.ext.XLogger;\n import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RestController;\n import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.service.OAuthService;\n \n @RestController\n @RequestMapping(\"/v1\")\n-public class HealthController extends BaseController {\n+public class HealthController {\n \n   private XLogger logger = XLoggerFactory.getXLogger(HealthController.class.getName());\n \n+  @Autowired private OAuthService oauthService;\n+\n   @GetMapping(\n       value = \"/health\",\n       produces = {MediaType.APPLICATION_JSON_VALUE})\n   public ResponseEntity<JsonNode> health(HttpServletRequest request) {\n     logger.entry(String.format(\"begin %s request with no args\", request.getRequestURI()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2MDU2Mw=="}, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d8f03e1b280fcd6e7f280e821bc5d47b2cc5e57", "author": {"user": {"login": "dhanyak-btc", "name": "Dhanya Kumar KV"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/5d8f03e1b280fcd6e7f280e821bc5d47b2cc5e57", "committedDate": "2020-06-23T12:10:40Z", "message": "Fixed PR review comments\n\nFixed PR review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1Nzc5Mjcz", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#pullrequestreview-435779273", "createdAt": "2020-06-23T13:26:31Z", "commit": {"oid": "5d8f03e1b280fcd6e7f280e821bc5d47b2cc5e57"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzoyNjozMVrOGnpJVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzoyNjozMVrOGnpJVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIyMTc4MA==", "bodyText": "You don't need to expose implementation details to your user. You've logged the reason so you know what happened here. Also, according to the Javadocs for @ResponseStatus, you shouldn't use reason for REST endpoints.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444221780", "createdAt": "2020-06-23T13:26:31Z", "author": {"login": "nikklassen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/RestExceptionHandler.java", "diffHunk": "@@ -26,16 +27,18 @@ public ResponseEntity handleSystemException(Exception ex, WebRequest request) {\n         .body(ErrorCode.APPLICATION_ERROR);\n   }\n \n-  @SuppressWarnings(\"rawtypes\")\n   @ExceptionHandler(RestClientResponseException.class)\n-  public ResponseEntity handleRestClientResponseException(\n+  @ResponseStatus(\n+      code = HttpStatus.INTERNAL_SERVER_ERROR,\n+      reason = \"request failed due to RestClientResponseException\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d8f03e1b280fcd6e7f280e821bc5d47b2cc5e57"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a346803bc6b9b92e46919cc6830bfc247aa607e", "author": {"user": {"login": "dhanyak-btc", "name": "Dhanya Kumar KV"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/4a346803bc6b9b92e46919cc6830bfc247aa607e", "committedDate": "2020-06-24T14:13:43Z", "message": "Refactored the code to fix PR comments\n\nRemoved JSoup, Json Schema validator dependencies.\nAdded server-side validation using validation annotations,\nAdded ErrorController, GlobalExceptionHandler, ValidationErrorResponse and AuditLogEventRequest to common-service module\nAdded jsonassert dependency to assert json values."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57fb701edb8f65ffc49cd242a8b6ca549d496665", "author": {"user": {"login": "dhanyak-btc", "name": "Dhanya Kumar KV"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/57fb701edb8f65ffc49cd242a8b6ca549d496665", "committedDate": "2020-06-24T14:43:27Z", "message": "Added logger statements to GlobalExceptionHandler\n\nAdded logger statements to GlobalExceptionHandler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12eea074c3d4134d745323783d5024161baadc12", "author": {"user": {"login": "dhanyak-btc", "name": "Dhanya Kumar KV"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/12eea074c3d4134d745323783d5024161baadc12", "committedDate": "2020-06-24T14:56:44Z", "message": "Moved AuditLogEventResponse to common-service module\n\nMoved AuditLogEventResponse to common-service module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55b5f413ef3f45f32dd0fbb82131b105f344a11e", "author": {"user": {"login": "dhanyak-btc", "name": "Dhanya Kumar KV"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/55b5f413ef3f45f32dd0fbb82131b105f344a11e", "committedDate": "2020-06-24T14:58:04Z", "message": "Deleted postman collection\n\nDeleted postman collection"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a8c9f562cff273b716f5f2ce3e2d7bf59ccdd75", "author": {"user": {"login": "dhanyak-btc", "name": "Dhanya Kumar KV"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/4a8c9f562cff273b716f5f2ce3e2d7bf59ccdd75", "committedDate": "2020-06-24T15:06:12Z", "message": "Added @ToString.Exclude to entity class\n\nAdded @ToString.Exclude to entity class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68c94de2235c2e7133899263391327d5647b6bc2", "author": {"user": {"login": "dhanyak-btc", "name": "Dhanya Kumar KV"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/68c94de2235c2e7133899263391327d5647b6bc2", "committedDate": "2020-06-24T15:48:19Z", "message": "Removed params from logger.entry\n\nRemoved params from logger.entry"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODA0NTQ5", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#pullrequestreview-436804549", "createdAt": "2020-06-24T16:17:50Z", "commit": {"oid": "e3b4ade2159f7996752d05425678a83bb3ba08ce"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjoxNzo1MFrOGoZgUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjoxNzo1MFrOGoZgUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAxNDA5Ng==", "bodyText": "I understand, since it is not needed in local file, it should be removed.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r445014096", "createdAt": "2020-06-24T16:17:50Z", "author": {"login": "zohrehj"}, "path": "audit-log-module/audit-log-service/src/main/resources/application-local.properties", "diffHunk": "@@ -29,12 +29,9 @@ spring.jpa.hibernate.naming.strategy=org.hibernate.cfg.ImprovedNamingStrategy\n spring.jpa.hibernate.ddl-auto = update\n spring.jpa.show-sql=true\n \n-#actuator config, check the details at http://localhost:8001/audit-log-service/actuator\n-management.security.enabled=false\n+#actuator configs, check the details at http://localhost:8001/audit-log-service/actuator\n management.endpoints.enabled-by-default=true\n-management.endpoints.web.cors.allowed-origins=http://localhost:8002/oauth-scim-service/\n-management.endpoints.web.cors.allowed-methods=POST\n-management.endpoints.web.exposure.exclude=env,beans\n+#management.endpoints.web.exposure.exclude=", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2ODQyMA=="}, "originalCommit": {"oid": "e3b4ade2159f7996752d05425678a83bb3ba08ce"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODgxMjA2", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#pullrequestreview-436881206", "createdAt": "2020-06-24T17:59:00Z", "commit": {"oid": "68c94de2235c2e7133899263391327d5647b6bc2"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzo1OTowMFrOGodHZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODoxMjowNFrOGodjVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3MzI1NA==", "bodyText": "A convention we use at Google is to have verbs be consistent to the same data entity. So you've got two methods here starting with to so it's a bit more confusing about the types involved. Since the type this class is focusing is the AuditLogEvent you can make that more clear by calling this fromAuditLogEventRequest. The other method name is still correct. This way the mapper class name always reflects the data entity type, and the method name always refers to the other type involved.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r445073254", "createdAt": "2020-06-24T17:59:00Z", "author": {"login": "nikklassen"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/mapper/AuditLogEventMapper.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.google.cloud.healthcare.fdamystudies.auditlog.mapper;\n+\n+import java.time.Instant;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.model.AuditLogEventEntity;\n+import com.google.cloud.healthcare.fdamystudies.beans.AuditLogEventRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.AuditLogEventResponse;\n+\n+public final class AuditLogEventMapper {\n+\n+  private AuditLogEventMapper() {}\n+\n+  public static AuditLogEventEntity toAuditLogEventEntity(AuditLogEventRequest aleRequest) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c94de2235c2e7133899263391327d5647b6bc2"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3NzE5OA==", "bodyText": "This is a great reference example of how a test should be written. Please pass this along to the rest of the team as an example of a meaningful assertion that your test succeeded, without the test being too busy asserting everything.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r445077198", "createdAt": "2020-06-24T18:06:12Z", "author": {"login": "nikklassen"}, "path": "audit-log-module/audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/controller/AuditLogEventControllerTest.java", "diffHunk": "@@ -8,62 +8,65 @@\n \n package com.google.cloud.healthcare.fdamystudies.auditlog.controller;\n \n-import static org.junit.Assert.assertTrue;\n-import java.io.IOException;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.asJsonString;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.readJsonFile;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import java.time.Instant;\n import java.util.Collections;\n import java.util.UUID;\n-import org.junit.jupiter.api.BeforeAll;\n+import org.apache.commons.lang3.RandomStringUtils;\n import org.junit.jupiter.api.Test;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.skyscreamer.jsonassert.JSONCompareMode;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.MediaType;\n import org.springframework.test.web.servlet.MvcResult;\n-import com.fasterxml.jackson.core.JsonParseException;\n-import com.fasterxml.jackson.databind.JsonMappingException;\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n import com.google.cloud.healthcare.fdamystudies.auditlog.common.ApiEndpoint;\n-import com.google.cloud.healthcare.fdamystudies.auditlog.validator.AuditLogEventValidator;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.model.AuditLogEventEntity;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.repository.AuditLogEventRepository;\n+import com.google.cloud.healthcare.fdamystudies.beans.AuditLogEventRequest;\n import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n import com.jayway.jsonpath.JsonPath;\n \n public class AuditLogEventControllerTest extends BaseMockIT {\n \n-  @Autowired AuditLogEventValidator validator;\n-\n-  private static String validAuditLogEvent;\n-\n-  private static String invalidAuditLogEvent;\n-\n-  private static ObjectMapper objMapper = new ObjectMapper();\n-\n-  @BeforeAll\n-  public static void loadEvents() throws JsonParseException, JsonMappingException, IOException {\n-    invalidAuditLogEvent =\n-        objMapper\n-            .readValue(\n-                AuditLogEventControllerTest.class.getResourceAsStream(\n-                    \"/invalid_audit_log_event.json\"),\n-                JsonNode.class)\n-            .toString();\n-\n-    validAuditLogEvent =\n-        objMapper\n-            .readValue(\n-                AuditLogEventControllerTest.class.getResourceAsStream(\n-                    \"/valid_audit_log_event.json\"),\n-                JsonNode.class)\n-            .toString();\n-  }\n+  @Autowired private AuditLogEventRepository repository;\n \n   @Test\n   public void shouldSaveAuditLogEvent() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c94de2235c2e7133899263391327d5647b6bc2"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3OTMzMg==", "bodyText": "You can remove this now that there are no rawtypes involved.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r445079332", "createdAt": "2020-06-24T18:10:06Z", "author": {"login": "nikklassen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/exceptions/GlobalExceptionHandler.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.exceptions;\n+\n+import javax.validation.ConstraintViolation;\n+import javax.validation.ConstraintViolationException;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.converter.HttpMessageNotReadableException;\n+import org.springframework.validation.FieldError;\n+import org.springframework.web.bind.MethodArgumentNotValidException;\n+import org.springframework.web.bind.MissingRequestHeaderException;\n+import org.springframework.web.bind.annotation.ControllerAdvice;\n+import org.springframework.web.bind.annotation.ExceptionHandler;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+import org.springframework.web.client.HttpClientErrorException.BadRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.ValidationErrorResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.ValidationErrorResponse.Violation;\n+\n+@ControllerAdvice\n+public class GlobalExceptionHandler {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(GlobalExceptionHandler.class.getName());\n+\n+  @ExceptionHandler(BadRequest.class)\n+  @ResponseStatus(HttpStatus.BAD_REQUEST)\n+  public void handleBadRequest() {}\n+\n+  @SuppressWarnings(\"rawtypes\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c94de2235c2e7133899263391327d5647b6bc2"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA4MDQwNg==", "bodyText": "I would move these down to the TRACE level. These are definitely helpful for debugging, but since they are caused by users we don't want them causing error log spam with malicious inputs. The error log level can be reserved for system exceptions and user requests that are dangerous.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r445080406", "createdAt": "2020-06-24T18:12:04Z", "author": {"login": "nikklassen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/exceptions/GlobalExceptionHandler.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.exceptions;\n+\n+import javax.validation.ConstraintViolation;\n+import javax.validation.ConstraintViolationException;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.converter.HttpMessageNotReadableException;\n+import org.springframework.validation.FieldError;\n+import org.springframework.web.bind.MethodArgumentNotValidException;\n+import org.springframework.web.bind.MissingRequestHeaderException;\n+import org.springframework.web.bind.annotation.ControllerAdvice;\n+import org.springframework.web.bind.annotation.ExceptionHandler;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+import org.springframework.web.client.HttpClientErrorException.BadRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.ValidationErrorResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.ValidationErrorResponse.Violation;\n+\n+@ControllerAdvice\n+public class GlobalExceptionHandler {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(GlobalExceptionHandler.class.getName());\n+\n+  @ExceptionHandler(BadRequest.class)\n+  @ResponseStatus(HttpStatus.BAD_REQUEST)\n+  public void handleBadRequest() {}\n+\n+  @SuppressWarnings(\"rawtypes\")\n+  @ExceptionHandler(ConstraintViolationException.class)\n+  @ResponseStatus(HttpStatus.BAD_REQUEST)\n+  @ResponseBody\n+  public ValidationErrorResponse handleConstraintValidationException(\n+      ConstraintViolationException e) {\n+    logger.error(\"request failed with ConstraintViolationException\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c94de2235c2e7133899263391327d5647b6bc2"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1cab43d3434add0d523c8d9bfd21772ff1de11ef", "author": {"user": {"login": "dhanyak-btc", "name": "Dhanya Kumar KV"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/1cab43d3434add0d523c8d9bfd21772ff1de11ef", "committedDate": "2020-06-25T07:02:20Z", "message": "Fixed PR comments - imports and logger statements\n\nFixed Imports and Removed beans, request/response from logger statements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e82280486d96aef4c2d34c5c4f5c3aa2cf02159a", "author": {"user": {"login": "dhanyak-btc", "name": "Dhanya Kumar KV"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/e82280486d96aef4c2d34c5c4f5c3aa2cf02159a", "committedDate": "2020-06-25T08:38:31Z", "message": "Changed the column definition to TIMESTAMP\n\nChanged the column definition to TIMESTAMP for eventTimestamp and createdTimestamp in AuditLogEventEntity class.\n\nAdded javdocs to eventTimestamp in AuditLogEventRequest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac8a1ecaa5ed4c90a80afbc176e70af24eafea57", "author": {"user": {"login": "dhanyak-btc", "name": "Dhanya Kumar KV"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/ac8a1ecaa5ed4c90a80afbc176e70af24eafea57", "committedDate": "2020-06-25T16:17:21Z", "message": "Removed @SuppressWarnings and changed log level to trace\n\nRemoved  @SuppressWarnings(\"rawtypes\")\nChanged log level to trace in handleConstraintValidationException() method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NzEyNTIx", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#pullrequestreview-437712521", "createdAt": "2020-06-25T17:33:33Z", "commit": {"oid": "ac8a1ecaa5ed4c90a80afbc176e70af24eafea57"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3ODM2NDIy", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#pullrequestreview-437836422", "createdAt": "2020-06-25T20:31:49Z", "commit": {"oid": "ac8a1ecaa5ed4c90a80afbc176e70af24eafea57"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDozMTo0OVrOGpKvew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMTowMzowMlrOGpLtEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyMDc5NQ==", "bodyText": "Google API guideline suggests calling these timestamp columns simply:\ncreated, modified etc", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r445820795", "createdAt": "2020-06-25T20:31:49Z", "author": {"login": "zohrehj"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/model/AuditLogEventEntity.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.model;\n+\n+import java.sql.Timestamp;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+import org.hibernate.annotations.GenericGenerator;\n+\n+@Setter\n+@Getter\n+@Entity\n+@Table(name = \"audit_log_events\")\n+public class AuditLogEventEntity {\n+\n+  @Id\n+  @GeneratedValue(generator = \"system-uuid\")\n+  @GenericGenerator(name = \"system-uuid\", strategy = \"uuid\")\n+  @Column(name = \"id\", updatable = false, nullable = false)\n+  private String id;\n+\n+  @Column(name = \"correlation_id\", nullable = false, length = 36)\n+  private String correlationId;\n+\n+  @Column(name = \"event_name\", nullable = false, length = 40)\n+  private String eventName;\n+\n+  @Column(name = \"system_id\", nullable = false, length = 30)\n+  private String systemId;\n+\n+  @Column(\n+      name = \"event_timestamp\",\n+      nullable = false,\n+      updatable = false,\n+      columnDefinition = \"TIMESTAMP\")\n+  private Timestamp eventTimestamp;\n+\n+  @Column(\n+      name = \"created_timestamp\",\n+      insertable = false,\n+      updatable = false,\n+      columnDefinition = \"TIMESTAMP DEFAULT CURRENT_TIMESTAMP\")\n+  private Timestamp createdTimestamp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac8a1ecaa5ed4c90a80afbc176e70af24eafea57"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyMDkzOA==", "bodyText": "could be renamed to occured maybe?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r445820938", "createdAt": "2020-06-25T20:32:04Z", "author": {"login": "zohrehj"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/model/AuditLogEventEntity.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.model;\n+\n+import java.sql.Timestamp;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+import org.hibernate.annotations.GenericGenerator;\n+\n+@Setter\n+@Getter\n+@Entity\n+@Table(name = \"audit_log_events\")\n+public class AuditLogEventEntity {\n+\n+  @Id\n+  @GeneratedValue(generator = \"system-uuid\")\n+  @GenericGenerator(name = \"system-uuid\", strategy = \"uuid\")\n+  @Column(name = \"id\", updatable = false, nullable = false)\n+  private String id;\n+\n+  @Column(name = \"correlation_id\", nullable = false, length = 36)\n+  private String correlationId;\n+\n+  @Column(name = \"event_name\", nullable = false, length = 40)\n+  private String eventName;\n+\n+  @Column(name = \"system_id\", nullable = false, length = 30)\n+  private String systemId;\n+\n+  @Column(\n+      name = \"event_timestamp\",\n+      nullable = false,\n+      updatable = false,\n+      columnDefinition = \"TIMESTAMP\")\n+  private Timestamp eventTimestamp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac8a1ecaa5ed4c90a80afbc176e70af24eafea57"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyMzY2NQ==", "bodyText": "please add back the healthcheck test as well. It should assert that the response status is 200", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r445823665", "createdAt": "2020-06-25T20:37:14Z", "author": {"login": "zohrehj"}, "path": "audit-log-module/audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/ApplicationTest.java", "diffHunk": "@@ -9,14 +9,15 @@\n package com.google.cloud.healthcare.fdamystudies.auditlog;\n \n import static org.junit.Assert.assertNotNull;\n+\n+import com.google.cloud.healthcare.fdamystudies.auditlog.controller.AuditLogEventController;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n-import com.google.cloud.healthcare.fdamystudies.auditlog.controller.HealthController;\n-import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n \n class ApplicationTest extends BaseMockIT {\n \n-  @Autowired HealthController controller;\n+  @Autowired AuditLogEventController controller;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac8a1ecaa5ed4c90a80afbc176e70af24eafea57"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyOTU0NQ==", "bodyText": "why is this method calling oauthservice.health()?\nIdeally it should just return a 200 status.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r445829545", "createdAt": "2020-06-25T20:49:00Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/HealthController.java", "diffHunk": "@@ -6,35 +6,28 @@\n  * https://opensource.org/licenses/MIT.\n  */\n \n-package com.google.cloud.healthcare.fdamystudies.auditlog.controller;\n+package com.google.cloud.healthcare.fdamystudies.controller;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.service.OAuthService;\n import javax.servlet.http.HttpServletRequest;\n-import org.slf4j.ext.XLogger;\n-import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RestController;\n-import com.fasterxml.jackson.databind.JsonNode;\n \n @RestController\n @RequestMapping(\"/v1\")\n-public class HealthController extends BaseController {\n+public class HealthController {\n \n-  private XLogger logger = XLoggerFactory.getXLogger(HealthController.class.getName());\n+  @Autowired private OAuthService oauthService;\n \n   @GetMapping(\n-      value = \"/health\",\n+      value = \"/healthCheck\",\n       produces = {MediaType.APPLICATION_JSON_VALUE})\n   public ResponseEntity<JsonNode> health(HttpServletRequest request) {\n-    logger.entry(String.format(\"begin %s request with no args\", request.getRequestURI()));\n-\n-    ResponseEntity<JsonNode> healthResponse = getOAuthService().health();\n-    logger.exit(\n-        String.format(\n-            \"status=%d and response=%s\",\n-            healthResponse.getStatusCodeValue(), healthResponse.getBody()));\n-    return healthResponse;\n+    return oauthService.health();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac8a1ecaa5ed4c90a80afbc176e70af24eafea57"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgzNjU2Mg==", "bodyText": "nit: indentation should probably be 2 spaces to be consistent with other files.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r445836562", "createdAt": "2020-06-25T21:03:02Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-tests/src/main/resources/mappings/hydra/introspect_invalid_token_request.json", "diffHunk": "@@ -0,0 +1,18 @@\n+{\n+\t\"request\": {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac8a1ecaa5ed4c90a80afbc176e70af24eafea57"}, "originalPosition": 2}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2920902e6f91123369bfad32afea54b2c71443bf", "author": {"user": {"login": "dhanyak-btc", "name": "Dhanya Kumar KV"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/2920902e6f91123369bfad32afea54b2c71443bf", "committedDate": "2020-06-26T04:35:39Z", "message": "Merge branch 'early-access' into auditlog-events-endpoint"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 748, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}