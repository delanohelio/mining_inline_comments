{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxNDY0MjE2", "number": 412, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNzowNDo0MVrOD-rUnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNzoxNjozNFrOD-rkJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MDQ4MDkyOnYy", "diffSide": "RIGHT", "path": "Terraform/rename.sh", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNzowNDo0MVrOGY7LNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxODoyNTo0N1rOGY96Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc4ODUzMw==", "bodyText": "I'm wondering if git mv would be better for git history purpose, but this PR is good as is.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/412#discussion_r428788533", "createdAt": "2020-05-21T17:04:41Z", "author": {"login": "kuoyuchi"}, "path": "Terraform/rename.sh", "diffHunk": "@@ -53,17 +72,16 @@ do\n   cp -r ${SRC_PROJ_BASE}-$d/project ${DST_PROJ_BASE}-$d/\n done\n \n-# Phase 2\n-cp -r ${SRC_PROJ_BASE}-networks/networks ${DST_PROJ_BASE}-networks/\n-cp -r ${SRC_PROJ_BASE}-data/data ${DST_PROJ_BASE}-data/\n-cp -r ${SRC_PROJ_BASE}-resp-firebase/firebase ${DST_PROJ_BASE}-resp-firebase/\n+# Deployment Phase 2 - Uncomment after Phase 1 is deployed\n+# cp -r ${SRC_PROJ_BASE}-networks/networks ${DST_PROJ_BASE}-networks/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45d373a49a58f4c74ecd615c9790e9a6e1bfb8c8"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzMzM0Nw==", "bodyText": "I just tried it and seems that only works for moving within the same git repo.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/412#discussion_r428833347", "createdAt": "2020-05-21T18:25:47Z", "author": {"login": "xingao267"}, "path": "Terraform/rename.sh", "diffHunk": "@@ -53,17 +72,16 @@ do\n   cp -r ${SRC_PROJ_BASE}-$d/project ${DST_PROJ_BASE}-$d/\n done\n \n-# Phase 2\n-cp -r ${SRC_PROJ_BASE}-networks/networks ${DST_PROJ_BASE}-networks/\n-cp -r ${SRC_PROJ_BASE}-data/data ${DST_PROJ_BASE}-data/\n-cp -r ${SRC_PROJ_BASE}-resp-firebase/firebase ${DST_PROJ_BASE}-resp-firebase/\n+# Deployment Phase 2 - Uncomment after Phase 1 is deployed\n+# cp -r ${SRC_PROJ_BASE}-networks/networks ${DST_PROJ_BASE}-networks/", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc4ODUzMw=="}, "originalCommit": {"oid": "45d373a49a58f4c74ecd615c9790e9a6e1bfb8c8"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MDUyMDY4OnYy", "diffSide": "RIGHT", "path": "Terraform/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNzoxNjozNFrOGY7k3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxOTowNTowOFrOGY_LYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc5NTEwMA==", "bodyText": "I wonder if we can create a link instead, e.g. comment out [GCS backend](../bootstrap/main.tf#L32-L35)", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/412#discussion_r428795100", "createdAt": "2020-05-21T17:16:34Z", "author": {"login": "zohrehj"}, "path": "Terraform/README.md", "diffHunk": "@@ -97,72 +97,140 @@ To see what resources each deployment provisions, check out the comments in each\n \n ## Deployment Steps\n \n-1.  Authenticate as a super admin using `gcloud auth login [ACCOUNT]`.\n+1. Authenticate as a super admin using `gcloud auth login [ACCOUNT]`.\n \n     WARNING: remember to run `gcloud auth revoke` to logout as a super admin.\n     Being logged in as a super admin beyond the initial setup is dangerous!\n \n-1.  Checkout the Terraform configs and set some helper environment variables.\n+1. Checkout the Terraform configs and set some helper environment variables.\n \n-    ```\n-    $ git clone my-repo\n-    $ cd my-repo\n-    $ ROOT=$PWD\n+    ```bash\n+    git clone my-repo\n+    cd my-repo\n+    ROOT=$PWD\n     ```\n \n     If you would like to deploy the same infrastructure based on the Terraform\n     configs in this directory but in a different organization with different\n-    resource prefix or namings, use the `rename.sh` script.\n+    resource prefix or namings, use the `rename.sh` script with your environment\n+    specific values filled in. Note that `rename.sh` should be run several times\n+    with corresponding deployment phase block uncommented. Cross reference this\n+    `README.md` file and documentations in the `rename.sh` together do complete\n+    the deployment.\n \n-1.  The bootstrap config must be deployed first in order to create the `devops`\n-    project which will host your Terraform state and CICD pipelines.\n+    `rename.sh` script uses configs in this directory and copy them over with value\n+    substitutions to a target local directory to host your new final Terraform configs.\n \n-    ```\n-    $ cd $ROOT/bootstrap\n-    $ terraform init\n-    $ terraform plan\n-    $ terraform apply\n+1. Run `rename.sh` in this directory (later referenced as the original directory) to\n+    copy the Deployment Phase 1 configs to your target directory.\n+\n+1. Go to the target directory.\n+\n+1. Deploy the `$ROOT/bootstrap/` folder first to create the `devops` project and\n+    Terraform state bucket.\n+\n+    Make sure in your first deployment in a new organization, Comment out the `backend`\n+    block (L32-35) in `$ROOT/bootstrap/main.tf` first.\n+\n+    ```bash\n+    cd $ROOT/bootstrap\n+    terraform init\n+    terraform apply\n     ```\n \n     Your `devops` project should now be ready.\n \n-1.  Backup the state of the `devops` project to the newly created state bucket\n-    by uncommenting out the `terraform` block in `$ROOT/bootstrap/main.tf` and\n-    running:\n+1. Backup the state of the `devops` project to the newly created state bucket", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45d373a49a58f4c74ecd615c9790e9a6e1bfb8c8"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg1NDExNQ==", "bodyText": "Done. Thanks for the suggestion. This is great!", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/412#discussion_r428854115", "createdAt": "2020-05-21T19:05:08Z", "author": {"login": "xingao267"}, "path": "Terraform/README.md", "diffHunk": "@@ -97,72 +97,140 @@ To see what resources each deployment provisions, check out the comments in each\n \n ## Deployment Steps\n \n-1.  Authenticate as a super admin using `gcloud auth login [ACCOUNT]`.\n+1. Authenticate as a super admin using `gcloud auth login [ACCOUNT]`.\n \n     WARNING: remember to run `gcloud auth revoke` to logout as a super admin.\n     Being logged in as a super admin beyond the initial setup is dangerous!\n \n-1.  Checkout the Terraform configs and set some helper environment variables.\n+1. Checkout the Terraform configs and set some helper environment variables.\n \n-    ```\n-    $ git clone my-repo\n-    $ cd my-repo\n-    $ ROOT=$PWD\n+    ```bash\n+    git clone my-repo\n+    cd my-repo\n+    ROOT=$PWD\n     ```\n \n     If you would like to deploy the same infrastructure based on the Terraform\n     configs in this directory but in a different organization with different\n-    resource prefix or namings, use the `rename.sh` script.\n+    resource prefix or namings, use the `rename.sh` script with your environment\n+    specific values filled in. Note that `rename.sh` should be run several times\n+    with corresponding deployment phase block uncommented. Cross reference this\n+    `README.md` file and documentations in the `rename.sh` together do complete\n+    the deployment.\n \n-1.  The bootstrap config must be deployed first in order to create the `devops`\n-    project which will host your Terraform state and CICD pipelines.\n+    `rename.sh` script uses configs in this directory and copy them over with value\n+    substitutions to a target local directory to host your new final Terraform configs.\n \n-    ```\n-    $ cd $ROOT/bootstrap\n-    $ terraform init\n-    $ terraform plan\n-    $ terraform apply\n+1. Run `rename.sh` in this directory (later referenced as the original directory) to\n+    copy the Deployment Phase 1 configs to your target directory.\n+\n+1. Go to the target directory.\n+\n+1. Deploy the `$ROOT/bootstrap/` folder first to create the `devops` project and\n+    Terraform state bucket.\n+\n+    Make sure in your first deployment in a new organization, Comment out the `backend`\n+    block (L32-35) in `$ROOT/bootstrap/main.tf` first.\n+\n+    ```bash\n+    cd $ROOT/bootstrap\n+    terraform init\n+    terraform apply\n     ```\n \n     Your `devops` project should now be ready.\n \n-1.  Backup the state of the `devops` project to the newly created state bucket\n-    by uncommenting out the `terraform` block in `$ROOT/bootstrap/main.tf` and\n-    running:\n+1. Backup the state of the `devops` project to the newly created state bucket", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc5NTEwMA=="}, "originalCommit": {"oid": "45d373a49a58f4c74ecd615c9790e9a6e1bfb8c8"}, "originalPosition": 155}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1128, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}