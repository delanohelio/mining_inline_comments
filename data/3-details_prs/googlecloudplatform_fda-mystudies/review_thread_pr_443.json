{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NzA3ODQw", "number": 443, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOTo1MzowNFrOEDmtLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNToxNzo1N1rOED7tuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjE1MzQwOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/enroll-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/EnrollmentTokenControllerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOTo1MzowNFrOGguEog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOTowMjowM1rOGg_rGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk2MjQ2Ng==", "bodyText": "performGet?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/443#discussion_r436962466", "createdAt": "2020-06-08T19:53:04Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/enroll-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/EnrollmentTokenControllerTest.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.google.cloud.healthcare.fdamystudies.beans.EnrollmentBean;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.controller.EnrollmentTokenController;\n+import com.google.cloud.healthcare.fdamystudies.service.EnrollmentTokenService;\n+import com.google.cloud.healthcare.fdamystudies.testutils.Constants;\n+import com.google.cloud.healthcare.fdamystudies.testutils.TestUtils;\n+\n+public class EnrollmentTokenControllerTest extends BaseMockIT {\n+\n+  private static final String PING_PATH = \"/ping\";\n+  private static final String VALIDATE_ENROLLMENT_TOKEN_PATH = \"/validateEnrollmentToken\";\n+  private static final String ENROLL_PATH = \"/enroll\";\n+\n+  @Autowired private EnrollmentTokenController controller;\n+  @Autowired private EnrollmentTokenService enrollmentTokenService;\n+\n+  @Test\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(mockMvc);\n+    assertNotNull(enrollmentTokenService);\n+  }\n+\n+  @Test\n+  public void ping() throws Exception {\n+\n+    HttpHeaders headers = TestUtils.getCommonHeaders();\n+    mockMvc.perform(get(PING_PATH).headers(headers)).andDo(print()).andExpect(status().isOk());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ec16c233f5b849742a607de7d0adc42ecea6dac"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI1MDg0MA==", "bodyText": "changed to performGet", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/443#discussion_r437250840", "createdAt": "2020-06-09T09:02:03Z", "author": {"login": "aswinijena100"}, "path": "user-registration-server-ws/enroll-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/EnrollmentTokenControllerTest.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.google.cloud.healthcare.fdamystudies.beans.EnrollmentBean;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.controller.EnrollmentTokenController;\n+import com.google.cloud.healthcare.fdamystudies.service.EnrollmentTokenService;\n+import com.google.cloud.healthcare.fdamystudies.testutils.Constants;\n+import com.google.cloud.healthcare.fdamystudies.testutils.TestUtils;\n+\n+public class EnrollmentTokenControllerTest extends BaseMockIT {\n+\n+  private static final String PING_PATH = \"/ping\";\n+  private static final String VALIDATE_ENROLLMENT_TOKEN_PATH = \"/validateEnrollmentToken\";\n+  private static final String ENROLL_PATH = \"/enroll\";\n+\n+  @Autowired private EnrollmentTokenController controller;\n+  @Autowired private EnrollmentTokenService enrollmentTokenService;\n+\n+  @Test\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(mockMvc);\n+    assertNotNull(enrollmentTokenService);\n+  }\n+\n+  @Test\n+  public void ping() throws Exception {\n+\n+    HttpHeaders headers = TestUtils.getCommonHeaders();\n+    mockMvc.perform(get(PING_PATH).headers(headers)).andDo(print()).andExpect(status().isOk());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk2MjQ2Ng=="}, "originalCommit": {"oid": "5ec16c233f5b849742a607de7d0adc42ecea6dac"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjE2NDQ0OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/enroll-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/EnrollmentTokenControllerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOTo1NjoyM1rOGguLcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOTowNDozM1rOGg_z6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk2NDIwOA==", "bodyText": "put instead of remove then add.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/443#discussion_r436964208", "createdAt": "2020-06-08T19:56:23Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/enroll-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/EnrollmentTokenControllerTest.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.google.cloud.healthcare.fdamystudies.beans.EnrollmentBean;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.controller.EnrollmentTokenController;\n+import com.google.cloud.healthcare.fdamystudies.service.EnrollmentTokenService;\n+import com.google.cloud.healthcare.fdamystudies.testutils.Constants;\n+import com.google.cloud.healthcare.fdamystudies.testutils.TestUtils;\n+\n+public class EnrollmentTokenControllerTest extends BaseMockIT {\n+\n+  private static final String PING_PATH = \"/ping\";\n+  private static final String VALIDATE_ENROLLMENT_TOKEN_PATH = \"/validateEnrollmentToken\";\n+  private static final String ENROLL_PATH = \"/enroll\";\n+\n+  @Autowired private EnrollmentTokenController controller;\n+  @Autowired private EnrollmentTokenService enrollmentTokenService;\n+\n+  @Test\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(mockMvc);\n+    assertNotNull(enrollmentTokenService);\n+  }\n+\n+  @Test\n+  public void ping() throws Exception {\n+\n+    HttpHeaders headers = TestUtils.getCommonHeaders();\n+    mockMvc.perform(get(PING_PATH).headers(headers)).andDo(print()).andExpect(status().isOk());\n+  }\n+\n+  @Test\n+  public void validateEnrollmentTokenSuccess() throws Exception {\n+\n+    String requestJson = getEnrollmentJson(Constants.TOKEN, Constants.STUDYOF_HEALTH);\n+\n+    HttpHeaders headers = TestUtils.getCommonHeaders();\n+    TestUtils.addContentTypeAcceptHeaders(headers);\n+\n+    performPost(VALIDATE_ENROLLMENT_TOKEN_PATH, requestJson, headers, Constants.SUCCESS, OK);\n+  }\n+\n+  @Test\n+  public void validateEnrollmentTokenBadRequests() throws Exception {\n+\n+    HttpHeaders headers = TestUtils.getCommonHeaders();\n+    TestUtils.addContentTypeAcceptHeaders(headers);\n+\n+    // without study id\n+    String requestJson = getEnrollmentJson(Constants.TOKEN, null);\n+    performPost(VALIDATE_ENROLLMENT_TOKEN_PATH, requestJson, headers, \"\", BAD_REQUEST);\n+\n+    // without token\n+    requestJson = getEnrollmentJson(null, Constants.STUDYOF_HEALTH_CLOSE);\n+    performPost(VALIDATE_ENROLLMENT_TOKEN_PATH, requestJson, headers, \"\", BAD_REQUEST);\n+\n+    // unkown token id\n+    requestJson = getEnrollmentJson(Constants.UNKOWN_TOKEN, Constants.STUDYOF_HEALTH);\n+    performPost(VALIDATE_ENROLLMENT_TOKEN_PATH, requestJson, headers, \"\", BAD_REQUEST);\n+  }\n+\n+  @Test\n+  public void validateEnrollmentTokenForbidden() throws Exception {\n+    HttpHeaders headers = TestUtils.getCommonHeaders();\n+    TestUtils.addContentTypeAcceptHeaders(headers);\n+\n+    // study id not exists\n+    String requestJson = getEnrollmentJson(Constants.TOKEN, Constants.STUDYID_NOT_EXIST);\n+    performPost(VALIDATE_ENROLLMENT_TOKEN_PATH, requestJson, headers, \"\", FORBIDDEN);\n+\n+    // token already use\n+    requestJson = getEnrollmentJson(Constants.TOKEN_ALREADY_USED, Constants.STUDYOF_HEALTH_1);\n+    performPost(VALIDATE_ENROLLMENT_TOKEN_PATH, requestJson, headers, \"\", FORBIDDEN);\n+  }\n+\n+  @Test\n+  public void validateEnrollmentTokenUnAuthorised() throws Exception {\n+    // without userId header\n+    HttpHeaders headers = TestUtils.getCommonHeaders();\n+    TestUtils.addContentTypeAcceptHeaders(headers);\n+    headers.remove(Constants.USER_ID_HEADER);\n+\n+    String requestJson = getEnrollmentJson(Constants.TOKEN, Constants.STUDYOF_HEALTH);\n+    performPost(VALIDATE_ENROLLMENT_TOKEN_PATH, requestJson, headers, \"\", UNAUTHORIZED);\n+  }\n+\n+  @Test\n+  public void enrollParticipantSuccessStudyTypeClose() throws Exception {\n+\n+    // study type close\n+    String requestJson = getEnrollmentJson(Constants.TOKEN_NEW, Constants.STUDYOF_HEALTH_CLOSE);\n+    HttpHeaders headers = TestUtils.getCommonHeaders();\n+    TestUtils.addContentTypeAcceptHeaders(headers);\n+\n+    performPost(ENROLL_PATH, requestJson, headers, Constants.SUCCESS, OK);\n+  }\n+\n+  @Test\n+  public void enrollParticipantSuccessStudyTypeOpen() throws Exception {\n+    // study type open\n+    String requestJson = getEnrollmentJson(Constants.TOKEN_NEW, Constants.STUDYOF_HEALTH);\n+    HttpHeaders headers = TestUtils.getCommonHeaders();\n+    TestUtils.addContentTypeAcceptHeaders(headers);\n+\n+    performPost(ENROLL_PATH, requestJson, headers, Constants.SUCCESS, OK);\n+  }\n+\n+  @Test\n+  public void enrollParticipantSuccessNewUser() throws Exception {\n+    // new user id\n+    String requestJson = getEnrollmentJson(Constants.TOKEN_NEW, Constants.STUDYOF_HEALTH);\n+\n+    HttpHeaders headers = TestUtils.getCommonHeaders();\n+    TestUtils.addContentTypeAcceptHeaders(headers);\n+    headers.remove(Constants.USER_ID_HEADER);\n+    headers.add(Constants.USER_ID_HEADER, Constants.NEW_USER_ID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ec16c233f5b849742a607de7d0adc42ecea6dac"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI1MzA5Ng==", "bodyText": "\"put\" we cannot use its accepting List instead of this we used \"set\"", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/443#discussion_r437253096", "createdAt": "2020-06-09T09:04:33Z", "author": {"login": "aswinijena100"}, "path": "user-registration-server-ws/enroll-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/EnrollmentTokenControllerTest.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.google.cloud.healthcare.fdamystudies.beans.EnrollmentBean;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.controller.EnrollmentTokenController;\n+import com.google.cloud.healthcare.fdamystudies.service.EnrollmentTokenService;\n+import com.google.cloud.healthcare.fdamystudies.testutils.Constants;\n+import com.google.cloud.healthcare.fdamystudies.testutils.TestUtils;\n+\n+public class EnrollmentTokenControllerTest extends BaseMockIT {\n+\n+  private static final String PING_PATH = \"/ping\";\n+  private static final String VALIDATE_ENROLLMENT_TOKEN_PATH = \"/validateEnrollmentToken\";\n+  private static final String ENROLL_PATH = \"/enroll\";\n+\n+  @Autowired private EnrollmentTokenController controller;\n+  @Autowired private EnrollmentTokenService enrollmentTokenService;\n+\n+  @Test\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(mockMvc);\n+    assertNotNull(enrollmentTokenService);\n+  }\n+\n+  @Test\n+  public void ping() throws Exception {\n+\n+    HttpHeaders headers = TestUtils.getCommonHeaders();\n+    mockMvc.perform(get(PING_PATH).headers(headers)).andDo(print()).andExpect(status().isOk());\n+  }\n+\n+  @Test\n+  public void validateEnrollmentTokenSuccess() throws Exception {\n+\n+    String requestJson = getEnrollmentJson(Constants.TOKEN, Constants.STUDYOF_HEALTH);\n+\n+    HttpHeaders headers = TestUtils.getCommonHeaders();\n+    TestUtils.addContentTypeAcceptHeaders(headers);\n+\n+    performPost(VALIDATE_ENROLLMENT_TOKEN_PATH, requestJson, headers, Constants.SUCCESS, OK);\n+  }\n+\n+  @Test\n+  public void validateEnrollmentTokenBadRequests() throws Exception {\n+\n+    HttpHeaders headers = TestUtils.getCommonHeaders();\n+    TestUtils.addContentTypeAcceptHeaders(headers);\n+\n+    // without study id\n+    String requestJson = getEnrollmentJson(Constants.TOKEN, null);\n+    performPost(VALIDATE_ENROLLMENT_TOKEN_PATH, requestJson, headers, \"\", BAD_REQUEST);\n+\n+    // without token\n+    requestJson = getEnrollmentJson(null, Constants.STUDYOF_HEALTH_CLOSE);\n+    performPost(VALIDATE_ENROLLMENT_TOKEN_PATH, requestJson, headers, \"\", BAD_REQUEST);\n+\n+    // unkown token id\n+    requestJson = getEnrollmentJson(Constants.UNKOWN_TOKEN, Constants.STUDYOF_HEALTH);\n+    performPost(VALIDATE_ENROLLMENT_TOKEN_PATH, requestJson, headers, \"\", BAD_REQUEST);\n+  }\n+\n+  @Test\n+  public void validateEnrollmentTokenForbidden() throws Exception {\n+    HttpHeaders headers = TestUtils.getCommonHeaders();\n+    TestUtils.addContentTypeAcceptHeaders(headers);\n+\n+    // study id not exists\n+    String requestJson = getEnrollmentJson(Constants.TOKEN, Constants.STUDYID_NOT_EXIST);\n+    performPost(VALIDATE_ENROLLMENT_TOKEN_PATH, requestJson, headers, \"\", FORBIDDEN);\n+\n+    // token already use\n+    requestJson = getEnrollmentJson(Constants.TOKEN_ALREADY_USED, Constants.STUDYOF_HEALTH_1);\n+    performPost(VALIDATE_ENROLLMENT_TOKEN_PATH, requestJson, headers, \"\", FORBIDDEN);\n+  }\n+\n+  @Test\n+  public void validateEnrollmentTokenUnAuthorised() throws Exception {\n+    // without userId header\n+    HttpHeaders headers = TestUtils.getCommonHeaders();\n+    TestUtils.addContentTypeAcceptHeaders(headers);\n+    headers.remove(Constants.USER_ID_HEADER);\n+\n+    String requestJson = getEnrollmentJson(Constants.TOKEN, Constants.STUDYOF_HEALTH);\n+    performPost(VALIDATE_ENROLLMENT_TOKEN_PATH, requestJson, headers, \"\", UNAUTHORIZED);\n+  }\n+\n+  @Test\n+  public void enrollParticipantSuccessStudyTypeClose() throws Exception {\n+\n+    // study type close\n+    String requestJson = getEnrollmentJson(Constants.TOKEN_NEW, Constants.STUDYOF_HEALTH_CLOSE);\n+    HttpHeaders headers = TestUtils.getCommonHeaders();\n+    TestUtils.addContentTypeAcceptHeaders(headers);\n+\n+    performPost(ENROLL_PATH, requestJson, headers, Constants.SUCCESS, OK);\n+  }\n+\n+  @Test\n+  public void enrollParticipantSuccessStudyTypeOpen() throws Exception {\n+    // study type open\n+    String requestJson = getEnrollmentJson(Constants.TOKEN_NEW, Constants.STUDYOF_HEALTH);\n+    HttpHeaders headers = TestUtils.getCommonHeaders();\n+    TestUtils.addContentTypeAcceptHeaders(headers);\n+\n+    performPost(ENROLL_PATH, requestJson, headers, Constants.SUCCESS, OK);\n+  }\n+\n+  @Test\n+  public void enrollParticipantSuccessNewUser() throws Exception {\n+    // new user id\n+    String requestJson = getEnrollmentJson(Constants.TOKEN_NEW, Constants.STUDYOF_HEALTH);\n+\n+    HttpHeaders headers = TestUtils.getCommonHeaders();\n+    TestUtils.addContentTypeAcceptHeaders(headers);\n+    headers.remove(Constants.USER_ID_HEADER);\n+    headers.add(Constants.USER_ID_HEADER, Constants.NEW_USER_ID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk2NDIwOA=="}, "originalCommit": {"oid": "5ec16c233f5b849742a607de7d0adc42ecea6dac"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjE4NDU4OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/enroll-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/TestUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMDowMjo1OVrOGguYaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOTowNjowMFrOGg_5LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk2NzUyOQ==", "bodyText": "Just add this to the common headers, all requests are JSON.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/443#discussion_r436967529", "createdAt": "2020-06-08T20:02:59Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/enroll-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/TestUtils.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.google.cloud.healthcare.fdamystudies.testutils;\n+\n+import javax.ws.rs.core.MediaType;\n+import org.springframework.http.HttpHeaders;\n+\n+public class TestUtils {\n+\n+  public static void addUserIdHeader(HttpHeaders headers) {\n+    headers.add(Constants.USER_ID_HEADER, Constants.VALID_USER_ID);\n+  }\n+\n+  public static HttpHeaders getCommonHeaders() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(Constants.CLIENT_TOKEN_HEADER, Constants.CLIENT_TOKEN_VALUE);\n+    headers.add(Constants.ACCESS_TOKEN_HEADER, Constants.ACCESS_TOKEN_VALUE);\n+    headers.add(Constants.USER_ID_HEADER, Constants.VALID_USER_ID);\n+    return headers;\n+  }\n+\n+  public static void addHeader(HttpHeaders headers, String headerName, String headerValue) {\n+    headers.add(headerName, headerValue);\n+  }\n+\n+  public static void addContentTypeAcceptHeaders(HttpHeaders headers) {\n+    addHeader(headers, HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ec16c233f5b849742a607de7d0adc42ecea6dac"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI1NDQ0NQ==", "bodyText": "added inside getCommonHeaders", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/443#discussion_r437254445", "createdAt": "2020-06-09T09:06:00Z", "author": {"login": "aswinijena100"}, "path": "user-registration-server-ws/enroll-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/TestUtils.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.google.cloud.healthcare.fdamystudies.testutils;\n+\n+import javax.ws.rs.core.MediaType;\n+import org.springframework.http.HttpHeaders;\n+\n+public class TestUtils {\n+\n+  public static void addUserIdHeader(HttpHeaders headers) {\n+    headers.add(Constants.USER_ID_HEADER, Constants.VALID_USER_ID);\n+  }\n+\n+  public static HttpHeaders getCommonHeaders() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(Constants.CLIENT_TOKEN_HEADER, Constants.CLIENT_TOKEN_VALUE);\n+    headers.add(Constants.ACCESS_TOKEN_HEADER, Constants.ACCESS_TOKEN_VALUE);\n+    headers.add(Constants.USER_ID_HEADER, Constants.VALID_USER_ID);\n+    return headers;\n+  }\n+\n+  public static void addHeader(HttpHeaders headers, String headerName, String headerValue) {\n+    headers.add(headerName, headerValue);\n+  }\n+\n+  public static void addContentTypeAcceptHeaders(HttpHeaders headers) {\n+    addHeader(headers, HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk2NzUyOQ=="}, "originalCommit": {"oid": "5ec16c233f5b849742a607de7d0adc42ecea6dac"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjE4ODk1OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/enroll-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/TestUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMDowNDoyNlrOGgubHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOTowMzo1NVrOGg_xxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk2ODIyMg==", "bodyText": "This just obscures the function call. Remove it and use .add directly.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/443#discussion_r436968222", "createdAt": "2020-06-08T20:04:26Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/enroll-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/TestUtils.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.google.cloud.healthcare.fdamystudies.testutils;\n+\n+import javax.ws.rs.core.MediaType;\n+import org.springframework.http.HttpHeaders;\n+\n+public class TestUtils {\n+\n+  public static void addUserIdHeader(HttpHeaders headers) {\n+    headers.add(Constants.USER_ID_HEADER, Constants.VALID_USER_ID);\n+  }\n+\n+  public static HttpHeaders getCommonHeaders() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(Constants.CLIENT_TOKEN_HEADER, Constants.CLIENT_TOKEN_VALUE);\n+    headers.add(Constants.ACCESS_TOKEN_HEADER, Constants.ACCESS_TOKEN_VALUE);\n+    headers.add(Constants.USER_ID_HEADER, Constants.VALID_USER_ID);\n+    return headers;\n+  }\n+\n+  public static void addHeader(HttpHeaders headers, String headerName, String headerValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ec16c233f5b849742a607de7d0adc42ecea6dac"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI1MjU1MQ==", "bodyText": "removed addHeader method and used .add", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/443#discussion_r437252551", "createdAt": "2020-06-09T09:03:55Z", "author": {"login": "aswinijena100"}, "path": "user-registration-server-ws/enroll-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/TestUtils.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.google.cloud.healthcare.fdamystudies.testutils;\n+\n+import javax.ws.rs.core.MediaType;\n+import org.springframework.http.HttpHeaders;\n+\n+public class TestUtils {\n+\n+  public static void addUserIdHeader(HttpHeaders headers) {\n+    headers.add(Constants.USER_ID_HEADER, Constants.VALID_USER_ID);\n+  }\n+\n+  public static HttpHeaders getCommonHeaders() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(Constants.CLIENT_TOKEN_HEADER, Constants.CLIENT_TOKEN_VALUE);\n+    headers.add(Constants.ACCESS_TOKEN_HEADER, Constants.ACCESS_TOKEN_VALUE);\n+    headers.add(Constants.USER_ID_HEADER, Constants.VALID_USER_ID);\n+    return headers;\n+  }\n+\n+  public static void addHeader(HttpHeaders headers, String headerName, String headerValue) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk2ODIyMg=="}, "originalCommit": {"oid": "5ec16c233f5b849742a607de7d0adc42ecea6dac"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjE5MDkzOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/enroll-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/TestUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMDowNTowNFrOGgucZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOTowNjoyM1rOGg_6IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk2ODU0OA==", "bodyText": "function is unused.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/443#discussion_r436968548", "createdAt": "2020-06-08T20:05:04Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/enroll-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/TestUtils.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.google.cloud.healthcare.fdamystudies.testutils;\n+\n+import javax.ws.rs.core.MediaType;\n+import org.springframework.http.HttpHeaders;\n+\n+public class TestUtils {\n+\n+  public static void addUserIdHeader(HttpHeaders headers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ec16c233f5b849742a607de7d0adc42ecea6dac"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI1NDY4OA==", "bodyText": "removed this unused method", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/443#discussion_r437254688", "createdAt": "2020-06-09T09:06:23Z", "author": {"login": "aswinijena100"}, "path": "user-registration-server-ws/enroll-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/TestUtils.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.google.cloud.healthcare.fdamystudies.testutils;\n+\n+import javax.ws.rs.core.MediaType;\n+import org.springframework.http.HttpHeaders;\n+\n+public class TestUtils {\n+\n+  public static void addUserIdHeader(HttpHeaders headers) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk2ODU0OA=="}, "originalCommit": {"oid": "5ec16c233f5b849742a607de7d0adc42ecea6dac"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjI2NjQ0OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/enroll-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/EnrollmentTokenControllerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMDoyOToyNVrOGgvNZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOTowNjo1NVrOGg_7Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4MTA5NQ==", "bodyText": "typo: unknown", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/443#discussion_r436981095", "createdAt": "2020-06-08T20:29:25Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/enroll-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/EnrollmentTokenControllerTest.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.google.cloud.healthcare.fdamystudies.beans.EnrollmentBean;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.controller.EnrollmentTokenController;\n+import com.google.cloud.healthcare.fdamystudies.service.EnrollmentTokenService;\n+import com.google.cloud.healthcare.fdamystudies.testutils.Constants;\n+import com.google.cloud.healthcare.fdamystudies.testutils.TestUtils;\n+\n+public class EnrollmentTokenControllerTest extends BaseMockIT {\n+\n+  private static final String PING_PATH = \"/ping\";\n+  private static final String VALIDATE_ENROLLMENT_TOKEN_PATH = \"/validateEnrollmentToken\";\n+  private static final String ENROLL_PATH = \"/enroll\";\n+\n+  @Autowired private EnrollmentTokenController controller;\n+  @Autowired private EnrollmentTokenService enrollmentTokenService;\n+\n+  @Test\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(mockMvc);\n+    assertNotNull(enrollmentTokenService);\n+  }\n+\n+  @Test\n+  public void ping() throws Exception {\n+\n+    HttpHeaders headers = TestUtils.getCommonHeaders();\n+    mockMvc.perform(get(PING_PATH).headers(headers)).andDo(print()).andExpect(status().isOk());\n+  }\n+\n+  @Test\n+  public void validateEnrollmentTokenSuccess() throws Exception {\n+\n+    String requestJson = getEnrollmentJson(Constants.TOKEN, Constants.STUDYOF_HEALTH);\n+\n+    HttpHeaders headers = TestUtils.getCommonHeaders();\n+    TestUtils.addContentTypeAcceptHeaders(headers);\n+\n+    performPost(VALIDATE_ENROLLMENT_TOKEN_PATH, requestJson, headers, Constants.SUCCESS, OK);\n+  }\n+\n+  @Test\n+  public void validateEnrollmentTokenBadRequests() throws Exception {\n+\n+    HttpHeaders headers = TestUtils.getCommonHeaders();\n+    TestUtils.addContentTypeAcceptHeaders(headers);\n+\n+    // without study id\n+    String requestJson = getEnrollmentJson(Constants.TOKEN, null);\n+    performPost(VALIDATE_ENROLLMENT_TOKEN_PATH, requestJson, headers, \"\", BAD_REQUEST);\n+\n+    // without token\n+    requestJson = getEnrollmentJson(null, Constants.STUDYOF_HEALTH_CLOSE);\n+    performPost(VALIDATE_ENROLLMENT_TOKEN_PATH, requestJson, headers, \"\", BAD_REQUEST);\n+\n+    // unkown token id\n+    requestJson = getEnrollmentJson(Constants.UNKOWN_TOKEN, Constants.STUDYOF_HEALTH);\n+    performPost(VALIDATE_ENROLLMENT_TOKEN_PATH, requestJson, headers, \"\", BAD_REQUEST);\n+  }\n+\n+  @Test\n+  public void validateEnrollmentTokenForbidden() throws Exception {\n+    HttpHeaders headers = TestUtils.getCommonHeaders();\n+    TestUtils.addContentTypeAcceptHeaders(headers);\n+\n+    // study id not exists\n+    String requestJson = getEnrollmentJson(Constants.TOKEN, Constants.STUDYID_NOT_EXIST);\n+    performPost(VALIDATE_ENROLLMENT_TOKEN_PATH, requestJson, headers, \"\", FORBIDDEN);\n+\n+    // token already use\n+    requestJson = getEnrollmentJson(Constants.TOKEN_ALREADY_USED, Constants.STUDYOF_HEALTH_1);\n+    performPost(VALIDATE_ENROLLMENT_TOKEN_PATH, requestJson, headers, \"\", FORBIDDEN);\n+  }\n+\n+  @Test\n+  public void validateEnrollmentTokenUnAuthorised() throws Exception {\n+    // without userId header\n+    HttpHeaders headers = TestUtils.getCommonHeaders();\n+    TestUtils.addContentTypeAcceptHeaders(headers);\n+    headers.remove(Constants.USER_ID_HEADER);\n+\n+    String requestJson = getEnrollmentJson(Constants.TOKEN, Constants.STUDYOF_HEALTH);\n+    performPost(VALIDATE_ENROLLMENT_TOKEN_PATH, requestJson, headers, \"\", UNAUTHORIZED);\n+  }\n+\n+  @Test\n+  public void enrollParticipantSuccessStudyTypeClose() throws Exception {\n+\n+    // study type close\n+    String requestJson = getEnrollmentJson(Constants.TOKEN_NEW, Constants.STUDYOF_HEALTH_CLOSE);\n+    HttpHeaders headers = TestUtils.getCommonHeaders();\n+    TestUtils.addContentTypeAcceptHeaders(headers);\n+\n+    performPost(ENROLL_PATH, requestJson, headers, Constants.SUCCESS, OK);\n+  }\n+\n+  @Test\n+  public void enrollParticipantSuccessStudyTypeOpen() throws Exception {\n+    // study type open\n+    String requestJson = getEnrollmentJson(Constants.TOKEN_NEW, Constants.STUDYOF_HEALTH);\n+    HttpHeaders headers = TestUtils.getCommonHeaders();\n+    TestUtils.addContentTypeAcceptHeaders(headers);\n+\n+    performPost(ENROLL_PATH, requestJson, headers, Constants.SUCCESS, OK);\n+  }\n+\n+  @Test\n+  public void enrollParticipantSuccessNewUser() throws Exception {\n+    // new user id\n+    String requestJson = getEnrollmentJson(Constants.TOKEN_NEW, Constants.STUDYOF_HEALTH);\n+\n+    HttpHeaders headers = TestUtils.getCommonHeaders();\n+    TestUtils.addContentTypeAcceptHeaders(headers);\n+    headers.remove(Constants.USER_ID_HEADER);\n+    headers.add(Constants.USER_ID_HEADER, Constants.NEW_USER_ID);\n+\n+    TestUtils.addContentTypeAcceptHeaders(headers);\n+\n+    performPost(ENROLL_PATH, requestJson, headers, Constants.SUCCESS, OK);\n+  }\n+\n+  @Test\n+  public void enrollParticipantBadRequests() throws Exception {\n+\n+    HttpHeaders headers = TestUtils.getCommonHeaders();\n+    TestUtils.addContentTypeAcceptHeaders(headers);\n+\n+    // without study id\n+    String requestJson = getEnrollmentJson(Constants.TOKEN_NEW, null);\n+    performPost(ENROLL_PATH, requestJson, headers, \"\", BAD_REQUEST);\n+\n+    // without token\n+    requestJson = getEnrollmentJson(null, Constants.STUDYOF_HEALTH_CLOSE);\n+    performPost(ENROLL_PATH, requestJson, headers, \"\", BAD_REQUEST);\n+\n+    // unkown token id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ec16c233f5b849742a607de7d0adc42ecea6dac"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI1NDk4Ng==", "bodyText": "typo corrected", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/443#discussion_r437254986", "createdAt": "2020-06-09T09:06:55Z", "author": {"login": "aswinijena100"}, "path": "user-registration-server-ws/enroll-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/EnrollmentTokenControllerTest.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.google.cloud.healthcare.fdamystudies.beans.EnrollmentBean;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.controller.EnrollmentTokenController;\n+import com.google.cloud.healthcare.fdamystudies.service.EnrollmentTokenService;\n+import com.google.cloud.healthcare.fdamystudies.testutils.Constants;\n+import com.google.cloud.healthcare.fdamystudies.testutils.TestUtils;\n+\n+public class EnrollmentTokenControllerTest extends BaseMockIT {\n+\n+  private static final String PING_PATH = \"/ping\";\n+  private static final String VALIDATE_ENROLLMENT_TOKEN_PATH = \"/validateEnrollmentToken\";\n+  private static final String ENROLL_PATH = \"/enroll\";\n+\n+  @Autowired private EnrollmentTokenController controller;\n+  @Autowired private EnrollmentTokenService enrollmentTokenService;\n+\n+  @Test\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(mockMvc);\n+    assertNotNull(enrollmentTokenService);\n+  }\n+\n+  @Test\n+  public void ping() throws Exception {\n+\n+    HttpHeaders headers = TestUtils.getCommonHeaders();\n+    mockMvc.perform(get(PING_PATH).headers(headers)).andDo(print()).andExpect(status().isOk());\n+  }\n+\n+  @Test\n+  public void validateEnrollmentTokenSuccess() throws Exception {\n+\n+    String requestJson = getEnrollmentJson(Constants.TOKEN, Constants.STUDYOF_HEALTH);\n+\n+    HttpHeaders headers = TestUtils.getCommonHeaders();\n+    TestUtils.addContentTypeAcceptHeaders(headers);\n+\n+    performPost(VALIDATE_ENROLLMENT_TOKEN_PATH, requestJson, headers, Constants.SUCCESS, OK);\n+  }\n+\n+  @Test\n+  public void validateEnrollmentTokenBadRequests() throws Exception {\n+\n+    HttpHeaders headers = TestUtils.getCommonHeaders();\n+    TestUtils.addContentTypeAcceptHeaders(headers);\n+\n+    // without study id\n+    String requestJson = getEnrollmentJson(Constants.TOKEN, null);\n+    performPost(VALIDATE_ENROLLMENT_TOKEN_PATH, requestJson, headers, \"\", BAD_REQUEST);\n+\n+    // without token\n+    requestJson = getEnrollmentJson(null, Constants.STUDYOF_HEALTH_CLOSE);\n+    performPost(VALIDATE_ENROLLMENT_TOKEN_PATH, requestJson, headers, \"\", BAD_REQUEST);\n+\n+    // unkown token id\n+    requestJson = getEnrollmentJson(Constants.UNKOWN_TOKEN, Constants.STUDYOF_HEALTH);\n+    performPost(VALIDATE_ENROLLMENT_TOKEN_PATH, requestJson, headers, \"\", BAD_REQUEST);\n+  }\n+\n+  @Test\n+  public void validateEnrollmentTokenForbidden() throws Exception {\n+    HttpHeaders headers = TestUtils.getCommonHeaders();\n+    TestUtils.addContentTypeAcceptHeaders(headers);\n+\n+    // study id not exists\n+    String requestJson = getEnrollmentJson(Constants.TOKEN, Constants.STUDYID_NOT_EXIST);\n+    performPost(VALIDATE_ENROLLMENT_TOKEN_PATH, requestJson, headers, \"\", FORBIDDEN);\n+\n+    // token already use\n+    requestJson = getEnrollmentJson(Constants.TOKEN_ALREADY_USED, Constants.STUDYOF_HEALTH_1);\n+    performPost(VALIDATE_ENROLLMENT_TOKEN_PATH, requestJson, headers, \"\", FORBIDDEN);\n+  }\n+\n+  @Test\n+  public void validateEnrollmentTokenUnAuthorised() throws Exception {\n+    // without userId header\n+    HttpHeaders headers = TestUtils.getCommonHeaders();\n+    TestUtils.addContentTypeAcceptHeaders(headers);\n+    headers.remove(Constants.USER_ID_HEADER);\n+\n+    String requestJson = getEnrollmentJson(Constants.TOKEN, Constants.STUDYOF_HEALTH);\n+    performPost(VALIDATE_ENROLLMENT_TOKEN_PATH, requestJson, headers, \"\", UNAUTHORIZED);\n+  }\n+\n+  @Test\n+  public void enrollParticipantSuccessStudyTypeClose() throws Exception {\n+\n+    // study type close\n+    String requestJson = getEnrollmentJson(Constants.TOKEN_NEW, Constants.STUDYOF_HEALTH_CLOSE);\n+    HttpHeaders headers = TestUtils.getCommonHeaders();\n+    TestUtils.addContentTypeAcceptHeaders(headers);\n+\n+    performPost(ENROLL_PATH, requestJson, headers, Constants.SUCCESS, OK);\n+  }\n+\n+  @Test\n+  public void enrollParticipantSuccessStudyTypeOpen() throws Exception {\n+    // study type open\n+    String requestJson = getEnrollmentJson(Constants.TOKEN_NEW, Constants.STUDYOF_HEALTH);\n+    HttpHeaders headers = TestUtils.getCommonHeaders();\n+    TestUtils.addContentTypeAcceptHeaders(headers);\n+\n+    performPost(ENROLL_PATH, requestJson, headers, Constants.SUCCESS, OK);\n+  }\n+\n+  @Test\n+  public void enrollParticipantSuccessNewUser() throws Exception {\n+    // new user id\n+    String requestJson = getEnrollmentJson(Constants.TOKEN_NEW, Constants.STUDYOF_HEALTH);\n+\n+    HttpHeaders headers = TestUtils.getCommonHeaders();\n+    TestUtils.addContentTypeAcceptHeaders(headers);\n+    headers.remove(Constants.USER_ID_HEADER);\n+    headers.add(Constants.USER_ID_HEADER, Constants.NEW_USER_ID);\n+\n+    TestUtils.addContentTypeAcceptHeaders(headers);\n+\n+    performPost(ENROLL_PATH, requestJson, headers, Constants.SUCCESS, OK);\n+  }\n+\n+  @Test\n+  public void enrollParticipantBadRequests() throws Exception {\n+\n+    HttpHeaders headers = TestUtils.getCommonHeaders();\n+    TestUtils.addContentTypeAcceptHeaders(headers);\n+\n+    // without study id\n+    String requestJson = getEnrollmentJson(Constants.TOKEN_NEW, null);\n+    performPost(ENROLL_PATH, requestJson, headers, \"\", BAD_REQUEST);\n+\n+    // without token\n+    requestJson = getEnrollmentJson(null, Constants.STUDYOF_HEALTH_CLOSE);\n+    performPost(ENROLL_PATH, requestJson, headers, \"\", BAD_REQUEST);\n+\n+    // unkown token id", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4MTA5NQ=="}, "originalCommit": {"oid": "5ec16c233f5b849742a607de7d0adc42ecea6dac"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTQzNjI5OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/enroll-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/EnrollmentTokenControllerTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDo1MDo0N1rOGhN8YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTowNzoxOFrOGhOtlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ4NDY0MQ==", "bodyText": "I haven't seen this used anywhere else in our code. I don't think we should start using it here.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/443#discussion_r437484641", "createdAt": "2020-06-09T14:50:47Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/enroll-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/EnrollmentTokenControllerTest.java", "diffHunk": "@@ -53,44 +51,47 @@ public void validateEnrollmentTokenSuccess() throws Exception {\n   public void validateEnrollmentTokenBadRequests() throws Exception {\n \n     HttpHeaders headers = TestUtils.getCommonHeaders();\n-    TestUtils.addContentTypeAcceptHeaders(headers);\n+    headers.add(Constants.USER_ID_HEADER, Constants.VALID_USER_ID);\n \n     // without study id\n     String requestJson = getEnrollmentJson(Constants.TOKEN, null);\n-    performPost(VALIDATE_ENROLLMENT_TOKEN_PATH, requestJson, headers, \"\", BAD_REQUEST);\n+    performPost(\n+        VALIDATE_ENROLLMENT_TOKEN_PATH, requestJson, headers, StringUtils.EMPTY, BAD_REQUEST);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bca78ffdca30358134dda5971b54b5c40522bdf"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ5MDU4Mg==", "bodyText": "did u mean for  StringUtils.EMPTY ? Shall I replace with  double quote only", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/443#discussion_r437490582", "createdAt": "2020-06-09T14:58:29Z", "author": {"login": "aswinijena100"}, "path": "user-registration-server-ws/enroll-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/EnrollmentTokenControllerTest.java", "diffHunk": "@@ -53,44 +51,47 @@ public void validateEnrollmentTokenSuccess() throws Exception {\n   public void validateEnrollmentTokenBadRequests() throws Exception {\n \n     HttpHeaders headers = TestUtils.getCommonHeaders();\n-    TestUtils.addContentTypeAcceptHeaders(headers);\n+    headers.add(Constants.USER_ID_HEADER, Constants.VALID_USER_ID);\n \n     // without study id\n     String requestJson = getEnrollmentJson(Constants.TOKEN, null);\n-    performPost(VALIDATE_ENROLLMENT_TOKEN_PATH, requestJson, headers, \"\", BAD_REQUEST);\n+    performPost(\n+        VALIDATE_ENROLLMENT_TOKEN_PATH, requestJson, headers, StringUtils.EMPTY, BAD_REQUEST);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ4NDY0MQ=="}, "originalCommit": {"oid": "6bca78ffdca30358134dda5971b54b5c40522bdf"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ5NDQ0Ng==", "bodyText": "Yes. I prefer \"\" for consistency.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/443#discussion_r437494446", "createdAt": "2020-06-09T15:03:33Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/enroll-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/EnrollmentTokenControllerTest.java", "diffHunk": "@@ -53,44 +51,47 @@ public void validateEnrollmentTokenSuccess() throws Exception {\n   public void validateEnrollmentTokenBadRequests() throws Exception {\n \n     HttpHeaders headers = TestUtils.getCommonHeaders();\n-    TestUtils.addContentTypeAcceptHeaders(headers);\n+    headers.add(Constants.USER_ID_HEADER, Constants.VALID_USER_ID);\n \n     // without study id\n     String requestJson = getEnrollmentJson(Constants.TOKEN, null);\n-    performPost(VALIDATE_ENROLLMENT_TOKEN_PATH, requestJson, headers, \"\", BAD_REQUEST);\n+    performPost(\n+        VALIDATE_ENROLLMENT_TOKEN_PATH, requestJson, headers, StringUtils.EMPTY, BAD_REQUEST);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ4NDY0MQ=="}, "originalCommit": {"oid": "6bca78ffdca30358134dda5971b54b5c40522bdf"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ5NzIzNw==", "bodyText": "Thanks for the confirmation. Did the changes and committed the code.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/443#discussion_r437497237", "createdAt": "2020-06-09T15:07:18Z", "author": {"login": "aswinijena100"}, "path": "user-registration-server-ws/enroll-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/EnrollmentTokenControllerTest.java", "diffHunk": "@@ -53,44 +51,47 @@ public void validateEnrollmentTokenSuccess() throws Exception {\n   public void validateEnrollmentTokenBadRequests() throws Exception {\n \n     HttpHeaders headers = TestUtils.getCommonHeaders();\n-    TestUtils.addContentTypeAcceptHeaders(headers);\n+    headers.add(Constants.USER_ID_HEADER, Constants.VALID_USER_ID);\n \n     // without study id\n     String requestJson = getEnrollmentJson(Constants.TOKEN, null);\n-    performPost(VALIDATE_ENROLLMENT_TOKEN_PATH, requestJson, headers, \"\", BAD_REQUEST);\n+    performPost(\n+        VALIDATE_ENROLLMENT_TOKEN_PATH, requestJson, headers, StringUtils.EMPTY, BAD_REQUEST);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ4NDY0MQ=="}, "originalCommit": {"oid": "6bca78ffdca30358134dda5971b54b5c40522bdf"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTU5NTQ3OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/enroll-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/EnrollmentTokenControllerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNToxNzo1N1rOGhPgog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTozMTo1MVrOGhQV_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUxMDMwNg==", "bodyText": "What about all the other usages?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/443#discussion_r437510306", "createdAt": "2020-06-09T15:17:57Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/enroll-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/EnrollmentTokenControllerTest.java", "diffHunk": "@@ -170,7 +170,7 @@ public void enrollParticipantForbidden() throws Exception {\n \n     // study id not exists\n     requestJson = getEnrollmentJson(Constants.TOKEN_NEW, Constants.STUDYID_NOT_EXIST);\n-    performPost(ENROLL_PATH, requestJson, headers, StringUtils.EMPTY, FORBIDDEN);\n+    performPost(ENROLL_PATH, requestJson, headers, \"\", FORBIDDEN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9839b80b0456a23c5a8420cff7fe442396b23c7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUyMzk2NA==", "bodyText": "Sorry for the mistake. removed from all the usages.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/443#discussion_r437523964", "createdAt": "2020-06-09T15:31:51Z", "author": {"login": "aswinijena100"}, "path": "user-registration-server-ws/enroll-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/EnrollmentTokenControllerTest.java", "diffHunk": "@@ -170,7 +170,7 @@ public void enrollParticipantForbidden() throws Exception {\n \n     // study id not exists\n     requestJson = getEnrollmentJson(Constants.TOKEN_NEW, Constants.STUDYID_NOT_EXIST);\n-    performPost(ENROLL_PATH, requestJson, headers, StringUtils.EMPTY, FORBIDDEN);\n+    performPost(ENROLL_PATH, requestJson, headers, \"\", FORBIDDEN);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUxMDMwNg=="}, "originalCommit": {"oid": "d9839b80b0456a23c5a8420cff7fe442396b23c7"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2362, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}