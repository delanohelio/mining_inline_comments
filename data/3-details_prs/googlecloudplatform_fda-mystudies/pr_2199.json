{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwMDA3MjQ2", "number": 2199, "title": "[participant-manager-datastore]: [POST] \"/users\", [PUT] \"/users/{adminUserId}/\" and [POST] \"/users/{userId}/invite\" end points refactored with email scheduler task implementation", "bodyText": "This PR contains the issue fixes for issue #2111 and #1932\nFor 2111 issue fixes, one check has been removed from  [POST] \"/users/{userId}/invite\" so that every request to this api, new invitation will be sent.\nFor 1932 issue fixes, for all these end points email scheduler task has been implemented with performance issue fixes.", "createdAt": "2020-12-01T05:58:43Z", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2199", "merged": true, "mergeCommit": {"oid": "914d2eaf925eafb69e7f44a06c5b8116385295c5"}, "closed": true, "closedAt": "2020-12-10T14:23:05Z", "author": {"login": "chiranjibi009"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdhy_fIAH2gAyNTMwMDA3MjQ2OjY1NzZiZjIwOTNiNzUyYzVlZjk4MWM1NGZmMmNlM2ExNzBkYWE3ODA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdk0Bz4gFqTU0OTIzNzI0Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6576bf2093b752c5ef981c54ff2ce3a170daa780", "author": {"user": {"login": "chiranjibi009", "name": "Chiranjibi Dash"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/6576bf2093b752c5ef981c54ff2ce3a170daa780", "committedDate": "2020-12-01T05:21:20Z", "message": "email scheduler task and and code refactored"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "648b37ccb22707d52cb8c56a0e2ca87b2917052e", "author": {"user": {"login": "chiranjibi009", "name": "Chiranjibi Dash"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/648b37ccb22707d52cb8c56a0e2ca87b2917052e", "committedDate": "2020-12-01T05:41:46Z", "message": "db script added"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMzIyMzk4", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2199#pullrequestreview-542322398", "createdAt": "2020-12-01T21:45:53Z", "commit": {"oid": "648b37ccb22707d52cb8c56a0e2ca87b2917052e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMTo0NTo1M1rOH9BBBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMTo0ODoxM1rOH9BFnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc0MTgzMA==", "bodyText": "Even with the foreign key constraints, I would still suggest you use query injections for consistency with the project. If not, please shorten this comment to one line.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2199#discussion_r533741830", "createdAt": "2020-12-01T21:45:53Z", "author": {"login": "saminguyen"}, "path": "participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java", "diffHunk": "@@ -127,211 +134,233 @@ public AdminUserResponse createUser(UserRequest user, AuditLogEventRequest audit\n     return userResponse;\n   }\n \n-  private EmailResponse sendInvitationEmail(String email, String firstName, String securityCode) {\n-    Map<String, String> templateArgs = new HashMap<>();\n-    templateArgs.put(\"ORG_NAME\", appConfig.getOrgName());\n-    templateArgs.put(\"FIRST_NAME\", firstName);\n-    templateArgs.put(\"ACTIVATION_LINK\", appConfig.getUserDetailsLink() + securityCode);\n-    templateArgs.put(\"CONTACT_EMAIL_ADDRESS\", appConfig.getContactEmail());\n-    EmailRequest emailRequest =\n-        new EmailRequest(\n-            appConfig.getFromEmail(),\n-            new String[] {email},\n-            null,\n-            null,\n-            appConfig.getRegisterUserSubject(),\n-            appConfig.getRegisterUserBody(),\n-            templateArgs);\n-    return emailService.sendMimeMail(emailRequest);\n-  }\n-\n   private ErrorCode validateUserRequest(UserRequest user) {\n     logger.entry(\"validateUserRequest()\");\n     Optional<UserRegAdminEntity> optAdminDetails =\n         userAdminRepository.findById(user.getSuperAdminUserId());\n-    if (!optAdminDetails.isPresent()) {\n-      return ErrorCode.USER_NOT_FOUND;\n-    }\n-\n-    UserRegAdminEntity loggedInUserDetails = optAdminDetails.get();\n-    if (!loggedInUserDetails.isSuperAdmin()) {\n-      return ErrorCode.NOT_SUPER_ADMIN_ACCESS;\n-    }\n \n-    if (!user.isSuperAdmin() && !hasAtleastOnePermission(user)) {\n-      return ErrorCode.PERMISSION_MISSING;\n+    UserRegAdminEntity admin =\n+        optAdminDetails.orElseThrow(() -> new ErrorCodeException(ErrorCode.USER_NOT_FOUND));\n+    if (!admin.isSuperAdmin()) {\n+      throw new ErrorCodeException(ErrorCode.NOT_SUPER_ADMIN_ACCESS);\n     }\n \n     Optional<UserRegAdminEntity> optUsers = userAdminRepository.findByEmail(user.getEmail());\n     logger.exit(\"Successfully validated user request\");\n     return optUsers.isPresent() ? ErrorCode.EMAIL_EXISTS : null;\n   }\n \n-  private boolean hasAtleastOnePermission(UserRequest user) {\n-    logger.entry(\"hasAtleastOnePermission()\");\n-    if (user.getManageLocations() != Permission.NO_PERMISSION.value()) {\n-      return true;\n-    } else if (CollectionUtils.isEmpty(user.getApps())) {\n-      return false;\n-    }\n+  private void addSelectedAppStudySiteIds(\n+      List<UserAppPermissionRequest> apps,\n+      List<AppPermissionDetails> appPermissions,\n+      List<StudyPermissionDetails> studyPermissions,\n+      List<SitePermissionDetails> sitePermissions) {\n \n     Predicate<UserAppPermissionRequest> appPredicate = app -> app.isSelected();\n     Predicate<UserStudyPermissionRequest> studyPredicate = study -> study.isSelected();\n     Predicate<UserSitePermissionRequest> sitePredicate = site -> site.isSelected();\n \n-    List<UserAppPermissionRequest> selectedApps =\n-        user.getApps().stream().filter(appPredicate).collect(Collectors.toList());\n-    if (CollectionUtils.isNotEmpty(selectedApps)) {\n-      return true;\n-    }\n-\n-    for (UserAppPermissionRequest appPermission : user.getApps()) {\n-      List<UserStudyPermissionRequest> selectedStudies =\n-          CollectionUtils.emptyIfNull(appPermission.getStudies())\n-              .stream()\n-              .filter(studyPredicate)\n-              .collect(Collectors.toList());\n-      if (CollectionUtils.isNotEmpty(selectedStudies)) {\n-        return true;\n+    if (apps != null) {\n+      List<UserAppPermissionRequest> selectedApps =\n+          (List<UserAppPermissionRequest>)\n+              CollectionUtils.emptyIfNull(\n+                  apps.stream().filter(appPredicate).collect(Collectors.toList()));\n+\n+      for (UserAppPermissionRequest appRequest : selectedApps) {\n+        AppPermissionDetails appPermissionDetails = new AppPermissionDetails();\n+        appPermissionDetails.setAppId(appRequest.getId());\n+        appPermissionDetails.setEdit(appRequest.getPermission());\n+        appPermissions.add(appPermissionDetails);\n       }\n \n-      for (UserStudyPermissionRequest studyPermission : appPermission.getStudies()) {\n-        List<UserSitePermissionRequest> selectedSites =\n-            CollectionUtils.emptyIfNull(studyPermission.getSites())\n+      for (UserAppPermissionRequest appPermission : apps) {\n+        List<UserStudyPermissionRequest> selectedStudies =\n+            CollectionUtils.emptyIfNull(appPermission.getStudies())\n                 .stream()\n-                .filter(sitePredicate)\n+                .filter(studyPredicate)\n                 .collect(Collectors.toList());\n-        if (CollectionUtils.isNotEmpty(selectedSites)) {\n-          return true;\n+\n+        for (UserStudyPermissionRequest studyRequest : selectedStudies) {\n+          StudyPermissionDetails studyPermissionDetails = new StudyPermissionDetails();\n+          studyPermissionDetails.setAppId(appPermission.getId());\n+          studyPermissionDetails.setStudyId(studyRequest.getStudyId());\n+          studyPermissionDetails.setEdit(studyRequest.getPermission());\n+          studyPermissions.add(studyPermissionDetails);\n+        }\n+\n+        if (appPermission.getStudies() != null) {\n+          for (UserStudyPermissionRequest studyPermission : appPermission.getStudies()) {\n+            List<UserSitePermissionRequest> selectedSites =\n+                CollectionUtils.emptyIfNull(studyPermission.getSites())\n+                    .stream()\n+                    .filter(sitePredicate)\n+                    .collect(Collectors.toList());\n+\n+            for (UserSitePermissionRequest siteRequest : selectedSites) {\n+              SitePermissionDetails sitePermissionDetails = new SitePermissionDetails();\n+              sitePermissionDetails.setAppId(appPermission.getId());\n+              sitePermissionDetails.setStudyId(studyPermission.getStudyId());\n+              sitePermissionDetails.setSiteId(siteRequest.getSiteId());\n+              sitePermissionDetails.setCanEdit(siteRequest.getPermission());\n+              sitePermissions.add(sitePermissionDetails);\n+            }\n+          }\n         }\n       }\n     }\n-\n-    logger.exit(\"No permissions found, return false\");\n-    return false;\n   }\n \n   private AdminUserResponse saveAdminDetails(UserRequest user, AuditLogEventRequest auditRequest) {\n     logger.entry(\"saveAdminDetails()\");\n+    List<AppPermissionDetails> appPermissions = new ArrayList<>();\n+    List<StudyPermissionDetails> studyPermissions = new ArrayList<>();\n+    List<SitePermissionDetails> sitePermissions = new ArrayList<>();\n+    if (user.getApps() != null && !user.getApps().isEmpty()) {\n+      addSelectedAppStudySiteIds(user.getApps(), appPermissions, studyPermissions, sitePermissions);\n+    }\n+\n+    if (user.getManageLocations() == Permission.NO_PERMISSION.value()\n+        && appPermissions.isEmpty()\n+        && studyPermissions.isEmpty()\n+        && sitePermissions.isEmpty()) {\n+      throw new ErrorCodeException(ErrorCode.PERMISSION_MISSING);\n+    }\n+\n     UserRegAdminEntity adminDetails =\n         UserMapper.fromUserRequest(user, Long.valueOf(appConfig.getSecurityCodeExpireDate()));\n     adminDetails = userAdminRepository.saveAndFlush(adminDetails);\n \n     if (CollectionUtils.isNotEmpty(user.getApps())) {\n-      Map<Boolean, List<UserAppPermissionRequest>> groupBySelectedAppMap =\n-          user.getApps()\n-              .stream()\n-              .collect(Collectors.groupingBy(UserAppPermissionRequest::isSelected));\n-\n-      // save permissions for selected apps\n-      for (UserAppPermissionRequest app :\n-          CollectionUtils.emptyIfNull(groupBySelectedAppMap.get(CommonConstants.SELECTED))) {\n-        saveAppStudySitePermissions(user, adminDetails, app);\n-      }\n-\n-      // save permissions for unselected apps\n-      for (UserAppPermissionRequest app :\n-          CollectionUtils.emptyIfNull(groupBySelectedAppMap.get(CommonConstants.UNSELECTED))) {\n-        for (UserStudyPermissionRequest study : CollectionUtils.emptyIfNull(app.getStudies())) {\n-          if (study.isSelected()) {\n-            saveStudySitePermissions(user, adminDetails, study);\n-          } else if (CollectionUtils.isNotEmpty(study.getSites())) {\n-            saveSitePermissions(user, adminDetails, study);\n-          }\n-        }\n-      }\n+      saveAppLevelPermissions(user, adminDetails, appPermissions);\n+      saveStudyLevelPermissions(user, adminDetails, studyPermissions);\n+      saveSiteLevelPermissions(user, adminDetails, sitePermissions);\n     }\n \n-    EmailResponse emailResponse =\n-        sendInvitationEmail(user.getEmail(), user.getFirstName(), adminDetails.getSecurityCode());\n-    logger.debug(\n-        String.format(\"send add new user email status=%s\", emailResponse.getHttpStatusCode()));\n-\n-    Map<String, String> map =\n-        Collections.singletonMap(CommonConstants.NEW_USER_ID, adminDetails.getId());\n-    if (MessageCode.EMAIL_ACCEPTED_BY_MAIL_SERVER.getMessage().equals(emailResponse.getMessage())) {\n-      participantManagerHelper.logEvent(NEW_USER_INVITATION_EMAIL_SENT, auditRequest, map);\n-    } else {\n-      participantManagerHelper.logEvent(NEW_USER_INVITATION_EMAIL_FAILED, auditRequest, map);\n-    }\n+    UserAccountEmailSchedulerTaskEntity emailTaskEntity =\n+        UserMapper.toUserAccountEmailSchedulerTaskEntity(\n+            auditRequest, adminDetails, EmailTemplate.ACCOUNT_CREATED_EMAIL_TEMPLATE);\n+    userAccountEmailSchedulerTaskRepository.saveAndFlush(emailTaskEntity);\n \n     logger.exit(\"Successfully saved admin details.\");\n     return new AdminUserResponse(MessageCode.ADD_NEW_USER_SUCCESS, adminDetails.getId());\n   }\n \n-  private void saveAppStudySitePermissions(\n-      UserRequest user, UserRegAdminEntity adminDetails, UserAppPermissionRequest app) {\n-    logger.entry(\"saveAppStudySitePermissions()\");\n-    Optional<AppEntity> optApp = appRepository.findById(app.getId());\n-    if (!optApp.isPresent()) {\n+  // SQL Injection? No. No need to sanitize appId, userId values as these fields have FK\n+  // constraints defined on the table", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "648b37ccb22707d52cb8c56a0e2ca87b2917052e"}, "originalPosition": 297}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc0MjgzOQ==", "bodyText": "uncomment this line?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2199#discussion_r533742839", "createdAt": "2020-12-01T21:47:54Z", "author": {"login": "saminguyen"}, "path": "participant-manager-datastore/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/AdminUsersAccountScheduledTaskTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.ParticipantManagerEvent.ACCOUNT_UPDATE_EMAIL_SENT;\n+import static com.google.cloud.healthcare.fdamystudies.common.ParticipantManagerEvent.NEW_USER_INVITATION_EMAIL_SENT;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.isA;\n+import static org.mockito.Mockito.atLeastOnce;\n+import static org.mockito.Mockito.verify;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.AuditLogEventRequest;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.common.EmailTemplate;\n+import com.google.cloud.healthcare.fdamystudies.common.IdGenerator;\n+import com.google.cloud.healthcare.fdamystudies.helper.TestDataHelper;\n+import com.google.cloud.healthcare.fdamystudies.model.UserAccountEmailSchedulerTaskEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.UserRegAdminEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserAccountEmailSchedulerTaskRepository;\n+import com.google.cloud.healthcare.fdamystudies.service.ManageUserService;\n+import java.util.List;\n+import java.util.Map;\n+import javax.mail.internet.MimeMessage;\n+import org.apache.commons.collections4.map.HashedMap;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class AdminUsersAccountScheduledTaskTest extends BaseMockIT {\n+\n+  @Autowired private TestDataHelper testDataHelper;\n+\n+  @Autowired private ManageUserService manageUserService;\n+\n+  @Autowired private UserAccountEmailSchedulerTaskRepository addNewAdminEmailServiceRepository;\n+\n+  @BeforeEach\n+  public void setUp() {}\n+\n+  @Test\n+  public void shouldSendEmailInvitationForNewAdmin() throws Exception {\n+\n+    UserRegAdminEntity admin = testDataHelper.createNonSuperAdmin();\n+    admin.setSecurityCode(IdGenerator.id());\n+    testDataHelper.getUserRegAdminRepository().saveAndFlush(admin);\n+\n+    UserAccountEmailSchedulerTaskEntity adminRecordToSendEmail =\n+        new UserAccountEmailSchedulerTaskEntity();\n+    adminRecordToSendEmail.setUserId(admin.getId());\n+    adminRecordToSendEmail.setAppId(\"GCPMS001\");\n+    adminRecordToSendEmail.setAppVersion(\"1.0\");\n+    adminRecordToSendEmail.setCorrelationId(IdGenerator.id());\n+    adminRecordToSendEmail.setSource(\"PARTICIPANT MANAGER\");\n+    adminRecordToSendEmail.setMobilePlatform(\"Unknown\");\n+    adminRecordToSendEmail.setEmailTemplateType(\n+        EmailTemplate.ACCOUNT_CREATED_EMAIL_TEMPLATE.getTemplate());\n+\n+    addNewAdminEmailServiceRepository.saveAndFlush(adminRecordToSendEmail);\n+\n+    manageUserService.sendUserEmail();\n+\n+    verify(emailSender, atLeastOnce()).send(isA(MimeMessage.class));\n+\n+    List<UserAccountEmailSchedulerTaskEntity> invitedAdmins =\n+        addNewAdminEmailServiceRepository.findAll();\n+\n+    assertTrue(invitedAdmins.isEmpty());\n+\n+    AuditLogEventRequest auditRequest = new AuditLogEventRequest();\n+    //    auditRequest.setUserId(admin.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "648b37ccb22707d52cb8c56a0e2ca87b2917052e"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc0MzAwNw==", "bodyText": "same as above", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2199#discussion_r533743007", "createdAt": "2020-12-01T21:48:13Z", "author": {"login": "saminguyen"}, "path": "participant-manager-datastore/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/AdminUsersAccountScheduledTaskTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.ParticipantManagerEvent.ACCOUNT_UPDATE_EMAIL_SENT;\n+import static com.google.cloud.healthcare.fdamystudies.common.ParticipantManagerEvent.NEW_USER_INVITATION_EMAIL_SENT;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.isA;\n+import static org.mockito.Mockito.atLeastOnce;\n+import static org.mockito.Mockito.verify;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.AuditLogEventRequest;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.common.EmailTemplate;\n+import com.google.cloud.healthcare.fdamystudies.common.IdGenerator;\n+import com.google.cloud.healthcare.fdamystudies.helper.TestDataHelper;\n+import com.google.cloud.healthcare.fdamystudies.model.UserAccountEmailSchedulerTaskEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.UserRegAdminEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserAccountEmailSchedulerTaskRepository;\n+import com.google.cloud.healthcare.fdamystudies.service.ManageUserService;\n+import java.util.List;\n+import java.util.Map;\n+import javax.mail.internet.MimeMessage;\n+import org.apache.commons.collections4.map.HashedMap;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class AdminUsersAccountScheduledTaskTest extends BaseMockIT {\n+\n+  @Autowired private TestDataHelper testDataHelper;\n+\n+  @Autowired private ManageUserService manageUserService;\n+\n+  @Autowired private UserAccountEmailSchedulerTaskRepository addNewAdminEmailServiceRepository;\n+\n+  @BeforeEach\n+  public void setUp() {}\n+\n+  @Test\n+  public void shouldSendEmailInvitationForNewAdmin() throws Exception {\n+\n+    UserRegAdminEntity admin = testDataHelper.createNonSuperAdmin();\n+    admin.setSecurityCode(IdGenerator.id());\n+    testDataHelper.getUserRegAdminRepository().saveAndFlush(admin);\n+\n+    UserAccountEmailSchedulerTaskEntity adminRecordToSendEmail =\n+        new UserAccountEmailSchedulerTaskEntity();\n+    adminRecordToSendEmail.setUserId(admin.getId());\n+    adminRecordToSendEmail.setAppId(\"GCPMS001\");\n+    adminRecordToSendEmail.setAppVersion(\"1.0\");\n+    adminRecordToSendEmail.setCorrelationId(IdGenerator.id());\n+    adminRecordToSendEmail.setSource(\"PARTICIPANT MANAGER\");\n+    adminRecordToSendEmail.setMobilePlatform(\"Unknown\");\n+    adminRecordToSendEmail.setEmailTemplateType(\n+        EmailTemplate.ACCOUNT_CREATED_EMAIL_TEMPLATE.getTemplate());\n+\n+    addNewAdminEmailServiceRepository.saveAndFlush(adminRecordToSendEmail);\n+\n+    manageUserService.sendUserEmail();\n+\n+    verify(emailSender, atLeastOnce()).send(isA(MimeMessage.class));\n+\n+    List<UserAccountEmailSchedulerTaskEntity> invitedAdmins =\n+        addNewAdminEmailServiceRepository.findAll();\n+\n+    assertTrue(invitedAdmins.isEmpty());\n+\n+    AuditLogEventRequest auditRequest = new AuditLogEventRequest();\n+    //    auditRequest.setUserId(admin.getId());\n+    Map<String, AuditLogEventRequest> auditEventMap = new HashedMap<>();\n+    auditEventMap.put(NEW_USER_INVITATION_EMAIL_SENT.getEventCode(), auditRequest);\n+\n+    verifyAuditEventCall(auditEventMap, NEW_USER_INVITATION_EMAIL_SENT);\n+  }\n+\n+  @Test\n+  public void shouldSendEmailInvitationForUpdateAdmin() throws Exception {\n+\n+    UserRegAdminEntity admin = testDataHelper.createNonSuperAdmin();\n+    admin.setSecurityCode(IdGenerator.id());\n+    testDataHelper.getUserRegAdminRepository().saveAndFlush(admin);\n+\n+    UserAccountEmailSchedulerTaskEntity adminRecordToSendEmail =\n+        new UserAccountEmailSchedulerTaskEntity();\n+    adminRecordToSendEmail.setUserId(admin.getId());\n+    adminRecordToSendEmail.setAppId(\"GCPMS001\");\n+    adminRecordToSendEmail.setAppVersion(\"1.0\");\n+    adminRecordToSendEmail.setCorrelationId(IdGenerator.id());\n+    adminRecordToSendEmail.setSource(\"PARTICIPANT MANAGER\");\n+    adminRecordToSendEmail.setMobilePlatform(\"Unknown\");\n+    adminRecordToSendEmail.setEmailTemplateType(\n+        EmailTemplate.ACCOUNT_UPDATED_EMAIL_TEMPLATE.getTemplate());\n+\n+    addNewAdminEmailServiceRepository.saveAndFlush(adminRecordToSendEmail);\n+\n+    manageUserService.sendUserEmail();\n+\n+    verify(emailSender, atLeastOnce()).send(isA(MimeMessage.class));\n+\n+    List<UserAccountEmailSchedulerTaskEntity> invitedAdmins =\n+        addNewAdminEmailServiceRepository.findAll();\n+\n+    assertTrue(invitedAdmins.isEmpty());\n+\n+    AuditLogEventRequest auditRequest = new AuditLogEventRequest();\n+    //    auditRequest.setUserId(admin.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "648b37ccb22707d52cb8c56a0e2ca87b2917052e"}, "originalPosition": 114}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46c53dd25811be6700040a859c384479434afcd6", "author": {"user": {"login": "chiranjibi009", "name": "Chiranjibi Dash"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/46c53dd25811be6700040a859c384479434afcd6", "committedDate": "2020-12-02T04:52:58Z", "message": "Merge branch 'develop' into add-new-user-and-update-user-and-send-invitation-api-changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91f342fa8608de738e914445de210653677bf37c", "author": {"user": {"login": "chiranjibi009", "name": "Chiranjibi Dash"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/91f342fa8608de738e914445de210653677bf37c", "committedDate": "2020-12-02T04:55:35Z", "message": "Update AdminUsersAccountScheduledTaskTest.java\n\ncommented code removed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyOTAxOTgz", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2199#pullrequestreview-542901983", "createdAt": "2020-12-02T14:41:01Z", "commit": {"oid": "91f342fa8608de738e914445de210653677bf37c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNDo0MTowMVrOH9eISA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNDo0MTowMVrOH9eISA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIxODgyNA==", "bodyText": "I want to emphasize on Sami's comment. SQL injection has nothing to do with foreignKey, and having foreign keys does not resolve the need to have good security.\nWe just went through a painful scrubbing of the code to fix exactly these issues; you need to make sure to not introduce new security issues like this one in future.\nAs far as I am concerned, this PR is completely unacceptable and all query generations need to be redone with security at the forefront. Please fix this and any other similar shortcuts you have taken.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2199#discussion_r534218824", "createdAt": "2020-12-02T14:41:01Z", "author": {"login": "zohrehj"}, "path": "participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java", "diffHunk": "@@ -127,211 +134,233 @@ public AdminUserResponse createUser(UserRequest user, AuditLogEventRequest audit\n     return userResponse;\n   }\n \n-  private EmailResponse sendInvitationEmail(String email, String firstName, String securityCode) {\n-    Map<String, String> templateArgs = new HashMap<>();\n-    templateArgs.put(\"ORG_NAME\", appConfig.getOrgName());\n-    templateArgs.put(\"FIRST_NAME\", firstName);\n-    templateArgs.put(\"ACTIVATION_LINK\", appConfig.getUserDetailsLink() + securityCode);\n-    templateArgs.put(\"CONTACT_EMAIL_ADDRESS\", appConfig.getContactEmail());\n-    EmailRequest emailRequest =\n-        new EmailRequest(\n-            appConfig.getFromEmail(),\n-            new String[] {email},\n-            null,\n-            null,\n-            appConfig.getRegisterUserSubject(),\n-            appConfig.getRegisterUserBody(),\n-            templateArgs);\n-    return emailService.sendMimeMail(emailRequest);\n-  }\n-\n   private ErrorCode validateUserRequest(UserRequest user) {\n     logger.entry(\"validateUserRequest()\");\n     Optional<UserRegAdminEntity> optAdminDetails =\n         userAdminRepository.findById(user.getSuperAdminUserId());\n-    if (!optAdminDetails.isPresent()) {\n-      return ErrorCode.USER_NOT_FOUND;\n-    }\n-\n-    UserRegAdminEntity loggedInUserDetails = optAdminDetails.get();\n-    if (!loggedInUserDetails.isSuperAdmin()) {\n-      return ErrorCode.NOT_SUPER_ADMIN_ACCESS;\n-    }\n \n-    if (!user.isSuperAdmin() && !hasAtleastOnePermission(user)) {\n-      return ErrorCode.PERMISSION_MISSING;\n+    UserRegAdminEntity admin =\n+        optAdminDetails.orElseThrow(() -> new ErrorCodeException(ErrorCode.USER_NOT_FOUND));\n+    if (!admin.isSuperAdmin()) {\n+      throw new ErrorCodeException(ErrorCode.NOT_SUPER_ADMIN_ACCESS);\n     }\n \n     Optional<UserRegAdminEntity> optUsers = userAdminRepository.findByEmail(user.getEmail());\n     logger.exit(\"Successfully validated user request\");\n     return optUsers.isPresent() ? ErrorCode.EMAIL_EXISTS : null;\n   }\n \n-  private boolean hasAtleastOnePermission(UserRequest user) {\n-    logger.entry(\"hasAtleastOnePermission()\");\n-    if (user.getManageLocations() != Permission.NO_PERMISSION.value()) {\n-      return true;\n-    } else if (CollectionUtils.isEmpty(user.getApps())) {\n-      return false;\n-    }\n+  private void addSelectedAppStudySiteIds(\n+      List<UserAppPermissionRequest> apps,\n+      List<AppPermissionDetails> appPermissions,\n+      List<StudyPermissionDetails> studyPermissions,\n+      List<SitePermissionDetails> sitePermissions) {\n \n     Predicate<UserAppPermissionRequest> appPredicate = app -> app.isSelected();\n     Predicate<UserStudyPermissionRequest> studyPredicate = study -> study.isSelected();\n     Predicate<UserSitePermissionRequest> sitePredicate = site -> site.isSelected();\n \n-    List<UserAppPermissionRequest> selectedApps =\n-        user.getApps().stream().filter(appPredicate).collect(Collectors.toList());\n-    if (CollectionUtils.isNotEmpty(selectedApps)) {\n-      return true;\n-    }\n-\n-    for (UserAppPermissionRequest appPermission : user.getApps()) {\n-      List<UserStudyPermissionRequest> selectedStudies =\n-          CollectionUtils.emptyIfNull(appPermission.getStudies())\n-              .stream()\n-              .filter(studyPredicate)\n-              .collect(Collectors.toList());\n-      if (CollectionUtils.isNotEmpty(selectedStudies)) {\n-        return true;\n+    if (apps != null) {\n+      List<UserAppPermissionRequest> selectedApps =\n+          (List<UserAppPermissionRequest>)\n+              CollectionUtils.emptyIfNull(\n+                  apps.stream().filter(appPredicate).collect(Collectors.toList()));\n+\n+      for (UserAppPermissionRequest appRequest : selectedApps) {\n+        AppPermissionDetails appPermissionDetails = new AppPermissionDetails();\n+        appPermissionDetails.setAppId(appRequest.getId());\n+        appPermissionDetails.setEdit(appRequest.getPermission());\n+        appPermissions.add(appPermissionDetails);\n       }\n \n-      for (UserStudyPermissionRequest studyPermission : appPermission.getStudies()) {\n-        List<UserSitePermissionRequest> selectedSites =\n-            CollectionUtils.emptyIfNull(studyPermission.getSites())\n+      for (UserAppPermissionRequest appPermission : apps) {\n+        List<UserStudyPermissionRequest> selectedStudies =\n+            CollectionUtils.emptyIfNull(appPermission.getStudies())\n                 .stream()\n-                .filter(sitePredicate)\n+                .filter(studyPredicate)\n                 .collect(Collectors.toList());\n-        if (CollectionUtils.isNotEmpty(selectedSites)) {\n-          return true;\n+\n+        for (UserStudyPermissionRequest studyRequest : selectedStudies) {\n+          StudyPermissionDetails studyPermissionDetails = new StudyPermissionDetails();\n+          studyPermissionDetails.setAppId(appPermission.getId());\n+          studyPermissionDetails.setStudyId(studyRequest.getStudyId());\n+          studyPermissionDetails.setEdit(studyRequest.getPermission());\n+          studyPermissions.add(studyPermissionDetails);\n+        }\n+\n+        if (appPermission.getStudies() != null) {\n+          for (UserStudyPermissionRequest studyPermission : appPermission.getStudies()) {\n+            List<UserSitePermissionRequest> selectedSites =\n+                CollectionUtils.emptyIfNull(studyPermission.getSites())\n+                    .stream()\n+                    .filter(sitePredicate)\n+                    .collect(Collectors.toList());\n+\n+            for (UserSitePermissionRequest siteRequest : selectedSites) {\n+              SitePermissionDetails sitePermissionDetails = new SitePermissionDetails();\n+              sitePermissionDetails.setAppId(appPermission.getId());\n+              sitePermissionDetails.setStudyId(studyPermission.getStudyId());\n+              sitePermissionDetails.setSiteId(siteRequest.getSiteId());\n+              sitePermissionDetails.setCanEdit(siteRequest.getPermission());\n+              sitePermissions.add(sitePermissionDetails);\n+            }\n+          }\n         }\n       }\n     }\n-\n-    logger.exit(\"No permissions found, return false\");\n-    return false;\n   }\n \n   private AdminUserResponse saveAdminDetails(UserRequest user, AuditLogEventRequest auditRequest) {\n     logger.entry(\"saveAdminDetails()\");\n+    List<AppPermissionDetails> appPermissions = new ArrayList<>();\n+    List<StudyPermissionDetails> studyPermissions = new ArrayList<>();\n+    List<SitePermissionDetails> sitePermissions = new ArrayList<>();\n+    if (user.getApps() != null && !user.getApps().isEmpty()) {\n+      addSelectedAppStudySiteIds(user.getApps(), appPermissions, studyPermissions, sitePermissions);\n+    }\n+\n+    if (user.getManageLocations() == Permission.NO_PERMISSION.value()\n+        && appPermissions.isEmpty()\n+        && studyPermissions.isEmpty()\n+        && sitePermissions.isEmpty()) {\n+      throw new ErrorCodeException(ErrorCode.PERMISSION_MISSING);\n+    }\n+\n     UserRegAdminEntity adminDetails =\n         UserMapper.fromUserRequest(user, Long.valueOf(appConfig.getSecurityCodeExpireDate()));\n     adminDetails = userAdminRepository.saveAndFlush(adminDetails);\n \n     if (CollectionUtils.isNotEmpty(user.getApps())) {\n-      Map<Boolean, List<UserAppPermissionRequest>> groupBySelectedAppMap =\n-          user.getApps()\n-              .stream()\n-              .collect(Collectors.groupingBy(UserAppPermissionRequest::isSelected));\n-\n-      // save permissions for selected apps\n-      for (UserAppPermissionRequest app :\n-          CollectionUtils.emptyIfNull(groupBySelectedAppMap.get(CommonConstants.SELECTED))) {\n-        saveAppStudySitePermissions(user, adminDetails, app);\n-      }\n-\n-      // save permissions for unselected apps\n-      for (UserAppPermissionRequest app :\n-          CollectionUtils.emptyIfNull(groupBySelectedAppMap.get(CommonConstants.UNSELECTED))) {\n-        for (UserStudyPermissionRequest study : CollectionUtils.emptyIfNull(app.getStudies())) {\n-          if (study.isSelected()) {\n-            saveStudySitePermissions(user, adminDetails, study);\n-          } else if (CollectionUtils.isNotEmpty(study.getSites())) {\n-            saveSitePermissions(user, adminDetails, study);\n-          }\n-        }\n-      }\n+      saveAppLevelPermissions(user, adminDetails, appPermissions);\n+      saveStudyLevelPermissions(user, adminDetails, studyPermissions);\n+      saveSiteLevelPermissions(user, adminDetails, sitePermissions);\n     }\n \n-    EmailResponse emailResponse =\n-        sendInvitationEmail(user.getEmail(), user.getFirstName(), adminDetails.getSecurityCode());\n-    logger.debug(\n-        String.format(\"send add new user email status=%s\", emailResponse.getHttpStatusCode()));\n-\n-    Map<String, String> map =\n-        Collections.singletonMap(CommonConstants.NEW_USER_ID, adminDetails.getId());\n-    if (MessageCode.EMAIL_ACCEPTED_BY_MAIL_SERVER.getMessage().equals(emailResponse.getMessage())) {\n-      participantManagerHelper.logEvent(NEW_USER_INVITATION_EMAIL_SENT, auditRequest, map);\n-    } else {\n-      participantManagerHelper.logEvent(NEW_USER_INVITATION_EMAIL_FAILED, auditRequest, map);\n-    }\n+    UserAccountEmailSchedulerTaskEntity emailTaskEntity =\n+        UserMapper.toUserAccountEmailSchedulerTaskEntity(\n+            auditRequest, adminDetails, EmailTemplate.ACCOUNT_CREATED_EMAIL_TEMPLATE);\n+    userAccountEmailSchedulerTaskRepository.saveAndFlush(emailTaskEntity);\n \n     logger.exit(\"Successfully saved admin details.\");\n     return new AdminUserResponse(MessageCode.ADD_NEW_USER_SUCCESS, adminDetails.getId());\n   }\n \n-  private void saveAppStudySitePermissions(\n-      UserRequest user, UserRegAdminEntity adminDetails, UserAppPermissionRequest app) {\n-    logger.entry(\"saveAppStudySitePermissions()\");\n-    Optional<AppEntity> optApp = appRepository.findById(app.getId());\n-    if (!optApp.isPresent()) {\n+  // SQL Injection? No. No need to sanitize appId, userId values as these fields have FK\n+  // constraints defined on the table", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc0MTgzMA=="}, "originalCommit": {"oid": "648b37ccb22707d52cb8c56a0e2ca87b2917052e"}, "originalPosition": 297}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c0beaaefdd8028fc7d8690d8c3184001eac5012", "author": {"user": {"login": "chiranjibi009", "name": "Chiranjibi Dash"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/3c0beaaefdd8028fc7d8690d8c3184001eac5012", "committedDate": "2020-12-02T15:07:46Z", "message": "removed commented lines"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "238a12e737fde0ab981f5890846dc4cf75e4222a", "author": {"user": {"login": "chiranjibi009", "name": "Chiranjibi Dash"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/238a12e737fde0ab981f5890846dc4cf75e4222a", "committedDate": "2020-12-04T13:21:47Z", "message": "add and update user api refactored with batch operation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a008d9715eeeab0aaf4b2d3b54b8447f3334079", "author": {"user": {"login": "chiranjibi009", "name": "Chiranjibi Dash"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/7a008d9715eeeab0aaf4b2d3b54b8447f3334079", "committedDate": "2020-12-04T13:26:09Z", "message": "Merge branch 'develop' into add-new-user-and-update-user-and-send-invitation-api-changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e02c46cd2cf160865a8b2db4633cb89abc81e651", "author": {"user": {"login": "chiranjibi009", "name": "Chiranjibi Dash"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/e02c46cd2cf160865a8b2db4633cb89abc81e651", "committedDate": "2020-12-04T13:28:10Z", "message": "organized imports + formated the code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c667f1e8a7fa8721da4cd2947da8aa6f66ba835c", "author": {"user": {"login": "chiranjibi009", "name": "Chiranjibi Dash"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/c667f1e8a7fa8721da4cd2947da8aa6f66ba835c", "committedDate": "2020-12-07T10:49:23Z", "message": "property file changed for batch operation and site entity changed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d894f05d7a74daba0664db85f19d9856a24db50", "author": {"user": {"login": "chiranjibi009", "name": "Chiranjibi Dash"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/5d894f05d7a74daba0664db85f19d9856a24db50", "committedDate": "2020-12-07T10:53:29Z", "message": "Merge branch 'develop' into add-new-user-and-update-user-and-send-invitation-api-changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2NTExMTA4", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2199#pullrequestreview-546511108", "createdAt": "2020-12-07T20:30:13Z", "commit": {"oid": "5d894f05d7a74daba0664db85f19d9856a24db50"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDozMDoxM1rOIA5YEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDo1MDo0NFrOIA6H1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgxMDk2Mw==", "bodyText": "typo: Entites -> Entities", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2199#discussion_r537810963", "createdAt": "2020-12-07T20:30:13Z", "author": {"login": "saminguyen"}, "path": "participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java", "diffHunk": "@@ -231,9 +235,22 @@ private AdminUserResponse saveAdminDetails(UserRequest user, AuditLogEventReques\n     adminDetails = userAdminRepository.saveAndFlush(adminDetails);\n \n     if (CollectionUtils.isNotEmpty(user.getApps())) {\n-      saveAppLevelPermissions(user, adminDetails, appPermissions);\n-      saveStudyLevelPermissions(user, adminDetails, studyPermissions);\n-      saveSiteLevelPermissions(user, adminDetails, sitePermissions);\n+      Map<String, AppEntity> appEntitesMap = new HashedMap<>();\n+      Map<String, StudyEntity> studyEntitesMap = new HashedMap<>();\n+      Map<String, SiteEntity> siteEntitesMap = new HashedMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d894f05d7a74daba0664db85f19d9856a24db50"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgxNDc3MA==", "bodyText": "Consider using HashMap here instead for efficiency when calling contains()", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2199#discussion_r537814770", "createdAt": "2020-12-07T20:36:33Z", "author": {"login": "saminguyen"}, "path": "participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java", "diffHunk": "@@ -245,121 +262,148 @@ private AdminUserResponse saveAdminDetails(UserRequest user, AuditLogEventReques\n     return new AdminUserResponse(MessageCode.ADD_NEW_USER_SUCCESS, adminDetails.getId());\n   }\n \n-  // SQL Injection? No. No need to sanitize appId, userId values as these fields have FK\n-  // constraints defined on the table\n+  private void getAndPutAppStudyAndSiteEntities(\n+      Map<String, AppEntity> appEntitesMap,\n+      Map<String, StudyEntity> studyEntitesMap,\n+      Map<String, SiteEntity> siteEntitesMap,\n+      List<AppPermissionDetails> appPermissions,\n+      List<StudyPermissionDetails> studyPermissions,\n+      List<SitePermissionDetails> sitePermissions) {\n+\n+    List<String> appIds = new ArrayList<>();\n+    List<String> studyIds = new ArrayList<>();\n+    List<String> siteIds = new ArrayList<>();\n+    addAppStudySiteIds(\n+        appIds, studyIds, siteIds, appPermissions, studyPermissions, sitePermissions);\n+    List<AppEntity> apps = appRepository.findAllById(appIds);\n+    List<StudyEntity> studies = studyRepository.findAllById(studyIds);\n+    if (CollectionUtils.isNotEmpty(siteIds)) {\n+      List<SiteEntity> sites = siteRepository.findAllById(siteIds);\n+      for (SiteEntity siteEntity : sites) {\n+        siteEntitesMap.put(siteEntity.getId(), siteEntity);\n+      }\n+    }\n+\n+    for (AppEntity appEntity : apps) {\n+      appEntitesMap.put(appEntity.getId(), appEntity);\n+    }\n+\n+    for (StudyEntity studyEntity : studies) {\n+      studyEntitesMap.put(studyEntity.getId(), studyEntity);\n+    }\n+  }\n+\n+  private void addAppStudySiteIds(\n+      List<String> appIds,\n+      List<String> studyIds,\n+      List<String> siteIds,\n+      List<AppPermissionDetails> appPermissions,\n+      List<StudyPermissionDetails> studyPermissions,\n+      List<SitePermissionDetails> sitePermissions) {\n+    for (AppPermissionDetails appPermissionDetails : appPermissions) {\n+      appIds.add(appPermissionDetails.getAppId());\n+    }\n+\n+    for (StudyPermissionDetails studyPermissionDetails : studyPermissions) {\n+      if (!studyIds.contains(studyPermissionDetails.getStudyId())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d894f05d7a74daba0664db85f19d9856a24db50"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgxNTA1OA==", "bodyText": "typo: Entites -> Entities", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2199#discussion_r537815058", "createdAt": "2020-12-07T20:37:00Z", "author": {"login": "saminguyen"}, "path": "participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java", "diffHunk": "@@ -245,121 +262,148 @@ private AdminUserResponse saveAdminDetails(UserRequest user, AuditLogEventReques\n     return new AdminUserResponse(MessageCode.ADD_NEW_USER_SUCCESS, adminDetails.getId());\n   }\n \n-  // SQL Injection? No. No need to sanitize appId, userId values as these fields have FK\n-  // constraints defined on the table\n+  private void getAndPutAppStudyAndSiteEntities(\n+      Map<String, AppEntity> appEntitesMap,\n+      Map<String, StudyEntity> studyEntitesMap,\n+      Map<String, SiteEntity> siteEntitesMap,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d894f05d7a74daba0664db85f19d9856a24db50"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyMjkyOA==", "bodyText": "nit: rename getAppStudyAndSiteEntitiesMapFromPermissions? - I think it needs to be clearer.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2199#discussion_r537822928", "createdAt": "2020-12-07T20:50:16Z", "author": {"login": "saminguyen"}, "path": "participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java", "diffHunk": "@@ -245,121 +262,148 @@ private AdminUserResponse saveAdminDetails(UserRequest user, AuditLogEventReques\n     return new AdminUserResponse(MessageCode.ADD_NEW_USER_SUCCESS, adminDetails.getId());\n   }\n \n-  // SQL Injection? No. No need to sanitize appId, userId values as these fields have FK\n-  // constraints defined on the table\n+  private void getAndPutAppStudyAndSiteEntities(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d894f05d7a74daba0664db85f19d9856a24db50"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyMzE4OA==", "bodyText": "same comment about typos", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2199#discussion_r537823188", "createdAt": "2020-12-07T20:50:44Z", "author": {"login": "saminguyen"}, "path": "participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java", "diffHunk": "@@ -245,121 +262,148 @@ private AdminUserResponse saveAdminDetails(UserRequest user, AuditLogEventReques\n     return new AdminUserResponse(MessageCode.ADD_NEW_USER_SUCCESS, adminDetails.getId());\n   }\n \n-  // SQL Injection? No. No need to sanitize appId, userId values as these fields have FK\n-  // constraints defined on the table\n+  private void getAndPutAppStudyAndSiteEntities(\n+      Map<String, AppEntity> appEntitesMap,\n+      Map<String, StudyEntity> studyEntitesMap,\n+      Map<String, SiteEntity> siteEntitesMap,\n+      List<AppPermissionDetails> appPermissions,\n+      List<StudyPermissionDetails> studyPermissions,\n+      List<SitePermissionDetails> sitePermissions) {\n+\n+    List<String> appIds = new ArrayList<>();\n+    List<String> studyIds = new ArrayList<>();\n+    List<String> siteIds = new ArrayList<>();\n+    addAppStudySiteIds(\n+        appIds, studyIds, siteIds, appPermissions, studyPermissions, sitePermissions);\n+    List<AppEntity> apps = appRepository.findAllById(appIds);\n+    List<StudyEntity> studies = studyRepository.findAllById(studyIds);\n+    if (CollectionUtils.isNotEmpty(siteIds)) {\n+      List<SiteEntity> sites = siteRepository.findAllById(siteIds);\n+      for (SiteEntity siteEntity : sites) {\n+        siteEntitesMap.put(siteEntity.getId(), siteEntity);\n+      }\n+    }\n+\n+    for (AppEntity appEntity : apps) {\n+      appEntitesMap.put(appEntity.getId(), appEntity);\n+    }\n+\n+    for (StudyEntity studyEntity : studies) {\n+      studyEntitesMap.put(studyEntity.getId(), studyEntity);\n+    }\n+  }\n+\n+  private void addAppStudySiteIds(\n+      List<String> appIds,\n+      List<String> studyIds,\n+      List<String> siteIds,\n+      List<AppPermissionDetails> appPermissions,\n+      List<StudyPermissionDetails> studyPermissions,\n+      List<SitePermissionDetails> sitePermissions) {\n+    for (AppPermissionDetails appPermissionDetails : appPermissions) {\n+      appIds.add(appPermissionDetails.getAppId());\n+    }\n+\n+    for (StudyPermissionDetails studyPermissionDetails : studyPermissions) {\n+      if (!studyIds.contains(studyPermissionDetails.getStudyId())) {\n+        studyIds.add(studyPermissionDetails.getStudyId());\n+      }\n+      if (!appIds.contains(studyPermissionDetails.getAppId())) {\n+        appIds.add(studyPermissionDetails.getAppId());\n+      }\n+    }\n+\n+    for (SitePermissionDetails sitePermissionDetails : sitePermissions) {\n+      if (!siteIds.contains(sitePermissionDetails.getSiteId())) {\n+        siteIds.add(sitePermissionDetails.getSiteId());\n+      }\n+      if (!studyIds.contains(sitePermissionDetails.getStudyId())) {\n+        studyIds.add(sitePermissionDetails.getStudyId());\n+      }\n+      if (!appIds.contains(sitePermissionDetails.getAppId())) {\n+        appIds.add(sitePermissionDetails.getAppId());\n+      }\n+    }\n+  }\n+\n   private void saveAppLevelPermissions(\n       UserRequest user,\n       UserRegAdminEntity adminDetails,\n-      List<AppPermissionDetails> appPermissions) {\n+      List<AppPermissionDetails> appPermissions,\n+      Map<String, AppEntity> appEntitesMap) {\n     logger.entry(\"saveAppLevelPermissions()\");\n     if (CollectionUtils.isEmpty(appPermissions)) {\n       return;\n     }\n \n-    StringBuilder sqlInsertBuilder =\n-        new StringBuilder(\n-            \"insert into app_permissions (id, ur_admin_user_id, app_info_id, edit, created_time, created_by) values\");\n-    appPermissions.forEach(\n-        (AppPermissionDetails appPermssion) -> {\n-          sqlInsertBuilder.append(\"(\");\n-          sqlInsertBuilder.append(\"'\" + IdGenerator.id() + \"'\");\n-          sqlInsertBuilder.append(\",\");\n-          sqlInsertBuilder.append(\"'\" + adminDetails.getId() + \"'\");\n-          sqlInsertBuilder.append(\",\");\n-          sqlInsertBuilder.append(\"'\" + appPermssion.getAppId() + \"'\");\n-          sqlInsertBuilder.append(\",\");\n-          sqlInsertBuilder.append(\"'\" + appPermssion.getEdit() + \"'\");\n-          sqlInsertBuilder.append(\",\");\n-          sqlInsertBuilder.append(\"'\" + new Timestamp(Instant.now().toEpochMilli()) + \"'\");\n-          sqlInsertBuilder.append(\",\");\n-          sqlInsertBuilder.append(\"'\" + user.getSuperAdminUserId() + \"'\");\n-          sqlInsertBuilder.append(\")\");\n-          sqlInsertBuilder.append(\", \");\n-        });\n-    sqlInsertBuilder.deleteCharAt(sqlInsertBuilder.lastIndexOf(\",\"));\n+    List<AppPermissionEntity> appPermissionEntities = new ArrayList<>();\n+    for (AppPermissionDetails selectedApp : appPermissions) {\n+      AppPermissionEntity appPermissionEntity = new AppPermissionEntity();\n+      appPermissionEntity.setApp(appEntitesMap.get(selectedApp.getAppId()));\n+      appPermissionEntity.setUrAdminUser(adminDetails);\n+      appPermissionEntity.setCreated(new Timestamp(Instant.now().toEpochMilli()));\n+      appPermissionEntity.setCreatedBy(user.getSuperAdminUserId());\n+      appPermissionEntity.setEdit(Permission.fromValue(selectedApp.getEdit()));\n+      appPermissionEntities.add(appPermissionEntity);\n+    }\n \n-    entityManger.createNativeQuery(sqlInsertBuilder.toString()).executeUpdate();\n+    appPermissionRepository.saveAll(appPermissionEntities);\n     logger.exit(\"Successfully saved app level permissions\");\n   }\n \n-  // SQL Injection? No. No need to sanitize appId,studyId, userId values as these fields have FK\n-  // constraints defined on the table\n   private void saveStudyLevelPermissions(\n       UserRequest user,\n       UserRegAdminEntity adminDetails,\n-      List<StudyPermissionDetails> studyPermissions) {\n+      List<StudyPermissionDetails> studyPermissions,\n+      Map<String, AppEntity> appEntitesMap,\n+      Map<String, StudyEntity> studyEntitesMap) {\n     logger.entry(\"saveStudyLevelPermissions()\");\n     if (CollectionUtils.isEmpty(studyPermissions)) {\n       return;\n     }\n \n-    StringBuilder sqlInsertBuilder =\n-        new StringBuilder(\n-            \"insert into study_permissions (id, ur_admin_user_id, app_info_id, study_id, edit, created_time, created_by) values\");\n-    studyPermissions.forEach(\n-        (StudyPermissionDetails studyPermssion) -> {\n-          sqlInsertBuilder.append(\"(\");\n-          sqlInsertBuilder.append(\"'\" + IdGenerator.id() + \"'\");\n-          sqlInsertBuilder.append(\",\");\n-          sqlInsertBuilder.append(\"'\" + adminDetails.getId() + \"'\");\n-          sqlInsertBuilder.append(\",\");\n-          sqlInsertBuilder.append(\"'\" + studyPermssion.getAppId() + \"'\");\n-          sqlInsertBuilder.append(\",\");\n-          sqlInsertBuilder.append(\"'\" + studyPermssion.getStudyId() + \"'\");\n-          sqlInsertBuilder.append(\",\");\n-          sqlInsertBuilder.append(\"'\" + studyPermssion.getEdit() + \"'\");\n-          sqlInsertBuilder.append(\",\");\n-          sqlInsertBuilder.append(\"'\" + new Timestamp(Instant.now().toEpochMilli()) + \"'\");\n-          sqlInsertBuilder.append(\",\");\n-          sqlInsertBuilder.append(\"'\" + user.getSuperAdminUserId() + \"'\");\n-          sqlInsertBuilder.append(\")\");\n-          sqlInsertBuilder.append(\", \");\n-        });\n-    sqlInsertBuilder.deleteCharAt(sqlInsertBuilder.lastIndexOf(\",\"));\n+    List<StudyPermissionEntity> studyPermissionEntities = new ArrayList<>();\n+    for (StudyPermissionDetails selectedStudy : studyPermissions) {\n+      StudyPermissionEntity studyPermissionEntity = new StudyPermissionEntity();\n+      studyPermissionEntity.setApp(appEntitesMap.get(selectedStudy.getAppId()));\n+      studyPermissionEntity.setStudy(studyEntitesMap.get(selectedStudy.getStudyId()));\n+      studyPermissionEntity.setUrAdminUser(adminDetails);\n+      studyPermissionEntity.setCreated(new Timestamp(Instant.now().toEpochMilli()));\n+      studyPermissionEntity.setCreatedBy(user.getSuperAdminUserId());\n+      studyPermissionEntity.setEdit(Permission.fromValue(selectedStudy.getEdit()));\n+      studyPermissionEntities.add(studyPermissionEntity);\n+    }\n \n-    entityManger.createNativeQuery(sqlInsertBuilder.toString()).executeUpdate();\n+    studyPermissionRepository.saveAll(studyPermissionEntities);\n     logger.exit(\"Successfully saved study level permissions\");\n   }\n \n-  // SQL Injection? No. No need to sanitize appId, studyId, siteId, userId values as these fields\n-  // have FK constraints defined on the table\n   private void saveSiteLevelPermissions(\n       UserRequest user,\n       UserRegAdminEntity adminDetails,\n-      List<SitePermissionDetails> sitePermissions) {\n+      List<SitePermissionDetails> sitePermissions,\n+      Map<String, AppEntity> appEntitesMap,\n+      Map<String, StudyEntity> studyEntitesMap,\n+      Map<String, SiteEntity> siteEntitesMap) {\n     logger.entry(\"saveSiteLevelPermissions()\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d894f05d7a74daba0664db85f19d9856a24db50"}, "originalPosition": 252}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "598b458e01dc2e3925eb9a9141f715e1b228db16", "author": {"user": {"login": "chiranjibi009", "name": "Chiranjibi Dash"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/598b458e01dc2e3925eb9a9141f715e1b228db16", "committedDate": "2020-12-08T05:59:37Z", "message": "typo corrected"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "693adc595a3e5b7f6493ac9ec32f2d35ebd55ddd", "author": {"user": {"login": "chiranjibi009", "name": "Chiranjibi Dash"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/693adc595a3e5b7f6493ac9ec32f2d35ebd55ddd", "committedDate": "2020-12-08T05:59:51Z", "message": "Merge branch 'develop' into add-new-user-and-update-user-and-send-invitation-api-changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "505397027e4393610bafc1e6751e92200416c5fb", "author": {"user": {"login": "chiranjibi009", "name": "Chiranjibi Dash"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/505397027e4393610bafc1e6751e92200416c5fb", "committedDate": "2020-12-08T06:00:06Z", "message": "Merge branch 'add-new-user-and-update-user-and-send-invitation-api-changes' of https://github.com/GoogleCloudPlatform/fda-mystudies into add-new-user-and-update-user-and-send-invitation-api-changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NDQzNjIy", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2199#pullrequestreview-547443622", "createdAt": "2020-12-08T17:07:28Z", "commit": {"oid": "505397027e4393610bafc1e6751e92200416c5fb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "437b5a7360792dbeef1f57add79cc23b3ab57d86", "author": {"user": {"login": "chiranjibi009", "name": "Chiranjibi Dash"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/437b5a7360792dbeef1f57add79cc23b3ab57d86", "committedDate": "2020-12-09T05:31:00Z", "message": "Merge branch 'develop' into add-new-user-and-update-user-and-send-invitation-api-changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fd10eca0b6ddedae3ccd9326e238839efffc8e0", "author": {"user": {"login": "chiranjibi009", "name": "Chiranjibi Dash"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/0fd10eca0b6ddedae3ccd9326e238839efffc8e0", "committedDate": "2020-12-09T05:33:56Z", "message": "Merge branch 'develop' into add-new-user-and-update-user-and-send-invitation-api-changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6cdb4f4320d4e39a4562a7c0b35b1cef6b2cf4a", "author": {"user": {"login": "chiranjibi009", "name": "Chiranjibi Dash"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/e6cdb4f4320d4e39a4562a7c0b35b1cef6b2cf4a", "committedDate": "2020-12-09T05:36:49Z", "message": "Merge branch 'develop' into add-new-user-and-update-user-and-send-invitation-api-changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89fe5d86f28437352203394140219e47d91049ea", "author": {"user": {"login": "chiranjibi009", "name": "Chiranjibi Dash"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/89fe5d86f28437352203394140219e47d91049ea", "committedDate": "2020-12-09T10:33:08Z", "message": "Merge branch 'develop' into add-new-user-and-update-user-and-send-invitation-api-changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MzMyNTA0", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2199#pullrequestreview-548332504", "createdAt": "2020-12-09T15:56:41Z", "commit": {"oid": "89fe5d86f28437352203394140219e47d91049ea"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "312cf1b9a17651cf8848a9a0f38f4ef675724b2d", "author": {"user": {"login": "chiranjibi009", "name": "Chiranjibi Dash"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/312cf1b9a17651cf8848a9a0f38f4ef675724b2d", "committedDate": "2020-12-10T05:23:47Z", "message": "Merge branch 'develop' into add-new-user-and-update-user-and-send-invitation-api-changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ac57f0a2be20ee0a8c593d6532bf98f2b783ca9", "author": {"user": {"login": "chiranjibi009", "name": "Chiranjibi Dash"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/2ac57f0a2be20ee0a8c593d6532bf98f2b783ca9", "committedDate": "2020-12-10T14:10:58Z", "message": "Merge branch 'develop' into add-new-user-and-update-user-and-send-invitation-api-changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5MjM3MjQ2", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2199#pullrequestreview-549237246", "createdAt": "2020-12-10T14:15:33Z", "commit": {"oid": "2ac57f0a2be20ee0a8c593d6532bf98f2b783ca9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1107, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}