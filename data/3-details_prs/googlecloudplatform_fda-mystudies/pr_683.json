{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3MjE5NDc3", "number": 683, "title": "mock oauth service has been implemented", "bodyText": "mock auth service has been implemented", "createdAt": "2020-07-27T14:58:35Z", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683", "merged": true, "mergeCommit": {"oid": "858f532206814f41e5ebe7597f9e85b5617b4568"}, "closed": true, "closedAt": "2020-08-03T07:06:59Z", "author": {"login": "firdosebtc1"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5DEqBAH2gAyNDU3MjE5NDc3OmJjNWFhNzY1ZTRjMzhhMTM0YTkyMTcyY2VjYTAyN2VhZWU4MGU1MmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc7MeT9gH2gAyNDU3MjE5NDc3OjBlN2NmMWQ4ZjY3MWRjMGQ0OGFjM2ZjZTEyYjYzYWI2OWY1NzAwNzE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bc5aa765e4c38a134a92172ceca027eaee80e52b", "author": {"user": {"login": "firdosebtc1", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/bc5aa765e4c38a134a92172ceca027eaee80e52b", "committedDate": "2020-07-27T14:54:34Z", "message": "mock auth service has been implemented"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc", "author": {"user": {"login": "firdosebtc1", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/ac80ea914fda97db82778d864f6e4df2302c13cc", "committedDate": "2020-07-27T15:35:21Z", "message": "test cases issue has been fixed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2MTIwMDQ5", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#pullrequestreview-456120049", "createdAt": "2020-07-27T20:42:58Z", "commit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDo0Mjo1OFrOG3y1WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMToxNjoxOFrOG3z4jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE1NzcyMQ==", "bodyText": "unnecessary call to super()", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461157721", "createdAt": "2020-07-27T20:42:58Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/auth.service.ts", "diffHunk": "@@ -0,0 +1,74 @@\n+import {Injectable} from '@angular/core';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {User} from '../entity/user';\n+import {EntityService} from './entity.service';\n+import {Router} from '@angular/router';\n+import {AccessToken} from '../entity/AccessToken';\n+import {environment} from 'src/environments/environment';\n+import {ProfileService} from './profile.service';\n+import {UnsubscribeOnDestroyAdapter} from '../unsubscribe-on-destroy-adapter';\n+\n+@Injectable({providedIn: 'root'})\n+export class AuthService extends UnsubscribeOnDestroyAdapter {\n+  constructor(\n+    private readonly http: HttpClient,\n+    public cookieService: CookieService,\n+    public entityService: EntityService<AccessToken>,\n+    public router: Router,\n+    private readonly profilService: ProfileService,\n+  ) {\n+    super();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE1NzkxOQ==", "bodyText": "hasCredentials?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461157919", "createdAt": "2020-07-27T20:43:22Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/auth.service.ts", "diffHunk": "@@ -0,0 +1,74 @@\n+import {Injectable} from '@angular/core';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {User} from '../entity/user';\n+import {EntityService} from './entity.service';\n+import {Router} from '@angular/router';\n+import {AccessToken} from '../entity/AccessToken';\n+import {environment} from 'src/environments/environment';\n+import {ProfileService} from './profile.service';\n+import {UnsubscribeOnDestroyAdapter} from '../unsubscribe-on-destroy-adapter';\n+\n+@Injectable({providedIn: 'root'})\n+export class AuthService extends UnsubscribeOnDestroyAdapter {\n+  constructor(\n+    private readonly http: HttpClient,\n+    public cookieService: CookieService,\n+    public entityService: EntityService<AccessToken>,\n+    public router: Router,\n+    private readonly profilService: ProfileService,\n+  ) {\n+    super();\n+  }\n+  checkCredentials(): boolean {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE1ODM1MA==", "bodyText": "what are these parameters? Should they be in environment?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461158350", "createdAt": "2020-07-27T20:44:12Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/auth.service.ts", "diffHunk": "@@ -0,0 +1,74 @@\n+import {Injectable} from '@angular/core';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {User} from '../entity/user';\n+import {EntityService} from './entity.service';\n+import {Router} from '@angular/router';\n+import {AccessToken} from '../entity/AccessToken';\n+import {environment} from 'src/environments/environment';\n+import {ProfileService} from './profile.service';\n+import {UnsubscribeOnDestroyAdapter} from '../unsubscribe-on-destroy-adapter';\n+\n+@Injectable({providedIn: 'root'})\n+export class AuthService extends UnsubscribeOnDestroyAdapter {\n+  constructor(\n+    private readonly http: HttpClient,\n+    public cookieService: CookieService,\n+    public entityService: EntityService<AccessToken>,\n+    public router: Router,\n+    private readonly profilService: ProfileService,\n+  ) {\n+    super();\n+  }\n+  checkCredentials(): boolean {\n+    return (\n+      this.cookieService.check('accessToken') &&\n+      this.cookieService.check('user')\n+    );\n+  }\n+  getLoggedInUserDetails(): User | null {\n+    if (this.cookieService.check('user')) {\n+      return JSON.parse(this.cookieService.get('user')) as User;\n+    }\n+    return null;\n+  }\n+  getLoggedInUserAccessToken(): string {\n+    return this.cookieService.get('accessToken');\n+  }\n+\n+  redirectToLoginPage(): void {\n+    void this.router.navigate(['/callback'], {\n+      queryParams: {\n+        code: 'l4hQQM-guBDwbpo76dHJs-8.ufR0YLll0menniGz5A-YN95DfCFOKg',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE1OTkyNQ==", "bodyText": "You don't need a canActivate guard here, the usual way to do this is to just redirect the user from this component if they are already logged in", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461159925", "createdAt": "2020-07-27T20:47:14Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/app-routing.module.ts", "diffHunk": "@@ -5,16 +5,21 @@ import {SetUpAccountComponent} from './auth/set-up-account/set-up-account.compon\n import {ForgotPasswordComponent} from './auth/forgot-password/forgot-password.component';\n import {PageNotFoundComponent} from './page-not-found/page-not-found.component';\n import {SiteCoordinatorModule} from './site-coordinator/site-coordinator.module';\n+import {CallbackComponent} from './auth/callback/callback.component';\n+import {AuthGuard} from './service/auth.guard';\n+import {LoginGuard} from './service/login.guard';\n const routes: Routes = [\n-  {path: 'login', component: LoginComponent},\n+  {path: 'login', component: LoginComponent, canActivate: [LoginGuard]},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2NTM2Nw==", "bodyText": "Can you name this something more specific than \"Callback\"", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461165367", "createdAt": "2020-07-27T20:57:35Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/app-routing.module.ts", "diffHunk": "@@ -5,16 +5,21 @@ import {SetUpAccountComponent} from './auth/set-up-account/set-up-account.compon\n import {ForgotPasswordComponent} from './auth/forgot-password/forgot-password.component';\n import {PageNotFoundComponent} from './page-not-found/page-not-found.component';\n import {SiteCoordinatorModule} from './site-coordinator/site-coordinator.module';\n+import {CallbackComponent} from './auth/callback/callback.component';\n+import {AuthGuard} from './service/auth.guard';\n+import {LoginGuard} from './service/login.guard';\n const routes: Routes = [\n-  {path: 'login', component: LoginComponent},\n+  {path: 'login', component: LoginComponent, canActivate: [LoginGuard]},\n   {path: 'forgot-password', component: ForgotPasswordComponent},\n   {path: 'set-up-account', component: SetUpAccountComponent},\n+  {path: 'callback', component: CallbackComponent},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2Nzc1OQ==", "bodyText": "I don't really want hacks in the application to support development. I would rather we use https://webpack.js.org/configuration/dev-server/#devserverproxy to do this. You can set the auth server to point at the proxy, and return these hardcoded responses in development", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461167759", "createdAt": "2020-07-27T21:02:05Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/http-interceptors/auth.interceptor.ts", "diffHunk": "@@ -6,36 +6,53 @@ import {\n   HttpRequest,\n   HttpEvent,\n   HttpErrorResponse,\n+  HttpResponse,\n } from '@angular/common/http';\n import {finalize} from 'rxjs/operators';\n import {User} from '../entity/user';\n-import {Observable, OperatorFunction, throwError} from 'rxjs';\n+import {Observable, OperatorFunction, throwError, of} from 'rxjs';\n import {catchError} from 'rxjs/operators';\n import {ToastrService} from 'ngx-toastr';\n+import {AuthService} from '../service/auth.service';\n+import accessToken from 'src/app/auth/access-token.json';\n+import {AccessToken} from '../entity/AccessToken';\n+import account from 'src/app/auth/account.json';\n import {ErrorCodesEnum, getMessage} from '../shared/error.codes.enum';\n import {ApiResponse} from '../entity/api.response.model';\n+import {environment} from 'src/environments/environment';\n \n @Injectable()\n export class AuthInterceptor implements HttpInterceptor {\n   constructor(\n     private readonly spinner: NgxSpinnerService,\n     private readonly toasterService: ToastrService,\n+    private readonly authService: AuthService,\n   ) {}\n \n-  getUserDetails(): User | null {\n-    const currentUser = localStorage.getItem('currentUser');\n-    if (currentUser === null) {\n-      return null;\n-    }\n-    return JSON.parse(currentUser) as User;\n-  }\n   intercept(\n     req: HttpRequest<unknown>,\n     next: HttpHandler,\n   ): Observable<HttpEvent<unknown>> {\n+    if (req.url === `${environment.authServerUrl}/oauth2/token`) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2ODE3MQ==", "bodyText": "Why do you need !this.authService.checkCredentials()? Isn't user === null sufficient?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461168171", "createdAt": "2020-07-27T21:02:56Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/http-interceptors/auth.interceptor.ts", "diffHunk": "@@ -6,36 +6,53 @@ import {\n   HttpRequest,\n   HttpEvent,\n   HttpErrorResponse,\n+  HttpResponse,\n } from '@angular/common/http';\n import {finalize} from 'rxjs/operators';\n import {User} from '../entity/user';\n-import {Observable, OperatorFunction, throwError} from 'rxjs';\n+import {Observable, OperatorFunction, throwError, of} from 'rxjs';\n import {catchError} from 'rxjs/operators';\n import {ToastrService} from 'ngx-toastr';\n+import {AuthService} from '../service/auth.service';\n+import accessToken from 'src/app/auth/access-token.json';\n+import {AccessToken} from '../entity/AccessToken';\n+import account from 'src/app/auth/account.json';\n import {ErrorCodesEnum, getMessage} from '../shared/error.codes.enum';\n import {ApiResponse} from '../entity/api.response.model';\n+import {environment} from 'src/environments/environment';\n \n @Injectable()\n export class AuthInterceptor implements HttpInterceptor {\n   constructor(\n     private readonly spinner: NgxSpinnerService,\n     private readonly toasterService: ToastrService,\n+    private readonly authService: AuthService,\n   ) {}\n \n-  getUserDetails(): User | null {\n-    const currentUser = localStorage.getItem('currentUser');\n-    if (currentUser === null) {\n-      return null;\n-    }\n-    return JSON.parse(currentUser) as User;\n-  }\n   intercept(\n     req: HttpRequest<unknown>,\n     next: HttpHandler,\n   ): Observable<HttpEvent<unknown>> {\n+    if (req.url === `${environment.authServerUrl}/oauth2/token`) {\n+      return of(\n+        new HttpResponse({\n+          status: 200,\n+          body: accessToken as AccessToken,\n+        }),\n+      );\n+    }\n+    if (req.url === `${environment.baseUrl}/users`) {\n+      return of(\n+        new HttpResponse({\n+          status: 200,\n+          body: account as User,\n+        }),\n+      );\n+    }\n     void this.spinner.show();\n-    const user = this.getUserDetails();\n-    if (user === null) {\n+    const user = this.authService.getLoggedInUserDetails();\n+\n+    if (user === null || !this.authService.checkCredentials()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2ODczOA==", "bodyText": "Please be more consistent in how you name files. The angular style is to use lowercase and dashes, like access-token.ts", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461168738", "createdAt": "2020-07-27T21:04:02Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/entity/AccessToken.ts", "diffHunk": "@@ -0,0 +1,8 @@\n+export interface AccessToken {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2OTQzNQ==", "bodyText": "You don't need to unsubscribe from an HTTP request", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461169435", "createdAt": "2020-07-27T21:05:17Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/auth.service.ts", "diffHunk": "@@ -0,0 +1,74 @@\n+import {Injectable} from '@angular/core';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {User} from '../entity/user';\n+import {EntityService} from './entity.service';\n+import {Router} from '@angular/router';\n+import {AccessToken} from '../entity/AccessToken';\n+import {environment} from 'src/environments/environment';\n+import {ProfileService} from './profile.service';\n+import {UnsubscribeOnDestroyAdapter} from '../unsubscribe-on-destroy-adapter';\n+\n+@Injectable({providedIn: 'root'})\n+export class AuthService extends UnsubscribeOnDestroyAdapter {\n+  constructor(\n+    private readonly http: HttpClient,\n+    public cookieService: CookieService,\n+    public entityService: EntityService<AccessToken>,\n+    public router: Router,\n+    private readonly profilService: ProfileService,\n+  ) {\n+    super();\n+  }\n+  checkCredentials(): boolean {\n+    return (\n+      this.cookieService.check('accessToken') &&\n+      this.cookieService.check('user')\n+    );\n+  }\n+  getLoggedInUserDetails(): User | null {\n+    if (this.cookieService.check('user')) {\n+      return JSON.parse(this.cookieService.get('user')) as User;\n+    }\n+    return null;\n+  }\n+  getLoggedInUserAccessToken(): string {\n+    return this.cookieService.get('accessToken');\n+  }\n+\n+  redirectToLoginPage(): void {\n+    void this.router.navigate(['/callback'], {\n+      queryParams: {\n+        code: 'l4hQQM-guBDwbpo76dHJs-8.ufR0YLll0menniGz5A-YN95DfCFOKg',\n+        userId:\n+          'b45bc4f67fd77ebb6db9a94f8abd9a0470b07f4098f7934234f12a5bee975231',\n+      },\n+    });\n+  }\n+  getToken(code: string, userId: string): void {\n+    const payload = {\n+      grant_type: 'authorization_code',\n+      scope: 'openid',\n+      redirect_uri: environment.redirectUrl,\n+      code: code,\n+      userId: userId,\n+    };\n+    this.subs.add(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2OTk3Nw==", "bodyText": "This method POSTs to a server, isn't not a get. Please rename.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461169977", "createdAt": "2020-07-27T21:06:18Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/auth.service.ts", "diffHunk": "@@ -0,0 +1,74 @@\n+import {Injectable} from '@angular/core';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {User} from '../entity/user';\n+import {EntityService} from './entity.service';\n+import {Router} from '@angular/router';\n+import {AccessToken} from '../entity/AccessToken';\n+import {environment} from 'src/environments/environment';\n+import {ProfileService} from './profile.service';\n+import {UnsubscribeOnDestroyAdapter} from '../unsubscribe-on-destroy-adapter';\n+\n+@Injectable({providedIn: 'root'})\n+export class AuthService extends UnsubscribeOnDestroyAdapter {\n+  constructor(\n+    private readonly http: HttpClient,\n+    public cookieService: CookieService,\n+    public entityService: EntityService<AccessToken>,\n+    public router: Router,\n+    private readonly profilService: ProfileService,\n+  ) {\n+    super();\n+  }\n+  checkCredentials(): boolean {\n+    return (\n+      this.cookieService.check('accessToken') &&\n+      this.cookieService.check('user')\n+    );\n+  }\n+  getLoggedInUserDetails(): User | null {\n+    if (this.cookieService.check('user')) {\n+      return JSON.parse(this.cookieService.get('user')) as User;\n+    }\n+    return null;\n+  }\n+  getLoggedInUserAccessToken(): string {\n+    return this.cookieService.get('accessToken');\n+  }\n+\n+  redirectToLoginPage(): void {\n+    void this.router.navigate(['/callback'], {\n+      queryParams: {\n+        code: 'l4hQQM-guBDwbpo76dHJs-8.ufR0YLll0menniGz5A-YN95DfCFOKg',\n+        userId:\n+          'b45bc4f67fd77ebb6db9a94f8abd9a0470b07f4098f7934234f12a5bee975231',\n+      },\n+    });\n+  }\n+  getToken(code: string, userId: string): void {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MDE4Mg==", "bodyText": "How do you know the user is logged in? This could be a stale access token", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461170182", "createdAt": "2020-07-27T21:06:37Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/auth.service.ts", "diffHunk": "@@ -0,0 +1,74 @@\n+import {Injectable} from '@angular/core';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {User} from '../entity/user';\n+import {EntityService} from './entity.service';\n+import {Router} from '@angular/router';\n+import {AccessToken} from '../entity/AccessToken';\n+import {environment} from 'src/environments/environment';\n+import {ProfileService} from './profile.service';\n+import {UnsubscribeOnDestroyAdapter} from '../unsubscribe-on-destroy-adapter';\n+\n+@Injectable({providedIn: 'root'})\n+export class AuthService extends UnsubscribeOnDestroyAdapter {\n+  constructor(\n+    private readonly http: HttpClient,\n+    public cookieService: CookieService,\n+    public entityService: EntityService<AccessToken>,\n+    public router: Router,\n+    private readonly profilService: ProfileService,\n+  ) {\n+    super();\n+  }\n+  checkCredentials(): boolean {\n+    return (\n+      this.cookieService.check('accessToken') &&\n+      this.cookieService.check('user')\n+    );\n+  }\n+  getLoggedInUserDetails(): User | null {\n+    if (this.cookieService.check('user')) {\n+      return JSON.parse(this.cookieService.get('user')) as User;\n+    }\n+    return null;\n+  }\n+  getLoggedInUserAccessToken(): string {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MDI3NQ==", "bodyText": "Same as getLoggedInUserAccessToken", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461170275", "createdAt": "2020-07-27T21:06:50Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/auth.service.ts", "diffHunk": "@@ -0,0 +1,74 @@\n+import {Injectable} from '@angular/core';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {User} from '../entity/user';\n+import {EntityService} from './entity.service';\n+import {Router} from '@angular/router';\n+import {AccessToken} from '../entity/AccessToken';\n+import {environment} from 'src/environments/environment';\n+import {ProfileService} from './profile.service';\n+import {UnsubscribeOnDestroyAdapter} from '../unsubscribe-on-destroy-adapter';\n+\n+@Injectable({providedIn: 'root'})\n+export class AuthService extends UnsubscribeOnDestroyAdapter {\n+  constructor(\n+    private readonly http: HttpClient,\n+    public cookieService: CookieService,\n+    public entityService: EntityService<AccessToken>,\n+    public router: Router,\n+    private readonly profilService: ProfileService,\n+  ) {\n+    super();\n+  }\n+  checkCredentials(): boolean {\n+    return (\n+      this.cookieService.check('accessToken') &&\n+      this.cookieService.check('user')\n+    );\n+  }\n+  getLoggedInUserDetails(): User | null {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MDU2OA==", "bodyText": "Same as getToken, this is not just getting a profile.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461170568", "createdAt": "2020-07-27T21:07:27Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/auth.service.ts", "diffHunk": "@@ -0,0 +1,74 @@\n+import {Injectable} from '@angular/core';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {User} from '../entity/user';\n+import {EntityService} from './entity.service';\n+import {Router} from '@angular/router';\n+import {AccessToken} from '../entity/AccessToken';\n+import {environment} from 'src/environments/environment';\n+import {ProfileService} from './profile.service';\n+import {UnsubscribeOnDestroyAdapter} from '../unsubscribe-on-destroy-adapter';\n+\n+@Injectable({providedIn: 'root'})\n+export class AuthService extends UnsubscribeOnDestroyAdapter {\n+  constructor(\n+    private readonly http: HttpClient,\n+    public cookieService: CookieService,\n+    public entityService: EntityService<AccessToken>,\n+    public router: Router,\n+    private readonly profilService: ProfileService,\n+  ) {\n+    super();\n+  }\n+  checkCredentials(): boolean {\n+    return (\n+      this.cookieService.check('accessToken') &&\n+      this.cookieService.check('user')\n+    );\n+  }\n+  getLoggedInUserDetails(): User | null {\n+    if (this.cookieService.check('user')) {\n+      return JSON.parse(this.cookieService.get('user')) as User;\n+    }\n+    return null;\n+  }\n+  getLoggedInUserAccessToken(): string {\n+    return this.cookieService.get('accessToken');\n+  }\n+\n+  redirectToLoginPage(): void {\n+    void this.router.navigate(['/callback'], {\n+      queryParams: {\n+        code: 'l4hQQM-guBDwbpo76dHJs-8.ufR0YLll0menniGz5A-YN95DfCFOKg',\n+        userId:\n+          'b45bc4f67fd77ebb6db9a94f8abd9a0470b07f4098f7934234f12a5bee975231',\n+      },\n+    });\n+  }\n+  getToken(code: string, userId: string): void {\n+    const payload = {\n+      grant_type: 'authorization_code',\n+      scope: 'openid',\n+      redirect_uri: environment.redirectUrl,\n+      code: code,\n+      userId: userId,\n+    };\n+    this.subs.add(\n+      this.entityService\n+        .authServerPost(JSON.stringify(payload), 'oauth2/token')\n+        .subscribe((response) => {\n+          this.cookieService.set('accessToken', response.accessToken);\n+          this.cookieService.set('refreshToken', response.refreshToken);\n+          this.getProfile();\n+        }),\n+    );\n+  }\n+  getProfile(): void {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MDcwOA==", "bodyText": "profileService", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461170708", "createdAt": "2020-07-27T21:07:43Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/auth.service.ts", "diffHunk": "@@ -0,0 +1,74 @@\n+import {Injectable} from '@angular/core';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {User} from '../entity/user';\n+import {EntityService} from './entity.service';\n+import {Router} from '@angular/router';\n+import {AccessToken} from '../entity/AccessToken';\n+import {environment} from 'src/environments/environment';\n+import {ProfileService} from './profile.service';\n+import {UnsubscribeOnDestroyAdapter} from '../unsubscribe-on-destroy-adapter';\n+\n+@Injectable({providedIn: 'root'})\n+export class AuthService extends UnsubscribeOnDestroyAdapter {\n+  constructor(\n+    private readonly http: HttpClient,\n+    public cookieService: CookieService,\n+    public entityService: EntityService<AccessToken>,\n+    public router: Router,\n+    private readonly profilService: ProfileService,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MDk2OQ==", "bodyText": "UserService?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461170969", "createdAt": "2020-07-27T21:08:11Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/profile.service.ts", "diffHunk": "@@ -0,0 +1,20 @@\n+import {Injectable} from '@angular/core';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {User} from '../entity/user';\n+import {EntityService} from './entity.service';\n+import {Observable} from 'rxjs';\n+import {Router} from '@angular/router';\n+\n+@Injectable({providedIn: 'root'})\n+export class ProfileService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MTEyOA==", "bodyText": "Just use this.http directly", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461171128", "createdAt": "2020-07-27T21:08:34Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/profile.service.ts", "diffHunk": "@@ -0,0 +1,20 @@\n+import {Injectable} from '@angular/core';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {User} from '../entity/user';\n+import {EntityService} from './entity.service';\n+import {Observable} from 'rxjs';\n+import {Router} from '@angular/router';\n+\n+@Injectable({providedIn: 'root'})\n+export class ProfileService {\n+  constructor(\n+    private readonly http: HttpClient,\n+    public cookieService: CookieService,\n+    public entityService: EntityService<User>,\n+    public router: Router,\n+  ) {}\n+  getProfile(): Observable<User> {\n+    return this.entityService.get('/users');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MTIzMw==", "bodyText": "cookieService and router are not used", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461171233", "createdAt": "2020-07-27T21:08:48Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/profile.service.ts", "diffHunk": "@@ -0,0 +1,20 @@\n+import {Injectable} from '@angular/core';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {User} from '../entity/user';\n+import {EntityService} from './entity.service';\n+import {Observable} from 'rxjs';\n+import {Router} from '@angular/router';\n+\n+@Injectable({providedIn: 'root'})\n+export class ProfileService {\n+  constructor(\n+    private readonly http: HttpClient,\n+    public cookieService: CookieService,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MTQ3MQ==", "bodyText": "You shouldn't be checking routes here, only include this guard on relevant routes", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461171471", "createdAt": "2020-07-27T21:09:18Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/login.guard.ts", "diffHunk": "@@ -0,0 +1,20 @@\n+import {Injectable} from '@angular/core';\n+import {CanActivate, UrlTree, Router} from '@angular/router';\n+import {AuthService} from './auth.service';\n+\n+@Injectable({\n+  providedIn: 'root',\n+})\n+export class LoginGuard implements CanActivate {\n+  constructor(\n+    private readonly authService: AuthService,\n+    private readonly router: Router,\n+  ) {}\n+\n+  canActivate(): boolean | UrlTree {\n+    return (\n+      !this.authService.checkCredentials() ||\n+      this.router.parseUrl('/coordinator')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MTczMg==", "bodyText": "This isn't generally useful, this code should be moved to the auth service", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461171732", "createdAt": "2020-07-27T21:09:49Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/entity.service.ts", "diffHunk": "@@ -30,4 +31,8 @@ export class EntityService<T> {\n     const serviceUrl = Location.joinWithSlash(this.baseUrl, urlpath);\n     return this.http.put<T>(serviceUrl, bodydata);\n   }\n+  authServerPost(bodydata: string, urlpath: string): Observable<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MTk5Mw==", "bodyText": "Same as LoginGuard, you shouldn't be checking routes here, only include this guard on relevant routes", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461171993", "createdAt": "2020-07-27T21:10:19Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/auth.guard.ts", "diffHunk": "@@ -0,0 +1,19 @@\n+import {Injectable} from '@angular/core';\n+import {CanActivate, UrlTree, Router} from '@angular/router';\n+import {AuthService} from './auth.service';\n+\n+@Injectable({\n+  providedIn: 'root',\n+})\n+export class AuthGuard implements CanActivate {\n+  constructor(\n+    private readonly authService: AuthService,\n+    private readonly router: Router,\n+  ) {}\n+\n+  canActivate(): boolean | UrlTree {\n+    return (\n+      this.authService.checkCredentials() || this.router.parseUrl('/login')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MjMyMg==", "bodyText": "Something needs to happen if these aren't set, we don't want the user to just sit on a blank page", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461172322", "createdAt": "2020-07-27T21:11:04Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/auth/callback/callback.component.ts", "diffHunk": "@@ -0,0 +1,27 @@\n+import {Component, OnInit} from '@angular/core';\n+import {ActivatedRoute, Router} from '@angular/router';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {AuthService} from 'src/app/service/auth.service';\n+\n+@Component({\n+  selector: 'app-callback',\n+  templateUrl: './callback.component.html',\n+  styleUrls: ['./callback.component.scss'],\n+})\n+export class CallbackComponent implements OnInit {\n+  constructor(\n+    private readonly activatedRoute: ActivatedRoute,\n+    private readonly http: HttpClient,\n+    public cookieService: CookieService,\n+    public authService: AuthService,\n+    private readonly router: Router,\n+  ) {}\n+  ngOnInit(): void {\n+    this.activatedRoute.queryParams.subscribe((params) => {\n+      if (params.code && params.userId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MjM5Nw==", "bodyText": "You don't need a style file for this", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461172397", "createdAt": "2020-07-27T21:11:14Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/auth/callback/callback.component.ts", "diffHunk": "@@ -0,0 +1,27 @@\n+import {Component, OnInit} from '@angular/core';\n+import {ActivatedRoute, Router} from '@angular/router';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {AuthService} from 'src/app/service/auth.service';\n+\n+@Component({\n+  selector: 'app-callback',\n+  templateUrl: './callback.component.html',\n+  styleUrls: ['./callback.component.scss'],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MjU4Nw==", "bodyText": "You don't need a template for this", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461172587", "createdAt": "2020-07-27T21:11:35Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/auth/callback/callback.component.ts", "diffHunk": "@@ -0,0 +1,27 @@\n+import {Component, OnInit} from '@angular/core';\n+import {ActivatedRoute, Router} from '@angular/router';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {AuthService} from 'src/app/service/auth.service';\n+\n+@Component({\n+  selector: 'app-callback',\n+  templateUrl: './callback.component.html',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MjcyMg==", "bodyText": "remove unused services", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461172722", "createdAt": "2020-07-27T21:11:54Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/auth/callback/callback.component.ts", "diffHunk": "@@ -0,0 +1,27 @@\n+import {Component, OnInit} from '@angular/core';\n+import {ActivatedRoute, Router} from '@angular/router';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {AuthService} from 'src/app/service/auth.service';\n+\n+@Component({\n+  selector: 'app-callback',\n+  templateUrl: './callback.component.html',\n+  styleUrls: ['./callback.component.scss'],\n+})\n+export class CallbackComponent implements OnInit {\n+  constructor(\n+    private readonly activatedRoute: ActivatedRoute,\n+    private readonly http: HttpClient,\n+    public cookieService: CookieService,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MzUxNQ==", "bodyText": "Needs a test for parsing the query parameters", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461173515", "createdAt": "2020-07-27T21:13:29Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/auth/callback/callback.component.spec.ts", "diffHunk": "@@ -0,0 +1,29 @@\n+import {async, ComponentFixture, TestBed} from '@angular/core/testing';\n+import {CallbackComponent} from './callback.component';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {AuthService} from 'src/app/service/auth.service';\n+import {HttpClientModule} from '@angular/common/http';\n+import {EntityService} from 'src/app/service/entity.service';\n+\n+describe('CallbackComponent', () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3NDcxMg==", "bodyText": "Can you add a dev environment to angular.json so that I can use my own URLs?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461174712", "createdAt": "2020-07-27T21:15:52Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/environments/environment.ts", "diffHunk": "@@ -4,7 +4,9 @@\n \n export const environment = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3NDkyNA==", "bodyText": "Please remove when hardcoded data is removed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461174924", "createdAt": "2020-07-27T21:16:18Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/tsconfig.json", "diffHunk": "@@ -14,6 +14,8 @@\n     \"importHelpers\": true,\n     \"target\": \"es6\",\n     \"typeRoots\": [\"node_modules/@types\"],\n-    \"lib\": [\"es2018\", \"dom\"]\n+    \"lib\": [\"es2018\", \"dom\"],\n+    \"resolveJsonModule\": true,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a33b1f4ece76e61690c9c61c44565f89803c6eef", "author": {"user": {"login": "firdosebtc1", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/a33b1f4ece76e61690c9c61c44565f89803c6eef", "committedDate": "2020-07-30T14:36:55Z", "message": "code review comments has been fixed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c037b180985b13f17fefcbfc1b7f15a556489f1c", "author": {"user": {"login": "firdosebtc1", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/c037b180985b13f17fefcbfc1b7f15a556489f1c", "committedDate": "2020-07-30T14:41:49Z", "message": "formatting has been done"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NDY4MDA3", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#pullrequestreview-458468007", "createdAt": "2020-07-30T14:40:47Z", "commit": {"oid": "a33b1f4ece76e61690c9c61c44565f89803c6eef"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNDo0MDo0N1rOG5mI5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNDo0OToyN1rOG5miVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA0Njg4NQ==", "bodyText": "You don't have this on the /login route.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r463046885", "createdAt": "2020-07-30T14:40:47Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/auth.guard.ts", "diffHunk": "@@ -12,8 +12,6 @@ export class AuthGuard implements CanActivate {\n   ) {}\n \n   canActivate(): boolean | UrlTree {\n-    return (\n-      this.authService.checkCredentials() || this.router.parseUrl('/login')\n-    );\n+    return this.authService.hasCredentials() || this.router.parseUrl('/login');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a33b1f4ece76e61690c9c61c44565f89803c6eef"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA0OTcyNA==", "bodyText": "typo", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r463049724", "createdAt": "2020-07-30T14:44:35Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/auth/login/login.component.ts", "diffHunk": "@@ -14,6 +14,10 @@ export class LoginComponent {\n   ) {}\n \n   ngOnInit(): void {\n-    this.authService.redirectToLoginPage();\n+    if (!this.authService.hasCredentials()) {\n+      this.authService.redirectToLoginPage();\n+    } else {\n+     void this.router.navigate(['/coordiantor/']);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a33b1f4ece76e61690c9c61c44565f89803c6eef"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA1MzM5Ng==", "bodyText": "I've mentioned this on several other reviews, you don't need to call JSON.stringify, this happens automatically", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r463053396", "createdAt": "2020-07-30T14:49:27Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/auth.service.ts", "diffHunk": "@@ -45,30 +40,29 @@ export class AuthService extends UnsubscribeOnDestroyAdapter {\n       },\n     });\n   }\n-  getToken(code: string, userId: string): void {\n+  grantAuthorization(code: string, userId: string): void {\n     const payload = {\n       grant_type: 'authorization_code',\n       scope: 'openid',\n       redirect_uri: environment.redirectUrl,\n       code: code,\n       userId: userId,\n     };\n-    this.subs.add(\n-      this.entityService\n-        .authServerPost(JSON.stringify(payload), 'oauth2/token')\n-        .subscribe((response) => {\n-          this.cookieService.set('accessToken', response.accessToken);\n-          this.cookieService.set('refreshToken', response.refreshToken);\n-          this.getProfile();\n-        }),\n-    );\n+    this.http\n+      .post<AccessToken>(\n+        `${environment.authServerUrl}/oauth2/token`,\n+        JSON.stringify(payload),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a33b1f4ece76e61690c9c61c44565f89803c6eef"}, "originalPosition": 72}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "413d5c907ef2d174d2eaec0ddcc30caeb07b8bad", "author": {"user": {"login": "firdosebtc1", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/413d5c907ef2d174d2eaec0ddcc30caeb07b8bad", "committedDate": "2020-07-30T15:11:23Z", "message": "test case issues has been fixed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2445bafd34b9fdad8c2dceddb5bcd4a617c610a2", "author": {"user": {"login": "firdosebtc1", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/2445bafd34b9fdad8c2dceddb5bcd4a617c610a2", "committedDate": "2020-07-30T15:41:34Z", "message": "few other issues has been fixed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NzEyMzEy", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#pullrequestreview-458712312", "createdAt": "2020-07-30T19:57:27Z", "commit": {"oid": "2445bafd34b9fdad8c2dceddb5bcd4a617c610a2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOTo1NzoyN1rOG5xuyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOTo1NzoyN1rOG5xuyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIzNjgwOQ==", "bodyText": "I think you want a navigateTo here", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r463236809", "createdAt": "2020-07-30T19:57:27Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/auth/login-callback/login-callback.component.ts", "diffHunk": "@@ -20,6 +20,8 @@ export class LoginCallbackComponent implements OnInit {\n     this.activatedRoute.queryParams.subscribe((params) => {\n       if (params.code && params.userId) {\n         this.authService.grantAuthorization(params.code, params.userId);\n+      } else {\n+        void this.router.parseUrl('/login');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2445bafd34b9fdad8c2dceddb5bcd4a617c610a2"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0097dbe2f92949308bacb31d4d4f3e100d48b80", "author": {"user": {"login": "firdosebtc1", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/f0097dbe2f92949308bacb31d4d4f3e100d48b80", "committedDate": "2020-07-31T07:14:03Z", "message": "few other clients fixes has been done"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1a4e7c4e404c384fb7db6eaf941ed776593e348", "author": {"user": {"login": "firdosebtc1", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/b1a4e7c4e404c384fb7db6eaf941ed776593e348", "committedDate": "2020-07-31T14:26:29Z", "message": "few other fixes has been done"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e687d1ed285720f80c23e0aea6effc2bb38ba0a2", "author": {"user": {"login": "firdosebtc1", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/e687d1ed285720f80c23e0aea6effc2bb38ba0a2", "committedDate": "2020-07-31T14:32:14Z", "message": "build issue has been fixed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MjI5Mjcy", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#pullrequestreview-459229272", "createdAt": "2020-07-31T14:42:19Z", "commit": {"oid": "e687d1ed285720f80c23e0aea6effc2bb38ba0a2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e7cf1d8f671dc0d48ac3fce12b63ab69f570071", "author": {"user": {"login": "firdosebtc1", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/0e7cf1d8f671dc0d48ac3fce12b63ab69f570071", "committedDate": "2020-08-03T06:59:35Z", "message": "Merge branch 'develop' into urwebapp-mock-oauth-server"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 547, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}