{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3OTY3OTUz", "number": 540, "reviewThreads": {"totalCount": 44, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDozNjozM1rOEHmanA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMTowMzowMlrOEI7FOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDA0ODkyOnYy", "diffSide": "RIGHT", "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/controller/AuditLogEventController.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDozNjozM1rOGnDkMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNDo0Nzo1M1rOGorO3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwNjA2NQ==", "bodyText": "probably not a good idea to expose request body to the logs, just in case any PII or PHI is ever included in the audit logs.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443606065", "createdAt": "2020-06-22T14:36:33Z", "author": {"login": "zohrehj"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/controller/AuditLogEventController.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.controller;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.service.AuditLogEventService;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.validator.AuditLogEventValidator;\n+import com.google.cloud.healthcare.fdamystudies.common.JsonUtils;\n+\n+@RestController\n+@RequestMapping(\"/v1\")\n+public class AuditLogEventController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(AuditLogEventController.class.getName());\n+\n+  private static final String ERROR_DESCRIPTION = \"error_description\";\n+\n+  @Autowired private AuditLogEventService aleService;\n+\n+  @Autowired private AuditLogEventValidator validator;\n+\n+  @PostMapping(\n+      value = \"/events\",\n+      produces = {MediaType.APPLICATION_JSON_VALUE},\n+      consumes = {MediaType.APPLICATION_JSON_VALUE})\n+  public ResponseEntity<JsonNode> logEvent(\n+      @RequestBody JsonNode requestBody, HttpServletRequest request) {\n+    logger.entry(\n+        String.format(\n+            \"begin %s request with requestBody= %s\", request.getRequestURI(), requestBody));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcxOTczMg==", "bodyText": "We learnt about XLogger from Nik's comments. This special logger is useful to diagnose issues in the application without the need for a debugging session. It helps developers to analyze the issue in a non-production (DEV/QA/UAT) environment. Logger.entry() and Logger.exit() statements are logged if the log level is TRACE. We should avoid TRACE log level in production.\nWe'll be adding XLogger entry/exit/catching statements to all the services for above mentioned benefits. This is also one of the areas of improvements feedback that was shared with us last week.\nAreas Of Improvements Feedback: Google will ask that proper error logs are implemented", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443719732", "createdAt": "2020-06-22T17:34:09Z", "author": {"login": "dhanyak-btc"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/controller/AuditLogEventController.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.controller;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.service.AuditLogEventService;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.validator.AuditLogEventValidator;\n+import com.google.cloud.healthcare.fdamystudies.common.JsonUtils;\n+\n+@RestController\n+@RequestMapping(\"/v1\")\n+public class AuditLogEventController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(AuditLogEventController.class.getName());\n+\n+  private static final String ERROR_DESCRIPTION = \"error_description\";\n+\n+  @Autowired private AuditLogEventService aleService;\n+\n+  @Autowired private AuditLogEventValidator validator;\n+\n+  @PostMapping(\n+      value = \"/events\",\n+      produces = {MediaType.APPLICATION_JSON_VALUE},\n+      consumes = {MediaType.APPLICATION_JSON_VALUE})\n+  public ResponseEntity<JsonNode> logEvent(\n+      @RequestBody JsonNode requestBody, HttpServletRequest request) {\n+    logger.entry(\n+        String.format(\n+            \"begin %s request with requestBody= %s\", request.getRequestURI(), requestBody));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwNjA2NQ=="}, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc4NzMxMQ==", "bodyText": "\"Proper error logs\" also involves only logging when it provides value, so the Google team isn't asking for logging everywhere.\nBut Zohreh's point about PHI is separate from that. I don't know enough about slf4j logging, but we want to avoid a situation where PHI is logged in any way. If you can assure us that TRACE logs are never written in production then we could probably OK this.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443787311", "createdAt": "2020-06-22T19:48:09Z", "author": {"login": "nikklassen"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/controller/AuditLogEventController.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.controller;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.service.AuditLogEventService;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.validator.AuditLogEventValidator;\n+import com.google.cloud.healthcare.fdamystudies.common.JsonUtils;\n+\n+@RestController\n+@RequestMapping(\"/v1\")\n+public class AuditLogEventController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(AuditLogEventController.class.getName());\n+\n+  private static final String ERROR_DESCRIPTION = \"error_description\";\n+\n+  @Autowired private AuditLogEventService aleService;\n+\n+  @Autowired private AuditLogEventValidator validator;\n+\n+  @PostMapping(\n+      value = \"/events\",\n+      produces = {MediaType.APPLICATION_JSON_VALUE},\n+      consumes = {MediaType.APPLICATION_JSON_VALUE})\n+  public ResponseEntity<JsonNode> logEvent(\n+      @RequestBody JsonNode requestBody, HttpServletRequest request) {\n+    logger.entry(\n+        String.format(\n+            \"begin %s request with requestBody= %s\", request.getRequestURI(), requestBody));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwNjA2NQ=="}, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk2MzA3Ng==", "bodyText": "The WARN level is the level that should be active in production systems by default. Reference: Use Logging Levels Consistently\nIn application-mockit-common.properties (common-tests module), please change the log level to WARN and run the mvn clean test to verify XLogger entry and exit log statements are not logged.\nlogging.level.com.google.cloud.healthcare.fdamystudies=WARN\nPlease advise whether we need to add XLogger entry/exit/catching statements. I personally liked the use of XLogger as it helps to diagnose the issues in non-production environments but I will go with your suggestions. Kindly share samples for proper error logging so that team will follow the same suggestions for consistent logging across all services.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443963076", "createdAt": "2020-06-23T05:04:06Z", "author": {"login": "dhanyak-btc"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/controller/AuditLogEventController.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.controller;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.service.AuditLogEventService;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.validator.AuditLogEventValidator;\n+import com.google.cloud.healthcare.fdamystudies.common.JsonUtils;\n+\n+@RestController\n+@RequestMapping(\"/v1\")\n+public class AuditLogEventController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(AuditLogEventController.class.getName());\n+\n+  private static final String ERROR_DESCRIPTION = \"error_description\";\n+\n+  @Autowired private AuditLogEventService aleService;\n+\n+  @Autowired private AuditLogEventValidator validator;\n+\n+  @PostMapping(\n+      value = \"/events\",\n+      produces = {MediaType.APPLICATION_JSON_VALUE},\n+      consumes = {MediaType.APPLICATION_JSON_VALUE})\n+  public ResponseEntity<JsonNode> logEvent(\n+      @RequestBody JsonNode requestBody, HttpServletRequest request) {\n+    logger.entry(\n+        String.format(\n+            \"begin %s request with requestBody= %s\", request.getRequestURI(), requestBody));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwNjA2NQ=="}, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM4MjcyNQ==", "bodyText": "making XLogger makes sense, but please never add PHI or PII within logs. considering the repercussions of accidentally exposing this information to our logs in a health care setting, we do not want to take any risks when it comes to user information.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444382725", "createdAt": "2020-06-23T17:16:35Z", "author": {"login": "zohrehj"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/controller/AuditLogEventController.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.controller;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.service.AuditLogEventService;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.validator.AuditLogEventValidator;\n+import com.google.cloud.healthcare.fdamystudies.common.JsonUtils;\n+\n+@RestController\n+@RequestMapping(\"/v1\")\n+public class AuditLogEventController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(AuditLogEventController.class.getName());\n+\n+  private static final String ERROR_DESCRIPTION = \"error_description\";\n+\n+  @Autowired private AuditLogEventService aleService;\n+\n+  @Autowired private AuditLogEventValidator validator;\n+\n+  @PostMapping(\n+      value = \"/events\",\n+      produces = {MediaType.APPLICATION_JSON_VALUE},\n+      consumes = {MediaType.APPLICATION_JSON_VALUE})\n+  public ResponseEntity<JsonNode> logEvent(\n+      @RequestBody JsonNode requestBody, HttpServletRequest request) {\n+    logger.entry(\n+        String.format(\n+            \"begin %s request with requestBody= %s\", request.getRequestURI(), requestBody));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwNjA2NQ=="}, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk2NTIwOQ==", "bodyText": "I've added @ToString.Exclude annotation to fields that contain PII or PHI. I've verified, XLogger is not logging fields that are annotated with @ToString.Exclude. Please review AuditLogEventEntity and AuditLogEventRequest classes.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444965209", "createdAt": "2020-06-24T15:06:41Z", "author": {"login": "dhanyak-btc"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/controller/AuditLogEventController.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.controller;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.service.AuditLogEventService;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.validator.AuditLogEventValidator;\n+import com.google.cloud.healthcare.fdamystudies.common.JsonUtils;\n+\n+@RestController\n+@RequestMapping(\"/v1\")\n+public class AuditLogEventController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(AuditLogEventController.class.getName());\n+\n+  private static final String ERROR_DESCRIPTION = \"error_description\";\n+\n+  @Autowired private AuditLogEventService aleService;\n+\n+  @Autowired private AuditLogEventValidator validator;\n+\n+  @PostMapping(\n+      value = \"/events\",\n+      produces = {MediaType.APPLICATION_JSON_VALUE},\n+      consumes = {MediaType.APPLICATION_JSON_VALUE})\n+  public ResponseEntity<JsonNode> logEvent(\n+      @RequestBody JsonNode requestBody, HttpServletRequest request) {\n+    logger.entry(\n+        String.format(\n+            \"begin %s request with requestBody= %s\", request.getRequestURI(), requestBody));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwNjA2NQ=="}, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAxMjc5OA==", "bodyText": "please remove the log line entirely.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r445012798", "createdAt": "2020-06-24T16:15:44Z", "author": {"login": "zohrehj"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/controller/AuditLogEventController.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.controller;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.service.AuditLogEventService;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.validator.AuditLogEventValidator;\n+import com.google.cloud.healthcare.fdamystudies.common.JsonUtils;\n+\n+@RestController\n+@RequestMapping(\"/v1\")\n+public class AuditLogEventController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(AuditLogEventController.class.getName());\n+\n+  private static final String ERROR_DESCRIPTION = \"error_description\";\n+\n+  @Autowired private AuditLogEventService aleService;\n+\n+  @Autowired private AuditLogEventValidator validator;\n+\n+  @PostMapping(\n+      value = \"/events\",\n+      produces = {MediaType.APPLICATION_JSON_VALUE},\n+      consumes = {MediaType.APPLICATION_JSON_VALUE})\n+  public ResponseEntity<JsonNode> logEvent(\n+      @RequestBody JsonNode requestBody, HttpServletRequest request) {\n+    logger.entry(\n+        String.format(\n+            \"begin %s request with requestBody= %s\", request.getRequestURI(), requestBody));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwNjA2NQ=="}, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMwNDU0Mw==", "bodyText": "We'll remove Bean/Entity, request/response objects from logger statements. In addition, team will add @ToString.Exclude annotation to fields that contain PII/PHI just to avoid accidentally logging PHI/PII in the future. I've modified the logger statements, please review AuditLogEventController class.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r445304543", "createdAt": "2020-06-25T04:47:53Z", "author": {"login": "dhanyak-btc"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/controller/AuditLogEventController.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.controller;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.service.AuditLogEventService;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.validator.AuditLogEventValidator;\n+import com.google.cloud.healthcare.fdamystudies.common.JsonUtils;\n+\n+@RestController\n+@RequestMapping(\"/v1\")\n+public class AuditLogEventController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(AuditLogEventController.class.getName());\n+\n+  private static final String ERROR_DESCRIPTION = \"error_description\";\n+\n+  @Autowired private AuditLogEventService aleService;\n+\n+  @Autowired private AuditLogEventValidator validator;\n+\n+  @PostMapping(\n+      value = \"/events\",\n+      produces = {MediaType.APPLICATION_JSON_VALUE},\n+      consumes = {MediaType.APPLICATION_JSON_VALUE})\n+  public ResponseEntity<JsonNode> logEvent(\n+      @RequestBody JsonNode requestBody, HttpServletRequest request) {\n+    logger.entry(\n+        String.format(\n+            \"begin %s request with requestBody= %s\", request.getRequestURI(), requestBody));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwNjA2NQ=="}, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDA5NTc1OnYy", "diffSide": "RIGHT", "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/validator/AuditLogEventValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDo0NTo1MVrOGnEAXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzo0NzoxN1rOGnK7rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYxMzI3OQ==", "bodyText": "nit: extractFieldNameFromValidationError might be more descriptive.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443613279", "createdAt": "2020-06-22T14:45:51Z", "author": {"login": "zohrehj"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/validator/AuditLogEventValidator.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.validator;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getArrayNode;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectNode;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getTextValue;\n+import java.util.List;\n+import javax.annotation.PostConstruct;\n+import org.apache.commons.lang3.StringUtils;\n+import org.everit.json.schema.Schema;\n+import org.everit.json.schema.ValidationException;\n+import org.everit.json.schema.loader.SchemaLoader;\n+import org.json.JSONObject;\n+import org.json.JSONTokener;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Component;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+@Component\n+public final class AuditLogEventValidator {\n+\n+  private static final String ERROR_DESCRIPTION = \"error_description\";\n+\n+  private static final String ERROR_TYPE = \"error_type\";\n+\n+  private static final String FILED_NAME = \"fieldName\";\n+\n+  private static final String ERRORS = \"errors\";\n+\n+  private static final String STATUS = \"status\";\n+\n+  private static final String USER_ID = \"user_id\";\n+\n+  private Schema schema;\n+\n+  @PostConstruct\n+  public void loadSchema() {\n+    JSONObject jsonSchema =\n+        new JSONObject(\n+            new JSONTokener(\n+                AuditLogEventValidator.class.getResourceAsStream(\"/audit-log-event-schema.json\")));\n+    this.schema = SchemaLoader.load(jsonSchema);\n+  }\n+\n+  public JsonNode validateJson(JsonNode eventParams) {\n+    try {\n+      JSONObject jsonSubject = new JSONObject(eventParams.toString());\n+      schema.validate(jsonSubject);\n+    } catch (ValidationException e) {\n+      List<String> messages = e.getAllMessages();\n+      ArrayNode errors = getArrayNode();\n+      for (String msg : messages) {\n+        ObjectNode err = getObjectNode();\n+        err.put(FILED_NAME, extractFieldName(msg));\n+        err.put(ERROR_DESCRIPTION, msg);\n+        errors.add(err);\n+      }\n+\n+      return buildValidationResponse(eventParams, errors);\n+    }\n+\n+    return null;\n+  }\n+\n+  private JsonNode buildValidationResponse(JsonNode eventParams, ArrayNode errors) {\n+    StringBuilder errorDescription = new StringBuilder(\"Audit log event validation failed\");\n+    if (eventParams.hasNonNull(USER_ID)) {\n+      errorDescription.append(\" for user_id=\").append(getTextValue(eventParams, USER_ID));\n+    }\n+    ObjectNode result = getObjectNode();\n+    result.set(ERRORS, errors);\n+    result.put(ERROR_TYPE, HttpStatus.BAD_REQUEST.getReasonPhrase());\n+    result.put(STATUS, HttpStatus.BAD_REQUEST.value());\n+    result.put(ERROR_DESCRIPTION, errorDescription.toString());\n+    return result;\n+  }\n+\n+  private String extractFieldName(String msg) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcyNjc2NA==", "bodyText": "Renamed to extractFieldPathFromValidationError", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443726764", "createdAt": "2020-06-22T17:47:17Z", "author": {"login": "dhanyak-btc"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/validator/AuditLogEventValidator.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.validator;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getArrayNode;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectNode;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getTextValue;\n+import java.util.List;\n+import javax.annotation.PostConstruct;\n+import org.apache.commons.lang3.StringUtils;\n+import org.everit.json.schema.Schema;\n+import org.everit.json.schema.ValidationException;\n+import org.everit.json.schema.loader.SchemaLoader;\n+import org.json.JSONObject;\n+import org.json.JSONTokener;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Component;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+@Component\n+public final class AuditLogEventValidator {\n+\n+  private static final String ERROR_DESCRIPTION = \"error_description\";\n+\n+  private static final String ERROR_TYPE = \"error_type\";\n+\n+  private static final String FILED_NAME = \"fieldName\";\n+\n+  private static final String ERRORS = \"errors\";\n+\n+  private static final String STATUS = \"status\";\n+\n+  private static final String USER_ID = \"user_id\";\n+\n+  private Schema schema;\n+\n+  @PostConstruct\n+  public void loadSchema() {\n+    JSONObject jsonSchema =\n+        new JSONObject(\n+            new JSONTokener(\n+                AuditLogEventValidator.class.getResourceAsStream(\"/audit-log-event-schema.json\")));\n+    this.schema = SchemaLoader.load(jsonSchema);\n+  }\n+\n+  public JsonNode validateJson(JsonNode eventParams) {\n+    try {\n+      JSONObject jsonSubject = new JSONObject(eventParams.toString());\n+      schema.validate(jsonSubject);\n+    } catch (ValidationException e) {\n+      List<String> messages = e.getAllMessages();\n+      ArrayNode errors = getArrayNode();\n+      for (String msg : messages) {\n+        ObjectNode err = getObjectNode();\n+        err.put(FILED_NAME, extractFieldName(msg));\n+        err.put(ERROR_DESCRIPTION, msg);\n+        errors.add(err);\n+      }\n+\n+      return buildValidationResponse(eventParams, errors);\n+    }\n+\n+    return null;\n+  }\n+\n+  private JsonNode buildValidationResponse(JsonNode eventParams, ArrayNode errors) {\n+    StringBuilder errorDescription = new StringBuilder(\"Audit log event validation failed\");\n+    if (eventParams.hasNonNull(USER_ID)) {\n+      errorDescription.append(\" for user_id=\").append(getTextValue(eventParams, USER_ID));\n+    }\n+    ObjectNode result = getObjectNode();\n+    result.set(ERRORS, errors);\n+    result.put(ERROR_TYPE, HttpStatus.BAD_REQUEST.getReasonPhrase());\n+    result.put(STATUS, HttpStatus.BAD_REQUEST.value());\n+    result.put(ERROR_DESCRIPTION, errorDescription.toString());\n+    return result;\n+  }\n+\n+  private String extractFieldName(String msg) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYxMzI3OQ=="}, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDE0MjI2OnYy", "diffSide": "RIGHT", "path": "audit-log-module/audit-log-service/src/main/resources/audit-log-event-schema.json", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDo1NjowNFrOGnEd9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTowODozMFrOGoWmdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYyMDg1NA==", "bodyText": "what is alert used for? and why is it required.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443620854", "createdAt": "2020-06-22T14:56:04Z", "author": {"login": "zohrehj"}, "path": "audit-log-module/audit-log-service/src/main/resources/audit-log-event-schema.json", "diffHunk": "@@ -0,0 +1,103 @@\n+{\n+\t\"$schema\": \"http://json-schema.org/draft-04/schema#\",\n+\t\"type\": \"object\",\n+\t\"additionalProperties\": false,\n+\t\"required\": [\n+\t\t\"alert\",\n+\t\t\"user_id\",\n+\t\t\"system_id\",\n+\t\t\"event_info\",\n+\t\t\"event_name\",\n+\t\t\"correlation_id\",\n+\t\t\"event_timestamp\"\n+\t],\n+\t\"properties\": {\n+\t\t\"alert\": {\n+\t\t\t\"type\": \"boolean\"\n+\t\t},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc0MjEyMg==", "bodyText": "This stores the value of Alert flag. I'll request Shanthala to connect with you to discuss on Audit Log Event fields & requirements.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443742122", "createdAt": "2020-06-22T18:15:50Z", "author": {"login": "dhanyak-btc"}, "path": "audit-log-module/audit-log-service/src/main/resources/audit-log-event-schema.json", "diffHunk": "@@ -0,0 +1,103 @@\n+{\n+\t\"$schema\": \"http://json-schema.org/draft-04/schema#\",\n+\t\"type\": \"object\",\n+\t\"additionalProperties\": false,\n+\t\"required\": [\n+\t\t\"alert\",\n+\t\t\"user_id\",\n+\t\t\"system_id\",\n+\t\t\"event_info\",\n+\t\t\"event_name\",\n+\t\t\"correlation_id\",\n+\t\t\"event_timestamp\"\n+\t],\n+\t\"properties\": {\n+\t\t\"alert\": {\n+\t\t\t\"type\": \"boolean\"\n+\t\t},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYyMDg1NA=="}, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk2NjUxNw==", "bodyText": "This file no longer in use. Replaced json schema with validation annotations.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444966517", "createdAt": "2020-06-24T15:08:30Z", "author": {"login": "dhanyak-btc"}, "path": "audit-log-module/audit-log-service/src/main/resources/audit-log-event-schema.json", "diffHunk": "@@ -0,0 +1,103 @@\n+{\n+\t\"$schema\": \"http://json-schema.org/draft-04/schema#\",\n+\t\"type\": \"object\",\n+\t\"additionalProperties\": false,\n+\t\"required\": [\n+\t\t\"alert\",\n+\t\t\"user_id\",\n+\t\t\"system_id\",\n+\t\t\"event_info\",\n+\t\t\"event_name\",\n+\t\t\"correlation_id\",\n+\t\t\"event_timestamp\"\n+\t],\n+\t\"properties\": {\n+\t\t\"alert\": {\n+\t\t\t\"type\": \"boolean\"\n+\t\t},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYyMDg1NA=="}, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDE1MTU5OnYy", "diffSide": "RIGHT", "path": "audit-log-module/audit-log-service/src/main/resources/audit-log-event-schema.json", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDo1ODoxMFrOGnEkGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTowOToxMVrOGoWoTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYyMjQyNg==", "bodyText": "all values that can be made into enums should ideally be stored as such to preserve space.\nThat would not change the json schema much per say, but if we make that change the validation step should ideally verify that the value is within the accepted inputs.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443622426", "createdAt": "2020-06-22T14:58:10Z", "author": {"login": "zohrehj"}, "path": "audit-log-module/audit-log-service/src/main/resources/audit-log-event-schema.json", "diffHunk": "@@ -0,0 +1,103 @@\n+{\n+\t\"$schema\": \"http://json-schema.org/draft-04/schema#\",\n+\t\"type\": \"object\",\n+\t\"additionalProperties\": false,\n+\t\"required\": [\n+\t\t\"alert\",\n+\t\t\"user_id\",\n+\t\t\"system_id\",\n+\t\t\"event_info\",\n+\t\t\"event_name\",\n+\t\t\"correlation_id\",\n+\t\t\"event_timestamp\"\n+\t],\n+\t\"properties\": {\n+\t\t\"alert\": {\n+\t\t\t\"type\": \"boolean\"\n+\t\t},\n+\t\t\"app_id\": {\n+\t\t\t\"type\": \"string\"\n+\t\t},\n+\t\t\"org_id\": {\n+\t\t\t\"type\": \"string\"\n+\t\t},\n+\t\t\"user_id\": {\n+\t\t\t\"type\": \"string\"\n+\t\t},\n+\t\t\"system_id\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"minLength\":3\n+\t\t},\n+\t\t\"event_name\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"minLength\":3\n+\t\t},\n+\t\t\"correlation_id\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"minLength\":10\n+\t\t},\n+\t\t\"event_timestamp\": {\n+\t\t\t\"type\": \"integer\"\n+\t\t},\n+\t\t\"event_info\": {\n+\t\t\t\"type\": \"object\",\n+\t\t\t\"additionalProperties\": false,\n+\t\t\t\"required\": [\n+\t\t\t\t\"system_ip\",\n+\t\t\t\t\"description\",\n+\t\t\t\t\"event_detail\",\n+\t\t\t\t\"application_version\",\n+\t\t\t\t\"application_component_name\"\n+\t\t\t],\n+\t\t\t\"properties\": {\n+\t\t\t\t\"email\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"client_id\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"system_ip\": {\n+\t\t\t\t\t\"type\": \"string\",\n+\t\t\t\t\t\"minLength\":7\n+\t\t\t\t},\n+\t\t\t\t\"description\": {\n+\t\t\t\t\t\"type\": \"string\",\n+\t\t\t\t\t\"minLength\":1\n+\t\t\t\t},\n+\t\t\t\t\"device_type\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"request_uri\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"access_level\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc0NDI1MA==", "bodyText": "JSON Schema allows to validate Json request payload. We are using enum for audit log events in other services.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443744250", "createdAt": "2020-06-22T18:19:59Z", "author": {"login": "dhanyak-btc"}, "path": "audit-log-module/audit-log-service/src/main/resources/audit-log-event-schema.json", "diffHunk": "@@ -0,0 +1,103 @@\n+{\n+\t\"$schema\": \"http://json-schema.org/draft-04/schema#\",\n+\t\"type\": \"object\",\n+\t\"additionalProperties\": false,\n+\t\"required\": [\n+\t\t\"alert\",\n+\t\t\"user_id\",\n+\t\t\"system_id\",\n+\t\t\"event_info\",\n+\t\t\"event_name\",\n+\t\t\"correlation_id\",\n+\t\t\"event_timestamp\"\n+\t],\n+\t\"properties\": {\n+\t\t\"alert\": {\n+\t\t\t\"type\": \"boolean\"\n+\t\t},\n+\t\t\"app_id\": {\n+\t\t\t\"type\": \"string\"\n+\t\t},\n+\t\t\"org_id\": {\n+\t\t\t\"type\": \"string\"\n+\t\t},\n+\t\t\"user_id\": {\n+\t\t\t\"type\": \"string\"\n+\t\t},\n+\t\t\"system_id\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"minLength\":3\n+\t\t},\n+\t\t\"event_name\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"minLength\":3\n+\t\t},\n+\t\t\"correlation_id\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"minLength\":10\n+\t\t},\n+\t\t\"event_timestamp\": {\n+\t\t\t\"type\": \"integer\"\n+\t\t},\n+\t\t\"event_info\": {\n+\t\t\t\"type\": \"object\",\n+\t\t\t\"additionalProperties\": false,\n+\t\t\t\"required\": [\n+\t\t\t\t\"system_ip\",\n+\t\t\t\t\"description\",\n+\t\t\t\t\"event_detail\",\n+\t\t\t\t\"application_version\",\n+\t\t\t\t\"application_component_name\"\n+\t\t\t],\n+\t\t\t\"properties\": {\n+\t\t\t\t\"email\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"client_id\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"system_ip\": {\n+\t\t\t\t\t\"type\": \"string\",\n+\t\t\t\t\t\"minLength\":7\n+\t\t\t\t},\n+\t\t\t\t\"description\": {\n+\t\t\t\t\t\"type\": \"string\",\n+\t\t\t\t\t\"minLength\":1\n+\t\t\t\t},\n+\t\t\t\t\"device_type\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"request_uri\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"access_level\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYyMjQyNg=="}, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM4MzM1NA==", "bodyText": "can you please point me to where that is used and how that would look like?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444383354", "createdAt": "2020-06-23T17:17:43Z", "author": {"login": "zohrehj"}, "path": "audit-log-module/audit-log-service/src/main/resources/audit-log-event-schema.json", "diffHunk": "@@ -0,0 +1,103 @@\n+{\n+\t\"$schema\": \"http://json-schema.org/draft-04/schema#\",\n+\t\"type\": \"object\",\n+\t\"additionalProperties\": false,\n+\t\"required\": [\n+\t\t\"alert\",\n+\t\t\"user_id\",\n+\t\t\"system_id\",\n+\t\t\"event_info\",\n+\t\t\"event_name\",\n+\t\t\"correlation_id\",\n+\t\t\"event_timestamp\"\n+\t],\n+\t\"properties\": {\n+\t\t\"alert\": {\n+\t\t\t\"type\": \"boolean\"\n+\t\t},\n+\t\t\"app_id\": {\n+\t\t\t\"type\": \"string\"\n+\t\t},\n+\t\t\"org_id\": {\n+\t\t\t\"type\": \"string\"\n+\t\t},\n+\t\t\"user_id\": {\n+\t\t\t\"type\": \"string\"\n+\t\t},\n+\t\t\"system_id\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"minLength\":3\n+\t\t},\n+\t\t\"event_name\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"minLength\":3\n+\t\t},\n+\t\t\"correlation_id\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"minLength\":10\n+\t\t},\n+\t\t\"event_timestamp\": {\n+\t\t\t\"type\": \"integer\"\n+\t\t},\n+\t\t\"event_info\": {\n+\t\t\t\"type\": \"object\",\n+\t\t\t\"additionalProperties\": false,\n+\t\t\t\"required\": [\n+\t\t\t\t\"system_ip\",\n+\t\t\t\t\"description\",\n+\t\t\t\t\"event_detail\",\n+\t\t\t\t\"application_version\",\n+\t\t\t\t\"application_component_name\"\n+\t\t\t],\n+\t\t\t\"properties\": {\n+\t\t\t\t\"email\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"client_id\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"system_ip\": {\n+\t\t\t\t\t\"type\": \"string\",\n+\t\t\t\t\t\"minLength\":7\n+\t\t\t\t},\n+\t\t\t\t\"description\": {\n+\t\t\t\t\t\"type\": \"string\",\n+\t\t\t\t\t\"minLength\":1\n+\t\t\t\t},\n+\t\t\t\t\"device_type\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"request_uri\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"access_level\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYyMjQyNg=="}, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk2Njk4OQ==", "bodyText": "I've deleted this file. Replaced json schema with validation annotations.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444966989", "createdAt": "2020-06-24T15:09:11Z", "author": {"login": "dhanyak-btc"}, "path": "audit-log-module/audit-log-service/src/main/resources/audit-log-event-schema.json", "diffHunk": "@@ -0,0 +1,103 @@\n+{\n+\t\"$schema\": \"http://json-schema.org/draft-04/schema#\",\n+\t\"type\": \"object\",\n+\t\"additionalProperties\": false,\n+\t\"required\": [\n+\t\t\"alert\",\n+\t\t\"user_id\",\n+\t\t\"system_id\",\n+\t\t\"event_info\",\n+\t\t\"event_name\",\n+\t\t\"correlation_id\",\n+\t\t\"event_timestamp\"\n+\t],\n+\t\"properties\": {\n+\t\t\"alert\": {\n+\t\t\t\"type\": \"boolean\"\n+\t\t},\n+\t\t\"app_id\": {\n+\t\t\t\"type\": \"string\"\n+\t\t},\n+\t\t\"org_id\": {\n+\t\t\t\"type\": \"string\"\n+\t\t},\n+\t\t\"user_id\": {\n+\t\t\t\"type\": \"string\"\n+\t\t},\n+\t\t\"system_id\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"minLength\":3\n+\t\t},\n+\t\t\"event_name\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"minLength\":3\n+\t\t},\n+\t\t\"correlation_id\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"minLength\":10\n+\t\t},\n+\t\t\"event_timestamp\": {\n+\t\t\t\"type\": \"integer\"\n+\t\t},\n+\t\t\"event_info\": {\n+\t\t\t\"type\": \"object\",\n+\t\t\t\"additionalProperties\": false,\n+\t\t\t\"required\": [\n+\t\t\t\t\"system_ip\",\n+\t\t\t\t\"description\",\n+\t\t\t\t\"event_detail\",\n+\t\t\t\t\"application_version\",\n+\t\t\t\t\"application_component_name\"\n+\t\t\t],\n+\t\t\t\"properties\": {\n+\t\t\t\t\"email\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"client_id\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"system_ip\": {\n+\t\t\t\t\t\"type\": \"string\",\n+\t\t\t\t\t\"minLength\":7\n+\t\t\t\t},\n+\t\t\t\t\"description\": {\n+\t\t\t\t\t\"type\": \"string\",\n+\t\t\t\t\t\"minLength\":1\n+\t\t\t\t},\n+\t\t\t\t\"device_type\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"request_uri\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"access_level\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYyMjQyNg=="}, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDE1NTM0OnYy", "diffSide": "RIGHT", "path": "audit-log-module/audit-log-service/src/main/resources/audit-log-event-schema.json", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDo1ODo1OVrOGnEmew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTowOTozMFrOGoWplg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYyMzAzNQ==", "bodyText": "if we have the even name, and its source and destination, then I do not see why we need to log the request URL as well.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443623035", "createdAt": "2020-06-22T14:58:59Z", "author": {"login": "zohrehj"}, "path": "audit-log-module/audit-log-service/src/main/resources/audit-log-event-schema.json", "diffHunk": "@@ -0,0 +1,103 @@\n+{\n+\t\"$schema\": \"http://json-schema.org/draft-04/schema#\",\n+\t\"type\": \"object\",\n+\t\"additionalProperties\": false,\n+\t\"required\": [\n+\t\t\"alert\",\n+\t\t\"user_id\",\n+\t\t\"system_id\",\n+\t\t\"event_info\",\n+\t\t\"event_name\",\n+\t\t\"correlation_id\",\n+\t\t\"event_timestamp\"\n+\t],\n+\t\"properties\": {\n+\t\t\"alert\": {\n+\t\t\t\"type\": \"boolean\"\n+\t\t},\n+\t\t\"app_id\": {\n+\t\t\t\"type\": \"string\"\n+\t\t},\n+\t\t\"org_id\": {\n+\t\t\t\"type\": \"string\"\n+\t\t},\n+\t\t\"user_id\": {\n+\t\t\t\"type\": \"string\"\n+\t\t},\n+\t\t\"system_id\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"minLength\":3\n+\t\t},\n+\t\t\"event_name\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"minLength\":3\n+\t\t},\n+\t\t\"correlation_id\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"minLength\":10\n+\t\t},\n+\t\t\"event_timestamp\": {\n+\t\t\t\"type\": \"integer\"\n+\t\t},\n+\t\t\"event_info\": {\n+\t\t\t\"type\": \"object\",\n+\t\t\t\"additionalProperties\": false,\n+\t\t\t\"required\": [\n+\t\t\t\t\"system_ip\",\n+\t\t\t\t\"description\",\n+\t\t\t\t\"event_detail\",\n+\t\t\t\t\"application_version\",\n+\t\t\t\t\"application_component_name\"\n+\t\t\t],\n+\t\t\t\"properties\": {\n+\t\t\t\t\"email\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"client_id\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"system_ip\": {\n+\t\t\t\t\t\"type\": \"string\",\n+\t\t\t\t\t\"minLength\":7\n+\t\t\t\t},\n+\t\t\t\t\"description\": {\n+\t\t\t\t\t\"type\": \"string\",\n+\t\t\t\t\t\"minLength\":1\n+\t\t\t\t},\n+\t\t\t\t\"device_type\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"request_uri\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc0NjMwMQ==", "bodyText": "This is implemented as per audit log requirements. I'll request Shanthala to connect with you to discuss and close the Audit Log Events (ALE) requirements. I'll address this comment in next PR or kindly open an issue for this comment so that this PR can be closed.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443746301", "createdAt": "2020-06-22T18:23:50Z", "author": {"login": "dhanyak-btc"}, "path": "audit-log-module/audit-log-service/src/main/resources/audit-log-event-schema.json", "diffHunk": "@@ -0,0 +1,103 @@\n+{\n+\t\"$schema\": \"http://json-schema.org/draft-04/schema#\",\n+\t\"type\": \"object\",\n+\t\"additionalProperties\": false,\n+\t\"required\": [\n+\t\t\"alert\",\n+\t\t\"user_id\",\n+\t\t\"system_id\",\n+\t\t\"event_info\",\n+\t\t\"event_name\",\n+\t\t\"correlation_id\",\n+\t\t\"event_timestamp\"\n+\t],\n+\t\"properties\": {\n+\t\t\"alert\": {\n+\t\t\t\"type\": \"boolean\"\n+\t\t},\n+\t\t\"app_id\": {\n+\t\t\t\"type\": \"string\"\n+\t\t},\n+\t\t\"org_id\": {\n+\t\t\t\"type\": \"string\"\n+\t\t},\n+\t\t\"user_id\": {\n+\t\t\t\"type\": \"string\"\n+\t\t},\n+\t\t\"system_id\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"minLength\":3\n+\t\t},\n+\t\t\"event_name\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"minLength\":3\n+\t\t},\n+\t\t\"correlation_id\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"minLength\":10\n+\t\t},\n+\t\t\"event_timestamp\": {\n+\t\t\t\"type\": \"integer\"\n+\t\t},\n+\t\t\"event_info\": {\n+\t\t\t\"type\": \"object\",\n+\t\t\t\"additionalProperties\": false,\n+\t\t\t\"required\": [\n+\t\t\t\t\"system_ip\",\n+\t\t\t\t\"description\",\n+\t\t\t\t\"event_detail\",\n+\t\t\t\t\"application_version\",\n+\t\t\t\t\"application_component_name\"\n+\t\t\t],\n+\t\t\t\"properties\": {\n+\t\t\t\t\"email\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"client_id\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"system_ip\": {\n+\t\t\t\t\t\"type\": \"string\",\n+\t\t\t\t\t\"minLength\":7\n+\t\t\t\t},\n+\t\t\t\t\"description\": {\n+\t\t\t\t\t\"type\": \"string\",\n+\t\t\t\t\t\"minLength\":1\n+\t\t\t\t},\n+\t\t\t\t\"device_type\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"request_uri\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYyMzAzNQ=="}, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk2NzMxOA==", "bodyText": "I've deleted this file. Replaced json schema with validation annotations.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444967318", "createdAt": "2020-06-24T15:09:30Z", "author": {"login": "dhanyak-btc"}, "path": "audit-log-module/audit-log-service/src/main/resources/audit-log-event-schema.json", "diffHunk": "@@ -0,0 +1,103 @@\n+{\n+\t\"$schema\": \"http://json-schema.org/draft-04/schema#\",\n+\t\"type\": \"object\",\n+\t\"additionalProperties\": false,\n+\t\"required\": [\n+\t\t\"alert\",\n+\t\t\"user_id\",\n+\t\t\"system_id\",\n+\t\t\"event_info\",\n+\t\t\"event_name\",\n+\t\t\"correlation_id\",\n+\t\t\"event_timestamp\"\n+\t],\n+\t\"properties\": {\n+\t\t\"alert\": {\n+\t\t\t\"type\": \"boolean\"\n+\t\t},\n+\t\t\"app_id\": {\n+\t\t\t\"type\": \"string\"\n+\t\t},\n+\t\t\"org_id\": {\n+\t\t\t\"type\": \"string\"\n+\t\t},\n+\t\t\"user_id\": {\n+\t\t\t\"type\": \"string\"\n+\t\t},\n+\t\t\"system_id\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"minLength\":3\n+\t\t},\n+\t\t\"event_name\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"minLength\":3\n+\t\t},\n+\t\t\"correlation_id\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"minLength\":10\n+\t\t},\n+\t\t\"event_timestamp\": {\n+\t\t\t\"type\": \"integer\"\n+\t\t},\n+\t\t\"event_info\": {\n+\t\t\t\"type\": \"object\",\n+\t\t\t\"additionalProperties\": false,\n+\t\t\t\"required\": [\n+\t\t\t\t\"system_ip\",\n+\t\t\t\t\"description\",\n+\t\t\t\t\"event_detail\",\n+\t\t\t\t\"application_version\",\n+\t\t\t\t\"application_component_name\"\n+\t\t\t],\n+\t\t\t\"properties\": {\n+\t\t\t\t\"email\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"client_id\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"system_ip\": {\n+\t\t\t\t\t\"type\": \"string\",\n+\t\t\t\t\t\"minLength\":7\n+\t\t\t\t},\n+\t\t\t\t\"description\": {\n+\t\t\t\t\t\"type\": \"string\",\n+\t\t\t\t\t\"minLength\":1\n+\t\t\t\t},\n+\t\t\t\t\"device_type\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"request_uri\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYyMzAzNQ=="}, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDE1NzgxOnYy", "diffSide": "RIGHT", "path": "audit-log-module/audit-log-service/src/main/resources/audit-log-event-schema.json", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDo1OTozMFrOGnEoCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTowOTo0MlrOGoWqHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYyMzQzMg==", "bodyText": "also can be an enum", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443623432", "createdAt": "2020-06-22T14:59:30Z", "author": {"login": "zohrehj"}, "path": "audit-log-module/audit-log-service/src/main/resources/audit-log-event-schema.json", "diffHunk": "@@ -0,0 +1,103 @@\n+{\n+\t\"$schema\": \"http://json-schema.org/draft-04/schema#\",\n+\t\"type\": \"object\",\n+\t\"additionalProperties\": false,\n+\t\"required\": [\n+\t\t\"alert\",\n+\t\t\"user_id\",\n+\t\t\"system_id\",\n+\t\t\"event_info\",\n+\t\t\"event_name\",\n+\t\t\"correlation_id\",\n+\t\t\"event_timestamp\"\n+\t],\n+\t\"properties\": {\n+\t\t\"alert\": {\n+\t\t\t\"type\": \"boolean\"\n+\t\t},\n+\t\t\"app_id\": {\n+\t\t\t\"type\": \"string\"\n+\t\t},\n+\t\t\"org_id\": {\n+\t\t\t\"type\": \"string\"\n+\t\t},\n+\t\t\"user_id\": {\n+\t\t\t\"type\": \"string\"\n+\t\t},\n+\t\t\"system_id\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"minLength\":3\n+\t\t},\n+\t\t\"event_name\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"minLength\":3\n+\t\t},\n+\t\t\"correlation_id\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"minLength\":10\n+\t\t},\n+\t\t\"event_timestamp\": {\n+\t\t\t\"type\": \"integer\"\n+\t\t},\n+\t\t\"event_info\": {\n+\t\t\t\"type\": \"object\",\n+\t\t\t\"additionalProperties\": false,\n+\t\t\t\"required\": [\n+\t\t\t\t\"system_ip\",\n+\t\t\t\t\"description\",\n+\t\t\t\t\"event_detail\",\n+\t\t\t\t\"application_version\",\n+\t\t\t\t\"application_component_name\"\n+\t\t\t],\n+\t\t\t\"properties\": {\n+\t\t\t\t\"email\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"client_id\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"system_ip\": {\n+\t\t\t\t\t\"type\": \"string\",\n+\t\t\t\t\t\"minLength\":7\n+\t\t\t\t},\n+\t\t\t\t\"description\": {\n+\t\t\t\t\t\"type\": \"string\",\n+\t\t\t\t\t\"minLength\":1\n+\t\t\t\t},\n+\t\t\t\t\"device_type\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"request_uri\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"access_level\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"event_detail\": {\n+\t\t\t\t\t\"type\": \"string\",\n+\t\t\t\t\t\"minLength\":1\n+\t\t\t\t},\n+\t\t\t\t\"device_platform\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"resource_server\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"client_app_version\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"application_version\": {\n+\t\t\t\t\t\"type\": \"string\",\n+\t\t\t\t\t\"minLength\":1\n+\t\t\t\t},\n+\t\t\t\t\"client_access_level\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"application_component_name\": {\n+\t\t\t\t\t\"type\": \"string\",\n+\t\t\t\t\t\"minLength\":1\n+\t\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc0Njg2OQ==", "bodyText": "JSON Schema allows to validate Json request payload. We are using enum for audit log events in other services.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443746869", "createdAt": "2020-06-22T18:24:56Z", "author": {"login": "dhanyak-btc"}, "path": "audit-log-module/audit-log-service/src/main/resources/audit-log-event-schema.json", "diffHunk": "@@ -0,0 +1,103 @@\n+{\n+\t\"$schema\": \"http://json-schema.org/draft-04/schema#\",\n+\t\"type\": \"object\",\n+\t\"additionalProperties\": false,\n+\t\"required\": [\n+\t\t\"alert\",\n+\t\t\"user_id\",\n+\t\t\"system_id\",\n+\t\t\"event_info\",\n+\t\t\"event_name\",\n+\t\t\"correlation_id\",\n+\t\t\"event_timestamp\"\n+\t],\n+\t\"properties\": {\n+\t\t\"alert\": {\n+\t\t\t\"type\": \"boolean\"\n+\t\t},\n+\t\t\"app_id\": {\n+\t\t\t\"type\": \"string\"\n+\t\t},\n+\t\t\"org_id\": {\n+\t\t\t\"type\": \"string\"\n+\t\t},\n+\t\t\"user_id\": {\n+\t\t\t\"type\": \"string\"\n+\t\t},\n+\t\t\"system_id\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"minLength\":3\n+\t\t},\n+\t\t\"event_name\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"minLength\":3\n+\t\t},\n+\t\t\"correlation_id\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"minLength\":10\n+\t\t},\n+\t\t\"event_timestamp\": {\n+\t\t\t\"type\": \"integer\"\n+\t\t},\n+\t\t\"event_info\": {\n+\t\t\t\"type\": \"object\",\n+\t\t\t\"additionalProperties\": false,\n+\t\t\t\"required\": [\n+\t\t\t\t\"system_ip\",\n+\t\t\t\t\"description\",\n+\t\t\t\t\"event_detail\",\n+\t\t\t\t\"application_version\",\n+\t\t\t\t\"application_component_name\"\n+\t\t\t],\n+\t\t\t\"properties\": {\n+\t\t\t\t\"email\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"client_id\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"system_ip\": {\n+\t\t\t\t\t\"type\": \"string\",\n+\t\t\t\t\t\"minLength\":7\n+\t\t\t\t},\n+\t\t\t\t\"description\": {\n+\t\t\t\t\t\"type\": \"string\",\n+\t\t\t\t\t\"minLength\":1\n+\t\t\t\t},\n+\t\t\t\t\"device_type\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"request_uri\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"access_level\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"event_detail\": {\n+\t\t\t\t\t\"type\": \"string\",\n+\t\t\t\t\t\"minLength\":1\n+\t\t\t\t},\n+\t\t\t\t\"device_platform\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"resource_server\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"client_app_version\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"application_version\": {\n+\t\t\t\t\t\"type\": \"string\",\n+\t\t\t\t\t\"minLength\":1\n+\t\t\t\t},\n+\t\t\t\t\"client_access_level\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"application_component_name\": {\n+\t\t\t\t\t\"type\": \"string\",\n+\t\t\t\t\t\"minLength\":1\n+\t\t\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYyMzQzMg=="}, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk2NzQ1Mw==", "bodyText": "I've deleted this file. Replaced json schema with validation annotations.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444967453", "createdAt": "2020-06-24T15:09:42Z", "author": {"login": "dhanyak-btc"}, "path": "audit-log-module/audit-log-service/src/main/resources/audit-log-event-schema.json", "diffHunk": "@@ -0,0 +1,103 @@\n+{\n+\t\"$schema\": \"http://json-schema.org/draft-04/schema#\",\n+\t\"type\": \"object\",\n+\t\"additionalProperties\": false,\n+\t\"required\": [\n+\t\t\"alert\",\n+\t\t\"user_id\",\n+\t\t\"system_id\",\n+\t\t\"event_info\",\n+\t\t\"event_name\",\n+\t\t\"correlation_id\",\n+\t\t\"event_timestamp\"\n+\t],\n+\t\"properties\": {\n+\t\t\"alert\": {\n+\t\t\t\"type\": \"boolean\"\n+\t\t},\n+\t\t\"app_id\": {\n+\t\t\t\"type\": \"string\"\n+\t\t},\n+\t\t\"org_id\": {\n+\t\t\t\"type\": \"string\"\n+\t\t},\n+\t\t\"user_id\": {\n+\t\t\t\"type\": \"string\"\n+\t\t},\n+\t\t\"system_id\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"minLength\":3\n+\t\t},\n+\t\t\"event_name\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"minLength\":3\n+\t\t},\n+\t\t\"correlation_id\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"minLength\":10\n+\t\t},\n+\t\t\"event_timestamp\": {\n+\t\t\t\"type\": \"integer\"\n+\t\t},\n+\t\t\"event_info\": {\n+\t\t\t\"type\": \"object\",\n+\t\t\t\"additionalProperties\": false,\n+\t\t\t\"required\": [\n+\t\t\t\t\"system_ip\",\n+\t\t\t\t\"description\",\n+\t\t\t\t\"event_detail\",\n+\t\t\t\t\"application_version\",\n+\t\t\t\t\"application_component_name\"\n+\t\t\t],\n+\t\t\t\"properties\": {\n+\t\t\t\t\"email\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"client_id\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"system_ip\": {\n+\t\t\t\t\t\"type\": \"string\",\n+\t\t\t\t\t\"minLength\":7\n+\t\t\t\t},\n+\t\t\t\t\"description\": {\n+\t\t\t\t\t\"type\": \"string\",\n+\t\t\t\t\t\"minLength\":1\n+\t\t\t\t},\n+\t\t\t\t\"device_type\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"request_uri\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"access_level\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"event_detail\": {\n+\t\t\t\t\t\"type\": \"string\",\n+\t\t\t\t\t\"minLength\":1\n+\t\t\t\t},\n+\t\t\t\t\"device_platform\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"resource_server\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"client_app_version\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"application_version\": {\n+\t\t\t\t\t\"type\": \"string\",\n+\t\t\t\t\t\"minLength\":1\n+\t\t\t\t},\n+\t\t\t\t\"client_access_level\": {\n+\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t},\n+\t\t\t\t\"application_component_name\": {\n+\t\t\t\t\t\"type\": \"string\",\n+\t\t\t\t\t\"minLength\":1\n+\t\t\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYyMzQzMg=="}, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDM0MjQzOnYy", "diffSide": "RIGHT", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/RestExceptionHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNTo0Mjo1N1rOGnGdZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNzoyOToxOVrOGnza1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1MzQ3OQ==", "bodyText": "I have noticed that you are using different logger libraries; why is that? wouldn't it be better to use the same logger across the code", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443653479", "createdAt": "2020-06-22T15:42:57Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/RestExceptionHandler.java", "diffHunk": "@@ -1,19 +1,41 @@\n package com.google.cloud.healthcare.fdamystudies.common;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzczMDY2OA==", "bodyText": "Thanks Zohreh, I'll add this point to PR notes and I'll ask developers to use XLoggerFactory as it brings consistency across all services. Replaced with XLogger and XLoggerFactory.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443730668", "createdAt": "2020-06-22T17:54:24Z", "author": {"login": "dhanyak-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/RestExceptionHandler.java", "diffHunk": "@@ -1,19 +1,41 @@\n package com.google.cloud.healthcare.fdamystudies.common;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1MzQ3OQ=="}, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM5MDEwMw==", "bodyText": "XLogger sounds like a good idea.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444390103", "createdAt": "2020-06-23T17:29:19Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/RestExceptionHandler.java", "diffHunk": "@@ -1,19 +1,41 @@\n package com.google.cloud.healthcare.fdamystudies.common;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1MzQ3OQ=="}, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDM4Njc4OnYy", "diffSide": "RIGHT", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/HealthController.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNTo1MzozMFrOGnG5Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNTozMjowMVrOGnZ3kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2MDU2Mw==", "bodyText": "please remove all logs from the health method.\nThe current kubernetes deployment is using health method as readinessprobe/livenessprobe and calls the method constantly.\nHaving any logs in the method will therefore make server logs almost unusable.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443660563", "createdAt": "2020-06-22T15:53:30Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/HealthController.java", "diffHunk": "@@ -6,31 +6,35 @@\n  * https://opensource.org/licenses/MIT.\n  */\n \n-package com.google.cloud.healthcare.fdamystudies.auditlog.controller;\n+package com.google.cloud.healthcare.fdamystudies.controller;\n \n import javax.servlet.http.HttpServletRequest;\n import org.slf4j.ext.XLogger;\n import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RestController;\n import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.service.OAuthService;\n \n @RestController\n @RequestMapping(\"/v1\")\n-public class HealthController extends BaseController {\n+public class HealthController {\n \n   private XLogger logger = XLoggerFactory.getXLogger(HealthController.class.getName());\n \n+  @Autowired private OAuthService oauthService;\n+\n   @GetMapping(\n       value = \"/health\",\n       produces = {MediaType.APPLICATION_JSON_VALUE})\n   public ResponseEntity<JsonNode> health(HttpServletRequest request) {\n     logger.entry(String.format(\"begin %s request with no args\", request.getRequestURI()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc0NzcxNg==", "bodyText": "Logger.entry() and Logger.exit() statements are logged if the log level is TRACE. We should avoid TRACE log level in production.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443747716", "createdAt": "2020-06-22T18:26:41Z", "author": {"login": "dhanyak-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/HealthController.java", "diffHunk": "@@ -6,31 +6,35 @@\n  * https://opensource.org/licenses/MIT.\n  */\n \n-package com.google.cloud.healthcare.fdamystudies.auditlog.controller;\n+package com.google.cloud.healthcare.fdamystudies.controller;\n \n import javax.servlet.http.HttpServletRequest;\n import org.slf4j.ext.XLogger;\n import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RestController;\n import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.service.OAuthService;\n \n @RestController\n @RequestMapping(\"/v1\")\n-public class HealthController extends BaseController {\n+public class HealthController {\n \n   private XLogger logger = XLoggerFactory.getXLogger(HealthController.class.getName());\n \n+  @Autowired private OAuthService oauthService;\n+\n   @GetMapping(\n       value = \"/health\",\n       produces = {MediaType.APPLICATION_JSON_VALUE})\n   public ResponseEntity<JsonNode> health(HttpServletRequest request) {\n     logger.entry(String.format(\"begin %s request with no args\", request.getRequestURI()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2MDU2Mw=="}, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2NDM5NA==", "bodyText": "This will still provide a lot of noise in the TRACE logs so I also think it should be removed, even though it won't be logging in production.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443764394", "createdAt": "2020-06-22T19:00:06Z", "author": {"login": "nikklassen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/HealthController.java", "diffHunk": "@@ -6,31 +6,35 @@\n  * https://opensource.org/licenses/MIT.\n  */\n \n-package com.google.cloud.healthcare.fdamystudies.auditlog.controller;\n+package com.google.cloud.healthcare.fdamystudies.controller;\n \n import javax.servlet.http.HttpServletRequest;\n import org.slf4j.ext.XLogger;\n import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RestController;\n import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.service.OAuthService;\n \n @RestController\n @RequestMapping(\"/v1\")\n-public class HealthController extends BaseController {\n+public class HealthController {\n \n   private XLogger logger = XLoggerFactory.getXLogger(HealthController.class.getName());\n \n+  @Autowired private OAuthService oauthService;\n+\n   @GetMapping(\n       value = \"/health\",\n       produces = {MediaType.APPLICATION_JSON_VALUE})\n   public ResponseEntity<JsonNode> health(HttpServletRequest request) {\n     logger.entry(String.format(\"begin %s request with no args\", request.getRequestURI()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2MDU2Mw=="}, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk3MTQ3Mg==", "bodyText": "Removed logger statements from /healthCheck endpoint", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443971472", "createdAt": "2020-06-23T05:32:01Z", "author": {"login": "dhanyak-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/HealthController.java", "diffHunk": "@@ -6,31 +6,35 @@\n  * https://opensource.org/licenses/MIT.\n  */\n \n-package com.google.cloud.healthcare.fdamystudies.auditlog.controller;\n+package com.google.cloud.healthcare.fdamystudies.controller;\n \n import javax.servlet.http.HttpServletRequest;\n import org.slf4j.ext.XLogger;\n import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RestController;\n import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.service.OAuthService;\n \n @RestController\n @RequestMapping(\"/v1\")\n-public class HealthController extends BaseController {\n+public class HealthController {\n \n   private XLogger logger = XLoggerFactory.getXLogger(HealthController.class.getName());\n \n+  @Autowired private OAuthService oauthService;\n+\n   @GetMapping(\n       value = \"/health\",\n       produces = {MediaType.APPLICATION_JSON_VALUE})\n   public ResponseEntity<JsonNode> health(HttpServletRequest request) {\n     logger.entry(String.format(\"begin %s request with no args\", request.getRequestURI()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2MDU2Mw=="}, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDM5MTA3OnYy", "diffSide": "RIGHT", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/FilterChainExceptionHandler.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNTo1NDoyOFrOGnG7uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNToxMDo0NFrOGoWtAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2MTI0Mw==", "bodyText": "please remove this logger entry. It gets called too frequently and causes a lot of spam in the logs.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443661243", "createdAt": "2020-06-22T15:54:28Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/FilterChainExceptionHandler.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.google.cloud.healthcare.fdamystudies.filter;\n+\n+import java.io.IOException;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.springframework.web.client.HttpServerErrorException;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.JsonUtils;\n+\n+@Component\n+@Order(1)\n+public class FilterChainExceptionHandler extends OncePerRequestFilter {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(FilterChainExceptionHandler.class.getName());\n+\n+  @Override\n+  protected void doFilterInternal(\n+      HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n+      throws ServletException, IOException {\n+    logger.entry(String.format(\"begin doFilterInternal() for %s\", request.getRequestURI()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc0ODM0OA==", "bodyText": "We learnt about XLogger from Nik's comments. This special logger is useful to diagnose issues in the application without the need for a debugging session. It help developers to analyze the issue in non-production (DEV/QA/UAT) environment. Logger.entry() and Logger.exit() statements are logged if the log level is TRACE. We should avoid TRACE log level in production.\nWe'll be adding XLogger entry/exit/catching statements to all the services for above mentioned benefits. This is also one of the areas of improvements feedback that was shared with us last week.\nAreas Of Improvements Feedback: Google will ask that proper error logs are implemented", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443748348", "createdAt": "2020-06-22T18:27:58Z", "author": {"login": "dhanyak-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/FilterChainExceptionHandler.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.google.cloud.healthcare.fdamystudies.filter;\n+\n+import java.io.IOException;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.springframework.web.client.HttpServerErrorException;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.JsonUtils;\n+\n+@Component\n+@Order(1)\n+public class FilterChainExceptionHandler extends OncePerRequestFilter {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(FilterChainExceptionHandler.class.getName());\n+\n+  @Override\n+  protected void doFilterInternal(\n+      HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n+      throws ServletException, IOException {\n+    logger.entry(String.format(\"begin doFilterInternal() for %s\", request.getRequestURI()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2MTI0Mw=="}, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc4NzkwMQ==", "bodyText": "Again, proper error logging means not including logs that don't add any value, even at TRACE.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443787901", "createdAt": "2020-06-22T19:49:27Z", "author": {"login": "nikklassen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/FilterChainExceptionHandler.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.google.cloud.healthcare.fdamystudies.filter;\n+\n+import java.io.IOException;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.springframework.web.client.HttpServerErrorException;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.JsonUtils;\n+\n+@Component\n+@Order(1)\n+public class FilterChainExceptionHandler extends OncePerRequestFilter {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(FilterChainExceptionHandler.class.getName());\n+\n+  @Override\n+  protected void doFilterInternal(\n+      HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n+      throws ServletException, IOException {\n+    logger.entry(String.format(\"begin doFilterInternal() for %s\", request.getRequestURI()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2MTI0Mw=="}, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk3MzY0NA==", "bodyText": "These logger statements helped me to analyze the @Order of filter execution. I personally liked the use of XLogger, it really helped while testing the service when deployed to tomcat server.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443973644", "createdAt": "2020-06-23T05:40:02Z", "author": {"login": "dhanyak-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/FilterChainExceptionHandler.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.google.cloud.healthcare.fdamystudies.filter;\n+\n+import java.io.IOException;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.springframework.web.client.HttpServerErrorException;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.JsonUtils;\n+\n+@Component\n+@Order(1)\n+public class FilterChainExceptionHandler extends OncePerRequestFilter {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(FilterChainExceptionHandler.class.getName());\n+\n+  @Override\n+  protected void doFilterInternal(\n+      HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n+      throws ServletException, IOException {\n+    logger.entry(String.format(\"begin doFilterInternal() for %s\", request.getRequestURI()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2MTI0Mw=="}, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM5MTMzOQ==", "bodyText": "that makes sense and feel free to use your own debug logs when developing code, but what gets checked in should be useful in a production environment, and this log would be extremely noisy in production setting.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444391339", "createdAt": "2020-06-23T17:31:26Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/FilterChainExceptionHandler.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.google.cloud.healthcare.fdamystudies.filter;\n+\n+import java.io.IOException;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.springframework.web.client.HttpServerErrorException;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.JsonUtils;\n+\n+@Component\n+@Order(1)\n+public class FilterChainExceptionHandler extends OncePerRequestFilter {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(FilterChainExceptionHandler.class.getName());\n+\n+  @Override\n+  protected void doFilterInternal(\n+      HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n+      throws ServletException, IOException {\n+    logger.entry(String.format(\"begin doFilterInternal() for %s\", request.getRequestURI()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2MTI0Mw=="}, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk2ODE5NQ==", "bodyText": "logger.entry removed now.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444968195", "createdAt": "2020-06-24T15:10:44Z", "author": {"login": "dhanyak-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/FilterChainExceptionHandler.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.google.cloud.healthcare.fdamystudies.filter;\n+\n+import java.io.IOException;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.springframework.web.client.HttpServerErrorException;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.JsonUtils;\n+\n+@Component\n+@Order(1)\n+public class FilterChainExceptionHandler extends OncePerRequestFilter {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(FilterChainExceptionHandler.class.getName());\n+\n+  @Override\n+  protected void doFilterInternal(\n+      HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n+      throws ServletException, IOException {\n+    logger.entry(String.format(\"begin doFilterInternal() for %s\", request.getRequestURI()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2MTI0Mw=="}, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDQwMzUxOnYy", "diffSide": "RIGHT", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/HealthController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNTo1NzoxNlrOGnHDUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODowNDozMVrOGnLgrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2MzE4Nw==", "bodyText": "change to healthCheck for consistency with other services", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443663187", "createdAt": "2020-06-22T15:57:16Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/HealthController.java", "diffHunk": "@@ -6,31 +6,35 @@\n  * https://opensource.org/licenses/MIT.\n  */\n \n-package com.google.cloud.healthcare.fdamystudies.auditlog.controller;\n+package com.google.cloud.healthcare.fdamystudies.controller;\n \n import javax.servlet.http.HttpServletRequest;\n import org.slf4j.ext.XLogger;\n import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RestController;\n import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.service.OAuthService;\n \n @RestController\n @RequestMapping(\"/v1\")\n-public class HealthController extends BaseController {\n+public class HealthController {\n \n   private XLogger logger = XLoggerFactory.getXLogger(HealthController.class.getName());\n \n+  @Autowired private OAuthService oauthService;\n+\n   @GetMapping(\n       value = \"/health\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzczNjIzOA==", "bodyText": "Changed to /healthCheck", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443736238", "createdAt": "2020-06-22T18:04:31Z", "author": {"login": "dhanyak-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/HealthController.java", "diffHunk": "@@ -6,31 +6,35 @@\n  * https://opensource.org/licenses/MIT.\n  */\n \n-package com.google.cloud.healthcare.fdamystudies.auditlog.controller;\n+package com.google.cloud.healthcare.fdamystudies.controller;\n \n import javax.servlet.http.HttpServletRequest;\n import org.slf4j.ext.XLogger;\n import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RestController;\n import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.service.OAuthService;\n \n @RestController\n @RequestMapping(\"/v1\")\n-public class HealthController extends BaseController {\n+public class HealthController {\n \n   private XLogger logger = XLoggerFactory.getXLogger(HealthController.class.getName());\n \n+  @Autowired private OAuthService oauthService;\n+\n   @GetMapping(\n       value = \"/health\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2MzE4Nw=="}, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDQwNDk0OnYy", "diffSide": "RIGHT", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/TokenIntrospectionFilter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNTo1NzozNFrOGnHEJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODoyODoxNVrOGnMQhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2MzM5OQ==", "bodyText": "please remove info level logs from very common methods; they cause too much noise in the logs.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443663399", "createdAt": "2020-06-22T15:57:34Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/TokenIntrospectionFilter.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.filter;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.annotation.PostConstruct;\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.http.server.PathContainer;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.util.pattern.PathPattern;\n+import org.springframework.web.util.pattern.PathPatternParser;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.JsonUtils;\n+import com.google.cloud.healthcare.fdamystudies.service.OAuthService;\n+\n+@Component\n+@Order(2)\n+public class TokenIntrospectionFilter implements Filter {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(TokenIntrospectionFilter.class.getName());\n+\n+  public static final String TOKEN = \"token\";\n+\n+  public static final String ACTIVE = \"active\";\n+\n+  @Autowired ServletContext context;\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  private Map<String, String[]> uriTemplateAndMethods = new HashMap<>();\n+\n+  @PostConstruct\n+  public void init() {\n+    // list of paths and methods for token introspection\n+    uriTemplateAndMethods.put(\n+        String.format(\"%s/v1/events\", context.getContextPath()), new String[] {\"POST\"});\n+  }\n+\n+  @Override\n+  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n+      throws IOException, ServletException {\n+    logger.entry(\n+        String.format(\"begin doFilter() for %s\", ((HttpServletRequest) request).getRequestURI()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc0ODQ4Ng==", "bodyText": "Logger.entry() and Logger.exit() statements are logged if the log level is TRACE. We should avoid TRACE log level in production.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443748486", "createdAt": "2020-06-22T18:28:15Z", "author": {"login": "dhanyak-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/TokenIntrospectionFilter.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.filter;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.annotation.PostConstruct;\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.http.server.PathContainer;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.util.pattern.PathPattern;\n+import org.springframework.web.util.pattern.PathPatternParser;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.JsonUtils;\n+import com.google.cloud.healthcare.fdamystudies.service.OAuthService;\n+\n+@Component\n+@Order(2)\n+public class TokenIntrospectionFilter implements Filter {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(TokenIntrospectionFilter.class.getName());\n+\n+  public static final String TOKEN = \"token\";\n+\n+  public static final String ACTIVE = \"active\";\n+\n+  @Autowired ServletContext context;\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  private Map<String, String[]> uriTemplateAndMethods = new HashMap<>();\n+\n+  @PostConstruct\n+  public void init() {\n+    // list of paths and methods for token introspection\n+    uriTemplateAndMethods.put(\n+        String.format(\"%s/v1/events\", context.getContextPath()), new String[] {\"POST\"});\n+  }\n+\n+  @Override\n+  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n+      throws IOException, ServletException {\n+    logger.entry(\n+        String.format(\"begin doFilter() for %s\", ((HttpServletRequest) request).getRequestURI()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2MzM5OQ=="}, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDQxMTM3OnYy", "diffSide": "RIGHT", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/TokenIntrospectionFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNTo1OTowMFrOGnHIIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODowODozN1rOGnLpNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2NDQxOQ==", "bodyText": "why is this needed?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443664419", "createdAt": "2020-06-22T15:59:00Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/TokenIntrospectionFilter.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.filter;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.annotation.PostConstruct;\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.http.server.PathContainer;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.util.pattern.PathPattern;\n+import org.springframework.web.util.pattern.PathPatternParser;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.JsonUtils;\n+import com.google.cloud.healthcare.fdamystudies.service.OAuthService;\n+\n+@Component\n+@Order(2)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzczODQyMA==", "bodyText": "In order for Spring to be able to recognize a filter, we needed to define it as a bean with the @Component annotation. And, to have the filters fire in the right order \u2013 we needed to use the @Order annotation.\nFilterChainExceptionHandler filter should be fired before any other filters, FilterChainExceptionHandler handles exception thrown by other filters so TokenIntrospectionFilter has @Order(2)", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443738420", "createdAt": "2020-06-22T18:08:37Z", "author": {"login": "dhanyak-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/TokenIntrospectionFilter.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.filter;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.annotation.PostConstruct;\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.http.server.PathContainer;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.util.pattern.PathPattern;\n+import org.springframework.web.util.pattern.PathPatternParser;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.JsonUtils;\n+import com.google.cloud.healthcare.fdamystudies.service.OAuthService;\n+\n+@Component\n+@Order(2)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2NDQxOQ=="}, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDQyNDY4OnYy", "diffSide": "RIGHT", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/OAuthServiceImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjowMjoxMVrOGnHQhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNToxMzowOVrOGoWz2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2NjU2Ng==", "bodyText": "does this expose tokens to logs?\nIf that is the case, please remove the log entry.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443666566", "createdAt": "2020-06-22T16:02:11Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/OAuthServiceImpl.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.addTextFields;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getTextValue;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+@Service\n+public class OAuthServiceImpl extends BaseServiceImpl implements OAuthService {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(OAuthServiceImpl.class.getName());\n+\n+  private static final String TOKEN = \"token\";\n+\n+  private static final String SCOPE = \"scope\";\n+\n+  private static final String AUTHORIZATION = \"Authorization\";\n+\n+  private static final String CONTENT_TYPE = \"Content-Type\";\n+\n+  @Value(\"${security.oauth2.health_endpoint}\")\n+  private String healthEndpoint;\n+\n+  @Value(\"${security.oauth2.introspection_endpoint}\")\n+  private String introspectEndpoint;\n+\n+  @Override\n+  public ResponseEntity<JsonNode> health() {\n+    return getForJson(healthEndpoint);\n+  }\n+\n+  @Override\n+  public ResponseEntity<JsonNode> introspectToken(JsonNode params) {\n+    logger.entry(String.format(\"begin introspectToken() with params=%s\", params));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc0ODc4NA==", "bodyText": "Logger.entry() and Logger.exit() statements are logged if the log level is TRACE. We should avoid TRACE log level in production.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443748784", "createdAt": "2020-06-22T18:28:52Z", "author": {"login": "dhanyak-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/OAuthServiceImpl.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.addTextFields;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getTextValue;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+@Service\n+public class OAuthServiceImpl extends BaseServiceImpl implements OAuthService {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(OAuthServiceImpl.class.getName());\n+\n+  private static final String TOKEN = \"token\";\n+\n+  private static final String SCOPE = \"scope\";\n+\n+  private static final String AUTHORIZATION = \"Authorization\";\n+\n+  private static final String CONTENT_TYPE = \"Content-Type\";\n+\n+  @Value(\"${security.oauth2.health_endpoint}\")\n+  private String healthEndpoint;\n+\n+  @Value(\"${security.oauth2.introspection_endpoint}\")\n+  private String introspectEndpoint;\n+\n+  @Override\n+  public ResponseEntity<JsonNode> health() {\n+    return getForJson(healthEndpoint);\n+  }\n+\n+  @Override\n+  public ResponseEntity<JsonNode> introspectToken(JsonNode params) {\n+    logger.entry(String.format(\"begin introspectToken() with params=%s\", params));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2NjU2Ng=="}, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk2OTk0Nw==", "bodyText": "I've removed params from logger.entry", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444969947", "createdAt": "2020-06-24T15:13:09Z", "author": {"login": "dhanyak-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/OAuthServiceImpl.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.addTextFields;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getTextValue;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+@Service\n+public class OAuthServiceImpl extends BaseServiceImpl implements OAuthService {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(OAuthServiceImpl.class.getName());\n+\n+  private static final String TOKEN = \"token\";\n+\n+  private static final String SCOPE = \"scope\";\n+\n+  private static final String AUTHORIZATION = \"Authorization\";\n+\n+  private static final String CONTENT_TYPE = \"Content-Type\";\n+\n+  @Value(\"${security.oauth2.health_endpoint}\")\n+  private String healthEndpoint;\n+\n+  @Value(\"${security.oauth2.introspection_endpoint}\")\n+  private String introspectEndpoint;\n+\n+  @Override\n+  public ResponseEntity<JsonNode> health() {\n+    return getForJson(healthEndpoint);\n+  }\n+\n+  @Override\n+  public ResponseEntity<JsonNode> introspectToken(JsonNode params) {\n+    logger.entry(String.format(\"begin introspectToken() with params=%s\", params));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2NjU2Ng=="}, "originalCommit": {"oid": "4ec17dc7c98d6a1c7d06a5ab0fe1e91c75ab8e54"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDQzMjgwOnYy", "diffSide": "LEFT", "path": "audit-log-module/audit-log-service/src/test/resources/invalid_audit_log_event.json", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjowNDoxNFrOGnHVpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNToxNDowNlrOGoW2uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2Nzg3OA==", "bodyText": "why was this removed?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443667878", "createdAt": "2020-06-22T16:04:14Z", "author": {"login": "zohrehj"}, "path": "audit-log-module/audit-log-service/src/test/resources/invalid_audit_log_event.json", "diffHunk": "@@ -21,7 +21,7 @@\n \t\t\"device_platform\": null,\n \t\t\"resource_server\": \"Participant Datastore\",\n \t\t\"client_app_version\": null,\n-\t\t\"application_version\": \"v1.0\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fe92752ca19de8e1618a8d36084f9ad3399d42d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1MDU2MQ==", "bodyText": "As the filename implies, this is a sample request for BAD REQUEST tests. Few required fields are removed and few values are set to null so that API returns 400 BAD REQUEST. This scenario tested in shouldReturnBadRequestForInvalidContent() in AuditLogEventControllerTest", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443750561", "createdAt": "2020-06-22T18:32:18Z", "author": {"login": "dhanyak-btc"}, "path": "audit-log-module/audit-log-service/src/test/resources/invalid_audit_log_event.json", "diffHunk": "@@ -21,7 +21,7 @@\n \t\t\"device_platform\": null,\n \t\t\"resource_server\": \"Participant Datastore\",\n \t\t\"client_app_version\": null,\n-\t\t\"application_version\": \"v1.0\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2Nzg3OA=="}, "originalCommit": {"oid": "8fe92752ca19de8e1618a8d36084f9ad3399d42d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM5MzAzMA==", "bodyText": "I understand that, but was there any specific reason for removing this.\nIdeally we need tests for each value that returns a bad request to make sure the code would catch all regressions, and if the application_version is required, by removing it you have altered the test case.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444393030", "createdAt": "2020-06-23T17:34:36Z", "author": {"login": "zohrehj"}, "path": "audit-log-module/audit-log-service/src/test/resources/invalid_audit_log_event.json", "diffHunk": "@@ -21,7 +21,7 @@\n \t\t\"device_platform\": null,\n \t\t\"resource_server\": \"Participant Datastore\",\n \t\t\"client_app_version\": null,\n-\t\t\"application_version\": \"v1.0\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2Nzg3OA=="}, "originalCommit": {"oid": "8fe92752ca19de8e1618a8d36084f9ad3399d42d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk3MDY4MA==", "bodyText": "This file no longer in use. Replaced it with AuditLogEventRequest object.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444970680", "createdAt": "2020-06-24T15:14:06Z", "author": {"login": "dhanyak-btc"}, "path": "audit-log-module/audit-log-service/src/test/resources/invalid_audit_log_event.json", "diffHunk": "@@ -21,7 +21,7 @@\n \t\t\"device_platform\": null,\n \t\t\"resource_server\": \"Participant Datastore\",\n \t\t\"client_app_version\": null,\n-\t\t\"application_version\": \"v1.0\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2Nzg3OA=="}, "originalCommit": {"oid": "8fe92752ca19de8e1618a8d36084f9ad3399d42d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDQzNTI0OnYy", "diffSide": "RIGHT", "path": "audit-log-module/audit-log-service/src/main/resources/application-local.properties", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjowNDo0OFrOGnHXDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNToxNDozOFrOGoW4KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2ODIzOQ==", "bodyText": "nit: space needed after the #", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443668239", "createdAt": "2020-06-22T16:04:48Z", "author": {"login": "zohrehj"}, "path": "audit-log-module/audit-log-service/src/main/resources/application-local.properties", "diffHunk": "@@ -29,12 +29,9 @@ spring.jpa.hibernate.naming.strategy=org.hibernate.cfg.ImprovedNamingStrategy\n spring.jpa.hibernate.ddl-auto = update\n spring.jpa.show-sql=true\n \n-#actuator config, check the details at http://localhost:8001/audit-log-service/actuator\n-management.security.enabled=false\n+#actuator configs, check the details at http://localhost:8001/audit-log-service/actuator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3b4ade2159f7996752d05425678a83bb3ba08ce"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1MTM3Ng==", "bodyText": "Which formatter we should use for formatting properties files? I've added the space as per comment.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443751376", "createdAt": "2020-06-22T18:33:53Z", "author": {"login": "dhanyak-btc"}, "path": "audit-log-module/audit-log-service/src/main/resources/application-local.properties", "diffHunk": "@@ -29,12 +29,9 @@ spring.jpa.hibernate.naming.strategy=org.hibernate.cfg.ImprovedNamingStrategy\n spring.jpa.hibernate.ddl-auto = update\n spring.jpa.show-sql=true\n \n-#actuator config, check the details at http://localhost:8001/audit-log-service/actuator\n-management.security.enabled=false\n+#actuator configs, check the details at http://localhost:8001/audit-log-service/actuator", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2ODIzOQ=="}, "originalCommit": {"oid": "e3b4ade2159f7996752d05425678a83bb3ba08ce"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM5NDAwMQ==", "bodyText": "I don't think you need a formatter for these since there is very little formatting required.\nA single space after commend symbol is a general guideline in most languages I have worked with and makes sense for developers to get in the habit of adding themselves", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444394001", "createdAt": "2020-06-23T17:36:20Z", "author": {"login": "zohrehj"}, "path": "audit-log-module/audit-log-service/src/main/resources/application-local.properties", "diffHunk": "@@ -29,12 +29,9 @@ spring.jpa.hibernate.naming.strategy=org.hibernate.cfg.ImprovedNamingStrategy\n spring.jpa.hibernate.ddl-auto = update\n spring.jpa.show-sql=true\n \n-#actuator config, check the details at http://localhost:8001/audit-log-service/actuator\n-management.security.enabled=false\n+#actuator configs, check the details at http://localhost:8001/audit-log-service/actuator", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2ODIzOQ=="}, "originalCommit": {"oid": "e3b4ade2159f7996752d05425678a83bb3ba08ce"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk3MTA0OA==", "bodyText": "I've added the space as per comment", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444971048", "createdAt": "2020-06-24T15:14:38Z", "author": {"login": "dhanyak-btc"}, "path": "audit-log-module/audit-log-service/src/main/resources/application-local.properties", "diffHunk": "@@ -29,12 +29,9 @@ spring.jpa.hibernate.naming.strategy=org.hibernate.cfg.ImprovedNamingStrategy\n spring.jpa.hibernate.ddl-auto = update\n spring.jpa.show-sql=true\n \n-#actuator config, check the details at http://localhost:8001/audit-log-service/actuator\n-management.security.enabled=false\n+#actuator configs, check the details at http://localhost:8001/audit-log-service/actuator", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2ODIzOQ=="}, "originalCommit": {"oid": "e3b4ade2159f7996752d05425678a83bb3ba08ce"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDQzNjQyOnYy", "diffSide": "RIGHT", "path": "audit-log-module/audit-log-service/src/main/resources/application-local.properties", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjowNTowNFrOGnHXxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNDo1MzoyNlrOGorTzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2ODQyMA==", "bodyText": "please remove if not needed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443668420", "createdAt": "2020-06-22T16:05:04Z", "author": {"login": "zohrehj"}, "path": "audit-log-module/audit-log-service/src/main/resources/application-local.properties", "diffHunk": "@@ -29,12 +29,9 @@ spring.jpa.hibernate.naming.strategy=org.hibernate.cfg.ImprovedNamingStrategy\n spring.jpa.hibernate.ddl-auto = update\n spring.jpa.show-sql=true\n \n-#actuator config, check the details at http://localhost:8001/audit-log-service/actuator\n-management.security.enabled=false\n+#actuator configs, check the details at http://localhost:8001/audit-log-service/actuator\n management.endpoints.enabled-by-default=true\n-management.endpoints.web.cors.allowed-origins=http://localhost:8002/oauth-scim-service/\n-management.endpoints.web.cors.allowed-methods=POST\n-management.endpoints.web.exposure.exclude=env,beans\n+#management.endpoints.web.exposure.exclude=", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3b4ade2159f7996752d05425678a83bb3ba08ce"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1MTkzMw==", "bodyText": "Added management.endpoints.web.exposure.exclude=beans", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443751933", "createdAt": "2020-06-22T18:35:01Z", "author": {"login": "dhanyak-btc"}, "path": "audit-log-module/audit-log-service/src/main/resources/application-local.properties", "diffHunk": "@@ -29,12 +29,9 @@ spring.jpa.hibernate.naming.strategy=org.hibernate.cfg.ImprovedNamingStrategy\n spring.jpa.hibernate.ddl-auto = update\n spring.jpa.show-sql=true\n \n-#actuator config, check the details at http://localhost:8001/audit-log-service/actuator\n-management.security.enabled=false\n+#actuator configs, check the details at http://localhost:8001/audit-log-service/actuator\n management.endpoints.enabled-by-default=true\n-management.endpoints.web.cors.allowed-origins=http://localhost:8002/oauth-scim-service/\n-management.endpoints.web.cors.allowed-methods=POST\n-management.endpoints.web.exposure.exclude=env,beans\n+#management.endpoints.web.exposure.exclude=", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2ODQyMA=="}, "originalCommit": {"oid": "e3b4ade2159f7996752d05425678a83bb3ba08ce"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM4NDAzOA==", "bodyText": "I am not sure I understand. The comment was about removing  commented out code; are you saying that you actually need the change? then why was it commented out initially?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444384038", "createdAt": "2020-06-23T17:18:58Z", "author": {"login": "zohrehj"}, "path": "audit-log-module/audit-log-service/src/main/resources/application-local.properties", "diffHunk": "@@ -29,12 +29,9 @@ spring.jpa.hibernate.naming.strategy=org.hibernate.cfg.ImprovedNamingStrategy\n spring.jpa.hibernate.ddl-auto = update\n spring.jpa.show-sql=true\n \n-#actuator config, check the details at http://localhost:8001/audit-log-service/actuator\n-management.security.enabled=false\n+#actuator configs, check the details at http://localhost:8001/audit-log-service/actuator\n management.endpoints.enabled-by-default=true\n-management.endpoints.web.cors.allowed-origins=http://localhost:8002/oauth-scim-service/\n-management.endpoints.web.cors.allowed-methods=POST\n-management.endpoints.web.exposure.exclude=env,beans\n+#management.endpoints.web.exposure.exclude=", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2ODQyMA=="}, "originalCommit": {"oid": "e3b4ade2159f7996752d05425678a83bb3ba08ce"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk3Mzk3Nw==", "bodyText": "Spring Boot Actuator exposes lot of details in /audit-log-service/actuator endpoint. We need this property to exclude fields that are not needed in production environment. This is for local and non-production environment so am including all the fields except beans.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444973977", "createdAt": "2020-06-24T15:18:46Z", "author": {"login": "dhanyak-btc"}, "path": "audit-log-module/audit-log-service/src/main/resources/application-local.properties", "diffHunk": "@@ -29,12 +29,9 @@ spring.jpa.hibernate.naming.strategy=org.hibernate.cfg.ImprovedNamingStrategy\n spring.jpa.hibernate.ddl-auto = update\n spring.jpa.show-sql=true\n \n-#actuator config, check the details at http://localhost:8001/audit-log-service/actuator\n-management.security.enabled=false\n+#actuator configs, check the details at http://localhost:8001/audit-log-service/actuator\n management.endpoints.enabled-by-default=true\n-management.endpoints.web.cors.allowed-origins=http://localhost:8002/oauth-scim-service/\n-management.endpoints.web.cors.allowed-methods=POST\n-management.endpoints.web.exposure.exclude=env,beans\n+#management.endpoints.web.exposure.exclude=", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2ODQyMA=="}, "originalCommit": {"oid": "e3b4ade2159f7996752d05425678a83bb3ba08ce"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAxNDA5Ng==", "bodyText": "I understand, since it is not needed in local file, it should be removed.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r445014096", "createdAt": "2020-06-24T16:17:50Z", "author": {"login": "zohrehj"}, "path": "audit-log-module/audit-log-service/src/main/resources/application-local.properties", "diffHunk": "@@ -29,12 +29,9 @@ spring.jpa.hibernate.naming.strategy=org.hibernate.cfg.ImprovedNamingStrategy\n spring.jpa.hibernate.ddl-auto = update\n spring.jpa.show-sql=true\n \n-#actuator config, check the details at http://localhost:8001/audit-log-service/actuator\n-management.security.enabled=false\n+#actuator configs, check the details at http://localhost:8001/audit-log-service/actuator\n management.endpoints.enabled-by-default=true\n-management.endpoints.web.cors.allowed-origins=http://localhost:8002/oauth-scim-service/\n-management.endpoints.web.cors.allowed-methods=POST\n-management.endpoints.web.exposure.exclude=env,beans\n+#management.endpoints.web.exposure.exclude=", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2ODQyMA=="}, "originalCommit": {"oid": "e3b4ade2159f7996752d05425678a83bb3ba08ce"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMwNTgwNg==", "bodyText": "#management.endpoints.web.exposure.exclude= removed from application-local.properties", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r445305806", "createdAt": "2020-06-25T04:53:26Z", "author": {"login": "dhanyak-btc"}, "path": "audit-log-module/audit-log-service/src/main/resources/application-local.properties", "diffHunk": "@@ -29,12 +29,9 @@ spring.jpa.hibernate.naming.strategy=org.hibernate.cfg.ImprovedNamingStrategy\n spring.jpa.hibernate.ddl-auto = update\n spring.jpa.show-sql=true\n \n-#actuator config, check the details at http://localhost:8001/audit-log-service/actuator\n-management.security.enabled=false\n+#actuator configs, check the details at http://localhost:8001/audit-log-service/actuator\n management.endpoints.enabled-by-default=true\n-management.endpoints.web.cors.allowed-origins=http://localhost:8002/oauth-scim-service/\n-management.endpoints.web.cors.allowed-methods=POST\n-management.endpoints.web.exposure.exclude=env,beans\n+#management.endpoints.web.exposure.exclude=", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2ODQyMA=="}, "originalCommit": {"oid": "e3b4ade2159f7996752d05425678a83bb3ba08ce"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDQ0MTY1OnYy", "diffSide": "RIGHT", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/TokenIntrospectionFilter.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjowNjoyMVrOGnHbCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNjozMToyNFrOGotFbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2OTI1Nw==", "bodyText": "I think these two should be moved to the block below with the rest of  com.google.cloud.healthcare.fdamystudies.common import lines.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443669257", "createdAt": "2020-06-22T16:06:21Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/TokenIntrospectionFilter.java", "diffHunk": "@@ -8,6 +8,8 @@\n \n package com.google.cloud.healthcare.fdamystudies.filter;\n \n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectMapper;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectNode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3b4ade2159f7996752d05425678a83bb3ba08ce"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1MjgxMg==", "bodyText": "Team is using google-java-format-eclipse-plugin_1.6.0.jar in STS to format the code. Please let me know if you are using different version.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443752812", "createdAt": "2020-06-22T18:36:57Z", "author": {"login": "dhanyak-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/TokenIntrospectionFilter.java", "diffHunk": "@@ -8,6 +8,8 @@\n \n package com.google.cloud.healthcare.fdamystudies.filter;\n \n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectMapper;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectNode;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2OTI1Nw=="}, "originalCommit": {"oid": "e3b4ade2159f7996752d05425678a83bb3ba08ce"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM4NzkxNQ==", "bodyText": "I didn't notice the static keyword initially. The separation now makes more sense.\nreviewing https://google.github.io/styleguide/javaguide.html#s3.3.3-import-ordering-and-spacing it seems you need a separation between static and non-static imports.\nAlso you are free to use any formatter you prefer, as long as it follows Google styleguide.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444387915", "createdAt": "2020-06-23T17:25:30Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/TokenIntrospectionFilter.java", "diffHunk": "@@ -8,6 +8,8 @@\n \n package com.google.cloud.healthcare.fdamystudies.filter;\n \n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectMapper;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectNode;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2OTI1Nw=="}, "originalCommit": {"oid": "e3b4ade2159f7996752d05425678a83bb3ba08ce"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk3NTg0MA==", "bodyText": "I added a line spacing between static and non-static imports but google-java-format-eclipse-plugin_1.6.0.jar plugin removes the line spacing.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444975840", "createdAt": "2020-06-24T15:21:26Z", "author": {"login": "dhanyak-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/TokenIntrospectionFilter.java", "diffHunk": "@@ -8,6 +8,8 @@\n \n package com.google.cloud.healthcare.fdamystudies.filter;\n \n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectMapper;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectNode;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2OTI1Nw=="}, "originalCommit": {"oid": "e3b4ade2159f7996752d05425678a83bb3ba08ce"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAwNzYyOQ==", "bodyText": "here is suggestion when I googled your comment: google/styleguide#273", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r445007629", "createdAt": "2020-06-24T16:07:37Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/TokenIntrospectionFilter.java", "diffHunk": "@@ -8,6 +8,8 @@\n \n package com.google.cloud.healthcare.fdamystudies.filter;\n \n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectMapper;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectNode;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2OTI1Nw=="}, "originalCommit": {"oid": "e3b4ade2159f7996752d05425678a83bb3ba08ce"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMzNDg5NA==", "bodyText": "@zohrehj  thanks for the link, I followed the steps given in the link to organize the imports and formatted the code. 'Organize imports' modified many classes. I'll ask the team to apply these settings in their IDE if the formatting is OK.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r445334894", "createdAt": "2020-06-25T06:31:24Z", "author": {"login": "dhanyak-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/TokenIntrospectionFilter.java", "diffHunk": "@@ -8,6 +8,8 @@\n \n package com.google.cloud.healthcare.fdamystudies.filter;\n \n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectMapper;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectNode;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2OTI1Nw=="}, "originalCommit": {"oid": "e3b4ade2159f7996752d05425678a83bb3ba08ce"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDQ0Nzk1OnYy", "diffSide": "RIGHT", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/TokenIntrospectionFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjowNzo1NFrOGnHfBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODoxMToyM1rOGnLu4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MDI3Ng==", "bodyText": "since this method is returning a boolean, maybe renaming to something like:\npathAndMethodAreValid or validatePathAndHttpMethod would make it more readable.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443670276", "createdAt": "2020-06-22T16:07:54Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/TokenIntrospectionFilter.java", "diffHunk": "@@ -84,7 +85,7 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha\n     }\n   }\n \n-  private boolean applyFilter(HttpServletRequest req) {\n+  private boolean checkPathAndHttpMethodMatches(HttpServletRequest req) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3b4ade2159f7996752d05425678a83bb3ba08ce"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzczOTg3NQ==", "bodyText": "Renamed to validatePathAndHttpMethod", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443739875", "createdAt": "2020-06-22T18:11:23Z", "author": {"login": "dhanyak-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/TokenIntrospectionFilter.java", "diffHunk": "@@ -84,7 +85,7 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha\n     }\n   }\n \n-  private boolean applyFilter(HttpServletRequest req) {\n+  private boolean checkPathAndHttpMethodMatches(HttpServletRequest req) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MDI3Ng=="}, "originalCommit": {"oid": "e3b4ade2159f7996752d05425678a83bb3ba08ce"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDQ1MTQ0OnYy", "diffSide": "RIGHT", "path": "audit-log-module/audit-log-service/audit-log-service.postman_collection.json", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjowODo1M1rOGnHhQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNToyMjowMFrOGoXMtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MDg1MQ==", "bodyText": "where is this file used?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443670851", "createdAt": "2020-06-22T16:08:53Z", "author": {"login": "zohrehj"}, "path": "audit-log-module/audit-log-service/audit-log-service.postman_collection.json", "diffHunk": "@@ -0,0 +1,141 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bfb2a698ca4238090bc11dedb84f13a4f16d186"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1MzM5MQ==", "bodyText": "This is postman collection for audit log service to test the APIs using postman.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443753391", "createdAt": "2020-06-22T18:38:08Z", "author": {"login": "dhanyak-btc"}, "path": "audit-log-module/audit-log-service/audit-log-service.postman_collection.json", "diffHunk": "@@ -0,0 +1,141 @@\n+{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MDg1MQ=="}, "originalCommit": {"oid": "6bfb2a698ca4238090bc11dedb84f13a4f16d186"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM4OTI4NQ==", "bodyText": "and why does it need to be checked into github?\nDo you plan to integrate it with automated tests? or is it for internal use?\nIf it's for internal use, It does not belong here. Feel free to move it to a gist, and leave a link in our readme to point to these examples instead.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444389285", "createdAt": "2020-06-23T17:27:52Z", "author": {"login": "zohrehj"}, "path": "audit-log-module/audit-log-service/audit-log-service.postman_collection.json", "diffHunk": "@@ -0,0 +1,141 @@\n+{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MDg1MQ=="}, "originalCommit": {"oid": "6bfb2a698ca4238090bc11dedb84f13a4f16d186"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk3NjMxMA==", "bodyText": "Removed the postman collection json file.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444976310", "createdAt": "2020-06-24T15:22:00Z", "author": {"login": "dhanyak-btc"}, "path": "audit-log-module/audit-log-service/audit-log-service.postman_collection.json", "diffHunk": "@@ -0,0 +1,141 @@\n+{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MDg1MQ=="}, "originalCommit": {"oid": "6bfb2a698ca4238090bc11dedb84f13a4f16d186"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDQ1MjU4OnYy", "diffSide": "RIGHT", "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/filter/TokenIntrospectionFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjowOTowOVrOGnHh9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODo0MDo0MFrOGnMo0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MTAyOA==", "bodyText": "why is this order needed here?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443671028", "createdAt": "2020-06-22T16:09:09Z", "author": {"login": "zohrehj"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/filter/TokenIntrospectionFilter.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package com.google.cloud.healthcare.fdamystudies.auditlog.filter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.annotation.PostConstruct;\n+import javax.servlet.ServletContext;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.stereotype.Component;\n+import com.google.cloud.healthcare.fdamystudies.filter.BaseTokenIntrospectionFilter;\n+\n+@Component\n+@Order(2)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bfb2a698ca4238090bc11dedb84f13a4f16d186"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1NDcwNg==", "bodyText": "@component and @order not present in latest code of this filter.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443754706", "createdAt": "2020-06-22T18:40:40Z", "author": {"login": "dhanyak-btc"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/filter/TokenIntrospectionFilter.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package com.google.cloud.healthcare.fdamystudies.auditlog.filter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.annotation.PostConstruct;\n+import javax.servlet.ServletContext;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.stereotype.Component;\n+import com.google.cloud.healthcare.fdamystudies.filter.BaseTokenIntrospectionFilter;\n+\n+@Component\n+@Order(2)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MTAyOA=="}, "originalCommit": {"oid": "6bfb2a698ca4238090bc11dedb84f13a4f16d186"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDY2MDg0OnYy", "diffSide": "RIGHT", "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/validator/AuditLogEventValidator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzowNjoyOVrOGnJmTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNToyNToxN1rOGoXWAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcwNDkxMA==", "bodyText": "I thought we had said we were going to prefer using Java/Bean validators, especially for the cases where the validation is running on every request.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443704910", "createdAt": "2020-06-22T17:06:29Z", "author": {"login": "nikklassen"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/validator/AuditLogEventValidator.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.validator;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getArrayNode;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectNode;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getTextValue;\n+import java.util.List;\n+import javax.annotation.PostConstruct;\n+import org.apache.commons.lang3.StringUtils;\n+import org.everit.json.schema.Schema;\n+import org.everit.json.schema.ValidationException;\n+import org.everit.json.schema.loader.SchemaLoader;\n+import org.json.JSONObject;\n+import org.json.JSONTokener;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Component;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+@Component\n+public final class AuditLogEventValidator {\n+\n+  private static final String ERROR_DESCRIPTION = \"error_description\";\n+\n+  private static final String ERROR_TYPE = \"error_type\";\n+\n+  private static final String FILED_PATH = \"fieldPath\";\n+\n+  private static final String ERRORS = \"errors\";\n+\n+  private static final String STATUS = \"status\";\n+\n+  private static final String USER_ID = \"user_id\";\n+\n+  private Schema schema;\n+\n+  @PostConstruct\n+  public void loadSchema() {\n+    JSONObject jsonSchema =\n+        new JSONObject(\n+            new JSONTokener(\n+                AuditLogEventValidator.class.getResourceAsStream(\"/audit-log-event-schema.json\")));\n+    this.schema = SchemaLoader.load(jsonSchema);\n+  }\n+\n+  public JsonNode validateJson(JsonNode eventParams) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEwNDc4MA==", "bodyText": "I'll refactor the code to use Java/Bean validator's, this may take few days to implement. Please open a issue and close this PR after reviewing other comments replies.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444104780", "createdAt": "2020-06-23T09:54:49Z", "author": {"login": "dhanyak-btc"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/validator/AuditLogEventValidator.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.validator;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getArrayNode;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectNode;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getTextValue;\n+import java.util.List;\n+import javax.annotation.PostConstruct;\n+import org.apache.commons.lang3.StringUtils;\n+import org.everit.json.schema.Schema;\n+import org.everit.json.schema.ValidationException;\n+import org.everit.json.schema.loader.SchemaLoader;\n+import org.json.JSONObject;\n+import org.json.JSONTokener;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Component;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+@Component\n+public final class AuditLogEventValidator {\n+\n+  private static final String ERROR_DESCRIPTION = \"error_description\";\n+\n+  private static final String ERROR_TYPE = \"error_type\";\n+\n+  private static final String FILED_PATH = \"fieldPath\";\n+\n+  private static final String ERRORS = \"errors\";\n+\n+  private static final String STATUS = \"status\";\n+\n+  private static final String USER_ID = \"user_id\";\n+\n+  private Schema schema;\n+\n+  @PostConstruct\n+  public void loadSchema() {\n+    JSONObject jsonSchema =\n+        new JSONObject(\n+            new JSONTokener(\n+                AuditLogEventValidator.class.getResourceAsStream(\"/audit-log-event-schema.json\")));\n+    this.schema = SchemaLoader.load(jsonSchema);\n+  }\n+\n+  public JsonNode validateJson(JsonNode eventParams) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcwNDkxMA=="}, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk3ODY4OA==", "bodyText": "I've removed this class. Validation is handled using validation annotations and @ControllerAdvice GlobalExceptionHandler  This class is copied from user-mgmt module. I've added logger statements to all the methods in this to log exceptions.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444978688", "createdAt": "2020-06-24T15:25:17Z", "author": {"login": "dhanyak-btc"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/validator/AuditLogEventValidator.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.validator;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getArrayNode;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectNode;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getTextValue;\n+import java.util.List;\n+import javax.annotation.PostConstruct;\n+import org.apache.commons.lang3.StringUtils;\n+import org.everit.json.schema.Schema;\n+import org.everit.json.schema.ValidationException;\n+import org.everit.json.schema.loader.SchemaLoader;\n+import org.json.JSONObject;\n+import org.json.JSONTokener;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Component;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+@Component\n+public final class AuditLogEventValidator {\n+\n+  private static final String ERROR_DESCRIPTION = \"error_description\";\n+\n+  private static final String ERROR_TYPE = \"error_type\";\n+\n+  private static final String FILED_PATH = \"fieldPath\";\n+\n+  private static final String ERRORS = \"errors\";\n+\n+  private static final String STATUS = \"status\";\n+\n+  private static final String USER_ID = \"user_id\";\n+\n+  private Schema schema;\n+\n+  @PostConstruct\n+  public void loadSchema() {\n+    JSONObject jsonSchema =\n+        new JSONObject(\n+            new JSONTokener(\n+                AuditLogEventValidator.class.getResourceAsStream(\"/audit-log-event-schema.json\")));\n+    this.schema = SchemaLoader.load(jsonSchema);\n+  }\n+\n+  public JsonNode validateJson(JsonNode eventParams) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcwNDkxMA=="}, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDY2NzQxOnYy", "diffSide": "RIGHT", "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/AuditLogEventService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzowODoyOFrOGnJqRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNToyMzozOVrOGoXRew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcwNTkyNQ==", "bodyText": "This should not be operating on JsonNode. You should parse the JSON into the entity type directly.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443705925", "createdAt": "2020-06-22T17:08:28Z", "author": {"login": "nikklassen"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/AuditLogEventService.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package com.google.cloud.healthcare.fdamystudies.auditlog.service;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+public interface AuditLogEventService {\n+\n+  public long saveAuditLogEvent(JsonNode eventParams);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEwNTQ3OA==", "bodyText": "I'll refactor the code to use entity type. I'll use table structure to store the event details.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444105478", "createdAt": "2020-06-23T09:55:57Z", "author": {"login": "dhanyak-btc"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/AuditLogEventService.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package com.google.cloud.healthcare.fdamystudies.auditlog.service;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+public interface AuditLogEventService {\n+\n+  public long saveAuditLogEvent(JsonNode eventParams);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcwNTkyNQ=="}, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk3NzUzMQ==", "bodyText": "I've refactored the code to use AuditLogEventRequest bean", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444977531", "createdAt": "2020-06-24T15:23:39Z", "author": {"login": "dhanyak-btc"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/AuditLogEventService.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package com.google.cloud.healthcare.fdamystudies.auditlog.service;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+public interface AuditLogEventService {\n+\n+  public long saveAuditLogEvent(JsonNode eventParams);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcwNTkyNQ=="}, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDY3MTYyOnYy", "diffSide": "RIGHT", "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/AuditLogEventServiceImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzowOTozN1rOGnJs1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNToyNzoxN1rOGoXb1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcwNjU4Mg==", "bodyText": "This should all be done with the JSON deserialization code we went over in the last PR.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443706582", "createdAt": "2020-06-22T17:09:37Z", "author": {"login": "nikklassen"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/AuditLogEventServiceImpl.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package com.google.cloud.healthcare.fdamystudies.auditlog.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.AuditLogConstants.ALERT;\n+import static com.google.cloud.healthcare.fdamystudies.common.AuditLogConstants.APP_ID;\n+import static com.google.cloud.healthcare.fdamystudies.common.AuditLogConstants.CORRELATION_ID;\n+import static com.google.cloud.healthcare.fdamystudies.common.AuditLogConstants.EVENT_INFO;\n+import static com.google.cloud.healthcare.fdamystudies.common.AuditLogConstants.EVENT_NAME;\n+import static com.google.cloud.healthcare.fdamystudies.common.AuditLogConstants.EVENT_TIMESTAMP;\n+import static com.google.cloud.healthcare.fdamystudies.common.AuditLogConstants.ORG_ID;\n+import static com.google.cloud.healthcare.fdamystudies.common.AuditLogConstants.PLATFORM_VERSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.AuditLogConstants.SYSTEM_ID;\n+import static com.google.cloud.healthcare.fdamystudies.common.AuditLogConstants.USER_ID;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectNode;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getTextValue;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.model.AuditLogEventEntity;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.repository.AuditLogEventRepository;\n+import com.google.cloud.healthcare.fdamystudies.common.DateTimeUtils;\n+import com.google.cloud.healthcare.fdamystudies.service.BaseServiceImpl;\n+\n+@Service\n+public class AuditLogEventServiceImpl extends BaseServiceImpl implements AuditLogEventService {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(AuditLogEventServiceImpl.class.getName());\n+\n+  @Autowired private AuditLogEventRepository repository;\n+\n+  @Value(\"${auditlog.platform-version}\")\n+  private String platformVersion;\n+\n+  @Override\n+  public long saveAuditLogEvent(JsonNode eventParams) {\n+    logger.entry(String.format(\"begin saveAuditLogEvent() with eventParams=%s\", eventParams));\n+    AuditLogEventEntity event = new AuditLogEventEntity();\n+\n+    event.setCorrelationId(getTextValue(eventParams, CORRELATION_ID));\n+    event.setEventName(getTextValue(eventParams, EVENT_NAME));\n+    event.setSystemId(getTextValue(eventParams, SYSTEM_ID));\n+    event.setAppId(getTextValue(eventParams, APP_ID));\n+    event.setOrgId(getTextValue(eventParams, ORG_ID));\n+    event.setUserId(getTextValue(eventParams, USER_ID));\n+    event.setCreatedTimestamp(DateTimeUtils.getSystemDateTimestamp());\n+    event.setEventTimestamp(eventParams.get(EVENT_TIMESTAMP).longValue());\n+    event.setAlert(eventParams.get(ALERT).booleanValue());\n+\n+    ObjectNode eventInfo = getObjectNode();\n+    eventInfo.put(PLATFORM_VERSION, platformVersion);\n+    eventInfo.setAll((ObjectNode) eventParams.get(EVENT_INFO));\n+    event.setEventInfo(eventInfo.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEyNDk5OA==", "bodyText": "I'll refactor the code to use entity type.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444124998", "createdAt": "2020-06-23T10:31:18Z", "author": {"login": "dhanyak-btc"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/AuditLogEventServiceImpl.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package com.google.cloud.healthcare.fdamystudies.auditlog.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.AuditLogConstants.ALERT;\n+import static com.google.cloud.healthcare.fdamystudies.common.AuditLogConstants.APP_ID;\n+import static com.google.cloud.healthcare.fdamystudies.common.AuditLogConstants.CORRELATION_ID;\n+import static com.google.cloud.healthcare.fdamystudies.common.AuditLogConstants.EVENT_INFO;\n+import static com.google.cloud.healthcare.fdamystudies.common.AuditLogConstants.EVENT_NAME;\n+import static com.google.cloud.healthcare.fdamystudies.common.AuditLogConstants.EVENT_TIMESTAMP;\n+import static com.google.cloud.healthcare.fdamystudies.common.AuditLogConstants.ORG_ID;\n+import static com.google.cloud.healthcare.fdamystudies.common.AuditLogConstants.PLATFORM_VERSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.AuditLogConstants.SYSTEM_ID;\n+import static com.google.cloud.healthcare.fdamystudies.common.AuditLogConstants.USER_ID;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectNode;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getTextValue;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.model.AuditLogEventEntity;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.repository.AuditLogEventRepository;\n+import com.google.cloud.healthcare.fdamystudies.common.DateTimeUtils;\n+import com.google.cloud.healthcare.fdamystudies.service.BaseServiceImpl;\n+\n+@Service\n+public class AuditLogEventServiceImpl extends BaseServiceImpl implements AuditLogEventService {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(AuditLogEventServiceImpl.class.getName());\n+\n+  @Autowired private AuditLogEventRepository repository;\n+\n+  @Value(\"${auditlog.platform-version}\")\n+  private String platformVersion;\n+\n+  @Override\n+  public long saveAuditLogEvent(JsonNode eventParams) {\n+    logger.entry(String.format(\"begin saveAuditLogEvent() with eventParams=%s\", eventParams));\n+    AuditLogEventEntity event = new AuditLogEventEntity();\n+\n+    event.setCorrelationId(getTextValue(eventParams, CORRELATION_ID));\n+    event.setEventName(getTextValue(eventParams, EVENT_NAME));\n+    event.setSystemId(getTextValue(eventParams, SYSTEM_ID));\n+    event.setAppId(getTextValue(eventParams, APP_ID));\n+    event.setOrgId(getTextValue(eventParams, ORG_ID));\n+    event.setUserId(getTextValue(eventParams, USER_ID));\n+    event.setCreatedTimestamp(DateTimeUtils.getSystemDateTimestamp());\n+    event.setEventTimestamp(eventParams.get(EVENT_TIMESTAMP).longValue());\n+    event.setAlert(eventParams.get(ALERT).booleanValue());\n+\n+    ObjectNode eventInfo = getObjectNode();\n+    eventInfo.put(PLATFORM_VERSION, platformVersion);\n+    eventInfo.setAll((ObjectNode) eventParams.get(EVENT_INFO));\n+    event.setEventInfo(eventInfo.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcwNjU4Mg=="}, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk4MDE4MA==", "bodyText": "I've refactored the code, added new fields to AuditLogEventEntity class. Added AuditLogEventMapper class to copy fields from AuditLogEventRequest to AuditLogEventEntity object.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444980180", "createdAt": "2020-06-24T15:27:17Z", "author": {"login": "dhanyak-btc"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/AuditLogEventServiceImpl.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package com.google.cloud.healthcare.fdamystudies.auditlog.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.AuditLogConstants.ALERT;\n+import static com.google.cloud.healthcare.fdamystudies.common.AuditLogConstants.APP_ID;\n+import static com.google.cloud.healthcare.fdamystudies.common.AuditLogConstants.CORRELATION_ID;\n+import static com.google.cloud.healthcare.fdamystudies.common.AuditLogConstants.EVENT_INFO;\n+import static com.google.cloud.healthcare.fdamystudies.common.AuditLogConstants.EVENT_NAME;\n+import static com.google.cloud.healthcare.fdamystudies.common.AuditLogConstants.EVENT_TIMESTAMP;\n+import static com.google.cloud.healthcare.fdamystudies.common.AuditLogConstants.ORG_ID;\n+import static com.google.cloud.healthcare.fdamystudies.common.AuditLogConstants.PLATFORM_VERSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.AuditLogConstants.SYSTEM_ID;\n+import static com.google.cloud.healthcare.fdamystudies.common.AuditLogConstants.USER_ID;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectNode;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getTextValue;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.model.AuditLogEventEntity;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.repository.AuditLogEventRepository;\n+import com.google.cloud.healthcare.fdamystudies.common.DateTimeUtils;\n+import com.google.cloud.healthcare.fdamystudies.service.BaseServiceImpl;\n+\n+@Service\n+public class AuditLogEventServiceImpl extends BaseServiceImpl implements AuditLogEventService {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(AuditLogEventServiceImpl.class.getName());\n+\n+  @Autowired private AuditLogEventRepository repository;\n+\n+  @Value(\"${auditlog.platform-version}\")\n+  private String platformVersion;\n+\n+  @Override\n+  public long saveAuditLogEvent(JsonNode eventParams) {\n+    logger.entry(String.format(\"begin saveAuditLogEvent() with eventParams=%s\", eventParams));\n+    AuditLogEventEntity event = new AuditLogEventEntity();\n+\n+    event.setCorrelationId(getTextValue(eventParams, CORRELATION_ID));\n+    event.setEventName(getTextValue(eventParams, EVENT_NAME));\n+    event.setSystemId(getTextValue(eventParams, SYSTEM_ID));\n+    event.setAppId(getTextValue(eventParams, APP_ID));\n+    event.setOrgId(getTextValue(eventParams, ORG_ID));\n+    event.setUserId(getTextValue(eventParams, USER_ID));\n+    event.setCreatedTimestamp(DateTimeUtils.getSystemDateTimestamp());\n+    event.setEventTimestamp(eventParams.get(EVENT_TIMESTAMP).longValue());\n+    event.setAlert(eventParams.get(ALERT).booleanValue());\n+\n+    ObjectNode eventInfo = getObjectNode();\n+    eventInfo.put(PLATFORM_VERSION, platformVersion);\n+    eventInfo.setAll((ObjectNode) eventParams.get(EVENT_INFO));\n+    event.setEventInfo(eventInfo.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcwNjU4Mg=="}, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDY4MTkwOnYy", "diffSide": "RIGHT", "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/model/AuditLogEventEntity.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzoxMjozNFrOGnJzYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTozMDoyNVrOGoXlOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcwODI1Ng==", "bodyText": "These length limits don't appear to be enforced anywhere.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443708256", "createdAt": "2020-06-22T17:12:34Z", "author": {"login": "nikklassen"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/model/AuditLogEventEntity.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.model;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+@Setter\n+@Getter\n+@Entity\n+@Table(name = \"audit_log_events\")\n+public class AuditLogEventEntity {\n+\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  @Column(name = \"id\", updatable = false, nullable = false)\n+  private long id;\n+\n+  @Column(name = \"correlation_id\", nullable = false, length = 255)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEyNTM1OA==", "bodyText": "I'll  fix this in next PR", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444125358", "createdAt": "2020-06-23T10:32:04Z", "author": {"login": "dhanyak-btc"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/model/AuditLogEventEntity.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.model;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+@Setter\n+@Getter\n+@Entity\n+@Table(name = \"audit_log_events\")\n+public class AuditLogEventEntity {\n+\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  @Column(name = \"id\", updatable = false, nullable = false)\n+  private long id;\n+\n+  @Column(name = \"correlation_id\", nullable = false, length = 255)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcwODI1Ng=="}, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk4MjU4NA==", "bodyText": "Added validation annotations to AuditLogEventRequest class to handle these limits.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444982584", "createdAt": "2020-06-24T15:30:25Z", "author": {"login": "dhanyak-btc"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/model/AuditLogEventEntity.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.model;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+@Setter\n+@Getter\n+@Entity\n+@Table(name = \"audit_log_events\")\n+public class AuditLogEventEntity {\n+\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  @Column(name = \"id\", updatable = false, nullable = false)\n+  private long id;\n+\n+  @Column(name = \"correlation_id\", nullable = false, length = 255)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcwODI1Ng=="}, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDY5NDI3OnYy", "diffSide": "RIGHT", "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/model/AuditLogEventEntity.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzoxNjozMVrOGnJ7dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTozMTo1NFrOGoXpbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcxMDMyNg==", "bodyText": "Can we use a UUID for the UUID? It seems that Hibernate supports this easily. https://xebia.com/blog/jpa-implementation-patterns-using-uuids-as-primary-keys/", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443710326", "createdAt": "2020-06-22T17:16:31Z", "author": {"login": "nikklassen"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/model/AuditLogEventEntity.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.model;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+@Setter\n+@Getter\n+@Entity\n+@Table(name = \"audit_log_events\")\n+public class AuditLogEventEntity {\n+\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  @Column(name = \"id\", updatable = false, nullable = false)\n+  private long id;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE3MjM1Mw==", "bodyText": "I'll try your suggestion in next PR.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444172353", "createdAt": "2020-06-23T12:06:59Z", "author": {"login": "dhanyak-btc"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/model/AuditLogEventEntity.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.model;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+@Setter\n+@Getter\n+@Entity\n+@Table(name = \"audit_log_events\")\n+public class AuditLogEventEntity {\n+\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  @Column(name = \"id\", updatable = false, nullable = false)\n+  private long id;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcxMDMyNg=="}, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk4MzY2Mw==", "bodyText": "Used UUID  for 'id' field in AuditLogEventEntity.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444983663", "createdAt": "2020-06-24T15:31:54Z", "author": {"login": "dhanyak-btc"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/model/AuditLogEventEntity.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.model;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+@Setter\n+@Getter\n+@Entity\n+@Table(name = \"audit_log_events\")\n+public class AuditLogEventEntity {\n+\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  @Column(name = \"id\", updatable = false, nullable = false)\n+  private long id;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcxMDMyNg=="}, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDg2NTUwOnYy", "diffSide": "RIGHT", "path": "audit-log-module/audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/controller/AuditLogEventControllerTest.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODowODo0NVrOGnLpgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTozNTozN1rOGoXzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzczODQ5Nw==", "bodyText": "This is an example of some of my concerns about using performPost and other methods you have created. I don't know what StringUtils.EMPTY is for if I'm just looking at this code (i.e. without an IDE). And you aren't able to use other matchers. This test is much easier to read when written like this\n    mockMvc.perform(post(ApiEndpoint.EVENTS.getPath()).headers(headers))\n        .andDo(print())\n        .andExpect(status().isCreated())\n        .andExpect(content().string(containsString(validAuditLogEvent)))\n        .andExpect(model().attribute(\"event_id\", greaterThan(0)));\nI think we are overoptimizing here to remove the duplicated code, but the function call just removes too much flexibility and information.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443738497", "createdAt": "2020-06-22T18:08:45Z", "author": {"login": "nikklassen"}, "path": "audit-log-module/audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/controller/AuditLogEventControllerTest.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.controller;\n+\n+import static org.junit.Assert.assertTrue;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.UUID;\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.web.servlet.MvcResult;\n+import com.fasterxml.jackson.core.JsonParseException;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.common.ApiEndpoint;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.validator.AuditLogEventValidator;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.jayway.jsonpath.JsonPath;\n+\n+public class AuditLogEventControllerTest extends BaseMockIT {\n+\n+  @Autowired AuditLogEventValidator validator;\n+\n+  private static String validAuditLogEvent;\n+\n+  private static String invalidAuditLogEvent;\n+\n+  private static ObjectMapper objMapper = new ObjectMapper();\n+\n+  @BeforeAll\n+  public static void loadEvents() throws JsonParseException, JsonMappingException, IOException {\n+    invalidAuditLogEvent =\n+        objMapper\n+            .readValue(\n+                AuditLogEventControllerTest.class.getResourceAsStream(\n+                    \"/invalid_audit_log_event.json\"),\n+                JsonNode.class)\n+            .toString();\n+\n+    validAuditLogEvent =\n+        objMapper\n+            .readValue(\n+                AuditLogEventControllerTest.class.getResourceAsStream(\n+                    \"/valid_audit_log_event.json\"),\n+                JsonNode.class)\n+            .toString();\n+  }\n+\n+  @Test\n+  public void shouldSaveAuditLogEvent() throws Exception {\n+    HttpHeaders headers = getCommonHeaders();\n+    headers.add(\"Authorization\", VALID_BEARER_TOKEN);\n+    MvcResult result =\n+        performPost(\n+            ApiEndpoint.EVENTS.getPath(), validAuditLogEvent, headers, StringUtils.EMPTY, CREATED);\n+    int eventId = JsonPath.read(result.getResponse().getContentAsString(), \"$.event_id\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEwNzk1Ng==", "bodyText": "My bad, I was expecting event_id field in the response. I've replaced StringUtils.EMPTY with event_id fieldname.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444107956", "createdAt": "2020-06-23T10:00:17Z", "author": {"login": "dhanyak-btc"}, "path": "audit-log-module/audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/controller/AuditLogEventControllerTest.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.controller;\n+\n+import static org.junit.Assert.assertTrue;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.UUID;\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.web.servlet.MvcResult;\n+import com.fasterxml.jackson.core.JsonParseException;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.common.ApiEndpoint;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.validator.AuditLogEventValidator;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.jayway.jsonpath.JsonPath;\n+\n+public class AuditLogEventControllerTest extends BaseMockIT {\n+\n+  @Autowired AuditLogEventValidator validator;\n+\n+  private static String validAuditLogEvent;\n+\n+  private static String invalidAuditLogEvent;\n+\n+  private static ObjectMapper objMapper = new ObjectMapper();\n+\n+  @BeforeAll\n+  public static void loadEvents() throws JsonParseException, JsonMappingException, IOException {\n+    invalidAuditLogEvent =\n+        objMapper\n+            .readValue(\n+                AuditLogEventControllerTest.class.getResourceAsStream(\n+                    \"/invalid_audit_log_event.json\"),\n+                JsonNode.class)\n+            .toString();\n+\n+    validAuditLogEvent =\n+        objMapper\n+            .readValue(\n+                AuditLogEventControllerTest.class.getResourceAsStream(\n+                    \"/valid_audit_log_event.json\"),\n+                JsonNode.class)\n+            .toString();\n+  }\n+\n+  @Test\n+  public void shouldSaveAuditLogEvent() throws Exception {\n+    HttpHeaders headers = getCommonHeaders();\n+    headers.add(\"Authorization\", VALID_BEARER_TOKEN);\n+    MvcResult result =\n+        performPost(\n+            ApiEndpoint.EVENTS.getPath(), validAuditLogEvent, headers, StringUtils.EMPTY, CREATED);\n+    int eventId = JsonPath.read(result.getResponse().getContentAsString(), \"$.event_id\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzczODQ5Nw=="}, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIxOTY0MQ==", "bodyText": "This wasn't the point of my comment. I have been suggesting this, but I think I need to make a stronger statement. Do not create methods like performPost. It makes tests hard to read and adapt. The DRY software engineering principle doesn't really apply to tests. In fact at Google we talk about DAMP tests.\n\nIn tests we can use the DAMP principle (\u201cDescriptive and Meaningful Phrases\u201d), which emphasizes readability over uniqueness. Applying this principle can introduce code redundancy (e.g., by repeating similar code), but it makes tests more obviously correct.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444219641", "createdAt": "2020-06-23T13:23:23Z", "author": {"login": "nikklassen"}, "path": "audit-log-module/audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/controller/AuditLogEventControllerTest.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.controller;\n+\n+import static org.junit.Assert.assertTrue;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.UUID;\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.web.servlet.MvcResult;\n+import com.fasterxml.jackson.core.JsonParseException;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.common.ApiEndpoint;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.validator.AuditLogEventValidator;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.jayway.jsonpath.JsonPath;\n+\n+public class AuditLogEventControllerTest extends BaseMockIT {\n+\n+  @Autowired AuditLogEventValidator validator;\n+\n+  private static String validAuditLogEvent;\n+\n+  private static String invalidAuditLogEvent;\n+\n+  private static ObjectMapper objMapper = new ObjectMapper();\n+\n+  @BeforeAll\n+  public static void loadEvents() throws JsonParseException, JsonMappingException, IOException {\n+    invalidAuditLogEvent =\n+        objMapper\n+            .readValue(\n+                AuditLogEventControllerTest.class.getResourceAsStream(\n+                    \"/invalid_audit_log_event.json\"),\n+                JsonNode.class)\n+            .toString();\n+\n+    validAuditLogEvent =\n+        objMapper\n+            .readValue(\n+                AuditLogEventControllerTest.class.getResourceAsStream(\n+                    \"/valid_audit_log_event.json\"),\n+                JsonNode.class)\n+            .toString();\n+  }\n+\n+  @Test\n+  public void shouldSaveAuditLogEvent() throws Exception {\n+    HttpHeaders headers = getCommonHeaders();\n+    headers.add(\"Authorization\", VALID_BEARER_TOKEN);\n+    MvcResult result =\n+        performPost(\n+            ApiEndpoint.EVENTS.getPath(), validAuditLogEvent, headers, StringUtils.EMPTY, CREATED);\n+    int eventId = JsonPath.read(result.getResponse().getContentAsString(), \"$.event_id\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzczODQ5Nw=="}, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIyNTk4NA==", "bodyText": "Relevant SO post: https://stackoverflow.com/questions/6453235/what-does-damp-not-dry-mean-when-talking-about-unit-tests", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444225984", "createdAt": "2020-06-23T13:32:22Z", "author": {"login": "nikklassen"}, "path": "audit-log-module/audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/controller/AuditLogEventControllerTest.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.controller;\n+\n+import static org.junit.Assert.assertTrue;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.UUID;\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.web.servlet.MvcResult;\n+import com.fasterxml.jackson.core.JsonParseException;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.common.ApiEndpoint;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.validator.AuditLogEventValidator;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.jayway.jsonpath.JsonPath;\n+\n+public class AuditLogEventControllerTest extends BaseMockIT {\n+\n+  @Autowired AuditLogEventValidator validator;\n+\n+  private static String validAuditLogEvent;\n+\n+  private static String invalidAuditLogEvent;\n+\n+  private static ObjectMapper objMapper = new ObjectMapper();\n+\n+  @BeforeAll\n+  public static void loadEvents() throws JsonParseException, JsonMappingException, IOException {\n+    invalidAuditLogEvent =\n+        objMapper\n+            .readValue(\n+                AuditLogEventControllerTest.class.getResourceAsStream(\n+                    \"/invalid_audit_log_event.json\"),\n+                JsonNode.class)\n+            .toString();\n+\n+    validAuditLogEvent =\n+        objMapper\n+            .readValue(\n+                AuditLogEventControllerTest.class.getResourceAsStream(\n+                    \"/valid_audit_log_event.json\"),\n+                JsonNode.class)\n+            .toString();\n+  }\n+\n+  @Test\n+  public void shouldSaveAuditLogEvent() throws Exception {\n+    HttpHeaders headers = getCommonHeaders();\n+    headers.add(\"Authorization\", VALID_BEARER_TOKEN);\n+    MvcResult result =\n+        performPost(\n+            ApiEndpoint.EVENTS.getPath(), validAuditLogEvent, headers, StringUtils.EMPTY, CREATED);\n+    int eventId = JsonPath.read(result.getResponse().getContentAsString(), \"$.event_id\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzczODQ5Nw=="}, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk4NjE2MQ==", "bodyText": "Thanks for sharing the SO post. I've not heard about DAMP principle before, hence followed DRY principle in tests. I've refactored the AuditLogEventControllerTest to apply DAMP principle for shouldSaveAuditLogEvent(), shouldReturnBadRequestForInvalidContent() methods.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444986161", "createdAt": "2020-06-24T15:35:37Z", "author": {"login": "dhanyak-btc"}, "path": "audit-log-module/audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/controller/AuditLogEventControllerTest.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.controller;\n+\n+import static org.junit.Assert.assertTrue;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.UUID;\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.web.servlet.MvcResult;\n+import com.fasterxml.jackson.core.JsonParseException;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.common.ApiEndpoint;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.validator.AuditLogEventValidator;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.jayway.jsonpath.JsonPath;\n+\n+public class AuditLogEventControllerTest extends BaseMockIT {\n+\n+  @Autowired AuditLogEventValidator validator;\n+\n+  private static String validAuditLogEvent;\n+\n+  private static String invalidAuditLogEvent;\n+\n+  private static ObjectMapper objMapper = new ObjectMapper();\n+\n+  @BeforeAll\n+  public static void loadEvents() throws JsonParseException, JsonMappingException, IOException {\n+    invalidAuditLogEvent =\n+        objMapper\n+            .readValue(\n+                AuditLogEventControllerTest.class.getResourceAsStream(\n+                    \"/invalid_audit_log_event.json\"),\n+                JsonNode.class)\n+            .toString();\n+\n+    validAuditLogEvent =\n+        objMapper\n+            .readValue(\n+                AuditLogEventControllerTest.class.getResourceAsStream(\n+                    \"/valid_audit_log_event.json\"),\n+                JsonNode.class)\n+            .toString();\n+  }\n+\n+  @Test\n+  public void shouldSaveAuditLogEvent() throws Exception {\n+    HttpHeaders headers = getCommonHeaders();\n+    headers.add(\"Authorization\", VALID_BEARER_TOKEN);\n+    MvcResult result =\n+        performPost(\n+            ApiEndpoint.EVENTS.getPath(), validAuditLogEvent, headers, StringUtils.EMPTY, CREATED);\n+    int eventId = JsonPath.read(result.getResponse().getContentAsString(), \"$.event_id\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzczODQ5Nw=="}, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDk1MTczOnYy", "diffSide": "RIGHT", "path": "audit-log-module/audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/controller/AuditLogEventControllerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODozNTo0MVrOGnMfKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDowMTo1MlrOGniQaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1MjIzNA==", "bodyText": "This test suite isn't for the FilterChainExceptionHandler. So I wouldn't mention it here. We are only testing that we get a \"Not Found\", it doesn't matter how that is implement.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443752234", "createdAt": "2020-06-22T18:35:41Z", "author": {"login": "nikklassen"}, "path": "audit-log-module/audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/controller/AuditLogEventControllerTest.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.controller;\n+\n+import static org.junit.Assert.assertTrue;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.UUID;\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.web.servlet.MvcResult;\n+import com.fasterxml.jackson.core.JsonParseException;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.common.ApiEndpoint;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.validator.AuditLogEventValidator;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.jayway.jsonpath.JsonPath;\n+\n+public class AuditLogEventControllerTest extends BaseMockIT {\n+\n+  @Autowired AuditLogEventValidator validator;\n+\n+  private static String validAuditLogEvent;\n+\n+  private static String invalidAuditLogEvent;\n+\n+  private static ObjectMapper objMapper = new ObjectMapper();\n+\n+  @BeforeAll\n+  public static void loadEvents() throws JsonParseException, JsonMappingException, IOException {\n+    invalidAuditLogEvent =\n+        objMapper\n+            .readValue(\n+                AuditLogEventControllerTest.class.getResourceAsStream(\n+                    \"/invalid_audit_log_event.json\"),\n+                JsonNode.class)\n+            .toString();\n+\n+    validAuditLogEvent =\n+        objMapper\n+            .readValue(\n+                AuditLogEventControllerTest.class.getResourceAsStream(\n+                    \"/valid_audit_log_event.json\"),\n+                JsonNode.class)\n+            .toString();\n+  }\n+\n+  @Test\n+  public void shouldSaveAuditLogEvent() throws Exception {\n+    HttpHeaders headers = getCommonHeaders();\n+    headers.add(\"Authorization\", VALID_BEARER_TOKEN);\n+    MvcResult result =\n+        performPost(\n+            ApiEndpoint.EVENTS.getPath(), validAuditLogEvent, headers, StringUtils.EMPTY, CREATED);\n+    int eventId = JsonPath.read(result.getResponse().getContentAsString(), \"$.event_id\");\n+    assertTrue(eventId > 0);\n+  }\n+\n+  @Test\n+  public void shouldReturnUnauthorized() throws Exception {\n+    HttpHeaders headers = getCommonHeaders();\n+    headers.add(\"Authorization\", INVALID_BEARER_TOKEN);\n+\n+    performPost(\n+        ApiEndpoint.EVENTS.getPath(), validAuditLogEvent, headers, \"Invalid token\", UNAUTHORIZED);\n+  }\n+\n+  @Test\n+  public void shouldReturnNotFoundForRestClientErrorException() throws Exception {\n+    HttpHeaders headers = getCommonHeaders();\n+    headers.add(\"Authorization\", \"Bearer \" + UUID.randomUUID().toString());\n+\n+    // expect FilterChainExceptionHandler extracts status code and error message from", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEwODkwNQ==", "bodyText": "Removed that comment from shouldReturnNotFoundForRestClientErrorException()", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444108905", "createdAt": "2020-06-23T10:01:52Z", "author": {"login": "dhanyak-btc"}, "path": "audit-log-module/audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/controller/AuditLogEventControllerTest.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.controller;\n+\n+import static org.junit.Assert.assertTrue;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.UUID;\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.web.servlet.MvcResult;\n+import com.fasterxml.jackson.core.JsonParseException;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.common.ApiEndpoint;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.validator.AuditLogEventValidator;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.jayway.jsonpath.JsonPath;\n+\n+public class AuditLogEventControllerTest extends BaseMockIT {\n+\n+  @Autowired AuditLogEventValidator validator;\n+\n+  private static String validAuditLogEvent;\n+\n+  private static String invalidAuditLogEvent;\n+\n+  private static ObjectMapper objMapper = new ObjectMapper();\n+\n+  @BeforeAll\n+  public static void loadEvents() throws JsonParseException, JsonMappingException, IOException {\n+    invalidAuditLogEvent =\n+        objMapper\n+            .readValue(\n+                AuditLogEventControllerTest.class.getResourceAsStream(\n+                    \"/invalid_audit_log_event.json\"),\n+                JsonNode.class)\n+            .toString();\n+\n+    validAuditLogEvent =\n+        objMapper\n+            .readValue(\n+                AuditLogEventControllerTest.class.getResourceAsStream(\n+                    \"/valid_audit_log_event.json\"),\n+                JsonNode.class)\n+            .toString();\n+  }\n+\n+  @Test\n+  public void shouldSaveAuditLogEvent() throws Exception {\n+    HttpHeaders headers = getCommonHeaders();\n+    headers.add(\"Authorization\", VALID_BEARER_TOKEN);\n+    MvcResult result =\n+        performPost(\n+            ApiEndpoint.EVENTS.getPath(), validAuditLogEvent, headers, StringUtils.EMPTY, CREATED);\n+    int eventId = JsonPath.read(result.getResponse().getContentAsString(), \"$.event_id\");\n+    assertTrue(eventId > 0);\n+  }\n+\n+  @Test\n+  public void shouldReturnUnauthorized() throws Exception {\n+    HttpHeaders headers = getCommonHeaders();\n+    headers.add(\"Authorization\", INVALID_BEARER_TOKEN);\n+\n+    performPost(\n+        ApiEndpoint.EVENTS.getPath(), validAuditLogEvent, headers, \"Invalid token\", UNAUTHORIZED);\n+  }\n+\n+  @Test\n+  public void shouldReturnNotFoundForRestClientErrorException() throws Exception {\n+    HttpHeaders headers = getCommonHeaders();\n+    headers.add(\"Authorization\", \"Bearer \" + UUID.randomUUID().toString());\n+\n+    // expect FilterChainExceptionHandler extracts status code and error message from", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1MjIzNA=="}, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDk1NzIxOnYy", "diffSide": "RIGHT", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/DateTimeUtils.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODozNzozNVrOGnMiqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTozNjo1N1rOGoX2nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1MzEyOA==", "bodyText": "This doesn't appear to be used by this PR", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443753128", "createdAt": "2020-06-22T18:37:35Z", "author": {"login": "nikklassen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/DateTimeUtils.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.common;\n+\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+\n+public final class DateTimeUtils {\n+\n+  private DateTimeUtils() {}\n+\n+  public static long getSystemDateTimestamp() {\n+    return Instant.now().toEpochMilli();\n+  }\n+\n+  public static long getSystemDateTimestamp(long days, long hours, long minutes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDExMDM1Mg==", "bodyText": "Removed the method from this class. Are you using any tools or STS plugins to find unused methods/variables?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444110352", "createdAt": "2020-06-23T10:04:26Z", "author": {"login": "dhanyak-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/DateTimeUtils.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.common;\n+\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+\n+public final class DateTimeUtils {\n+\n+  private DateTimeUtils() {}\n+\n+  public static long getSystemDateTimestamp() {\n+    return Instant.now().toEpochMilli();\n+  }\n+\n+  public static long getSystemDateTimestamp(long days, long hours, long minutes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1MzEyOA=="}, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIzMzYxOA==", "bodyText": "In this case I saw that you added this method, but I didn't see it anywhere else in the PR, but I used IntelliJ to double-check with the \"Find All References\" tool. In general IntelliJ is very good at highlighting these kinds of things. I can't speak for other tools because I find IntelliJ meets all my needs.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444233618", "createdAt": "2020-06-23T13:42:55Z", "author": {"login": "nikklassen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/DateTimeUtils.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.common;\n+\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+\n+public final class DateTimeUtils {\n+\n+  private DateTimeUtils() {}\n+\n+  public static long getSystemDateTimestamp() {\n+    return Instant.now().toEpochMilli();\n+  }\n+\n+  public static long getSystemDateTimestamp(long days, long hours, long minutes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1MzEyOA=="}, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk4NzAzNw==", "bodyText": "I've removed this class as it's not used by any other classes in this module or common-modules.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444987037", "createdAt": "2020-06-24T15:36:57Z", "author": {"login": "dhanyak-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/DateTimeUtils.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.common;\n+\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+\n+public final class DateTimeUtils {\n+\n+  private DateTimeUtils() {}\n+\n+  public static long getSystemDateTimestamp() {\n+    return Instant.now().toEpochMilli();\n+  }\n+\n+  public static long getSystemDateTimestamp(long days, long hours, long minutes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1MzEyOA=="}, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDk2Mzk1OnYy", "diffSide": "RIGHT", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/ErrorResponse.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODozOTo0MVrOGnMm1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTo0MDowNVrOGoX-0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1NDE5OA==", "bodyText": "Why are we trying to process HTML responses and pull out error details? We should be handling the exceptions before they are formatted as HTML.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443754198", "createdAt": "2020-06-22T18:39:41Z", "author": {"login": "nikklassen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/ErrorResponse.java", "diffHunk": "@@ -23,13 +28,53 @@\n @JsonSerialize(using = ErrorResponse.ErrorResponseSerializer.class)\n public class ErrorResponse {\n \n-  private String requestUri;\n+  private XLogger logger = XLoggerFactory.getXLogger(ErrorResponse.class.getName());\n \n-  private RestClientResponseException restClientResponseException;\n+  private String errorDescription;\n \n-  public ErrorResponse(String requestUri, RestClientResponseException restClientResponseException) {\n-    this.requestUri = requestUri;\n-    this.restClientResponseException = restClientResponseException;\n+  private String errorType;\n+\n+  private int status;\n+\n+  private long timestamp = Instant.now().toEpochMilli();\n+\n+  public ErrorResponse(RestClientResponseException restClientResponseException) {\n+    populateErrorFields(restClientResponseException);\n+  }\n+\n+  private void populateErrorFields(RestClientResponseException restClientResponseException) {\n+    status = restClientResponseException.getRawStatusCode();\n+    errorType = restClientResponseException.getClass().getSimpleName();\n+    errorDescription = restClientResponseException.getResponseBodyAsString();\n+\n+    // tomcat sets response body as html\n+    if (StringUtils.containsIgnoreCase(errorDescription, \"html\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDExMTkyOA==", "bodyText": "Exception is handled before returning the response to browser. Tomcat sets the response as HTML.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444111928", "createdAt": "2020-06-23T10:07:17Z", "author": {"login": "dhanyak-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/ErrorResponse.java", "diffHunk": "@@ -23,13 +28,53 @@\n @JsonSerialize(using = ErrorResponse.ErrorResponseSerializer.class)\n public class ErrorResponse {\n \n-  private String requestUri;\n+  private XLogger logger = XLoggerFactory.getXLogger(ErrorResponse.class.getName());\n \n-  private RestClientResponseException restClientResponseException;\n+  private String errorDescription;\n \n-  public ErrorResponse(String requestUri, RestClientResponseException restClientResponseException) {\n-    this.requestUri = requestUri;\n-    this.restClientResponseException = restClientResponseException;\n+  private String errorType;\n+\n+  private int status;\n+\n+  private long timestamp = Instant.now().toEpochMilli();\n+\n+  public ErrorResponse(RestClientResponseException restClientResponseException) {\n+    populateErrorFields(restClientResponseException);\n+  }\n+\n+  private void populateErrorFields(RestClientResponseException restClientResponseException) {\n+    status = restClientResponseException.getRawStatusCode();\n+    errorType = restClientResponseException.getClass().getSimpleName();\n+    errorDescription = restClientResponseException.getResponseBodyAsString();\n+\n+    // tomcat sets response body as html\n+    if (StringUtils.containsIgnoreCase(errorDescription, \"html\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1NDE5OA=="}, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIzNDIxMQ==", "bodyText": "This isn't an HTML server though, it's a REST server. We don't want any HTML responses.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444234211", "createdAt": "2020-06-23T13:43:42Z", "author": {"login": "nikklassen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/ErrorResponse.java", "diffHunk": "@@ -23,13 +28,53 @@\n @JsonSerialize(using = ErrorResponse.ErrorResponseSerializer.class)\n public class ErrorResponse {\n \n-  private String requestUri;\n+  private XLogger logger = XLoggerFactory.getXLogger(ErrorResponse.class.getName());\n \n-  private RestClientResponseException restClientResponseException;\n+  private String errorDescription;\n \n-  public ErrorResponse(String requestUri, RestClientResponseException restClientResponseException) {\n-    this.requestUri = requestUri;\n-    this.restClientResponseException = restClientResponseException;\n+  private String errorType;\n+\n+  private int status;\n+\n+  private long timestamp = Instant.now().toEpochMilli();\n+\n+  public ErrorResponse(RestClientResponseException restClientResponseException) {\n+    populateErrorFields(restClientResponseException);\n+  }\n+\n+  private void populateErrorFields(RestClientResponseException restClientResponseException) {\n+    status = restClientResponseException.getRawStatusCode();\n+    errorType = restClientResponseException.getClass().getSimpleName();\n+    errorDescription = restClientResponseException.getResponseBodyAsString();\n+\n+    // tomcat sets response body as html\n+    if (StringUtils.containsIgnoreCase(errorDescription, \"html\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1NDE5OA=="}, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk4OTEzOA==", "bodyText": "I've removed JSoup dependency, added ErrorController for handling Spring Boot Whitelabel Error. Reference: Custom Error in Spring Boot\nErrorController added to common-service to avoid duplication across services.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444989138", "createdAt": "2020-06-24T15:40:05Z", "author": {"login": "dhanyak-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/ErrorResponse.java", "diffHunk": "@@ -23,13 +28,53 @@\n @JsonSerialize(using = ErrorResponse.ErrorResponseSerializer.class)\n public class ErrorResponse {\n \n-  private String requestUri;\n+  private XLogger logger = XLoggerFactory.getXLogger(ErrorResponse.class.getName());\n \n-  private RestClientResponseException restClientResponseException;\n+  private String errorDescription;\n \n-  public ErrorResponse(String requestUri, RestClientResponseException restClientResponseException) {\n-    this.requestUri = requestUri;\n-    this.restClientResponseException = restClientResponseException;\n+  private String errorType;\n+\n+  private int status;\n+\n+  private long timestamp = Instant.now().toEpochMilli();\n+\n+  public ErrorResponse(RestClientResponseException restClientResponseException) {\n+    populateErrorFields(restClientResponseException);\n+  }\n+\n+  private void populateErrorFields(RestClientResponseException restClientResponseException) {\n+    status = restClientResponseException.getRawStatusCode();\n+    errorType = restClientResponseException.getClass().getSimpleName();\n+    errorDescription = restClientResponseException.getResponseBodyAsString();\n+\n+    // tomcat sets response body as html\n+    if (StringUtils.containsIgnoreCase(errorDescription, \"html\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1NDE5OA=="}, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDk3MTAzOnYy", "diffSide": "RIGHT", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/RestExceptionHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODo0MTo1OFrOGnMrTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzo0NDowM1rOGnp7AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1NTM0Mg==", "bodyText": "You've implemented serialization for ErrorResponse, so you don't need to return a ResponseEntity, just return the ErrorResponse. You can set the status code with @StatusCode to HttpStatus.Internal.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443755342", "createdAt": "2020-06-22T18:41:58Z", "author": {"login": "nikklassen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/RestExceptionHandler.java", "diffHunk": "@@ -1,19 +1,41 @@\n package com.google.cloud.healthcare.fdamystudies.common;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n import org.springframework.web.bind.annotation.ControllerAdvice;\n import org.springframework.web.bind.annotation.ExceptionHandler;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.springframework.web.client.RestClientResponseException;\n+import org.springframework.web.context.request.ServletWebRequest;\n import org.springframework.web.context.request.WebRequest;\n import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;\n \n @ControllerAdvice\n public class RestExceptionHandler extends ResponseEntityExceptionHandler {\n \n+  private static final Logger LOG = LoggerFactory.getLogger(RestExceptionHandler.class);\n+\n   @SuppressWarnings(\"rawtypes\")\n   @ExceptionHandler(Exception.class)\n   public ResponseEntity handleSystemException(Exception ex, WebRequest request) {\n+    String uri = ((ServletWebRequest) request).getRequest().getRequestURI();\n+    LOG.error(String.format(\"%s request failed with an exception\", uri), ex);\n     return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n         .body(ErrorCode.APPLICATION_ERROR);\n   }\n+\n+  @SuppressWarnings(\"rawtypes\")\n+  @ExceptionHandler(RestClientResponseException.class)\n+  public ResponseEntity handleRestClientResponseException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDExNjg5MA==", "bodyText": "I didn't find @statuscode annotation. I guess you mean @ResponseStatus. Refactored the code using @ResponseStatus.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444116890", "createdAt": "2020-06-23T10:16:14Z", "author": {"login": "dhanyak-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/RestExceptionHandler.java", "diffHunk": "@@ -1,19 +1,41 @@\n package com.google.cloud.healthcare.fdamystudies.common;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n import org.springframework.web.bind.annotation.ControllerAdvice;\n import org.springframework.web.bind.annotation.ExceptionHandler;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.springframework.web.client.RestClientResponseException;\n+import org.springframework.web.context.request.ServletWebRequest;\n import org.springframework.web.context.request.WebRequest;\n import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;\n \n @ControllerAdvice\n public class RestExceptionHandler extends ResponseEntityExceptionHandler {\n \n+  private static final Logger LOG = LoggerFactory.getLogger(RestExceptionHandler.class);\n+\n   @SuppressWarnings(\"rawtypes\")\n   @ExceptionHandler(Exception.class)\n   public ResponseEntity handleSystemException(Exception ex, WebRequest request) {\n+    String uri = ((ServletWebRequest) request).getRequest().getRequestURI();\n+    LOG.error(String.format(\"%s request failed with an exception\", uri), ex);\n     return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n         .body(ErrorCode.APPLICATION_ERROR);\n   }\n+\n+  @SuppressWarnings(\"rawtypes\")\n+  @ExceptionHandler(RestClientResponseException.class)\n+  public ResponseEntity handleRestClientResponseException(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1NTM0Mg=="}, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIzNDQ5Nw==", "bodyText": "Yes, thanks. That was what I meant.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444234497", "createdAt": "2020-06-23T13:44:03Z", "author": {"login": "nikklassen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/RestExceptionHandler.java", "diffHunk": "@@ -1,19 +1,41 @@\n package com.google.cloud.healthcare.fdamystudies.common;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n import org.springframework.web.bind.annotation.ControllerAdvice;\n import org.springframework.web.bind.annotation.ExceptionHandler;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.springframework.web.client.RestClientResponseException;\n+import org.springframework.web.context.request.ServletWebRequest;\n import org.springframework.web.context.request.WebRequest;\n import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;\n \n @ControllerAdvice\n public class RestExceptionHandler extends ResponseEntityExceptionHandler {\n \n+  private static final Logger LOG = LoggerFactory.getLogger(RestExceptionHandler.class);\n+\n   @SuppressWarnings(\"rawtypes\")\n   @ExceptionHandler(Exception.class)\n   public ResponseEntity handleSystemException(Exception ex, WebRequest request) {\n+    String uri = ((ServletWebRequest) request).getRequest().getRequestURI();\n+    LOG.error(String.format(\"%s request failed with an exception\", uri), ex);\n     return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n         .body(ErrorCode.APPLICATION_ERROR);\n   }\n+\n+  @SuppressWarnings(\"rawtypes\")\n+  @ExceptionHandler(RestClientResponseException.class)\n+  public ResponseEntity handleRestClientResponseException(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1NTM0Mg=="}, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDk5MzcwOnYy", "diffSide": "RIGHT", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/BaseTokenIntrospectionFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODo0OTozMFrOGnM5cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDoxNzo0OVrOGnizJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1ODk2MA==", "bodyText": "I don't think we should be forwarding the OAuth server's response here. I think we should just return a generic \"Unauthorized\" like in the \"not ACTIVE\" code path.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443758960", "createdAt": "2020-06-22T18:49:30Z", "author": {"login": "nikklassen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/BaseTokenIntrospectionFilter.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.filter;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectMapper;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectNode;\n+import java.io.IOException;\n+import java.util.Map;\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.http.server.PathContainer;\n+import org.springframework.web.util.pattern.PathPattern;\n+import org.springframework.web.util.pattern.PathPatternParser;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.service.OAuthService;\n+\n+public abstract class BaseTokenIntrospectionFilter implements Filter {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(BaseTokenIntrospectionFilter.class.getName());\n+\n+  public static final String TOKEN = \"token\";\n+\n+  public static final String ACTIVE = \"active\";\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Override\n+  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n+      throws IOException, ServletException {\n+    logger.entry(\n+        String.format(\"begin doFilter() for %s\", ((HttpServletRequest) request).getRequestURI()));\n+    HttpServletRequest req = (HttpServletRequest) request;\n+    if (checkPathAndHttpMethodMatches(req)) {\n+      logger.info(String.format(\"validate token for %s\", req.getRequestURI()));\n+\n+      String auth = req.getHeader(\"Authorization\");\n+      if (StringUtils.isEmpty(auth)) {\n+        logger.exit(\"token is empty, return 401 Unauthorized response\");\n+        setUnauthorizedResponse(response);\n+      } else {\n+        validateOAuthToken(request, response, chain, auth);\n+      }\n+    } else {\n+      logger.info(String.format(\"skip token validation for %s\", req.getRequestURI()));\n+      chain.doFilter(request, response);\n+    }\n+  }\n+\n+  private boolean checkPathAndHttpMethodMatches(HttpServletRequest req) {\n+    String method = req.getMethod().toUpperCase();\n+    for (Map.Entry<String, String[]> entry : getUriTemplateAndHttpMethodsMap().entrySet()) {\n+      if (ArrayUtils.contains(entry.getValue(), method)\n+          && checkPathMatches(entry.getKey(), req.getRequestURI())) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n+\n+  private static boolean checkPathMatches(String uriTemplate, String path) {\n+    PathPatternParser parser = new PathPatternParser();\n+    parser.setMatchOptionalTrailingSeparator(true);\n+    PathPattern p = parser.parse(uriTemplate);\n+    return p.matches(PathContainer.parsePath(path));\n+  }\n+\n+  private void validateOAuthToken(\n+      ServletRequest request, ServletResponse response, FilterChain chain, String auth)\n+      throws IOException, ServletException {\n+    String token = StringUtils.replace(auth, \"Bearer\", \"\").trim();\n+    ObjectNode params = getObjectNode();\n+    params.put(TOKEN, token);\n+    ResponseEntity<JsonNode> oauthResponse = oauthService.introspectToken(params);\n+    if (oauthResponse.getStatusCode().is2xxSuccessful()) {\n+      if (oauthResponse.getBody().get(ACTIVE).booleanValue()) {\n+        chain.doFilter(request, response);\n+      } else {\n+        logger.exit(\"token is invalid, return 401 Unauthorized response\");\n+        setUnauthorizedResponse(response);\n+      }\n+    } else {\n+      logger.exit(\n+          String.format(\n+              \"status=%d, response=%s\",\n+              oauthResponse.getStatusCodeValue(), oauthResponse.getBody()));\n+      HttpServletResponse res = (HttpServletResponse) response;\n+      res.setStatus(oauthResponse.getStatusCodeValue());\n+      res.setContentType(MediaType.APPLICATION_JSON_VALUE);\n+      res.getOutputStream().write(oauthResponse.getBody().toString().getBytes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDExNzc5OQ==", "bodyText": "Refactored the code to reuse setUnauthorizedResponse() method", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444117799", "createdAt": "2020-06-23T10:17:49Z", "author": {"login": "dhanyak-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/BaseTokenIntrospectionFilter.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.filter;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectMapper;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectNode;\n+import java.io.IOException;\n+import java.util.Map;\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.http.server.PathContainer;\n+import org.springframework.web.util.pattern.PathPattern;\n+import org.springframework.web.util.pattern.PathPatternParser;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.service.OAuthService;\n+\n+public abstract class BaseTokenIntrospectionFilter implements Filter {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(BaseTokenIntrospectionFilter.class.getName());\n+\n+  public static final String TOKEN = \"token\";\n+\n+  public static final String ACTIVE = \"active\";\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Override\n+  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n+      throws IOException, ServletException {\n+    logger.entry(\n+        String.format(\"begin doFilter() for %s\", ((HttpServletRequest) request).getRequestURI()));\n+    HttpServletRequest req = (HttpServletRequest) request;\n+    if (checkPathAndHttpMethodMatches(req)) {\n+      logger.info(String.format(\"validate token for %s\", req.getRequestURI()));\n+\n+      String auth = req.getHeader(\"Authorization\");\n+      if (StringUtils.isEmpty(auth)) {\n+        logger.exit(\"token is empty, return 401 Unauthorized response\");\n+        setUnauthorizedResponse(response);\n+      } else {\n+        validateOAuthToken(request, response, chain, auth);\n+      }\n+    } else {\n+      logger.info(String.format(\"skip token validation for %s\", req.getRequestURI()));\n+      chain.doFilter(request, response);\n+    }\n+  }\n+\n+  private boolean checkPathAndHttpMethodMatches(HttpServletRequest req) {\n+    String method = req.getMethod().toUpperCase();\n+    for (Map.Entry<String, String[]> entry : getUriTemplateAndHttpMethodsMap().entrySet()) {\n+      if (ArrayUtils.contains(entry.getValue(), method)\n+          && checkPathMatches(entry.getKey(), req.getRequestURI())) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n+\n+  private static boolean checkPathMatches(String uriTemplate, String path) {\n+    PathPatternParser parser = new PathPatternParser();\n+    parser.setMatchOptionalTrailingSeparator(true);\n+    PathPattern p = parser.parse(uriTemplate);\n+    return p.matches(PathContainer.parsePath(path));\n+  }\n+\n+  private void validateOAuthToken(\n+      ServletRequest request, ServletResponse response, FilterChain chain, String auth)\n+      throws IOException, ServletException {\n+    String token = StringUtils.replace(auth, \"Bearer\", \"\").trim();\n+    ObjectNode params = getObjectNode();\n+    params.put(TOKEN, token);\n+    ResponseEntity<JsonNode> oauthResponse = oauthService.introspectToken(params);\n+    if (oauthResponse.getStatusCode().is2xxSuccessful()) {\n+      if (oauthResponse.getBody().get(ACTIVE).booleanValue()) {\n+        chain.doFilter(request, response);\n+      } else {\n+        logger.exit(\"token is invalid, return 401 Unauthorized response\");\n+        setUnauthorizedResponse(response);\n+      }\n+    } else {\n+      logger.exit(\n+          String.format(\n+              \"status=%d, response=%s\",\n+              oauthResponse.getStatusCodeValue(), oauthResponse.getBody()));\n+      HttpServletResponse res = (HttpServletResponse) response;\n+      res.setStatus(oauthResponse.getStatusCodeValue());\n+      res.setContentType(MediaType.APPLICATION_JSON_VALUE);\n+      res.getOutputStream().write(oauthResponse.getBody().toString().getBytes());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1ODk2MA=="}, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NTAwMzEwOnYy", "diffSide": "RIGHT", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/FilterChainExceptionHandler.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODo1MjozMVrOGnM_gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODoxNDoxN1rOGodoGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2MDUxMg==", "bodyText": "I don't think this should be a filter. We want to handle most errors with @ExceptionHandler. For catching errors in other Filters I would put they try-catch logic in those classes.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443760512", "createdAt": "2020-06-22T18:52:31Z", "author": {"login": "nikklassen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/FilterChainExceptionHandler.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.google.cloud.healthcare.fdamystudies.filter;\n+\n+import java.io.IOException;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.springframework.web.client.HttpServerErrorException;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.JsonUtils;\n+\n+@Component\n+@Order(1)\n+public class FilterChainExceptionHandler extends OncePerRequestFilter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDExODgyMw==", "bodyText": "I referred the accepted answer in stackoverflow. How to manage exceptions thrown in filters in Spring?\nWe might need to duplicate exception handling when we add new filters. Also, I think there may be few audit log events related to exceptions so I think FilterChainExceptionHandler is better approach for handling exceptions in filters.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444118823", "createdAt": "2020-06-23T10:19:41Z", "author": {"login": "dhanyak-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/FilterChainExceptionHandler.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.google.cloud.healthcare.fdamystudies.filter;\n+\n+import java.io.IOException;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.springframework.web.client.HttpServerErrorException;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.JsonUtils;\n+\n+@Component\n+@Order(1)\n+public class FilterChainExceptionHandler extends OncePerRequestFilter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2MDUxMg=="}, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIzNzQ5Nw==", "bodyText": "I agree that this will do what you intend, but can you test how this approach interacts with Exceptions thrown from controller methods? We want the handling to be different, I don't want this Filter to be catching the Exceptions from Controllers because there will be a lot more logic to handle those. If this Filter doesn't catch those exceptions then it's probably ok to take this approach.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444237497", "createdAt": "2020-06-23T13:48:02Z", "author": {"login": "nikklassen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/FilterChainExceptionHandler.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.google.cloud.healthcare.fdamystudies.filter;\n+\n+import java.io.IOException;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.springframework.web.client.HttpServerErrorException;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.JsonUtils;\n+\n+@Component\n+@Order(1)\n+public class FilterChainExceptionHandler extends OncePerRequestFilter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2MDUxMg=="}, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk5MTA4Mg==", "bodyText": "I added String s=null; s.length(); to throw NPE from Service/Controller class. I noticed this NPE was handled by @ControllerAdvice RestExceptionHandler in logs.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444991082", "createdAt": "2020-06-24T15:42:54Z", "author": {"login": "dhanyak-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/FilterChainExceptionHandler.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.google.cloud.healthcare.fdamystudies.filter;\n+\n+import java.io.IOException;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.springframework.web.client.HttpServerErrorException;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.JsonUtils;\n+\n+@Component\n+@Order(1)\n+public class FilterChainExceptionHandler extends OncePerRequestFilter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2MDUxMg=="}, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA4MTYyNg==", "bodyText": "Ok, that's what we want. So I'm fine with keeping this to handle exceptions in the filters.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r445081626", "createdAt": "2020-06-24T18:14:17Z", "author": {"login": "nikklassen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/FilterChainExceptionHandler.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.google.cloud.healthcare.fdamystudies.filter;\n+\n+import java.io.IOException;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.springframework.web.client.HttpServerErrorException;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.JsonUtils;\n+\n+@Component\n+@Order(1)\n+public class FilterChainExceptionHandler extends OncePerRequestFilter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2MDUxMg=="}, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NTAwNTI0OnYy", "diffSide": "RIGHT", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/BaseServiceImpl.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODo1MzoxMlrOGnNAwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTo0NjoyMVrOGoYP2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2MDgzMg==", "bodyText": "avoid wrapping one-liners.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443760832", "createdAt": "2020-06-22T18:53:12Z", "author": {"login": "nikklassen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/BaseServiceImpl.java", "diffHunk": "@@ -9,83 +9,44 @@\n package com.google.cloud.healthcare.fdamystudies.service;\n \n import java.util.Collections;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpEntity;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpMethod;\n import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n import org.springframework.util.MultiValueMap;\n-import org.springframework.web.client.HttpClientErrorException;\n-import org.springframework.web.client.HttpServerErrorException;\n import org.springframework.web.client.RestTemplate;\n import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.node.ObjectNode;\n-import com.google.cloud.healthcare.fdamystudies.common.ErrorResponse;\n \n public abstract class BaseServiceImpl {\n \n-  private static final String REQUEST_FAILED_WITH_AN_EXCEPTION =\n-      \"%s request failed with an exception\";\n-\n-  private static final Logger LOG = LoggerFactory.getLogger(BaseServiceImpl.class);\n-\n-  @Autowired private ObjectMapper objectMapper;\n-\n   @Autowired private RestTemplate restTemplate;\n \n-  @SuppressWarnings(\"rawtypes\")\n-  protected ResponseEntity exchangeForJson(\n+  protected ResponseEntity<JsonNode> exchangeForJson(\n       String url,\n       HttpHeaders headers,\n       JsonNode request,\n       HttpMethod method,\n       Object... uriVariables) {\n     headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n     HttpEntity<JsonNode> requestEntity = new HttpEntity<>(request, headers);\n-    try {\n-      return restTemplate.exchange(url, method, requestEntity, JsonNode.class, uriVariables);\n-    } catch (HttpClientErrorException | HttpServerErrorException e) {\n-      LOG.error(String.format(REQUEST_FAILED_WITH_AN_EXCEPTION, url), e);\n-      ErrorResponse err = new ErrorResponse(url, e);\n-      return ResponseEntity.status(e.getRawStatusCode()).body(err);\n-    }\n+    return restTemplate.exchange(url, method, requestEntity, JsonNode.class, uriVariables);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEyMTEwNw==", "bodyText": "I agree with you. Initially this method had try..catch block but now exception handling moved to RestExceptionHandler and FilterChainExceptionHandler  so this method became one-liners.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444121107", "createdAt": "2020-06-23T10:23:59Z", "author": {"login": "dhanyak-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/BaseServiceImpl.java", "diffHunk": "@@ -9,83 +9,44 @@\n package com.google.cloud.healthcare.fdamystudies.service;\n \n import java.util.Collections;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpEntity;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpMethod;\n import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n import org.springframework.util.MultiValueMap;\n-import org.springframework.web.client.HttpClientErrorException;\n-import org.springframework.web.client.HttpServerErrorException;\n import org.springframework.web.client.RestTemplate;\n import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.node.ObjectNode;\n-import com.google.cloud.healthcare.fdamystudies.common.ErrorResponse;\n \n public abstract class BaseServiceImpl {\n \n-  private static final String REQUEST_FAILED_WITH_AN_EXCEPTION =\n-      \"%s request failed with an exception\";\n-\n-  private static final Logger LOG = LoggerFactory.getLogger(BaseServiceImpl.class);\n-\n-  @Autowired private ObjectMapper objectMapper;\n-\n   @Autowired private RestTemplate restTemplate;\n \n-  @SuppressWarnings(\"rawtypes\")\n-  protected ResponseEntity exchangeForJson(\n+  protected ResponseEntity<JsonNode> exchangeForJson(\n       String url,\n       HttpHeaders headers,\n       JsonNode request,\n       HttpMethod method,\n       Object... uriVariables) {\n     headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n     HttpEntity<JsonNode> requestEntity = new HttpEntity<>(request, headers);\n-    try {\n-      return restTemplate.exchange(url, method, requestEntity, JsonNode.class, uriVariables);\n-    } catch (HttpClientErrorException | HttpServerErrorException e) {\n-      LOG.error(String.format(REQUEST_FAILED_WITH_AN_EXCEPTION, url), e);\n-      ErrorResponse err = new ErrorResponse(url, e);\n-      return ResponseEntity.status(e.getRawStatusCode()).body(err);\n-    }\n+    return restTemplate.exchange(url, method, requestEntity, JsonNode.class, uriVariables);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2MDgzMg=="}, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM5MDkyOA==", "bodyText": "In that case that mean you don't need BaseServiceImpl anymore. The AuditLogEventService isn't doing anything with the methods anyways.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444390928", "createdAt": "2020-06-23T17:30:41Z", "author": {"login": "nikklassen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/BaseServiceImpl.java", "diffHunk": "@@ -9,83 +9,44 @@\n package com.google.cloud.healthcare.fdamystudies.service;\n \n import java.util.Collections;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpEntity;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpMethod;\n import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n import org.springframework.util.MultiValueMap;\n-import org.springframework.web.client.HttpClientErrorException;\n-import org.springframework.web.client.HttpServerErrorException;\n import org.springframework.web.client.RestTemplate;\n import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.node.ObjectNode;\n-import com.google.cloud.healthcare.fdamystudies.common.ErrorResponse;\n \n public abstract class BaseServiceImpl {\n \n-  private static final String REQUEST_FAILED_WITH_AN_EXCEPTION =\n-      \"%s request failed with an exception\";\n-\n-  private static final Logger LOG = LoggerFactory.getLogger(BaseServiceImpl.class);\n-\n-  @Autowired private ObjectMapper objectMapper;\n-\n   @Autowired private RestTemplate restTemplate;\n \n-  @SuppressWarnings(\"rawtypes\")\n-  protected ResponseEntity exchangeForJson(\n+  protected ResponseEntity<JsonNode> exchangeForJson(\n       String url,\n       HttpHeaders headers,\n       JsonNode request,\n       HttpMethod method,\n       Object... uriVariables) {\n     headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n     HttpEntity<JsonNode> requestEntity = new HttpEntity<>(request, headers);\n-    try {\n-      return restTemplate.exchange(url, method, requestEntity, JsonNode.class, uriVariables);\n-    } catch (HttpClientErrorException | HttpServerErrorException e) {\n-      LOG.error(String.format(REQUEST_FAILED_WITH_AN_EXCEPTION, url), e);\n-      ErrorResponse err = new ErrorResponse(url, e);\n-      return ResponseEntity.status(e.getRawStatusCode()).body(err);\n-    }\n+    return restTemplate.exchange(url, method, requestEntity, JsonNode.class, uriVariables);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2MDgzMg=="}, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk5MzQ5Ng==", "bodyText": "I agree with you, but I've already implemented the Service classes using these methods. We'll keep this class.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444993496", "createdAt": "2020-06-24T15:46:21Z", "author": {"login": "dhanyak-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/BaseServiceImpl.java", "diffHunk": "@@ -9,83 +9,44 @@\n package com.google.cloud.healthcare.fdamystudies.service;\n \n import java.util.Collections;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpEntity;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpMethod;\n import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n import org.springframework.util.MultiValueMap;\n-import org.springframework.web.client.HttpClientErrorException;\n-import org.springframework.web.client.HttpServerErrorException;\n import org.springframework.web.client.RestTemplate;\n import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.node.ObjectNode;\n-import com.google.cloud.healthcare.fdamystudies.common.ErrorResponse;\n \n public abstract class BaseServiceImpl {\n \n-  private static final String REQUEST_FAILED_WITH_AN_EXCEPTION =\n-      \"%s request failed with an exception\";\n-\n-  private static final Logger LOG = LoggerFactory.getLogger(BaseServiceImpl.class);\n-\n-  @Autowired private ObjectMapper objectMapper;\n-\n   @Autowired private RestTemplate restTemplate;\n \n-  @SuppressWarnings(\"rawtypes\")\n-  protected ResponseEntity exchangeForJson(\n+  protected ResponseEntity<JsonNode> exchangeForJson(\n       String url,\n       HttpHeaders headers,\n       JsonNode request,\n       HttpMethod method,\n       Object... uriVariables) {\n     headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n     HttpEntity<JsonNode> requestEntity = new HttpEntity<>(request, headers);\n-    try {\n-      return restTemplate.exchange(url, method, requestEntity, JsonNode.class, uriVariables);\n-    } catch (HttpClientErrorException | HttpServerErrorException e) {\n-      LOG.error(String.format(REQUEST_FAILED_WITH_AN_EXCEPTION, url), e);\n-      ErrorResponse err = new ErrorResponse(url, e);\n-      return ResponseEntity.status(e.getRawStatusCode()).body(err);\n-    }\n+    return restTemplate.exchange(url, method, requestEntity, JsonNode.class, uriVariables);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2MDgzMg=="}, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NTAwNjYyOnYy", "diffSide": "RIGHT", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/BaseServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODo1MzozN1rOGnNBmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDoyNDoxOFrOGnjA0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2MTA1MQ==", "bodyText": "avoid wrapping one-liners.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r443761051", "createdAt": "2020-06-22T18:53:37Z", "author": {"login": "nikklassen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/BaseServiceImpl.java", "diffHunk": "@@ -9,83 +9,44 @@\n package com.google.cloud.healthcare.fdamystudies.service;\n \n import java.util.Collections;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpEntity;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpMethod;\n import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n import org.springframework.util.MultiValueMap;\n-import org.springframework.web.client.HttpClientErrorException;\n-import org.springframework.web.client.HttpServerErrorException;\n import org.springframework.web.client.RestTemplate;\n import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.node.ObjectNode;\n-import com.google.cloud.healthcare.fdamystudies.common.ErrorResponse;\n \n public abstract class BaseServiceImpl {\n \n-  private static final String REQUEST_FAILED_WITH_AN_EXCEPTION =\n-      \"%s request failed with an exception\";\n-\n-  private static final Logger LOG = LoggerFactory.getLogger(BaseServiceImpl.class);\n-\n-  @Autowired private ObjectMapper objectMapper;\n-\n   @Autowired private RestTemplate restTemplate;\n \n-  @SuppressWarnings(\"rawtypes\")\n-  protected ResponseEntity exchangeForJson(\n+  protected ResponseEntity<JsonNode> exchangeForJson(\n       String url,\n       HttpHeaders headers,\n       JsonNode request,\n       HttpMethod method,\n       Object... uriVariables) {\n     headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n     HttpEntity<JsonNode> requestEntity = new HttpEntity<>(request, headers);\n-    try {\n-      return restTemplate.exchange(url, method, requestEntity, JsonNode.class, uriVariables);\n-    } catch (HttpClientErrorException | HttpServerErrorException e) {\n-      LOG.error(String.format(REQUEST_FAILED_WITH_AN_EXCEPTION, url), e);\n-      ErrorResponse err = new ErrorResponse(url, e);\n-      return ResponseEntity.status(e.getRawStatusCode()).body(err);\n-    }\n+    return restTemplate.exchange(url, method, requestEntity, JsonNode.class, uriVariables);\n   }\n \n-  @SuppressWarnings(\"rawtypes\")\n-  protected ResponseEntity exchangeForJson(\n+  protected ResponseEntity<JsonNode> exchangeForJson(\n       String url,\n       HttpHeaders headers,\n       MultiValueMap<String, String> request,\n       HttpMethod method,\n       Object... uriVariables) {\n     headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n     HttpEntity<MultiValueMap<String, String>> requestEntity = new HttpEntity<>(request, headers);\n-    try {\n-      return restTemplate.exchange(url, method, requestEntity, JsonNode.class, uriVariables);\n-    } catch (HttpClientErrorException | HttpServerErrorException e) {\n-      LOG.error(String.format(REQUEST_FAILED_WITH_AN_EXCEPTION, url), e);\n-      ErrorResponse err = new ErrorResponse(url, e);\n-      return ResponseEntity.status(e.getRawStatusCode()).body(err);\n-    }\n-  }\n-\n-  @SuppressWarnings(\"rawtypes\")\n-  protected ResponseEntity getForJson(String url, Object... uriVariables) {\n-    try {\n-      return restTemplate.getForEntity(url, JsonNode.class, uriVariables);\n-    } catch (HttpClientErrorException | HttpServerErrorException e) {\n-      LOG.error(String.format(REQUEST_FAILED_WITH_AN_EXCEPTION, url), e);\n-      ErrorResponse err = new ErrorResponse(url, e);\n-      return ResponseEntity.status(e.getRawStatusCode()).body(err);\n-    }\n+    return restTemplate.exchange(url, method, requestEntity, JsonNode.class, uriVariables);\n   }\n \n-  protected ObjectNode getObjectNode() {\n-    return objectMapper.createObjectNode();\n+  protected ResponseEntity<JsonNode> getForJson(String url, Object... uriVariables) {\n+    return restTemplate.getForEntity(url, JsonNode.class, uriVariables);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEyMTI5OA==", "bodyText": "I agree with you. Initially this method had try..catch block but now exception handling moved to RestExceptionHandler and FilterChainExceptionHandler so this method became one-liners.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444121298", "createdAt": "2020-06-23T10:24:18Z", "author": {"login": "dhanyak-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/BaseServiceImpl.java", "diffHunk": "@@ -9,83 +9,44 @@\n package com.google.cloud.healthcare.fdamystudies.service;\n \n import java.util.Collections;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpEntity;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpMethod;\n import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n import org.springframework.util.MultiValueMap;\n-import org.springframework.web.client.HttpClientErrorException;\n-import org.springframework.web.client.HttpServerErrorException;\n import org.springframework.web.client.RestTemplate;\n import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.node.ObjectNode;\n-import com.google.cloud.healthcare.fdamystudies.common.ErrorResponse;\n \n public abstract class BaseServiceImpl {\n \n-  private static final String REQUEST_FAILED_WITH_AN_EXCEPTION =\n-      \"%s request failed with an exception\";\n-\n-  private static final Logger LOG = LoggerFactory.getLogger(BaseServiceImpl.class);\n-\n-  @Autowired private ObjectMapper objectMapper;\n-\n   @Autowired private RestTemplate restTemplate;\n \n-  @SuppressWarnings(\"rawtypes\")\n-  protected ResponseEntity exchangeForJson(\n+  protected ResponseEntity<JsonNode> exchangeForJson(\n       String url,\n       HttpHeaders headers,\n       JsonNode request,\n       HttpMethod method,\n       Object... uriVariables) {\n     headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n     HttpEntity<JsonNode> requestEntity = new HttpEntity<>(request, headers);\n-    try {\n-      return restTemplate.exchange(url, method, requestEntity, JsonNode.class, uriVariables);\n-    } catch (HttpClientErrorException | HttpServerErrorException e) {\n-      LOG.error(String.format(REQUEST_FAILED_WITH_AN_EXCEPTION, url), e);\n-      ErrorResponse err = new ErrorResponse(url, e);\n-      return ResponseEntity.status(e.getRawStatusCode()).body(err);\n-    }\n+    return restTemplate.exchange(url, method, requestEntity, JsonNode.class, uriVariables);\n   }\n \n-  @SuppressWarnings(\"rawtypes\")\n-  protected ResponseEntity exchangeForJson(\n+  protected ResponseEntity<JsonNode> exchangeForJson(\n       String url,\n       HttpHeaders headers,\n       MultiValueMap<String, String> request,\n       HttpMethod method,\n       Object... uriVariables) {\n     headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n     HttpEntity<MultiValueMap<String, String>> requestEntity = new HttpEntity<>(request, headers);\n-    try {\n-      return restTemplate.exchange(url, method, requestEntity, JsonNode.class, uriVariables);\n-    } catch (HttpClientErrorException | HttpServerErrorException e) {\n-      LOG.error(String.format(REQUEST_FAILED_WITH_AN_EXCEPTION, url), e);\n-      ErrorResponse err = new ErrorResponse(url, e);\n-      return ResponseEntity.status(e.getRawStatusCode()).body(err);\n-    }\n-  }\n-\n-  @SuppressWarnings(\"rawtypes\")\n-  protected ResponseEntity getForJson(String url, Object... uriVariables) {\n-    try {\n-      return restTemplate.getForEntity(url, JsonNode.class, uriVariables);\n-    } catch (HttpClientErrorException | HttpServerErrorException e) {\n-      LOG.error(String.format(REQUEST_FAILED_WITH_AN_EXCEPTION, url), e);\n-      ErrorResponse err = new ErrorResponse(url, e);\n-      return ResponseEntity.status(e.getRawStatusCode()).body(err);\n-    }\n+    return restTemplate.exchange(url, method, requestEntity, JsonNode.class, uriVariables);\n   }\n \n-  protected ObjectNode getObjectNode() {\n-    return objectMapper.createObjectNode();\n+  protected ResponseEntity<JsonNode> getForJson(String url, Object... uriVariables) {\n+    return restTemplate.getForEntity(url, JsonNode.class, uriVariables);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2MTA1MQ=="}, "originalCommit": {"oid": "78db1c61d867b77fd4025c62d9cf5c65dc7afed5"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzkwNjU3OnYy", "diffSide": "RIGHT", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/RestExceptionHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzoyNjozMVrOGnpJVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTo0Nzo1MVrOGoYTqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIyMTc4MA==", "bodyText": "You don't need to expose implementation details to your user. You've logged the reason so you know what happened here. Also, according to the Javadocs for @ResponseStatus, you shouldn't use reason for REST endpoints.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444221780", "createdAt": "2020-06-23T13:26:31Z", "author": {"login": "nikklassen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/RestExceptionHandler.java", "diffHunk": "@@ -26,16 +27,18 @@ public ResponseEntity handleSystemException(Exception ex, WebRequest request) {\n         .body(ErrorCode.APPLICATION_ERROR);\n   }\n \n-  @SuppressWarnings(\"rawtypes\")\n   @ExceptionHandler(RestClientResponseException.class)\n-  public ResponseEntity handleRestClientResponseException(\n+  @ResponseStatus(\n+      code = HttpStatus.INTERNAL_SERVER_ERROR,\n+      reason = \"request failed due to RestClientResponseException\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d8f03e1b280fcd6e7f280e821bc5d47b2cc5e57"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk5NDQ3NQ==", "bodyText": "Removed 'reason' from @ResponseStatus", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r444994475", "createdAt": "2020-06-24T15:47:51Z", "author": {"login": "dhanyak-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/RestExceptionHandler.java", "diffHunk": "@@ -26,16 +27,18 @@ public ResponseEntity handleSystemException(Exception ex, WebRequest request) {\n         .body(ErrorCode.APPLICATION_ERROR);\n   }\n \n-  @SuppressWarnings(\"rawtypes\")\n   @ExceptionHandler(RestClientResponseException.class)\n-  public ResponseEntity handleRestClientResponseException(\n+  @ResponseStatus(\n+      code = HttpStatus.INTERNAL_SERVER_ERROR,\n+      reason = \"request failed due to RestClientResponseException\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIyMTc4MA=="}, "originalCommit": {"oid": "5d8f03e1b280fcd6e7f280e821bc5d47b2cc5e57"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzE3ODA0OnYy", "diffSide": "RIGHT", "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/mapper/AuditLogEventMapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzo1OTowMFrOGodHZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNToxMDozOVrOGorlMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3MzI1NA==", "bodyText": "A convention we use at Google is to have verbs be consistent to the same data entity. So you've got two methods here starting with to so it's a bit more confusing about the types involved. Since the type this class is focusing is the AuditLogEvent you can make that more clear by calling this fromAuditLogEventRequest. The other method name is still correct. This way the mapper class name always reflects the data entity type, and the method name always refers to the other type involved.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r445073254", "createdAt": "2020-06-24T17:59:00Z", "author": {"login": "nikklassen"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/mapper/AuditLogEventMapper.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.google.cloud.healthcare.fdamystudies.auditlog.mapper;\n+\n+import java.time.Instant;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.model.AuditLogEventEntity;\n+import com.google.cloud.healthcare.fdamystudies.beans.AuditLogEventRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.AuditLogEventResponse;\n+\n+public final class AuditLogEventMapper {\n+\n+  private AuditLogEventMapper() {}\n+\n+  public static AuditLogEventEntity toAuditLogEventEntity(AuditLogEventRequest aleRequest) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c94de2235c2e7133899263391327d5647b6bc2"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMxMDI1Ng==", "bodyText": "renamed to fromAuditLogEventRequest(AuditLogEventRequest aleRequest)", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r445310256", "createdAt": "2020-06-25T05:10:39Z", "author": {"login": "dhanyak-btc"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/mapper/AuditLogEventMapper.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.google.cloud.healthcare.fdamystudies.auditlog.mapper;\n+\n+import java.time.Instant;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.model.AuditLogEventEntity;\n+import com.google.cloud.healthcare.fdamystudies.beans.AuditLogEventRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.AuditLogEventResponse;\n+\n+public final class AuditLogEventMapper {\n+\n+  private AuditLogEventMapper() {}\n+\n+  public static AuditLogEventEntity toAuditLogEventEntity(AuditLogEventRequest aleRequest) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3MzI1NA=="}, "originalCommit": {"oid": "68c94de2235c2e7133899263391327d5647b6bc2"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzIwMTk1OnYy", "diffSide": "RIGHT", "path": "audit-log-module/audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/controller/AuditLogEventControllerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODowNjoxMlrOGodWzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNjozNDowOVrOGotJQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3NzE5OA==", "bodyText": "This is a great reference example of how a test should be written. Please pass this along to the rest of the team as an example of a meaningful assertion that your test succeeded, without the test being too busy asserting everything.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r445077198", "createdAt": "2020-06-24T18:06:12Z", "author": {"login": "nikklassen"}, "path": "audit-log-module/audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/controller/AuditLogEventControllerTest.java", "diffHunk": "@@ -8,62 +8,65 @@\n \n package com.google.cloud.healthcare.fdamystudies.auditlog.controller;\n \n-import static org.junit.Assert.assertTrue;\n-import java.io.IOException;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.asJsonString;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.readJsonFile;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import java.time.Instant;\n import java.util.Collections;\n import java.util.UUID;\n-import org.junit.jupiter.api.BeforeAll;\n+import org.apache.commons.lang3.RandomStringUtils;\n import org.junit.jupiter.api.Test;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.skyscreamer.jsonassert.JSONCompareMode;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.MediaType;\n import org.springframework.test.web.servlet.MvcResult;\n-import com.fasterxml.jackson.core.JsonParseException;\n-import com.fasterxml.jackson.databind.JsonMappingException;\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n import com.google.cloud.healthcare.fdamystudies.auditlog.common.ApiEndpoint;\n-import com.google.cloud.healthcare.fdamystudies.auditlog.validator.AuditLogEventValidator;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.model.AuditLogEventEntity;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.repository.AuditLogEventRepository;\n+import com.google.cloud.healthcare.fdamystudies.beans.AuditLogEventRequest;\n import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n import com.jayway.jsonpath.JsonPath;\n \n public class AuditLogEventControllerTest extends BaseMockIT {\n \n-  @Autowired AuditLogEventValidator validator;\n-\n-  private static String validAuditLogEvent;\n-\n-  private static String invalidAuditLogEvent;\n-\n-  private static ObjectMapper objMapper = new ObjectMapper();\n-\n-  @BeforeAll\n-  public static void loadEvents() throws JsonParseException, JsonMappingException, IOException {\n-    invalidAuditLogEvent =\n-        objMapper\n-            .readValue(\n-                AuditLogEventControllerTest.class.getResourceAsStream(\n-                    \"/invalid_audit_log_event.json\"),\n-                JsonNode.class)\n-            .toString();\n-\n-    validAuditLogEvent =\n-        objMapper\n-            .readValue(\n-                AuditLogEventControllerTest.class.getResourceAsStream(\n-                    \"/valid_audit_log_event.json\"),\n-                JsonNode.class)\n-            .toString();\n-  }\n+  @Autowired private AuditLogEventRepository repository;\n \n   @Test\n   public void shouldSaveAuditLogEvent() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c94de2235c2e7133899263391327d5647b6bc2"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMzNTg3Mw==", "bodyText": "Thanks for the comments, I've asked the team to consider audit-log-service as a reference for writing integration tests.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r445335873", "createdAt": "2020-06-25T06:34:09Z", "author": {"login": "dhanyak-btc"}, "path": "audit-log-module/audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/controller/AuditLogEventControllerTest.java", "diffHunk": "@@ -8,62 +8,65 @@\n \n package com.google.cloud.healthcare.fdamystudies.auditlog.controller;\n \n-import static org.junit.Assert.assertTrue;\n-import java.io.IOException;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.asJsonString;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.readJsonFile;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import java.time.Instant;\n import java.util.Collections;\n import java.util.UUID;\n-import org.junit.jupiter.api.BeforeAll;\n+import org.apache.commons.lang3.RandomStringUtils;\n import org.junit.jupiter.api.Test;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.skyscreamer.jsonassert.JSONCompareMode;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.MediaType;\n import org.springframework.test.web.servlet.MvcResult;\n-import com.fasterxml.jackson.core.JsonParseException;\n-import com.fasterxml.jackson.databind.JsonMappingException;\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n import com.google.cloud.healthcare.fdamystudies.auditlog.common.ApiEndpoint;\n-import com.google.cloud.healthcare.fdamystudies.auditlog.validator.AuditLogEventValidator;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.model.AuditLogEventEntity;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.repository.AuditLogEventRepository;\n+import com.google.cloud.healthcare.fdamystudies.beans.AuditLogEventRequest;\n import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n import com.jayway.jsonpath.JsonPath;\n \n public class AuditLogEventControllerTest extends BaseMockIT {\n \n-  @Autowired AuditLogEventValidator validator;\n-\n-  private static String validAuditLogEvent;\n-\n-  private static String invalidAuditLogEvent;\n-\n-  private static ObjectMapper objMapper = new ObjectMapper();\n-\n-  @BeforeAll\n-  public static void loadEvents() throws JsonParseException, JsonMappingException, IOException {\n-    invalidAuditLogEvent =\n-        objMapper\n-            .readValue(\n-                AuditLogEventControllerTest.class.getResourceAsStream(\n-                    \"/invalid_audit_log_event.json\"),\n-                JsonNode.class)\n-            .toString();\n-\n-    validAuditLogEvent =\n-        objMapper\n-            .readValue(\n-                AuditLogEventControllerTest.class.getResourceAsStream(\n-                    \"/valid_audit_log_event.json\"),\n-                JsonNode.class)\n-            .toString();\n-  }\n+  @Autowired private AuditLogEventRepository repository;\n \n   @Test\n   public void shouldSaveAuditLogEvent() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3NzE5OA=="}, "originalCommit": {"oid": "68c94de2235c2e7133899263391327d5647b6bc2"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzIxNDE5OnYy", "diffSide": "RIGHT", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/exceptions/GlobalExceptionHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODoxMDowNlrOGodfJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjoxOTowMlrOGpCHzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3OTMzMg==", "bodyText": "You can remove this now that there are no rawtypes involved.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r445079332", "createdAt": "2020-06-24T18:10:06Z", "author": {"login": "nikklassen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/exceptions/GlobalExceptionHandler.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.exceptions;\n+\n+import javax.validation.ConstraintViolation;\n+import javax.validation.ConstraintViolationException;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.converter.HttpMessageNotReadableException;\n+import org.springframework.validation.FieldError;\n+import org.springframework.web.bind.MethodArgumentNotValidException;\n+import org.springframework.web.bind.MissingRequestHeaderException;\n+import org.springframework.web.bind.annotation.ControllerAdvice;\n+import org.springframework.web.bind.annotation.ExceptionHandler;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+import org.springframework.web.client.HttpClientErrorException.BadRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.ValidationErrorResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.ValidationErrorResponse.Violation;\n+\n+@ControllerAdvice\n+public class GlobalExceptionHandler {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(GlobalExceptionHandler.class.getName());\n+\n+  @ExceptionHandler(BadRequest.class)\n+  @ResponseStatus(HttpStatus.BAD_REQUEST)\n+  public void handleBadRequest() {}\n+\n+  @SuppressWarnings(\"rawtypes\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c94de2235c2e7133899263391327d5647b6bc2"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMzNjIwMw==", "bodyText": "I removed that but STS IDE shows:\nConstraintViolation is a raw type. References to generic type ConstraintViolation should be parameterized", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r445336203", "createdAt": "2020-06-25T06:35:01Z", "author": {"login": "dhanyak-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/exceptions/GlobalExceptionHandler.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.exceptions;\n+\n+import javax.validation.ConstraintViolation;\n+import javax.validation.ConstraintViolationException;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.converter.HttpMessageNotReadableException;\n+import org.springframework.validation.FieldError;\n+import org.springframework.web.bind.MethodArgumentNotValidException;\n+import org.springframework.web.bind.MissingRequestHeaderException;\n+import org.springframework.web.bind.annotation.ControllerAdvice;\n+import org.springframework.web.bind.annotation.ExceptionHandler;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+import org.springframework.web.client.HttpClientErrorException.BadRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.ValidationErrorResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.ValidationErrorResponse.Violation;\n+\n+@ControllerAdvice\n+public class GlobalExceptionHandler {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(GlobalExceptionHandler.class.getName());\n+\n+  @ExceptionHandler(BadRequest.class)\n+  @ResponseStatus(HttpStatus.BAD_REQUEST)\n+  public void handleBadRequest() {}\n+\n+  @SuppressWarnings(\"rawtypes\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3OTMzMg=="}, "originalCommit": {"oid": "68c94de2235c2e7133899263391327d5647b6bc2"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY1NjgxMg==", "bodyText": "You can always use <?>, i.e. ConstraintViolation<?>, instead of RawTypes, unless you are trying to circumvent the type system.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r445656812", "createdAt": "2020-06-25T15:45:18Z", "author": {"login": "nikklassen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/exceptions/GlobalExceptionHandler.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.exceptions;\n+\n+import javax.validation.ConstraintViolation;\n+import javax.validation.ConstraintViolationException;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.converter.HttpMessageNotReadableException;\n+import org.springframework.validation.FieldError;\n+import org.springframework.web.bind.MethodArgumentNotValidException;\n+import org.springframework.web.bind.MissingRequestHeaderException;\n+import org.springframework.web.bind.annotation.ControllerAdvice;\n+import org.springframework.web.bind.annotation.ExceptionHandler;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+import org.springframework.web.client.HttpClientErrorException.BadRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.ValidationErrorResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.ValidationErrorResponse.Violation;\n+\n+@ControllerAdvice\n+public class GlobalExceptionHandler {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(GlobalExceptionHandler.class.getName());\n+\n+  @ExceptionHandler(BadRequest.class)\n+  @ResponseStatus(HttpStatus.BAD_REQUEST)\n+  public void handleBadRequest() {}\n+\n+  @SuppressWarnings(\"rawtypes\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3OTMzMg=="}, "originalCommit": {"oid": "68c94de2235c2e7133899263391327d5647b6bc2"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3OTU2NQ==", "bodyText": "Removed @SuppressWarnings(\"rawtypes\")", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r445679565", "createdAt": "2020-06-25T16:19:02Z", "author": {"login": "dhanyak-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/exceptions/GlobalExceptionHandler.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.exceptions;\n+\n+import javax.validation.ConstraintViolation;\n+import javax.validation.ConstraintViolationException;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.converter.HttpMessageNotReadableException;\n+import org.springframework.validation.FieldError;\n+import org.springframework.web.bind.MethodArgumentNotValidException;\n+import org.springframework.web.bind.MissingRequestHeaderException;\n+import org.springframework.web.bind.annotation.ControllerAdvice;\n+import org.springframework.web.bind.annotation.ExceptionHandler;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+import org.springframework.web.client.HttpClientErrorException.BadRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.ValidationErrorResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.ValidationErrorResponse.Violation;\n+\n+@ControllerAdvice\n+public class GlobalExceptionHandler {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(GlobalExceptionHandler.class.getName());\n+\n+  @ExceptionHandler(BadRequest.class)\n+  @ResponseStatus(HttpStatus.BAD_REQUEST)\n+  public void handleBadRequest() {}\n+\n+  @SuppressWarnings(\"rawtypes\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3OTMzMg=="}, "originalCommit": {"oid": "68c94de2235c2e7133899263391327d5647b6bc2"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzIyMDQ2OnYy", "diffSide": "RIGHT", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/exceptions/GlobalExceptionHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODoxMjowNFrOGodjVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjoxODo0NFrOGpCHJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA4MDQwNg==", "bodyText": "I would move these down to the TRACE level. These are definitely helpful for debugging, but since they are caused by users we don't want them causing error log spam with malicious inputs. The error log level can be reserved for system exceptions and user requests that are dangerous.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r445080406", "createdAt": "2020-06-24T18:12:04Z", "author": {"login": "nikklassen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/exceptions/GlobalExceptionHandler.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.exceptions;\n+\n+import javax.validation.ConstraintViolation;\n+import javax.validation.ConstraintViolationException;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.converter.HttpMessageNotReadableException;\n+import org.springframework.validation.FieldError;\n+import org.springframework.web.bind.MethodArgumentNotValidException;\n+import org.springframework.web.bind.MissingRequestHeaderException;\n+import org.springframework.web.bind.annotation.ControllerAdvice;\n+import org.springframework.web.bind.annotation.ExceptionHandler;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+import org.springframework.web.client.HttpClientErrorException.BadRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.ValidationErrorResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.ValidationErrorResponse.Violation;\n+\n+@ControllerAdvice\n+public class GlobalExceptionHandler {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(GlobalExceptionHandler.class.getName());\n+\n+  @ExceptionHandler(BadRequest.class)\n+  @ResponseStatus(HttpStatus.BAD_REQUEST)\n+  public void handleBadRequest() {}\n+\n+  @SuppressWarnings(\"rawtypes\")\n+  @ExceptionHandler(ConstraintViolationException.class)\n+  @ResponseStatus(HttpStatus.BAD_REQUEST)\n+  @ResponseBody\n+  public ValidationErrorResponse handleConstraintValidationException(\n+      ConstraintViolationException e) {\n+    logger.error(\"request failed with ConstraintViolationException\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c94de2235c2e7133899263391327d5647b6bc2"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMzOTMxNw==", "bodyText": "We might miss production issues if we suppress the exception with TRACE level. IMO, it's better to log all the exceptions initially, monitor the logs once the projects goes LIVE in production. Later, decide on which exceptions to fix and which ones to suppress by changing the log level to DEBUG or TRACE.\nIt may leads to bad user experience if mobile apps or web app gets 400 BAD REQUEST in production and we'll not come to know the root cause with TRACE level for this exception in production.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r445339317", "createdAt": "2020-06-25T06:42:53Z", "author": {"login": "dhanyak-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/exceptions/GlobalExceptionHandler.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.exceptions;\n+\n+import javax.validation.ConstraintViolation;\n+import javax.validation.ConstraintViolationException;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.converter.HttpMessageNotReadableException;\n+import org.springframework.validation.FieldError;\n+import org.springframework.web.bind.MethodArgumentNotValidException;\n+import org.springframework.web.bind.MissingRequestHeaderException;\n+import org.springframework.web.bind.annotation.ControllerAdvice;\n+import org.springframework.web.bind.annotation.ExceptionHandler;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+import org.springframework.web.client.HttpClientErrorException.BadRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.ValidationErrorResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.ValidationErrorResponse.Violation;\n+\n+@ControllerAdvice\n+public class GlobalExceptionHandler {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(GlobalExceptionHandler.class.getName());\n+\n+  @ExceptionHandler(BadRequest.class)\n+  @ResponseStatus(HttpStatus.BAD_REQUEST)\n+  public void handleBadRequest() {}\n+\n+  @SuppressWarnings(\"rawtypes\")\n+  @ExceptionHandler(ConstraintViolationException.class)\n+  @ResponseStatus(HttpStatus.BAD_REQUEST)\n+  @ResponseBody\n+  public ValidationErrorResponse handleConstraintValidationException(\n+      ConstraintViolationException e) {\n+    logger.error(\"request failed with ConstraintViolationException\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA4MDQwNg=="}, "originalCommit": {"oid": "68c94de2235c2e7133899263391327d5647b6bc2"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYzOTU2NQ==", "bodyText": "The web/mobile app should definitely be informing the user when it receives a 400. For example, say we have server-side validation for emails that the must conform to regex \\w{3,}@\\w+\\.\\w+. The user sends us the email address \"invalid\". We throw a 400 and tell the user that the email they gave us was invalid. But logging that is pointless.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r445639565", "createdAt": "2020-06-25T15:20:10Z", "author": {"login": "nikklassen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/exceptions/GlobalExceptionHandler.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.exceptions;\n+\n+import javax.validation.ConstraintViolation;\n+import javax.validation.ConstraintViolationException;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.converter.HttpMessageNotReadableException;\n+import org.springframework.validation.FieldError;\n+import org.springframework.web.bind.MethodArgumentNotValidException;\n+import org.springframework.web.bind.MissingRequestHeaderException;\n+import org.springframework.web.bind.annotation.ControllerAdvice;\n+import org.springframework.web.bind.annotation.ExceptionHandler;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+import org.springframework.web.client.HttpClientErrorException.BadRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.ValidationErrorResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.ValidationErrorResponse.Violation;\n+\n+@ControllerAdvice\n+public class GlobalExceptionHandler {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(GlobalExceptionHandler.class.getName());\n+\n+  @ExceptionHandler(BadRequest.class)\n+  @ResponseStatus(HttpStatus.BAD_REQUEST)\n+  public void handleBadRequest() {}\n+\n+  @SuppressWarnings(\"rawtypes\")\n+  @ExceptionHandler(ConstraintViolationException.class)\n+  @ResponseStatus(HttpStatus.BAD_REQUEST)\n+  @ResponseBody\n+  public ValidationErrorResponse handleConstraintValidationException(\n+      ConstraintViolationException e) {\n+    logger.error(\"request failed with ConstraintViolationException\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA4MDQwNg=="}, "originalCommit": {"oid": "68c94de2235c2e7133899263391327d5647b6bc2"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3OTM5Nw==", "bodyText": "Thanks for the explanation. Changed the log level to TRACE.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r445679397", "createdAt": "2020-06-25T16:18:44Z", "author": {"login": "dhanyak-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/exceptions/GlobalExceptionHandler.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.exceptions;\n+\n+import javax.validation.ConstraintViolation;\n+import javax.validation.ConstraintViolationException;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.converter.HttpMessageNotReadableException;\n+import org.springframework.validation.FieldError;\n+import org.springframework.web.bind.MethodArgumentNotValidException;\n+import org.springframework.web.bind.MissingRequestHeaderException;\n+import org.springframework.web.bind.annotation.ControllerAdvice;\n+import org.springframework.web.bind.annotation.ExceptionHandler;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+import org.springframework.web.client.HttpClientErrorException.BadRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.ValidationErrorResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.ValidationErrorResponse.Violation;\n+\n+@ControllerAdvice\n+public class GlobalExceptionHandler {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(GlobalExceptionHandler.class.getName());\n+\n+  @ExceptionHandler(BadRequest.class)\n+  @ResponseStatus(HttpStatus.BAD_REQUEST)\n+  public void handleBadRequest() {}\n+\n+  @SuppressWarnings(\"rawtypes\")\n+  @ExceptionHandler(ConstraintViolationException.class)\n+  @ResponseStatus(HttpStatus.BAD_REQUEST)\n+  @ResponseBody\n+  public ValidationErrorResponse handleConstraintValidationException(\n+      ConstraintViolationException e) {\n+    logger.error(\"request failed with ConstraintViolationException\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA4MDQwNg=="}, "originalCommit": {"oid": "68c94de2235c2e7133899263391327d5647b6bc2"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NzgyMzIwOnYy", "diffSide": "RIGHT", "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/model/AuditLogEventEntity.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDozMTo0OVrOGpKvew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNToxNzoyOVrOGpT-GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyMDc5NQ==", "bodyText": "Google API guideline suggests calling these timestamp columns simply:\ncreated, modified etc", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r445820795", "createdAt": "2020-06-25T20:31:49Z", "author": {"login": "zohrehj"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/model/AuditLogEventEntity.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.model;\n+\n+import java.sql.Timestamp;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+import org.hibernate.annotations.GenericGenerator;\n+\n+@Setter\n+@Getter\n+@Entity\n+@Table(name = \"audit_log_events\")\n+public class AuditLogEventEntity {\n+\n+  @Id\n+  @GeneratedValue(generator = \"system-uuid\")\n+  @GenericGenerator(name = \"system-uuid\", strategy = \"uuid\")\n+  @Column(name = \"id\", updatable = false, nullable = false)\n+  private String id;\n+\n+  @Column(name = \"correlation_id\", nullable = false, length = 36)\n+  private String correlationId;\n+\n+  @Column(name = \"event_name\", nullable = false, length = 40)\n+  private String eventName;\n+\n+  @Column(name = \"system_id\", nullable = false, length = 30)\n+  private String systemId;\n+\n+  @Column(\n+      name = \"event_timestamp\",\n+      nullable = false,\n+      updatable = false,\n+      columnDefinition = \"TIMESTAMP\")\n+  private Timestamp eventTimestamp;\n+\n+  @Column(\n+      name = \"created_timestamp\",\n+      insertable = false,\n+      updatable = false,\n+      columnDefinition = \"TIMESTAMP DEFAULT CURRENT_TIMESTAMP\")\n+  private Timestamp createdTimestamp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac8a1ecaa5ed4c90a80afbc176e70af24eafea57"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk3MTk5Mg==", "bodyText": "This link  has different naming convention. Please share the Google API guideline link to refer. Renamed both column and property name to 'created', it'll be pushed for review in next PR.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r445971992", "createdAt": "2020-06-26T05:17:29Z", "author": {"login": "dhanyak-btc"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/model/AuditLogEventEntity.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.model;\n+\n+import java.sql.Timestamp;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+import org.hibernate.annotations.GenericGenerator;\n+\n+@Setter\n+@Getter\n+@Entity\n+@Table(name = \"audit_log_events\")\n+public class AuditLogEventEntity {\n+\n+  @Id\n+  @GeneratedValue(generator = \"system-uuid\")\n+  @GenericGenerator(name = \"system-uuid\", strategy = \"uuid\")\n+  @Column(name = \"id\", updatable = false, nullable = false)\n+  private String id;\n+\n+  @Column(name = \"correlation_id\", nullable = false, length = 36)\n+  private String correlationId;\n+\n+  @Column(name = \"event_name\", nullable = false, length = 40)\n+  private String eventName;\n+\n+  @Column(name = \"system_id\", nullable = false, length = 30)\n+  private String systemId;\n+\n+  @Column(\n+      name = \"event_timestamp\",\n+      nullable = false,\n+      updatable = false,\n+      columnDefinition = \"TIMESTAMP\")\n+  private Timestamp eventTimestamp;\n+\n+  @Column(\n+      name = \"created_timestamp\",\n+      insertable = false,\n+      updatable = false,\n+      columnDefinition = \"TIMESTAMP DEFAULT CURRENT_TIMESTAMP\")\n+  private Timestamp createdTimestamp;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyMDc5NQ=="}, "originalCommit": {"oid": "ac8a1ecaa5ed4c90a80afbc176e70af24eafea57"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NzgyNDExOnYy", "diffSide": "RIGHT", "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/model/AuditLogEventEntity.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDozMjowNFrOGpKwCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzoyNzoyN1rOGpWi9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyMDkzOA==", "bodyText": "could be renamed to occured maybe?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r445820938", "createdAt": "2020-06-25T20:32:04Z", "author": {"login": "zohrehj"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/model/AuditLogEventEntity.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.model;\n+\n+import java.sql.Timestamp;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+import org.hibernate.annotations.GenericGenerator;\n+\n+@Setter\n+@Getter\n+@Entity\n+@Table(name = \"audit_log_events\")\n+public class AuditLogEventEntity {\n+\n+  @Id\n+  @GeneratedValue(generator = \"system-uuid\")\n+  @GenericGenerator(name = \"system-uuid\", strategy = \"uuid\")\n+  @Column(name = \"id\", updatable = false, nullable = false)\n+  private String id;\n+\n+  @Column(name = \"correlation_id\", nullable = false, length = 36)\n+  private String correlationId;\n+\n+  @Column(name = \"event_name\", nullable = false, length = 40)\n+  private String eventName;\n+\n+  @Column(name = \"system_id\", nullable = false, length = 30)\n+  private String systemId;\n+\n+  @Column(\n+      name = \"event_timestamp\",\n+      nullable = false,\n+      updatable = false,\n+      columnDefinition = \"TIMESTAMP\")\n+  private Timestamp eventTimestamp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac8a1ecaa5ed4c90a80afbc176e70af24eafea57"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAxNDE5OA==", "bodyText": "Renamed both column and property name to 'occured', it'll be pushed for review in next PR.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r446014198", "createdAt": "2020-06-26T07:27:27Z", "author": {"login": "dhanyak-btc"}, "path": "audit-log-module/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/model/AuditLogEventEntity.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.model;\n+\n+import java.sql.Timestamp;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+import org.hibernate.annotations.GenericGenerator;\n+\n+@Setter\n+@Getter\n+@Entity\n+@Table(name = \"audit_log_events\")\n+public class AuditLogEventEntity {\n+\n+  @Id\n+  @GeneratedValue(generator = \"system-uuid\")\n+  @GenericGenerator(name = \"system-uuid\", strategy = \"uuid\")\n+  @Column(name = \"id\", updatable = false, nullable = false)\n+  private String id;\n+\n+  @Column(name = \"correlation_id\", nullable = false, length = 36)\n+  private String correlationId;\n+\n+  @Column(name = \"event_name\", nullable = false, length = 40)\n+  private String eventName;\n+\n+  @Column(name = \"system_id\", nullable = false, length = 30)\n+  private String systemId;\n+\n+  @Column(\n+      name = \"event_timestamp\",\n+      nullable = false,\n+      updatable = false,\n+      columnDefinition = \"TIMESTAMP\")\n+  private Timestamp eventTimestamp;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyMDkzOA=="}, "originalCommit": {"oid": "ac8a1ecaa5ed4c90a80afbc176e70af24eafea57"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Nzg0MTI1OnYy", "diffSide": "RIGHT", "path": "audit-log-module/audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/ApplicationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDozNzoxNFrOGpK6sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzozMDozMVrOGpWoKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyMzY2NQ==", "bodyText": "please add back the healthcheck test as well. It should assert that the response status is 200", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r445823665", "createdAt": "2020-06-25T20:37:14Z", "author": {"login": "zohrehj"}, "path": "audit-log-module/audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/ApplicationTest.java", "diffHunk": "@@ -9,14 +9,15 @@\n package com.google.cloud.healthcare.fdamystudies.auditlog;\n \n import static org.junit.Assert.assertNotNull;\n+\n+import com.google.cloud.healthcare.fdamystudies.auditlog.controller.AuditLogEventController;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n-import com.google.cloud.healthcare.fdamystudies.auditlog.controller.HealthController;\n-import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n \n class ApplicationTest extends BaseMockIT {\n \n-  @Autowired HealthController controller;\n+  @Autowired AuditLogEventController controller;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac8a1ecaa5ed4c90a80afbc176e70af24eafea57"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAxNTUyOQ==", "bodyText": "I've added assertNotNull(healthController); in this Test. There is already a HealthControllerTest that assert response status is 200. This will be pushed for review in next PR.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r446015529", "createdAt": "2020-06-26T07:30:31Z", "author": {"login": "dhanyak-btc"}, "path": "audit-log-module/audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/ApplicationTest.java", "diffHunk": "@@ -9,14 +9,15 @@\n package com.google.cloud.healthcare.fdamystudies.auditlog;\n \n import static org.junit.Assert.assertNotNull;\n+\n+import com.google.cloud.healthcare.fdamystudies.auditlog.controller.AuditLogEventController;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n-import com.google.cloud.healthcare.fdamystudies.auditlog.controller.HealthController;\n-import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n \n class ApplicationTest extends BaseMockIT {\n \n-  @Autowired HealthController controller;\n+  @Autowired AuditLogEventController controller;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyMzY2NQ=="}, "originalCommit": {"oid": "ac8a1ecaa5ed4c90a80afbc176e70af24eafea57"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Nzg3NjkzOnYy", "diffSide": "RIGHT", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/HealthController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDo0OTowMFrOGpLRqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzozNjoxNlrOGpWymQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyOTU0NQ==", "bodyText": "why is this method calling oauthservice.health()?\nIdeally it should just return a 200 status.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r445829545", "createdAt": "2020-06-25T20:49:00Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/HealthController.java", "diffHunk": "@@ -6,35 +6,28 @@\n  * https://opensource.org/licenses/MIT.\n  */\n \n-package com.google.cloud.healthcare.fdamystudies.auditlog.controller;\n+package com.google.cloud.healthcare.fdamystudies.controller;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.service.OAuthService;\n import javax.servlet.http.HttpServletRequest;\n-import org.slf4j.ext.XLogger;\n-import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RestController;\n-import com.fasterxml.jackson.databind.JsonNode;\n \n @RestController\n @RequestMapping(\"/v1\")\n-public class HealthController extends BaseController {\n+public class HealthController {\n \n-  private XLogger logger = XLoggerFactory.getXLogger(HealthController.class.getName());\n+  @Autowired private OAuthService oauthService;\n \n   @GetMapping(\n-      value = \"/health\",\n+      value = \"/healthCheck\",\n       produces = {MediaType.APPLICATION_JSON_VALUE})\n   public ResponseEntity<JsonNode> health(HttpServletRequest request) {\n-    logger.entry(String.format(\"begin %s request with no args\", request.getRequestURI()));\n-\n-    ResponseEntity<JsonNode> healthResponse = getOAuthService().health();\n-    logger.exit(\n-        String.format(\n-            \"status=%d and response=%s\",\n-            healthResponse.getStatusCodeValue(), healthResponse.getBody()));\n-    return healthResponse;\n+    return oauthService.health();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac8a1ecaa5ed4c90a80afbc176e70af24eafea57"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAxODIwMQ==", "bodyText": "I referred Monitoring Microservices With Health Checks, all services in our project requires token introspection so added downstream services in /healthCheck endpoint. I've changed to code to returns always OK. This will be pushed for review in next PR. Thanks a lot for approving the PR #540.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r446018201", "createdAt": "2020-06-26T07:36:16Z", "author": {"login": "dhanyak-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/HealthController.java", "diffHunk": "@@ -6,35 +6,28 @@\n  * https://opensource.org/licenses/MIT.\n  */\n \n-package com.google.cloud.healthcare.fdamystudies.auditlog.controller;\n+package com.google.cloud.healthcare.fdamystudies.controller;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.service.OAuthService;\n import javax.servlet.http.HttpServletRequest;\n-import org.slf4j.ext.XLogger;\n-import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RestController;\n-import com.fasterxml.jackson.databind.JsonNode;\n \n @RestController\n @RequestMapping(\"/v1\")\n-public class HealthController extends BaseController {\n+public class HealthController {\n \n-  private XLogger logger = XLoggerFactory.getXLogger(HealthController.class.getName());\n+  @Autowired private OAuthService oauthService;\n \n   @GetMapping(\n-      value = \"/health\",\n+      value = \"/healthCheck\",\n       produces = {MediaType.APPLICATION_JSON_VALUE})\n   public ResponseEntity<JsonNode> health(HttpServletRequest request) {\n-    logger.entry(String.format(\"begin %s request with no args\", request.getRequestURI()));\n-\n-    ResponseEntity<JsonNode> healthResponse = getOAuthService().health();\n-    logger.exit(\n-        String.format(\n-            \"status=%d and response=%s\",\n-            healthResponse.getStatusCodeValue(), healthResponse.getBody()));\n-    return healthResponse;\n+    return oauthService.health();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyOTU0NQ=="}, "originalCommit": {"oid": "ac8a1ecaa5ed4c90a80afbc176e70af24eafea57"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NzkyMDU3OnYy", "diffSide": "RIGHT", "path": "common-modules/common-tests/src/main/resources/mappings/hydra/introspect_invalid_token_request.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMTowMzowMlrOGpLtEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMTowMzowMlrOGpLtEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgzNjU2Mg==", "bodyText": "nit: indentation should probably be 2 spaces to be consistent with other files.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/540#discussion_r445836562", "createdAt": "2020-06-25T21:03:02Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-tests/src/main/resources/mappings/hydra/introspect_invalid_token_request.json", "diffHunk": "@@ -0,0 +1,18 @@\n+{\n+\t\"request\": {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac8a1ecaa5ed4c90a80afbc176e70af24eafea57"}, "originalPosition": 2}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2211, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}