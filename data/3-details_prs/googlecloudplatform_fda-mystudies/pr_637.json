{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4OTUyMzA1", "number": 637, "title": "participant-manager GET /studies endpoint implementation", "bodyText": "participant-manager GET /studies endpoint implementation", "createdAt": "2020-07-14T15:25:59Z", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/637", "merged": true, "mergeCommit": {"oid": "dee9bdce2f7c65595353db3765fb6aa08db7c337"}, "closed": true, "closedAt": "2020-08-11T14:16:25Z", "author": {"login": "monica-BTC"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc03tVBAH2gAyNDQ4OTUyMzA1OjljMDYwMTRiZTMzMzhiYWNhZWI0OGYwMDZlZjAyOWM0M2NiNjNkZDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc92uqLAH2gAyNDQ4OTUyMzA1OjBhYTgyZGU5MmFmNTNmMDU0YWM0MmQ1ODUxMzVkZTc0ZGFlMTZjMjI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9c06014be3338bacaeb48f006ef029c43cb63dd9", "author": {"user": {"login": "monica-BTC", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/9c06014be3338bacaeb48f006ef029c43cb63dd9", "committedDate": "2020-07-14T15:24:26Z", "message": "participant-manager GET /studies endpoint implementation\n\nparticipant-manager GET /studies endpoint implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "770c83854e9dca404407b23b56addac1b2ae4654", "author": {"user": {"login": "monica-BTC", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/770c83854e9dca404407b23b56addac1b2ae4654", "committedDate": "2020-07-14T15:35:37Z", "message": "Merge branch 'participant-manager-apps-endpoint-implementation' into participant-manager-studies-endpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b0f128522962eebb160ce5d1cddab0620cc6972", "author": {"user": {"login": "monica-BTC", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/3b0f128522962eebb160ce5d1cddab0620cc6972", "committedDate": "2020-07-21T08:17:54Z", "message": "Reused CommonConstants and updated TestDataHelper\n\nReused CommonConstants and updated TestDataHelper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5119db182f28eb42c4053947d649107580e5857", "author": {"user": {"login": "monica-BTC", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/d5119db182f28eb42c4053947d649107580e5857", "committedDate": "2020-07-23T12:36:37Z", "message": "Merge branch 'participant-manager-apps-endpoint-implementation' into participant-manager-studies-endpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1cfba5f0d52ac2d9f9e577ebcf8a99549d66897", "author": {"user": {"login": "monica-BTC", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/d1cfba5f0d52ac2d9f9e577ebcf8a99549d66897", "committedDate": "2020-07-23T12:44:39Z", "message": "Added @componentscan to BaseMockIT to fix build issue\n\nAdded @componentscan to BaseMockIT to fix build issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf7414804397fb58182a9a5b950fb3c89bd2cf5a", "author": {"user": {"login": "monica-BTC", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/bf7414804397fb58182a9a5b950fb3c89bd2cf5a", "committedDate": "2020-07-23T12:46:00Z", "message": "Merge branch 'participant-manager-studies-endpoint' of https://github.com/GoogleCloudPlatform/fda-mystudies into participant-manager-studies-endpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac1b133e7f76db791900e787e9c1c599df6d5f94", "author": {"user": {"login": "monica-BTC", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/ac1b133e7f76db791900e787e9c1c599df6d5f94", "committedDate": "2020-07-23T12:54:14Z", "message": "Updated StudyServiceImpl\n\nUpdated StudyServiceImpl"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MzkxNzMy", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/637#pullrequestreview-454391732", "createdAt": "2020-07-23T18:28:46Z", "commit": {"oid": "ac1b133e7f76db791900e787e9c1c599df6d5f94"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODoyODo0NlrOG2Wk3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODo1NDoyMlrOG2XcqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NjE3Mw==", "bodyText": "Use CommonConstants.CLOSE_STUDY", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/637#discussion_r459646173", "createdAt": "2020-07-23T18:28:46Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/helper/TestDataHelper.java", "diffHunk": "@@ -137,6 +137,7 @@ public AppEntity createAppEntity(UserRegAdminEntity userEntity) {\n \n   public StudyEntity createStudyEntity(UserRegAdminEntity userEntity, AppEntity appEntity) {\n     StudyEntity studyEntity = new StudyEntity();\n+    studyEntity.setType(\"CLOSE\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac1b133e7f76db791900e787e9c1c599df6d5f94"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1MTcyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private Long totalSitesCount;\n          \n          \n            \n              private Long sitesCount;", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/637#discussion_r459651727", "createdAt": "2020-07-23T18:38:49Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/StudyDetails.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.beans;\n+\n+import java.util.List;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+@Setter\n+@Getter\n+public class StudyDetails {\n+  private String id;\n+\n+  private String customId;\n+\n+  private String name;\n+\n+  private Long totalSitesCount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac1b133e7f76db791900e787e9c1c599df6d5f94"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1NTk4OQ==", "bodyText": "you should extract entry.getKey() and getValue() out as local variable to make the code more readable.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/637#discussion_r459655989", "createdAt": "2020-07-23T18:46:11Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudyServiceImpl.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.CLOSE_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.OPEN_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_AND_EDIT_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.VIEW_VALUE;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.StudyDetails;\n+import com.google.cloud.healthcare.fdamystudies.beans.StudyResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantRegistrySiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SitePermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyPermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantRegistrySiteRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantStudyRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.SitePermissionRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.StudyPermissionRepository;\n+\n+@Service\n+public class StudyServiceImpl implements StudyService {\n+  private XLogger logger = XLoggerFactory.getXLogger(StudyServiceImpl.class.getName());\n+\n+  @Autowired private StudyPermissionRepository studyPermissionRepository;\n+\n+  @Autowired private ParticipantRegistrySiteRepository participantRegistrySiteRepository;\n+\n+  @Autowired private ParticipantStudyRepository participantStudiesRepository;\n+\n+  @Autowired private SitePermissionRepository sitePermissionRepository;\n+\n+  @Override\n+  @Transactional(readOnly = true)\n+  public StudyResponse getStudies(String userId) {\n+    logger.entry(\"getStudies(String userId)\");\n+\n+    List<SitePermissionEntity> sitePermissions =\n+        sitePermissionRepository.findSitePermissionByUserId(userId);\n+\n+    if (CollectionUtils.isEmpty(sitePermissions)) {\n+      logger.exit(ErrorCode.STUDY_NOT_FOUND);\n+      return new StudyResponse(ErrorCode.STUDY_NOT_FOUND);\n+    }\n+\n+    Map<StudyEntity, List<SitePermissionEntity>> studyPermissionMap =\n+        sitePermissions.stream().collect(Collectors.groupingBy(SitePermissionEntity::getStudy));\n+\n+    List<String> usersStudyIds =\n+        sitePermissions\n+            .stream()\n+            .distinct()\n+            .map(studyEntity -> studyEntity.getStudy().getId())\n+            .collect(Collectors.toList());\n+\n+    Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId =\n+        getStudyPermissionsByStudyInfoId(userId, usersStudyIds);\n+\n+    List<String> usersSiteIds =\n+        sitePermissions\n+            .stream()\n+            .map(s -> s.getSite().getId())\n+            .distinct()\n+            .collect(Collectors.toList());\n+\n+    Map<String, Long> siteWithInvitedParticipantCountMap =\n+        getSiteWithInvitedParticipantCountMap(usersSiteIds);\n+\n+    Map<String, Long> siteWithEnrolledParticipantCountMap =\n+        getSiteWithEnrolledParticipantCountMap(usersSiteIds);\n+\n+    return prepareStudyResponse(\n+        sitePermissions,\n+        studyPermissionsByStudyInfoId,\n+        studyPermissionMap,\n+        siteWithInvitedParticipantCountMap,\n+        siteWithEnrolledParticipantCountMap);\n+  }\n+\n+  private Map<String, StudyPermissionEntity> getStudyPermissionsByStudyInfoId(\n+      String userId, List<String> usersStudyIds) {\n+    List<StudyPermissionEntity> studyPermissions =\n+        studyPermissionRepository.findStudyPermissionsOfUserByStudyIds(usersStudyIds, userId);\n+\n+    Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId = new HashMap<>();\n+    if (CollectionUtils.isNotEmpty(studyPermissions)) {\n+      studyPermissionsByStudyInfoId =\n+          studyPermissions\n+              .stream()\n+              .collect(Collectors.toMap(e -> e.getStudy().getId(), Function.identity()));\n+    }\n+    return studyPermissionsByStudyInfoId;\n+  }\n+\n+  private StudyResponse prepareStudyResponse(\n+      List<SitePermissionEntity> sitePermissions,\n+      Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId,\n+      Map<StudyEntity, List<SitePermissionEntity>> studyPermissionMap,\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map<String, Long> siteWithEnrolledParticipantCountMap) {\n+    List<StudyDetails> studies = new ArrayList<>();\n+    for (Map.Entry<StudyEntity, List<SitePermissionEntity>> entry : studyPermissionMap.entrySet()) {\n+      StudyDetails studyDetail = new StudyDetails();\n+      String studyId = entry.getKey().getId();\n+      studyDetail.setId(studyId);\n+      studyDetail.setCustomId(entry.getKey().getCustomId());\n+      studyDetail.setName(entry.getKey().getName());\n+      studyDetail.setType(entry.getKey().getType());\n+      studyDetail.setTotalSitesCount((long) entry.getValue().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac1b133e7f76db791900e787e9c1c599df6d5f94"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1NjMxNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  studyEnrolledCount =\n          \n          \n            \n                      studyEnrolledCount\n          \n          \n            \n                          + siteWithEnrolledParticipantCountMap.get(sitePermission.getSite().getId());\n          \n          \n            \n                  studyEnrolledCount += siteWithEnrolledParticipantCountMap.get(sitePermission.getSite().getId());", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/637#discussion_r459656315", "createdAt": "2020-07-23T18:46:49Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudyServiceImpl.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.CLOSE_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.OPEN_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_AND_EDIT_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.VIEW_VALUE;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.StudyDetails;\n+import com.google.cloud.healthcare.fdamystudies.beans.StudyResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantRegistrySiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SitePermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyPermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantRegistrySiteRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantStudyRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.SitePermissionRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.StudyPermissionRepository;\n+\n+@Service\n+public class StudyServiceImpl implements StudyService {\n+  private XLogger logger = XLoggerFactory.getXLogger(StudyServiceImpl.class.getName());\n+\n+  @Autowired private StudyPermissionRepository studyPermissionRepository;\n+\n+  @Autowired private ParticipantRegistrySiteRepository participantRegistrySiteRepository;\n+\n+  @Autowired private ParticipantStudyRepository participantStudiesRepository;\n+\n+  @Autowired private SitePermissionRepository sitePermissionRepository;\n+\n+  @Override\n+  @Transactional(readOnly = true)\n+  public StudyResponse getStudies(String userId) {\n+    logger.entry(\"getStudies(String userId)\");\n+\n+    List<SitePermissionEntity> sitePermissions =\n+        sitePermissionRepository.findSitePermissionByUserId(userId);\n+\n+    if (CollectionUtils.isEmpty(sitePermissions)) {\n+      logger.exit(ErrorCode.STUDY_NOT_FOUND);\n+      return new StudyResponse(ErrorCode.STUDY_NOT_FOUND);\n+    }\n+\n+    Map<StudyEntity, List<SitePermissionEntity>> studyPermissionMap =\n+        sitePermissions.stream().collect(Collectors.groupingBy(SitePermissionEntity::getStudy));\n+\n+    List<String> usersStudyIds =\n+        sitePermissions\n+            .stream()\n+            .distinct()\n+            .map(studyEntity -> studyEntity.getStudy().getId())\n+            .collect(Collectors.toList());\n+\n+    Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId =\n+        getStudyPermissionsByStudyInfoId(userId, usersStudyIds);\n+\n+    List<String> usersSiteIds =\n+        sitePermissions\n+            .stream()\n+            .map(s -> s.getSite().getId())\n+            .distinct()\n+            .collect(Collectors.toList());\n+\n+    Map<String, Long> siteWithInvitedParticipantCountMap =\n+        getSiteWithInvitedParticipantCountMap(usersSiteIds);\n+\n+    Map<String, Long> siteWithEnrolledParticipantCountMap =\n+        getSiteWithEnrolledParticipantCountMap(usersSiteIds);\n+\n+    return prepareStudyResponse(\n+        sitePermissions,\n+        studyPermissionsByStudyInfoId,\n+        studyPermissionMap,\n+        siteWithInvitedParticipantCountMap,\n+        siteWithEnrolledParticipantCountMap);\n+  }\n+\n+  private Map<String, StudyPermissionEntity> getStudyPermissionsByStudyInfoId(\n+      String userId, List<String> usersStudyIds) {\n+    List<StudyPermissionEntity> studyPermissions =\n+        studyPermissionRepository.findStudyPermissionsOfUserByStudyIds(usersStudyIds, userId);\n+\n+    Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId = new HashMap<>();\n+    if (CollectionUtils.isNotEmpty(studyPermissions)) {\n+      studyPermissionsByStudyInfoId =\n+          studyPermissions\n+              .stream()\n+              .collect(Collectors.toMap(e -> e.getStudy().getId(), Function.identity()));\n+    }\n+    return studyPermissionsByStudyInfoId;\n+  }\n+\n+  private StudyResponse prepareStudyResponse(\n+      List<SitePermissionEntity> sitePermissions,\n+      Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId,\n+      Map<StudyEntity, List<SitePermissionEntity>> studyPermissionMap,\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map<String, Long> siteWithEnrolledParticipantCountMap) {\n+    List<StudyDetails> studies = new ArrayList<>();\n+    for (Map.Entry<StudyEntity, List<SitePermissionEntity>> entry : studyPermissionMap.entrySet()) {\n+      StudyDetails studyDetail = new StudyDetails();\n+      String studyId = entry.getKey().getId();\n+      studyDetail.setId(studyId);\n+      studyDetail.setCustomId(entry.getKey().getCustomId());\n+      studyDetail.setName(entry.getKey().getName());\n+      studyDetail.setType(entry.getKey().getType());\n+      studyDetail.setTotalSitesCount((long) entry.getValue().size());\n+\n+      if (studyPermissionsByStudyInfoId.get(studyId) != null) {\n+        Integer studyEditPermission =\n+            studyPermissionsByStudyInfoId.get(entry.getKey().getId()).getEdit();\n+        studyDetail.setStudyPermission(\n+            studyEditPermission == VIEW_VALUE ? READ_PERMISSION : READ_AND_EDIT_PERMISSION);\n+        studyDetail.setStudyPermission(studyEditPermission);\n+      }\n+\n+      calculateEnrollmentPercentage(\n+          siteWithInvitedParticipantCountMap,\n+          siteWithEnrolledParticipantCountMap,\n+          entry,\n+          studyDetail);\n+      studies.add(studyDetail);\n+    }\n+\n+    StudyResponse studyResponse =\n+        new StudyResponse(MessageCode.GET_STUDIES_SUCCESS, studies, sitePermissions.size());\n+    logger.exit(String.format(\"total studies=%d\", studyResponse.getStudies().size()));\n+    return studyResponse;\n+  }\n+\n+  private void calculateEnrollmentPercentage(\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map<String, Long> siteWithEnrolledParticipantCountMap,\n+      Map.Entry<StudyEntity, List<SitePermissionEntity>> entry,\n+      StudyDetails studyDetail) {\n+    Long studyInvitedCount = 0L;\n+    Long studyEnrolledCount = 0L;\n+    for (SitePermissionEntity sitePermission : entry.getValue()) {\n+      studyInvitedCount =\n+          getStudyInvitedCount(\n+              siteWithInvitedParticipantCountMap, entry, studyInvitedCount, sitePermission);\n+\n+      studyEnrolledCount =\n+          studyEnrolledCount\n+              + siteWithEnrolledParticipantCountMap.get(sitePermission.getSite().getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac1b133e7f76db791900e787e9c1c599df6d5f94"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1OTQxNw==", "bodyText": "same as above", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/637#discussion_r459659417", "createdAt": "2020-07-23T18:52:22Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudyServiceImpl.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.CLOSE_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.OPEN_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_AND_EDIT_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.VIEW_VALUE;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.StudyDetails;\n+import com.google.cloud.healthcare.fdamystudies.beans.StudyResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantRegistrySiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SitePermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyPermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantRegistrySiteRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantStudyRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.SitePermissionRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.StudyPermissionRepository;\n+\n+@Service\n+public class StudyServiceImpl implements StudyService {\n+  private XLogger logger = XLoggerFactory.getXLogger(StudyServiceImpl.class.getName());\n+\n+  @Autowired private StudyPermissionRepository studyPermissionRepository;\n+\n+  @Autowired private ParticipantRegistrySiteRepository participantRegistrySiteRepository;\n+\n+  @Autowired private ParticipantStudyRepository participantStudiesRepository;\n+\n+  @Autowired private SitePermissionRepository sitePermissionRepository;\n+\n+  @Override\n+  @Transactional(readOnly = true)\n+  public StudyResponse getStudies(String userId) {\n+    logger.entry(\"getStudies(String userId)\");\n+\n+    List<SitePermissionEntity> sitePermissions =\n+        sitePermissionRepository.findSitePermissionByUserId(userId);\n+\n+    if (CollectionUtils.isEmpty(sitePermissions)) {\n+      logger.exit(ErrorCode.STUDY_NOT_FOUND);\n+      return new StudyResponse(ErrorCode.STUDY_NOT_FOUND);\n+    }\n+\n+    Map<StudyEntity, List<SitePermissionEntity>> studyPermissionMap =\n+        sitePermissions.stream().collect(Collectors.groupingBy(SitePermissionEntity::getStudy));\n+\n+    List<String> usersStudyIds =\n+        sitePermissions\n+            .stream()\n+            .distinct()\n+            .map(studyEntity -> studyEntity.getStudy().getId())\n+            .collect(Collectors.toList());\n+\n+    Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId =\n+        getStudyPermissionsByStudyInfoId(userId, usersStudyIds);\n+\n+    List<String> usersSiteIds =\n+        sitePermissions\n+            .stream()\n+            .map(s -> s.getSite().getId())\n+            .distinct()\n+            .collect(Collectors.toList());\n+\n+    Map<String, Long> siteWithInvitedParticipantCountMap =\n+        getSiteWithInvitedParticipantCountMap(usersSiteIds);\n+\n+    Map<String, Long> siteWithEnrolledParticipantCountMap =\n+        getSiteWithEnrolledParticipantCountMap(usersSiteIds);\n+\n+    return prepareStudyResponse(\n+        sitePermissions,\n+        studyPermissionsByStudyInfoId,\n+        studyPermissionMap,\n+        siteWithInvitedParticipantCountMap,\n+        siteWithEnrolledParticipantCountMap);\n+  }\n+\n+  private Map<String, StudyPermissionEntity> getStudyPermissionsByStudyInfoId(\n+      String userId, List<String> usersStudyIds) {\n+    List<StudyPermissionEntity> studyPermissions =\n+        studyPermissionRepository.findStudyPermissionsOfUserByStudyIds(usersStudyIds, userId);\n+\n+    Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId = new HashMap<>();\n+    if (CollectionUtils.isNotEmpty(studyPermissions)) {\n+      studyPermissionsByStudyInfoId =\n+          studyPermissions\n+              .stream()\n+              .collect(Collectors.toMap(e -> e.getStudy().getId(), Function.identity()));\n+    }\n+    return studyPermissionsByStudyInfoId;\n+  }\n+\n+  private StudyResponse prepareStudyResponse(\n+      List<SitePermissionEntity> sitePermissions,\n+      Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId,\n+      Map<StudyEntity, List<SitePermissionEntity>> studyPermissionMap,\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map<String, Long> siteWithEnrolledParticipantCountMap) {\n+    List<StudyDetails> studies = new ArrayList<>();\n+    for (Map.Entry<StudyEntity, List<SitePermissionEntity>> entry : studyPermissionMap.entrySet()) {\n+      StudyDetails studyDetail = new StudyDetails();\n+      String studyId = entry.getKey().getId();\n+      studyDetail.setId(studyId);\n+      studyDetail.setCustomId(entry.getKey().getCustomId());\n+      studyDetail.setName(entry.getKey().getName());\n+      studyDetail.setType(entry.getKey().getType());\n+      studyDetail.setTotalSitesCount((long) entry.getValue().size());\n+\n+      if (studyPermissionsByStudyInfoId.get(studyId) != null) {\n+        Integer studyEditPermission =\n+            studyPermissionsByStudyInfoId.get(entry.getKey().getId()).getEdit();\n+        studyDetail.setStudyPermission(\n+            studyEditPermission == VIEW_VALUE ? READ_PERMISSION : READ_AND_EDIT_PERMISSION);\n+        studyDetail.setStudyPermission(studyEditPermission);\n+      }\n+\n+      calculateEnrollmentPercentage(\n+          siteWithInvitedParticipantCountMap,\n+          siteWithEnrolledParticipantCountMap,\n+          entry,\n+          studyDetail);\n+      studies.add(studyDetail);\n+    }\n+\n+    StudyResponse studyResponse =\n+        new StudyResponse(MessageCode.GET_STUDIES_SUCCESS, studies, sitePermissions.size());\n+    logger.exit(String.format(\"total studies=%d\", studyResponse.getStudies().size()));\n+    return studyResponse;\n+  }\n+\n+  private void calculateEnrollmentPercentage(\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map<String, Long> siteWithEnrolledParticipantCountMap,\n+      Map.Entry<StudyEntity, List<SitePermissionEntity>> entry,\n+      StudyDetails studyDetail) {\n+    Long studyInvitedCount = 0L;\n+    Long studyEnrolledCount = 0L;\n+    for (SitePermissionEntity sitePermission : entry.getValue()) {\n+      studyInvitedCount =\n+          getStudyInvitedCount(\n+              siteWithInvitedParticipantCountMap, entry, studyInvitedCount, sitePermission);\n+\n+      studyEnrolledCount =\n+          studyEnrolledCount\n+              + siteWithEnrolledParticipantCountMap.get(sitePermission.getSite().getId());\n+    }\n+\n+    studyDetail.setEnrolled(studyEnrolledCount);\n+    studyDetail.setInvited(studyInvitedCount);\n+    if (studyDetail.getInvited() != 0 && studyDetail.getInvited() >= studyDetail.getEnrolled()) {\n+      Double percentage =\n+          (Double.valueOf(studyDetail.getEnrolled()) * 100)\n+              / Double.valueOf(studyDetail.getInvited());\n+      studyDetail.setEnrollmentPercentage(percentage);\n+    }\n+  }\n+\n+  private Long getStudyInvitedCount(\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map.Entry<StudyEntity, List<SitePermissionEntity>> entry,\n+      Long studyInvitedCount,\n+      SitePermissionEntity sitePermission) {\n+    String siteId = sitePermission.getSite().getId();\n+    String studyType = entry.getKey().getType();\n+    if (siteWithInvitedParticipantCountMap.get(siteId) != null && studyType.equals(CLOSE_STUDY)) {\n+      studyInvitedCount = studyInvitedCount + siteWithInvitedParticipantCountMap.get(siteId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac1b133e7f76db791900e787e9c1c599df6d5f94"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1OTUxNA==", "bodyText": "same as above", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/637#discussion_r459659514", "createdAt": "2020-07-23T18:52:35Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudyServiceImpl.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.CLOSE_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.OPEN_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_AND_EDIT_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.VIEW_VALUE;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.StudyDetails;\n+import com.google.cloud.healthcare.fdamystudies.beans.StudyResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantRegistrySiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SitePermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyPermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantRegistrySiteRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantStudyRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.SitePermissionRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.StudyPermissionRepository;\n+\n+@Service\n+public class StudyServiceImpl implements StudyService {\n+  private XLogger logger = XLoggerFactory.getXLogger(StudyServiceImpl.class.getName());\n+\n+  @Autowired private StudyPermissionRepository studyPermissionRepository;\n+\n+  @Autowired private ParticipantRegistrySiteRepository participantRegistrySiteRepository;\n+\n+  @Autowired private ParticipantStudyRepository participantStudiesRepository;\n+\n+  @Autowired private SitePermissionRepository sitePermissionRepository;\n+\n+  @Override\n+  @Transactional(readOnly = true)\n+  public StudyResponse getStudies(String userId) {\n+    logger.entry(\"getStudies(String userId)\");\n+\n+    List<SitePermissionEntity> sitePermissions =\n+        sitePermissionRepository.findSitePermissionByUserId(userId);\n+\n+    if (CollectionUtils.isEmpty(sitePermissions)) {\n+      logger.exit(ErrorCode.STUDY_NOT_FOUND);\n+      return new StudyResponse(ErrorCode.STUDY_NOT_FOUND);\n+    }\n+\n+    Map<StudyEntity, List<SitePermissionEntity>> studyPermissionMap =\n+        sitePermissions.stream().collect(Collectors.groupingBy(SitePermissionEntity::getStudy));\n+\n+    List<String> usersStudyIds =\n+        sitePermissions\n+            .stream()\n+            .distinct()\n+            .map(studyEntity -> studyEntity.getStudy().getId())\n+            .collect(Collectors.toList());\n+\n+    Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId =\n+        getStudyPermissionsByStudyInfoId(userId, usersStudyIds);\n+\n+    List<String> usersSiteIds =\n+        sitePermissions\n+            .stream()\n+            .map(s -> s.getSite().getId())\n+            .distinct()\n+            .collect(Collectors.toList());\n+\n+    Map<String, Long> siteWithInvitedParticipantCountMap =\n+        getSiteWithInvitedParticipantCountMap(usersSiteIds);\n+\n+    Map<String, Long> siteWithEnrolledParticipantCountMap =\n+        getSiteWithEnrolledParticipantCountMap(usersSiteIds);\n+\n+    return prepareStudyResponse(\n+        sitePermissions,\n+        studyPermissionsByStudyInfoId,\n+        studyPermissionMap,\n+        siteWithInvitedParticipantCountMap,\n+        siteWithEnrolledParticipantCountMap);\n+  }\n+\n+  private Map<String, StudyPermissionEntity> getStudyPermissionsByStudyInfoId(\n+      String userId, List<String> usersStudyIds) {\n+    List<StudyPermissionEntity> studyPermissions =\n+        studyPermissionRepository.findStudyPermissionsOfUserByStudyIds(usersStudyIds, userId);\n+\n+    Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId = new HashMap<>();\n+    if (CollectionUtils.isNotEmpty(studyPermissions)) {\n+      studyPermissionsByStudyInfoId =\n+          studyPermissions\n+              .stream()\n+              .collect(Collectors.toMap(e -> e.getStudy().getId(), Function.identity()));\n+    }\n+    return studyPermissionsByStudyInfoId;\n+  }\n+\n+  private StudyResponse prepareStudyResponse(\n+      List<SitePermissionEntity> sitePermissions,\n+      Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId,\n+      Map<StudyEntity, List<SitePermissionEntity>> studyPermissionMap,\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map<String, Long> siteWithEnrolledParticipantCountMap) {\n+    List<StudyDetails> studies = new ArrayList<>();\n+    for (Map.Entry<StudyEntity, List<SitePermissionEntity>> entry : studyPermissionMap.entrySet()) {\n+      StudyDetails studyDetail = new StudyDetails();\n+      String studyId = entry.getKey().getId();\n+      studyDetail.setId(studyId);\n+      studyDetail.setCustomId(entry.getKey().getCustomId());\n+      studyDetail.setName(entry.getKey().getName());\n+      studyDetail.setType(entry.getKey().getType());\n+      studyDetail.setTotalSitesCount((long) entry.getValue().size());\n+\n+      if (studyPermissionsByStudyInfoId.get(studyId) != null) {\n+        Integer studyEditPermission =\n+            studyPermissionsByStudyInfoId.get(entry.getKey().getId()).getEdit();\n+        studyDetail.setStudyPermission(\n+            studyEditPermission == VIEW_VALUE ? READ_PERMISSION : READ_AND_EDIT_PERMISSION);\n+        studyDetail.setStudyPermission(studyEditPermission);\n+      }\n+\n+      calculateEnrollmentPercentage(\n+          siteWithInvitedParticipantCountMap,\n+          siteWithEnrolledParticipantCountMap,\n+          entry,\n+          studyDetail);\n+      studies.add(studyDetail);\n+    }\n+\n+    StudyResponse studyResponse =\n+        new StudyResponse(MessageCode.GET_STUDIES_SUCCESS, studies, sitePermissions.size());\n+    logger.exit(String.format(\"total studies=%d\", studyResponse.getStudies().size()));\n+    return studyResponse;\n+  }\n+\n+  private void calculateEnrollmentPercentage(\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map<String, Long> siteWithEnrolledParticipantCountMap,\n+      Map.Entry<StudyEntity, List<SitePermissionEntity>> entry,\n+      StudyDetails studyDetail) {\n+    Long studyInvitedCount = 0L;\n+    Long studyEnrolledCount = 0L;\n+    for (SitePermissionEntity sitePermission : entry.getValue()) {\n+      studyInvitedCount =\n+          getStudyInvitedCount(\n+              siteWithInvitedParticipantCountMap, entry, studyInvitedCount, sitePermission);\n+\n+      studyEnrolledCount =\n+          studyEnrolledCount\n+              + siteWithEnrolledParticipantCountMap.get(sitePermission.getSite().getId());\n+    }\n+\n+    studyDetail.setEnrolled(studyEnrolledCount);\n+    studyDetail.setInvited(studyInvitedCount);\n+    if (studyDetail.getInvited() != 0 && studyDetail.getInvited() >= studyDetail.getEnrolled()) {\n+      Double percentage =\n+          (Double.valueOf(studyDetail.getEnrolled()) * 100)\n+              / Double.valueOf(studyDetail.getInvited());\n+      studyDetail.setEnrollmentPercentage(percentage);\n+    }\n+  }\n+\n+  private Long getStudyInvitedCount(\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map.Entry<StudyEntity, List<SitePermissionEntity>> entry,\n+      Long studyInvitedCount,\n+      SitePermissionEntity sitePermission) {\n+    String siteId = sitePermission.getSite().getId();\n+    String studyType = entry.getKey().getType();\n+    if (siteWithInvitedParticipantCountMap.get(siteId) != null && studyType.equals(CLOSE_STUDY)) {\n+      studyInvitedCount = studyInvitedCount + siteWithInvitedParticipantCountMap.get(siteId);\n+    }\n+\n+    if (studyType.equals(OPEN_STUDY)) {\n+      studyInvitedCount = studyInvitedCount + sitePermission.getSite().getTargetEnrollment();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac1b133e7f76db791900e787e9c1c599df6d5f94"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MDI2MA==", "bodyText": "shouldReturnStudyNotFound", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/637#discussion_r459660260", "createdAt": "2020-07-23T18:54:01Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/StudyControllerTest.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.Collections;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.MediaType;\n+\n+import com.google.cloud.healthcare.fdamystudies.common.ApiEndpoint;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.IdGenerator;\n+import com.google.cloud.healthcare.fdamystudies.common.TestConstants;\n+import com.google.cloud.healthcare.fdamystudies.helper.TestDataHelper;\n+import com.google.cloud.healthcare.fdamystudies.model.AppEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantRegistrySiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.UserRegAdminEntity;\n+import com.google.cloud.healthcare.fdamystudies.service.StudyService;\n+\n+public class StudyControllerTest extends BaseMockIT {\n+\n+  @Autowired private StudyService studyService;\n+\n+  @Autowired private StudyController controller;\n+\n+  @Autowired private TestDataHelper testDataHelper;\n+\n+  private UserRegAdminEntity userRegAdminEntity;\n+\n+  private SiteEntity siteEntity;\n+\n+  private StudyEntity studyEntity;\n+\n+  private ParticipantRegistrySiteEntity participantRegistrySiteEntity;\n+\n+  private ParticipantStudyEntity participantStudyEntity;\n+\n+  private AppEntity appEntity;\n+\n+  @BeforeEach\n+  public void setUp() {\n+    userRegAdminEntity = testDataHelper.createUserRegAdminEntity();\n+    appEntity = testDataHelper.createAppEntity(userRegAdminEntity);\n+    studyEntity = testDataHelper.createStudyEntity(userRegAdminEntity, appEntity);\n+    siteEntity = testDataHelper.createSiteEntity(studyEntity, userRegAdminEntity, appEntity);\n+    participantRegistrySiteEntity =\n+        testDataHelper.createParticipantRegistrySite(siteEntity, studyEntity);\n+    participantStudyEntity =\n+        testDataHelper.createParticipantStudyEntity(\n+            siteEntity, studyEntity, participantRegistrySiteEntity);\n+  }\n+\n+  @Test\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(mockMvc);\n+    assertNotNull(studyService);\n+  }\n+\n+  @Test\n+  public void shouldReturnStudies() throws Exception {\n+    HttpHeaders headers = newCommonHeaders();\n+    headers.add(TestConstants.USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_STUDIES.getPath()).headers(headers).contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(jsonPath(\"$.studies\").isArray())\n+        .andExpect(jsonPath(\"$.studies[0].id\").isNotEmpty())\n+        .andExpect(jsonPath(\"$.sitePermissionCount\").value(1));\n+  }\n+\n+  @Test\n+  public void shouldReturnBadRequestForGetStudies() throws Exception {\n+    HttpHeaders headers = newCommonHeaders();\n+\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_STUDIES.getPath()).headers(headers).contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isBadRequest())\n+        .andExpect(jsonPath(\"$.violations\").isArray())\n+        .andExpect(jsonPath(\"$.violations[0].path\").value(\"userId\"))\n+        .andExpect(jsonPath(\"$.violations[0].message\").value(\"header is required\"));\n+  }\n+\n+  @Test\n+  public void shouldNotReturnStudies() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac1b133e7f76db791900e787e9c1c599df6d5f94"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MDQ1Ng==", "bodyText": "check for expected array length", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/637#discussion_r459660456", "createdAt": "2020-07-23T18:54:22Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/StudyControllerTest.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.Collections;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.MediaType;\n+\n+import com.google.cloud.healthcare.fdamystudies.common.ApiEndpoint;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.IdGenerator;\n+import com.google.cloud.healthcare.fdamystudies.common.TestConstants;\n+import com.google.cloud.healthcare.fdamystudies.helper.TestDataHelper;\n+import com.google.cloud.healthcare.fdamystudies.model.AppEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantRegistrySiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.UserRegAdminEntity;\n+import com.google.cloud.healthcare.fdamystudies.service.StudyService;\n+\n+public class StudyControllerTest extends BaseMockIT {\n+\n+  @Autowired private StudyService studyService;\n+\n+  @Autowired private StudyController controller;\n+\n+  @Autowired private TestDataHelper testDataHelper;\n+\n+  private UserRegAdminEntity userRegAdminEntity;\n+\n+  private SiteEntity siteEntity;\n+\n+  private StudyEntity studyEntity;\n+\n+  private ParticipantRegistrySiteEntity participantRegistrySiteEntity;\n+\n+  private ParticipantStudyEntity participantStudyEntity;\n+\n+  private AppEntity appEntity;\n+\n+  @BeforeEach\n+  public void setUp() {\n+    userRegAdminEntity = testDataHelper.createUserRegAdminEntity();\n+    appEntity = testDataHelper.createAppEntity(userRegAdminEntity);\n+    studyEntity = testDataHelper.createStudyEntity(userRegAdminEntity, appEntity);\n+    siteEntity = testDataHelper.createSiteEntity(studyEntity, userRegAdminEntity, appEntity);\n+    participantRegistrySiteEntity =\n+        testDataHelper.createParticipantRegistrySite(siteEntity, studyEntity);\n+    participantStudyEntity =\n+        testDataHelper.createParticipantStudyEntity(\n+            siteEntity, studyEntity, participantRegistrySiteEntity);\n+  }\n+\n+  @Test\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(mockMvc);\n+    assertNotNull(studyService);\n+  }\n+\n+  @Test\n+  public void shouldReturnStudies() throws Exception {\n+    HttpHeaders headers = newCommonHeaders();\n+    headers.add(TestConstants.USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_STUDIES.getPath()).headers(headers).contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(jsonPath(\"$.studies\").isArray())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac1b133e7f76db791900e787e9c1c599df6d5f94"}, "originalPosition": 90}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4bae1b9b64a537cfec3cd996b7e64b9e79cb7df", "author": {"user": {"login": "monica-BTC", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/d4bae1b9b64a537cfec3cd996b7e64b9e79cb7df", "committedDate": "2020-07-24T05:36:07Z", "message": "Fixed PR comments\n\nFixed PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25d72b9aa7b7eba531130d73309d504c26d49fb9", "author": {"user": {"login": "monica-BTC", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/25d72b9aa7b7eba531130d73309d504c26d49fb9", "committedDate": "2020-07-24T05:45:05Z", "message": "Fixed build issue\n\nFixed build issue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2Nzc4MTcx", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/637#pullrequestreview-456778171", "createdAt": "2020-07-28T15:55:46Z", "commit": {"oid": "25d72b9aa7b7eba531130d73309d504c26d49fb9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfff6e9707178b73b26482c4cc4134a682a88d07", "author": {"user": {"login": "monica-BTC", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/cfff6e9707178b73b26482c4cc4134a682a88d07", "committedDate": "2020-08-06T11:07:19Z", "message": "Added Required Condition\n\nAdded Required Condition"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNzI1MjM3", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/637#pullrequestreview-462725237", "createdAt": "2020-08-06T17:20:19Z", "commit": {"oid": "cfff6e9707178b73b26482c4cc4134a682a88d07"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97b1457a87f4ef2e43171ad8467fc4256d5301f2", "author": {"user": {"login": "monica-BTC", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/97b1457a87f4ef2e43171ad8467fc4256d5301f2", "committedDate": "2020-08-11T05:46:46Z", "message": "Merge branch 'develop' into participant-manager-studies-endpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b899b879ecffae021042351a8394afcd8e54266", "author": {"user": {"login": "monica-BTC", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/3b899b879ecffae021042351a8394afcd8e54266", "committedDate": "2020-08-11T05:50:49Z", "message": "resolved conflict errors\n\nresolved conflict errors"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1MDU3MDc1", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/637#pullrequestreview-465057075", "createdAt": "2020-08-11T13:21:11Z", "commit": {"oid": "3b899b879ecffae021042351a8394afcd8e54266"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0aa82de92af53f054ac42d585135de74dae16c22", "author": {"user": {"login": "saminguyen", "name": "Sami Nguyen"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/0aa82de92af53f054ac42d585135de74dae16c22", "committedDate": "2020-08-11T13:21:18Z", "message": "Merge branch 'develop' into participant-manager-studies-endpoint"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 854, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}