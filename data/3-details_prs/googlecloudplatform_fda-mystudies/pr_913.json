{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyMDYyODU0", "number": 913, "title": "Android-network module changes", "bodyText": "network module changes for new auth server changes", "createdAt": "2020-09-08T13:57:17Z", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/913", "merged": true, "mergeCommit": {"oid": "67f00a5e646b219b4992bdf63c7cfbfbff8e9a27"}, "closed": true, "closedAt": "2020-10-06T05:28:49Z", "author": {"login": "naveenr-btc"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdG397UAH2gAyNDgyMDYyODU0OmRkMTEyZWVlZGQwY2M4ZGMwOGQzMDgxMGRjZDZmZDdjMDliZDFlMTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdPxhEXAH2gAyNDgyMDYyODU0OjA2MzE0NjY5YzRjYzhkZjdmZGViMjU1MmIwNTE3ZGQ1MzQwZDRjY2E=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "dd112eeedd0cc8dc08d30810dcd6fd7c09bd1e18", "author": {"user": {"login": "naveenr-btc", "name": "Naveen"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/dd112eeedd0cc8dc08d30810dcd6fd7c09bd1e18", "committedDate": "2020-09-08T13:53:12Z", "message": "network module changes for new auth server changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MzE0NzYw", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/913#pullrequestreview-484314760", "createdAt": "2020-09-08T16:37:51Z", "commit": {"oid": "dd112eeedd0cc8dc08d30810dcd6fd7c09bd1e18"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjozNzo1MVrOHOlZrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo0Mzo1OFrOHOlnHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1NDg5NA==", "bodyText": "nit: space after comment symbol", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/913#discussion_r485054894", "createdAt": "2020-09-08T16:37:51Z", "author": {"login": "zohrehj"}, "path": "Android/app/src/main/java/com/harvard/utils/Urls.java", "diffHunk": "@@ -16,23 +16,41 @@\n package com.harvard.utils;\n \n import com.harvard.BuildConfig;\n+import com.harvard.FdaApplication;\n+import com.harvard.utils.version.VersionChecker;\n \n public class Urls {\n   public static String BASE_URL_WCP_SERVER = BuildConfig.BASE_URL_WCP_SERVER;\n   public static String BASE_URL_REGISTRATION_SERVER = BuildConfig.BASE_URL_REGISTRATION_SERVER;\n   public static String BASE_URL_REGISTRATION_CONSENT_SERVER =\n-      BuildConfig.BASE_URL_REGISTRATION_CONSENT_SERVER;\n+          BuildConfig.BASE_URL_REGISTRATION_CONSENT_SERVER;\n   public static String BASE_URL_REGISTRATION_ENROLLMENT_SERVER =\n-      BuildConfig.BASE_URL_REGISTRATION_ENROLLMENT_SERVER;\n+          BuildConfig.BASE_URL_REGISTRATION_ENROLLMENT_SERVER;\n   public static String BASE_URL_AUTH_SERVER = BuildConfig.BASE_URL_AUTH_SERVER;\n   public static String BASE_URL_RESPONSE_SERVER = BuildConfig.BASE_URL_RESPONSE_SERVER;\n \n   // Auth Server\n   public static String LOGIN = \"login\";\n-  public static String LOGOUT = \"logout\";\n-  public static String REFRESH_TOKEN = BASE_URL_AUTH_SERVER + \"getRefreshedToken\";\n-  public static String CHANGE_PASSWORD = \"changePassword\";\n-  public static String FORGOT_PASSWORD = \"forgotPassword\";\n+\n+  //New Auth Server", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd112eeedd0cc8dc08d30810dcd6fd7c09bd1e18"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1NTUzNw==", "bodyText": "all URls should follow the format, e.g. /<pathcomponent>", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/913#discussion_r485055537", "createdAt": "2020-09-08T16:39:03Z", "author": {"login": "zohrehj"}, "path": "Android/app/src/main/java/com/harvard/utils/Urls.java", "diffHunk": "@@ -16,23 +16,41 @@\n package com.harvard.utils;\n \n import com.harvard.BuildConfig;\n+import com.harvard.FdaApplication;\n+import com.harvard.utils.version.VersionChecker;\n \n public class Urls {\n   public static String BASE_URL_WCP_SERVER = BuildConfig.BASE_URL_WCP_SERVER;\n   public static String BASE_URL_REGISTRATION_SERVER = BuildConfig.BASE_URL_REGISTRATION_SERVER;\n   public static String BASE_URL_REGISTRATION_CONSENT_SERVER =\n-      BuildConfig.BASE_URL_REGISTRATION_CONSENT_SERVER;\n+          BuildConfig.BASE_URL_REGISTRATION_CONSENT_SERVER;\n   public static String BASE_URL_REGISTRATION_ENROLLMENT_SERVER =\n-      BuildConfig.BASE_URL_REGISTRATION_ENROLLMENT_SERVER;\n+          BuildConfig.BASE_URL_REGISTRATION_ENROLLMENT_SERVER;\n   public static String BASE_URL_AUTH_SERVER = BuildConfig.BASE_URL_AUTH_SERVER;\n   public static String BASE_URL_RESPONSE_SERVER = BuildConfig.BASE_URL_RESPONSE_SERVER;\n \n   // Auth Server\n   public static String LOGIN = \"login\";\n-  public static String LOGOUT = \"logout\";\n-  public static String REFRESH_TOKEN = BASE_URL_AUTH_SERVER + \"getRefreshedToken\";\n-  public static String CHANGE_PASSWORD = \"changePassword\";\n-  public static String FORGOT_PASSWORD = \"forgotPassword\";\n+\n+  //New Auth Server\n+  public static String TOKENS = \"oauth2/token\";\n+  public static String AUTH_SERVICE = \"users/\";\n+  public static String CHANGE_PASSWORD = \"/change_password\";\n+  public static String FORGOT_PASSWORD = \"user/reset_password\";\n+  public static String LOGOUT = \"/logout\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd112eeedd0cc8dc08d30810dcd6fd7c09bd1e18"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1NTc3MA==", "bodyText": "please remove hardcoded value. This should come from configs", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/913#discussion_r485055770", "createdAt": "2020-09-08T16:39:25Z", "author": {"login": "zohrehj"}, "path": "Android/app/src/main/java/com/harvard/utils/Urls.java", "diffHunk": "@@ -16,23 +16,41 @@\n package com.harvard.utils;\n \n import com.harvard.BuildConfig;\n+import com.harvard.FdaApplication;\n+import com.harvard.utils.version.VersionChecker;\n \n public class Urls {\n   public static String BASE_URL_WCP_SERVER = BuildConfig.BASE_URL_WCP_SERVER;\n   public static String BASE_URL_REGISTRATION_SERVER = BuildConfig.BASE_URL_REGISTRATION_SERVER;\n   public static String BASE_URL_REGISTRATION_CONSENT_SERVER =\n-      BuildConfig.BASE_URL_REGISTRATION_CONSENT_SERVER;\n+          BuildConfig.BASE_URL_REGISTRATION_CONSENT_SERVER;\n   public static String BASE_URL_REGISTRATION_ENROLLMENT_SERVER =\n-      BuildConfig.BASE_URL_REGISTRATION_ENROLLMENT_SERVER;\n+          BuildConfig.BASE_URL_REGISTRATION_ENROLLMENT_SERVER;\n   public static String BASE_URL_AUTH_SERVER = BuildConfig.BASE_URL_AUTH_SERVER;\n   public static String BASE_URL_RESPONSE_SERVER = BuildConfig.BASE_URL_RESPONSE_SERVER;\n \n   // Auth Server\n   public static String LOGIN = \"login\";\n-  public static String LOGOUT = \"logout\";\n-  public static String REFRESH_TOKEN = BASE_URL_AUTH_SERVER + \"getRefreshedToken\";\n-  public static String CHANGE_PASSWORD = \"changePassword\";\n-  public static String FORGOT_PASSWORD = \"forgotPassword\";\n+\n+  //New Auth Server\n+  public static String TOKENS = \"oauth2/token\";\n+  public static String AUTH_SERVICE = \"users/\";\n+  public static String CHANGE_PASSWORD = \"/change_password\";\n+  public static String FORGOT_PASSWORD = \"user/reset_password\";\n+  public static String LOGOUT = \"/logout\";\n+  public static String AUTH_SERVER_REDIRECT = \"https://34.69.210.52/qa/oauth-scim-service/login\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd112eeedd0cc8dc08d30810dcd6fd7c09bd1e18"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1NjkxMQ==", "bodyText": "why are these values all hardcoded here?\ncode_challenge, state, etc", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/913#discussion_r485056911", "createdAt": "2020-09-08T16:41:20Z", "author": {"login": "zohrehj"}, "path": "Android/app/src/main/java/com/harvard/utils/Urls.java", "diffHunk": "@@ -16,23 +16,41 @@\n package com.harvard.utils;\n \n import com.harvard.BuildConfig;\n+import com.harvard.FdaApplication;\n+import com.harvard.utils.version.VersionChecker;\n \n public class Urls {\n   public static String BASE_URL_WCP_SERVER = BuildConfig.BASE_URL_WCP_SERVER;\n   public static String BASE_URL_REGISTRATION_SERVER = BuildConfig.BASE_URL_REGISTRATION_SERVER;\n   public static String BASE_URL_REGISTRATION_CONSENT_SERVER =\n-      BuildConfig.BASE_URL_REGISTRATION_CONSENT_SERVER;\n+          BuildConfig.BASE_URL_REGISTRATION_CONSENT_SERVER;\n   public static String BASE_URL_REGISTRATION_ENROLLMENT_SERVER =\n-      BuildConfig.BASE_URL_REGISTRATION_ENROLLMENT_SERVER;\n+          BuildConfig.BASE_URL_REGISTRATION_ENROLLMENT_SERVER;\n   public static String BASE_URL_AUTH_SERVER = BuildConfig.BASE_URL_AUTH_SERVER;\n   public static String BASE_URL_RESPONSE_SERVER = BuildConfig.BASE_URL_RESPONSE_SERVER;\n \n   // Auth Server\n   public static String LOGIN = \"login\";\n-  public static String LOGOUT = \"logout\";\n-  public static String REFRESH_TOKEN = BASE_URL_AUTH_SERVER + \"getRefreshedToken\";\n-  public static String CHANGE_PASSWORD = \"changePassword\";\n-  public static String FORGOT_PASSWORD = \"forgotPassword\";\n+\n+  //New Auth Server\n+  public static String TOKENS = \"oauth2/token\";\n+  public static String AUTH_SERVICE = \"users/\";\n+  public static String CHANGE_PASSWORD = \"/change_password\";\n+  public static String FORGOT_PASSWORD = \"user/reset_password\";\n+  public static String LOGOUT = \"/logout\";\n+  public static String AUTH_SERVER_REDIRECT = \"https://34.69.210.52/qa/oauth-scim-service/login\";\n+  public static String LOGIN_URL = BuildConfig.BASE_URL_HYDRA_SERVER + \"auth\"\n+          + \"?client_id=oauth-scim-client-id\"\n+          + \"&scope=offline_access\"\n+          + \"&response_type=code\"\n+          + \"&appId=\" + BuildConfig.APP_ID\n+          + \"&appVersion=\" + BuildConfig.VERSION_NAME + \".\" + BuildConfig.VERSION_CODE\n+          + \"&mobilePlatform=ANDROID\"\n+          + \"&code_challenge_method=S256\"\n+          + \"&code_challenge=wR4RMz7BGMNNXf6H9lWjV-2l8OiUQ47UOU8wHWOxVC4\"\n+          + \"&correlationId=\" + FdaApplication.getRandomString()\n+          + \"&redirect_uri=\" + AUTH_SERVER_REDIRECT\n+          + \"&state=wR4RMz7BGMNNXf6H9lWjV\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd112eeedd0cc8dc08d30810dcd6fd7c09bd1e18"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1NzIyMA==", "bodyText": "please fix formatting issues", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/913#discussion_r485057220", "createdAt": "2020-09-08T16:41:56Z", "author": {"login": "zohrehj"}, "path": "Android/app/src/main/java/com/harvard/webservicemodule/WebserviceSubscriber.java", "diffHunk": "@@ -132,18 +121,7 @@ public void onEvent(RegistrationServerConfigEvent registrationServerConfigEvent)\n           registrationServerConfigEvent.getV(),\n           registrationServerConfigEvent.isShowAlert(),\n           \"RegistrationServer\");\n-    } else if (registrationServerConfigEvent.getRequestType().equalsIgnoreCase(\"delete\")) {\n-      ApiCall apiCall = new ApiCall(registrationServerConfigEvent.getContext());\n-      apiCall.apiCallDeleteHashmap(\n-          url,\n-          registrationServerConfigEvent.getHeaders(),\n-          registrationServerConfigEvent.getClassT(),\n-          registrationServerConfigEvent.getRequestParams(),\n-          registrationServerConfigEvent.getResponseCode(),\n-          registrationServerConfigEvent.getV(),\n-          registrationServerConfigEvent.isShowAlert(),\n-          \"RegistrationServer\");\n-    } else if (registrationServerConfigEvent.getRequestType().equalsIgnoreCase(\"delete_object\")) {\n+    }else if (registrationServerConfigEvent.getRequestType().equalsIgnoreCase(\"delete_object\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd112eeedd0cc8dc08d30810dcd6fd7c09bd1e18"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1Nzk4Ng==", "bodyText": "same here, fix format", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/913#discussion_r485057986", "createdAt": "2020-09-08T16:43:19Z", "author": {"login": "zohrehj"}, "path": "Android/app/src/main/java/com/harvard/webservicemodule/WebserviceSubscriber.java", "diffHunk": "@@ -302,18 +245,7 @@ public void onEvent(AuthServerConfigEvent authServerConfigEvent) {\n           authServerConfigEvent.getV(),\n           authServerConfigEvent.isShowAlert(),\n           \"AuthServer\");\n-    } else if (authServerConfigEvent.getRequestType().equalsIgnoreCase(\"delete\")) {\n-      ApiCall apiCall = new ApiCall(authServerConfigEvent.getContext());\n-      apiCall.apiCallDeleteHashmap(\n-          url,\n-          authServerConfigEvent.getHeaders(),\n-          authServerConfigEvent.getClassT(),\n-          authServerConfigEvent.getRequestParams(),\n-          authServerConfigEvent.getResponseCode(),\n-          authServerConfigEvent.getV(),\n-          authServerConfigEvent.isShowAlert(),\n-          \"AuthServer\");\n-    } else if (authServerConfigEvent.getRequestType().equalsIgnoreCase(\"delete_object\")) {\n+    }else if (authServerConfigEvent.getRequestType().equalsIgnoreCase(\"delete_object\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd112eeedd0cc8dc08d30810dcd6fd7c09bd1e18"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1ODMzNA==", "bodyText": "why have delete and delete_array been removed?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/913#discussion_r485058334", "createdAt": "2020-09-08T16:43:58Z", "author": {"login": "zohrehj"}, "path": "Android/app/src/main/java/com/harvard/webservicemodule/WebserviceSubscriber.java", "diffHunk": "@@ -324,17 +256,6 @@ public void onEvent(AuthServerConfigEvent authServerConfigEvent) {\n           authServerConfigEvent.getV(),\n           authServerConfigEvent.isShowAlert(),\n           \"AuthServer\");\n-    } else if (authServerConfigEvent.getRequestType().equalsIgnoreCase(\"delete_array\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd112eeedd0cc8dc08d30810dcd6fd7c09bd1e18"}, "originalPosition": 118}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MzI0MzMw", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/913#pullrequestreview-484324330", "createdAt": "2020-09-08T16:51:01Z", "commit": {"oid": "dd112eeedd0cc8dc08d30810dcd6fd7c09bd1e18"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo1MTowMVrOHOl3FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo1MTowMVrOHOl3FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2MjQyMQ==", "bodyText": "move all these header fields into contants", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/913#discussion_r485062421", "createdAt": "2020-09-08T16:51:01Z", "author": {"login": "zohrehj"}, "path": "Android/app/src/main/java/com/harvard/webservicemodule/apihelper/HttpRequest.java", "diffHunk": "@@ -98,76 +97,64 @@ public static Responsemodel getRequest(\n           Map.Entry mapEntry = (Map.Entry) mapIterator.next();\n           String keyValue = (String) mapEntry.getKey();\n           String value = (String) mapEntry.getValue();\n-          urlConnection.setRequestProperty(keyValue, value);\n+          conn.setRequestProperty(keyValue, value);\n         }\n       }\n       try {\n         // Will throw IOException if server responds with 401.\n-        responseCode = urlConnection.getResponseCode();\n+        responseCode = conn.getResponseCode();\n       } catch (IOException e) {\n         // Will return 401, because now connection has the correct internal state.\n-        responseCode = urlConnection.getResponseCode();\n+        responseCode = conn.getResponseCode();\n       }\n-      if (serverType.equalsIgnoreCase(\"Response\")) {\n-        BufferedReader in = null;\n-        try {\n-          in = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));\n-        } catch (IOException e) {\n-          in = new BufferedReader(new InputStreamReader(urlConnection.getErrorStream()));\n-          Logger.log(e);\n-        }\n+\n+      if (responseCode >= HttpURLConnection.HTTP_OK && responseCode < HttpURLConnection.HTTP_MULT_CHOICE) {\n+        BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n         String inputLine;\n \n         while ((inputLine = in.readLine()) != null) {\n           response.append(inputLine);\n         }\n         in.close();\n-        urlConnection.disconnect();\n-        responsee = response.toString();\n+        conn.disconnect();\n         responseData = response.toString();\n+        responseModel.setServermsg(\"success\");\n+      } else if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) {\n+        responseData = \"session expired\";\n       } else {\n-        if (responseCode == HttpURLConnection.HTTP_OK) {\n-          BufferedReader in =\n-              new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));\n+        if (conn.getHeaderField(\"StatusMessage\") != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd112eeedd0cc8dc08d30810dcd6fd7c09bd1e18"}, "originalPosition": 122}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MzI0OTI1", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/913#pullrequestreview-484324925", "createdAt": "2020-09-08T16:51:49Z", "commit": {"oid": "dd112eeedd0cc8dc08d30810dcd6fd7c09bd1e18"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo1MTo0OVrOHOl41A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo1MTo0OVrOHOl41A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2Mjg2OA==", "bodyText": "nit: ResponseModel", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/913#discussion_r485062868", "createdAt": "2020-09-08T16:51:49Z", "author": {"login": "zohrehj"}, "path": "Android/app/src/main/java/com/harvard/webservicemodule/apihelper/HttpRequest.java", "diffHunk": "@@ -487,57 +469,172 @@ static Responsemodel makePostRequestWithJsonRefreshToken(\n         responseCode = conn.getResponseCode();\n       }\n \n-      if (serverType.equalsIgnoreCase(\"Response\")) {\n-        String line;\n-        BufferedReader br;\n-        try {\n-          br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n-        } catch (IOException e) {\n-          br = new BufferedReader(new InputStreamReader(conn.getErrorStream()));\n-          Logger.log(e);\n-        }\n-        while ((line = br.readLine()) != null) {\n-          response += line;\n-          responseData += line;\n+      if (responseCode >= HttpURLConnection.HTTP_OK && responseCode < HttpURLConnection.HTTP_MULT_CHOICE) {\n+        BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n+        String inputLine;\n+\n+        while ((inputLine = in.readLine()) != null) {\n+          response.append(inputLine);\n         }\n+        in.close();\n+        conn.disconnect();\n+        responseData = response.toString();\n+        responseModel.setServermsg(\"success\");\n+      } else if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) {\n+        responseData = \"session expired\";\n       } else {\n-        if (responseCode == HttpsURLConnection.HTTP_OK) {\n-          String line;\n-          BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n-          while ((line = br.readLine()) != null) {\n-            response += line;\n-            responseData += line;\n-          }\n-        } else if (responseCode == HttpURLConnection.HTTP_FORBIDDEN) {\n-          response = \"session expired\";\n-          responseData = \"\";\n+        if (conn.getHeaderField(\"StatusMessage\") != null) {\n+          responseModel.setServermsg(conn.getHeaderField(\"StatusMessage\"));\n+          responseData = \"http_not_ok\";\n         } else {\n-          response = \"http_not_ok\";\n-          responseData = \"\";\n+          BufferedReader in = new BufferedReader(new InputStreamReader(conn.getErrorStream()));\n+          String inputLine;\n+\n+          while ((inputLine = in.readLine()) != null) {\n+            response.append(inputLine);\n+          }\n+          in.close();\n+          conn.disconnect();\n+          responseData = response.toString();\n+\n+          JSONObject responseDataJson = new JSONObject(responseData);\n+          if (responseDataJson.has(\"error_description\")) {\n+            responseModel.setServermsg(responseDataJson.getString(\"error_description\"));\n+          } else {\n+            responseModel.setServermsg(\"server error\");\n+          }\n         }\n       }\n-      if (conn.getHeaderField(\"StatusMessage\") != null) {\n-        responseModel.setServermsg(conn.getHeaderField(\"StatusMessage\"));\n-      } else if (responseCode != HttpURLConnection.HTTP_OK\n-          && conn.getHeaderField(\"StatusMessage\") == null) {\n-        responseModel.setServermsg(\"server error\");\n-      } else {\n+    } catch (ConnectException e) {\n+      responseModel.setServermsg(\"No internet connection/cannot connect to server\");\n+      responseData = \"timeout\";\n+      Logger.log(e);\n+    } catch (Exception e) {\n+      responseModel.setServermsg(\"No internet connection/cannot connect to server\");\n+      responseData = \"\";\n+      Logger.log(e);\n+    }\n+\n+    responseModel.setResponseCode(\"\" + responseCode);\n+    responseModel.setResponseData(responseData);\n+    return responseModel;\n+  }\n+\n+  /**\n+   * To make put request using json object.\n+   *\n+   * @param urlpath     -->url path\n+   * @param jsonObject  -->json object\n+   * @param headersData --> null if no header\n+   * @return Responsemodel\n+   */\n+  static Responsemodel makePutRequestWithJson(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd112eeedd0cc8dc08d30810dcd6fd7c09bd1e18"}, "originalPosition": 557}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MzI1Mjkz", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/913#pullrequestreview-484325293", "createdAt": "2020-09-08T16:52:18Z", "commit": {"oid": "dd112eeedd0cc8dc08d30810dcd6fd7c09bd1e18"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo1MjoxOFrOHOl6Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo1MjoxOFrOHOl6Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2MzE3OQ==", "bodyText": "move all fixed values into constants", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/913#discussion_r485063179", "createdAt": "2020-09-08T16:52:18Z", "author": {"login": "zohrehj"}, "path": "Android/app/src/main/java/com/harvard/webservicemodule/apihelper/HttpRequest.java", "diffHunk": "@@ -487,57 +469,172 @@ static Responsemodel makePostRequestWithJsonRefreshToken(\n         responseCode = conn.getResponseCode();\n       }\n \n-      if (serverType.equalsIgnoreCase(\"Response\")) {\n-        String line;\n-        BufferedReader br;\n-        try {\n-          br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n-        } catch (IOException e) {\n-          br = new BufferedReader(new InputStreamReader(conn.getErrorStream()));\n-          Logger.log(e);\n-        }\n-        while ((line = br.readLine()) != null) {\n-          response += line;\n-          responseData += line;\n+      if (responseCode >= HttpURLConnection.HTTP_OK && responseCode < HttpURLConnection.HTTP_MULT_CHOICE) {\n+        BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n+        String inputLine;\n+\n+        while ((inputLine = in.readLine()) != null) {\n+          response.append(inputLine);\n         }\n+        in.close();\n+        conn.disconnect();\n+        responseData = response.toString();\n+        responseModel.setServermsg(\"success\");\n+      } else if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) {\n+        responseData = \"session expired\";\n       } else {\n-        if (responseCode == HttpsURLConnection.HTTP_OK) {\n-          String line;\n-          BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n-          while ((line = br.readLine()) != null) {\n-            response += line;\n-            responseData += line;\n-          }\n-        } else if (responseCode == HttpURLConnection.HTTP_FORBIDDEN) {\n-          response = \"session expired\";\n-          responseData = \"\";\n+        if (conn.getHeaderField(\"StatusMessage\") != null) {\n+          responseModel.setServermsg(conn.getHeaderField(\"StatusMessage\"));\n+          responseData = \"http_not_ok\";\n         } else {\n-          response = \"http_not_ok\";\n-          responseData = \"\";\n+          BufferedReader in = new BufferedReader(new InputStreamReader(conn.getErrorStream()));\n+          String inputLine;\n+\n+          while ((inputLine = in.readLine()) != null) {\n+            response.append(inputLine);\n+          }\n+          in.close();\n+          conn.disconnect();\n+          responseData = response.toString();\n+\n+          JSONObject responseDataJson = new JSONObject(responseData);\n+          if (responseDataJson.has(\"error_description\")) {\n+            responseModel.setServermsg(responseDataJson.getString(\"error_description\"));\n+          } else {\n+            responseModel.setServermsg(\"server error\");\n+          }\n         }\n       }\n-      if (conn.getHeaderField(\"StatusMessage\") != null) {\n-        responseModel.setServermsg(conn.getHeaderField(\"StatusMessage\"));\n-      } else if (responseCode != HttpURLConnection.HTTP_OK\n-          && conn.getHeaderField(\"StatusMessage\") == null) {\n-        responseModel.setServermsg(\"server error\");\n-      } else {\n+    } catch (ConnectException e) {\n+      responseModel.setServermsg(\"No internet connection/cannot connect to server\");\n+      responseData = \"timeout\";\n+      Logger.log(e);\n+    } catch (Exception e) {\n+      responseModel.setServermsg(\"No internet connection/cannot connect to server\");\n+      responseData = \"\";\n+      Logger.log(e);\n+    }\n+\n+    responseModel.setResponseCode(\"\" + responseCode);\n+    responseModel.setResponseData(responseData);\n+    return responseModel;\n+  }\n+\n+  /**\n+   * To make put request using json object.\n+   *\n+   * @param urlpath     -->url path\n+   * @param jsonObject  -->json object\n+   * @param headersData --> null if no header\n+   * @return Responsemodel\n+   */\n+  static Responsemodel makePutRequestWithJson(\n+          String urlpath,\n+          JSONObject jsonObject,\n+          HashMap<String, String> headersData,\n+          String serverType) {\n+    Responsemodel responseModel = new Responsemodel();\n+    StringBuffer response = new StringBuffer();\n+    String responseData = \"\";\n+    int responseCode = 0;\n+    URL url1;\n+    try {\n+      url1 = new URL(urlpath);\n+      HttpURLConnection conn = (HttpURLConnection) url1.openConnection();\n+      conn.setReadTimeout(180000);\n+      conn.setConnectTimeout(180000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd112eeedd0cc8dc08d30810dcd6fd7c09bd1e18"}, "originalPosition": 571}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MzI1OTI4", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/913#pullrequestreview-484325928", "createdAt": "2020-09-08T16:53:12Z", "commit": {"oid": "dd112eeedd0cc8dc08d30810dcd6fd7c09bd1e18"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo1MzoxMlrOHOl76g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo1MzoxMlrOHOl76g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2MzY1OA==", "bodyText": "This should be an enum check.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/913#discussion_r485063658", "createdAt": "2020-09-08T16:53:12Z", "author": {"login": "zohrehj"}, "path": "Android/app/src/main/java/com/harvard/webservicemodule/apihelper/HttpRequest.java", "diffHunk": "@@ -487,57 +469,172 @@ static Responsemodel makePostRequestWithJsonRefreshToken(\n         responseCode = conn.getResponseCode();\n       }\n \n-      if (serverType.equalsIgnoreCase(\"Response\")) {\n-        String line;\n-        BufferedReader br;\n-        try {\n-          br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n-        } catch (IOException e) {\n-          br = new BufferedReader(new InputStreamReader(conn.getErrorStream()));\n-          Logger.log(e);\n-        }\n-        while ((line = br.readLine()) != null) {\n-          response += line;\n-          responseData += line;\n+      if (responseCode >= HttpURLConnection.HTTP_OK && responseCode < HttpURLConnection.HTTP_MULT_CHOICE) {\n+        BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n+        String inputLine;\n+\n+        while ((inputLine = in.readLine()) != null) {\n+          response.append(inputLine);\n         }\n+        in.close();\n+        conn.disconnect();\n+        responseData = response.toString();\n+        responseModel.setServermsg(\"success\");\n+      } else if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) {\n+        responseData = \"session expired\";\n       } else {\n-        if (responseCode == HttpsURLConnection.HTTP_OK) {\n-          String line;\n-          BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n-          while ((line = br.readLine()) != null) {\n-            response += line;\n-            responseData += line;\n-          }\n-        } else if (responseCode == HttpURLConnection.HTTP_FORBIDDEN) {\n-          response = \"session expired\";\n-          responseData = \"\";\n+        if (conn.getHeaderField(\"StatusMessage\") != null) {\n+          responseModel.setServermsg(conn.getHeaderField(\"StatusMessage\"));\n+          responseData = \"http_not_ok\";\n         } else {\n-          response = \"http_not_ok\";\n-          responseData = \"\";\n+          BufferedReader in = new BufferedReader(new InputStreamReader(conn.getErrorStream()));\n+          String inputLine;\n+\n+          while ((inputLine = in.readLine()) != null) {\n+            response.append(inputLine);\n+          }\n+          in.close();\n+          conn.disconnect();\n+          responseData = response.toString();\n+\n+          JSONObject responseDataJson = new JSONObject(responseData);\n+          if (responseDataJson.has(\"error_description\")) {\n+            responseModel.setServermsg(responseDataJson.getString(\"error_description\"));\n+          } else {\n+            responseModel.setServermsg(\"server error\");\n+          }\n         }\n       }\n-      if (conn.getHeaderField(\"StatusMessage\") != null) {\n-        responseModel.setServermsg(conn.getHeaderField(\"StatusMessage\"));\n-      } else if (responseCode != HttpURLConnection.HTTP_OK\n-          && conn.getHeaderField(\"StatusMessage\") == null) {\n-        responseModel.setServermsg(\"server error\");\n-      } else {\n+    } catch (ConnectException e) {\n+      responseModel.setServermsg(\"No internet connection/cannot connect to server\");\n+      responseData = \"timeout\";\n+      Logger.log(e);\n+    } catch (Exception e) {\n+      responseModel.setServermsg(\"No internet connection/cannot connect to server\");\n+      responseData = \"\";\n+      Logger.log(e);\n+    }\n+\n+    responseModel.setResponseCode(\"\" + responseCode);\n+    responseModel.setResponseData(responseData);\n+    return responseModel;\n+  }\n+\n+  /**\n+   * To make put request using json object.\n+   *\n+   * @param urlpath     -->url path\n+   * @param jsonObject  -->json object\n+   * @param headersData --> null if no header\n+   * @return Responsemodel\n+   */\n+  static Responsemodel makePutRequestWithJson(\n+          String urlpath,\n+          JSONObject jsonObject,\n+          HashMap<String, String> headersData,\n+          String serverType) {\n+    Responsemodel responseModel = new Responsemodel();\n+    StringBuffer response = new StringBuffer();\n+    String responseData = \"\";\n+    int responseCode = 0;\n+    URL url1;\n+    try {\n+      url1 = new URL(urlpath);\n+      HttpURLConnection conn = (HttpURLConnection) url1.openConnection();\n+      conn.setReadTimeout(180000);\n+      conn.setConnectTimeout(180000);\n+      conn.setRequestMethod(\"PUT\");\n+      conn.setDoInput(true);\n+      conn.setRequestProperty(\"Content-Type\", \"application/json\");\n+\n+      conn.setRequestProperty(AppConfig.APP_ID_KEY, AppConfig.APP_ID_VALUE);\n+      conn.setRequestProperty(AppConfig.ORG_ID_KEY, AppConfig.ORG_ID_VALUE);\n+      conn.setRequestProperty(AppConfig.CLIENT_ID_KEY, AppConfig.CLIENT_ID_VALUE);\n+      conn.setRequestProperty(AppConfig.SECRET_KEY, AppConfig.SECRET_KEY_VALUE);\n+\n+      if (serverType.equalsIgnoreCase(\"WCP\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd112eeedd0cc8dc08d30810dcd6fd7c09bd1e18"}, "originalPosition": 581}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MzI3NDAy", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/913#pullrequestreview-484327402", "createdAt": "2020-09-08T16:55:20Z", "commit": {"oid": "dd112eeedd0cc8dc08d30810dcd6fd7c09bd1e18"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo1NToyMFrOHOmAkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo1NToyMFrOHOmAkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2NDg1MA==", "bodyText": "what is the purpose of http_not_ok string?\nWouldn't the statusCode be enough to understand that it was not okay?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/913#discussion_r485064850", "createdAt": "2020-09-08T16:55:20Z", "author": {"login": "zohrehj"}, "path": "Android/app/src/main/java/com/harvard/webservicemodule/apihelper/HttpRequest.java", "diffHunk": "@@ -487,57 +469,172 @@ static Responsemodel makePostRequestWithJsonRefreshToken(\n         responseCode = conn.getResponseCode();\n       }\n \n-      if (serverType.equalsIgnoreCase(\"Response\")) {\n-        String line;\n-        BufferedReader br;\n-        try {\n-          br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n-        } catch (IOException e) {\n-          br = new BufferedReader(new InputStreamReader(conn.getErrorStream()));\n-          Logger.log(e);\n-        }\n-        while ((line = br.readLine()) != null) {\n-          response += line;\n-          responseData += line;\n+      if (responseCode >= HttpURLConnection.HTTP_OK && responseCode < HttpURLConnection.HTTP_MULT_CHOICE) {\n+        BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n+        String inputLine;\n+\n+        while ((inputLine = in.readLine()) != null) {\n+          response.append(inputLine);\n         }\n+        in.close();\n+        conn.disconnect();\n+        responseData = response.toString();\n+        responseModel.setServermsg(\"success\");\n+      } else if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) {\n+        responseData = \"session expired\";\n       } else {\n-        if (responseCode == HttpsURLConnection.HTTP_OK) {\n-          String line;\n-          BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n-          while ((line = br.readLine()) != null) {\n-            response += line;\n-            responseData += line;\n-          }\n-        } else if (responseCode == HttpURLConnection.HTTP_FORBIDDEN) {\n-          response = \"session expired\";\n-          responseData = \"\";\n+        if (conn.getHeaderField(\"StatusMessage\") != null) {\n+          responseModel.setServermsg(conn.getHeaderField(\"StatusMessage\"));\n+          responseData = \"http_not_ok\";\n         } else {\n-          response = \"http_not_ok\";\n-          responseData = \"\";\n+          BufferedReader in = new BufferedReader(new InputStreamReader(conn.getErrorStream()));\n+          String inputLine;\n+\n+          while ((inputLine = in.readLine()) != null) {\n+            response.append(inputLine);\n+          }\n+          in.close();\n+          conn.disconnect();\n+          responseData = response.toString();\n+\n+          JSONObject responseDataJson = new JSONObject(responseData);\n+          if (responseDataJson.has(\"error_description\")) {\n+            responseModel.setServermsg(responseDataJson.getString(\"error_description\"));\n+          } else {\n+            responseModel.setServermsg(\"server error\");\n+          }\n         }\n       }\n-      if (conn.getHeaderField(\"StatusMessage\") != null) {\n-        responseModel.setServermsg(conn.getHeaderField(\"StatusMessage\"));\n-      } else if (responseCode != HttpURLConnection.HTTP_OK\n-          && conn.getHeaderField(\"StatusMessage\") == null) {\n-        responseModel.setServermsg(\"server error\");\n-      } else {\n+    } catch (ConnectException e) {\n+      responseModel.setServermsg(\"No internet connection/cannot connect to server\");\n+      responseData = \"timeout\";\n+      Logger.log(e);\n+    } catch (Exception e) {\n+      responseModel.setServermsg(\"No internet connection/cannot connect to server\");\n+      responseData = \"\";\n+      Logger.log(e);\n+    }\n+\n+    responseModel.setResponseCode(\"\" + responseCode);\n+    responseModel.setResponseData(responseData);\n+    return responseModel;\n+  }\n+\n+  /**\n+   * To make put request using json object.\n+   *\n+   * @param urlpath     -->url path\n+   * @param jsonObject  -->json object\n+   * @param headersData --> null if no header\n+   * @return Responsemodel\n+   */\n+  static Responsemodel makePutRequestWithJson(\n+          String urlpath,\n+          JSONObject jsonObject,\n+          HashMap<String, String> headersData,\n+          String serverType) {\n+    Responsemodel responseModel = new Responsemodel();\n+    StringBuffer response = new StringBuffer();\n+    String responseData = \"\";\n+    int responseCode = 0;\n+    URL url1;\n+    try {\n+      url1 = new URL(urlpath);\n+      HttpURLConnection conn = (HttpURLConnection) url1.openConnection();\n+      conn.setReadTimeout(180000);\n+      conn.setConnectTimeout(180000);\n+      conn.setRequestMethod(\"PUT\");\n+      conn.setDoInput(true);\n+      conn.setRequestProperty(\"Content-Type\", \"application/json\");\n+\n+      conn.setRequestProperty(AppConfig.APP_ID_KEY, AppConfig.APP_ID_VALUE);\n+      conn.setRequestProperty(AppConfig.ORG_ID_KEY, AppConfig.ORG_ID_VALUE);\n+      conn.setRequestProperty(AppConfig.CLIENT_ID_KEY, AppConfig.CLIENT_ID_VALUE);\n+      conn.setRequestProperty(AppConfig.SECRET_KEY, AppConfig.SECRET_KEY_VALUE);\n+\n+      if (serverType.equalsIgnoreCase(\"WCP\")) {\n+        String encoding = Base64.encodeToString(basicAuth.getBytes(), Base64.DEFAULT);\n+        conn.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n+        conn.setRequestProperty(AppConfig.WCP_APP_ID_KEY, AppConfig.APP_ID_VALUE);\n+        conn.setRequestProperty(AppConfig.ORG_ID_KEY, AppConfig.ORG_ID_VALUE);\n+      }\n+\n+      if (headersData != null) {\n+        Set mapSet = (Set) headersData.entrySet();\n+        Iterator mapIterator = mapSet.iterator();\n+        while (mapIterator.hasNext()) {\n+          Map.Entry mapEntry = (Map.Entry) mapIterator.next();\n+          String keyValue = (String) mapEntry.getKey();\n+          String value = (String) mapEntry.getValue();\n+          conn.setRequestProperty(keyValue, value);\n+        }\n+      }\n+\n+      conn.setDoOutput(true);\n+\n+      OutputStream os = conn.getOutputStream();\n+      BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, \"UTF-8\"));\n+      writer.write(jsonObject.toString());\n+\n+      writer.flush();\n+      writer.close();\n+      os.close();\n+\n+      try {\n+        // Will throw IOException if server responds with 401.\n+        responseCode = conn.getResponseCode();\n+      } catch (IOException e) {\n+        // Will return 401, because now connection has the correct internal state.\n+        responseCode = conn.getResponseCode();\n+      }\n+\n+      if (responseCode >= HttpURLConnection.HTTP_OK && responseCode < HttpURLConnection.HTTP_MULT_CHOICE) {\n+        BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n+        String inputLine;\n+\n+        while ((inputLine = in.readLine()) != null) {\n+          response.append(inputLine);\n+        }\n+        in.close();\n+        conn.disconnect();\n+        responseData = response.toString();\n         responseModel.setServermsg(\"success\");\n+      } else if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) {\n+        responseData = \"session expired\";\n+      } else {\n+        if (conn.getHeaderField(\"StatusMessage\") != null) {\n+          responseModel.setServermsg(conn.getHeaderField(\"StatusMessage\"));\n+          responseData = \"http_not_ok\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd112eeedd0cc8dc08d30810dcd6fd7c09bd1e18"}, "originalPosition": 633}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MzI4Mzgw", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/913#pullrequestreview-484328380", "createdAt": "2020-09-08T16:56:35Z", "commit": {"oid": "dd112eeedd0cc8dc08d30810dcd6fd7c09bd1e18"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo1NjozNVrOHOmDdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo1NjozNVrOHOmDdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2NTU4OQ==", "bodyText": "move \"UTF-8\" into a constant.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/913#discussion_r485065589", "createdAt": "2020-09-08T16:56:35Z", "author": {"login": "zohrehj"}, "path": "Android/app/src/main/java/com/harvard/webservicemodule/apihelper/HttpRequest.java", "diffHunk": "@@ -552,51 +649,67 @@ private static String getPostDataString(HashMap<String, String> params) {\n     return new Gson().toJson(params);\n   }\n \n+  private static String getDataString(HashMap<String, String> params) throws UnsupportedEncodingException {\n+    StringBuilder result = new StringBuilder();\n+    boolean first = true;\n+    for (Map.Entry<String, String> entry : params.entrySet()) {\n+      if (first) {\n+        first = false;\n+      } else {\n+        result.append(\"&\");\n+      }\n+      result.append(URLEncoder.encode(entry.getKey(), \"UTF-8\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd112eeedd0cc8dc08d30810dcd6fd7c09bd1e18"}, "originalPosition": 685}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MzI5MDI0", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/913#pullrequestreview-484329024", "createdAt": "2020-09-08T16:57:27Z", "commit": {"oid": "dd112eeedd0cc8dc08d30810dcd6fd7c09bd1e18"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo1NzoyN1rOHOmFeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo1NzoyN1rOHOmFeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2NjEwNQ==", "bodyText": "this could be moved into a small helper method", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/913#discussion_r485066105", "createdAt": "2020-09-08T16:57:27Z", "author": {"login": "zohrehj"}, "path": "Android/app/src/main/java/com/harvard/webservicemodule/apihelper/HttpRequest.java", "diffHunk": "@@ -552,51 +649,67 @@ private static String getPostDataString(HashMap<String, String> params) {\n     return new Gson().toJson(params);\n   }\n \n+  private static String getDataString(HashMap<String, String> params) throws UnsupportedEncodingException {\n+    StringBuilder result = new StringBuilder();\n+    boolean first = true;\n+    for (Map.Entry<String, String> entry : params.entrySet()) {\n+      if (first) {\n+        first = false;\n+      } else {\n+        result.append(\"&\");\n+      }\n+      result.append(URLEncoder.encode(entry.getKey(), \"UTF-8\"));\n+      result.append(\"=\");\n+      result.append(URLEncoder.encode(entry.getValue(), \"UTF-8\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd112eeedd0cc8dc08d30810dcd6fd7c09bd1e18"}, "originalPosition": 687}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MzI5OTg5", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/913#pullrequestreview-484329989", "createdAt": "2020-09-08T16:58:46Z", "commit": {"oid": "dd112eeedd0cc8dc08d30810dcd6fd7c09bd1e18"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo1ODo0NlrOHOmIWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo1ODo0NlrOHOmIWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2Njg0Mg==", "bodyText": "move fixed values into constants, defined on top of the file.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/913#discussion_r485066842", "createdAt": "2020-09-08T16:58:46Z", "author": {"login": "zohrehj"}, "path": "Android/app/src/main/java/com/harvard/webservicemodule/apihelper/HttpRequest.java", "diffHunk": "@@ -552,51 +649,67 @@ private static String getPostDataString(HashMap<String, String> params) {\n     return new Gson().toJson(params);\n   }\n \n+  private static String getDataString(HashMap<String, String> params) throws UnsupportedEncodingException {\n+    StringBuilder result = new StringBuilder();\n+    boolean first = true;\n+    for (Map.Entry<String, String> entry : params.entrySet()) {\n+      if (first) {\n+        first = false;\n+      } else {\n+        result.append(\"&\");\n+      }\n+      result.append(URLEncoder.encode(entry.getKey(), \"UTF-8\"));\n+      result.append(\"=\");\n+      result.append(URLEncoder.encode(entry.getValue(), \"UTF-8\"));\n+    }\n+    return result.toString();\n+  }\n+\n   /**\n    * To make post request for form data and files upload.\n    *\n-   * @param urlPath --> url path\n-   * @param headers --> null if no header\n+   * @param urlPath  --> url path\n+   * @param headers  --> null if no header\n    * @param formData --> null if no form data\n-   * @param files --> null if no files\n+   * @param files    --> null if no files\n    * @return web-service response as String\n    */\n   static Responsemodel postRequestMultipart(\n-      String urlPath,\n-      HashMap<String, String> headers,\n-      HashMap<String, String> formData,\n-      HashMap<String, File> files,\n-      String serverType) {\n+          String urlPath,\n+          HashMap<String, String> headers,\n+          HashMap<String, String> formData,\n+          HashMap<String, File> files,\n+          String serverType) {\n     Responsemodel responseModel = new Responsemodel();\n-    HttpURLConnection httpConn;\n-    String response = \"\";\n+    HttpURLConnection conn;\n+    StringBuffer response = new StringBuffer();\n     String responseData = \"\";\n     String lineFeed = \"\\r\\n\";\n     int responseCode = 0;\n     try {\n       URL url = new URL(urlPath);\n-      httpConn = (HttpURLConnection) url.openConnection();\n-      httpConn.setUseCaches(false);\n-      httpConn.setDoOutput(true); // indicates POST method\n-      httpConn.setDoInput(true);\n-      httpConn.setReadTimeout(180000);\n-      httpConn.setConnectTimeout(180000);\n-      httpConn.setRequestProperty(\"Content-Type\", \"multipart/form-data;\");\n-      httpConn.setRequestProperty(\"User-Agent\", \"CodeJava Agent\");\n-\n-      httpConn.setRequestProperty(AppConfig.APP_ID_KEY, AppConfig.APP_ID_VALUE);\n-      httpConn.setRequestProperty(AppConfig.ORG_ID_KEY, AppConfig.ORG_ID_VALUE);\n-      httpConn.setRequestProperty(AppConfig.CLIENT_ID_KEY, AppConfig.CLIENT_ID_VALUE);\n-      httpConn.setRequestProperty(AppConfig.SECRET_KEY, AppConfig.SECRET_KEY_VALUE);\n+      conn = (HttpURLConnection) url.openConnection();\n+      conn.setUseCaches(false);\n+      conn.setDoOutput(true); // indicates POST method\n+      conn.setDoInput(true);\n+      conn.setReadTimeout(180000);\n+      conn.setConnectTimeout(180000);\n+      conn.setRequestProperty(\"Content-Type\", \"multipart/form-data;\");\n+      conn.setRequestProperty(\"User-Agent\", \"CodeJava Agent\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd112eeedd0cc8dc08d30810dcd6fd7c09bd1e18"}, "originalPosition": 745}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MzMwMjAy", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/913#pullrequestreview-484330202", "createdAt": "2020-09-08T16:59:01Z", "commit": {"oid": "dd112eeedd0cc8dc08d30810dcd6fd7c09bd1e18"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo1OTowMVrOHOmI8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo1OTowMVrOHOmI8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2Njk5Mg==", "bodyText": "org_id has been removed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/913#discussion_r485066992", "createdAt": "2020-09-08T16:59:01Z", "author": {"login": "zohrehj"}, "path": "Android/app/src/main/java/com/harvard/webservicemodule/apihelper/HttpRequest.java", "diffHunk": "@@ -552,51 +649,67 @@ private static String getPostDataString(HashMap<String, String> params) {\n     return new Gson().toJson(params);\n   }\n \n+  private static String getDataString(HashMap<String, String> params) throws UnsupportedEncodingException {\n+    StringBuilder result = new StringBuilder();\n+    boolean first = true;\n+    for (Map.Entry<String, String> entry : params.entrySet()) {\n+      if (first) {\n+        first = false;\n+      } else {\n+        result.append(\"&\");\n+      }\n+      result.append(URLEncoder.encode(entry.getKey(), \"UTF-8\"));\n+      result.append(\"=\");\n+      result.append(URLEncoder.encode(entry.getValue(), \"UTF-8\"));\n+    }\n+    return result.toString();\n+  }\n+\n   /**\n    * To make post request for form data and files upload.\n    *\n-   * @param urlPath --> url path\n-   * @param headers --> null if no header\n+   * @param urlPath  --> url path\n+   * @param headers  --> null if no header\n    * @param formData --> null if no form data\n-   * @param files --> null if no files\n+   * @param files    --> null if no files\n    * @return web-service response as String\n    */\n   static Responsemodel postRequestMultipart(\n-      String urlPath,\n-      HashMap<String, String> headers,\n-      HashMap<String, String> formData,\n-      HashMap<String, File> files,\n-      String serverType) {\n+          String urlPath,\n+          HashMap<String, String> headers,\n+          HashMap<String, String> formData,\n+          HashMap<String, File> files,\n+          String serverType) {\n     Responsemodel responseModel = new Responsemodel();\n-    HttpURLConnection httpConn;\n-    String response = \"\";\n+    HttpURLConnection conn;\n+    StringBuffer response = new StringBuffer();\n     String responseData = \"\";\n     String lineFeed = \"\\r\\n\";\n     int responseCode = 0;\n     try {\n       URL url = new URL(urlPath);\n-      httpConn = (HttpURLConnection) url.openConnection();\n-      httpConn.setUseCaches(false);\n-      httpConn.setDoOutput(true); // indicates POST method\n-      httpConn.setDoInput(true);\n-      httpConn.setReadTimeout(180000);\n-      httpConn.setConnectTimeout(180000);\n-      httpConn.setRequestProperty(\"Content-Type\", \"multipart/form-data;\");\n-      httpConn.setRequestProperty(\"User-Agent\", \"CodeJava Agent\");\n-\n-      httpConn.setRequestProperty(AppConfig.APP_ID_KEY, AppConfig.APP_ID_VALUE);\n-      httpConn.setRequestProperty(AppConfig.ORG_ID_KEY, AppConfig.ORG_ID_VALUE);\n-      httpConn.setRequestProperty(AppConfig.CLIENT_ID_KEY, AppConfig.CLIENT_ID_VALUE);\n-      httpConn.setRequestProperty(AppConfig.SECRET_KEY, AppConfig.SECRET_KEY_VALUE);\n+      conn = (HttpURLConnection) url.openConnection();\n+      conn.setUseCaches(false);\n+      conn.setDoOutput(true); // indicates POST method\n+      conn.setDoInput(true);\n+      conn.setReadTimeout(180000);\n+      conn.setConnectTimeout(180000);\n+      conn.setRequestProperty(\"Content-Type\", \"multipart/form-data;\");\n+      conn.setRequestProperty(\"User-Agent\", \"CodeJava Agent\");\n+\n+      conn.setRequestProperty(AppConfig.APP_ID_KEY, AppConfig.APP_ID_VALUE);\n+      conn.setRequestProperty(AppConfig.ORG_ID_KEY, AppConfig.ORG_ID_VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd112eeedd0cc8dc08d30810dcd6fd7c09bd1e18"}, "originalPosition": 748}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MzMxMDMx", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/913#pullrequestreview-484331031", "createdAt": "2020-09-08T17:00:06Z", "commit": {"oid": "dd112eeedd0cc8dc08d30810dcd6fd7c09bd1e18"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzowMDowNlrOHOmLnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzowMDowNlrOHOmLnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2NzY3Nw==", "bodyText": "remove commented line", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/913#discussion_r485067677", "createdAt": "2020-09-08T17:00:06Z", "author": {"login": "zohrehj"}, "path": "Android/app/src/main/java/com/harvard/webservicemodule/apihelper/HttpRequest.java", "diffHunk": "@@ -1299,19 +980,17 @@ static Responsemodel makeDeleteRequestWithJsonArray(\n                 BufferedReader br = new BufferedReader(new InputStreamReader(instream));\n                 while ((line = br.readLine()) != null) {\n                   responseData += line;\n-                  response += line;\n                 }\n                 br.close();\n+                //                    conn.disconnect();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd112eeedd0cc8dc08d30810dcd6fd7c09bd1e18"}, "originalPosition": 1443}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a25e05403802542d17abdfb261756d0ce4abccb0", "author": {"user": {"login": "naveenr-btc", "name": "Naveen"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/a25e05403802542d17abdfb261756d0ce4abccb0", "committedDate": "2020-09-09T05:33:27Z", "message": "review comments addressed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "761378ca3b8a3322aa69d603074f802660b80750", "author": {"user": {"login": "naveenr-btc", "name": "Naveen"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/761378ca3b8a3322aa69d603074f802660b80750", "committedDate": "2020-09-09T06:59:05Z", "message": "removed extra configuration(orgId,clientId and secret key) and added for auth server redirect url"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b7edac48c92cf8b65da24c36958ba1dfb1184bc", "author": {"user": {"login": "naveenr-btc", "name": "Naveen"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/3b7edac48c92cf8b65da24c36958ba1dfb1184bc", "committedDate": "2020-09-09T07:03:12Z", "message": "formatting issue fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75bcecb2db729fd581f3a25109a390721e17261b", "author": {"user": {"login": "naveenr-btc", "name": "Naveen"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/75bcecb2db729fd581f3a25109a390721e17261b", "committedDate": "2020-09-09T13:10:58Z", "message": "orgId reverted and CodeChallenge updated"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb140ac7163985041beb67f836d077223762a752", "author": {"user": {"login": "naveenr-btc", "name": "Naveen"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/eb140ac7163985041beb67f836d077223762a752", "committedDate": "2020-09-09T13:25:18Z", "message": "random string length made to 50 and formatting issue issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "143a42469796c63b9fbbac86e3cd2a4b5aa1ccd7", "author": {"user": {"login": "naveenr-btc", "name": "Naveen"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/143a42469796c63b9fbbac86e3cd2a4b5aa1ccd7", "committedDate": "2020-09-09T15:38:39Z", "message": "http class optimized"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1OTQ3MzQ5", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/913#pullrequestreview-485947349", "createdAt": "2020-09-10T13:41:19Z", "commit": {"oid": "143a42469796c63b9fbbac86e3cd2a4b5aa1ccd7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMzo0MToxOVrOHP0R5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNDoxMTo1OVrOHP2DZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM0NzIzNw==", "bodyText": "shouldn't redirect URL be simply generated based on the baseURL?\nis there any reason to assume that this value would be different per deployment?\nalso please provide an example for the hydra_url", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/913#discussion_r486347237", "createdAt": "2020-09-10T13:41:19Z", "author": {"login": "zohrehj"}, "path": "Android/api.properties", "diffHunk": "@@ -18,30 +18,20 @@ BASE_URL_REGISTRATION_ENROLLMENT_SERVER=\"\"\n # URL of AuthServer.\n # e.g. https://mystudiesdeployment.com/AuthServer/\n BASE_URL_AUTH_SERVER=\"\"\n+AUTH_SERVER_REDIRECT_URL=\"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "143a42469796c63b9fbbac86e3cd2a4b5aa1ccd7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM1MzIxOQ==", "bodyText": "why does this only include uppercase letters?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/913#discussion_r486353219", "createdAt": "2020-09-10T13:46:41Z", "author": {"login": "zohrehj"}, "path": "Android/app/src/main/java/com/harvard/FdaApplication.java", "diffHunk": "@@ -22,22 +22,28 @@\n import android.content.Intent;\n import android.os.Build;\n import android.support.multidex.MultiDex;\n+import android.util.Base64;\n import com.crashlytics.android.Crashlytics;\n import com.facebook.stetho.Stetho;\n import com.harvard.passcodemodule.PasscodeSetupActivity;\n import com.harvard.studyappmodule.StudyModuleSubscriber;\n import com.harvard.usermodule.UserModuleSubscriber;\n import com.harvard.utils.AppController;\n import com.harvard.utils.AppVisibilityDetector;\n+import com.harvard.utils.Logger;\n import com.harvard.utils.realm.RealmEncryptionHelper;\n import com.harvard.webservicemodule.WebserviceSubscriber;\n import com.uphyca.stetho_realm.RealmInspectorModulesProvider;\n import io.fabric.sdk.android.Fabric;\n import io.realm.Realm;\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n \n public class FdaApplication extends Application {\n   private static FdaApplication instance;\n   private FdaEventBusRegistry registry;\n+  private static String randomString;\n+  private static final String ALPHA_NUMERIC_STRING = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "143a42469796c63b9fbbac86e3cd2a4b5aa1ccd7"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM2NjAwNQ==", "bodyText": "option 1:\nbase URL can be:\n {{oauth_scim_service_host}}/oauth-scim-service\nthen auth service can be /users\nand change password will be '/change_password'\nyou just have to remember to add a prefix of / before adding any path components.\noption 2:\nno start or end slashes, you would need to join your strings with a '/', i.e.\nbase URL: {{oauth_scim_service_host}}/oauth-scim-service\nauth service users: users\nchange password: '/change_password'\nString[] parts = { base_url, auth_service_users, user_id, change_password }; \nurl = String.join(\"/\", parts);\n\nthe way you are dividing the path is more complicated and not very reusable, you will eventually make a mistake a cause an error. Buy creating a pattern in the path and path components structure you that's easier to follow and expand.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/913#discussion_r486366005", "createdAt": "2020-09-10T13:58:44Z", "author": {"login": "zohrehj"}, "path": "Android/app/src/main/java/com/harvard/utils/Urls.java", "diffHunk": "@@ -16,23 +16,41 @@\n package com.harvard.utils;\n \n import com.harvard.BuildConfig;\n+import com.harvard.FdaApplication;\n+import com.harvard.utils.version.VersionChecker;\n \n public class Urls {\n   public static String BASE_URL_WCP_SERVER = BuildConfig.BASE_URL_WCP_SERVER;\n   public static String BASE_URL_REGISTRATION_SERVER = BuildConfig.BASE_URL_REGISTRATION_SERVER;\n   public static String BASE_URL_REGISTRATION_CONSENT_SERVER =\n-      BuildConfig.BASE_URL_REGISTRATION_CONSENT_SERVER;\n+          BuildConfig.BASE_URL_REGISTRATION_CONSENT_SERVER;\n   public static String BASE_URL_REGISTRATION_ENROLLMENT_SERVER =\n-      BuildConfig.BASE_URL_REGISTRATION_ENROLLMENT_SERVER;\n+          BuildConfig.BASE_URL_REGISTRATION_ENROLLMENT_SERVER;\n   public static String BASE_URL_AUTH_SERVER = BuildConfig.BASE_URL_AUTH_SERVER;\n   public static String BASE_URL_RESPONSE_SERVER = BuildConfig.BASE_URL_RESPONSE_SERVER;\n \n   // Auth Server\n   public static String LOGIN = \"login\";\n-  public static String LOGOUT = \"logout\";\n-  public static String REFRESH_TOKEN = BASE_URL_AUTH_SERVER + \"getRefreshedToken\";\n-  public static String CHANGE_PASSWORD = \"changePassword\";\n-  public static String FORGOT_PASSWORD = \"forgotPassword\";\n+\n+  //New Auth Server\n+  public static String TOKENS = \"oauth2/token\";\n+  public static String AUTH_SERVICE = \"users/\";\n+  public static String CHANGE_PASSWORD = \"/change_password\";\n+  public static String FORGOT_PASSWORD = \"user/reset_password\";\n+  public static String LOGOUT = \"/logout\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1NTUzNw=="}, "originalCommit": {"oid": "dd112eeedd0cc8dc08d30810dcd6fd7c09bd1e18"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM2OTM1Mg==", "bodyText": "Why is this expected?\nwhy are all these values mapped to 401? shouldn't that be explicitly sent by the server instead?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/913#discussion_r486369352", "createdAt": "2020-09-10T14:03:01Z", "author": {"login": "zohrehj"}, "path": "Android/app/src/main/java/com/harvard/webservicemodule/apihelper/ApiCall.java", "diffHunk": "@@ -432,6 +344,7 @@ protected final String doInBackground(T... params) {\n                   || s.equalsIgnoreCase(\"Unknown error\")\n                   || s.equalsIgnoreCase(\"server error\")\n                   || s.equalsIgnoreCase(\"client error\")\n+                  || s.equalsIgnoreCase(\"\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "143a42469796c63b9fbbac86e3cd2a4b5aa1ccd7"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM3MjQyNA==", "bodyText": "move header values into constants.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/913#discussion_r486372424", "createdAt": "2020-09-10T14:07:00Z", "author": {"login": "zohrehj"}, "path": "Android/app/src/main/java/com/harvard/webservicemodule/apihelper/HttpRequest.java", "diffHunk": "@@ -71,127 +68,224 @@\n    */\n   public static Responsemodel getRequest(\n           String url, HashMap<String, String> headersData, String serverType) {\n-    StringBuffer response = new StringBuffer();\n-    Responsemodel responseModel = new Responsemodel();\n-    String responseData;\n-    HttpURLConnection conn;\n-    int responseCode = 0;\n-    try {\n-      URL obj = new URL(url);\n-      conn = (HttpURLConnection) obj.openConnection();\n-      conn.setRequestMethod(\"GET\");\n-      conn.setReadTimeout(TimeoutInterval); // 3 min timeout\n-      conn.setRequestProperty(\"Content-Type\", \"application/json\");\n-      conn.setRequestProperty(AppConfig.APP_ID_KEY, AppConfig.APP_ID_VALUE);\n-      conn.setRequestProperty(AppConfig.ORG_ID_KEY, AppConfig.ORG_ID_VALUE);\n+    return getResponse(url, \"GET\", serverType, headersData, null);\n+  }\n \n-      if (serverType.equalsIgnoreCase(\"WCP\")) {\n-        String encoding = Base64.encodeToString(basicAuth.getBytes(), Base64.DEFAULT);\n-        conn.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n-        conn.setRequestProperty(AppConfig.WCP_APP_ID_KEY, AppConfig.APP_ID_VALUE);\n-      }\n+  /**\n+   * To make post request using hashmap.\n+   *\n+   * @param url         --> url path\n+   * @param params      --> Hashmap params\n+   * @param headersData --> null if no header\n+   * @return Responsemodel\n+   */\n+  static Responsemodel postRequestsWithHashmap(\n+          String url,\n+          HashMap<String, String> params,\n+          HashMap<String, String> headersData,\n+          String serverType) {\n+    String bodyParams;\n+    if (headersData.containsKey(\"Content-Type\") && headersData.get(\"Content-Type\").equalsIgnoreCase(\"application/x-www-form-urlencoded\")) {\n+      bodyParams = getDataString(params);\n+    } else {\n+      bodyParams = getPostDataString(params);\n+    }\n+    return getResponse(url, \"POST\", serverType, headersData, bodyParams);\n+  }\n \n-      if (headersData != null) {\n-        Set mapSet = (Set) headersData.entrySet();\n-        Iterator mapIterator = mapSet.iterator();\n-        while (mapIterator.hasNext()) {\n-          Map.Entry mapEntry = (Map.Entry) mapIterator.next();\n-          String keyValue = (String) mapEntry.getKey();\n-          String value = (String) mapEntry.getValue();\n-          conn.setRequestProperty(keyValue, value);\n+  /**\n+   * To make post request using json object.\n+   *\n+   * @param url         -->url path\n+   * @param jsonObject  -->json object\n+   * @param headersData --> null if no header\n+   * @return Responsemodel\n+   */\n+  static Responsemodel makePostRequestWithJson(\n+          String url,\n+          JSONObject jsonObject,\n+          HashMap<String, String> headersData,\n+          String serverType) {\n+\n+    return getResponse(url, \"POST\", serverType, headersData, jsonObject.toString());\n+  }\n+\n+  /**\n+   * To make put request using json object.\n+   *\n+   * @param url         -->url path\n+   * @param jsonObject  -->json object\n+   * @param headersData --> null if no header\n+   * @return Responsemodel\n+   */\n+  static Responsemodel makePutRequestWithJson(\n+          String url,\n+          JSONObject jsonObject,\n+          HashMap<String, String> headersData,\n+          String serverType) {\n+    return getResponse(url, \"PUT\", serverType, headersData, jsonObject.toString());\n+  }\n+\n+  /**\n+   * method to parse hashmap to json.\n+   *\n+   * @param params --> params of hash map\n+   * @return String\n+   */\n+  private static String getPostDataString(HashMap<String, String> params) {\n+    return new Gson().toJson(params);\n+  }\n+\n+  private static String getDataString(HashMap<String, String> params) {\n+    StringBuilder result = new StringBuilder();\n+    try {\n+      boolean first = true;\n+      for (Map.Entry<String, String> entry : params.entrySet()) {\n+        if (first) {\n+          first = false;\n+        } else {\n+          result.append(\"&\");\n         }\n+        result.append(URLEncoder.encode(entry.getKey(), StandardCharsets.UTF_8.toString()));\n+        result.append(\"=\");\n+        result.append(URLEncoder.encode(entry.getValue(), StandardCharsets.UTF_8.toString()));\n       }\n-      try {\n-        // Will throw IOException if server responds with 401.\n-        responseCode = conn.getResponseCode();\n-      } catch (IOException e) {\n-        // Will return 401, because now connection has the correct internal state.\n-        responseCode = conn.getResponseCode();\n-      }\n+    } catch (UnsupportedEncodingException e) {\n+      e.printStackTrace();\n+    }\n+    return result.toString();\n+  }\n \n-      if (responseCode >= HttpURLConnection.HTTP_OK && responseCode < HttpURLConnection.HTTP_MULT_CHOICE) {\n-        BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n-        String inputLine;\n+  static Responsemodel makeDeleteRequestWithJson(\n+          String url,\n+          JSONObject jsonObject,\n+          HashMap<String, String> headersData,\n+          String serverType) {\n+    Responsemodel responseModel = new Responsemodel();\n+    String responseData = \"\";\n+    int responseCode = 0;\n+    if (Build.VERSION.SDK_INT >= 21) {\n+      return getResponse(url, \"DELETE\", serverType, headersData, jsonObject.toString());\n+    } else {\n+      try {\n+        HttpParams httpParams = new BasicHttpParams();\n+        HttpConnectionParams.setConnectionTimeout(httpParams, TimeoutInterval);\n+        HttpConnectionParams.setSoTimeout(httpParams, TimeoutInterval);\n+        OwnHttpDelete httppost = new OwnHttpDelete(url);\n \n-        while ((inputLine = in.readLine()) != null) {\n-          response.append(inputLine);\n+        if (headersData != null) {\n+          Set mapSet = (Set) headersData.entrySet();\n+          Iterator mapIterator = mapSet.iterator();\n+          while (mapIterator.hasNext()) {\n+            Map.Entry mapEntry = (Map.Entry) mapIterator.next();\n+            String keyValue = (String) mapEntry.getKey();\n+            String value = (String) mapEntry.getValue();\n+            httppost.addHeader(keyValue, value);\n+          }\n         }\n-        in.close();\n-        conn.disconnect();\n-        responseData = response.toString();\n-        responseModel.setServermsg(\"success\");\n-      } else if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) {\n-        responseData = \"session expired\";\n-      } else {\n+        httppost.addHeader(\"Content-Type\", \"application/json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "143a42469796c63b9fbbac86e3cd2a4b5aa1ccd7"}, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM3NDUyMg==", "bodyText": "move these into a helper method, name it in a way to clarify your intention for the check, e.g. this could be\nisSuccessful(responseCode)", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/913#discussion_r486374522", "createdAt": "2020-09-10T14:09:43Z", "author": {"login": "zohrehj"}, "path": "Android/app/src/main/java/com/harvard/webservicemodule/apihelper/HttpRequest.java", "diffHunk": "@@ -71,127 +68,224 @@\n    */\n   public static Responsemodel getRequest(\n           String url, HashMap<String, String> headersData, String serverType) {\n-    StringBuffer response = new StringBuffer();\n-    Responsemodel responseModel = new Responsemodel();\n-    String responseData;\n-    HttpURLConnection conn;\n-    int responseCode = 0;\n-    try {\n-      URL obj = new URL(url);\n-      conn = (HttpURLConnection) obj.openConnection();\n-      conn.setRequestMethod(\"GET\");\n-      conn.setReadTimeout(TimeoutInterval); // 3 min timeout\n-      conn.setRequestProperty(\"Content-Type\", \"application/json\");\n-      conn.setRequestProperty(AppConfig.APP_ID_KEY, AppConfig.APP_ID_VALUE);\n-      conn.setRequestProperty(AppConfig.ORG_ID_KEY, AppConfig.ORG_ID_VALUE);\n+    return getResponse(url, \"GET\", serverType, headersData, null);\n+  }\n \n-      if (serverType.equalsIgnoreCase(\"WCP\")) {\n-        String encoding = Base64.encodeToString(basicAuth.getBytes(), Base64.DEFAULT);\n-        conn.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n-        conn.setRequestProperty(AppConfig.WCP_APP_ID_KEY, AppConfig.APP_ID_VALUE);\n-      }\n+  /**\n+   * To make post request using hashmap.\n+   *\n+   * @param url         --> url path\n+   * @param params      --> Hashmap params\n+   * @param headersData --> null if no header\n+   * @return Responsemodel\n+   */\n+  static Responsemodel postRequestsWithHashmap(\n+          String url,\n+          HashMap<String, String> params,\n+          HashMap<String, String> headersData,\n+          String serverType) {\n+    String bodyParams;\n+    if (headersData.containsKey(\"Content-Type\") && headersData.get(\"Content-Type\").equalsIgnoreCase(\"application/x-www-form-urlencoded\")) {\n+      bodyParams = getDataString(params);\n+    } else {\n+      bodyParams = getPostDataString(params);\n+    }\n+    return getResponse(url, \"POST\", serverType, headersData, bodyParams);\n+  }\n \n-      if (headersData != null) {\n-        Set mapSet = (Set) headersData.entrySet();\n-        Iterator mapIterator = mapSet.iterator();\n-        while (mapIterator.hasNext()) {\n-          Map.Entry mapEntry = (Map.Entry) mapIterator.next();\n-          String keyValue = (String) mapEntry.getKey();\n-          String value = (String) mapEntry.getValue();\n-          conn.setRequestProperty(keyValue, value);\n+  /**\n+   * To make post request using json object.\n+   *\n+   * @param url         -->url path\n+   * @param jsonObject  -->json object\n+   * @param headersData --> null if no header\n+   * @return Responsemodel\n+   */\n+  static Responsemodel makePostRequestWithJson(\n+          String url,\n+          JSONObject jsonObject,\n+          HashMap<String, String> headersData,\n+          String serverType) {\n+\n+    return getResponse(url, \"POST\", serverType, headersData, jsonObject.toString());\n+  }\n+\n+  /**\n+   * To make put request using json object.\n+   *\n+   * @param url         -->url path\n+   * @param jsonObject  -->json object\n+   * @param headersData --> null if no header\n+   * @return Responsemodel\n+   */\n+  static Responsemodel makePutRequestWithJson(\n+          String url,\n+          JSONObject jsonObject,\n+          HashMap<String, String> headersData,\n+          String serverType) {\n+    return getResponse(url, \"PUT\", serverType, headersData, jsonObject.toString());\n+  }\n+\n+  /**\n+   * method to parse hashmap to json.\n+   *\n+   * @param params --> params of hash map\n+   * @return String\n+   */\n+  private static String getPostDataString(HashMap<String, String> params) {\n+    return new Gson().toJson(params);\n+  }\n+\n+  private static String getDataString(HashMap<String, String> params) {\n+    StringBuilder result = new StringBuilder();\n+    try {\n+      boolean first = true;\n+      for (Map.Entry<String, String> entry : params.entrySet()) {\n+        if (first) {\n+          first = false;\n+        } else {\n+          result.append(\"&\");\n         }\n+        result.append(URLEncoder.encode(entry.getKey(), StandardCharsets.UTF_8.toString()));\n+        result.append(\"=\");\n+        result.append(URLEncoder.encode(entry.getValue(), StandardCharsets.UTF_8.toString()));\n       }\n-      try {\n-        // Will throw IOException if server responds with 401.\n-        responseCode = conn.getResponseCode();\n-      } catch (IOException e) {\n-        // Will return 401, because now connection has the correct internal state.\n-        responseCode = conn.getResponseCode();\n-      }\n+    } catch (UnsupportedEncodingException e) {\n+      e.printStackTrace();\n+    }\n+    return result.toString();\n+  }\n \n-      if (responseCode >= HttpURLConnection.HTTP_OK && responseCode < HttpURLConnection.HTTP_MULT_CHOICE) {\n-        BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n-        String inputLine;\n+  static Responsemodel makeDeleteRequestWithJson(\n+          String url,\n+          JSONObject jsonObject,\n+          HashMap<String, String> headersData,\n+          String serverType) {\n+    Responsemodel responseModel = new Responsemodel();\n+    String responseData = \"\";\n+    int responseCode = 0;\n+    if (Build.VERSION.SDK_INT >= 21) {\n+      return getResponse(url, \"DELETE\", serverType, headersData, jsonObject.toString());\n+    } else {\n+      try {\n+        HttpParams httpParams = new BasicHttpParams();\n+        HttpConnectionParams.setConnectionTimeout(httpParams, TimeoutInterval);\n+        HttpConnectionParams.setSoTimeout(httpParams, TimeoutInterval);\n+        OwnHttpDelete httppost = new OwnHttpDelete(url);\n \n-        while ((inputLine = in.readLine()) != null) {\n-          response.append(inputLine);\n+        if (headersData != null) {\n+          Set mapSet = (Set) headersData.entrySet();\n+          Iterator mapIterator = mapSet.iterator();\n+          while (mapIterator.hasNext()) {\n+            Map.Entry mapEntry = (Map.Entry) mapIterator.next();\n+            String keyValue = (String) mapEntry.getKey();\n+            String value = (String) mapEntry.getValue();\n+            httppost.addHeader(keyValue, value);\n+          }\n         }\n-        in.close();\n-        conn.disconnect();\n-        responseData = response.toString();\n-        responseModel.setServermsg(\"success\");\n-      } else if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) {\n-        responseData = \"session expired\";\n-      } else {\n+        httppost.addHeader(\"Content-Type\", \"application/json\");\n+        httppost.addHeader(AppConfig.APP_ID_KEY, AppConfig.APP_ID_VALUE);\n+        httppost.addHeader(AppConfig.ORG_ID_KEY, AppConfig.ORG_ID_VALUE);\n \n-        if (conn.getHeaderField(headerErrorKey) != null) {\n-          responseModel.setServermsg(conn.getHeaderField(headerErrorKey));\n-          responseData = \"http_not_ok\";\n-        } else {\n-          BufferedReader in = new BufferedReader(new InputStreamReader(conn.getErrorStream()));\n-          String inputLine;\n+        StringEntity params1 = new StringEntity(jsonObject.toString());\n+        httppost.setEntity(params1);\n \n-          while ((inputLine = in.readLine()) != null) {\n-            response.append(inputLine);\n-          }\n-          in.close();\n-          conn.disconnect();\n-          responseData = response.toString();\n+        // Execute and get the response.\n+        HttpClient httpclient = new DefaultHttpClient(httpParams);\n+        HttpResponse response1 = httpclient.execute(httppost);\n+        responseCode = response1.getStatusLine().getStatusCode();\n \n-          JSONObject responseDataJson = new JSONObject(responseData);\n-          if (responseDataJson.has(errorDescKey)) {\n-            responseModel.setServermsg(responseDataJson.getString(errorDescKey));\n+\n+        if (responseCode >= HttpURLConnection.HTTP_OK && responseCode < HttpURLConnection.HTTP_MULT_CHOICE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "143a42469796c63b9fbbac86e3cd2a4b5aa1ccd7"}, "originalPosition": 222}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM3NjA2OQ==", "bodyText": "why is this displayed as a connection issue?\nand which part of the process above would be sending a generic exception? maybe we can add more information based on where the exception is coming from?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/913#discussion_r486376069", "createdAt": "2020-09-10T14:11:44Z", "author": {"login": "zohrehj"}, "path": "Android/app/src/main/java/com/harvard/webservicemodule/apihelper/HttpRequest.java", "diffHunk": "@@ -71,127 +68,224 @@\n    */\n   public static Responsemodel getRequest(\n           String url, HashMap<String, String> headersData, String serverType) {\n-    StringBuffer response = new StringBuffer();\n-    Responsemodel responseModel = new Responsemodel();\n-    String responseData;\n-    HttpURLConnection conn;\n-    int responseCode = 0;\n-    try {\n-      URL obj = new URL(url);\n-      conn = (HttpURLConnection) obj.openConnection();\n-      conn.setRequestMethod(\"GET\");\n-      conn.setReadTimeout(TimeoutInterval); // 3 min timeout\n-      conn.setRequestProperty(\"Content-Type\", \"application/json\");\n-      conn.setRequestProperty(AppConfig.APP_ID_KEY, AppConfig.APP_ID_VALUE);\n-      conn.setRequestProperty(AppConfig.ORG_ID_KEY, AppConfig.ORG_ID_VALUE);\n+    return getResponse(url, \"GET\", serverType, headersData, null);\n+  }\n \n-      if (serverType.equalsIgnoreCase(\"WCP\")) {\n-        String encoding = Base64.encodeToString(basicAuth.getBytes(), Base64.DEFAULT);\n-        conn.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n-        conn.setRequestProperty(AppConfig.WCP_APP_ID_KEY, AppConfig.APP_ID_VALUE);\n-      }\n+  /**\n+   * To make post request using hashmap.\n+   *\n+   * @param url         --> url path\n+   * @param params      --> Hashmap params\n+   * @param headersData --> null if no header\n+   * @return Responsemodel\n+   */\n+  static Responsemodel postRequestsWithHashmap(\n+          String url,\n+          HashMap<String, String> params,\n+          HashMap<String, String> headersData,\n+          String serverType) {\n+    String bodyParams;\n+    if (headersData.containsKey(\"Content-Type\") && headersData.get(\"Content-Type\").equalsIgnoreCase(\"application/x-www-form-urlencoded\")) {\n+      bodyParams = getDataString(params);\n+    } else {\n+      bodyParams = getPostDataString(params);\n+    }\n+    return getResponse(url, \"POST\", serverType, headersData, bodyParams);\n+  }\n \n-      if (headersData != null) {\n-        Set mapSet = (Set) headersData.entrySet();\n-        Iterator mapIterator = mapSet.iterator();\n-        while (mapIterator.hasNext()) {\n-          Map.Entry mapEntry = (Map.Entry) mapIterator.next();\n-          String keyValue = (String) mapEntry.getKey();\n-          String value = (String) mapEntry.getValue();\n-          conn.setRequestProperty(keyValue, value);\n+  /**\n+   * To make post request using json object.\n+   *\n+   * @param url         -->url path\n+   * @param jsonObject  -->json object\n+   * @param headersData --> null if no header\n+   * @return Responsemodel\n+   */\n+  static Responsemodel makePostRequestWithJson(\n+          String url,\n+          JSONObject jsonObject,\n+          HashMap<String, String> headersData,\n+          String serverType) {\n+\n+    return getResponse(url, \"POST\", serverType, headersData, jsonObject.toString());\n+  }\n+\n+  /**\n+   * To make put request using json object.\n+   *\n+   * @param url         -->url path\n+   * @param jsonObject  -->json object\n+   * @param headersData --> null if no header\n+   * @return Responsemodel\n+   */\n+  static Responsemodel makePutRequestWithJson(\n+          String url,\n+          JSONObject jsonObject,\n+          HashMap<String, String> headersData,\n+          String serverType) {\n+    return getResponse(url, \"PUT\", serverType, headersData, jsonObject.toString());\n+  }\n+\n+  /**\n+   * method to parse hashmap to json.\n+   *\n+   * @param params --> params of hash map\n+   * @return String\n+   */\n+  private static String getPostDataString(HashMap<String, String> params) {\n+    return new Gson().toJson(params);\n+  }\n+\n+  private static String getDataString(HashMap<String, String> params) {\n+    StringBuilder result = new StringBuilder();\n+    try {\n+      boolean first = true;\n+      for (Map.Entry<String, String> entry : params.entrySet()) {\n+        if (first) {\n+          first = false;\n+        } else {\n+          result.append(\"&\");\n         }\n+        result.append(URLEncoder.encode(entry.getKey(), StandardCharsets.UTF_8.toString()));\n+        result.append(\"=\");\n+        result.append(URLEncoder.encode(entry.getValue(), StandardCharsets.UTF_8.toString()));\n       }\n-      try {\n-        // Will throw IOException if server responds with 401.\n-        responseCode = conn.getResponseCode();\n-      } catch (IOException e) {\n-        // Will return 401, because now connection has the correct internal state.\n-        responseCode = conn.getResponseCode();\n-      }\n+    } catch (UnsupportedEncodingException e) {\n+      e.printStackTrace();\n+    }\n+    return result.toString();\n+  }\n \n-      if (responseCode >= HttpURLConnection.HTTP_OK && responseCode < HttpURLConnection.HTTP_MULT_CHOICE) {\n-        BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n-        String inputLine;\n+  static Responsemodel makeDeleteRequestWithJson(\n+          String url,\n+          JSONObject jsonObject,\n+          HashMap<String, String> headersData,\n+          String serverType) {\n+    Responsemodel responseModel = new Responsemodel();\n+    String responseData = \"\";\n+    int responseCode = 0;\n+    if (Build.VERSION.SDK_INT >= 21) {\n+      return getResponse(url, \"DELETE\", serverType, headersData, jsonObject.toString());\n+    } else {\n+      try {\n+        HttpParams httpParams = new BasicHttpParams();\n+        HttpConnectionParams.setConnectionTimeout(httpParams, TimeoutInterval);\n+        HttpConnectionParams.setSoTimeout(httpParams, TimeoutInterval);\n+        OwnHttpDelete httppost = new OwnHttpDelete(url);\n \n-        while ((inputLine = in.readLine()) != null) {\n-          response.append(inputLine);\n+        if (headersData != null) {\n+          Set mapSet = (Set) headersData.entrySet();\n+          Iterator mapIterator = mapSet.iterator();\n+          while (mapIterator.hasNext()) {\n+            Map.Entry mapEntry = (Map.Entry) mapIterator.next();\n+            String keyValue = (String) mapEntry.getKey();\n+            String value = (String) mapEntry.getValue();\n+            httppost.addHeader(keyValue, value);\n+          }\n         }\n-        in.close();\n-        conn.disconnect();\n-        responseData = response.toString();\n-        responseModel.setServermsg(\"success\");\n-      } else if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) {\n-        responseData = \"session expired\";\n-      } else {\n+        httppost.addHeader(\"Content-Type\", \"application/json\");\n+        httppost.addHeader(AppConfig.APP_ID_KEY, AppConfig.APP_ID_VALUE);\n+        httppost.addHeader(AppConfig.ORG_ID_KEY, AppConfig.ORG_ID_VALUE);\n \n-        if (conn.getHeaderField(headerErrorKey) != null) {\n-          responseModel.setServermsg(conn.getHeaderField(headerErrorKey));\n-          responseData = \"http_not_ok\";\n-        } else {\n-          BufferedReader in = new BufferedReader(new InputStreamReader(conn.getErrorStream()));\n-          String inputLine;\n+        StringEntity params1 = new StringEntity(jsonObject.toString());\n+        httppost.setEntity(params1);\n \n-          while ((inputLine = in.readLine()) != null) {\n-            response.append(inputLine);\n-          }\n-          in.close();\n-          conn.disconnect();\n-          responseData = response.toString();\n+        // Execute and get the response.\n+        HttpClient httpclient = new DefaultHttpClient(httpParams);\n+        HttpResponse response1 = httpclient.execute(httppost);\n+        responseCode = response1.getStatusLine().getStatusCode();\n \n-          JSONObject responseDataJson = new JSONObject(responseData);\n-          if (responseDataJson.has(errorDescKey)) {\n-            responseModel.setServermsg(responseDataJson.getString(errorDescKey));\n+\n+        if (responseCode >= HttpURLConnection.HTTP_OK && responseCode < HttpURLConnection.HTTP_MULT_CHOICE) {\n+          responseData = getResponseData(response1);\n+          responseModel.setServermsg(\"success\");\n+        } else if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) {\n+          responseData = \"session expired\";\n+        } else {\n+          if (response1.getFirstHeader(headerErrorKey) != null) {\n+            responseModel.setServermsg(response1.getFirstHeader(headerErrorKey).getValue());\n           } else {\n-            responseModel.setServermsg(\"server error\");\n+            responseData = getResponseData(response1);\n+            JSONObject responseDataJson = new JSONObject(responseData);\n+            if (responseDataJson.has(errorDescKey)) {\n+              responseModel.setServermsg(responseDataJson.getString(errorDescKey));\n+            } else {\n+              responseModel.setServermsg(\"server error\");\n+            }\n           }\n         }\n+      } catch (ConnectTimeoutException | SocketTimeoutException e) {\n+        responseModel.setServermsg(\"No internet connection/cannot connect to server\");\n+        responseData = \"timeout\";\n+        Logger.log(e);\n+      } catch (Exception e) {\n+        responseModel.setServermsg(\"No internet connection/cannot connect to server\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "143a42469796c63b9fbbac86e3cd2a4b5aa1ccd7"}, "originalPosition": 246}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM3NjI5Mg==", "bodyText": "please remove", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/913#discussion_r486376292", "createdAt": "2020-09-10T14:11:59Z", "author": {"login": "zohrehj"}, "path": "Android/app/src/main/java/com/harvard/webservicemodule/apihelper/HttpRequest.java", "diffHunk": "@@ -71,127 +68,224 @@\n    */\n   public static Responsemodel getRequest(\n           String url, HashMap<String, String> headersData, String serverType) {\n-    StringBuffer response = new StringBuffer();\n-    Responsemodel responseModel = new Responsemodel();\n-    String responseData;\n-    HttpURLConnection conn;\n-    int responseCode = 0;\n-    try {\n-      URL obj = new URL(url);\n-      conn = (HttpURLConnection) obj.openConnection();\n-      conn.setRequestMethod(\"GET\");\n-      conn.setReadTimeout(TimeoutInterval); // 3 min timeout\n-      conn.setRequestProperty(\"Content-Type\", \"application/json\");\n-      conn.setRequestProperty(AppConfig.APP_ID_KEY, AppConfig.APP_ID_VALUE);\n-      conn.setRequestProperty(AppConfig.ORG_ID_KEY, AppConfig.ORG_ID_VALUE);\n+    return getResponse(url, \"GET\", serverType, headersData, null);\n+  }\n \n-      if (serverType.equalsIgnoreCase(\"WCP\")) {\n-        String encoding = Base64.encodeToString(basicAuth.getBytes(), Base64.DEFAULT);\n-        conn.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n-        conn.setRequestProperty(AppConfig.WCP_APP_ID_KEY, AppConfig.APP_ID_VALUE);\n-      }\n+  /**\n+   * To make post request using hashmap.\n+   *\n+   * @param url         --> url path\n+   * @param params      --> Hashmap params\n+   * @param headersData --> null if no header\n+   * @return Responsemodel\n+   */\n+  static Responsemodel postRequestsWithHashmap(\n+          String url,\n+          HashMap<String, String> params,\n+          HashMap<String, String> headersData,\n+          String serverType) {\n+    String bodyParams;\n+    if (headersData.containsKey(\"Content-Type\") && headersData.get(\"Content-Type\").equalsIgnoreCase(\"application/x-www-form-urlencoded\")) {\n+      bodyParams = getDataString(params);\n+    } else {\n+      bodyParams = getPostDataString(params);\n+    }\n+    return getResponse(url, \"POST\", serverType, headersData, bodyParams);\n+  }\n \n-      if (headersData != null) {\n-        Set mapSet = (Set) headersData.entrySet();\n-        Iterator mapIterator = mapSet.iterator();\n-        while (mapIterator.hasNext()) {\n-          Map.Entry mapEntry = (Map.Entry) mapIterator.next();\n-          String keyValue = (String) mapEntry.getKey();\n-          String value = (String) mapEntry.getValue();\n-          conn.setRequestProperty(keyValue, value);\n+  /**\n+   * To make post request using json object.\n+   *\n+   * @param url         -->url path\n+   * @param jsonObject  -->json object\n+   * @param headersData --> null if no header\n+   * @return Responsemodel\n+   */\n+  static Responsemodel makePostRequestWithJson(\n+          String url,\n+          JSONObject jsonObject,\n+          HashMap<String, String> headersData,\n+          String serverType) {\n+\n+    return getResponse(url, \"POST\", serverType, headersData, jsonObject.toString());\n+  }\n+\n+  /**\n+   * To make put request using json object.\n+   *\n+   * @param url         -->url path\n+   * @param jsonObject  -->json object\n+   * @param headersData --> null if no header\n+   * @return Responsemodel\n+   */\n+  static Responsemodel makePutRequestWithJson(\n+          String url,\n+          JSONObject jsonObject,\n+          HashMap<String, String> headersData,\n+          String serverType) {\n+    return getResponse(url, \"PUT\", serverType, headersData, jsonObject.toString());\n+  }\n+\n+  /**\n+   * method to parse hashmap to json.\n+   *\n+   * @param params --> params of hash map\n+   * @return String\n+   */\n+  private static String getPostDataString(HashMap<String, String> params) {\n+    return new Gson().toJson(params);\n+  }\n+\n+  private static String getDataString(HashMap<String, String> params) {\n+    StringBuilder result = new StringBuilder();\n+    try {\n+      boolean first = true;\n+      for (Map.Entry<String, String> entry : params.entrySet()) {\n+        if (first) {\n+          first = false;\n+        } else {\n+          result.append(\"&\");\n         }\n+        result.append(URLEncoder.encode(entry.getKey(), StandardCharsets.UTF_8.toString()));\n+        result.append(\"=\");\n+        result.append(URLEncoder.encode(entry.getValue(), StandardCharsets.UTF_8.toString()));\n       }\n-      try {\n-        // Will throw IOException if server responds with 401.\n-        responseCode = conn.getResponseCode();\n-      } catch (IOException e) {\n-        // Will return 401, because now connection has the correct internal state.\n-        responseCode = conn.getResponseCode();\n-      }\n+    } catch (UnsupportedEncodingException e) {\n+      e.printStackTrace();\n+    }\n+    return result.toString();\n+  }\n \n-      if (responseCode >= HttpURLConnection.HTTP_OK && responseCode < HttpURLConnection.HTTP_MULT_CHOICE) {\n-        BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n-        String inputLine;\n+  static Responsemodel makeDeleteRequestWithJson(\n+          String url,\n+          JSONObject jsonObject,\n+          HashMap<String, String> headersData,\n+          String serverType) {\n+    Responsemodel responseModel = new Responsemodel();\n+    String responseData = \"\";\n+    int responseCode = 0;\n+    if (Build.VERSION.SDK_INT >= 21) {\n+      return getResponse(url, \"DELETE\", serverType, headersData, jsonObject.toString());\n+    } else {\n+      try {\n+        HttpParams httpParams = new BasicHttpParams();\n+        HttpConnectionParams.setConnectionTimeout(httpParams, TimeoutInterval);\n+        HttpConnectionParams.setSoTimeout(httpParams, TimeoutInterval);\n+        OwnHttpDelete httppost = new OwnHttpDelete(url);\n \n-        while ((inputLine = in.readLine()) != null) {\n-          response.append(inputLine);\n+        if (headersData != null) {\n+          Set mapSet = (Set) headersData.entrySet();\n+          Iterator mapIterator = mapSet.iterator();\n+          while (mapIterator.hasNext()) {\n+            Map.Entry mapEntry = (Map.Entry) mapIterator.next();\n+            String keyValue = (String) mapEntry.getKey();\n+            String value = (String) mapEntry.getValue();\n+            httppost.addHeader(keyValue, value);\n+          }\n         }\n-        in.close();\n-        conn.disconnect();\n-        responseData = response.toString();\n-        responseModel.setServermsg(\"success\");\n-      } else if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) {\n-        responseData = \"session expired\";\n-      } else {\n+        httppost.addHeader(\"Content-Type\", \"application/json\");\n+        httppost.addHeader(AppConfig.APP_ID_KEY, AppConfig.APP_ID_VALUE);\n+        httppost.addHeader(AppConfig.ORG_ID_KEY, AppConfig.ORG_ID_VALUE);\n \n-        if (conn.getHeaderField(headerErrorKey) != null) {\n-          responseModel.setServermsg(conn.getHeaderField(headerErrorKey));\n-          responseData = \"http_not_ok\";\n-        } else {\n-          BufferedReader in = new BufferedReader(new InputStreamReader(conn.getErrorStream()));\n-          String inputLine;\n+        StringEntity params1 = new StringEntity(jsonObject.toString());\n+        httppost.setEntity(params1);\n \n-          while ((inputLine = in.readLine()) != null) {\n-            response.append(inputLine);\n-          }\n-          in.close();\n-          conn.disconnect();\n-          responseData = response.toString();\n+        // Execute and get the response.\n+        HttpClient httpclient = new DefaultHttpClient(httpParams);\n+        HttpResponse response1 = httpclient.execute(httppost);\n+        responseCode = response1.getStatusLine().getStatusCode();\n \n-          JSONObject responseDataJson = new JSONObject(responseData);\n-          if (responseDataJson.has(errorDescKey)) {\n-            responseModel.setServermsg(responseDataJson.getString(errorDescKey));\n+\n+        if (responseCode >= HttpURLConnection.HTTP_OK && responseCode < HttpURLConnection.HTTP_MULT_CHOICE) {\n+          responseData = getResponseData(response1);\n+          responseModel.setServermsg(\"success\");\n+        } else if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) {\n+          responseData = \"session expired\";\n+        } else {\n+          if (response1.getFirstHeader(headerErrorKey) != null) {\n+            responseModel.setServermsg(response1.getFirstHeader(headerErrorKey).getValue());\n           } else {\n-            responseModel.setServermsg(\"server error\");\n+            responseData = getResponseData(response1);\n+            JSONObject responseDataJson = new JSONObject(responseData);\n+            if (responseDataJson.has(errorDescKey)) {\n+              responseModel.setServermsg(responseDataJson.getString(errorDescKey));\n+            } else {\n+              responseModel.setServermsg(\"server error\");\n+            }\n           }\n         }\n+      } catch (ConnectTimeoutException | SocketTimeoutException e) {\n+        responseModel.setServermsg(\"No internet connection/cannot connect to server\");\n+        responseData = \"timeout\";\n+        Logger.log(e);\n+      } catch (Exception e) {\n+        responseModel.setServermsg(\"No internet connection/cannot connect to server\");\n+        responseData = \"\";\n+        Logger.log(e);\n       }\n-    } catch (ConnectException e) {\n-      responseModel.setServermsg(\"No internet connection/cannot connect to server\");\n-      responseData = \"timeout\";\n-      Logger.log(e);\n-    } catch (Exception e) {\n-      responseModel.setServermsg(\"No internet connection/cannot connect to server\");\n-      responseData = \"\";\n-      Logger.log(e);\n     }\n \n     responseModel.setResponseCode(\"\" + responseCode);\n     responseModel.setResponseData(responseData);\n-\n     return responseModel;\n   }\n \n-  /**\n-   * To make post request using hashmap.\n-   *\n-   * @param url         --> url path\n-   * @param params      --> Hashmap params\n-   * @param headersData --> null if no header\n-   * @return Responsemodel\n-   */\n-  static Responsemodel postRequestsWithHashmap(\n-          String url,\n-          HashMap<String, String> params,\n-          HashMap<String, String> headersData,\n-          String serverType) {\n+  private static String getResponseData(HttpResponse response1) throws IOException {\n+    StringBuilder responseData = new StringBuilder();\n+    HttpEntity entity = response1.getEntity();\n+    String line;\n+    if (entity != null) {\n+      InputStream instream = entity.getContent();\n+      try {\n+        // do something useful", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "143a42469796c63b9fbbac86e3cd2a4b5aa1ccd7"}, "originalPosition": 286}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "879e220cdae29eb1e3ae31f6d1613748b960a3a2", "author": {"user": {"login": "rohitn-boston", "name": "Rohith R Nair"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/879e220cdae29eb1e3ae31f6d1613748b960a3a2", "committedDate": "2020-09-21T05:53:14Z", "message": "Added Test for following classes:\n1. HttpRequest\n2. ApiCall\n3. FdaApplication"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "581696c10113e51995454731491d0e85971082de", "author": {"user": {"login": "bhushanboston", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/581696c10113e51995454731491d0e85971082de", "committedDate": "2020-09-21T10:24:05Z", "message": "check style updates and code formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87be8f7b0cb69e7f9c9a4ffa2b5ca9113c67acb2", "author": {"user": {"login": "bhushanboston", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/87be8f7b0cb69e7f9c9a4ffa2b5ca9113c67acb2", "committedDate": "2020-09-21T11:32:26Z", "message": "1)  Code formatting\n2)  Converting strings to constants"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7e7b0d759a945b9d25ccd1cbfd3602d2861d074", "author": {"user": {"login": "bhushanboston", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/d7e7b0d759a945b9d25ccd1cbfd3602d2861d074", "committedDate": "2020-09-21T14:49:04Z", "message": "Api Properties Updated"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyODYzNTk3", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/913#pullrequestreview-492863597", "createdAt": "2020-09-21T18:11:49Z", "commit": {"oid": "d7e7b0d759a945b9d25ccd1cbfd3602d2861d074"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODoxMTo0OVrOHVcxvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODoxMTo0OVrOHVcxvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1MzYyOA==", "bodyText": "please make AUTH_SERVER_REDIRECT_URL to be based on BASE_URL_AUTH_SERVER", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/913#discussion_r492253628", "createdAt": "2020-09-21T18:11:49Z", "author": {"login": "zohrehj"}, "path": "Android/api.properties", "diffHunk": "@@ -18,30 +18,20 @@ BASE_URL_REGISTRATION_ENROLLMENT_SERVER=\"\"\n # URL of AuthServer.\n # e.g. https://mystudiesdeployment.com/AuthServer/\n BASE_URL_AUTH_SERVER=\"\"\n+AUTH_SERVER_REDIRECT_URL=\"\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM0NzIzNw=="}, "originalCommit": {"oid": "143a42469796c63b9fbbac86e3cd2a4b5aa1ccd7"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "235ba06aae18223fa6328f87c4aa44c15b3caa37", "author": {"user": {"login": "naveenr-btc", "name": "Naveen"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/235ba06aae18223fa6328f87c4aa44c15b3caa37", "committedDate": "2020-09-22T17:56:53Z", "message": "redirect url removed from config and made it based on auth url and minor fixes for code challenge"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNjU5NjE4", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/913#pullrequestreview-500659618", "createdAt": "2020-10-01T19:36:36Z", "commit": {"oid": "235ba06aae18223fa6328f87c4aa44c15b3caa37"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06314669c4cc8df7fdeb2552b0517dd5340d4cca", "author": {"user": {"login": "naveenr-btc", "name": "Naveen"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/06314669c4cc8df7fdeb2552b0517dd5340d4cca", "committedDate": "2020-10-06T05:27:34Z", "message": "Merge branch 'develop' into develop-networkmodule-authserver"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 490, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}