{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1NjQ5NDA1", "number": 1091, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNzowMTozMVrOEpj6bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNzoxMjo0OFrOEpkH6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDE1NDcwOnYy", "diffSide": "RIGHT", "path": "WCP/fdahpStudyDesigner/src/test/java/com/fdahpstudydesigner/controller/StudyControllerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNzowMTozMVrOHbTZLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNzoyNjo0OFrOHbUOmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5MTM0Mw==", "bodyText": "What is the use for this Mock? Please remove if unused", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1091#discussion_r498391343", "createdAt": "2020-10-01T17:01:31Z", "author": {"login": "saminguyen"}, "path": "WCP/fdahpStudyDesigner/src/test/java/com/fdahpstudydesigner/controller/StudyControllerTest.java", "diffHunk": "@@ -61,11 +74,22 @@\n import java.util.List;\n import java.util.UUID;\n import org.junit.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Spy;\n import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.web.client.MockRestServiceServer;\n import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;\n+import org.springframework.web.client.support.RestGatewaySupport;\n \n+@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)\n public class StudyControllerTest extends BaseMockIT {\n \n+  @InjectMocks @Spy StudyController studyController;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ada7fafed54c1c1cf6c21883a67e28fd58c8e9cf"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwNTAxOA==", "bodyText": "Fixed review comment", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1091#discussion_r498405018", "createdAt": "2020-10-01T17:26:48Z", "author": {"login": "harisboston"}, "path": "WCP/fdahpStudyDesigner/src/test/java/com/fdahpstudydesigner/controller/StudyControllerTest.java", "diffHunk": "@@ -61,11 +74,22 @@\n import java.util.List;\n import java.util.UUID;\n import org.junit.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Spy;\n import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.web.client.MockRestServiceServer;\n import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;\n+import org.springframework.web.client.support.RestGatewaySupport;\n \n+@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)\n public class StudyControllerTest extends BaseMockIT {\n \n+  @InjectMocks @Spy StudyController studyController;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5MTM0Mw=="}, "originalCommit": {"oid": "ada7fafed54c1c1cf6c21883a67e28fd58c8e9cf"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDE4OTIwOnYy", "diffSide": "RIGHT", "path": "WCP/fdahpStudyDesigner/src/test/java/com/fdahpstudydesigner/controller/StudyControllerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNzoxMjo0OFrOHbTwoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNzoyNjo1NVrOHbUO7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5NzM0NA==", "bodyText": "TEST_STUDY_ID_STRING = 678680 ?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1091#discussion_r498397344", "createdAt": "2020-10-01T17:12:48Z", "author": {"login": "saminguyen"}, "path": "WCP/fdahpStudyDesigner/src/test/java/com/fdahpstudydesigner/controller/StudyControllerTest.java", "diffHunk": "@@ -920,4 +948,207 @@ public void shouldConsentReviewAndEConsentInfo() throws Exception {\n         .andExpect(status().isOk());\n     verifyAuditEventCall(STUDY_COMPREHENSION_TEST_SECTION_SAVED_OR_UPDATED);\n   }\n+\n+  @Test\n+  public void shouldMarkStudyComprehensionTestSectionAsComplete() throws Exception {\n+    HttpHeaders headers = getCommonHeaders();\n+    SessionObject session = new SessionObject();\n+    session.setUserId(Integer.parseInt(USER_ID_VALUE));\n+    session.setStudySession(new ArrayList<>(Arrays.asList(0)));\n+    session.setSessionId(UUID.randomUUID().toString());\n+\n+    HashMap<String, Object> sessionAttributes = getSessionAttributes();\n+    sessionAttributes.put(FdahpStudyDesignerConstants.SESSION_OBJECT, session);\n+    sessionAttributes.put(CUSTOM_STUDY_ID_ATTR_NAME, CUSTOM_STUDY_ID_VALUE);\n+\n+    ConsentBo consentBo = new ConsentBo();\n+    consentBo.setStudyId(STUDY_ID_INT_VALUE);\n+    consentBo.setComprehensionTest(\"complete\");\n+    consentBo.setConsentDocContent(\"doc\");\n+\n+    mockMvc\n+        .perform(\n+            post(PathMappingUri.SAVE_CONSENT_REVIEW_AND_ECONSENT_INFO.getPath())\n+                .param(\"consentInfo\", asJsonString(consentBo))\n+                .headers(headers)\n+                .sessionAttrs(sessionAttributes))\n+        .andDo(print())\n+        .andExpect(status().isOk());\n+    verifyAuditEventCall(STUDY_COMPREHENSION_TEST_SECTION_MARKED_COMPLETE);\n+  }\n+\n+  @Test\n+  public void shouldViewStudyList() throws Exception {\n+    HttpHeaders headers = getCommonHeaders();\n+    SessionObject session = new SessionObject();\n+    session.setUserId(Integer.parseInt(USER_ID_VALUE));\n+    session.setStudySession(new ArrayList<>(Arrays.asList(0)));\n+    session.setSessionId(UUID.randomUUID().toString());\n+\n+    HashMap<String, Object> sessionAttributes = getSessionAttributes();\n+    sessionAttributes.put(FdahpStudyDesignerConstants.SESSION_OBJECT, session);\n+    sessionAttributes.put(CUSTOM_STUDY_ID_ATTR_NAME, CUSTOM_STUDY_ID_VALUE);\n+\n+    mockMvc\n+        .perform(\n+            post(PathMappingUri.STUDY_LIST.getPath())\n+                .headers(headers)\n+                .sessionAttrs(sessionAttributes))\n+        .andDo(print())\n+        .andExpect(status().isOk());\n+\n+    verifyAuditEventCall(STUDY_LIST_VIEWED);\n+  }\n+\n+  @Test\n+  public void shouldPublishStudyConsentContent() throws Exception {\n+    HttpHeaders headers = getCommonHeaders();\n+    SessionObject session = new SessionObject();\n+    session.setUserId(Integer.parseInt(\"4878642\"));\n+    session.setStudySession(new ArrayList<>(Arrays.asList(0)));\n+    session.setSessionId(UUID.randomUUID().toString());\n+\n+    HashMap<String, Object> sessionAttributes = getSessionAttributes();\n+    sessionAttributes.put(FdahpStudyDesignerConstants.SESSION_OBJECT, session);\n+    sessionAttributes.put(CUSTOM_STUDY_ID_ATTR_NAME, \"678599\");\n+\n+    mockMvc\n+        .perform(\n+            post(PathMappingUri.UPDATE_STUDY_ACTION.getPath())\n+                .param(FdahpStudyDesignerConstants.STUDY_ID, \"678580\")\n+                .param(FdahpStudyDesignerConstants.BUTTON_TEXT, \"updatesId\")\n+                .headers(headers)\n+                .sessionAttrs(sessionAttributes))\n+        .andDo(print())\n+        .andExpect(status().isOk());\n+    verifyAuditEventCall(STUDY_CONSENT_DOCUMENT_NEW_VERSION_PUBLISHED);\n+  }\n+\n+  @Test\n+  public void shouldPublishStudyConsentDoc() throws Exception {\n+    HttpHeaders headers = getCommonHeaders();\n+    SessionObject session = new SessionObject();\n+    session.setUserId(Integer.parseInt(\"4878642\"));\n+    session.setStudySession(new ArrayList<>(Arrays.asList(0)));\n+    session.setSessionId(UUID.randomUUID().toString());\n+\n+    HashMap<String, Object> sessionAttributes = getSessionAttributes();\n+    sessionAttributes.put(FdahpStudyDesignerConstants.SESSION_OBJECT, session);\n+    sessionAttributes.put(CUSTOM_STUDY_ID_ATTR_NAME, \"678999\");\n+\n+    mockMvc\n+        .perform(\n+            post(PathMappingUri.UPDATE_STUDY_ACTION.getPath())\n+                .param(FdahpStudyDesignerConstants.STUDY_ID, \"678680\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ada7fafed54c1c1cf6c21883a67e28fd58c8e9cf"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwNTEwMw==", "bodyText": "Fixed review comment", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1091#discussion_r498405103", "createdAt": "2020-10-01T17:26:55Z", "author": {"login": "harisboston"}, "path": "WCP/fdahpStudyDesigner/src/test/java/com/fdahpstudydesigner/controller/StudyControllerTest.java", "diffHunk": "@@ -920,4 +948,207 @@ public void shouldConsentReviewAndEConsentInfo() throws Exception {\n         .andExpect(status().isOk());\n     verifyAuditEventCall(STUDY_COMPREHENSION_TEST_SECTION_SAVED_OR_UPDATED);\n   }\n+\n+  @Test\n+  public void shouldMarkStudyComprehensionTestSectionAsComplete() throws Exception {\n+    HttpHeaders headers = getCommonHeaders();\n+    SessionObject session = new SessionObject();\n+    session.setUserId(Integer.parseInt(USER_ID_VALUE));\n+    session.setStudySession(new ArrayList<>(Arrays.asList(0)));\n+    session.setSessionId(UUID.randomUUID().toString());\n+\n+    HashMap<String, Object> sessionAttributes = getSessionAttributes();\n+    sessionAttributes.put(FdahpStudyDesignerConstants.SESSION_OBJECT, session);\n+    sessionAttributes.put(CUSTOM_STUDY_ID_ATTR_NAME, CUSTOM_STUDY_ID_VALUE);\n+\n+    ConsentBo consentBo = new ConsentBo();\n+    consentBo.setStudyId(STUDY_ID_INT_VALUE);\n+    consentBo.setComprehensionTest(\"complete\");\n+    consentBo.setConsentDocContent(\"doc\");\n+\n+    mockMvc\n+        .perform(\n+            post(PathMappingUri.SAVE_CONSENT_REVIEW_AND_ECONSENT_INFO.getPath())\n+                .param(\"consentInfo\", asJsonString(consentBo))\n+                .headers(headers)\n+                .sessionAttrs(sessionAttributes))\n+        .andDo(print())\n+        .andExpect(status().isOk());\n+    verifyAuditEventCall(STUDY_COMPREHENSION_TEST_SECTION_MARKED_COMPLETE);\n+  }\n+\n+  @Test\n+  public void shouldViewStudyList() throws Exception {\n+    HttpHeaders headers = getCommonHeaders();\n+    SessionObject session = new SessionObject();\n+    session.setUserId(Integer.parseInt(USER_ID_VALUE));\n+    session.setStudySession(new ArrayList<>(Arrays.asList(0)));\n+    session.setSessionId(UUID.randomUUID().toString());\n+\n+    HashMap<String, Object> sessionAttributes = getSessionAttributes();\n+    sessionAttributes.put(FdahpStudyDesignerConstants.SESSION_OBJECT, session);\n+    sessionAttributes.put(CUSTOM_STUDY_ID_ATTR_NAME, CUSTOM_STUDY_ID_VALUE);\n+\n+    mockMvc\n+        .perform(\n+            post(PathMappingUri.STUDY_LIST.getPath())\n+                .headers(headers)\n+                .sessionAttrs(sessionAttributes))\n+        .andDo(print())\n+        .andExpect(status().isOk());\n+\n+    verifyAuditEventCall(STUDY_LIST_VIEWED);\n+  }\n+\n+  @Test\n+  public void shouldPublishStudyConsentContent() throws Exception {\n+    HttpHeaders headers = getCommonHeaders();\n+    SessionObject session = new SessionObject();\n+    session.setUserId(Integer.parseInt(\"4878642\"));\n+    session.setStudySession(new ArrayList<>(Arrays.asList(0)));\n+    session.setSessionId(UUID.randomUUID().toString());\n+\n+    HashMap<String, Object> sessionAttributes = getSessionAttributes();\n+    sessionAttributes.put(FdahpStudyDesignerConstants.SESSION_OBJECT, session);\n+    sessionAttributes.put(CUSTOM_STUDY_ID_ATTR_NAME, \"678599\");\n+\n+    mockMvc\n+        .perform(\n+            post(PathMappingUri.UPDATE_STUDY_ACTION.getPath())\n+                .param(FdahpStudyDesignerConstants.STUDY_ID, \"678580\")\n+                .param(FdahpStudyDesignerConstants.BUTTON_TEXT, \"updatesId\")\n+                .headers(headers)\n+                .sessionAttrs(sessionAttributes))\n+        .andDo(print())\n+        .andExpect(status().isOk());\n+    verifyAuditEventCall(STUDY_CONSENT_DOCUMENT_NEW_VERSION_PUBLISHED);\n+  }\n+\n+  @Test\n+  public void shouldPublishStudyConsentDoc() throws Exception {\n+    HttpHeaders headers = getCommonHeaders();\n+    SessionObject session = new SessionObject();\n+    session.setUserId(Integer.parseInt(\"4878642\"));\n+    session.setStudySession(new ArrayList<>(Arrays.asList(0)));\n+    session.setSessionId(UUID.randomUUID().toString());\n+\n+    HashMap<String, Object> sessionAttributes = getSessionAttributes();\n+    sessionAttributes.put(FdahpStudyDesignerConstants.SESSION_OBJECT, session);\n+    sessionAttributes.put(CUSTOM_STUDY_ID_ATTR_NAME, \"678999\");\n+\n+    mockMvc\n+        .perform(\n+            post(PathMappingUri.UPDATE_STUDY_ACTION.getPath())\n+                .param(FdahpStudyDesignerConstants.STUDY_ID, \"678680\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5NzM0NA=="}, "originalCommit": {"oid": "ada7fafed54c1c1cf6c21883a67e28fd58c8e9cf"}, "originalPosition": 168}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1854, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}