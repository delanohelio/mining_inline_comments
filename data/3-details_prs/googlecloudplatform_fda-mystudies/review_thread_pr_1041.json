{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzNTUzNDYx", "number": 1041, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNzoxMzozNFrOEoLwYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNzoyMzo0NFrOEoL-dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTcxMTA0OnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/CallbackController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNzoxMzozNFrOHZIFEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODoxMDo0MVrOHZKDbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEwODgxOQ==", "bodyText": "this is mobile platform specific code, yet nothing in the method or controller name suggests that.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1041#discussion_r496108819", "createdAt": "2020-09-28T17:13:34Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/CallbackController.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.ACCOUNT_STATUS_COOKIE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.ERROR_VIEW_NAME;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.MOBILE_PLATFORM_COOKIE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.USER_ID_COOKIE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimEvent.SIGNIN_FAILED;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimEvent.SIGNIN_SUCCEEDED;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimEvent.SIGNIN_WITH_TEMPORARY_PASSWORD_SUCCEEDED;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.AuditLogEventRequest;\n+import com.google.cloud.healthcare.fdamystudies.common.UserAccountStatus;\n+import com.google.cloud.healthcare.fdamystudies.mapper.AuditEventMapper;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimAuditHelper;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.RedirectConfig;\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.ExceptionHandler;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.servlet.ModelAndView;\n+import org.springframework.web.util.WebUtils;\n+\n+@Controller\n+public class CallbackController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(CallbackController.class.getName());\n+\n+  @Autowired private RedirectConfig redirectConfig;\n+\n+  @Autowired private AuthScimAuditHelper auditHelper;\n+\n+  @GetMapping(value = \"/callback\")\n+  public String login(\n+      @RequestParam String code,\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      Model model) {\n+    logger.entry(String.format(\"%s request\", request.getRequestURI()));\n+\n+    AuditLogEventRequest auditRequest = AuditEventMapper.fromHttpServletRequest(request);\n+\n+    if (StringUtils.isEmpty(code)) {\n+      logger.error(\"authorization code is empty, return error view\");\n+      auditHelper.logEvent(SIGNIN_FAILED, auditRequest);\n+      return ERROR_VIEW_NAME;\n+    }\n+\n+    String userId = getCookieValue(request, USER_ID_COOKIE);\n+    if (StringUtils.isEmpty(userId)) {\n+      logger.error(\"userId cookie value is empty, return error view\");\n+      auditHelper.logEvent(SIGNIN_FAILED, auditRequest);\n+      return ERROR_VIEW_NAME;\n+    }\n+\n+    String mobilePlatform = getCookieValue(request, MOBILE_PLATFORM_COOKIE);\n+    String accountStatus = getCookieValue(request, ACCOUNT_STATUS_COOKIE);\n+    String callbackUrl = redirectConfig.getCallbackUrl(mobilePlatform);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4203238a5831df21941db301ae74b333d0c49577"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEyMjkwNQ==", "bodyText": "mobilePlatform value is used to get the callback redirect URL hence not used in the method or controller name\npublic enum MobilePlatform {\n  ANDROID(\"ANDROID\", \"Represents an Android platform\"),\n  IOS(\"IOS\", \"Represents an Apple platform\"),\n  UNKNOWN(\"UNKNOWN\", \"Any other value. Should not happen\");\n}", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1041#discussion_r496122905", "createdAt": "2020-09-28T17:38:31Z", "author": {"login": "dhanyak-btc"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/CallbackController.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.ACCOUNT_STATUS_COOKIE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.ERROR_VIEW_NAME;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.MOBILE_PLATFORM_COOKIE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.USER_ID_COOKIE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimEvent.SIGNIN_FAILED;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimEvent.SIGNIN_SUCCEEDED;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimEvent.SIGNIN_WITH_TEMPORARY_PASSWORD_SUCCEEDED;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.AuditLogEventRequest;\n+import com.google.cloud.healthcare.fdamystudies.common.UserAccountStatus;\n+import com.google.cloud.healthcare.fdamystudies.mapper.AuditEventMapper;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimAuditHelper;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.RedirectConfig;\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.ExceptionHandler;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.servlet.ModelAndView;\n+import org.springframework.web.util.WebUtils;\n+\n+@Controller\n+public class CallbackController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(CallbackController.class.getName());\n+\n+  @Autowired private RedirectConfig redirectConfig;\n+\n+  @Autowired private AuthScimAuditHelper auditHelper;\n+\n+  @GetMapping(value = \"/callback\")\n+  public String login(\n+      @RequestParam String code,\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      Model model) {\n+    logger.entry(String.format(\"%s request\", request.getRequestURI()));\n+\n+    AuditLogEventRequest auditRequest = AuditEventMapper.fromHttpServletRequest(request);\n+\n+    if (StringUtils.isEmpty(code)) {\n+      logger.error(\"authorization code is empty, return error view\");\n+      auditHelper.logEvent(SIGNIN_FAILED, auditRequest);\n+      return ERROR_VIEW_NAME;\n+    }\n+\n+    String userId = getCookieValue(request, USER_ID_COOKIE);\n+    if (StringUtils.isEmpty(userId)) {\n+      logger.error(\"userId cookie value is empty, return error view\");\n+      auditHelper.logEvent(SIGNIN_FAILED, auditRequest);\n+      return ERROR_VIEW_NAME;\n+    }\n+\n+    String mobilePlatform = getCookieValue(request, MOBILE_PLATFORM_COOKIE);\n+    String accountStatus = getCookieValue(request, ACCOUNT_STATUS_COOKIE);\n+    String callbackUrl = redirectConfig.getCallbackUrl(mobilePlatform);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEwODgxOQ=="}, "originalCommit": {"oid": "4203238a5831df21941db301ae74b333d0c49577"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE0MTE2NA==", "bodyText": "Issue will be fixed in #1061. Resolving for now.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1041#discussion_r496141164", "createdAt": "2020-09-28T18:10:41Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/CallbackController.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.ACCOUNT_STATUS_COOKIE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.ERROR_VIEW_NAME;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.MOBILE_PLATFORM_COOKIE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.USER_ID_COOKIE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimEvent.SIGNIN_FAILED;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimEvent.SIGNIN_SUCCEEDED;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimEvent.SIGNIN_WITH_TEMPORARY_PASSWORD_SUCCEEDED;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.AuditLogEventRequest;\n+import com.google.cloud.healthcare.fdamystudies.common.UserAccountStatus;\n+import com.google.cloud.healthcare.fdamystudies.mapper.AuditEventMapper;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimAuditHelper;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.RedirectConfig;\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.ExceptionHandler;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.servlet.ModelAndView;\n+import org.springframework.web.util.WebUtils;\n+\n+@Controller\n+public class CallbackController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(CallbackController.class.getName());\n+\n+  @Autowired private RedirectConfig redirectConfig;\n+\n+  @Autowired private AuthScimAuditHelper auditHelper;\n+\n+  @GetMapping(value = \"/callback\")\n+  public String login(\n+      @RequestParam String code,\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      Model model) {\n+    logger.entry(String.format(\"%s request\", request.getRequestURI()));\n+\n+    AuditLogEventRequest auditRequest = AuditEventMapper.fromHttpServletRequest(request);\n+\n+    if (StringUtils.isEmpty(code)) {\n+      logger.error(\"authorization code is empty, return error view\");\n+      auditHelper.logEvent(SIGNIN_FAILED, auditRequest);\n+      return ERROR_VIEW_NAME;\n+    }\n+\n+    String userId = getCookieValue(request, USER_ID_COOKIE);\n+    if (StringUtils.isEmpty(userId)) {\n+      logger.error(\"userId cookie value is empty, return error view\");\n+      auditHelper.logEvent(SIGNIN_FAILED, auditRequest);\n+      return ERROR_VIEW_NAME;\n+    }\n+\n+    String mobilePlatform = getCookieValue(request, MOBILE_PLATFORM_COOKIE);\n+    String accountStatus = getCookieValue(request, ACCOUNT_STATUS_COOKIE);\n+    String callbackUrl = redirectConfig.getCallbackUrl(mobilePlatform);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEwODgxOQ=="}, "originalCommit": {"oid": "4203238a5831df21941db301ae74b333d0c49577"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTcyMjI1OnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/CallbackController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNzoxNjo0MlrOHZIL_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNzo0MTozNlrOHZJCrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjExMDU5MA==", "bodyText": "where is this used and how does it work if the request is coming from the mobile app?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1041#discussion_r496110590", "createdAt": "2020-09-28T17:16:42Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/CallbackController.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.ACCOUNT_STATUS_COOKIE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.ERROR_VIEW_NAME;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.MOBILE_PLATFORM_COOKIE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.USER_ID_COOKIE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimEvent.SIGNIN_FAILED;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimEvent.SIGNIN_SUCCEEDED;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimEvent.SIGNIN_WITH_TEMPORARY_PASSWORD_SUCCEEDED;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.AuditLogEventRequest;\n+import com.google.cloud.healthcare.fdamystudies.common.UserAccountStatus;\n+import com.google.cloud.healthcare.fdamystudies.mapper.AuditEventMapper;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimAuditHelper;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.RedirectConfig;\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.ExceptionHandler;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.servlet.ModelAndView;\n+import org.springframework.web.util.WebUtils;\n+\n+@Controller\n+public class CallbackController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(CallbackController.class.getName());\n+\n+  @Autowired private RedirectConfig redirectConfig;\n+\n+  @Autowired private AuthScimAuditHelper auditHelper;\n+\n+  @GetMapping(value = \"/callback\")\n+  public String login(\n+      @RequestParam String code,\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      Model model) {\n+    logger.entry(String.format(\"%s request\", request.getRequestURI()));\n+\n+    AuditLogEventRequest auditRequest = AuditEventMapper.fromHttpServletRequest(request);\n+\n+    if (StringUtils.isEmpty(code)) {\n+      logger.error(\"authorization code is empty, return error view\");\n+      auditHelper.logEvent(SIGNIN_FAILED, auditRequest);\n+      return ERROR_VIEW_NAME;\n+    }\n+\n+    String userId = getCookieValue(request, USER_ID_COOKIE);\n+    if (StringUtils.isEmpty(userId)) {\n+      logger.error(\"userId cookie value is empty, return error view\");\n+      auditHelper.logEvent(SIGNIN_FAILED, auditRequest);\n+      return ERROR_VIEW_NAME;\n+    }\n+\n+    String mobilePlatform = getCookieValue(request, MOBILE_PLATFORM_COOKIE);\n+    String accountStatus = getCookieValue(request, ACCOUNT_STATUS_COOKIE);\n+    String callbackUrl = redirectConfig.getCallbackUrl(mobilePlatform);\n+\n+    String redirectUrl =\n+        String.format(\n+            \"%s?code=%s&userId=%s&accountStatus=%s\", callbackUrl, code, userId, accountStatus);\n+\n+    if (UserAccountStatus.ACTIVE.getStatus() == Integer.parseInt(accountStatus)) {\n+      auditHelper.logEvent(SIGNIN_SUCCEEDED, auditRequest);\n+    } else {\n+      auditHelper.logEvent(SIGNIN_WITH_TEMPORARY_PASSWORD_SUCCEEDED, auditRequest);\n+    }\n+\n+    logger.exit(String.format(\"redirect to %s from /login\", callbackUrl));\n+    return redirect(response, redirectUrl);\n+  }\n+\n+  private String getCookieValue(HttpServletRequest request, String cookieName) {\n+    Cookie cookie = WebUtils.getCookie(request, cookieName);\n+    return cookie != null ? cookie.getValue() : null;\n+  }\n+\n+  private String redirect(HttpServletResponse response, String redirectUrl) {\n+    response.setHeader(\"Location\", redirectUrl);\n+    response.setStatus(HttpStatus.FOUND.value());\n+    return \"redirect:\" + redirectUrl;\n+  }\n+\n+  @ExceptionHandler(Exception.class)\n+  public ModelAndView handleError(HttpServletRequest req, Exception ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4203238a5831df21941db301ae74b333d0c49577"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEyNDU4OQ==", "bodyText": "This method is called by the Spring framework if the any exception thrown from CallbackController class. This method returns Error view. It works same way for both mobile app or web application.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1041#discussion_r496124589", "createdAt": "2020-09-28T17:41:36Z", "author": {"login": "dhanyak-btc"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/CallbackController.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.ACCOUNT_STATUS_COOKIE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.ERROR_VIEW_NAME;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.MOBILE_PLATFORM_COOKIE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.USER_ID_COOKIE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimEvent.SIGNIN_FAILED;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimEvent.SIGNIN_SUCCEEDED;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimEvent.SIGNIN_WITH_TEMPORARY_PASSWORD_SUCCEEDED;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.AuditLogEventRequest;\n+import com.google.cloud.healthcare.fdamystudies.common.UserAccountStatus;\n+import com.google.cloud.healthcare.fdamystudies.mapper.AuditEventMapper;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimAuditHelper;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.RedirectConfig;\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.ExceptionHandler;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.servlet.ModelAndView;\n+import org.springframework.web.util.WebUtils;\n+\n+@Controller\n+public class CallbackController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(CallbackController.class.getName());\n+\n+  @Autowired private RedirectConfig redirectConfig;\n+\n+  @Autowired private AuthScimAuditHelper auditHelper;\n+\n+  @GetMapping(value = \"/callback\")\n+  public String login(\n+      @RequestParam String code,\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      Model model) {\n+    logger.entry(String.format(\"%s request\", request.getRequestURI()));\n+\n+    AuditLogEventRequest auditRequest = AuditEventMapper.fromHttpServletRequest(request);\n+\n+    if (StringUtils.isEmpty(code)) {\n+      logger.error(\"authorization code is empty, return error view\");\n+      auditHelper.logEvent(SIGNIN_FAILED, auditRequest);\n+      return ERROR_VIEW_NAME;\n+    }\n+\n+    String userId = getCookieValue(request, USER_ID_COOKIE);\n+    if (StringUtils.isEmpty(userId)) {\n+      logger.error(\"userId cookie value is empty, return error view\");\n+      auditHelper.logEvent(SIGNIN_FAILED, auditRequest);\n+      return ERROR_VIEW_NAME;\n+    }\n+\n+    String mobilePlatform = getCookieValue(request, MOBILE_PLATFORM_COOKIE);\n+    String accountStatus = getCookieValue(request, ACCOUNT_STATUS_COOKIE);\n+    String callbackUrl = redirectConfig.getCallbackUrl(mobilePlatform);\n+\n+    String redirectUrl =\n+        String.format(\n+            \"%s?code=%s&userId=%s&accountStatus=%s\", callbackUrl, code, userId, accountStatus);\n+\n+    if (UserAccountStatus.ACTIVE.getStatus() == Integer.parseInt(accountStatus)) {\n+      auditHelper.logEvent(SIGNIN_SUCCEEDED, auditRequest);\n+    } else {\n+      auditHelper.logEvent(SIGNIN_WITH_TEMPORARY_PASSWORD_SUCCEEDED, auditRequest);\n+    }\n+\n+    logger.exit(String.format(\"redirect to %s from /login\", callbackUrl));\n+    return redirect(response, redirectUrl);\n+  }\n+\n+  private String getCookieValue(HttpServletRequest request, String cookieName) {\n+    Cookie cookie = WebUtils.getCookie(request, cookieName);\n+    return cookie != null ? cookie.getValue() : null;\n+  }\n+\n+  private String redirect(HttpServletResponse response, String redirectUrl) {\n+    response.setHeader(\"Location\", redirectUrl);\n+    response.setStatus(HttpStatus.FOUND.value());\n+    return \"redirect:\" + redirectUrl;\n+  }\n+\n+  @ExceptionHandler(Exception.class)\n+  public ModelAndView handleError(HttpServletRequest req, Exception ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjExMDU5MA=="}, "originalCommit": {"oid": "4203238a5831df21941db301ae74b333d0c49577"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTcyODExOnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNzoxODozMFrOHZIPsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNzo1MTowN1rOHZJYMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjExMTUzOA==", "bodyText": "looks like login_challenge is now required, why is that?\nsame with other changes. removing code and cookie value, why are they needed, and should they be in this PR?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1041#discussion_r496111538", "createdAt": "2020-09-28T17:18:30Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "diffHunk": "@@ -96,36 +92,16 @@\n \n   @Autowired private AuthScimAuditHelper auditHelper;\n \n-  /**\n-   * @param loginChallenge is optional. ORY Hydra sends this field as query param when login/consent\n-   *     flow is initiated.\n-   * @param code ORY Hydra redirects to this path again when the login/consent flow is completed.\n-   *     ORY Hydra sends authorization 'code' and no login challenge in query params.\n-   * @param request\n-   * @param response\n-   * @param model\n-   * @return\n-   */\n   @GetMapping(value = \"/login\")\n   public String login(\n-      @RequestParam(name = LOGIN_CHALLENGE, required = false) String loginChallenge,\n-      @RequestParam(required = false) String code,\n-      @CookieValue(name = ACCOUNT_STATUS_COOKIE, required = false) String accountStatus,\n+      @RequestParam(name = LOGIN_CHALLENGE) String loginChallenge,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4203238a5831df21941db301ae74b333d0c49577"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEyNTY3OQ==", "bodyText": "Yes, login_challenge is required param, default value is true.\npublic @interface RequestParam {\n       boolean required() default true;\n}", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1041#discussion_r496125679", "createdAt": "2020-09-28T17:43:34Z", "author": {"login": "dhanyak-btc"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "diffHunk": "@@ -96,36 +92,16 @@\n \n   @Autowired private AuthScimAuditHelper auditHelper;\n \n-  /**\n-   * @param loginChallenge is optional. ORY Hydra sends this field as query param when login/consent\n-   *     flow is initiated.\n-   * @param code ORY Hydra redirects to this path again when the login/consent flow is completed.\n-   *     ORY Hydra sends authorization 'code' and no login challenge in query params.\n-   * @param request\n-   * @param response\n-   * @param model\n-   * @return\n-   */\n   @GetMapping(value = \"/login\")\n   public String login(\n-      @RequestParam(name = LOGIN_CHALLENGE, required = false) String loginChallenge,\n-      @RequestParam(required = false) String code,\n-      @CookieValue(name = ACCOUNT_STATUS_COOKIE, required = false) String accountStatus,\n+      @RequestParam(name = LOGIN_CHALLENGE) String loginChallenge,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjExMTUzOA=="}, "originalCommit": {"oid": "4203238a5831df21941db301ae74b333d0c49577"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEzMDA5Ng==", "bodyText": "code and accountStatus params moved to CallbackController class.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1041#discussion_r496130096", "createdAt": "2020-09-28T17:51:07Z", "author": {"login": "dhanyak-btc"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "diffHunk": "@@ -96,36 +92,16 @@\n \n   @Autowired private AuthScimAuditHelper auditHelper;\n \n-  /**\n-   * @param loginChallenge is optional. ORY Hydra sends this field as query param when login/consent\n-   *     flow is initiated.\n-   * @param code ORY Hydra redirects to this path again when the login/consent flow is completed.\n-   *     ORY Hydra sends authorization 'code' and no login challenge in query params.\n-   * @param request\n-   * @param response\n-   * @param model\n-   * @return\n-   */\n   @GetMapping(value = \"/login\")\n   public String login(\n-      @RequestParam(name = LOGIN_CHALLENGE, required = false) String loginChallenge,\n-      @RequestParam(required = false) String code,\n-      @CookieValue(name = ACCOUNT_STATUS_COOKIE, required = false) String accountStatus,\n+      @RequestParam(name = LOGIN_CHALLENGE) String loginChallenge,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjExMTUzOA=="}, "originalCommit": {"oid": "4203238a5831df21941db301ae74b333d0c49577"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTc0NzA4OnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/UserServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNzoyMzo0NFrOHZIbeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNzo0NTo1MlrOHZJMvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjExNDU1Mw==", "bodyText": "looks like a bug fix, but outside of the scope of this PR.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1041#discussion_r496114553", "createdAt": "2020-09-28T17:23:44Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/UserServiceImpl.java", "diffHunk": "@@ -207,15 +204,17 @@ public ResetPasswordResponse resetPassword(\n       throw new ErrorCodeException(ErrorCode.ACCOUNT_DEACTIVATED);\n     }\n \n+    Integer accountStatusBeforePasswordReset = userEntity.getStatus();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4203238a5831df21941db301ae74b333d0c49577"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEyNzE2Ng==", "bodyText": "Code merge was not done properly by another developer, this caused an issue while testing my code changes so I had to fix the issue in this PR. I mentioned the same in PR description.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1041#discussion_r496127166", "createdAt": "2020-09-28T17:45:52Z", "author": {"login": "dhanyak-btc"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/UserServiceImpl.java", "diffHunk": "@@ -207,15 +204,17 @@ public ResetPasswordResponse resetPassword(\n       throw new ErrorCodeException(ErrorCode.ACCOUNT_DEACTIVATED);\n     }\n \n+    Integer accountStatusBeforePasswordReset = userEntity.getStatus();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjExNDU1Mw=="}, "originalCommit": {"oid": "4203238a5831df21941db301ae74b333d0c49577"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1829, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}