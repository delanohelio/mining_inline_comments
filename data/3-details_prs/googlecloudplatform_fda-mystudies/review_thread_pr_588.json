{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzNTY1ODI0", "number": 588, "reviewThreads": {"totalCount": 41, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNToyMTozOFrOEK8UfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMDozNzoxNVrOEMpWxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTA5NTAxOnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/entity/sucess.model.ts", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNToyMTozOFrOGsRn0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzoxNzo0OVrOGuINUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA3OTI1MQ==", "bodyText": "Does our API really return the key successBean? That should be changed on the server side.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r449079251", "createdAt": "2020-07-02T15:21:38Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/entity/sucess.model.ts", "diffHunk": "@@ -0,0 +1,7 @@\n+export interface ApiSuccessResponse {\n+  successBean: Success;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA5NTUxOA==", "bodyText": "Yeah it is returning successBean key,I will ask server side team to change it.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r449095518", "createdAt": "2020-07-02T15:37:09Z", "author": {"login": "firdosebtc1"}, "path": "UR-web-app/src/app/entity/sucess.model.ts", "diffHunk": "@@ -0,0 +1,7 @@\n+export interface ApiSuccessResponse {\n+  successBean: Success;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA3OTI1MQ=="}, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE5NDQ0OQ==", "bodyText": "We don't actually need this Success object at all, it's not good API design. We know it's successful because of the 200 OK response, and the message isn't super helpful because we might theoretically have to translate it on the front end, so we don't need the server's message.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r449194449", "createdAt": "2020-07-02T18:21:17Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/entity/sucess.model.ts", "diffHunk": "@@ -0,0 +1,7 @@\n+export interface ApiSuccessResponse {\n+  successBean: Success;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA3OTI1MQ=="}, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM3NDUyMg==", "bodyText": "Success messages and error messages are managed in server side for all the web services as any front end application can utilize the web services and another reason is to avoid logic in front end as front end is just displaying messages which is coming from server side,\nfor example updateLocation web service will be updating a location or decommission the location or reactivating the location so based on the functionality front end will be getting success message", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r450374522", "createdAt": "2020-07-06T17:29:30Z", "author": {"login": "firdosebtc1"}, "path": "UR-web-app/src/app/entity/sucess.model.ts", "diffHunk": "@@ -0,0 +1,7 @@\n+export interface ApiSuccessResponse {\n+  successBean: Success;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA3OTI1MQ=="}, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM5MTQzNg==", "bodyText": "I understand your reasoning, but it's not the best way to do things. The main reason is translations, and the level of detail. Your user usually can't do anything about what went wrong, that's why we display error messages like \"An error has occurred\" or \"Please retry later\". But an application developer wants greater detail for their logs. If we are going to open source this platform then non-English speakers may pick it up and write their own app, and they will definitely be writing their own error messages. If the server is returning multiple messages then it should use a status enum, or the frontend should be able to infer what the state transition is.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r450391436", "createdAt": "2020-07-06T18:01:56Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/entity/sucess.model.ts", "diffHunk": "@@ -0,0 +1,7 @@\n+export interface ApiSuccessResponse {\n+  successBean: Success;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA3OTI1MQ=="}, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAyMjE2Mw==", "bodyText": "updated.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r451022163", "createdAt": "2020-07-07T17:17:49Z", "author": {"login": "firdosebtc1"}, "path": "UR-web-app/src/app/entity/sucess.model.ts", "diffHunk": "@@ -0,0 +1,7 @@\n+export interface ApiSuccessResponse {\n+  successBean: Success;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA3OTI1MQ=="}, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTA5ODc1OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/http-interceptors/auth.interceptor.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNToyMjozOFrOGsRqZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNzo0NDoxMlrOGthJAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA3OTkwOA==", "bodyText": "I assume this was for testing? If so please remove.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r449079908", "createdAt": "2020-07-02T15:22:38Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/http-interceptors/auth.interceptor.ts", "diffHunk": "@@ -27,7 +27,12 @@ export class AuthInterceptor implements HttpInterceptor {\n     void this.spinner.show();\n     const user = this.getUserDetails();\n     if (user === null) {\n-      return next.handle(req).pipe(\n+      const headers = req.headers\n+        .set('Content-Type', 'application/json')\n+        .set('userId', '1');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4MjA4MA==", "bodyText": "Removed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r450382080", "createdAt": "2020-07-06T17:44:12Z", "author": {"login": "rohithd-btc"}, "path": "UR-web-app/src/app/http-interceptors/auth.interceptor.ts", "diffHunk": "@@ -27,7 +27,12 @@ export class AuthInterceptor implements HttpInterceptor {\n     void this.spinner.show();\n     const user = this.getUserDetails();\n     if (user === null) {\n-      return next.handle(req).pipe(\n+      const headers = req.headers\n+        .set('Content-Type', 'application/json')\n+        .set('userId', '1');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA3OTkwOA=="}, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTEwMDYzOnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/service/entity.service.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNToyMzowNlrOGsRrlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNzo0NDoyOVrOGthJhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA4MDIxMg==", "bodyText": "This should be in environment.ts.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r449080212", "createdAt": "2020-07-02T15:23:06Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/entity.service.ts", "diffHunk": "@@ -5,7 +5,7 @@ import {Location} from '@angular/common';\n \n @Injectable()\n export class EntityService<T> {\n-  baseUrl = 'http://<IP>:<port>/urwebappws';\n+  baseUrl = 'http://35.222.67.4:8086/urwebappws';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4MjIxMg==", "bodyText": "Updated env file", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r450382212", "createdAt": "2020-07-06T17:44:29Z", "author": {"login": "rohithd-btc"}, "path": "UR-web-app/src/app/service/entity.service.ts", "diffHunk": "@@ -5,7 +5,7 @@ import {Location} from '@angular/common';\n \n @Injectable()\n export class EntityService<T> {\n-  baseUrl = 'http://<IP>:<port>/urwebappws';\n+  baseUrl = 'http://35.222.67.4:8086/urwebappws';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA4MDIxMg=="}, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTEwMzcyOnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/shared/myDefaultSorterComponent.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNToyNDowMVrOGsRtzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzoxODozNVrOGuIO3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA4MDc4Mg==", "bodyText": "Templates that are more than a couple lines should be in a separate file.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r449080782", "createdAt": "2020-07-02T15:24:01Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/shared/myDefaultSorterComponent.ts", "diffHunk": "@@ -0,0 +1,54 @@\n+import {Component, Input, OnInit} from '@angular/core';\n+import {SortEvent, DataTable} from 'angular-9-datatable';\n+\n+@Component({\n+  selector: 'mySorter',\n+  template: `<a style=\"cursor: pointer\" (click)=\"sort()\" class=\"text-nowrap\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAyMjU1OQ==", "bodyText": "this file has been removed as we will be using the defaultSorter provided by angular data table", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r451022559", "createdAt": "2020-07-07T17:18:35Z", "author": {"login": "firdosebtc1"}, "path": "UR-web-app/src/app/shared/myDefaultSorterComponent.ts", "diffHunk": "@@ -0,0 +1,54 @@\n+import {Component, Input, OnInit} from '@angular/core';\n+import {SortEvent, DataTable} from 'angular-9-datatable';\n+\n+@Component({\n+  selector: 'mySorter',\n+  template: `<a style=\"cursor: pointer\" (click)=\"sort()\" class=\"text-nowrap\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA4MDc4Mg=="}, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTEwNDM3OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/shared/myDefaultSorterComponent.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNToyNDoxMFrOGsRuPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNToyNDoxMFrOGsRuPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA4MDg5NQ==", "bodyText": "Don't use my.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r449080895", "createdAt": "2020-07-02T15:24:10Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/shared/myDefaultSorterComponent.ts", "diffHunk": "@@ -0,0 +1,54 @@\n+import {Component, Input, OnInit} from '@angular/core';\n+import {SortEvent, DataTable} from 'angular-9-datatable';\n+\n+@Component({\n+  selector: 'mySorter',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTEwNjM3OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/shared/myDefaultSorterComponent.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNToyNDozNFrOGsRvbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNToyNDozNFrOGsRvbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA4MTE5Nw==", "bodyText": "Don't use me.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r449081197", "createdAt": "2020-07-02T15:24:34Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/shared/myDefaultSorterComponent.ts", "diffHunk": "@@ -0,0 +1,54 @@\n+import {Component, Input, OnInit} from '@angular/core';\n+import {SortEvent, DataTable} from 'angular-9-datatable';\n+\n+@Component({\n+  selector: 'mySorter',\n+  template: `<a style=\"cursor: pointer\" (click)=\"sort()\" class=\"text-nowrap\">\n+    <ng-content></ng-content>\n+    <span\n+      *ngIf=\"isSortedByMeAsc\"\n+      class=\"glyphicon glyphicon-triangle-top\"\n+      aria-hidden=\"true\"\n+    ></span>\n+    <i\n+      *ngIf=\"!isSortedByMeAsc && !isSortedByMeDesc\"\n+      class=\"fa fa-sort-desc\"\n+      aria-hidden=\"true\"\n+    ></i>\n+    <span\n+      *ngIf=\"isSortedByMeDesc\"\n+      class=\"glyphicon glyphicon-triangle-bottom\"\n+      aria-hidden=\"true\"\n+    ></span>\n+    <span\n+      *ngIf=\"!isSortedByMeAsc && !isSortedByMeDesc\"\n+      class=\"glyphicon glyphicon-sort\"\n+      aria-hidden=\"true\"\n+    ></span>\n+    <i *ngIf=\"isSortedByMeAsc\" class=\"fa fa-sort-asc\" aria-hidden=\"true\"></i>\n+  </a>`,\n+})\n+export class MyDefaultSorterComponent implements OnInit {\n+  @Input('by') sortBy = '';\n+  isSortedByMeAsc = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTEwOTk0OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/shared/myDefaultSorterComponent.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNToyNToyOFrOGsRxtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNToyNToyOFrOGsRxtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA4MTc4Mw==", "bodyText": "Instead of two booleans you should use an enum, for example type SortDirection = 'ASC' | 'DESC' | 'UNSORTED'", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r449081783", "createdAt": "2020-07-02T15:25:28Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/shared/myDefaultSorterComponent.ts", "diffHunk": "@@ -0,0 +1,54 @@\n+import {Component, Input, OnInit} from '@angular/core';\n+import {SortEvent, DataTable} from 'angular-9-datatable';\n+\n+@Component({\n+  selector: 'mySorter',\n+  template: `<a style=\"cursor: pointer\" (click)=\"sort()\" class=\"text-nowrap\">\n+    <ng-content></ng-content>\n+    <span\n+      *ngIf=\"isSortedByMeAsc\"\n+      class=\"glyphicon glyphicon-triangle-top\"\n+      aria-hidden=\"true\"\n+    ></span>\n+    <i\n+      *ngIf=\"!isSortedByMeAsc && !isSortedByMeDesc\"\n+      class=\"fa fa-sort-desc\"\n+      aria-hidden=\"true\"\n+    ></i>\n+    <span\n+      *ngIf=\"isSortedByMeDesc\"\n+      class=\"glyphicon glyphicon-triangle-bottom\"\n+      aria-hidden=\"true\"\n+    ></span>\n+    <span\n+      *ngIf=\"!isSortedByMeAsc && !isSortedByMeDesc\"\n+      class=\"glyphicon glyphicon-sort\"\n+      aria-hidden=\"true\"\n+    ></span>\n+    <i *ngIf=\"isSortedByMeAsc\" class=\"fa fa-sort-asc\" aria-hidden=\"true\"></i>\n+  </a>`,\n+})\n+export class MyDefaultSorterComponent implements OnInit {\n+  @Input('by') sortBy = '';\n+  isSortedByMeAsc = false;\n+  isSortedByMeDesc = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTExNzIzOnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/shared/myDefaultSorterComponent.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNToyNjozNVrOGsR2rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNToyNjozNVrOGsR2rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA4MzA1NA==", "bodyText": "Use a pipe and async. Otherwise you need to unsubscribe.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r449083054", "createdAt": "2020-07-02T15:26:35Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/shared/myDefaultSorterComponent.ts", "diffHunk": "@@ -0,0 +1,54 @@\n+import {Component, Input, OnInit} from '@angular/core';\n+import {SortEvent, DataTable} from 'angular-9-datatable';\n+\n+@Component({\n+  selector: 'mySorter',\n+  template: `<a style=\"cursor: pointer\" (click)=\"sort()\" class=\"text-nowrap\">\n+    <ng-content></ng-content>\n+    <span\n+      *ngIf=\"isSortedByMeAsc\"\n+      class=\"glyphicon glyphicon-triangle-top\"\n+      aria-hidden=\"true\"\n+    ></span>\n+    <i\n+      *ngIf=\"!isSortedByMeAsc && !isSortedByMeDesc\"\n+      class=\"fa fa-sort-desc\"\n+      aria-hidden=\"true\"\n+    ></i>\n+    <span\n+      *ngIf=\"isSortedByMeDesc\"\n+      class=\"glyphicon glyphicon-triangle-bottom\"\n+      aria-hidden=\"true\"\n+    ></span>\n+    <span\n+      *ngIf=\"!isSortedByMeAsc && !isSortedByMeDesc\"\n+      class=\"glyphicon glyphicon-sort\"\n+      aria-hidden=\"true\"\n+    ></span>\n+    <i *ngIf=\"isSortedByMeAsc\" class=\"fa fa-sort-asc\" aria-hidden=\"true\"></i>\n+  </a>`,\n+})\n+export class MyDefaultSorterComponent implements OnInit {\n+  @Input('by') sortBy = '';\n+  isSortedByMeAsc = false;\n+  isSortedByMeDesc = false;\n+\n+  constructor(private readonly mfTable: DataTable) {}\n+\n+  public ngOnInit(): void {\n+    this.mfTable.onSortChange.subscribe((event: SortEvent) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTEyODU2OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.html", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNToyODoxNVrOGsR-PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzoxODo0OFrOGuIPRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA4NDk4OQ==", "bodyText": "What about the maxLength error?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r449084989", "createdAt": "2020-07-02T15:28:15Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.html", "diffHunk": "@@ -1 +1,78 @@\n-<p>add-location works!</p>\n+<div class=\"subheader p-none pl-none\">\n+    <div class=\"max__w__850 m-none\">\n+        <div class=\"row\">\n+            <div>\n+                <a routerLink=\"/coordinator/locations\" class=\"subheader__title\">\n+                    <img src=\"assets/svgs/back-arrow.svg\" />\n+                    <span>Add New Location</span>\n+                </a>\n+            </div>\n+        </div>\n+    </div>\n+</div>\n+\n+<div class=\"max__w__850 add__location\">\n+    <form ngForm #addLocationForm=\"ngForm\" (ngSubmit)=\"addLocation()\" autocomplete=\"off\">\n+        <div class=\"bg__white card__inside__pad box__shadow-cmn m-none\">\n+            <div class=\"row border-bottom__c4d1e6\">\n+                <div class=\"col-xs-12 col-md-6 p-none border-right__c4d1e6\">\n+                    <div class=\"form-group\">\n+                        <label for=\"study\">Location ID</label>\n+                        <input type=\"text\" class=\"form-control\" id=\"locationCustomId\" placeholder=\"Enter Location ID\"\n+                            [(ngModel)]=\"location.customId\" maxlength=\"15\" required name=\"locationCustomId\"\n+                            #locationCustomId=\"ngModel\" />\n+                    </div>\n+                    <div *ngIf=\"\n+              locationCustomId.invalid &&\n+              (locationCustomId.dirty || locationCustomId.touched)\n+            \">\n+                        <span class=\"help-block with-errors error__msg\" *ngIf=\"locationCustomId.errors.required\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAyMjY2Mg==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r451022662", "createdAt": "2020-07-07T17:18:48Z", "author": {"login": "firdosebtc1"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.html", "diffHunk": "@@ -1 +1,78 @@\n-<p>add-location works!</p>\n+<div class=\"subheader p-none pl-none\">\n+    <div class=\"max__w__850 m-none\">\n+        <div class=\"row\">\n+            <div>\n+                <a routerLink=\"/coordinator/locations\" class=\"subheader__title\">\n+                    <img src=\"assets/svgs/back-arrow.svg\" />\n+                    <span>Add New Location</span>\n+                </a>\n+            </div>\n+        </div>\n+    </div>\n+</div>\n+\n+<div class=\"max__w__850 add__location\">\n+    <form ngForm #addLocationForm=\"ngForm\" (ngSubmit)=\"addLocation()\" autocomplete=\"off\">\n+        <div class=\"bg__white card__inside__pad box__shadow-cmn m-none\">\n+            <div class=\"row border-bottom__c4d1e6\">\n+                <div class=\"col-xs-12 col-md-6 p-none border-right__c4d1e6\">\n+                    <div class=\"form-group\">\n+                        <label for=\"study\">Location ID</label>\n+                        <input type=\"text\" class=\"form-control\" id=\"locationCustomId\" placeholder=\"Enter Location ID\"\n+                            [(ngModel)]=\"location.customId\" maxlength=\"15\" required name=\"locationCustomId\"\n+                            #locationCustomId=\"ngModel\" />\n+                    </div>\n+                    <div *ngIf=\"\n+              locationCustomId.invalid &&\n+              (locationCustomId.dirty || locationCustomId.touched)\n+            \">\n+                        <span class=\"help-block with-errors error__msg\" *ngIf=\"locationCustomId.errors.required\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA4NDk4OQ=="}, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTE1NTQ5OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.html", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNTozMjoxMFrOGsSQug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzoxODo1N1rOGuIPjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA4OTcyMg==", "bodyText": "You don't need an id attribute and a name attribute. Just name is fine. Also adding location to every variable is redundant, this is the location form. Just use customId.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r449089722", "createdAt": "2020-07-02T15:32:10Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.html", "diffHunk": "@@ -1 +1,78 @@\n-<p>add-location works!</p>\n+<div class=\"subheader p-none pl-none\">\n+    <div class=\"max__w__850 m-none\">\n+        <div class=\"row\">\n+            <div>\n+                <a routerLink=\"/coordinator/locations\" class=\"subheader__title\">\n+                    <img src=\"assets/svgs/back-arrow.svg\" />\n+                    <span>Add New Location</span>\n+                </a>\n+            </div>\n+        </div>\n+    </div>\n+</div>\n+\n+<div class=\"max__w__850 add__location\">\n+    <form ngForm #addLocationForm=\"ngForm\" (ngSubmit)=\"addLocation()\" autocomplete=\"off\">\n+        <div class=\"bg__white card__inside__pad box__shadow-cmn m-none\">\n+            <div class=\"row border-bottom__c4d1e6\">\n+                <div class=\"col-xs-12 col-md-6 p-none border-right__c4d1e6\">\n+                    <div class=\"form-group\">\n+                        <label for=\"study\">Location ID</label>\n+                        <input type=\"text\" class=\"form-control\" id=\"locationCustomId\" placeholder=\"Enter Location ID\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAyMjczMw==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r451022733", "createdAt": "2020-07-07T17:18:57Z", "author": {"login": "firdosebtc1"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.html", "diffHunk": "@@ -1 +1,78 @@\n-<p>add-location works!</p>\n+<div class=\"subheader p-none pl-none\">\n+    <div class=\"max__w__850 m-none\">\n+        <div class=\"row\">\n+            <div>\n+                <a routerLink=\"/coordinator/locations\" class=\"subheader__title\">\n+                    <img src=\"assets/svgs/back-arrow.svg\" />\n+                    <span>Add New Location</span>\n+                </a>\n+            </div>\n+        </div>\n+    </div>\n+</div>\n+\n+<div class=\"max__w__850 add__location\">\n+    <form ngForm #addLocationForm=\"ngForm\" (ngSubmit)=\"addLocation()\" autocomplete=\"off\">\n+        <div class=\"bg__white card__inside__pad box__shadow-cmn m-none\">\n+            <div class=\"row border-bottom__c4d1e6\">\n+                <div class=\"col-xs-12 col-md-6 p-none border-right__c4d1e6\">\n+                    <div class=\"form-group\">\n+                        <label for=\"study\">Location ID</label>\n+                        <input type=\"text\" class=\"form-control\" id=\"locationCustomId\" placeholder=\"Enter Location ID\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA4OTcyMg=="}, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTE2MDQ4OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.html", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNTozMjo1NVrOGsSUGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzoxOTowMlrOGuIPxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA5MDU4NQ==", "bodyText": "Same as customId", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r449090585", "createdAt": "2020-07-02T15:32:55Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.html", "diffHunk": "@@ -1 +1,78 @@\n-<p>add-location works!</p>\n+<div class=\"subheader p-none pl-none\">\n+    <div class=\"max__w__850 m-none\">\n+        <div class=\"row\">\n+            <div>\n+                <a routerLink=\"/coordinator/locations\" class=\"subheader__title\">\n+                    <img src=\"assets/svgs/back-arrow.svg\" />\n+                    <span>Add New Location</span>\n+                </a>\n+            </div>\n+        </div>\n+    </div>\n+</div>\n+\n+<div class=\"max__w__850 add__location\">\n+    <form ngForm #addLocationForm=\"ngForm\" (ngSubmit)=\"addLocation()\" autocomplete=\"off\">\n+        <div class=\"bg__white card__inside__pad box__shadow-cmn m-none\">\n+            <div class=\"row border-bottom__c4d1e6\">\n+                <div class=\"col-xs-12 col-md-6 p-none border-right__c4d1e6\">\n+                    <div class=\"form-group\">\n+                        <label for=\"study\">Location ID</label>\n+                        <input type=\"text\" class=\"form-control\" id=\"locationCustomId\" placeholder=\"Enter Location ID\"\n+                            [(ngModel)]=\"location.customId\" maxlength=\"15\" required name=\"locationCustomId\"\n+                            #locationCustomId=\"ngModel\" />\n+                    </div>\n+                    <div *ngIf=\"\n+              locationCustomId.invalid &&\n+              (locationCustomId.dirty || locationCustomId.touched)\n+            \">\n+                        <span class=\"help-block with-errors error__msg\" *ngIf=\"locationCustomId.errors.required\">\n+                            Location ID is required.\n+                        </span>\n+                    </div>\n+                </div>\n+                <div class=\"col-xs-12 col-md-6 p-none\">\n+                    <div class=\"form-group\">\n+                        <label for=\"app\">Location Name</label>\n+                        <input type=\"text\" class=\"form-control\" id=\"locationName\" placeholder=\"Enter Location Name\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAyMjc5MQ==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r451022791", "createdAt": "2020-07-07T17:19:02Z", "author": {"login": "firdosebtc1"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.html", "diffHunk": "@@ -1 +1,78 @@\n-<p>add-location works!</p>\n+<div class=\"subheader p-none pl-none\">\n+    <div class=\"max__w__850 m-none\">\n+        <div class=\"row\">\n+            <div>\n+                <a routerLink=\"/coordinator/locations\" class=\"subheader__title\">\n+                    <img src=\"assets/svgs/back-arrow.svg\" />\n+                    <span>Add New Location</span>\n+                </a>\n+            </div>\n+        </div>\n+    </div>\n+</div>\n+\n+<div class=\"max__w__850 add__location\">\n+    <form ngForm #addLocationForm=\"ngForm\" (ngSubmit)=\"addLocation()\" autocomplete=\"off\">\n+        <div class=\"bg__white card__inside__pad box__shadow-cmn m-none\">\n+            <div class=\"row border-bottom__c4d1e6\">\n+                <div class=\"col-xs-12 col-md-6 p-none border-right__c4d1e6\">\n+                    <div class=\"form-group\">\n+                        <label for=\"study\">Location ID</label>\n+                        <input type=\"text\" class=\"form-control\" id=\"locationCustomId\" placeholder=\"Enter Location ID\"\n+                            [(ngModel)]=\"location.customId\" maxlength=\"15\" required name=\"locationCustomId\"\n+                            #locationCustomId=\"ngModel\" />\n+                    </div>\n+                    <div *ngIf=\"\n+              locationCustomId.invalid &&\n+              (locationCustomId.dirty || locationCustomId.touched)\n+            \">\n+                        <span class=\"help-block with-errors error__msg\" *ngIf=\"locationCustomId.errors.required\">\n+                            Location ID is required.\n+                        </span>\n+                    </div>\n+                </div>\n+                <div class=\"col-xs-12 col-md-6 p-none\">\n+                    <div class=\"form-group\">\n+                        <label for=\"app\">Location Name</label>\n+                        <input type=\"text\" class=\"form-control\" id=\"locationName\" placeholder=\"Enter Location Name\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA5MDU4NQ=="}, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTE2MzMwOnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNTozMzoyMlrOGsSWKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzozMzoxN1rOGuIwKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA5MTExMw==", "bodyText": "customIdInput", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r449091113", "createdAt": "2020-07-02T15:33:22Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "diffHunk": "@@ -1,24 +1,149 @@\n-import {async, ComponentFixture, TestBed} from '@angular/core/testing';\n-\n+import {\n+  async,\n+  ComponentFixture,\n+  TestBed,\n+  fakeAsync,\n+  tick,\n+} from '@angular/core/testing';\n+import {DebugElement} from '@angular/core';\n import {AddLocationComponent} from './add-location.component';\n+import {LocationService} from '../shared/location.service';\n+import {ToastrModule} from 'ngx-toastr';\n+import {BsModalService, ModalModule} from 'ngx-bootstrap/modal';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {LocationModule} from '../location.module';\n+import {FormsModule, ReactiveFormsModule, NgForm} from '@angular/forms';\n+import {EntityService} from 'src/app/service/entity.service';\n+import {HttpClientModule} from '@angular/common/http';\n+import {By} from '@angular/platform-browser';\n \n describe('AddLocationComponent', () => {\n   let component: AddLocationComponent;\n   let fixture: ComponentFixture<AddLocationComponent>;\n+  let form: DebugElement;\n+  let submitLocation: DebugElement;\n+  let locationCustomIde1: DebugElement;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAzMTA4MQ==", "bodyText": "Updated", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r451031081", "createdAt": "2020-07-07T17:33:17Z", "author": {"login": "rohithd-btc"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "diffHunk": "@@ -1,24 +1,149 @@\n-import {async, ComponentFixture, TestBed} from '@angular/core/testing';\n-\n+import {\n+  async,\n+  ComponentFixture,\n+  TestBed,\n+  fakeAsync,\n+  tick,\n+} from '@angular/core/testing';\n+import {DebugElement} from '@angular/core';\n import {AddLocationComponent} from './add-location.component';\n+import {LocationService} from '../shared/location.service';\n+import {ToastrModule} from 'ngx-toastr';\n+import {BsModalService, ModalModule} from 'ngx-bootstrap/modal';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {LocationModule} from '../location.module';\n+import {FormsModule, ReactiveFormsModule, NgForm} from '@angular/forms';\n+import {EntityService} from 'src/app/service/entity.service';\n+import {HttpClientModule} from '@angular/common/http';\n+import {By} from '@angular/platform-browser';\n \n describe('AddLocationComponent', () => {\n   let component: AddLocationComponent;\n   let fixture: ComponentFixture<AddLocationComponent>;\n+  let form: DebugElement;\n+  let submitLocation: DebugElement;\n+  let locationCustomIde1: DebugElement;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA5MTExMw=="}, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTE2NDE3OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNTozMzozMFrOGsSWxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzoyMzoyN1rOGuIZwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA5MTI3MA==", "bodyText": "nameInput", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r449091270", "createdAt": "2020-07-02T15:33:30Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "diffHunk": "@@ -1,24 +1,149 @@\n-import {async, ComponentFixture, TestBed} from '@angular/core/testing';\n-\n+import {\n+  async,\n+  ComponentFixture,\n+  TestBed,\n+  fakeAsync,\n+  tick,\n+} from '@angular/core/testing';\n+import {DebugElement} from '@angular/core';\n import {AddLocationComponent} from './add-location.component';\n+import {LocationService} from '../shared/location.service';\n+import {ToastrModule} from 'ngx-toastr';\n+import {BsModalService, ModalModule} from 'ngx-bootstrap/modal';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {LocationModule} from '../location.module';\n+import {FormsModule, ReactiveFormsModule, NgForm} from '@angular/forms';\n+import {EntityService} from 'src/app/service/entity.service';\n+import {HttpClientModule} from '@angular/common/http';\n+import {By} from '@angular/platform-browser';\n \n describe('AddLocationComponent', () => {\n   let component: AddLocationComponent;\n   let fixture: ComponentFixture<AddLocationComponent>;\n+  let form: DebugElement;\n+  let submitLocation: DebugElement;\n+  let locationCustomIde1: DebugElement;\n+  let locationNamee1: DebugElement;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAyNTM0NQ==", "bodyText": "Updated", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r451025345", "createdAt": "2020-07-07T17:23:27Z", "author": {"login": "rohithd-btc"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "diffHunk": "@@ -1,24 +1,149 @@\n-import {async, ComponentFixture, TestBed} from '@angular/core/testing';\n-\n+import {\n+  async,\n+  ComponentFixture,\n+  TestBed,\n+  fakeAsync,\n+  tick,\n+} from '@angular/core/testing';\n+import {DebugElement} from '@angular/core';\n import {AddLocationComponent} from './add-location.component';\n+import {LocationService} from '../shared/location.service';\n+import {ToastrModule} from 'ngx-toastr';\n+import {BsModalService, ModalModule} from 'ngx-bootstrap/modal';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {LocationModule} from '../location.module';\n+import {FormsModule, ReactiveFormsModule, NgForm} from '@angular/forms';\n+import {EntityService} from 'src/app/service/entity.service';\n+import {HttpClientModule} from '@angular/common/http';\n+import {By} from '@angular/platform-browser';\n \n describe('AddLocationComponent', () => {\n   let component: AddLocationComponent;\n   let fixture: ComponentFixture<AddLocationComponent>;\n+  let form: DebugElement;\n+  let submitLocation: DebugElement;\n+  let locationCustomIde1: DebugElement;\n+  let locationNamee1: DebugElement;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA5MTI3MA=="}, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTE3MjEwOnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNTozNDo0M1rOGsScKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNzo0NToyMFrOGthLIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA5MjY0OA==", "bodyText": "You aren't using ReactiveForms", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r449092648", "createdAt": "2020-07-02T15:34:43Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "diffHunk": "@@ -1,24 +1,149 @@\n-import {async, ComponentFixture, TestBed} from '@angular/core/testing';\n-\n+import {\n+  async,\n+  ComponentFixture,\n+  TestBed,\n+  fakeAsync,\n+  tick,\n+} from '@angular/core/testing';\n+import {DebugElement} from '@angular/core';\n import {AddLocationComponent} from './add-location.component';\n+import {LocationService} from '../shared/location.service';\n+import {ToastrModule} from 'ngx-toastr';\n+import {BsModalService, ModalModule} from 'ngx-bootstrap/modal';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {LocationModule} from '../location.module';\n+import {FormsModule, ReactiveFormsModule, NgForm} from '@angular/forms';\n+import {EntityService} from 'src/app/service/entity.service';\n+import {HttpClientModule} from '@angular/common/http';\n+import {By} from '@angular/platform-browser';\n \n describe('AddLocationComponent', () => {\n   let component: AddLocationComponent;\n   let fixture: ComponentFixture<AddLocationComponent>;\n+  let form: DebugElement;\n+  let submitLocation: DebugElement;\n+  let locationCustomIde1: DebugElement;\n+  let locationNamee1: DebugElement;\n+  let locationDescriptione1: DebugElement;\n \n-  beforeEach(async(async () => {\n-    await TestBed.configureTestingModule({\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n       declarations: [AddLocationComponent],\n-    }).compileComponents();\n+      imports: [\n+        ModalModule.forRoot(),\n+        RouterTestingModule,\n+        LocationModule,\n+        HttpClientModule,\n+        FormsModule,\n+        ReactiveFormsModule,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4MjYyNg==", "bodyText": "Removed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r450382626", "createdAt": "2020-07-06T17:45:20Z", "author": {"login": "rohithd-btc"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "diffHunk": "@@ -1,24 +1,149 @@\n-import {async, ComponentFixture, TestBed} from '@angular/core/testing';\n-\n+import {\n+  async,\n+  ComponentFixture,\n+  TestBed,\n+  fakeAsync,\n+  tick,\n+} from '@angular/core/testing';\n+import {DebugElement} from '@angular/core';\n import {AddLocationComponent} from './add-location.component';\n+import {LocationService} from '../shared/location.service';\n+import {ToastrModule} from 'ngx-toastr';\n+import {BsModalService, ModalModule} from 'ngx-bootstrap/modal';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {LocationModule} from '../location.module';\n+import {FormsModule, ReactiveFormsModule, NgForm} from '@angular/forms';\n+import {EntityService} from 'src/app/service/entity.service';\n+import {HttpClientModule} from '@angular/common/http';\n+import {By} from '@angular/platform-browser';\n \n describe('AddLocationComponent', () => {\n   let component: AddLocationComponent;\n   let fixture: ComponentFixture<AddLocationComponent>;\n+  let form: DebugElement;\n+  let submitLocation: DebugElement;\n+  let locationCustomIde1: DebugElement;\n+  let locationNamee1: DebugElement;\n+  let locationDescriptione1: DebugElement;\n \n-  beforeEach(async(async () => {\n-    await TestBed.configureTestingModule({\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n       declarations: [AddLocationComponent],\n-    }).compileComponents();\n+      imports: [\n+        ModalModule.forRoot(),\n+        RouterTestingModule,\n+        LocationModule,\n+        HttpClientModule,\n+        FormsModule,\n+        ReactiveFormsModule,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA5MjY0OA=="}, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTE3NTMyOnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNTozNTowOVrOGsSeRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzoyMzozOFrOGuIaKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA5MzE4OQ==", "bodyText": "Use [name=\"\"] selector", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r449093189", "createdAt": "2020-07-02T15:35:09Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "diffHunk": "@@ -1,24 +1,149 @@\n-import {async, ComponentFixture, TestBed} from '@angular/core/testing';\n-\n+import {\n+  async,\n+  ComponentFixture,\n+  TestBed,\n+  fakeAsync,\n+  tick,\n+} from '@angular/core/testing';\n+import {DebugElement} from '@angular/core';\n import {AddLocationComponent} from './add-location.component';\n+import {LocationService} from '../shared/location.service';\n+import {ToastrModule} from 'ngx-toastr';\n+import {BsModalService, ModalModule} from 'ngx-bootstrap/modal';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {LocationModule} from '../location.module';\n+import {FormsModule, ReactiveFormsModule, NgForm} from '@angular/forms';\n+import {EntityService} from 'src/app/service/entity.service';\n+import {HttpClientModule} from '@angular/common/http';\n+import {By} from '@angular/platform-browser';\n \n describe('AddLocationComponent', () => {\n   let component: AddLocationComponent;\n   let fixture: ComponentFixture<AddLocationComponent>;\n+  let form: DebugElement;\n+  let submitLocation: DebugElement;\n+  let locationCustomIde1: DebugElement;\n+  let locationNamee1: DebugElement;\n+  let locationDescriptione1: DebugElement;\n \n-  beforeEach(async(async () => {\n-    await TestBed.configureTestingModule({\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n       declarations: [AddLocationComponent],\n-    }).compileComponents();\n+      imports: [\n+        ModalModule.forRoot(),\n+        RouterTestingModule,\n+        LocationModule,\n+        HttpClientModule,\n+        FormsModule,\n+        ReactiveFormsModule,\n+        ToastrModule.forRoot({\n+          positionClass: 'toast-top-center',\n+          preventDuplicates: true,\n+          enableHtml: true,\n+        }),\n+      ],\n+      providers: [NgForm, EntityService, LocationService, BsModalService],\n+    });\n   }));\n \n-  beforeEach(() => {\n+  beforeEach(async(() => {\n     fixture = TestBed.createComponent(AddLocationComponent);\n     component = fixture.componentInstance;\n+    form = fixture.debugElement.query(By.css('form'));\n+    submitLocation = fixture.debugElement.query(\n+      By.css('button[type=\"submit\"]'),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAyNTQ0OA==", "bodyText": "updated", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r451025448", "createdAt": "2020-07-07T17:23:38Z", "author": {"login": "rohithd-btc"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "diffHunk": "@@ -1,24 +1,149 @@\n-import {async, ComponentFixture, TestBed} from '@angular/core/testing';\n-\n+import {\n+  async,\n+  ComponentFixture,\n+  TestBed,\n+  fakeAsync,\n+  tick,\n+} from '@angular/core/testing';\n+import {DebugElement} from '@angular/core';\n import {AddLocationComponent} from './add-location.component';\n+import {LocationService} from '../shared/location.service';\n+import {ToastrModule} from 'ngx-toastr';\n+import {BsModalService, ModalModule} from 'ngx-bootstrap/modal';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {LocationModule} from '../location.module';\n+import {FormsModule, ReactiveFormsModule, NgForm} from '@angular/forms';\n+import {EntityService} from 'src/app/service/entity.service';\n+import {HttpClientModule} from '@angular/common/http';\n+import {By} from '@angular/platform-browser';\n \n describe('AddLocationComponent', () => {\n   let component: AddLocationComponent;\n   let fixture: ComponentFixture<AddLocationComponent>;\n+  let form: DebugElement;\n+  let submitLocation: DebugElement;\n+  let locationCustomIde1: DebugElement;\n+  let locationNamee1: DebugElement;\n+  let locationDescriptione1: DebugElement;\n \n-  beforeEach(async(async () => {\n-    await TestBed.configureTestingModule({\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n       declarations: [AddLocationComponent],\n-    }).compileComponents();\n+      imports: [\n+        ModalModule.forRoot(),\n+        RouterTestingModule,\n+        LocationModule,\n+        HttpClientModule,\n+        FormsModule,\n+        ReactiveFormsModule,\n+        ToastrModule.forRoot({\n+          positionClass: 'toast-top-center',\n+          preventDuplicates: true,\n+          enableHtml: true,\n+        }),\n+      ],\n+      providers: [NgForm, EntityService, LocationService, BsModalService],\n+    });\n   }));\n \n-  beforeEach(() => {\n+  beforeEach(async(() => {\n     fixture = TestBed.createComponent(AddLocationComponent);\n     component = fixture.componentInstance;\n+    form = fixture.debugElement.query(By.css('form'));\n+    submitLocation = fixture.debugElement.query(\n+      By.css('button[type=\"submit\"]'),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA5MzE4OQ=="}, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTE4OTU2OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNTozNzoyMlrOGsSoYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNzo0NTozNlrOGthLqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA5NTc3Ng==", "bodyText": "What is this test for? You're not testing the logic of this component. Please remove.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r449095776", "createdAt": "2020-07-02T15:37:22Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "diffHunk": "@@ -1,24 +1,149 @@\n-import {async, ComponentFixture, TestBed} from '@angular/core/testing';\n-\n+import {\n+  async,\n+  ComponentFixture,\n+  TestBed,\n+  fakeAsync,\n+  tick,\n+} from '@angular/core/testing';\n+import {DebugElement} from '@angular/core';\n import {AddLocationComponent} from './add-location.component';\n+import {LocationService} from '../shared/location.service';\n+import {ToastrModule} from 'ngx-toastr';\n+import {BsModalService, ModalModule} from 'ngx-bootstrap/modal';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {LocationModule} from '../location.module';\n+import {FormsModule, ReactiveFormsModule, NgForm} from '@angular/forms';\n+import {EntityService} from 'src/app/service/entity.service';\n+import {HttpClientModule} from '@angular/common/http';\n+import {By} from '@angular/platform-browser';\n \n describe('AddLocationComponent', () => {\n   let component: AddLocationComponent;\n   let fixture: ComponentFixture<AddLocationComponent>;\n+  let form: DebugElement;\n+  let submitLocation: DebugElement;\n+  let locationCustomIde1: DebugElement;\n+  let locationNamee1: DebugElement;\n+  let locationDescriptione1: DebugElement;\n \n-  beforeEach(async(async () => {\n-    await TestBed.configureTestingModule({\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n       declarations: [AddLocationComponent],\n-    }).compileComponents();\n+      imports: [\n+        ModalModule.forRoot(),\n+        RouterTestingModule,\n+        LocationModule,\n+        HttpClientModule,\n+        FormsModule,\n+        ReactiveFormsModule,\n+        ToastrModule.forRoot({\n+          positionClass: 'toast-top-center',\n+          preventDuplicates: true,\n+          enableHtml: true,\n+        }),\n+      ],\n+      providers: [NgForm, EntityService, LocationService, BsModalService],\n+    });\n   }));\n \n-  beforeEach(() => {\n+  beforeEach(async(() => {\n     fixture = TestBed.createComponent(AddLocationComponent);\n     component = fixture.componentInstance;\n+    form = fixture.debugElement.query(By.css('form'));\n+    submitLocation = fixture.debugElement.query(\n+      By.css('button[type=\"submit\"]'),\n+    );\n+    locationCustomIde1 = fixture.debugElement.query(\n+      By.css('input[id=locationCustomId]'),\n+    );\n+    locationNamee1 = fixture.debugElement.query(\n+      By.css('input[id=locationName]'),\n+    );\n+    locationDescriptione1 = fixture.debugElement.query(\n+      By.css('input[id=locationDescription]'),\n+    );\n+\n     fixture.detectChanges();\n-  });\n+  }));\n \n   it('should create', () => {\n     expect(component).toBeTruthy();\n   });\n+  it('should not create a template-driven form when ngNoForm is used', () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4Mjc2Mw==", "bodyText": "Removed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r450382763", "createdAt": "2020-07-06T17:45:36Z", "author": {"login": "rohithd-btc"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "diffHunk": "@@ -1,24 +1,149 @@\n-import {async, ComponentFixture, TestBed} from '@angular/core/testing';\n-\n+import {\n+  async,\n+  ComponentFixture,\n+  TestBed,\n+  fakeAsync,\n+  tick,\n+} from '@angular/core/testing';\n+import {DebugElement} from '@angular/core';\n import {AddLocationComponent} from './add-location.component';\n+import {LocationService} from '../shared/location.service';\n+import {ToastrModule} from 'ngx-toastr';\n+import {BsModalService, ModalModule} from 'ngx-bootstrap/modal';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {LocationModule} from '../location.module';\n+import {FormsModule, ReactiveFormsModule, NgForm} from '@angular/forms';\n+import {EntityService} from 'src/app/service/entity.service';\n+import {HttpClientModule} from '@angular/common/http';\n+import {By} from '@angular/platform-browser';\n \n describe('AddLocationComponent', () => {\n   let component: AddLocationComponent;\n   let fixture: ComponentFixture<AddLocationComponent>;\n+  let form: DebugElement;\n+  let submitLocation: DebugElement;\n+  let locationCustomIde1: DebugElement;\n+  let locationNamee1: DebugElement;\n+  let locationDescriptione1: DebugElement;\n \n-  beforeEach(async(async () => {\n-    await TestBed.configureTestingModule({\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n       declarations: [AddLocationComponent],\n-    }).compileComponents();\n+      imports: [\n+        ModalModule.forRoot(),\n+        RouterTestingModule,\n+        LocationModule,\n+        HttpClientModule,\n+        FormsModule,\n+        ReactiveFormsModule,\n+        ToastrModule.forRoot({\n+          positionClass: 'toast-top-center',\n+          preventDuplicates: true,\n+          enableHtml: true,\n+        }),\n+      ],\n+      providers: [NgForm, EntityService, LocationService, BsModalService],\n+    });\n   }));\n \n-  beforeEach(() => {\n+  beforeEach(async(() => {\n     fixture = TestBed.createComponent(AddLocationComponent);\n     component = fixture.componentInstance;\n+    form = fixture.debugElement.query(By.css('form'));\n+    submitLocation = fixture.debugElement.query(\n+      By.css('button[type=\"submit\"]'),\n+    );\n+    locationCustomIde1 = fixture.debugElement.query(\n+      By.css('input[id=locationCustomId]'),\n+    );\n+    locationNamee1 = fixture.debugElement.query(\n+      By.css('input[id=locationName]'),\n+    );\n+    locationDescriptione1 = fixture.debugElement.query(\n+      By.css('input[id=locationDescription]'),\n+    );\n+\n     fixture.detectChanges();\n-  });\n+  }));\n \n   it('should create', () => {\n     expect(component).toBeTruthy();\n   });\n+  it('should not create a template-driven form when ngNoForm is used', () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA5NTc3Ng=="}, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTY0NzE1OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNzozMTozOVrOGsXIyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzoyNDo0MlrOGuIcvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE2OTYxMQ==", "bodyText": "Use a pipe and async. Otherwise you need to unsubscribe.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r449169611", "createdAt": "2020-07-02T17:31:39Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.ts", "diffHunk": "@@ -1,8 +1,37 @@\n-import {Component} from '@angular/core';\n+import {Component, Input, Output, EventEmitter} from '@angular/core';\n+import {Router} from '@angular/router';\n+import {Location} from '../shared/location.model';\n+import {LocationService} from '../shared/location.service';\n+import {ToastrService} from 'ngx-toastr';\n+import {ApiResponse} from 'src/app/entity/error.model';\n+import {ApiSuccessResponse} from 'src/app/entity/sucess.model';\n \n @Component({\n   selector: 'location-add',\n   templateUrl: './add-location.component.html',\n   styleUrls: ['./add-location.component.scss'],\n })\n-export class AddLocationComponent {}\n+export class AddLocationComponent {\n+  @Input() enabled = true;\n+  @Output() onFormSubmit: EventEmitter<unknown> = new EventEmitter<unknown>();\n+  location: Location = new Location();\n+  constructor(\n+    private readonly router: Router,\n+    private readonly locationService: LocationService,\n+    private readonly toastr: ToastrService,\n+  ) {}\n+\n+  addLocation(): void {\n+    this.locationService.addLocation(this.location).subscribe(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAyNjExMA==", "bodyText": "Updated", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r451026110", "createdAt": "2020-07-07T17:24:42Z", "author": {"login": "firdosebtc1"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.ts", "diffHunk": "@@ -1,8 +1,37 @@\n-import {Component} from '@angular/core';\n+import {Component, Input, Output, EventEmitter} from '@angular/core';\n+import {Router} from '@angular/router';\n+import {Location} from '../shared/location.model';\n+import {LocationService} from '../shared/location.service';\n+import {ToastrService} from 'ngx-toastr';\n+import {ApiResponse} from 'src/app/entity/error.model';\n+import {ApiSuccessResponse} from 'src/app/entity/sucess.model';\n \n @Component({\n   selector: 'location-add',\n   templateUrl: './add-location.component.html',\n   styleUrls: ['./add-location.component.scss'],\n })\n-export class AddLocationComponent {}\n+export class AddLocationComponent {\n+  @Input() enabled = true;\n+  @Output() onFormSubmit: EventEmitter<unknown> = new EventEmitter<unknown>();\n+  location: Location = new Location();\n+  constructor(\n+    private readonly router: Router,\n+    private readonly locationService: LocationService,\n+    private readonly toastr: ToastrService,\n+  ) {}\n+\n+  addLocation(): void {\n+    this.locationService.addLocation(this.location).subscribe(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE2OTYxMQ=="}, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTY0OTQzOnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/location/shared/location.service.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNzozMjoyNVrOGsXKVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNzozMDoxN1rOGtgtNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE3MDAwNg==", "bodyText": "This isn't unknown, it's Location.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r449170006", "createdAt": "2020-07-02T17:32:25Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/location/shared/location.service.ts", "diffHunk": "@@ -2,12 +2,16 @@ import {Injectable} from '@angular/core';\n import {EntityService} from '../../../service/entity.service';\n import {Observable} from 'rxjs';\n import {Location} from '../shared/location.model';\n+\n @Injectable({\n   providedIn: 'root',\n })\n export class LocationService {\n-  constructor(private readonly entityService: EntityService<Location>) {}\n-  getLocations(): Observable<Location[]> {\n+  constructor(private readonly entityService: EntityService<unknown>) {}\n+  getLocations(): Observable<unknown[]> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM3NDk2NQ==", "bodyText": "Updated in the latest commit ,please check", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r450374965", "createdAt": "2020-07-06T17:30:17Z", "author": {"login": "firdosebtc1"}, "path": "UR-web-app/src/app/site-coordinator/location/shared/location.service.ts", "diffHunk": "@@ -2,12 +2,16 @@ import {Injectable} from '@angular/core';\n import {EntityService} from '../../../service/entity.service';\n import {Observable} from 'rxjs';\n import {Location} from '../shared/location.model';\n+\n @Injectable({\n   providedIn: 'root',\n })\n export class LocationService {\n-  constructor(private readonly entityService: EntityService<Location>) {}\n-  getLocations(): Observable<Location[]> {\n+  constructor(private readonly entityService: EntityService<unknown>) {}\n+  getLocations(): Observable<unknown[]> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE3MDAwNg=="}, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTY1MjY1OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/location/shared/location.service.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNzozMzoyOVrOGsXMaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNzozMDoyM1rOGtgtZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE3MDUzNw==", "bodyText": "I assume that this is why you changed the type to unknown. If post isn't returning the created Location then you need to change the type in entityService to something else. You also don't need to stringify, the http client will take care of that for you.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r449170537", "createdAt": "2020-07-02T17:33:29Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/location/shared/location.service.ts", "diffHunk": "@@ -2,12 +2,16 @@ import {Injectable} from '@angular/core';\n import {EntityService} from '../../../service/entity.service';\n import {Observable} from 'rxjs';\n import {Location} from '../shared/location.model';\n+\n @Injectable({\n   providedIn: 'root',\n })\n export class LocationService {\n-  constructor(private readonly entityService: EntityService<Location>) {}\n-  getLocations(): Observable<Location[]> {\n+  constructor(private readonly entityService: EntityService<unknown>) {}\n+  getLocations(): Observable<unknown[]> {\n     return this.entityService.getCollection('locations');\n   }\n+  addLocation(location: Location): Observable<unknown> {\n+    return this.entityService.post(JSON.stringify(location), 'locations');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM3NTAxMg==", "bodyText": "Updated in the latest commit ,please check", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r450375012", "createdAt": "2020-07-06T17:30:23Z", "author": {"login": "firdosebtc1"}, "path": "UR-web-app/src/app/site-coordinator/location/shared/location.service.ts", "diffHunk": "@@ -2,12 +2,16 @@ import {Injectable} from '@angular/core';\n import {EntityService} from '../../../service/entity.service';\n import {Observable} from 'rxjs';\n import {Location} from '../shared/location.model';\n+\n @Injectable({\n   providedIn: 'root',\n })\n export class LocationService {\n-  constructor(private readonly entityService: EntityService<Location>) {}\n-  getLocations(): Observable<Location[]> {\n+  constructor(private readonly entityService: EntityService<unknown>) {}\n+  getLocations(): Observable<unknown[]> {\n     return this.entityService.getCollection('locations');\n   }\n+  addLocation(location: Location): Observable<unknown> {\n+    return this.entityService.post(JSON.stringify(location), 'locations');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE3MDUzNw=="}, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTY1NDgyOnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/assets/svgs/back-arrow.svg", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNzozNDowOFrOGsXNwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNzo0NjowNVrOGthMog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE3MDg4MA==", "bodyText": "Formatting", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r449170880", "createdAt": "2020-07-02T17:34:08Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/assets/svgs/back-arrow.svg", "diffHunk": "@@ -0,0 +1,4 @@\n+<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4MzAxMA==", "bodyText": "Updated", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r450383010", "createdAt": "2020-07-06T17:46:05Z", "author": {"login": "rohithd-btc"}, "path": "UR-web-app/src/assets/svgs/back-arrow.svg", "diffHunk": "@@ -0,0 +1,4 @@\n+<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE3MDg4MA=="}, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTY2MDMyOnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/location/shared/location.service.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNzozNTo1MFrOGsXRJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNzo0NjoyNVrOGthNOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE3MTc0OA==", "bodyText": "The service doesn't have mandatory field logic. The test is effectively the same as the previous test. Please remove.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r449171748", "createdAt": "2020-07-02T17:35:50Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/location/shared/location.service.spec.ts", "diffHunk": "@@ -118,4 +150,121 @@ describe('LocationService', () => {\n       },\n     );\n   }));\n+\n+  it('add location should return an error when the server returns a 400 ', fakeAsync(() => {\n+    const entityServicespy = jasmine.createSpyObj<EntityService<Location>>(\n+      'EntityService',\n+      ['post'],\n+    );\n+    locationService = new LocationService(entityServicespy);\n+    const errorResponses: ApiResponse = {\n+      error: {\n+        userMessage: 'customId already exists',\n+        type: 'error',\n+        detailMessage: 'customId already exists',\n+      },\n+    };\n+\n+    entityServicespy.post.and.returnValue(throwError(errorResponses));\n+    tick(40);\n+    locationService.addLocation(expectedNewPostData).subscribe(\n+      () => fail('expected an error'),\n+      (error: ApiResponse) => {\n+        expect(error.error.userMessage).toBe('customId already exists');\n+      },\n+    );\n+  }));\n+  it('add location should return an error when mandatory field customId is empty/null ', fakeAsync(() => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4MzE2Mg==", "bodyText": "Removed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r450383162", "createdAt": "2020-07-06T17:46:25Z", "author": {"login": "rohithd-btc"}, "path": "UR-web-app/src/app/site-coordinator/location/shared/location.service.spec.ts", "diffHunk": "@@ -118,4 +150,121 @@ describe('LocationService', () => {\n       },\n     );\n   }));\n+\n+  it('add location should return an error when the server returns a 400 ', fakeAsync(() => {\n+    const entityServicespy = jasmine.createSpyObj<EntityService<Location>>(\n+      'EntityService',\n+      ['post'],\n+    );\n+    locationService = new LocationService(entityServicespy);\n+    const errorResponses: ApiResponse = {\n+      error: {\n+        userMessage: 'customId already exists',\n+        type: 'error',\n+        detailMessage: 'customId already exists',\n+      },\n+    };\n+\n+    entityServicespy.post.and.returnValue(throwError(errorResponses));\n+    tick(40);\n+    locationService.addLocation(expectedNewPostData).subscribe(\n+      () => fail('expected an error'),\n+      (error: ApiResponse) => {\n+        expect(error.error.userMessage).toBe('customId already exists');\n+      },\n+    );\n+  }));\n+  it('add location should return an error when mandatory field customId is empty/null ', fakeAsync(() => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE3MTc0OA=="}, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTY2MDc4OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/location/shared/location.service.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNzozNTo1N1rOGsXRYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNzo0NjozMFrOGthNYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE3MTgxMQ==", "bodyText": "Same here, remove.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r449171811", "createdAt": "2020-07-02T17:35:57Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/location/shared/location.service.spec.ts", "diffHunk": "@@ -118,4 +150,121 @@ describe('LocationService', () => {\n       },\n     );\n   }));\n+\n+  it('add location should return an error when the server returns a 400 ', fakeAsync(() => {\n+    const entityServicespy = jasmine.createSpyObj<EntityService<Location>>(\n+      'EntityService',\n+      ['post'],\n+    );\n+    locationService = new LocationService(entityServicespy);\n+    const errorResponses: ApiResponse = {\n+      error: {\n+        userMessage: 'customId already exists',\n+        type: 'error',\n+        detailMessage: 'customId already exists',\n+      },\n+    };\n+\n+    entityServicespy.post.and.returnValue(throwError(errorResponses));\n+    tick(40);\n+    locationService.addLocation(expectedNewPostData).subscribe(\n+      () => fail('expected an error'),\n+      (error: ApiResponse) => {\n+        expect(error.error.userMessage).toBe('customId already exists');\n+      },\n+    );\n+  }));\n+  it('add location should return an error when mandatory field customId is empty/null ', fakeAsync(() => {\n+    const entityServicespy = jasmine.createSpyObj<EntityService<Location>>(\n+      'EntityService',\n+      ['post'],\n+    );\n+    const expectedMissingPostData = {\n+      id: 0,\n+      status: '0',\n+      customId: '',\n+      name: 'Location Name',\n+      description: 'location Decription',\n+      studiesCount: 0,\n+    };\n+    locationService = new LocationService(entityServicespy);\n+    const errorResponses: ApiResponse = {\n+      error: {\n+        userMessage: 'Missing required argument',\n+        type: 'error',\n+        detailMessage: 'Missing required argument',\n+      },\n+    };\n+\n+    entityServicespy.post.and.returnValue(throwError(errorResponses));\n+    tick(40);\n+    locationService.addLocation(expectedMissingPostData).subscribe(\n+      () => fail('expected an error'),\n+      (error: ApiResponse) => {\n+        expect(error.error.userMessage).toBe('Missing required argument');\n+      },\n+    );\n+  }));\n+  it('add location should return an error when mandatory name field is empty/null ', fakeAsync(() => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4MzIwMQ==", "bodyText": "Removed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r450383201", "createdAt": "2020-07-06T17:46:30Z", "author": {"login": "rohithd-btc"}, "path": "UR-web-app/src/app/site-coordinator/location/shared/location.service.spec.ts", "diffHunk": "@@ -118,4 +150,121 @@ describe('LocationService', () => {\n       },\n     );\n   }));\n+\n+  it('add location should return an error when the server returns a 400 ', fakeAsync(() => {\n+    const entityServicespy = jasmine.createSpyObj<EntityService<Location>>(\n+      'EntityService',\n+      ['post'],\n+    );\n+    locationService = new LocationService(entityServicespy);\n+    const errorResponses: ApiResponse = {\n+      error: {\n+        userMessage: 'customId already exists',\n+        type: 'error',\n+        detailMessage: 'customId already exists',\n+      },\n+    };\n+\n+    entityServicespy.post.and.returnValue(throwError(errorResponses));\n+    tick(40);\n+    locationService.addLocation(expectedNewPostData).subscribe(\n+      () => fail('expected an error'),\n+      (error: ApiResponse) => {\n+        expect(error.error.userMessage).toBe('customId already exists');\n+      },\n+    );\n+  }));\n+  it('add location should return an error when mandatory field customId is empty/null ', fakeAsync(() => {\n+    const entityServicespy = jasmine.createSpyObj<EntityService<Location>>(\n+      'EntityService',\n+      ['post'],\n+    );\n+    const expectedMissingPostData = {\n+      id: 0,\n+      status: '0',\n+      customId: '',\n+      name: 'Location Name',\n+      description: 'location Decription',\n+      studiesCount: 0,\n+    };\n+    locationService = new LocationService(entityServicespy);\n+    const errorResponses: ApiResponse = {\n+      error: {\n+        userMessage: 'Missing required argument',\n+        type: 'error',\n+        detailMessage: 'Missing required argument',\n+      },\n+    };\n+\n+    entityServicespy.post.and.returnValue(throwError(errorResponses));\n+    tick(40);\n+    locationService.addLocation(expectedMissingPostData).subscribe(\n+      () => fail('expected an error'),\n+      (error: ApiResponse) => {\n+        expect(error.error.userMessage).toBe('Missing required argument');\n+      },\n+    );\n+  }));\n+  it('add location should return an error when mandatory name field is empty/null ', fakeAsync(() => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE3MTgxMQ=="}, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTY2MTI2OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/location/shared/location.service.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNzozNjowNFrOGsXRpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNzo0NjozNVrOGthNjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE3MTg3OA==", "bodyText": "Same here", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r449171878", "createdAt": "2020-07-02T17:36:04Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/location/shared/location.service.spec.ts", "diffHunk": "@@ -118,4 +150,121 @@ describe('LocationService', () => {\n       },\n     );\n   }));\n+\n+  it('add location should return an error when the server returns a 400 ', fakeAsync(() => {\n+    const entityServicespy = jasmine.createSpyObj<EntityService<Location>>(\n+      'EntityService',\n+      ['post'],\n+    );\n+    locationService = new LocationService(entityServicespy);\n+    const errorResponses: ApiResponse = {\n+      error: {\n+        userMessage: 'customId already exists',\n+        type: 'error',\n+        detailMessage: 'customId already exists',\n+      },\n+    };\n+\n+    entityServicespy.post.and.returnValue(throwError(errorResponses));\n+    tick(40);\n+    locationService.addLocation(expectedNewPostData).subscribe(\n+      () => fail('expected an error'),\n+      (error: ApiResponse) => {\n+        expect(error.error.userMessage).toBe('customId already exists');\n+      },\n+    );\n+  }));\n+  it('add location should return an error when mandatory field customId is empty/null ', fakeAsync(() => {\n+    const entityServicespy = jasmine.createSpyObj<EntityService<Location>>(\n+      'EntityService',\n+      ['post'],\n+    );\n+    const expectedMissingPostData = {\n+      id: 0,\n+      status: '0',\n+      customId: '',\n+      name: 'Location Name',\n+      description: 'location Decription',\n+      studiesCount: 0,\n+    };\n+    locationService = new LocationService(entityServicespy);\n+    const errorResponses: ApiResponse = {\n+      error: {\n+        userMessage: 'Missing required argument',\n+        type: 'error',\n+        detailMessage: 'Missing required argument',\n+      },\n+    };\n+\n+    entityServicespy.post.and.returnValue(throwError(errorResponses));\n+    tick(40);\n+    locationService.addLocation(expectedMissingPostData).subscribe(\n+      () => fail('expected an error'),\n+      (error: ApiResponse) => {\n+        expect(error.error.userMessage).toBe('Missing required argument');\n+      },\n+    );\n+  }));\n+  it('add location should return an error when mandatory name field is empty/null ', fakeAsync(() => {\n+    const entityServicespy = jasmine.createSpyObj<EntityService<Location>>(\n+      'EntityService',\n+      ['post'],\n+    );\n+    const expectedMissingPostData = {\n+      id: 0,\n+      status: '0',\n+      customId: 'customID',\n+      name: '',\n+      description: 'location Decription',\n+      studiesCount: 0,\n+    };\n+    locationService = new LocationService(entityServicespy);\n+    const errorResponses: ApiResponse = {\n+      error: {\n+        userMessage: 'Missing required argument',\n+        type: 'error',\n+        detailMessage: 'Missing required argument',\n+      },\n+    };\n+\n+    entityServicespy.post.and.returnValue(throwError(errorResponses));\n+    tick(40);\n+    locationService.addLocation(expectedMissingPostData).subscribe(\n+      () => fail('expected an error'),\n+      (error: ApiResponse) => {\n+        expect(error.error.userMessage).toBe('Missing required argument');\n+      },\n+    );\n+  }));\n+  it('add location should return an error when mandatory description field is empty/null ', fakeAsync(() => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4MzI0Ng==", "bodyText": "Removed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r450383246", "createdAt": "2020-07-06T17:46:35Z", "author": {"login": "rohithd-btc"}, "path": "UR-web-app/src/app/site-coordinator/location/shared/location.service.spec.ts", "diffHunk": "@@ -118,4 +150,121 @@ describe('LocationService', () => {\n       },\n     );\n   }));\n+\n+  it('add location should return an error when the server returns a 400 ', fakeAsync(() => {\n+    const entityServicespy = jasmine.createSpyObj<EntityService<Location>>(\n+      'EntityService',\n+      ['post'],\n+    );\n+    locationService = new LocationService(entityServicespy);\n+    const errorResponses: ApiResponse = {\n+      error: {\n+        userMessage: 'customId already exists',\n+        type: 'error',\n+        detailMessage: 'customId already exists',\n+      },\n+    };\n+\n+    entityServicespy.post.and.returnValue(throwError(errorResponses));\n+    tick(40);\n+    locationService.addLocation(expectedNewPostData).subscribe(\n+      () => fail('expected an error'),\n+      (error: ApiResponse) => {\n+        expect(error.error.userMessage).toBe('customId already exists');\n+      },\n+    );\n+  }));\n+  it('add location should return an error when mandatory field customId is empty/null ', fakeAsync(() => {\n+    const entityServicespy = jasmine.createSpyObj<EntityService<Location>>(\n+      'EntityService',\n+      ['post'],\n+    );\n+    const expectedMissingPostData = {\n+      id: 0,\n+      status: '0',\n+      customId: '',\n+      name: 'Location Name',\n+      description: 'location Decription',\n+      studiesCount: 0,\n+    };\n+    locationService = new LocationService(entityServicespy);\n+    const errorResponses: ApiResponse = {\n+      error: {\n+        userMessage: 'Missing required argument',\n+        type: 'error',\n+        detailMessage: 'Missing required argument',\n+      },\n+    };\n+\n+    entityServicespy.post.and.returnValue(throwError(errorResponses));\n+    tick(40);\n+    locationService.addLocation(expectedMissingPostData).subscribe(\n+      () => fail('expected an error'),\n+      (error: ApiResponse) => {\n+        expect(error.error.userMessage).toBe('Missing required argument');\n+      },\n+    );\n+  }));\n+  it('add location should return an error when mandatory name field is empty/null ', fakeAsync(() => {\n+    const entityServicespy = jasmine.createSpyObj<EntityService<Location>>(\n+      'EntityService',\n+      ['post'],\n+    );\n+    const expectedMissingPostData = {\n+      id: 0,\n+      status: '0',\n+      customId: 'customID',\n+      name: '',\n+      description: 'location Decription',\n+      studiesCount: 0,\n+    };\n+    locationService = new LocationService(entityServicespy);\n+    const errorResponses: ApiResponse = {\n+      error: {\n+        userMessage: 'Missing required argument',\n+        type: 'error',\n+        detailMessage: 'Missing required argument',\n+      },\n+    };\n+\n+    entityServicespy.post.and.returnValue(throwError(errorResponses));\n+    tick(40);\n+    locationService.addLocation(expectedMissingPostData).subscribe(\n+      () => fail('expected an error'),\n+      (error: ApiResponse) => {\n+        expect(error.error.userMessage).toBe('Missing required argument');\n+      },\n+    );\n+  }));\n+  it('add location should return an error when mandatory description field is empty/null ', fakeAsync(() => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE3MTg3OA=="}, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTY2NDU2OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/location/shared/location.service.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNzozNzoxMVrOGsXTtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzoyNDoyNVrOGuIb_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE3MjQwNw==", "bodyText": "Use more meaningful variable names, like expectedLocation.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r449172407", "createdAt": "2020-07-02T17:37:11Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/location/shared/location.service.spec.ts", "diffHunk": "@@ -29,9 +27,20 @@ describe('LocationService', () => {\n       description: 'location-descp-updated',\n       status: '0',\n       studiesCount: 0,\n-      studies: [],\n     },\n   ];\n+  const expectedNewPostData = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAyNTkxOQ==", "bodyText": "updated", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r451025919", "createdAt": "2020-07-07T17:24:25Z", "author": {"login": "rohithd-btc"}, "path": "UR-web-app/src/app/site-coordinator/location/shared/location.service.spec.ts", "diffHunk": "@@ -29,9 +27,20 @@ describe('LocationService', () => {\n       description: 'location-descp-updated',\n       status: '0',\n       studiesCount: 0,\n-      studies: [],\n     },\n   ];\n+  const expectedNewPostData = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE3MjQwNw=="}, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTY2NTkzOnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/location/shared/location.model.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNzozNzo0MFrOGsXUng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNzozMDozOVrOGtguDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE3MjYzOA==", "bodyText": "If you are converting this to a class you have to call new Location in LocationService like I told you", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r449172638", "createdAt": "2020-07-02T17:37:40Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/location/shared/location.model.ts", "diffHunk": "@@ -1,13 +1,13 @@\n-export interface Location {\n-  id: number;\n+export class Location {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM3NTE4MQ==", "bodyText": "Updated in the latest commit ,please check", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r450375181", "createdAt": "2020-07-06T17:30:39Z", "author": {"login": "firdosebtc1"}, "path": "UR-web-app/src/app/site-coordinator/location/shared/location.model.ts", "diffHunk": "@@ -1,13 +1,13 @@\n-export interface Location {\n-  id: number;\n+export class Location {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE3MjYzOA=="}, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTcxMzUyOnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNzo1MjoyN1rOGsXx2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzozMDozNlrOGuIqaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4MDEyMA==", "bodyText": "I don't really like template-driven forms because you end up with hacks like this. But that's just my opinion. If you want to use template driven forms though you should be making your assertions against the DOM. So instead of checking if it's valid check if the error message that you want is displayed.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r449180120", "createdAt": "2020-07-02T17:52:27Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "diffHunk": "@@ -1,24 +1,149 @@\n-import {async, ComponentFixture, TestBed} from '@angular/core/testing';\n-\n+import {\n+  async,\n+  ComponentFixture,\n+  TestBed,\n+  fakeAsync,\n+  tick,\n+} from '@angular/core/testing';\n+import {DebugElement} from '@angular/core';\n import {AddLocationComponent} from './add-location.component';\n+import {LocationService} from '../shared/location.service';\n+import {ToastrModule} from 'ngx-toastr';\n+import {BsModalService, ModalModule} from 'ngx-bootstrap/modal';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {LocationModule} from '../location.module';\n+import {FormsModule, ReactiveFormsModule, NgForm} from '@angular/forms';\n+import {EntityService} from 'src/app/service/entity.service';\n+import {HttpClientModule} from '@angular/common/http';\n+import {By} from '@angular/platform-browser';\n \n describe('AddLocationComponent', () => {\n   let component: AddLocationComponent;\n   let fixture: ComponentFixture<AddLocationComponent>;\n+  let form: DebugElement;\n+  let submitLocation: DebugElement;\n+  let locationCustomIde1: DebugElement;\n+  let locationNamee1: DebugElement;\n+  let locationDescriptione1: DebugElement;\n \n-  beforeEach(async(async () => {\n-    await TestBed.configureTestingModule({\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n       declarations: [AddLocationComponent],\n-    }).compileComponents();\n+      imports: [\n+        ModalModule.forRoot(),\n+        RouterTestingModule,\n+        LocationModule,\n+        HttpClientModule,\n+        FormsModule,\n+        ReactiveFormsModule,\n+        ToastrModule.forRoot({\n+          positionClass: 'toast-top-center',\n+          preventDuplicates: true,\n+          enableHtml: true,\n+        }),\n+      ],\n+      providers: [NgForm, EntityService, LocationService, BsModalService],\n+    });\n   }));\n \n-  beforeEach(() => {\n+  beforeEach(async(() => {\n     fixture = TestBed.createComponent(AddLocationComponent);\n     component = fixture.componentInstance;\n+    form = fixture.debugElement.query(By.css('form'));\n+    submitLocation = fixture.debugElement.query(\n+      By.css('button[type=\"submit\"]'),\n+    );\n+    locationCustomIde1 = fixture.debugElement.query(\n+      By.css('input[id=locationCustomId]'),\n+    );\n+    locationNamee1 = fixture.debugElement.query(\n+      By.css('input[id=locationName]'),\n+    );\n+    locationDescriptione1 = fixture.debugElement.query(\n+      By.css('input[id=locationDescription]'),\n+    );\n+\n     fixture.detectChanges();\n-  });\n+  }));\n \n   it('should create', () => {\n     expect(component).toBeTruthy();\n   });\n+  it('should not create a template-driven form when ngNoForm is used', () => {\n+    fixture.detectChanges();\n+    expect(fixture.debugElement.children[0].providerTokens.length).toEqual(0);\n+  });\n+  it('Locations value to input properties on form load', () => {\n+    const submitButton = submitLocation.nativeElement as HTMLInputElement;\n+    component.enabled = false;\n+    fixture.detectChanges();\n+    expect(submitButton.disabled).toBeTruthy();\n+  });\n+  it('should add novalidate by default to form element', fakeAsync(() => {\n+    fixture.detectChanges();\n+    tick();\n+    const formTest = form.nativeElement as HTMLFormElement;\n+    expect(formTest.getAttribute('novalidate')).toEqual('');\n+  }));\n+\n+  it('should set status classes with ngModelGroup and ngForm', fakeAsync(() => {\n+    fixture.detectChanges();\n+\n+    const input = fixture.debugElement.query(By.css('input'));\n+    const inputFormElement = input.nativeElement as HTMLElement;\n+\n+    void fixture.whenStable().then(() => {\n+      fixture.detectChanges();\n+\n+      expect(inputFormElement.classList.length).toEqual(4);\n+      expect(inputFormElement.classList.value).toEqual(\n+        'form-control ng-untouched ng-pristine ng-invalid',\n+      );\n+\n+      dispatchEvent(new Event('input'));\n+      tick();\n+      fixture.detectChanges();\n+    });\n+  }));\n+\n+  it('Entering value in input controls and emit output events', fakeAsync(() => {\n+    fixture.componentInstance.location.customId = 'customid3';\n+    fixture.componentInstance.location.name = 'Location Name';\n+    fixture.componentInstance.location.description =\n+      'This is location Description';\n+    void fixture.whenStable().then(() => {\n+      const submitButton = submitLocation.nativeElement as HTMLInputElement;\n+      const customIdInput = locationCustomIde1.nativeElement as HTMLInputElement;\n+      const nameInput = locationNamee1.nativeElement as HTMLInputElement;\n+      const descriptionInput = locationDescriptione1.nativeElement as HTMLInputElement;\n+      customIdInput.value = 'customid3';\n+      nameInput.value = 'Location Name';\n+      descriptionInput.value = 'This is location Description';\n+      dispatchEvent(new Event('input'));\n+      fixture.detectChanges();\n+      tick();\n+      submitButton.click();\n+      fixture.detectChanges();\n+      expect(component.location.customId).toEqual('customid3');\n+      expect(component.location.name).toEqual('Location Name');\n+      expect(component.location.description).toEqual(\n+        'This is location Description',\n+      );\n+    });\n+  }));\n+\n+  it('should reset the form submit state when reset button is clicked', fakeAsync(() => {\n+    const forms = fixture.debugElement.children[0].injector.get(NgForm);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAyOTYwOQ==", "bodyText": "This test case has been removed as we are directly navigating to location list page on click of cancel button", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r451029609", "createdAt": "2020-07-07T17:30:36Z", "author": {"login": "firdosebtc1"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "diffHunk": "@@ -1,24 +1,149 @@\n-import {async, ComponentFixture, TestBed} from '@angular/core/testing';\n-\n+import {\n+  async,\n+  ComponentFixture,\n+  TestBed,\n+  fakeAsync,\n+  tick,\n+} from '@angular/core/testing';\n+import {DebugElement} from '@angular/core';\n import {AddLocationComponent} from './add-location.component';\n+import {LocationService} from '../shared/location.service';\n+import {ToastrModule} from 'ngx-toastr';\n+import {BsModalService, ModalModule} from 'ngx-bootstrap/modal';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {LocationModule} from '../location.module';\n+import {FormsModule, ReactiveFormsModule, NgForm} from '@angular/forms';\n+import {EntityService} from 'src/app/service/entity.service';\n+import {HttpClientModule} from '@angular/common/http';\n+import {By} from '@angular/platform-browser';\n \n describe('AddLocationComponent', () => {\n   let component: AddLocationComponent;\n   let fixture: ComponentFixture<AddLocationComponent>;\n+  let form: DebugElement;\n+  let submitLocation: DebugElement;\n+  let locationCustomIde1: DebugElement;\n+  let locationNamee1: DebugElement;\n+  let locationDescriptione1: DebugElement;\n \n-  beforeEach(async(async () => {\n-    await TestBed.configureTestingModule({\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n       declarations: [AddLocationComponent],\n-    }).compileComponents();\n+      imports: [\n+        ModalModule.forRoot(),\n+        RouterTestingModule,\n+        LocationModule,\n+        HttpClientModule,\n+        FormsModule,\n+        ReactiveFormsModule,\n+        ToastrModule.forRoot({\n+          positionClass: 'toast-top-center',\n+          preventDuplicates: true,\n+          enableHtml: true,\n+        }),\n+      ],\n+      providers: [NgForm, EntityService, LocationService, BsModalService],\n+    });\n   }));\n \n-  beforeEach(() => {\n+  beforeEach(async(() => {\n     fixture = TestBed.createComponent(AddLocationComponent);\n     component = fixture.componentInstance;\n+    form = fixture.debugElement.query(By.css('form'));\n+    submitLocation = fixture.debugElement.query(\n+      By.css('button[type=\"submit\"]'),\n+    );\n+    locationCustomIde1 = fixture.debugElement.query(\n+      By.css('input[id=locationCustomId]'),\n+    );\n+    locationNamee1 = fixture.debugElement.query(\n+      By.css('input[id=locationName]'),\n+    );\n+    locationDescriptione1 = fixture.debugElement.query(\n+      By.css('input[id=locationDescription]'),\n+    );\n+\n     fixture.detectChanges();\n-  });\n+  }));\n \n   it('should create', () => {\n     expect(component).toBeTruthy();\n   });\n+  it('should not create a template-driven form when ngNoForm is used', () => {\n+    fixture.detectChanges();\n+    expect(fixture.debugElement.children[0].providerTokens.length).toEqual(0);\n+  });\n+  it('Locations value to input properties on form load', () => {\n+    const submitButton = submitLocation.nativeElement as HTMLInputElement;\n+    component.enabled = false;\n+    fixture.detectChanges();\n+    expect(submitButton.disabled).toBeTruthy();\n+  });\n+  it('should add novalidate by default to form element', fakeAsync(() => {\n+    fixture.detectChanges();\n+    tick();\n+    const formTest = form.nativeElement as HTMLFormElement;\n+    expect(formTest.getAttribute('novalidate')).toEqual('');\n+  }));\n+\n+  it('should set status classes with ngModelGroup and ngForm', fakeAsync(() => {\n+    fixture.detectChanges();\n+\n+    const input = fixture.debugElement.query(By.css('input'));\n+    const inputFormElement = input.nativeElement as HTMLElement;\n+\n+    void fixture.whenStable().then(() => {\n+      fixture.detectChanges();\n+\n+      expect(inputFormElement.classList.length).toEqual(4);\n+      expect(inputFormElement.classList.value).toEqual(\n+        'form-control ng-untouched ng-pristine ng-invalid',\n+      );\n+\n+      dispatchEvent(new Event('input'));\n+      tick();\n+      fixture.detectChanges();\n+    });\n+  }));\n+\n+  it('Entering value in input controls and emit output events', fakeAsync(() => {\n+    fixture.componentInstance.location.customId = 'customid3';\n+    fixture.componentInstance.location.name = 'Location Name';\n+    fixture.componentInstance.location.description =\n+      'This is location Description';\n+    void fixture.whenStable().then(() => {\n+      const submitButton = submitLocation.nativeElement as HTMLInputElement;\n+      const customIdInput = locationCustomIde1.nativeElement as HTMLInputElement;\n+      const nameInput = locationNamee1.nativeElement as HTMLInputElement;\n+      const descriptionInput = locationDescriptione1.nativeElement as HTMLInputElement;\n+      customIdInput.value = 'customid3';\n+      nameInput.value = 'Location Name';\n+      descriptionInput.value = 'This is location Description';\n+      dispatchEvent(new Event('input'));\n+      fixture.detectChanges();\n+      tick();\n+      submitButton.click();\n+      fixture.detectChanges();\n+      expect(component.location.customId).toEqual('customid3');\n+      expect(component.location.name).toEqual('Location Name');\n+      expect(component.location.description).toEqual(\n+        'This is location Description',\n+      );\n+    });\n+  }));\n+\n+  it('should reset the form submit state when reset button is clicked', fakeAsync(() => {\n+    const forms = fixture.debugElement.children[0].injector.get(NgForm);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4MDEyMA=="}, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTcxNDY0OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNzo1Mjo0N1rOGsXyhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzozNToxNFrOGuI0OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4MDI5NA==", "bodyText": "This isn't what this test is doing, the state doesn't change.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r449180294", "createdAt": "2020-07-02T17:52:47Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "diffHunk": "@@ -1,24 +1,149 @@\n-import {async, ComponentFixture, TestBed} from '@angular/core/testing';\n-\n+import {\n+  async,\n+  ComponentFixture,\n+  TestBed,\n+  fakeAsync,\n+  tick,\n+} from '@angular/core/testing';\n+import {DebugElement} from '@angular/core';\n import {AddLocationComponent} from './add-location.component';\n+import {LocationService} from '../shared/location.service';\n+import {ToastrModule} from 'ngx-toastr';\n+import {BsModalService, ModalModule} from 'ngx-bootstrap/modal';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {LocationModule} from '../location.module';\n+import {FormsModule, ReactiveFormsModule, NgForm} from '@angular/forms';\n+import {EntityService} from 'src/app/service/entity.service';\n+import {HttpClientModule} from '@angular/common/http';\n+import {By} from '@angular/platform-browser';\n \n describe('AddLocationComponent', () => {\n   let component: AddLocationComponent;\n   let fixture: ComponentFixture<AddLocationComponent>;\n+  let form: DebugElement;\n+  let submitLocation: DebugElement;\n+  let locationCustomIde1: DebugElement;\n+  let locationNamee1: DebugElement;\n+  let locationDescriptione1: DebugElement;\n \n-  beforeEach(async(async () => {\n-    await TestBed.configureTestingModule({\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n       declarations: [AddLocationComponent],\n-    }).compileComponents();\n+      imports: [\n+        ModalModule.forRoot(),\n+        RouterTestingModule,\n+        LocationModule,\n+        HttpClientModule,\n+        FormsModule,\n+        ReactiveFormsModule,\n+        ToastrModule.forRoot({\n+          positionClass: 'toast-top-center',\n+          preventDuplicates: true,\n+          enableHtml: true,\n+        }),\n+      ],\n+      providers: [NgForm, EntityService, LocationService, BsModalService],\n+    });\n   }));\n \n-  beforeEach(() => {\n+  beforeEach(async(() => {\n     fixture = TestBed.createComponent(AddLocationComponent);\n     component = fixture.componentInstance;\n+    form = fixture.debugElement.query(By.css('form'));\n+    submitLocation = fixture.debugElement.query(\n+      By.css('button[type=\"submit\"]'),\n+    );\n+    locationCustomIde1 = fixture.debugElement.query(\n+      By.css('input[id=locationCustomId]'),\n+    );\n+    locationNamee1 = fixture.debugElement.query(\n+      By.css('input[id=locationName]'),\n+    );\n+    locationDescriptione1 = fixture.debugElement.query(\n+      By.css('input[id=locationDescription]'),\n+    );\n+\n     fixture.detectChanges();\n-  });\n+  }));\n \n   it('should create', () => {\n     expect(component).toBeTruthy();\n   });\n+  it('should not create a template-driven form when ngNoForm is used', () => {\n+    fixture.detectChanges();\n+    expect(fixture.debugElement.children[0].providerTokens.length).toEqual(0);\n+  });\n+  it('Locations value to input properties on form load', () => {\n+    const submitButton = submitLocation.nativeElement as HTMLInputElement;\n+    component.enabled = false;\n+    fixture.detectChanges();\n+    expect(submitButton.disabled).toBeTruthy();\n+  });\n+  it('should add novalidate by default to form element', fakeAsync(() => {\n+    fixture.detectChanges();\n+    tick();\n+    const formTest = form.nativeElement as HTMLFormElement;\n+    expect(formTest.getAttribute('novalidate')).toEqual('');\n+  }));\n+\n+  it('should set status classes with ngModelGroup and ngForm', fakeAsync(() => {\n+    fixture.detectChanges();\n+\n+    const input = fixture.debugElement.query(By.css('input'));\n+    const inputFormElement = input.nativeElement as HTMLElement;\n+\n+    void fixture.whenStable().then(() => {\n+      fixture.detectChanges();\n+\n+      expect(inputFormElement.classList.length).toEqual(4);\n+      expect(inputFormElement.classList.value).toEqual(\n+        'form-control ng-untouched ng-pristine ng-invalid',\n+      );\n+\n+      dispatchEvent(new Event('input'));\n+      tick();\n+      fixture.detectChanges();\n+    });\n+  }));\n+\n+  it('Entering value in input controls and emit output events', fakeAsync(() => {\n+    fixture.componentInstance.location.customId = 'customid3';\n+    fixture.componentInstance.location.name = 'Location Name';\n+    fixture.componentInstance.location.description =\n+      'This is location Description';\n+    void fixture.whenStable().then(() => {\n+      const submitButton = submitLocation.nativeElement as HTMLInputElement;\n+      const customIdInput = locationCustomIde1.nativeElement as HTMLInputElement;\n+      const nameInput = locationNamee1.nativeElement as HTMLInputElement;\n+      const descriptionInput = locationDescriptione1.nativeElement as HTMLInputElement;\n+      customIdInput.value = 'customid3';\n+      nameInput.value = 'Location Name';\n+      descriptionInput.value = 'This is location Description';\n+      dispatchEvent(new Event('input'));\n+      fixture.detectChanges();\n+      tick();\n+      submitButton.click();\n+      fixture.detectChanges();\n+      expect(component.location.customId).toEqual('customid3');\n+      expect(component.location.name).toEqual('Location Name');\n+      expect(component.location.description).toEqual(\n+        'This is location Description',\n+      );\n+    });\n+  }));\n+\n+  it('should reset the form submit state when reset button is clicked', fakeAsync(() => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAzMjEyMA==", "bodyText": "We have removed the test cases as when the cancel button is clicked the page is redirecting to location list.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r451032120", "createdAt": "2020-07-07T17:35:14Z", "author": {"login": "rohithd-btc"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "diffHunk": "@@ -1,24 +1,149 @@\n-import {async, ComponentFixture, TestBed} from '@angular/core/testing';\n-\n+import {\n+  async,\n+  ComponentFixture,\n+  TestBed,\n+  fakeAsync,\n+  tick,\n+} from '@angular/core/testing';\n+import {DebugElement} from '@angular/core';\n import {AddLocationComponent} from './add-location.component';\n+import {LocationService} from '../shared/location.service';\n+import {ToastrModule} from 'ngx-toastr';\n+import {BsModalService, ModalModule} from 'ngx-bootstrap/modal';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {LocationModule} from '../location.module';\n+import {FormsModule, ReactiveFormsModule, NgForm} from '@angular/forms';\n+import {EntityService} from 'src/app/service/entity.service';\n+import {HttpClientModule} from '@angular/common/http';\n+import {By} from '@angular/platform-browser';\n \n describe('AddLocationComponent', () => {\n   let component: AddLocationComponent;\n   let fixture: ComponentFixture<AddLocationComponent>;\n+  let form: DebugElement;\n+  let submitLocation: DebugElement;\n+  let locationCustomIde1: DebugElement;\n+  let locationNamee1: DebugElement;\n+  let locationDescriptione1: DebugElement;\n \n-  beforeEach(async(async () => {\n-    await TestBed.configureTestingModule({\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n       declarations: [AddLocationComponent],\n-    }).compileComponents();\n+      imports: [\n+        ModalModule.forRoot(),\n+        RouterTestingModule,\n+        LocationModule,\n+        HttpClientModule,\n+        FormsModule,\n+        ReactiveFormsModule,\n+        ToastrModule.forRoot({\n+          positionClass: 'toast-top-center',\n+          preventDuplicates: true,\n+          enableHtml: true,\n+        }),\n+      ],\n+      providers: [NgForm, EntityService, LocationService, BsModalService],\n+    });\n   }));\n \n-  beforeEach(() => {\n+  beforeEach(async(() => {\n     fixture = TestBed.createComponent(AddLocationComponent);\n     component = fixture.componentInstance;\n+    form = fixture.debugElement.query(By.css('form'));\n+    submitLocation = fixture.debugElement.query(\n+      By.css('button[type=\"submit\"]'),\n+    );\n+    locationCustomIde1 = fixture.debugElement.query(\n+      By.css('input[id=locationCustomId]'),\n+    );\n+    locationNamee1 = fixture.debugElement.query(\n+      By.css('input[id=locationName]'),\n+    );\n+    locationDescriptione1 = fixture.debugElement.query(\n+      By.css('input[id=locationDescription]'),\n+    );\n+\n     fixture.detectChanges();\n-  });\n+  }));\n \n   it('should create', () => {\n     expect(component).toBeTruthy();\n   });\n+  it('should not create a template-driven form when ngNoForm is used', () => {\n+    fixture.detectChanges();\n+    expect(fixture.debugElement.children[0].providerTokens.length).toEqual(0);\n+  });\n+  it('Locations value to input properties on form load', () => {\n+    const submitButton = submitLocation.nativeElement as HTMLInputElement;\n+    component.enabled = false;\n+    fixture.detectChanges();\n+    expect(submitButton.disabled).toBeTruthy();\n+  });\n+  it('should add novalidate by default to form element', fakeAsync(() => {\n+    fixture.detectChanges();\n+    tick();\n+    const formTest = form.nativeElement as HTMLFormElement;\n+    expect(formTest.getAttribute('novalidate')).toEqual('');\n+  }));\n+\n+  it('should set status classes with ngModelGroup and ngForm', fakeAsync(() => {\n+    fixture.detectChanges();\n+\n+    const input = fixture.debugElement.query(By.css('input'));\n+    const inputFormElement = input.nativeElement as HTMLElement;\n+\n+    void fixture.whenStable().then(() => {\n+      fixture.detectChanges();\n+\n+      expect(inputFormElement.classList.length).toEqual(4);\n+      expect(inputFormElement.classList.value).toEqual(\n+        'form-control ng-untouched ng-pristine ng-invalid',\n+      );\n+\n+      dispatchEvent(new Event('input'));\n+      tick();\n+      fixture.detectChanges();\n+    });\n+  }));\n+\n+  it('Entering value in input controls and emit output events', fakeAsync(() => {\n+    fixture.componentInstance.location.customId = 'customid3';\n+    fixture.componentInstance.location.name = 'Location Name';\n+    fixture.componentInstance.location.description =\n+      'This is location Description';\n+    void fixture.whenStable().then(() => {\n+      const submitButton = submitLocation.nativeElement as HTMLInputElement;\n+      const customIdInput = locationCustomIde1.nativeElement as HTMLInputElement;\n+      const nameInput = locationNamee1.nativeElement as HTMLInputElement;\n+      const descriptionInput = locationDescriptione1.nativeElement as HTMLInputElement;\n+      customIdInput.value = 'customid3';\n+      nameInput.value = 'Location Name';\n+      descriptionInput.value = 'This is location Description';\n+      dispatchEvent(new Event('input'));\n+      fixture.detectChanges();\n+      tick();\n+      submitButton.click();\n+      fixture.detectChanges();\n+      expect(component.location.customId).toEqual('customid3');\n+      expect(component.location.name).toEqual('Location Name');\n+      expect(component.location.description).toEqual(\n+        'This is location Description',\n+      );\n+    });\n+  }));\n+\n+  it('should reset the form submit state when reset button is clicked', fakeAsync(() => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4MDI5NA=="}, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTcxNjg2OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNzo1MzoyOVrOGsXz3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNzoyNDoyNVrOGuyD5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4MDYzNg==", "bodyText": "These tests are easier to read using async/await instead of .then", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r449180636", "createdAt": "2020-07-02T17:53:29Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "diffHunk": "@@ -1,24 +1,149 @@\n-import {async, ComponentFixture, TestBed} from '@angular/core/testing';\n-\n+import {\n+  async,\n+  ComponentFixture,\n+  TestBed,\n+  fakeAsync,\n+  tick,\n+} from '@angular/core/testing';\n+import {DebugElement} from '@angular/core';\n import {AddLocationComponent} from './add-location.component';\n+import {LocationService} from '../shared/location.service';\n+import {ToastrModule} from 'ngx-toastr';\n+import {BsModalService, ModalModule} from 'ngx-bootstrap/modal';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {LocationModule} from '../location.module';\n+import {FormsModule, ReactiveFormsModule, NgForm} from '@angular/forms';\n+import {EntityService} from 'src/app/service/entity.service';\n+import {HttpClientModule} from '@angular/common/http';\n+import {By} from '@angular/platform-browser';\n \n describe('AddLocationComponent', () => {\n   let component: AddLocationComponent;\n   let fixture: ComponentFixture<AddLocationComponent>;\n+  let form: DebugElement;\n+  let submitLocation: DebugElement;\n+  let locationCustomIde1: DebugElement;\n+  let locationNamee1: DebugElement;\n+  let locationDescriptione1: DebugElement;\n \n-  beforeEach(async(async () => {\n-    await TestBed.configureTestingModule({\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n       declarations: [AddLocationComponent],\n-    }).compileComponents();\n+      imports: [\n+        ModalModule.forRoot(),\n+        RouterTestingModule,\n+        LocationModule,\n+        HttpClientModule,\n+        FormsModule,\n+        ReactiveFormsModule,\n+        ToastrModule.forRoot({\n+          positionClass: 'toast-top-center',\n+          preventDuplicates: true,\n+          enableHtml: true,\n+        }),\n+      ],\n+      providers: [NgForm, EntityService, LocationService, BsModalService],\n+    });\n   }));\n \n-  beforeEach(() => {\n+  beforeEach(async(() => {\n     fixture = TestBed.createComponent(AddLocationComponent);\n     component = fixture.componentInstance;\n+    form = fixture.debugElement.query(By.css('form'));\n+    submitLocation = fixture.debugElement.query(\n+      By.css('button[type=\"submit\"]'),\n+    );\n+    locationCustomIde1 = fixture.debugElement.query(\n+      By.css('input[id=locationCustomId]'),\n+    );\n+    locationNamee1 = fixture.debugElement.query(\n+      By.css('input[id=locationName]'),\n+    );\n+    locationDescriptione1 = fixture.debugElement.query(\n+      By.css('input[id=locationDescription]'),\n+    );\n+\n     fixture.detectChanges();\n-  });\n+  }));\n \n   it('should create', () => {\n     expect(component).toBeTruthy();\n   });\n+  it('should not create a template-driven form when ngNoForm is used', () => {\n+    fixture.detectChanges();\n+    expect(fixture.debugElement.children[0].providerTokens.length).toEqual(0);\n+  });\n+  it('Locations value to input properties on form load', () => {\n+    const submitButton = submitLocation.nativeElement as HTMLInputElement;\n+    component.enabled = false;\n+    fixture.detectChanges();\n+    expect(submitButton.disabled).toBeTruthy();\n+  });\n+  it('should add novalidate by default to form element', fakeAsync(() => {\n+    fixture.detectChanges();\n+    tick();\n+    const formTest = form.nativeElement as HTMLFormElement;\n+    expect(formTest.getAttribute('novalidate')).toEqual('');\n+  }));\n+\n+  it('should set status classes with ngModelGroup and ngForm', fakeAsync(() => {\n+    fixture.detectChanges();\n+\n+    const input = fixture.debugElement.query(By.css('input'));\n+    const inputFormElement = input.nativeElement as HTMLElement;\n+\n+    void fixture.whenStable().then(() => {\n+      fixture.detectChanges();\n+\n+      expect(inputFormElement.classList.length).toEqual(4);\n+      expect(inputFormElement.classList.value).toEqual(\n+        'form-control ng-untouched ng-pristine ng-invalid',\n+      );\n+\n+      dispatchEvent(new Event('input'));\n+      tick();\n+      fixture.detectChanges();\n+    });\n+  }));\n+\n+  it('Entering value in input controls and emit output events', fakeAsync(() => {\n+    fixture.componentInstance.location.customId = 'customid3';\n+    fixture.componentInstance.location.name = 'Location Name';\n+    fixture.componentInstance.location.description =\n+      'This is location Description';\n+    void fixture.whenStable().then(() => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcwNzg3OA==", "bodyText": "Updated in the latest commit", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r451707878", "createdAt": "2020-07-08T17:24:25Z", "author": {"login": "rohithd-btc"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "diffHunk": "@@ -1,24 +1,149 @@\n-import {async, ComponentFixture, TestBed} from '@angular/core/testing';\n-\n+import {\n+  async,\n+  ComponentFixture,\n+  TestBed,\n+  fakeAsync,\n+  tick,\n+} from '@angular/core/testing';\n+import {DebugElement} from '@angular/core';\n import {AddLocationComponent} from './add-location.component';\n+import {LocationService} from '../shared/location.service';\n+import {ToastrModule} from 'ngx-toastr';\n+import {BsModalService, ModalModule} from 'ngx-bootstrap/modal';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {LocationModule} from '../location.module';\n+import {FormsModule, ReactiveFormsModule, NgForm} from '@angular/forms';\n+import {EntityService} from 'src/app/service/entity.service';\n+import {HttpClientModule} from '@angular/common/http';\n+import {By} from '@angular/platform-browser';\n \n describe('AddLocationComponent', () => {\n   let component: AddLocationComponent;\n   let fixture: ComponentFixture<AddLocationComponent>;\n+  let form: DebugElement;\n+  let submitLocation: DebugElement;\n+  let locationCustomIde1: DebugElement;\n+  let locationNamee1: DebugElement;\n+  let locationDescriptione1: DebugElement;\n \n-  beforeEach(async(async () => {\n-    await TestBed.configureTestingModule({\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n       declarations: [AddLocationComponent],\n-    }).compileComponents();\n+      imports: [\n+        ModalModule.forRoot(),\n+        RouterTestingModule,\n+        LocationModule,\n+        HttpClientModule,\n+        FormsModule,\n+        ReactiveFormsModule,\n+        ToastrModule.forRoot({\n+          positionClass: 'toast-top-center',\n+          preventDuplicates: true,\n+          enableHtml: true,\n+        }),\n+      ],\n+      providers: [NgForm, EntityService, LocationService, BsModalService],\n+    });\n   }));\n \n-  beforeEach(() => {\n+  beforeEach(async(() => {\n     fixture = TestBed.createComponent(AddLocationComponent);\n     component = fixture.componentInstance;\n+    form = fixture.debugElement.query(By.css('form'));\n+    submitLocation = fixture.debugElement.query(\n+      By.css('button[type=\"submit\"]'),\n+    );\n+    locationCustomIde1 = fixture.debugElement.query(\n+      By.css('input[id=locationCustomId]'),\n+    );\n+    locationNamee1 = fixture.debugElement.query(\n+      By.css('input[id=locationName]'),\n+    );\n+    locationDescriptione1 = fixture.debugElement.query(\n+      By.css('input[id=locationDescription]'),\n+    );\n+\n     fixture.detectChanges();\n-  });\n+  }));\n \n   it('should create', () => {\n     expect(component).toBeTruthy();\n   });\n+  it('should not create a template-driven form when ngNoForm is used', () => {\n+    fixture.detectChanges();\n+    expect(fixture.debugElement.children[0].providerTokens.length).toEqual(0);\n+  });\n+  it('Locations value to input properties on form load', () => {\n+    const submitButton = submitLocation.nativeElement as HTMLInputElement;\n+    component.enabled = false;\n+    fixture.detectChanges();\n+    expect(submitButton.disabled).toBeTruthy();\n+  });\n+  it('should add novalidate by default to form element', fakeAsync(() => {\n+    fixture.detectChanges();\n+    tick();\n+    const formTest = form.nativeElement as HTMLFormElement;\n+    expect(formTest.getAttribute('novalidate')).toEqual('');\n+  }));\n+\n+  it('should set status classes with ngModelGroup and ngForm', fakeAsync(() => {\n+    fixture.detectChanges();\n+\n+    const input = fixture.debugElement.query(By.css('input'));\n+    const inputFormElement = input.nativeElement as HTMLElement;\n+\n+    void fixture.whenStable().then(() => {\n+      fixture.detectChanges();\n+\n+      expect(inputFormElement.classList.length).toEqual(4);\n+      expect(inputFormElement.classList.value).toEqual(\n+        'form-control ng-untouched ng-pristine ng-invalid',\n+      );\n+\n+      dispatchEvent(new Event('input'));\n+      tick();\n+      fixture.detectChanges();\n+    });\n+  }));\n+\n+  it('Entering value in input controls and emit output events', fakeAsync(() => {\n+    fixture.componentInstance.location.customId = 'customid3';\n+    fixture.componentInstance.location.name = 'Location Name';\n+    fixture.componentInstance.location.description =\n+      'This is location Description';\n+    void fixture.whenStable().then(() => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4MDYzNg=="}, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTcyMTQ3OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNzo1NDo1OFrOGsX20w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNzo0Njo1OFrOGthOZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4MTM5NQ==", "bodyText": "Don't test the Angular framework. Please remove this test.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r449181395", "createdAt": "2020-07-02T17:54:58Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "diffHunk": "@@ -1,24 +1,149 @@\n-import {async, ComponentFixture, TestBed} from '@angular/core/testing';\n-\n+import {\n+  async,\n+  ComponentFixture,\n+  TestBed,\n+  fakeAsync,\n+  tick,\n+} from '@angular/core/testing';\n+import {DebugElement} from '@angular/core';\n import {AddLocationComponent} from './add-location.component';\n+import {LocationService} from '../shared/location.service';\n+import {ToastrModule} from 'ngx-toastr';\n+import {BsModalService, ModalModule} from 'ngx-bootstrap/modal';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {LocationModule} from '../location.module';\n+import {FormsModule, ReactiveFormsModule, NgForm} from '@angular/forms';\n+import {EntityService} from 'src/app/service/entity.service';\n+import {HttpClientModule} from '@angular/common/http';\n+import {By} from '@angular/platform-browser';\n \n describe('AddLocationComponent', () => {\n   let component: AddLocationComponent;\n   let fixture: ComponentFixture<AddLocationComponent>;\n+  let form: DebugElement;\n+  let submitLocation: DebugElement;\n+  let locationCustomIde1: DebugElement;\n+  let locationNamee1: DebugElement;\n+  let locationDescriptione1: DebugElement;\n \n-  beforeEach(async(async () => {\n-    await TestBed.configureTestingModule({\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n       declarations: [AddLocationComponent],\n-    }).compileComponents();\n+      imports: [\n+        ModalModule.forRoot(),\n+        RouterTestingModule,\n+        LocationModule,\n+        HttpClientModule,\n+        FormsModule,\n+        ReactiveFormsModule,\n+        ToastrModule.forRoot({\n+          positionClass: 'toast-top-center',\n+          preventDuplicates: true,\n+          enableHtml: true,\n+        }),\n+      ],\n+      providers: [NgForm, EntityService, LocationService, BsModalService],\n+    });\n   }));\n \n-  beforeEach(() => {\n+  beforeEach(async(() => {\n     fixture = TestBed.createComponent(AddLocationComponent);\n     component = fixture.componentInstance;\n+    form = fixture.debugElement.query(By.css('form'));\n+    submitLocation = fixture.debugElement.query(\n+      By.css('button[type=\"submit\"]'),\n+    );\n+    locationCustomIde1 = fixture.debugElement.query(\n+      By.css('input[id=locationCustomId]'),\n+    );\n+    locationNamee1 = fixture.debugElement.query(\n+      By.css('input[id=locationName]'),\n+    );\n+    locationDescriptione1 = fixture.debugElement.query(\n+      By.css('input[id=locationDescription]'),\n+    );\n+\n     fixture.detectChanges();\n-  });\n+  }));\n \n   it('should create', () => {\n     expect(component).toBeTruthy();\n   });\n+  it('should not create a template-driven form when ngNoForm is used', () => {\n+    fixture.detectChanges();\n+    expect(fixture.debugElement.children[0].providerTokens.length).toEqual(0);\n+  });\n+  it('Locations value to input properties on form load', () => {\n+    const submitButton = submitLocation.nativeElement as HTMLInputElement;\n+    component.enabled = false;\n+    fixture.detectChanges();\n+    expect(submitButton.disabled).toBeTruthy();\n+  });\n+  it('should add novalidate by default to form element', fakeAsync(() => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4MzQ2Mg==", "bodyText": "Removed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r450383462", "createdAt": "2020-07-06T17:46:58Z", "author": {"login": "rohithd-btc"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "diffHunk": "@@ -1,24 +1,149 @@\n-import {async, ComponentFixture, TestBed} from '@angular/core/testing';\n-\n+import {\n+  async,\n+  ComponentFixture,\n+  TestBed,\n+  fakeAsync,\n+  tick,\n+} from '@angular/core/testing';\n+import {DebugElement} from '@angular/core';\n import {AddLocationComponent} from './add-location.component';\n+import {LocationService} from '../shared/location.service';\n+import {ToastrModule} from 'ngx-toastr';\n+import {BsModalService, ModalModule} from 'ngx-bootstrap/modal';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {LocationModule} from '../location.module';\n+import {FormsModule, ReactiveFormsModule, NgForm} from '@angular/forms';\n+import {EntityService} from 'src/app/service/entity.service';\n+import {HttpClientModule} from '@angular/common/http';\n+import {By} from '@angular/platform-browser';\n \n describe('AddLocationComponent', () => {\n   let component: AddLocationComponent;\n   let fixture: ComponentFixture<AddLocationComponent>;\n+  let form: DebugElement;\n+  let submitLocation: DebugElement;\n+  let locationCustomIde1: DebugElement;\n+  let locationNamee1: DebugElement;\n+  let locationDescriptione1: DebugElement;\n \n-  beforeEach(async(async () => {\n-    await TestBed.configureTestingModule({\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n       declarations: [AddLocationComponent],\n-    }).compileComponents();\n+      imports: [\n+        ModalModule.forRoot(),\n+        RouterTestingModule,\n+        LocationModule,\n+        HttpClientModule,\n+        FormsModule,\n+        ReactiveFormsModule,\n+        ToastrModule.forRoot({\n+          positionClass: 'toast-top-center',\n+          preventDuplicates: true,\n+          enableHtml: true,\n+        }),\n+      ],\n+      providers: [NgForm, EntityService, LocationService, BsModalService],\n+    });\n   }));\n \n-  beforeEach(() => {\n+  beforeEach(async(() => {\n     fixture = TestBed.createComponent(AddLocationComponent);\n     component = fixture.componentInstance;\n+    form = fixture.debugElement.query(By.css('form'));\n+    submitLocation = fixture.debugElement.query(\n+      By.css('button[type=\"submit\"]'),\n+    );\n+    locationCustomIde1 = fixture.debugElement.query(\n+      By.css('input[id=locationCustomId]'),\n+    );\n+    locationNamee1 = fixture.debugElement.query(\n+      By.css('input[id=locationName]'),\n+    );\n+    locationDescriptione1 = fixture.debugElement.query(\n+      By.css('input[id=locationDescription]'),\n+    );\n+\n     fixture.detectChanges();\n-  });\n+  }));\n \n   it('should create', () => {\n     expect(component).toBeTruthy();\n   });\n+  it('should not create a template-driven form when ngNoForm is used', () => {\n+    fixture.detectChanges();\n+    expect(fixture.debugElement.children[0].providerTokens.length).toEqual(0);\n+  });\n+  it('Locations value to input properties on form load', () => {\n+    const submitButton = submitLocation.nativeElement as HTMLInputElement;\n+    component.enabled = false;\n+    fixture.detectChanges();\n+    expect(submitButton.disabled).toBeTruthy();\n+  });\n+  it('should add novalidate by default to form element', fakeAsync(() => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4MTM5NQ=="}, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTcyMjgyOnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNzo1NToyMlrOGsX3lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNzoyMzo0M1rOGuyCRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4MTU4OA==", "bodyText": "This isn't what this test is testing", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r449181588", "createdAt": "2020-07-02T17:55:22Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "diffHunk": "@@ -1,24 +1,149 @@\n-import {async, ComponentFixture, TestBed} from '@angular/core/testing';\n-\n+import {\n+  async,\n+  ComponentFixture,\n+  TestBed,\n+  fakeAsync,\n+  tick,\n+} from '@angular/core/testing';\n+import {DebugElement} from '@angular/core';\n import {AddLocationComponent} from './add-location.component';\n+import {LocationService} from '../shared/location.service';\n+import {ToastrModule} from 'ngx-toastr';\n+import {BsModalService, ModalModule} from 'ngx-bootstrap/modal';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {LocationModule} from '../location.module';\n+import {FormsModule, ReactiveFormsModule, NgForm} from '@angular/forms';\n+import {EntityService} from 'src/app/service/entity.service';\n+import {HttpClientModule} from '@angular/common/http';\n+import {By} from '@angular/platform-browser';\n \n describe('AddLocationComponent', () => {\n   let component: AddLocationComponent;\n   let fixture: ComponentFixture<AddLocationComponent>;\n+  let form: DebugElement;\n+  let submitLocation: DebugElement;\n+  let locationCustomIde1: DebugElement;\n+  let locationNamee1: DebugElement;\n+  let locationDescriptione1: DebugElement;\n \n-  beforeEach(async(async () => {\n-    await TestBed.configureTestingModule({\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n       declarations: [AddLocationComponent],\n-    }).compileComponents();\n+      imports: [\n+        ModalModule.forRoot(),\n+        RouterTestingModule,\n+        LocationModule,\n+        HttpClientModule,\n+        FormsModule,\n+        ReactiveFormsModule,\n+        ToastrModule.forRoot({\n+          positionClass: 'toast-top-center',\n+          preventDuplicates: true,\n+          enableHtml: true,\n+        }),\n+      ],\n+      providers: [NgForm, EntityService, LocationService, BsModalService],\n+    });\n   }));\n \n-  beforeEach(() => {\n+  beforeEach(async(() => {\n     fixture = TestBed.createComponent(AddLocationComponent);\n     component = fixture.componentInstance;\n+    form = fixture.debugElement.query(By.css('form'));\n+    submitLocation = fixture.debugElement.query(\n+      By.css('button[type=\"submit\"]'),\n+    );\n+    locationCustomIde1 = fixture.debugElement.query(\n+      By.css('input[id=locationCustomId]'),\n+    );\n+    locationNamee1 = fixture.debugElement.query(\n+      By.css('input[id=locationName]'),\n+    );\n+    locationDescriptione1 = fixture.debugElement.query(\n+      By.css('input[id=locationDescription]'),\n+    );\n+\n     fixture.detectChanges();\n-  });\n+  }));\n \n   it('should create', () => {\n     expect(component).toBeTruthy();\n   });\n+  it('should not create a template-driven form when ngNoForm is used', () => {\n+    fixture.detectChanges();\n+    expect(fixture.debugElement.children[0].providerTokens.length).toEqual(0);\n+  });\n+  it('Locations value to input properties on form load', () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAzMDQ4Mg==", "bodyText": "This test is to check the submit form disabled on form load.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r451030482", "createdAt": "2020-07-07T17:32:14Z", "author": {"login": "rohithd-btc"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "diffHunk": "@@ -1,24 +1,149 @@\n-import {async, ComponentFixture, TestBed} from '@angular/core/testing';\n-\n+import {\n+  async,\n+  ComponentFixture,\n+  TestBed,\n+  fakeAsync,\n+  tick,\n+} from '@angular/core/testing';\n+import {DebugElement} from '@angular/core';\n import {AddLocationComponent} from './add-location.component';\n+import {LocationService} from '../shared/location.service';\n+import {ToastrModule} from 'ngx-toastr';\n+import {BsModalService, ModalModule} from 'ngx-bootstrap/modal';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {LocationModule} from '../location.module';\n+import {FormsModule, ReactiveFormsModule, NgForm} from '@angular/forms';\n+import {EntityService} from 'src/app/service/entity.service';\n+import {HttpClientModule} from '@angular/common/http';\n+import {By} from '@angular/platform-browser';\n \n describe('AddLocationComponent', () => {\n   let component: AddLocationComponent;\n   let fixture: ComponentFixture<AddLocationComponent>;\n+  let form: DebugElement;\n+  let submitLocation: DebugElement;\n+  let locationCustomIde1: DebugElement;\n+  let locationNamee1: DebugElement;\n+  let locationDescriptione1: DebugElement;\n \n-  beforeEach(async(async () => {\n-    await TestBed.configureTestingModule({\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n       declarations: [AddLocationComponent],\n-    }).compileComponents();\n+      imports: [\n+        ModalModule.forRoot(),\n+        RouterTestingModule,\n+        LocationModule,\n+        HttpClientModule,\n+        FormsModule,\n+        ReactiveFormsModule,\n+        ToastrModule.forRoot({\n+          positionClass: 'toast-top-center',\n+          preventDuplicates: true,\n+          enableHtml: true,\n+        }),\n+      ],\n+      providers: [NgForm, EntityService, LocationService, BsModalService],\n+    });\n   }));\n \n-  beforeEach(() => {\n+  beforeEach(async(() => {\n     fixture = TestBed.createComponent(AddLocationComponent);\n     component = fixture.componentInstance;\n+    form = fixture.debugElement.query(By.css('form'));\n+    submitLocation = fixture.debugElement.query(\n+      By.css('button[type=\"submit\"]'),\n+    );\n+    locationCustomIde1 = fixture.debugElement.query(\n+      By.css('input[id=locationCustomId]'),\n+    );\n+    locationNamee1 = fixture.debugElement.query(\n+      By.css('input[id=locationName]'),\n+    );\n+    locationDescriptione1 = fixture.debugElement.query(\n+      By.css('input[id=locationDescription]'),\n+    );\n+\n     fixture.detectChanges();\n-  });\n+  }));\n \n   it('should create', () => {\n     expect(component).toBeTruthy();\n   });\n+  it('should not create a template-driven form when ngNoForm is used', () => {\n+    fixture.detectChanges();\n+    expect(fixture.debugElement.children[0].providerTokens.length).toEqual(0);\n+  });\n+  it('Locations value to input properties on form load', () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4MTU4OA=="}, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA2NDUzMA==", "bodyText": "That's not what the title of the test says.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r451064530", "createdAt": "2020-07-07T18:33:25Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "diffHunk": "@@ -1,24 +1,149 @@\n-import {async, ComponentFixture, TestBed} from '@angular/core/testing';\n-\n+import {\n+  async,\n+  ComponentFixture,\n+  TestBed,\n+  fakeAsync,\n+  tick,\n+} from '@angular/core/testing';\n+import {DebugElement} from '@angular/core';\n import {AddLocationComponent} from './add-location.component';\n+import {LocationService} from '../shared/location.service';\n+import {ToastrModule} from 'ngx-toastr';\n+import {BsModalService, ModalModule} from 'ngx-bootstrap/modal';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {LocationModule} from '../location.module';\n+import {FormsModule, ReactiveFormsModule, NgForm} from '@angular/forms';\n+import {EntityService} from 'src/app/service/entity.service';\n+import {HttpClientModule} from '@angular/common/http';\n+import {By} from '@angular/platform-browser';\n \n describe('AddLocationComponent', () => {\n   let component: AddLocationComponent;\n   let fixture: ComponentFixture<AddLocationComponent>;\n+  let form: DebugElement;\n+  let submitLocation: DebugElement;\n+  let locationCustomIde1: DebugElement;\n+  let locationNamee1: DebugElement;\n+  let locationDescriptione1: DebugElement;\n \n-  beforeEach(async(async () => {\n-    await TestBed.configureTestingModule({\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n       declarations: [AddLocationComponent],\n-    }).compileComponents();\n+      imports: [\n+        ModalModule.forRoot(),\n+        RouterTestingModule,\n+        LocationModule,\n+        HttpClientModule,\n+        FormsModule,\n+        ReactiveFormsModule,\n+        ToastrModule.forRoot({\n+          positionClass: 'toast-top-center',\n+          preventDuplicates: true,\n+          enableHtml: true,\n+        }),\n+      ],\n+      providers: [NgForm, EntityService, LocationService, BsModalService],\n+    });\n   }));\n \n-  beforeEach(() => {\n+  beforeEach(async(() => {\n     fixture = TestBed.createComponent(AddLocationComponent);\n     component = fixture.componentInstance;\n+    form = fixture.debugElement.query(By.css('form'));\n+    submitLocation = fixture.debugElement.query(\n+      By.css('button[type=\"submit\"]'),\n+    );\n+    locationCustomIde1 = fixture.debugElement.query(\n+      By.css('input[id=locationCustomId]'),\n+    );\n+    locationNamee1 = fixture.debugElement.query(\n+      By.css('input[id=locationName]'),\n+    );\n+    locationDescriptione1 = fixture.debugElement.query(\n+      By.css('input[id=locationDescription]'),\n+    );\n+\n     fixture.detectChanges();\n-  });\n+  }));\n \n   it('should create', () => {\n     expect(component).toBeTruthy();\n   });\n+  it('should not create a template-driven form when ngNoForm is used', () => {\n+    fixture.detectChanges();\n+    expect(fixture.debugElement.children[0].providerTokens.length).toEqual(0);\n+  });\n+  it('Locations value to input properties on form load', () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4MTU4OA=="}, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcwNzQ2Mg==", "bodyText": "Updated in the latest commit", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r451707462", "createdAt": "2020-07-08T17:23:43Z", "author": {"login": "rohithd-btc"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "diffHunk": "@@ -1,24 +1,149 @@\n-import {async, ComponentFixture, TestBed} from '@angular/core/testing';\n-\n+import {\n+  async,\n+  ComponentFixture,\n+  TestBed,\n+  fakeAsync,\n+  tick,\n+} from '@angular/core/testing';\n+import {DebugElement} from '@angular/core';\n import {AddLocationComponent} from './add-location.component';\n+import {LocationService} from '../shared/location.service';\n+import {ToastrModule} from 'ngx-toastr';\n+import {BsModalService, ModalModule} from 'ngx-bootstrap/modal';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {LocationModule} from '../location.module';\n+import {FormsModule, ReactiveFormsModule, NgForm} from '@angular/forms';\n+import {EntityService} from 'src/app/service/entity.service';\n+import {HttpClientModule} from '@angular/common/http';\n+import {By} from '@angular/platform-browser';\n \n describe('AddLocationComponent', () => {\n   let component: AddLocationComponent;\n   let fixture: ComponentFixture<AddLocationComponent>;\n+  let form: DebugElement;\n+  let submitLocation: DebugElement;\n+  let locationCustomIde1: DebugElement;\n+  let locationNamee1: DebugElement;\n+  let locationDescriptione1: DebugElement;\n \n-  beforeEach(async(async () => {\n-    await TestBed.configureTestingModule({\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n       declarations: [AddLocationComponent],\n-    }).compileComponents();\n+      imports: [\n+        ModalModule.forRoot(),\n+        RouterTestingModule,\n+        LocationModule,\n+        HttpClientModule,\n+        FormsModule,\n+        ReactiveFormsModule,\n+        ToastrModule.forRoot({\n+          positionClass: 'toast-top-center',\n+          preventDuplicates: true,\n+          enableHtml: true,\n+        }),\n+      ],\n+      providers: [NgForm, EntityService, LocationService, BsModalService],\n+    });\n   }));\n \n-  beforeEach(() => {\n+  beforeEach(async(() => {\n     fixture = TestBed.createComponent(AddLocationComponent);\n     component = fixture.componentInstance;\n+    form = fixture.debugElement.query(By.css('form'));\n+    submitLocation = fixture.debugElement.query(\n+      By.css('button[type=\"submit\"]'),\n+    );\n+    locationCustomIde1 = fixture.debugElement.query(\n+      By.css('input[id=locationCustomId]'),\n+    );\n+    locationNamee1 = fixture.debugElement.query(\n+      By.css('input[id=locationName]'),\n+    );\n+    locationDescriptione1 = fixture.debugElement.query(\n+      By.css('input[id=locationDescription]'),\n+    );\n+\n     fixture.detectChanges();\n-  });\n+  }));\n \n   it('should create', () => {\n     expect(component).toBeTruthy();\n   });\n+  it('should not create a template-driven form when ngNoForm is used', () => {\n+    fixture.detectChanges();\n+    expect(fixture.debugElement.children[0].providerTokens.length).toEqual(0);\n+  });\n+  it('Locations value to input properties on form load', () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4MTU4OA=="}, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTcyNDI1OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNzo1NTo0OVrOGsX4YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNzo0NzowOFrOGthOyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4MTc5Mw==", "bodyText": "Don't test the Angular framework. Please remove this test.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r449181793", "createdAt": "2020-07-02T17:55:49Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "diffHunk": "@@ -1,24 +1,149 @@\n-import {async, ComponentFixture, TestBed} from '@angular/core/testing';\n-\n+import {\n+  async,\n+  ComponentFixture,\n+  TestBed,\n+  fakeAsync,\n+  tick,\n+} from '@angular/core/testing';\n+import {DebugElement} from '@angular/core';\n import {AddLocationComponent} from './add-location.component';\n+import {LocationService} from '../shared/location.service';\n+import {ToastrModule} from 'ngx-toastr';\n+import {BsModalService, ModalModule} from 'ngx-bootstrap/modal';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {LocationModule} from '../location.module';\n+import {FormsModule, ReactiveFormsModule, NgForm} from '@angular/forms';\n+import {EntityService} from 'src/app/service/entity.service';\n+import {HttpClientModule} from '@angular/common/http';\n+import {By} from '@angular/platform-browser';\n \n describe('AddLocationComponent', () => {\n   let component: AddLocationComponent;\n   let fixture: ComponentFixture<AddLocationComponent>;\n+  let form: DebugElement;\n+  let submitLocation: DebugElement;\n+  let locationCustomIde1: DebugElement;\n+  let locationNamee1: DebugElement;\n+  let locationDescriptione1: DebugElement;\n \n-  beforeEach(async(async () => {\n-    await TestBed.configureTestingModule({\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n       declarations: [AddLocationComponent],\n-    }).compileComponents();\n+      imports: [\n+        ModalModule.forRoot(),\n+        RouterTestingModule,\n+        LocationModule,\n+        HttpClientModule,\n+        FormsModule,\n+        ReactiveFormsModule,\n+        ToastrModule.forRoot({\n+          positionClass: 'toast-top-center',\n+          preventDuplicates: true,\n+          enableHtml: true,\n+        }),\n+      ],\n+      providers: [NgForm, EntityService, LocationService, BsModalService],\n+    });\n   }));\n \n-  beforeEach(() => {\n+  beforeEach(async(() => {\n     fixture = TestBed.createComponent(AddLocationComponent);\n     component = fixture.componentInstance;\n+    form = fixture.debugElement.query(By.css('form'));\n+    submitLocation = fixture.debugElement.query(\n+      By.css('button[type=\"submit\"]'),\n+    );\n+    locationCustomIde1 = fixture.debugElement.query(\n+      By.css('input[id=locationCustomId]'),\n+    );\n+    locationNamee1 = fixture.debugElement.query(\n+      By.css('input[id=locationName]'),\n+    );\n+    locationDescriptione1 = fixture.debugElement.query(\n+      By.css('input[id=locationDescription]'),\n+    );\n+\n     fixture.detectChanges();\n-  });\n+  }));\n \n   it('should create', () => {\n     expect(component).toBeTruthy();\n   });\n+  it('should not create a template-driven form when ngNoForm is used', () => {\n+    fixture.detectChanges();\n+    expect(fixture.debugElement.children[0].providerTokens.length).toEqual(0);\n+  });\n+  it('Locations value to input properties on form load', () => {\n+    const submitButton = submitLocation.nativeElement as HTMLInputElement;\n+    component.enabled = false;\n+    fixture.detectChanges();\n+    expect(submitButton.disabled).toBeTruthy();\n+  });\n+  it('should add novalidate by default to form element', fakeAsync(() => {\n+    fixture.detectChanges();\n+    tick();\n+    const formTest = form.nativeElement as HTMLFormElement;\n+    expect(formTest.getAttribute('novalidate')).toEqual('');\n+  }));\n+\n+  it('should set status classes with ngModelGroup and ngForm', fakeAsync(() => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4MzU2MA==", "bodyText": "Removed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r450383560", "createdAt": "2020-07-06T17:47:08Z", "author": {"login": "rohithd-btc"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "diffHunk": "@@ -1,24 +1,149 @@\n-import {async, ComponentFixture, TestBed} from '@angular/core/testing';\n-\n+import {\n+  async,\n+  ComponentFixture,\n+  TestBed,\n+  fakeAsync,\n+  tick,\n+} from '@angular/core/testing';\n+import {DebugElement} from '@angular/core';\n import {AddLocationComponent} from './add-location.component';\n+import {LocationService} from '../shared/location.service';\n+import {ToastrModule} from 'ngx-toastr';\n+import {BsModalService, ModalModule} from 'ngx-bootstrap/modal';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {LocationModule} from '../location.module';\n+import {FormsModule, ReactiveFormsModule, NgForm} from '@angular/forms';\n+import {EntityService} from 'src/app/service/entity.service';\n+import {HttpClientModule} from '@angular/common/http';\n+import {By} from '@angular/platform-browser';\n \n describe('AddLocationComponent', () => {\n   let component: AddLocationComponent;\n   let fixture: ComponentFixture<AddLocationComponent>;\n+  let form: DebugElement;\n+  let submitLocation: DebugElement;\n+  let locationCustomIde1: DebugElement;\n+  let locationNamee1: DebugElement;\n+  let locationDescriptione1: DebugElement;\n \n-  beforeEach(async(async () => {\n-    await TestBed.configureTestingModule({\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n       declarations: [AddLocationComponent],\n-    }).compileComponents();\n+      imports: [\n+        ModalModule.forRoot(),\n+        RouterTestingModule,\n+        LocationModule,\n+        HttpClientModule,\n+        FormsModule,\n+        ReactiveFormsModule,\n+        ToastrModule.forRoot({\n+          positionClass: 'toast-top-center',\n+          preventDuplicates: true,\n+          enableHtml: true,\n+        }),\n+      ],\n+      providers: [NgForm, EntityService, LocationService, BsModalService],\n+    });\n   }));\n \n-  beforeEach(() => {\n+  beforeEach(async(() => {\n     fixture = TestBed.createComponent(AddLocationComponent);\n     component = fixture.componentInstance;\n+    form = fixture.debugElement.query(By.css('form'));\n+    submitLocation = fixture.debugElement.query(\n+      By.css('button[type=\"submit\"]'),\n+    );\n+    locationCustomIde1 = fixture.debugElement.query(\n+      By.css('input[id=locationCustomId]'),\n+    );\n+    locationNamee1 = fixture.debugElement.query(\n+      By.css('input[id=locationName]'),\n+    );\n+    locationDescriptione1 = fixture.debugElement.query(\n+      By.css('input[id=locationDescription]'),\n+    );\n+\n     fixture.detectChanges();\n-  });\n+  }));\n \n   it('should create', () => {\n     expect(component).toBeTruthy();\n   });\n+  it('should not create a template-driven form when ngNoForm is used', () => {\n+    fixture.detectChanges();\n+    expect(fixture.debugElement.children[0].providerTokens.length).toEqual(0);\n+  });\n+  it('Locations value to input properties on form load', () => {\n+    const submitButton = submitLocation.nativeElement as HTMLInputElement;\n+    component.enabled = false;\n+    fixture.detectChanges();\n+    expect(submitButton.disabled).toBeTruthy();\n+  });\n+  it('should add novalidate by default to form element', fakeAsync(() => {\n+    fixture.detectChanges();\n+    tick();\n+    const formTest = form.nativeElement as HTMLFormElement;\n+    expect(formTest.getAttribute('novalidate')).toEqual('');\n+  }));\n+\n+  it('should set status classes with ngModelGroup and ngForm', fakeAsync(() => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4MTc5Mw=="}, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTcyOTM0OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNzo1NzoxNlrOGsX7Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzoyMzowMFrOGuIYwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4MjU1NQ==", "bodyText": "There is no output check in this test.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r449182555", "createdAt": "2020-07-02T17:57:16Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "diffHunk": "@@ -1,24 +1,149 @@\n-import {async, ComponentFixture, TestBed} from '@angular/core/testing';\n-\n+import {\n+  async,\n+  ComponentFixture,\n+  TestBed,\n+  fakeAsync,\n+  tick,\n+} from '@angular/core/testing';\n+import {DebugElement} from '@angular/core';\n import {AddLocationComponent} from './add-location.component';\n+import {LocationService} from '../shared/location.service';\n+import {ToastrModule} from 'ngx-toastr';\n+import {BsModalService, ModalModule} from 'ngx-bootstrap/modal';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {LocationModule} from '../location.module';\n+import {FormsModule, ReactiveFormsModule, NgForm} from '@angular/forms';\n+import {EntityService} from 'src/app/service/entity.service';\n+import {HttpClientModule} from '@angular/common/http';\n+import {By} from '@angular/platform-browser';\n \n describe('AddLocationComponent', () => {\n   let component: AddLocationComponent;\n   let fixture: ComponentFixture<AddLocationComponent>;\n+  let form: DebugElement;\n+  let submitLocation: DebugElement;\n+  let locationCustomIde1: DebugElement;\n+  let locationNamee1: DebugElement;\n+  let locationDescriptione1: DebugElement;\n \n-  beforeEach(async(async () => {\n-    await TestBed.configureTestingModule({\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n       declarations: [AddLocationComponent],\n-    }).compileComponents();\n+      imports: [\n+        ModalModule.forRoot(),\n+        RouterTestingModule,\n+        LocationModule,\n+        HttpClientModule,\n+        FormsModule,\n+        ReactiveFormsModule,\n+        ToastrModule.forRoot({\n+          positionClass: 'toast-top-center',\n+          preventDuplicates: true,\n+          enableHtml: true,\n+        }),\n+      ],\n+      providers: [NgForm, EntityService, LocationService, BsModalService],\n+    });\n   }));\n \n-  beforeEach(() => {\n+  beforeEach(async(() => {\n     fixture = TestBed.createComponent(AddLocationComponent);\n     component = fixture.componentInstance;\n+    form = fixture.debugElement.query(By.css('form'));\n+    submitLocation = fixture.debugElement.query(\n+      By.css('button[type=\"submit\"]'),\n+    );\n+    locationCustomIde1 = fixture.debugElement.query(\n+      By.css('input[id=locationCustomId]'),\n+    );\n+    locationNamee1 = fixture.debugElement.query(\n+      By.css('input[id=locationName]'),\n+    );\n+    locationDescriptione1 = fixture.debugElement.query(\n+      By.css('input[id=locationDescription]'),\n+    );\n+\n     fixture.detectChanges();\n-  });\n+  }));\n \n   it('should create', () => {\n     expect(component).toBeTruthy();\n   });\n+  it('should not create a template-driven form when ngNoForm is used', () => {\n+    fixture.detectChanges();\n+    expect(fixture.debugElement.children[0].providerTokens.length).toEqual(0);\n+  });\n+  it('Locations value to input properties on form load', () => {\n+    const submitButton = submitLocation.nativeElement as HTMLInputElement;\n+    component.enabled = false;\n+    fixture.detectChanges();\n+    expect(submitButton.disabled).toBeTruthy();\n+  });\n+  it('should add novalidate by default to form element', fakeAsync(() => {\n+    fixture.detectChanges();\n+    tick();\n+    const formTest = form.nativeElement as HTMLFormElement;\n+    expect(formTest.getAttribute('novalidate')).toEqual('');\n+  }));\n+\n+  it('should set status classes with ngModelGroup and ngForm', fakeAsync(() => {\n+    fixture.detectChanges();\n+\n+    const input = fixture.debugElement.query(By.css('input'));\n+    const inputFormElement = input.nativeElement as HTMLElement;\n+\n+    void fixture.whenStable().then(() => {\n+      fixture.detectChanges();\n+\n+      expect(inputFormElement.classList.length).toEqual(4);\n+      expect(inputFormElement.classList.value).toEqual(\n+        'form-control ng-untouched ng-pristine ng-invalid',\n+      );\n+\n+      dispatchEvent(new Event('input'));\n+      tick();\n+      fixture.detectChanges();\n+    });\n+  }));\n+\n+  it('Entering value in input controls and emit output events', fakeAsync(() => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAyNTA4OA==", "bodyText": "This test case is for to check the input filed with the fake/hardcoded value and expect the same string", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r451025088", "createdAt": "2020-07-07T17:23:00Z", "author": {"login": "rohithd-btc"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "diffHunk": "@@ -1,24 +1,149 @@\n-import {async, ComponentFixture, TestBed} from '@angular/core/testing';\n-\n+import {\n+  async,\n+  ComponentFixture,\n+  TestBed,\n+  fakeAsync,\n+  tick,\n+} from '@angular/core/testing';\n+import {DebugElement} from '@angular/core';\n import {AddLocationComponent} from './add-location.component';\n+import {LocationService} from '../shared/location.service';\n+import {ToastrModule} from 'ngx-toastr';\n+import {BsModalService, ModalModule} from 'ngx-bootstrap/modal';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {LocationModule} from '../location.module';\n+import {FormsModule, ReactiveFormsModule, NgForm} from '@angular/forms';\n+import {EntityService} from 'src/app/service/entity.service';\n+import {HttpClientModule} from '@angular/common/http';\n+import {By} from '@angular/platform-browser';\n \n describe('AddLocationComponent', () => {\n   let component: AddLocationComponent;\n   let fixture: ComponentFixture<AddLocationComponent>;\n+  let form: DebugElement;\n+  let submitLocation: DebugElement;\n+  let locationCustomIde1: DebugElement;\n+  let locationNamee1: DebugElement;\n+  let locationDescriptione1: DebugElement;\n \n-  beforeEach(async(async () => {\n-    await TestBed.configureTestingModule({\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n       declarations: [AddLocationComponent],\n-    }).compileComponents();\n+      imports: [\n+        ModalModule.forRoot(),\n+        RouterTestingModule,\n+        LocationModule,\n+        HttpClientModule,\n+        FormsModule,\n+        ReactiveFormsModule,\n+        ToastrModule.forRoot({\n+          positionClass: 'toast-top-center',\n+          preventDuplicates: true,\n+          enableHtml: true,\n+        }),\n+      ],\n+      providers: [NgForm, EntityService, LocationService, BsModalService],\n+    });\n   }));\n \n-  beforeEach(() => {\n+  beforeEach(async(() => {\n     fixture = TestBed.createComponent(AddLocationComponent);\n     component = fixture.componentInstance;\n+    form = fixture.debugElement.query(By.css('form'));\n+    submitLocation = fixture.debugElement.query(\n+      By.css('button[type=\"submit\"]'),\n+    );\n+    locationCustomIde1 = fixture.debugElement.query(\n+      By.css('input[id=locationCustomId]'),\n+    );\n+    locationNamee1 = fixture.debugElement.query(\n+      By.css('input[id=locationName]'),\n+    );\n+    locationDescriptione1 = fixture.debugElement.query(\n+      By.css('input[id=locationDescription]'),\n+    );\n+\n     fixture.detectChanges();\n-  });\n+  }));\n \n   it('should create', () => {\n     expect(component).toBeTruthy();\n   });\n+  it('should not create a template-driven form when ngNoForm is used', () => {\n+    fixture.detectChanges();\n+    expect(fixture.debugElement.children[0].providerTokens.length).toEqual(0);\n+  });\n+  it('Locations value to input properties on form load', () => {\n+    const submitButton = submitLocation.nativeElement as HTMLInputElement;\n+    component.enabled = false;\n+    fixture.detectChanges();\n+    expect(submitButton.disabled).toBeTruthy();\n+  });\n+  it('should add novalidate by default to form element', fakeAsync(() => {\n+    fixture.detectChanges();\n+    tick();\n+    const formTest = form.nativeElement as HTMLFormElement;\n+    expect(formTest.getAttribute('novalidate')).toEqual('');\n+  }));\n+\n+  it('should set status classes with ngModelGroup and ngForm', fakeAsync(() => {\n+    fixture.detectChanges();\n+\n+    const input = fixture.debugElement.query(By.css('input'));\n+    const inputFormElement = input.nativeElement as HTMLElement;\n+\n+    void fixture.whenStable().then(() => {\n+      fixture.detectChanges();\n+\n+      expect(inputFormElement.classList.length).toEqual(4);\n+      expect(inputFormElement.classList.value).toEqual(\n+        'form-control ng-untouched ng-pristine ng-invalid',\n+      );\n+\n+      dispatchEvent(new Event('input'));\n+      tick();\n+      fixture.detectChanges();\n+    });\n+  }));\n+\n+  it('Entering value in input controls and emit output events', fakeAsync(() => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4MjU1NQ=="}, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTczMTc0OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNzo1ODowMVrOGsX8yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNzoyMzozN1rOGuyCFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4MjkyMw==", "bodyText": "If you're testing that submit works you should also be checking that the locationService was called.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r449182923", "createdAt": "2020-07-02T17:58:01Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "diffHunk": "@@ -1,24 +1,149 @@\n-import {async, ComponentFixture, TestBed} from '@angular/core/testing';\n-\n+import {\n+  async,\n+  ComponentFixture,\n+  TestBed,\n+  fakeAsync,\n+  tick,\n+} from '@angular/core/testing';\n+import {DebugElement} from '@angular/core';\n import {AddLocationComponent} from './add-location.component';\n+import {LocationService} from '../shared/location.service';\n+import {ToastrModule} from 'ngx-toastr';\n+import {BsModalService, ModalModule} from 'ngx-bootstrap/modal';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {LocationModule} from '../location.module';\n+import {FormsModule, ReactiveFormsModule, NgForm} from '@angular/forms';\n+import {EntityService} from 'src/app/service/entity.service';\n+import {HttpClientModule} from '@angular/common/http';\n+import {By} from '@angular/platform-browser';\n \n describe('AddLocationComponent', () => {\n   let component: AddLocationComponent;\n   let fixture: ComponentFixture<AddLocationComponent>;\n+  let form: DebugElement;\n+  let submitLocation: DebugElement;\n+  let locationCustomIde1: DebugElement;\n+  let locationNamee1: DebugElement;\n+  let locationDescriptione1: DebugElement;\n \n-  beforeEach(async(async () => {\n-    await TestBed.configureTestingModule({\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n       declarations: [AddLocationComponent],\n-    }).compileComponents();\n+      imports: [\n+        ModalModule.forRoot(),\n+        RouterTestingModule,\n+        LocationModule,\n+        HttpClientModule,\n+        FormsModule,\n+        ReactiveFormsModule,\n+        ToastrModule.forRoot({\n+          positionClass: 'toast-top-center',\n+          preventDuplicates: true,\n+          enableHtml: true,\n+        }),\n+      ],\n+      providers: [NgForm, EntityService, LocationService, BsModalService],\n+    });\n   }));\n \n-  beforeEach(() => {\n+  beforeEach(async(() => {\n     fixture = TestBed.createComponent(AddLocationComponent);\n     component = fixture.componentInstance;\n+    form = fixture.debugElement.query(By.css('form'));\n+    submitLocation = fixture.debugElement.query(\n+      By.css('button[type=\"submit\"]'),\n+    );\n+    locationCustomIde1 = fixture.debugElement.query(\n+      By.css('input[id=locationCustomId]'),\n+    );\n+    locationNamee1 = fixture.debugElement.query(\n+      By.css('input[id=locationName]'),\n+    );\n+    locationDescriptione1 = fixture.debugElement.query(\n+      By.css('input[id=locationDescription]'),\n+    );\n+\n     fixture.detectChanges();\n-  });\n+  }));\n \n   it('should create', () => {\n     expect(component).toBeTruthy();\n   });\n+  it('should not create a template-driven form when ngNoForm is used', () => {\n+    fixture.detectChanges();\n+    expect(fixture.debugElement.children[0].providerTokens.length).toEqual(0);\n+  });\n+  it('Locations value to input properties on form load', () => {\n+    const submitButton = submitLocation.nativeElement as HTMLInputElement;\n+    component.enabled = false;\n+    fixture.detectChanges();\n+    expect(submitButton.disabled).toBeTruthy();\n+  });\n+  it('should add novalidate by default to form element', fakeAsync(() => {\n+    fixture.detectChanges();\n+    tick();\n+    const formTest = form.nativeElement as HTMLFormElement;\n+    expect(formTest.getAttribute('novalidate')).toEqual('');\n+  }));\n+\n+  it('should set status classes with ngModelGroup and ngForm', fakeAsync(() => {\n+    fixture.detectChanges();\n+\n+    const input = fixture.debugElement.query(By.css('input'));\n+    const inputFormElement = input.nativeElement as HTMLElement;\n+\n+    void fixture.whenStable().then(() => {\n+      fixture.detectChanges();\n+\n+      expect(inputFormElement.classList.length).toEqual(4);\n+      expect(inputFormElement.classList.value).toEqual(\n+        'form-control ng-untouched ng-pristine ng-invalid',\n+      );\n+\n+      dispatchEvent(new Event('input'));\n+      tick();\n+      fixture.detectChanges();\n+    });\n+  }));\n+\n+  it('Entering value in input controls and emit output events', fakeAsync(() => {\n+    fixture.componentInstance.location.customId = 'customid3';\n+    fixture.componentInstance.location.name = 'Location Name';\n+    fixture.componentInstance.location.description =\n+      'This is location Description';\n+    void fixture.whenStable().then(() => {\n+      const submitButton = submitLocation.nativeElement as HTMLInputElement;\n+      const customIdInput = locationCustomIde1.nativeElement as HTMLInputElement;\n+      const nameInput = locationNamee1.nativeElement as HTMLInputElement;\n+      const descriptionInput = locationDescriptione1.nativeElement as HTMLInputElement;\n+      customIdInput.value = 'customid3';\n+      nameInput.value = 'Location Name';\n+      descriptionInput.value = 'This is location Description';\n+      dispatchEvent(new Event('input'));\n+      fixture.detectChanges();\n+      tick();\n+      submitButton.click();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcwNzQxMw==", "bodyText": "Updated in the latest commit", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r451707413", "createdAt": "2020-07-08T17:23:37Z", "author": {"login": "rohithd-btc"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "diffHunk": "@@ -1,24 +1,149 @@\n-import {async, ComponentFixture, TestBed} from '@angular/core/testing';\n-\n+import {\n+  async,\n+  ComponentFixture,\n+  TestBed,\n+  fakeAsync,\n+  tick,\n+} from '@angular/core/testing';\n+import {DebugElement} from '@angular/core';\n import {AddLocationComponent} from './add-location.component';\n+import {LocationService} from '../shared/location.service';\n+import {ToastrModule} from 'ngx-toastr';\n+import {BsModalService, ModalModule} from 'ngx-bootstrap/modal';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {LocationModule} from '../location.module';\n+import {FormsModule, ReactiveFormsModule, NgForm} from '@angular/forms';\n+import {EntityService} from 'src/app/service/entity.service';\n+import {HttpClientModule} from '@angular/common/http';\n+import {By} from '@angular/platform-browser';\n \n describe('AddLocationComponent', () => {\n   let component: AddLocationComponent;\n   let fixture: ComponentFixture<AddLocationComponent>;\n+  let form: DebugElement;\n+  let submitLocation: DebugElement;\n+  let locationCustomIde1: DebugElement;\n+  let locationNamee1: DebugElement;\n+  let locationDescriptione1: DebugElement;\n \n-  beforeEach(async(async () => {\n-    await TestBed.configureTestingModule({\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n       declarations: [AddLocationComponent],\n-    }).compileComponents();\n+      imports: [\n+        ModalModule.forRoot(),\n+        RouterTestingModule,\n+        LocationModule,\n+        HttpClientModule,\n+        FormsModule,\n+        ReactiveFormsModule,\n+        ToastrModule.forRoot({\n+          positionClass: 'toast-top-center',\n+          preventDuplicates: true,\n+          enableHtml: true,\n+        }),\n+      ],\n+      providers: [NgForm, EntityService, LocationService, BsModalService],\n+    });\n   }));\n \n-  beforeEach(() => {\n+  beforeEach(async(() => {\n     fixture = TestBed.createComponent(AddLocationComponent);\n     component = fixture.componentInstance;\n+    form = fixture.debugElement.query(By.css('form'));\n+    submitLocation = fixture.debugElement.query(\n+      By.css('button[type=\"submit\"]'),\n+    );\n+    locationCustomIde1 = fixture.debugElement.query(\n+      By.css('input[id=locationCustomId]'),\n+    );\n+    locationNamee1 = fixture.debugElement.query(\n+      By.css('input[id=locationName]'),\n+    );\n+    locationDescriptione1 = fixture.debugElement.query(\n+      By.css('input[id=locationDescription]'),\n+    );\n+\n     fixture.detectChanges();\n-  });\n+  }));\n \n   it('should create', () => {\n     expect(component).toBeTruthy();\n   });\n+  it('should not create a template-driven form when ngNoForm is used', () => {\n+    fixture.detectChanges();\n+    expect(fixture.debugElement.children[0].providerTokens.length).toEqual(0);\n+  });\n+  it('Locations value to input properties on form load', () => {\n+    const submitButton = submitLocation.nativeElement as HTMLInputElement;\n+    component.enabled = false;\n+    fixture.detectChanges();\n+    expect(submitButton.disabled).toBeTruthy();\n+  });\n+  it('should add novalidate by default to form element', fakeAsync(() => {\n+    fixture.detectChanges();\n+    tick();\n+    const formTest = form.nativeElement as HTMLFormElement;\n+    expect(formTest.getAttribute('novalidate')).toEqual('');\n+  }));\n+\n+  it('should set status classes with ngModelGroup and ngForm', fakeAsync(() => {\n+    fixture.detectChanges();\n+\n+    const input = fixture.debugElement.query(By.css('input'));\n+    const inputFormElement = input.nativeElement as HTMLElement;\n+\n+    void fixture.whenStable().then(() => {\n+      fixture.detectChanges();\n+\n+      expect(inputFormElement.classList.length).toEqual(4);\n+      expect(inputFormElement.classList.value).toEqual(\n+        'form-control ng-untouched ng-pristine ng-invalid',\n+      );\n+\n+      dispatchEvent(new Event('input'));\n+      tick();\n+      fixture.detectChanges();\n+    });\n+  }));\n+\n+  it('Entering value in input controls and emit output events', fakeAsync(() => {\n+    fixture.componentInstance.location.customId = 'customid3';\n+    fixture.componentInstance.location.name = 'Location Name';\n+    fixture.componentInstance.location.description =\n+      'This is location Description';\n+    void fixture.whenStable().then(() => {\n+      const submitButton = submitLocation.nativeElement as HTMLInputElement;\n+      const customIdInput = locationCustomIde1.nativeElement as HTMLInputElement;\n+      const nameInput = locationNamee1.nativeElement as HTMLInputElement;\n+      const descriptionInput = locationDescriptione1.nativeElement as HTMLInputElement;\n+      customIdInput.value = 'customid3';\n+      nameInput.value = 'Location Name';\n+      descriptionInput.value = 'This is location Description';\n+      dispatchEvent(new Event('input'));\n+      fixture.detectChanges();\n+      tick();\n+      submitButton.click();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4MjkyMw=="}, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTczMzI4OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNzo1ODozMlrOGsX92Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNzo0NzoyMVrOGthPGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4MzE5Mw==", "bodyText": "This is never used.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r449183193", "createdAt": "2020-07-02T17:58:32Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.ts", "diffHunk": "@@ -1,8 +1,37 @@\n-import {Component} from '@angular/core';\n+import {Component, Input, Output, EventEmitter} from '@angular/core';\n+import {Router} from '@angular/router';\n+import {Location} from '../shared/location.model';\n+import {LocationService} from '../shared/location.service';\n+import {ToastrService} from 'ngx-toastr';\n+import {ApiResponse} from 'src/app/entity/error.model';\n+import {ApiSuccessResponse} from 'src/app/entity/sucess.model';\n \n @Component({\n   selector: 'location-add',\n   templateUrl: './add-location.component.html',\n   styleUrls: ['./add-location.component.scss'],\n })\n-export class AddLocationComponent {}\n+export class AddLocationComponent {\n+  @Input() enabled = true;\n+  @Output() onFormSubmit: EventEmitter<unknown> = new EventEmitter<unknown>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4MzY0Mw==", "bodyText": "Removed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r450383643", "createdAt": "2020-07-06T17:47:21Z", "author": {"login": "rohithd-btc"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.ts", "diffHunk": "@@ -1,8 +1,37 @@\n-import {Component} from '@angular/core';\n+import {Component, Input, Output, EventEmitter} from '@angular/core';\n+import {Router} from '@angular/router';\n+import {Location} from '../shared/location.model';\n+import {LocationService} from '../shared/location.service';\n+import {ToastrService} from 'ngx-toastr';\n+import {ApiResponse} from 'src/app/entity/error.model';\n+import {ApiSuccessResponse} from 'src/app/entity/sucess.model';\n \n @Component({\n   selector: 'location-add',\n   templateUrl: './add-location.component.html',\n   styleUrls: ['./add-location.component.scss'],\n })\n-export class AddLocationComponent {}\n+export class AddLocationComponent {\n+  @Input() enabled = true;\n+  @Output() onFormSubmit: EventEmitter<unknown> = new EventEmitter<unknown>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4MzE5Mw=="}, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTc3MjczOnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/location/shared/location.service.spec.ts", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxODoxMDo1MlrOGsYWcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNzoyMzoyNFrOGuyBjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4OTQ4OQ==", "bodyText": "401 is basically the same as 400. You don't need a test for every status code if you don't have any logic that cares", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r449189489", "createdAt": "2020-07-02T18:10:52Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/location/shared/location.service.spec.ts", "diffHunk": "@@ -118,4 +150,121 @@ describe('LocationService', () => {\n       },\n     );\n   }));\n+\n+  it('add location should return an error when the server returns a 400 ', fakeAsync(() => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4Mzc1OQ==", "bodyText": "Removed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r450383759", "createdAt": "2020-07-06T17:47:33Z", "author": {"login": "rohithd-btc"}, "path": "UR-web-app/src/app/site-coordinator/location/shared/location.service.spec.ts", "diffHunk": "@@ -118,4 +150,121 @@ describe('LocationService', () => {\n       },\n     );\n   }));\n+\n+  it('add location should return an error when the server returns a 400 ', fakeAsync(() => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4OTQ4OQ=="}, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA2MzY0OQ==", "bodyText": "I don't see a change", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r451063649", "createdAt": "2020-07-07T18:31:48Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/location/shared/location.service.spec.ts", "diffHunk": "@@ -118,4 +150,121 @@ describe('LocationService', () => {\n       },\n     );\n   }));\n+\n+  it('add location should return an error when the server returns a 400 ', fakeAsync(() => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4OTQ4OQ=="}, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcwNzI3OQ==", "bodyText": "Updated in the latest commit", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r451707279", "createdAt": "2020-07-08T17:23:24Z", "author": {"login": "rohithd-btc"}, "path": "UR-web-app/src/app/site-coordinator/location/shared/location.service.spec.ts", "diffHunk": "@@ -118,4 +150,121 @@ describe('LocationService', () => {\n       },\n     );\n   }));\n+\n+  it('add location should return an error when the server returns a 400 ', fakeAsync(() => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4OTQ4OQ=="}, "originalCommit": {"oid": "a2ba3a7364d59347f3bcc5bc6640e3cd0ed61b82"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjAxNDY1OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzoyOTozNlrOGuIn9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNzoyMDo1NlrOGux7-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAyODk4MA==", "bodyText": "\"Successfully\" should not be capitalized.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r451028980", "createdAt": "2020-07-07T17:29:36Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.ts", "diffHunk": "@@ -12,23 +13,20 @@ import {ToastrService} from 'ngx-toastr';\n export class AddLocationComponent {\n   @Input() enabled = true;\n   location = <Location>{};\n+  sub: Subscription = new Subscription();\n   constructor(\n     private readonly router: Router,\n     private readonly locationService: LocationService,\n     private readonly toastr: ToastrService,\n   ) {}\n \n   addLocation(): void {\n-    this.locationService.addLocation(this.location).subscribe(\n-      (succesResponse: Location) => {\n-        const success = succesResponse.successBean;\n-        this.toastr.success(success.message);\n-        void this.router.navigate(['/coordinator/locations']);\n-      },\n-      (errorResponse: Location) => {\n-        const errs = errorResponse.error;\n-        this.toastr.error(errs.userMessage);\n-      },\n-    );\n+    this.sub = this.locationService.addLocation(this.location).subscribe(() => {\n+      this.toastr.success('New location added Successfully');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc098f48f81653aa74eb86fe2b3e514482b9c218"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcwNTg1MA==", "bodyText": "Updated in the latest commit", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r451705850", "createdAt": "2020-07-08T17:20:56Z", "author": {"login": "rohithd-btc"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.ts", "diffHunk": "@@ -12,23 +13,20 @@ import {ToastrService} from 'ngx-toastr';\n export class AddLocationComponent {\n   @Input() enabled = true;\n   location = <Location>{};\n+  sub: Subscription = new Subscription();\n   constructor(\n     private readonly router: Router,\n     private readonly locationService: LocationService,\n     private readonly toastr: ToastrService,\n   ) {}\n \n   addLocation(): void {\n-    this.locationService.addLocation(this.location).subscribe(\n-      (succesResponse: Location) => {\n-        const success = succesResponse.successBean;\n-        this.toastr.success(success.message);\n-        void this.router.navigate(['/coordinator/locations']);\n-      },\n-      (errorResponse: Location) => {\n-        const errs = errorResponse.error;\n-        this.toastr.error(errs.userMessage);\n-      },\n-    );\n+    this.sub = this.locationService.addLocation(this.location).subscribe(() => {\n+      this.toastr.success('New location added Successfully');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAyODk4MA=="}, "originalCommit": {"oid": "bc098f48f81653aa74eb86fe2b3e514482b9c218"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjAxODQ0OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzozMDozM1rOGuIqSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNzoyMDo0OFrOGux7tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAyOTU3Ng==", "bodyText": "Don't use capitals for local variables.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r451029576", "createdAt": "2020-07-07T17:30:33Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "diffHunk": "@@ -47,49 +47,49 @@ describe('AddLocationComponent', () => {\n   beforeEach(async(() => {\n     fixture = TestBed.createComponent(AddLocationComponent);\n     component = fixture.componentInstance;\n-    submitLocation = fixture.debugElement.query(\n-      By.css('button[type=\"submit\"]'),\n-    );\n-    locationCustomIde1 = fixture.debugElement.query(\n-      By.css('input[id=locationCustomId]'),\n-    );\n-    locationNamee1 = fixture.debugElement.query(\n-      By.css('input[id=locationName]'),\n-    );\n-    locationDescriptione1 = fixture.debugElement.query(\n-      By.css('input[id=locationDescription]'),\n-    );\n \n+    submitLocation = fixture.debugElement.query(By.css('[name=\"add\"]'));\n+    customIdInput = fixture.debugElement.query(By.css('[name=\"customId\"]'));\n+    nameInput = fixture.debugElement.query(By.css('[name=\"name\"]'));\n+    descriptionInput = fixture.debugElement.query(\n+      By.css('[name=\"description\"]'),\n+    );\n     fixture.detectChanges();\n   }));\n \n   it('should create', () => {\n     expect(component).toBeTruthy();\n   });\n-  it('should not create a template-driven form when ngNoForm is used', () => {\n+\n+  it('should not show a validation error if the input field is filled', () => {\n+    component.location.customId = 'customid3';\n+    component.location.name = 'Location Name';\n+    component.location.description = 'This is location Description';\n     fixture.detectChanges();\n-    expect(fixture.debugElement.children[0].providerTokens.length).toEqual(0);\n+    const Errormsg = fixture.debugElement.query(By.css('.validation-error'));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc098f48f81653aa74eb86fe2b3e514482b9c218"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcwNTc4Mw==", "bodyText": "Updated in the latest commit", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r451705783", "createdAt": "2020-07-08T17:20:48Z", "author": {"login": "rohithd-btc"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "diffHunk": "@@ -47,49 +47,49 @@ describe('AddLocationComponent', () => {\n   beforeEach(async(() => {\n     fixture = TestBed.createComponent(AddLocationComponent);\n     component = fixture.componentInstance;\n-    submitLocation = fixture.debugElement.query(\n-      By.css('button[type=\"submit\"]'),\n-    );\n-    locationCustomIde1 = fixture.debugElement.query(\n-      By.css('input[id=locationCustomId]'),\n-    );\n-    locationNamee1 = fixture.debugElement.query(\n-      By.css('input[id=locationName]'),\n-    );\n-    locationDescriptione1 = fixture.debugElement.query(\n-      By.css('input[id=locationDescription]'),\n-    );\n \n+    submitLocation = fixture.debugElement.query(By.css('[name=\"add\"]'));\n+    customIdInput = fixture.debugElement.query(By.css('[name=\"customId\"]'));\n+    nameInput = fixture.debugElement.query(By.css('[name=\"name\"]'));\n+    descriptionInput = fixture.debugElement.query(\n+      By.css('[name=\"description\"]'),\n+    );\n     fixture.detectChanges();\n   }));\n \n   it('should create', () => {\n     expect(component).toBeTruthy();\n   });\n-  it('should not create a template-driven form when ngNoForm is used', () => {\n+\n+  it('should not show a validation error if the input field is filled', () => {\n+    component.location.customId = 'customid3';\n+    component.location.name = 'Location Name';\n+    component.location.description = 'This is location Description';\n     fixture.detectChanges();\n-    expect(fixture.debugElement.children[0].providerTokens.length).toEqual(0);\n+    const Errormsg = fixture.debugElement.query(By.css('.validation-error'));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAyOTU3Ng=="}, "originalCommit": {"oid": "bc098f48f81653aa74eb86fe2b3e514482b9c218"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjIyMjc2OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/location/location-list/location-list.component.ts", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODoyOTo1MFrOGuKrWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMDozNjozNlrOGu4VYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA2MjYxOA==", "bodyText": "where is this.locations being used other than here?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r451062618", "createdAt": "2020-07-07T18:29:50Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/location/location-list/location-list.component.ts", "diffHunk": "@@ -33,7 +33,7 @@ export class LocationListComponent implements OnInit {\n     ).pipe(\n       map(([locations, query]) => {\n         this.locations = locations;\n-        return locations.filter(\n+        return this.locations.filter(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1516b986848506affda69fb6c267b99dfdf8228a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcwNzA2Nw==", "bodyText": "In test case also this is being used", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r451707067", "createdAt": "2020-07-08T17:23:02Z", "author": {"login": "rohithd-btc"}, "path": "UR-web-app/src/app/site-coordinator/location/location-list/location-list.component.ts", "diffHunk": "@@ -33,7 +33,7 @@ export class LocationListComponent implements OnInit {\n     ).pipe(\n       map(([locations, query]) => {\n         this.locations = locations;\n-        return locations.filter(\n+        return this.locations.filter(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA2MjYxOA=="}, "originalCommit": {"oid": "1516b986848506affda69fb6c267b99dfdf8228a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgxMDY1Ng==", "bodyText": "You should just be accessing the locations observable. If your code doesn't use it you shouldn't be adding it just to test it.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r451810656", "createdAt": "2020-07-08T20:36:36Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/location/location-list/location-list.component.ts", "diffHunk": "@@ -33,7 +33,7 @@ export class LocationListComponent implements OnInit {\n     ).pipe(\n       map(([locations, query]) => {\n         this.locations = locations;\n-        return locations.filter(\n+        return this.locations.filter(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA2MjYxOA=="}, "originalCommit": {"oid": "1516b986848506affda69fb6c267b99dfdf8228a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNjkxMjAwOnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMDoyMjoxOVrOGu35PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjowNzoxMlrOGyyBhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwMzQ1Mw==", "bodyText": "You're calling this function on line 118, you shouldn't be calling this API in this test.\nYou need to make sure your tests are working correctly. A bug in a test is the same as a bug anywhere else in the code.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r451803453", "createdAt": "2020-07-08T20:22:19Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "diffHunk": "@@ -66,55 +77,52 @@ describe('AddLocationComponent', () => {\n     component.location.name = 'Location Name';\n     component.location.description = 'This is location Description';\n     fixture.detectChanges();\n-    const Errormsg = fixture.debugElement.query(By.css('.validation-error'));\n-    expect(Errormsg).toBeFalsy();\n+    const errorMsg = fixture.debugElement.query(By.css('.validation-error'));\n+    expect(errorMsg).toBeFalsy();\n   });\n \n-  it('Locations value to input properties on form load', () => {\n+  it('should check form submit button is disabled when loaded', () => {\n     const submitButton = submitLocation.nativeElement as HTMLInputElement;\n     component.enabled = false;\n     fixture.detectChanges();\n     expect(submitButton.disabled).toBeTruthy();\n   });\n \n-  it('Entering value in input controls and check the same value', fakeAsync(() => {\n+  it('Entering value in input controls and check the same value and submit', fakeAsync(async () => {\n+    const expectedResponse = {\n+      id: 0,\n+      customId: 'customid3',\n+      name: 'Location Name',\n+      description: 'This is location Description',\n+      status: '1',\n+      studiesCount: 0,\n+      successBean: {message: 'location added successfully', code: '200 ok'},\n+      error: {detailMessage: '', type: '', userMessage: ''},\n+    };\n     fixture.componentInstance.location.customId = 'customid3';\n     fixture.componentInstance.location.name = 'Location Name';\n     fixture.componentInstance.location.description =\n       'This is location Description';\n-    void fixture.whenStable().then(() => {\n-      const submitButton = submitLocation.nativeElement as HTMLInputElement;\n-      const customIdInputs = customIdInput.nativeElement as HTMLInputElement;\n-      const nameInputs = nameInput.nativeElement as HTMLInputElement;\n-      const descriptionInputs = descriptionInput.nativeElement as HTMLInputElement;\n-      customIdInputs.value = 'customid3';\n-      nameInputs.value = 'Location Name';\n-      descriptionInputs.value = 'This is location Description';\n-      dispatchEvent(new Event('input'));\n-      fixture.detectChanges();\n-      tick();\n-      submitButton.click();\n-      fixture.detectChanges();\n-      expect(component.location.customId).toEqual('customid3');\n-      expect(component.location.name).toEqual('Location Name');\n-      expect(component.location.description).toEqual(\n-        'This is location Description',\n-      );\n-    });\n-  }));\n-\n-  it('should reset the form submit state when reset button is clicked', fakeAsync(() => {\n-    const forms = fixture.debugElement.children[0].injector.get(NgForm);\n-    const formEl = fixture.debugElement.query(By.css('form'));\n-\n-    dispatchEvent(new Event(formEl.nativeElement));\n+    await fixture.whenStable();\n+    const submitButton = submitLocation.nativeElement as HTMLInputElement;\n+    const customIdInputs = customIdInput.nativeElement as HTMLInputElement;\n+    const nameInputs = nameInput.nativeElement as HTMLInputElement;\n+    const descriptionInputs = descriptionInput.nativeElement as HTMLInputElement;\n+    customIdInputs.value = 'customid3';\n+    nameInputs.value = 'Location Name';\n+    descriptionInputs.value = 'This is location Description';\n+    dispatchEvent(new Event('input'));\n     fixture.detectChanges();\n     tick();\n-    expect(forms.valid).toBe(true);\n-\n-    dispatchEvent(new Event(formEl.nativeElement));\n+    submitButton.click();\n+    locationsServiceSpy.addLocation(expectedResponse);\n     fixture.detectChanges();\n-    tick();\n-    expect(forms.valid).toBe(true);\n+    expect(locationsServiceSpy.addLocation).toHaveBeenCalled();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "328ab5e9df28edfd99102aaee6c2be5fef83ccc4"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkwMTU3Mg==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r455901572", "createdAt": "2020-07-16T16:07:12Z", "author": {"login": "firdosebtc1"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "diffHunk": "@@ -66,55 +77,52 @@ describe('AddLocationComponent', () => {\n     component.location.name = 'Location Name';\n     component.location.description = 'This is location Description';\n     fixture.detectChanges();\n-    const Errormsg = fixture.debugElement.query(By.css('.validation-error'));\n-    expect(Errormsg).toBeFalsy();\n+    const errorMsg = fixture.debugElement.query(By.css('.validation-error'));\n+    expect(errorMsg).toBeFalsy();\n   });\n \n-  it('Locations value to input properties on form load', () => {\n+  it('should check form submit button is disabled when loaded', () => {\n     const submitButton = submitLocation.nativeElement as HTMLInputElement;\n     component.enabled = false;\n     fixture.detectChanges();\n     expect(submitButton.disabled).toBeTruthy();\n   });\n \n-  it('Entering value in input controls and check the same value', fakeAsync(() => {\n+  it('Entering value in input controls and check the same value and submit', fakeAsync(async () => {\n+    const expectedResponse = {\n+      id: 0,\n+      customId: 'customid3',\n+      name: 'Location Name',\n+      description: 'This is location Description',\n+      status: '1',\n+      studiesCount: 0,\n+      successBean: {message: 'location added successfully', code: '200 ok'},\n+      error: {detailMessage: '', type: '', userMessage: ''},\n+    };\n     fixture.componentInstance.location.customId = 'customid3';\n     fixture.componentInstance.location.name = 'Location Name';\n     fixture.componentInstance.location.description =\n       'This is location Description';\n-    void fixture.whenStable().then(() => {\n-      const submitButton = submitLocation.nativeElement as HTMLInputElement;\n-      const customIdInputs = customIdInput.nativeElement as HTMLInputElement;\n-      const nameInputs = nameInput.nativeElement as HTMLInputElement;\n-      const descriptionInputs = descriptionInput.nativeElement as HTMLInputElement;\n-      customIdInputs.value = 'customid3';\n-      nameInputs.value = 'Location Name';\n-      descriptionInputs.value = 'This is location Description';\n-      dispatchEvent(new Event('input'));\n-      fixture.detectChanges();\n-      tick();\n-      submitButton.click();\n-      fixture.detectChanges();\n-      expect(component.location.customId).toEqual('customid3');\n-      expect(component.location.name).toEqual('Location Name');\n-      expect(component.location.description).toEqual(\n-        'This is location Description',\n-      );\n-    });\n-  }));\n-\n-  it('should reset the form submit state when reset button is clicked', fakeAsync(() => {\n-    const forms = fixture.debugElement.children[0].injector.get(NgForm);\n-    const formEl = fixture.debugElement.query(By.css('form'));\n-\n-    dispatchEvent(new Event(formEl.nativeElement));\n+    await fixture.whenStable();\n+    const submitButton = submitLocation.nativeElement as HTMLInputElement;\n+    const customIdInputs = customIdInput.nativeElement as HTMLInputElement;\n+    const nameInputs = nameInput.nativeElement as HTMLInputElement;\n+    const descriptionInputs = descriptionInput.nativeElement as HTMLInputElement;\n+    customIdInputs.value = 'customid3';\n+    nameInputs.value = 'Location Name';\n+    descriptionInputs.value = 'This is location Description';\n+    dispatchEvent(new Event('input'));\n     fixture.detectChanges();\n     tick();\n-    expect(forms.valid).toBe(true);\n-\n-    dispatchEvent(new Event(formEl.nativeElement));\n+    submitButton.click();\n+    locationsServiceSpy.addLocation(expectedResponse);\n     fixture.detectChanges();\n-    tick();\n-    expect(forms.valid).toBe(true);\n+    expect(locationsServiceSpy.addLocation).toHaveBeenCalled();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwMzQ1Mw=="}, "originalCommit": {"oid": "328ab5e9df28edfd99102aaee6c2be5fef83ccc4"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNjkxNDQxOnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMDoyMjo1N1rOGu36uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjowNzowOVrOGyyBYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwMzgzMw==", "bodyText": "prefer toHaveBeenCalledTimes(1)", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r451803833", "createdAt": "2020-07-08T20:22:57Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "diffHunk": "@@ -66,55 +77,52 @@ describe('AddLocationComponent', () => {\n     component.location.name = 'Location Name';\n     component.location.description = 'This is location Description';\n     fixture.detectChanges();\n-    const Errormsg = fixture.debugElement.query(By.css('.validation-error'));\n-    expect(Errormsg).toBeFalsy();\n+    const errorMsg = fixture.debugElement.query(By.css('.validation-error'));\n+    expect(errorMsg).toBeFalsy();\n   });\n \n-  it('Locations value to input properties on form load', () => {\n+  it('should check form submit button is disabled when loaded', () => {\n     const submitButton = submitLocation.nativeElement as HTMLInputElement;\n     component.enabled = false;\n     fixture.detectChanges();\n     expect(submitButton.disabled).toBeTruthy();\n   });\n \n-  it('Entering value in input controls and check the same value', fakeAsync(() => {\n+  it('Entering value in input controls and check the same value and submit', fakeAsync(async () => {\n+    const expectedResponse = {\n+      id: 0,\n+      customId: 'customid3',\n+      name: 'Location Name',\n+      description: 'This is location Description',\n+      status: '1',\n+      studiesCount: 0,\n+      successBean: {message: 'location added successfully', code: '200 ok'},\n+      error: {detailMessage: '', type: '', userMessage: ''},\n+    };\n     fixture.componentInstance.location.customId = 'customid3';\n     fixture.componentInstance.location.name = 'Location Name';\n     fixture.componentInstance.location.description =\n       'This is location Description';\n-    void fixture.whenStable().then(() => {\n-      const submitButton = submitLocation.nativeElement as HTMLInputElement;\n-      const customIdInputs = customIdInput.nativeElement as HTMLInputElement;\n-      const nameInputs = nameInput.nativeElement as HTMLInputElement;\n-      const descriptionInputs = descriptionInput.nativeElement as HTMLInputElement;\n-      customIdInputs.value = 'customid3';\n-      nameInputs.value = 'Location Name';\n-      descriptionInputs.value = 'This is location Description';\n-      dispatchEvent(new Event('input'));\n-      fixture.detectChanges();\n-      tick();\n-      submitButton.click();\n-      fixture.detectChanges();\n-      expect(component.location.customId).toEqual('customid3');\n-      expect(component.location.name).toEqual('Location Name');\n-      expect(component.location.description).toEqual(\n-        'This is location Description',\n-      );\n-    });\n-  }));\n-\n-  it('should reset the form submit state when reset button is clicked', fakeAsync(() => {\n-    const forms = fixture.debugElement.children[0].injector.get(NgForm);\n-    const formEl = fixture.debugElement.query(By.css('form'));\n-\n-    dispatchEvent(new Event(formEl.nativeElement));\n+    await fixture.whenStable();\n+    const submitButton = submitLocation.nativeElement as HTMLInputElement;\n+    const customIdInputs = customIdInput.nativeElement as HTMLInputElement;\n+    const nameInputs = nameInput.nativeElement as HTMLInputElement;\n+    const descriptionInputs = descriptionInput.nativeElement as HTMLInputElement;\n+    customIdInputs.value = 'customid3';\n+    nameInputs.value = 'Location Name';\n+    descriptionInputs.value = 'This is location Description';\n+    dispatchEvent(new Event('input'));\n     fixture.detectChanges();\n     tick();\n-    expect(forms.valid).toBe(true);\n-\n-    dispatchEvent(new Event(formEl.nativeElement));\n+    submitButton.click();\n+    locationsServiceSpy.addLocation(expectedResponse);\n     fixture.detectChanges();\n-    tick();\n-    expect(forms.valid).toBe(true);\n+    expect(locationsServiceSpy.addLocation).toHaveBeenCalled();\n+    expect(locationsServiceSpy.addLocation.calls.count()).toBe(1, 'one call');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "328ab5e9df28edfd99102aaee6c2be5fef83ccc4"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkwMTUzNg==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r455901536", "createdAt": "2020-07-16T16:07:09Z", "author": {"login": "firdosebtc1"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.spec.ts", "diffHunk": "@@ -66,55 +77,52 @@ describe('AddLocationComponent', () => {\n     component.location.name = 'Location Name';\n     component.location.description = 'This is location Description';\n     fixture.detectChanges();\n-    const Errormsg = fixture.debugElement.query(By.css('.validation-error'));\n-    expect(Errormsg).toBeFalsy();\n+    const errorMsg = fixture.debugElement.query(By.css('.validation-error'));\n+    expect(errorMsg).toBeFalsy();\n   });\n \n-  it('Locations value to input properties on form load', () => {\n+  it('should check form submit button is disabled when loaded', () => {\n     const submitButton = submitLocation.nativeElement as HTMLInputElement;\n     component.enabled = false;\n     fixture.detectChanges();\n     expect(submitButton.disabled).toBeTruthy();\n   });\n \n-  it('Entering value in input controls and check the same value', fakeAsync(() => {\n+  it('Entering value in input controls and check the same value and submit', fakeAsync(async () => {\n+    const expectedResponse = {\n+      id: 0,\n+      customId: 'customid3',\n+      name: 'Location Name',\n+      description: 'This is location Description',\n+      status: '1',\n+      studiesCount: 0,\n+      successBean: {message: 'location added successfully', code: '200 ok'},\n+      error: {detailMessage: '', type: '', userMessage: ''},\n+    };\n     fixture.componentInstance.location.customId = 'customid3';\n     fixture.componentInstance.location.name = 'Location Name';\n     fixture.componentInstance.location.description =\n       'This is location Description';\n-    void fixture.whenStable().then(() => {\n-      const submitButton = submitLocation.nativeElement as HTMLInputElement;\n-      const customIdInputs = customIdInput.nativeElement as HTMLInputElement;\n-      const nameInputs = nameInput.nativeElement as HTMLInputElement;\n-      const descriptionInputs = descriptionInput.nativeElement as HTMLInputElement;\n-      customIdInputs.value = 'customid3';\n-      nameInputs.value = 'Location Name';\n-      descriptionInputs.value = 'This is location Description';\n-      dispatchEvent(new Event('input'));\n-      fixture.detectChanges();\n-      tick();\n-      submitButton.click();\n-      fixture.detectChanges();\n-      expect(component.location.customId).toEqual('customid3');\n-      expect(component.location.name).toEqual('Location Name');\n-      expect(component.location.description).toEqual(\n-        'This is location Description',\n-      );\n-    });\n-  }));\n-\n-  it('should reset the form submit state when reset button is clicked', fakeAsync(() => {\n-    const forms = fixture.debugElement.children[0].injector.get(NgForm);\n-    const formEl = fixture.debugElement.query(By.css('form'));\n-\n-    dispatchEvent(new Event(formEl.nativeElement));\n+    await fixture.whenStable();\n+    const submitButton = submitLocation.nativeElement as HTMLInputElement;\n+    const customIdInputs = customIdInput.nativeElement as HTMLInputElement;\n+    const nameInputs = nameInput.nativeElement as HTMLInputElement;\n+    const descriptionInputs = descriptionInput.nativeElement as HTMLInputElement;\n+    customIdInputs.value = 'customid3';\n+    nameInputs.value = 'Location Name';\n+    descriptionInputs.value = 'This is location Description';\n+    dispatchEvent(new Event('input'));\n     fixture.detectChanges();\n     tick();\n-    expect(forms.valid).toBe(true);\n-\n-    dispatchEvent(new Event(formEl.nativeElement));\n+    submitButton.click();\n+    locationsServiceSpy.addLocation(expectedResponse);\n     fixture.detectChanges();\n-    tick();\n-    expect(forms.valid).toBe(true);\n+    expect(locationsServiceSpy.addLocation).toHaveBeenCalled();\n+    expect(locationsServiceSpy.addLocation.calls.count()).toBe(1, 'one call');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwMzgzMw=="}, "originalCommit": {"oid": "328ab5e9df28edfd99102aaee6c2be5fef83ccc4"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNjk1OTQxOnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMDozNzoxNVrOGu4Wqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjowNjo0NFrOGyyAUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgxMDk4Nw==", "bodyText": "You deleted the subscription.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r451810987", "createdAt": "2020-07-08T20:37:15Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.ts", "diffHunk": "@@ -21,8 +21,8 @@ export class AddLocationComponent {\n   ) {}\n \n   addLocation(): void {\n-    this.sub = this.locationService.addLocation(this.location).subscribe(() => {\n-      this.toastr.success('New location added Successfully');\n+    this.locationService.addLocation(this.location).subscribe(() => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "328ab5e9df28edfd99102aaee6c2be5fef83ccc4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkwMTI2Ng==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/588#discussion_r455901266", "createdAt": "2020-07-16T16:06:44Z", "author": {"login": "firdosebtc1"}, "path": "UR-web-app/src/app/site-coordinator/location/add-location/add-location.component.ts", "diffHunk": "@@ -21,8 +21,8 @@ export class AddLocationComponent {\n   ) {}\n \n   addLocation(): void {\n-    this.sub = this.locationService.addLocation(this.location).subscribe(() => {\n-      this.toastr.success('New location added Successfully');\n+    this.locationService.addLocation(this.location).subscribe(() => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgxMDk4Nw=="}, "originalCommit": {"oid": "328ab5e9df28edfd99102aaee6c2be5fef83ccc4"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2242, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}