{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxNDc1MTg3", "number": 785, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTozMTozNVrOEbA0fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDowMToyMlrOEblerg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzYwNDQ0OnYy", "diffSide": "RIGHT", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/exceptions/RestResponseErrorHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTozMTozNVrOHEx0Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxNDo0Njo1MFrOHFNobQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3MjQ5NA==", "bodyText": "why is unauthorized the very last fallback?\nthis is something we should identify at the very start of a call and not risk potentially leaking other information out to unauthorized users.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474772494", "createdAt": "2020-08-21T15:31:35Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/exceptions/RestResponseErrorHandler.java", "diffHunk": "@@ -38,6 +38,8 @@ public void handleError(ClientHttpResponse response) throws IOException {\n         String code = JsonPath.read(responseBody, \"$.error_code\");\n         String description = JsonPath.read(responseBody, \"$.error_description\");\n         errorCode = ErrorCode.fromCodeAndDescription(code, description);\n+      } else if (HttpStatus.UNAUTHORIZED == response.getStatusCode()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyODI2OQ==", "bodyText": "Fixed review comment", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475228269", "createdAt": "2020-08-23T14:46:50Z", "author": {"login": "madhurya-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/exceptions/RestResponseErrorHandler.java", "diffHunk": "@@ -38,6 +38,8 @@ public void handleError(ClientHttpResponse response) throws IOException {\n         String code = JsonPath.read(responseBody, \"$.error_code\");\n         String description = JsonPath.read(responseBody, \"$.error_description\");\n         errorCode = ErrorCode.fromCodeAndDescription(code, description);\n+      } else if (HttpStatus.UNAUTHORIZED == response.getStatusCode()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3MjQ5NA=="}, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzYwNzA4OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationForm.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTozMjoyN1rOHEx1yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzo1OTo1MVrOHFmVrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3MjkzOA==", "bodyText": "static imports should be added below normal imports", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474772938", "createdAt": "2020-08-21T15:32:27Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationForm.java", "diffHunk": "@@ -8,12 +8,20 @@\n \n package com.google.cloud.healthcare.fdamystudies.beans;\n \n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.PASSWORD_REGEX;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.PASSWORD_REGEX_MESSAGE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyNzM4Nw==", "bodyText": "All developers IDE configured to have static import first and then import statements. We've used this settings for all the PR's raised so far. Please let me know the correct order of \"Organize Imports\", will ask the developers to change the IDE settings.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475227387", "createdAt": "2020-08-23T14:39:02Z", "author": {"login": "dhanyak-btc"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationForm.java", "diffHunk": "@@ -8,12 +8,20 @@\n \n package com.google.cloud.healthcare.fdamystudies.beans;\n \n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.PASSWORD_REGEX;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.PASSWORD_REGEX_MESSAGE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3MjkzOA=="}, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYzMzA2OQ==", "bodyText": "My mistake, You are correct.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475633069", "createdAt": "2020-08-24T13:59:51Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationForm.java", "diffHunk": "@@ -8,12 +8,20 @@\n \n package com.google.cloud.healthcare.fdamystudies.beans;\n \n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.PASSWORD_REGEX;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.PASSWORD_REGEX_MESSAGE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3MjkzOA=="}, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzYwOTIwOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationForm.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTozMzowNFrOHEx3IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNTo1OToyNFrOHFrtLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3MzI4MA==", "bodyText": "Can we use the standard length for this instead of a onetime size?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474773280", "createdAt": "2020-08-21T15:33:04Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationForm.java", "diffHunk": "@@ -24,8 +32,18 @@\n   private String userId;\n   private String firstName;\n   private String lastName;\n-  @NotNull private String emailId;\n+\n+  @ToString.Exclude\n+  @NotBlank\n+  @Size(max = 320)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyNzYwNQ==", "bodyText": "I referred this SO post: What is the maximum length of a valid email address?\nso we've used max length value as 320.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475227605", "createdAt": "2020-08-23T14:41:14Z", "author": {"login": "dhanyak-btc"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationForm.java", "diffHunk": "@@ -24,8 +32,18 @@\n   private String userId;\n   private String firstName;\n   private String lastName;\n-  @NotNull private String emailId;\n+\n+  @ToString.Exclude\n+  @NotBlank\n+  @Size(max = 320)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3MzI4MA=="}, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYzMTMxNA==", "bodyText": "out of scope for this PR, but we should move this into the length constants and make sure every place is using the same length", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475631314", "createdAt": "2020-08-24T13:58:24Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationForm.java", "diffHunk": "@@ -24,8 +32,18 @@\n   private String userId;\n   private String firstName;\n   private String lastName;\n-  @NotNull private String emailId;\n+\n+  @ToString.Exclude\n+  @NotBlank\n+  @Size(max = 320)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3MzI4MA=="}, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYzMzczNQ==", "bodyText": "not that it matters much but the post mentions 254 character as the max length", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475633735", "createdAt": "2020-08-24T14:00:20Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationForm.java", "diffHunk": "@@ -24,8 +32,18 @@\n   private String userId;\n   private String firstName;\n   private String lastName;\n-  @NotNull private String emailId;\n+\n+  @ToString.Exclude\n+  @NotBlank\n+  @Size(max = 320)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3MzI4MA=="}, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcyMTAwNw==", "bodyText": "Fixed for this PR, but needs to be addressed in multiple places, Issue: #797 We'll fix this in follow-up PR.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475721007", "createdAt": "2020-08-24T15:59:24Z", "author": {"login": "madhurya-btc"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationForm.java", "diffHunk": "@@ -24,8 +32,18 @@\n   private String userId;\n   private String firstName;\n   private String lastName;\n-  @NotNull private String emailId;\n+\n+  @ToString.Exclude\n+  @NotBlank\n+  @Size(max = 320)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3MzI4MA=="}, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzYxNTkwOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationForm.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTozNDo1OFrOHEx7Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxNDo0Mjo1NVrOHFNmpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3NDM1MA==", "bodyText": "we just removed orgId, why is it added again here?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474774350", "createdAt": "2020-08-21T15:34:58Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationForm.java", "diffHunk": "@@ -35,6 +53,8 @@\n   private int status;\n   private boolean tempPassword;\n   private LocalDateTime tempPasswordDate;\n+  private String appId;\n+  private String orgId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyNzgxMg==", "bodyText": "This needs to be addressed for all the services, Issue: #688 We'll fix this in follow-up PR.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475227812", "createdAt": "2020-08-23T14:42:55Z", "author": {"login": "dhanyak-btc"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationForm.java", "diffHunk": "@@ -35,6 +53,8 @@\n   private int status;\n   private boolean tempPassword;\n   private LocalDateTime tempPasswordDate;\n+  private String appId;\n+  private String orgId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3NDM1MA=="}, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzYxNzgyOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/ApplicationPropertyConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTozNTozMVrOHEx8gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxNDo0MzoxMlrOHFNmwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3NDY1Nw==", "bodyText": "same here, I believe this should be removed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474774657", "createdAt": "2020-08-21T15:35:31Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/ApplicationPropertyConfiguration.java", "diffHunk": "@@ -125,4 +125,7 @@\n \n   @Value(\"${auth.server.deactivateurl}\")\n   private String authServerDeactivateUrl;\n+\n+  @Value(\"${org.name}\")\n+  private String orgName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyNzg0MQ==", "bodyText": "This needs to be addressed for all the services, Issue: #688 We'll fix this in follow-up PR.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475227841", "createdAt": "2020-08-23T14:43:12Z", "author": {"login": "dhanyak-btc"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/ApplicationPropertyConfiguration.java", "diffHunk": "@@ -125,4 +125,7 @@\n \n   @Value(\"${auth.server.deactivateurl}\")\n   private String authServerDeactivateUrl;\n+\n+  @Value(\"${org.name}\")\n+  private String orgName;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3NDY1Nw=="}, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Nzg0MzY4OnYy", "diffSide": "RIGHT", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationResponse.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjo0NToxOVrOHE0Iow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxNDo0NjoyOFrOHFNoRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxMDUzMQ==", "bodyText": "maybe remove lombok.ToString? since you are excluding all the fields", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474810531", "createdAt": "2020-08-21T16:45:19Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationResponse.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.beans;\n+\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.Setter;\n+import lombok.ToString;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyODIyOQ==", "bodyText": "Fixed review comment.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475228229", "createdAt": "2020-08-23T14:46:28Z", "author": {"login": "madhurya-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationResponse.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.beans;\n+\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.Setter;\n+import lombok.ToString;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxMDUzMQ=="}, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Nzg1MTIwOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/UserRegistrationController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjo0NzoyN1rOHE0NIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxNDo0Mzo0MVrOHFNm9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxMTY4Mw==", "bodyText": "remove orgId?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474811683", "createdAt": "2020-08-21T16:47:27Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/UserRegistrationController.java", "diffHunk": "@@ -74,230 +43,19 @@\n   }\n \n   @PostMapping(\"/register\")\n-  public ResponseEntity<?> registerUser(\n-      @Valid @RequestBody UserRegistrationForm userForm,\n+  public ResponseEntity<UserRegistrationResponse> registerUser(\n+      @Valid @RequestBody UserRegistrationForm user,\n       @RequestHeader(\"appId\") String appId,\n       @RequestHeader(\"orgId\") String orgId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyNzg5NQ==", "bodyText": "This needs to be addressed for all the services, Issue: #688 We'll fix this in follow-up PR.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475227895", "createdAt": "2020-08-23T14:43:41Z", "author": {"login": "dhanyak-btc"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/UserRegistrationController.java", "diffHunk": "@@ -74,230 +43,19 @@\n   }\n \n   @PostMapping(\"/register\")\n-  public ResponseEntity<?> registerUser(\n-      @Valid @RequestBody UserRegistrationForm userForm,\n+  public ResponseEntity<UserRegistrationResponse> registerUser(\n+      @Valid @RequestBody UserRegistrationForm user,\n       @RequestHeader(\"appId\") String appId,\n       @RequestHeader(\"orgId\") String orgId,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxMTY4Mw=="}, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Nzg2ODM1OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserManagementProfileService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjo1Mjo1NlrOHE0XiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxNDo0NjoyMlrOHFNoNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxNDM0NA==", "bodyText": "nit: rename to deactivateAcct to be consistent with the casing in DeactivateAcctBean", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474814344", "createdAt": "2020-08-21T16:52:56Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserManagementProfileService.java", "diffHunk": "@@ -33,8 +33,7 @@ public UserDetailsBO getParticipantDetailsByEmail(\n \n   public UserDetailsBO saveParticipant(UserDetailsBO participant);\n \n-  public String deActivateAcct(\n-      String userId, DeactivateAcctBean deactivateBean, String accessToken, String clientToken);\n+  public String deActivateAcct(String userId, DeactivateAcctBean deactivateBean);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyODIxMg==", "bodyText": "Fixed review comment", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475228212", "createdAt": "2020-08-23T14:46:22Z", "author": {"login": "madhurya-btc"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserManagementProfileService.java", "diffHunk": "@@ -33,8 +33,7 @@ public UserDetailsBO getParticipantDetailsByEmail(\n \n   public UserDetailsBO saveParticipant(UserDetailsBO participant);\n \n-  public String deActivateAcct(\n-      String userId, DeactivateAcctBean deactivateBean, String accessToken, String clientToken);\n+  public String deActivateAcct(String userId, DeactivateAcctBean deactivateBean);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxNDM0NA=="}, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzkwOTk3OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserRegistrationServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzowNjoxMFrOHE0wvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxNDo0ODozMlrOHFNpCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMDc5Ng==", "bodyText": "please remove", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474820796", "createdAt": "2020-08-21T17:06:10Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserRegistrationServiceImpl.java", "diffHunk": "@@ -0,0 +1,179 @@\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.ErrorCode.EMAIL_SEND_FAILED_EXCEPTION;\n+import static com.google.cloud.healthcare.fdamystudies.common.ErrorCode.USER_ALREADY_EXISTS;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.AppOrgInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationForm;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.common.UserAccountStatus;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.dao.CommonDao;\n+import com.google.cloud.healthcare.fdamystudies.exceptions.ErrorCodeException;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserDetailsBORepository;\n+import com.google.cloud.healthcare.fdamystudies.usermgmt.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.util.MyStudiesUserRegUtil;\n+import java.time.LocalDateTime;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Service;\n+import org.springframework.web.client.RestTemplate;\n+\n+@Service\n+public class UserRegistrationServiceImpl implements UserRegistrationService {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserRegistrationServiceImpl.class.getName());\n+\n+  @Autowired private UserDetailsBORepository userDetailsRepository;\n+\n+  @Autowired private CommonDao commonDao;\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private RestTemplate restTemplate;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @Autowired private EmailService emailService;\n+\n+  @Value(\"${register.url}\")\n+  private String authRegisterUrl;\n+\n+  @Value(\"${email.code.expire_time}\")\n+  private long expireTime;\n+\n+  @Override\n+  public UserRegistrationResponse register(UserRegistrationForm user) {\n+    logger.entry(\"begin register()\");\n+\n+    // find appInfoId using appId\n+    AppOrgInfoBean appOrgInfoBean =\n+        commonDao.getUserAppDetailsByAllApi(user.getUserId(), user.getAppId(), user.getOrgId());\n+\n+    // find user by email and appId\n+    Optional<UserDetailsBO> optUserDetails =\n+        userDetailsRepository.findByEmailAndAppInfoId(\n+            user.getEmailId(), appOrgInfoBean.getAppInfoId());\n+\n+    // Return USER_ALREADY_EXISTS error code if user account already exists for the given email\n+    UserDetailsBO userDetailsBO = new UserDetailsBO();\n+    if (optUserDetails.isPresent()) {\n+      userDetailsBO = optUserDetails.get();\n+      if (StringUtils.isNotEmpty(userDetailsBO.getUserId())) {\n+        if (generateVerificationCode(userDetailsBO)) {\n+          generateAndSaveVerificationCode(userDetailsBO);\n+        }\n+\n+        logger.warn(USER_ALREADY_EXISTS.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyODQyNA==", "bodyText": "Fixed review comment.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475228424", "createdAt": "2020-08-23T14:48:32Z", "author": {"login": "madhurya-btc"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserRegistrationServiceImpl.java", "diffHunk": "@@ -0,0 +1,179 @@\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.ErrorCode.EMAIL_SEND_FAILED_EXCEPTION;\n+import static com.google.cloud.healthcare.fdamystudies.common.ErrorCode.USER_ALREADY_EXISTS;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.AppOrgInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationForm;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.common.UserAccountStatus;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.dao.CommonDao;\n+import com.google.cloud.healthcare.fdamystudies.exceptions.ErrorCodeException;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserDetailsBORepository;\n+import com.google.cloud.healthcare.fdamystudies.usermgmt.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.util.MyStudiesUserRegUtil;\n+import java.time.LocalDateTime;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Service;\n+import org.springframework.web.client.RestTemplate;\n+\n+@Service\n+public class UserRegistrationServiceImpl implements UserRegistrationService {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserRegistrationServiceImpl.class.getName());\n+\n+  @Autowired private UserDetailsBORepository userDetailsRepository;\n+\n+  @Autowired private CommonDao commonDao;\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private RestTemplate restTemplate;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @Autowired private EmailService emailService;\n+\n+  @Value(\"${register.url}\")\n+  private String authRegisterUrl;\n+\n+  @Value(\"${email.code.expire_time}\")\n+  private long expireTime;\n+\n+  @Override\n+  public UserRegistrationResponse register(UserRegistrationForm user) {\n+    logger.entry(\"begin register()\");\n+\n+    // find appInfoId using appId\n+    AppOrgInfoBean appOrgInfoBean =\n+        commonDao.getUserAppDetailsByAllApi(user.getUserId(), user.getAppId(), user.getOrgId());\n+\n+    // find user by email and appId\n+    Optional<UserDetailsBO> optUserDetails =\n+        userDetailsRepository.findByEmailAndAppInfoId(\n+            user.getEmailId(), appOrgInfoBean.getAppInfoId());\n+\n+    // Return USER_ALREADY_EXISTS error code if user account already exists for the given email\n+    UserDetailsBO userDetailsBO = new UserDetailsBO();\n+    if (optUserDetails.isPresent()) {\n+      userDetailsBO = optUserDetails.get();\n+      if (StringUtils.isNotEmpty(userDetailsBO.getUserId())) {\n+        if (generateVerificationCode(userDetailsBO)) {\n+          generateAndSaveVerificationCode(userDetailsBO);\n+        }\n+\n+        logger.warn(USER_ALREADY_EXISTS.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMDc5Ng=="}, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzkxNjYyOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserRegistrationServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzowODoyNFrOHE00uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxNDo0ODo0MFrOHFNpEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMTgxNw==", "bodyText": "please remove these warn logs, since the exception handling code seems to be providing the proper error log", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474821817", "createdAt": "2020-08-21T17:08:24Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserRegistrationServiceImpl.java", "diffHunk": "@@ -0,0 +1,179 @@\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.ErrorCode.EMAIL_SEND_FAILED_EXCEPTION;\n+import static com.google.cloud.healthcare.fdamystudies.common.ErrorCode.USER_ALREADY_EXISTS;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.AppOrgInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationForm;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.common.UserAccountStatus;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.dao.CommonDao;\n+import com.google.cloud.healthcare.fdamystudies.exceptions.ErrorCodeException;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserDetailsBORepository;\n+import com.google.cloud.healthcare.fdamystudies.usermgmt.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.util.MyStudiesUserRegUtil;\n+import java.time.LocalDateTime;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Service;\n+import org.springframework.web.client.RestTemplate;\n+\n+@Service\n+public class UserRegistrationServiceImpl implements UserRegistrationService {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserRegistrationServiceImpl.class.getName());\n+\n+  @Autowired private UserDetailsBORepository userDetailsRepository;\n+\n+  @Autowired private CommonDao commonDao;\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private RestTemplate restTemplate;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @Autowired private EmailService emailService;\n+\n+  @Value(\"${register.url}\")\n+  private String authRegisterUrl;\n+\n+  @Value(\"${email.code.expire_time}\")\n+  private long expireTime;\n+\n+  @Override\n+  public UserRegistrationResponse register(UserRegistrationForm user) {\n+    logger.entry(\"begin register()\");\n+\n+    // find appInfoId using appId\n+    AppOrgInfoBean appOrgInfoBean =\n+        commonDao.getUserAppDetailsByAllApi(user.getUserId(), user.getAppId(), user.getOrgId());\n+\n+    // find user by email and appId\n+    Optional<UserDetailsBO> optUserDetails =\n+        userDetailsRepository.findByEmailAndAppInfoId(\n+            user.getEmailId(), appOrgInfoBean.getAppInfoId());\n+\n+    // Return USER_ALREADY_EXISTS error code if user account already exists for the given email\n+    UserDetailsBO userDetailsBO = new UserDetailsBO();\n+    if (optUserDetails.isPresent()) {\n+      userDetailsBO = optUserDetails.get();\n+      if (StringUtils.isNotEmpty(userDetailsBO.getUserId())) {\n+        if (generateVerificationCode(userDetailsBO)) {\n+          generateAndSaveVerificationCode(userDetailsBO);\n+        }\n+\n+        logger.warn(USER_ALREADY_EXISTS.toString());\n+        throw new ErrorCodeException(USER_ALREADY_EXISTS);\n+      }\n+    }\n+\n+    // save user details\n+    userDetailsBO = toUserDetailsBO(user, userDetailsBO);\n+    userDetailsBO.setAppInfoId(appOrgInfoBean.getAppInfoId());\n+    userDetailsBO = userDetailsRepository.saveAndFlush(userDetailsBO);\n+\n+    // Call POST /users API to create a user account in oauth-scim-server\n+    UserResponse authUserResponse = registerUserInAuthServer(user);\n+\n+    // save authUserId and verfication code\n+    userDetailsBO.setUserId(authUserResponse.getUserId());\n+    userDetailsBO = userDetailsRepository.saveAndFlush(userDetailsBO);\n+\n+    // generate save and email the verification code\n+    userDetailsBO = generateAndSaveVerificationCode(userDetailsBO);\n+\n+    // verification code is empty if send email is failed\n+    if (StringUtils.isEmpty(userDetailsBO.getEmailCode())) {\n+      logger.warn(EMAIL_SEND_FAILED_EXCEPTION.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyODQzMw==", "bodyText": "Fixed review comment.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475228433", "createdAt": "2020-08-23T14:48:40Z", "author": {"login": "madhurya-btc"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserRegistrationServiceImpl.java", "diffHunk": "@@ -0,0 +1,179 @@\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.ErrorCode.EMAIL_SEND_FAILED_EXCEPTION;\n+import static com.google.cloud.healthcare.fdamystudies.common.ErrorCode.USER_ALREADY_EXISTS;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.AppOrgInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationForm;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.common.UserAccountStatus;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.dao.CommonDao;\n+import com.google.cloud.healthcare.fdamystudies.exceptions.ErrorCodeException;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserDetailsBORepository;\n+import com.google.cloud.healthcare.fdamystudies.usermgmt.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.util.MyStudiesUserRegUtil;\n+import java.time.LocalDateTime;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Service;\n+import org.springframework.web.client.RestTemplate;\n+\n+@Service\n+public class UserRegistrationServiceImpl implements UserRegistrationService {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserRegistrationServiceImpl.class.getName());\n+\n+  @Autowired private UserDetailsBORepository userDetailsRepository;\n+\n+  @Autowired private CommonDao commonDao;\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private RestTemplate restTemplate;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @Autowired private EmailService emailService;\n+\n+  @Value(\"${register.url}\")\n+  private String authRegisterUrl;\n+\n+  @Value(\"${email.code.expire_time}\")\n+  private long expireTime;\n+\n+  @Override\n+  public UserRegistrationResponse register(UserRegistrationForm user) {\n+    logger.entry(\"begin register()\");\n+\n+    // find appInfoId using appId\n+    AppOrgInfoBean appOrgInfoBean =\n+        commonDao.getUserAppDetailsByAllApi(user.getUserId(), user.getAppId(), user.getOrgId());\n+\n+    // find user by email and appId\n+    Optional<UserDetailsBO> optUserDetails =\n+        userDetailsRepository.findByEmailAndAppInfoId(\n+            user.getEmailId(), appOrgInfoBean.getAppInfoId());\n+\n+    // Return USER_ALREADY_EXISTS error code if user account already exists for the given email\n+    UserDetailsBO userDetailsBO = new UserDetailsBO();\n+    if (optUserDetails.isPresent()) {\n+      userDetailsBO = optUserDetails.get();\n+      if (StringUtils.isNotEmpty(userDetailsBO.getUserId())) {\n+        if (generateVerificationCode(userDetailsBO)) {\n+          generateAndSaveVerificationCode(userDetailsBO);\n+        }\n+\n+        logger.warn(USER_ALREADY_EXISTS.toString());\n+        throw new ErrorCodeException(USER_ALREADY_EXISTS);\n+      }\n+    }\n+\n+    // save user details\n+    userDetailsBO = toUserDetailsBO(user, userDetailsBO);\n+    userDetailsBO.setAppInfoId(appOrgInfoBean.getAppInfoId());\n+    userDetailsBO = userDetailsRepository.saveAndFlush(userDetailsBO);\n+\n+    // Call POST /users API to create a user account in oauth-scim-server\n+    UserResponse authUserResponse = registerUserInAuthServer(user);\n+\n+    // save authUserId and verfication code\n+    userDetailsBO.setUserId(authUserResponse.getUserId());\n+    userDetailsBO = userDetailsRepository.saveAndFlush(userDetailsBO);\n+\n+    // generate save and email the verification code\n+    userDetailsBO = generateAndSaveVerificationCode(userDetailsBO);\n+\n+    // verification code is empty if send email is failed\n+    if (StringUtils.isEmpty(userDetailsBO.getEmailCode())) {\n+      logger.warn(EMAIL_SEND_FAILED_EXCEPTION.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMTgxNw=="}, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzkxODMyOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserRegistrationServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzowODo1N1rOHE01sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxNDo0OTo0MlrOHFNpiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMjA2Ng==", "bodyText": "this should be a constant", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474822066", "createdAt": "2020-08-21T17:08:57Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserRegistrationServiceImpl.java", "diffHunk": "@@ -0,0 +1,179 @@\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.ErrorCode.EMAIL_SEND_FAILED_EXCEPTION;\n+import static com.google.cloud.healthcare.fdamystudies.common.ErrorCode.USER_ALREADY_EXISTS;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.AppOrgInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationForm;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.common.UserAccountStatus;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.dao.CommonDao;\n+import com.google.cloud.healthcare.fdamystudies.exceptions.ErrorCodeException;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserDetailsBORepository;\n+import com.google.cloud.healthcare.fdamystudies.usermgmt.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.util.MyStudiesUserRegUtil;\n+import java.time.LocalDateTime;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Service;\n+import org.springframework.web.client.RestTemplate;\n+\n+@Service\n+public class UserRegistrationServiceImpl implements UserRegistrationService {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserRegistrationServiceImpl.class.getName());\n+\n+  @Autowired private UserDetailsBORepository userDetailsRepository;\n+\n+  @Autowired private CommonDao commonDao;\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private RestTemplate restTemplate;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @Autowired private EmailService emailService;\n+\n+  @Value(\"${register.url}\")\n+  private String authRegisterUrl;\n+\n+  @Value(\"${email.code.expire_time}\")\n+  private long expireTime;\n+\n+  @Override\n+  public UserRegistrationResponse register(UserRegistrationForm user) {\n+    logger.entry(\"begin register()\");\n+\n+    // find appInfoId using appId\n+    AppOrgInfoBean appOrgInfoBean =\n+        commonDao.getUserAppDetailsByAllApi(user.getUserId(), user.getAppId(), user.getOrgId());\n+\n+    // find user by email and appId\n+    Optional<UserDetailsBO> optUserDetails =\n+        userDetailsRepository.findByEmailAndAppInfoId(\n+            user.getEmailId(), appOrgInfoBean.getAppInfoId());\n+\n+    // Return USER_ALREADY_EXISTS error code if user account already exists for the given email\n+    UserDetailsBO userDetailsBO = new UserDetailsBO();\n+    if (optUserDetails.isPresent()) {\n+      userDetailsBO = optUserDetails.get();\n+      if (StringUtils.isNotEmpty(userDetailsBO.getUserId())) {\n+        if (generateVerificationCode(userDetailsBO)) {\n+          generateAndSaveVerificationCode(userDetailsBO);\n+        }\n+\n+        logger.warn(USER_ALREADY_EXISTS.toString());\n+        throw new ErrorCodeException(USER_ALREADY_EXISTS);\n+      }\n+    }\n+\n+    // save user details\n+    userDetailsBO = toUserDetailsBO(user, userDetailsBO);\n+    userDetailsBO.setAppInfoId(appOrgInfoBean.getAppInfoId());\n+    userDetailsBO = userDetailsRepository.saveAndFlush(userDetailsBO);\n+\n+    // Call POST /users API to create a user account in oauth-scim-server\n+    UserResponse authUserResponse = registerUserInAuthServer(user);\n+\n+    // save authUserId and verfication code\n+    userDetailsBO.setUserId(authUserResponse.getUserId());\n+    userDetailsBO = userDetailsRepository.saveAndFlush(userDetailsBO);\n+\n+    // generate save and email the verification code\n+    userDetailsBO = generateAndSaveVerificationCode(userDetailsBO);\n+\n+    // verification code is empty if send email is failed\n+    if (StringUtils.isEmpty(userDetailsBO.getEmailCode())) {\n+      logger.warn(EMAIL_SEND_FAILED_EXCEPTION.toString());\n+      throw new ErrorCodeException(EMAIL_SEND_FAILED_EXCEPTION);\n+    }\n+\n+    logger.exit(\"user account successfully created and email sent with verification code\");\n+\n+    return new UserRegistrationResponse(\n+        String.valueOf(userDetailsBO.getUserDetailsId()),\n+        authUserResponse.getTempRegId(),\n+        authUserResponse.getUserId());\n+  }\n+\n+  private boolean generateVerificationCode(UserDetailsBO userDetailsBO) {\n+    return UserAccountStatus.PENDING_CONFIRMATION.getStatus() == userDetailsBO.getStatus()\n+        && (StringUtils.isEmpty(userDetailsBO.getEmailCode())\n+            || LocalDateTime.now().isAfter(userDetailsBO.getCodeExpireDate()));\n+  }\n+\n+  private UserDetailsBO generateAndSaveVerificationCode(UserDetailsBO userDetailsBO) {\n+    String verificationCode = RandomStringUtils.randomAlphanumeric(6);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyODU1Mg==", "bodyText": "Fixed review comment.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475228552", "createdAt": "2020-08-23T14:49:42Z", "author": {"login": "madhurya-btc"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserRegistrationServiceImpl.java", "diffHunk": "@@ -0,0 +1,179 @@\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.ErrorCode.EMAIL_SEND_FAILED_EXCEPTION;\n+import static com.google.cloud.healthcare.fdamystudies.common.ErrorCode.USER_ALREADY_EXISTS;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.AppOrgInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationForm;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.common.UserAccountStatus;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.dao.CommonDao;\n+import com.google.cloud.healthcare.fdamystudies.exceptions.ErrorCodeException;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserDetailsBORepository;\n+import com.google.cloud.healthcare.fdamystudies.usermgmt.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.util.MyStudiesUserRegUtil;\n+import java.time.LocalDateTime;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Service;\n+import org.springframework.web.client.RestTemplate;\n+\n+@Service\n+public class UserRegistrationServiceImpl implements UserRegistrationService {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserRegistrationServiceImpl.class.getName());\n+\n+  @Autowired private UserDetailsBORepository userDetailsRepository;\n+\n+  @Autowired private CommonDao commonDao;\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private RestTemplate restTemplate;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @Autowired private EmailService emailService;\n+\n+  @Value(\"${register.url}\")\n+  private String authRegisterUrl;\n+\n+  @Value(\"${email.code.expire_time}\")\n+  private long expireTime;\n+\n+  @Override\n+  public UserRegistrationResponse register(UserRegistrationForm user) {\n+    logger.entry(\"begin register()\");\n+\n+    // find appInfoId using appId\n+    AppOrgInfoBean appOrgInfoBean =\n+        commonDao.getUserAppDetailsByAllApi(user.getUserId(), user.getAppId(), user.getOrgId());\n+\n+    // find user by email and appId\n+    Optional<UserDetailsBO> optUserDetails =\n+        userDetailsRepository.findByEmailAndAppInfoId(\n+            user.getEmailId(), appOrgInfoBean.getAppInfoId());\n+\n+    // Return USER_ALREADY_EXISTS error code if user account already exists for the given email\n+    UserDetailsBO userDetailsBO = new UserDetailsBO();\n+    if (optUserDetails.isPresent()) {\n+      userDetailsBO = optUserDetails.get();\n+      if (StringUtils.isNotEmpty(userDetailsBO.getUserId())) {\n+        if (generateVerificationCode(userDetailsBO)) {\n+          generateAndSaveVerificationCode(userDetailsBO);\n+        }\n+\n+        logger.warn(USER_ALREADY_EXISTS.toString());\n+        throw new ErrorCodeException(USER_ALREADY_EXISTS);\n+      }\n+    }\n+\n+    // save user details\n+    userDetailsBO = toUserDetailsBO(user, userDetailsBO);\n+    userDetailsBO.setAppInfoId(appOrgInfoBean.getAppInfoId());\n+    userDetailsBO = userDetailsRepository.saveAndFlush(userDetailsBO);\n+\n+    // Call POST /users API to create a user account in oauth-scim-server\n+    UserResponse authUserResponse = registerUserInAuthServer(user);\n+\n+    // save authUserId and verfication code\n+    userDetailsBO.setUserId(authUserResponse.getUserId());\n+    userDetailsBO = userDetailsRepository.saveAndFlush(userDetailsBO);\n+\n+    // generate save and email the verification code\n+    userDetailsBO = generateAndSaveVerificationCode(userDetailsBO);\n+\n+    // verification code is empty if send email is failed\n+    if (StringUtils.isEmpty(userDetailsBO.getEmailCode())) {\n+      logger.warn(EMAIL_SEND_FAILED_EXCEPTION.toString());\n+      throw new ErrorCodeException(EMAIL_SEND_FAILED_EXCEPTION);\n+    }\n+\n+    logger.exit(\"user account successfully created and email sent with verification code\");\n+\n+    return new UserRegistrationResponse(\n+        String.valueOf(userDetailsBO.getUserDetailsId()),\n+        authUserResponse.getTempRegId(),\n+        authUserResponse.getUserId());\n+  }\n+\n+  private boolean generateVerificationCode(UserDetailsBO userDetailsBO) {\n+    return UserAccountStatus.PENDING_CONFIRMATION.getStatus() == userDetailsBO.getStatus()\n+        && (StringUtils.isEmpty(userDetailsBO.getEmailCode())\n+            || LocalDateTime.now().isAfter(userDetailsBO.getCodeExpireDate()));\n+  }\n+\n+  private UserDetailsBO generateAndSaveVerificationCode(UserDetailsBO userDetailsBO) {\n+    String verificationCode = RandomStringUtils.randomAlphanumeric(6);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMjA2Ng=="}, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzkyNDM4OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserRegistrationServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzoxMDo1MVrOHE05Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxNDo1NzoxOFrOHFNssQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMjk5OA==", "bodyText": "nit: either put in UserRegistrationForm or put in userDetailsBO and rename to fromUserRegistrationForm", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474822998", "createdAt": "2020-08-21T17:10:51Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserRegistrationServiceImpl.java", "diffHunk": "@@ -0,0 +1,179 @@\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.ErrorCode.EMAIL_SEND_FAILED_EXCEPTION;\n+import static com.google.cloud.healthcare.fdamystudies.common.ErrorCode.USER_ALREADY_EXISTS;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.AppOrgInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationForm;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.common.UserAccountStatus;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.dao.CommonDao;\n+import com.google.cloud.healthcare.fdamystudies.exceptions.ErrorCodeException;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserDetailsBORepository;\n+import com.google.cloud.healthcare.fdamystudies.usermgmt.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.util.MyStudiesUserRegUtil;\n+import java.time.LocalDateTime;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Service;\n+import org.springframework.web.client.RestTemplate;\n+\n+@Service\n+public class UserRegistrationServiceImpl implements UserRegistrationService {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserRegistrationServiceImpl.class.getName());\n+\n+  @Autowired private UserDetailsBORepository userDetailsRepository;\n+\n+  @Autowired private CommonDao commonDao;\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private RestTemplate restTemplate;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @Autowired private EmailService emailService;\n+\n+  @Value(\"${register.url}\")\n+  private String authRegisterUrl;\n+\n+  @Value(\"${email.code.expire_time}\")\n+  private long expireTime;\n+\n+  @Override\n+  public UserRegistrationResponse register(UserRegistrationForm user) {\n+    logger.entry(\"begin register()\");\n+\n+    // find appInfoId using appId\n+    AppOrgInfoBean appOrgInfoBean =\n+        commonDao.getUserAppDetailsByAllApi(user.getUserId(), user.getAppId(), user.getOrgId());\n+\n+    // find user by email and appId\n+    Optional<UserDetailsBO> optUserDetails =\n+        userDetailsRepository.findByEmailAndAppInfoId(\n+            user.getEmailId(), appOrgInfoBean.getAppInfoId());\n+\n+    // Return USER_ALREADY_EXISTS error code if user account already exists for the given email\n+    UserDetailsBO userDetailsBO = new UserDetailsBO();\n+    if (optUserDetails.isPresent()) {\n+      userDetailsBO = optUserDetails.get();\n+      if (StringUtils.isNotEmpty(userDetailsBO.getUserId())) {\n+        if (generateVerificationCode(userDetailsBO)) {\n+          generateAndSaveVerificationCode(userDetailsBO);\n+        }\n+\n+        logger.warn(USER_ALREADY_EXISTS.toString());\n+        throw new ErrorCodeException(USER_ALREADY_EXISTS);\n+      }\n+    }\n+\n+    // save user details\n+    userDetailsBO = toUserDetailsBO(user, userDetailsBO);\n+    userDetailsBO.setAppInfoId(appOrgInfoBean.getAppInfoId());\n+    userDetailsBO = userDetailsRepository.saveAndFlush(userDetailsBO);\n+\n+    // Call POST /users API to create a user account in oauth-scim-server\n+    UserResponse authUserResponse = registerUserInAuthServer(user);\n+\n+    // save authUserId and verfication code\n+    userDetailsBO.setUserId(authUserResponse.getUserId());\n+    userDetailsBO = userDetailsRepository.saveAndFlush(userDetailsBO);\n+\n+    // generate save and email the verification code\n+    userDetailsBO = generateAndSaveVerificationCode(userDetailsBO);\n+\n+    // verification code is empty if send email is failed\n+    if (StringUtils.isEmpty(userDetailsBO.getEmailCode())) {\n+      logger.warn(EMAIL_SEND_FAILED_EXCEPTION.toString());\n+      throw new ErrorCodeException(EMAIL_SEND_FAILED_EXCEPTION);\n+    }\n+\n+    logger.exit(\"user account successfully created and email sent with verification code\");\n+\n+    return new UserRegistrationResponse(\n+        String.valueOf(userDetailsBO.getUserDetailsId()),\n+        authUserResponse.getTempRegId(),\n+        authUserResponse.getUserId());\n+  }\n+\n+  private boolean generateVerificationCode(UserDetailsBO userDetailsBO) {\n+    return UserAccountStatus.PENDING_CONFIRMATION.getStatus() == userDetailsBO.getStatus()\n+        && (StringUtils.isEmpty(userDetailsBO.getEmailCode())\n+            || LocalDateTime.now().isAfter(userDetailsBO.getCodeExpireDate()));\n+  }\n+\n+  private UserDetailsBO generateAndSaveVerificationCode(UserDetailsBO userDetailsBO) {\n+    String verificationCode = RandomStringUtils.randomAlphanumeric(6);\n+    EmailResponse emailResponse = sendConfirmationEmail(userDetailsBO, verificationCode);\n+    if (MessageCode.EMAIL_ACCEPTED_BY_MAIL_SERVER.getMessage().equals(emailResponse.getMessage())) {\n+      userDetailsBO.setEmailCode(verificationCode);\n+      userDetailsBO.setCodeExpireDate(LocalDateTime.now().plusMinutes(expireTime));\n+      userDetailsBO = userDetailsRepository.saveAndFlush(userDetailsBO);\n+    }\n+    return userDetailsBO;\n+  }\n+\n+  private UserDetailsBO toUserDetailsBO(UserRegistrationForm user, UserDetailsBO userDetailsBO) {\n+    userDetailsBO.setStatus(UserAccountStatus.PENDING_CONFIRMATION.getStatus());\n+    userDetailsBO.setVerificationDate(MyStudiesUserRegUtil.getCurrentUtilDateTime());\n+    userDetailsBO.setUserId(user.getUserId());\n+    userDetailsBO.setEmail(user.getEmailId());\n+    userDetailsBO.setUsePassCode(user.isUsePassCode());\n+    userDetailsBO.setLocalNotificationFlag(user.isLocalNotification());\n+    userDetailsBO.setRemoteNotificationFlag(user.isRemoteNotification());\n+    userDetailsBO.setTouchId(user.isTouchId());\n+    return userDetailsBO;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyOTM2MQ==", "bodyText": "Fixed review comment", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475229361", "createdAt": "2020-08-23T14:57:18Z", "author": {"login": "madhurya-btc"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserRegistrationServiceImpl.java", "diffHunk": "@@ -0,0 +1,179 @@\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.ErrorCode.EMAIL_SEND_FAILED_EXCEPTION;\n+import static com.google.cloud.healthcare.fdamystudies.common.ErrorCode.USER_ALREADY_EXISTS;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.AppOrgInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationForm;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.common.UserAccountStatus;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.dao.CommonDao;\n+import com.google.cloud.healthcare.fdamystudies.exceptions.ErrorCodeException;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserDetailsBORepository;\n+import com.google.cloud.healthcare.fdamystudies.usermgmt.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.util.MyStudiesUserRegUtil;\n+import java.time.LocalDateTime;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Service;\n+import org.springframework.web.client.RestTemplate;\n+\n+@Service\n+public class UserRegistrationServiceImpl implements UserRegistrationService {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserRegistrationServiceImpl.class.getName());\n+\n+  @Autowired private UserDetailsBORepository userDetailsRepository;\n+\n+  @Autowired private CommonDao commonDao;\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private RestTemplate restTemplate;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @Autowired private EmailService emailService;\n+\n+  @Value(\"${register.url}\")\n+  private String authRegisterUrl;\n+\n+  @Value(\"${email.code.expire_time}\")\n+  private long expireTime;\n+\n+  @Override\n+  public UserRegistrationResponse register(UserRegistrationForm user) {\n+    logger.entry(\"begin register()\");\n+\n+    // find appInfoId using appId\n+    AppOrgInfoBean appOrgInfoBean =\n+        commonDao.getUserAppDetailsByAllApi(user.getUserId(), user.getAppId(), user.getOrgId());\n+\n+    // find user by email and appId\n+    Optional<UserDetailsBO> optUserDetails =\n+        userDetailsRepository.findByEmailAndAppInfoId(\n+            user.getEmailId(), appOrgInfoBean.getAppInfoId());\n+\n+    // Return USER_ALREADY_EXISTS error code if user account already exists for the given email\n+    UserDetailsBO userDetailsBO = new UserDetailsBO();\n+    if (optUserDetails.isPresent()) {\n+      userDetailsBO = optUserDetails.get();\n+      if (StringUtils.isNotEmpty(userDetailsBO.getUserId())) {\n+        if (generateVerificationCode(userDetailsBO)) {\n+          generateAndSaveVerificationCode(userDetailsBO);\n+        }\n+\n+        logger.warn(USER_ALREADY_EXISTS.toString());\n+        throw new ErrorCodeException(USER_ALREADY_EXISTS);\n+      }\n+    }\n+\n+    // save user details\n+    userDetailsBO = toUserDetailsBO(user, userDetailsBO);\n+    userDetailsBO.setAppInfoId(appOrgInfoBean.getAppInfoId());\n+    userDetailsBO = userDetailsRepository.saveAndFlush(userDetailsBO);\n+\n+    // Call POST /users API to create a user account in oauth-scim-server\n+    UserResponse authUserResponse = registerUserInAuthServer(user);\n+\n+    // save authUserId and verfication code\n+    userDetailsBO.setUserId(authUserResponse.getUserId());\n+    userDetailsBO = userDetailsRepository.saveAndFlush(userDetailsBO);\n+\n+    // generate save and email the verification code\n+    userDetailsBO = generateAndSaveVerificationCode(userDetailsBO);\n+\n+    // verification code is empty if send email is failed\n+    if (StringUtils.isEmpty(userDetailsBO.getEmailCode())) {\n+      logger.warn(EMAIL_SEND_FAILED_EXCEPTION.toString());\n+      throw new ErrorCodeException(EMAIL_SEND_FAILED_EXCEPTION);\n+    }\n+\n+    logger.exit(\"user account successfully created and email sent with verification code\");\n+\n+    return new UserRegistrationResponse(\n+        String.valueOf(userDetailsBO.getUserDetailsId()),\n+        authUserResponse.getTempRegId(),\n+        authUserResponse.getUserId());\n+  }\n+\n+  private boolean generateVerificationCode(UserDetailsBO userDetailsBO) {\n+    return UserAccountStatus.PENDING_CONFIRMATION.getStatus() == userDetailsBO.getStatus()\n+        && (StringUtils.isEmpty(userDetailsBO.getEmailCode())\n+            || LocalDateTime.now().isAfter(userDetailsBO.getCodeExpireDate()));\n+  }\n+\n+  private UserDetailsBO generateAndSaveVerificationCode(UserDetailsBO userDetailsBO) {\n+    String verificationCode = RandomStringUtils.randomAlphanumeric(6);\n+    EmailResponse emailResponse = sendConfirmationEmail(userDetailsBO, verificationCode);\n+    if (MessageCode.EMAIL_ACCEPTED_BY_MAIL_SERVER.getMessage().equals(emailResponse.getMessage())) {\n+      userDetailsBO.setEmailCode(verificationCode);\n+      userDetailsBO.setCodeExpireDate(LocalDateTime.now().plusMinutes(expireTime));\n+      userDetailsBO = userDetailsRepository.saveAndFlush(userDetailsBO);\n+    }\n+    return userDetailsBO;\n+  }\n+\n+  private UserDetailsBO toUserDetailsBO(UserRegistrationForm user, UserDetailsBO userDetailsBO) {\n+    userDetailsBO.setStatus(UserAccountStatus.PENDING_CONFIRMATION.getStatus());\n+    userDetailsBO.setVerificationDate(MyStudiesUserRegUtil.getCurrentUtilDateTime());\n+    userDetailsBO.setUserId(user.getUserId());\n+    userDetailsBO.setEmail(user.getEmailId());\n+    userDetailsBO.setUsePassCode(user.isUsePassCode());\n+    userDetailsBO.setLocalNotificationFlag(user.isLocalNotification());\n+    userDetailsBO.setRemoteNotificationFlag(user.isRemoteNotification());\n+    userDetailsBO.setTouchId(user.isTouchId());\n+    return userDetailsBO;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMjk5OA=="}, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzkzMjczOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/UserRegistrationControllerTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzoxMzozN1rOHE0-hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNTo0MzozNlrOHFrEhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyNDMyNA==", "bodyText": "nit: break into multiple lines", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474824324", "createdAt": "2020-08-21T17:13:37Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/UserRegistrationControllerTest.java", "diffHunk": "@@ -62,87 +75,67 @@ public void healthCheck() throws Exception {\n     mockMvc.perform(get(\"/healthCheck\")).andDo(print()).andExpect(status().isOk());\n   }\n \n-  @Order(1)\n   @Test\n-  public void shouldReturnBadRequestForInvalidUserDetails() throws Exception {\n+  public void shouldReturnBadRequestForRegisterUser() throws Exception {\n     HttpHeaders headers =\n-        TestUtils.getCommonHeaders(\n-            Constants.APP_ID_HEADER,\n-            Constants.ORG_ID_HEADER,\n-            Constants.CLIENT_ID_HEADER,\n-            Constants.SECRET_KEY_HEADER);\n-\n-    // password is equalTo emailId\n-    String requestJson = getRegisterUser(Constants.EMAIL_ID, Constants.EMAIL_ID);\n-    mockMvc\n-        .perform(\n-            post(REGISTER_PATH).content(requestJson).headers(headers).contextPath(getContextPath()))\n-        .andDo(print())\n-        .andExpect(status().isBadRequest())\n-        .andExpect(jsonPath(\"$.code\", is(HttpStatus.BAD_REQUEST.value())))\n-        .andExpect(jsonPath(\"$.message\", is(Constants.INVALID_PASSWORD)));\n+        TestUtils.getCommonHeaders(Constants.APP_ID_HEADER, Constants.ORG_ID_HEADER);\n \n-    verify(\n-        1,\n-        postRequestedFor(urlEqualTo(\"/AuthServer/register\"))\n-            .withRequestBody(new ContainsPattern(Constants.EMAIL_ID)));\n+    UserRegistrationForm userRegistrationForm = new UserRegistrationForm();\n+    MvcResult result =\n+        mockMvc\n+            .perform(\n+                post(REGISTER_PATH)\n+                    .content(asJsonString(userRegistrationForm))\n+                    .headers(headers)\n+                    .contextPath(getContextPath()))\n+            .andDo(print())\n+            .andExpect(status().isBadRequest())\n+            .andExpect(jsonPath(\"$.violations\").isArray())\n+            .andReturn();\n+\n+    String actualResponse = result.getResponse().getContentAsString();\n+    String expectedResponse = readJsonFile(\"/responses/register_account_bad_request.json\");\n+    JSONAssert.assertEquals(expectedResponse, actualResponse, JSONCompareMode.NON_EXTENSIBLE);\n+  }\n+\n+  @Test\n+  public void shouldReturnBadRequestForInvalidPassword() throws Exception {\n+    HttpHeaders headers =\n+        TestUtils.getCommonHeaders(Constants.APP_ID_HEADER, Constants.ORG_ID_HEADER);\n \n     // invalid  password\n-    requestJson = getRegisterUser(Constants.EMAIL_ID, Constants.INVALID_PASSWORD);\n+    String requestJson = getRegisterUser(\"mockito123@gmail.com\", Constants.INVALID_PASSWORD);\n     mockMvc\n         .perform(\n             post(REGISTER_PATH).content(requestJson).headers(headers).contextPath(getContextPath()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyOTYzMA==", "bodyText": "There is only 94 characters so it fits into single line.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475229630", "createdAt": "2020-08-23T15:00:16Z", "author": {"login": "madhurya-btc"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/UserRegistrationControllerTest.java", "diffHunk": "@@ -62,87 +75,67 @@ public void healthCheck() throws Exception {\n     mockMvc.perform(get(\"/healthCheck\")).andDo(print()).andExpect(status().isOk());\n   }\n \n-  @Order(1)\n   @Test\n-  public void shouldReturnBadRequestForInvalidUserDetails() throws Exception {\n+  public void shouldReturnBadRequestForRegisterUser() throws Exception {\n     HttpHeaders headers =\n-        TestUtils.getCommonHeaders(\n-            Constants.APP_ID_HEADER,\n-            Constants.ORG_ID_HEADER,\n-            Constants.CLIENT_ID_HEADER,\n-            Constants.SECRET_KEY_HEADER);\n-\n-    // password is equalTo emailId\n-    String requestJson = getRegisterUser(Constants.EMAIL_ID, Constants.EMAIL_ID);\n-    mockMvc\n-        .perform(\n-            post(REGISTER_PATH).content(requestJson).headers(headers).contextPath(getContextPath()))\n-        .andDo(print())\n-        .andExpect(status().isBadRequest())\n-        .andExpect(jsonPath(\"$.code\", is(HttpStatus.BAD_REQUEST.value())))\n-        .andExpect(jsonPath(\"$.message\", is(Constants.INVALID_PASSWORD)));\n+        TestUtils.getCommonHeaders(Constants.APP_ID_HEADER, Constants.ORG_ID_HEADER);\n \n-    verify(\n-        1,\n-        postRequestedFor(urlEqualTo(\"/AuthServer/register\"))\n-            .withRequestBody(new ContainsPattern(Constants.EMAIL_ID)));\n+    UserRegistrationForm userRegistrationForm = new UserRegistrationForm();\n+    MvcResult result =\n+        mockMvc\n+            .perform(\n+                post(REGISTER_PATH)\n+                    .content(asJsonString(userRegistrationForm))\n+                    .headers(headers)\n+                    .contextPath(getContextPath()))\n+            .andDo(print())\n+            .andExpect(status().isBadRequest())\n+            .andExpect(jsonPath(\"$.violations\").isArray())\n+            .andReturn();\n+\n+    String actualResponse = result.getResponse().getContentAsString();\n+    String expectedResponse = readJsonFile(\"/responses/register_account_bad_request.json\");\n+    JSONAssert.assertEquals(expectedResponse, actualResponse, JSONCompareMode.NON_EXTENSIBLE);\n+  }\n+\n+  @Test\n+  public void shouldReturnBadRequestForInvalidPassword() throws Exception {\n+    HttpHeaders headers =\n+        TestUtils.getCommonHeaders(Constants.APP_ID_HEADER, Constants.ORG_ID_HEADER);\n \n     // invalid  password\n-    requestJson = getRegisterUser(Constants.EMAIL_ID, Constants.INVALID_PASSWORD);\n+    String requestJson = getRegisterUser(\"mockito123@gmail.com\", Constants.INVALID_PASSWORD);\n     mockMvc\n         .perform(\n             post(REGISTER_PATH).content(requestJson).headers(headers).contextPath(getContextPath()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyNDMyNA=="}, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYyOTg1Nw==", "bodyText": "it's more readable when you break a chain into multiple lines", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475629857", "createdAt": "2020-08-24T13:57:15Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/UserRegistrationControllerTest.java", "diffHunk": "@@ -62,87 +75,67 @@ public void healthCheck() throws Exception {\n     mockMvc.perform(get(\"/healthCheck\")).andDo(print()).andExpect(status().isOk());\n   }\n \n-  @Order(1)\n   @Test\n-  public void shouldReturnBadRequestForInvalidUserDetails() throws Exception {\n+  public void shouldReturnBadRequestForRegisterUser() throws Exception {\n     HttpHeaders headers =\n-        TestUtils.getCommonHeaders(\n-            Constants.APP_ID_HEADER,\n-            Constants.ORG_ID_HEADER,\n-            Constants.CLIENT_ID_HEADER,\n-            Constants.SECRET_KEY_HEADER);\n-\n-    // password is equalTo emailId\n-    String requestJson = getRegisterUser(Constants.EMAIL_ID, Constants.EMAIL_ID);\n-    mockMvc\n-        .perform(\n-            post(REGISTER_PATH).content(requestJson).headers(headers).contextPath(getContextPath()))\n-        .andDo(print())\n-        .andExpect(status().isBadRequest())\n-        .andExpect(jsonPath(\"$.code\", is(HttpStatus.BAD_REQUEST.value())))\n-        .andExpect(jsonPath(\"$.message\", is(Constants.INVALID_PASSWORD)));\n+        TestUtils.getCommonHeaders(Constants.APP_ID_HEADER, Constants.ORG_ID_HEADER);\n \n-    verify(\n-        1,\n-        postRequestedFor(urlEqualTo(\"/AuthServer/register\"))\n-            .withRequestBody(new ContainsPattern(Constants.EMAIL_ID)));\n+    UserRegistrationForm userRegistrationForm = new UserRegistrationForm();\n+    MvcResult result =\n+        mockMvc\n+            .perform(\n+                post(REGISTER_PATH)\n+                    .content(asJsonString(userRegistrationForm))\n+                    .headers(headers)\n+                    .contextPath(getContextPath()))\n+            .andDo(print())\n+            .andExpect(status().isBadRequest())\n+            .andExpect(jsonPath(\"$.violations\").isArray())\n+            .andReturn();\n+\n+    String actualResponse = result.getResponse().getContentAsString();\n+    String expectedResponse = readJsonFile(\"/responses/register_account_bad_request.json\");\n+    JSONAssert.assertEquals(expectedResponse, actualResponse, JSONCompareMode.NON_EXTENSIBLE);\n+  }\n+\n+  @Test\n+  public void shouldReturnBadRequestForInvalidPassword() throws Exception {\n+    HttpHeaders headers =\n+        TestUtils.getCommonHeaders(Constants.APP_ID_HEADER, Constants.ORG_ID_HEADER);\n \n     // invalid  password\n-    requestJson = getRegisterUser(Constants.EMAIL_ID, Constants.INVALID_PASSWORD);\n+    String requestJson = getRegisterUser(\"mockito123@gmail.com\", Constants.INVALID_PASSWORD);\n     mockMvc\n         .perform(\n             post(REGISTER_PATH).content(requestJson).headers(headers).contextPath(getContextPath()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyNDMyNA=="}, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcxMDU5OQ==", "bodyText": "Even though if we break a chain into multiple lines, IDE will auto format.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475710599", "createdAt": "2020-08-24T15:43:36Z", "author": {"login": "madhurya-btc"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/UserRegistrationControllerTest.java", "diffHunk": "@@ -62,87 +75,67 @@ public void healthCheck() throws Exception {\n     mockMvc.perform(get(\"/healthCheck\")).andDo(print()).andExpect(status().isOk());\n   }\n \n-  @Order(1)\n   @Test\n-  public void shouldReturnBadRequestForInvalidUserDetails() throws Exception {\n+  public void shouldReturnBadRequestForRegisterUser() throws Exception {\n     HttpHeaders headers =\n-        TestUtils.getCommonHeaders(\n-            Constants.APP_ID_HEADER,\n-            Constants.ORG_ID_HEADER,\n-            Constants.CLIENT_ID_HEADER,\n-            Constants.SECRET_KEY_HEADER);\n-\n-    // password is equalTo emailId\n-    String requestJson = getRegisterUser(Constants.EMAIL_ID, Constants.EMAIL_ID);\n-    mockMvc\n-        .perform(\n-            post(REGISTER_PATH).content(requestJson).headers(headers).contextPath(getContextPath()))\n-        .andDo(print())\n-        .andExpect(status().isBadRequest())\n-        .andExpect(jsonPath(\"$.code\", is(HttpStatus.BAD_REQUEST.value())))\n-        .andExpect(jsonPath(\"$.message\", is(Constants.INVALID_PASSWORD)));\n+        TestUtils.getCommonHeaders(Constants.APP_ID_HEADER, Constants.ORG_ID_HEADER);\n \n-    verify(\n-        1,\n-        postRequestedFor(urlEqualTo(\"/AuthServer/register\"))\n-            .withRequestBody(new ContainsPattern(Constants.EMAIL_ID)));\n+    UserRegistrationForm userRegistrationForm = new UserRegistrationForm();\n+    MvcResult result =\n+        mockMvc\n+            .perform(\n+                post(REGISTER_PATH)\n+                    .content(asJsonString(userRegistrationForm))\n+                    .headers(headers)\n+                    .contextPath(getContextPath()))\n+            .andDo(print())\n+            .andExpect(status().isBadRequest())\n+            .andExpect(jsonPath(\"$.violations\").isArray())\n+            .andReturn();\n+\n+    String actualResponse = result.getResponse().getContentAsString();\n+    String expectedResponse = readJsonFile(\"/responses/register_account_bad_request.json\");\n+    JSONAssert.assertEquals(expectedResponse, actualResponse, JSONCompareMode.NON_EXTENSIBLE);\n+  }\n+\n+  @Test\n+  public void shouldReturnBadRequestForInvalidPassword() throws Exception {\n+    HttpHeaders headers =\n+        TestUtils.getCommonHeaders(Constants.APP_ID_HEADER, Constants.ORG_ID_HEADER);\n \n     // invalid  password\n-    requestJson = getRegisterUser(Constants.EMAIL_ID, Constants.INVALID_PASSWORD);\n+    String requestJson = getRegisterUser(\"mockito123@gmail.com\", Constants.INVALID_PASSWORD);\n     mockMvc\n         .perform(\n             post(REGISTER_PATH).content(requestJson).headers(headers).contextPath(getContextPath()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyNDMyNA=="}, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzkzODM4OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/test/resources/application-mockit.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzoxNToxOVrOHE1B8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxNTowMDo1NVrOHFNt-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyNTIwMg==", "bodyText": "orgName should be removed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474825202", "createdAt": "2020-08-21T17:15:19Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/test/resources/application-mockit.properties", "diffHunk": "@@ -108,4 +108,21 @@ contactus.email=<ContactUs Mail>\n contactus.mail.subject=<App Name> App Helpdesk:\n \n contactus.mail.content=<html><body><div><div><span>Hi</span></div><br><div style='padding-bottom:10px;'><span>A user of the &lt;App Neme&gt; mobile app has reached out this helpdesk via the &#39;Contact Us&#39; form in the mobile app. The details submitted in the form are given below:</span></div><div><div>___________________________________________</div><div style='padding-top:20px;'>First Name: $firstName</div><div style='padding-top:10px;'>Email: <a href='mailto: $email'> $email </a></div><div style='padding-top:10px;'>Subject: $subject</div><div style='padding-top:10px;padding-bottom:10px'>Message: $body</div></div><div>___________________________________________</div><div style='padding-top:10px;'><span>Please respond to the app user at the email provided.</span></div><br><div><span>Thanks,</span><br><span>The &lt;Org Name&gt; MyStudies Support Team</span><br><span>-------------------------------------------</span><br><span style='font-size:10px;'>Note: This is an auto-generated email. Please do not reply.</span></div></div></body></html>\n-# Feedback & Contactus mail content ends\n\\ No newline at end of file\n+\n+# Feedback & Contactus mail content ends\n+\n+org.name = Org Name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyOTY4OQ==", "bodyText": "This needs to be addressed for all the services, Issue: #688 We'll fix this in follow-up PR.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475229689", "createdAt": "2020-08-23T15:00:55Z", "author": {"login": "dhanyak-btc"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/test/resources/application-mockit.properties", "diffHunk": "@@ -108,4 +108,21 @@ contactus.email=<ContactUs Mail>\n contactus.mail.subject=<App Name> App Helpdesk:\n \n contactus.mail.content=<html><body><div><div><span>Hi</span></div><br><div style='padding-bottom:10px;'><span>A user of the &lt;App Neme&gt; mobile app has reached out this helpdesk via the &#39;Contact Us&#39; form in the mobile app. The details submitted in the form are given below:</span></div><div><div>___________________________________________</div><div style='padding-top:20px;'>First Name: $firstName</div><div style='padding-top:10px;'>Email: <a href='mailto: $email'> $email </a></div><div style='padding-top:10px;'>Subject: $subject</div><div style='padding-top:10px;padding-bottom:10px'>Message: $body</div></div><div>___________________________________________</div><div style='padding-top:10px;'><span>Please respond to the app user at the email provided.</span></div><br><div><span>Thanks,</span><br><span>The &lt;Org Name&gt; MyStudies Support Team</span><br><span>-------------------------------------------</span><br><span style='font-size:10px;'>Note: This is an auto-generated email. Please do not reply.</span></div></div></body></html>\n-# Feedback & Contactus mail content ends\n\\ No newline at end of file\n+\n+# Feedback & Contactus mail content ends\n+\n+org.name = Org Name", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyNTIwMg=="}, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Nzk0MDkyOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/test/resources/application-mockit.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzoxNjoxMVrOHE1DhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxNTowOTowOVrOHFNxVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyNTYwNQ==", "bodyText": "should the rest of the auth server URLs also be updated to the new auth server?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474825605", "createdAt": "2020-08-21T17:16:11Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/test/resources/application-mockit.properties", "diffHunk": "@@ -73,7 +73,7 @@ spring.main.allow-bean-definition-overriding=true\n #Auth Server Local\n authServerAccessTokenValidationUrl=http://localhost:8080/AuthServer/tokenAuthentication\n auth.server.url=http://localhost:8080/AuthServer\n-register.url=http://localhost:8080/AuthServer/register\n+register.url=http://localhost:8080/oauth-scim-service/users\n auth.server.updateStatusUrl=http://localhost:8080/AuthServer/updateStatus", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIzMDU0OA==", "bodyText": "This is addressed in these PR's.\nPR #770 and #766", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475230548", "createdAt": "2020-08-23T15:09:09Z", "author": {"login": "madhurya-btc"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/test/resources/application-mockit.properties", "diffHunk": "@@ -73,7 +73,7 @@ spring.main.allow-bean-definition-overriding=true\n #Auth Server Local\n authServerAccessTokenValidationUrl=http://localhost:8080/AuthServer/tokenAuthentication\n auth.server.url=http://localhost:8080/AuthServer\n-register.url=http://localhost:8080/AuthServer/register\n+register.url=http://localhost:8080/oauth-scim-service/users\n auth.server.updateStatusUrl=http://localhost:8080/AuthServer/updateStatus", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyNTYwNQ=="}, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzYxMDcwOnYy", "diffSide": "LEFT", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDowMToyMlrOHFmc9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNTo0NDo0OFrOHFrHWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYzNDkzNQ==", "bodyText": "you can remove the @ToString.Exclude clause from all methods now", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475634935", "createdAt": "2020-08-24T14:01:22Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationResponse.java", "diffHunk": "@@ -13,7 +13,6 @@\n import lombok.Getter;\n import lombok.NoArgsConstructor;\n import lombok.Setter;\n-import lombok.ToString;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0be44e3c1c8936c27233b2b799dd48a77169653"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcxMTMyMQ==", "bodyText": "Fixed review comment.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475711321", "createdAt": "2020-08-24T15:44:48Z", "author": {"login": "madhurya-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationResponse.java", "diffHunk": "@@ -13,7 +13,6 @@\n import lombok.Getter;\n import lombok.NoArgsConstructor;\n import lombok.Setter;\n-import lombok.ToString;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYzNDkzNQ=="}, "originalCommit": {"oid": "f0be44e3c1c8936c27233b2b799dd48a77169653"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2173, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}