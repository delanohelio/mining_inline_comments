{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1MzE2MTI2", "number": 366, "title": "fix for emails are not triggered when account is locked for Mobile", "bodyText": "This PR contains the below details\nCurrently, Emails are not triggered when account is locked for Mobile. But as per HIPAA Compliance, user should get an Email stating your account has been locked.", "createdAt": "2020-05-08T16:22:45Z", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366", "merged": true, "mergeCommit": {"oid": "24f573a4d489d5fd4d7244fab8dbf3801c2b8862"}, "closed": true, "closedAt": "2020-06-10T14:34:42Z", "author": {"login": "aswinijena100"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcfSjTPgH2gAyNDE1MzE2MTI2OmYyNmU4OWQyYWNiODg3NjZlY2M0YjU0MTQ4OTk1NjNkMDFmYmU2NDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcp6hXfgH2gAyNDE1MzE2MTI2OmI2MjVjZGRkZGVlZjZlYjE2ZjQ0ZTNjMGU2OTVkNzkzZGZhMDVkYmM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f26e89d2acb88766ecc4b5414899563d01fbe642", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/f26e89d2acb88766ecc4b5414899563d01fbe642", "committedDate": "2020-05-08T14:14:35Z", "message": "code commit for issue fix for emails are not triggered when account is locked for Mobile users"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4eaa236643748cefb90a2cada092557e675ee227", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/4eaa236643748cefb90a2cada092557e675ee227", "committedDate": "2020-05-08T14:24:11Z", "message": "modified authenticationcontroller.java to merge with early access"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NDQ1OTgx", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#pullrequestreview-408445981", "createdAt": "2020-05-08T18:45:58Z", "commit": {"oid": "4eaa236643748cefb90a2cada092557e675ee227"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxODo0NTo1OFrOGSvttg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxOTo1NjoxM1rOGSxwYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMwOTMwMg==", "bodyText": "Extra parentheses are redundant for conditions all ORed together.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r422309302", "createdAt": "2020-05-08T18:45:58Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/AuthenticationController.java", "diffHunk": "@@ -437,30 +436,32 @@\n     AuthServerRegistrationResponse controllerResp = null;\n     try {\n       String appCode = null;\n-      if (((clientId.length() == 0) || StringUtils.isBlank(clientId))\n-          || ((secretKey.length() == 0) || StringUtils.isBlank(secretKey))) {\n+      if ((StringUtils.isBlank(clientId) || (clientId.equalsIgnoreCase(\"null\")))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eaa236643748cefb90a2cada092557e675ee227"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMwOTg5Mg==", "bodyText": "isBlank covers the null case", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r422309892", "createdAt": "2020-05-08T18:47:09Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/AuthenticationController.java", "diffHunk": "@@ -437,30 +436,32 @@\n     AuthServerRegistrationResponse controllerResp = null;\n     try {\n       String appCode = null;\n-      if (((clientId.length() == 0) || StringUtils.isBlank(clientId))\n-          || ((secretKey.length() == 0) || StringUtils.isBlank(secretKey))) {\n+      if ((StringUtils.isBlank(clientId) || (clientId.equalsIgnoreCase(\"null\")))\n+          || (StringUtils.isBlank(secretKey) || (secretKey.equalsIgnoreCase(\"null\")))) {\n \n         MyStudiesUserRegUtil.getFailureResponse(\n             400 + \"\",\n             MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n             MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n             response);\n         logger.info(\"AuthenticationController registerUser() - ends with BAD_REQUEST\");\n+\n         return new ResponseEntity<>(controllerResp, HttpStatus.BAD_REQUEST);\n       }\n \n-      if (((user.getEmailId() == null) && StringUtils.isBlank(user.getEmailId()))\n+      if (((user.getEmailId() == null) || StringUtils.isBlank(user.getEmailId()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eaa236643748cefb90a2cada092557e675ee227"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMwOTk1MA==", "bodyText": "Same here", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r422309950", "createdAt": "2020-05-08T18:47:18Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/AuthenticationController.java", "diffHunk": "@@ -437,30 +436,32 @@\n     AuthServerRegistrationResponse controllerResp = null;\n     try {\n       String appCode = null;\n-      if (((clientId.length() == 0) || StringUtils.isBlank(clientId))\n-          || ((secretKey.length() == 0) || StringUtils.isBlank(secretKey))) {\n+      if ((StringUtils.isBlank(clientId) || (clientId.equalsIgnoreCase(\"null\")))\n+          || (StringUtils.isBlank(secretKey) || (secretKey.equalsIgnoreCase(\"null\")))) {\n \n         MyStudiesUserRegUtil.getFailureResponse(\n             400 + \"\",\n             MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n             MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n             response);\n         logger.info(\"AuthenticationController registerUser() - ends with BAD_REQUEST\");\n+\n         return new ResponseEntity<>(controllerResp, HttpStatus.BAD_REQUEST);\n       }\n \n-      if (((user.getEmailId() == null) && StringUtils.isBlank(user.getEmailId()))\n+      if (((user.getEmailId() == null) || StringUtils.isBlank(user.getEmailId()))\n           || (!MyStudiesUserRegUtil.isValidEmailId(user.getEmailId()))) {\n         MyStudiesUserRegUtil.getFailureResponse(\n             400 + \"\",\n             MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n             MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_ID.getValue(),\n             response);\n         logger.info(\"AuthenticationController registerUser() - ends with BAD_REQUEST\");\n+\n         return new ResponseEntity<>(controllerResp, HttpStatus.BAD_REQUEST);\n       }\n \n-      if (((user.getPassword() == null) && StringUtils.isBlank(user.getPassword()))\n+      if (((user.getPassword() == null) || StringUtils.isBlank(user.getPassword()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eaa236643748cefb90a2cada092557e675ee227"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMxMDA2Mw==", "bodyText": "Same as above", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r422310063", "createdAt": "2020-05-08T18:47:31Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/AuthenticationController.java", "diffHunk": "@@ -485,8 +486,8 @@\n         return new ResponseEntity<>(controllerResp, HttpStatus.UNAUTHORIZED);\n       }\n       if (\"MA\".equals(appCode)) {\n-        if (((appId.length() == 0) || StringUtils.isBlank(appId))\n-            || ((orgId.length() == 0) || StringUtils.isBlank(orgId))) {\n+        if ((StringUtils.isBlank(appId) || (appId.equalsIgnoreCase(\"null\")))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eaa236643748cefb90a2cada092557e675ee227"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMxMDM1Mg==", "bodyText": "AppConstants.USWS", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r422310352", "createdAt": "2020-05-08T18:48:06Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/AuthenticationController.java", "diffHunk": "@@ -498,14 +499,25 @@\n       }\n \n       ServiceRegistrationSuccessResponse serviceResp = null;\n-      if (!\"MA\".equals(appCode)) {\n+      if (\"USWS\".equals(appCode)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eaa236643748cefb90a2cada092557e675ee227"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMxMDYzNQ==", "bodyText": "AppConstants.MA", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r422310635", "createdAt": "2020-05-08T18:48:37Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/AuthenticationController.java", "diffHunk": "@@ -498,14 +499,25 @@\n       }\n \n       ServiceRegistrationSuccessResponse serviceResp = null;\n-      if (!\"MA\".equals(appCode)) {\n+      if (\"USWS\".equals(appCode)) {\n         serviceResp = userDetailsService.save(user, null, null, appCode);\n-      } else {\n+      } else if (\"MA\".equals(appCode)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eaa236643748cefb90a2cada092557e675ee227"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMxMTc1Nw==", "bodyText": "Use a constant instead", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r422311757", "createdAt": "2020-05-08T18:50:49Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/AuthenticationController.java", "diffHunk": "@@ -498,14 +499,25 @@\n       }\n \n       ServiceRegistrationSuccessResponse serviceResp = null;\n-      if (!\"MA\".equals(appCode)) {\n+      if (\"USWS\".equals(appCode)) {\n         serviceResp = userDetailsService.save(user, null, null, appCode);\n-      } else {\n+      } else if (\"MA\".equals(appCode)) {\n         serviceResp = userDetailsService.save(user, appId, orgId, appCode);\n+      } else {\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            401 + \"\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eaa236643748cefb90a2cada092557e675ee227"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMxMTg3MQ==", "bodyText": "Same as above", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r422311871", "createdAt": "2020-05-08T18:51:04Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/AuthenticationController.java", "diffHunk": "@@ -559,19 +571,21 @@ private AuthServerRegistrationResponse prepareSuccessResponse(\n     DaoUserBO participantDetails = null;\n     Integer maxAttemptsCount = Integer.valueOf(appConfig.getMaxLoginAttempts());\n     try {\n-      if (((clientId.length() == 0) || StringUtils.isBlank(clientId))\n-          || ((secretKey.length() == 0) || StringUtils.isBlank(secretKey))) {\n+\n+      if ((StringUtils.isBlank(clientId) || (clientId.equalsIgnoreCase(\"null\")))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eaa236643748cefb90a2cada092557e675ee227"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMxMTkwNA==", "bodyText": "Same as above", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r422311904", "createdAt": "2020-05-08T18:51:09Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/AuthenticationController.java", "diffHunk": "@@ -559,19 +571,21 @@ private AuthServerRegistrationResponse prepareSuccessResponse(\n     DaoUserBO participantDetails = null;\n     Integer maxAttemptsCount = Integer.valueOf(appConfig.getMaxLoginAttempts());\n     try {\n-      if (((clientId.length() == 0) || StringUtils.isBlank(clientId))\n-          || ((secretKey.length() == 0) || StringUtils.isBlank(secretKey))) {\n+\n+      if ((StringUtils.isBlank(clientId) || (clientId.equalsIgnoreCase(\"null\")))\n+          || (StringUtils.isBlank(secretKey) || (secretKey.equalsIgnoreCase(\"null\")))) {\n \n         MyStudiesUserRegUtil.getFailureResponse(\n-            401 + \"\",\n+            400 + \"\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eaa236643748cefb90a2cada092557e675ee227"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMxNDE3OQ==", "bodyText": "Instead of this do\nif (!participantDetails.getAccountStatus().equalsIgnoreCase(AppConstants.ACTIVE)) {\n          // Account is not Active\n          MyStudiesUserRegUtil.getFailureResponse(\n              MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n              AppConstants.INVALID_USERNAME_PASSWORD_MSG,\n              MyStudiesUserRegUtil.ErrorCodes.INVALID_USERNAME_PASSWORD_MSG.getValue(),\n              response);\n\n          logger.info(\"AuthenticationController login() - ends with account deactivated\");\n\n          return new ResponseEntity<>(loginResp, HttpStatus.UNAUTHORIZED);\n}\nLoginAttemptsBO loginAttempts =\n              userDetailsService.getLoginAttempts(loginRequest.getEmailId());\t              userDetailsService.getLoginAttempts(loginRequest.getEmailId());\n\nIf the else contains a return then invert the if and remove the else block\nhttps://www.jetbrains.com/help/resharper/InvertIf.html", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r422314179", "createdAt": "2020-05-08T18:55:43Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/AuthenticationController.java", "diffHunk": "@@ -613,24 +627,114 @@ private AuthServerRegistrationResponse prepareSuccessResponse(\n             userDetailsService.loadUserByEmailIdAndAppIdAndOrgIdAndAppCode(\n                 loginRequest.getEmailId(), appId, orgId, appCode);\n       }\n-      if (participantDetails != null\n-          && participantDetails.getAccountStatus().equalsIgnoreCase(AppConstants.ACTIVE)) {\n+      if (participantDetails != null) {\n+        if (participantDetails.getAccountStatus().equalsIgnoreCase(AppConstants.ACTIVE)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eaa236643748cefb90a2cada092557e675ee227"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMyNTAwOA==", "bodyText": "Move the logic for these two statements to another function, it can be reused to check participantDetails.getPassword() as well.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r422325008", "createdAt": "2020-05-08T19:18:20Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/AuthenticationController.java", "diffHunk": "@@ -613,24 +627,114 @@ private AuthServerRegistrationResponse prepareSuccessResponse(\n             userDetailsService.loadUserByEmailIdAndAppIdAndOrgIdAndAppCode(\n                 loginRequest.getEmailId(), appId, orgId, appCode);\n       }\n-      if (participantDetails != null\n-          && participantDetails.getAccountStatus().equalsIgnoreCase(AppConstants.ACTIVE)) {\n+      if (participantDetails != null) {\n+        if (participantDetails.getAccountStatus().equalsIgnoreCase(AppConstants.ACTIVE)) {\n+\n+          LoginAttemptsBO loginAttempts =\n+              userDetailsService.getLoginAttempts(loginRequest.getEmailId());\n+          Set<GrantedAuthority> roles = new HashSet<>();\n+          UserDetails userDetails =\n+              new User(participantDetails.getEmailId(), participantDetails.getPassword(), roles);\n+\n+          if (participantDetails.getLockedAccountTempPassword() != null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eaa236643748cefb90a2cada092557e675ee227"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMyNTk0Ng==", "bodyText": "Code is duplicate of above", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r422325946", "createdAt": "2020-05-08T19:20:13Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/AuthenticationController.java", "diffHunk": "@@ -613,24 +627,114 @@ private AuthServerRegistrationResponse prepareSuccessResponse(\n             userDetailsService.loadUserByEmailIdAndAppIdAndOrgIdAndAppCode(\n                 loginRequest.getEmailId(), appId, orgId, appCode);\n       }\n-      if (participantDetails != null\n-          && participantDetails.getAccountStatus().equalsIgnoreCase(AppConstants.ACTIVE)) {\n+      if (participantDetails != null) {\n+        if (participantDetails.getAccountStatus().equalsIgnoreCase(AppConstants.ACTIVE)) {\n+\n+          LoginAttemptsBO loginAttempts =\n+              userDetailsService.getLoginAttempts(loginRequest.getEmailId());\n+          Set<GrantedAuthority> roles = new HashSet<>();\n+          UserDetails userDetails =\n+              new User(participantDetails.getEmailId(), participantDetails.getPassword(), roles);\n+\n+          if (participantDetails.getLockedAccountTempPassword() != null\n+              && participantDetails\n+                  .getLockedAccountTempPassword()\n+                  .equals(\n+                      MyStudiesUserRegUtil.getEncryptedString(\n+                          loginRequest.getPassword(), participantDetails.getSalt()))) {\n+            if (participantDetails.getLockedAccountTempPasswordExpiredDate() != null\n+                && LocalDateTime.now(ZoneId.systemDefault())\n+                    .isAfter(participantDetails.getLockedAccountTempPasswordExpiredDate())) {\n+              throw new PasswordExpiredException();\n+            }\n+          }\n+\n+          if (participantDetails.getPassword() != null\n+              && participantDetails\n+                  .getPassword()\n+                  .equals(\n+                      MyStudiesUserRegUtil.getEncryptedString(\n+                          loginRequest.getPassword(), participantDetails.getSalt()))) {\n+            if (participantDetails.getLockedAccountTempPasswordExpiredDate() != null\n+                && LocalDateTime.now(ZoneId.systemDefault())\n+                    .isBefore(participantDetails.getLockedAccountTempPasswordExpiredDate())) {\n+              loginResp = new LoginResponse();\n+              MyStudiesUserRegUtil.getFailureResponse(\n+                  MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n+                  MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.name(),\n+                  MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.getValue(),\n+                  response);\n+              loginResp.setCode(ErrorCode.EC_102.code());\n+              loginResp.setMessage(MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.getValue());\n+              logger.info(\"AuthenticationController login() - ends with ACCOUNT_LOCKED\");\n+              return new ResponseEntity<>(loginResp, HttpStatus.BAD_REQUEST);\n+            }\n+          }\n+\n+          if (loginAttempts != null && loginAttempts.getAttempts() >= maxAttemptsCount) {\n+\n+            if (participantDetails.getPassword() != null\n+                && participantDetails\n+                    .getPassword()\n+                    .equals(\n+                        MyStudiesUserRegUtil.getEncryptedString(\n+                            loginRequest.getPassword(), participantDetails.getSalt()))) {\n+              loginResp = new LoginResponse();\n+              MyStudiesUserRegUtil.getFailureResponse(\n+                  MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n+                  MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.name(),\n+                  MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.getValue(),\n+                  response);\n+              loginResp.setCode(ErrorCode.EC_102.code());\n+              loginResp.setMessage(MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.getValue());\n+              logger.info(\"AuthenticationController login() - ends with ACCOUNT_LOCKED\");\n+              return new ResponseEntity<>(loginResp, HttpStatus.BAD_REQUEST);\n+            }\n \n-        LoginAttemptsBO loginAttempts =\n-            userDetailsService.getLoginAttempts(loginRequest.getEmailId());\n-        Set<GrantedAuthority> roles = new HashSet<>();\n-        UserDetails userDetails =\n-            new User(participantDetails.getEmailId(), participantDetails.getPassword(), roles);\n+            if ((participantDetails.getLockedAccountTempPassword() != null\n+                    && participantDetails\n+                        .getLockedAccountTempPassword()\n+                        .equals(\n+                            MyStudiesUserRegUtil.getEncryptedString(\n+                                loginRequest.getPassword(), participantDetails.getSalt())))\n+                && (participantDetails.getLockedAccountTempPasswordExpiredDate() != null\n+                    && LocalDateTime.now(ZoneId.systemDefault())\n+                        .isBefore(participantDetails.getLockedAccountTempPasswordExpiredDate()))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eaa236643748cefb90a2cada092557e675ee227"}, "originalPosition": 222}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMyNjI5Ng==", "bodyText": "Don't throw Exception. Pick something more specific.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r422326296", "createdAt": "2020-05-08T19:20:50Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/AuthenticationController.java", "diffHunk": "@@ -613,24 +627,114 @@ private AuthServerRegistrationResponse prepareSuccessResponse(\n             userDetailsService.loadUserByEmailIdAndAppIdAndOrgIdAndAppCode(\n                 loginRequest.getEmailId(), appId, orgId, appCode);\n       }\n-      if (participantDetails != null\n-          && participantDetails.getAccountStatus().equalsIgnoreCase(AppConstants.ACTIVE)) {\n+      if (participantDetails != null) {\n+        if (participantDetails.getAccountStatus().equalsIgnoreCase(AppConstants.ACTIVE)) {\n+\n+          LoginAttemptsBO loginAttempts =\n+              userDetailsService.getLoginAttempts(loginRequest.getEmailId());\n+          Set<GrantedAuthority> roles = new HashSet<>();\n+          UserDetails userDetails =\n+              new User(participantDetails.getEmailId(), participantDetails.getPassword(), roles);\n+\n+          if (participantDetails.getLockedAccountTempPassword() != null\n+              && participantDetails\n+                  .getLockedAccountTempPassword()\n+                  .equals(\n+                      MyStudiesUserRegUtil.getEncryptedString(\n+                          loginRequest.getPassword(), participantDetails.getSalt()))) {\n+            if (participantDetails.getLockedAccountTempPasswordExpiredDate() != null\n+                && LocalDateTime.now(ZoneId.systemDefault())\n+                    .isAfter(participantDetails.getLockedAccountTempPasswordExpiredDate())) {\n+              throw new PasswordExpiredException();\n+            }\n+          }\n+\n+          if (participantDetails.getPassword() != null\n+              && participantDetails\n+                  .getPassword()\n+                  .equals(\n+                      MyStudiesUserRegUtil.getEncryptedString(\n+                          loginRequest.getPassword(), participantDetails.getSalt()))) {\n+            if (participantDetails.getLockedAccountTempPasswordExpiredDate() != null\n+                && LocalDateTime.now(ZoneId.systemDefault())\n+                    .isBefore(participantDetails.getLockedAccountTempPasswordExpiredDate())) {\n+              loginResp = new LoginResponse();\n+              MyStudiesUserRegUtil.getFailureResponse(\n+                  MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n+                  MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.name(),\n+                  MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.getValue(),\n+                  response);\n+              loginResp.setCode(ErrorCode.EC_102.code());\n+              loginResp.setMessage(MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.getValue());\n+              logger.info(\"AuthenticationController login() - ends with ACCOUNT_LOCKED\");\n+              return new ResponseEntity<>(loginResp, HttpStatus.BAD_REQUEST);\n+            }\n+          }\n+\n+          if (loginAttempts != null && loginAttempts.getAttempts() >= maxAttemptsCount) {\n+\n+            if (participantDetails.getPassword() != null\n+                && participantDetails\n+                    .getPassword()\n+                    .equals(\n+                        MyStudiesUserRegUtil.getEncryptedString(\n+                            loginRequest.getPassword(), participantDetails.getSalt()))) {\n+              loginResp = new LoginResponse();\n+              MyStudiesUserRegUtil.getFailureResponse(\n+                  MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n+                  MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.name(),\n+                  MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.getValue(),\n+                  response);\n+              loginResp.setCode(ErrorCode.EC_102.code());\n+              loginResp.setMessage(MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.getValue());\n+              logger.info(\"AuthenticationController login() - ends with ACCOUNT_LOCKED\");\n+              return new ResponseEntity<>(loginResp, HttpStatus.BAD_REQUEST);\n+            }\n \n-        LoginAttemptsBO loginAttempts =\n-            userDetailsService.getLoginAttempts(loginRequest.getEmailId());\n-        Set<GrantedAuthority> roles = new HashSet<>();\n-        UserDetails userDetails =\n-            new User(participantDetails.getEmailId(), participantDetails.getPassword(), roles);\n+            if ((participantDetails.getLockedAccountTempPassword() != null\n+                    && participantDetails\n+                        .getLockedAccountTempPassword()\n+                        .equals(\n+                            MyStudiesUserRegUtil.getEncryptedString(\n+                                loginRequest.getPassword(), participantDetails.getSalt())))\n+                && (participantDetails.getLockedAccountTempPasswordExpiredDate() != null\n+                    && LocalDateTime.now(ZoneId.systemDefault())\n+                        .isBefore(participantDetails.getLockedAccountTempPasswordExpiredDate()))) {\n \n-        if (loginAttempts != null && loginAttempts.getAttempts() == maxAttemptsCount) {\n-          int count = Integer.parseInt(appConfig.getExpirationLoginAttemptsMinute());\n-          Date attemptsExpireDate =\n-              MyStudiesUserRegUtil.addMinutes(loginAttempts.getLastModified().toString(), count);\n+              userDetailsService.resetLoginAttempts(loginRequest.getEmailId());\n+              loginResp =\n+                  getLoginInformation(\n+                      participantDetails,\n+                      loginRequest.getEmailId(),\n+                      loginRequest.getPassword(),\n+                      maxAttemptsCount,\n+                      appId,\n+                      orgId,\n+                      appCode,\n+                      userDetails,\n+                      response);\n \n-          if (attemptsExpireDate.before(MyStudiesUserRegUtil.getCurrentUtilDateTime())\n-              || attemptsExpireDate.equals(MyStudiesUserRegUtil.getCurrentUtilDateTime())) {\n+            } else {\n+              String message =\n+                  userDetailsService.sendEmailOnAccountLocking(loginRequest.getEmailId(), appCode);\n+              if (AppConstants.SUCCESS.equalsIgnoreCase(message)) {\n+                loginResp = new LoginResponse();\n+                MyStudiesUserRegUtil.getFailureResponse(\n+                    MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n+                    MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.name(),\n+                    MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.getValue(),\n+                    response);\n+                loginResp.setCode(ErrorCode.EC_102.code());\n+                loginResp.setMessage(MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.getValue());\n \n-            userDetailsService.resetLoginAttempts(loginRequest.getEmailId());\n+                logger.info(\"AuthenticationController login() - ends with ACCOUNT_LOCKED\");\n+                return new ResponseEntity<>(loginResp, HttpStatus.BAD_REQUEST);\n+              }\n+              logger.info(\n+                  \"AuthenticationController login() - couldn't send email for Account locking\");\n+              throw new Exception();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eaa236643748cefb90a2cada092557e675ee227"}, "originalPosition": 262}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMyNjczMw==", "bodyText": "Same here. Also use brackets consistently", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r422326733", "createdAt": "2020-05-08T19:21:37Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/AuthenticationController.java", "diffHunk": "@@ -642,107 +746,75 @@ private AuthServerRegistrationResponse prepareSuccessResponse(\n                     appCode,\n                     userDetails,\n                     response);\n-          } else {\n-            loginResp = new LoginResponse();\n-            MyStudiesUserRegUtil.getFailureResponse(\n-                MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n-                MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.name(),\n-                MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.getValue(),\n-                response);\n-            loginResp.setCode(ErrorCode.EC_102.code());\n-            loginResp.setMessage(MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.getValue());\n-            logger.info(\"AuthenticationController login() - ends with ACCOUNT_LOCKED\");\n-            return new ResponseEntity<>(loginResp, HttpStatus.BAD_REQUEST);\n           }\n-        } else {\n-          loginResp =\n-              getLoginInformation(\n-                  participantDetails,\n-                  loginRequest.getEmailId(),\n-                  loginRequest.getPassword(),\n-                  maxAttemptsCount,\n-                  appId,\n-                  orgId,\n-                  appCode,\n-                  userDetails,\n+          if (loginResp != null && loginResp.getCode() != ErrorCode.EC_200.code()) {\n+            if (loginResp.getCode() == ErrorCode.EC_113.code()) {\n+              loginResp.setMessage(MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n+              MyStudiesUserRegUtil.getFailureResponse(\n+                  MyStudiesUserRegUtil.ErrorCodes.STATUS_104.getValue(),\n+                  MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.name(),\n+                  MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n                   response);\n-        }\n-        if (loginResp != null && loginResp.getCode() != ErrorCode.EC_200.code()) {\n-          if (loginResp.getCode() == ErrorCode.EC_113.code()) {\n-            loginResp.setMessage(MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n-            MyStudiesUserRegUtil.getFailureResponse(\n-                MyStudiesUserRegUtil.ErrorCodes.STATUS_104.getValue(),\n-                MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.name(),\n-                MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n-                response);\n-            logger.info(\"AuthenticationController login() - ends with BAD_REQUEST\");\n-            return new ResponseEntity<>(loginResp, HttpStatus.BAD_REQUEST);\n-          } else if (loginResp.getCode() == ErrorCode.EC_140.code()) {\n-            MyStudiesUserRegUtil.getFailureResponse(\n-                MyStudiesUserRegUtil.ErrorCodes.STATUS_103.getValue(),\n-                MyStudiesUserRegUtil.ErrorCodes.CODE_EXPIRED.getValue(),\n-                MyStudiesUserRegUtil.ErrorCodes.CODE_EXPIRED.getValue(),\n-                response);\n-            loginResp.setMessage(MyStudiesUserRegUtil.ErrorCodes.CODE_EXPIRED.getValue());\n-            logger.info(\"AuthenticationController login() - ends with CODE_EXPIRED\");\n-            return new ResponseEntity<>(loginResp, HttpStatus.BAD_REQUEST);\n-          } else if (loginResp.getCode() == ErrorCode.EC_102.code()) {\n-            MyStudiesUserRegUtil.getFailureResponse(\n-                MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n-                MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.name(),\n-                MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.getValue(),\n-                response);\n-            loginResp.setMessage(MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.getValue());\n-            activityLogService.createActivityLog(\n-                participantDetails.getUserId(),\n-                AppConstants.AUDIT_EVENT_FAILED_SIGN_IN_NAME,\n-                String.format(\n-                    AppConstants.AUDIT_EVENT_FAILED_SIGN_IN_DESC, participantDetails.getUserId()));\n-            logger.info(\"AuthenticationController login() - ends with ACCOUNT_LOCKED\");\n-            return new ResponseEntity<>(loginResp, HttpStatus.BAD_REQUEST);\n-          } else if (loginResp.getCode() == ErrorCode.EC_92.code()) {\n-            MyStudiesUserRegUtil.getFailureResponse(\n-                MyStudiesUserRegUtil.ErrorCodes.STATUS_101.getValue(),\n-                MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.name(),\n-                MyStudiesUserRegUtil.ErrorCodes.INVALID_USERNAME_PASSWORD_MSG.getValue(),\n-                response);\n-            loginResp.setCode(HttpStatus.UNAUTHORIZED.value());\n-            loginResp.setMessage(\n-                MyStudiesUserRegUtil.ErrorCodes.INVALID_USERNAME_PASSWORD_MSG.getValue());\n+              logger.info(\"AuthenticationController login() - ends with BAD_REQUEST\");\n+              return new ResponseEntity<>(loginResp, HttpStatus.BAD_REQUEST);\n+            } else if (loginResp.getCode() == ErrorCode.EC_140.code()) {\n+              MyStudiesUserRegUtil.getFailureResponse(\n+                  MyStudiesUserRegUtil.ErrorCodes.STATUS_103.getValue(),\n+                  MyStudiesUserRegUtil.ErrorCodes.CODE_EXPIRED.getValue(),\n+                  MyStudiesUserRegUtil.ErrorCodes.CODE_EXPIRED.getValue(),\n+                  response);\n+              loginResp.setMessage(MyStudiesUserRegUtil.ErrorCodes.CODE_EXPIRED.getValue());\n+              logger.info(\"AuthenticationController login() - ends with CODE_EXPIRED\");\n+              return new ResponseEntity<>(loginResp, HttpStatus.BAD_REQUEST);\n+            } else if (loginResp.getCode() == ErrorCode.EC_102.code()) {\n+              String message =\n+                  userDetailsService.sendEmailOnAccountLocking(loginRequest.getEmailId(), appCode);\n+              if (AppConstants.SUCCESS.equalsIgnoreCase(message)) {\n+                MyStudiesUserRegUtil.getFailureResponse(\n+                    MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n+                    MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.name(),\n+                    MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.getValue(),\n+                    response);\n+                loginResp.setMessage(MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.getValue());\n             activityLogService.createActivityLog(\n                 participantDetails.getUserId(),\n                 AppConstants.AUDIT_EVENT_FAILED_SIGN_IN_NAME,\n                 String.format(\n                     AppConstants.AUDIT_EVENT_FAILED_SIGN_IN_DESC, participantDetails.getUserId()));\n-            logger.info(\"AuthenticationController login() - ends with UNAUTHORIZED request\");\n-            return new ResponseEntity<>(loginResp, HttpStatus.UNAUTHORIZED);\n+                logger.info(\"AuthenticationController login() - ends with ACCOUNT_LOCKED\");\n+                return new ResponseEntity<>(loginResp, HttpStatus.BAD_REQUEST);\n+              } else throw new Exception();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eaa236643748cefb90a2cada092557e675ee227"}, "originalPosition": 376}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMyNzE3MQ==", "bodyText": "Same with if (participantDetails != null) {", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r422327171", "createdAt": "2020-05-08T19:22:32Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/AuthenticationController.java", "diffHunk": "@@ -613,24 +627,114 @@ private AuthServerRegistrationResponse prepareSuccessResponse(\n             userDetailsService.loadUserByEmailIdAndAppIdAndOrgIdAndAppCode(\n                 loginRequest.getEmailId(), appId, orgId, appCode);\n       }\n-      if (participantDetails != null\n-          && participantDetails.getAccountStatus().equalsIgnoreCase(AppConstants.ACTIVE)) {\n+      if (participantDetails != null) {\n+        if (participantDetails.getAccountStatus().equalsIgnoreCase(AppConstants.ACTIVE)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMxNDE3OQ=="}, "originalCommit": {"oid": "4eaa236643748cefb90a2cada092557e675ee227"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMyOTc0Mg==", "bodyText": "remove debugging statements", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r422329742", "createdAt": "2020-05-08T19:27:53Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/AuthenticationController.java", "diffHunk": "@@ -1080,6 +1180,23 @@ private AuthServerRegistrationResponse prepareSuccessResponse(\n                   userInfo.setResetPassword(null);\n                   userInfo.setTempPasswordDate(MyStudiesUserRegUtil.getCurrentUtilDateTime());\n                   userInfo.setPasswordUpdatedDate(MyStudiesUserRegUtil.getCurrentUtilDateTime());\n+\n+                  logger.info(\"msg: \" + userInfo.getLockedAccountTempPassword());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eaa236643748cefb90a2cada092557e675ee227"}, "originalPosition": 493}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMzMjMyMw==", "bodyText": "Duplicated logic again", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r422332323", "createdAt": "2020-05-08T19:33:21Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/AuthenticationController.java", "diffHunk": "@@ -1048,9 +1128,29 @@ private AuthServerRegistrationResponse prepareSuccessResponse(\n               || (userInfo.getResetPassword() != null\n                   && userInfo\n                       .getResetPassword()\n+                      .equalsIgnoreCase(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eaa236643748cefb90a2cada092557e675ee227"}, "originalPosition": 453}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMzMzg0Nw==", "bodyText": "I don't think we should be logging the contents of every email we send.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r422333847", "createdAt": "2020-05-08T19:36:33Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/utils/EmailNotification.java", "diffHunk": "@@ -28,8 +28,14 @@ public boolean sendEmailNotification(\n       String content,\n       String toMail,\n       List<String> ccMailList,\n-      List<String> bccMailList)\n-      throws Exception {\n+      List<String> bccMailList) {\n+    logger.info(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eaa236643748cefb90a2cada092557e675ee227"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMzNDAwNw==", "bodyText": "Remove commented code.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r422334007", "createdAt": "2020-05-08T19:36:55Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/utils/MyStudiesUserRegUtil.java", "diffHunk": "@@ -300,4 +303,30 @@ public static Date addHours(String currentDate, int hours) {\n     }\n     return futureDate;\n   }\n+\n+  public static String genarateEmailContent(String emailContentName, Map<String, String> keyValue) {\n+\n+    //    String dynamicContent = appConfig.get(emailContentName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eaa236643748cefb90a2cada092557e675ee227"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMzNDUzMA==", "bodyText": "use String.trim() instead.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r422334530", "createdAt": "2020-05-08T19:38:09Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/utils/MyStudiesUserRegUtil.java", "diffHunk": "@@ -300,4 +303,30 @@ public static Date addHours(String currentDate, int hours) {\n     }\n     return futureDate;\n   }\n+\n+  public static String genarateEmailContent(String emailContentName, Map<String, String> keyValue) {\n+\n+    //    String dynamicContent = appConfig.get(emailContentName);\n+    logger.info(\"MyStudiesUserRegUtil - genarateEmailContent() :: Starts\");\n+\n+    if (MyStudiesUserRegUtil.isNotEmpty(emailContentName)) {\n+      for (Map.Entry<String, String> entry : keyValue.entrySet()) {\n+        emailContentName =\n+            emailContentName.replace(\n+                entry.getKey(), StringUtils.isBlank(entry.getValue()) ? \"\" : entry.getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eaa236643748cefb90a2cada092557e675ee227"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMzNDcxOQ==", "bodyText": "This already exists on StringUtils", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r422334719", "createdAt": "2020-05-08T19:38:31Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/utils/MyStudiesUserRegUtil.java", "diffHunk": "@@ -300,4 +303,30 @@ public static Date addHours(String currentDate, int hours) {\n     }\n     return futureDate;\n   }\n+\n+  public static String genarateEmailContent(String emailContentName, Map<String, String> keyValue) {\n+\n+    //    String dynamicContent = appConfig.get(emailContentName);\n+    logger.info(\"MyStudiesUserRegUtil - genarateEmailContent() :: Starts\");\n+\n+    if (MyStudiesUserRegUtil.isNotEmpty(emailContentName)) {\n+      for (Map.Entry<String, String> entry : keyValue.entrySet()) {\n+        emailContentName =\n+            emailContentName.replace(\n+                entry.getKey(), StringUtils.isBlank(entry.getValue()) ? \"\" : entry.getValue());\n+      }\n+    }\n+    logger.info(\"MyStudiesUserRegUtil - genarateEmailContent() :: Ends\");\n+    return emailContentName;\n+  }\n+\n+  public static boolean isNotEmpty(String str) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eaa236643748cefb90a2cada092557e675ee227"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMzODI3OQ==", "bodyText": "Invert this if", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r422338279", "createdAt": "2020-05-08T19:46:25Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserDetailsServiceImpl.java", "diffHunk": "@@ -643,4 +643,49 @@ public String savePasswordHistory(String userId, String password, String salt) {\n     logger.info(\"UserDetailsServiceImpl savePasswordHistory() - ends\");\n     return message;\n   }\n+\n+  @Override\n+  public String sendEmailOnAccountLocking(String emailId, String appCode)\n+      throws UserNotFoundException {\n+    logger.info(\"UserDetailsServiceImpl sendEmailOnAccountLocking() - starts\");\n+    String message = AppConstants.FAILURE;\n+\n+    if (emailId != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eaa236643748cefb90a2cada092557e675ee227"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0MTAzNw==", "bodyText": "This function is too complicated. Please refactor it into smaller pieces.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r422341037", "createdAt": "2020-05-08T19:52:35Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/AuthenticationController.java", "diffHunk": "@@ -437,30 +436,32 @@\n     AuthServerRegistrationResponse controllerResp = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eaa236643748cefb90a2cada092557e675ee227"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0MTIxOA==", "bodyText": "This function is too complicated. Please refactor it into smaller pieces.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r422341218", "createdAt": "2020-05-08T19:52:58Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/AuthenticationController.java", "diffHunk": "@@ -559,19 +571,21 @@ private AuthServerRegistrationResponse prepareSuccessResponse(\n     DaoUserBO participantDetails = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eaa236643748cefb90a2cada092557e675ee227"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0MTUzNg==", "bodyText": "Don't catch Exception", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r422341536", "createdAt": "2020-05-08T19:53:37Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/AuthenticationController.java", "diffHunk": "@@ -752,6 +824,14 @@ private AuthServerRegistrationResponse prepareSuccessResponse(\n           response);\n       logger.error(\"AuthenticationController login() - error with UNAUTHORIZED request: \", e);\n       return new ResponseEntity<>(loginResp, HttpStatus.UNAUTHORIZED);\n+    } catch (UserNotFoundException e) {\n+      MyStudiesUserRegUtil.getFailureResponse(\n+          MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n+          AppConstants.INVALID_USERNAME_PASSWORD_MSG,\n+          MyStudiesUserRegUtil.ErrorCodes.INVALID_USERNAME_PASSWORD_MSG.getValue(),\n+          response);\n+      logger.info(\"AuthenticationController login() - ends with UNAUTHORIZED Request\");\n+      return new ResponseEntity<>(loginResp, HttpStatus.UNAUTHORIZED);\n     } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eaa236643748cefb90a2cada092557e675ee227"}, "originalPosition": 446}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0MTg2NQ==", "bodyText": "This function is too complicated. Please refactor it into smaller pieces.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r422341865", "createdAt": "2020-05-08T19:54:14Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/AuthenticationController.java", "diffHunk": "@@ -1247,18 +1377,37 @@ private LoginResponse getLoginInformation(\n         logger.info(\"TRUE\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eaa236643748cefb90a2cada092557e675ee227"}, "originalPosition": 535}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0MjEwMw==", "bodyText": "Remove logging statement", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r422342103", "createdAt": "2020-05-08T19:54:47Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserDetailsServiceImpl.java", "diffHunk": "@@ -643,4 +643,49 @@ public String savePasswordHistory(String userId, String password, String salt) {\n     logger.info(\"UserDetailsServiceImpl savePasswordHistory() - ends\");\n     return message;\n   }\n+\n+  @Override\n+  public String sendEmailOnAccountLocking(String emailId, String appCode)\n+      throws UserNotFoundException {\n+    logger.info(\"UserDetailsServiceImpl sendEmailOnAccountLocking() - starts\");\n+    String message = AppConstants.FAILURE;\n+\n+    if (emailId != null) {\n+      DaoUserBO userInfo = userRepo.findByEmailIdAndAppCode(emailId, appCode);\n+      if (userInfo != null) {\n+\n+        String tempPassword = RandomStringUtils.randomAlphanumeric(6);\n+        logger.info(\"tempPassword: \" + tempPassword);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eaa236643748cefb90a2cada092557e675ee227"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0MjQ5OA==", "bodyText": "You are using \"SUCCESS\" instead of a bool. Use bools for indicating success", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r422342498", "createdAt": "2020-05-08T19:55:41Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserDetailsServiceImpl.java", "diffHunk": "@@ -643,4 +643,49 @@ public String savePasswordHistory(String userId, String password, String salt) {\n     logger.info(\"UserDetailsServiceImpl savePasswordHistory() - ends\");\n     return message;\n   }\n+\n+  @Override\n+  public String sendEmailOnAccountLocking(String emailId, String appCode)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eaa236643748cefb90a2cada092557e675ee227"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0Mjc1Mw==", "bodyText": "Invert this if", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r422342753", "createdAt": "2020-05-08T19:56:13Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserDetailsServiceImpl.java", "diffHunk": "@@ -643,4 +643,49 @@ public String savePasswordHistory(String userId, String password, String salt) {\n     logger.info(\"UserDetailsServiceImpl savePasswordHistory() - ends\");\n     return message;\n   }\n+\n+  @Override\n+  public String sendEmailOnAccountLocking(String emailId, String appCode)\n+      throws UserNotFoundException {\n+    logger.info(\"UserDetailsServiceImpl sendEmailOnAccountLocking() - starts\");\n+    String message = AppConstants.FAILURE;\n+\n+    if (emailId != null) {\n+      DaoUserBO userInfo = userRepo.findByEmailIdAndAppCode(emailId, appCode);\n+      if (userInfo != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eaa236643748cefb90a2cada092557e675ee227"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e87ede386af907320c994e075f0a47d3378e76d", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/0e87ede386af907320c994e075f0a47d3378e76d", "committedDate": "2020-05-11T12:19:18Z", "message": "Merge branch 'early-access' into early-access-mobile-user-account-lock-fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4506cc6574bf6aff58d35fb6db28b21b57300e8", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/d4506cc6574bf6aff58d35fb6db28b21b57300e8", "committedDate": "2020-05-11T15:50:36Z", "message": "Merge branch 'early-access' into early-access-mobile-user-account-lock-fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc892331ebbb32fdaa9f759c7b7789d6bb52f4a0", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/bc892331ebbb32fdaa9f759c7b7789d6bb52f4a0", "committedDate": "2020-05-12T06:18:40Z", "message": "Merge branch 'early-access' into early-access-mobile-user-account-lock-fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca71d2c8105c07252093fd9bdd094d1b0a2d7946", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/ca71d2c8105c07252093fd9bdd094d1b0a2d7946", "committedDate": "2020-05-18T07:48:18Z", "message": "Merge branch 'early-access' into early-access-mobile-user-account-lock-fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd377b6c0142878703bdbf637294454ad3acf342", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/fd377b6c0142878703bdbf637294454ad3acf342", "committedDate": "2020-05-26T08:26:53Z", "message": "PR #366 comment issue fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbf9cd3cc9efe033418df5874126073d7d4af8e1", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/dbf9cd3cc9efe033418df5874126073d7d4af8e1", "committedDate": "2020-05-26T08:27:33Z", "message": "Merge branch 'early-access' into early-access-mobile-user-account-lock-fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NDAwNTc5", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#pullrequestreview-418400579", "createdAt": "2020-05-26T15:14:10Z", "commit": {"oid": "fd377b6c0142878703bdbf637294454ad3acf342"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNToxNDoxMFrOGajCKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNTo0ODo0M1rOGakwzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ5MDE1Mw==", "bodyText": "There are still too many if statement in this function. At least 4 of them just result in a BAD_REQUEST being returned. Why don't you move all of those out into a function called \"verifyUserRegistrationRequest\" that returns a boolean. Then you only need to return a BAD_REQUEST from one place in this method.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r430490153", "createdAt": "2020-05-26T15:14:10Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/AuthenticationController.java", "diffHunk": "@@ -437,30 +436,32 @@\n     AuthServerRegistrationResponse controllerResp = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0MTAzNw=="}, "originalCommit": {"oid": "4eaa236643748cefb90a2cada092557e675ee227"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ5Mjk5Mg==", "bodyText": "This is certainly better, your changes are easier to understand now. In the future functions need to be shorter though.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r430492992", "createdAt": "2020-05-26T15:18:01Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/AuthenticationController.java", "diffHunk": "@@ -559,19 +571,21 @@ private AuthServerRegistrationResponse prepareSuccessResponse(\n     DaoUserBO participantDetails = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0MTIxOA=="}, "originalCommit": {"oid": "4eaa236643748cefb90a2cada092557e675ee227"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ5MzM5Mw==", "bodyText": "combine if statements", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r430493393", "createdAt": "2020-05-26T15:18:35Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/AuthenticationController.java", "diffHunk": "@@ -570,277 +527,168 @@ private AuthServerRegistrationResponse prepareSuccessResponse(\n     String appCode = null;\n     DaoUserBO participantDetails = null;\n     Integer maxAttemptsCount = Integer.valueOf(appConfig.getMaxLoginAttempts());\n-    try {\n-\n-      if ((StringUtils.isBlank(clientId) || (clientId.equalsIgnoreCase(\"null\")))\n-          || (StringUtils.isBlank(secretKey) || (secretKey.equalsIgnoreCase(\"null\")))) {\n-\n-        MyStudiesUserRegUtil.getFailureResponse(\n-            400 + \"\",\n-            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n-            response);\n-        logger.info(\"AuthenticationController login() - ends with BAD_REQUEST\");\n-        return new ResponseEntity<>(loginResp, HttpStatus.BAD_REQUEST);\n-      }\n \n-      if (StringUtils.isBlank(loginRequest.getEmailId())\n+    try {\n+      if (StringUtils.isBlank(clientId)\n+          || StringUtils.isBlank(secretKey)\n+          || StringUtils.isBlank(loginRequest.getEmailId())\n           || StringUtils.isBlank(loginRequest.getPassword())) {\n-        MyStudiesUserRegUtil.getFailureResponse(\n-            400 + \"\",\n-            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n-            response);\n+        MyStudiesUserRegUtil.loginResponse(response, AppConstants.MISSING_REQUIRED_PARAMETER);\n         logger.info(\"AuthenticationController login() - ends with BAD_REQUEST\");\n         return new ResponseEntity<>(loginResp, HttpStatus.BAD_REQUEST);\n       }\n+\n       appCode = clientInfoService.checkClientInfo(clientId, secretKey);\n+      logger.info(\"appCode: \" + appCode);\n \n       if (appCode == null || StringUtils.isBlank(appCode)) {\n-        MyStudiesUserRegUtil.getFailureResponse(\n-            401 + \"\",\n-            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-            MyStudiesUserRegUtil.ErrorCodes.INVALID_CLIENTID_OR_SECRET_KEY.getValue(),\n-            response);\n+        MyStudiesUserRegUtil.loginResponse(response, AppConstants.INVALID_CLIENTID_OR_SECRET_KEY);\n         logger.info(\"AuthenticationController login() - ends with INVALID CLIENTID OR SECRET KEY\");\n         return new ResponseEntity<>(loginResp, HttpStatus.UNAUTHORIZED);\n       }\n \n-      if (\"MA\".equals(appCode)) {\n-        if ((StringUtils.isBlank(appId) || (appId.equalsIgnoreCase(\"null\")))\n-            || (StringUtils.isBlank(orgId) || (orgId.equalsIgnoreCase(\"null\")))) {\n-          MyStudiesUserRegUtil.getFailureResponse(\n-              400 + \"\",\n-              MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n-              response);\n+      if (AppConstants.MA.equals(appCode)) {\n+        if (StringUtils.isBlank(appId) || StringUtils.isBlank(orgId)) {\n+          MyStudiesUserRegUtil.loginResponse(response, AppConstants.MISSING_REQUIRED_PARAMETER);\n           logger.info(\"AuthenticationController login() - ends with INVALID_INPUT\");\n           return new ResponseEntity<>(loginResp, HttpStatus.BAD_REQUEST);\n         }\n       }\n \n-      if (!\"MA\".equals(appCode)) {\n+      if (!AppConstants.MA.equals(appCode)) {\n         participantDetails =\n             userDetailsService.loadUserByEmailIdAndAppCode(loginRequest.getEmailId(), appCode);\n       } else {\n         participantDetails =\n             userDetailsService.loadUserByEmailIdAndAppIdAndOrgIdAndAppCode(\n                 loginRequest.getEmailId(), appId, orgId, appCode);\n       }\n-      if (participantDetails != null) {\n-        if (participantDetails.getAccountStatus().equalsIgnoreCase(AppConstants.ACTIVE)) {\n-\n-          LoginAttemptsBO loginAttempts =\n-              userDetailsService.getLoginAttempts(loginRequest.getEmailId());\n-          Set<GrantedAuthority> roles = new HashSet<>();\n-          UserDetails userDetails =\n-              new User(participantDetails.getEmailId(), participantDetails.getPassword(), roles);\n-\n-          if (participantDetails.getLockedAccountTempPassword() != null\n-              && participantDetails\n-                  .getLockedAccountTempPassword()\n-                  .equals(\n-                      MyStudiesUserRegUtil.getEncryptedString(\n-                          loginRequest.getPassword(), participantDetails.getSalt()))) {\n-            if (participantDetails.getLockedAccountTempPasswordExpiredDate() != null\n-                && LocalDateTime.now(ZoneId.systemDefault())\n-                    .isAfter(participantDetails.getLockedAccountTempPasswordExpiredDate())) {\n-              throw new PasswordExpiredException();\n-            }\n-          }\n-\n-          if (participantDetails.getPassword() != null\n-              && participantDetails\n-                  .getPassword()\n-                  .equals(\n-                      MyStudiesUserRegUtil.getEncryptedString(\n-                          loginRequest.getPassword(), participantDetails.getSalt()))) {\n-            if (participantDetails.getLockedAccountTempPasswordExpiredDate() != null\n-                && LocalDateTime.now(ZoneId.systemDefault())\n-                    .isBefore(participantDetails.getLockedAccountTempPasswordExpiredDate())) {\n-              loginResp = new LoginResponse();\n-              MyStudiesUserRegUtil.getFailureResponse(\n-                  MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.name(),\n-                  MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.getValue(),\n-                  response);\n-              loginResp.setCode(ErrorCode.EC_102.code());\n-              loginResp.setMessage(MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.getValue());\n-              logger.info(\"AuthenticationController login() - ends with ACCOUNT_LOCKED\");\n-              return new ResponseEntity<>(loginResp, HttpStatus.BAD_REQUEST);\n-            }\n-          }\n \n-          if (loginAttempts != null && loginAttempts.getAttempts() >= maxAttemptsCount) {\n-\n-            if (participantDetails.getPassword() != null\n-                && participantDetails\n-                    .getPassword()\n-                    .equals(\n-                        MyStudiesUserRegUtil.getEncryptedString(\n-                            loginRequest.getPassword(), participantDetails.getSalt()))) {\n-              loginResp = new LoginResponse();\n-              MyStudiesUserRegUtil.getFailureResponse(\n-                  MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.name(),\n-                  MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.getValue(),\n-                  response);\n-              loginResp.setCode(ErrorCode.EC_102.code());\n-              loginResp.setMessage(MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.getValue());\n-              logger.info(\"AuthenticationController login() - ends with ACCOUNT_LOCKED\");\n-              return new ResponseEntity<>(loginResp, HttpStatus.BAD_REQUEST);\n-            }\n+      if (participantDetails == null) {\n+        throw new UserNotFoundException();\n+      }\n \n-            if ((participantDetails.getLockedAccountTempPassword() != null\n-                    && participantDetails\n-                        .getLockedAccountTempPassword()\n-                        .equals(\n-                            MyStudiesUserRegUtil.getEncryptedString(\n-                                loginRequest.getPassword(), participantDetails.getSalt())))\n-                && (participantDetails.getLockedAccountTempPasswordExpiredDate() != null\n-                    && LocalDateTime.now(ZoneId.systemDefault())\n-                        .isBefore(participantDetails.getLockedAccountTempPasswordExpiredDate()))) {\n-\n-              userDetailsService.resetLoginAttempts(loginRequest.getEmailId());\n-              loginResp =\n-                  getLoginInformation(\n-                      participantDetails,\n-                      loginRequest.getEmailId(),\n-                      loginRequest.getPassword(),\n-                      maxAttemptsCount,\n-                      appId,\n-                      orgId,\n-                      appCode,\n-                      userDetails,\n-                      response);\n+      if (!participantDetails.getAccountStatus().equalsIgnoreCase(AppConstants.ACTIVE)) {\n+        // Account is not Active\n+        MyStudiesUserRegUtil.loginResponse(response, AppConstants.INVALID_USERNAME_PASSWORD);\n+        logger.info(\"AuthenticationController login() - ends with account deactivated\");\n+        return new ResponseEntity<>(loginResp, HttpStatus.UNAUTHORIZED);\n+      }\n \n-            } else {\n-              String message =\n-                  userDetailsService.sendEmailOnAccountLocking(loginRequest.getEmailId(), appCode);\n-              if (AppConstants.SUCCESS.equalsIgnoreCase(message)) {\n-                loginResp = new LoginResponse();\n-                MyStudiesUserRegUtil.getFailureResponse(\n-                    MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n-                    MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.name(),\n-                    MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.getValue(),\n-                    response);\n-                loginResp.setCode(ErrorCode.EC_102.code());\n-                loginResp.setMessage(MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.getValue());\n+      LoginAttemptsBO loginAttempts =\n+          userDetailsService.getLoginAttempts(loginRequest.getEmailId());\n+      Set<GrantedAuthority> roles = new HashSet<>();\n+      UserDetails userDetails =\n+          new User(participantDetails.getEmailId(), participantDetails.getPassword(), roles);\n+\n+      if (lockedAccountTempPasswordCheck(loginRequest.getPassword(), participantDetails)) {\n+        if (participantDetails.getLockedAccountTempPasswordExpiredDate() != null\n+            && LocalDateTime.now(ZoneId.systemDefault())\n+                .isAfter(participantDetails.getLockedAccountTempPasswordExpiredDate())) {\n+          throw new PasswordExpiredException();\n+        }\n+      }\n+      if (lockedAccountPassword(loginRequest.getPassword(), participantDetails)) {\n+        if (isInLockPeriod(participantDetails)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd377b6c0142878703bdbf637294454ad3acf342"}, "originalPosition": 598}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ5NDA2MA==", "bodyText": "Rename message to sentMessage", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r430494060", "createdAt": "2020-05-26T15:19:33Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/AuthenticationController.java", "diffHunk": "@@ -570,277 +527,168 @@ private AuthServerRegistrationResponse prepareSuccessResponse(\n     String appCode = null;\n     DaoUserBO participantDetails = null;\n     Integer maxAttemptsCount = Integer.valueOf(appConfig.getMaxLoginAttempts());\n-    try {\n-\n-      if ((StringUtils.isBlank(clientId) || (clientId.equalsIgnoreCase(\"null\")))\n-          || (StringUtils.isBlank(secretKey) || (secretKey.equalsIgnoreCase(\"null\")))) {\n-\n-        MyStudiesUserRegUtil.getFailureResponse(\n-            400 + \"\",\n-            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n-            response);\n-        logger.info(\"AuthenticationController login() - ends with BAD_REQUEST\");\n-        return new ResponseEntity<>(loginResp, HttpStatus.BAD_REQUEST);\n-      }\n \n-      if (StringUtils.isBlank(loginRequest.getEmailId())\n+    try {\n+      if (StringUtils.isBlank(clientId)\n+          || StringUtils.isBlank(secretKey)\n+          || StringUtils.isBlank(loginRequest.getEmailId())\n           || StringUtils.isBlank(loginRequest.getPassword())) {\n-        MyStudiesUserRegUtil.getFailureResponse(\n-            400 + \"\",\n-            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n-            response);\n+        MyStudiesUserRegUtil.loginResponse(response, AppConstants.MISSING_REQUIRED_PARAMETER);\n         logger.info(\"AuthenticationController login() - ends with BAD_REQUEST\");\n         return new ResponseEntity<>(loginResp, HttpStatus.BAD_REQUEST);\n       }\n+\n       appCode = clientInfoService.checkClientInfo(clientId, secretKey);\n+      logger.info(\"appCode: \" + appCode);\n \n       if (appCode == null || StringUtils.isBlank(appCode)) {\n-        MyStudiesUserRegUtil.getFailureResponse(\n-            401 + \"\",\n-            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-            MyStudiesUserRegUtil.ErrorCodes.INVALID_CLIENTID_OR_SECRET_KEY.getValue(),\n-            response);\n+        MyStudiesUserRegUtil.loginResponse(response, AppConstants.INVALID_CLIENTID_OR_SECRET_KEY);\n         logger.info(\"AuthenticationController login() - ends with INVALID CLIENTID OR SECRET KEY\");\n         return new ResponseEntity<>(loginResp, HttpStatus.UNAUTHORIZED);\n       }\n \n-      if (\"MA\".equals(appCode)) {\n-        if ((StringUtils.isBlank(appId) || (appId.equalsIgnoreCase(\"null\")))\n-            || (StringUtils.isBlank(orgId) || (orgId.equalsIgnoreCase(\"null\")))) {\n-          MyStudiesUserRegUtil.getFailureResponse(\n-              400 + \"\",\n-              MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n-              response);\n+      if (AppConstants.MA.equals(appCode)) {\n+        if (StringUtils.isBlank(appId) || StringUtils.isBlank(orgId)) {\n+          MyStudiesUserRegUtil.loginResponse(response, AppConstants.MISSING_REQUIRED_PARAMETER);\n           logger.info(\"AuthenticationController login() - ends with INVALID_INPUT\");\n           return new ResponseEntity<>(loginResp, HttpStatus.BAD_REQUEST);\n         }\n       }\n \n-      if (!\"MA\".equals(appCode)) {\n+      if (!AppConstants.MA.equals(appCode)) {\n         participantDetails =\n             userDetailsService.loadUserByEmailIdAndAppCode(loginRequest.getEmailId(), appCode);\n       } else {\n         participantDetails =\n             userDetailsService.loadUserByEmailIdAndAppIdAndOrgIdAndAppCode(\n                 loginRequest.getEmailId(), appId, orgId, appCode);\n       }\n-      if (participantDetails != null) {\n-        if (participantDetails.getAccountStatus().equalsIgnoreCase(AppConstants.ACTIVE)) {\n-\n-          LoginAttemptsBO loginAttempts =\n-              userDetailsService.getLoginAttempts(loginRequest.getEmailId());\n-          Set<GrantedAuthority> roles = new HashSet<>();\n-          UserDetails userDetails =\n-              new User(participantDetails.getEmailId(), participantDetails.getPassword(), roles);\n-\n-          if (participantDetails.getLockedAccountTempPassword() != null\n-              && participantDetails\n-                  .getLockedAccountTempPassword()\n-                  .equals(\n-                      MyStudiesUserRegUtil.getEncryptedString(\n-                          loginRequest.getPassword(), participantDetails.getSalt()))) {\n-            if (participantDetails.getLockedAccountTempPasswordExpiredDate() != null\n-                && LocalDateTime.now(ZoneId.systemDefault())\n-                    .isAfter(participantDetails.getLockedAccountTempPasswordExpiredDate())) {\n-              throw new PasswordExpiredException();\n-            }\n-          }\n-\n-          if (participantDetails.getPassword() != null\n-              && participantDetails\n-                  .getPassword()\n-                  .equals(\n-                      MyStudiesUserRegUtil.getEncryptedString(\n-                          loginRequest.getPassword(), participantDetails.getSalt()))) {\n-            if (participantDetails.getLockedAccountTempPasswordExpiredDate() != null\n-                && LocalDateTime.now(ZoneId.systemDefault())\n-                    .isBefore(participantDetails.getLockedAccountTempPasswordExpiredDate())) {\n-              loginResp = new LoginResponse();\n-              MyStudiesUserRegUtil.getFailureResponse(\n-                  MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.name(),\n-                  MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.getValue(),\n-                  response);\n-              loginResp.setCode(ErrorCode.EC_102.code());\n-              loginResp.setMessage(MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.getValue());\n-              logger.info(\"AuthenticationController login() - ends with ACCOUNT_LOCKED\");\n-              return new ResponseEntity<>(loginResp, HttpStatus.BAD_REQUEST);\n-            }\n-          }\n \n-          if (loginAttempts != null && loginAttempts.getAttempts() >= maxAttemptsCount) {\n-\n-            if (participantDetails.getPassword() != null\n-                && participantDetails\n-                    .getPassword()\n-                    .equals(\n-                        MyStudiesUserRegUtil.getEncryptedString(\n-                            loginRequest.getPassword(), participantDetails.getSalt()))) {\n-              loginResp = new LoginResponse();\n-              MyStudiesUserRegUtil.getFailureResponse(\n-                  MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.name(),\n-                  MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.getValue(),\n-                  response);\n-              loginResp.setCode(ErrorCode.EC_102.code());\n-              loginResp.setMessage(MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.getValue());\n-              logger.info(\"AuthenticationController login() - ends with ACCOUNT_LOCKED\");\n-              return new ResponseEntity<>(loginResp, HttpStatus.BAD_REQUEST);\n-            }\n+      if (participantDetails == null) {\n+        throw new UserNotFoundException();\n+      }\n \n-            if ((participantDetails.getLockedAccountTempPassword() != null\n-                    && participantDetails\n-                        .getLockedAccountTempPassword()\n-                        .equals(\n-                            MyStudiesUserRegUtil.getEncryptedString(\n-                                loginRequest.getPassword(), participantDetails.getSalt())))\n-                && (participantDetails.getLockedAccountTempPasswordExpiredDate() != null\n-                    && LocalDateTime.now(ZoneId.systemDefault())\n-                        .isBefore(participantDetails.getLockedAccountTempPasswordExpiredDate()))) {\n-\n-              userDetailsService.resetLoginAttempts(loginRequest.getEmailId());\n-              loginResp =\n-                  getLoginInformation(\n-                      participantDetails,\n-                      loginRequest.getEmailId(),\n-                      loginRequest.getPassword(),\n-                      maxAttemptsCount,\n-                      appId,\n-                      orgId,\n-                      appCode,\n-                      userDetails,\n-                      response);\n+      if (!participantDetails.getAccountStatus().equalsIgnoreCase(AppConstants.ACTIVE)) {\n+        // Account is not Active\n+        MyStudiesUserRegUtil.loginResponse(response, AppConstants.INVALID_USERNAME_PASSWORD);\n+        logger.info(\"AuthenticationController login() - ends with account deactivated\");\n+        return new ResponseEntity<>(loginResp, HttpStatus.UNAUTHORIZED);\n+      }\n \n-            } else {\n-              String message =\n-                  userDetailsService.sendEmailOnAccountLocking(loginRequest.getEmailId(), appCode);\n-              if (AppConstants.SUCCESS.equalsIgnoreCase(message)) {\n-                loginResp = new LoginResponse();\n-                MyStudiesUserRegUtil.getFailureResponse(\n-                    MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n-                    MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.name(),\n-                    MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.getValue(),\n-                    response);\n-                loginResp.setCode(ErrorCode.EC_102.code());\n-                loginResp.setMessage(MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.getValue());\n+      LoginAttemptsBO loginAttempts =\n+          userDetailsService.getLoginAttempts(loginRequest.getEmailId());\n+      Set<GrantedAuthority> roles = new HashSet<>();\n+      UserDetails userDetails =\n+          new User(participantDetails.getEmailId(), participantDetails.getPassword(), roles);\n+\n+      if (lockedAccountTempPasswordCheck(loginRequest.getPassword(), participantDetails)) {\n+        if (participantDetails.getLockedAccountTempPasswordExpiredDate() != null\n+            && LocalDateTime.now(ZoneId.systemDefault())\n+                .isAfter(participantDetails.getLockedAccountTempPasswordExpiredDate())) {\n+          throw new PasswordExpiredException();\n+        }\n+      }\n+      if (lockedAccountPassword(loginRequest.getPassword(), participantDetails)) {\n+        if (isInLockPeriod(participantDetails)) {\n+          loginResp = MyStudiesUserRegUtil.loginResponse(response, AppConstants.ACCOUNT_LOCKED);\n+          logger.info(\"AuthenticationController login() - ends with ACCOUNT_LOCKED\");\n+          return new ResponseEntity<>(loginResp, HttpStatus.BAD_REQUEST);\n+        }\n+      }\n \n-                logger.info(\"AuthenticationController login() - ends with ACCOUNT_LOCKED\");\n-                return new ResponseEntity<>(loginResp, HttpStatus.BAD_REQUEST);\n-              }\n-              logger.info(\n-                  \"AuthenticationController login() - couldn't send email for Account locking\");\n-              throw new Exception();\n-            }\n-          } else {\n-            loginResp =\n-                getLoginInformation(\n-                    participantDetails,\n-                    loginRequest.getEmailId(),\n-                    loginRequest.getPassword(),\n-                    maxAttemptsCount,\n-                    appId,\n-                    orgId,\n-                    appCode,\n-                    userDetails,\n-                    response);\n-          }\n-          if (loginResp != null && loginResp.getCode() != ErrorCode.EC_200.code()) {\n-            if (loginResp.getCode() == ErrorCode.EC_113.code()) {\n-              loginResp.setMessage(MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n-              MyStudiesUserRegUtil.getFailureResponse(\n-                  MyStudiesUserRegUtil.ErrorCodes.STATUS_104.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.name(),\n-                  MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n+      if (loginAttempts != null\n+          && loginAttempts.getAttempts() >= maxAttemptsCount\n+          && isInLockPeriod(participantDetails)) {\n+\n+        if (lockedAccountTempPasswordCheck(loginRequest.getPassword(), participantDetails)\n+            && isInLockPeriod(participantDetails)) {\n+\n+          userDetailsService.resetLoginAttempts(loginRequest.getEmailId());\n+          loginResp =\n+              getLoginInformation(\n+                  participantDetails,\n+                  loginRequest.getEmailId(),\n+                  loginRequest.getPassword(),\n+                  maxAttemptsCount,\n+                  appId,\n+                  orgId,\n+                  appCode,\n+                  userDetails,\n                   response);\n-              logger.info(\"AuthenticationController login() - ends with BAD_REQUEST\");\n-              return new ResponseEntity<>(loginResp, HttpStatus.BAD_REQUEST);\n-            } else if (loginResp.getCode() == ErrorCode.EC_140.code()) {\n-              MyStudiesUserRegUtil.getFailureResponse(\n-                  MyStudiesUserRegUtil.ErrorCodes.STATUS_103.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.CODE_EXPIRED.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.CODE_EXPIRED.getValue(),\n-                  response);\n-              loginResp.setMessage(MyStudiesUserRegUtil.ErrorCodes.CODE_EXPIRED.getValue());\n-              logger.info(\"AuthenticationController login() - ends with CODE_EXPIRED\");\n-              return new ResponseEntity<>(loginResp, HttpStatus.BAD_REQUEST);\n-            } else if (loginResp.getCode() == ErrorCode.EC_102.code()) {\n-              String message =\n-                  userDetailsService.sendEmailOnAccountLocking(loginRequest.getEmailId(), appCode);\n-              if (AppConstants.SUCCESS.equalsIgnoreCase(message)) {\n-                MyStudiesUserRegUtil.getFailureResponse(\n-                    MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n-                    MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.name(),\n-                    MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.getValue(),\n-                    response);\n-                loginResp.setMessage(MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.getValue());\n-            activityLogService.createActivityLog(\n-                participantDetails.getUserId(),\n-                AppConstants.AUDIT_EVENT_FAILED_SIGN_IN_NAME,\n-                String.format(\n-                    AppConstants.AUDIT_EVENT_FAILED_SIGN_IN_DESC, participantDetails.getUserId()));\n-                logger.info(\"AuthenticationController login() - ends with ACCOUNT_LOCKED\");\n-                return new ResponseEntity<>(loginResp, HttpStatus.BAD_REQUEST);\n-              } else throw new Exception();\n-\n-            } else if (loginResp.getCode() == ErrorCode.EC_92.code()) {\n-              MyStudiesUserRegUtil.getFailureResponse(\n-                  MyStudiesUserRegUtil.ErrorCodes.STATUS_101.getValue(),\n-                  AppConstants.INVALID_USERNAME_PASSWORD_MSG,\n-                  MyStudiesUserRegUtil.ErrorCodes.INVALID_USERNAME_PASSWORD_MSG.getValue(),\n-                  response);\n-              loginResp.setCode(HttpStatus.UNAUTHORIZED.value());\n-              loginResp.setMessage(\n-                  MyStudiesUserRegUtil.ErrorCodes.INVALID_USERNAME_PASSWORD_MSG.getValue());\n-\n-              logger.info(\"AuthenticationController login() - ends with UNAUTHORIZED request\");\n-              return new ResponseEntity<>(loginResp, HttpStatus.UNAUTHORIZED);\n-            }\n-          }\n \n         } else {\n+          if (participantDetails.getLockedAccountTempPassword() == null) {\n+            userDetailsService.sendEmailOnAccountLocking(loginRequest.getEmailId(), appCode);\n+          }\n+          loginResp = MyStudiesUserRegUtil.loginResponse(response, AppConstants.ACCOUNT_LOCKED);\n+          logger.info(\"AuthenticationController login() - ends with ACCOUNT_LOCKED\");\n+          return new ResponseEntity<>(loginResp, HttpStatus.BAD_REQUEST);\n+        }\n+      } else {\n+        loginResp =\n+            getLoginInformation(\n+                participantDetails,\n+                loginRequest.getEmailId(),\n+                loginRequest.getPassword(),\n+                maxAttemptsCount,\n+                appId,\n+                orgId,\n+                appCode,\n+                userDetails,\n+                response);\n+      }\n+      if (loginResp != null && loginResp.getCode() != ErrorCode.EC_200.code()) {\n \n-          // Account is not Active\n+        if (loginResp.getCode() == ErrorCode.EC_113.code()) {\n+          loginResp.setMessage(MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n           MyStudiesUserRegUtil.getFailureResponse(\n-              MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n-              AppConstants.INVALID_USERNAME_PASSWORD_MSG,\n-              MyStudiesUserRegUtil.ErrorCodes.INVALID_USERNAME_PASSWORD_MSG.getValue(),\n+              MyStudiesUserRegUtil.ErrorCodes.STATUS_104.getValue(),\n+              MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.name(),\n+              MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n               response);\n+          logger.info(\"AuthenticationController login() - ends with BAD_REQUEST\");\n+          return new ResponseEntity<>(loginResp, HttpStatus.BAD_REQUEST);\n+\n+        } else if (loginResp.getCode() == ErrorCode.EC_140.code()) {\n+          loginResp.setMessage(MyStudiesUserRegUtil.ErrorCodes.CODE_EXPIRED.getValue());\n+          MyStudiesUserRegUtil.loginResponse(response, AppConstants.CODE_EXPIRED);\n+          logger.info(\"AuthenticationController login() - ends with CODE_EXPIRED\");\n+          return new ResponseEntity<>(loginResp, HttpStatus.BAD_REQUEST);\n \n-          logger.info(\"AuthenticationController login() - ends with account deactivated\");\n+        } else if (loginResp.getCode() == ErrorCode.EC_102.code()) {\n+          boolean message =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd377b6c0142878703bdbf637294454ad3acf342"}, "originalPosition": 741}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ5NjU3OA==", "bodyText": "This docstring doesn't add any information. Please add more information or remove.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r430496578", "createdAt": "2020-05-26T15:22:17Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/AuthenticationController.java", "diffHunk": "@@ -1531,4 +1248,124 @@ private LoginResponse getLoginInformation(\n     logger.info(\"AuthenticationController getLoginInformation() - ends \");\n     return responseBean;\n   }\n+\n+  /*\n+   * Prepare Login response", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd377b6c0142878703bdbf637294454ad3acf342"}, "originalPosition": 1142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ5OTM1OA==", "bodyText": "How come this one is equals and some of the others are equalsIgnoreCase? It looks like there should be a helper function that just takes two passwords and a salt and compares them", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r430499358", "createdAt": "2020-05-26T15:25:17Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/AuthenticationController.java", "diffHunk": "@@ -1531,4 +1248,124 @@ private LoginResponse getLoginInformation(\n     logger.info(\"AuthenticationController getLoginInformation() - ends \");\n     return responseBean;\n   }\n+\n+  /*\n+   * Prepare Login response\n+   */\n+  private LoginResponse prepareLoginResponse(DaoUserBO participantDetails, AuthInfoBO authInfo) {\n+    LoginResponse responseBean;\n+    responseBean = new LoginResponse();\n+    responseBean.setCode(ErrorCode.EC_200.code());\n+    responseBean.setMessage(MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue().toLowerCase());\n+    responseBean.setUserId(authInfo.getUserId());\n+    if (AppConstants.ACTIVE.equalsIgnoreCase(participantDetails.getAccountStatus())\n+        && AppConstants.VERIDIED.equalsIgnoreCase(\n+            participantDetails.getEmailVerificationStatus())) {\n+      responseBean.setVerified(true);\n+    } else {\n+      responseBean.setVerified(false);\n+    }\n+    responseBean.setRefreshToken(authInfo.getRefreshToken());\n+    responseBean.setAccessToken(authInfo.getAccessToken());\n+    responseBean.setClientToken(authInfo.getClientToken());\n+    return responseBean;\n+  }\n+\n+  /*\n+   * Reset password check\n+   */\n+  private boolean resetPasswordCheck(DaoUserBO participantDetails, String password) {\n+    return participantDetails.getResetPassword() != null\n+        && participantDetails\n+            .getResetPassword()\n+            .equalsIgnoreCase(\n+                MyStudiesUserRegUtil.getEncryptedString(password, participantDetails.getSalt()));\n+  }\n+\n+  /*\n+   * Preparing Login response\n+   */\n+  private LoginResponse prepareResetPasswordLoginResponse(\n+      DaoUserBO participantDetails, AuthInfoBO authInfo) {\n+    LoginResponse responseBean = new LoginResponse();\n+    responseBean.setCode(ErrorCode.EC_200.code());\n+    responseBean.setMessage(MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue().toLowerCase());\n+    responseBean.setUserId(authInfo.getUserId());\n+    if (AppConstants.ACTIVE.equalsIgnoreCase(participantDetails.getAccountStatus())\n+        && \"Verified\".equalsIgnoreCase(participantDetails.getEmailVerificationStatus())) {\n+      responseBean.setVerified(true);\n+    } else {\n+      responseBean.setVerified(false);\n+    }\n+    if (participantDetails.getPasswordUpdatedDate() != null) {\n+      String days = appConfig.getPasswdExpiryInDay();\n+      Date expiredDate =\n+          MyStudiesUserRegUtil.addDays(\n+              MyStudiesUserRegUtil.getCurrentDateTime(), Integer.parseInt(days));\n+      if (expiredDate.before(participantDetails.getPasswordUpdatedDate())\n+          || expiredDate.equals(participantDetails.getPasswordUpdatedDate())) {\n+        responseBean.setResetPassword(true);\n+      }\n+    }\n+    responseBean.setRefreshToken(authInfo.getRefreshToken());\n+    responseBean.setAccessToken(authInfo.getAccessToken());\n+    responseBean.setClientToken(authInfo.getClientToken());\n+    responseBean.setResetPassword(participantDetails.getTempPassword());\n+    return responseBean;\n+  }\n+\n+  /*\n+   * Locked Account Temporary Password Check\n+   */\n+  private boolean lockedAccountTempPasswordCheck(String password, DaoUserBO participantDetails) {\n+    return participantDetails.getLockedAccountTempPassword() != null\n+        && participantDetails\n+            .getLockedAccountTempPassword()\n+            .equals(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd377b6c0142878703bdbf637294454ad3acf342"}, "originalPosition": 1213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUwMTUyNw==", "bodyText": "Write as\nif (userDetails == null) {\n    throw ...;\n}\nuserRepo.deleteByUserId();\n...\n\nto reduce nesting.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r430501527", "createdAt": "2020-05-26T15:27:42Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserDetailsServiceImpl.java", "diffHunk": "@@ -374,46 +359,19 @@ public String updateStatus(UpdateInfo userInfo, String userId)\n     }\n   }\n \n-  public String deleteUserDetails(String userId) throws UserNotFoundException, SystemException {\n+  @Override\n+  public boolean deleteUserDetails(String userId) throws UserNotFoundException {\n \n     logger.info(\"UserDetailsServiceImpl deleteUserDetails() - starts\");\n-    String message = AppConstants.FAILURE;\n+    boolean message = false;\n \n     if (userId != null) {\n-      List<Integer> idList = null;\n-      AuthInfoBO sessionDetails = null;\n-\n-      try {\n-        idList =\n-            userRepo\n-                .findByUserId(userId, MyView.class)\n-                .stream()\n-                .map(\n-                    (ob) -> {\n-                      if (ob != null) {\n-                        return ob.getId();\n-                      }\n-                      return null;\n-                    })\n-                .collect(Collectors.toList());\n-\n-        sessionDetails = session.findByUserId(userId);\n-      } catch (Exception e) {\n-        logger.error(\"UserDetailsServiceImpl deleteUserDetails() - error \", e);\n-        throw new SystemException();\n-      }\n-      if (!idList.isEmpty() && (sessionDetails != null)) {\n-        Integer id = idList.get(0);\n-\n-        try {\n-          userRepo.deleteById(id);\n-          session.deleteById(sessionDetails.getId());\n-          message = AppConstants.SUCCESS;\n-          return message;\n-        } catch (Exception e) {\n-          logger.error(\"UserDetailsServiceImpl deleteUserDetails() - error \", e);\n-          throw new SystemException();\n-        }\n+      DaoUserBO userDetails = userRepo.findByUserId(userId);\n+      if (userDetails != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd377b6c0142878703bdbf637294454ad3acf342"}, "originalPosition": 266}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUwNjAzMA==", "bodyText": "this should throw an InvalidArgumentException", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r430506030", "createdAt": "2020-05-26T15:34:10Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/utils/MyStudiesUserRegUtil.java", "diffHunk": "@@ -320,13 +336,131 @@ public static String genarateEmailContent(String emailContentName, Map<String, S\n     return emailContentName;\n   }\n \n-  public static boolean isNotEmpty(String str) {\n-    logger.info(\"MyStudiesUserRegUtil - isNotEmpty() :: Starts\");\n-    boolean flag = false;\n-    if ((null != str) && !\"\".equals(str.trim())) {\n-      flag = true;\n+  public static void registrationResponse(HttpServletResponse response, String flag) {\n+    logger.info(\"MyStudiesUserRegUtil - registrationResponse() :: Starts\");\n+    switch (flag) {\n+      case AppConstants.MISSING_REQUIRED_PARAMETER:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_400.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n+            response);\n+        break;\n+      case AppConstants.INVALID_EMAIL_ID:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_400.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_ID.getValue(),\n+            response);\n+        break;\n+      case AppConstants.PASSWORD_IS_INVALID:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_400.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.NEW_PASSWORD_IS_INVALID.getValue(),\n+            response);\n+        break;\n+      case AppConstants.INVALID_CLIENTID_OR_SECRET_KEY:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_401.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_CLIENTID_OR_SECRET_KEY.getValue(),\n+            response);\n+        break;\n+      case AppConstants.INVALID_INPUT_ERROR_MSG:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_400.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n+            response);\n+        break;\n+      case AppConstants.UNAUTHORIZED_CLIENT_FOR_REGISTER:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_401.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.UNAUTHORIZED.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.UNAUTHORIZED_CLIENT_FOR_REGISTER.getValue(),\n+            response);\n+        break;\n+      case AppConstants.EMAIL_EXISTS:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_400.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.EMAIL_EXISTS.getValue(),\n+            response);\n+        break;\n+      case AppConstants.SYSTEM_EXCEPTION:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_500.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.SYSTEM_ERROR_FOUND.getValue(),\n+            response);\n+        break;\n+      default:\n+        break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd377b6c0142878703bdbf637294454ad3acf342"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUwNzAzOA==", "bodyText": "This is the same as registrationResponse, either use one generic method or extract the common logic.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r430507038", "createdAt": "2020-05-26T15:35:31Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/utils/MyStudiesUserRegUtil.java", "diffHunk": "@@ -320,13 +336,131 @@ public static String genarateEmailContent(String emailContentName, Map<String, S\n     return emailContentName;\n   }\n \n-  public static boolean isNotEmpty(String str) {\n-    logger.info(\"MyStudiesUserRegUtil - isNotEmpty() :: Starts\");\n-    boolean flag = false;\n-    if ((null != str) && !\"\".equals(str.trim())) {\n-      flag = true;\n+  public static void registrationResponse(HttpServletResponse response, String flag) {\n+    logger.info(\"MyStudiesUserRegUtil - registrationResponse() :: Starts\");\n+    switch (flag) {\n+      case AppConstants.MISSING_REQUIRED_PARAMETER:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_400.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n+            response);\n+        break;\n+      case AppConstants.INVALID_EMAIL_ID:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_400.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_ID.getValue(),\n+            response);\n+        break;\n+      case AppConstants.PASSWORD_IS_INVALID:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_400.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.NEW_PASSWORD_IS_INVALID.getValue(),\n+            response);\n+        break;\n+      case AppConstants.INVALID_CLIENTID_OR_SECRET_KEY:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_401.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_CLIENTID_OR_SECRET_KEY.getValue(),\n+            response);\n+        break;\n+      case AppConstants.INVALID_INPUT_ERROR_MSG:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_400.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n+            response);\n+        break;\n+      case AppConstants.UNAUTHORIZED_CLIENT_FOR_REGISTER:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_401.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.UNAUTHORIZED.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.UNAUTHORIZED_CLIENT_FOR_REGISTER.getValue(),\n+            response);\n+        break;\n+      case AppConstants.EMAIL_EXISTS:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_400.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.EMAIL_EXISTS.getValue(),\n+            response);\n+        break;\n+      case AppConstants.SYSTEM_EXCEPTION:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_500.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.SYSTEM_ERROR_FOUND.getValue(),\n+            response);\n+        break;\n+      default:\n+        break;\n+    }\n+  }\n+\n+  public static LoginResponse loginResponse(HttpServletResponse response, String flag) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd377b6c0142878703bdbf637294454ad3acf342"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUwOTYzNw==", "bodyText": "Combine these if statements", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r430509637", "createdAt": "2020-05-26T15:38:01Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/AuthenticationController.java", "diffHunk": "@@ -558,103 +527,83 @@ private AuthServerRegistrationResponse prepareSuccessResponse(\n     String appCode = null;\n     DaoUserBO participantDetails = null;\n     Integer maxAttemptsCount = Integer.valueOf(appConfig.getMaxLoginAttempts());\n-    try {\n-      if (((clientId.length() == 0) || StringUtils.isBlank(clientId))\n-          || ((secretKey.length() == 0) || StringUtils.isBlank(secretKey))) {\n \n-        MyStudiesUserRegUtil.getFailureResponse(\n-            401 + \"\",\n-            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n-            response);\n-        logger.info(\"AuthenticationController login() - ends with UNAUTHORIZED request\");\n-        return new ResponseEntity<>(loginResp, HttpStatus.UNAUTHORIZED);\n-      }\n-      if (((loginRequest.getEmailId() == null) && StringUtils.isBlank(loginRequest.getEmailId()))\n-          || (loginRequest.getPassword() == null)) {\n-        MyStudiesUserRegUtil.getFailureResponse(\n-            400 + \"\",\n-            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n-            response);\n+    try {\n+      if (StringUtils.isBlank(clientId)\n+          || StringUtils.isBlank(secretKey)\n+          || StringUtils.isBlank(loginRequest.getEmailId())\n+          || StringUtils.isBlank(loginRequest.getPassword())) {\n+        MyStudiesUserRegUtil.loginResponse(response, AppConstants.MISSING_REQUIRED_PARAMETER);\n         logger.info(\"AuthenticationController login() - ends with BAD_REQUEST\");\n         return new ResponseEntity<>(loginResp, HttpStatus.BAD_REQUEST);\n       }\n+\n       appCode = clientInfoService.checkClientInfo(clientId, secretKey);\n+      logger.info(\"appCode: \" + appCode);\n \n       if (appCode == null || StringUtils.isBlank(appCode)) {\n-        MyStudiesUserRegUtil.getFailureResponse(\n-            401 + \"\",\n-            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-            MyStudiesUserRegUtil.ErrorCodes.INVALID_CLIENTID_OR_SECRET_KEY.getValue(),\n-            response);\n+        MyStudiesUserRegUtil.loginResponse(response, AppConstants.INVALID_CLIENTID_OR_SECRET_KEY);\n         logger.info(\"AuthenticationController login() - ends with INVALID CLIENTID OR SECRET KEY\");\n         return new ResponseEntity<>(loginResp, HttpStatus.UNAUTHORIZED);\n       }\n \n-      if (\"MA\".equals(appCode)) {\n-        if (((appId.length() == 0) || StringUtils.isBlank(appId))\n-            || ((orgId.length() == 0) || StringUtils.isBlank(orgId))) {\n-          MyStudiesUserRegUtil.getFailureResponse(\n-              400 + \"\",\n-              MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n-              response);\n+      if (AppConstants.MA.equals(appCode)) {\n+        if (StringUtils.isBlank(appId) || StringUtils.isBlank(orgId)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbf9cd3cc9efe033418df5874126073d7d4af8e1"}, "originalPosition": 460}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUxMDU2Nw==", "bodyText": "isInLockPeriod?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r430510567", "createdAt": "2020-05-26T15:38:50Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/AuthenticationController.java", "diffHunk": "@@ -558,103 +527,83 @@ private AuthServerRegistrationResponse prepareSuccessResponse(\n     String appCode = null;\n     DaoUserBO participantDetails = null;\n     Integer maxAttemptsCount = Integer.valueOf(appConfig.getMaxLoginAttempts());\n-    try {\n-      if (((clientId.length() == 0) || StringUtils.isBlank(clientId))\n-          || ((secretKey.length() == 0) || StringUtils.isBlank(secretKey))) {\n \n-        MyStudiesUserRegUtil.getFailureResponse(\n-            401 + \"\",\n-            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n-            response);\n-        logger.info(\"AuthenticationController login() - ends with UNAUTHORIZED request\");\n-        return new ResponseEntity<>(loginResp, HttpStatus.UNAUTHORIZED);\n-      }\n-      if (((loginRequest.getEmailId() == null) && StringUtils.isBlank(loginRequest.getEmailId()))\n-          || (loginRequest.getPassword() == null)) {\n-        MyStudiesUserRegUtil.getFailureResponse(\n-            400 + \"\",\n-            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n-            response);\n+    try {\n+      if (StringUtils.isBlank(clientId)\n+          || StringUtils.isBlank(secretKey)\n+          || StringUtils.isBlank(loginRequest.getEmailId())\n+          || StringUtils.isBlank(loginRequest.getPassword())) {\n+        MyStudiesUserRegUtil.loginResponse(response, AppConstants.MISSING_REQUIRED_PARAMETER);\n         logger.info(\"AuthenticationController login() - ends with BAD_REQUEST\");\n         return new ResponseEntity<>(loginResp, HttpStatus.BAD_REQUEST);\n       }\n+\n       appCode = clientInfoService.checkClientInfo(clientId, secretKey);\n+      logger.info(\"appCode: \" + appCode);\n \n       if (appCode == null || StringUtils.isBlank(appCode)) {\n-        MyStudiesUserRegUtil.getFailureResponse(\n-            401 + \"\",\n-            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-            MyStudiesUserRegUtil.ErrorCodes.INVALID_CLIENTID_OR_SECRET_KEY.getValue(),\n-            response);\n+        MyStudiesUserRegUtil.loginResponse(response, AppConstants.INVALID_CLIENTID_OR_SECRET_KEY);\n         logger.info(\"AuthenticationController login() - ends with INVALID CLIENTID OR SECRET KEY\");\n         return new ResponseEntity<>(loginResp, HttpStatus.UNAUTHORIZED);\n       }\n \n-      if (\"MA\".equals(appCode)) {\n-        if (((appId.length() == 0) || StringUtils.isBlank(appId))\n-            || ((orgId.length() == 0) || StringUtils.isBlank(orgId))) {\n-          MyStudiesUserRegUtil.getFailureResponse(\n-              400 + \"\",\n-              MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n-              response);\n+      if (AppConstants.MA.equals(appCode)) {\n+        if (StringUtils.isBlank(appId) || StringUtils.isBlank(orgId)) {\n+          MyStudiesUserRegUtil.loginResponse(response, AppConstants.MISSING_REQUIRED_PARAMETER);\n           logger.info(\"AuthenticationController login() - ends with INVALID_INPUT\");\n           return new ResponseEntity<>(loginResp, HttpStatus.BAD_REQUEST);\n         }\n       }\n \n-      if (!\"MA\".equals(appCode)) {\n+      if (!AppConstants.MA.equals(appCode)) {\n         participantDetails =\n             userDetailsService.loadUserByEmailIdAndAppCode(loginRequest.getEmailId(), appCode);\n       } else {\n         participantDetails =\n             userDetailsService.loadUserByEmailIdAndAppIdAndOrgIdAndAppCode(\n                 loginRequest.getEmailId(), appId, orgId, appCode);\n       }\n-      if (participantDetails != null\n-          && participantDetails.getAccountStatus().equalsIgnoreCase(AppConstants.ACTIVE)) {\n-\n-        LoginAttemptsBO loginAttempts =\n-            userDetailsService.getLoginAttempts(loginRequest.getEmailId());\n-        Set<GrantedAuthority> roles = new HashSet<>();\n-        UserDetails userDetails =\n-            new User(participantDetails.getEmailId(), participantDetails.getPassword(), roles);\n-\n-        if (loginAttempts != null && loginAttempts.getAttempts() == maxAttemptsCount) {\n-          int count = Integer.parseInt(appConfig.getExpirationLoginAttemptsMinute());\n-          Date attemptsExpireDate =\n-              MyStudiesUserRegUtil.addMinutes(loginAttempts.getLastModified().toString(), count);\n-\n-          if (attemptsExpireDate.before(MyStudiesUserRegUtil.getCurrentUtilDateTime())\n-              || attemptsExpireDate.equals(MyStudiesUserRegUtil.getCurrentUtilDateTime())) {\n-\n-            userDetailsService.resetLoginAttempts(loginRequest.getEmailId());\n-            loginResp =\n-                getLoginInformation(\n-                    participantDetails,\n-                    loginRequest.getEmailId(),\n-                    loginRequest.getPassword(),\n-                    maxAttemptsCount,\n-                    appId,\n-                    orgId,\n-                    appCode,\n-                    userDetails,\n-                    response);\n-          } else {\n-            loginResp = new LoginResponse();\n-            MyStudiesUserRegUtil.getFailureResponse(\n-                MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n-                MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.name(),\n-                MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.getValue(),\n-                response);\n-            loginResp.setCode(ErrorCode.EC_102.code());\n-            loginResp.setMessage(MyStudiesUserRegUtil.ErrorCodes.ACCOUNT_LOCKED.getValue());\n-            logger.info(\"AuthenticationController login() - ends with ACCOUNT_LOCKED\");\n-            return new ResponseEntity<>(loginResp, HttpStatus.BAD_REQUEST);\n-          }\n-        } else {\n+\n+      if (participantDetails == null) {\n+        throw new UserNotFoundException();\n+      }\n+\n+      if (!participantDetails.getAccountStatus().equalsIgnoreCase(AppConstants.ACTIVE)) {\n+        // Account is not Active\n+        MyStudiesUserRegUtil.loginResponse(response, AppConstants.INVALID_USERNAME_PASSWORD);\n+        logger.info(\"AuthenticationController login() - ends with account deactivated\");\n+        return new ResponseEntity<>(loginResp, HttpStatus.UNAUTHORIZED);\n+      }\n+\n+      LoginAttemptsBO loginAttempts =\n+          userDetailsService.getLoginAttempts(loginRequest.getEmailId());\n+      Set<GrantedAuthority> roles = new HashSet<>();\n+      UserDetails userDetails =\n+          new User(participantDetails.getEmailId(), participantDetails.getPassword(), roles);\n+\n+      if (lockedAccountTempPasswordCheck(loginRequest.getPassword(), participantDetails)) {\n+        if (participantDetails.getLockedAccountTempPasswordExpiredDate() != null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbf9cd3cc9efe033418df5874126073d7d4af8e1"}, "originalPosition": 537}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUxMDg2Mg==", "bodyText": "isInLockPeriod?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r430510862", "createdAt": "2020-05-26T15:39:06Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/AuthenticationController.java", "diffHunk": "@@ -1039,18 +948,21 @@ private AuthServerRegistrationResponse prepareSuccessResponse(\n           && !StringUtils.isEmpty(userId)) {\n         DaoUserBO userInfo = userDetailsService.loadUserByUserId(userId);\n         if (userInfo != null) {\n-          if ((userInfo.getPassword() != null\n-                  && userInfo\n-                      .getPassword()\n-                      .equalsIgnoreCase(\n-                          MyStudiesUserRegUtil.getEncryptedString(\n-                              changePasswordBean.getCurrentPassword(), userInfo.getSalt())))\n-              || (userInfo.getResetPassword() != null\n-                  && userInfo\n-                      .getResetPassword()\n-                      .equalsIgnoreCase(\n-                          MyStudiesUserRegUtil.getEncryptedString(\n-                              changePasswordBean.getCurrentPassword(), userInfo.getSalt())))) {\n+          if (checkOldPassword(changePasswordBean, userInfo)) {\n+\n+            if (userInfo.getLockedAccountTempPassword() != null\n+                && userInfo\n+                    .getLockedAccountTempPassword()\n+                    .equals(\n+                        MyStudiesUserRegUtil.getEncryptedString(\n+                            changePasswordBean.getCurrentPassword(), userInfo.getSalt()))) {\n+              if (userInfo.getLockedAccountTempPasswordExpiredDate() != null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbf9cd3cc9efe033418df5874126073d7d4af8e1"}, "originalPosition": 827}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUxMzg2OQ==", "bodyText": "if (participantDetails.getTempPassword()) {", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r430513869", "createdAt": "2020-05-26T15:42:06Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/AuthenticationController.java", "diffHunk": "@@ -1239,42 +1147,34 @@ private LoginResponse getLoginInformation(\n     logger.info(\"AuthenticationController getLoginInformation() - Starts \");\n     LoginResponse responseBean = null;\n     AuthInfoBO authInfo = null;\n-    try {\n \n+    try {\n       if (participantDetails != null\n           && LocalDateTime.now(ZoneId.systemDefault())\n               .isBefore(participantDetails.getPasswordExpireDate())) {\n         logger.info(\"TRUE\");\n-      } else throw new PasswordExpiredException();\n+      } else {\n+        throw new PasswordExpiredException();\n+      }\n \n-      if (participantDetails.getPassword() != null\n-          && participantDetails\n-              .getPassword()\n-              .equalsIgnoreCase(\n-                  MyStudiesUserRegUtil.getEncryptedString(\n-                      password, participantDetails.getSalt()))) {\n-        if (participantDetails.getTempPassword()) {\n-          participantDetails.setResetPassword(null);\n-          participantDetails.setTempPassword(false);\n-          participantDetails.setTempPasswordDate(MyStudiesUserRegUtil.getCurrentUtilDateTime());\n+      String tempPassword = null;\n+      if (lockedAccountPassword(password, participantDetails)\n+          || lockedAccountTempPasswordCheck(password, participantDetails)) {\n+\n+        if (Boolean.TRUE.equals(participantDetails.getTempPassword())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbf9cd3cc9efe033418df5874126073d7d4af8e1"}, "originalPosition": 1001}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUxNTM3MQ==", "bodyText": "passwordMatches", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r430515371", "createdAt": "2020-05-26T15:44:11Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/AuthenticationController.java", "diffHunk": "@@ -1360,4 +1248,124 @@ private LoginResponse getLoginInformation(\n     logger.info(\"AuthenticationController getLoginInformation() - ends \");\n     return responseBean;\n   }\n+\n+  /*\n+   * Prepare Login response\n+   */\n+  private LoginResponse prepareLoginResponse(DaoUserBO participantDetails, AuthInfoBO authInfo) {\n+    LoginResponse responseBean;\n+    responseBean = new LoginResponse();\n+    responseBean.setCode(ErrorCode.EC_200.code());\n+    responseBean.setMessage(MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue().toLowerCase());\n+    responseBean.setUserId(authInfo.getUserId());\n+    if (AppConstants.ACTIVE.equalsIgnoreCase(participantDetails.getAccountStatus())\n+        && AppConstants.VERIDIED.equalsIgnoreCase(\n+            participantDetails.getEmailVerificationStatus())) {\n+      responseBean.setVerified(true);\n+    } else {\n+      responseBean.setVerified(false);\n+    }\n+    responseBean.setRefreshToken(authInfo.getRefreshToken());\n+    responseBean.setAccessToken(authInfo.getAccessToken());\n+    responseBean.setClientToken(authInfo.getClientToken());\n+    return responseBean;\n+  }\n+\n+  /*\n+   * Reset password check\n+   */\n+  private boolean resetPasswordCheck(DaoUserBO participantDetails, String password) {\n+    return participantDetails.getResetPassword() != null\n+        && participantDetails\n+            .getResetPassword()\n+            .equalsIgnoreCase(\n+                MyStudiesUserRegUtil.getEncryptedString(password, participantDetails.getSalt()));\n+  }\n+\n+  /*\n+   * Preparing Login response\n+   */\n+  private LoginResponse prepareResetPasswordLoginResponse(\n+      DaoUserBO participantDetails, AuthInfoBO authInfo) {\n+    LoginResponse responseBean = new LoginResponse();\n+    responseBean.setCode(ErrorCode.EC_200.code());\n+    responseBean.setMessage(MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue().toLowerCase());\n+    responseBean.setUserId(authInfo.getUserId());\n+    if (AppConstants.ACTIVE.equalsIgnoreCase(participantDetails.getAccountStatus())\n+        && \"Verified\".equalsIgnoreCase(participantDetails.getEmailVerificationStatus())) {\n+      responseBean.setVerified(true);\n+    } else {\n+      responseBean.setVerified(false);\n+    }\n+    if (participantDetails.getPasswordUpdatedDate() != null) {\n+      String days = appConfig.getPasswdExpiryInDay();\n+      Date expiredDate =\n+          MyStudiesUserRegUtil.addDays(\n+              MyStudiesUserRegUtil.getCurrentDateTime(), Integer.parseInt(days));\n+      if (expiredDate.before(participantDetails.getPasswordUpdatedDate())\n+          || expiredDate.equals(participantDetails.getPasswordUpdatedDate())) {\n+        responseBean.setResetPassword(true);\n+      }\n+    }\n+    responseBean.setRefreshToken(authInfo.getRefreshToken());\n+    responseBean.setAccessToken(authInfo.getAccessToken());\n+    responseBean.setClientToken(authInfo.getClientToken());\n+    responseBean.setResetPassword(participantDetails.getTempPassword());\n+    return responseBean;\n+  }\n+\n+  /*\n+   * Locked Account Temporary Password Check\n+   */\n+  private boolean lockedAccountTempPasswordCheck(String password, DaoUserBO participantDetails) {\n+    return participantDetails.getLockedAccountTempPassword() != null\n+        && participantDetails\n+            .getLockedAccountTempPassword()\n+            .equals(\n+                MyStudiesUserRegUtil.getEncryptedString(password, participantDetails.getSalt()));\n+  }\n+\n+  /*\n+   * Locked Account Password check\n+   */\n+  private boolean lockedAccountPassword(String password, DaoUserBO participantDetails) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbf9cd3cc9efe033418df5874126073d7d4af8e1"}, "originalPosition": 1202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUxNTc4Mg==", "bodyText": "Shouldn't there be an else case here?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r430515782", "createdAt": "2020-05-26T15:44:48Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/AuthenticationController.java", "diffHunk": "@@ -1283,54 +1183,41 @@ private LoginResponse getLoginInformation(\n             if (expiredDate.before(participantDetails.getPasswordUpdatedDate())\n                 || expiredDate.equals(participantDetails.getPasswordUpdatedDate())) {\n               responseBean.setResetPassword(true);\n+            } else if (tempPassword != null\n+                && tempPassword.equals(\n+                    MyStudiesUserRegUtil.getEncryptedString(\n+                        password, participantDetails.getSalt()))) {\n+              responseBean.setResetPassword(true);\n             }\n+          } else if (tempPassword != null\n+              && tempPassword.equals(\n+                  MyStudiesUserRegUtil.getEncryptedString(\n+                      password, participantDetails.getSalt()))) {\n+            responseBean.setResetPassword(true);\n           }\n+\n+          if (lockedAccountPassword(password, participantDetails)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbf9cd3cc9efe033418df5874126073d7d4af8e1"}, "originalPosition": 1049}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUxNjkwMw==", "bodyText": "I still can't follow the flow here. The function needs to be simpler.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r430516903", "createdAt": "2020-05-26T15:46:26Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/AuthenticationController.java", "diffHunk": "@@ -1247,18 +1377,37 @@ private LoginResponse getLoginInformation(\n         logger.info(\"TRUE\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0MTg2NQ=="}, "originalCommit": {"oid": "4eaa236643748cefb90a2cada092557e675ee227"}, "originalPosition": 535}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUxNzk4Ng==", "bodyText": "throw InvalidArgumentException", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r430517986", "createdAt": "2020-05-26T15:48:01Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserDetailsServiceImpl.java", "diffHunk": "@@ -643,4 +615,50 @@ public String savePasswordHistory(String userId, String password, String salt) {\n     logger.info(\"UserDetailsServiceImpl savePasswordHistory() - ends\");\n     return message;\n   }\n+\n+  @Override\n+  public boolean sendEmailOnAccountLocking(String emailId, String appCode)\n+      throws UserNotFoundException {\n+    logger.info(\"UserDetailsServiceImpl sendEmailOnAccountLocking() - starts\");\n+    boolean result = false;\n+\n+    if (emailId == null && appCode == null) {\n+      logger.info(\"UserDetailsServiceImpl sendEmailOnAccountLocking() - ends\");\n+      return result;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbf9cd3cc9efe033418df5874126073d7d4af8e1"}, "originalPosition": 392}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUxODE2Mg==", "bodyText": "Invert if and remove else.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r430518162", "createdAt": "2020-05-26T15:48:17Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserDetailsServiceImpl.java", "diffHunk": "@@ -643,4 +615,50 @@ public String savePasswordHistory(String userId, String password, String salt) {\n     logger.info(\"UserDetailsServiceImpl savePasswordHistory() - ends\");\n     return message;\n   }\n+\n+  @Override\n+  public boolean sendEmailOnAccountLocking(String emailId, String appCode)\n+      throws UserNotFoundException {\n+    logger.info(\"UserDetailsServiceImpl sendEmailOnAccountLocking() - starts\");\n+    boolean result = false;\n+\n+    if (emailId == null && appCode == null) {\n+      logger.info(\"UserDetailsServiceImpl sendEmailOnAccountLocking() - ends\");\n+      return result;\n+    }\n+\n+    DaoUserBO userInfo = userRepo.findByEmailIdAndAppCode(emailId, appCode);\n+\n+    if (userInfo != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbf9cd3cc9efe033418df5874126073d7d4af8e1"}, "originalPosition": 397}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUxODQ3OQ==", "bodyText": "result = emailNotification.sendEmailNotification(subject, dynamicContent, emailId, null, null);", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r430518479", "createdAt": "2020-05-26T15:48:43Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserDetailsServiceImpl.java", "diffHunk": "@@ -643,4 +615,50 @@ public String savePasswordHistory(String userId, String password, String salt) {\n     logger.info(\"UserDetailsServiceImpl savePasswordHistory() - ends\");\n     return message;\n   }\n+\n+  @Override\n+  public boolean sendEmailOnAccountLocking(String emailId, String appCode)\n+      throws UserNotFoundException {\n+    logger.info(\"UserDetailsServiceImpl sendEmailOnAccountLocking() - starts\");\n+    boolean result = false;\n+\n+    if (emailId == null && appCode == null) {\n+      logger.info(\"UserDetailsServiceImpl sendEmailOnAccountLocking() - ends\");\n+      return result;\n+    }\n+\n+    DaoUserBO userInfo = userRepo.findByEmailIdAndAppCode(emailId, appCode);\n+\n+    if (userInfo != null) {\n+      String tempPassword = RandomStringUtils.randomAlphanumeric(6);\n+      String encryptedPwd =\n+          MyStudiesUserRegUtil.getEncryptedString(tempPassword, userInfo.getSalt());\n+      userInfo.setLockedAccountTempPassword(encryptedPwd);\n+      userInfo.setTempPassword(true);\n+      userInfo.setLockedAccountTempPasswordExpiredDate(\n+          LocalDateTime.now(ZoneId.systemDefault())\n+              .plusMinutes(Long.valueOf(appConfig.getExpirationLoginAttemptsMinute())));\n+      userRepo.save(userInfo);\n+\n+      String subject = appConfig.getLockAccountMailSubject();\n+      String content = appConfig.getLockAccountMailContent();\n+\n+      Map<String, String> genarateEmailContentMap = new HashMap<>();\n+      genarateEmailContentMap.put(\"$Temporary_Password\", tempPassword);\n+\n+      String dynamicContent =\n+          MyStudiesUserRegUtil.genarateEmailContent(content, genarateEmailContentMap);\n+\n+      boolean isSent =\n+          emailNotification.sendEmailNotification(subject, dynamicContent, emailId, null, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbf9cd3cc9efe033418df5874126073d7d4af8e1"}, "originalPosition": 418}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2b6c2fae6a614666939685ebe0ceb7177e18cbf", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/f2b6c2fae6a614666939685ebe0ceb7177e18cbf", "committedDate": "2020-06-02T16:44:02Z", "message": "Merge branch 'early-access' into early-access-mobile-user-account-lock-fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f26924061e739cabfa6bf2e3ff63d2f6a109016", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/1f26924061e739cabfa6bf2e3ff63d2f6a109016", "committedDate": "2020-06-03T16:25:36Z", "message": "Merge branch 'early-access' into early-access-mobile-user-account-lock-fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f181cf50391166357069527b2cc181cf4f299499", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/f181cf50391166357069527b2cc181cf4f299499", "committedDate": "2020-06-03T16:42:32Z", "message": "code commit for PR comment on 26th May changes."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0ODczMzQ5", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#pullrequestreview-424873349", "createdAt": "2020-06-04T22:17:13Z", "commit": {"oid": "f181cf50391166357069527b2cc181cf4f299499"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjoxNzoxNFrOGfZ4Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjoyNTo1NlrOGfaD8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4MzA2Mg==", "bodyText": "This is backwards. You should not return a 400 if isValid is true.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r435583062", "createdAt": "2020-06-04T22:17:14Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/AuthenticationController.java", "diffHunk": "@@ -246,7 +247,7 @@\n \n     ValidateClientCredentialsResponse responseEntity = null;\n \n-    if (StringUtils.isBlank(clientId) || StringUtils.isBlank(secretKey)) {\n+    if (isValidInput(clientId, secretKey)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f181cf50391166357069527b2cc181cf4f299499"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4NTUwOA==", "bodyText": "Use the builtin IllegalArgumentException and specify which argument was invalid.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r435585508", "createdAt": "2020-06-04T22:24:23Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/exception/InvalidArgumentException.java", "diffHunk": "@@ -0,0 +1,18 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.exception;\n+\n+public class InvalidArgumentException extends Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f181cf50391166357069527b2cc181cf4f299499"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4NjAzNQ==", "bodyText": "This is an Exception. Like I said, throw an IllegalArgumentException. I doubt anyone would notice this error logged at INFO.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r435586035", "createdAt": "2020-06-04T22:25:56Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/utils/MyStudiesUserRegUtil.java", "diffHunk": "@@ -388,14 +367,10 @@ public static void registrationResponse(HttpServletResponse response, String fla\n             MyStudiesUserRegUtil.ErrorCodes.EMAIL_EXISTS.getValue(),\n             response);\n         break;\n-      case AppConstants.SYSTEM_EXCEPTION:\n-        MyStudiesUserRegUtil.getFailureResponse(\n-            MyStudiesUserRegUtil.ErrorCodes.STATUS_500.getValue(),\n-            MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n-            MyStudiesUserRegUtil.ErrorCodes.SYSTEM_ERROR_FOUND.getValue(),\n-            response);\n-        break;\n+\n       default:\n+        logger.info(\n+            \"MyStudiesUserRegUtil - registrationResponse() :: No matches found for the given flag!!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f181cf50391166357069527b2cc181cf4f299499"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16240e30416d6be4ee51abc1030806a06666629e", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/16240e30416d6be4ee51abc1030806a06666629e", "committedDate": "2020-06-05T12:59:29Z", "message": "pr comment changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e347cb7c4f46dc2a367eece7e2fc0a001bdf957", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/7e347cb7c4f46dc2a367eece7e2fc0a001bdf957", "committedDate": "2020-06-08T05:33:19Z", "message": "Merge branch 'early-access' into early-access-mobile-user-account-lock-fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MzQ2NzY1", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#pullrequestreview-426346765", "createdAt": "2020-06-08T15:16:52Z", "commit": {"oid": "7e347cb7c4f46dc2a367eece7e2fc0a001bdf957"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNToxNjo1MlrOGgjZqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNToxNjo1MlrOGgjZqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc4NzYyNg==", "bodyText": "This function is exactly the same as isInLockPeriod. Please only use one.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#discussion_r436787626", "createdAt": "2020-06-08T15:16:52Z", "author": {"login": "nikklassen"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/AuthenticationController.java", "diffHunk": "@@ -1343,21 +1166,200 @@ private LoginResponse getLoginInformation(\n         }\n       } else {\n         LoginAttemptsBO failAttempts = userDetailsService.updateLoginFailureAttempts(email);\n-        if (failAttempts != null && failAttempts.getAttempts() == maxAttemptsCount) {\n+        if (failAttempts != null && failAttempts.getAttempts() >= maxAttemptsCount) {\n           responseBean = new LoginResponse();\n           responseBean.setCode(ErrorCode.EC_102.code());\n+\n         } else {\n           responseBean = new LoginResponse();\n           responseBean.setCode(ErrorCode.EC_92.code());\n         }\n       }\n-    } catch (PasswordExpiredException e) {\n-      logger.error(\"AuthenticationController getLoginInformation() - error \", e);\n-      throw e;\n     } catch (Exception e) {\n       logger.error(\"AuthenticationController getLoginInformation() - error \", e);\n+      throw new PasswordExpiredException();\n     }\n     logger.info(\"AuthenticationController getLoginInformation() - ends \");\n     return responseBean;\n   }\n+\n+  private boolean isResetTempPasswordExpiredCheck(DaoUserBO participantDetails, Date validateDate) {\n+    return participantDetails.getTempPasswordDate().before(validateDate)\n+        || participantDetails.getTempPasswordDate().equals(validateDate);\n+  }\n+\n+  private LoginResponse prepareLoginResponse(\n+      DaoUserBO participantDetails, String password, AuthInfoBO authInfo, String tempPassword) {\n+\n+    LoginResponse responseBean = new LoginResponse();\n+    responseBean.setCode(ErrorCode.EC_200.code());\n+    responseBean.setMessage(MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue().toLowerCase());\n+    responseBean.setUserId(authInfo.getUserId());\n+    if (AppConstants.ACTIVE.equalsIgnoreCase(participantDetails.getAccountStatus())\n+        && AppConstants.VERIDIED.equalsIgnoreCase(\n+            participantDetails.getEmailVerificationStatus())) {\n+      responseBean.setVerified(true);\n+    } else {\n+      responseBean.setVerified(false);\n+    }\n+    responseBean.setRefreshToken(authInfo.getRefreshToken());\n+    responseBean.setAccessToken(authInfo.getAccessToken());\n+    responseBean.setClientToken(authInfo.getClientToken());\n+\n+    if (participantDetails.getPasswordUpdatedDate() != null) {\n+      String days = appConfig.getPasswdExpiryInDay();\n+      Date expiredDate =\n+          MyStudiesUserRegUtil.addDays(\n+              MyStudiesUserRegUtil.getCurrentDateTime(), Integer.parseInt(days));\n+\n+      if (expiredDate.before(participantDetails.getPasswordUpdatedDate())\n+          || expiredDate.equals(participantDetails.getPasswordUpdatedDate())) {\n+        responseBean.setResetPassword(true);\n+      } else if (tempPassword != null\n+          && tempPassword.equals(\n+              MyStudiesUserRegUtil.getEncryptedString(password, participantDetails.getSalt()))) {\n+        responseBean.setResetPassword(true);\n+      }\n+    } else if (tempPassword != null\n+        && tempPassword.equals(\n+            MyStudiesUserRegUtil.getEncryptedString(password, participantDetails.getSalt()))) {\n+      responseBean.setResetPassword(true);\n+    }\n+    return responseBean;\n+  }\n+\n+  private boolean isUserActualPasswordExpired(DaoUserBO participantDetails) {\n+    return participantDetails != null\n+        && LocalDateTime.now(ZoneId.systemDefault())\n+            .isAfter(participantDetails.getPasswordExpireDate());\n+  }\n+\n+  private boolean accountPasswordCheck(DaoUserBO participantDetails, String password) {\n+    return lockedAccountPasswordMatches(password, participantDetails)\n+        || lockedAccountTempPasswordCheck(password, participantDetails);\n+  }\n+\n+  private boolean resetTempPasswordCheck(DaoUserBO participantDetails, String password) {\n+    return participantDetails.getResetPassword() != null\n+        && participantDetails\n+            .getResetPassword()\n+            .equals(\n+                MyStudiesUserRegUtil.getEncryptedString(password, participantDetails.getSalt()));\n+  }\n+\n+  private LoginResponse prepareResetPasswordLoginResponse(\n+      DaoUserBO participantDetails, AuthInfoBO authInfo) {\n+    LoginResponse responseBean = new LoginResponse();\n+    responseBean.setCode(ErrorCode.EC_200.code());\n+    responseBean.setMessage(MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue().toLowerCase());\n+    responseBean.setUserId(authInfo.getUserId());\n+    if (AppConstants.ACTIVE.equalsIgnoreCase(participantDetails.getAccountStatus())\n+        && \"Verified\".equalsIgnoreCase(participantDetails.getEmailVerificationStatus())) {\n+      responseBean.setVerified(true);\n+    } else {\n+      responseBean.setVerified(false);\n+    }\n+    if (participantDetails.getPasswordUpdatedDate() != null) {\n+      String days = appConfig.getPasswdExpiryInDay();\n+      Date expiredDate =\n+          MyStudiesUserRegUtil.addDays(\n+              MyStudiesUserRegUtil.getCurrentDateTime(), Integer.parseInt(days));\n+      if (expiredDate.before(participantDetails.getPasswordUpdatedDate())\n+          || expiredDate.equals(participantDetails.getPasswordUpdatedDate())) {\n+        responseBean.setResetPassword(true);\n+      }\n+    }\n+    responseBean.setRefreshToken(authInfo.getRefreshToken());\n+    responseBean.setAccessToken(authInfo.getAccessToken());\n+    responseBean.setClientToken(authInfo.getClientToken());\n+    responseBean.setResetPassword(participantDetails.isTempPassword());\n+    return responseBean;\n+  }\n+\n+  private boolean lockedAccountTempPasswordCheck(String password, DaoUserBO participantDetails) {\n+    return participantDetails.getLockedAccountTempPassword() != null\n+        && participantDetails\n+            .getLockedAccountTempPassword()\n+            .equals(\n+                MyStudiesUserRegUtil.getEncryptedString(password, participantDetails.getSalt()));\n+  }\n+\n+  private boolean lockedAccountPasswordMatches(String password, DaoUserBO participantDetails) {\n+    return participantDetails.getPassword() != null\n+        && participantDetails\n+            .getPassword()\n+            .equals(\n+                MyStudiesUserRegUtil.getEncryptedString(password, participantDetails.getSalt()));\n+  }\n+\n+  private boolean checkOldPassword(ChangePasswordBean changePasswordBean, DaoUserBO userInfo) {\n+    return isActualPassword(changePasswordBean, userInfo)\n+        || isForgotPasswordTempPassword(changePasswordBean, userInfo)\n+        || isLockedAccountTempPassword(changePasswordBean, userInfo);\n+  }\n+\n+  private boolean isActualPassword(ChangePasswordBean changePasswordBean, DaoUserBO userInfo) {\n+    return userInfo.getPassword() != null\n+        && userInfo\n+            .getPassword()\n+            .equals(\n+                MyStudiesUserRegUtil.getEncryptedString(\n+                    changePasswordBean.getCurrentPassword(), userInfo.getSalt()));\n+  }\n+\n+  private boolean isForgotPasswordTempPassword(\n+      ChangePasswordBean changePasswordBean, DaoUserBO userInfo) {\n+    return userInfo.getResetPassword() != null\n+        && userInfo\n+            .getResetPassword()\n+            .equals(\n+                MyStudiesUserRegUtil.getEncryptedString(\n+                    changePasswordBean.getCurrentPassword(), userInfo.getSalt()));\n+  }\n+\n+  private boolean isInLockPeriod(DaoUserBO participantDetails) {\n+    return participantDetails.getLockedAccountTempPasswordExpiredDate() != null\n+        && LocalDateTime.now(ZoneId.systemDefault())\n+            .isBefore(participantDetails.getLockedAccountTempPasswordExpiredDate());\n+  }\n+\n+  private boolean checkTempPasswordExpireForLockedAccount(DaoUserBO participantDetails) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e347cb7c4f46dc2a367eece7e2fc0a001bdf957"}, "originalPosition": 1267}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f45b58e98ab19bfcfeddad9d4e303a832ab42b2", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/1f45b58e98ab19bfcfeddad9d4e303a832ab42b2", "committedDate": "2020-06-10T05:20:17Z", "message": "used isInLockPeriod method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "968569e99bbe30ac72685f078cc90c8a5f3c7a79", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/968569e99bbe30ac72685f078cc90c8a5f3c7a79", "committedDate": "2020-06-10T05:21:29Z", "message": "Merge branch 'early-access' into early-access-mobile-user-account-lock-fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MDEwMjYx", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/366#pullrequestreview-428010261", "createdAt": "2020-06-10T12:40:47Z", "commit": {"oid": "968569e99bbe30ac72685f078cc90c8a5f3c7a79"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b625cddddeef6eb16f44e3c0e695d793dfa05dbc", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/b625cddddeef6eb16f44e3c0e695d793dfa05dbc", "committedDate": "2020-06-10T14:27:55Z", "message": "Merge branch 'early-access' into early-access-mobile-user-account-lock-fix"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1022, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}