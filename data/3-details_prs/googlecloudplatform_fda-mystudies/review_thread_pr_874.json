{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc5NDU4NjM1", "number": 874, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwODo0Nzo0M1rOEgTIrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwODo1MTo1OFrOEmcyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMzAzNDA2OnYy", "diffSide": "RIGHT", "path": "response-server-module/response-server-service/src/test/java/com/google/cloud/healthcare/fdamystudies/helper/TestDataHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwODo0Nzo0M1rOHNFQKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwODo0Nzo0M1rOHNFQKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ3OTU5NA==", "bodyText": "[response-server Checks] reported by reviewdog \ud83d\udc36\nMissing a Javadoc comment.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/874#discussion_r483479594", "createdAt": "2020-09-04T08:47:43Z", "author": {"login": "github-actions"}, "path": "response-server-module/response-server-service/src/test/java/com/google/cloud/healthcare/fdamystudies/helper/TestDataHelper.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.helper;\n+\n+import com.google.cloud.healthcare.fdamystudies.common.IdGenerator;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantBo;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantBoRepository;\n+import lombok.Getter;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Getter\n+@Component\n+public class TestDataHelper {\n+\n+  @Autowired private ParticipantBoRepository participantBoRepository;\n+\n+  public ParticipantBo saveParticipant() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5a82983fda530b28c747d4780040c5befed44a6"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMzAzNDA5OnYy", "diffSide": "RIGHT", "path": "response-server-module/response-server-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/ProcessActivityResponseControllerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwODo0Nzo0NFrOHNFQLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwOTowNDo1N1rOHNF2Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ3OTU5Nw==", "bodyText": "[response-server Checks] reported by reviewdog \ud83d\udc36\nLocal variable name 'StoredResponseBean' must match pattern '^a-z?$'.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/874#discussion_r483479597", "createdAt": "2020-09-04T08:47:44Z", "author": {"login": "github-actions"}, "path": "response-server-module/response-server-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/ProcessActivityResponseControllerTest.java", "diffHunk": "@@ -0,0 +1,383 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectMapper;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.readJsonFile;\n+import static com.google.cloud.healthcare.fdamystudies.utils.AppConstants.PARTICIPANT_ID_KEY;\n+import static com.google.cloud.healthcare.fdamystudies.utils.AppConstants.PARTICIPANT_TOKEN_IDENTIFIER_KEY;\n+import static com.google.cloud.healthcare.fdamystudies.utils.Constants.ACTIVITY_COLLECTION_NAME_VALUE;\n+import static com.google.cloud.healthcare.fdamystudies.utils.Constants.ACTIVITY_ID_VALUE;\n+import static com.google.cloud.healthcare.fdamystudies.utils.Constants.PARTICIPANT_ID_NOT_EXISTS_MESSAGE;\n+import static com.google.cloud.healthcare.fdamystudies.utils.Constants.QUESTION_KEY_VALUE;\n+import static com.google.cloud.healthcare.fdamystudies.utils.Constants.SITE_ID_VALUE;\n+import static com.google.cloud.healthcare.fdamystudies.utils.Constants.STUDY_COLLECTION_NAME_VALUE;\n+import static com.google.cloud.healthcare.fdamystudies.utils.Constants.STUDY_ID_VALUE;\n+import static com.google.cloud.healthcare.fdamystudies.utils.Constants.SUCCESS;\n+import static com.google.cloud.healthcare.fdamystudies.utils.Constants.USER_ID_HEADER;\n+import static com.google.cloud.healthcare.fdamystudies.utils.Constants.VALID_USER_ID;\n+import static com.google.cloud.healthcare.fdamystudies.utils.ErrorCode.EC_701;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import com.google.cloud.healthcare.fdamystudies.bean.ActivityResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StoredResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.common.ApiEndpoint;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.common.IdGenerator;\n+import com.google.cloud.healthcare.fdamystudies.common.JsonUtils;\n+import com.google.cloud.healthcare.fdamystudies.dao.CloudFirestoreResponsesDaoImpl;\n+import com.google.cloud.healthcare.fdamystudies.helper.TestDataHelper;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantActivitiesBo;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantBo;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantActivitiesRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantBoRepository;\n+import com.google.cloud.healthcare.fdamystudies.utils.TestUtils;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.skyscreamer.jsonassert.JSONCompareMode;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_CLASS)\n+public class ProcessActivityResponseControllerTest extends BaseMockIT {\n+\n+  @Autowired private TestDataHelper testDataHelper;\n+\n+  @Autowired private ParticipantBoRepository participantBoRepository;\n+\n+  private ParticipantBo participantBo;\n+\n+  @MockBean private CloudFirestoreResponsesDaoImpl responsesDaoMock;\n+\n+  @Captor ArgumentCaptor<String> studyCollectionNameCaptor;\n+  @Captor ArgumentCaptor<String> studyIdCaptor;\n+  @Captor ArgumentCaptor<String> siteIdCaptor;\n+  @Captor ArgumentCaptor<String> participantIdCaptor;\n+  @Captor ArgumentCaptor<String> activityIdCaptor;\n+  @Captor ArgumentCaptor<String> questionKeyCaptor;\n+  @Captor ArgumentCaptor<String> activityCollectionNameCaptor;\n+  @Captor ArgumentCaptor<Map<String, Object>> dataToStoreCaptor;\n+\n+  @Autowired private ParticipantActivitiesRepository participantActivitiesRepository;\n+\n+  @BeforeEach\n+  public void setUp() {\n+    participantBo = testDataHelper.saveParticipant();\n+  }\n+\n+  @Test\n+  public void shouldSaveProcessActivityResponse() throws Exception {\n+    Map<String, Object> dataToStore = new HashMap<>();\n+    dataToStore.put(PARTICIPANT_ID_KEY, participantBo.getParticipantIdentifier());\n+\n+    // Step-1 saveActivityResponseData\n+    doNothing()\n+        .when(responsesDaoMock)\n+        .saveActivityResponseData(\n+            STUDY_ID_VALUE,\n+            STUDY_COLLECTION_NAME_VALUE,\n+            ACTIVITY_COLLECTION_NAME_VALUE,\n+            dataToStore);\n+\n+    // Step-2 call API to details to save participant activities\n+    ActivityResponseBean activityResponseBean = setActivityResponseBean();\n+    HttpHeaders headers = TestUtils.newHeadersUser();\n+    mockMvc\n+        .perform(\n+            post(ApiEndpoint.PROCESS_ACTIVITY_RESPONSE.getPath())\n+                .contextPath(getContextPath())\n+                .content(JsonUtils.asJsonString(activityResponseBean))\n+                .headers(headers))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(jsonPath(\"$.message\", is(SUCCESS)));\n+\n+    // Step-3: verify saved values\n+    List<ParticipantActivitiesBo> participantActivitiesList =\n+        participantActivitiesRepository.findByStudyIdAndParticipantId(\n+            STUDY_ID_VALUE, participantBo.getParticipantIdentifier());\n+\n+    assertNotNull(participantActivitiesList);\n+    assertEquals(1, participantActivitiesList.size());\n+\n+    verify(responsesDaoMock)\n+        .saveActivityResponseData(\n+            studyIdCaptor.capture(),\n+            studyCollectionNameCaptor.capture(),\n+            activityCollectionNameCaptor.capture(),\n+            dataToStoreCaptor.capture());\n+\n+    // Step-4: assert argument capture\n+\n+    assertEquals(STUDY_ID_VALUE, studyIdCaptor.getValue());\n+    assertEquals(STUDY_COLLECTION_NAME_VALUE, studyCollectionNameCaptor.getValue());\n+    assertEquals(ACTIVITY_COLLECTION_NAME_VALUE, activityCollectionNameCaptor.getValue());\n+    assertEquals(\n+        participantBo.getParticipantIdentifier(),\n+        dataToStoreCaptor.getValue().get(PARTICIPANT_ID_KEY));\n+  }\n+\n+  @Test\n+  public void shouldReturnBadRequestForEmptyInputsOfProccessActivityResponse() throws Exception {\n+    ActivityResponseBean activityResponseBean = new ActivityResponseBean();\n+    HttpHeaders headers = TestUtils.newHeadersUser();\n+    mockMvc\n+        .perform(\n+            post(ApiEndpoint.PROCESS_ACTIVITY_RESPONSE.getPath())\n+                .contextPath(getContextPath())\n+                .content(JsonUtils.asJsonString(activityResponseBean))\n+                .headers(headers))\n+        .andDo(print())\n+        .andExpect(status().isBadRequest())\n+        .andExpect(jsonPath(\"$.userMessage\", is(EC_701.errorMessage())));\n+  }\n+\n+  @Test\n+  public void shouldReturnBadRequestForInvalidParticipant() throws Exception {\n+    ActivityResponseBean activityResponseBean = setActivityResponseBean();\n+    activityResponseBean.setParticipantId(IdGenerator.id());\n+    HttpHeaders headers = TestUtils.newHeadersUser();\n+    mockMvc\n+        .perform(\n+            post(ApiEndpoint.PROCESS_ACTIVITY_RESPONSE.getPath())\n+                .contextPath(getContextPath())\n+                .content(JsonUtils.asJsonString(activityResponseBean))\n+                .headers(headers))\n+        .andDo(print())\n+        .andExpect(status().isBadRequest())\n+        .andExpect(jsonPath(\"$.detailMessage\", is(PARTICIPANT_ID_NOT_EXISTS_MESSAGE)));\n+  }\n+\n+  @Test\n+  public void shouldGetActivityResponse() throws Exception {\n+    String inputJsonContent = readJsonFile(\"/get_activity_response_data_for_participant.json\");\n+    StoredResponseBean StoredResponseBean =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5a82983fda530b28c747d4780040c5befed44a6"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ4OTI5MQ==", "bodyText": "Fixed.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/874#discussion_r483489291", "createdAt": "2020-09-04T09:04:57Z", "author": {"login": "madhurya-btc"}, "path": "response-server-module/response-server-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/ProcessActivityResponseControllerTest.java", "diffHunk": "@@ -0,0 +1,383 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectMapper;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.readJsonFile;\n+import static com.google.cloud.healthcare.fdamystudies.utils.AppConstants.PARTICIPANT_ID_KEY;\n+import static com.google.cloud.healthcare.fdamystudies.utils.AppConstants.PARTICIPANT_TOKEN_IDENTIFIER_KEY;\n+import static com.google.cloud.healthcare.fdamystudies.utils.Constants.ACTIVITY_COLLECTION_NAME_VALUE;\n+import static com.google.cloud.healthcare.fdamystudies.utils.Constants.ACTIVITY_ID_VALUE;\n+import static com.google.cloud.healthcare.fdamystudies.utils.Constants.PARTICIPANT_ID_NOT_EXISTS_MESSAGE;\n+import static com.google.cloud.healthcare.fdamystudies.utils.Constants.QUESTION_KEY_VALUE;\n+import static com.google.cloud.healthcare.fdamystudies.utils.Constants.SITE_ID_VALUE;\n+import static com.google.cloud.healthcare.fdamystudies.utils.Constants.STUDY_COLLECTION_NAME_VALUE;\n+import static com.google.cloud.healthcare.fdamystudies.utils.Constants.STUDY_ID_VALUE;\n+import static com.google.cloud.healthcare.fdamystudies.utils.Constants.SUCCESS;\n+import static com.google.cloud.healthcare.fdamystudies.utils.Constants.USER_ID_HEADER;\n+import static com.google.cloud.healthcare.fdamystudies.utils.Constants.VALID_USER_ID;\n+import static com.google.cloud.healthcare.fdamystudies.utils.ErrorCode.EC_701;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import com.google.cloud.healthcare.fdamystudies.bean.ActivityResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StoredResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.common.ApiEndpoint;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.common.IdGenerator;\n+import com.google.cloud.healthcare.fdamystudies.common.JsonUtils;\n+import com.google.cloud.healthcare.fdamystudies.dao.CloudFirestoreResponsesDaoImpl;\n+import com.google.cloud.healthcare.fdamystudies.helper.TestDataHelper;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantActivitiesBo;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantBo;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantActivitiesRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantBoRepository;\n+import com.google.cloud.healthcare.fdamystudies.utils.TestUtils;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.skyscreamer.jsonassert.JSONCompareMode;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_CLASS)\n+public class ProcessActivityResponseControllerTest extends BaseMockIT {\n+\n+  @Autowired private TestDataHelper testDataHelper;\n+\n+  @Autowired private ParticipantBoRepository participantBoRepository;\n+\n+  private ParticipantBo participantBo;\n+\n+  @MockBean private CloudFirestoreResponsesDaoImpl responsesDaoMock;\n+\n+  @Captor ArgumentCaptor<String> studyCollectionNameCaptor;\n+  @Captor ArgumentCaptor<String> studyIdCaptor;\n+  @Captor ArgumentCaptor<String> siteIdCaptor;\n+  @Captor ArgumentCaptor<String> participantIdCaptor;\n+  @Captor ArgumentCaptor<String> activityIdCaptor;\n+  @Captor ArgumentCaptor<String> questionKeyCaptor;\n+  @Captor ArgumentCaptor<String> activityCollectionNameCaptor;\n+  @Captor ArgumentCaptor<Map<String, Object>> dataToStoreCaptor;\n+\n+  @Autowired private ParticipantActivitiesRepository participantActivitiesRepository;\n+\n+  @BeforeEach\n+  public void setUp() {\n+    participantBo = testDataHelper.saveParticipant();\n+  }\n+\n+  @Test\n+  public void shouldSaveProcessActivityResponse() throws Exception {\n+    Map<String, Object> dataToStore = new HashMap<>();\n+    dataToStore.put(PARTICIPANT_ID_KEY, participantBo.getParticipantIdentifier());\n+\n+    // Step-1 saveActivityResponseData\n+    doNothing()\n+        .when(responsesDaoMock)\n+        .saveActivityResponseData(\n+            STUDY_ID_VALUE,\n+            STUDY_COLLECTION_NAME_VALUE,\n+            ACTIVITY_COLLECTION_NAME_VALUE,\n+            dataToStore);\n+\n+    // Step-2 call API to details to save participant activities\n+    ActivityResponseBean activityResponseBean = setActivityResponseBean();\n+    HttpHeaders headers = TestUtils.newHeadersUser();\n+    mockMvc\n+        .perform(\n+            post(ApiEndpoint.PROCESS_ACTIVITY_RESPONSE.getPath())\n+                .contextPath(getContextPath())\n+                .content(JsonUtils.asJsonString(activityResponseBean))\n+                .headers(headers))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(jsonPath(\"$.message\", is(SUCCESS)));\n+\n+    // Step-3: verify saved values\n+    List<ParticipantActivitiesBo> participantActivitiesList =\n+        participantActivitiesRepository.findByStudyIdAndParticipantId(\n+            STUDY_ID_VALUE, participantBo.getParticipantIdentifier());\n+\n+    assertNotNull(participantActivitiesList);\n+    assertEquals(1, participantActivitiesList.size());\n+\n+    verify(responsesDaoMock)\n+        .saveActivityResponseData(\n+            studyIdCaptor.capture(),\n+            studyCollectionNameCaptor.capture(),\n+            activityCollectionNameCaptor.capture(),\n+            dataToStoreCaptor.capture());\n+\n+    // Step-4: assert argument capture\n+\n+    assertEquals(STUDY_ID_VALUE, studyIdCaptor.getValue());\n+    assertEquals(STUDY_COLLECTION_NAME_VALUE, studyCollectionNameCaptor.getValue());\n+    assertEquals(ACTIVITY_COLLECTION_NAME_VALUE, activityCollectionNameCaptor.getValue());\n+    assertEquals(\n+        participantBo.getParticipantIdentifier(),\n+        dataToStoreCaptor.getValue().get(PARTICIPANT_ID_KEY));\n+  }\n+\n+  @Test\n+  public void shouldReturnBadRequestForEmptyInputsOfProccessActivityResponse() throws Exception {\n+    ActivityResponseBean activityResponseBean = new ActivityResponseBean();\n+    HttpHeaders headers = TestUtils.newHeadersUser();\n+    mockMvc\n+        .perform(\n+            post(ApiEndpoint.PROCESS_ACTIVITY_RESPONSE.getPath())\n+                .contextPath(getContextPath())\n+                .content(JsonUtils.asJsonString(activityResponseBean))\n+                .headers(headers))\n+        .andDo(print())\n+        .andExpect(status().isBadRequest())\n+        .andExpect(jsonPath(\"$.userMessage\", is(EC_701.errorMessage())));\n+  }\n+\n+  @Test\n+  public void shouldReturnBadRequestForInvalidParticipant() throws Exception {\n+    ActivityResponseBean activityResponseBean = setActivityResponseBean();\n+    activityResponseBean.setParticipantId(IdGenerator.id());\n+    HttpHeaders headers = TestUtils.newHeadersUser();\n+    mockMvc\n+        .perform(\n+            post(ApiEndpoint.PROCESS_ACTIVITY_RESPONSE.getPath())\n+                .contextPath(getContextPath())\n+                .content(JsonUtils.asJsonString(activityResponseBean))\n+                .headers(headers))\n+        .andDo(print())\n+        .andExpect(status().isBadRequest())\n+        .andExpect(jsonPath(\"$.detailMessage\", is(PARTICIPANT_ID_NOT_EXISTS_MESSAGE)));\n+  }\n+\n+  @Test\n+  public void shouldGetActivityResponse() throws Exception {\n+    String inputJsonContent = readJsonFile(\"/get_activity_response_data_for_participant.json\");\n+    StoredResponseBean StoredResponseBean =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ3OTU5Nw=="}, "originalCommit": {"oid": "f5a82983fda530b28c747d4780040c5befed44a6"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODY4NTU1OnYy", "diffSide": "RIGHT", "path": "response-server-module/response-server-service/src/test/java/com/google/cloud/healthcare/fdamystudies/common/ApiEndpoint.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNzo1NTo0MVrOHPTeDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNjo0Nzo0M1rOHRF9aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwOTY3OA==", "bodyText": "remove, same as PROCESS_RESPONSE above!", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/874#discussion_r485809678", "createdAt": "2020-09-09T17:55:41Z", "author": {"login": "saminguyen"}, "path": "response-server-module/response-server-service/src/test/java/com/google/cloud/healthcare/fdamystudies/common/ApiEndpoint.java", "diffHunk": "@@ -31,7 +26,15 @@\n       \"http://localhost:8004/mystudies-response-server/participant/update-activity-state\"),\n \n   GET_ACTIVITY_STATE(\n-      \"http://localhost:8004/mystudies-response-server/participant/get-activity-state\");\n+      \"http://localhost:8004/mystudies-response-server/participant/get-activity-state\"),\n+\n+  PROCESS_ACTIVITY_RESPONSE(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3cc2070058ae8d8ddf56e9b07dcec8e5cd1d8d2"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0MzM2Nw==", "bodyText": "@madhurya-btc sorry for some reason I just clicked approve, please address above comment then request review", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/874#discussion_r485843367", "createdAt": "2020-09-09T18:57:55Z", "author": {"login": "saminguyen"}, "path": "response-server-module/response-server-service/src/test/java/com/google/cloud/healthcare/fdamystudies/common/ApiEndpoint.java", "diffHunk": "@@ -31,7 +26,15 @@\n       \"http://localhost:8004/mystudies-response-server/participant/update-activity-state\"),\n \n   GET_ACTIVITY_STATE(\n-      \"http://localhost:8004/mystudies-response-server/participant/get-activity-state\");\n+      \"http://localhost:8004/mystudies-response-server/participant/get-activity-state\"),\n+\n+  PROCESS_ACTIVITY_RESPONSE(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwOTY3OA=="}, "originalCommit": {"oid": "d3cc2070058ae8d8ddf56e9b07dcec8e5cd1d8d2"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY4NTQ4MA==", "bodyText": "Frixed review comment", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/874#discussion_r487685480", "createdAt": "2020-09-14T06:47:43Z", "author": {"login": "madhurya-btc"}, "path": "response-server-module/response-server-service/src/test/java/com/google/cloud/healthcare/fdamystudies/common/ApiEndpoint.java", "diffHunk": "@@ -31,7 +26,15 @@\n       \"http://localhost:8004/mystudies-response-server/participant/update-activity-state\"),\n \n   GET_ACTIVITY_STATE(\n-      \"http://localhost:8004/mystudies-response-server/participant/get-activity-state\");\n+      \"http://localhost:8004/mystudies-response-server/participant/get-activity-state\"),\n+\n+  PROCESS_ACTIVITY_RESPONSE(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwOTY3OA=="}, "originalCommit": {"oid": "d3cc2070058ae8d8ddf56e9b07dcec8e5cd1d8d2"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NzUyOTQ5OnYy", "diffSide": "RIGHT", "path": "response-server-module/response-server-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/ProcessActivityResponseControllerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwODo1MTo1OFrOHWegDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDowOToyMFrOHWjG8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMzMDQ0NQ==", "bodyText": "[response-server Checks] reported by reviewdog \ud83d\udc36\nLine is longer than 100 characters (found 106).", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/874#discussion_r493330445", "createdAt": "2020-09-23T08:51:58Z", "author": {"login": "github-actions"}, "path": "response-server-module/response-server-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/ProcessActivityResponseControllerTest.java", "diffHunk": "@@ -0,0 +1,396 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.getRequestedFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.verify;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectMapper;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.readJsonFile;\n+import static com.google.cloud.healthcare.fdamystudies.utils.AppConstants.PARTICIPANT_ID_KEY;\n+import static com.google.cloud.healthcare.fdamystudies.utils.AppConstants.PARTICIPANT_TOKEN_IDENTIFIER_KEY;\n+import static com.google.cloud.healthcare.fdamystudies.utils.Constants.ACTIVITY_COLLECTION_NAME_VALUE;\n+import static com.google.cloud.healthcare.fdamystudies.utils.Constants.ACTIVITY_ID_VALUE;\n+import static com.google.cloud.healthcare.fdamystudies.utils.Constants.PARTICIPANT_ID_NOT_EXISTS_MESSAGE;\n+import static com.google.cloud.healthcare.fdamystudies.utils.Constants.QUESTION_KEY_VALUE;\n+import static com.google.cloud.healthcare.fdamystudies.utils.Constants.SITE_ID_VALUE;\n+import static com.google.cloud.healthcare.fdamystudies.utils.Constants.STUDY_COLLECTION_NAME_VALUE;\n+import static com.google.cloud.healthcare.fdamystudies.utils.Constants.STUDY_ID_VALUE;\n+import static com.google.cloud.healthcare.fdamystudies.utils.Constants.SUCCESS;\n+import static com.google.cloud.healthcare.fdamystudies.utils.Constants.USER_ID_HEADER;\n+import static com.google.cloud.healthcare.fdamystudies.utils.Constants.VALID_USER_ID;\n+import static com.google.cloud.healthcare.fdamystudies.utils.ErrorCode.EC_701;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import com.google.cloud.healthcare.fdamystudies.bean.ActivityResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StoredResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.common.ApiEndpoint;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.common.IdGenerator;\n+import com.google.cloud.healthcare.fdamystudies.common.JsonUtils;\n+import com.google.cloud.healthcare.fdamystudies.dao.CloudFirestoreResponsesDaoImpl;\n+import com.google.cloud.healthcare.fdamystudies.helper.TestDataHelper;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantActivitiesBo;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantBo;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantActivitiesRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantBoRepository;\n+import com.google.cloud.healthcare.fdamystudies.utils.TestUtils;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.skyscreamer.jsonassert.JSONCompareMode;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_CLASS)\n+public class ProcessActivityResponseControllerTest extends BaseMockIT {\n+\n+  @Autowired private TestDataHelper testDataHelper;\n+\n+  @Autowired private ParticipantBoRepository participantBoRepository;\n+\n+  private ParticipantBo participantBo;\n+\n+  @MockBean private CloudFirestoreResponsesDaoImpl responsesDaoMock;\n+\n+  @Captor ArgumentCaptor<String> studyCollectionNameCaptor;\n+  @Captor ArgumentCaptor<String> studyIdCaptor;\n+  @Captor ArgumentCaptor<String> siteIdCaptor;\n+  @Captor ArgumentCaptor<String> participantIdCaptor;\n+  @Captor ArgumentCaptor<String> activityIdCaptor;\n+  @Captor ArgumentCaptor<String> questionKeyCaptor;\n+  @Captor ArgumentCaptor<String> activityCollectionNameCaptor;\n+  @Captor ArgumentCaptor<Map<String, Object>> dataToStoreCaptor;\n+\n+  @Autowired private ParticipantActivitiesRepository participantActivitiesRepository;\n+\n+  @BeforeEach\n+  public void setUp() {\n+    participantBo = testDataHelper.saveParticipant();\n+  }\n+\n+  @Test\n+  public void shouldSaveProcessActivityResponse() throws Exception {\n+    Map<String, Object> dataToStore = new HashMap<>();\n+    dataToStore.put(PARTICIPANT_ID_KEY, participantBo.getParticipantIdentifier());\n+\n+    // Step-1 saveActivityResponseData\n+    doNothing()\n+        .when(responsesDaoMock)\n+        .saveActivityResponseData(\n+            STUDY_ID_VALUE,\n+            STUDY_COLLECTION_NAME_VALUE,\n+            ACTIVITY_COLLECTION_NAME_VALUE,\n+            dataToStore);\n+\n+    // Step-2 call API to details to save participant activities\n+    ActivityResponseBean activityResponseBean = setActivityResponseBean();\n+    HttpHeaders headers = TestUtils.newHeadersUser();\n+    mockMvc\n+        .perform(\n+            post(ApiEndpoint.PROCESS_ACTIVITY_RESPONSE.getPath())\n+                .contextPath(getContextPath())\n+                .content(JsonUtils.asJsonString(activityResponseBean))\n+                .headers(headers))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(jsonPath(\"$.message\", is(SUCCESS)));\n+\n+    // Step-3: verify saved values\n+    List<ParticipantActivitiesBo> participantActivitiesList =\n+        participantActivitiesRepository.findByStudyIdAndParticipantId(\n+            STUDY_ID_VALUE, participantBo.getParticipantIdentifier());\n+\n+    assertNotNull(participantActivitiesList);\n+    assertEquals(1, participantActivitiesList.size());\n+\n+    verify(responsesDaoMock)\n+        .saveActivityResponseData(\n+            studyIdCaptor.capture(),\n+            studyCollectionNameCaptor.capture(),\n+            activityCollectionNameCaptor.capture(),\n+            dataToStoreCaptor.capture());\n+\n+    verify(\n+        1,\n+        getRequestedFor(\n+            urlEqualTo(\n+                \"/myStudiesEnrollmentMgmt/participantInfo?studyId=ASignature01&participantId=\"\n+                    + participantBo.getParticipantIdentifier())));\n+\n+    verify(\n+        1,\n+        getRequestedFor(\n+            urlEqualTo(\n+                \"/StudyMetaData/activity?studyId=ASignature01&activityId=Activity&activityVersion=1.0\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26c3b447da37ecad0651c296db6113051be8aa06"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQwNTkzOA==", "bodyText": "Fixed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/874#discussion_r493405938", "createdAt": "2020-09-23T10:09:20Z", "author": {"login": "madhurya-btc"}, "path": "response-server-module/response-server-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/ProcessActivityResponseControllerTest.java", "diffHunk": "@@ -0,0 +1,396 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.getRequestedFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.verify;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectMapper;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.readJsonFile;\n+import static com.google.cloud.healthcare.fdamystudies.utils.AppConstants.PARTICIPANT_ID_KEY;\n+import static com.google.cloud.healthcare.fdamystudies.utils.AppConstants.PARTICIPANT_TOKEN_IDENTIFIER_KEY;\n+import static com.google.cloud.healthcare.fdamystudies.utils.Constants.ACTIVITY_COLLECTION_NAME_VALUE;\n+import static com.google.cloud.healthcare.fdamystudies.utils.Constants.ACTIVITY_ID_VALUE;\n+import static com.google.cloud.healthcare.fdamystudies.utils.Constants.PARTICIPANT_ID_NOT_EXISTS_MESSAGE;\n+import static com.google.cloud.healthcare.fdamystudies.utils.Constants.QUESTION_KEY_VALUE;\n+import static com.google.cloud.healthcare.fdamystudies.utils.Constants.SITE_ID_VALUE;\n+import static com.google.cloud.healthcare.fdamystudies.utils.Constants.STUDY_COLLECTION_NAME_VALUE;\n+import static com.google.cloud.healthcare.fdamystudies.utils.Constants.STUDY_ID_VALUE;\n+import static com.google.cloud.healthcare.fdamystudies.utils.Constants.SUCCESS;\n+import static com.google.cloud.healthcare.fdamystudies.utils.Constants.USER_ID_HEADER;\n+import static com.google.cloud.healthcare.fdamystudies.utils.Constants.VALID_USER_ID;\n+import static com.google.cloud.healthcare.fdamystudies.utils.ErrorCode.EC_701;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import com.google.cloud.healthcare.fdamystudies.bean.ActivityResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StoredResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.common.ApiEndpoint;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.common.IdGenerator;\n+import com.google.cloud.healthcare.fdamystudies.common.JsonUtils;\n+import com.google.cloud.healthcare.fdamystudies.dao.CloudFirestoreResponsesDaoImpl;\n+import com.google.cloud.healthcare.fdamystudies.helper.TestDataHelper;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantActivitiesBo;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantBo;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantActivitiesRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantBoRepository;\n+import com.google.cloud.healthcare.fdamystudies.utils.TestUtils;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.skyscreamer.jsonassert.JSONCompareMode;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_CLASS)\n+public class ProcessActivityResponseControllerTest extends BaseMockIT {\n+\n+  @Autowired private TestDataHelper testDataHelper;\n+\n+  @Autowired private ParticipantBoRepository participantBoRepository;\n+\n+  private ParticipantBo participantBo;\n+\n+  @MockBean private CloudFirestoreResponsesDaoImpl responsesDaoMock;\n+\n+  @Captor ArgumentCaptor<String> studyCollectionNameCaptor;\n+  @Captor ArgumentCaptor<String> studyIdCaptor;\n+  @Captor ArgumentCaptor<String> siteIdCaptor;\n+  @Captor ArgumentCaptor<String> participantIdCaptor;\n+  @Captor ArgumentCaptor<String> activityIdCaptor;\n+  @Captor ArgumentCaptor<String> questionKeyCaptor;\n+  @Captor ArgumentCaptor<String> activityCollectionNameCaptor;\n+  @Captor ArgumentCaptor<Map<String, Object>> dataToStoreCaptor;\n+\n+  @Autowired private ParticipantActivitiesRepository participantActivitiesRepository;\n+\n+  @BeforeEach\n+  public void setUp() {\n+    participantBo = testDataHelper.saveParticipant();\n+  }\n+\n+  @Test\n+  public void shouldSaveProcessActivityResponse() throws Exception {\n+    Map<String, Object> dataToStore = new HashMap<>();\n+    dataToStore.put(PARTICIPANT_ID_KEY, participantBo.getParticipantIdentifier());\n+\n+    // Step-1 saveActivityResponseData\n+    doNothing()\n+        .when(responsesDaoMock)\n+        .saveActivityResponseData(\n+            STUDY_ID_VALUE,\n+            STUDY_COLLECTION_NAME_VALUE,\n+            ACTIVITY_COLLECTION_NAME_VALUE,\n+            dataToStore);\n+\n+    // Step-2 call API to details to save participant activities\n+    ActivityResponseBean activityResponseBean = setActivityResponseBean();\n+    HttpHeaders headers = TestUtils.newHeadersUser();\n+    mockMvc\n+        .perform(\n+            post(ApiEndpoint.PROCESS_ACTIVITY_RESPONSE.getPath())\n+                .contextPath(getContextPath())\n+                .content(JsonUtils.asJsonString(activityResponseBean))\n+                .headers(headers))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(jsonPath(\"$.message\", is(SUCCESS)));\n+\n+    // Step-3: verify saved values\n+    List<ParticipantActivitiesBo> participantActivitiesList =\n+        participantActivitiesRepository.findByStudyIdAndParticipantId(\n+            STUDY_ID_VALUE, participantBo.getParticipantIdentifier());\n+\n+    assertNotNull(participantActivitiesList);\n+    assertEquals(1, participantActivitiesList.size());\n+\n+    verify(responsesDaoMock)\n+        .saveActivityResponseData(\n+            studyIdCaptor.capture(),\n+            studyCollectionNameCaptor.capture(),\n+            activityCollectionNameCaptor.capture(),\n+            dataToStoreCaptor.capture());\n+\n+    verify(\n+        1,\n+        getRequestedFor(\n+            urlEqualTo(\n+                \"/myStudiesEnrollmentMgmt/participantInfo?studyId=ASignature01&participantId=\"\n+                    + participantBo.getParticipantIdentifier())));\n+\n+    verify(\n+        1,\n+        getRequestedFor(\n+            urlEqualTo(\n+                \"/StudyMetaData/activity?studyId=ASignature01&activityId=Activity&activityVersion=1.0\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMzMDQ0NQ=="}, "originalCommit": {"oid": "26c3b447da37ecad0651c296db6113051be8aa06"}, "originalPosition": 151}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1930, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}