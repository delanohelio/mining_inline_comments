{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4OTQ3NjA2", "number": 242, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMjo0MzozOVrOD2UXaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMjo0OToxMlrOD2UbaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MjgzMzcxOnYy", "diffSide": "RIGHT", "path": "Android/app/src/main/java/com/harvard/studyappmodule/consent/PDFWriter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMjo0MzozOVrOGMEB8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNjozODo0NlrOGNxgDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwMjEyOQ==", "bodyText": "move this to where font is defined as an initial value.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/242#discussion_r415302129", "createdAt": "2020-04-26T12:43:39Z", "author": {"login": "zohrehj"}, "path": "Android/app/src/main/java/com/harvard/studyappmodule/consent/PDFWriter.java", "diffHunk": "@@ -41,18 +50,27 @@\n \n   void createPdfFile(Context context) {\n     PDFBoxResourceLoader.init(context);\n+    assetManager = context.getAssets();\n     doc = new PDDocument();\n-    font = PDType1Font.HELVETICA;\n+    try {\n+      font =\n+          PDType0Font.load(\n+              doc,\n+              assetManager.open(\"com/tom_roush/pdfbox/resources/ttf/LiberationSans-Regular.ttf\"));\n+    } catch (Exception e) {\n+      font = PDType1Font.HELVETICA;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d76a93c8267296662f08a845099ebd05f93a8e50"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA5NTY5NA==", "bodyText": "Updated", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/242#discussion_r417095694", "createdAt": "2020-04-29T06:38:46Z", "author": {"login": "naveenr-btc"}, "path": "Android/app/src/main/java/com/harvard/studyappmodule/consent/PDFWriter.java", "diffHunk": "@@ -41,18 +50,27 @@\n \n   void createPdfFile(Context context) {\n     PDFBoxResourceLoader.init(context);\n+    assetManager = context.getAssets();\n     doc = new PDDocument();\n-    font = PDType1Font.HELVETICA;\n+    try {\n+      font =\n+          PDType0Font.load(\n+              doc,\n+              assetManager.open(\"com/tom_roush/pdfbox/resources/ttf/LiberationSans-Regular.ttf\"));\n+    } catch (Exception e) {\n+      font = PDType1Font.HELVETICA;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwMjEyOQ=="}, "originalCommit": {"oid": "d76a93c8267296662f08a845099ebd05f93a8e50"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4Mjg0MzkyOnYy", "diffSide": "RIGHT", "path": "Android/app/src/main/java/com/harvard/studyappmodule/consent/PDFWriter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMjo0OToxMlrOGMEGdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNjozODo1NlrOGNxgSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwMzI4NQ==", "bodyText": "method name is misleading, since if the character is encodable it will not be replaced.\nShould be called something like sanitizeCharacter instead.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/242#discussion_r415303285", "createdAt": "2020-04-26T12:49:12Z", "author": {"login": "zohrehj"}, "path": "Android/app/src/main/java/com/harvard/studyappmodule/consent/PDFWriter.java", "diffHunk": "@@ -149,34 +165,62 @@ void saveAndClose() {\n   }\n \n   private void parseIndividualLines(\n-      StringBuffer wholeLetter, List<String> lines, float fontSize, PDFont pdfFont, float width)\n-      throws IOException {\n+      StringBuffer wholeLetter, List<String> lines, float fontSize, PDFont pdfFont, float width) {\n     String[] paragraphs = wholeLetter.toString().split(System.getProperty(\"line.separator\"));\n     for (int i = 0; i < paragraphs.length; i++) {\n       int lastSpace = -1;\n       lines.add(\" \");\n-      while (paragraphs[i].length() > 0) {\n-        int spaceIndex = paragraphs[i].indexOf(' ', lastSpace + 1);\n-        if (spaceIndex < 0) {\n-          spaceIndex = paragraphs[i].length();\n-        }\n-        String subString = paragraphs[i].substring(0, spaceIndex);\n-        float size = fontSize * pdfFont.getStringWidth(subString) / 1000;\n-        if (size > width) {\n-          if (lastSpace < 0) {\n+      if (paragraphs[i] != null)\n+        while (paragraphs[i].length() > 0) {\n+          paragraphs[i] = replaceUnsupportedCharacter(paragraphs[i]).toString();\n+          int spaceIndex = paragraphs[i].indexOf(' ', lastSpace + 1);\n+          if (spaceIndex < 0) {\n+            spaceIndex = paragraphs[i].length();\n+          }\n+          String subString = paragraphs[i].substring(0, spaceIndex);\n+          float size = 10;\n+          try {\n+            size = fontSize * pdfFont.getStringWidth(subString) / 1000;\n+          } catch (Exception e) {\n+            Logger.log(e);\n+          }\n+          if (size > width) {\n+            if (lastSpace < 0) {\n+              lastSpace = spaceIndex;\n+            }\n+            subString = paragraphs[i].substring(0, lastSpace);\n+            lines.add(subString);\n+            paragraphs[i] = paragraphs[i].substring(lastSpace).trim();\n+            lastSpace = -1;\n+          } else if (spaceIndex == paragraphs[i].length()) {\n+            lines.add(paragraphs[i]);\n+            paragraphs[i] = \"\";\n+          } else {\n             lastSpace = spaceIndex;\n           }\n-          subString = paragraphs[i].substring(0, lastSpace);\n-          lines.add(subString);\n-          paragraphs[i] = paragraphs[i].substring(lastSpace).trim();\n-          lastSpace = -1;\n-        } else if (spaceIndex == paragraphs[i].length()) {\n-          lines.add(paragraphs[i]);\n-          paragraphs[i] = \"\";\n-        } else {\n-          lastSpace = spaceIndex;\n         }\n+    }\n+  }\n+\n+  private StringBuffer replaceUnsupportedCharacter(String text) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d76a93c8267296662f08a845099ebd05f93a8e50"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA5NTc1Mg==", "bodyText": "updated", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/242#discussion_r417095752", "createdAt": "2020-04-29T06:38:56Z", "author": {"login": "naveenr-btc"}, "path": "Android/app/src/main/java/com/harvard/studyappmodule/consent/PDFWriter.java", "diffHunk": "@@ -149,34 +165,62 @@ void saveAndClose() {\n   }\n \n   private void parseIndividualLines(\n-      StringBuffer wholeLetter, List<String> lines, float fontSize, PDFont pdfFont, float width)\n-      throws IOException {\n+      StringBuffer wholeLetter, List<String> lines, float fontSize, PDFont pdfFont, float width) {\n     String[] paragraphs = wholeLetter.toString().split(System.getProperty(\"line.separator\"));\n     for (int i = 0; i < paragraphs.length; i++) {\n       int lastSpace = -1;\n       lines.add(\" \");\n-      while (paragraphs[i].length() > 0) {\n-        int spaceIndex = paragraphs[i].indexOf(' ', lastSpace + 1);\n-        if (spaceIndex < 0) {\n-          spaceIndex = paragraphs[i].length();\n-        }\n-        String subString = paragraphs[i].substring(0, spaceIndex);\n-        float size = fontSize * pdfFont.getStringWidth(subString) / 1000;\n-        if (size > width) {\n-          if (lastSpace < 0) {\n+      if (paragraphs[i] != null)\n+        while (paragraphs[i].length() > 0) {\n+          paragraphs[i] = replaceUnsupportedCharacter(paragraphs[i]).toString();\n+          int spaceIndex = paragraphs[i].indexOf(' ', lastSpace + 1);\n+          if (spaceIndex < 0) {\n+            spaceIndex = paragraphs[i].length();\n+          }\n+          String subString = paragraphs[i].substring(0, spaceIndex);\n+          float size = 10;\n+          try {\n+            size = fontSize * pdfFont.getStringWidth(subString) / 1000;\n+          } catch (Exception e) {\n+            Logger.log(e);\n+          }\n+          if (size > width) {\n+            if (lastSpace < 0) {\n+              lastSpace = spaceIndex;\n+            }\n+            subString = paragraphs[i].substring(0, lastSpace);\n+            lines.add(subString);\n+            paragraphs[i] = paragraphs[i].substring(lastSpace).trim();\n+            lastSpace = -1;\n+          } else if (spaceIndex == paragraphs[i].length()) {\n+            lines.add(paragraphs[i]);\n+            paragraphs[i] = \"\";\n+          } else {\n             lastSpace = spaceIndex;\n           }\n-          subString = paragraphs[i].substring(0, lastSpace);\n-          lines.add(subString);\n-          paragraphs[i] = paragraphs[i].substring(lastSpace).trim();\n-          lastSpace = -1;\n-        } else if (spaceIndex == paragraphs[i].length()) {\n-          lines.add(paragraphs[i]);\n-          paragraphs[i] = \"\";\n-        } else {\n-          lastSpace = spaceIndex;\n         }\n+    }\n+  }\n+\n+  private StringBuffer replaceUnsupportedCharacter(String text) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwMzI4NQ=="}, "originalCommit": {"oid": "d76a93c8267296662f08a845099ebd05f93a8e50"}, "originalPosition": 151}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1196, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}