{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3MjE5NDc3", "number": 683, "reviewThreads": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDo0Mjo1OFrOESjOig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOTo1NzoyN1rOET0t8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODg2OTg2OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/service/auth.service.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDo0Mjo1OFrOG3y1WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNDo0NDo1OVrOG5mVPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE1NzcyMQ==", "bodyText": "unnecessary call to super()", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461157721", "createdAt": "2020-07-27T20:42:58Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/auth.service.ts", "diffHunk": "@@ -0,0 +1,74 @@\n+import {Injectable} from '@angular/core';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {User} from '../entity/user';\n+import {EntityService} from './entity.service';\n+import {Router} from '@angular/router';\n+import {AccessToken} from '../entity/AccessToken';\n+import {environment} from 'src/environments/environment';\n+import {ProfileService} from './profile.service';\n+import {UnsubscribeOnDestroyAdapter} from '../unsubscribe-on-destroy-adapter';\n+\n+@Injectable({providedIn: 'root'})\n+export class AuthService extends UnsubscribeOnDestroyAdapter {\n+  constructor(\n+    private readonly http: HttpClient,\n+    public cookieService: CookieService,\n+    public entityService: EntityService<AccessToken>,\n+    public router: Router,\n+    private readonly profilService: ProfileService,\n+  ) {\n+    super();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA1MDA0NQ==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r463050045", "createdAt": "2020-07-30T14:44:59Z", "author": {"login": "firdosebtc1"}, "path": "UR-web-app/src/app/service/auth.service.ts", "diffHunk": "@@ -0,0 +1,74 @@\n+import {Injectable} from '@angular/core';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {User} from '../entity/user';\n+import {EntityService} from './entity.service';\n+import {Router} from '@angular/router';\n+import {AccessToken} from '../entity/AccessToken';\n+import {environment} from 'src/environments/environment';\n+import {ProfileService} from './profile.service';\n+import {UnsubscribeOnDestroyAdapter} from '../unsubscribe-on-destroy-adapter';\n+\n+@Injectable({providedIn: 'root'})\n+export class AuthService extends UnsubscribeOnDestroyAdapter {\n+  constructor(\n+    private readonly http: HttpClient,\n+    public cookieService: CookieService,\n+    public entityService: EntityService<AccessToken>,\n+    public router: Router,\n+    private readonly profilService: ProfileService,\n+  ) {\n+    super();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE1NzcyMQ=="}, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODg3MTAzOnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/service/auth.service.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDo0MzoyMlrOG3y2Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNDo0NTowNFrOG5mVdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE1NzkxOQ==", "bodyText": "hasCredentials?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461157919", "createdAt": "2020-07-27T20:43:22Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/auth.service.ts", "diffHunk": "@@ -0,0 +1,74 @@\n+import {Injectable} from '@angular/core';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {User} from '../entity/user';\n+import {EntityService} from './entity.service';\n+import {Router} from '@angular/router';\n+import {AccessToken} from '../entity/AccessToken';\n+import {environment} from 'src/environments/environment';\n+import {ProfileService} from './profile.service';\n+import {UnsubscribeOnDestroyAdapter} from '../unsubscribe-on-destroy-adapter';\n+\n+@Injectable({providedIn: 'root'})\n+export class AuthService extends UnsubscribeOnDestroyAdapter {\n+  constructor(\n+    private readonly http: HttpClient,\n+    public cookieService: CookieService,\n+    public entityService: EntityService<AccessToken>,\n+    public router: Router,\n+    private readonly profilService: ProfileService,\n+  ) {\n+    super();\n+  }\n+  checkCredentials(): boolean {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA1MDEwMA==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r463050100", "createdAt": "2020-07-30T14:45:04Z", "author": {"login": "firdosebtc1"}, "path": "UR-web-app/src/app/service/auth.service.ts", "diffHunk": "@@ -0,0 +1,74 @@\n+import {Injectable} from '@angular/core';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {User} from '../entity/user';\n+import {EntityService} from './entity.service';\n+import {Router} from '@angular/router';\n+import {AccessToken} from '../entity/AccessToken';\n+import {environment} from 'src/environments/environment';\n+import {ProfileService} from './profile.service';\n+import {UnsubscribeOnDestroyAdapter} from '../unsubscribe-on-destroy-adapter';\n+\n+@Injectable({providedIn: 'root'})\n+export class AuthService extends UnsubscribeOnDestroyAdapter {\n+  constructor(\n+    private readonly http: HttpClient,\n+    public cookieService: CookieService,\n+    public entityService: EntityService<AccessToken>,\n+    public router: Router,\n+    private readonly profilService: ProfileService,\n+  ) {\n+    super();\n+  }\n+  checkCredentials(): boolean {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE1NzkxOQ=="}, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODg3Mzc4OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/service/auth.service.ts", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDo0NDoxMlrOG3y3zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMzo1Mjo1MFrOG6JYdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE1ODM1MA==", "bodyText": "what are these parameters? Should they be in environment?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461158350", "createdAt": "2020-07-27T20:44:12Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/auth.service.ts", "diffHunk": "@@ -0,0 +1,74 @@\n+import {Injectable} from '@angular/core';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {User} from '../entity/user';\n+import {EntityService} from './entity.service';\n+import {Router} from '@angular/router';\n+import {AccessToken} from '../entity/AccessToken';\n+import {environment} from 'src/environments/environment';\n+import {ProfileService} from './profile.service';\n+import {UnsubscribeOnDestroyAdapter} from '../unsubscribe-on-destroy-adapter';\n+\n+@Injectable({providedIn: 'root'})\n+export class AuthService extends UnsubscribeOnDestroyAdapter {\n+  constructor(\n+    private readonly http: HttpClient,\n+    public cookieService: CookieService,\n+    public entityService: EntityService<AccessToken>,\n+    public router: Router,\n+    private readonly profilService: ProfileService,\n+  ) {\n+    super();\n+  }\n+  checkCredentials(): boolean {\n+    return (\n+      this.cookieService.check('accessToken') &&\n+      this.cookieService.check('user')\n+    );\n+  }\n+  getLoggedInUserDetails(): User | null {\n+    if (this.cookieService.check('user')) {\n+      return JSON.parse(this.cookieService.get('user')) as User;\n+    }\n+    return null;\n+  }\n+  getLoggedInUserAccessToken(): string {\n+    return this.cookieService.get('accessToken');\n+  }\n+\n+  redirectToLoginPage(): void {\n+    void this.router.navigate(['/callback'], {\n+      queryParams: {\n+        code: 'l4hQQM-guBDwbpo76dHJs-8.ufR0YLll0menniGz5A-YN95DfCFOKg',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA3MjU3MA==", "bodyText": "Here I'm just hard coding query param which I will receiving in call back url from oauth server", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r463072570", "createdAt": "2020-07-30T15:16:12Z", "author": {"login": "firdosebtc1"}, "path": "UR-web-app/src/app/service/auth.service.ts", "diffHunk": "@@ -0,0 +1,74 @@\n+import {Injectable} from '@angular/core';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {User} from '../entity/user';\n+import {EntityService} from './entity.service';\n+import {Router} from '@angular/router';\n+import {AccessToken} from '../entity/AccessToken';\n+import {environment} from 'src/environments/environment';\n+import {ProfileService} from './profile.service';\n+import {UnsubscribeOnDestroyAdapter} from '../unsubscribe-on-destroy-adapter';\n+\n+@Injectable({providedIn: 'root'})\n+export class AuthService extends UnsubscribeOnDestroyAdapter {\n+  constructor(\n+    private readonly http: HttpClient,\n+    public cookieService: CookieService,\n+    public entityService: EntityService<AccessToken>,\n+    public router: Router,\n+    private readonly profilService: ProfileService,\n+  ) {\n+    super();\n+  }\n+  checkCredentials(): boolean {\n+    return (\n+      this.cookieService.check('accessToken') &&\n+      this.cookieService.check('user')\n+    );\n+  }\n+  getLoggedInUserDetails(): User | null {\n+    if (this.cookieService.check('user')) {\n+      return JSON.parse(this.cookieService.get('user')) as User;\n+    }\n+    return null;\n+  }\n+  getLoggedInUserAccessToken(): string {\n+    return this.cookieService.get('accessToken');\n+  }\n+\n+  redirectToLoginPage(): void {\n+    void this.router.navigate(['/callback'], {\n+      queryParams: {\n+        code: 'l4hQQM-guBDwbpo76dHJs-8.ufR0YLll0menniGz5A-YN95DfCFOKg',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE1ODM1MA=="}, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIzNzU4OQ==", "bodyText": "Don't these tokens expire? Can we use the proxy config I suggested to circumvent auth instead of hardcoding in tokens?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r463237589", "createdAt": "2020-07-30T19:58:59Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/auth.service.ts", "diffHunk": "@@ -0,0 +1,74 @@\n+import {Injectable} from '@angular/core';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {User} from '../entity/user';\n+import {EntityService} from './entity.service';\n+import {Router} from '@angular/router';\n+import {AccessToken} from '../entity/AccessToken';\n+import {environment} from 'src/environments/environment';\n+import {ProfileService} from './profile.service';\n+import {UnsubscribeOnDestroyAdapter} from '../unsubscribe-on-destroy-adapter';\n+\n+@Injectable({providedIn: 'root'})\n+export class AuthService extends UnsubscribeOnDestroyAdapter {\n+  constructor(\n+    private readonly http: HttpClient,\n+    public cookieService: CookieService,\n+    public entityService: EntityService<AccessToken>,\n+    public router: Router,\n+    private readonly profilService: ProfileService,\n+  ) {\n+    super();\n+  }\n+  checkCredentials(): boolean {\n+    return (\n+      this.cookieService.check('accessToken') &&\n+      this.cookieService.check('user')\n+    );\n+  }\n+  getLoggedInUserDetails(): User | null {\n+    if (this.cookieService.check('user')) {\n+      return JSON.parse(this.cookieService.get('user')) as User;\n+    }\n+    return null;\n+  }\n+  getLoggedInUserAccessToken(): string {\n+    return this.cookieService.get('accessToken');\n+  }\n+\n+  redirectToLoginPage(): void {\n+    void this.router.navigate(['/callback'], {\n+      queryParams: {\n+        code: 'l4hQQM-guBDwbpo76dHJs-8.ufR0YLll0menniGz5A-YN95DfCFOKg',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE1ODM1MA=="}, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ5NTM0Ng==", "bodyText": "This values will be removed when we integrate with hydra oauth server and this mock oauth service is created only for temporary solution till that time as per your previous PR comments where we were hard coding in the headers.We will be integrating the oauth server once this already developed and tested angular components are pushed to Github PRs", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r463495346", "createdAt": "2020-07-31T09:07:16Z", "author": {"login": "firdosebtc1"}, "path": "UR-web-app/src/app/service/auth.service.ts", "diffHunk": "@@ -0,0 +1,74 @@\n+import {Injectable} from '@angular/core';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {User} from '../entity/user';\n+import {EntityService} from './entity.service';\n+import {Router} from '@angular/router';\n+import {AccessToken} from '../entity/AccessToken';\n+import {environment} from 'src/environments/environment';\n+import {ProfileService} from './profile.service';\n+import {UnsubscribeOnDestroyAdapter} from '../unsubscribe-on-destroy-adapter';\n+\n+@Injectable({providedIn: 'root'})\n+export class AuthService extends UnsubscribeOnDestroyAdapter {\n+  constructor(\n+    private readonly http: HttpClient,\n+    public cookieService: CookieService,\n+    public entityService: EntityService<AccessToken>,\n+    public router: Router,\n+    private readonly profilService: ProfileService,\n+  ) {\n+    super();\n+  }\n+  checkCredentials(): boolean {\n+    return (\n+      this.cookieService.check('accessToken') &&\n+      this.cookieService.check('user')\n+    );\n+  }\n+  getLoggedInUserDetails(): User | null {\n+    if (this.cookieService.check('user')) {\n+      return JSON.parse(this.cookieService.get('user')) as User;\n+    }\n+    return null;\n+  }\n+  getLoggedInUserAccessToken(): string {\n+    return this.cookieService.get('accessToken');\n+  }\n+\n+  redirectToLoginPage(): void {\n+    void this.router.navigate(['/callback'], {\n+      queryParams: {\n+        code: 'l4hQQM-guBDwbpo76dHJs-8.ufR0YLll0menniGz5A-YN95DfCFOKg',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE1ODM1MA=="}, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyNDMxMQ==", "bodyText": "My previous comments were about finding a way to add the headers so the requests would work, but hard coding data is not the best way to accomplish this. If you're not going to change this here I can only suggest that in the future you try to order your development so that you don't end up needing to do things like this, i.e. write the full auth solution first, or use proxies like I discussed.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r463624311", "createdAt": "2020-07-31T13:52:50Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/auth.service.ts", "diffHunk": "@@ -0,0 +1,74 @@\n+import {Injectable} from '@angular/core';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {User} from '../entity/user';\n+import {EntityService} from './entity.service';\n+import {Router} from '@angular/router';\n+import {AccessToken} from '../entity/AccessToken';\n+import {environment} from 'src/environments/environment';\n+import {ProfileService} from './profile.service';\n+import {UnsubscribeOnDestroyAdapter} from '../unsubscribe-on-destroy-adapter';\n+\n+@Injectable({providedIn: 'root'})\n+export class AuthService extends UnsubscribeOnDestroyAdapter {\n+  constructor(\n+    private readonly http: HttpClient,\n+    public cookieService: CookieService,\n+    public entityService: EntityService<AccessToken>,\n+    public router: Router,\n+    private readonly profilService: ProfileService,\n+  ) {\n+    super();\n+  }\n+  checkCredentials(): boolean {\n+    return (\n+      this.cookieService.check('accessToken') &&\n+      this.cookieService.check('user')\n+    );\n+  }\n+  getLoggedInUserDetails(): User | null {\n+    if (this.cookieService.check('user')) {\n+      return JSON.parse(this.cookieService.get('user')) as User;\n+    }\n+    return null;\n+  }\n+  getLoggedInUserAccessToken(): string {\n+    return this.cookieService.get('accessToken');\n+  }\n+\n+  redirectToLoginPage(): void {\n+    void this.router.navigate(['/callback'], {\n+      queryParams: {\n+        code: 'l4hQQM-guBDwbpo76dHJs-8.ufR0YLll0menniGz5A-YN95DfCFOKg',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE1ODM1MA=="}, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODg4NDA2OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/app-routing.module.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDo0NzoxNFrOG3y99Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNToxMzoxMVrOG5nlBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE1OTkyNQ==", "bodyText": "You don't need a canActivate guard here, the usual way to do this is to just redirect the user from this component if they are already logged in", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461159925", "createdAt": "2020-07-27T20:47:14Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/app-routing.module.ts", "diffHunk": "@@ -5,16 +5,21 @@ import {SetUpAccountComponent} from './auth/set-up-account/set-up-account.compon\n import {ForgotPasswordComponent} from './auth/forgot-password/forgot-password.component';\n import {PageNotFoundComponent} from './page-not-found/page-not-found.component';\n import {SiteCoordinatorModule} from './site-coordinator/site-coordinator.module';\n+import {CallbackComponent} from './auth/callback/callback.component';\n+import {AuthGuard} from './service/auth.guard';\n+import {LoginGuard} from './service/login.guard';\n const routes: Routes = [\n-  {path: 'login', component: LoginComponent},\n+  {path: 'login', component: LoginComponent, canActivate: [LoginGuard]},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA3MDQ3MA==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r463070470", "createdAt": "2020-07-30T15:13:11Z", "author": {"login": "firdosebtc1"}, "path": "UR-web-app/src/app/app-routing.module.ts", "diffHunk": "@@ -5,16 +5,21 @@ import {SetUpAccountComponent} from './auth/set-up-account/set-up-account.compon\n import {ForgotPasswordComponent} from './auth/forgot-password/forgot-password.component';\n import {PageNotFoundComponent} from './page-not-found/page-not-found.component';\n import {SiteCoordinatorModule} from './site-coordinator/site-coordinator.module';\n+import {CallbackComponent} from './auth/callback/callback.component';\n+import {AuthGuard} from './service/auth.guard';\n+import {LoginGuard} from './service/login.guard';\n const routes: Routes = [\n-  {path: 'login', component: LoginComponent},\n+  {path: 'login', component: LoginComponent, canActivate: [LoginGuard]},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE1OTkyNQ=="}, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODkxOTMxOnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/app-routing.module.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDo1NzozNVrOG3zTNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNToxMjo1N1rOG5nkUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2NTM2Nw==", "bodyText": "Can you name this something more specific than \"Callback\"", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461165367", "createdAt": "2020-07-27T20:57:35Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/app-routing.module.ts", "diffHunk": "@@ -5,16 +5,21 @@ import {SetUpAccountComponent} from './auth/set-up-account/set-up-account.compon\n import {ForgotPasswordComponent} from './auth/forgot-password/forgot-password.component';\n import {PageNotFoundComponent} from './page-not-found/page-not-found.component';\n import {SiteCoordinatorModule} from './site-coordinator/site-coordinator.module';\n+import {CallbackComponent} from './auth/callback/callback.component';\n+import {AuthGuard} from './service/auth.guard';\n+import {LoginGuard} from './service/login.guard';\n const routes: Routes = [\n-  {path: 'login', component: LoginComponent},\n+  {path: 'login', component: LoginComponent, canActivate: [LoginGuard]},\n   {path: 'forgot-password', component: ForgotPasswordComponent},\n   {path: 'set-up-account', component: SetUpAccountComponent},\n+  {path: 'callback', component: CallbackComponent},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA3MDI5MQ==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r463070291", "createdAt": "2020-07-30T15:12:57Z", "author": {"login": "firdosebtc1"}, "path": "UR-web-app/src/app/app-routing.module.ts", "diffHunk": "@@ -5,16 +5,21 @@ import {SetUpAccountComponent} from './auth/set-up-account/set-up-account.compon\n import {ForgotPasswordComponent} from './auth/forgot-password/forgot-password.component';\n import {PageNotFoundComponent} from './page-not-found/page-not-found.component';\n import {SiteCoordinatorModule} from './site-coordinator/site-coordinator.module';\n+import {CallbackComponent} from './auth/callback/callback.component';\n+import {AuthGuard} from './service/auth.guard';\n+import {LoginGuard} from './service/login.guard';\n const routes: Routes = [\n-  {path: 'login', component: LoginComponent},\n+  {path: 'login', component: LoginComponent, canActivate: [LoginGuard]},\n   {path: 'forgot-password', component: ForgotPasswordComponent},\n   {path: 'set-up-account', component: SetUpAccountComponent},\n+  {path: 'callback', component: CallbackComponent},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2NTM2Nw=="}, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODkzNDE3OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/http-interceptors/auth.interceptor.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTowMjowNVrOG3zcjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwOTowNjowNVrOG6BelA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2Nzc1OQ==", "bodyText": "I don't really want hacks in the application to support development. I would rather we use https://webpack.js.org/configuration/dev-server/#devserverproxy to do this. You can set the auth server to point at the proxy, and return these hardcoded responses in development", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461167759", "createdAt": "2020-07-27T21:02:05Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/http-interceptors/auth.interceptor.ts", "diffHunk": "@@ -6,36 +6,53 @@ import {\n   HttpRequest,\n   HttpEvent,\n   HttpErrorResponse,\n+  HttpResponse,\n } from '@angular/common/http';\n import {finalize} from 'rxjs/operators';\n import {User} from '../entity/user';\n-import {Observable, OperatorFunction, throwError} from 'rxjs';\n+import {Observable, OperatorFunction, throwError, of} from 'rxjs';\n import {catchError} from 'rxjs/operators';\n import {ToastrService} from 'ngx-toastr';\n+import {AuthService} from '../service/auth.service';\n+import accessToken from 'src/app/auth/access-token.json';\n+import {AccessToken} from '../entity/AccessToken';\n+import account from 'src/app/auth/account.json';\n import {ErrorCodesEnum, getMessage} from '../shared/error.codes.enum';\n import {ApiResponse} from '../entity/api.response.model';\n+import {environment} from 'src/environments/environment';\n \n @Injectable()\n export class AuthInterceptor implements HttpInterceptor {\n   constructor(\n     private readonly spinner: NgxSpinnerService,\n     private readonly toasterService: ToastrService,\n+    private readonly authService: AuthService,\n   ) {}\n \n-  getUserDetails(): User | null {\n-    const currentUser = localStorage.getItem('currentUser');\n-    if (currentUser === null) {\n-      return null;\n-    }\n-    return JSON.parse(currentUser) as User;\n-  }\n   intercept(\n     req: HttpRequest<unknown>,\n     next: HttpHandler,\n   ): Observable<HttpEvent<unknown>> {\n+    if (req.url === `${environment.authServerUrl}/oauth2/token`) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ5NDgwNA==", "bodyText": "This code will be removed when we integrate with hydra oauth server and this mock oauth service is created only for temporary solution till that time as per your previous PR comments where we were hard coding in the headers.We will be integrating the oauth server once this already developed and tested angular components are pushed to Github PRs", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r463494804", "createdAt": "2020-07-31T09:06:05Z", "author": {"login": "firdosebtc1"}, "path": "UR-web-app/src/app/http-interceptors/auth.interceptor.ts", "diffHunk": "@@ -6,36 +6,53 @@ import {\n   HttpRequest,\n   HttpEvent,\n   HttpErrorResponse,\n+  HttpResponse,\n } from '@angular/common/http';\n import {finalize} from 'rxjs/operators';\n import {User} from '../entity/user';\n-import {Observable, OperatorFunction, throwError} from 'rxjs';\n+import {Observable, OperatorFunction, throwError, of} from 'rxjs';\n import {catchError} from 'rxjs/operators';\n import {ToastrService} from 'ngx-toastr';\n+import {AuthService} from '../service/auth.service';\n+import accessToken from 'src/app/auth/access-token.json';\n+import {AccessToken} from '../entity/AccessToken';\n+import account from 'src/app/auth/account.json';\n import {ErrorCodesEnum, getMessage} from '../shared/error.codes.enum';\n import {ApiResponse} from '../entity/api.response.model';\n+import {environment} from 'src/environments/environment';\n \n @Injectable()\n export class AuthInterceptor implements HttpInterceptor {\n   constructor(\n     private readonly spinner: NgxSpinnerService,\n     private readonly toasterService: ToastrService,\n+    private readonly authService: AuthService,\n   ) {}\n \n-  getUserDetails(): User | null {\n-    const currentUser = localStorage.getItem('currentUser');\n-    if (currentUser === null) {\n-      return null;\n-    }\n-    return JSON.parse(currentUser) as User;\n-  }\n   intercept(\n     req: HttpRequest<unknown>,\n     next: HttpHandler,\n   ): Observable<HttpEvent<unknown>> {\n+    if (req.url === `${environment.authServerUrl}/oauth2/token`) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2Nzc1OQ=="}, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODkzNjg5OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/http-interceptors/auth.interceptor.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTowMjo1NlrOG3zeKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNToxNjo0MFrOG5numA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2ODE3MQ==", "bodyText": "Why do you need !this.authService.checkCredentials()? Isn't user === null sufficient?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461168171", "createdAt": "2020-07-27T21:02:56Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/http-interceptors/auth.interceptor.ts", "diffHunk": "@@ -6,36 +6,53 @@ import {\n   HttpRequest,\n   HttpEvent,\n   HttpErrorResponse,\n+  HttpResponse,\n } from '@angular/common/http';\n import {finalize} from 'rxjs/operators';\n import {User} from '../entity/user';\n-import {Observable, OperatorFunction, throwError} from 'rxjs';\n+import {Observable, OperatorFunction, throwError, of} from 'rxjs';\n import {catchError} from 'rxjs/operators';\n import {ToastrService} from 'ngx-toastr';\n+import {AuthService} from '../service/auth.service';\n+import accessToken from 'src/app/auth/access-token.json';\n+import {AccessToken} from '../entity/AccessToken';\n+import account from 'src/app/auth/account.json';\n import {ErrorCodesEnum, getMessage} from '../shared/error.codes.enum';\n import {ApiResponse} from '../entity/api.response.model';\n+import {environment} from 'src/environments/environment';\n \n @Injectable()\n export class AuthInterceptor implements HttpInterceptor {\n   constructor(\n     private readonly spinner: NgxSpinnerService,\n     private readonly toasterService: ToastrService,\n+    private readonly authService: AuthService,\n   ) {}\n \n-  getUserDetails(): User | null {\n-    const currentUser = localStorage.getItem('currentUser');\n-    if (currentUser === null) {\n-      return null;\n-    }\n-    return JSON.parse(currentUser) as User;\n-  }\n   intercept(\n     req: HttpRequest<unknown>,\n     next: HttpHandler,\n   ): Observable<HttpEvent<unknown>> {\n+    if (req.url === `${environment.authServerUrl}/oauth2/token`) {\n+      return of(\n+        new HttpResponse({\n+          status: 200,\n+          body: accessToken as AccessToken,\n+        }),\n+      );\n+    }\n+    if (req.url === `${environment.baseUrl}/users`) {\n+      return of(\n+        new HttpResponse({\n+          status: 200,\n+          body: account as User,\n+        }),\n+      );\n+    }\n     void this.spinner.show();\n-    const user = this.getUserDetails();\n-    if (user === null) {\n+    const user = this.authService.getLoggedInUserDetails();\n+\n+    if (user === null || !this.authService.checkCredentials()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA3MjkyMA==", "bodyText": "Updated this auth service method", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r463072920", "createdAt": "2020-07-30T15:16:40Z", "author": {"login": "firdosebtc1"}, "path": "UR-web-app/src/app/http-interceptors/auth.interceptor.ts", "diffHunk": "@@ -6,36 +6,53 @@ import {\n   HttpRequest,\n   HttpEvent,\n   HttpErrorResponse,\n+  HttpResponse,\n } from '@angular/common/http';\n import {finalize} from 'rxjs/operators';\n import {User} from '../entity/user';\n-import {Observable, OperatorFunction, throwError} from 'rxjs';\n+import {Observable, OperatorFunction, throwError, of} from 'rxjs';\n import {catchError} from 'rxjs/operators';\n import {ToastrService} from 'ngx-toastr';\n+import {AuthService} from '../service/auth.service';\n+import accessToken from 'src/app/auth/access-token.json';\n+import {AccessToken} from '../entity/AccessToken';\n+import account from 'src/app/auth/account.json';\n import {ErrorCodesEnum, getMessage} from '../shared/error.codes.enum';\n import {ApiResponse} from '../entity/api.response.model';\n+import {environment} from 'src/environments/environment';\n \n @Injectable()\n export class AuthInterceptor implements HttpInterceptor {\n   constructor(\n     private readonly spinner: NgxSpinnerService,\n     private readonly toasterService: ToastrService,\n+    private readonly authService: AuthService,\n   ) {}\n \n-  getUserDetails(): User | null {\n-    const currentUser = localStorage.getItem('currentUser');\n-    if (currentUser === null) {\n-      return null;\n-    }\n-    return JSON.parse(currentUser) as User;\n-  }\n   intercept(\n     req: HttpRequest<unknown>,\n     next: HttpHandler,\n   ): Observable<HttpEvent<unknown>> {\n+    if (req.url === `${environment.authServerUrl}/oauth2/token`) {\n+      return of(\n+        new HttpResponse({\n+          status: 200,\n+          body: accessToken as AccessToken,\n+        }),\n+      );\n+    }\n+    if (req.url === `${environment.baseUrl}/users`) {\n+      return of(\n+        new HttpResponse({\n+          status: 200,\n+          body: account as User,\n+        }),\n+      );\n+    }\n     void this.spinner.show();\n-    const user = this.getUserDetails();\n-    if (user === null) {\n+    const user = this.authService.getLoggedInUserDetails();\n+\n+    if (user === null || !this.authService.checkCredentials()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2ODE3MQ=="}, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODk0MDQ1OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/entity/AccessToken.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTowNDowMlrOG3zgYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTowNDowMlrOG3zgYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2ODczOA==", "bodyText": "Please be more consistent in how you name files. The angular style is to use lowercase and dashes, like access-token.ts", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461168738", "createdAt": "2020-07-27T21:04:02Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/entity/AccessToken.ts", "diffHunk": "@@ -0,0 +1,8 @@\n+export interface AccessToken {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODk0NTA5OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/service/auth.service.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTowNToxN1rOG3zjGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTowNToxN1rOG3zjGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2OTQzNQ==", "bodyText": "You don't need to unsubscribe from an HTTP request", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461169435", "createdAt": "2020-07-27T21:05:17Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/auth.service.ts", "diffHunk": "@@ -0,0 +1,74 @@\n+import {Injectable} from '@angular/core';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {User} from '../entity/user';\n+import {EntityService} from './entity.service';\n+import {Router} from '@angular/router';\n+import {AccessToken} from '../entity/AccessToken';\n+import {environment} from 'src/environments/environment';\n+import {ProfileService} from './profile.service';\n+import {UnsubscribeOnDestroyAdapter} from '../unsubscribe-on-destroy-adapter';\n+\n+@Injectable({providedIn: 'root'})\n+export class AuthService extends UnsubscribeOnDestroyAdapter {\n+  constructor(\n+    private readonly http: HttpClient,\n+    public cookieService: CookieService,\n+    public entityService: EntityService<AccessToken>,\n+    public router: Router,\n+    private readonly profilService: ProfileService,\n+  ) {\n+    super();\n+  }\n+  checkCredentials(): boolean {\n+    return (\n+      this.cookieService.check('accessToken') &&\n+      this.cookieService.check('user')\n+    );\n+  }\n+  getLoggedInUserDetails(): User | null {\n+    if (this.cookieService.check('user')) {\n+      return JSON.parse(this.cookieService.get('user')) as User;\n+    }\n+    return null;\n+  }\n+  getLoggedInUserAccessToken(): string {\n+    return this.cookieService.get('accessToken');\n+  }\n+\n+  redirectToLoginPage(): void {\n+    void this.router.navigate(['/callback'], {\n+      queryParams: {\n+        code: 'l4hQQM-guBDwbpo76dHJs-8.ufR0YLll0menniGz5A-YN95DfCFOKg',\n+        userId:\n+          'b45bc4f67fd77ebb6db9a94f8abd9a0470b07f4098f7934234f12a5bee975231',\n+      },\n+    });\n+  }\n+  getToken(code: string, userId: string): void {\n+    const payload = {\n+      grant_type: 'authorization_code',\n+      scope: 'openid',\n+      redirect_uri: environment.redirectUrl,\n+      code: code,\n+      userId: userId,\n+    };\n+    this.subs.add(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODk0ODM0OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/service/auth.service.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTowNjoxOFrOG3zlOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTowNjoxOFrOG3zlOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2OTk3Nw==", "bodyText": "This method POSTs to a server, isn't not a get. Please rename.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461169977", "createdAt": "2020-07-27T21:06:18Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/auth.service.ts", "diffHunk": "@@ -0,0 +1,74 @@\n+import {Injectable} from '@angular/core';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {User} from '../entity/user';\n+import {EntityService} from './entity.service';\n+import {Router} from '@angular/router';\n+import {AccessToken} from '../entity/AccessToken';\n+import {environment} from 'src/environments/environment';\n+import {ProfileService} from './profile.service';\n+import {UnsubscribeOnDestroyAdapter} from '../unsubscribe-on-destroy-adapter';\n+\n+@Injectable({providedIn: 'root'})\n+export class AuthService extends UnsubscribeOnDestroyAdapter {\n+  constructor(\n+    private readonly http: HttpClient,\n+    public cookieService: CookieService,\n+    public entityService: EntityService<AccessToken>,\n+    public router: Router,\n+    private readonly profilService: ProfileService,\n+  ) {\n+    super();\n+  }\n+  checkCredentials(): boolean {\n+    return (\n+      this.cookieService.check('accessToken') &&\n+      this.cookieService.check('user')\n+    );\n+  }\n+  getLoggedInUserDetails(): User | null {\n+    if (this.cookieService.check('user')) {\n+      return JSON.parse(this.cookieService.get('user')) as User;\n+    }\n+    return null;\n+  }\n+  getLoggedInUserAccessToken(): string {\n+    return this.cookieService.get('accessToken');\n+  }\n+\n+  redirectToLoginPage(): void {\n+    void this.router.navigate(['/callback'], {\n+      queryParams: {\n+        code: 'l4hQQM-guBDwbpo76dHJs-8.ufR0YLll0menniGz5A-YN95DfCFOKg',\n+        userId:\n+          'b45bc4f67fd77ebb6db9a94f8abd9a0470b07f4098f7934234f12a5bee975231',\n+      },\n+    });\n+  }\n+  getToken(code: string, userId: string): void {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODk0OTg1OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/service/auth.service.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTowNjozN1rOG3zmBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTowNjozN1rOG3zmBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MDE4Mg==", "bodyText": "How do you know the user is logged in? This could be a stale access token", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461170182", "createdAt": "2020-07-27T21:06:37Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/auth.service.ts", "diffHunk": "@@ -0,0 +1,74 @@\n+import {Injectable} from '@angular/core';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {User} from '../entity/user';\n+import {EntityService} from './entity.service';\n+import {Router} from '@angular/router';\n+import {AccessToken} from '../entity/AccessToken';\n+import {environment} from 'src/environments/environment';\n+import {ProfileService} from './profile.service';\n+import {UnsubscribeOnDestroyAdapter} from '../unsubscribe-on-destroy-adapter';\n+\n+@Injectable({providedIn: 'root'})\n+export class AuthService extends UnsubscribeOnDestroyAdapter {\n+  constructor(\n+    private readonly http: HttpClient,\n+    public cookieService: CookieService,\n+    public entityService: EntityService<AccessToken>,\n+    public router: Router,\n+    private readonly profilService: ProfileService,\n+  ) {\n+    super();\n+  }\n+  checkCredentials(): boolean {\n+    return (\n+      this.cookieService.check('accessToken') &&\n+      this.cookieService.check('user')\n+    );\n+  }\n+  getLoggedInUserDetails(): User | null {\n+    if (this.cookieService.check('user')) {\n+      return JSON.parse(this.cookieService.get('user')) as User;\n+    }\n+    return null;\n+  }\n+  getLoggedInUserAccessToken(): string {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODk1MDQyOnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/service/auth.service.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTowNjo1MFrOG3zmYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTowNjo1MFrOG3zmYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MDI3NQ==", "bodyText": "Same as getLoggedInUserAccessToken", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461170275", "createdAt": "2020-07-27T21:06:50Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/auth.service.ts", "diffHunk": "@@ -0,0 +1,74 @@\n+import {Injectable} from '@angular/core';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {User} from '../entity/user';\n+import {EntityService} from './entity.service';\n+import {Router} from '@angular/router';\n+import {AccessToken} from '../entity/AccessToken';\n+import {environment} from 'src/environments/environment';\n+import {ProfileService} from './profile.service';\n+import {UnsubscribeOnDestroyAdapter} from '../unsubscribe-on-destroy-adapter';\n+\n+@Injectable({providedIn: 'root'})\n+export class AuthService extends UnsubscribeOnDestroyAdapter {\n+  constructor(\n+    private readonly http: HttpClient,\n+    public cookieService: CookieService,\n+    public entityService: EntityService<AccessToken>,\n+    public router: Router,\n+    private readonly profilService: ProfileService,\n+  ) {\n+    super();\n+  }\n+  checkCredentials(): boolean {\n+    return (\n+      this.cookieService.check('accessToken') &&\n+      this.cookieService.check('user')\n+    );\n+  }\n+  getLoggedInUserDetails(): User | null {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODk1MjI3OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/service/auth.service.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTowNzoyN1rOG3zniA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTowNzoyN1rOG3zniA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MDU2OA==", "bodyText": "Same as getToken, this is not just getting a profile.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461170568", "createdAt": "2020-07-27T21:07:27Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/auth.service.ts", "diffHunk": "@@ -0,0 +1,74 @@\n+import {Injectable} from '@angular/core';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {User} from '../entity/user';\n+import {EntityService} from './entity.service';\n+import {Router} from '@angular/router';\n+import {AccessToken} from '../entity/AccessToken';\n+import {environment} from 'src/environments/environment';\n+import {ProfileService} from './profile.service';\n+import {UnsubscribeOnDestroyAdapter} from '../unsubscribe-on-destroy-adapter';\n+\n+@Injectable({providedIn: 'root'})\n+export class AuthService extends UnsubscribeOnDestroyAdapter {\n+  constructor(\n+    private readonly http: HttpClient,\n+    public cookieService: CookieService,\n+    public entityService: EntityService<AccessToken>,\n+    public router: Router,\n+    private readonly profilService: ProfileService,\n+  ) {\n+    super();\n+  }\n+  checkCredentials(): boolean {\n+    return (\n+      this.cookieService.check('accessToken') &&\n+      this.cookieService.check('user')\n+    );\n+  }\n+  getLoggedInUserDetails(): User | null {\n+    if (this.cookieService.check('user')) {\n+      return JSON.parse(this.cookieService.get('user')) as User;\n+    }\n+    return null;\n+  }\n+  getLoggedInUserAccessToken(): string {\n+    return this.cookieService.get('accessToken');\n+  }\n+\n+  redirectToLoginPage(): void {\n+    void this.router.navigate(['/callback'], {\n+      queryParams: {\n+        code: 'l4hQQM-guBDwbpo76dHJs-8.ufR0YLll0menniGz5A-YN95DfCFOKg',\n+        userId:\n+          'b45bc4f67fd77ebb6db9a94f8abd9a0470b07f4098f7934234f12a5bee975231',\n+      },\n+    });\n+  }\n+  getToken(code: string, userId: string): void {\n+    const payload = {\n+      grant_type: 'authorization_code',\n+      scope: 'openid',\n+      redirect_uri: environment.redirectUrl,\n+      code: code,\n+      userId: userId,\n+    };\n+    this.subs.add(\n+      this.entityService\n+        .authServerPost(JSON.stringify(payload), 'oauth2/token')\n+        .subscribe((response) => {\n+          this.cookieService.set('accessToken', response.accessToken);\n+          this.cookieService.set('refreshToken', response.refreshToken);\n+          this.getProfile();\n+        }),\n+    );\n+  }\n+  getProfile(): void {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODk1MzI4OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/service/auth.service.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTowNzo0M1rOG3zoFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTowNzo0M1rOG3zoFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MDcwOA==", "bodyText": "profileService", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461170708", "createdAt": "2020-07-27T21:07:43Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/auth.service.ts", "diffHunk": "@@ -0,0 +1,74 @@\n+import {Injectable} from '@angular/core';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {User} from '../entity/user';\n+import {EntityService} from './entity.service';\n+import {Router} from '@angular/router';\n+import {AccessToken} from '../entity/AccessToken';\n+import {environment} from 'src/environments/environment';\n+import {ProfileService} from './profile.service';\n+import {UnsubscribeOnDestroyAdapter} from '../unsubscribe-on-destroy-adapter';\n+\n+@Injectable({providedIn: 'root'})\n+export class AuthService extends UnsubscribeOnDestroyAdapter {\n+  constructor(\n+    private readonly http: HttpClient,\n+    public cookieService: CookieService,\n+    public entityService: EntityService<AccessToken>,\n+    public router: Router,\n+    private readonly profilService: ProfileService,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODk1NDkzOnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/service/profile.service.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTowODoxMVrOG3zpGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTowODoxMVrOG3zpGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MDk2OQ==", "bodyText": "UserService?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461170969", "createdAt": "2020-07-27T21:08:11Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/profile.service.ts", "diffHunk": "@@ -0,0 +1,20 @@\n+import {Injectable} from '@angular/core';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {User} from '../entity/user';\n+import {EntityService} from './entity.service';\n+import {Observable} from 'rxjs';\n+import {Router} from '@angular/router';\n+\n+@Injectable({providedIn: 'root'})\n+export class ProfileService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODk1NTgzOnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/service/profile.service.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTowODozNFrOG3zpuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTowODozNFrOG3zpuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MTEyOA==", "bodyText": "Just use this.http directly", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461171128", "createdAt": "2020-07-27T21:08:34Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/profile.service.ts", "diffHunk": "@@ -0,0 +1,20 @@\n+import {Injectable} from '@angular/core';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {User} from '../entity/user';\n+import {EntityService} from './entity.service';\n+import {Observable} from 'rxjs';\n+import {Router} from '@angular/router';\n+\n+@Injectable({providedIn: 'root'})\n+export class ProfileService {\n+  constructor(\n+    private readonly http: HttpClient,\n+    public cookieService: CookieService,\n+    public entityService: EntityService<User>,\n+    public router: Router,\n+  ) {}\n+  getProfile(): Observable<User> {\n+    return this.entityService.get('/users');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODk1NjUxOnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/service/profile.service.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTowODo0OFrOG3zqIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTowODo0OFrOG3zqIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MTIzMw==", "bodyText": "cookieService and router are not used", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461171233", "createdAt": "2020-07-27T21:08:48Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/profile.service.ts", "diffHunk": "@@ -0,0 +1,20 @@\n+import {Injectable} from '@angular/core';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {User} from '../entity/user';\n+import {EntityService} from './entity.service';\n+import {Observable} from 'rxjs';\n+import {Router} from '@angular/router';\n+\n+@Injectable({providedIn: 'root'})\n+export class ProfileService {\n+  constructor(\n+    private readonly http: HttpClient,\n+    public cookieService: CookieService,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODk1ODAzOnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/service/login.guard.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTowOToxOFrOG3zrDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTowOToxOFrOG3zrDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MTQ3MQ==", "bodyText": "You shouldn't be checking routes here, only include this guard on relevant routes", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461171471", "createdAt": "2020-07-27T21:09:18Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/login.guard.ts", "diffHunk": "@@ -0,0 +1,20 @@\n+import {Injectable} from '@angular/core';\n+import {CanActivate, UrlTree, Router} from '@angular/router';\n+import {AuthService} from './auth.service';\n+\n+@Injectable({\n+  providedIn: 'root',\n+})\n+export class LoginGuard implements CanActivate {\n+  constructor(\n+    private readonly authService: AuthService,\n+    private readonly router: Router,\n+  ) {}\n+\n+  canActivate(): boolean | UrlTree {\n+    return (\n+      !this.authService.checkCredentials() ||\n+      this.router.parseUrl('/coordinator')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODk1OTg2OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/service/entity.service.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTowOTo0OVrOG3zsFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTowOTo0OVrOG3zsFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MTczMg==", "bodyText": "This isn't generally useful, this code should be moved to the auth service", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461171732", "createdAt": "2020-07-27T21:09:49Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/entity.service.ts", "diffHunk": "@@ -30,4 +31,8 @@ export class EntityService<T> {\n     const serviceUrl = Location.joinWithSlash(this.baseUrl, urlpath);\n     return this.http.put<T>(serviceUrl, bodydata);\n   }\n+  authServerPost(bodydata: string, urlpath: string): Observable<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODk2MTQ4OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/service/auth.guard.ts", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMToxMDoxOVrOG3ztGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNDowMDowOVrOG6JpGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MTk5Mw==", "bodyText": "Same as LoginGuard, you shouldn't be checking routes here, only include this guard on relevant routes", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461171993", "createdAt": "2020-07-27T21:10:19Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/auth.guard.ts", "diffHunk": "@@ -0,0 +1,19 @@\n+import {Injectable} from '@angular/core';\n+import {CanActivate, UrlTree, Router} from '@angular/router';\n+import {AuthService} from './auth.service';\n+\n+@Injectable({\n+  providedIn: 'root',\n+})\n+export class AuthGuard implements CanActivate {\n+  constructor(\n+    private readonly authService: AuthService,\n+    private readonly router: Router,\n+  ) {}\n+\n+  canActivate(): boolean | UrlTree {\n+    return (\n+      this.authService.checkCredentials() || this.router.parseUrl('/login')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA3NDExMA==", "bodyText": "Here I'm navigating user to login page whenever user is not logged ,as I need to perform some operation when user hits /coordinator url without login", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r463074110", "createdAt": "2020-07-30T15:18:03Z", "author": {"login": "firdosebtc1"}, "path": "UR-web-app/src/app/service/auth.guard.ts", "diffHunk": "@@ -0,0 +1,19 @@\n+import {Injectable} from '@angular/core';\n+import {CanActivate, UrlTree, Router} from '@angular/router';\n+import {AuthService} from './auth.service';\n+\n+@Injectable({\n+  providedIn: 'root',\n+})\n+export class AuthGuard implements CanActivate {\n+  constructor(\n+    private readonly authService: AuthService,\n+    private readonly router: Router,\n+  ) {}\n+\n+  canActivate(): boolean | UrlTree {\n+    return (\n+      this.authService.checkCredentials() || this.router.parseUrl('/login')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MTk5Mw=="}, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIzNjA5MA==", "bodyText": "Sorry, this feature was added since I last wrote Angular. This looks like a boolean expression that says \"the user can activate this route if they have credentials or if the route is /login\".\nCan you rewrite it like this to emphasize that it's a redirect and not a boolean result?\nif (!this.authService.checkCredentials()) {\n    return this.router.parseUrl('/login');\n}\nreturn true;", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r463236090", "createdAt": "2020-07-30T19:56:02Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/auth.guard.ts", "diffHunk": "@@ -0,0 +1,19 @@\n+import {Injectable} from '@angular/core';\n+import {CanActivate, UrlTree, Router} from '@angular/router';\n+import {AuthService} from './auth.service';\n+\n+@Injectable({\n+  providedIn: 'root',\n+})\n+export class AuthGuard implements CanActivate {\n+  constructor(\n+    private readonly authService: AuthService,\n+    private readonly router: Router,\n+  ) {}\n+\n+  canActivate(): boolean | UrlTree {\n+    return (\n+      this.authService.checkCredentials() || this.router.parseUrl('/login')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MTk5Mw=="}, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyODU3MA==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r463628570", "createdAt": "2020-07-31T14:00:09Z", "author": {"login": "firdosebtc1"}, "path": "UR-web-app/src/app/service/auth.guard.ts", "diffHunk": "@@ -0,0 +1,19 @@\n+import {Injectable} from '@angular/core';\n+import {CanActivate, UrlTree, Router} from '@angular/router';\n+import {AuthService} from './auth.service';\n+\n+@Injectable({\n+  providedIn: 'root',\n+})\n+export class AuthGuard implements CanActivate {\n+  constructor(\n+    private readonly authService: AuthService,\n+    private readonly router: Router,\n+  ) {}\n+\n+  canActivate(): boolean | UrlTree {\n+    return (\n+      this.authService.checkCredentials() || this.router.parseUrl('/login')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MTk5Mw=="}, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODk2MzY3OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/auth/callback/callback.component.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMToxMTowNFrOG3zuYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNTo1MDozNVrOG5pLdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MjMyMg==", "bodyText": "Something needs to happen if these aren't set, we don't want the user to just sit on a blank page", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461172322", "createdAt": "2020-07-27T21:11:04Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/auth/callback/callback.component.ts", "diffHunk": "@@ -0,0 +1,27 @@\n+import {Component, OnInit} from '@angular/core';\n+import {ActivatedRoute, Router} from '@angular/router';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {AuthService} from 'src/app/service/auth.service';\n+\n+@Component({\n+  selector: 'app-callback',\n+  templateUrl: './callback.component.html',\n+  styleUrls: ['./callback.component.scss'],\n+})\n+export class CallbackComponent implements OnInit {\n+  constructor(\n+    private readonly activatedRoute: ActivatedRoute,\n+    private readonly http: HttpClient,\n+    public cookieService: CookieService,\n+    public authService: AuthService,\n+    private readonly router: Router,\n+  ) {}\n+  ngOnInit(): void {\n+    this.activatedRoute.queryParams.subscribe((params) => {\n+      if (params.code && params.userId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA5NjY5Mw==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r463096693", "createdAt": "2020-07-30T15:50:35Z", "author": {"login": "firdosebtc1"}, "path": "UR-web-app/src/app/auth/callback/callback.component.ts", "diffHunk": "@@ -0,0 +1,27 @@\n+import {Component, OnInit} from '@angular/core';\n+import {ActivatedRoute, Router} from '@angular/router';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {AuthService} from 'src/app/service/auth.service';\n+\n+@Component({\n+  selector: 'app-callback',\n+  templateUrl: './callback.component.html',\n+  styleUrls: ['./callback.component.scss'],\n+})\n+export class CallbackComponent implements OnInit {\n+  constructor(\n+    private readonly activatedRoute: ActivatedRoute,\n+    private readonly http: HttpClient,\n+    public cookieService: CookieService,\n+    public authService: AuthService,\n+    private readonly router: Router,\n+  ) {}\n+  ngOnInit(): void {\n+    this.activatedRoute.queryParams.subscribe((params) => {\n+      if (params.code && params.userId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MjMyMg=="}, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODk2NDExOnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/auth/callback/callback.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMToxMToxNFrOG3zurQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMToxMToxNFrOG3zurQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MjM5Nw==", "bodyText": "You don't need a style file for this", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461172397", "createdAt": "2020-07-27T21:11:14Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/auth/callback/callback.component.ts", "diffHunk": "@@ -0,0 +1,27 @@\n+import {Component, OnInit} from '@angular/core';\n+import {ActivatedRoute, Router} from '@angular/router';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {AuthService} from 'src/app/service/auth.service';\n+\n+@Component({\n+  selector: 'app-callback',\n+  templateUrl: './callback.component.html',\n+  styleUrls: ['./callback.component.scss'],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODk2NTM5OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/auth/callback/callback.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMToxMTozNVrOG3zvaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNToxMjoyOFrOG5njGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MjU4Nw==", "bodyText": "You don't need a template for this", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461172587", "createdAt": "2020-07-27T21:11:35Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/auth/callback/callback.component.ts", "diffHunk": "@@ -0,0 +1,27 @@\n+import {Component, OnInit} from '@angular/core';\n+import {ActivatedRoute, Router} from '@angular/router';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {AuthService} from 'src/app/service/auth.service';\n+\n+@Component({\n+  selector: 'app-callback',\n+  templateUrl: './callback.component.html',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA2OTk3OQ==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r463069979", "createdAt": "2020-07-30T15:12:28Z", "author": {"login": "firdosebtc1"}, "path": "UR-web-app/src/app/auth/callback/callback.component.ts", "diffHunk": "@@ -0,0 +1,27 @@\n+import {Component, OnInit} from '@angular/core';\n+import {ActivatedRoute, Router} from '@angular/router';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {AuthService} from 'src/app/service/auth.service';\n+\n+@Component({\n+  selector: 'app-callback',\n+  templateUrl: './callback.component.html',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MjU4Nw=="}, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODk2NjI0OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/auth/callback/callback.component.ts", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMToxMTo1NFrOG3zv8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNDozNDo0N1rOG6K0gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MjcyMg==", "bodyText": "remove unused services", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461172722", "createdAt": "2020-07-27T21:11:54Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/auth/callback/callback.component.ts", "diffHunk": "@@ -0,0 +1,27 @@\n+import {Component, OnInit} from '@angular/core';\n+import {ActivatedRoute, Router} from '@angular/router';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {AuthService} from 'src/app/service/auth.service';\n+\n+@Component({\n+  selector: 'app-callback',\n+  templateUrl: './callback.component.html',\n+  styleUrls: ['./callback.component.scss'],\n+})\n+export class CallbackComponent implements OnInit {\n+  constructor(\n+    private readonly activatedRoute: ActivatedRoute,\n+    private readonly http: HttpClient,\n+    public cookieService: CookieService,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA2OTg1OQ==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r463069859", "createdAt": "2020-07-30T15:12:18Z", "author": {"login": "firdosebtc1"}, "path": "UR-web-app/src/app/auth/callback/callback.component.ts", "diffHunk": "@@ -0,0 +1,27 @@\n+import {Component, OnInit} from '@angular/core';\n+import {ActivatedRoute, Router} from '@angular/router';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {AuthService} from 'src/app/service/auth.service';\n+\n+@Component({\n+  selector: 'app-callback',\n+  templateUrl: './callback.component.html',\n+  styleUrls: ['./callback.component.scss'],\n+})\n+export class CallbackComponent implements OnInit {\n+  constructor(\n+    private readonly activatedRoute: ActivatedRoute,\n+    private readonly http: HttpClient,\n+    public cookieService: CookieService,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MjcyMg=="}, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyNzIzOA==", "bodyText": "I don't see any changes", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r463627238", "createdAt": "2020-07-31T13:57:46Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/auth/callback/callback.component.ts", "diffHunk": "@@ -0,0 +1,27 @@\n+import {Component, OnInit} from '@angular/core';\n+import {ActivatedRoute, Router} from '@angular/router';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {AuthService} from 'src/app/service/auth.service';\n+\n+@Component({\n+  selector: 'app-callback',\n+  templateUrl: './callback.component.html',\n+  styleUrls: ['./callback.component.scss'],\n+})\n+export class CallbackComponent implements OnInit {\n+  constructor(\n+    private readonly activatedRoute: ActivatedRoute,\n+    private readonly http: HttpClient,\n+    public cookieService: CookieService,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MjcyMg=="}, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY0Nzg3Mg==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r463647872", "createdAt": "2020-07-31T14:34:47Z", "author": {"login": "firdosebtc1"}, "path": "UR-web-app/src/app/auth/callback/callback.component.ts", "diffHunk": "@@ -0,0 +1,27 @@\n+import {Component, OnInit} from '@angular/core';\n+import {ActivatedRoute, Router} from '@angular/router';\n+import {HttpClient} from '@angular/common/http';\n+import {CookieService} from 'ngx-cookie-service';\n+import {AuthService} from 'src/app/service/auth.service';\n+\n+@Component({\n+  selector: 'app-callback',\n+  templateUrl: './callback.component.html',\n+  styleUrls: ['./callback.component.scss'],\n+})\n+export class CallbackComponent implements OnInit {\n+  constructor(\n+    private readonly activatedRoute: ActivatedRoute,\n+    private readonly http: HttpClient,\n+    public cookieService: CookieService,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MjcyMg=="}, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODk3MTEyOnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/auth/callback/callback.component.spec.ts", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMToxMzoyOVrOG3zzCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNDowMzozMFrOG6JwRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MzUxNQ==", "bodyText": "Needs a test for parsing the query parameters", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461173515", "createdAt": "2020-07-27T21:13:29Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/auth/callback/callback.component.spec.ts", "diffHunk": "@@ -0,0 +1,29 @@\n+import {async, ComponentFixture, TestBed} from '@angular/core/testing';\n+import {CallbackComponent} from './callback.component';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {AuthService} from 'src/app/service/auth.service';\n+import {HttpClientModule} from '@angular/common/http';\n+import {EntityService} from 'src/app/service/entity.service';\n+\n+describe('CallbackComponent', () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyNzM5Mg==", "bodyText": "Still waiting for this", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r463627392", "createdAt": "2020-07-31T13:58:02Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/auth/callback/callback.component.spec.ts", "diffHunk": "@@ -0,0 +1,29 @@\n+import {async, ComponentFixture, TestBed} from '@angular/core/testing';\n+import {CallbackComponent} from './callback.component';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {AuthService} from 'src/app/service/auth.service';\n+import {HttpClientModule} from '@angular/common/http';\n+import {EntityService} from 'src/app/service/entity.service';\n+\n+describe('CallbackComponent', () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MzUxNQ=="}, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYzMDQwNg==", "bodyText": "As per internal discussion ,we will be writing test case for this when we are integrating hydra oauth server", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r463630406", "createdAt": "2020-07-31T14:03:30Z", "author": {"login": "firdosebtc1"}, "path": "UR-web-app/src/app/auth/callback/callback.component.spec.ts", "diffHunk": "@@ -0,0 +1,29 @@\n+import {async, ComponentFixture, TestBed} from '@angular/core/testing';\n+import {CallbackComponent} from './callback.component';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {AuthService} from 'src/app/service/auth.service';\n+import {HttpClientModule} from '@angular/common/http';\n+import {EntityService} from 'src/app/service/entity.service';\n+\n+describe('CallbackComponent', () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MzUxNQ=="}, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODk3ODM0OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/environments/environment.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMToxNTo1MlrOG3z3uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMToxNTo1MlrOG3z3uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3NDcxMg==", "bodyText": "Can you add a dev environment to angular.json so that I can use my own URLs?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461174712", "createdAt": "2020-07-27T21:15:52Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/environments/environment.ts", "diffHunk": "@@ -4,7 +4,9 @@\n \n export const environment = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODk3OTY3OnYy", "diffSide": "RIGHT", "path": "UR-web-app/tsconfig.json", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMToxNjoxOFrOG3z4jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNToxMTo1NlrOG5nhqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3NDkyNA==", "bodyText": "Please remove when hardcoded data is removed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r461174924", "createdAt": "2020-07-27T21:16:18Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/tsconfig.json", "diffHunk": "@@ -14,6 +14,8 @@\n     \"importHelpers\": true,\n     \"target\": \"es6\",\n     \"typeRoots\": [\"node_modules/@types\"],\n-    \"lib\": [\"es2018\", \"dom\"]\n+    \"lib\": [\"es2018\", \"dom\"],\n+    \"resolveJsonModule\": true,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA2OTYxMQ==", "bodyText": "Sure", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r463069611", "createdAt": "2020-07-30T15:11:56Z", "author": {"login": "firdosebtc1"}, "path": "UR-web-app/tsconfig.json", "diffHunk": "@@ -14,6 +14,8 @@\n     \"importHelpers\": true,\n     \"target\": \"es6\",\n     \"typeRoots\": [\"node_modules/@types\"],\n-    \"lib\": [\"es2018\", \"dom\"]\n+    \"lib\": [\"es2018\", \"dom\"],\n+    \"resolveJsonModule\": true,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3NDkyNA=="}, "originalCommit": {"oid": "ac80ea914fda97db82778d864f6e4df2302c13cc"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MTAyNzEyOnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/service/auth.guard.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNDo0MDo0N1rOG5mI5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNDo0MDo0N1rOG5mI5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA0Njg4NQ==", "bodyText": "You don't have this on the /login route.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r463046885", "createdAt": "2020-07-30T14:40:47Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/auth.guard.ts", "diffHunk": "@@ -12,8 +12,6 @@ export class AuthGuard implements CanActivate {\n   ) {}\n \n   canActivate(): boolean | UrlTree {\n-    return (\n-      this.authService.checkCredentials() || this.router.parseUrl('/login')\n-    );\n+    return this.authService.hasCredentials() || this.router.parseUrl('/login');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a33b1f4ece76e61690c9c61c44565f89803c6eef"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MTA0NTcwOnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/auth/login/login.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNDo0NDozNVrOG5mT_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNTo1MToxMlrOG5pNFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA0OTcyNA==", "bodyText": "typo", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r463049724", "createdAt": "2020-07-30T14:44:35Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/auth/login/login.component.ts", "diffHunk": "@@ -14,6 +14,10 @@ export class LoginComponent {\n   ) {}\n \n   ngOnInit(): void {\n-    this.authService.redirectToLoginPage();\n+    if (!this.authService.hasCredentials()) {\n+      this.authService.redirectToLoginPage();\n+    } else {\n+     void this.router.navigate(['/coordiantor/']);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a33b1f4ece76e61690c9c61c44565f89803c6eef"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA5NzExMQ==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r463097111", "createdAt": "2020-07-30T15:51:12Z", "author": {"login": "firdosebtc1"}, "path": "UR-web-app/src/app/auth/login/login.component.ts", "diffHunk": "@@ -14,6 +14,10 @@ export class LoginComponent {\n   ) {}\n \n   ngOnInit(): void {\n-    this.authService.redirectToLoginPage();\n+    if (!this.authService.hasCredentials()) {\n+      this.authService.redirectToLoginPage();\n+    } else {\n+     void this.router.navigate(['/coordiantor/']);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA0OTcyNA=="}, "originalCommit": {"oid": "a33b1f4ece76e61690c9c61c44565f89803c6eef"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MTA2OTI5OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/service/auth.service.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNDo0OToyN1rOG5miVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNDo0OToyN1rOG5miVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA1MzM5Ng==", "bodyText": "I've mentioned this on several other reviews, you don't need to call JSON.stringify, this happens automatically", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r463053396", "createdAt": "2020-07-30T14:49:27Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/auth.service.ts", "diffHunk": "@@ -45,30 +40,29 @@ export class AuthService extends UnsubscribeOnDestroyAdapter {\n       },\n     });\n   }\n-  getToken(code: string, userId: string): void {\n+  grantAuthorization(code: string, userId: string): void {\n     const payload = {\n       grant_type: 'authorization_code',\n       scope: 'openid',\n       redirect_uri: environment.redirectUrl,\n       code: code,\n       userId: userId,\n     };\n-    this.subs.add(\n-      this.entityService\n-        .authServerPost(JSON.stringify(payload), 'oauth2/token')\n-        .subscribe((response) => {\n-          this.cookieService.set('accessToken', response.accessToken);\n-          this.cookieService.set('refreshToken', response.refreshToken);\n-          this.getProfile();\n-        }),\n-    );\n+    this.http\n+      .post<AccessToken>(\n+        `${environment.authServerUrl}/oauth2/token`,\n+        JSON.stringify(payload),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a33b1f4ece76e61690c9c61c44565f89803c6eef"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MjIyMTMxOnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/auth/login-callback/login-callback.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOTo1NzoyN1rOG5xuyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOTo1NzoyN1rOG5xuyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIzNjgwOQ==", "bodyText": "I think you want a navigateTo here", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/683#discussion_r463236809", "createdAt": "2020-07-30T19:57:27Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/auth/login-callback/login-callback.component.ts", "diffHunk": "@@ -20,6 +20,8 @@ export class LoginCallbackComponent implements OnInit {\n     this.activatedRoute.queryParams.subscribe((params) => {\n       if (params.code && params.userId) {\n         this.authService.grantAuthorization(params.code, params.userId);\n+      } else {\n+        void this.router.parseUrl('/login');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2445bafd34b9fdad8c2dceddb5bcd4a617c610a2"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2033, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}