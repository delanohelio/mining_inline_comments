{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUyNTU1Nzkx", "number": 651, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjoxOTo0MVrOER4qBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMzo0MToyNVrOEWODiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTg5NTA4OnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjoxOTo0MVrOG21o_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODoyNzoyNVrOG9RNcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE1NTEzNA==", "bodyText": "is this to be replaced with login URl?\nif yes, please add appropriate TODO", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r460155134", "createdAt": "2020-07-24T16:19:41Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "diffHunk": "@@ -239,7 +256,16 @@ private String redirectToLoginOrSigninPage(\n     // tempRegId for auto signin after signup\n     if (StringUtils.isNotEmpty(tempRegId)) {\n       Optional<UserEntity> optUser = userService.findUserByTempRegId(tempRegId);\n-      return optUser.isPresent() ? \"signin\" : LOGIN;\n+      if (optUser.isPresent()) {\n+        UserEntity user = optUser.get();\n+        logger.exit(\"tempRegId is valid, return to auto signin page\");\n+        addCookie(response, USER_ID, user.getUserId());\n+        return \"signin\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM1MDM4NQ==", "bodyText": "no, we've two views : login and signin. login view displays email & password fields whereas signin page displays please wait message.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r461350385", "createdAt": "2020-07-28T06:36:17Z", "author": {"login": "dhanyak-btc"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "diffHunk": "@@ -239,7 +256,16 @@ private String redirectToLoginOrSigninPage(\n     // tempRegId for auto signin after signup\n     if (StringUtils.isNotEmpty(tempRegId)) {\n       Optional<UserEntity> optUser = userService.findUserByTempRegId(tempRegId);\n-      return optUser.isPresent() ? \"signin\" : LOGIN;\n+      if (optUser.isPresent()) {\n+        UserEntity user = optUser.get();\n+        logger.exit(\"tempRegId is valid, return to auto signin page\");\n+        addCookie(response, USER_ID, user.getUserId());\n+        return \"signin\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE1NTEzNA=="}, "originalCommit": {"oid": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcxMTY1Mg==", "bodyText": "can we rename the wait page to make the difference more clear?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r465711652", "createdAt": "2020-08-05T13:05:34Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "diffHunk": "@@ -239,7 +256,16 @@ private String redirectToLoginOrSigninPage(\n     // tempRegId for auto signin after signup\n     if (StringUtils.isNotEmpty(tempRegId)) {\n       Optional<UserEntity> optUser = userService.findUserByTempRegId(tempRegId);\n-      return optUser.isPresent() ? \"signin\" : LOGIN;\n+      if (optUser.isPresent()) {\n+        UserEntity user = optUser.get();\n+        logger.exit(\"tempRegId is valid, return to auto signin page\");\n+        addCookie(response, USER_ID, user.getUserId());\n+        return \"signin\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE1NTEzNA=="}, "originalCommit": {"oid": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg5ODI4OA==", "bodyText": "renamed \"signin\"to \"autoLogin\" and signin.html to autoLogin.html", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r466898288", "createdAt": "2020-08-07T08:27:25Z", "author": {"login": "dhanyak-btc"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "diffHunk": "@@ -239,7 +256,16 @@ private String redirectToLoginOrSigninPage(\n     // tempRegId for auto signin after signup\n     if (StringUtils.isNotEmpty(tempRegId)) {\n       Optional<UserEntity> optUser = userService.findUserByTempRegId(tempRegId);\n-      return optUser.isPresent() ? \"signin\" : LOGIN;\n+      if (optUser.isPresent()) {\n+        UserEntity user = optUser.get();\n+        logger.exit(\"tempRegId is valid, return to auto signin page\");\n+        addCookie(response, USER_ID, user.getUserId());\n+        return \"signin\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE1NTEzNA=="}, "originalCommit": {"oid": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTkxMjk2OnYy", "diffSide": "LEFT", "path": "oauth-scim-module/oauth-scim-service/src/test/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/UserControllerTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjoyNDo1N1rOG21zmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODozNzoxMFrOG9RgRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE1Nzg1MQ==", "bodyText": "should be moved to the orgID PR, does not belong here", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r460157851", "createdAt": "2020-07-24T16:24:57Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/test/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/UserControllerTest.java", "diffHunk": "@@ -71,8 +71,6 @@\n \n   private static final String APP_ID_VALUE = \"MyStudies\";\n \n-  private static final String ORG_ID_VALUE = \"FDA\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM1MTUwMw==", "bodyText": "Yes, Org ID removed in PR 650 but forgot to remove this unused field. I noticed this in this PR hence removed.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r461351503", "createdAt": "2020-07-28T06:39:10Z", "author": {"login": "dhanyak-btc"}, "path": "oauth-scim-module/oauth-scim-service/src/test/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/UserControllerTest.java", "diffHunk": "@@ -71,8 +71,6 @@\n \n   private static final String APP_ID_VALUE = \"MyStudies\";\n \n-  private static final String ORG_ID_VALUE = \"FDA\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE1Nzg1MQ=="}, "originalCommit": {"oid": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcxMTc5Ng==", "bodyText": "so why is it in this PR?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r465711796", "createdAt": "2020-08-05T13:05:50Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/test/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/UserControllerTest.java", "diffHunk": "@@ -71,8 +71,6 @@\n \n   private static final String APP_ID_VALUE = \"MyStudies\";\n \n-  private static final String ORG_ID_VALUE = \"FDA\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE1Nzg1MQ=="}, "originalCommit": {"oid": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkwMzEwOQ==", "bodyText": "Removed ORG_ID_VALUE in PR #650", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r466903109", "createdAt": "2020-08-07T08:37:10Z", "author": {"login": "dhanyak-btc"}, "path": "oauth-scim-module/oauth-scim-service/src/test/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/UserControllerTest.java", "diffHunk": "@@ -71,8 +71,6 @@\n \n   private static final String APP_ID_VALUE = \"MyStudies\";\n \n-  private static final String ORG_ID_VALUE = \"FDA\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE1Nzg1MQ=="}, "originalCommit": {"oid": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTkyMDg5OnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/task/RemoveExpiredTempRegIdScheduledTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjoyNzoyMlrOG214dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNjo0Mjo1NlrOG3-wbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE1OTA5Mw==", "bodyText": "please move the numerical values to the top of the class and make into constant", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r460159093", "createdAt": "2020-07-24T16:27:22Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/task/RemoveExpiredTempRegIdScheduledTask.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.task;\n+\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.UserService;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.scheduling.annotation.Scheduled;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class RemoveExpiredTempRegIdScheduledTask {\n+\n+  private XLogger logger =\n+      XLoggerFactory.getXLogger(RemoveExpiredTempRegIdScheduledTask.class.getName());\n+\n+  @Autowired private UserService userService;\n+\n+  // 30min fixed delay and 10s initial delay\n+  @Scheduled(fixedDelay = 1800000, initialDelay = 10000)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM1MzA2OQ==", "bodyText": "Extracted to constants", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r461353069", "createdAt": "2020-07-28T06:42:56Z", "author": {"login": "dhanyak-btc"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/task/RemoveExpiredTempRegIdScheduledTask.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.task;\n+\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.UserService;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.scheduling.annotation.Scheduled;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class RemoveExpiredTempRegIdScheduledTask {\n+\n+  private XLogger logger =\n+      XLoggerFactory.getXLogger(RemoveExpiredTempRegIdScheduledTask.class.getName());\n+\n+  @Autowired private UserService userService;\n+\n+  // 30min fixed delay and 10s initial delay\n+  @Scheduled(fixedDelay = 1800000, initialDelay = 10000)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE1OTA5Mw=="}, "originalCommit": {"oid": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTk0MjY5OnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/repository/UserRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjozNDoxMlrOG22GGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNjo0NTozNVrOG3-1gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2MjU4NQ==", "bodyText": "please rename to removeTempRegIDForUser", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r460162585", "createdAt": "2020-07-24T16:34:12Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/repository/UserRepository.java", "diffHunk": "@@ -25,4 +29,14 @@\n   public Optional<UserEntity> findByUserId(String userId);\n \n   public Optional<UserEntity> findByTempRegId(String tempRegId);\n+\n+  @Transactional\n+  @Modifying\n+  @Query(\"update UserEntity u set u.tempRegId=null where u.userId=:userId\")\n+  public void resetTempRegId(@Param(\"userId\") String userId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM1NDM3MQ==", "bodyText": "renamed to removeTempRegIDForUser", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r461354371", "createdAt": "2020-07-28T06:45:35Z", "author": {"login": "dhanyak-btc"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/repository/UserRepository.java", "diffHunk": "@@ -25,4 +29,14 @@\n   public Optional<UserEntity> findByUserId(String userId);\n \n   public Optional<UserEntity> findByTempRegId(String tempRegId);\n+\n+  @Transactional\n+  @Modifying\n+  @Query(\"update UserEntity u set u.tempRegId=null where u.userId=:userId\")\n+  public void resetTempRegId(@Param(\"userId\") String userId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2MjU4NQ=="}, "originalCommit": {"oid": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTk0NDE3OnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/repository/UserRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjozNDozNFrOG22G-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNjo0NTo0OFrOG3-12g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2MjgxMA==", "bodyText": "please rename to removeTempRegIdBeforeTime or other descriptive name", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r460162810", "createdAt": "2020-07-24T16:34:34Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/repository/UserRepository.java", "diffHunk": "@@ -25,4 +29,14 @@\n   public Optional<UserEntity> findByUserId(String userId);\n \n   public Optional<UserEntity> findByTempRegId(String tempRegId);\n+\n+  @Transactional\n+  @Modifying\n+  @Query(\"update UserEntity u set u.tempRegId=null where u.userId=:userId\")\n+  public void resetTempRegId(@Param(\"userId\") String userId);\n+\n+  @Transactional\n+  @Modifying\n+  @Query(\"update UserEntity u set u.tempRegId=null where u.created < :timestamp\")\n+  public void updateTempRegId(@Param(\"timestamp\") Timestamp timestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM1NDQ1OA==", "bodyText": "renamed to removeTempRegIdBeforeTime", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r461354458", "createdAt": "2020-07-28T06:45:48Z", "author": {"login": "dhanyak-btc"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/repository/UserRepository.java", "diffHunk": "@@ -25,4 +29,14 @@\n   public Optional<UserEntity> findByUserId(String userId);\n \n   public Optional<UserEntity> findByTempRegId(String tempRegId);\n+\n+  @Transactional\n+  @Modifying\n+  @Query(\"update UserEntity u set u.tempRegId=null where u.userId=:userId\")\n+  public void resetTempRegId(@Param(\"userId\") String userId);\n+\n+  @Transactional\n+  @Modifying\n+  @Query(\"update UserEntity u set u.tempRegId=null where u.created < :timestamp\")\n+  public void updateTempRegId(@Param(\"timestamp\") Timestamp timestamp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2MjgxMA=="}, "originalCommit": {"oid": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTk2MTI3OnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjozOTo0MFrOG22Rww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNjo0ODo1NVrOG3-68w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2NTU3MQ==", "bodyText": "do you still need these when you are just deleting the cookie?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r460165571", "createdAt": "2020-07-24T16:39:40Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "diffHunk": "@@ -285,4 +311,13 @@ public void addCookie(HttpServletResponse response, String cookieName, String co\n     cookie.setPath(\"/\");\n     response.addCookie(cookie);\n   }\n+\n+  public void deleteCookie(HttpServletResponse response, String cookieName) {\n+    Cookie cookie = new Cookie(cookieName, null);\n+    cookie.setMaxAge(0);\n+    cookie.setSecure(appConfig.isSecureCookie());\n+    cookie.setHttpOnly(true);\n+    cookie.setPath(\"/\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM1NTc2Mw==", "bodyText": "Yes, I checked accepted answer in SO post Delete cookie from a servlet response", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r461355763", "createdAt": "2020-07-28T06:48:55Z", "author": {"login": "dhanyak-btc"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "diffHunk": "@@ -285,4 +311,13 @@ public void addCookie(HttpServletResponse response, String cookieName, String co\n     cookie.setPath(\"/\");\n     response.addCookie(cookie);\n   }\n+\n+  public void deleteCookie(HttpServletResponse response, String cookieName) {\n+    Cookie cookie = new Cookie(cookieName, null);\n+    cookie.setMaxAge(0);\n+    cookie.setSecure(appConfig.isSecureCookie());\n+    cookie.setHttpOnly(true);\n+    cookie.setPath(\"/\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2NTU3MQ=="}, "originalCommit": {"oid": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTk3NjQyOnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjo0Mzo1NFrOG22bIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzowNzozNVrOG8I2qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2Nzk3MA==", "bodyText": "do we need to add a common prefix to create a more identifiable cookieName?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r460167970", "createdAt": "2020-07-24T16:43:54Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "diffHunk": "@@ -285,4 +311,13 @@ public void addCookie(HttpServletResponse response, String cookieName, String co\n     cookie.setPath(\"/\");\n     response.addCookie(cookie);\n   }\n+\n+  public void deleteCookie(HttpServletResponse response, String cookieName) {\n+    Cookie cookie = new Cookie(cookieName, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM1ODU2MA==", "bodyText": "not sure that makes any difference, but prefix can be added. I'm thinking to add mystudies_ prefix. Please suggest a prefix for cookies.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r461358560", "createdAt": "2020-07-28T06:55:06Z", "author": {"login": "dhanyak-btc"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "diffHunk": "@@ -285,4 +311,13 @@ public void addCookie(HttpServletResponse response, String cookieName, String co\n     cookie.setPath(\"/\");\n     response.addCookie(cookie);\n   }\n+\n+  public void deleteCookie(HttpServletResponse response, String cookieName) {\n+    Cookie cookie = new Cookie(cookieName, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2Nzk3MA=="}, "originalCommit": {"oid": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcxMjgxMA==", "bodyText": "mystudies_ sounds like a good one for now.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r465712810", "createdAt": "2020-08-05T13:07:35Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "diffHunk": "@@ -285,4 +311,13 @@ public void addCookie(HttpServletResponse response, String cookieName, String co\n     cookie.setPath(\"/\");\n     response.addCookie(cookie);\n   }\n+\n+  public void deleteCookie(HttpServletResponse response, String cookieName) {\n+    Cookie cookie = new Cookie(cookieName, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2Nzk3MA=="}, "originalCommit": {"oid": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTk4ODU0OnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/ConsentController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjo0NzoyMlrOG22igQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNjo1OTowNVrOG3_MuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2OTg1Nw==", "bodyText": "This code is getting duplicated, please move to one place.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r460169857", "createdAt": "2020-07-24T16:47:22Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/ConsentController.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getTextValue;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CONSENT_CHALLENGE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_PLATFORM;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.REDIRECT_TO;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.SKIP;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.USER_ID;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.AppPropertyConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.RedirectConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.OAuthService;\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.bind.annotation.CookieValue;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.util.WebUtils;\n+\n+@Controller\n+public class ConsentController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserController.class.getName());\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private RedirectConfig redirectConfig;\n+\n+  @Autowired private AppPropertyConfig appConfig;\n+\n+  @GetMapping(value = \"/consent\")\n+  public String authorize(\n+      @RequestParam(required = false, name = CONSENT_CHALLENGE) String consentChallenge,\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      Model model) {\n+    logger.entry(String.format(\"%s request\", request.getRequestURI()));\n+\n+    if (StringUtils.isNotBlank(consentChallenge)) {\n+      addCookie(response, CONSENT_CHALLENGE, consentChallenge);\n+      // show or skip consent page\n+      MultiValueMap<String, String> paramMap = new LinkedMultiValueMap<>();\n+      paramMap.add(CONSENT_CHALLENGE, consentChallenge);\n+      ResponseEntity<JsonNode> consentResponse = oauthService.requestConsent(paramMap);\n+      if (consentResponse.getStatusCode().is2xxSuccessful()) {\n+        JsonNode responseBody = consentResponse.getBody();\n+        return skipConsent(responseBody)\n+            ? redirectToCallbackUrl(request, true, response)\n+            : \"consent\";\n+      }\n+    }\n+\n+    return redirectToError(request, response);\n+  }\n+\n+  private boolean skipConsent(JsonNode responseBody) {\n+    return responseBody.has(SKIP) && responseBody.get(SKIP).booleanValue();\n+  }\n+\n+  private String redirectToCallbackUrl(\n+      HttpServletRequest request, boolean skipConsent, HttpServletResponse response) {\n+    String userId = WebUtils.getCookie(request, USER_ID).getValue();\n+    String devicePlatform = WebUtils.getCookie(request, DEVICE_PLATFORM).getValue();\n+    String callbackUrl = redirectConfig.getCallbackUrl(devicePlatform);\n+\n+    String redirectUrl =\n+        String.format(\"%s?skip_consent=%b&userId=%s\", callbackUrl, skipConsent, userId);\n+\n+    logger.exit(String.format(\"redirect to %s from /consent\", callbackUrl));\n+    return redirect(response, redirectUrl);\n+  }\n+\n+  private String redirect(HttpServletResponse response, String redirectUrl) {\n+    response.setHeader(\"Location\", redirectUrl);\n+    response.setStatus(HttpStatus.FOUND.value());\n+    return \"redirect:\" + redirectUrl;\n+  }\n+\n+  @PostMapping(value = \"/consent\")\n+  public String authenticate(\n+      @CookieValue(name = CONSENT_CHALLENGE) String consentChallenge,\n+      @CookieValue(name = USER_ID) String userId,\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      Model model) {\n+    logger.entry(String.format(\"%s request\", request.getRequestURI()));\n+\n+    MultiValueMap<String, String> paramMap = new LinkedMultiValueMap<>();\n+    paramMap.add(CONSENT_CHALLENGE, consentChallenge);\n+    ResponseEntity<JsonNode> consentResponse = oauthService.consentAccept(paramMap);\n+\n+    if (consentResponse.getStatusCode().is2xxSuccessful()) {\n+      String redirectUrl = getTextValue(consentResponse.getBody(), REDIRECT_TO);\n+      return redirect(response, redirectUrl);\n+    }\n+\n+    return redirectToError(request, response);\n+  }\n+\n+  private String redirectToError(HttpServletRequest request, HttpServletResponse response) {\n+    String devicePlatform = WebUtils.getCookie(request, DEVICE_PLATFORM).getValue();\n+    String redirectUrl = redirectConfig.getErrorUrl(devicePlatform);\n+    response.setHeader(\"Location\", redirectUrl);\n+    response.setStatus(HttpStatus.FOUND.value());\n+    return \"redirect:\" + redirectUrl;\n+  }\n+\n+  public void addCookie(HttpServletResponse response, String cookieName, String cookieValue) {\n+    Cookie cookie = new Cookie(cookieName, cookieValue);\n+    cookie.setMaxAge(600);\n+    cookie.setSecure(appConfig.isSecureCookie());\n+    cookie.setHttpOnly(true);\n+    cookie.setPath(\"/\");\n+    response.addCookie(cookie);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM2MDMxMg==", "bodyText": "Extracted to CookieHelper class.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r461360312", "createdAt": "2020-07-28T06:59:05Z", "author": {"login": "dhanyak-btc"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/ConsentController.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getTextValue;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CONSENT_CHALLENGE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_PLATFORM;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.REDIRECT_TO;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.SKIP;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.USER_ID;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.AppPropertyConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.RedirectConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.OAuthService;\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.bind.annotation.CookieValue;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.util.WebUtils;\n+\n+@Controller\n+public class ConsentController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserController.class.getName());\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private RedirectConfig redirectConfig;\n+\n+  @Autowired private AppPropertyConfig appConfig;\n+\n+  @GetMapping(value = \"/consent\")\n+  public String authorize(\n+      @RequestParam(required = false, name = CONSENT_CHALLENGE) String consentChallenge,\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      Model model) {\n+    logger.entry(String.format(\"%s request\", request.getRequestURI()));\n+\n+    if (StringUtils.isNotBlank(consentChallenge)) {\n+      addCookie(response, CONSENT_CHALLENGE, consentChallenge);\n+      // show or skip consent page\n+      MultiValueMap<String, String> paramMap = new LinkedMultiValueMap<>();\n+      paramMap.add(CONSENT_CHALLENGE, consentChallenge);\n+      ResponseEntity<JsonNode> consentResponse = oauthService.requestConsent(paramMap);\n+      if (consentResponse.getStatusCode().is2xxSuccessful()) {\n+        JsonNode responseBody = consentResponse.getBody();\n+        return skipConsent(responseBody)\n+            ? redirectToCallbackUrl(request, true, response)\n+            : \"consent\";\n+      }\n+    }\n+\n+    return redirectToError(request, response);\n+  }\n+\n+  private boolean skipConsent(JsonNode responseBody) {\n+    return responseBody.has(SKIP) && responseBody.get(SKIP).booleanValue();\n+  }\n+\n+  private String redirectToCallbackUrl(\n+      HttpServletRequest request, boolean skipConsent, HttpServletResponse response) {\n+    String userId = WebUtils.getCookie(request, USER_ID).getValue();\n+    String devicePlatform = WebUtils.getCookie(request, DEVICE_PLATFORM).getValue();\n+    String callbackUrl = redirectConfig.getCallbackUrl(devicePlatform);\n+\n+    String redirectUrl =\n+        String.format(\"%s?skip_consent=%b&userId=%s\", callbackUrl, skipConsent, userId);\n+\n+    logger.exit(String.format(\"redirect to %s from /consent\", callbackUrl));\n+    return redirect(response, redirectUrl);\n+  }\n+\n+  private String redirect(HttpServletResponse response, String redirectUrl) {\n+    response.setHeader(\"Location\", redirectUrl);\n+    response.setStatus(HttpStatus.FOUND.value());\n+    return \"redirect:\" + redirectUrl;\n+  }\n+\n+  @PostMapping(value = \"/consent\")\n+  public String authenticate(\n+      @CookieValue(name = CONSENT_CHALLENGE) String consentChallenge,\n+      @CookieValue(name = USER_ID) String userId,\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      Model model) {\n+    logger.entry(String.format(\"%s request\", request.getRequestURI()));\n+\n+    MultiValueMap<String, String> paramMap = new LinkedMultiValueMap<>();\n+    paramMap.add(CONSENT_CHALLENGE, consentChallenge);\n+    ResponseEntity<JsonNode> consentResponse = oauthService.consentAccept(paramMap);\n+\n+    if (consentResponse.getStatusCode().is2xxSuccessful()) {\n+      String redirectUrl = getTextValue(consentResponse.getBody(), REDIRECT_TO);\n+      return redirect(response, redirectUrl);\n+    }\n+\n+    return redirectToError(request, response);\n+  }\n+\n+  private String redirectToError(HttpServletRequest request, HttpServletResponse response) {\n+    String devicePlatform = WebUtils.getCookie(request, DEVICE_PLATFORM).getValue();\n+    String redirectUrl = redirectConfig.getErrorUrl(devicePlatform);\n+    response.setHeader(\"Location\", redirectUrl);\n+    response.setStatus(HttpStatus.FOUND.value());\n+    return \"redirect:\" + redirectUrl;\n+  }\n+\n+  public void addCookie(HttpServletResponse response, String cookieName, String cookieValue) {\n+    Cookie cookie = new Cookie(cookieName, cookieValue);\n+    cookie.setMaxAge(600);\n+    cookie.setSecure(appConfig.isSecureCookie());\n+    cookie.setHttpOnly(true);\n+    cookie.setPath(\"/\");\n+    response.addCookie(cookie);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2OTg1Nw=="}, "originalCommit": {"oid": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTk5MjgzOnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/ConsentController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjo0ODo0MFrOG22lIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNzoxMzowN1rOG3_lIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3MDUyOA==", "bodyText": "nit: change to early exit instead.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r460170528", "createdAt": "2020-07-24T16:48:40Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/ConsentController.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getTextValue;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CONSENT_CHALLENGE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_PLATFORM;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.REDIRECT_TO;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.SKIP;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.USER_ID;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.AppPropertyConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.RedirectConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.OAuthService;\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.bind.annotation.CookieValue;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.util.WebUtils;\n+\n+@Controller\n+public class ConsentController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserController.class.getName());\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private RedirectConfig redirectConfig;\n+\n+  @Autowired private AppPropertyConfig appConfig;\n+\n+  @GetMapping(value = \"/consent\")\n+  public String authorize(\n+      @RequestParam(required = false, name = CONSENT_CHALLENGE) String consentChallenge,\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      Model model) {\n+    logger.entry(String.format(\"%s request\", request.getRequestURI()));\n+\n+    if (StringUtils.isNotBlank(consentChallenge)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM2NjU2MA==", "bodyText": "Fixed this review comment by removing required=false from @RequestParam", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r461366560", "createdAt": "2020-07-28T07:13:07Z", "author": {"login": "dhanyak-btc"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/ConsentController.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getTextValue;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CONSENT_CHALLENGE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_PLATFORM;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.REDIRECT_TO;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.SKIP;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.USER_ID;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.AppPropertyConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.RedirectConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.OAuthService;\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.bind.annotation.CookieValue;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.util.WebUtils;\n+\n+@Controller\n+public class ConsentController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserController.class.getName());\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private RedirectConfig redirectConfig;\n+\n+  @Autowired private AppPropertyConfig appConfig;\n+\n+  @GetMapping(value = \"/consent\")\n+  public String authorize(\n+      @RequestParam(required = false, name = CONSENT_CHALLENGE) String consentChallenge,\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      Model model) {\n+    logger.entry(String.format(\"%s request\", request.getRequestURI()));\n+\n+    if (StringUtils.isNotBlank(consentChallenge)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3MDUyOA=="}, "originalCommit": {"oid": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTk5NTUxOnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/ConsentController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjo0OToyM1rOG22mxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNzoxNDoxN1rOG3_nXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3MDk0OA==", "bodyText": "is \"consent\" another yet to be added URL? if yes, then please mark it in the code accordingly.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r460170948", "createdAt": "2020-07-24T16:49:23Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/ConsentController.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getTextValue;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CONSENT_CHALLENGE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_PLATFORM;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.REDIRECT_TO;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.SKIP;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.USER_ID;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.AppPropertyConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.RedirectConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.OAuthService;\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.bind.annotation.CookieValue;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.util.WebUtils;\n+\n+@Controller\n+public class ConsentController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserController.class.getName());\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private RedirectConfig redirectConfig;\n+\n+  @Autowired private AppPropertyConfig appConfig;\n+\n+  @GetMapping(value = \"/consent\")\n+  public String authorize(\n+      @RequestParam(required = false, name = CONSENT_CHALLENGE) String consentChallenge,\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      Model model) {\n+    logger.entry(String.format(\"%s request\", request.getRequestURI()));\n+\n+    if (StringUtils.isNotBlank(consentChallenge)) {\n+      addCookie(response, CONSENT_CHALLENGE, consentChallenge);\n+      // show or skip consent page\n+      MultiValueMap<String, String> paramMap = new LinkedMultiValueMap<>();\n+      paramMap.add(CONSENT_CHALLENGE, consentChallenge);\n+      ResponseEntity<JsonNode> consentResponse = oauthService.requestConsent(paramMap);\n+      if (consentResponse.getStatusCode().is2xxSuccessful()) {\n+        JsonNode responseBody = consentResponse.getBody();\n+        return skipConsent(responseBody)\n+            ? redirectToCallbackUrl(request, true, response)\n+            : \"consent\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM2NzEzNA==", "bodyText": "This is a view name, it should be same as the template name i.e. consent.html", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r461367134", "createdAt": "2020-07-28T07:14:17Z", "author": {"login": "dhanyak-btc"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/ConsentController.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getTextValue;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CONSENT_CHALLENGE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_PLATFORM;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.REDIRECT_TO;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.SKIP;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.USER_ID;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.AppPropertyConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.RedirectConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.OAuthService;\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.bind.annotation.CookieValue;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.util.WebUtils;\n+\n+@Controller\n+public class ConsentController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserController.class.getName());\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private RedirectConfig redirectConfig;\n+\n+  @Autowired private AppPropertyConfig appConfig;\n+\n+  @GetMapping(value = \"/consent\")\n+  public String authorize(\n+      @RequestParam(required = false, name = CONSENT_CHALLENGE) String consentChallenge,\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      Model model) {\n+    logger.entry(String.format(\"%s request\", request.getRequestURI()));\n+\n+    if (StringUtils.isNotBlank(consentChallenge)) {\n+      addCookie(response, CONSENT_CHALLENGE, consentChallenge);\n+      // show or skip consent page\n+      MultiValueMap<String, String> paramMap = new LinkedMultiValueMap<>();\n+      paramMap.add(CONSENT_CHALLENGE, consentChallenge);\n+      ResponseEntity<JsonNode> consentResponse = oauthService.requestConsent(paramMap);\n+      if (consentResponse.getStatusCode().is2xxSuccessful()) {\n+        JsonNode responseBody = consentResponse.getBody();\n+        return skipConsent(responseBody)\n+            ? redirectToCallbackUrl(request, true, response)\n+            : \"consent\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3MDk0OA=="}, "originalCommit": {"oid": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjAwNTA0OnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/ConsentController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjo1MjowMlrOG22soA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNzoxNDo1OFrOG3_osQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3MjQ0OA==", "bodyText": "why do you need \"redirect:\" prefix?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r460172448", "createdAt": "2020-07-24T16:52:02Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/ConsentController.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getTextValue;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CONSENT_CHALLENGE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_PLATFORM;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.REDIRECT_TO;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.SKIP;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.USER_ID;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.AppPropertyConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.RedirectConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.OAuthService;\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.bind.annotation.CookieValue;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.util.WebUtils;\n+\n+@Controller\n+public class ConsentController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserController.class.getName());\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private RedirectConfig redirectConfig;\n+\n+  @Autowired private AppPropertyConfig appConfig;\n+\n+  @GetMapping(value = \"/consent\")\n+  public String authorize(\n+      @RequestParam(required = false, name = CONSENT_CHALLENGE) String consentChallenge,\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      Model model) {\n+    logger.entry(String.format(\"%s request\", request.getRequestURI()));\n+\n+    if (StringUtils.isNotBlank(consentChallenge)) {\n+      addCookie(response, CONSENT_CHALLENGE, consentChallenge);\n+      // show or skip consent page\n+      MultiValueMap<String, String> paramMap = new LinkedMultiValueMap<>();\n+      paramMap.add(CONSENT_CHALLENGE, consentChallenge);\n+      ResponseEntity<JsonNode> consentResponse = oauthService.requestConsent(paramMap);\n+      if (consentResponse.getStatusCode().is2xxSuccessful()) {\n+        JsonNode responseBody = consentResponse.getBody();\n+        return skipConsent(responseBody)\n+            ? redirectToCallbackUrl(request, true, response)\n+            : \"consent\";\n+      }\n+    }\n+\n+    return redirectToError(request, response);\n+  }\n+\n+  private boolean skipConsent(JsonNode responseBody) {\n+    return responseBody.has(SKIP) && responseBody.get(SKIP).booleanValue();\n+  }\n+\n+  private String redirectToCallbackUrl(\n+      HttpServletRequest request, boolean skipConsent, HttpServletResponse response) {\n+    String userId = WebUtils.getCookie(request, USER_ID).getValue();\n+    String devicePlatform = WebUtils.getCookie(request, DEVICE_PLATFORM).getValue();\n+    String callbackUrl = redirectConfig.getCallbackUrl(devicePlatform);\n+\n+    String redirectUrl =\n+        String.format(\"%s?skip_consent=%b&userId=%s\", callbackUrl, skipConsent, userId);\n+\n+    logger.exit(String.format(\"redirect to %s from /consent\", callbackUrl));\n+    return redirect(response, redirectUrl);\n+  }\n+\n+  private String redirect(HttpServletResponse response, String redirectUrl) {\n+    response.setHeader(\"Location\", redirectUrl);\n+    response.setStatus(HttpStatus.FOUND.value());\n+    return \"redirect:\" + redirectUrl;\n+  }\n+\n+  @PostMapping(value = \"/consent\")\n+  public String authenticate(\n+      @CookieValue(name = CONSENT_CHALLENGE) String consentChallenge,\n+      @CookieValue(name = USER_ID) String userId,\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      Model model) {\n+    logger.entry(String.format(\"%s request\", request.getRequestURI()));\n+\n+    MultiValueMap<String, String> paramMap = new LinkedMultiValueMap<>();\n+    paramMap.add(CONSENT_CHALLENGE, consentChallenge);\n+    ResponseEntity<JsonNode> consentResponse = oauthService.consentAccept(paramMap);\n+\n+    if (consentResponse.getStatusCode().is2xxSuccessful()) {\n+      String redirectUrl = getTextValue(consentResponse.getBody(), REDIRECT_TO);\n+      return redirect(response, redirectUrl);\n+    }\n+\n+    return redirectToError(request, response);\n+  }\n+\n+  private String redirectToError(HttpServletRequest request, HttpServletResponse response) {\n+    String devicePlatform = WebUtils.getCookie(request, DEVICE_PLATFORM).getValue();\n+    String redirectUrl = redirectConfig.getErrorUrl(devicePlatform);\n+    response.setHeader(\"Location\", redirectUrl);\n+    response.setStatus(HttpStatus.FOUND.value());\n+    return \"redirect:\" + redirectUrl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM2NzQ3Mw==", "bodyText": "to redirect to the external application URLs.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r461367473", "createdAt": "2020-07-28T07:14:58Z", "author": {"login": "dhanyak-btc"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/ConsentController.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getTextValue;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CONSENT_CHALLENGE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_PLATFORM;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.REDIRECT_TO;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.SKIP;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.USER_ID;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.AppPropertyConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.RedirectConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.OAuthService;\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.bind.annotation.CookieValue;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.util.WebUtils;\n+\n+@Controller\n+public class ConsentController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserController.class.getName());\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private RedirectConfig redirectConfig;\n+\n+  @Autowired private AppPropertyConfig appConfig;\n+\n+  @GetMapping(value = \"/consent\")\n+  public String authorize(\n+      @RequestParam(required = false, name = CONSENT_CHALLENGE) String consentChallenge,\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      Model model) {\n+    logger.entry(String.format(\"%s request\", request.getRequestURI()));\n+\n+    if (StringUtils.isNotBlank(consentChallenge)) {\n+      addCookie(response, CONSENT_CHALLENGE, consentChallenge);\n+      // show or skip consent page\n+      MultiValueMap<String, String> paramMap = new LinkedMultiValueMap<>();\n+      paramMap.add(CONSENT_CHALLENGE, consentChallenge);\n+      ResponseEntity<JsonNode> consentResponse = oauthService.requestConsent(paramMap);\n+      if (consentResponse.getStatusCode().is2xxSuccessful()) {\n+        JsonNode responseBody = consentResponse.getBody();\n+        return skipConsent(responseBody)\n+            ? redirectToCallbackUrl(request, true, response)\n+            : \"consent\";\n+      }\n+    }\n+\n+    return redirectToError(request, response);\n+  }\n+\n+  private boolean skipConsent(JsonNode responseBody) {\n+    return responseBody.has(SKIP) && responseBody.get(SKIP).booleanValue();\n+  }\n+\n+  private String redirectToCallbackUrl(\n+      HttpServletRequest request, boolean skipConsent, HttpServletResponse response) {\n+    String userId = WebUtils.getCookie(request, USER_ID).getValue();\n+    String devicePlatform = WebUtils.getCookie(request, DEVICE_PLATFORM).getValue();\n+    String callbackUrl = redirectConfig.getCallbackUrl(devicePlatform);\n+\n+    String redirectUrl =\n+        String.format(\"%s?skip_consent=%b&userId=%s\", callbackUrl, skipConsent, userId);\n+\n+    logger.exit(String.format(\"redirect to %s from /consent\", callbackUrl));\n+    return redirect(response, redirectUrl);\n+  }\n+\n+  private String redirect(HttpServletResponse response, String redirectUrl) {\n+    response.setHeader(\"Location\", redirectUrl);\n+    response.setStatus(HttpStatus.FOUND.value());\n+    return \"redirect:\" + redirectUrl;\n+  }\n+\n+  @PostMapping(value = \"/consent\")\n+  public String authenticate(\n+      @CookieValue(name = CONSENT_CHALLENGE) String consentChallenge,\n+      @CookieValue(name = USER_ID) String userId,\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      Model model) {\n+    logger.entry(String.format(\"%s request\", request.getRequestURI()));\n+\n+    MultiValueMap<String, String> paramMap = new LinkedMultiValueMap<>();\n+    paramMap.add(CONSENT_CHALLENGE, consentChallenge);\n+    ResponseEntity<JsonNode> consentResponse = oauthService.consentAccept(paramMap);\n+\n+    if (consentResponse.getStatusCode().is2xxSuccessful()) {\n+      String redirectUrl = getTextValue(consentResponse.getBody(), REDIRECT_TO);\n+      return redirect(response, redirectUrl);\n+    }\n+\n+    return redirectToError(request, response);\n+  }\n+\n+  private String redirectToError(HttpServletRequest request, HttpServletResponse response) {\n+    String devicePlatform = WebUtils.getCookie(request, DEVICE_PLATFORM).getValue();\n+    String redirectUrl = redirectConfig.getErrorUrl(devicePlatform);\n+    response.setHeader(\"Location\", redirectUrl);\n+    response.setStatus(HttpStatus.FOUND.value());\n+    return \"redirect:\" + redirectUrl;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3MjQ0OA=="}, "originalCommit": {"oid": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjAxNTM1OnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/config/AppPropertyConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjo1NDo1NlrOG22yxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNzoxNzo1MVrOG3_ukA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3NDAyMA==", "bodyText": "There are a few new app params being added via this PR, this expiry time, app redirection URls etc.\nPlease file a bug and list these values and others (if there are more) to flag that they need to be accounted for in the documentation and deployment.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r460174020", "createdAt": "2020-07-24T16:54:56Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/config/AppPropertyConfig.java", "diffHunk": "@@ -56,4 +56,7 @@\n \n   @Value(\"${cookie.secure:true}\")\n   private boolean secureCookie;\n+\n+  @Value(\"${tempregid.expiry.minutes:30}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM2ODk3Ng==", "bodyText": "Created an issue #689", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r461368976", "createdAt": "2020-07-28T07:17:51Z", "author": {"login": "dhanyak-btc"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/config/AppPropertyConfig.java", "diffHunk": "@@ -56,4 +56,7 @@\n \n   @Value(\"${cookie.secure:true}\")\n   private boolean secureCookie;\n+\n+  @Value(\"${tempregid.expiry.minutes:30}\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3NDAyMA=="}, "originalCommit": {"oid": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjAyMjU0OnYy", "diffSide": "RIGHT", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/AuditEventServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjo1NzowNlrOG223KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNzozMzo1MFrOG4APFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3NTE0NQ==", "bodyText": "Please add a db failure test to the controller methods that calls these, and verify that the all actions are getting rolled back properly and correct error response is returned.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r460175145", "createdAt": "2020-07-24T16:57:06Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/AuditEventServiceImpl.java", "diffHunk": "@@ -134,7 +137,8 @@ private AuditLogEventResponse saveAuditLogEvent(JsonNode requestBody, int httpSt\n     return new AuditLogEventResponse(HttpStatus.ACCEPTED, \"event saved for task scheduler\");\n   }\n \n-  private void updateAuditLogEventStatus(\n+  @Transactional\n+  public void updateAuditLogEventStatus(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM3NzMwMA==", "bodyText": "Audit Log Fallback option is removed in PR #592 this method will be removed when the branch is updated.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r461377300", "createdAt": "2020-07-28T07:33:50Z", "author": {"login": "dhanyak-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/AuditEventServiceImpl.java", "diffHunk": "@@ -134,7 +137,8 @@ private AuditLogEventResponse saveAuditLogEvent(JsonNode requestBody, int httpSt\n     return new AuditLogEventResponse(HttpStatus.ACCEPTED, \"event saved for task scheduler\");\n   }\n \n-  private void updateAuditLogEventStatus(\n+  @Transactional\n+  public void updateAuditLogEventStatus(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3NTE0NQ=="}, "originalCommit": {"oid": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzM0NDA4OnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/config/AppConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMzo0MToyNVrOG9aUmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDoyMjoxMFrOG9b1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA0NzU3Nw==", "bodyText": "would be nice to also rename this and  also the filename for consistency.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r467047577", "createdAt": "2020-08-07T13:41:25Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/config/AppConfig.java", "diffHunk": "@@ -25,7 +25,7 @@ public void addViewControllers(ViewControllerRegistry registry) {\n         .addViewController(String.format(\"%s/login\", context.getContextPath()))\n         .setViewName(\"login\");\n     registry\n-        .addViewController(String.format(\"%s/signin\", context.getContextPath()))\n+        .addViewController(String.format(\"%s/autoLogin\", context.getContextPath()))\n         .setViewName(\"signin\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "137c8437b23831099723e7a531e5134c231525f3"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA3MjMwNg==", "bodyText": "Replaced all \"Signin\" with \"AutoLogin\"  and \"signin\" with \"autoLogin\". Please review.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r467072306", "createdAt": "2020-08-07T14:22:10Z", "author": {"login": "dhanyak-btc"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/config/AppConfig.java", "diffHunk": "@@ -25,7 +25,7 @@ public void addViewControllers(ViewControllerRegistry registry) {\n         .addViewController(String.format(\"%s/login\", context.getContextPath()))\n         .setViewName(\"login\");\n     registry\n-        .addViewController(String.format(\"%s/signin\", context.getContextPath()))\n+        .addViewController(String.format(\"%s/autoLogin\", context.getContextPath()))\n         .setViewName(\"signin\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA0NzU3Nw=="}, "originalCommit": {"oid": "137c8437b23831099723e7a531e5134c231525f3"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2315, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}