{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNjMxNDU2", "number": 1314, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzoyMzoyN1rOEtCYaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzoyNjowNFrOEtCdCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjYwMzkzOnYy", "diffSide": "RIGHT", "path": "participant-manager/src/app/http-interceptors/auth.interceptor.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzoyMzoyN1rOHgmhEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxOTowMTo0NlrOHhg_HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk0NzUzNw==", "bodyText": "Please use a type for error instead of disabling the linter.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1314#discussion_r503947537", "createdAt": "2020-10-13T13:23:27Z", "author": {"login": "nikklassen"}, "path": "participant-manager/src/app/http-interceptors/auth.interceptor.ts", "diffHunk": "@@ -33,56 +40,104 @@ export class AuthInterceptor implements HttpInterceptor {\n \n     if (!this.authService.hasCredentials()) {\n       return next.handle(req).pipe(\n-        this.handleError(),\n+        this.handleError(req, next),\n         finalize(() => {\n           void this.spinner.hide();\n         }),\n       );\n     }\n+\n+    return next.handle(this.setHeaders(req)).pipe(\n+      this.handleError(req, next),\n+      finalize(() => {\n+        void this.spinner.hide();\n+      }),\n+    );\n+  }\n+  private handle401Error(request: HttpRequest<unknown>, next: HttpHandler) {\n+    this.isRefreshing = true;\n+    this.refreshTokenSubject.next(null);\n+    return this.authService.refreshToken().subscribe(\n+      (authServerResponse: AccessToken) => {\n+        this.refreshTokenSubject.next(authServerResponse);\n+        sessionStorage.setItem('accessToken', authServerResponse.access_token);\n+        sessionStorage.setItem(\n+          'refreshToken',\n+          authServerResponse.refresh_token,\n+        );\n+        return next.handle(this.setHeaders(request)).pipe(\n+          catchError((error) => {\n+            return throwError(error);\n+          }),\n+        );\n+      },\n+      (error) => {\n+        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e74f189d91a118d5f6fe2ff40b160e66e7bde6d"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkwNTUwMQ==", "bodyText": "This has been modified as you suggested", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1314#discussion_r504905501", "createdAt": "2020-10-14T19:01:46Z", "author": {"login": "prakashm181"}, "path": "participant-manager/src/app/http-interceptors/auth.interceptor.ts", "diffHunk": "@@ -33,56 +40,104 @@ export class AuthInterceptor implements HttpInterceptor {\n \n     if (!this.authService.hasCredentials()) {\n       return next.handle(req).pipe(\n-        this.handleError(),\n+        this.handleError(req, next),\n         finalize(() => {\n           void this.spinner.hide();\n         }),\n       );\n     }\n+\n+    return next.handle(this.setHeaders(req)).pipe(\n+      this.handleError(req, next),\n+      finalize(() => {\n+        void this.spinner.hide();\n+      }),\n+    );\n+  }\n+  private handle401Error(request: HttpRequest<unknown>, next: HttpHandler) {\n+    this.isRefreshing = true;\n+    this.refreshTokenSubject.next(null);\n+    return this.authService.refreshToken().subscribe(\n+      (authServerResponse: AccessToken) => {\n+        this.refreshTokenSubject.next(authServerResponse);\n+        sessionStorage.setItem('accessToken', authServerResponse.access_token);\n+        sessionStorage.setItem(\n+          'refreshToken',\n+          authServerResponse.refresh_token,\n+        );\n+        return next.handle(this.setHeaders(request)).pipe(\n+          catchError((error) => {\n+            return throwError(error);\n+          }),\n+        );\n+      },\n+      (error) => {\n+        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk0NzUzNw=="}, "originalCommit": {"oid": "9e74f189d91a118d5f6fe2ff40b160e66e7bde6d"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjYwNjMwOnYy", "diffSide": "RIGHT", "path": "participant-manager/src/app/http-interceptors/auth.interceptor.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzoyMzo1OFrOHgmikw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzoyMzo1OFrOHgmikw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk0NzkyMw==", "bodyText": "If you're only ever passing emitting null then make the type null.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1314#discussion_r503947923", "createdAt": "2020-10-13T13:23:58Z", "author": {"login": "nikklassen"}, "path": "participant-manager/src/app/http-interceptors/auth.interceptor.ts", "diffHunk": "@@ -8,21 +8,28 @@ import {\n   HttpErrorResponse,\n } from '@angular/common/http';\n import {finalize} from 'rxjs/operators';\n-import {Observable, OperatorFunction, throwError} from 'rxjs';\n+import {BehaviorSubject, Observable, OperatorFunction, throwError} from 'rxjs';\n import {catchError} from 'rxjs/operators';\n import {ToastrService} from 'ngx-toastr';\n import {getMessage} from '../shared/error.codes.enum';\n import {AuthService} from '../service/auth.service';\n import {ApiResponse} from '../entity/api.response.model';\n import {environment} from 'src/environments/environment';\n import {CookieService} from 'ngx-cookie-service';\n+import {AccessToken} from '../entity/access-token';\n+import {Router} from '@angular/router';\n @Injectable()\n export class AuthInterceptor implements HttpInterceptor {\n+  private isRefreshing = false;\n+  private readonly refreshTokenSubject: BehaviorSubject<\n+    unknown\n+  > = new BehaviorSubject<unknown>(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e74f189d91a118d5f6fe2ff40b160e66e7bde6d"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjYxNTc3OnYy", "diffSide": "RIGHT", "path": "participant-manager/src/app/http-interceptors/auth.interceptor.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzoyNjowNFrOHgmogg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxOTowMzowOFrOHhhCLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk0OTQ0Mg==", "bodyText": "Can you use a more descriptive name than skip? People reading this code aren't going to be able to tell how it's used, or why it's a header. Ideally this isn't a header at all (headers are supposed to be passed to the server).", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1314#discussion_r503949442", "createdAt": "2020-10-13T13:26:04Z", "author": {"login": "nikklassen"}, "path": "participant-manager/src/app/http-interceptors/auth.interceptor.ts", "diffHunk": "@@ -33,56 +40,104 @@ export class AuthInterceptor implements HttpInterceptor {\n \n     if (!this.authService.hasCredentials()) {\n       return next.handle(req).pipe(\n-        this.handleError(),\n+        this.handleError(req, next),\n         finalize(() => {\n           void this.spinner.hide();\n         }),\n       );\n     }\n+\n+    return next.handle(this.setHeaders(req)).pipe(\n+      this.handleError(req, next),\n+      finalize(() => {\n+        void this.spinner.hide();\n+      }),\n+    );\n+  }\n+  private handle401Error(request: HttpRequest<unknown>, next: HttpHandler) {\n+    this.isRefreshing = true;\n+    this.refreshTokenSubject.next(null);\n+    return this.authService.refreshToken().subscribe(\n+      (authServerResponse: AccessToken) => {\n+        this.refreshTokenSubject.next(authServerResponse);\n+        sessionStorage.setItem('accessToken', authServerResponse.access_token);\n+        sessionStorage.setItem(\n+          'refreshToken',\n+          authServerResponse.refresh_token,\n+        );\n+        return next.handle(this.setHeaders(request)).pipe(\n+          catchError((error) => {\n+            return throwError(error);\n+          }),\n+        );\n+      },\n+      (error) => {\n+        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n+        const customError = error.error as ApiResponse;\n+        if (getMessage(customError.error_code)) {\n+          this.toasterService.error(getMessage(customError.error_code));\n+        }\n+        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n+        if (error.status === 401) {\n+          sessionStorage.clear();\n+          void this.router.navigate(['/']);\n+        }\n+      },\n+    );\n+  }\n+  private setHeaders(req: HttpRequest<unknown>) {\n     if (req.url.includes(`${environment.authServerUrl}`)) {\n-      const headers = req.headers\n+      let headers = req.headers\n         .set('Accept', 'application/json')\n         .set('correlationId', sessionStorage.getItem('correlationId') || '')\n         .set('appId', this.authService.appId)\n         .set('mobilePlatform', this.authService.mobilePlatform)\n+        .set('Access-Control-Allow-Origin', '*')\n+        .set(\n+          'Access-Control-Allow-Headers',\n+          'Origin, X-Requested-With, Content-Type, Accept',\n+        )\n         .set(\n           'Authorization',\n           `Bearer ${sessionStorage.getItem('accessToken') || ''} `,\n         );\n       if (!req.headers.has('Content-Type')) {\n-        headers.set('Content-Type', 'application/x-www-form-urlencoded');\n+        headers = headers.append(\n+          'Content-Type',\n+          'application/x-www-form-urlencoded',\n+        );\n       }\n-      const authReq = req.clone({headers});\n-      return next.handle(authReq).pipe(\n-        this.handleError(),\n-        finalize(() => {\n-          void this.spinner.hide();\n-        }),\n-      );\n+      return req.clone({headers});\n     } else {\n-      const headers = req.headers\n+      let headers = req.headers\n         .set('userId', sessionStorage.getItem('userId') || '')\n+        .set('Access-Control-Allow-Origin', '*')\n+        .set(\n+          'Access-Control-Allow-Headers',\n+          'Origin, X-Requested-With, Content-Type, Accept',\n+        )\n         .set(\n           'Authorization',\n           `Bearer ${sessionStorage.getItem('accessToken') || ''} `,\n         );\n-      if (!req.headers.has('Content-Type')) {\n-        req.headers.set('Content-Type', 'application/json');\n+\n+      if (!req.headers.get('skip')) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e74f189d91a118d5f6fe2ff40b160e66e7bde6d"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkwNjI4NQ==", "bodyText": "Now I have modified the string name to skipIfUpload", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1314#discussion_r504906285", "createdAt": "2020-10-14T19:03:08Z", "author": {"login": "prakashm181"}, "path": "participant-manager/src/app/http-interceptors/auth.interceptor.ts", "diffHunk": "@@ -33,56 +40,104 @@ export class AuthInterceptor implements HttpInterceptor {\n \n     if (!this.authService.hasCredentials()) {\n       return next.handle(req).pipe(\n-        this.handleError(),\n+        this.handleError(req, next),\n         finalize(() => {\n           void this.spinner.hide();\n         }),\n       );\n     }\n+\n+    return next.handle(this.setHeaders(req)).pipe(\n+      this.handleError(req, next),\n+      finalize(() => {\n+        void this.spinner.hide();\n+      }),\n+    );\n+  }\n+  private handle401Error(request: HttpRequest<unknown>, next: HttpHandler) {\n+    this.isRefreshing = true;\n+    this.refreshTokenSubject.next(null);\n+    return this.authService.refreshToken().subscribe(\n+      (authServerResponse: AccessToken) => {\n+        this.refreshTokenSubject.next(authServerResponse);\n+        sessionStorage.setItem('accessToken', authServerResponse.access_token);\n+        sessionStorage.setItem(\n+          'refreshToken',\n+          authServerResponse.refresh_token,\n+        );\n+        return next.handle(this.setHeaders(request)).pipe(\n+          catchError((error) => {\n+            return throwError(error);\n+          }),\n+        );\n+      },\n+      (error) => {\n+        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n+        const customError = error.error as ApiResponse;\n+        if (getMessage(customError.error_code)) {\n+          this.toasterService.error(getMessage(customError.error_code));\n+        }\n+        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n+        if (error.status === 401) {\n+          sessionStorage.clear();\n+          void this.router.navigate(['/']);\n+        }\n+      },\n+    );\n+  }\n+  private setHeaders(req: HttpRequest<unknown>) {\n     if (req.url.includes(`${environment.authServerUrl}`)) {\n-      const headers = req.headers\n+      let headers = req.headers\n         .set('Accept', 'application/json')\n         .set('correlationId', sessionStorage.getItem('correlationId') || '')\n         .set('appId', this.authService.appId)\n         .set('mobilePlatform', this.authService.mobilePlatform)\n+        .set('Access-Control-Allow-Origin', '*')\n+        .set(\n+          'Access-Control-Allow-Headers',\n+          'Origin, X-Requested-With, Content-Type, Accept',\n+        )\n         .set(\n           'Authorization',\n           `Bearer ${sessionStorage.getItem('accessToken') || ''} `,\n         );\n       if (!req.headers.has('Content-Type')) {\n-        headers.set('Content-Type', 'application/x-www-form-urlencoded');\n+        headers = headers.append(\n+          'Content-Type',\n+          'application/x-www-form-urlencoded',\n+        );\n       }\n-      const authReq = req.clone({headers});\n-      return next.handle(authReq).pipe(\n-        this.handleError(),\n-        finalize(() => {\n-          void this.spinner.hide();\n-        }),\n-      );\n+      return req.clone({headers});\n     } else {\n-      const headers = req.headers\n+      let headers = req.headers\n         .set('userId', sessionStorage.getItem('userId') || '')\n+        .set('Access-Control-Allow-Origin', '*')\n+        .set(\n+          'Access-Control-Allow-Headers',\n+          'Origin, X-Requested-With, Content-Type, Accept',\n+        )\n         .set(\n           'Authorization',\n           `Bearer ${sessionStorage.getItem('accessToken') || ''} `,\n         );\n-      if (!req.headers.has('Content-Type')) {\n-        req.headers.set('Content-Type', 'application/json');\n+\n+      if (!req.headers.get('skip')) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk0OTQ0Mg=="}, "originalCommit": {"oid": "9e74f189d91a118d5f6fe2ff40b160e66e7bde6d"}, "originalPosition": 128}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1745, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}