{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzNDA1NjE2", "number": 928, "title": "Participant Manger Webapp Login-setup implementation", "bodyText": "Participant Manger Webapp Login-setup implementation", "createdAt": "2020-09-10T05:34:27Z", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/928", "merged": true, "mergeCommit": {"oid": "e64aa18fae905ebd502a30f2e05229e382c2c22e"}, "closed": true, "closedAt": "2020-09-25T13:47:49Z", "author": {"login": "rohithd-btc"}, "timelineItems": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHZ9QBAH2gAyNDgzNDA1NjE2OjcxOTA4MWU2YmM4ZGZmN2U2MjMwOGYxNDY2NWMxOWFiMTBiYzRlYTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdMVo4PgFqTQ5NjQwODk5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "719081e6bc8dff7e62308f14665c19ab10bc4ea2", "author": {"user": {"login": "rohithd-btc", "name": "Rohith D C"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/719081e6bc8dff7e62308f14665c19ab10bc4ea2", "committedDate": "2020-09-10T05:29:14Z", "message": "Login-setup implimentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "026355927a13f1930e0c8708529812ff21dfae9d", "author": {"user": {"login": "rohithd-btc", "name": "Rohith D C"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/026355927a13f1930e0c8708529812ff21dfae9d", "committedDate": "2020-09-10T06:17:20Z", "message": "Updating from Develop Branch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a609adfa5d0f98a03c6642f9d08d70e350016aa", "author": {"user": {"login": "rohithd-btc", "name": "Rohith D C"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/8a609adfa5d0f98a03c6642f9d08d70e350016aa", "committedDate": "2020-09-10T06:17:46Z", "message": "Merge branch 'develop' of https://github.com/GoogleCloudPlatform/fda-mystudies into participant-manager-webapp-Login-Setup-implementation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MDM5OTc1", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/928#pullrequestreview-486039975", "createdAt": "2020-09-10T15:11:38Z", "commit": {"oid": "8a609adfa5d0f98a03c6642f9d08d70e350016aa"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNToxMTozOFrOHP43wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODo0MzozM1rOHQBRdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyMjQ2NA==", "bodyText": "This is always true because you've set the required attribute on these elements. Please replace these assertions with something that tests if the field is invalid (i.e. by checking the state of component.form)", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/928#discussion_r486422464", "createdAt": "2020-09-10T15:11:38Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/auth/set-up-account/set-up-account.component.spec.ts", "diffHunk": "@@ -1,24 +1,185 @@\n-import {async, ComponentFixture, TestBed} from '@angular/core/testing';\n-\n+import {\n+  ComponentFixture,\n+  TestBed,\n+  fakeAsync,\n+  tick,\n+} from '@angular/core/testing';\n+import {FormsModule} from '@angular/forms';\n import {SetUpAccountComponent} from './set-up-account.component';\n+import {EntityService} from 'src/app/service/entity.service';\n+import {SetUpAccountService} from '../shared/set-up-account.service';\n+import {ToastrModule} from 'ngx-toastr';\n+import {BrowserAnimationsModule} from '@angular/platform-browser/animations';\n+import {ModalModule} from 'ngx-bootstrap/modal';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {AuthService} from 'src/app/service/auth.service';\n+import {HttpClientModule} from '@angular/common/http';\n+import {of} from 'rxjs';\n+import {expectedUserDetails} from 'src/app/entity/mock-user-data';\n+import {NO_ERRORS_SCHEMA, DebugElement} from '@angular/core';\n+import {By} from '@angular/platform-browser';\n \n describe('SetUpAccountComponent', () => {\n   let component: SetUpAccountComponent;\n   let fixture: ComponentFixture<SetUpAccountComponent>;\n+  let updateUser: DebugElement;\n+  let firstName: DebugElement;\n+  let lastName: DebugElement;\n+  let password: DebugElement;\n+  let confirmPassword: DebugElement;\n \n-  beforeEach(async(async () => {\n+  beforeEach(async () => {\n+    const setUpAccountServiceSpy = jasmine.createSpyObj<SetUpAccountService>(\n+      'setUpAccountService',\n+      {get: of(expectedUserDetails)},\n+    );\n     await TestBed.configureTestingModule({\n       declarations: [SetUpAccountComponent],\n+      imports: [\n+        RouterTestingModule,\n+        HttpClientModule,\n+        FormsModule,\n+        ModalModule.forRoot(),\n+        BrowserAnimationsModule,\n+        ToastrModule.forRoot({\n+          positionClass: 'toast-top-center',\n+          preventDuplicates: true,\n+          enableHtml: true,\n+        }),\n+      ],\n+      providers: [\n+        EntityService,\n+        AuthService,\n+        {provide: SetUpAccountService, useValue: setUpAccountServiceSpy},\n+      ],\n+      schemas: [NO_ERRORS_SCHEMA],\n     }).compileComponents();\n-  }));\n+  });\n \n-  beforeEach(() => {\n+  beforeEach(async () => {\n     fixture = TestBed.createComponent(SetUpAccountComponent);\n     component = fixture.componentInstance;\n+    updateUser = fixture.debugElement.query(By.css('[name=\"save\"]'));\n+    firstName = fixture.debugElement.query(By.css('[name=\"firstName\"]'));\n+    lastName = fixture.debugElement.query(By.css('[name=\"lastName\"]'));\n+    password = fixture.debugElement.query(By.css('[name=\"password\"]'));\n+    confirmPassword = fixture.debugElement.query(\n+      By.css('[name=\"confirmPassword\"]'),\n+    );\n     fixture.detectChanges();\n+    await fixture.whenStable();\n   });\n \n   it('should create', () => {\n     expect(component).toBeTruthy();\n   });\n+\n+  it('should get userDetails on setup code', () => {\n+    expect(component.user.email).toEqual('superadmin@grr.la');\n+    expect(component.user.lastName).toEqual('Dsouza');\n+  });\n+\n+  it('should show validation error if the input field is empty', async () => {\n+    const firstNameInputs = firstName.nativeElement as HTMLInputElement;\n+    const lastNameInputs = lastName.nativeElement as HTMLInputElement;\n+    const passwordInputs = password.nativeElement as HTMLInputElement;\n+    const confirmPasswordInputs = confirmPassword.nativeElement as HTMLInputElement;\n+    firstNameInputs.value = '';\n+    lastNameInputs.value = '';\n+    passwordInputs.value = '';\n+    confirmPasswordInputs.value = '';\n+    passwordInputs.dispatchEvent(new Event('input'));\n+    fixture.detectChanges();\n+    await fixture.whenStable();\n+    const errorHelpBlock = fixture.debugElement.query(By.css('.help-block'));\n+    const errorHelpBlocks = errorHelpBlock.nativeElement as HTMLElement;\n+    expect(firstNameInputs.required).toBeTruthy();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a609adfa5d0f98a03c6642f9d08d70e350016aa"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyMzgyOA==", "bodyText": "Please see my comments on #916", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/928#discussion_r486423828", "createdAt": "2020-09-10T15:13:33Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/auth/set-up-account/set-up-account.component.html", "diffHunk": "@@ -1 +1,218 @@\n-<p>set-up-account works!</p>\n+<header>\n+  <div id=\"desktop-menu\">\n+    <div class=\"bs-example bs__example\">\n+      <nav class=\"navbar navbar-expand-md p-none\">\n+        <a href=\"#\" class=\"navbar-brand\">\n+          <img class=\"mr-sm\" src=\"assets/images/landing-logo.gif\" alt=\"logo\" />\n+        </a>\n+      </nav>\n+    </div>\n+  </div>\n+</header>\n+<ng-container>\n+  <section class=\"max__w__850 add__location\">\n+    <form #setupaccount=\"ngForm\" autocomplete=\"off\">\n+      <h2 class=\"subheader__title mb-sm mt-lg\">Set Up Account</h2>\n+      <section class=\"bg__white card__inside__pad box__shadow-cmn m-none\">\n+        <div class=\"mt-lg\">\n+          <div class=\"row border-bottom__c4d1e6\">\n+            <div class=\"col-xs-12 col-md-12 p-none\">\n+              <div class=\"form-group\">\n+                <label for=\"email\">Email ID</label>\n+                <input\n+                  type=\"text\"\n+                  class=\"form-control\"\n+                  id=\"email\"\n+                  placeholder=\"Enter Email\"\n+                  [(ngModel)]=\"user.email\"\n+                  name=\"email\"\n+                  #email=\"ngModel\"\n+                  readonly\n+                />\n+              </div>\n+            </div>\n+          </div>\n+          <div class=\"row\">\n+            <div class=\"col-xs-12 col-md-6 p-none border-right__c4d1e6\">\n+              <div class=\"form-group\">\n+                <label for=\"fname\">First Name</label>\n+                <input\n+                  type=\"text\"\n+                  class=\"form-control\"\n+                  id=\"fname\"\n+                  placeholder=\"Enter First Name\"\n+                  [(ngModel)]=\"user.firstName\"\n+                  name=\"firstName\"\n+                  #firstName=\"ngModel\"\n+                  pattern=\"^[A-Za-z]{3,15}$\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a609adfa5d0f98a03c6642f9d08d70e350016aa"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQzMTgzMg==", "bodyText": "Why are we using Reactive forms in #916 and not here. For two components that are basically the same they should be implemented the same way.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/928#discussion_r486431832", "createdAt": "2020-09-10T15:24:08Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/auth/set-up-account/set-up-account.component.ts", "diffHunk": "@@ -1,8 +1,63 @@\n-import {Component} from '@angular/core';\n+import {Component, OnInit, ViewChild} from '@angular/core';\n+import {NgForm} from '@angular/forms';\n+import {ActivatedRoute} from '@angular/router';\n+import {ToastrService} from 'ngx-toastr';\n+import {SetUpUser} from '../../entity/user';\n+import {UnsubscribeOnDestroyAdapter} from 'src/app/unsubscribe-on-destroy-adapter';\n+import {SetUpAccountService} from 'src/app/auth/shared/set-up-account.service';\n+import {getMessage} from 'src/app/shared/success.codes.enum';\n+import {AuthService} from 'src/app/service/auth.service';\n+import {SetUpResponse} from '../shared/set-up-account';\n \n @Component({\n   selector: 'app-set-up-account',\n   templateUrl: './set-up-account.component.html',\n   styleUrls: ['./set-up-account.component.scss'],\n })\n-export class SetUpAccountComponent {}\n+export class SetUpAccountComponent extends UnsubscribeOnDestroyAdapter\n+  implements OnInit {\n+  user = {} as SetUpUser;\n+  setUpCode = '';\n+  tempRegId = '';\n+  @ViewChild('setupaccount')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a609adfa5d0f98a03c6642f9d08d70e350016aa"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUzMTI1OA==", "bodyText": "You aren't telling the user what your criteria is. Also password should be lowercase", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/928#discussion_r486531258", "createdAt": "2020-09-10T17:59:00Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/auth/set-up-account/set-up-account.component.html", "diffHunk": "@@ -1 +1,218 @@\n-<p>set-up-account works!</p>\n+<header>\n+  <div id=\"desktop-menu\">\n+    <div class=\"bs-example bs__example\">\n+      <nav class=\"navbar navbar-expand-md p-none\">\n+        <a href=\"#\" class=\"navbar-brand\">\n+          <img class=\"mr-sm\" src=\"assets/images/landing-logo.gif\" alt=\"logo\" />\n+        </a>\n+      </nav>\n+    </div>\n+  </div>\n+</header>\n+<ng-container>\n+  <section class=\"max__w__850 add__location\">\n+    <form #setupaccount=\"ngForm\" autocomplete=\"off\">\n+      <h2 class=\"subheader__title mb-sm mt-lg\">Set Up Account</h2>\n+      <section class=\"bg__white card__inside__pad box__shadow-cmn m-none\">\n+        <div class=\"mt-lg\">\n+          <div class=\"row border-bottom__c4d1e6\">\n+            <div class=\"col-xs-12 col-md-12 p-none\">\n+              <div class=\"form-group\">\n+                <label for=\"email\">Email ID</label>\n+                <input\n+                  type=\"text\"\n+                  class=\"form-control\"\n+                  id=\"email\"\n+                  placeholder=\"Enter Email\"\n+                  [(ngModel)]=\"user.email\"\n+                  name=\"email\"\n+                  #email=\"ngModel\"\n+                  readonly\n+                />\n+              </div>\n+            </div>\n+          </div>\n+          <div class=\"row\">\n+            <div class=\"col-xs-12 col-md-6 p-none border-right__c4d1e6\">\n+              <div class=\"form-group\">\n+                <label for=\"fname\">First Name</label>\n+                <input\n+                  type=\"text\"\n+                  class=\"form-control\"\n+                  id=\"fname\"\n+                  placeholder=\"Enter First Name\"\n+                  [(ngModel)]=\"user.firstName\"\n+                  name=\"firstName\"\n+                  #firstName=\"ngModel\"\n+                  pattern=\"^[A-Za-z]{3,15}$\"\n+                  required\n+                />\n+                <div\n+                  class=\"validation-error\"\n+                  *ngIf=\"\n+                    firstName.invalid && (firstName.dirty || firstName.touched)\n+                  \"\n+                >\n+                  <span\n+                    class=\"help-block with-errors error__msg\"\n+                    *ngIf=\"firstName.errors?.required\"\n+                  >\n+                    Please fill out this field.\n+                  </span>\n+                  <span\n+                    class=\"help-block with-errors error__msg\"\n+                    *ngIf=\"firstName.errors?.pattern\"\n+                  >\n+                    Please enter atleast 3 - 15 alphabets with no space.\n+                  </span>\n+                </div>\n+              </div>\n+            </div>\n+            <div class=\"col-xs-12 col-md-6 p-none\">\n+              <div class=\"form-group\">\n+                <label for=\"lname\">Last Name</label>\n+                <input\n+                  type=\"text\"\n+                  class=\"form-control\"\n+                  id=\"lname\"\n+                  placeholder=\"Enter Last Name\"\n+                  [(ngModel)]=\"user.lastName\"\n+                  name=\"lastName\"\n+                  #lastName=\"ngModel\"\n+                  pattern=\"^[A-Za-z]{3,15}$\"\n+                  required\n+                />\n+                <div\n+                  class=\"validation-error\"\n+                  *ngIf=\"\n+                    lastName.invalid && (lastName.dirty || lastName.touched)\n+                  \"\n+                >\n+                  <span\n+                    class=\"help-block with-errors error__msg\"\n+                    *ngIf=\"lastName.errors?.required\"\n+                  >\n+                    Please fill out this field.\n+                  </span>\n+                  <span\n+                    class=\"help-block with-errors error__msg\"\n+                    *ngIf=\"lastName.errors?.pattern\"\n+                  >\n+                    Please enter atleast 3 - 15 alphabets with no space.\n+                  </span>\n+                </div>\n+              </div>\n+            </div>\n+          </div>\n+        </div>\n+      </section>\n+\n+      <h2 class=\"subheader__title mb-sm\">Create Password</h2>\n+      <section class=\"bg__white card__inside__pad box__shadow-cmn m-none\">\n+        <div class=\"row\">\n+          <div class=\"col-xs-12 col-md-6 p-none border-right__c4d1e6\">\n+            <div class=\"form-group\">\n+              <label for=\"password\">Password</label>\n+              <input\n+                type=\"password\"\n+                class=\"form-control\"\n+                id=\"password\"\n+                placeholder=\"Enter Password\"\n+                [(ngModel)]=\"user.password\"\n+                #password=\"ngModel\"\n+                name=\"password\"\n+                pattern=\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{10,}$\"\n+                required\n+              />\n+              <div\n+                class=\"validation-error\"\n+                *ngIf=\"password.invalid && (password.dirty || password.touched)\"\n+              >\n+                <span\n+                  class=\"help-block with-errors error__msg\"\n+                  *ngIf=\"password.errors?.required\"\n+                >\n+                  Please fill out this field.\n+                </span>\n+                <span\n+                  class=\"help-block with-errors error__msg\"\n+                  *ngIf=\"password.errors?.pattern\"\n+                >\n+                  Does not match Password criteria", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a609adfa5d0f98a03c6642f9d08d70e350016aa"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUzNTQ3Nw==", "bodyText": "nit: setUpAccountService", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/928#discussion_r486535477", "createdAt": "2020-09-10T18:06:30Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/auth/shared/set-up-account.service.spec.ts", "diffHunk": "@@ -0,0 +1,103 @@\n+import {TestBed, fakeAsync, tick} from '@angular/core/testing';\n+import {SetUpAccountService} from './set-up-account.service';\n+import {\n+  HttpClientTestingModule,\n+  HttpTestingController,\n+} from '@angular/common/http/testing';\n+import {SiteCoordinatorModule} from 'src/app/site-coordinator/site-coordinator.module';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {EntityService} from 'src/app/service/entity.service';\n+import {NO_ERRORS_SCHEMA} from '@angular/core';\n+import {User} from 'src/app/entity/user';\n+import {HttpClient} from '@angular/common/http';\n+import {ApiResponse} from 'src/app/entity/api.response.model';\n+import {throwError, of} from 'rxjs';\n+import {\n+  expectedUserDetails,\n+  expectedSetUpCode,\n+  expectedsetUpResponse,\n+  expectedUpdateSetUp,\n+} from 'src/app/entity/mock-user-data';\n+import {environment} from '@environment';\n+\n+describe('SetUpAccountService', () => {\n+  let setUpAccountServices: SetUpAccountService;\n+  let httpServiceSpyObj: jasmine.SpyObj<HttpClient>;\n+\n+  beforeEach(() =>\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        SiteCoordinatorModule,\n+        RouterTestingModule.withRoutes([]),\n+      ],\n+      schemas: [NO_ERRORS_SCHEMA],\n+      providers: [SetUpAccountService, EntityService],\n+    }),\n+  );\n+\n+  it('should be created', () => {\n+    const service: SetUpAccountService = TestBed.get(\n+      SetUpAccountService,\n+    ) as SetUpAccountService;\n+    expect(service).toBeTruthy();\n+  });\n+\n+  it('should return expected User details to setup account', fakeAsync(() => {\n+    const entityServiceSpy = jasmine.createSpyObj<EntityService<User>>(\n+      'EntityService',\n+      {get: of(expectedUserDetails)},\n+    );\n+    setUpAccountServices = new SetUpAccountService(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a609adfa5d0f98a03c6642f9d08d70e350016aa"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU0NTg0NQ==", "bodyText": "This is a bug. hasOwnProperty will never return null. These linter rules are in here for a reason.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/928#discussion_r486545845", "createdAt": "2020-09-10T18:21:55Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/auth.service.ts", "diffHunk": "@@ -15,53 +21,82 @@ export class AuthService {\n     public cookieService: CookieService,\n     public entityService: EntityService<AccessToken>,\n     public router: Router,\n+    public activatedRoute: ActivatedRoute,\n     private readonly userService: UserService,\n   ) {}\n-  hasCredentials(): boolean {\n-    return (\n-      this.cookieService.check('accessToken') &&\n-      this.cookieService.check('user') &&\n-      JSON.parse(this.cookieService.get('user')) !== null\n-    );\n+\n+  storeDefaultsValues(): void {\n+    sessionStorage.setItem('tempRegId', '');\n+    if (!sessionStorage.hasOwnProperty('correlationId')) {\n+      sessionStorage.setItem('correlationId', uuidv4());\n+      getPkce(43, (error, {verifier, challenge}) => {\n+        if (!error) {\n+          sessionStorage.setItem('pkceVerifier', verifier);\n+          sessionStorage.setItem('pkceChallenge', challenge);\n+        }\n+      });\n+    }\n   }\n-  getUser(): User {\n-    return JSON.parse(this.cookieService.get('user')) as User;\n+\n+  grantAutoSignIn(): void {\n+    window.location.href = `${environment.loginUrl}?client_id=${\n+      environment.client_id\n+    }&scope=offline_access&response_type=code&appId=${\n+      environment.appId\n+    }&mobilePlatform=${environment.mobilePlatform}&tempRegId=${\n+      sessionStorage.getItem('tempRegId') || ''\n+    }&code_challenge_method=S256&code_challenge=${\n+      sessionStorage.getItem('pkceChallenge') || ''\n+    }&correlationId=${\n+      sessionStorage.getItem('correlationId') || ''\n+    }&redirect_uri=${environment.redirectUrl}&state=${uuidv4()}`;\n   }\n-  getUserAccessToken(): string {\n-    return this.cookieService.get('accessToken');\n+\n+  hasCredentials(): boolean {\n+    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a609adfa5d0f98a03c6642f9d08d70e350016aa"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU0NjAxNg==", "bodyText": "Don't disable this rule. Fix it properly.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/928#discussion_r486546016", "createdAt": "2020-09-10T18:22:09Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/auth.service.ts", "diffHunk": "@@ -1,12 +1,18 @@\n+/* eslint-disable @typescript-eslint/no-unsafe-call */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a609adfa5d0f98a03c6642f9d08d70e350016aa"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU0NjE3OQ==", "bodyText": "Disable naming conventions on the line they appear.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/928#discussion_r486546179", "createdAt": "2020-09-10T18:22:24Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/auth.service.ts", "diffHunk": "@@ -1,12 +1,18 @@\n+/* eslint-disable @typescript-eslint/no-unsafe-call */\n+/* eslint-disable @typescript-eslint/naming-convention */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a609adfa5d0f98a03c6642f9d08d70e350016aa"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU0NjQzMQ==", "bodyText": "Don't disable this rule. Fix it properly. You can use in if you don't like calling hasOwnProperty from Object.prototype.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/928#discussion_r486546431", "createdAt": "2020-09-10T18:22:45Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/auth.service.ts", "diffHunk": "@@ -1,12 +1,18 @@\n+/* eslint-disable @typescript-eslint/no-unsafe-call */\n+/* eslint-disable @typescript-eslint/naming-convention */\n+/* eslint-disable no-prototype-builtins */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a609adfa5d0f98a03c6642f9d08d70e350016aa"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU0Nzg2NQ==", "bodyText": "What is 43? Don't use magic numbers (https://eslint.org/docs/rules/no-magic-numbers), use a named constant instead.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/928#discussion_r486547865", "createdAt": "2020-09-10T18:24:42Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/auth.service.ts", "diffHunk": "@@ -15,53 +21,82 @@ export class AuthService {\n     public cookieService: CookieService,\n     public entityService: EntityService<AccessToken>,\n     public router: Router,\n+    public activatedRoute: ActivatedRoute,\n     private readonly userService: UserService,\n   ) {}\n-  hasCredentials(): boolean {\n-    return (\n-      this.cookieService.check('accessToken') &&\n-      this.cookieService.check('user') &&\n-      JSON.parse(this.cookieService.get('user')) !== null\n-    );\n+\n+  storeDefaultsValues(): void {\n+    sessionStorage.setItem('tempRegId', '');\n+    if (!sessionStorage.hasOwnProperty('correlationId')) {\n+      sessionStorage.setItem('correlationId', uuidv4());\n+      getPkce(43, (error, {verifier, challenge}) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a609adfa5d0f98a03c6642f9d08d70e350016aa"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU0ODQ5MA==", "bodyText": "The redirect url should be URL encoded. Although all of this would be easier to read if you used, which will also automatically encode the params for you.\nconst params = new HttpParams()\n    .set('clientId', environment.client_id)\n    // ...\n    .toString();\nwindow.location.href = `${environment.loginUrl}?${params}`;", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/928#discussion_r486548490", "createdAt": "2020-09-10T18:25:28Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/auth.service.ts", "diffHunk": "@@ -15,53 +21,82 @@ export class AuthService {\n     public cookieService: CookieService,\n     public entityService: EntityService<AccessToken>,\n     public router: Router,\n+    public activatedRoute: ActivatedRoute,\n     private readonly userService: UserService,\n   ) {}\n-  hasCredentials(): boolean {\n-    return (\n-      this.cookieService.check('accessToken') &&\n-      this.cookieService.check('user') &&\n-      JSON.parse(this.cookieService.get('user')) !== null\n-    );\n+\n+  storeDefaultsValues(): void {\n+    sessionStorage.setItem('tempRegId', '');\n+    if (!sessionStorage.hasOwnProperty('correlationId')) {\n+      sessionStorage.setItem('correlationId', uuidv4());\n+      getPkce(43, (error, {verifier, challenge}) => {\n+        if (!error) {\n+          sessionStorage.setItem('pkceVerifier', verifier);\n+          sessionStorage.setItem('pkceChallenge', challenge);\n+        }\n+      });\n+    }\n   }\n-  getUser(): User {\n-    return JSON.parse(this.cookieService.get('user')) as User;\n+\n+  grantAutoSignIn(): void {\n+    window.location.href = `${environment.loginUrl}?client_id=${\n+      environment.client_id\n+    }&scope=offline_access&response_type=code&appId=${\n+      environment.appId\n+    }&mobilePlatform=${environment.mobilePlatform}&tempRegId=${\n+      sessionStorage.getItem('tempRegId') || ''\n+    }&code_challenge_method=S256&code_challenge=${\n+      sessionStorage.getItem('pkceChallenge') || ''\n+    }&correlationId=${\n+      sessionStorage.getItem('correlationId') || ''\n+    }&redirect_uri=${environment.redirectUrl}&state=${uuidv4()}`;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a609adfa5d0f98a03c6642f9d08d70e350016aa"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU0OTA3Mg==", "bodyText": "nit: options. It's clear what this is being used for.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/928#discussion_r486549072", "createdAt": "2020-09-10T18:26:16Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/auth.service.ts", "diffHunk": "@@ -15,53 +21,82 @@ export class AuthService {\n     public cookieService: CookieService,\n     public entityService: EntityService<AccessToken>,\n     public router: Router,\n+    public activatedRoute: ActivatedRoute,\n     private readonly userService: UserService,\n   ) {}\n-  hasCredentials(): boolean {\n-    return (\n-      this.cookieService.check('accessToken') &&\n-      this.cookieService.check('user') &&\n-      JSON.parse(this.cookieService.get('user')) !== null\n-    );\n+\n+  storeDefaultsValues(): void {\n+    sessionStorage.setItem('tempRegId', '');\n+    if (!sessionStorage.hasOwnProperty('correlationId')) {\n+      sessionStorage.setItem('correlationId', uuidv4());\n+      getPkce(43, (error, {verifier, challenge}) => {\n+        if (!error) {\n+          sessionStorage.setItem('pkceVerifier', verifier);\n+          sessionStorage.setItem('pkceChallenge', challenge);\n+        }\n+      });\n+    }\n   }\n-  getUser(): User {\n-    return JSON.parse(this.cookieService.get('user')) as User;\n+\n+  grantAutoSignIn(): void {\n+    window.location.href = `${environment.loginUrl}?client_id=${\n+      environment.client_id\n+    }&scope=offline_access&response_type=code&appId=${\n+      environment.appId\n+    }&mobilePlatform=${environment.mobilePlatform}&tempRegId=${\n+      sessionStorage.getItem('tempRegId') || ''\n+    }&code_challenge_method=S256&code_challenge=${\n+      sessionStorage.getItem('pkceChallenge') || ''\n+    }&correlationId=${\n+      sessionStorage.getItem('correlationId') || ''\n+    }&redirect_uri=${environment.redirectUrl}&state=${uuidv4()}`;\n   }\n-  getUserAccessToken(): string {\n-    return this.cookieService.get('accessToken');\n+\n+  hasCredentials(): boolean {\n+    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n+    return sessionStorage.hasOwnProperty('accessToken') !== null;\n   }\n \n-  redirectToLoginPage(): void {\n-    void this.router.navigate(['/callback'], {\n-      queryParams: {\n-        code: 'l4hQQM-guBDwbpo76dHJs-8.ufR0YLll0menniGz5A-YN95DfCFOKg',\n-        userId:\n-          'b45bc4f67fd77ebb6db9a94f8abd9a0470b07f4098f7934234f12a5bee975231',\n-      },\n-    });\n+  getUserAccessToken(): string {\n+    return sessionStorage.getItem('accessToken') || '';\n+  }\n+  getAuthUserId(): string {\n+    return sessionStorage.getItem('userId') || '';\n   }\n-  grantAuthorization(code: string, userId: string): void {\n-    const payload = {\n-      // eslint-disable-next-line @typescript-eslint/naming-convention\n-      grant_type: 'authorization_code',\n-      scope: 'openid',\n-      // eslint-disable-next-line @typescript-eslint/naming-convention\n-      redirect_uri: environment.redirectUrl,\n-      code: code,\n-      userId: userId,\n+\n+  grantAuthorization(code: string, userId: string): Observable<AccessToken> {\n+    const httpOptionsforauth = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a609adfa5d0f98a03c6642f9d08d70e350016aa"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU0OTE2MA==", "bodyText": "nit: payload", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/928#discussion_r486549160", "createdAt": "2020-09-10T18:26:25Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/auth.service.ts", "diffHunk": "@@ -15,53 +21,82 @@ export class AuthService {\n     public cookieService: CookieService,\n     public entityService: EntityService<AccessToken>,\n     public router: Router,\n+    public activatedRoute: ActivatedRoute,\n     private readonly userService: UserService,\n   ) {}\n-  hasCredentials(): boolean {\n-    return (\n-      this.cookieService.check('accessToken') &&\n-      this.cookieService.check('user') &&\n-      JSON.parse(this.cookieService.get('user')) !== null\n-    );\n+\n+  storeDefaultsValues(): void {\n+    sessionStorage.setItem('tempRegId', '');\n+    if (!sessionStorage.hasOwnProperty('correlationId')) {\n+      sessionStorage.setItem('correlationId', uuidv4());\n+      getPkce(43, (error, {verifier, challenge}) => {\n+        if (!error) {\n+          sessionStorage.setItem('pkceVerifier', verifier);\n+          sessionStorage.setItem('pkceChallenge', challenge);\n+        }\n+      });\n+    }\n   }\n-  getUser(): User {\n-    return JSON.parse(this.cookieService.get('user')) as User;\n+\n+  grantAutoSignIn(): void {\n+    window.location.href = `${environment.loginUrl}?client_id=${\n+      environment.client_id\n+    }&scope=offline_access&response_type=code&appId=${\n+      environment.appId\n+    }&mobilePlatform=${environment.mobilePlatform}&tempRegId=${\n+      sessionStorage.getItem('tempRegId') || ''\n+    }&code_challenge_method=S256&code_challenge=${\n+      sessionStorage.getItem('pkceChallenge') || ''\n+    }&correlationId=${\n+      sessionStorage.getItem('correlationId') || ''\n+    }&redirect_uri=${environment.redirectUrl}&state=${uuidv4()}`;\n   }\n-  getUserAccessToken(): string {\n-    return this.cookieService.get('accessToken');\n+\n+  hasCredentials(): boolean {\n+    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n+    return sessionStorage.hasOwnProperty('accessToken') !== null;\n   }\n \n-  redirectToLoginPage(): void {\n-    void this.router.navigate(['/callback'], {\n-      queryParams: {\n-        code: 'l4hQQM-guBDwbpo76dHJs-8.ufR0YLll0menniGz5A-YN95DfCFOKg',\n-        userId:\n-          'b45bc4f67fd77ebb6db9a94f8abd9a0470b07f4098f7934234f12a5bee975231',\n-      },\n-    });\n+  getUserAccessToken(): string {\n+    return sessionStorage.getItem('accessToken') || '';\n+  }\n+  getAuthUserId(): string {\n+    return sessionStorage.getItem('userId') || '';\n   }\n-  grantAuthorization(code: string, userId: string): void {\n-    const payload = {\n-      // eslint-disable-next-line @typescript-eslint/naming-convention\n-      grant_type: 'authorization_code',\n-      scope: 'openid',\n-      // eslint-disable-next-line @typescript-eslint/naming-convention\n-      redirect_uri: environment.redirectUrl,\n-      code: code,\n-      userId: userId,\n+\n+  grantAuthorization(code: string, userId: string): Observable<AccessToken> {\n+    const httpOptionsforauth = {\n+      headers: new HttpHeaders({\n+        'Content-Type': 'application/x-www-form-urlencoded',\n+        'Accept': 'application/json',\n+        'correlationId': `${sessionStorage.getItem('correlationId') || ''}`,\n+        'appId': `${environment.appId}`,\n+        'mobilePlatform': `${environment.mobilePlatform}`,\n+      }),\n     };\n-    this.http\n-      .post<AccessToken>(`${environment.authServerUrl}/oauth2/token`, payload)\n-      .subscribe((response) => {\n-        this.cookieService.set('accessToken', response.accessToken);\n-        this.cookieService.set('refreshToken', response.refreshToken);\n-        this.getUserDetails();\n-      });\n+    const payLoad = new HttpParams()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a609adfa5d0f98a03c6642f9d08d70e350016aa"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU1MDA4NA==", "bodyText": "`${environment.redirectUrl}` is the same as environment.redirectUrl", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/928#discussion_r486550084", "createdAt": "2020-09-10T18:27:38Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/auth.service.ts", "diffHunk": "@@ -15,53 +21,82 @@ export class AuthService {\n     public cookieService: CookieService,\n     public entityService: EntityService<AccessToken>,\n     public router: Router,\n+    public activatedRoute: ActivatedRoute,\n     private readonly userService: UserService,\n   ) {}\n-  hasCredentials(): boolean {\n-    return (\n-      this.cookieService.check('accessToken') &&\n-      this.cookieService.check('user') &&\n-      JSON.parse(this.cookieService.get('user')) !== null\n-    );\n+\n+  storeDefaultsValues(): void {\n+    sessionStorage.setItem('tempRegId', '');\n+    if (!sessionStorage.hasOwnProperty('correlationId')) {\n+      sessionStorage.setItem('correlationId', uuidv4());\n+      getPkce(43, (error, {verifier, challenge}) => {\n+        if (!error) {\n+          sessionStorage.setItem('pkceVerifier', verifier);\n+          sessionStorage.setItem('pkceChallenge', challenge);\n+        }\n+      });\n+    }\n   }\n-  getUser(): User {\n-    return JSON.parse(this.cookieService.get('user')) as User;\n+\n+  grantAutoSignIn(): void {\n+    window.location.href = `${environment.loginUrl}?client_id=${\n+      environment.client_id\n+    }&scope=offline_access&response_type=code&appId=${\n+      environment.appId\n+    }&mobilePlatform=${environment.mobilePlatform}&tempRegId=${\n+      sessionStorage.getItem('tempRegId') || ''\n+    }&code_challenge_method=S256&code_challenge=${\n+      sessionStorage.getItem('pkceChallenge') || ''\n+    }&correlationId=${\n+      sessionStorage.getItem('correlationId') || ''\n+    }&redirect_uri=${environment.redirectUrl}&state=${uuidv4()}`;\n   }\n-  getUserAccessToken(): string {\n-    return this.cookieService.get('accessToken');\n+\n+  hasCredentials(): boolean {\n+    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n+    return sessionStorage.hasOwnProperty('accessToken') !== null;\n   }\n \n-  redirectToLoginPage(): void {\n-    void this.router.navigate(['/callback'], {\n-      queryParams: {\n-        code: 'l4hQQM-guBDwbpo76dHJs-8.ufR0YLll0menniGz5A-YN95DfCFOKg',\n-        userId:\n-          'b45bc4f67fd77ebb6db9a94f8abd9a0470b07f4098f7934234f12a5bee975231',\n-      },\n-    });\n+  getUserAccessToken(): string {\n+    return sessionStorage.getItem('accessToken') || '';\n+  }\n+  getAuthUserId(): string {\n+    return sessionStorage.getItem('userId') || '';\n   }\n-  grantAuthorization(code: string, userId: string): void {\n-    const payload = {\n-      // eslint-disable-next-line @typescript-eslint/naming-convention\n-      grant_type: 'authorization_code',\n-      scope: 'openid',\n-      // eslint-disable-next-line @typescript-eslint/naming-convention\n-      redirect_uri: environment.redirectUrl,\n-      code: code,\n-      userId: userId,\n+\n+  grantAuthorization(code: string, userId: string): Observable<AccessToken> {\n+    const httpOptionsforauth = {\n+      headers: new HttpHeaders({\n+        'Content-Type': 'application/x-www-form-urlencoded',\n+        'Accept': 'application/json',\n+        'correlationId': `${sessionStorage.getItem('correlationId') || ''}`,\n+        'appId': `${environment.appId}`,\n+        'mobilePlatform': `${environment.mobilePlatform}`,\n+      }),\n     };\n-    this.http\n-      .post<AccessToken>(`${environment.authServerUrl}/oauth2/token`, payload)\n-      .subscribe((response) => {\n-        this.cookieService.set('accessToken', response.accessToken);\n-        this.cookieService.set('refreshToken', response.refreshToken);\n-        this.getUserDetails();\n-      });\n+    const payLoad = new HttpParams()\n+      .set(`grant_type`, 'authorization_code')\n+      .set('scope', 'openid offline offline_access')\n+      .set('code', code)\n+      .set('redirect_uri', `${environment.redirectUrl}`)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a609adfa5d0f98a03c6642f9d08d70e350016aa"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU1OTUzMw==", "bodyText": "Is this ever going to change? Can't it be a constant in the auth service?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/928#discussion_r486559533", "createdAt": "2020-09-10T18:42:23Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/environments/environment.prod.ts", "diffHunk": "@@ -1,6 +1,13 @@\n+/* eslint-disable @typescript-eslint/naming-convention */\n export const environment = {\n   production: true,\n   baseUrl: 'http://35.193.185.224:8093/participant-manager-service',\n+  loginUrl: 'https://35.193.185.224:9000/oauth2/auth',\n   authServerUrl: 'http://35.193.185.224:8087/oauth-scim-service',\n   redirectUrl: 'http://35.193.185.224:8087/oauth-scim-service/login',\n+  appId: 'PARTICIPANT-MANAGER',\n+  client_id: 'oauth-scim-client-id',\n+  appVersion: 'v0.1',\n+  mobilePlatform: 'DESKTOP',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a609adfa5d0f98a03c6642f9d08d70e350016aa"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU2MDExOA==", "bodyText": "You can follow Typescript naming conventions here. It only needs to have an underscore in the request/param.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/928#discussion_r486560118", "createdAt": "2020-09-10T18:43:33Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/environments/environment.ts", "diffHunk": "@@ -1,12 +1,19 @@\n // This file can be replaced during build by using the `fileReplacements` array.\n // `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n // The list of file replacements can be found in `angular.json`.\n+/* eslint-disable @typescript-eslint/naming-convention */\n \n export const environment = {\n   production: false,\n-  baseUrl: 'http://localhost:3000/participant-manager-service',\n-  authServerUrl: 'http://localhost:3000/oauth-scim-service',\n-  redirectUrl: 'http://35.193.185.224:8087/oauth-scim-service/login',\n+  baseUrl: 'http://35.193.185.224:8093/participant-manager-service',\n+  loginUrl: 'https://35.193.185.224:9000/oauth2/auth',\n+  authServerUrl: 'http://35.193.185.224:8087/oauth-scim-service',\n+  redirectUrl: 'https://34.69.210.52/qa/oauth-scim-service/login',\n+  appId: 'PARTICIPANT-MANAGER',\n+  client_id: 'oauth-scim-client-id',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a609adfa5d0f98a03c6642f9d08d70e350016aa"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03e5d45574d9abf3ec0f867fe793f82902bc3ba9", "author": {"user": {"login": "rohithd-btc", "name": "Rohith D C"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/03e5d45574d9abf3ec0f867fe793f82902bc3ba9", "committedDate": "2020-09-17T09:41:13Z", "message": "PR comments updated"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b6f8ffb37ab20e6dee057e38b45c708341636f1", "author": {"user": {"login": "rohithd-btc", "name": "Rohith D C"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/5b6f8ffb37ab20e6dee057e38b45c708341636f1", "committedDate": "2020-09-17T09:54:39Z", "message": "Merge branch 'develop' of https://github.com/GoogleCloudPlatform/fda-mystudies into participant-manager-webapp-Login-Setup-implementation\n\n# Conflicts:\n#\tUR-web-app/src/app/http-interceptors/auth.interceptor.ts\n#\tUR-web-app/src/app/shared/success.codes.enum.ts\n#\tUR-web-app/src/environments/environment.ts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f84ae9b0f600e15f6cbf6d8df884ba663986796a", "author": {"user": {"login": "rohithd-btc", "name": "Rohith D C"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/f84ae9b0f600e15f6cbf6d8df884ba663986796a", "committedDate": "2020-09-17T10:04:02Z", "message": "Build Merge conflicts issue cause build failure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8882b47c9deb4b4d7e48df672e5095c5d9a694f8", "author": {"user": {"login": "rohithd-btc", "name": "Rohith D C"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/8882b47c9deb4b4d7e48df672e5095c5d9a694f8", "committedDate": "2020-09-17T14:16:54Z", "message": "All the PR comments resolved"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNzE5MjUw", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/928#pullrequestreview-490719250", "createdAt": "2020-09-17T15:26:24Z", "commit": {"oid": "8882b47c9deb4b4d7e48df672e5095c5d9a694f8"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNToyNjoyNFrOHToGkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNTo0Njo1MlrOHTo_dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM0MjAzMg==", "bodyText": "Don't chain ternaries, just use an if/return", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/928#discussion_r490342032", "createdAt": "2020-09-17T15:26:24Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/_helper/validator.ts", "diffHunk": "@@ -0,0 +1,51 @@\n+/* eslint-disable */\n+import {FormGroup, ValidatorFn, AbstractControl} from '@angular/forms';\n+export function emailValiadtor(): ValidatorFn {\n+  return (control: AbstractControl): {[key: string]: any} | null => {\n+    const emailFilter = /^([\\w-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$/;\n+    const validEmail = emailFilter.test(control.value);\n+    return control.value === ''", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8882b47c9deb4b4d7e48df672e5095c5d9a694f8"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM0MjYxNA==", "bodyText": "return {validPassword: true}\nYou don't need an intermediate variable.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/928#discussion_r490342614", "createdAt": "2020-09-17T15:27:12Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/_helper/validator.ts", "diffHunk": "@@ -0,0 +1,51 @@\n+/* eslint-disable */\n+import {FormGroup, ValidatorFn, AbstractControl} from '@angular/forms';\n+export function emailValiadtor(): ValidatorFn {\n+  return (control: AbstractControl): {[key: string]: any} | null => {\n+    const emailFilter = /^([\\w-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$/;\n+    const validEmail = emailFilter.test(control.value);\n+    return control.value === ''\n+      ? {emptyError: true}\n+      : validEmail\n+      ? null\n+      : {invalidEmailid: true};\n+  };\n+}\n+export function passwordValidator(): ValidatorFn {\n+  return (control: AbstractControl): {[key: string]: boolean} | null => {\n+    const uppercasePattern = /[A-Z]/g;\n+    const lowercasePattern = /[a-z]/g;\n+    const numericPattern = /[0-9]/g;\n+    const specialCharsPattern = /^[\\w&.-]+$/;\n+    let validPassword: boolean;\n+    if (\n+      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n+      control.value.length < 8 ||\n+      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n+      control.value.length > 64 ||\n+      !uppercasePattern.test(control.value) ||\n+      !lowercasePattern.test(control.value) ||\n+      specialCharsPattern.test(control.value) ||\n+      !numericPattern.test(control.value)\n+    ) {\n+      validPassword = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8882b47c9deb4b4d7e48df672e5095c5d9a694f8"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM0MzI2Nw==", "bodyText": "Don't ignore these errors. Do something like\nconst value = control.value as string;\nif (\n    value.length < 8 ||\n    // ...", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/928#discussion_r490343267", "createdAt": "2020-09-17T15:28:07Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/_helper/validator.ts", "diffHunk": "@@ -0,0 +1,51 @@\n+/* eslint-disable */\n+import {FormGroup, ValidatorFn, AbstractControl} from '@angular/forms';\n+export function emailValiadtor(): ValidatorFn {\n+  return (control: AbstractControl): {[key: string]: any} | null => {\n+    const emailFilter = /^([\\w-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$/;\n+    const validEmail = emailFilter.test(control.value);\n+    return control.value === ''\n+      ? {emptyError: true}\n+      : validEmail\n+      ? null\n+      : {invalidEmailid: true};\n+  };\n+}\n+export function passwordValidator(): ValidatorFn {\n+  return (control: AbstractControl): {[key: string]: boolean} | null => {\n+    const uppercasePattern = /[A-Z]/g;\n+    const lowercasePattern = /[a-z]/g;\n+    const numericPattern = /[0-9]/g;\n+    const specialCharsPattern = /^[\\w&.-]+$/;\n+    let validPassword: boolean;\n+    if (\n+      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8882b47c9deb4b4d7e48df672e5095c5d9a694f8"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM0NDcyMw==", "bodyText": "Instead of chaining subscribes it's better to use pipe(switchMap(...))", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/928#discussion_r490344723", "createdAt": "2020-09-17T15:30:02Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/auth/login-callback/login-callback.component.ts", "diffHunk": "@@ -11,13 +15,42 @@ export class LoginCallbackComponent implements OnInit {\n     private readonly activatedRoute: ActivatedRoute,\n     public authService: AuthService,\n     private readonly router: Router,\n+    private readonly accountService: AccountService,\n+    private readonly userState: StateService,\n+    private readonly toastr: ToastrService,\n   ) {}\n   ngOnInit(): void {\n+    this.redirect();\n+  }\n+\n+  redirect(): void {\n     this.activatedRoute.queryParams.subscribe((params) => {\n+      sessionStorage.setItem('code', params.code);\n+      sessionStorage.setItem('authUserId', params.userId);\n       if (params.code && params.userId) {\n-        this.authService.grantAuthorization(params.code, params.userId);\n-      } else {\n-        void this.router.navigate(['/login']);\n+        this.authService.getToken(params.code, params.userId).subscribe(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8882b47c9deb4b4d7e48df672e5095c5d9a694f8"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM0NTg5OA==", "bodyText": "Someone's name could be more than 15 characters. Please remove.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/928#discussion_r490345898", "createdAt": "2020-09-17T15:31:37Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/auth/set-up-account/set-up-account.component.html", "diffHunk": "@@ -41,30 +43,23 @@ <h2 class=\"subheader__title mb-sm mt-lg\">Set Up Account</h2>\n                   class=\"form-control\"\n                   id=\"fname\"\n                   placeholder=\"Enter First Name\"\n-                  [(ngModel)]=\"user.firstName\"\n-                  name=\"firstName\"\n-                  #firstName=\"ngModel\"\n-                  pattern=\"^[A-Za-z]{3,15}$\"\n+                  formControlName=\"firstName\"\n+                  maxlength=\"15\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8882b47c9deb4b4d7e48df672e5095c5d9a694f8"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM0NjEyNg==", "bodyText": "Same here.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/928#discussion_r490346126", "createdAt": "2020-09-17T15:31:59Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/auth/set-up-account/set-up-account.component.html", "diffHunk": "@@ -76,30 +71,23 @@ <h2 class=\"subheader__title mb-sm mt-lg\">Set Up Account</h2>\n                   class=\"form-control\"\n                   id=\"lname\"\n                   placeholder=\"Enter Last Name\"\n-                  [(ngModel)]=\"user.lastName\"\n-                  name=\"lastName\"\n-                  #lastName=\"ngModel\"\n-                  pattern=\"^[A-Za-z]{3,15}$\"\n+                  formControlName=\"lastName\"\n+                  maxlength=\"15\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8882b47c9deb4b4d7e48df672e5095c5d9a694f8"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM1MjAzMA==", "bodyText": "Why rename these variables?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/928#discussion_r490352030", "createdAt": "2020-09-17T15:40:23Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/auth/set-up-account/set-up-account.component.spec.ts", "diffHunk": "@@ -75,111 +78,59 @@ describe('SetUpAccountComponent', () => {\n   });\n \n   it('should get userDetails on setup code', () => {\n-    expect(component.user.email).toEqual('superadmin@grr.la');\n-    expect(component.user.lastName).toEqual('Dsouza');\n-  });\n-\n-  it('should show validation error if the input field is empty', async () => {\n-    const firstNameInputs = firstName.nativeElement as HTMLInputElement;\n-    const lastNameInputs = lastName.nativeElement as HTMLInputElement;\n-    const passwordInputs = password.nativeElement as HTMLInputElement;\n-    const confirmPasswordInputs = confirmPassword.nativeElement as HTMLInputElement;\n-    firstNameInputs.value = '';\n-    lastNameInputs.value = '';\n-    passwordInputs.value = '';\n-    confirmPasswordInputs.value = '';\n-    passwordInputs.dispatchEvent(new Event('input'));\n-    fixture.detectChanges();\n-    await fixture.whenStable();\n-    const errorHelpBlock = fixture.debugElement.query(By.css('.help-block'));\n-    const errorHelpBlocks = errorHelpBlock.nativeElement as HTMLElement;\n-    expect(firstNameInputs.required).toBeTruthy();\n-    expect(lastNameInputs.required).toBeTruthy();\n-    expect(passwordInputs.required).toBeTruthy();\n-    expect(confirmPasswordInputs.required).toBeTruthy();\n-    expect(errorHelpBlocks.innerText).toEqual('Please fill out this field.');\n-  });\n-\n-  it('should show validation error if the input field exceeds max charecter', async () => {\n-    fixture.detectChanges();\n-    const firstNameInputs = firstName.nativeElement as HTMLInputElement;\n-    firstNameInputs.value = 'checking max charecter';\n-    firstNameInputs.dispatchEvent(new Event('input'));\n-    fixture.detectChanges();\n-    await fixture.whenStable();\n-    const errorMsg = fixture.debugElement.query(By.css('.validation-error'));\n-    const errorHelpBlock = fixture.debugElement.query(\n-      By.css('.help-block.with-errors'),\n+    expect(component.setupaccountForm.controls['email'].value).toEqual(\n+      'superadmin@grr.la',\n     );\n-    const errorHelpBlocks = errorHelpBlock.nativeElement as HTMLElement;\n-    expect(errorHelpBlock).toBeTruthy();\n-    expect(errorMsg).toBeTruthy();\n-    expect(errorHelpBlocks.innerText).toEqual(\n-      'Please enter atleast 3 - 15 alphabets with no space.',\n+    expect(component.setupaccountForm.controls['firstName'].value).toEqual(\n+      'kamin',\n+    );\n+    expect(component.setupaccountForm.controls['lastName'].value).toEqual(\n+      'Dsouza',\n     );\n   });\n \n-  it('should show validation error if the input field with less than 3 character', async () => {\n-    fixture.detectChanges();\n-    const firstNameInputs = firstName.nativeElement as HTMLInputElement;\n-    firstNameInputs.value = 'ca';\n-    firstNameInputs.dispatchEvent(new Event('input'));\n-    fixture.detectChanges();\n-    await fixture.whenStable();\n-    const errorMsg = fixture.debugElement.query(By.css('.validation-error'));\n-    const errorHelpBlock = fixture.debugElement.query(\n-      By.css('.help-block.with-errors'),\n-    );\n-    const errorHelpBlocks = errorHelpBlock.nativeElement as HTMLElement;\n-    expect(errorHelpBlock).toBeTruthy();\n-    expect(errorMsg).toBeTruthy();\n-    expect(errorHelpBlocks.innerText).toEqual(\n-      'Please enter atleast 3 - 15 alphabets with no space.',\n-    );\n+  it('should validate the form when input is not provided', () => {\n+    expect(component.setupaccountForm.invalid).toBe(true);\n   });\n \n-  it('should show validation error if the password and confirm password mismatches', async () => {\n-    const passwordInputs = password.nativeElement as HTMLInputElement;\n-    const confirmPasswordInputs = confirmPassword.nativeElement as HTMLInputElement;\n-    passwordInputs.value = 'Password@123';\n-    confirmPasswordInputs.value = 'Password@12345';\n-    passwordInputs.dispatchEvent(new Event('input'));\n-    confirmPasswordInputs.dispatchEvent(new Event('input'));\n+  it('should register the user when button is submitted', fakeAsync(async () => {\n+    const toggleChangeSpy = spyOn(component, 'registerUser');\n     fixture.detectChanges();\n-    await fixture.whenStable();\n+    tick();\n+    fixture.debugElement\n+      .query(By.css('form'))\n+      .triggerEventHandler('submit', null);\n     fixture.detectChanges();\n-    const errorMsg = fixture.debugElement.query(By.css('.validation-error'));\n-    const errorHelpBlock = fixture.debugElement.query(\n-      By.css('.help-block.with-errors'),\n-    );\n-    const errorHelpBlocks = errorHelpBlock.nativeElement as HTMLElement;\n-    expect(errorHelpBlock).toBeTruthy();\n-    expect(errorMsg).toBeTruthy();\n-    expect(errorHelpBlocks.innerText).toEqual(\n-      'Entered Password does not match.',\n-    );\n-  });\n+    await fixture.whenStable();\n+    expect(toggleChangeSpy).toHaveBeenCalledTimes(1);\n+  }));\n \n   it('should setup account with valid inputs', fakeAsync(async () => {\n     fixture.detectChanges();\n     component.user.password = 'Abcd@123456';\n-    const firstNameInputs = firstName.nativeElement as HTMLInputElement;\n-    const lastNameInputs = lastName.nativeElement as HTMLInputElement;\n+    const firstNameInputs = firstName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8882b47c9deb4b4d7e48df672e5095c5d9a694f8"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM1MjIzOA==", "bodyText": "nit: setupAccountForm", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/928#discussion_r490352238", "createdAt": "2020-09-17T15:40:40Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/auth/set-up-account/set-up-account.component.ts", "diffHunk": "@@ -19,18 +21,50 @@ export class SetUpAccountComponent extends UnsubscribeOnDestroyAdapter\n   user = {} as SetUpUser;\n   setUpCode = '';\n   tempRegId = '';\n-  @ViewChild('setupaccount')\n-  form!: NgForm;\n+  setupaccountForm: FormGroup;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8882b47c9deb4b4d7e48df672e5095c5d9a694f8"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM1MzkzMA==", "bodyText": "This should be private", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/928#discussion_r490353930", "createdAt": "2020-09-17T15:43:09Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/state.service.ts", "diffHunk": "@@ -0,0 +1,13 @@\n+import {Injectable} from '@angular/core';\n+import {BehaviorSubject, Observable, of} from 'rxjs';\n+@Injectable({providedIn: 'root'})\n+export class StateService {\n+  currentUserNameStore = new BehaviorSubject<string>('');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8882b47c9deb4b4d7e48df672e5095c5d9a694f8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM1NDA5OA==", "bodyText": "This initial value is never used", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/928#discussion_r490354098", "createdAt": "2020-09-17T15:43:23Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/service/state.service.ts", "diffHunk": "@@ -0,0 +1,13 @@\n+import {Injectable} from '@angular/core';\n+import {BehaviorSubject, Observable, of} from 'rxjs';\n+@Injectable({providedIn: 'root'})\n+export class StateService {\n+  currentUserNameStore = new BehaviorSubject<string>('');\n+  currentUserName$: Observable<string> = of('');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8882b47c9deb4b4d7e48df672e5095c5d9a694f8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM1NTQ5OQ==", "bodyText": "Why expose this here? Clients should get this from the auth service since it's the source of truth.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/928#discussion_r490355499", "createdAt": "2020-09-17T15:45:19Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/account/shared/account.service.ts", "diffHunk": "@@ -1,6 +1,26 @@\n import {Injectable} from '@angular/core';\n+import {Profile} from './profile.model';\n+import {EntityService} from '../../../service/entity.service';\n+import {HttpClient} from '@angular/common/http';\n+import {Observable} from 'rxjs';\n+\n+import {AuthService} from '../../../service/auth.service';\n \n @Injectable({\n   providedIn: 'root',\n })\n-export class AccountService {}\n+export class AccountService {\n+  authUserId = '';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8882b47c9deb4b4d7e48df672e5095c5d9a694f8"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM1NjU5OA==", "bodyText": "This has not been addressed. You still don't tell the user that special characters/upper & lower/etc. are required.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/928#discussion_r490356598", "createdAt": "2020-09-17T15:46:52Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/auth/set-up-account/set-up-account.component.html", "diffHunk": "@@ -1 +1,218 @@\n-<p>set-up-account works!</p>\n+<header>\n+  <div id=\"desktop-menu\">\n+    <div class=\"bs-example bs__example\">\n+      <nav class=\"navbar navbar-expand-md p-none\">\n+        <a href=\"#\" class=\"navbar-brand\">\n+          <img class=\"mr-sm\" src=\"assets/images/landing-logo.gif\" alt=\"logo\" />\n+        </a>\n+      </nav>\n+    </div>\n+  </div>\n+</header>\n+<ng-container>\n+  <section class=\"max__w__850 add__location\">\n+    <form #setupaccount=\"ngForm\" autocomplete=\"off\">\n+      <h2 class=\"subheader__title mb-sm mt-lg\">Set Up Account</h2>\n+      <section class=\"bg__white card__inside__pad box__shadow-cmn m-none\">\n+        <div class=\"mt-lg\">\n+          <div class=\"row border-bottom__c4d1e6\">\n+            <div class=\"col-xs-12 col-md-12 p-none\">\n+              <div class=\"form-group\">\n+                <label for=\"email\">Email ID</label>\n+                <input\n+                  type=\"text\"\n+                  class=\"form-control\"\n+                  id=\"email\"\n+                  placeholder=\"Enter Email\"\n+                  [(ngModel)]=\"user.email\"\n+                  name=\"email\"\n+                  #email=\"ngModel\"\n+                  readonly\n+                />\n+              </div>\n+            </div>\n+          </div>\n+          <div class=\"row\">\n+            <div class=\"col-xs-12 col-md-6 p-none border-right__c4d1e6\">\n+              <div class=\"form-group\">\n+                <label for=\"fname\">First Name</label>\n+                <input\n+                  type=\"text\"\n+                  class=\"form-control\"\n+                  id=\"fname\"\n+                  placeholder=\"Enter First Name\"\n+                  [(ngModel)]=\"user.firstName\"\n+                  name=\"firstName\"\n+                  #firstName=\"ngModel\"\n+                  pattern=\"^[A-Za-z]{3,15}$\"\n+                  required\n+                />\n+                <div\n+                  class=\"validation-error\"\n+                  *ngIf=\"\n+                    firstName.invalid && (firstName.dirty || firstName.touched)\n+                  \"\n+                >\n+                  <span\n+                    class=\"help-block with-errors error__msg\"\n+                    *ngIf=\"firstName.errors?.required\"\n+                  >\n+                    Please fill out this field.\n+                  </span>\n+                  <span\n+                    class=\"help-block with-errors error__msg\"\n+                    *ngIf=\"firstName.errors?.pattern\"\n+                  >\n+                    Please enter atleast 3 - 15 alphabets with no space.\n+                  </span>\n+                </div>\n+              </div>\n+            </div>\n+            <div class=\"col-xs-12 col-md-6 p-none\">\n+              <div class=\"form-group\">\n+                <label for=\"lname\">Last Name</label>\n+                <input\n+                  type=\"text\"\n+                  class=\"form-control\"\n+                  id=\"lname\"\n+                  placeholder=\"Enter Last Name\"\n+                  [(ngModel)]=\"user.lastName\"\n+                  name=\"lastName\"\n+                  #lastName=\"ngModel\"\n+                  pattern=\"^[A-Za-z]{3,15}$\"\n+                  required\n+                />\n+                <div\n+                  class=\"validation-error\"\n+                  *ngIf=\"\n+                    lastName.invalid && (lastName.dirty || lastName.touched)\n+                  \"\n+                >\n+                  <span\n+                    class=\"help-block with-errors error__msg\"\n+                    *ngIf=\"lastName.errors?.required\"\n+                  >\n+                    Please fill out this field.\n+                  </span>\n+                  <span\n+                    class=\"help-block with-errors error__msg\"\n+                    *ngIf=\"lastName.errors?.pattern\"\n+                  >\n+                    Please enter atleast 3 - 15 alphabets with no space.\n+                  </span>\n+                </div>\n+              </div>\n+            </div>\n+          </div>\n+        </div>\n+      </section>\n+\n+      <h2 class=\"subheader__title mb-sm\">Create Password</h2>\n+      <section class=\"bg__white card__inside__pad box__shadow-cmn m-none\">\n+        <div class=\"row\">\n+          <div class=\"col-xs-12 col-md-6 p-none border-right__c4d1e6\">\n+            <div class=\"form-group\">\n+              <label for=\"password\">Password</label>\n+              <input\n+                type=\"password\"\n+                class=\"form-control\"\n+                id=\"password\"\n+                placeholder=\"Enter Password\"\n+                [(ngModel)]=\"user.password\"\n+                #password=\"ngModel\"\n+                name=\"password\"\n+                pattern=\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{10,}$\"\n+                required\n+              />\n+              <div\n+                class=\"validation-error\"\n+                *ngIf=\"password.invalid && (password.dirty || password.touched)\"\n+              >\n+                <span\n+                  class=\"help-block with-errors error__msg\"\n+                  *ngIf=\"password.errors?.required\"\n+                >\n+                  Please fill out this field.\n+                </span>\n+                <span\n+                  class=\"help-block with-errors error__msg\"\n+                  *ngIf=\"password.errors?.pattern\"\n+                >\n+                  Does not match Password criteria", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUzMTI1OA=="}, "originalCommit": {"oid": "8a609adfa5d0f98a03c6642f9d08d70e350016aa"}, "originalPosition": 142}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efa7a78c4152a1f7e0efe453bed69d4c93f6b0db", "author": {"user": {"login": "rohithd-btc", "name": "Rohith D C"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/efa7a78c4152a1f7e0efe453bed69d4c93f6b0db", "committedDate": "2020-09-18T00:34:26Z", "message": "Change-password-implentation\n\nChange-password-implentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f377072fcb6c0e9333b2227f2851a1d2c55b5767", "author": {"user": {"login": "rohithd-btc", "name": "Rohith D C"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/f377072fcb6c0e9333b2227f2851a1d2c55b5767", "committedDate": "2020-09-18T03:45:28Z", "message": "ui changes\n\nui changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdbb11e021ed18910780ab65c30b91c2bad3b96c", "author": {"user": {"login": "rohithd-btc", "name": "Rohith D C"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/cdbb11e021ed18910780ab65c30b91c2bad3b96c", "committedDate": "2020-09-18T04:03:27Z", "message": "client comment fix\n\nclient comment fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdc169166a6ac323c0aa1b503223c00d47e038bc", "author": {"user": {"login": "rohithd-btc", "name": "Rohith D C"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/cdc169166a6ac323c0aa1b503223c00d47e038bc", "committedDate": "2020-09-18T06:33:49Z", "message": "All pr comments are fixed\n\nAll pr comments are fixed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2bfdaf8dab6947f82639df1efd885a0f6338bee", "author": {"user": {"login": "rohithd-btc", "name": "Rohith D C"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/d2bfdaf8dab6947f82639df1efd885a0f6338bee", "committedDate": "2020-09-18T06:48:51Z", "message": "Merge branch 'participant-manager-webapp-Login-Setup-implementation' into participant-manager-webapp-change-password-implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7df8be203ed819e0bdf67fe6822ab203313c40d", "author": {"user": {"login": "rohithd-btc", "name": "Rohith D C"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/c7df8be203ed819e0bdf67fe6822ab203313c40d", "committedDate": "2020-09-18T07:11:28Z", "message": "merged with base branch\n\nmerged with base branch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7afeb5443e4b2ff7af5303dac46e9bcc83fbcf56", "author": {"user": {"login": "firdosebtc1", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/7afeb5443e4b2ff7af5303dac46e9bcc83fbcf56", "committedDate": "2020-09-18T10:55:01Z", "message": "header implementation for permission"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba6875eae701e668f8612eef3b96e9a358f25af0", "author": {"user": {"login": "firdosebtc1", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/ba6875eae701e668f8612eef3b96e9a358f25af0", "committedDate": "2020-09-18T15:54:36Z", "message": "Merge branch 'participant-manager-webapp-Login-Setup-implementation' of https://github.com/GoogleCloudPlatform/fda-mystudies into participant-manager-webapp-header-changes\n\n# Conflicts:\n#\tUR-web-app/src/app/auth/login-callback/login-callback.component.ts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bec996851b7855ba9461982e66c8ee98f39b9072", "author": {"user": {"login": "firdosebtc1", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/bec996851b7855ba9461982e66c8ee98f39b9072", "committedDate": "2020-09-18T15:59:37Z", "message": "formatting has been dobe"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNzU3NjU1", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/928#pullrequestreview-491757655", "createdAt": "2020-09-18T20:20:59Z", "commit": {"oid": "cdc169166a6ac323c0aa1b503223c00d47e038bc"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMDoyMDo1OVrOHUav7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMDoyMDo1OVrOHUav7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3MTgyMA==", "bodyText": "please remove debugging statements", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/928#discussion_r491171820", "createdAt": "2020-09-18T20:20:59Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/auth/login-callback/login-callback.component.ts", "diffHunk": "@@ -22,36 +23,42 @@ export class LoginCallbackComponent implements OnInit {\n   ngOnInit(): void {\n     this.redirect();\n   }\n-\n   redirect(): void {\n-    this.activatedRoute.queryParams.subscribe((params) => {\n-      sessionStorage.setItem('code', params.code);\n-      sessionStorage.setItem('authUserId', params.userId);\n-      if (params.code && params.userId) {\n-        this.authService.getToken(params.code, params.userId).subscribe(\n-          (res) => {\n-            sessionStorage.setItem('accessToken', res.access_token);\n-            sessionStorage.setItem('refreshToken', res.refresh_token);\n-            this.accountService.fetchProfile().subscribe(\n-              (data: Profile) => {\n-                this.userState.setCurrentUserName(data.firstName);\n-                sessionStorage.setItem('userId', data.userId);\n+    this.activatedRoute.queryParams.subscribe(\n+      (params) => {\n+        if (params.code && params.userId) {\n+          this.authService\n+            .getToken(params.code, params.userId)\n+            .pipe(\n+              switchMap(() => {\n+                sessionStorage.setItem('code', params.code);\n+                sessionStorage.setItem('authUserId', params.userId);\n+                sessionStorage.setItem('accessToken', params.access_token);\n+                sessionStorage.setItem('refreshToken', params.refresh_token);\n+                return this.accountService.fetchUserProfile();\n+              }),\n+            )\n+            .subscribe(\n+              (userProfile: Profile) => {\n+                this.userState.setCurrentUserName(userProfile.firstName);\n+                sessionStorage.setItem('userId', userProfile.userId);\n                 if (params.accountStatus === 3) {\n                   void this.router.navigate(['/change-password']);\n                 } else {\n                   void this.router.navigate(['/coordinator']);\n+                  console.log('profile:', userProfile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdc169166a6ac323c0aa1b503223c00d47e038bc"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e70bf6cc3bf6f154388e64918a53812fb0e3470", "author": {"user": {"login": "firdosebtc1", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/1e70bf6cc3bf6f154388e64918a53812fb0e3470", "committedDate": "2020-09-21T10:15:29Z", "message": "code review comments has been resolved"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c97998d7ef5f4a8ac56d968576e875c687357514", "author": {"user": {"login": "firdosebtc1", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/c97998d7ef5f4a8ac56d968576e875c687357514", "committedDate": "2020-09-21T15:42:16Z", "message": "code review comments has been resolved"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ba5a56b0fca7a72824e56bfacc162e42c0270b3", "author": {"user": {"login": "rohithd-btc", "name": "Rohith D C"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/2ba5a56b0fca7a72824e56bfacc162e42c0270b3", "committedDate": "2020-09-21T15:47:13Z", "message": "build issue fix\n\nbuild issue fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45aa0e5333ea76c97a00f52c2fa20287cbd0b6c1", "author": {"user": {"login": "firdosebtc1", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/45aa0e5333ea76c97a00f52c2fa20287cbd0b6c1", "committedDate": "2020-09-21T16:17:30Z", "message": "test build issues fixed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzNjQ4OTky", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/928#pullrequestreview-493648992", "createdAt": "2020-09-22T16:34:51Z", "commit": {"oid": "2334fd799f4d92577bd72177898415ea4da2b93b"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2334fd799f4d92577bd72177898415ea4da2b93b", "author": {"user": {"login": "firdosebtc1", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/2334fd799f4d92577bd72177898415ea4da2b93b", "committedDate": "2020-09-22T13:49:25Z", "message": "Merge pull request #989 from GoogleCloudPlatform/participant-manager-webapp-change-password-implementation\n\nParticipant manager webapp change password implementation"}, "afterCommit": {"oid": "6683538f5889274672c19daea62f0048f3d0439b", "author": {"user": {"login": "rohithd-btc", "name": "Rohith D C"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/6683538f5889274672c19daea62f0048f3d0439b", "committedDate": "2020-09-22T16:20:21Z", "message": "Merge branch 'develop' into participant-manager-webapp-profile-page-integration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28bdb4193b005cfa22e1c4667ad9a0d4f9bcc235", "author": {"user": {"login": "prakashm181", "name": "Prakashm"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/28bdb4193b005cfa22e1c4667ad9a0d4f9bcc235", "committedDate": "2020-09-24T03:32:41Z", "message": "reverted unwanted commits"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6683538f5889274672c19daea62f0048f3d0439b", "author": {"user": {"login": "rohithd-btc", "name": "Rohith D C"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/6683538f5889274672c19daea62f0048f3d0439b", "committedDate": "2020-09-22T16:20:21Z", "message": "Merge branch 'develop' into participant-manager-webapp-profile-page-integration"}, "afterCommit": {"oid": "28bdb4193b005cfa22e1c4667ad9a0d4f9bcc235", "author": {"user": {"login": "prakashm181", "name": "Prakashm"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/28bdb4193b005cfa22e1c4667ad9a0d4f9bcc235", "committedDate": "2020-09-24T03:32:41Z", "message": "reverted unwanted commits"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1ODAxMzQ4", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/928#pullrequestreview-495801348", "createdAt": "2020-09-24T17:36:04Z", "commit": {"oid": "28bdb4193b005cfa22e1c4667ad9a0d4f9bcc235"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9f99f42383944b88f3f3fff963407539a2e8704", "author": {"user": {"login": "prakashm181", "name": "Prakashm"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/f9f99f42383944b88f3f3fff963407539a2e8704", "committedDate": "2020-09-25T06:19:59Z", "message": "Merge branch 'develop' into participant-manager-webapp-Login-Setup-implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9adc4658a52bd4cd79684e7b325110524011585", "author": {"user": {"login": "firdosebtc1", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/a9adc4658a52bd4cd79684e7b325110524011585", "committedDate": "2020-09-25T09:58:08Z", "message": "Merge pull request #991 from GoogleCloudPlatform/participant-manager-webapp-header-changes\n\nParticipant manager webapp header changes based on logged in user"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8dabc9e1ff9883b1c1757d07b3d21c5a06b9e0f2", "author": {"user": {"login": "firdosebtc1", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/8dabc9e1ff9883b1c1757d07b3d21c5a06b9e0f2", "committedDate": "2020-09-25T12:16:50Z", "message": "build issue fixed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4463fd6dd29fc9442f0877fad8c68c69a04dc212", "author": {"user": {"login": "firdosebtc1", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/4463fd6dd29fc9442f0877fad8c68c69a04dc212", "committedDate": "2020-09-25T12:17:29Z", "message": "Merge branch 'develop' into participant-manager-webapp-Login-Setup-implementation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2NDA4OTk0", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/928#pullrequestreview-496408994", "createdAt": "2020-09-25T13:16:59Z", "commit": {"oid": "4463fd6dd29fc9442f0877fad8c68c69a04dc212"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 509, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}