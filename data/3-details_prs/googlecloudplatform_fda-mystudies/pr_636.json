{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4OTA3MzA5", "number": 636, "title": "participant-manager /apps endpoint implementation", "bodyText": "participant-manager /apps endpoint implementation", "createdAt": "2020-07-14T14:12:45Z", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636", "merged": true, "mergeCommit": {"oid": "fc279c7f5d5386f3d9a32705ec71fdb32adfe716"}, "closed": true, "closedAt": "2020-08-11T05:36:34Z", "author": {"login": "monica-BTC"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc02qFTgH2gAyNDQ4OTA3MzA5OjQ0ODBkMjFkNzlmNDY5MDk3ZjlmMzM2ZDIzOGUzZjg3OWUwOTljNGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc9v_uGAH2gAyNDQ4OTA3MzA5OmVhNmZkOTEwNzE2ZDY5ODc3MTc1ZTBiMzcwNTg5NjMzMjEyZjZmZWM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4480d21d79f469097f9f336d238e3f879e099c4a", "author": {"user": {"login": "monica-BTC", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/4480d21d79f469097f9f336d238e3f879e099c4a", "committedDate": "2020-07-14T14:10:59Z", "message": "participant-manager /apps endpoint implementation\n\nparticipant-manager /apps endpoint implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50de9ea7377e1a1fdf5f6f9c65c8bae2519cb850", "author": {"user": {"login": "monica-BTC", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/50de9ea7377e1a1fdf5f6f9c65c8bae2519cb850", "committedDate": "2020-07-14T15:29:57Z", "message": "modified headers and removed .project file\n\nmodified headers and removed .project file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e5e79eda692937f94530d774a4eea3729f8212c", "author": {"user": {"login": "monica-BTC", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/8e5e79eda692937f94530d774a4eea3729f8212c", "committedDate": "2020-07-21T07:56:04Z", "message": "Reused CommonConstants\n\nReused CommonConstants"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNDM4NzY2", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#pullrequestreview-453438766", "createdAt": "2020-07-22T15:35:25Z", "commit": {"oid": "8e5e79eda692937f94530d774a4eea3729f8212c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNTozNToyNVrOG1oIGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzo0Mzo0OVrOG1tXKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg4NTE0NQ==", "bodyText": "any documentation on message codes with corresponding message strings?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#discussion_r458885145", "createdAt": "2020-07-22T15:35:25Z", "author": {"login": "saminguyen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/MessageCode.java", "diffHunk": "@@ -30,7 +30,7 @@\n \n   ADD_LOCATION_SUCCESS(HttpStatus.CREATED, \"MSG-0002\", \"New location added successfully\"),\n \n-  GET_APPS_SUCCESS(HttpStatus.OK, \"MSG-0001\", \"Get Apps successfull\");\n+  GET_APPS_SUCCESS(HttpStatus.OK, \"MSG-0003\", \"Get Apps successfull\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e5e79eda692937f94530d774a4eea3729f8212c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg5MTQ3MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private Long totalStudiesCount;\n          \n          \n            \n              private Long studiesCount;", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#discussion_r458891470", "createdAt": "2020-07-22T15:44:17Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/AppDetails.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.beans;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+@Getter\n+@Setter\n+public class AppDetails {\n+  private String id;\n+\n+  private String customId;\n+\n+  private String name;\n+\n+  private Long invitedCount;\n+\n+  private Long enrolledCount;\n+\n+  private Double enrollmentPercentage;\n+\n+  private Long totalStudiesCount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e5e79eda692937f94530d774a4eea3729f8212c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkzOTEyNg==", "bodyText": "You should probably extract variables for the key and values here (appEntity, studyEntity) for readability purposes", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#discussion_r458939126", "createdAt": "2020-07-22T16:51:13Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/AppServiceImpl.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.CLOSE_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.OPEN_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_AND_EDIT_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.VIEW_VALUE;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.AppDetails;\n+import com.google.cloud.healthcare.fdamystudies.beans.AppResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.model.AppEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.AppPermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantRegistrySiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SitePermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.AppPermissionRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantRegistrySiteRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantStudyRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.SitePermissionRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserDetailsRepository;\n+\n+@Service\n+public class AppServiceImpl implements AppService {\n+  private XLogger logger = XLoggerFactory.getXLogger(AppServiceImpl.class.getName());\n+\n+  @Autowired private AppPermissionRepository appPermissionRepository;\n+\n+  @Autowired private UserDetailsRepository userDetailsRepository;\n+\n+  @Autowired private ParticipantRegistrySiteRepository participantRegistrySiteRepository;\n+\n+  @Autowired private ParticipantStudyRepository participantStudiesRepository;\n+\n+  @Autowired private SitePermissionRepository sitePermissionRepository;\n+\n+  @Override\n+  @Transactional(readOnly = true)\n+  public AppResponse getApps(String userId) {\n+    logger.entry(\"getApps(userId)\");\n+\n+    List<SitePermissionEntity> sitePermissions =\n+        sitePermissionRepository.findSitePermissionByUserId(userId);\n+    if (CollectionUtils.isEmpty(sitePermissions)) {\n+      logger.exit(ErrorCode.APP_NOT_FOUND);\n+      return new AppResponse(ErrorCode.APP_NOT_FOUND);\n+    }\n+\n+    List<String> appIds = getAppIds(sitePermissions);\n+\n+    Map<String, AppPermissionEntity> appPermissionsByAppInfoId =\n+        getAppPermissionsMap(userId, appIds);\n+\n+    Map<String, Long> appIdbyUsersCount = userDetailsRepository.findAppUsersCount(appIds);\n+\n+    Map<AppEntity, Map<StudyEntity, List<SitePermissionEntity>>>\n+        sitePermissionByAppInfoAndStudyInfo = getPermissionByAppInfoAndStudyInfo(sitePermissions);\n+\n+    List<String> usersSiteIds = getUserSiteIds(sitePermissions);\n+\n+    List<ParticipantRegistrySiteEntity> participantRegistry =\n+        participantRegistrySiteRepository.findParticipantRegistryOfSites(usersSiteIds);\n+\n+    Map<String, Long> siteWithInvitedParticipantCountMap =\n+        getSiteWithInvitedParticipantCountMap(participantRegistry);\n+\n+    List<ParticipantStudyEntity> participantsEnrollments =\n+        participantStudiesRepository.findParticipantsEnrollmentsOfSites(usersSiteIds);\n+\n+    Map<String, Long> siteWithEnrolledParticipantCountMap =\n+        participantsEnrollments\n+            .stream()\n+            .collect(Collectors.groupingBy(e -> e.getSite().getId(), Collectors.counting()));\n+\n+    return prepareAppResponse(\n+        sitePermissions,\n+        appPermissionsByAppInfoId,\n+        appIdbyUsersCount,\n+        sitePermissionByAppInfoAndStudyInfo,\n+        siteWithInvitedParticipantCountMap,\n+        siteWithEnrolledParticipantCountMap);\n+  }\n+\n+  private AppResponse prepareAppResponse(\n+      List<SitePermissionEntity> sitePermissions,\n+      Map<String, AppPermissionEntity> appPermissionsByAppInfoId,\n+      Map<String, Long> appIdbyUsersCount,\n+      Map<AppEntity, Map<StudyEntity, List<SitePermissionEntity>>>\n+          sitePermissionByAppInfoAndStudyInfo,\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map<String, Long> siteWithEnrolledParticipantCountMap) {\n+    List<AppDetails> apps = new ArrayList<>();\n+    for (Map.Entry<AppEntity, Map<StudyEntity, List<SitePermissionEntity>>> entry :\n+        sitePermissionByAppInfoAndStudyInfo.entrySet()) {\n+      AppDetails appDetails = new AppDetails();\n+      appDetails.setId(entry.getKey().getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e5e79eda692937f94530d774a4eea3729f8212c"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0MzU1MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      appInvitedCount = appInvitedCount + siteWithInvitedParticipantCountMap.get(siteId);\n          \n          \n            \n                      appInvitedCount += siteWithInvitedParticipantCountMap.get(siteId);", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#discussion_r458943550", "createdAt": "2020-07-22T16:58:37Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/AppServiceImpl.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.CLOSE_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.OPEN_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_AND_EDIT_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.VIEW_VALUE;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.AppDetails;\n+import com.google.cloud.healthcare.fdamystudies.beans.AppResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.model.AppEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.AppPermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantRegistrySiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SitePermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.AppPermissionRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantRegistrySiteRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantStudyRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.SitePermissionRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserDetailsRepository;\n+\n+@Service\n+public class AppServiceImpl implements AppService {\n+  private XLogger logger = XLoggerFactory.getXLogger(AppServiceImpl.class.getName());\n+\n+  @Autowired private AppPermissionRepository appPermissionRepository;\n+\n+  @Autowired private UserDetailsRepository userDetailsRepository;\n+\n+  @Autowired private ParticipantRegistrySiteRepository participantRegistrySiteRepository;\n+\n+  @Autowired private ParticipantStudyRepository participantStudiesRepository;\n+\n+  @Autowired private SitePermissionRepository sitePermissionRepository;\n+\n+  @Override\n+  @Transactional(readOnly = true)\n+  public AppResponse getApps(String userId) {\n+    logger.entry(\"getApps(userId)\");\n+\n+    List<SitePermissionEntity> sitePermissions =\n+        sitePermissionRepository.findSitePermissionByUserId(userId);\n+    if (CollectionUtils.isEmpty(sitePermissions)) {\n+      logger.exit(ErrorCode.APP_NOT_FOUND);\n+      return new AppResponse(ErrorCode.APP_NOT_FOUND);\n+    }\n+\n+    List<String> appIds = getAppIds(sitePermissions);\n+\n+    Map<String, AppPermissionEntity> appPermissionsByAppInfoId =\n+        getAppPermissionsMap(userId, appIds);\n+\n+    Map<String, Long> appIdbyUsersCount = userDetailsRepository.findAppUsersCount(appIds);\n+\n+    Map<AppEntity, Map<StudyEntity, List<SitePermissionEntity>>>\n+        sitePermissionByAppInfoAndStudyInfo = getPermissionByAppInfoAndStudyInfo(sitePermissions);\n+\n+    List<String> usersSiteIds = getUserSiteIds(sitePermissions);\n+\n+    List<ParticipantRegistrySiteEntity> participantRegistry =\n+        participantRegistrySiteRepository.findParticipantRegistryOfSites(usersSiteIds);\n+\n+    Map<String, Long> siteWithInvitedParticipantCountMap =\n+        getSiteWithInvitedParticipantCountMap(participantRegistry);\n+\n+    List<ParticipantStudyEntity> participantsEnrollments =\n+        participantStudiesRepository.findParticipantsEnrollmentsOfSites(usersSiteIds);\n+\n+    Map<String, Long> siteWithEnrolledParticipantCountMap =\n+        participantsEnrollments\n+            .stream()\n+            .collect(Collectors.groupingBy(e -> e.getSite().getId(), Collectors.counting()));\n+\n+    return prepareAppResponse(\n+        sitePermissions,\n+        appPermissionsByAppInfoId,\n+        appIdbyUsersCount,\n+        sitePermissionByAppInfoAndStudyInfo,\n+        siteWithInvitedParticipantCountMap,\n+        siteWithEnrolledParticipantCountMap);\n+  }\n+\n+  private AppResponse prepareAppResponse(\n+      List<SitePermissionEntity> sitePermissions,\n+      Map<String, AppPermissionEntity> appPermissionsByAppInfoId,\n+      Map<String, Long> appIdbyUsersCount,\n+      Map<AppEntity, Map<StudyEntity, List<SitePermissionEntity>>>\n+          sitePermissionByAppInfoAndStudyInfo,\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map<String, Long> siteWithEnrolledParticipantCountMap) {\n+    List<AppDetails> apps = new ArrayList<>();\n+    for (Map.Entry<AppEntity, Map<StudyEntity, List<SitePermissionEntity>>> entry :\n+        sitePermissionByAppInfoAndStudyInfo.entrySet()) {\n+      AppDetails appDetails = new AppDetails();\n+      appDetails.setId(entry.getKey().getId());\n+      appDetails.setCustomId(entry.getKey().getAppId());\n+      appDetails.setTotalStudiesCount((long) entry.getValue().size());\n+      appDetails.setName(entry.getKey().getAppName());\n+      appDetails.setAppUsersCount(appIdbyUsersCount.get(entry.getKey().getId()));\n+      appDetails.setAppUsersCount(0L);\n+\n+      if (appPermissionsByAppInfoId.get(entry.getKey().getId()) != null) {\n+        Integer appEditPermission = appPermissionsByAppInfoId.get(entry.getKey().getId()).getEdit();\n+        appDetails.setAppPermission(\n+            appEditPermission == VIEW_VALUE ? READ_PERMISSION : READ_AND_EDIT_PERMISSION);\n+      }\n+\n+      calculateEnrollmentPercentage(\n+          siteWithInvitedParticipantCountMap,\n+          siteWithEnrolledParticipantCountMap,\n+          entry,\n+          appDetails);\n+      apps.add(appDetails);\n+    }\n+\n+    Map<StudyEntity, List<SitePermissionEntity>> studyPermissionMap =\n+        sitePermissions.stream().collect(Collectors.groupingBy(SitePermissionEntity::getStudy));\n+\n+    AppResponse appResponse =\n+        new AppResponse(MessageCode.GET_APPS_SUCCESS, apps, studyPermissionMap.size());\n+    logger.exit(String.format(\"total apps=%d\", appResponse.getApps().size()));\n+    return appResponse;\n+  }\n+\n+  private void calculateEnrollmentPercentage(\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map<String, Long> siteWithEnrolledParticipantCountMap,\n+      Map.Entry<AppEntity, Map<StudyEntity, List<SitePermissionEntity>>> entry,\n+      AppDetails appDetails) {\n+    long appInvitedCount = 0L;\n+    long appEnrolledCount = 0L;\n+    for (Map.Entry<StudyEntity, List<SitePermissionEntity>> studyEntry :\n+        entry.getValue().entrySet()) {\n+      String studyType = studyEntry.getKey().getType();\n+      for (SitePermissionEntity sitePermission : studyEntry.getValue()) {\n+        String siteId = sitePermission.getSite().getId();\n+        if (siteWithInvitedParticipantCountMap.get(siteId) != null\n+            && CLOSE_STUDY.equals(studyType)) {\n+          appInvitedCount = appInvitedCount + siteWithInvitedParticipantCountMap.get(siteId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e5e79eda692937f94530d774a4eea3729f8212c"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0MzczOQ==", "bodyText": "same as above", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#discussion_r458943739", "createdAt": "2020-07-22T16:58:54Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/AppServiceImpl.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.CLOSE_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.OPEN_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_AND_EDIT_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.VIEW_VALUE;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.AppDetails;\n+import com.google.cloud.healthcare.fdamystudies.beans.AppResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.model.AppEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.AppPermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantRegistrySiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SitePermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.AppPermissionRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantRegistrySiteRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantStudyRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.SitePermissionRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserDetailsRepository;\n+\n+@Service\n+public class AppServiceImpl implements AppService {\n+  private XLogger logger = XLoggerFactory.getXLogger(AppServiceImpl.class.getName());\n+\n+  @Autowired private AppPermissionRepository appPermissionRepository;\n+\n+  @Autowired private UserDetailsRepository userDetailsRepository;\n+\n+  @Autowired private ParticipantRegistrySiteRepository participantRegistrySiteRepository;\n+\n+  @Autowired private ParticipantStudyRepository participantStudiesRepository;\n+\n+  @Autowired private SitePermissionRepository sitePermissionRepository;\n+\n+  @Override\n+  @Transactional(readOnly = true)\n+  public AppResponse getApps(String userId) {\n+    logger.entry(\"getApps(userId)\");\n+\n+    List<SitePermissionEntity> sitePermissions =\n+        sitePermissionRepository.findSitePermissionByUserId(userId);\n+    if (CollectionUtils.isEmpty(sitePermissions)) {\n+      logger.exit(ErrorCode.APP_NOT_FOUND);\n+      return new AppResponse(ErrorCode.APP_NOT_FOUND);\n+    }\n+\n+    List<String> appIds = getAppIds(sitePermissions);\n+\n+    Map<String, AppPermissionEntity> appPermissionsByAppInfoId =\n+        getAppPermissionsMap(userId, appIds);\n+\n+    Map<String, Long> appIdbyUsersCount = userDetailsRepository.findAppUsersCount(appIds);\n+\n+    Map<AppEntity, Map<StudyEntity, List<SitePermissionEntity>>>\n+        sitePermissionByAppInfoAndStudyInfo = getPermissionByAppInfoAndStudyInfo(sitePermissions);\n+\n+    List<String> usersSiteIds = getUserSiteIds(sitePermissions);\n+\n+    List<ParticipantRegistrySiteEntity> participantRegistry =\n+        participantRegistrySiteRepository.findParticipantRegistryOfSites(usersSiteIds);\n+\n+    Map<String, Long> siteWithInvitedParticipantCountMap =\n+        getSiteWithInvitedParticipantCountMap(participantRegistry);\n+\n+    List<ParticipantStudyEntity> participantsEnrollments =\n+        participantStudiesRepository.findParticipantsEnrollmentsOfSites(usersSiteIds);\n+\n+    Map<String, Long> siteWithEnrolledParticipantCountMap =\n+        participantsEnrollments\n+            .stream()\n+            .collect(Collectors.groupingBy(e -> e.getSite().getId(), Collectors.counting()));\n+\n+    return prepareAppResponse(\n+        sitePermissions,\n+        appPermissionsByAppInfoId,\n+        appIdbyUsersCount,\n+        sitePermissionByAppInfoAndStudyInfo,\n+        siteWithInvitedParticipantCountMap,\n+        siteWithEnrolledParticipantCountMap);\n+  }\n+\n+  private AppResponse prepareAppResponse(\n+      List<SitePermissionEntity> sitePermissions,\n+      Map<String, AppPermissionEntity> appPermissionsByAppInfoId,\n+      Map<String, Long> appIdbyUsersCount,\n+      Map<AppEntity, Map<StudyEntity, List<SitePermissionEntity>>>\n+          sitePermissionByAppInfoAndStudyInfo,\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map<String, Long> siteWithEnrolledParticipantCountMap) {\n+    List<AppDetails> apps = new ArrayList<>();\n+    for (Map.Entry<AppEntity, Map<StudyEntity, List<SitePermissionEntity>>> entry :\n+        sitePermissionByAppInfoAndStudyInfo.entrySet()) {\n+      AppDetails appDetails = new AppDetails();\n+      appDetails.setId(entry.getKey().getId());\n+      appDetails.setCustomId(entry.getKey().getAppId());\n+      appDetails.setTotalStudiesCount((long) entry.getValue().size());\n+      appDetails.setName(entry.getKey().getAppName());\n+      appDetails.setAppUsersCount(appIdbyUsersCount.get(entry.getKey().getId()));\n+      appDetails.setAppUsersCount(0L);\n+\n+      if (appPermissionsByAppInfoId.get(entry.getKey().getId()) != null) {\n+        Integer appEditPermission = appPermissionsByAppInfoId.get(entry.getKey().getId()).getEdit();\n+        appDetails.setAppPermission(\n+            appEditPermission == VIEW_VALUE ? READ_PERMISSION : READ_AND_EDIT_PERMISSION);\n+      }\n+\n+      calculateEnrollmentPercentage(\n+          siteWithInvitedParticipantCountMap,\n+          siteWithEnrolledParticipantCountMap,\n+          entry,\n+          appDetails);\n+      apps.add(appDetails);\n+    }\n+\n+    Map<StudyEntity, List<SitePermissionEntity>> studyPermissionMap =\n+        sitePermissions.stream().collect(Collectors.groupingBy(SitePermissionEntity::getStudy));\n+\n+    AppResponse appResponse =\n+        new AppResponse(MessageCode.GET_APPS_SUCCESS, apps, studyPermissionMap.size());\n+    logger.exit(String.format(\"total apps=%d\", appResponse.getApps().size()));\n+    return appResponse;\n+  }\n+\n+  private void calculateEnrollmentPercentage(\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map<String, Long> siteWithEnrolledParticipantCountMap,\n+      Map.Entry<AppEntity, Map<StudyEntity, List<SitePermissionEntity>>> entry,\n+      AppDetails appDetails) {\n+    long appInvitedCount = 0L;\n+    long appEnrolledCount = 0L;\n+    for (Map.Entry<StudyEntity, List<SitePermissionEntity>> studyEntry :\n+        entry.getValue().entrySet()) {\n+      String studyType = studyEntry.getKey().getType();\n+      for (SitePermissionEntity sitePermission : studyEntry.getValue()) {\n+        String siteId = sitePermission.getSite().getId();\n+        if (siteWithInvitedParticipantCountMap.get(siteId) != null\n+            && CLOSE_STUDY.equals(studyType)) {\n+          appInvitedCount = appInvitedCount + siteWithInvitedParticipantCountMap.get(siteId);\n+        }\n+\n+        if (OPEN_STUDY.equals(studyType)) {\n+          appInvitedCount = appInvitedCount + sitePermission.getSite().getTargetEnrollment();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e5e79eda692937f94530d774a4eea3729f8212c"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0MzgzMQ==", "bodyText": "same as above", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#discussion_r458943831", "createdAt": "2020-07-22T16:59:03Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/AppServiceImpl.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.CLOSE_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.OPEN_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_AND_EDIT_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.VIEW_VALUE;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.AppDetails;\n+import com.google.cloud.healthcare.fdamystudies.beans.AppResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.model.AppEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.AppPermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantRegistrySiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SitePermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.AppPermissionRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantRegistrySiteRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantStudyRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.SitePermissionRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserDetailsRepository;\n+\n+@Service\n+public class AppServiceImpl implements AppService {\n+  private XLogger logger = XLoggerFactory.getXLogger(AppServiceImpl.class.getName());\n+\n+  @Autowired private AppPermissionRepository appPermissionRepository;\n+\n+  @Autowired private UserDetailsRepository userDetailsRepository;\n+\n+  @Autowired private ParticipantRegistrySiteRepository participantRegistrySiteRepository;\n+\n+  @Autowired private ParticipantStudyRepository participantStudiesRepository;\n+\n+  @Autowired private SitePermissionRepository sitePermissionRepository;\n+\n+  @Override\n+  @Transactional(readOnly = true)\n+  public AppResponse getApps(String userId) {\n+    logger.entry(\"getApps(userId)\");\n+\n+    List<SitePermissionEntity> sitePermissions =\n+        sitePermissionRepository.findSitePermissionByUserId(userId);\n+    if (CollectionUtils.isEmpty(sitePermissions)) {\n+      logger.exit(ErrorCode.APP_NOT_FOUND);\n+      return new AppResponse(ErrorCode.APP_NOT_FOUND);\n+    }\n+\n+    List<String> appIds = getAppIds(sitePermissions);\n+\n+    Map<String, AppPermissionEntity> appPermissionsByAppInfoId =\n+        getAppPermissionsMap(userId, appIds);\n+\n+    Map<String, Long> appIdbyUsersCount = userDetailsRepository.findAppUsersCount(appIds);\n+\n+    Map<AppEntity, Map<StudyEntity, List<SitePermissionEntity>>>\n+        sitePermissionByAppInfoAndStudyInfo = getPermissionByAppInfoAndStudyInfo(sitePermissions);\n+\n+    List<String> usersSiteIds = getUserSiteIds(sitePermissions);\n+\n+    List<ParticipantRegistrySiteEntity> participantRegistry =\n+        participantRegistrySiteRepository.findParticipantRegistryOfSites(usersSiteIds);\n+\n+    Map<String, Long> siteWithInvitedParticipantCountMap =\n+        getSiteWithInvitedParticipantCountMap(participantRegistry);\n+\n+    List<ParticipantStudyEntity> participantsEnrollments =\n+        participantStudiesRepository.findParticipantsEnrollmentsOfSites(usersSiteIds);\n+\n+    Map<String, Long> siteWithEnrolledParticipantCountMap =\n+        participantsEnrollments\n+            .stream()\n+            .collect(Collectors.groupingBy(e -> e.getSite().getId(), Collectors.counting()));\n+\n+    return prepareAppResponse(\n+        sitePermissions,\n+        appPermissionsByAppInfoId,\n+        appIdbyUsersCount,\n+        sitePermissionByAppInfoAndStudyInfo,\n+        siteWithInvitedParticipantCountMap,\n+        siteWithEnrolledParticipantCountMap);\n+  }\n+\n+  private AppResponse prepareAppResponse(\n+      List<SitePermissionEntity> sitePermissions,\n+      Map<String, AppPermissionEntity> appPermissionsByAppInfoId,\n+      Map<String, Long> appIdbyUsersCount,\n+      Map<AppEntity, Map<StudyEntity, List<SitePermissionEntity>>>\n+          sitePermissionByAppInfoAndStudyInfo,\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map<String, Long> siteWithEnrolledParticipantCountMap) {\n+    List<AppDetails> apps = new ArrayList<>();\n+    for (Map.Entry<AppEntity, Map<StudyEntity, List<SitePermissionEntity>>> entry :\n+        sitePermissionByAppInfoAndStudyInfo.entrySet()) {\n+      AppDetails appDetails = new AppDetails();\n+      appDetails.setId(entry.getKey().getId());\n+      appDetails.setCustomId(entry.getKey().getAppId());\n+      appDetails.setTotalStudiesCount((long) entry.getValue().size());\n+      appDetails.setName(entry.getKey().getAppName());\n+      appDetails.setAppUsersCount(appIdbyUsersCount.get(entry.getKey().getId()));\n+      appDetails.setAppUsersCount(0L);\n+\n+      if (appPermissionsByAppInfoId.get(entry.getKey().getId()) != null) {\n+        Integer appEditPermission = appPermissionsByAppInfoId.get(entry.getKey().getId()).getEdit();\n+        appDetails.setAppPermission(\n+            appEditPermission == VIEW_VALUE ? READ_PERMISSION : READ_AND_EDIT_PERMISSION);\n+      }\n+\n+      calculateEnrollmentPercentage(\n+          siteWithInvitedParticipantCountMap,\n+          siteWithEnrolledParticipantCountMap,\n+          entry,\n+          appDetails);\n+      apps.add(appDetails);\n+    }\n+\n+    Map<StudyEntity, List<SitePermissionEntity>> studyPermissionMap =\n+        sitePermissions.stream().collect(Collectors.groupingBy(SitePermissionEntity::getStudy));\n+\n+    AppResponse appResponse =\n+        new AppResponse(MessageCode.GET_APPS_SUCCESS, apps, studyPermissionMap.size());\n+    logger.exit(String.format(\"total apps=%d\", appResponse.getApps().size()));\n+    return appResponse;\n+  }\n+\n+  private void calculateEnrollmentPercentage(\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map<String, Long> siteWithEnrolledParticipantCountMap,\n+      Map.Entry<AppEntity, Map<StudyEntity, List<SitePermissionEntity>>> entry,\n+      AppDetails appDetails) {\n+    long appInvitedCount = 0L;\n+    long appEnrolledCount = 0L;\n+    for (Map.Entry<StudyEntity, List<SitePermissionEntity>> studyEntry :\n+        entry.getValue().entrySet()) {\n+      String studyType = studyEntry.getKey().getType();\n+      for (SitePermissionEntity sitePermission : studyEntry.getValue()) {\n+        String siteId = sitePermission.getSite().getId();\n+        if (siteWithInvitedParticipantCountMap.get(siteId) != null\n+            && CLOSE_STUDY.equals(studyType)) {\n+          appInvitedCount = appInvitedCount + siteWithInvitedParticipantCountMap.get(siteId);\n+        }\n+\n+        if (OPEN_STUDY.equals(studyType)) {\n+          appInvitedCount = appInvitedCount + sitePermission.getSite().getTargetEnrollment();\n+        }\n+\n+        if (siteWithEnrolledParticipantCountMap.get(siteId) != null) {\n+          appEnrolledCount = appEnrolledCount + siteWithEnrolledParticipantCountMap.get(siteId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e5e79eda692937f94530d774a4eea3729f8212c"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0NDY5MA==", "bodyText": "move appDetails to be the first argument", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#discussion_r458944690", "createdAt": "2020-07-22T17:00:22Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/AppServiceImpl.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.CLOSE_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.OPEN_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_AND_EDIT_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.VIEW_VALUE;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.AppDetails;\n+import com.google.cloud.healthcare.fdamystudies.beans.AppResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.model.AppEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.AppPermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantRegistrySiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SitePermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.AppPermissionRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantRegistrySiteRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantStudyRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.SitePermissionRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserDetailsRepository;\n+\n+@Service\n+public class AppServiceImpl implements AppService {\n+  private XLogger logger = XLoggerFactory.getXLogger(AppServiceImpl.class.getName());\n+\n+  @Autowired private AppPermissionRepository appPermissionRepository;\n+\n+  @Autowired private UserDetailsRepository userDetailsRepository;\n+\n+  @Autowired private ParticipantRegistrySiteRepository participantRegistrySiteRepository;\n+\n+  @Autowired private ParticipantStudyRepository participantStudiesRepository;\n+\n+  @Autowired private SitePermissionRepository sitePermissionRepository;\n+\n+  @Override\n+  @Transactional(readOnly = true)\n+  public AppResponse getApps(String userId) {\n+    logger.entry(\"getApps(userId)\");\n+\n+    List<SitePermissionEntity> sitePermissions =\n+        sitePermissionRepository.findSitePermissionByUserId(userId);\n+    if (CollectionUtils.isEmpty(sitePermissions)) {\n+      logger.exit(ErrorCode.APP_NOT_FOUND);\n+      return new AppResponse(ErrorCode.APP_NOT_FOUND);\n+    }\n+\n+    List<String> appIds = getAppIds(sitePermissions);\n+\n+    Map<String, AppPermissionEntity> appPermissionsByAppInfoId =\n+        getAppPermissionsMap(userId, appIds);\n+\n+    Map<String, Long> appIdbyUsersCount = userDetailsRepository.findAppUsersCount(appIds);\n+\n+    Map<AppEntity, Map<StudyEntity, List<SitePermissionEntity>>>\n+        sitePermissionByAppInfoAndStudyInfo = getPermissionByAppInfoAndStudyInfo(sitePermissions);\n+\n+    List<String> usersSiteIds = getUserSiteIds(sitePermissions);\n+\n+    List<ParticipantRegistrySiteEntity> participantRegistry =\n+        participantRegistrySiteRepository.findParticipantRegistryOfSites(usersSiteIds);\n+\n+    Map<String, Long> siteWithInvitedParticipantCountMap =\n+        getSiteWithInvitedParticipantCountMap(participantRegistry);\n+\n+    List<ParticipantStudyEntity> participantsEnrollments =\n+        participantStudiesRepository.findParticipantsEnrollmentsOfSites(usersSiteIds);\n+\n+    Map<String, Long> siteWithEnrolledParticipantCountMap =\n+        participantsEnrollments\n+            .stream()\n+            .collect(Collectors.groupingBy(e -> e.getSite().getId(), Collectors.counting()));\n+\n+    return prepareAppResponse(\n+        sitePermissions,\n+        appPermissionsByAppInfoId,\n+        appIdbyUsersCount,\n+        sitePermissionByAppInfoAndStudyInfo,\n+        siteWithInvitedParticipantCountMap,\n+        siteWithEnrolledParticipantCountMap);\n+  }\n+\n+  private AppResponse prepareAppResponse(\n+      List<SitePermissionEntity> sitePermissions,\n+      Map<String, AppPermissionEntity> appPermissionsByAppInfoId,\n+      Map<String, Long> appIdbyUsersCount,\n+      Map<AppEntity, Map<StudyEntity, List<SitePermissionEntity>>>\n+          sitePermissionByAppInfoAndStudyInfo,\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map<String, Long> siteWithEnrolledParticipantCountMap) {\n+    List<AppDetails> apps = new ArrayList<>();\n+    for (Map.Entry<AppEntity, Map<StudyEntity, List<SitePermissionEntity>>> entry :\n+        sitePermissionByAppInfoAndStudyInfo.entrySet()) {\n+      AppDetails appDetails = new AppDetails();\n+      appDetails.setId(entry.getKey().getId());\n+      appDetails.setCustomId(entry.getKey().getAppId());\n+      appDetails.setTotalStudiesCount((long) entry.getValue().size());\n+      appDetails.setName(entry.getKey().getAppName());\n+      appDetails.setAppUsersCount(appIdbyUsersCount.get(entry.getKey().getId()));\n+      appDetails.setAppUsersCount(0L);\n+\n+      if (appPermissionsByAppInfoId.get(entry.getKey().getId()) != null) {\n+        Integer appEditPermission = appPermissionsByAppInfoId.get(entry.getKey().getId()).getEdit();\n+        appDetails.setAppPermission(\n+            appEditPermission == VIEW_VALUE ? READ_PERMISSION : READ_AND_EDIT_PERMISSION);\n+      }\n+\n+      calculateEnrollmentPercentage(\n+          siteWithInvitedParticipantCountMap,\n+          siteWithEnrolledParticipantCountMap,\n+          entry,\n+          appDetails);\n+      apps.add(appDetails);\n+    }\n+\n+    Map<StudyEntity, List<SitePermissionEntity>> studyPermissionMap =\n+        sitePermissions.stream().collect(Collectors.groupingBy(SitePermissionEntity::getStudy));\n+\n+    AppResponse appResponse =\n+        new AppResponse(MessageCode.GET_APPS_SUCCESS, apps, studyPermissionMap.size());\n+    logger.exit(String.format(\"total apps=%d\", appResponse.getApps().size()));\n+    return appResponse;\n+  }\n+\n+  private void calculateEnrollmentPercentage(\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map<String, Long> siteWithEnrolledParticipantCountMap,\n+      Map.Entry<AppEntity, Map<StudyEntity, List<SitePermissionEntity>>> entry,\n+      AppDetails appDetails) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e5e79eda692937f94530d774a4eea3729f8212c"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3MDM4NA==", "bodyText": "move this to TestDataHelper?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#discussion_r458970384", "createdAt": "2020-07-22T17:42:55Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/AppControllerTest.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.Collections;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.MediaType;\n+\n+import com.google.cloud.healthcare.fdamystudies.common.ApiEndpoint;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.IdGenerator;\n+import com.google.cloud.healthcare.fdamystudies.common.TestConstants;\n+import com.google.cloud.healthcare.fdamystudies.helper.TestDataHelper;\n+import com.google.cloud.healthcare.fdamystudies.model.AppEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantRegistrySiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetailsEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.UserRegAdminEntity;\n+import com.google.cloud.healthcare.fdamystudies.service.AppService;\n+\n+public class AppControllerTest extends BaseMockIT {\n+\n+  @Autowired private AppController controller;\n+\n+  @Autowired private AppService appService;\n+\n+  @Autowired private TestDataHelper testDataHelper;\n+\n+  private ParticipantRegistrySiteEntity participantRegistrySiteEntity;\n+  private ParticipantStudyEntity participantStudyEntity;\n+  private UserRegAdminEntity userRegAdminEntity;\n+  private AppEntity appEntity;\n+  private StudyEntity studyEntity;\n+  private SiteEntity siteEntity;\n+  private UserDetailsEntity userDetailsEntity;\n+\n+  @BeforeEach\n+  public void setUp() {\n+    userRegAdminEntity = testDataHelper.createUserRegAdminEntity();\n+    appEntity = testDataHelper.createAppEntity(userRegAdminEntity);\n+    studyEntity = testDataHelper.createStudyEntity(userRegAdminEntity, appEntity);\n+    siteEntity = testDataHelper.createSiteEntity(studyEntity, userRegAdminEntity, appEntity);\n+    userDetailsEntity = testDataHelper.createUserDetails(appEntity);\n+    participantRegistrySiteEntity =\n+        testDataHelper.createParticipantRegistrySite(siteEntity, studyEntity);\n+    participantStudyEntity =\n+        testDataHelper.createParticipantStudyEntity(\n+            siteEntity, studyEntity, participantRegistrySiteEntity);\n+  }\n+\n+  @Test\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(mockMvc);\n+    assertNotNull(appService);\n+  }\n+\n+  @Test\n+  public void shouldReturnAppsRegisteredByUser() throws Exception {\n+    HttpHeaders headers = newCommonHeaders();\n+    headers.set(TestConstants.USER_ID_HEADER, userRegAdminEntity.getId());\n+    mockMvc\n+        .perform(get(ApiEndpoint.GET_APPS.getPath()).headers(headers).contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(jsonPath(\"$.apps\").isArray())\n+        .andExpect(jsonPath(\"$.studyPermissionCount\").value(1));\n+  }\n+\n+  @Test\n+  public void shouldReturnBadRequestForGetApps() throws Exception {\n+    HttpHeaders headers = newCommonHeaders();\n+    mockMvc\n+        .perform(get(ApiEndpoint.GET_APPS.getPath()).headers(headers).contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isBadRequest())\n+        .andExpect(jsonPath(\"$.violations\").isArray())\n+        .andExpect(jsonPath(\"$.violations[0].path\").value(\"userId\"))\n+        .andExpect(jsonPath(\"$.violations[0].message\").value(\"header is required\"));\n+  }\n+\n+  @Test\n+  public void shouldNotReturnApp() throws Exception {\n+    HttpHeaders headers = newCommonHeaders();\n+    headers.add(TestConstants.USER_ID_HEADER, IdGenerator.id());\n+\n+    mockMvc\n+        .perform(get(ApiEndpoint.GET_APPS.getPath()).headers(headers).contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isNotFound())\n+        .andExpect(jsonPath(\"$.error_description\").value(ErrorCode.APP_NOT_FOUND.getDescription()));\n+  }\n+\n+  public HttpHeaders newCommonHeaders() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e5e79eda692937f94530d774a4eea3729f8212c"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3MDkyMw==", "bodyText": "We should also check for the actual value of the apps array", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#discussion_r458970923", "createdAt": "2020-07-22T17:43:49Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/AppControllerTest.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.Collections;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.MediaType;\n+\n+import com.google.cloud.healthcare.fdamystudies.common.ApiEndpoint;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.IdGenerator;\n+import com.google.cloud.healthcare.fdamystudies.common.TestConstants;\n+import com.google.cloud.healthcare.fdamystudies.helper.TestDataHelper;\n+import com.google.cloud.healthcare.fdamystudies.model.AppEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantRegistrySiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetailsEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.UserRegAdminEntity;\n+import com.google.cloud.healthcare.fdamystudies.service.AppService;\n+\n+public class AppControllerTest extends BaseMockIT {\n+\n+  @Autowired private AppController controller;\n+\n+  @Autowired private AppService appService;\n+\n+  @Autowired private TestDataHelper testDataHelper;\n+\n+  private ParticipantRegistrySiteEntity participantRegistrySiteEntity;\n+  private ParticipantStudyEntity participantStudyEntity;\n+  private UserRegAdminEntity userRegAdminEntity;\n+  private AppEntity appEntity;\n+  private StudyEntity studyEntity;\n+  private SiteEntity siteEntity;\n+  private UserDetailsEntity userDetailsEntity;\n+\n+  @BeforeEach\n+  public void setUp() {\n+    userRegAdminEntity = testDataHelper.createUserRegAdminEntity();\n+    appEntity = testDataHelper.createAppEntity(userRegAdminEntity);\n+    studyEntity = testDataHelper.createStudyEntity(userRegAdminEntity, appEntity);\n+    siteEntity = testDataHelper.createSiteEntity(studyEntity, userRegAdminEntity, appEntity);\n+    userDetailsEntity = testDataHelper.createUserDetails(appEntity);\n+    participantRegistrySiteEntity =\n+        testDataHelper.createParticipantRegistrySite(siteEntity, studyEntity);\n+    participantStudyEntity =\n+        testDataHelper.createParticipantStudyEntity(\n+            siteEntity, studyEntity, participantRegistrySiteEntity);\n+  }\n+\n+  @Test\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(mockMvc);\n+    assertNotNull(appService);\n+  }\n+\n+  @Test\n+  public void shouldReturnAppsRegisteredByUser() throws Exception {\n+    HttpHeaders headers = newCommonHeaders();\n+    headers.set(TestConstants.USER_ID_HEADER, userRegAdminEntity.getId());\n+    mockMvc\n+        .perform(get(ApiEndpoint.GET_APPS.getPath()).headers(headers).contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(jsonPath(\"$.apps\").isArray())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e5e79eda692937f94530d774a4eea3729f8212c"}, "originalPosition": 86}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55204a27d44d6c5058352e8e39b8f8885b08bac2", "author": {"user": {"login": "monica-BTC", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/55204a27d44d6c5058352e8e39b8f8885b08bac2", "committedDate": "2020-07-23T11:41:11Z", "message": "Fixed PR comments\n\nFixed PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f31710c86e8f82aeba83cf10ded214df7d54d4e3", "author": {"user": {"login": "monica-BTC", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/f31710c86e8f82aeba83cf10ded214df7d54d4e3", "committedDate": "2020-07-23T11:58:38Z", "message": "Added @ComponentScan to BaseMockIT to fix build issue\n\nAdded @ComponentScan to BaseMockIT to fix build issue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0Mzg2Mzg4", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#pullrequestreview-454386388", "createdAt": "2020-07-23T18:21:02Z", "commit": {"oid": "f31710c86e8f82aeba83cf10ded214df7d54d4e3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODoyMTowMlrOG2WUbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODoyMTo1MVrOG2WWMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0MTk2NA==", "bodyText": "You should check for size of apps array.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#discussion_r459641964", "createdAt": "2020-07-23T18:21:02Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/AppControllerTest.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.Collections;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.MediaType;\n+\n+import com.google.cloud.healthcare.fdamystudies.common.ApiEndpoint;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.IdGenerator;\n+import com.google.cloud.healthcare.fdamystudies.common.TestConstants;\n+import com.google.cloud.healthcare.fdamystudies.helper.TestDataHelper;\n+import com.google.cloud.healthcare.fdamystudies.model.AppEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantRegistrySiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetailsEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.UserRegAdminEntity;\n+import com.google.cloud.healthcare.fdamystudies.service.AppService;\n+\n+public class AppControllerTest extends BaseMockIT {\n+\n+  @Autowired private AppController controller;\n+\n+  @Autowired private AppService appService;\n+\n+  @Autowired private TestDataHelper testDataHelper;\n+\n+  private ParticipantRegistrySiteEntity participantRegistrySiteEntity;\n+  private ParticipantStudyEntity participantStudyEntity;\n+  private UserRegAdminEntity userRegAdminEntity;\n+  private AppEntity appEntity;\n+  private StudyEntity studyEntity;\n+  private SiteEntity siteEntity;\n+  private UserDetailsEntity userDetailsEntity;\n+\n+  @BeforeEach\n+  public void setUp() {\n+    userRegAdminEntity = testDataHelper.createUserRegAdminEntity();\n+    appEntity = testDataHelper.createAppEntity(userRegAdminEntity);\n+    studyEntity = testDataHelper.createStudyEntity(userRegAdminEntity, appEntity);\n+    siteEntity = testDataHelper.createSiteEntity(studyEntity, userRegAdminEntity, appEntity);\n+    userDetailsEntity = testDataHelper.createUserDetails(appEntity);\n+    participantRegistrySiteEntity =\n+        testDataHelper.createParticipantRegistrySite(siteEntity, studyEntity);\n+    participantStudyEntity =\n+        testDataHelper.createParticipantStudyEntity(\n+            siteEntity, studyEntity, participantRegistrySiteEntity);\n+  }\n+\n+  @Test\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(mockMvc);\n+    assertNotNull(appService);\n+  }\n+\n+  @Test\n+  public void shouldReturnAppsRegisteredByUser() throws Exception {\n+    HttpHeaders headers = newCommonHeaders();\n+    headers.set(TestConstants.USER_ID_HEADER, userRegAdminEntity.getId());\n+    mockMvc\n+        .perform(get(ApiEndpoint.GET_APPS.getPath()).headers(headers).contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(jsonPath(\"$.apps\").isArray())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3MDkyMw=="}, "originalCommit": {"oid": "8e5e79eda692937f94530d774a4eea3729f8212c"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0MjQxNw==", "bodyText": "Similar comment to the other PR. Maybe look into a more verbose name for this field.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#discussion_r459642417", "createdAt": "2020-07-23T18:21:51Z", "author": {"login": "saminguyen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/model/UserDetailsEntity.java", "diffHunk": "@@ -60,8 +59,12 @@\n   @Column(name = \"last_name\")\n   private String lastName;\n \n-  @Column(name = \"_ts\")\n-  private Date ts;\n+  @Column(\n+      name = \"timestamp\",\n+      insertable = false,\n+      updatable = false,\n+      columnDefinition = \"TIMESTAMP DEFAULT CURRENT_TIMESTAMP\")\n+  private Timestamp timestamp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f31710c86e8f82aeba83cf10ded214df7d54d4e3"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8707b824b67d08fbf233a60f6f1783ed724ca8d", "author": {"user": {"login": "monica-BTC", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/b8707b824b67d08fbf233a60f6f1783ed724ca8d", "committedDate": "2020-07-24T05:09:14Z", "message": "Fixed PR comments\n\nFixed PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2Nzc3Njk5", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#pullrequestreview-456777699", "createdAt": "2020-07-28T15:55:16Z", "commit": {"oid": "b8707b824b67d08fbf233a60f6f1783ed724ca8d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32fd549ec98225a6f1671279d20ff418a06c16cc", "author": {"user": {"login": "monica-BTC", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/32fd549ec98225a6f1671279d20ff418a06c16cc", "committedDate": "2020-08-06T10:52:54Z", "message": "Added required condition\n\nAdded required condition"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNjkzNDYy", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#pullrequestreview-462693462", "createdAt": "2020-08-06T16:45:57Z", "commit": {"oid": "32fd549ec98225a6f1671279d20ff418a06c16cc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNjo0NTo1N1rOG87tWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNjo0NTo1N1rOG87tWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU0NjAxMA==", "bodyText": "nit: have fields with Setter Getter here instead.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#discussion_r466546010", "createdAt": "2020-08-06T16:45:57Z", "author": {"login": "saminguyen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/model/AppCount.java", "diffHunk": "@@ -0,0 +1,15 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+package com.google.cloud.healthcare.fdamystudies.model;\n+\n+public interface AppCount {\n+\n+  String getAppId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32fd549ec98225a6f1671279d20ff418a06c16cc"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNjgyNTEx", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#pullrequestreview-463682511", "createdAt": "2020-08-07T23:09:18Z", "commit": {"oid": "32fd549ec98225a6f1671279d20ff418a06c16cc"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c923111d708b47a48d2b3f6ab543b0ffd14b0c2", "author": {"user": {"login": "monica-BTC", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/5c923111d708b47a48d2b3f6ab543b0ffd14b0c2", "committedDate": "2020-08-11T04:22:54Z", "message": "Merge branch 'develop' into participant-manager-apps-endpoint-implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b6bee24bd61be9f9390974d3e86929717f16d8e", "author": {"user": {"login": "monica-BTC", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/9b6bee24bd61be9f9390974d3e86929717f16d8e", "committedDate": "2020-08-11T05:12:10Z", "message": "resolved conflict errors\n\nresolved conflict errors"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NzU4NDEy", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#pullrequestreview-464758412", "createdAt": "2020-08-11T05:30:27Z", "commit": {"oid": "9b6bee24bd61be9f9390974d3e86929717f16d8e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea6fd910716d69877175e0b370589633212f6fec", "author": {"user": {"login": "saminguyen", "name": "Sami Nguyen"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/ea6fd910716d69877175e0b370589633212f6fec", "committedDate": "2020-08-11T05:30:36Z", "message": "Merge branch 'develop' into participant-manager-apps-endpoint-implementation"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 851, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}