{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyMDA2MzMw", "number": 1324, "title": "Participant Manager: Fixed issue #1322", "bodyText": "Fixed issue #1322 for GET /sites endpoint", "createdAt": "2020-10-13T06:02:49Z", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1324", "merged": true, "mergeCommit": {"oid": "167d9d8832a4205650155c38f271073241316b76"}, "closed": true, "closedAt": "2020-10-14T13:13:57Z", "author": {"login": "Kantharajut-btc"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdSCH2BgH2gAyNTAyMDA2MzMwOmRjYTM0ZDMzNDk1MDllMmNjZTljNjM0ZmQ1Y2FjZDRjZWNiNzE3MTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdScz-VgFqTUwODMxOTgyOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "dca34d3349509e2cce9c634fd5cacd4cecb71712", "author": {"user": {"login": "Kantharajut-btc", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/dca34d3349509e2cce9c634fd5cacd4cecb71712", "committedDate": "2020-10-13T05:56:15Z", "message": "Fixed issue #1322\n\nFixed issue #1322"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4MTk2MTMw", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1324#pullrequestreview-508196130", "createdAt": "2020-10-14T10:11:52Z", "commit": {"oid": "dca34d3349509e2cce9c634fd5cacd4cecb71712"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDoxMTo1MlrOHhL-NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDoxMjoyNFrOHhL_Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU2MTIwNQ==", "bodyText": "nit: Just initialize enrolledInvitedCountList as empty ArrayList in line 1007 and you do not need to do emptyIfNull here.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1324#discussion_r504561205", "createdAt": "2020-10-14T10:11:52Z", "author": {"login": "saminguyen"}, "path": "participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/SiteServiceImpl.java", "diffHunk": "@@ -970,120 +975,132 @@ public ParticipantStatusResponse updateOnboardingStatus(\n   public SiteDetailsResponse getSites(String userId) {\n     logger.entry(\"getSites(userId)\");\n \n+    Optional<UserRegAdminEntity> optUser = userRegAdminRepository.findById(userId);\n+    if (optUser.isPresent() && optUser.get().isSuperAdmin()) {\n+      List<StudyDetails> studies = getSitesForSuperAdmin();\n+      return new SiteDetailsResponse(studies, MessageCode.GET_SITES_SUCCESS);\n+    }\n+\n+    List<StudyPermissionEntity> studyPermissions =\n+        studyPermissionRepository.findByAdminUserId(userId);\n+\n     List<SitePermissionEntity> sitePermissions =\n         sitePermissionRepository.findSitePermissionByUserId(userId);\n-    if (CollectionUtils.isEmpty(sitePermissions)) {\n-      throw new ErrorCodeException(ErrorCode.SITE_NOT_FOUND);\n+\n+    if (CollectionUtils.isEmpty(studyPermissions)) {\n+      throw new ErrorCodeException(ErrorCode.STUDY_PERMISSION_ACCESS_DENIED);\n     }\n \n-    List<String> siteIds =\n-        sitePermissions\n+    Map<String, StudyPermissionEntity> studyPermissionsByStudyId = new HashMap<>();\n+\n+    List<StudyEntity> userStudies =\n+        studyPermissions\n             .stream()\n-            .map(s -> s.getSite().getId())\n             .distinct()\n+            .map(\n+                studyPermissionEntity -> {\n+                  StudyEntity study = studyPermissionEntity.getStudy();\n+                  studyPermissionsByStudyId.put(study.getId(), studyPermissionEntity);\n+                  return study;\n+                })\n             .collect(Collectors.toList());\n+    List<EnrolledInvitedCount> enrolledInvitedCountList = null;\n+    if (CollectionUtils.isNotEmpty(sitePermissions)) {\n+      enrolledInvitedCountList = siteRepository.getEnrolledInvitedCountByUserId(userId);\n+    }\n \n-    Map<String, Long> invitedCountBySiteIdMap = getInvitedCountBySiteId(siteIds);\n-\n-    Map<String, Long> enrolledCountBySiteIdMap = getEnrolledCountBySiteId(siteIds);\n-\n-    Map<StudyEntity, List<SitePermissionEntity>> sitePermissionsByStudy =\n-        sitePermissions.stream().collect(Collectors.groupingBy(SitePermissionEntity::getStudy));\n-\n-    Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId =\n-        getStudyPermissionsByStudyId(userId, sitePermissions);\n+    Map<String, EnrolledInvitedCount> enrolledInvitedCountMap =\n+        CollectionUtils.emptyIfNull(enrolledInvitedCountList)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dca34d3349509e2cce9c634fd5cacd4cecb71712"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU2MTQ4Mw==", "bodyText": "same as above", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1324#discussion_r504561483", "createdAt": "2020-10-14T10:12:24Z", "author": {"login": "saminguyen"}, "path": "participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/SiteServiceImpl.java", "diffHunk": "@@ -970,120 +975,132 @@ public ParticipantStatusResponse updateOnboardingStatus(\n   public SiteDetailsResponse getSites(String userId) {\n     logger.entry(\"getSites(userId)\");\n \n+    Optional<UserRegAdminEntity> optUser = userRegAdminRepository.findById(userId);\n+    if (optUser.isPresent() && optUser.get().isSuperAdmin()) {\n+      List<StudyDetails> studies = getSitesForSuperAdmin();\n+      return new SiteDetailsResponse(studies, MessageCode.GET_SITES_SUCCESS);\n+    }\n+\n+    List<StudyPermissionEntity> studyPermissions =\n+        studyPermissionRepository.findByAdminUserId(userId);\n+\n     List<SitePermissionEntity> sitePermissions =\n         sitePermissionRepository.findSitePermissionByUserId(userId);\n-    if (CollectionUtils.isEmpty(sitePermissions)) {\n-      throw new ErrorCodeException(ErrorCode.SITE_NOT_FOUND);\n+\n+    if (CollectionUtils.isEmpty(studyPermissions)) {\n+      throw new ErrorCodeException(ErrorCode.STUDY_PERMISSION_ACCESS_DENIED);\n     }\n \n-    List<String> siteIds =\n-        sitePermissions\n+    Map<String, StudyPermissionEntity> studyPermissionsByStudyId = new HashMap<>();\n+\n+    List<StudyEntity> userStudies =\n+        studyPermissions\n             .stream()\n-            .map(s -> s.getSite().getId())\n             .distinct()\n+            .map(\n+                studyPermissionEntity -> {\n+                  StudyEntity study = studyPermissionEntity.getStudy();\n+                  studyPermissionsByStudyId.put(study.getId(), studyPermissionEntity);\n+                  return study;\n+                })\n             .collect(Collectors.toList());\n+    List<EnrolledInvitedCount> enrolledInvitedCountList = null;\n+    if (CollectionUtils.isNotEmpty(sitePermissions)) {\n+      enrolledInvitedCountList = siteRepository.getEnrolledInvitedCountByUserId(userId);\n+    }\n \n-    Map<String, Long> invitedCountBySiteIdMap = getInvitedCountBySiteId(siteIds);\n-\n-    Map<String, Long> enrolledCountBySiteIdMap = getEnrolledCountBySiteId(siteIds);\n-\n-    Map<StudyEntity, List<SitePermissionEntity>> sitePermissionsByStudy =\n-        sitePermissions.stream().collect(Collectors.groupingBy(SitePermissionEntity::getStudy));\n-\n-    Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId =\n-        getStudyPermissionsByStudyId(userId, sitePermissions);\n+    Map<String, EnrolledInvitedCount> enrolledInvitedCountMap =\n+        CollectionUtils.emptyIfNull(enrolledInvitedCountList)\n+            .stream()\n+            .collect(Collectors.toMap(EnrolledInvitedCount::getSiteId, Function.identity()));\n \n     List<StudyDetails> studies = new ArrayList<>();\n-    for (Map.Entry<StudyEntity, List<SitePermissionEntity>> entry :\n-        sitePermissionsByStudy.entrySet()) {\n-      StudyEntity study = entry.getKey();\n-      StudyDetails studyDetail = StudyMapper.toStudyDetails(studyPermissionsByStudyInfoId, study);\n+    for (StudyEntity study : userStudies) {\n+      StudyDetails studyDetail = StudyMapper.toStudyDetails(study);\n+\n+      if (studyPermissionsByStudyId.get(study.getId()) != null) {\n+        Integer studyEditPermission =\n+            studyPermissionsByStudyId.get(study.getId()).getEdit().value();\n+        studyDetail.setStudyPermission(\n+            studyEditPermission == Permission.NO_PERMISSION.value()\n+                ? Permission.VIEW.value()\n+                : Permission.EDIT.value());\n+        studyDetail.setStudyPermission(studyEditPermission);\n+      }\n \n-      addSites(invitedCountBySiteIdMap, enrolledCountBySiteIdMap, study, studyDetail);\n-      studyDetail.setSitesCount((long) studyDetail.getSites().size());\n+      if (CollectionUtils.isNotEmpty(study.getSites())) {\n+        addSites(enrolledInvitedCountMap, study, studyDetail);\n+      }\n \n+      studyDetail.setSitesCount((long) studyDetail.getSites().size());\n       studies.add(studyDetail);\n     }\n \n     logger.exit(String.format(\"%d studies found\", studies.size()));\n     return new SiteDetailsResponse(studies, MessageCode.GET_SITES_SUCCESS);\n   }\n \n-  private Map<String, StudyPermissionEntity> getStudyPermissionsByStudyId(\n-      String userId, List<SitePermissionEntity> sitePermissions) {\n-    List<String> usersStudyIds =\n-        sitePermissions\n-            .stream()\n-            .distinct()\n-            .map(studyEntity -> studyEntity.getStudy().getId())\n-            .collect(Collectors.toList());\n-\n-    List<StudyPermissionEntity> studyPermissions =\n-        studyPermissionRepository.findByStudyIds(usersStudyIds, userId);\n+  private List<StudyDetails> getSitesForSuperAdmin() {\n \n-    Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId = new HashMap<>();\n-    if (CollectionUtils.isNotEmpty(studyPermissions)) {\n-      studyPermissionsByStudyInfoId =\n-          studyPermissions\n-              .stream()\n-              .collect(Collectors.toMap(e -> e.getStudy().getId(), Function.identity()));\n-    }\n-    return studyPermissionsByStudyInfoId;\n-  }\n+    List<StudyDetails> studies = new ArrayList<>();\n+    List<StudyEntity> studyList = studyRepository.findAll();\n \n-  private Map<String, Long> getInvitedCountBySiteId(List<String> usersSiteIds) {\n-    List<ParticipantRegistrySiteEntity> participantRegistry =\n-        participantRegistrySiteRepository.findBySiteIds(usersSiteIds);\n+    if (CollectionUtils.isNotEmpty(studyList)) {\n+      for (StudyEntity study : studyList) {\n+        StudyDetails studyDetail = StudyMapper.toStudyDetails(study);\n+        studyDetail.setStudyPermission(Permission.EDIT.value());\n \n-    return participantRegistry\n-        .stream()\n-        .collect(\n-            Collectors.groupingBy(\n-                e -> e.getSite().getId(),\n-                Collectors.summingLong(ParticipantRegistrySiteEntity::getInvitationCount)));\n-  }\n+        List<EnrolledInvitedCount> enrolledInvitedCountList =\n+            siteRepository.getEnrolledInvitedCount();\n \n-  private Map<String, Long> getEnrolledCountBySiteId(List<String> usersSiteIds) {\n-    List<ParticipantStudyEntity> participantsEnrollments =\n-        participantStudyRepository.findBySiteIds(usersSiteIds);\n+        Map<String, EnrolledInvitedCount> enrolledInvitedCountMap =\n+            CollectionUtils.emptyIfNull(enrolledInvitedCountList)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dca34d3349509e2cce9c634fd5cacd4cecb71712"}, "originalPosition": 169}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9698efead5fff2edb13790f69ba55becce30b646", "author": {"user": {"login": "Kantharajut-btc", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/9698efead5fff2edb13790f69ba55becce30b646", "committedDate": "2020-10-14T12:50:24Z", "message": "fixed PR comments\n\nfixed PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27229462b38368fc3d86100850853b5b66581188", "author": {"user": {"login": "Kantharajut-btc", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/27229462b38368fc3d86100850853b5b66581188", "committedDate": "2020-10-14T12:50:56Z", "message": "Merge branch 'develop' into get-sites-super-admin-changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4MzE5ODI4", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1324#pullrequestreview-508319828", "createdAt": "2020-10-14T13:01:59Z", "commit": {"oid": "27229462b38368fc3d86100850853b5b66581188"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 210, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}