{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2MzIzNjM5", "number": 674, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNTowNjoyM1rOESpzZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNDo0NDoxMVrOEVcfTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTk0NzI3OnYy", "diffSide": "RIGHT", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/MessageCode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNTowNjoyM1rOG38xaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNjo0NjozMFrOG5VaOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMyMDU1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              GET_LOCATION_SUCCESS(HttpStatus.OK, \"MSG-0008\", \"Get locations successfull\"),\n          \n          \n            \n            \n          \n          \n            \n              GET_LOCATION_FOR_SITE_SUCCESS(HttpStatus.OK, \"MSG-0009\", \"Get locations for site successfull\");\n          \n          \n            \n              GET_LOCATION_SUCCESS(HttpStatus.OK, \"MSG-0008\", \"Get locations successfully\"),\n          \n          \n            \n            \n          \n          \n            \n              GET_LOCATION_FOR_SITE_SUCCESS(HttpStatus.OK, \"MSG-0009\", \"Get locations for site successfulyl\");", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/674#discussion_r461320553", "createdAt": "2020-07-28T05:06:23Z", "author": {"login": "saminguyen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/MessageCode.java", "diffHunk": "@@ -49,7 +49,11 @@\n \n   DECOMMISSION_SITE_SUCCESS(HttpStatus.OK, \"MSG-0014\", \"Site Decommissioned successfully\"),\n \n-  RECOMMISSION_SITE_SUCCESS(HttpStatus.OK, \"MSG-0015\", \"Site Recommissioned successfully\");\n+  RECOMMISSION_SITE_SUCCESS(HttpStatus.OK, \"MSG-0015\", \"Site Recommissioned successfully\"),\n+\n+  GET_LOCATION_SUCCESS(HttpStatus.OK, \"MSG-0008\", \"Get locations successfull\"),\n+\n+  GET_LOCATION_FOR_SITE_SUCCESS(HttpStatus.OK, \"MSG-0009\", \"Get locations for site successfull\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85315626cd01e46c1a504d9f2d85b0766aa2ac8a"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc3Mjc5NA==", "bodyText": "Changed to \"successfully\" from successfull.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/674#discussion_r462772794", "createdAt": "2020-07-30T06:46:30Z", "author": {"login": "madhurya-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/MessageCode.java", "diffHunk": "@@ -49,7 +49,11 @@\n \n   DECOMMISSION_SITE_SUCCESS(HttpStatus.OK, \"MSG-0014\", \"Site Decommissioned successfully\"),\n \n-  RECOMMISSION_SITE_SUCCESS(HttpStatus.OK, \"MSG-0015\", \"Site Recommissioned successfully\");\n+  RECOMMISSION_SITE_SUCCESS(HttpStatus.OK, \"MSG-0015\", \"Site Recommissioned successfully\"),\n+\n+  GET_LOCATION_SUCCESS(HttpStatus.OK, \"MSG-0008\", \"Get locations successfull\"),\n+\n+  GET_LOCATION_FOR_SITE_SUCCESS(HttpStatus.OK, \"MSG-0009\", \"Get locations for site successfull\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMyMDU1Mw=="}, "originalCommit": {"oid": "85315626cd01e46c1a504d9f2d85b0766aa2ac8a"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODQzNzkxOnYy", "diffSide": "RIGHT", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/repository/LocationRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMzoyNzowMFrOG5NspQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNjo0ODo0OVrOG5VhrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0NjQzNw==", "bodyText": "This is implying you are selecting Locations associated with this studyId. You should make clear in the name and comment here that you are filtering out this studyId specifically", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/674#discussion_r462646437", "createdAt": "2020-07-29T23:27:00Z", "author": {"login": "saminguyen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/repository/LocationRepository.java", "diffHunk": "@@ -19,4 +22,12 @@\n     value = \"participant.manager.repository.enabled\",\n     havingValue = \"true\",\n     matchIfMissing = false)\n-public interface LocationRepository extends JpaRepository<LocationEntity, String> {}\n+public interface LocationRepository extends JpaRepository<LocationEntity, String> {\n+\n+  @Query(\n+      value =\n+          \"SELECT * FROM locations WHERE status = :status AND \"\n+              + \"id NOT IN (SELECT DISTINCT location_id FROM sites WHERE study_id = :studyId)\",\n+      nativeQuery = true)\n+  public List<LocationEntity> findByStatusAndStudyId(Integer status, String studyId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85315626cd01e46c1a504d9f2d85b0766aa2ac8a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc3NDcwMA==", "bodyText": "Changed name to findByStatusAndExcludeStudyId().", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/674#discussion_r462774700", "createdAt": "2020-07-30T06:48:49Z", "author": {"login": "madhurya-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/repository/LocationRepository.java", "diffHunk": "@@ -19,4 +22,12 @@\n     value = \"participant.manager.repository.enabled\",\n     havingValue = \"true\",\n     matchIfMissing = false)\n-public interface LocationRepository extends JpaRepository<LocationEntity, String> {}\n+public interface LocationRepository extends JpaRepository<LocationEntity, String> {\n+\n+  @Query(\n+      value =\n+          \"SELECT * FROM locations WHERE status = :status AND \"\n+              + \"id NOT IN (SELECT DISTINCT location_id FROM sites WHERE study_id = :studyId)\",\n+      nativeQuery = true)\n+  public List<LocationEntity> findByStatusAndStudyId(Integer status, String studyId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0NjQzNw=="}, "originalCommit": {"oid": "85315626cd01e46c1a504d9f2d85b0766aa2ac8a"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODQ0NjU2OnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/mapper/LocationMapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMzozMToxMVrOG5NxxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMzozMToxMVrOG5NxxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0Nzc0OQ==", "bodyText": "Make a method for LocationDetails -> LocationEntity mapper method here instead and when you call it you can use the stream() method", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/674#discussion_r462647749", "createdAt": "2020-07-29T23:31:11Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/mapper/LocationMapper.java", "diffHunk": "@@ -40,4 +44,18 @@ public static LocationEntity fromLocationRequest(LocationRequest locationRequest\n     locationEntity.setIsDefault(NO);\n     return locationEntity;\n   }\n+\n+  public static List<LocationDetails> toLocations(List<LocationEntity> locations) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85315626cd01e46c1a504d9f2d85b0766aa2ac8a"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODQ2MjI5OnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/LocationServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMzozOTowNlrOG5N7Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNjo0OToxMlrOG5Vi7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1MDEyNw==", "bodyText": "make this method private", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/674#discussion_r462650127", "createdAt": "2020-07-29T23:39:06Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/LocationServiceImpl.java", "diffHunk": "@@ -153,4 +164,104 @@ private ErrorCode validateUpdateLocationRequest(\n \n     return null;\n   }\n+\n+  @Override\n+  @Transactional\n+  public LocationResponse getLocations(String userId) {\n+    logger.entry(\"begin getLocations()\");\n+\n+    Optional<UserRegAdminEntity> optUserRegAdminUser = userRegAdminRepository.findById(userId);\n+    UserRegAdminEntity adminUser = optUserRegAdminUser.get();\n+    if (Permission.NO_PERMISSION == Permission.fromValue(adminUser.getEditPermission())) {\n+      logger.exit(ErrorCode.LOCATION_ACCESS_DENIED);\n+      return new LocationResponse(ErrorCode.LOCATION_ACCESS_DENIED);\n+    }\n+\n+    List<LocationEntity> locations =\n+        (List<LocationEntity>) CollectionUtils.emptyIfNull(locationRepository.findAll());\n+    List<String> locationIds =\n+        locations.stream().map(LocationEntity::getId).distinct().collect(Collectors.toList());\n+    Map<String, List<String>> locationStudies = getStudiesAndGroupByLocationId(locationIds);\n+\n+    List<LocationDetails> locationDetailsList = LocationMapper.toLocations(locations);\n+    for (LocationDetails locationDetails : locationDetailsList) {\n+      List<String> studies = locationStudies.get(locationDetails.getLocationId());\n+      locationDetails.getStudyNames().addAll(studies);\n+      locationDetails.setStudiesCount(locationDetails.getStudyNames().size());\n+    }\n+    LocationResponse locationResponse =\n+        new LocationResponse(MessageCode.GET_LOCATION_SUCCESS, locationDetailsList);\n+    logger.exit(String.format(\"locations size=%d\", locationResponse.getLocations().size()));\n+    return locationResponse;\n+  }\n+\n+  public Map<String, List<String>> getStudiesAndGroupByLocationId(List<String> locationIds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85315626cd01e46c1a504d9f2d85b0766aa2ac8a"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc3NTAyMg==", "bodyText": "Changed method scope to private.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/674#discussion_r462775022", "createdAt": "2020-07-30T06:49:12Z", "author": {"login": "madhurya-btc"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/LocationServiceImpl.java", "diffHunk": "@@ -153,4 +164,104 @@ private ErrorCode validateUpdateLocationRequest(\n \n     return null;\n   }\n+\n+  @Override\n+  @Transactional\n+  public LocationResponse getLocations(String userId) {\n+    logger.entry(\"begin getLocations()\");\n+\n+    Optional<UserRegAdminEntity> optUserRegAdminUser = userRegAdminRepository.findById(userId);\n+    UserRegAdminEntity adminUser = optUserRegAdminUser.get();\n+    if (Permission.NO_PERMISSION == Permission.fromValue(adminUser.getEditPermission())) {\n+      logger.exit(ErrorCode.LOCATION_ACCESS_DENIED);\n+      return new LocationResponse(ErrorCode.LOCATION_ACCESS_DENIED);\n+    }\n+\n+    List<LocationEntity> locations =\n+        (List<LocationEntity>) CollectionUtils.emptyIfNull(locationRepository.findAll());\n+    List<String> locationIds =\n+        locations.stream().map(LocationEntity::getId).distinct().collect(Collectors.toList());\n+    Map<String, List<String>> locationStudies = getStudiesAndGroupByLocationId(locationIds);\n+\n+    List<LocationDetails> locationDetailsList = LocationMapper.toLocations(locations);\n+    for (LocationDetails locationDetails : locationDetailsList) {\n+      List<String> studies = locationStudies.get(locationDetails.getLocationId());\n+      locationDetails.getStudyNames().addAll(studies);\n+      locationDetails.setStudiesCount(locationDetails.getStudyNames().size());\n+    }\n+    LocationResponse locationResponse =\n+        new LocationResponse(MessageCode.GET_LOCATION_SUCCESS, locationDetailsList);\n+    logger.exit(String.format(\"locations size=%d\", locationResponse.getLocations().size()));\n+    return locationResponse;\n+  }\n+\n+  public Map<String, List<String>> getStudiesAndGroupByLocationId(List<String> locationIds) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1MDEyNw=="}, "originalCommit": {"oid": "85315626cd01e46c1a504d9f2d85b0766aa2ac8a"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODcwNDcwOnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/LocationControllerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMTo0NzoyOFrOG5QIrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNjo1MDowMlrOG5Vl0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY4NjM4MA==", "bodyText": "You should add the studyEntity here to verify it is actually excluded in the response", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/674#discussion_r462686380", "createdAt": "2020-07-30T01:47:28Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/LocationControllerTest.java", "diffHunk": "@@ -300,10 +321,166 @@ public void shouldUpdateToReactiveLocation() throws Exception {\n     locationRepository.deleteById(locationId);\n   }\n \n+  @Test\n+  public void shouldReturnForbiddenForLocationAccessDeniedOfGetLocations() throws Exception {\n+    // Step 1: change editPermission to null\n+    userRegAdminEntity.setEditPermission(Permission.NO_PERMISSION.value());\n+    userRegAdminRepository.saveAndFlush(userRegAdminEntity);\n+\n+    // Step 2: Call API and expect error message LOCATION_ACCESS_DENIED\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_LOCATIONS.getPath()).headers(headers).contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isForbidden())\n+        .andExpect(jsonPath(\"$.error_description\", is(LOCATION_ACCESS_DENIED.getDescription())));\n+  }\n+\n+  @Test\n+  public void shouldReturnLocations() throws Exception {\n+    // Step 1: Set studies for location\n+    SiteEntity siteEntity = testDataHelper.newSiteEntity();\n+    siteEntity.setStudy(testDataHelper.newStudyEntity());\n+    siteEntity.getStudy().setName(\"LIMITJP001\");\n+    locationEntity.addSiteEntity(siteEntity);\n+    testDataHelper.getLocationRepository().save(locationEntity);\n+\n+    // Step 2: Call API and expect GET_LOCATION_SUCCESS message\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_LOCATIONS.getPath()).headers(headers).contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(jsonPath(\"$.locations\").isArray())\n+        .andExpect(jsonPath(\"$.locations[0].locationId\", notNullValue()))\n+        .andExpect(jsonPath(\"$.locations\", hasSize(1)))\n+        .andExpect(jsonPath(\"$.locations[0].customId\", is(\"OpenStudy02\")))\n+        .andExpect(jsonPath(\"$.locations[0].studyNames\").isArray())\n+        .andExpect(jsonPath(\"$.locations[0].studyNames[0]\", is(\"LIMITJP001\")))\n+        .andExpect(jsonPath(\"$.message\", is(MessageCode.GET_LOCATION_SUCCESS.getMessage())));\n+  }\n+\n+  @Test\n+  public void shouldReturnForbiddenForLocationForSiteAccessDenied() throws Exception {\n+    // Step 1: change editPermission to null\n+    userRegAdminEntity.setEditPermission(Permission.NO_PERMISSION.value());\n+    userRegAdminRepository.saveAndFlush(userRegAdminEntity);\n+\n+    // Step 2: Call API and expect error message LOCATION_ACCESS_DENIED\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_LOCATIONS.getPath())\n+                .queryParam(\"excludeStudyId\", studyEntity.getId())\n+                .queryParam(\"status\", String.valueOf(CommonConstants.ACTIVE_STATUS))\n+                .content(asJsonString(getLocationRequest()))\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isForbidden())\n+        .andExpect(jsonPath(\"$.error_description\", is(LOCATION_ACCESS_DENIED.getDescription())));\n+  }\n+\n+  @Test\n+  public void shouldReturnLocationsForSite() throws Exception {\n+    // Step 1: Set studies for location\n+    siteEntity.setStudy(testDataHelper.newStudyEntity());\n+    siteEntity.getStudy().setName(\"LIMITJP001\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85315626cd01e46c1a504d9f2d85b0766aa2ac8a"}, "originalPosition": 303}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc3NTc2MQ==", "bodyText": "Added studyEntity.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/674#discussion_r462775761", "createdAt": "2020-07-30T06:50:02Z", "author": {"login": "madhurya-btc"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/LocationControllerTest.java", "diffHunk": "@@ -300,10 +321,166 @@ public void shouldUpdateToReactiveLocation() throws Exception {\n     locationRepository.deleteById(locationId);\n   }\n \n+  @Test\n+  public void shouldReturnForbiddenForLocationAccessDeniedOfGetLocations() throws Exception {\n+    // Step 1: change editPermission to null\n+    userRegAdminEntity.setEditPermission(Permission.NO_PERMISSION.value());\n+    userRegAdminRepository.saveAndFlush(userRegAdminEntity);\n+\n+    // Step 2: Call API and expect error message LOCATION_ACCESS_DENIED\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_LOCATIONS.getPath()).headers(headers).contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isForbidden())\n+        .andExpect(jsonPath(\"$.error_description\", is(LOCATION_ACCESS_DENIED.getDescription())));\n+  }\n+\n+  @Test\n+  public void shouldReturnLocations() throws Exception {\n+    // Step 1: Set studies for location\n+    SiteEntity siteEntity = testDataHelper.newSiteEntity();\n+    siteEntity.setStudy(testDataHelper.newStudyEntity());\n+    siteEntity.getStudy().setName(\"LIMITJP001\");\n+    locationEntity.addSiteEntity(siteEntity);\n+    testDataHelper.getLocationRepository().save(locationEntity);\n+\n+    // Step 2: Call API and expect GET_LOCATION_SUCCESS message\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_LOCATIONS.getPath()).headers(headers).contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(jsonPath(\"$.locations\").isArray())\n+        .andExpect(jsonPath(\"$.locations[0].locationId\", notNullValue()))\n+        .andExpect(jsonPath(\"$.locations\", hasSize(1)))\n+        .andExpect(jsonPath(\"$.locations[0].customId\", is(\"OpenStudy02\")))\n+        .andExpect(jsonPath(\"$.locations[0].studyNames\").isArray())\n+        .andExpect(jsonPath(\"$.locations[0].studyNames[0]\", is(\"LIMITJP001\")))\n+        .andExpect(jsonPath(\"$.message\", is(MessageCode.GET_LOCATION_SUCCESS.getMessage())));\n+  }\n+\n+  @Test\n+  public void shouldReturnForbiddenForLocationForSiteAccessDenied() throws Exception {\n+    // Step 1: change editPermission to null\n+    userRegAdminEntity.setEditPermission(Permission.NO_PERMISSION.value());\n+    userRegAdminRepository.saveAndFlush(userRegAdminEntity);\n+\n+    // Step 2: Call API and expect error message LOCATION_ACCESS_DENIED\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_LOCATIONS.getPath())\n+                .queryParam(\"excludeStudyId\", studyEntity.getId())\n+                .queryParam(\"status\", String.valueOf(CommonConstants.ACTIVE_STATUS))\n+                .content(asJsonString(getLocationRequest()))\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isForbidden())\n+        .andExpect(jsonPath(\"$.error_description\", is(LOCATION_ACCESS_DENIED.getDescription())));\n+  }\n+\n+  @Test\n+  public void shouldReturnLocationsForSite() throws Exception {\n+    // Step 1: Set studies for location\n+    siteEntity.setStudy(testDataHelper.newStudyEntity());\n+    siteEntity.getStudy().setName(\"LIMITJP001\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY4NjM4MA=="}, "originalCommit": {"oid": "85315626cd01e46c1a504d9f2d85b0766aa2ac8a"}, "originalPosition": 303}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NjA4NjI5OnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/LocationControllerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDo1MDo1M1rOG6V-FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNToxNToyMlrOG6saIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgzMDU0OA==", "bodyText": "I think you should make this a separate test case, maybe shouldNoLocationsForSite_excludedByStudyId (or sth like that), and keep the old test case also.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/674#discussion_r463830548", "createdAt": "2020-07-31T20:50:53Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/LocationControllerTest.java", "diffHunk": "@@ -410,9 +410,7 @@ public void shouldReturnLocationsForSite() throws Exception {\n         .andExpect(\n             jsonPath(\"$.message\", is(MessageCode.GET_LOCATION_FOR_SITE_SUCCESS.getMessage())))\n         .andExpect(jsonPath(\"$.locations\").isArray())\n-        .andExpect(jsonPath(\"$.locations\", hasSize(1)))\n-        .andExpect(jsonPath(\"$.locations[0].locationId\", notNullValue()))\n-        .andExpect(jsonPath(\"$.locations[0].customId\", is(\"OpenStudy02\")));\n+        .andExpect(jsonPath(\"$.locations\", hasSize(0)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2079a62c84f2f5291794a5c0e532a1c44b1343de"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE5ODE3OA==", "bodyText": "Kept old test case and renamed the above one to shouldReturnNoLocationsForSiteExcludedByStudyId().", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/674#discussion_r464198178", "createdAt": "2020-08-03T05:15:22Z", "author": {"login": "madhurya-btc"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/LocationControllerTest.java", "diffHunk": "@@ -410,9 +410,7 @@ public void shouldReturnLocationsForSite() throws Exception {\n         .andExpect(\n             jsonPath(\"$.message\", is(MessageCode.GET_LOCATION_FOR_SITE_SUCCESS.getMessage())))\n         .andExpect(jsonPath(\"$.locations\").isArray())\n-        .andExpect(jsonPath(\"$.locations\", hasSize(1)))\n-        .andExpect(jsonPath(\"$.locations[0].locationId\", notNullValue()))\n-        .andExpect(jsonPath(\"$.locations[0].customId\", is(\"OpenStudy02\")));\n+        .andExpect(jsonPath(\"$.locations\", hasSize(0)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgzMDU0OA=="}, "originalCommit": {"oid": "2079a62c84f2f5291794a5c0e532a1c44b1343de"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTIyMzE4OnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/LocationControllerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNDo0NDoxMVrOG8M8uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMDo1NTo0MlrOG9VgZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc3OTg5OQ==", "bodyText": "replace with CUSTOM_LOCATION_ID?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/674#discussion_r465779899", "createdAt": "2020-08-05T14:44:11Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/LocationControllerTest.java", "diffHunk": "@@ -300,10 +321,193 @@ public void shouldUpdateToReactiveLocation() throws Exception {\n     locationRepository.deleteById(locationId);\n   }\n \n+  @Test\n+  public void shouldReturnForbiddenForLocationAccessDeniedOfGetLocations() throws Exception {\n+    // Step 1: change editPermission to null\n+    userRegAdminEntity.setEditPermission(Permission.NO_PERMISSION.value());\n+    userRegAdminRepository.saveAndFlush(userRegAdminEntity);\n+\n+    // Step 2: Call API and expect error message LOCATION_ACCESS_DENIED\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_LOCATIONS.getPath()).headers(headers).contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isForbidden())\n+        .andExpect(jsonPath(\"$.error_description\", is(LOCATION_ACCESS_DENIED.getDescription())));\n+  }\n+\n+  @Test\n+  public void shouldReturnLocations() throws Exception {\n+    // Step 1: Set studies for location\n+    SiteEntity siteEntity = testDataHelper.newSiteEntity();\n+    siteEntity.setStudy(testDataHelper.newStudyEntity());\n+    siteEntity.getStudy().setName(\"LIMITJP001\");\n+    locationEntity.addSiteEntity(siteEntity);\n+    testDataHelper.getLocationRepository().save(locationEntity);\n+\n+    // Step 2: Call API and expect GET_LOCATION_SUCCESS message\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_LOCATIONS.getPath()).headers(headers).contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(jsonPath(\"$.locations\").isArray())\n+        .andExpect(jsonPath(\"$.locations[0].locationId\", notNullValue()))\n+        .andExpect(jsonPath(\"$.locations\", hasSize(1)))\n+        .andExpect(jsonPath(\"$.locations[0].customId\", is(\"OpenStudy02\")))\n+        .andExpect(jsonPath(\"$.locations[0].studyNames\").isArray())\n+        .andExpect(jsonPath(\"$.locations[0].studyNames[0]\", is(\"LIMITJP001\")))\n+        .andExpect(jsonPath(\"$.message\", is(MessageCode.GET_LOCATION_SUCCESS.getMessage())));\n+  }\n+\n+  @Test\n+  public void shouldReturnForbiddenForLocationForSiteAccessDenied() throws Exception {\n+    // Step 1: change editPermission to null\n+    userRegAdminEntity.setEditPermission(Permission.NO_PERMISSION.value());\n+    userRegAdminRepository.saveAndFlush(userRegAdminEntity);\n+\n+    // Step 2: Call API and expect error message LOCATION_ACCESS_DENIED\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_LOCATIONS.getPath())\n+                .queryParam(\"excludeStudyId\", studyEntity.getId())\n+                .queryParam(\"status\", String.valueOf(CommonConstants.ACTIVE_STATUS))\n+                .content(asJsonString(getLocationRequest()))\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isForbidden())\n+        .andExpect(jsonPath(\"$.error_description\", is(LOCATION_ACCESS_DENIED.getDescription())));\n+  }\n+\n+  @Test\n+  public void shouldReturnNoLocationsForSiteExcludedByStudyId() throws Exception {\n+    // Step 1: Set studies for location\n+    siteEntity.setStudy(studyEntity);\n+    siteEntity.getStudy().setName(\"LIMITJP001\");\n+    locationEntity.addSiteEntity(siteEntity);\n+    testDataHelper.getLocationRepository().save(locationEntity);\n+\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+    // Step 2: Call API and expect message GET_LOCATION_FOR_SITE_SUCCESS\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_LOCATIONS.getPath())\n+                .queryParam(\"excludeStudyId\", studyEntity.getId())\n+                .queryParam(\"status\", String.valueOf(CommonConstants.ACTIVE_STATUS))\n+                .content(asJsonString(getLocationRequest()))\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(\n+            jsonPath(\"$.message\", is(MessageCode.GET_LOCATION_FOR_SITE_SUCCESS.getMessage())))\n+        .andExpect(jsonPath(\"$.locations\").isArray())\n+        .andExpect(jsonPath(\"$.locations\", hasSize(0)));\n+  }\n+\n+  @Test\n+  public void shouldReturnLocationsForSite() throws Exception {\n+    // Step 1: Set studies for location\n+    siteEntity.setStudy(testDataHelper.newStudyEntity());\n+    siteEntity.getStudy().setName(\"LIMITJP001\");\n+    locationEntity.addSiteEntity(siteEntity);\n+    testDataHelper.getLocationRepository().save(locationEntity);\n+\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+    // Step 2: Call API and expect message GET_LOCATION_FOR_SITE_SUCCESS\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_LOCATIONS.getPath())\n+                .queryParam(\"excludeStudyId\", studyEntity.getId())\n+                .queryParam(\"status\", String.valueOf(CommonConstants.ACTIVE_STATUS))\n+                .content(asJsonString(getLocationRequest()))\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(\n+            jsonPath(\"$.message\", is(MessageCode.GET_LOCATION_FOR_SITE_SUCCESS.getMessage())))\n+        .andExpect(jsonPath(\"$.locations\").isArray())\n+        .andExpect(jsonPath(\"$.locations\", hasSize(1)))\n+        .andExpect(jsonPath(\"$.locations[0].locationId\", notNullValue()))\n+        .andExpect(jsonPath(\"$.locations[0].customId\", is(\"OpenStudy02\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a9c89772f289d303122f9f34367894a156cd418"}, "originalPosition": 352}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk2ODY3OQ==", "bodyText": "Replaced with CUSTOM_LOCATION_ID.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/674#discussion_r466968679", "createdAt": "2020-08-07T10:55:42Z", "author": {"login": "madhurya-btc"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/LocationControllerTest.java", "diffHunk": "@@ -300,10 +321,193 @@ public void shouldUpdateToReactiveLocation() throws Exception {\n     locationRepository.deleteById(locationId);\n   }\n \n+  @Test\n+  public void shouldReturnForbiddenForLocationAccessDeniedOfGetLocations() throws Exception {\n+    // Step 1: change editPermission to null\n+    userRegAdminEntity.setEditPermission(Permission.NO_PERMISSION.value());\n+    userRegAdminRepository.saveAndFlush(userRegAdminEntity);\n+\n+    // Step 2: Call API and expect error message LOCATION_ACCESS_DENIED\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_LOCATIONS.getPath()).headers(headers).contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isForbidden())\n+        .andExpect(jsonPath(\"$.error_description\", is(LOCATION_ACCESS_DENIED.getDescription())));\n+  }\n+\n+  @Test\n+  public void shouldReturnLocations() throws Exception {\n+    // Step 1: Set studies for location\n+    SiteEntity siteEntity = testDataHelper.newSiteEntity();\n+    siteEntity.setStudy(testDataHelper.newStudyEntity());\n+    siteEntity.getStudy().setName(\"LIMITJP001\");\n+    locationEntity.addSiteEntity(siteEntity);\n+    testDataHelper.getLocationRepository().save(locationEntity);\n+\n+    // Step 2: Call API and expect GET_LOCATION_SUCCESS message\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_LOCATIONS.getPath()).headers(headers).contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(jsonPath(\"$.locations\").isArray())\n+        .andExpect(jsonPath(\"$.locations[0].locationId\", notNullValue()))\n+        .andExpect(jsonPath(\"$.locations\", hasSize(1)))\n+        .andExpect(jsonPath(\"$.locations[0].customId\", is(\"OpenStudy02\")))\n+        .andExpect(jsonPath(\"$.locations[0].studyNames\").isArray())\n+        .andExpect(jsonPath(\"$.locations[0].studyNames[0]\", is(\"LIMITJP001\")))\n+        .andExpect(jsonPath(\"$.message\", is(MessageCode.GET_LOCATION_SUCCESS.getMessage())));\n+  }\n+\n+  @Test\n+  public void shouldReturnForbiddenForLocationForSiteAccessDenied() throws Exception {\n+    // Step 1: change editPermission to null\n+    userRegAdminEntity.setEditPermission(Permission.NO_PERMISSION.value());\n+    userRegAdminRepository.saveAndFlush(userRegAdminEntity);\n+\n+    // Step 2: Call API and expect error message LOCATION_ACCESS_DENIED\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_LOCATIONS.getPath())\n+                .queryParam(\"excludeStudyId\", studyEntity.getId())\n+                .queryParam(\"status\", String.valueOf(CommonConstants.ACTIVE_STATUS))\n+                .content(asJsonString(getLocationRequest()))\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isForbidden())\n+        .andExpect(jsonPath(\"$.error_description\", is(LOCATION_ACCESS_DENIED.getDescription())));\n+  }\n+\n+  @Test\n+  public void shouldReturnNoLocationsForSiteExcludedByStudyId() throws Exception {\n+    // Step 1: Set studies for location\n+    siteEntity.setStudy(studyEntity);\n+    siteEntity.getStudy().setName(\"LIMITJP001\");\n+    locationEntity.addSiteEntity(siteEntity);\n+    testDataHelper.getLocationRepository().save(locationEntity);\n+\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+    // Step 2: Call API and expect message GET_LOCATION_FOR_SITE_SUCCESS\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_LOCATIONS.getPath())\n+                .queryParam(\"excludeStudyId\", studyEntity.getId())\n+                .queryParam(\"status\", String.valueOf(CommonConstants.ACTIVE_STATUS))\n+                .content(asJsonString(getLocationRequest()))\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(\n+            jsonPath(\"$.message\", is(MessageCode.GET_LOCATION_FOR_SITE_SUCCESS.getMessage())))\n+        .andExpect(jsonPath(\"$.locations\").isArray())\n+        .andExpect(jsonPath(\"$.locations\", hasSize(0)));\n+  }\n+\n+  @Test\n+  public void shouldReturnLocationsForSite() throws Exception {\n+    // Step 1: Set studies for location\n+    siteEntity.setStudy(testDataHelper.newStudyEntity());\n+    siteEntity.getStudy().setName(\"LIMITJP001\");\n+    locationEntity.addSiteEntity(siteEntity);\n+    testDataHelper.getLocationRepository().save(locationEntity);\n+\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+    // Step 2: Call API and expect message GET_LOCATION_FOR_SITE_SUCCESS\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_LOCATIONS.getPath())\n+                .queryParam(\"excludeStudyId\", studyEntity.getId())\n+                .queryParam(\"status\", String.valueOf(CommonConstants.ACTIVE_STATUS))\n+                .content(asJsonString(getLocationRequest()))\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(\n+            jsonPath(\"$.message\", is(MessageCode.GET_LOCATION_FOR_SITE_SUCCESS.getMessage())))\n+        .andExpect(jsonPath(\"$.locations\").isArray())\n+        .andExpect(jsonPath(\"$.locations\", hasSize(1)))\n+        .andExpect(jsonPath(\"$.locations[0].locationId\", notNullValue()))\n+        .andExpect(jsonPath(\"$.locations[0].customId\", is(\"OpenStudy02\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc3OTg5OQ=="}, "originalCommit": {"oid": "3a9c89772f289d303122f9f34367894a156cd418"}, "originalPosition": 352}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2016, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}