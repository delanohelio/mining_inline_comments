{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3NTA4OTAy", "number": 745, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNToxMjowMlrOEZFm9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNToxMzoyNFrOEZFpVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzQxNzQ4OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/studies/shared/study-details.service.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNToxMjowMlrOHBs8Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMTozNDoyMFrOHCPUOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU0Njk0Mg==", "bodyText": "typo successResponse", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/745#discussion_r471546942", "createdAt": "2020-08-17T15:12:02Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/studies/shared/study-details.service.spec.ts", "diffHunk": "@@ -0,0 +1,124 @@\n+import {TestBed, fakeAsync, tick} from '@angular/core/testing';\n+import {StudyDetailsService} from './study-details.service';\n+import {HttpClientTestingModule} from '@angular/common/http/testing';\n+import {SiteCoordinatorModule} from '../../site-coordinator.module';\n+import {NO_ERRORS_SCHEMA} from '@angular/core';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {EntityService} from '../../../service/entity.service';\n+import {ApiResponse} from 'src/app/entity/api.response.model';\n+import {throwError, of} from 'rxjs';\n+import {StudyDetails} from './study-details';\n+import * as expectedResult from 'src/app/entity/mock-studies-data';\n+import {HttpClient} from '@angular/common/http';\n+import {ToastrModule} from 'ngx-toastr';\n+\n+describe('StudyDetailsService', () => {\n+  let studyDetailsService: StudyDetailsService;\n+  let httpServiceSpyObj: jasmine.SpyObj<HttpClient>;\n+\n+  beforeEach(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        SiteCoordinatorModule,\n+        RouterTestingModule.withRoutes([]),\n+        ToastrModule.forRoot({\n+          positionClass: 'toast-top-center',\n+          preventDuplicates: true,\n+          enableHtml: true,\n+        }),\n+      ],\n+      schemas: [NO_ERRORS_SCHEMA],\n+      providers: [StudyDetailsService, EntityService],\n+    });\n+  });\n+\n+  it('should be created', () => {\n+    const service: StudyDetailsService = TestBed.get(\n+      StudyDetailsService,\n+    ) as StudyDetailsService;\n+    expect(service).toBeTruthy();\n+  });\n+\n+  it('should return expected study participant`s details', fakeAsync(() => {\n+    const entityServiceSpy = jasmine.createSpyObj<EntityService<StudyDetails>>(\n+      'EntityService',\n+      {get: of(expectedResult.expectedStudiesDetails)},\n+    );\n+    studyDetailsService = new StudyDetailsService(\n+      entityServiceSpy,\n+      httpServiceSpyObj,\n+    );\n+\n+    studyDetailsService\n+      .getStudyDetails(expectedResult.expectedStudyId.id.toString())\n+      .subscribe(\n+        (studyDetail) =>\n+          expect(studyDetail).toEqual(\n+            expectedResult.expectedStudiesDetails,\n+            'expected Studies Participant List',\n+          ),\n+        fail,\n+      );\n+    expect(entityServiceSpy.get).toHaveBeenCalledTimes(1);\n+  }));\n+\n+  it('should return an error when the server returns a 400', fakeAsync(() => {\n+    const errorResponses: ApiResponse = {\n+      message: 'Bad Request',\n+    } as ApiResponse;\n+\n+    const entitiyServiceSpy = jasmine.createSpyObj<EntityService<StudyDetails>>(\n+      'EntityService',\n+      {get: throwError(errorResponses)},\n+    );\n+    studyDetailsService = new StudyDetailsService(\n+      entitiyServiceSpy,\n+      httpServiceSpyObj,\n+    );\n+\n+    tick(40);\n+    studyDetailsService\n+      .getStudyDetails(expectedResult.expectedStudyId.id.toString())\n+      .subscribe(\n+        () => fail('expected an error'),\n+        (error: ApiResponse) => {\n+          expect(error.message).toBe('Bad Request');\n+        },\n+      );\n+  }));\n+\n+  it('should get the updated target enrollment data', () => {\n+    const entityServicespyobj = jasmine.createSpyObj<\n+      EntityService<StudyDetails>\n+    >('EntityService', ['get']);\n+\n+    const httpServicespyobj = jasmine.createSpyObj<HttpClient>('HttpClient', {\n+      patch: of(),\n+    });\n+    studyDetailsService = new StudyDetailsService(\n+      entityServicespyobj,\n+      httpServicespyobj,\n+    );\n+\n+    httpServicespyobj.patch.and.returnValue(\n+      of(expectedResult.expectedResponse),\n+    );\n+\n+    studyDetailsService\n+      .updateTargetEnrollment(\n+        expectedResult.expectedTargetEnrollment,\n+        expectedResult.expectedStudiesDetails.participantRegistryDetail.studyId.toString(),\n+      )\n+      .subscribe(\n+        (succesResponse: ApiResponse) =>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37f620632c3c7a821afa11618befa0c5918e52f4"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjExMDEzOA==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/745#discussion_r472110138", "createdAt": "2020-08-18T11:34:20Z", "author": {"login": "firdosebtc1"}, "path": "UR-web-app/src/app/site-coordinator/studies/shared/study-details.service.spec.ts", "diffHunk": "@@ -0,0 +1,124 @@\n+import {TestBed, fakeAsync, tick} from '@angular/core/testing';\n+import {StudyDetailsService} from './study-details.service';\n+import {HttpClientTestingModule} from '@angular/common/http/testing';\n+import {SiteCoordinatorModule} from '../../site-coordinator.module';\n+import {NO_ERRORS_SCHEMA} from '@angular/core';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {EntityService} from '../../../service/entity.service';\n+import {ApiResponse} from 'src/app/entity/api.response.model';\n+import {throwError, of} from 'rxjs';\n+import {StudyDetails} from './study-details';\n+import * as expectedResult from 'src/app/entity/mock-studies-data';\n+import {HttpClient} from '@angular/common/http';\n+import {ToastrModule} from 'ngx-toastr';\n+\n+describe('StudyDetailsService', () => {\n+  let studyDetailsService: StudyDetailsService;\n+  let httpServiceSpyObj: jasmine.SpyObj<HttpClient>;\n+\n+  beforeEach(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        SiteCoordinatorModule,\n+        RouterTestingModule.withRoutes([]),\n+        ToastrModule.forRoot({\n+          positionClass: 'toast-top-center',\n+          preventDuplicates: true,\n+          enableHtml: true,\n+        }),\n+      ],\n+      schemas: [NO_ERRORS_SCHEMA],\n+      providers: [StudyDetailsService, EntityService],\n+    });\n+  });\n+\n+  it('should be created', () => {\n+    const service: StudyDetailsService = TestBed.get(\n+      StudyDetailsService,\n+    ) as StudyDetailsService;\n+    expect(service).toBeTruthy();\n+  });\n+\n+  it('should return expected study participant`s details', fakeAsync(() => {\n+    const entityServiceSpy = jasmine.createSpyObj<EntityService<StudyDetails>>(\n+      'EntityService',\n+      {get: of(expectedResult.expectedStudiesDetails)},\n+    );\n+    studyDetailsService = new StudyDetailsService(\n+      entityServiceSpy,\n+      httpServiceSpyObj,\n+    );\n+\n+    studyDetailsService\n+      .getStudyDetails(expectedResult.expectedStudyId.id.toString())\n+      .subscribe(\n+        (studyDetail) =>\n+          expect(studyDetail).toEqual(\n+            expectedResult.expectedStudiesDetails,\n+            'expected Studies Participant List',\n+          ),\n+        fail,\n+      );\n+    expect(entityServiceSpy.get).toHaveBeenCalledTimes(1);\n+  }));\n+\n+  it('should return an error when the server returns a 400', fakeAsync(() => {\n+    const errorResponses: ApiResponse = {\n+      message: 'Bad Request',\n+    } as ApiResponse;\n+\n+    const entitiyServiceSpy = jasmine.createSpyObj<EntityService<StudyDetails>>(\n+      'EntityService',\n+      {get: throwError(errorResponses)},\n+    );\n+    studyDetailsService = new StudyDetailsService(\n+      entitiyServiceSpy,\n+      httpServiceSpyObj,\n+    );\n+\n+    tick(40);\n+    studyDetailsService\n+      .getStudyDetails(expectedResult.expectedStudyId.id.toString())\n+      .subscribe(\n+        () => fail('expected an error'),\n+        (error: ApiResponse) => {\n+          expect(error.message).toBe('Bad Request');\n+        },\n+      );\n+  }));\n+\n+  it('should get the updated target enrollment data', () => {\n+    const entityServicespyobj = jasmine.createSpyObj<\n+      EntityService<StudyDetails>\n+    >('EntityService', ['get']);\n+\n+    const httpServicespyobj = jasmine.createSpyObj<HttpClient>('HttpClient', {\n+      patch: of(),\n+    });\n+    studyDetailsService = new StudyDetailsService(\n+      entityServicespyobj,\n+      httpServicespyobj,\n+    );\n+\n+    httpServicespyobj.patch.and.returnValue(\n+      of(expectedResult.expectedResponse),\n+    );\n+\n+    studyDetailsService\n+      .updateTargetEnrollment(\n+        expectedResult.expectedTargetEnrollment,\n+        expectedResult.expectedStudiesDetails.participantRegistryDetail.studyId.toString(),\n+      )\n+      .subscribe(\n+        (succesResponse: ApiResponse) =>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU0Njk0Mg=="}, "originalCommit": {"oid": "37f620632c3c7a821afa11618befa0c5918e52f4"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzQyMzU3OnYy", "diffSide": "RIGHT", "path": "UR-web-app/src/app/site-coordinator/studies/study-details/study-details.component.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNToxMzoyNFrOHBs_xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMTozNDoxM1rOHCPUBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU0Nzg0Ng==", "bodyText": "You should combine this with the previous test case", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/745#discussion_r471547846", "createdAt": "2020-08-17T15:13:24Z", "author": {"login": "nikklassen"}, "path": "UR-web-app/src/app/site-coordinator/studies/study-details/study-details.component.spec.ts", "diffHunk": "@@ -0,0 +1,103 @@\n+import {\n+  async,\n+  ComponentFixture,\n+  TestBed,\n+  fakeAsync,\n+} from '@angular/core/testing';\n+\n+import {StudyDetailsComponent} from './study-details.component';\n+import {ModalModule, BsModalRef} from 'ngx-bootstrap/modal';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {StudiesModule} from '../studies.module';\n+import {HttpClientModule} from '@angular/common/http';\n+import {BrowserAnimationsModule} from '@angular/platform-browser/animations';\n+import {ToastrModule} from 'ngx-toastr';\n+import {StudyDetailsService} from '../shared/study-details.service';\n+import {StudyDetails} from '../shared/study-details';\n+import {expectedStudiesDetails} from 'src/app/entity/mock-studies-data';\n+import {of} from 'rxjs';\n+import {EntityService} from 'src/app/service/entity.service';\n+\n+describe('StudyDetailsComponent', () => {\n+  let component: StudyDetailsComponent;\n+  let fixture: ComponentFixture<StudyDetailsComponent>;\n+\n+  beforeEach(async(async () => {\n+    const studyServiceSpy = jasmine.createSpyObj<StudyDetailsService>(\n+      'StudyDetailsService',\n+      {getStudyDetails: of(expectedStudiesDetails)},\n+    );\n+    await TestBed.configureTestingModule({\n+      declarations: [StudyDetailsComponent],\n+      imports: [\n+        ModalModule.forRoot(),\n+        RouterTestingModule,\n+        StudiesModule,\n+        BrowserAnimationsModule,\n+        HttpClientModule,\n+        ToastrModule.forRoot({\n+          positionClass: 'toast-top-center',\n+          preventDuplicates: true,\n+          enableHtml: true,\n+        }),\n+      ],\n+      providers: [\n+        EntityService,\n+        BsModalRef,\n+        {provide: StudyDetailsService, useValue: studyServiceSpy},\n+      ],\n+    })\n+      .compileComponents()\n+      .then(() => {\n+        fixture = TestBed.createComponent(StudyDetailsComponent);\n+        component = fixture.componentInstance;\n+        studyServiceSpy.getStudyDetails.and.returnValues(\n+          of(expectedStudiesDetails),\n+        );\n+      });\n+  }));\n+\n+  it('should create', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should NOT have study`s participant list before ngOnInit', () => {\n+    component.studyDetail$.pipe().subscribe((studyDetail: StudyDetails) => {\n+      expect(\n+        studyDetail.participantRegistryDetail.registryParticipants.length,\n+      ).toBe(0, 'should NOT have study`s participant list before ngOnInit');\n+    });\n+  });\n+\n+  describe('after get studies', () => {\n+    beforeEach(async(() => {\n+      fixture.detectChanges();\n+      void fixture.whenStable().then(() => {\n+        fixture.detectChanges();\n+      });\n+    }));\n+\n+    it('should get the list of study participants via refresh function', fakeAsync(() => {\n+      component.studyDetail$.subscribe((studyDetail) => {\n+        studyDetail;\n+        expect(\n+          studyDetail.participantRegistryDetail.registryParticipants.length,\n+        ).toEqual(\n+          expectedStudiesDetails.participantRegistryDetail.registryParticipants\n+            .length,\n+        );\n+      });\n+    }));\n+\n+    it('should check the participant list received and the appId and studyId should match', () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37f620632c3c7a821afa11618befa0c5918e52f4"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjExMDA4Nw==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/745#discussion_r472110087", "createdAt": "2020-08-18T11:34:13Z", "author": {"login": "firdosebtc1"}, "path": "UR-web-app/src/app/site-coordinator/studies/study-details/study-details.component.spec.ts", "diffHunk": "@@ -0,0 +1,103 @@\n+import {\n+  async,\n+  ComponentFixture,\n+  TestBed,\n+  fakeAsync,\n+} from '@angular/core/testing';\n+\n+import {StudyDetailsComponent} from './study-details.component';\n+import {ModalModule, BsModalRef} from 'ngx-bootstrap/modal';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {StudiesModule} from '../studies.module';\n+import {HttpClientModule} from '@angular/common/http';\n+import {BrowserAnimationsModule} from '@angular/platform-browser/animations';\n+import {ToastrModule} from 'ngx-toastr';\n+import {StudyDetailsService} from '../shared/study-details.service';\n+import {StudyDetails} from '../shared/study-details';\n+import {expectedStudiesDetails} from 'src/app/entity/mock-studies-data';\n+import {of} from 'rxjs';\n+import {EntityService} from 'src/app/service/entity.service';\n+\n+describe('StudyDetailsComponent', () => {\n+  let component: StudyDetailsComponent;\n+  let fixture: ComponentFixture<StudyDetailsComponent>;\n+\n+  beforeEach(async(async () => {\n+    const studyServiceSpy = jasmine.createSpyObj<StudyDetailsService>(\n+      'StudyDetailsService',\n+      {getStudyDetails: of(expectedStudiesDetails)},\n+    );\n+    await TestBed.configureTestingModule({\n+      declarations: [StudyDetailsComponent],\n+      imports: [\n+        ModalModule.forRoot(),\n+        RouterTestingModule,\n+        StudiesModule,\n+        BrowserAnimationsModule,\n+        HttpClientModule,\n+        ToastrModule.forRoot({\n+          positionClass: 'toast-top-center',\n+          preventDuplicates: true,\n+          enableHtml: true,\n+        }),\n+      ],\n+      providers: [\n+        EntityService,\n+        BsModalRef,\n+        {provide: StudyDetailsService, useValue: studyServiceSpy},\n+      ],\n+    })\n+      .compileComponents()\n+      .then(() => {\n+        fixture = TestBed.createComponent(StudyDetailsComponent);\n+        component = fixture.componentInstance;\n+        studyServiceSpy.getStudyDetails.and.returnValues(\n+          of(expectedStudiesDetails),\n+        );\n+      });\n+  }));\n+\n+  it('should create', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should NOT have study`s participant list before ngOnInit', () => {\n+    component.studyDetail$.pipe().subscribe((studyDetail: StudyDetails) => {\n+      expect(\n+        studyDetail.participantRegistryDetail.registryParticipants.length,\n+      ).toBe(0, 'should NOT have study`s participant list before ngOnInit');\n+    });\n+  });\n+\n+  describe('after get studies', () => {\n+    beforeEach(async(() => {\n+      fixture.detectChanges();\n+      void fixture.whenStable().then(() => {\n+        fixture.detectChanges();\n+      });\n+    }));\n+\n+    it('should get the list of study participants via refresh function', fakeAsync(() => {\n+      component.studyDetail$.subscribe((studyDetail) => {\n+        studyDetail;\n+        expect(\n+          studyDetail.participantRegistryDetail.registryParticipants.length,\n+        ).toEqual(\n+          expectedStudiesDetails.participantRegistryDetail.registryParticipants\n+            .length,\n+        );\n+      });\n+    }));\n+\n+    it('should check the participant list received and the appId and studyId should match', () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU0Nzg0Ng=="}, "originalCommit": {"oid": "37f620632c3c7a821afa11618befa0c5918e52f4"}, "originalPosition": 92}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2119, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}