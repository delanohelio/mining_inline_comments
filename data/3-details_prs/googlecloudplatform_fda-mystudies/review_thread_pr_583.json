{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxOTEwMzAw", "number": 583, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNjoyMjowNlrOEMj_OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMTozNjo0N1rOENEJwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNjA3OTkyOnYy", "diffSide": "RIGHT", "path": "audit-log-module/audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/ApiEndpoint.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNjoyMjowNlrOGuvspA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwOToxNDowOVrOGvIqiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY2OTE1Ng==", "bodyText": "Why is this being changed in the PR for change password?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/583#discussion_r451669156", "createdAt": "2020-07-08T16:22:06Z", "author": {"login": "saminguyen"}, "path": "audit-log-module/audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/ApiEndpoint.java", "diffHunk": "@@ -12,7 +12,7 @@\n import java.net.URL;\n \n public enum ApiEndpoint {\n-  HEALTH(\"http://localhost:8001/audit-log-service/v1/healthCheck\"),\n+  HEALTH(\"http://localhost:8001/audit-log-service/healthCheck\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e873164d2fd685b8d29d2881968f92f492f956d0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA3ODIxNw==", "bodyText": "Zohreh commented on versioning in API endpoints in PR#575.  I removed /v1 from HEALTH endpoint to fix test failure.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/583#discussion_r452078217", "createdAt": "2020-07-09T09:14:09Z", "author": {"login": "dhanyak-btc"}, "path": "audit-log-module/audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/ApiEndpoint.java", "diffHunk": "@@ -12,7 +12,7 @@\n import java.net.URL;\n \n public enum ApiEndpoint {\n-  HEALTH(\"http://localhost:8001/audit-log-service/v1/healthCheck\"),\n+  HEALTH(\"http://localhost:8001/audit-log-service/healthCheck\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY2OTE1Ng=="}, "originalCommit": {"oid": "e873164d2fd685b8d29d2881968f92f492f956d0"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzQzNTg5OnYy", "diffSide": "RIGHT", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/ChangePasswordRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMzo0Njo0N1rOGu843g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwOToxODo1OFrOGvI1uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg4NTI3OA==", "bodyText": "Is there a reason for so many backslashes. Wouldn't this suffice\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  \"^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!\\\\\\\\\\\\\\\"#$%&'()*+,-.:;<=>?@\\\\\\\\\\\\\\\\[\\\\\\\\\\\\\\\\]^_`{|}~]).{8,64}$\";\n          \n          \n            \n                  \"^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!\\\"#$%&'()*+,-.:;<=>?@\\[\\]^_`{|}~]).{8,64}$\";", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/583#discussion_r451885278", "createdAt": "2020-07-08T23:46:47Z", "author": {"login": "saminguyen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/ChangePasswordRequest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.beans;\n+\n+import javax.validation.constraints.Pattern;\n+import javax.validation.constraints.Size;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+\n+@Getter\n+@Setter\n+public class ChangePasswordRequest {\n+\n+  private static final String PASSWORD_REGEX =\n+      \"^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!\\\\\\\\\\\\\\\"#$%&'()*+,-.:;<=>?@\\\\\\\\\\\\\\\\[\\\\\\\\\\\\\\\\]^_`{|}~]).{8,64}$\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e873164d2fd685b8d29d2881968f92f492f956d0"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA4MTA4MQ==", "bodyText": "Thanks Sami for providing the regex. I've changed the regex value, please review.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/583#discussion_r452081081", "createdAt": "2020-07-09T09:18:58Z", "author": {"login": "dhanyak-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/ChangePasswordRequest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.beans;\n+\n+import javax.validation.constraints.Pattern;\n+import javax.validation.constraints.Size;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+\n+@Getter\n+@Setter\n+public class ChangePasswordRequest {\n+\n+  private static final String PASSWORD_REGEX =\n+      \"^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!\\\\\\\\\\\\\\\"#$%&'()*+,-.:;<=>?@\\\\\\\\\\\\\\\\[\\\\\\\\\\\\\\\\]^_`{|}~]).{8,64}$\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg4NTI3OA=="}, "originalCommit": {"oid": "e873164d2fd685b8d29d2881968f92f492f956d0"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzUwNjkxOnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/UserServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMDoyNDowMlrOGu9h_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwOToxOTozMFrOGvI3Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg5NTgwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                logger.entry(\"begin updateUser()\");\n          \n          \n            \n                logger.entry(\"begin changePassword()\");", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/583#discussion_r451895804", "createdAt": "2020-07-09T00:24:02Z", "author": {"login": "saminguyen"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/UserServiceImpl.java", "diffHunk": "@@ -61,30 +69,97 @@ public UserResponse createUser(UserRequest userRequest) {\n \n     // save user account details\n     UserEntity userEntity = UserMapper.fromUserRequest(userRequest);\n-    ObjectNode userInfo = getUserInfoWithPasswordAndPasswordHistory(userRequest);\n+    ObjectNode userInfo = getObjectNode();\n+    setPasswordAndPasswordHistoryFields(userRequest.getPassword(), userInfo);\n+\n     userEntity.setUserInfo(userInfo.toString());\n     userEntity = repository.saveAndFlush(userEntity);\n     logger.exit(String.format(\"id=%s\", userEntity.getId()));\n     return UserMapper.toUserResponse(userEntity);\n   }\n \n-  private ObjectNode getUserInfoWithPasswordAndPasswordHistory(UserRequest userRequest) {\n+  private void setPasswordAndPasswordHistoryFields(String password, ObjectNode userInfo) {\n     // encrypt the password using random salt\n     String rawSalt = salt();\n-    String encrypted = encrypt(userRequest.getPassword(), rawSalt);\n+    String encrypted = encrypt(password, rawSalt);\n \n     ObjectNode passwordNode = getObjectNode();\n     passwordNode.put(HASH, hash(encrypted));\n     passwordNode.put(SALT, rawSalt);\n     passwordNode.put(\n         EXPIRES_AT, DateTimeUtils.getSystemDateTimestamp(appConfig.getPasswordExpiryDays(), 0, 0));\n \n-    ArrayNode passwordHistory = createArrayNode();\n+    ArrayNode passwordHistory =\n+        userInfo.hasNonNull(PASSWORD_HISTORY)\n+            ? (ArrayNode) userInfo.get(PASSWORD_HISTORY)\n+            : createArrayNode();\n     passwordHistory.add(passwordNode);\n \n-    ObjectNode userInfo = getObjectNode();\n+    // keep only 'X' previous passwords\n+    logger.trace(String.format(\"password history has %d elements\", passwordHistory.size()));\n+    while (passwordHistory.size() > appConfig.getPasswordHistoryMaxSize()) {\n+      passwordHistory.remove(0);\n+    }\n+\n     userInfo.set(PASSWORD, passwordNode);\n     userInfo.set(PASSWORD_HISTORY, passwordHistory);\n-    return userInfo;\n+  }\n+\n+  @Override\n+  public ChangePasswordResponse changePassword(ChangePasswordRequest userRequest)\n+      throws JsonProcessingException {\n+    logger.entry(\"begin updateUser()\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e873164d2fd685b8d29d2881968f92f492f956d0"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA4MTQxOA==", "bodyText": "Replaced updateUser() with changePassword(). Please review.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/583#discussion_r452081418", "createdAt": "2020-07-09T09:19:30Z", "author": {"login": "dhanyak-btc"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/UserServiceImpl.java", "diffHunk": "@@ -61,30 +69,97 @@ public UserResponse createUser(UserRequest userRequest) {\n \n     // save user account details\n     UserEntity userEntity = UserMapper.fromUserRequest(userRequest);\n-    ObjectNode userInfo = getUserInfoWithPasswordAndPasswordHistory(userRequest);\n+    ObjectNode userInfo = getObjectNode();\n+    setPasswordAndPasswordHistoryFields(userRequest.getPassword(), userInfo);\n+\n     userEntity.setUserInfo(userInfo.toString());\n     userEntity = repository.saveAndFlush(userEntity);\n     logger.exit(String.format(\"id=%s\", userEntity.getId()));\n     return UserMapper.toUserResponse(userEntity);\n   }\n \n-  private ObjectNode getUserInfoWithPasswordAndPasswordHistory(UserRequest userRequest) {\n+  private void setPasswordAndPasswordHistoryFields(String password, ObjectNode userInfo) {\n     // encrypt the password using random salt\n     String rawSalt = salt();\n-    String encrypted = encrypt(userRequest.getPassword(), rawSalt);\n+    String encrypted = encrypt(password, rawSalt);\n \n     ObjectNode passwordNode = getObjectNode();\n     passwordNode.put(HASH, hash(encrypted));\n     passwordNode.put(SALT, rawSalt);\n     passwordNode.put(\n         EXPIRES_AT, DateTimeUtils.getSystemDateTimestamp(appConfig.getPasswordExpiryDays(), 0, 0));\n \n-    ArrayNode passwordHistory = createArrayNode();\n+    ArrayNode passwordHistory =\n+        userInfo.hasNonNull(PASSWORD_HISTORY)\n+            ? (ArrayNode) userInfo.get(PASSWORD_HISTORY)\n+            : createArrayNode();\n     passwordHistory.add(passwordNode);\n \n-    ObjectNode userInfo = getObjectNode();\n+    // keep only 'X' previous passwords\n+    logger.trace(String.format(\"password history has %d elements\", passwordHistory.size()));\n+    while (passwordHistory.size() > appConfig.getPasswordHistoryMaxSize()) {\n+      passwordHistory.remove(0);\n+    }\n+\n     userInfo.set(PASSWORD, passwordNode);\n     userInfo.set(PASSWORD_HISTORY, passwordHistory);\n-    return userInfo;\n+  }\n+\n+  @Override\n+  public ChangePasswordResponse changePassword(ChangePasswordRequest userRequest)\n+      throws JsonProcessingException {\n+    logger.entry(\"begin updateUser()\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg5NTgwNA=="}, "originalCommit": {"oid": "e873164d2fd685b8d29d2881968f92f492f956d0"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDg1NzQzOnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/UserServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODo1ODoxOVrOGvd58g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxOToyNzo1OFrOGwDREQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQyNjIyNg==", "bodyText": "nit: If this method is only going to be used for changePassword, I think it should be renamed to sth like  validateChangePasswordRequest instead just to be clear", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/583#discussion_r452426226", "createdAt": "2020-07-09T18:58:19Z", "author": {"login": "saminguyen"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/UserServiceImpl.java", "diffHunk": "@@ -61,30 +69,97 @@ public UserResponse createUser(UserRequest userRequest) {\n \n     // save user account details\n     UserEntity userEntity = UserMapper.fromUserRequest(userRequest);\n-    ObjectNode userInfo = getUserInfoWithPasswordAndPasswordHistory(userRequest);\n+    ObjectNode userInfo = getObjectNode();\n+    setPasswordAndPasswordHistoryFields(userRequest.getPassword(), userInfo);\n+\n     userEntity.setUserInfo(userInfo.toString());\n     userEntity = repository.saveAndFlush(userEntity);\n     logger.exit(String.format(\"id=%s\", userEntity.getId()));\n     return UserMapper.toUserResponse(userEntity);\n   }\n \n-  private ObjectNode getUserInfoWithPasswordAndPasswordHistory(UserRequest userRequest) {\n+  private void setPasswordAndPasswordHistoryFields(String password, ObjectNode userInfo) {\n     // encrypt the password using random salt\n     String rawSalt = salt();\n-    String encrypted = encrypt(userRequest.getPassword(), rawSalt);\n+    String encrypted = encrypt(password, rawSalt);\n \n     ObjectNode passwordNode = getObjectNode();\n     passwordNode.put(HASH, hash(encrypted));\n     passwordNode.put(SALT, rawSalt);\n     passwordNode.put(\n         EXPIRES_AT, DateTimeUtils.getSystemDateTimestamp(appConfig.getPasswordExpiryDays(), 0, 0));\n \n-    ArrayNode passwordHistory = createArrayNode();\n+    ArrayNode passwordHistory =\n+        userInfo.hasNonNull(PASSWORD_HISTORY)\n+            ? (ArrayNode) userInfo.get(PASSWORD_HISTORY)\n+            : createArrayNode();\n     passwordHistory.add(passwordNode);\n \n-    ObjectNode userInfo = getObjectNode();\n+    // keep only 'X' previous passwords\n+    logger.trace(String.format(\"password history has %d elements\", passwordHistory.size()));\n+    while (passwordHistory.size() > appConfig.getPasswordHistoryMaxSize()) {\n+      passwordHistory.remove(0);\n+    }\n+\n     userInfo.set(PASSWORD, passwordNode);\n     userInfo.set(PASSWORD_HISTORY, passwordHistory);\n-    return userInfo;\n+  }\n+\n+  @Override\n+  public ChangePasswordResponse changePassword(ChangePasswordRequest userRequest)\n+      throws JsonProcessingException {\n+    logger.entry(\"begin changePassword()\");\n+    Optional<UserEntity> optionalEntity = repository.findByUserId(userRequest.getUserId());\n+\n+    if (!optionalEntity.isPresent()) {\n+      logger.exit(ErrorCode.USER_NOT_FOUND);\n+      return new ChangePasswordResponse(ErrorCode.USER_NOT_FOUND);\n+    }\n+\n+    UserEntity userEntity = optionalEntity.get();\n+    ObjectNode userInfo = (ObjectNode) toJsonNode(userEntity.getUserInfo());\n+    ArrayNode passwordHistory =\n+        userInfo.hasNonNull(PASSWORD_HISTORY)\n+            ? (ArrayNode) userInfo.get(PASSWORD_HISTORY)\n+            : createArrayNode();\n+    JsonNode currentPwdNode = userInfo.get(PASSWORD);\n+\n+    ErrorCode errorCode = validatePasswords(userRequest, currentPwdNode, passwordHistory);\n+    if (errorCode != null) {\n+      logger.exit(String.format(\"change password failed with error code=%s\", errorCode));\n+      return new ChangePasswordResponse(errorCode);\n+    }\n+\n+    setPasswordAndPasswordHistoryFields(userRequest.getNewPassword(), userInfo);\n+    userEntity.setUserInfo(userInfo.toString());\n+    repository.saveAndFlush(userEntity);\n+    logger.exit(\"Your password has been changed successfully!\");\n+    return new ChangePasswordResponse(\n+        HttpStatus.OK, \"Your password has been changed successfully!\");\n+  }\n+\n+  private ErrorCode validatePasswords(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44c5e16d17a90a941e0e42a370f20424d64b43a4"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAzODM1Mw==", "bodyText": "Renamed the method to validateChangePasswordRequest", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/583#discussion_r453038353", "createdAt": "2020-07-10T19:27:58Z", "author": {"login": "dhanyak-btc"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/UserServiceImpl.java", "diffHunk": "@@ -61,30 +69,97 @@ public UserResponse createUser(UserRequest userRequest) {\n \n     // save user account details\n     UserEntity userEntity = UserMapper.fromUserRequest(userRequest);\n-    ObjectNode userInfo = getUserInfoWithPasswordAndPasswordHistory(userRequest);\n+    ObjectNode userInfo = getObjectNode();\n+    setPasswordAndPasswordHistoryFields(userRequest.getPassword(), userInfo);\n+\n     userEntity.setUserInfo(userInfo.toString());\n     userEntity = repository.saveAndFlush(userEntity);\n     logger.exit(String.format(\"id=%s\", userEntity.getId()));\n     return UserMapper.toUserResponse(userEntity);\n   }\n \n-  private ObjectNode getUserInfoWithPasswordAndPasswordHistory(UserRequest userRequest) {\n+  private void setPasswordAndPasswordHistoryFields(String password, ObjectNode userInfo) {\n     // encrypt the password using random salt\n     String rawSalt = salt();\n-    String encrypted = encrypt(userRequest.getPassword(), rawSalt);\n+    String encrypted = encrypt(password, rawSalt);\n \n     ObjectNode passwordNode = getObjectNode();\n     passwordNode.put(HASH, hash(encrypted));\n     passwordNode.put(SALT, rawSalt);\n     passwordNode.put(\n         EXPIRES_AT, DateTimeUtils.getSystemDateTimestamp(appConfig.getPasswordExpiryDays(), 0, 0));\n \n-    ArrayNode passwordHistory = createArrayNode();\n+    ArrayNode passwordHistory =\n+        userInfo.hasNonNull(PASSWORD_HISTORY)\n+            ? (ArrayNode) userInfo.get(PASSWORD_HISTORY)\n+            : createArrayNode();\n     passwordHistory.add(passwordNode);\n \n-    ObjectNode userInfo = getObjectNode();\n+    // keep only 'X' previous passwords\n+    logger.trace(String.format(\"password history has %d elements\", passwordHistory.size()));\n+    while (passwordHistory.size() > appConfig.getPasswordHistoryMaxSize()) {\n+      passwordHistory.remove(0);\n+    }\n+\n     userInfo.set(PASSWORD, passwordNode);\n     userInfo.set(PASSWORD_HISTORY, passwordHistory);\n-    return userInfo;\n+  }\n+\n+  @Override\n+  public ChangePasswordResponse changePassword(ChangePasswordRequest userRequest)\n+      throws JsonProcessingException {\n+    logger.entry(\"begin changePassword()\");\n+    Optional<UserEntity> optionalEntity = repository.findByUserId(userRequest.getUserId());\n+\n+    if (!optionalEntity.isPresent()) {\n+      logger.exit(ErrorCode.USER_NOT_FOUND);\n+      return new ChangePasswordResponse(ErrorCode.USER_NOT_FOUND);\n+    }\n+\n+    UserEntity userEntity = optionalEntity.get();\n+    ObjectNode userInfo = (ObjectNode) toJsonNode(userEntity.getUserInfo());\n+    ArrayNode passwordHistory =\n+        userInfo.hasNonNull(PASSWORD_HISTORY)\n+            ? (ArrayNode) userInfo.get(PASSWORD_HISTORY)\n+            : createArrayNode();\n+    JsonNode currentPwdNode = userInfo.get(PASSWORD);\n+\n+    ErrorCode errorCode = validatePasswords(userRequest, currentPwdNode, passwordHistory);\n+    if (errorCode != null) {\n+      logger.exit(String.format(\"change password failed with error code=%s\", errorCode));\n+      return new ChangePasswordResponse(errorCode);\n+    }\n+\n+    setPasswordAndPasswordHistoryFields(userRequest.getNewPassword(), userInfo);\n+    userEntity.setUserInfo(userInfo.toString());\n+    repository.saveAndFlush(userEntity);\n+    logger.exit(\"Your password has been changed successfully!\");\n+    return new ChangePasswordResponse(\n+        HttpStatus.OK, \"Your password has been changed successfully!\");\n+  }\n+\n+  private ErrorCode validatePasswords(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQyNjIyNg=="}, "originalCommit": {"oid": "44c5e16d17a90a941e0e42a370f20424d64b43a4"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTM0NjUxOnYy", "diffSide": "RIGHT", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/ErrorCode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMTozNTozMlrOGviokw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxOToyNToyNVrOGwDM7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwMzY5OQ==", "bodyText": "Couple questions: Why do we have two different error codes, where in some cases the int value matches with EC-xxx and in some other cases it does not? According to the documentation in https://docs.google.com/document/d/1zxyUj9OD26aCMosdw2AdgLz4nYta2XM5s6h4SJGT1T4/edit#heading=h.gjdgxs there are no cases for 404 error codes. We should update USER_NOT_FOUND code to 400 or update the doc.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/583#discussion_r452503699", "createdAt": "2020-07-09T21:35:32Z", "author": {"login": "saminguyen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/ErrorCode.java", "diffHunk": "@@ -31,6 +31,16 @@\n \n   UNAUTHORIZED(401, \"EC-401\", \"Unauthorized\", \"Invalid token\"),\n \n+  USER_NOT_FOUND(404, \"EC-114\", Constants.BAD_REQUEST, \"User not found\"),\n+\n+  CURRENT_PASSWORD_INVALID(400, \"EC-119\", Constants.BAD_REQUEST, \"Current password is invalid\"),\n+\n+  ENFORCE_PASSWORD_HISTORY(\n+      400,\n+      \"EC-105\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44c5e16d17a90a941e0e42a370f20424d64b43a4"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAzNzI5Mg==", "bodyText": "404 for user not found is correct. I also found similar answer in SO post. The link in your review comment is an old auth server design document, new auth server integrates with Hydra hence it's design is different. I'll ask the Business Analyst to collect all message code and error code in a spreadsheet and then we'll update the EC-xxx codes in this enum.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/583#discussion_r453037292", "createdAt": "2020-07-10T19:25:25Z", "author": {"login": "dhanyak-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/ErrorCode.java", "diffHunk": "@@ -31,6 +31,16 @@\n \n   UNAUTHORIZED(401, \"EC-401\", \"Unauthorized\", \"Invalid token\"),\n \n+  USER_NOT_FOUND(404, \"EC-114\", Constants.BAD_REQUEST, \"User not found\"),\n+\n+  CURRENT_PASSWORD_INVALID(400, \"EC-119\", Constants.BAD_REQUEST, \"Current password is invalid\"),\n+\n+  ENFORCE_PASSWORD_HISTORY(\n+      400,\n+      \"EC-105\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwMzY5OQ=="}, "originalCommit": {"oid": "44c5e16d17a90a941e0e42a370f20424d64b43a4"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTM0ODQ5OnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/test/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/UserControllerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMTozNjoyNFrOGvip7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxOToyOTo1MVrOGwDUBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwNDA0Ng==", "bodyText": "nit: typo\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void shouldReturnCurrentPasswordInvalidErrroCodeForChangePasswordAction()\n          \n          \n            \n              public void shouldReturnCurrentPasswordInvalidErrorCodeForChangePasswordAction()", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/583#discussion_r452504046", "createdAt": "2020-07-09T21:36:24Z", "author": {"login": "saminguyen"}, "path": "oauth-scim-module/oauth-scim-service/src/test/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/UserControllerTest.java", "diffHunk": "@@ -145,8 +157,144 @@ public void shouldReturnEmailExistsErrorCode() throws Exception {\n         .andExpect(jsonPath(\"$.error_description\").value(ErrorCode.EMAIL_EXISTS.getDescription()));\n   }\n \n+  @Test\n+  public void shouldReturnBadRequestForChangePasswordAction()\n+      throws MalformedURLException, JsonProcessingException, Exception {\n+    HttpHeaders headers = getCommonHeaders();\n+    headers.add(\"Authorization\", VALID_BEARER_TOKEN);\n+\n+    ChangePasswordRequest userRequest = new ChangePasswordRequest();\n+    userRequest.setNewPassword(\"new_password\");\n+    userRequest.setCurrentPassword(\"example_current_password\");\n+\n+    MvcResult result =\n+        mockMvc\n+            .perform(\n+                put(ApiEndpoint.CHANGE_PASSWORD.getPath(), IdGenerator.id())\n+                    .contextPath(getContextPath())\n+                    .content(asJsonString(userRequest))\n+                    .headers(headers))\n+            .andDo(print())\n+            .andExpect(status().isBadRequest())\n+            .andExpect(jsonPath(\"$.violations\").isArray())\n+            .andReturn();\n+\n+    String actualResponse = result.getResponse().getContentAsString();\n+    String expectedResponse =\n+        readJsonFile(\"/response/change_password_bad_request_response_from_annotations.json\");\n+    JSONAssert.assertEquals(expectedResponse, actualResponse, JSONCompareMode.NON_EXTENSIBLE);\n+  }\n+\n+  @Test\n+  @Order(3)\n+  public void shouldReturnCurrentPasswordInvalidErrroCodeForChangePasswordAction()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44c5e16d17a90a941e0e42a370f20424d64b43a4"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAzOTExMQ==", "bodyText": "Fixed the typo", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/583#discussion_r453039111", "createdAt": "2020-07-10T19:29:51Z", "author": {"login": "dhanyak-btc"}, "path": "oauth-scim-module/oauth-scim-service/src/test/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/UserControllerTest.java", "diffHunk": "@@ -145,8 +157,144 @@ public void shouldReturnEmailExistsErrorCode() throws Exception {\n         .andExpect(jsonPath(\"$.error_description\").value(ErrorCode.EMAIL_EXISTS.getDescription()));\n   }\n \n+  @Test\n+  public void shouldReturnBadRequestForChangePasswordAction()\n+      throws MalformedURLException, JsonProcessingException, Exception {\n+    HttpHeaders headers = getCommonHeaders();\n+    headers.add(\"Authorization\", VALID_BEARER_TOKEN);\n+\n+    ChangePasswordRequest userRequest = new ChangePasswordRequest();\n+    userRequest.setNewPassword(\"new_password\");\n+    userRequest.setCurrentPassword(\"example_current_password\");\n+\n+    MvcResult result =\n+        mockMvc\n+            .perform(\n+                put(ApiEndpoint.CHANGE_PASSWORD.getPath(), IdGenerator.id())\n+                    .contextPath(getContextPath())\n+                    .content(asJsonString(userRequest))\n+                    .headers(headers))\n+            .andDo(print())\n+            .andExpect(status().isBadRequest())\n+            .andExpect(jsonPath(\"$.violations\").isArray())\n+            .andReturn();\n+\n+    String actualResponse = result.getResponse().getContentAsString();\n+    String expectedResponse =\n+        readJsonFile(\"/response/change_password_bad_request_response_from_annotations.json\");\n+    JSONAssert.assertEquals(expectedResponse, actualResponse, JSONCompareMode.NON_EXTENSIBLE);\n+  }\n+\n+  @Test\n+  @Order(3)\n+  public void shouldReturnCurrentPasswordInvalidErrroCodeForChangePasswordAction()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwNDA0Ng=="}, "originalCommit": {"oid": "44c5e16d17a90a941e0e42a370f20424d64b43a4"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTM0OTc3OnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/test/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/UserControllerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMTozNjo0N1rOGviqsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxOToyOTo1NlrOGwDUKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwNDI0Mg==", "bodyText": "typo here too\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void shouldReturnUserNotFoundErrroCodeForChangePasswordAction()\n          \n          \n            \n              public void shouldReturnUserNotFoundErrorCodeForChangePasswordAction()", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/583#discussion_r452504242", "createdAt": "2020-07-09T21:36:47Z", "author": {"login": "saminguyen"}, "path": "oauth-scim-module/oauth-scim-service/src/test/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/UserControllerTest.java", "diffHunk": "@@ -145,8 +157,144 @@ public void shouldReturnEmailExistsErrorCode() throws Exception {\n         .andExpect(jsonPath(\"$.error_description\").value(ErrorCode.EMAIL_EXISTS.getDescription()));\n   }\n \n+  @Test\n+  public void shouldReturnBadRequestForChangePasswordAction()\n+      throws MalformedURLException, JsonProcessingException, Exception {\n+    HttpHeaders headers = getCommonHeaders();\n+    headers.add(\"Authorization\", VALID_BEARER_TOKEN);\n+\n+    ChangePasswordRequest userRequest = new ChangePasswordRequest();\n+    userRequest.setNewPassword(\"new_password\");\n+    userRequest.setCurrentPassword(\"example_current_password\");\n+\n+    MvcResult result =\n+        mockMvc\n+            .perform(\n+                put(ApiEndpoint.CHANGE_PASSWORD.getPath(), IdGenerator.id())\n+                    .contextPath(getContextPath())\n+                    .content(asJsonString(userRequest))\n+                    .headers(headers))\n+            .andDo(print())\n+            .andExpect(status().isBadRequest())\n+            .andExpect(jsonPath(\"$.violations\").isArray())\n+            .andReturn();\n+\n+    String actualResponse = result.getResponse().getContentAsString();\n+    String expectedResponse =\n+        readJsonFile(\"/response/change_password_bad_request_response_from_annotations.json\");\n+    JSONAssert.assertEquals(expectedResponse, actualResponse, JSONCompareMode.NON_EXTENSIBLE);\n+  }\n+\n+  @Test\n+  @Order(3)\n+  public void shouldReturnCurrentPasswordInvalidErrroCodeForChangePasswordAction()\n+      throws MalformedURLException, JsonProcessingException, Exception {\n+    HttpHeaders headers = getCommonHeaders();\n+    headers.add(\"Authorization\", VALID_BEARER_TOKEN);\n+\n+    ChangePasswordRequest request = new ChangePasswordRequest();\n+    request.setCurrentPassword(\"CurrentM0ck!tPassword\");\n+    request.setNewPassword(\"NewM0ck!tPassword\");\n+\n+    mockMvc\n+        .perform(\n+            put(ApiEndpoint.CHANGE_PASSWORD.getPath(), userId)\n+                .contextPath(getContextPath())\n+                .content(asJsonString(request))\n+                .headers(headers))\n+        .andDo(print())\n+        .andExpect(status().isBadRequest())\n+        .andExpect(\n+            jsonPath(\"$.error_description\")\n+                .value(ErrorCode.CURRENT_PASSWORD_INVALID.getDescription()));\n+  }\n+\n+  @Test\n+  public void shouldReturnUserNotFoundErrroCodeForChangePasswordAction()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44c5e16d17a90a941e0e42a370f20424d64b43a4"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAzOTE0NA==", "bodyText": "Fixed the typo", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/583#discussion_r453039144", "createdAt": "2020-07-10T19:29:56Z", "author": {"login": "dhanyak-btc"}, "path": "oauth-scim-module/oauth-scim-service/src/test/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/UserControllerTest.java", "diffHunk": "@@ -145,8 +157,144 @@ public void shouldReturnEmailExistsErrorCode() throws Exception {\n         .andExpect(jsonPath(\"$.error_description\").value(ErrorCode.EMAIL_EXISTS.getDescription()));\n   }\n \n+  @Test\n+  public void shouldReturnBadRequestForChangePasswordAction()\n+      throws MalformedURLException, JsonProcessingException, Exception {\n+    HttpHeaders headers = getCommonHeaders();\n+    headers.add(\"Authorization\", VALID_BEARER_TOKEN);\n+\n+    ChangePasswordRequest userRequest = new ChangePasswordRequest();\n+    userRequest.setNewPassword(\"new_password\");\n+    userRequest.setCurrentPassword(\"example_current_password\");\n+\n+    MvcResult result =\n+        mockMvc\n+            .perform(\n+                put(ApiEndpoint.CHANGE_PASSWORD.getPath(), IdGenerator.id())\n+                    .contextPath(getContextPath())\n+                    .content(asJsonString(userRequest))\n+                    .headers(headers))\n+            .andDo(print())\n+            .andExpect(status().isBadRequest())\n+            .andExpect(jsonPath(\"$.violations\").isArray())\n+            .andReturn();\n+\n+    String actualResponse = result.getResponse().getContentAsString();\n+    String expectedResponse =\n+        readJsonFile(\"/response/change_password_bad_request_response_from_annotations.json\");\n+    JSONAssert.assertEquals(expectedResponse, actualResponse, JSONCompareMode.NON_EXTENSIBLE);\n+  }\n+\n+  @Test\n+  @Order(3)\n+  public void shouldReturnCurrentPasswordInvalidErrroCodeForChangePasswordAction()\n+      throws MalformedURLException, JsonProcessingException, Exception {\n+    HttpHeaders headers = getCommonHeaders();\n+    headers.add(\"Authorization\", VALID_BEARER_TOKEN);\n+\n+    ChangePasswordRequest request = new ChangePasswordRequest();\n+    request.setCurrentPassword(\"CurrentM0ck!tPassword\");\n+    request.setNewPassword(\"NewM0ck!tPassword\");\n+\n+    mockMvc\n+        .perform(\n+            put(ApiEndpoint.CHANGE_PASSWORD.getPath(), userId)\n+                .contextPath(getContextPath())\n+                .content(asJsonString(request))\n+                .headers(headers))\n+        .andDo(print())\n+        .andExpect(status().isBadRequest())\n+        .andExpect(\n+            jsonPath(\"$.error_description\")\n+                .value(ErrorCode.CURRENT_PASSWORD_INVALID.getDescription()));\n+  }\n+\n+  @Test\n+  public void shouldReturnUserNotFoundErrroCodeForChangePasswordAction()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwNDI0Mg=="}, "originalCommit": {"oid": "44c5e16d17a90a941e0e42a370f20424d64b43a4"}, "originalPosition": 150}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2233, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}