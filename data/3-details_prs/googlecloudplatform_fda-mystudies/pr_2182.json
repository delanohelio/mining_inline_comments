{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5NDQ0NDYz", "number": 2182, "title": "[participant-manager-datastore]: \"/users/admin/{adminId}\" and \"/users\" end point refactored", "bodyText": "This PR contains the refactored code for performance issue #1932\n1: AppStudySiteInfo interface introduced\n2: In AppRepository, 2 queries added to select and unselected apps, study and sites\n3:  @RequestParam(value = \"includeUnselected\", required = false) boolean includeUnselected, in UserController", "createdAt": "2020-11-30T10:20:19Z", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2182", "merged": true, "mergeCommit": {"oid": "4ee80502a267d9882783cf1be07ea00dbbd9a63f"}, "closed": true, "closedAt": "2020-12-03T05:50:09Z", "author": {"login": "chiranjibi009"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdhiiVwgH2gAyNTI5NDQ0NDYzOmY4NmM4Yjc1NDk0M2QyYWZlYzg5NDM3MmIxZWE5Y2JkOGRlMGZkYWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdicjw8AH2gAyNTI5NDQ0NDYzOmM5ODViN2VmMzEyMzcwMTBmM2VmYWIxZjIxYjM0MDdmYzgxZGI2M2I=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f86c8b754943d2afec894372b1ea9cbd8de0fdac", "author": {"user": {"login": "chiranjibi009", "name": "Chiranjibi Dash"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/f86c8b754943d2afec894372b1ea9cbd8de0fdac", "committedDate": "2020-11-30T10:11:01Z", "message": "getAdminDetailsAndApps and getUsers api refactored"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMjMwOTM1", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2182#pullrequestreview-542230935", "createdAt": "2020-12-01T19:34:44Z", "commit": {"oid": "f86c8b754943d2afec894372b1ea9cbd8de0fdac"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxOTozNDo0NFrOH88p-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMToxMzowMVrOH8_-JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY3MDM5NQ==", "bodyText": "lowercase unselected\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public List<AppStudySiteInfo> findUnSelectedAppsStudiesSites(\n          \n          \n            \n              public List<AppStudySiteInfo> findUnselectedAppsStudiesSites(", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2182#discussion_r533670395", "createdAt": "2020-12-01T19:34:44Z", "author": {"login": "saminguyen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/repository/AppRepository.java", "diffHunk": "@@ -174,4 +175,56 @@\n               + \"ud.app_info_id=:appId AND ud.id IN (:userIds) \",\n       nativeQuery = true)\n   public List<AppSiteInfo> findSitesByAppIdAndUserIds(String appId, List<String> userIds);\n+\n+  @Query(\n+      value =\n+          \"SELECT ai.id AS appId, ai.app_name AS appName, 'app' AS permissionLevel, ai.custom_app_id AS customAppId, si.name AS studyName, loc.name AS locationName, loc.custom_id AS locationCustomId, sp.edit AS edit, sp.study_id AS studyId, sp.site_id AS siteId, si.custom_id AS customStudyId, loc.id AS locationId, loc.description AS locationDescription \"\n+              + \"FROM app_info ai, study_info si, sites st, sites_permissions sp, locations loc \"\n+              + \"WHERE ai.id=sp.app_info_id AND sp.study_id=si.id AND sp.site_id=st.id AND st.location_id=loc.id AND sp.ur_admin_user_id=:userId \"\n+              + \"AND sp.app_info_id IN (SELECT ap.app_info_id FROM app_permissions ap WHERE ap.ur_admin_user_id=:userId) \"\n+              + \"UNION ALL \"\n+              + \"SELECT ai.id AS appId, ai.app_name AS appName, 'study' AS permissionLevel, ai.custom_app_id AS customAppId, si.name AS studyName, loc.name AS locationName, loc.custom_id AS locationCustomId, sp.edit AS edit, sp.study_id AS studyId, sp.site_id AS siteId, si.custom_id AS customStudyId, loc.id AS locationId, loc.description AS locationDescription \"\n+              + \"FROM app_info ai, study_info si, sites st, sites_permissions sp, locations loc \"\n+              + \"WHERE ai.id=sp.app_info_id AND sp.study_id=si.id AND sp.site_id=st.id AND st.location_id=loc.id AND sp.ur_admin_user_id=:userId \"\n+              + \"AND sp.app_info_id NOT IN (SELECT ap.app_info_id FROM app_permissions ap WHERE ap.ur_admin_user_id=:userId) \"\n+              + \"AND sp.study_id IN (SELECT study_id FROM study_permissions WHERE ur_admin_user_id=:userId) \"\n+              + \"UNION ALL \"\n+              + \"SELECT ai.id AS appId, ai.app_name AS appName, 'site' AS permissionLevel, ai.custom_app_id AS customAppId, si.name AS studyName, loc.name AS locationName, loc.custom_id AS locationCustomId, sp.edit AS edit, sp.study_id AS studyId, sp.site_id AS siteId, si.custom_id AS customStudyId, loc.id AS locationId, loc.description AS locationDescription \"\n+              + \"FROM app_info ai, study_info si, sites st, sites_permissions sp, locations loc \"\n+              + \"WHERE ai.id=sp.app_info_id AND sp.study_id=si.id AND sp.site_id=st.id AND st.location_id=loc.id AND sp.ur_admin_user_id=:userId \"\n+              + \"AND sp.app_info_id NOT IN (SELECT ap.app_info_id FROM app_permissions ap WHERE ap.ur_admin_user_id=:userId) \"\n+              + \"AND sp.study_id NOT IN (SELECT study_id FROM study_permissions WHERE ur_admin_user_id=:userId) \"\n+              + \"UNION ALL \"\n+              + \"SELECT DISTINCT ai.id AS appId, ai.app_name AS appName, 'study' AS permissionLevel, ai.custom_app_id AS customAppId, si.name AS studyName, NULL as locationName, NULL AS locationCustomId, sp.edit AS edit, sp.study_id AS studyId, null AS siteId, null AS customStudyId, null AS locationId, null AS locationDescription  \"\n+              + \"FROM app_info ai, study_info si, sites st, study_permissions sp \"\n+              + \"WHERE ai.id=sp.app_info_id AND sp.study_id=si.id AND sp.ur_admin_user_id=:userId \"\n+              + \"AND sp.app_info_id NOT IN (SELECT ap.app_info_id FROM app_permissions ap WHERE ap.ur_admin_user_id=:userId) \"\n+              + \"AND sp.study_id NOT IN (SELECT study_id FROM sites_permissions WHERE ur_admin_user_id=:userId) \"\n+              + \"UNION ALL \"\n+              + \"SELECT DISTINCT ai.id AS appId, ai.app_name AS appName, 'app' AS permissionLevel, ai.custom_app_id AS customAppId, si.name AS studyName, NULL as locationName, NULL AS locationCustomId, sp.edit AS edit, sp.study_id AS studyId, null AS siteId, null AS customStudyId, null AS locationId, null AS locationDescription \"\n+              + \"FROM app_info ai, study_info si, sites st, study_permissions sp \"\n+              + \"WHERE ai.id=sp.app_info_id AND sp.study_id=si.id AND sp.ur_admin_user_id=:userId \"\n+              + \"AND sp.app_info_id IN (SELECT ap.app_info_id FROM app_permissions ap WHERE ap.ur_admin_user_id=:userId) \"\n+              + \"AND sp.study_id NOT IN (SELECT study_id FROM sites_permissions WHERE ur_admin_user_id=:userId) \",\n+      nativeQuery = true)\n+  public List<AppStudySiteInfo> findAppsStudiesSitesByUserId(@Param(\"userId\") String userId);\n+\n+  @Query(\n+      value =\n+          \"SELECT ai.id AS appId, ai.app_name AS appName, ai.custom_app_id AS customAppId, si.name AS studyName, loc.name AS locationName, loc.custom_id AS locationCustomId, si.id AS studyId, st.id AS siteId, si.custom_id AS customStudyId, loc.id AS locationId, loc.description AS locationDescription \"\n+              + \"FROM app_info ai, study_info si, sites st, locations loc \"\n+              + \"WHERE st.location_id=loc.id AND st.study_id=si.id AND si.app_info_id=ai.id \"\n+              + \"AND si.id NOT IN (SELECT study_id FROM study_permissions WHERE app_info_id IN (:appIds) AND ur_admin_user_id= :userId) \"\n+              + \"AND st.id NOT IN (SELECT site_id FROM sites_permissions WHERE app_info_id IN (:appIds) AND ur_admin_user_id=:userId) \"\n+              + \"AND ai.id IN (:appIds) \"\n+              + \"UNION ALL \"\n+              + \"SELECT ai.id AS appId, ai.app_name AS appName, ai.custom_app_id AS customAppId, si.name AS studyName, null AS locationName, null AS locationCustomId, si.id AS studyId, null AS siteId, si.custom_id AS customStudyId, null AS locationId, null AS locationDescription \"\n+              + \"FROM app_info ai, study_info si \"\n+              + \"WHERE si.app_info_id=ai.id \"\n+              + \"AND si.id NOT IN (SELECT study_id FROM study_permissions WHERE app_info_id IN (:appIds) AND ur_admin_user_id=:userId) \"\n+              + \"AND si.id NOT IN (SELECT study.id FROM sites site, study_info study WHERE study.id = site.study_id AND study.app_info_id IN (:appIds)) \"\n+              + \"AND ai.id IN (:appIds) \",\n+      nativeQuery = true)\n+  public List<AppStudySiteInfo> findUnSelectedAppsStudiesSites(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f86c8b754943d2afec894372b1ea9cbd8de0fdac"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcyMjQ2Mw==", "bodyText": "Add test cases for when this flag is true and false.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2182#discussion_r533722463", "createdAt": "2020-12-01T21:08:43Z", "author": {"login": "saminguyen"}, "path": "participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/UserController.java", "diffHunk": "@@ -84,11 +84,13 @@\n \n   @GetMapping(value = {\"/users/admin/{adminId}\"})\n   public ResponseEntity<GetAdminDetailsResponse> getAdminDetailsAndApps(\n-      @RequestHeader(\"userId\") String userId,\n+      @RequestHeader(\"userId\") String signedInUserId,\n       @PathVariable(value = \"adminId\", required = false) String adminId,\n+      @RequestParam(value = \"includeUnselected\", required = false) boolean includeUnselected,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f86c8b754943d2afec894372b1ea9cbd8de0fdac"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcyNDcwOA==", "bodyText": "nit: I think you should rename this method and the one below to make it more clear, for example sortUserStudyDetailsSitesByLocationName()", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2182#discussion_r533724708", "createdAt": "2020-12-01T21:13:01Z", "author": {"login": "saminguyen"}, "path": "participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java", "diffHunk": "@@ -523,174 +525,204 @@ private void deleteAppStudySiteLevelPermissions(String userId) {\n   }\n \n   @Override\n-  public GetAdminDetailsResponse getAdminDetails(String userId, String adminId) {\n+  public GetAdminDetailsResponse getAdminDetails(\n+      String signedInUserId, String adminId, boolean includeUnselected) {\n     logger.entry(\"getAdminDetails()\");\n-    ErrorCode errorCode = validateUserRequest(userId);\n-    if (errorCode != null) {\n-      throw new ErrorCodeException(errorCode);\n-    }\n+    validateSignedInUser(signedInUserId);\n \n     Optional<UserRegAdminEntity> optAdminDetails = userAdminRepository.findById(adminId);\n-    if (!optAdminDetails.isPresent()) {\n-      throw new ErrorCodeException(ErrorCode.ADMIN_NOT_FOUND);\n-    }\n \n-    UserRegAdminEntity adminDetails = optAdminDetails.get();\n+    UserRegAdminEntity adminDetails =\n+        optAdminDetails.orElseThrow(() -> new ErrorCodeException(ErrorCode.ADMIN_NOT_FOUND));\n+\n     User user = UserMapper.prepareUserInfo(adminDetails);\n-    List<AppEntity> apps = appRepository.findAll();\n-    List<AppPermissionEntity> appPermissions =\n-        appPermissionRepository.findByAdminUserId(user.getId());\n+    if (adminDetails.isSuperAdmin()) {\n+      logger.exit(String.format(\"superadmin=%b, status=%s\", user.isSuperAdmin(), user.getStatus()));\n+      return new GetAdminDetailsResponse(MessageCode.GET_ADMIN_DETAILS_SUCCESS, user);\n+    }\n \n-    Map<String, AppPermissionEntity> appPermissionMap =\n-        appPermissions\n-            .stream()\n-            .collect(Collectors.toMap(AppPermissionEntity::getAppId, Function.identity()));\n-\n-    for (AppEntity app : apps) {\n-      UserAppDetails userAppBean = UserMapper.toUserAppDetails(app);\n-      AppPermissionEntity appPermission = appPermissionMap.get(app.getId());\n-      if (appPermission != null && appPermission.getEdit() != null) {\n-        Permission permission = appPermission.getEdit();\n-        userAppBean.setPermission(permission.value());\n-        if (Permission.NO_PERMISSION != permission) {\n-          userAppBean.setSelected(true);\n+    List<AppStudySiteInfo> selectedAppsStudiesSitesInfoList =\n+        appRepository.findAppsStudiesSitesByUserId(adminId);\n+\n+    List<String> selectedAppIds = new ArrayList<>();\n+    selectedAppsStudiesSitesInfoList.forEach(\n+        p -> {\n+          if (!selectedAppIds.contains(p.getAppId())) {\n+            selectedAppIds.add(p.getAppId());\n+          }\n+        });\n+\n+    if (selectedAppIds.isEmpty()) {\n+      logger.exit(String.format(\"superadmin=%b, status=%s\", user.isSuperAdmin(), user.getStatus()));\n+      return new GetAdminDetailsResponse(MessageCode.GET_ADMIN_DETAILS_SUCCESS, user);\n+    }\n+\n+    Map<String, UserAppDetails> unselectedAppsMap = new HashMap<>();\n+    Map<String, UserStudyDetails> unselectedStudiesMap = new HashMap<>();\n+    Map<String, UserSiteDetails> unselectedSitesMap = new HashMap<>();\n+\n+    if (includeUnselected) {\n+      putUnselectedAppsStudiesSites(\n+          adminId, selectedAppIds, unselectedAppsMap, unselectedStudiesMap, unselectedSitesMap);\n+    }\n+\n+    Map<String, UserAppDetails> appsMap = new HashMap<>();\n+    Map<String, UserStudyDetails> studiesMap = new HashMap<>();\n+    Map<String, UserSiteDetails> sitesMap = new HashMap<>();\n+    for (AppStudySiteInfo app : selectedAppsStudiesSitesInfoList) {\n+      UserAppDetails appDetails = null;\n+      if (!appsMap.containsKey(app.getAppId())) {\n+        appDetails = UserMapper.toUserAppDetails(app);\n+        if (unselectedAppsMap.containsKey(app.getAppId())) {\n+          UserAppDetails unselectedAppsDetails = unselectedAppsMap.get(app.getAppId());\n+          appDetails.getStudies().addAll(unselectedAppsDetails.getStudies());\n+          appDetails.setTotalSitesCount(unselectedAppsDetails.getTotalSitesCount());\n         }\n-      } else if (adminDetails.isSuperAdmin()) {\n-        userAppBean.setPermission(Permission.EDIT.value());\n-        userAppBean.setSelected(true);\n+\n+        appsMap.put(app.getAppId(), appDetails);\n       }\n \n-      List<UserStudyDetails> userStudies = getUserStudies(app, adminDetails);\n-      userAppBean.getStudies().addAll(userStudies);\n+      appDetails = appsMap.get(app.getAppId());\n+\n+      UserStudyDetails userStudyDetails = null;\n+      if (!studiesMap.containsKey(app.getAppStudyIdKey())) {\n+        userStudyDetails = UserMapper.toUserStudyDetails(app);\n+        studiesMap.put(app.getAppStudyIdKey(), userStudyDetails);\n+        // add all unselected sites\n+        if (unselectedStudiesMap.containsKey(app.getAppStudyIdKey())) {\n+          userStudyDetails\n+              .getSites()\n+              .addAll(unselectedStudiesMap.get(app.getAppStudyIdKey()).getSites());\n+        }\n+\n+        // replace unselected study with selected study\n+        appDetails\n+            .getStudies()\n+            .removeIf(study -> StringUtils.equals(study.getStudyId(), app.getStudyId()));\n+        appDetails.getStudies().add(userStudyDetails);\n \n-      setStudiesSitesCountPerApp(userAppBean, userStudies);\n+        if (userStudyDetails.isSelected()) {\n+          appDetails.setSelectedStudiesCount(appDetails.getSelectedStudiesCount() + 1);\n+        }\n+      }\n+      userStudyDetails = studiesMap.get(app.getAppStudyIdKey());\n+\n+      if (StringUtils.isNotEmpty(app.getLocationName())\n+          && userStudyDetails != null\n+          && !sitesMap.containsKey(app.getAppStudySiteIdKey())) {\n+        UserSiteDetails userSiteDetails = UserMapper.toUserSiteDetails(app);\n+        sitesMap.put(app.getAppStudySiteIdKey(), userSiteDetails);\n+        // replace unselected site with selected site\n+        userStudyDetails\n+            .getSites()\n+            .removeIf(site -> StringUtils.equals(site.getSiteId(), app.getSiteId()));\n+        userStudyDetails.getSites().add(userSiteDetails);\n+\n+        if (userSiteDetails.isSelected()) {\n+          appDetails.setSelectedSitesCount(appDetails.getSelectedSitesCount() + 1);\n+          userStudyDetails.setSelectedSitesCount(userStudyDetails.getSelectedSitesCount() + 1);\n+        }\n+        userStudyDetails.setTotalSitesCount(userStudyDetails.getSites().size());\n+        appDetails.setTotalSitesCount(appDetails.getTotalSitesCount() + 1);\n \n-      if (userAppBean.getSelectedSitesCount() > 0 || userAppBean.getSelectedStudiesCount() > 0) {\n-        user.getApps().add(userAppBean);\n+        sortUserSites(userStudyDetails);\n       }\n+\n+      sortUserStudies(appDetails);\n+\n+      appDetails.setTotalStudiesCount(appDetails.getStudies().size());\n     }\n \n+    List<UserAppDetails> apps = appsMap.values().stream().collect(Collectors.toList());\n+    List<UserAppDetails> sortedApps =\n+        apps.stream()\n+            .sorted(Comparator.comparing(UserAppDetails::getName))\n+            .collect(Collectors.toList());\n+    user.getApps().addAll(sortedApps);\n+\n     logger.exit(\n         String.format(\n             \"total apps=%d, superadmin=%b, status=%s\",\n             user.getApps().size(), user.isSuperAdmin(), user.getStatus()));\n     return new GetAdminDetailsResponse(MessageCode.GET_ADMIN_DETAILS_SUCCESS, user);\n   }\n \n-  private void setStudiesSitesCountPerApp(\n-      UserAppDetails userAppBean, List<UserStudyDetails> userStudies) {\n-    int selectedStudiesCount =\n-        (int) userStudies.stream().filter(UserStudyDetails::isSelected).count();\n-    userAppBean.setSelectedStudiesCount(selectedStudiesCount);\n-    userAppBean.setTotalStudiesCount(userStudies.size());\n-\n-    int selectedSitesCountPerApp =\n-        userStudies.stream().mapToInt(UserStudyDetails::getSelectedSitesCount).sum();\n-    userAppBean.setSelectedSitesCount(selectedSitesCountPerApp);\n-\n-    int totalSitesCount =\n-        userStudies.stream().map(study -> study.getSites().size()).reduce(0, Integer::sum);\n-    userAppBean.setTotalSitesCount(totalSitesCount);\n+  private void sortUserSites(UserStudyDetails userStudyDetails) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f86c8b754943d2afec894372b1ea9cbd8de0fdac"}, "originalPosition": 199}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe20ef4b732e25f0c97f8657c335e25de07660ca", "author": {"user": {"login": "chiranjibi009", "name": "Chiranjibi Dash"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/fe20ef4b732e25f0c97f8657c335e25de07660ca", "committedDate": "2020-12-02T05:17:22Z", "message": "commented code changed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ef7b4120a6125a5bf832dea39518c320b6a40a9", "author": {"user": {"login": "chiranjibi009", "name": "Chiranjibi Dash"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/9ef7b4120a6125a5bf832dea39518c320b6a40a9", "committedDate": "2020-12-02T05:17:51Z", "message": "Merge branch 'develop' into get-admin-details-and-apps-api-performance-issue-fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyOTYwMTE2", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2182#pullrequestreview-542960116", "createdAt": "2020-12-02T15:35:05Z", "commit": {"oid": "9ef7b4120a6125a5bf832dea39518c320b6a40a9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c985b7ef31237010f3efab1f21b3407fc81db63b", "author": {"user": {"login": "chiranjibi009", "name": "Chiranjibi Dash"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/c985b7ef31237010f3efab1f21b3407fc81db63b", "committedDate": "2020-12-03T05:47:04Z", "message": "Merge branch 'develop' into get-admin-details-and-apps-api-performance-issue-fixes"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1103, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}