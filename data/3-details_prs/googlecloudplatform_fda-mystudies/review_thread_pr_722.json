{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyODM5NTU5", "number": 722, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxODowNDozMVrOEXUqGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxODowNzoxM1rOEXUt1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODkxMTYzOnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/UserProfileControllerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxODowNDozMVrOG_DQ7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMDo0MDoyM1rOG_buWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc2Njk1Ng==", "bodyText": "create constants for these", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/722#discussion_r468766956", "createdAt": "2020-08-11T18:04:31Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/UserProfileControllerTest.java", "diffHunk": "@@ -151,6 +164,71 @@ public void shouldReturnUnauthorizedForUserDetailsBySecurityCode() throws Except\n             jsonPath(\"$.error_description\", is(ErrorCode.SECURITY_CODE_EXPIRED.getDescription())));\n   }\n \n+  @Test\n+  public void shouldUpdateUserProfile() throws Exception {\n+    // Step 1: Call API to update user profile\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    mockMvc\n+        .perform(\n+            put(ApiEndpoint.UPDATE_USER_PROFILE.getPath(), userRegAdminEntity.getId())\n+                .content(asJsonString(getUserProfileRequest()))\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(jsonPath(\"$.message\", is(MessageCode.PROFILE_UPDATE_SUCCESS.getMessage())));\n+\n+    // Step 2: verify updated values\n+    Optional<UserRegAdminEntity> optUserRegAdminUser =\n+        userRegAdminRepository.findById(userRegAdminEntity.getId());\n+    UserRegAdminEntity userRegAdminEntity = optUserRegAdminUser.get();\n+    assertNotNull(userRegAdminEntity);\n+    assertEquals(\"mockit_email_updated@grr.la\", userRegAdminEntity.getEmail());\n+    assertEquals(\"mockito_updated\", userRegAdminEntity.getFirstName());\n+    assertEquals(\"mockito_updated_last_name\", userRegAdminEntity.getLastName());\n+  }\n+\n+  @Test\n+  public void shouldReturnUserNotExistsForUpdatedUserDetails() throws Exception {\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    mockMvc\n+        .perform(\n+            put(ApiEndpoint.UPDATE_USER_PROFILE.getPath(), IdGenerator.id())\n+                .content(asJsonString(getUserProfileRequest()))\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isUnauthorized())\n+        .andExpect(jsonPath(\"$.error_description\", is(ErrorCode.USER_NOT_EXISTS.getDescription())));\n+  }\n+\n+  @Test\n+  public void shouldReturnUserNotActiveForUpdatedUserDetails() throws Exception {\n+    // Step 1: change the status to inactive\n+    userRegAdminEntity.setStatus(CommonConstants.INACTIVE_STATUS);\n+    userRegAdminRepository.saveAndFlush(userRegAdminEntity);\n+\n+    // Step 2: Call API and expect error USER_NOT_ACTIVE\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    mockMvc\n+        .perform(\n+            put(ApiEndpoint.UPDATE_USER_PROFILE.getPath(), userRegAdminEntity.getId())\n+                .content(asJsonString(getUserProfileRequest()))\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isBadRequest())\n+        .andExpect(jsonPath(\"$.error_description\", is(ErrorCode.USER_NOT_ACTIVE.getDescription())));\n+  }\n+\n+  public UserProfileRequest getUserProfileRequest() {\n+    UserProfileRequest userProfileRequest = new UserProfileRequest();\n+    userProfileRequest.setFirstName(\"mockito_updated\");\n+    userProfileRequest.setLastName(\"mockito_updated_last_name\");\n+    userProfileRequest.setEmail(\"mockit_email_updated@grr.la\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6c2cfd86a6cccf9697dfd8f8526d9926c92921c"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NzcwNg==", "bodyText": "These values used only 2 times so didn't created constants. If its more than 3 times sonarlint will suggest to create constant.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/722#discussion_r469167706", "createdAt": "2020-08-12T10:40:23Z", "author": {"login": "madhurya-btc"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/UserProfileControllerTest.java", "diffHunk": "@@ -151,6 +164,71 @@ public void shouldReturnUnauthorizedForUserDetailsBySecurityCode() throws Except\n             jsonPath(\"$.error_description\", is(ErrorCode.SECURITY_CODE_EXPIRED.getDescription())));\n   }\n \n+  @Test\n+  public void shouldUpdateUserProfile() throws Exception {\n+    // Step 1: Call API to update user profile\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    mockMvc\n+        .perform(\n+            put(ApiEndpoint.UPDATE_USER_PROFILE.getPath(), userRegAdminEntity.getId())\n+                .content(asJsonString(getUserProfileRequest()))\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(jsonPath(\"$.message\", is(MessageCode.PROFILE_UPDATE_SUCCESS.getMessage())));\n+\n+    // Step 2: verify updated values\n+    Optional<UserRegAdminEntity> optUserRegAdminUser =\n+        userRegAdminRepository.findById(userRegAdminEntity.getId());\n+    UserRegAdminEntity userRegAdminEntity = optUserRegAdminUser.get();\n+    assertNotNull(userRegAdminEntity);\n+    assertEquals(\"mockit_email_updated@grr.la\", userRegAdminEntity.getEmail());\n+    assertEquals(\"mockito_updated\", userRegAdminEntity.getFirstName());\n+    assertEquals(\"mockito_updated_last_name\", userRegAdminEntity.getLastName());\n+  }\n+\n+  @Test\n+  public void shouldReturnUserNotExistsForUpdatedUserDetails() throws Exception {\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    mockMvc\n+        .perform(\n+            put(ApiEndpoint.UPDATE_USER_PROFILE.getPath(), IdGenerator.id())\n+                .content(asJsonString(getUserProfileRequest()))\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isUnauthorized())\n+        .andExpect(jsonPath(\"$.error_description\", is(ErrorCode.USER_NOT_EXISTS.getDescription())));\n+  }\n+\n+  @Test\n+  public void shouldReturnUserNotActiveForUpdatedUserDetails() throws Exception {\n+    // Step 1: change the status to inactive\n+    userRegAdminEntity.setStatus(CommonConstants.INACTIVE_STATUS);\n+    userRegAdminRepository.saveAndFlush(userRegAdminEntity);\n+\n+    // Step 2: Call API and expect error USER_NOT_ACTIVE\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    mockMvc\n+        .perform(\n+            put(ApiEndpoint.UPDATE_USER_PROFILE.getPath(), userRegAdminEntity.getId())\n+                .content(asJsonString(getUserProfileRequest()))\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isBadRequest())\n+        .andExpect(jsonPath(\"$.error_description\", is(ErrorCode.USER_NOT_ACTIVE.getDescription())));\n+  }\n+\n+  public UserProfileRequest getUserProfileRequest() {\n+    UserProfileRequest userProfileRequest = new UserProfileRequest();\n+    userProfileRequest.setFirstName(\"mockito_updated\");\n+    userProfileRequest.setLastName(\"mockito_updated_last_name\");\n+    userProfileRequest.setEmail(\"mockit_email_updated@grr.la\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc2Njk1Ng=="}, "originalCommit": {"oid": "c6c2cfd86a6cccf9697dfd8f8526d9926c92921c"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODkyMTE2OnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/UserProfileControllerTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxODowNzoxM1rOG_DWuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMDo0MTo1NFrOG_bxPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc2ODQ0MQ==", "bodyText": "Please re-format the code, the imports are not in alphabetical order. All the java, org imports should be after the com.... section", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/722#discussion_r468768441", "createdAt": "2020-08-11T18:07:13Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/UserProfileControllerTest.java", "diffHunk": "@@ -1,13 +1,26 @@\n package com.google.cloud.healthcare.fdamystudies.controller;\n \n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.asJsonString;\n import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.junit.Assert.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n+import java.sql.Timestamp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6c2cfd86a6cccf9697dfd8f8526d9926c92921c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc2ODU0NA==", "bodyText": "Should be done automatically by IDE?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/722#discussion_r468768544", "createdAt": "2020-08-11T18:07:24Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/UserProfileControllerTest.java", "diffHunk": "@@ -1,13 +1,26 @@\n package com.google.cloud.healthcare.fdamystudies.controller;\n \n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.asJsonString;\n import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.junit.Assert.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n+import java.sql.Timestamp;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc2ODQ0MQ=="}, "originalCommit": {"oid": "c6c2cfd86a6cccf9697dfd8f8526d9926c92921c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2ODQ0NQ==", "bodyText": "Yes, it will be done automatically by IDE. Made changes and pushed.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/722#discussion_r469168445", "createdAt": "2020-08-12T10:41:54Z", "author": {"login": "madhurya-btc"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/UserProfileControllerTest.java", "diffHunk": "@@ -1,13 +1,26 @@\n package com.google.cloud.healthcare.fdamystudies.controller;\n \n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.asJsonString;\n import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.junit.Assert.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n+import java.sql.Timestamp;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc2ODQ0MQ=="}, "originalCommit": {"oid": "c6c2cfd86a6cccf9697dfd8f8526d9926c92921c"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2100, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}