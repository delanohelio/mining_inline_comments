{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxNTM1OTA2", "number": 2232, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjo1Mjo1OFrOFAWvIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjo1Mjo1OFrOFAWvIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1OTE2ODMzOnYy", "diffSide": "RIGHT", "path": "participant-manager-datastore/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/AppControllerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjo1Mjo1OFrOH-mpRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODozMToyNlrOH_GENg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQwNjkxNw==", "bodyText": "Have one test with offset being a non-zero value", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2232#discussion_r535406917", "createdAt": "2020-12-03T16:52:58Z", "author": {"login": "saminguyen"}, "path": "participant-manager-datastore/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/AppControllerTest.java", "diffHunk": "@@ -171,6 +173,88 @@ public void shouldReturnReturnAppsWithEnrolledCount() throws Exception {\n     verifyTokenIntrospectRequest();\n   }\n \n+  @Test\n+  public void shouldReturnAppsWithPagination() throws Exception {\n+    userRegAdminEntity.setSuperAdmin(false);\n+    testDataHelper.getUserRegAdminRepository().save(userRegAdminEntity);\n+\n+    for (int i = 1; i <= 20; i++) {\n+      appEntity = testDataHelper.newAppEntity();\n+      appEntity.setAppId(\"AppCustomId\" + String.valueOf(i));\n+      testDataHelper.getAppRepository().saveAndFlush(appEntity);\n+      studyEntity = testDataHelper.newStudyEntity();\n+      testDataHelper.getStudyRepository().saveAndFlush(studyEntity);\n+      SitePermissionEntity sitePermissionEntity = new SitePermissionEntity();\n+      sitePermissionEntity.setUrAdminUser(userRegAdminEntity);\n+      sitePermissionEntity.setCanEdit(Permission.EDIT);\n+      sitePermissionEntity.setApp(appEntity);\n+      sitePermissionEntity.setStudy(studyEntity);\n+      sitePermissionEntity.setSite(siteEntity);\n+      testDataHelper.getSitePermissionRepository().saveAndFlush(sitePermissionEntity);\n+      // Pagination records should be in descending order of created timestamp\n+      // Entities are not saved in sequential order so adding delay\n+      Thread.sleep(500);\n+    }\n+\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.add(USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_APPS.getPath())\n+                .param(\"limit\", \"5\")\n+                .param(\"offset\", \"0\")\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(jsonPath(\"$.apps\").isArray())\n+        .andExpect(jsonPath(\"$.apps\", hasSize(5)))\n+        .andExpect(jsonPath(\"$.apps[0].customId\").value(\"AppCustomId20\"))\n+        .andExpect(jsonPath(\"$.apps[4].customId\").value(\"AppCustomId16\"));\n+\n+    verifyTokenIntrospectRequest();\n+  }\n+\n+  @Test\n+  public void shouldReturnAppsWithPaginationForSuperAdmin() throws Exception {\n+    userRegAdminEntity.setSuperAdmin(true);\n+    testDataHelper.getUserRegAdminRepository().save(userRegAdminEntity);\n+\n+    for (int i = 1; i <= 20; i++) {\n+      appEntity = testDataHelper.newAppEntity();\n+      appEntity.setAppId(\"AppCustomId\" + String.valueOf(i));\n+      testDataHelper.getAppRepository().saveAndFlush(appEntity);\n+      studyEntity = testDataHelper.newStudyEntity();\n+      testDataHelper.getStudyRepository().saveAndFlush(studyEntity);\n+      siteEntity = testDataHelper.newSiteEntity();\n+      siteEntity.setStudy(studyEntity);\n+      testDataHelper.getSiteRepository().saveAndFlush(siteEntity);\n+      // Pagination records should be in descending order of created timestamp\n+      // Entities are not saved in sequential order so adding delay\n+      Thread.sleep(500);\n+    }\n+\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.add(USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_APPS.getPath())\n+                .param(\"limit\", \"20\")\n+                .param(\"offset\", \"0\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7b920e8fd3075d2eb2d28eedaa3265efc16389f"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkyMTcxOA==", "bodyText": "Fixed review comment.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2232#discussion_r535921718", "createdAt": "2020-12-04T08:31:26Z", "author": {"login": "monica-BTC"}, "path": "participant-manager-datastore/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/AppControllerTest.java", "diffHunk": "@@ -171,6 +173,88 @@ public void shouldReturnReturnAppsWithEnrolledCount() throws Exception {\n     verifyTokenIntrospectRequest();\n   }\n \n+  @Test\n+  public void shouldReturnAppsWithPagination() throws Exception {\n+    userRegAdminEntity.setSuperAdmin(false);\n+    testDataHelper.getUserRegAdminRepository().save(userRegAdminEntity);\n+\n+    for (int i = 1; i <= 20; i++) {\n+      appEntity = testDataHelper.newAppEntity();\n+      appEntity.setAppId(\"AppCustomId\" + String.valueOf(i));\n+      testDataHelper.getAppRepository().saveAndFlush(appEntity);\n+      studyEntity = testDataHelper.newStudyEntity();\n+      testDataHelper.getStudyRepository().saveAndFlush(studyEntity);\n+      SitePermissionEntity sitePermissionEntity = new SitePermissionEntity();\n+      sitePermissionEntity.setUrAdminUser(userRegAdminEntity);\n+      sitePermissionEntity.setCanEdit(Permission.EDIT);\n+      sitePermissionEntity.setApp(appEntity);\n+      sitePermissionEntity.setStudy(studyEntity);\n+      sitePermissionEntity.setSite(siteEntity);\n+      testDataHelper.getSitePermissionRepository().saveAndFlush(sitePermissionEntity);\n+      // Pagination records should be in descending order of created timestamp\n+      // Entities are not saved in sequential order so adding delay\n+      Thread.sleep(500);\n+    }\n+\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.add(USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_APPS.getPath())\n+                .param(\"limit\", \"5\")\n+                .param(\"offset\", \"0\")\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(jsonPath(\"$.apps\").isArray())\n+        .andExpect(jsonPath(\"$.apps\", hasSize(5)))\n+        .andExpect(jsonPath(\"$.apps[0].customId\").value(\"AppCustomId20\"))\n+        .andExpect(jsonPath(\"$.apps[4].customId\").value(\"AppCustomId16\"));\n+\n+    verifyTokenIntrospectRequest();\n+  }\n+\n+  @Test\n+  public void shouldReturnAppsWithPaginationForSuperAdmin() throws Exception {\n+    userRegAdminEntity.setSuperAdmin(true);\n+    testDataHelper.getUserRegAdminRepository().save(userRegAdminEntity);\n+\n+    for (int i = 1; i <= 20; i++) {\n+      appEntity = testDataHelper.newAppEntity();\n+      appEntity.setAppId(\"AppCustomId\" + String.valueOf(i));\n+      testDataHelper.getAppRepository().saveAndFlush(appEntity);\n+      studyEntity = testDataHelper.newStudyEntity();\n+      testDataHelper.getStudyRepository().saveAndFlush(studyEntity);\n+      siteEntity = testDataHelper.newSiteEntity();\n+      siteEntity.setStudy(studyEntity);\n+      testDataHelper.getSiteRepository().saveAndFlush(siteEntity);\n+      // Pagination records should be in descending order of created timestamp\n+      // Entities are not saved in sequential order so adding delay\n+      Thread.sleep(500);\n+    }\n+\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.add(USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_APPS.getPath())\n+                .param(\"limit\", \"20\")\n+                .param(\"offset\", \"0\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQwNjkxNw=="}, "originalCommit": {"oid": "e7b920e8fd3075d2eb2d28eedaa3265efc16389f"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1494, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}