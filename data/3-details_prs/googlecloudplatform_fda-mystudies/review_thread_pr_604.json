{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2MjU2OTU1", "number": 604, "reviewThreads": {"totalCount": 83, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMToxMjo0NFrOENaqhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzozNjozNlrOEVaqXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTAzODEyOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserRegistrationControllerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMToxMjo0NFrOGwFyQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMToxMjo0NFrOGwFyQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3OTYxOQ==", "bodyText": "tests should not be dependent. Proper post test clean up can help with this.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r453079619", "createdAt": "2020-07-10T21:12:44Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserRegistrationControllerTest.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.verify;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.github.tomakehurst.wiremock.matching.ContainsPattern;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationForm;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserRegistrationController;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FdaEaUserDetailsServiceImpl;\n+import com.google.cloud.healthcare.fdamystudies.testutils.Constants;\n+import com.google.cloud.healthcare.fdamystudies.testutils.TestUtils;\n+import com.jayway.jsonpath.JsonPath;\n+\n+@TestMethodOrder(OrderAnnotation.class)\n+public class UserRegistrationControllerTest extends BaseMockIT {\n+\n+  private static final String REGISTER_PATH = \"/register\";\n+\n+  @Autowired private FdaEaUserDetailsServiceImpl userDetailsService;\n+\n+  @Autowired private UserRegistrationController controller;\n+\n+  @Autowired private CommonService service;\n+\n+  @Value(\"${register.url}\")\n+  private String authRegisterUrl;\n+\n+  @Test\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(mockMvc);\n+    assertNotNull(service);\n+  }\n+\n+  @Test\n+  public void healthCheck() throws Exception {\n+    mockMvc.perform(get(\"/healthCheck\")).andDo(print()).andExpect(status().isOk());\n+  }\n+\n+  @Order(1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e5ad51e86173370381c4fe323671a89ce7cfb80"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODYyNzA3OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationForm.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDoyOVrOGwiuHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNDowNzo0OFrOG6J5kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1MzY5NA==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nExtra separation in import group before 'lombok.AllArgsConstructor'", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r453553694", "createdAt": "2020-07-13T10:30:29Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationForm.java", "diffHunk": "@@ -9,19 +9,24 @@\n package com.google.cloud.healthcare.fdamystudies.beans;\n \n import java.time.LocalDateTime;\n+\n import javax.validation.constraints.NotNull;\n+\n+import lombok.AllArgsConstructor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56261cc0b3c516840416d1f377c374eca45314e4"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYzMjc4Ng==", "bodyText": "please fix.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r463632786", "createdAt": "2020-07-31T14:07:48Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationForm.java", "diffHunk": "@@ -9,19 +9,24 @@\n package com.google.cloud.healthcare.fdamystudies.beans;\n \n import java.time.LocalDateTime;\n+\n import javax.validation.constraints.NotNull;\n+\n+import lombok.AllArgsConstructor;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1MzY5NA=="}, "originalCommit": {"oid": "56261cc0b3c516840416d1f377c374eca45314e4"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODYyNzA4OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationForm.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDoyOVrOGwiuIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDoyOVrOGwiuIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1MzY5Ng==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nMissing a Javadoc comment.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r453553696", "createdAt": "2020-07-13T10:30:29Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationForm.java", "diffHunk": "@@ -39,4 +44,10 @@ public UserRegistrationForm(String userId, String emailId, String password) {\n     this.emailId = emailId;\n     this.password = password;\n   }\n+\n+  public UserRegistrationForm(@NotNull String emailId, String password) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56261cc0b3c516840416d1f377c374eca45314e4"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODYyNzEwOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/EmailIdVerificationForm.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDoyOVrOGwiuIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNDowODowMFrOG6J58A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1MzY5OQ==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nExtra separation in import group before 'lombok.AllArgsConstructor'", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r453553699", "createdAt": "2020-07-13T10:30:29Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/EmailIdVerificationForm.java", "diffHunk": "@@ -9,11 +9,16 @@\n package com.google.cloud.healthcare.fdamystudies.beans;\n \n import javax.validation.constraints.NotBlank;\n+\n+import lombok.AllArgsConstructor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56261cc0b3c516840416d1f377c374eca45314e4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYzMjg4MA==", "bodyText": "please fix.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r463632880", "createdAt": "2020-07-31T14:08:00Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/EmailIdVerificationForm.java", "diffHunk": "@@ -9,11 +9,16 @@\n package com.google.cloud.healthcare.fdamystudies.beans;\n \n import javax.validation.constraints.NotBlank;\n+\n+import lombok.AllArgsConstructor;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1MzY5OQ=="}, "originalCommit": {"oid": "56261cc0b3c516840416d1f377c374eca45314e4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODYyNzExOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserSupportControllerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMFrOGwiuJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNDowODowOVrOG6J6QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1MzcwMg==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nExtra separation in import group before 'com.fasterxml.jackson.core.JsonProcessingException'", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r453553702", "createdAt": "2020-07-13T10:30:30Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserSupportControllerTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56261cc0b3c516840416d1f377c374eca45314e4"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYzMjk2MQ==", "bodyText": "please fix.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r463632961", "createdAt": "2020-07-31T14:08:09Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserSupportControllerTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1MzcwMg=="}, "originalCommit": {"oid": "56261cc0b3c516840416d1f377c374eca45314e4"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODYyNzEyOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserSupportControllerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMFrOGwiuKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNDowODoyMlrOG6J61w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1MzcwNQ==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nWrong lexicographical order for 'com.fasterxml.jackson.core.JsonProcessingException' import. Should be before 'org.springframework.http.HttpHeaders'.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r453553705", "createdAt": "2020-07-13T10:30:30Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserSupportControllerTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56261cc0b3c516840416d1f377c374eca45314e4"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYzMzExMQ==", "bodyText": "please fix the order.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r463633111", "createdAt": "2020-07-31T14:08:22Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserSupportControllerTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1MzcwNQ=="}, "originalCommit": {"oid": "56261cc0b3c516840416d1f377c374eca45314e4"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODYyNzE0OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserSupportControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMFrOGwiuKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMFrOGwiuKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1MzcwNw==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nWrong lexicographical order for 'com.google.cloud.healthcare.fdamystudies.beans.ContactUsReqBean' import. Should be before 'org.springframework.http.HttpHeaders'.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r453553707", "createdAt": "2020-07-13T10:30:30Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserSupportControllerTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.google.cloud.healthcare.fdamystudies.beans.ContactUsReqBean;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56261cc0b3c516840416d1f377c374eca45314e4"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODYyNzE2OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserSupportControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMFrOGwiuLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMFrOGwiuLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1MzcwOQ==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nWrong lexicographical order for 'com.google.cloud.healthcare.fdamystudies.beans.FeedbackReqBean' import. Should be before 'org.springframework.http.HttpHeaders'.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r453553709", "createdAt": "2020-07-13T10:30:30Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserSupportControllerTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.google.cloud.healthcare.fdamystudies.beans.ContactUsReqBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.FeedbackReqBean;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56261cc0b3c516840416d1f377c374eca45314e4"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODYyNzE4OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserSupportControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMFrOGwiuLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMFrOGwiuLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1MzcxMQ==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nWrong lexicographical order for 'com.google.cloud.healthcare.fdamystudies.common.BaseMockIT' import. Should be before 'org.springframework.http.HttpHeaders'.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r453553711", "createdAt": "2020-07-13T10:30:30Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserSupportControllerTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.google.cloud.healthcare.fdamystudies.beans.ContactUsReqBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.FeedbackReqBean;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56261cc0b3c516840416d1f377c374eca45314e4"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODYyNzIwOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserSupportControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMFrOGwiuMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMFrOGwiuMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1MzcxMw==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nWrong lexicographical order for 'com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration' import. Should be before 'org.springframework.http.HttpHeaders'.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r453553713", "createdAt": "2020-07-13T10:30:30Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserSupportControllerTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.google.cloud.healthcare.fdamystudies.beans.ContactUsReqBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.FeedbackReqBean;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56261cc0b3c516840416d1f377c374eca45314e4"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODYyNzIxOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserSupportControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMFrOGwiuMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMFrOGwiuMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1MzcxNA==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nWrong lexicographical order for 'com.google.cloud.healthcare.fdamystudies.controller.UserSupportController' import. Should be before 'org.springframework.http.HttpHeaders'.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r453553714", "createdAt": "2020-07-13T10:30:30Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserSupportControllerTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.google.cloud.healthcare.fdamystudies.beans.ContactUsReqBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.FeedbackReqBean;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserSupportController;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56261cc0b3c516840416d1f377c374eca45314e4"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODYyNzIzOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserSupportControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMFrOGwiuNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMFrOGwiuNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1MzcxNg==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nWrong lexicographical order for 'com.google.cloud.healthcare.fdamystudies.service.UserSupportService' import. Should be before 'org.springframework.http.HttpHeaders'.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r453553716", "createdAt": "2020-07-13T10:30:30Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserSupportControllerTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.google.cloud.healthcare.fdamystudies.beans.ContactUsReqBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.FeedbackReqBean;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserSupportController;\n+import com.google.cloud.healthcare.fdamystudies.service.UserSupportService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56261cc0b3c516840416d1f377c374eca45314e4"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODYyNzI0OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserSupportControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMVrOGwiuNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMVrOGwiuNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1MzcxNw==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nWrong lexicographical order for 'com.google.cloud.healthcare.fdamystudies.testutils.Constants' import. Should be before 'org.springframework.http.HttpHeaders'.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r453553717", "createdAt": "2020-07-13T10:30:31Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserSupportControllerTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.google.cloud.healthcare.fdamystudies.beans.ContactUsReqBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.FeedbackReqBean;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserSupportController;\n+import com.google.cloud.healthcare.fdamystudies.service.UserSupportService;\n+import com.google.cloud.healthcare.fdamystudies.testutils.Constants;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56261cc0b3c516840416d1f377c374eca45314e4"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODYyNzI1OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserSupportControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMVrOGwiuNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMVrOGwiuNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1MzcxOA==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nWrong lexicographical order for 'com.google.cloud.healthcare.fdamystudies.testutils.TestUtils' import. Should be before 'org.springframework.http.HttpHeaders'.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r453553718", "createdAt": "2020-07-13T10:30:31Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserSupportControllerTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.google.cloud.healthcare.fdamystudies.beans.ContactUsReqBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.FeedbackReqBean;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserSupportController;\n+import com.google.cloud.healthcare.fdamystudies.service.UserSupportService;\n+import com.google.cloud.healthcare.fdamystudies.testutils.Constants;\n+import com.google.cloud.healthcare.fdamystudies.testutils.TestUtils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56261cc0b3c516840416d1f377c374eca45314e4"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODYyNzI2OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserSupportControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMVrOGwiuNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMVrOGwiuNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1MzcxOQ==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nWrong lexicographical order for 'com.google.cloud.healthcare.fdamystudies.util.EmailNotification' import. Should be before 'org.springframework.http.HttpHeaders'.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r453553719", "createdAt": "2020-07-13T10:30:31Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserSupportControllerTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.google.cloud.healthcare.fdamystudies.beans.ContactUsReqBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.FeedbackReqBean;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserSupportController;\n+import com.google.cloud.healthcare.fdamystudies.service.UserSupportService;\n+import com.google.cloud.healthcare.fdamystudies.testutils.Constants;\n+import com.google.cloud.healthcare.fdamystudies.testutils.TestUtils;\n+import com.google.cloud.healthcare.fdamystudies.util.EmailNotification;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56261cc0b3c516840416d1f377c374eca45314e4"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODYyNzI3OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserProfileControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMVrOGwiuOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMVrOGwiuOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1MzcyMQ==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nWrong lexicographical order for 'com.google.cloud.healthcare.fdamystudies.util.EmailNotification' import. Should be before 'org.springframework.test.web.servlet.MvcResult'.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r453553721", "createdAt": "2020-07-13T10:30:31Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserProfileControllerTest.java", "diffHunk": "@@ -28,13 +29,13 @@\n import com.google.cloud.healthcare.fdamystudies.beans.SettingsRespBean;\n import com.google.cloud.healthcare.fdamystudies.beans.UserRequestBean;\n import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n-import com.google.cloud.healthcare.fdamystudies.config.AppConfig;\n import com.google.cloud.healthcare.fdamystudies.controller.UserProfileController;\n import com.google.cloud.healthcare.fdamystudies.model.UserDetailsBO;\n import com.google.cloud.healthcare.fdamystudies.service.FdaEaUserDetailsServiceImpl;\n import com.google.cloud.healthcare.fdamystudies.service.UserManagementProfileService;\n import com.google.cloud.healthcare.fdamystudies.testutils.Constants;\n import com.google.cloud.healthcare.fdamystudies.testutils.TestUtils;\n+import com.google.cloud.healthcare.fdamystudies.util.EmailNotification;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56261cc0b3c516840416d1f377c374eca45314e4"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODYyNzI4OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserRegistrationControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMVrOGwiuOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMVrOGwiuOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1MzcyMw==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nExtra separation in import group before 'com.fasterxml.jackson.core.JsonProcessingException'", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r453553723", "createdAt": "2020-07-13T10:30:31Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserRegistrationControllerTest.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.verify;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56261cc0b3c516840416d1f377c374eca45314e4"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODYyNzMwOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserRegistrationControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMVrOGwiuPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMVrOGwiuPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1MzcyNg==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nWrong lexicographical order for 'com.fasterxml.jackson.core.JsonProcessingException' import. Should be before 'org.springframework.test.web.servlet.MvcResult'.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r453553726", "createdAt": "2020-07-13T10:30:31Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserRegistrationControllerTest.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.verify;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56261cc0b3c516840416d1f377c374eca45314e4"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODYyNzMxOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserRegistrationControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMVrOGwiuPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMVrOGwiuPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1MzcyNw==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nWrong lexicographical order for 'com.github.tomakehurst.wiremock.matching.ContainsPattern' import. Should be before 'org.springframework.test.web.servlet.MvcResult'.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r453553727", "createdAt": "2020-07-13T10:30:31Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserRegistrationControllerTest.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.verify;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.github.tomakehurst.wiremock.matching.ContainsPattern;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56261cc0b3c516840416d1f377c374eca45314e4"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODYyNzMyOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserRegistrationControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMVrOGwiuQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMVrOGwiuQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1MzcyOA==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nWrong lexicographical order for 'com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationForm' import. Should be before 'org.springframework.test.web.servlet.MvcResult'.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r453553728", "createdAt": "2020-07-13T10:30:31Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserRegistrationControllerTest.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.verify;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.github.tomakehurst.wiremock.matching.ContainsPattern;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationForm;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56261cc0b3c516840416d1f377c374eca45314e4"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODYyNzMzOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserRegistrationControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMVrOGwiuQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMVrOGwiuQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1MzcyOQ==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nWrong lexicographical order for 'com.google.cloud.healthcare.fdamystudies.common.BaseMockIT' import. Should be before 'org.springframework.test.web.servlet.MvcResult'.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r453553729", "createdAt": "2020-07-13T10:30:31Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserRegistrationControllerTest.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.verify;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.github.tomakehurst.wiremock.matching.ContainsPattern;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationForm;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56261cc0b3c516840416d1f377c374eca45314e4"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODYyNzM0OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserRegistrationControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMlrOGwiuQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMlrOGwiuQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1MzczMQ==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nWrong lexicographical order for 'com.google.cloud.healthcare.fdamystudies.controller.UserRegistrationController' import. Should be before 'org.springframework.test.web.servlet.MvcResult'.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r453553731", "createdAt": "2020-07-13T10:30:32Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserRegistrationControllerTest.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.verify;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.github.tomakehurst.wiremock.matching.ContainsPattern;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationForm;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserRegistrationController;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56261cc0b3c516840416d1f377c374eca45314e4"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODYyNzM2OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserRegistrationControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMlrOGwiuRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMlrOGwiuRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1MzczMw==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nWrong lexicographical order for 'com.google.cloud.healthcare.fdamystudies.model.UserDetailsBO' import. Should be before 'org.springframework.test.web.servlet.MvcResult'.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r453553733", "createdAt": "2020-07-13T10:30:32Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserRegistrationControllerTest.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.verify;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.github.tomakehurst.wiremock.matching.ContainsPattern;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationForm;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserRegistrationController;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetailsBO;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56261cc0b3c516840416d1f377c374eca45314e4"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODYyNzM4OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserRegistrationControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMlrOGwiuSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMlrOGwiuSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1MzczNg==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nWrong lexicographical order for 'com.google.cloud.healthcare.fdamystudies.service.CommonService' import. Should be before 'org.springframework.test.web.servlet.MvcResult'.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r453553736", "createdAt": "2020-07-13T10:30:32Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserRegistrationControllerTest.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.verify;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.github.tomakehurst.wiremock.matching.ContainsPattern;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationForm;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserRegistrationController;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56261cc0b3c516840416d1f377c374eca45314e4"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODYyNzQwOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserRegistrationControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMlrOGwiuSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMlrOGwiuSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1MzczOQ==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nWrong lexicographical order for 'com.google.cloud.healthcare.fdamystudies.service.FdaEaUserDetailsServiceImpl' import. Should be before 'org.springframework.test.web.servlet.MvcResult'.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r453553739", "createdAt": "2020-07-13T10:30:32Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserRegistrationControllerTest.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.verify;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.github.tomakehurst.wiremock.matching.ContainsPattern;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationForm;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserRegistrationController;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FdaEaUserDetailsServiceImpl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56261cc0b3c516840416d1f377c374eca45314e4"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODYyNzQxOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserRegistrationControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMlrOGwiuTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMlrOGwiuTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1Mzc0MA==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nWrong lexicographical order for 'com.google.cloud.healthcare.fdamystudies.testutils.Constants' import. Should be before 'org.springframework.test.web.servlet.MvcResult'.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r453553740", "createdAt": "2020-07-13T10:30:32Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserRegistrationControllerTest.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.verify;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.github.tomakehurst.wiremock.matching.ContainsPattern;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationForm;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserRegistrationController;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FdaEaUserDetailsServiceImpl;\n+import com.google.cloud.healthcare.fdamystudies.testutils.Constants;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56261cc0b3c516840416d1f377c374eca45314e4"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODYyNzQyOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserRegistrationControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMlrOGwiuTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMlrOGwiuTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1Mzc0MQ==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nWrong lexicographical order for 'com.google.cloud.healthcare.fdamystudies.testutils.TestUtils' import. Should be before 'org.springframework.test.web.servlet.MvcResult'.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r453553741", "createdAt": "2020-07-13T10:30:32Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserRegistrationControllerTest.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.verify;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.github.tomakehurst.wiremock.matching.ContainsPattern;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationForm;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserRegistrationController;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FdaEaUserDetailsServiceImpl;\n+import com.google.cloud.healthcare.fdamystudies.testutils.Constants;\n+import com.google.cloud.healthcare.fdamystudies.testutils.TestUtils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56261cc0b3c516840416d1f377c374eca45314e4"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODYyNzQzOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserRegistrationControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMlrOGwiuTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMlrOGwiuTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1Mzc0Mg==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nWrong lexicographical order for 'com.jayway.jsonpath.JsonPath' import. Should be before 'org.springframework.test.web.servlet.MvcResult'.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r453553742", "createdAt": "2020-07-13T10:30:32Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserRegistrationControllerTest.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.verify;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.github.tomakehurst.wiremock.matching.ContainsPattern;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationForm;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserRegistrationController;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FdaEaUserDetailsServiceImpl;\n+import com.google.cloud.healthcare.fdamystudies.testutils.Constants;\n+import com.google.cloud.healthcare.fdamystudies.testutils.TestUtils;\n+import com.jayway.jsonpath.JsonPath;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56261cc0b3c516840416d1f377c374eca45314e4"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODYyNzQ0OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/VerifyEmailIdControllerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMlrOGwiuUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMjo0NDoxNlrOG8H_CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1Mzc0NA==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nExtra separation in import group before 'org.apache.commons.lang3.StringUtils'", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r453553744", "createdAt": "2020-07-13T10:30:32Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/VerifyEmailIdControllerTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.verify;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.List;\n+\n+import org.apache.commons.lang3.StringUtils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56261cc0b3c516840416d1f377c374eca45314e4"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY5ODU2OA==", "bodyText": "please fix.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465698568", "createdAt": "2020-08-05T12:44:16Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/VerifyEmailIdControllerTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.verify;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.List;\n+\n+import org.apache.commons.lang3.StringUtils;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1Mzc0NA=="}, "originalCommit": {"oid": "56261cc0b3c516840416d1f377c374eca45314e4"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODYyNzQ2OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/VerifyEmailIdControllerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozMlrOGwiuVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMjo0NDowOFrOG8H-uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1Mzc0OA==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nExtra separation in import group before 'com.fasterxml.jackson.core.JsonProcessingException'", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r453553748", "createdAt": "2020-07-13T10:30:32Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/VerifyEmailIdControllerTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.verify;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.List;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56261cc0b3c516840416d1f377c374eca45314e4"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY5ODQ5MQ==", "bodyText": "please fix here as well", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465698491", "createdAt": "2020-08-05T12:44:08Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/VerifyEmailIdControllerTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.verify;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.List;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1Mzc0OA=="}, "originalCommit": {"oid": "56261cc0b3c516840416d1f377c374eca45314e4"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODYyNzQ3OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/VerifyEmailIdControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozM1rOGwiuVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozMDozM1rOGwiuVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1Mzc0OQ==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nWrong lexicographical order for 'com.fasterxml.jackson.core.JsonProcessingException' import. Should be before 'org.springframework.http.HttpStatus'.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r453553749", "createdAt": "2020-07-13T10:30:33Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/VerifyEmailIdControllerTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.verify;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.List;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56261cc0b3c516840416d1f377c374eca45314e4"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjQ4MDA1OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/VerifyEmailIdControllerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOToxNzo0N1rOGzLzgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMjo0NDoyNlrOG8H_ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMyMzk3MQ==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nWrong lexicographical order for 'com.google.cloud.healthcare.fdamystudies.beans.EmailIdVerificationForm' import. Should be before 'org.springframework.http.HttpStatus'.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r456323971", "createdAt": "2020-07-17T09:17:47Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/VerifyEmailIdControllerTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.verify;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.List;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailIdVerificationForm;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76abf660a5b779ee321f0b67df02e0ceb938e91b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY5ODY2MQ==", "bodyText": "please fix", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465698661", "createdAt": "2020-08-05T12:44:26Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/VerifyEmailIdControllerTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.verify;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.List;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailIdVerificationForm;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMyMzk3MQ=="}, "originalCommit": {"oid": "76abf660a5b779ee321f0b67df02e0ceb938e91b"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjQ4MDA3OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/VerifyEmailIdControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOToxNzo0N1rOGzLzhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOToxNzo0N1rOGzLzhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMyMzk3Mw==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nWrong lexicographical order for 'com.google.cloud.healthcare.fdamystudies.common.BaseMockIT' import. Should be before 'org.springframework.http.HttpStatus'.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r456323973", "createdAt": "2020-07-17T09:17:47Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/VerifyEmailIdControllerTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.verify;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.List;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailIdVerificationForm;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76abf660a5b779ee321f0b67df02e0ceb938e91b"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjQ4MDA4OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/VerifyEmailIdControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOToxNzo0N1rOGzLzhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOToxNzo0N1rOGzLzhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMyMzk3NA==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nWrong lexicographical order for 'com.google.cloud.healthcare.fdamystudies.controller.VerifyEmailIdController' import. Should be before 'org.springframework.http.HttpStatus'.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r456323974", "createdAt": "2020-07-17T09:17:47Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/VerifyEmailIdControllerTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.verify;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.List;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailIdVerificationForm;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.controller.VerifyEmailIdController;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76abf660a5b779ee321f0b67df02e0ceb938e91b"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjQ4MDA5OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/VerifyEmailIdControllerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOToxNzo0N1rOGzLziA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMjo0NDo0M1rOG8IADg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMyMzk3Ng==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nWrong lexicographical order for 'com.google.cloud.healthcare.fdamystudies.dao.UserProfileManagementDaoImpl' import. Should be before 'org.springframework.http.HttpStatus'.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r456323976", "createdAt": "2020-07-17T09:17:47Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/VerifyEmailIdControllerTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.verify;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.List;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailIdVerificationForm;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.controller.VerifyEmailIdController;\n+import com.google.cloud.healthcare.fdamystudies.dao.UserProfileManagementDaoImpl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76abf660a5b779ee321f0b67df02e0ceb938e91b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY5ODgzMA==", "bodyText": "please fix", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465698830", "createdAt": "2020-08-05T12:44:43Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/VerifyEmailIdControllerTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.verify;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.List;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailIdVerificationForm;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.controller.VerifyEmailIdController;\n+import com.google.cloud.healthcare.fdamystudies.dao.UserProfileManagementDaoImpl;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMyMzk3Ng=="}, "originalCommit": {"oid": "76abf660a5b779ee321f0b67df02e0ceb938e91b"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjQ4MDEwOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/VerifyEmailIdControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOToxNzo0N1rOGzLziQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOToxNzo0N1rOGzLziQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMyMzk3Nw==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nWrong lexicographical order for 'com.google.cloud.healthcare.fdamystudies.model.AppInfoDetailsBO' import. Should be before 'org.springframework.http.HttpStatus'.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r456323977", "createdAt": "2020-07-17T09:17:47Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/VerifyEmailIdControllerTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.verify;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.List;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailIdVerificationForm;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.controller.VerifyEmailIdController;\n+import com.google.cloud.healthcare.fdamystudies.dao.UserProfileManagementDaoImpl;\n+import com.google.cloud.healthcare.fdamystudies.model.AppInfoDetailsBO;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76abf660a5b779ee321f0b67df02e0ceb938e91b"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjQ4MDExOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/VerifyEmailIdControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOToxNzo0N1rOGzLziw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOToxNzo0N1rOGzLziw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMyMzk3OQ==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nWrong lexicographical order for 'com.google.cloud.healthcare.fdamystudies.model.UserDetailsBO' import. Should be before 'org.springframework.http.HttpStatus'.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r456323979", "createdAt": "2020-07-17T09:17:47Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/VerifyEmailIdControllerTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.verify;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.List;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailIdVerificationForm;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.controller.VerifyEmailIdController;\n+import com.google.cloud.healthcare.fdamystudies.dao.UserProfileManagementDaoImpl;\n+import com.google.cloud.healthcare.fdamystudies.model.AppInfoDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetailsBO;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76abf660a5b779ee321f0b67df02e0ceb938e91b"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjQ4MDEyOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/VerifyEmailIdControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOToxNzo0N1rOGzLzjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOToxNzo0N1rOGzLzjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMyMzk4MQ==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nWrong lexicographical order for 'com.google.cloud.healthcare.fdamystudies.repository.UserDetailsBORepository' import. Should be before 'org.springframework.http.HttpStatus'.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r456323981", "createdAt": "2020-07-17T09:17:47Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/VerifyEmailIdControllerTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.verify;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.List;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailIdVerificationForm;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.controller.VerifyEmailIdController;\n+import com.google.cloud.healthcare.fdamystudies.dao.UserProfileManagementDaoImpl;\n+import com.google.cloud.healthcare.fdamystudies.model.AppInfoDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserDetailsBORepository;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76abf660a5b779ee321f0b67df02e0ceb938e91b"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjQ4MDEzOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/VerifyEmailIdControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOToxNzo0N1rOGzLzjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOToxNzo0N1rOGzLzjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMyMzk4Mg==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nWrong lexicographical order for 'com.google.cloud.healthcare.fdamystudies.service.CommonService' import. Should be before 'org.springframework.http.HttpStatus'.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r456323982", "createdAt": "2020-07-17T09:17:47Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/VerifyEmailIdControllerTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.verify;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.List;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailIdVerificationForm;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.controller.VerifyEmailIdController;\n+import com.google.cloud.healthcare.fdamystudies.dao.UserProfileManagementDaoImpl;\n+import com.google.cloud.healthcare.fdamystudies.model.AppInfoDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserDetailsBORepository;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76abf660a5b779ee321f0b67df02e0ceb938e91b"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjQ4MDE2OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/VerifyEmailIdControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOToxNzo0OFrOGzLzkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOToxNzo0OFrOGzLzkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMyMzk4NQ==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nWrong lexicographical order for 'com.google.cloud.healthcare.fdamystudies.testutils.Constants' import. Should be before 'org.springframework.http.HttpStatus'.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r456323985", "createdAt": "2020-07-17T09:17:48Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/VerifyEmailIdControllerTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.verify;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.List;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailIdVerificationForm;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.controller.VerifyEmailIdController;\n+import com.google.cloud.healthcare.fdamystudies.dao.UserProfileManagementDaoImpl;\n+import com.google.cloud.healthcare.fdamystudies.model.AppInfoDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserDetailsBORepository;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.testutils.Constants;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76abf660a5b779ee321f0b67df02e0ceb938e91b"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjQ4MDE3OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/VerifyEmailIdControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOToxNzo0OFrOGzLzkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOToxNzo0OFrOGzLzkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMyMzk4Ng==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nWrong lexicographical order for 'com.google.cloud.healthcare.fdamystudies.testutils.TestUtils' import. Should be before 'org.springframework.http.HttpStatus'.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r456323986", "createdAt": "2020-07-17T09:17:48Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/VerifyEmailIdControllerTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.verify;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.List;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailIdVerificationForm;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.controller.VerifyEmailIdController;\n+import com.google.cloud.healthcare.fdamystudies.dao.UserProfileManagementDaoImpl;\n+import com.google.cloud.healthcare.fdamystudies.model.AppInfoDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserDetailsBORepository;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.testutils.Constants;\n+import com.google.cloud.healthcare.fdamystudies.testutils.TestUtils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76abf660a5b779ee321f0b67df02e0ceb938e91b"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjcwMjk1OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/common/BaseMockIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMDoyNzoxNFrOGzN7KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNDowNjoyN1rOG6J2lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM1ODY5Ng==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nExtra separation in import group before 'org.junit.jupiter.api.AfterEach'", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r456358696", "createdAt": "2020-07-17T10:27:14Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/common/BaseMockIT.java", "diffHunk": "@@ -15,7 +15,14 @@\n import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n import javax.servlet.http.Cookie;\n+\n+import org.junit.jupiter.api.AfterEach;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59a94b3c94d5cdcf822104d6448293bb3143fd8b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYzMjAyMg==", "bodyText": "please fix.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r463632022", "createdAt": "2020-07-31T14:06:27Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/common/BaseMockIT.java", "diffHunk": "@@ -15,7 +15,14 @@\n import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n import javax.servlet.http.Cookie;\n+\n+import org.junit.jupiter.api.AfterEach;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM1ODY5Ng=="}, "originalCommit": {"oid": "59a94b3c94d5cdcf822104d6448293bb3143fd8b"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDgxMDYzOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNDowNToyOFrOG6J0bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNDowNToyOFrOG6J0bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYzMTQ2OQ==", "bodyText": "please fix indentation", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r463631469", "createdAt": "2020-07-31T14:05:28Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/pom.xml", "diffHunk": "@@ -90,6 +90,10 @@\n \t\t\t<artifactId>mysql-connector-java</artifactId>\n \t\t\t<scope>runtime</scope>\n \t\t</dependency>\n+     <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fdcb34fbf7470d2962108186c457bd9d089922a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDgyNjkxOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/ContactUsReqBean.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNDoxMDowNlrOG6J-kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoyNzozNVrOG777tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYzNDA2Nw==", "bodyText": "not needed, please remove extra line.\nRefer to: https://google.github.io/styleguide/javaguide.html#s3.3.3-import-ordering-and-spacing", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r463634067", "createdAt": "2020-07-31T14:10:06Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/ContactUsReqBean.java", "diffHunk": "@@ -9,15 +9,18 @@\n package com.google.cloud.healthcare.fdamystudies.beans;\n \n import javax.validation.constraints.NotBlank;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fdcb34fbf7470d2962108186c457bd9d089922a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwMTExMQ==", "bodyText": "Organized the imports", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465501111", "createdAt": "2020-08-05T06:27:35Z", "author": {"login": "navya-BTC"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/ContactUsReqBean.java", "diffHunk": "@@ -9,15 +9,18 @@\n package com.google.cloud.healthcare.fdamystudies.beans;\n \n import javax.validation.constraints.NotBlank;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYzNDA2Nw=="}, "originalCommit": {"oid": "5fdcb34fbf7470d2962108186c457bd9d089922a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDgzNjUwOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/resources/log4j2.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNDoxMjozOFrOG6KEWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoyNjo1MlrOG776oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYzNTU0Nw==", "bodyText": "please revert this back, otherwise we will get a lot of noise in deployed environments.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r463635547", "createdAt": "2020-07-31T14:12:38Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/resources/log4j2.properties", "diffHunk": "@@ -53,7 +53,7 @@ logger.app.appenderRef.rolling.ref = fileLogger\n logger.app.appenderRef.console.ref = consoleLogger\n \n # Configure root logger for logging error logs in classes which are in package other than above specified package\n-rootLogger.level = info\n+rootLogger.level = debug", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fdcb34fbf7470d2962108186c457bd9d089922a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwMDgzMw==", "bodyText": "reverted back", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465500833", "createdAt": "2020-08-05T06:26:52Z", "author": {"login": "navya-BTC"}, "path": "user-registration-server-ws/user-mgmt/src/main/resources/log4j2.properties", "diffHunk": "@@ -53,7 +53,7 @@ logger.app.appenderRef.rolling.ref = fileLogger\n logger.app.appenderRef.console.ref = consoleLogger\n \n # Configure root logger for logging error logs in classes which are in package other than above specified package\n-rootLogger.level = info\n+rootLogger.level = debug", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYzNTU0Nw=="}, "originalCommit": {"oid": "5fdcb34fbf7470d2962108186c457bd9d089922a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzQzMDc0OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/UserRegistrationController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxNVrOG77ucQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxNVrOG77ucQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ5NzcxMw==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nLine is longer than 100 characters (found 127).", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465497713", "createdAt": "2020-08-05T06:18:15Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/UserRegistrationController.java", "diffHunk": "@@ -87,48 +86,52 @@\n     AuthRegistrationResponseBean authServerResponse = null;\n \n     if (!userDomainWhitelist.isValidDomain(userForm.getEmailId())) {\n-      return makeServerError(401,\n-                             MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                             MyStudiesUserRegUtil.ErrorCodes.DOMAIN_NOT_WHITELISTED.getValue(),\n-                             response);\n+      return makeServerError(\n+          401,\n+          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+          MyStudiesUserRegUtil.ErrorCodes.DOMAIN_NOT_WHITELISTED.getValue(),\n+          response);\n     }\n \n     try {\n       authServerResponse =\n-            userManagementUtil.registerUserInAuthServer(\n-                userForm, appId, orgId, clientId, secretKey);\n+          userManagementUtil.registerUserInAuthServer(userForm, appId, orgId, clientId, secretKey);\n \n       if (authServerResponse == null || !\"OK\".equals(authServerResponse.getMessage())) {\n-        commonService.createActivityLog(null, AppConstants.USER_REGD_FAILURE,\n-                                        AppConstants.USER_REGD_FAILURE_DESC + userForm.getEmailId() + \" .\");\n+        commonService.createActivityLog(\n+            null,\n+            AppConstants.USER_REGD_FAILURE,\n+            AppConstants.USER_REGD_FAILURE_DESC + userForm.getEmailId() + \" .\");\n         return makeAuthServerErrorResponse(authServerResponse, response);\n       }\n       UserDetailsBO userDetailsUsingUserId = prepareUserDetails(authServerResponse.getUserId());\n       if (userDetailsUsingUserId != null) {\n         commonService.createActivityLog(\n-          null,\n-          AppConstants.USER_REGD_FAILURE,\n-          AppConstants.USER_REGD_FAILURE_DESC + userForm.getEmailId() + \" .\");\n-        return makeServerError(400, \n-                               MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                               MyStudiesUserRegUtil.ErrorCodes.EMAIL_EXISTS.getValue(),\n-                               response);\n+            null,\n+            AppConstants.USER_REGD_FAILURE,\n+            AppConstants.USER_REGD_FAILURE_DESC + userForm.getEmailId() + \" .\");\n+        return makeServerError(\n+            400,\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.EMAIL_EXISTS.getValue(),\n+            response);\n       }\n \n       UserDetailsBO userDetailsBO = null;\n       AppOrgInfoBean appInfo = profiledao.getUserAppDetailsByAllApi(null, appId, orgId);\n       if (appInfo == null || appInfo.getAppInfoId() == 0) {\n         commonService.createActivityLog(\n-          null,\n-          AppConstants.USER_REGD_FAILURE,\n-          AppConstants.USER_REGD_FAILURE_DESC + userForm.getEmailId() + \" .\");\n+            null,\n+            AppConstants.USER_REGD_FAILURE,\n+            AppConstants.USER_REGD_FAILURE_DESC + userForm.getEmailId() + \" .\");\n         logger.info(\n-          \"(URS)...DELETING record in Auth Server STARTED. Though appId and orgId are not valid in UserRegistration server\");\n+            \"(URS)...DELETING record in Auth Server STARTED. Though appId and orgId are not valid in UserRegistration server\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1275b0d755dc41d7df75133eab56d82eed9cb5e1"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzQzMDc1OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/GetUserInstitutionResources.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxNVrOG77ucg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxNVrOG77ucg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ5NzcxNA==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nMissing a Javadoc comment.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465497714", "createdAt": "2020-08-05T06:18:15Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/GetUserInstitutionResources.java", "diffHunk": "@@ -4,40 +4,40 @@\n import com.google.cloud.healthcare.fdamystudies.model.UserInstitution;\n import com.google.cloud.healthcare.fdamystudies.repository.UserInstitutionRepository;\n import com.google.cloud.healthcare.fdamystudies.service.CloudStorageService;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Optional;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n \n @Component\n public class GetUserInstitutionResources {\n-    @Autowired\n-    UserInstitutionRepository userInstitutionRepository;\n-\n-    @Autowired\n-    CloudStorageService cloudStorageService;\n-\n-\tprivate static final UserResourceBean.ResourceType resourceType = UserResourceBean.ResourceType.INSTITUTION_RESOURCE;\n-\n-    // Returns UserResourceBeans for the institution that `userId` belongs to.\n-    // Can be an empty list.\n-    public List<UserResourceBean> getInstitutionResourcesForUser(String userId) {\n-        Optional<UserInstitution> maybeUserInstitution =\n-                userInstitutionRepository.findByUserUserId(userId);\n-        if (!maybeUserInstitution.isPresent()) return new ArrayList<>();\n-        UserInstitution userInstitution = maybeUserInstitution.get();\n-\n-        List<CloudStorageService.InstitutionResource> streams =\n-                cloudStorageService.getAllInstitutionResources(userInstitution.getInstitutionId());\n-        if (streams.isEmpty()) return new ArrayList<>();\n-\n-        List<UserResourceBean> resources = new ArrayList<>();\n-        for (CloudStorageService.InstitutionResource institutionResource : streams) {\n-            String content = new String(institutionResource.stream.toByteArray());\n-            resources.add(new UserResourceBean(institutionResource.title, content, resourceType, institutionResource.hash));\n-        }\n-        return resources;\n+  @Autowired UserInstitutionRepository userInstitutionRepository;\n+\n+  @Autowired CloudStorageService cloudStorageService;\n+\n+  private static final UserResourceBean.ResourceType resourceType =\n+      UserResourceBean.ResourceType.INSTITUTION_RESOURCE;\n+\n+  // Returns UserResourceBeans for the institution that `userId` belongs to.\n+  // Can be an empty list.\n+  public List<UserResourceBean> getInstitutionResourcesForUser(String userId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1275b0d755dc41d7df75133eab56d82eed9cb5e1"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzQzMDc3OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/GetUserInstitutionResources.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxNlrOG77udA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxNlrOG77udA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ5NzcxNg==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\n'if' construct must use '{}'s.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465497716", "createdAt": "2020-08-05T06:18:16Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/GetUserInstitutionResources.java", "diffHunk": "@@ -4,40 +4,40 @@\n import com.google.cloud.healthcare.fdamystudies.model.UserInstitution;\n import com.google.cloud.healthcare.fdamystudies.repository.UserInstitutionRepository;\n import com.google.cloud.healthcare.fdamystudies.service.CloudStorageService;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Optional;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n \n @Component\n public class GetUserInstitutionResources {\n-    @Autowired\n-    UserInstitutionRepository userInstitutionRepository;\n-\n-    @Autowired\n-    CloudStorageService cloudStorageService;\n-\n-\tprivate static final UserResourceBean.ResourceType resourceType = UserResourceBean.ResourceType.INSTITUTION_RESOURCE;\n-\n-    // Returns UserResourceBeans for the institution that `userId` belongs to.\n-    // Can be an empty list.\n-    public List<UserResourceBean> getInstitutionResourcesForUser(String userId) {\n-        Optional<UserInstitution> maybeUserInstitution =\n-                userInstitutionRepository.findByUserUserId(userId);\n-        if (!maybeUserInstitution.isPresent()) return new ArrayList<>();\n-        UserInstitution userInstitution = maybeUserInstitution.get();\n-\n-        List<CloudStorageService.InstitutionResource> streams =\n-                cloudStorageService.getAllInstitutionResources(userInstitution.getInstitutionId());\n-        if (streams.isEmpty()) return new ArrayList<>();\n-\n-        List<UserResourceBean> resources = new ArrayList<>();\n-        for (CloudStorageService.InstitutionResource institutionResource : streams) {\n-            String content = new String(institutionResource.stream.toByteArray());\n-            resources.add(new UserResourceBean(institutionResource.title, content, resourceType, institutionResource.hash));\n-        }\n-        return resources;\n+  @Autowired UserInstitutionRepository userInstitutionRepository;\n+\n+  @Autowired CloudStorageService cloudStorageService;\n+\n+  private static final UserResourceBean.ResourceType resourceType =\n+      UserResourceBean.ResourceType.INSTITUTION_RESOURCE;\n+\n+  // Returns UserResourceBeans for the institution that `userId` belongs to.\n+  // Can be an empty list.\n+  public List<UserResourceBean> getInstitutionResourcesForUser(String userId) {\n+    Optional<UserInstitution> maybeUserInstitution =\n+        userInstitutionRepository.findByUserUserId(userId);\n+    if (!maybeUserInstitution.isPresent()) return new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1275b0d755dc41d7df75133eab56d82eed9cb5e1"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzQzMDc5OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/GetUserInstitutionResources.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxNlrOG77udg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxNlrOG77udg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ5NzcxOA==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\n'if' construct must use '{}'s.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465497718", "createdAt": "2020-08-05T06:18:16Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/GetUserInstitutionResources.java", "diffHunk": "@@ -4,40 +4,40 @@\n import com.google.cloud.healthcare.fdamystudies.model.UserInstitution;\n import com.google.cloud.healthcare.fdamystudies.repository.UserInstitutionRepository;\n import com.google.cloud.healthcare.fdamystudies.service.CloudStorageService;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Optional;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n \n @Component\n public class GetUserInstitutionResources {\n-    @Autowired\n-    UserInstitutionRepository userInstitutionRepository;\n-\n-    @Autowired\n-    CloudStorageService cloudStorageService;\n-\n-\tprivate static final UserResourceBean.ResourceType resourceType = UserResourceBean.ResourceType.INSTITUTION_RESOURCE;\n-\n-    // Returns UserResourceBeans for the institution that `userId` belongs to.\n-    // Can be an empty list.\n-    public List<UserResourceBean> getInstitutionResourcesForUser(String userId) {\n-        Optional<UserInstitution> maybeUserInstitution =\n-                userInstitutionRepository.findByUserUserId(userId);\n-        if (!maybeUserInstitution.isPresent()) return new ArrayList<>();\n-        UserInstitution userInstitution = maybeUserInstitution.get();\n-\n-        List<CloudStorageService.InstitutionResource> streams =\n-                cloudStorageService.getAllInstitutionResources(userInstitution.getInstitutionId());\n-        if (streams.isEmpty()) return new ArrayList<>();\n-\n-        List<UserResourceBean> resources = new ArrayList<>();\n-        for (CloudStorageService.InstitutionResource institutionResource : streams) {\n-            String content = new String(institutionResource.stream.toByteArray());\n-            resources.add(new UserResourceBean(institutionResource.title, content, resourceType, institutionResource.hash));\n-        }\n-        return resources;\n+  @Autowired UserInstitutionRepository userInstitutionRepository;\n+\n+  @Autowired CloudStorageService cloudStorageService;\n+\n+  private static final UserResourceBean.ResourceType resourceType =\n+      UserResourceBean.ResourceType.INSTITUTION_RESOURCE;\n+\n+  // Returns UserResourceBeans for the institution that `userId` belongs to.\n+  // Can be an empty list.\n+  public List<UserResourceBean> getInstitutionResourcesForUser(String userId) {\n+    Optional<UserInstitution> maybeUserInstitution =\n+        userInstitutionRepository.findByUserUserId(userId);\n+    if (!maybeUserInstitution.isPresent()) return new ArrayList<>();\n+    UserInstitution userInstitution = maybeUserInstitution.get();\n+\n+    List<CloudStorageService.InstitutionResource> streams =\n+        cloudStorageService.getAllInstitutionResources(userInstitution.getInstitutionId());\n+    if (streams.isEmpty()) return new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1275b0d755dc41d7df75133eab56d82eed9cb5e1"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzQzMDgwOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/AuthenticationFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxNlrOG77udw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxNlrOG77udw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ5NzcxOQ==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nLine is longer than 100 characters (found 101).", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465497719", "createdAt": "2020-08-05T06:18:16Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/AuthenticationFilter.java", "diffHunk": "@@ -171,7 +170,8 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha\n               }\n             }\n           } else {\n-            logger.warn(\"AuthenticationFilter doFilter failed : missing userId, accessToken or clientToken\");\n+            logger.warn(\n+                \"AuthenticationFilter doFilter failed : missing userId, accessToken or clientToken\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1275b0d755dc41d7df75133eab56d82eed9cb5e1"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzQzMDgxOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/Mail.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxNlrOG77ueQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxNlrOG77ueQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ5NzcyMQ==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nMember name 'smtp_Hostname' must match pattern '^[a-z][a-z0-9][a-zA-Z0-9]*$'.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465497721", "createdAt": "2020-08-05T06:18:16Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/Mail.java", "diffHunk": "@@ -23,308 +23,304 @@\n import javax.mail.internet.MimeBodyPart;\n import javax.mail.internet.MimeMessage;\n import javax.mail.internet.MimeMultipart;\n-\n import lombok.Setter;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n \n public class Mail {\n \n-    private static final Logger logger = LogManager.getLogger(Mail.class);\n-\n-    private String toemail;\n-    private String subject;\n-    private String messageBody;\n-    // Fallback hostname if we are authenticating.\n-    private static final String SMTP_HOSTNAME = \"smtp.gmail.com\";\n-    // Fallback hostname if we are not authenticating.\n-    private static final String SMTP_RELAY_HOSTNAME = \"smtp-relay.gmail.com\";\n-    private static final String SMTP_PORT = \"465\";\n-    private String smtp_Hostname = \"\";\n-    private String smtp_portvalue = \"\";\n-    static String SSL_FACTORY = \"javax.net.ssl.SSLSocketFactory\";\n-    private String sslFactory = \"\";\n-    private String fromEmailAddress = \"\";\n-    private String fromEmailPass = \"\";\n-    private String fromEmailName = \"\";\n-    private String ccEmail;\n-    private String bccEmail;\n-    private String attachmentPath;\n-    // Domain that we send in the EHLO request if we are not authenticating\n-    // with the SMTP server.\n-    @Setter\n-    private String fromDomain = \"\";\n-    // If set to true, we will not authenticate with the SMTP service and\n-    // rather rely on the SMTP service's configured IP whitelist. If false we\n-    // will authenticate with the provided fromEmailAddress and fromEmailPass.\n-    @Setter\n-    private Boolean useIpWhitelist = false;\n-\n-    public boolean sendemail() throws Exception {\n-        logger.debug(\" sendemail() ==== starts\");\n-        boolean sentMail = false;\n-        try {\n-            final String username = this.getFromEmailAddress();\n-            final String password = this.getFromEmailPass();\n-            Properties props = makeProperties(useIpWhitelist);\n-            Session session = useIpWhitelist ? makeSession(props) :\n-                    makeSession(props, username, password);\n-            Message message = new MimeMessage(session);\n-            message.setFrom(new InternetAddress(username));\n-            if (StringUtils.isNotBlank(this.getToemail())) {\n-                if (this.getToemail().indexOf(\",\") != -1) {\n-                    message.setRecipients(\n-                            Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n-                } else {\n-                    message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n-                }\n-            }\n-            if (StringUtils.isNotBlank(this.getCcEmail())) {\n-                message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n-            }\n-            if (StringUtils.isNotBlank(this.getBccEmail())) {\n-                message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n-            }\n-            message.setSubject(this.subject);\n-            message.setContent(this.getMessageBody(), \"text/html\");\n-            Transport transport = session.getTransport();\n-            transport.send(message);\n-            logger.debug(\"sendemail()==== ends\");\n-            sentMail = true;\n-        } catch (MessagingException e) {\n-            logger.error(\"sendemail() MessagingException- error\", e);\n-        } catch (Exception e) {\n-            logger.error(\"ERROR:  sendemail() - error( ) \" + e + \" : \");\n-        }\n-        logger.debug(\"Mail.sendemail() :: Ends\");\n-        return sentMail;\n-    }\n-\n-    public boolean sendMailWithAttachment() throws Exception {\n-        logger.debug(\"sendMailWithAttachment()==== start\");\n-        boolean sentMail = false;\n-        try {\n-            final String username = this.getFromEmailAddress();\n-            final String password = this.getFromEmailPass();\n-            Properties props = makeProperties(useIpWhitelist);\n-            Session session = useIpWhitelist ? makeSession(props) :\n-                    makeSession(props, username, password);\n-            Message message = new MimeMessage(session);\n-            if (StringUtils.isNotBlank(this.getToemail())) {\n-                if (this.getToemail().indexOf(\",\") != -1) {\n-                    message.setRecipients(\n-                            Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n-                } else {\n-                    message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n-                }\n-            }\n-            if (StringUtils.isNotBlank(this.getCcEmail())) {\n-                message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n-            }\n-            if (StringUtils.isNotBlank(this.getBccEmail())) {\n-                message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n-            }\n-            message.setSubject(this.subject);\n-            message.setFrom(new InternetAddress(username));\n-            // message.setText(\"Check attachment in Mail\");\n-            // message.setContent(messageBody, \"text/html\");\n-            // Create the message part\n-            BodyPart messageBodyPart = new MimeBodyPart();\n-            // Create a multipar message\n-            Multipart multipart = new MimeMultipart();\n-            // Part two is attachment\n-            messageBodyPart = new MimeBodyPart();\n-            // String filename = \"D:\\\\temp\\\\TestLinks.pdf\"; // D:\\temp\\noteb.txt\n-            DataSource source = new FileDataSource(this.getAttachmentPath());\n-            messageBodyPart.setDataHandler(new DataHandler(source));\n-            messageBodyPart.setFileName(source.getName());\n-            messageBodyPart.setHeader(\"Content-Transfer-Encoding\", \"base64\");\n-            messageBodyPart.setHeader(\"Content-Type\", source.getContentType());\n-            // Send the complete message parts\n-            multipart.addBodyPart(messageBodyPart);\n-\n-            messageBodyPart = new MimeBodyPart();\n-            messageBodyPart.setText(messageBody);\n-            messageBodyPart.setHeader(\"MIME-Version\", \"1.0\");\n-            messageBodyPart.setHeader(\"Content-Type\", messageBodyPart.getContentType());\n-            multipart.addBodyPart(messageBodyPart);\n-\n-            message.setContent(multipart);\n-            Transport.send(message);\n-            sentMail = true;\n-        } catch (MessagingException e) {\n-            logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n-            sentMail = false;\n-        } catch (Exception e) {\n-            logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n-        }\n-        logger.debug(\"Mail.sendMailWithAttachment() :: Ends\");\n-        return sentMail;\n-    }\n-\n-    // Constructs a Propterties either relying on IP Whitelist on the SMTP\n-    // service or on authentication with email and password.\n-    private Properties makeProperties(Boolean useIpWhitelist) {\n-        Properties props = new Properties();\n-        props.put(\"mail.smtp.host\", this.getSmtp_Hostname());\n-        props.put(\"mail.smtp.port\", this.getSmtp_portvalue());\n-        props.put(\"mail.smtp.socketFactory.class\", this.getSslFactory());\n-        props.put(\"mail.smtp.socketFactory.port\", this.getSmtp_portvalue());\n-        if (useIpWhitelist) {\n-            props.put(\"mail.smtp.auth\", \"false\");\n-            props.put(\"mail.smtp.ssl.enable\", \"true\");\n-            props.put(\"mail.smtp.localhost\", fromDomain);\n+  private static final Logger logger = LogManager.getLogger(Mail.class);\n+\n+  private String toemail;\n+  private String subject;\n+  private String messageBody;\n+  // Fallback hostname if we are authenticating.\n+  private static final String SMTP_HOSTNAME = \"smtp.gmail.com\";\n+  // Fallback hostname if we are not authenticating.\n+  private static final String SMTP_RELAY_HOSTNAME = \"smtp-relay.gmail.com\";\n+  private static final String SMTP_PORT = \"465\";\n+  private String smtp_Hostname = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1275b0d755dc41d7df75133eab56d82eed9cb5e1"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzQzMDgzOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/Mail.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxNlrOG77ufA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxNlrOG77ufA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ5NzcyNA==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nMember name 'smtp_portvalue' must match pattern '^[a-z][a-z0-9][a-zA-Z0-9]*$'.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465497724", "createdAt": "2020-08-05T06:18:16Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/Mail.java", "diffHunk": "@@ -23,308 +23,304 @@\n import javax.mail.internet.MimeBodyPart;\n import javax.mail.internet.MimeMessage;\n import javax.mail.internet.MimeMultipart;\n-\n import lombok.Setter;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n \n public class Mail {\n \n-    private static final Logger logger = LogManager.getLogger(Mail.class);\n-\n-    private String toemail;\n-    private String subject;\n-    private String messageBody;\n-    // Fallback hostname if we are authenticating.\n-    private static final String SMTP_HOSTNAME = \"smtp.gmail.com\";\n-    // Fallback hostname if we are not authenticating.\n-    private static final String SMTP_RELAY_HOSTNAME = \"smtp-relay.gmail.com\";\n-    private static final String SMTP_PORT = \"465\";\n-    private String smtp_Hostname = \"\";\n-    private String smtp_portvalue = \"\";\n-    static String SSL_FACTORY = \"javax.net.ssl.SSLSocketFactory\";\n-    private String sslFactory = \"\";\n-    private String fromEmailAddress = \"\";\n-    private String fromEmailPass = \"\";\n-    private String fromEmailName = \"\";\n-    private String ccEmail;\n-    private String bccEmail;\n-    private String attachmentPath;\n-    // Domain that we send in the EHLO request if we are not authenticating\n-    // with the SMTP server.\n-    @Setter\n-    private String fromDomain = \"\";\n-    // If set to true, we will not authenticate with the SMTP service and\n-    // rather rely on the SMTP service's configured IP whitelist. If false we\n-    // will authenticate with the provided fromEmailAddress and fromEmailPass.\n-    @Setter\n-    private Boolean useIpWhitelist = false;\n-\n-    public boolean sendemail() throws Exception {\n-        logger.debug(\" sendemail() ==== starts\");\n-        boolean sentMail = false;\n-        try {\n-            final String username = this.getFromEmailAddress();\n-            final String password = this.getFromEmailPass();\n-            Properties props = makeProperties(useIpWhitelist);\n-            Session session = useIpWhitelist ? makeSession(props) :\n-                    makeSession(props, username, password);\n-            Message message = new MimeMessage(session);\n-            message.setFrom(new InternetAddress(username));\n-            if (StringUtils.isNotBlank(this.getToemail())) {\n-                if (this.getToemail().indexOf(\",\") != -1) {\n-                    message.setRecipients(\n-                            Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n-                } else {\n-                    message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n-                }\n-            }\n-            if (StringUtils.isNotBlank(this.getCcEmail())) {\n-                message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n-            }\n-            if (StringUtils.isNotBlank(this.getBccEmail())) {\n-                message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n-            }\n-            message.setSubject(this.subject);\n-            message.setContent(this.getMessageBody(), \"text/html\");\n-            Transport transport = session.getTransport();\n-            transport.send(message);\n-            logger.debug(\"sendemail()==== ends\");\n-            sentMail = true;\n-        } catch (MessagingException e) {\n-            logger.error(\"sendemail() MessagingException- error\", e);\n-        } catch (Exception e) {\n-            logger.error(\"ERROR:  sendemail() - error( ) \" + e + \" : \");\n-        }\n-        logger.debug(\"Mail.sendemail() :: Ends\");\n-        return sentMail;\n-    }\n-\n-    public boolean sendMailWithAttachment() throws Exception {\n-        logger.debug(\"sendMailWithAttachment()==== start\");\n-        boolean sentMail = false;\n-        try {\n-            final String username = this.getFromEmailAddress();\n-            final String password = this.getFromEmailPass();\n-            Properties props = makeProperties(useIpWhitelist);\n-            Session session = useIpWhitelist ? makeSession(props) :\n-                    makeSession(props, username, password);\n-            Message message = new MimeMessage(session);\n-            if (StringUtils.isNotBlank(this.getToemail())) {\n-                if (this.getToemail().indexOf(\",\") != -1) {\n-                    message.setRecipients(\n-                            Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n-                } else {\n-                    message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n-                }\n-            }\n-            if (StringUtils.isNotBlank(this.getCcEmail())) {\n-                message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n-            }\n-            if (StringUtils.isNotBlank(this.getBccEmail())) {\n-                message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n-            }\n-            message.setSubject(this.subject);\n-            message.setFrom(new InternetAddress(username));\n-            // message.setText(\"Check attachment in Mail\");\n-            // message.setContent(messageBody, \"text/html\");\n-            // Create the message part\n-            BodyPart messageBodyPart = new MimeBodyPart();\n-            // Create a multipar message\n-            Multipart multipart = new MimeMultipart();\n-            // Part two is attachment\n-            messageBodyPart = new MimeBodyPart();\n-            // String filename = \"D:\\\\temp\\\\TestLinks.pdf\"; // D:\\temp\\noteb.txt\n-            DataSource source = new FileDataSource(this.getAttachmentPath());\n-            messageBodyPart.setDataHandler(new DataHandler(source));\n-            messageBodyPart.setFileName(source.getName());\n-            messageBodyPart.setHeader(\"Content-Transfer-Encoding\", \"base64\");\n-            messageBodyPart.setHeader(\"Content-Type\", source.getContentType());\n-            // Send the complete message parts\n-            multipart.addBodyPart(messageBodyPart);\n-\n-            messageBodyPart = new MimeBodyPart();\n-            messageBodyPart.setText(messageBody);\n-            messageBodyPart.setHeader(\"MIME-Version\", \"1.0\");\n-            messageBodyPart.setHeader(\"Content-Type\", messageBodyPart.getContentType());\n-            multipart.addBodyPart(messageBodyPart);\n-\n-            message.setContent(multipart);\n-            Transport.send(message);\n-            sentMail = true;\n-        } catch (MessagingException e) {\n-            logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n-            sentMail = false;\n-        } catch (Exception e) {\n-            logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n-        }\n-        logger.debug(\"Mail.sendMailWithAttachment() :: Ends\");\n-        return sentMail;\n-    }\n-\n-    // Constructs a Propterties either relying on IP Whitelist on the SMTP\n-    // service or on authentication with email and password.\n-    private Properties makeProperties(Boolean useIpWhitelist) {\n-        Properties props = new Properties();\n-        props.put(\"mail.smtp.host\", this.getSmtp_Hostname());\n-        props.put(\"mail.smtp.port\", this.getSmtp_portvalue());\n-        props.put(\"mail.smtp.socketFactory.class\", this.getSslFactory());\n-        props.put(\"mail.smtp.socketFactory.port\", this.getSmtp_portvalue());\n-        if (useIpWhitelist) {\n-            props.put(\"mail.smtp.auth\", \"false\");\n-            props.put(\"mail.smtp.ssl.enable\", \"true\");\n-            props.put(\"mail.smtp.localhost\", fromDomain);\n+  private static final Logger logger = LogManager.getLogger(Mail.class);\n+\n+  private String toemail;\n+  private String subject;\n+  private String messageBody;\n+  // Fallback hostname if we are authenticating.\n+  private static final String SMTP_HOSTNAME = \"smtp.gmail.com\";\n+  // Fallback hostname if we are not authenticating.\n+  private static final String SMTP_RELAY_HOSTNAME = \"smtp-relay.gmail.com\";\n+  private static final String SMTP_PORT = \"465\";\n+  private String smtp_Hostname = \"\";\n+  private String smtp_portvalue = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1275b0d755dc41d7df75133eab56d82eed9cb5e1"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzQzMDg0OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/Mail.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxNlrOG77ufQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxNlrOG77ufQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ5NzcyNQ==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nMissing a Javadoc comment.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465497725", "createdAt": "2020-08-05T06:18:16Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/Mail.java", "diffHunk": "@@ -23,308 +23,304 @@\n import javax.mail.internet.MimeBodyPart;\n import javax.mail.internet.MimeMessage;\n import javax.mail.internet.MimeMultipart;\n-\n import lombok.Setter;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n \n public class Mail {\n \n-    private static final Logger logger = LogManager.getLogger(Mail.class);\n-\n-    private String toemail;\n-    private String subject;\n-    private String messageBody;\n-    // Fallback hostname if we are authenticating.\n-    private static final String SMTP_HOSTNAME = \"smtp.gmail.com\";\n-    // Fallback hostname if we are not authenticating.\n-    private static final String SMTP_RELAY_HOSTNAME = \"smtp-relay.gmail.com\";\n-    private static final String SMTP_PORT = \"465\";\n-    private String smtp_Hostname = \"\";\n-    private String smtp_portvalue = \"\";\n-    static String SSL_FACTORY = \"javax.net.ssl.SSLSocketFactory\";\n-    private String sslFactory = \"\";\n-    private String fromEmailAddress = \"\";\n-    private String fromEmailPass = \"\";\n-    private String fromEmailName = \"\";\n-    private String ccEmail;\n-    private String bccEmail;\n-    private String attachmentPath;\n-    // Domain that we send in the EHLO request if we are not authenticating\n-    // with the SMTP server.\n-    @Setter\n-    private String fromDomain = \"\";\n-    // If set to true, we will not authenticate with the SMTP service and\n-    // rather rely on the SMTP service's configured IP whitelist. If false we\n-    // will authenticate with the provided fromEmailAddress and fromEmailPass.\n-    @Setter\n-    private Boolean useIpWhitelist = false;\n-\n-    public boolean sendemail() throws Exception {\n-        logger.debug(\" sendemail() ==== starts\");\n-        boolean sentMail = false;\n-        try {\n-            final String username = this.getFromEmailAddress();\n-            final String password = this.getFromEmailPass();\n-            Properties props = makeProperties(useIpWhitelist);\n-            Session session = useIpWhitelist ? makeSession(props) :\n-                    makeSession(props, username, password);\n-            Message message = new MimeMessage(session);\n-            message.setFrom(new InternetAddress(username));\n-            if (StringUtils.isNotBlank(this.getToemail())) {\n-                if (this.getToemail().indexOf(\",\") != -1) {\n-                    message.setRecipients(\n-                            Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n-                } else {\n-                    message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n-                }\n-            }\n-            if (StringUtils.isNotBlank(this.getCcEmail())) {\n-                message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n-            }\n-            if (StringUtils.isNotBlank(this.getBccEmail())) {\n-                message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n-            }\n-            message.setSubject(this.subject);\n-            message.setContent(this.getMessageBody(), \"text/html\");\n-            Transport transport = session.getTransport();\n-            transport.send(message);\n-            logger.debug(\"sendemail()==== ends\");\n-            sentMail = true;\n-        } catch (MessagingException e) {\n-            logger.error(\"sendemail() MessagingException- error\", e);\n-        } catch (Exception e) {\n-            logger.error(\"ERROR:  sendemail() - error( ) \" + e + \" : \");\n-        }\n-        logger.debug(\"Mail.sendemail() :: Ends\");\n-        return sentMail;\n-    }\n-\n-    public boolean sendMailWithAttachment() throws Exception {\n-        logger.debug(\"sendMailWithAttachment()==== start\");\n-        boolean sentMail = false;\n-        try {\n-            final String username = this.getFromEmailAddress();\n-            final String password = this.getFromEmailPass();\n-            Properties props = makeProperties(useIpWhitelist);\n-            Session session = useIpWhitelist ? makeSession(props) :\n-                    makeSession(props, username, password);\n-            Message message = new MimeMessage(session);\n-            if (StringUtils.isNotBlank(this.getToemail())) {\n-                if (this.getToemail().indexOf(\",\") != -1) {\n-                    message.setRecipients(\n-                            Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n-                } else {\n-                    message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n-                }\n-            }\n-            if (StringUtils.isNotBlank(this.getCcEmail())) {\n-                message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n-            }\n-            if (StringUtils.isNotBlank(this.getBccEmail())) {\n-                message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n-            }\n-            message.setSubject(this.subject);\n-            message.setFrom(new InternetAddress(username));\n-            // message.setText(\"Check attachment in Mail\");\n-            // message.setContent(messageBody, \"text/html\");\n-            // Create the message part\n-            BodyPart messageBodyPart = new MimeBodyPart();\n-            // Create a multipar message\n-            Multipart multipart = new MimeMultipart();\n-            // Part two is attachment\n-            messageBodyPart = new MimeBodyPart();\n-            // String filename = \"D:\\\\temp\\\\TestLinks.pdf\"; // D:\\temp\\noteb.txt\n-            DataSource source = new FileDataSource(this.getAttachmentPath());\n-            messageBodyPart.setDataHandler(new DataHandler(source));\n-            messageBodyPart.setFileName(source.getName());\n-            messageBodyPart.setHeader(\"Content-Transfer-Encoding\", \"base64\");\n-            messageBodyPart.setHeader(\"Content-Type\", source.getContentType());\n-            // Send the complete message parts\n-            multipart.addBodyPart(messageBodyPart);\n-\n-            messageBodyPart = new MimeBodyPart();\n-            messageBodyPart.setText(messageBody);\n-            messageBodyPart.setHeader(\"MIME-Version\", \"1.0\");\n-            messageBodyPart.setHeader(\"Content-Type\", messageBodyPart.getContentType());\n-            multipart.addBodyPart(messageBodyPart);\n-\n-            message.setContent(multipart);\n-            Transport.send(message);\n-            sentMail = true;\n-        } catch (MessagingException e) {\n-            logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n-            sentMail = false;\n-        } catch (Exception e) {\n-            logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n-        }\n-        logger.debug(\"Mail.sendMailWithAttachment() :: Ends\");\n-        return sentMail;\n-    }\n-\n-    // Constructs a Propterties either relying on IP Whitelist on the SMTP\n-    // service or on authentication with email and password.\n-    private Properties makeProperties(Boolean useIpWhitelist) {\n-        Properties props = new Properties();\n-        props.put(\"mail.smtp.host\", this.getSmtp_Hostname());\n-        props.put(\"mail.smtp.port\", this.getSmtp_portvalue());\n-        props.put(\"mail.smtp.socketFactory.class\", this.getSslFactory());\n-        props.put(\"mail.smtp.socketFactory.port\", this.getSmtp_portvalue());\n-        if (useIpWhitelist) {\n-            props.put(\"mail.smtp.auth\", \"false\");\n-            props.put(\"mail.smtp.ssl.enable\", \"true\");\n-            props.put(\"mail.smtp.localhost\", fromDomain);\n+  private static final Logger logger = LogManager.getLogger(Mail.class);\n+\n+  private String toemail;\n+  private String subject;\n+  private String messageBody;\n+  // Fallback hostname if we are authenticating.\n+  private static final String SMTP_HOSTNAME = \"smtp.gmail.com\";\n+  // Fallback hostname if we are not authenticating.\n+  private static final String SMTP_RELAY_HOSTNAME = \"smtp-relay.gmail.com\";\n+  private static final String SMTP_PORT = \"465\";\n+  private String smtp_Hostname = \"\";\n+  private String smtp_portvalue = \"\";\n+  static String SSL_FACTORY = \"javax.net.ssl.SSLSocketFactory\";\n+  private String sslFactory = \"\";\n+  private String fromEmailAddress = \"\";\n+  private String fromEmailPass = \"\";\n+  private String fromEmailName = \"\";\n+  private String ccEmail;\n+  private String bccEmail;\n+  private String attachmentPath;\n+  // Domain that we send in the EHLO request if we are not authenticating\n+  // with the SMTP server.\n+  @Setter private String fromDomain = \"\";\n+  // If set to true, we will not authenticate with the SMTP service and\n+  // rather rely on the SMTP service's configured IP whitelist. If false we\n+  // will authenticate with the provided fromEmailAddress and fromEmailPass.\n+  @Setter private Boolean useIpWhitelist = false;\n+\n+  public boolean sendemail() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1275b0d755dc41d7df75133eab56d82eed9cb5e1"}, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzQzMDg2OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/Mail.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxN1rOG77ugA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxN1rOG77ugA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ5NzcyOA==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nMissing a Javadoc comment.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465497728", "createdAt": "2020-08-05T06:18:17Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/Mail.java", "diffHunk": "@@ -23,308 +23,304 @@\n import javax.mail.internet.MimeBodyPart;\n import javax.mail.internet.MimeMessage;\n import javax.mail.internet.MimeMultipart;\n-\n import lombok.Setter;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n \n public class Mail {\n \n-    private static final Logger logger = LogManager.getLogger(Mail.class);\n-\n-    private String toemail;\n-    private String subject;\n-    private String messageBody;\n-    // Fallback hostname if we are authenticating.\n-    private static final String SMTP_HOSTNAME = \"smtp.gmail.com\";\n-    // Fallback hostname if we are not authenticating.\n-    private static final String SMTP_RELAY_HOSTNAME = \"smtp-relay.gmail.com\";\n-    private static final String SMTP_PORT = \"465\";\n-    private String smtp_Hostname = \"\";\n-    private String smtp_portvalue = \"\";\n-    static String SSL_FACTORY = \"javax.net.ssl.SSLSocketFactory\";\n-    private String sslFactory = \"\";\n-    private String fromEmailAddress = \"\";\n-    private String fromEmailPass = \"\";\n-    private String fromEmailName = \"\";\n-    private String ccEmail;\n-    private String bccEmail;\n-    private String attachmentPath;\n-    // Domain that we send in the EHLO request if we are not authenticating\n-    // with the SMTP server.\n-    @Setter\n-    private String fromDomain = \"\";\n-    // If set to true, we will not authenticate with the SMTP service and\n-    // rather rely on the SMTP service's configured IP whitelist. If false we\n-    // will authenticate with the provided fromEmailAddress and fromEmailPass.\n-    @Setter\n-    private Boolean useIpWhitelist = false;\n-\n-    public boolean sendemail() throws Exception {\n-        logger.debug(\" sendemail() ==== starts\");\n-        boolean sentMail = false;\n-        try {\n-            final String username = this.getFromEmailAddress();\n-            final String password = this.getFromEmailPass();\n-            Properties props = makeProperties(useIpWhitelist);\n-            Session session = useIpWhitelist ? makeSession(props) :\n-                    makeSession(props, username, password);\n-            Message message = new MimeMessage(session);\n-            message.setFrom(new InternetAddress(username));\n-            if (StringUtils.isNotBlank(this.getToemail())) {\n-                if (this.getToemail().indexOf(\",\") != -1) {\n-                    message.setRecipients(\n-                            Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n-                } else {\n-                    message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n-                }\n-            }\n-            if (StringUtils.isNotBlank(this.getCcEmail())) {\n-                message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n-            }\n-            if (StringUtils.isNotBlank(this.getBccEmail())) {\n-                message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n-            }\n-            message.setSubject(this.subject);\n-            message.setContent(this.getMessageBody(), \"text/html\");\n-            Transport transport = session.getTransport();\n-            transport.send(message);\n-            logger.debug(\"sendemail()==== ends\");\n-            sentMail = true;\n-        } catch (MessagingException e) {\n-            logger.error(\"sendemail() MessagingException- error\", e);\n-        } catch (Exception e) {\n-            logger.error(\"ERROR:  sendemail() - error( ) \" + e + \" : \");\n-        }\n-        logger.debug(\"Mail.sendemail() :: Ends\");\n-        return sentMail;\n-    }\n-\n-    public boolean sendMailWithAttachment() throws Exception {\n-        logger.debug(\"sendMailWithAttachment()==== start\");\n-        boolean sentMail = false;\n-        try {\n-            final String username = this.getFromEmailAddress();\n-            final String password = this.getFromEmailPass();\n-            Properties props = makeProperties(useIpWhitelist);\n-            Session session = useIpWhitelist ? makeSession(props) :\n-                    makeSession(props, username, password);\n-            Message message = new MimeMessage(session);\n-            if (StringUtils.isNotBlank(this.getToemail())) {\n-                if (this.getToemail().indexOf(\",\") != -1) {\n-                    message.setRecipients(\n-                            Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n-                } else {\n-                    message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n-                }\n-            }\n-            if (StringUtils.isNotBlank(this.getCcEmail())) {\n-                message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n-            }\n-            if (StringUtils.isNotBlank(this.getBccEmail())) {\n-                message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n-            }\n-            message.setSubject(this.subject);\n-            message.setFrom(new InternetAddress(username));\n-            // message.setText(\"Check attachment in Mail\");\n-            // message.setContent(messageBody, \"text/html\");\n-            // Create the message part\n-            BodyPart messageBodyPart = new MimeBodyPart();\n-            // Create a multipar message\n-            Multipart multipart = new MimeMultipart();\n-            // Part two is attachment\n-            messageBodyPart = new MimeBodyPart();\n-            // String filename = \"D:\\\\temp\\\\TestLinks.pdf\"; // D:\\temp\\noteb.txt\n-            DataSource source = new FileDataSource(this.getAttachmentPath());\n-            messageBodyPart.setDataHandler(new DataHandler(source));\n-            messageBodyPart.setFileName(source.getName());\n-            messageBodyPart.setHeader(\"Content-Transfer-Encoding\", \"base64\");\n-            messageBodyPart.setHeader(\"Content-Type\", source.getContentType());\n-            // Send the complete message parts\n-            multipart.addBodyPart(messageBodyPart);\n-\n-            messageBodyPart = new MimeBodyPart();\n-            messageBodyPart.setText(messageBody);\n-            messageBodyPart.setHeader(\"MIME-Version\", \"1.0\");\n-            messageBodyPart.setHeader(\"Content-Type\", messageBodyPart.getContentType());\n-            multipart.addBodyPart(messageBodyPart);\n-\n-            message.setContent(multipart);\n-            Transport.send(message);\n-            sentMail = true;\n-        } catch (MessagingException e) {\n-            logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n-            sentMail = false;\n-        } catch (Exception e) {\n-            logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n-        }\n-        logger.debug(\"Mail.sendMailWithAttachment() :: Ends\");\n-        return sentMail;\n-    }\n-\n-    // Constructs a Propterties either relying on IP Whitelist on the SMTP\n-    // service or on authentication with email and password.\n-    private Properties makeProperties(Boolean useIpWhitelist) {\n-        Properties props = new Properties();\n-        props.put(\"mail.smtp.host\", this.getSmtp_Hostname());\n-        props.put(\"mail.smtp.port\", this.getSmtp_portvalue());\n-        props.put(\"mail.smtp.socketFactory.class\", this.getSslFactory());\n-        props.put(\"mail.smtp.socketFactory.port\", this.getSmtp_portvalue());\n-        if (useIpWhitelist) {\n-            props.put(\"mail.smtp.auth\", \"false\");\n-            props.put(\"mail.smtp.ssl.enable\", \"true\");\n-            props.put(\"mail.smtp.localhost\", fromDomain);\n+  private static final Logger logger = LogManager.getLogger(Mail.class);\n+\n+  private String toemail;\n+  private String subject;\n+  private String messageBody;\n+  // Fallback hostname if we are authenticating.\n+  private static final String SMTP_HOSTNAME = \"smtp.gmail.com\";\n+  // Fallback hostname if we are not authenticating.\n+  private static final String SMTP_RELAY_HOSTNAME = \"smtp-relay.gmail.com\";\n+  private static final String SMTP_PORT = \"465\";\n+  private String smtp_Hostname = \"\";\n+  private String smtp_portvalue = \"\";\n+  static String SSL_FACTORY = \"javax.net.ssl.SSLSocketFactory\";\n+  private String sslFactory = \"\";\n+  private String fromEmailAddress = \"\";\n+  private String fromEmailPass = \"\";\n+  private String fromEmailName = \"\";\n+  private String ccEmail;\n+  private String bccEmail;\n+  private String attachmentPath;\n+  // Domain that we send in the EHLO request if we are not authenticating\n+  // with the SMTP server.\n+  @Setter private String fromDomain = \"\";\n+  // If set to true, we will not authenticate with the SMTP service and\n+  // rather rely on the SMTP service's configured IP whitelist. If false we\n+  // will authenticate with the provided fromEmailAddress and fromEmailPass.\n+  @Setter private Boolean useIpWhitelist = false;\n+\n+  public boolean sendemail() throws Exception {\n+    logger.debug(\" sendemail() ==== starts\");\n+    boolean sentMail = false;\n+    try {\n+      final String username = this.getFromEmailAddress();\n+      final String password = this.getFromEmailPass();\n+      Properties props = makeProperties(useIpWhitelist);\n+      Session session =\n+          useIpWhitelist ? makeSession(props) : makeSession(props, username, password);\n+      Message message = new MimeMessage(session);\n+      message.setFrom(new InternetAddress(username));\n+      if (StringUtils.isNotBlank(this.getToemail())) {\n+        if (this.getToemail().indexOf(\",\") != -1) {\n+          message.setRecipients(\n+              Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n         } else {\n-            props.put(\"mail.smtp.auth\", \"true\");\n+          message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n         }\n-        return props;\n-    }\n-\n-    private Session makeSession(Properties props) {\n-        return Session.getInstance(props, null);\n-    }\n-\n-    private Session makeSession(Properties props, String username,\n-                                String password) {\n-        return Session.getInstance(\n-                props,\n-                new javax.mail.Authenticator() {\n-                    @Override\n-                    protected PasswordAuthentication getPasswordAuthentication() {\n-                        return new PasswordAuthentication(username, password);\n-                    }\n-                });\n-    }\n-\n-    public String getToemail() {\n-        return toemail;\n-    }\n-\n-    public void setToemail(String toemail) {\n-        this.toemail = toemail;\n-    }\n-\n-    public String getSubject() {\n-        return subject;\n-    }\n-\n-    public void setSubject(String subject) {\n-        this.subject = subject;\n-    }\n-\n-    public String getMessageBody() {\n-        return messageBody;\n-    }\n-\n-    public void setMessageBody(String messageBody) {\n-        this.messageBody = messageBody;\n-    }\n-\n-    public String getSmtp_Hostname() {\n-        if (this.smtp_Hostname.equals(\"\")) {\n-            if (useIpWhitelist) {\n-                return Mail.SMTP_RELAY_HOSTNAME;\n-            } else {\n-                return Mail.SMTP_HOSTNAME;\n-            }\n+      }\n+      if (StringUtils.isNotBlank(this.getCcEmail())) {\n+        message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n+      }\n+      if (StringUtils.isNotBlank(this.getBccEmail())) {\n+        message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n+      }\n+      message.setSubject(this.subject);\n+      message.setContent(this.getMessageBody(), \"text/html\");\n+      Transport transport = session.getTransport();\n+      transport.send(message);\n+      logger.debug(\"sendemail()==== ends\");\n+      sentMail = true;\n+    } catch (MessagingException e) {\n+      logger.error(\"sendemail() MessagingException- error\", e);\n+    } catch (Exception e) {\n+      logger.error(\"ERROR:  sendemail() - error( ) \" + e + \" : \");\n+    }\n+    logger.debug(\"Mail.sendemail() :: Ends\");\n+    return sentMail;\n+  }\n+\n+  public boolean sendMailWithAttachment() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1275b0d755dc41d7df75133eab56d82eed9cb5e1"}, "originalPosition": 275}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzQzMDg4OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/Mail.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxN1rOG77ugQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxN1rOG77ugQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ5NzcyOQ==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nDistance between variable 'multipart' declaration and its first usage is 6, but allowed 3.  Consider making that variable final if you still need to store its value in advance (before method calls that might have side effects on the original value).", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465497729", "createdAt": "2020-08-05T06:18:17Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/Mail.java", "diffHunk": "@@ -23,308 +23,304 @@\n import javax.mail.internet.MimeBodyPart;\n import javax.mail.internet.MimeMessage;\n import javax.mail.internet.MimeMultipart;\n-\n import lombok.Setter;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n \n public class Mail {\n \n-    private static final Logger logger = LogManager.getLogger(Mail.class);\n-\n-    private String toemail;\n-    private String subject;\n-    private String messageBody;\n-    // Fallback hostname if we are authenticating.\n-    private static final String SMTP_HOSTNAME = \"smtp.gmail.com\";\n-    // Fallback hostname if we are not authenticating.\n-    private static final String SMTP_RELAY_HOSTNAME = \"smtp-relay.gmail.com\";\n-    private static final String SMTP_PORT = \"465\";\n-    private String smtp_Hostname = \"\";\n-    private String smtp_portvalue = \"\";\n-    static String SSL_FACTORY = \"javax.net.ssl.SSLSocketFactory\";\n-    private String sslFactory = \"\";\n-    private String fromEmailAddress = \"\";\n-    private String fromEmailPass = \"\";\n-    private String fromEmailName = \"\";\n-    private String ccEmail;\n-    private String bccEmail;\n-    private String attachmentPath;\n-    // Domain that we send in the EHLO request if we are not authenticating\n-    // with the SMTP server.\n-    @Setter\n-    private String fromDomain = \"\";\n-    // If set to true, we will not authenticate with the SMTP service and\n-    // rather rely on the SMTP service's configured IP whitelist. If false we\n-    // will authenticate with the provided fromEmailAddress and fromEmailPass.\n-    @Setter\n-    private Boolean useIpWhitelist = false;\n-\n-    public boolean sendemail() throws Exception {\n-        logger.debug(\" sendemail() ==== starts\");\n-        boolean sentMail = false;\n-        try {\n-            final String username = this.getFromEmailAddress();\n-            final String password = this.getFromEmailPass();\n-            Properties props = makeProperties(useIpWhitelist);\n-            Session session = useIpWhitelist ? makeSession(props) :\n-                    makeSession(props, username, password);\n-            Message message = new MimeMessage(session);\n-            message.setFrom(new InternetAddress(username));\n-            if (StringUtils.isNotBlank(this.getToemail())) {\n-                if (this.getToemail().indexOf(\",\") != -1) {\n-                    message.setRecipients(\n-                            Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n-                } else {\n-                    message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n-                }\n-            }\n-            if (StringUtils.isNotBlank(this.getCcEmail())) {\n-                message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n-            }\n-            if (StringUtils.isNotBlank(this.getBccEmail())) {\n-                message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n-            }\n-            message.setSubject(this.subject);\n-            message.setContent(this.getMessageBody(), \"text/html\");\n-            Transport transport = session.getTransport();\n-            transport.send(message);\n-            logger.debug(\"sendemail()==== ends\");\n-            sentMail = true;\n-        } catch (MessagingException e) {\n-            logger.error(\"sendemail() MessagingException- error\", e);\n-        } catch (Exception e) {\n-            logger.error(\"ERROR:  sendemail() - error( ) \" + e + \" : \");\n-        }\n-        logger.debug(\"Mail.sendemail() :: Ends\");\n-        return sentMail;\n-    }\n-\n-    public boolean sendMailWithAttachment() throws Exception {\n-        logger.debug(\"sendMailWithAttachment()==== start\");\n-        boolean sentMail = false;\n-        try {\n-            final String username = this.getFromEmailAddress();\n-            final String password = this.getFromEmailPass();\n-            Properties props = makeProperties(useIpWhitelist);\n-            Session session = useIpWhitelist ? makeSession(props) :\n-                    makeSession(props, username, password);\n-            Message message = new MimeMessage(session);\n-            if (StringUtils.isNotBlank(this.getToemail())) {\n-                if (this.getToemail().indexOf(\",\") != -1) {\n-                    message.setRecipients(\n-                            Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n-                } else {\n-                    message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n-                }\n-            }\n-            if (StringUtils.isNotBlank(this.getCcEmail())) {\n-                message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n-            }\n-            if (StringUtils.isNotBlank(this.getBccEmail())) {\n-                message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n-            }\n-            message.setSubject(this.subject);\n-            message.setFrom(new InternetAddress(username));\n-            // message.setText(\"Check attachment in Mail\");\n-            // message.setContent(messageBody, \"text/html\");\n-            // Create the message part\n-            BodyPart messageBodyPart = new MimeBodyPart();\n-            // Create a multipar message\n-            Multipart multipart = new MimeMultipart();\n-            // Part two is attachment\n-            messageBodyPart = new MimeBodyPart();\n-            // String filename = \"D:\\\\temp\\\\TestLinks.pdf\"; // D:\\temp\\noteb.txt\n-            DataSource source = new FileDataSource(this.getAttachmentPath());\n-            messageBodyPart.setDataHandler(new DataHandler(source));\n-            messageBodyPart.setFileName(source.getName());\n-            messageBodyPart.setHeader(\"Content-Transfer-Encoding\", \"base64\");\n-            messageBodyPart.setHeader(\"Content-Type\", source.getContentType());\n-            // Send the complete message parts\n-            multipart.addBodyPart(messageBodyPart);\n-\n-            messageBodyPart = new MimeBodyPart();\n-            messageBodyPart.setText(messageBody);\n-            messageBodyPart.setHeader(\"MIME-Version\", \"1.0\");\n-            messageBodyPart.setHeader(\"Content-Type\", messageBodyPart.getContentType());\n-            multipart.addBodyPart(messageBodyPart);\n-\n-            message.setContent(multipart);\n-            Transport.send(message);\n-            sentMail = true;\n-        } catch (MessagingException e) {\n-            logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n-            sentMail = false;\n-        } catch (Exception e) {\n-            logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n-        }\n-        logger.debug(\"Mail.sendMailWithAttachment() :: Ends\");\n-        return sentMail;\n-    }\n-\n-    // Constructs a Propterties either relying on IP Whitelist on the SMTP\n-    // service or on authentication with email and password.\n-    private Properties makeProperties(Boolean useIpWhitelist) {\n-        Properties props = new Properties();\n-        props.put(\"mail.smtp.host\", this.getSmtp_Hostname());\n-        props.put(\"mail.smtp.port\", this.getSmtp_portvalue());\n-        props.put(\"mail.smtp.socketFactory.class\", this.getSslFactory());\n-        props.put(\"mail.smtp.socketFactory.port\", this.getSmtp_portvalue());\n-        if (useIpWhitelist) {\n-            props.put(\"mail.smtp.auth\", \"false\");\n-            props.put(\"mail.smtp.ssl.enable\", \"true\");\n-            props.put(\"mail.smtp.localhost\", fromDomain);\n+  private static final Logger logger = LogManager.getLogger(Mail.class);\n+\n+  private String toemail;\n+  private String subject;\n+  private String messageBody;\n+  // Fallback hostname if we are authenticating.\n+  private static final String SMTP_HOSTNAME = \"smtp.gmail.com\";\n+  // Fallback hostname if we are not authenticating.\n+  private static final String SMTP_RELAY_HOSTNAME = \"smtp-relay.gmail.com\";\n+  private static final String SMTP_PORT = \"465\";\n+  private String smtp_Hostname = \"\";\n+  private String smtp_portvalue = \"\";\n+  static String SSL_FACTORY = \"javax.net.ssl.SSLSocketFactory\";\n+  private String sslFactory = \"\";\n+  private String fromEmailAddress = \"\";\n+  private String fromEmailPass = \"\";\n+  private String fromEmailName = \"\";\n+  private String ccEmail;\n+  private String bccEmail;\n+  private String attachmentPath;\n+  // Domain that we send in the EHLO request if we are not authenticating\n+  // with the SMTP server.\n+  @Setter private String fromDomain = \"\";\n+  // If set to true, we will not authenticate with the SMTP service and\n+  // rather rely on the SMTP service's configured IP whitelist. If false we\n+  // will authenticate with the provided fromEmailAddress and fromEmailPass.\n+  @Setter private Boolean useIpWhitelist = false;\n+\n+  public boolean sendemail() throws Exception {\n+    logger.debug(\" sendemail() ==== starts\");\n+    boolean sentMail = false;\n+    try {\n+      final String username = this.getFromEmailAddress();\n+      final String password = this.getFromEmailPass();\n+      Properties props = makeProperties(useIpWhitelist);\n+      Session session =\n+          useIpWhitelist ? makeSession(props) : makeSession(props, username, password);\n+      Message message = new MimeMessage(session);\n+      message.setFrom(new InternetAddress(username));\n+      if (StringUtils.isNotBlank(this.getToemail())) {\n+        if (this.getToemail().indexOf(\",\") != -1) {\n+          message.setRecipients(\n+              Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n         } else {\n-            props.put(\"mail.smtp.auth\", \"true\");\n+          message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n         }\n-        return props;\n-    }\n-\n-    private Session makeSession(Properties props) {\n-        return Session.getInstance(props, null);\n-    }\n-\n-    private Session makeSession(Properties props, String username,\n-                                String password) {\n-        return Session.getInstance(\n-                props,\n-                new javax.mail.Authenticator() {\n-                    @Override\n-                    protected PasswordAuthentication getPasswordAuthentication() {\n-                        return new PasswordAuthentication(username, password);\n-                    }\n-                });\n-    }\n-\n-    public String getToemail() {\n-        return toemail;\n-    }\n-\n-    public void setToemail(String toemail) {\n-        this.toemail = toemail;\n-    }\n-\n-    public String getSubject() {\n-        return subject;\n-    }\n-\n-    public void setSubject(String subject) {\n-        this.subject = subject;\n-    }\n-\n-    public String getMessageBody() {\n-        return messageBody;\n-    }\n-\n-    public void setMessageBody(String messageBody) {\n-        this.messageBody = messageBody;\n-    }\n-\n-    public String getSmtp_Hostname() {\n-        if (this.smtp_Hostname.equals(\"\")) {\n-            if (useIpWhitelist) {\n-                return Mail.SMTP_RELAY_HOSTNAME;\n-            } else {\n-                return Mail.SMTP_HOSTNAME;\n-            }\n+      }\n+      if (StringUtils.isNotBlank(this.getCcEmail())) {\n+        message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n+      }\n+      if (StringUtils.isNotBlank(this.getBccEmail())) {\n+        message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n+      }\n+      message.setSubject(this.subject);\n+      message.setContent(this.getMessageBody(), \"text/html\");\n+      Transport transport = session.getTransport();\n+      transport.send(message);\n+      logger.debug(\"sendemail()==== ends\");\n+      sentMail = true;\n+    } catch (MessagingException e) {\n+      logger.error(\"sendemail() MessagingException- error\", e);\n+    } catch (Exception e) {\n+      logger.error(\"ERROR:  sendemail() - error( ) \" + e + \" : \");\n+    }\n+    logger.debug(\"Mail.sendemail() :: Ends\");\n+    return sentMail;\n+  }\n+\n+  public boolean sendMailWithAttachment() throws Exception {\n+    logger.debug(\"sendMailWithAttachment()==== start\");\n+    boolean sentMail = false;\n+    try {\n+      final String username = this.getFromEmailAddress();\n+      final String password = this.getFromEmailPass();\n+      Properties props = makeProperties(useIpWhitelist);\n+      Session session =\n+          useIpWhitelist ? makeSession(props) : makeSession(props, username, password);\n+      Message message = new MimeMessage(session);\n+      if (StringUtils.isNotBlank(this.getToemail())) {\n+        if (this.getToemail().indexOf(\",\") != -1) {\n+          message.setRecipients(\n+              Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n         } else {\n-            return this.smtp_Hostname;\n+          message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n         }\n-    }\n+      }\n+      if (StringUtils.isNotBlank(this.getCcEmail())) {\n+        message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n+      }\n+      if (StringUtils.isNotBlank(this.getBccEmail())) {\n+        message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n+      }\n+      message.setSubject(this.subject);\n+      message.setFrom(new InternetAddress(username));\n+      // message.setText(\"Check attachment in Mail\");\n+      // message.setContent(messageBody, \"text/html\");\n+      // Create the message part\n+      BodyPart messageBodyPart = new MimeBodyPart();\n+      // Create a multipar message\n+      Multipart multipart = new MimeMultipart();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1275b0d755dc41d7df75133eab56d82eed9cb5e1"}, "originalPosition": 308}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzQzMDkwOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/Mail.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxN1rOG77ugw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxN1rOG77ugw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ5NzczMQ==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nMissing a Javadoc comment.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465497731", "createdAt": "2020-08-05T06:18:17Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/Mail.java", "diffHunk": "@@ -23,308 +23,304 @@\n import javax.mail.internet.MimeBodyPart;\n import javax.mail.internet.MimeMessage;\n import javax.mail.internet.MimeMultipart;\n-\n import lombok.Setter;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n \n public class Mail {\n \n-    private static final Logger logger = LogManager.getLogger(Mail.class);\n-\n-    private String toemail;\n-    private String subject;\n-    private String messageBody;\n-    // Fallback hostname if we are authenticating.\n-    private static final String SMTP_HOSTNAME = \"smtp.gmail.com\";\n-    // Fallback hostname if we are not authenticating.\n-    private static final String SMTP_RELAY_HOSTNAME = \"smtp-relay.gmail.com\";\n-    private static final String SMTP_PORT = \"465\";\n-    private String smtp_Hostname = \"\";\n-    private String smtp_portvalue = \"\";\n-    static String SSL_FACTORY = \"javax.net.ssl.SSLSocketFactory\";\n-    private String sslFactory = \"\";\n-    private String fromEmailAddress = \"\";\n-    private String fromEmailPass = \"\";\n-    private String fromEmailName = \"\";\n-    private String ccEmail;\n-    private String bccEmail;\n-    private String attachmentPath;\n-    // Domain that we send in the EHLO request if we are not authenticating\n-    // with the SMTP server.\n-    @Setter\n-    private String fromDomain = \"\";\n-    // If set to true, we will not authenticate with the SMTP service and\n-    // rather rely on the SMTP service's configured IP whitelist. If false we\n-    // will authenticate with the provided fromEmailAddress and fromEmailPass.\n-    @Setter\n-    private Boolean useIpWhitelist = false;\n-\n-    public boolean sendemail() throws Exception {\n-        logger.debug(\" sendemail() ==== starts\");\n-        boolean sentMail = false;\n-        try {\n-            final String username = this.getFromEmailAddress();\n-            final String password = this.getFromEmailPass();\n-            Properties props = makeProperties(useIpWhitelist);\n-            Session session = useIpWhitelist ? makeSession(props) :\n-                    makeSession(props, username, password);\n-            Message message = new MimeMessage(session);\n-            message.setFrom(new InternetAddress(username));\n-            if (StringUtils.isNotBlank(this.getToemail())) {\n-                if (this.getToemail().indexOf(\",\") != -1) {\n-                    message.setRecipients(\n-                            Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n-                } else {\n-                    message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n-                }\n-            }\n-            if (StringUtils.isNotBlank(this.getCcEmail())) {\n-                message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n-            }\n-            if (StringUtils.isNotBlank(this.getBccEmail())) {\n-                message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n-            }\n-            message.setSubject(this.subject);\n-            message.setContent(this.getMessageBody(), \"text/html\");\n-            Transport transport = session.getTransport();\n-            transport.send(message);\n-            logger.debug(\"sendemail()==== ends\");\n-            sentMail = true;\n-        } catch (MessagingException e) {\n-            logger.error(\"sendemail() MessagingException- error\", e);\n-        } catch (Exception e) {\n-            logger.error(\"ERROR:  sendemail() - error( ) \" + e + \" : \");\n-        }\n-        logger.debug(\"Mail.sendemail() :: Ends\");\n-        return sentMail;\n-    }\n-\n-    public boolean sendMailWithAttachment() throws Exception {\n-        logger.debug(\"sendMailWithAttachment()==== start\");\n-        boolean sentMail = false;\n-        try {\n-            final String username = this.getFromEmailAddress();\n-            final String password = this.getFromEmailPass();\n-            Properties props = makeProperties(useIpWhitelist);\n-            Session session = useIpWhitelist ? makeSession(props) :\n-                    makeSession(props, username, password);\n-            Message message = new MimeMessage(session);\n-            if (StringUtils.isNotBlank(this.getToemail())) {\n-                if (this.getToemail().indexOf(\",\") != -1) {\n-                    message.setRecipients(\n-                            Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n-                } else {\n-                    message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n-                }\n-            }\n-            if (StringUtils.isNotBlank(this.getCcEmail())) {\n-                message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n-            }\n-            if (StringUtils.isNotBlank(this.getBccEmail())) {\n-                message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n-            }\n-            message.setSubject(this.subject);\n-            message.setFrom(new InternetAddress(username));\n-            // message.setText(\"Check attachment in Mail\");\n-            // message.setContent(messageBody, \"text/html\");\n-            // Create the message part\n-            BodyPart messageBodyPart = new MimeBodyPart();\n-            // Create a multipar message\n-            Multipart multipart = new MimeMultipart();\n-            // Part two is attachment\n-            messageBodyPart = new MimeBodyPart();\n-            // String filename = \"D:\\\\temp\\\\TestLinks.pdf\"; // D:\\temp\\noteb.txt\n-            DataSource source = new FileDataSource(this.getAttachmentPath());\n-            messageBodyPart.setDataHandler(new DataHandler(source));\n-            messageBodyPart.setFileName(source.getName());\n-            messageBodyPart.setHeader(\"Content-Transfer-Encoding\", \"base64\");\n-            messageBodyPart.setHeader(\"Content-Type\", source.getContentType());\n-            // Send the complete message parts\n-            multipart.addBodyPart(messageBodyPart);\n-\n-            messageBodyPart = new MimeBodyPart();\n-            messageBodyPart.setText(messageBody);\n-            messageBodyPart.setHeader(\"MIME-Version\", \"1.0\");\n-            messageBodyPart.setHeader(\"Content-Type\", messageBodyPart.getContentType());\n-            multipart.addBodyPart(messageBodyPart);\n-\n-            message.setContent(multipart);\n-            Transport.send(message);\n-            sentMail = true;\n-        } catch (MessagingException e) {\n-            logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n-            sentMail = false;\n-        } catch (Exception e) {\n-            logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n-        }\n-        logger.debug(\"Mail.sendMailWithAttachment() :: Ends\");\n-        return sentMail;\n-    }\n-\n-    // Constructs a Propterties either relying on IP Whitelist on the SMTP\n-    // service or on authentication with email and password.\n-    private Properties makeProperties(Boolean useIpWhitelist) {\n-        Properties props = new Properties();\n-        props.put(\"mail.smtp.host\", this.getSmtp_Hostname());\n-        props.put(\"mail.smtp.port\", this.getSmtp_portvalue());\n-        props.put(\"mail.smtp.socketFactory.class\", this.getSslFactory());\n-        props.put(\"mail.smtp.socketFactory.port\", this.getSmtp_portvalue());\n-        if (useIpWhitelist) {\n-            props.put(\"mail.smtp.auth\", \"false\");\n-            props.put(\"mail.smtp.ssl.enable\", \"true\");\n-            props.put(\"mail.smtp.localhost\", fromDomain);\n+  private static final Logger logger = LogManager.getLogger(Mail.class);\n+\n+  private String toemail;\n+  private String subject;\n+  private String messageBody;\n+  // Fallback hostname if we are authenticating.\n+  private static final String SMTP_HOSTNAME = \"smtp.gmail.com\";\n+  // Fallback hostname if we are not authenticating.\n+  private static final String SMTP_RELAY_HOSTNAME = \"smtp-relay.gmail.com\";\n+  private static final String SMTP_PORT = \"465\";\n+  private String smtp_Hostname = \"\";\n+  private String smtp_portvalue = \"\";\n+  static String SSL_FACTORY = \"javax.net.ssl.SSLSocketFactory\";\n+  private String sslFactory = \"\";\n+  private String fromEmailAddress = \"\";\n+  private String fromEmailPass = \"\";\n+  private String fromEmailName = \"\";\n+  private String ccEmail;\n+  private String bccEmail;\n+  private String attachmentPath;\n+  // Domain that we send in the EHLO request if we are not authenticating\n+  // with the SMTP server.\n+  @Setter private String fromDomain = \"\";\n+  // If set to true, we will not authenticate with the SMTP service and\n+  // rather rely on the SMTP service's configured IP whitelist. If false we\n+  // will authenticate with the provided fromEmailAddress and fromEmailPass.\n+  @Setter private Boolean useIpWhitelist = false;\n+\n+  public boolean sendemail() throws Exception {\n+    logger.debug(\" sendemail() ==== starts\");\n+    boolean sentMail = false;\n+    try {\n+      final String username = this.getFromEmailAddress();\n+      final String password = this.getFromEmailPass();\n+      Properties props = makeProperties(useIpWhitelist);\n+      Session session =\n+          useIpWhitelist ? makeSession(props) : makeSession(props, username, password);\n+      Message message = new MimeMessage(session);\n+      message.setFrom(new InternetAddress(username));\n+      if (StringUtils.isNotBlank(this.getToemail())) {\n+        if (this.getToemail().indexOf(\",\") != -1) {\n+          message.setRecipients(\n+              Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n         } else {\n-            props.put(\"mail.smtp.auth\", \"true\");\n+          message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n         }\n-        return props;\n-    }\n-\n-    private Session makeSession(Properties props) {\n-        return Session.getInstance(props, null);\n-    }\n-\n-    private Session makeSession(Properties props, String username,\n-                                String password) {\n-        return Session.getInstance(\n-                props,\n-                new javax.mail.Authenticator() {\n-                    @Override\n-                    protected PasswordAuthentication getPasswordAuthentication() {\n-                        return new PasswordAuthentication(username, password);\n-                    }\n-                });\n-    }\n-\n-    public String getToemail() {\n-        return toemail;\n-    }\n-\n-    public void setToemail(String toemail) {\n-        this.toemail = toemail;\n-    }\n-\n-    public String getSubject() {\n-        return subject;\n-    }\n-\n-    public void setSubject(String subject) {\n-        this.subject = subject;\n-    }\n-\n-    public String getMessageBody() {\n-        return messageBody;\n-    }\n-\n-    public void setMessageBody(String messageBody) {\n-        this.messageBody = messageBody;\n-    }\n-\n-    public String getSmtp_Hostname() {\n-        if (this.smtp_Hostname.equals(\"\")) {\n-            if (useIpWhitelist) {\n-                return Mail.SMTP_RELAY_HOSTNAME;\n-            } else {\n-                return Mail.SMTP_HOSTNAME;\n-            }\n+      }\n+      if (StringUtils.isNotBlank(this.getCcEmail())) {\n+        message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n+      }\n+      if (StringUtils.isNotBlank(this.getBccEmail())) {\n+        message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n+      }\n+      message.setSubject(this.subject);\n+      message.setContent(this.getMessageBody(), \"text/html\");\n+      Transport transport = session.getTransport();\n+      transport.send(message);\n+      logger.debug(\"sendemail()==== ends\");\n+      sentMail = true;\n+    } catch (MessagingException e) {\n+      logger.error(\"sendemail() MessagingException- error\", e);\n+    } catch (Exception e) {\n+      logger.error(\"ERROR:  sendemail() - error( ) \" + e + \" : \");\n+    }\n+    logger.debug(\"Mail.sendemail() :: Ends\");\n+    return sentMail;\n+  }\n+\n+  public boolean sendMailWithAttachment() throws Exception {\n+    logger.debug(\"sendMailWithAttachment()==== start\");\n+    boolean sentMail = false;\n+    try {\n+      final String username = this.getFromEmailAddress();\n+      final String password = this.getFromEmailPass();\n+      Properties props = makeProperties(useIpWhitelist);\n+      Session session =\n+          useIpWhitelist ? makeSession(props) : makeSession(props, username, password);\n+      Message message = new MimeMessage(session);\n+      if (StringUtils.isNotBlank(this.getToemail())) {\n+        if (this.getToemail().indexOf(\",\") != -1) {\n+          message.setRecipients(\n+              Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n         } else {\n-            return this.smtp_Hostname;\n+          message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n         }\n-    }\n+      }\n+      if (StringUtils.isNotBlank(this.getCcEmail())) {\n+        message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n+      }\n+      if (StringUtils.isNotBlank(this.getBccEmail())) {\n+        message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n+      }\n+      message.setSubject(this.subject);\n+      message.setFrom(new InternetAddress(username));\n+      // message.setText(\"Check attachment in Mail\");\n+      // message.setContent(messageBody, \"text/html\");\n+      // Create the message part\n+      BodyPart messageBodyPart = new MimeBodyPart();\n+      // Create a multipar message\n+      Multipart multipart = new MimeMultipart();\n+      // Part two is attachment\n+      messageBodyPart = new MimeBodyPart();\n+      // String filename = \"D:\\\\temp\\\\TestLinks.pdf\"; // D:\\temp\\noteb.txt\n+      DataSource source = new FileDataSource(this.getAttachmentPath());\n+      messageBodyPart.setDataHandler(new DataHandler(source));\n+      messageBodyPart.setFileName(source.getName());\n+      messageBodyPart.setHeader(\"Content-Transfer-Encoding\", \"base64\");\n+      messageBodyPart.setHeader(\"Content-Type\", source.getContentType());\n+      // Send the complete message parts\n+      multipart.addBodyPart(messageBodyPart);\n+\n+      messageBodyPart = new MimeBodyPart();\n+      messageBodyPart.setText(messageBody);\n+      messageBodyPart.setHeader(\"MIME-Version\", \"1.0\");\n+      messageBodyPart.setHeader(\"Content-Type\", messageBodyPart.getContentType());\n+      multipart.addBodyPart(messageBodyPart);\n+\n+      message.setContent(multipart);\n+      Transport.send(message);\n+      sentMail = true;\n+    } catch (MessagingException e) {\n+      logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n+      sentMail = false;\n+    } catch (Exception e) {\n+      logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n+    }\n+    logger.debug(\"Mail.sendMailWithAttachment() :: Ends\");\n+    return sentMail;\n+  }\n+\n+  // Constructs a Propterties either relying on IP Whitelist on the SMTP\n+  // service or on authentication with email and password.\n+  private Properties makeProperties(Boolean useIpWhitelist) {\n+    Properties props = new Properties();\n+    props.put(\"mail.smtp.host\", this.getSmtp_Hostname());\n+    props.put(\"mail.smtp.port\", this.getSmtp_portvalue());\n+    props.put(\"mail.smtp.socketFactory.class\", this.getSslFactory());\n+    props.put(\"mail.smtp.socketFactory.port\", this.getSmtp_portvalue());\n+    if (useIpWhitelist) {\n+      props.put(\"mail.smtp.auth\", \"false\");\n+      props.put(\"mail.smtp.ssl.enable\", \"true\");\n+      props.put(\"mail.smtp.localhost\", fromDomain);\n+    } else {\n+      props.put(\"mail.smtp.auth\", \"true\");\n+    }\n+    return props;\n+  }\n+\n+  private Session makeSession(Properties props) {\n+    return Session.getInstance(props, null);\n+  }\n+\n+  private Session makeSession(Properties props, String username, String password) {\n+    return Session.getInstance(\n+        props,\n+        new javax.mail.Authenticator() {\n+          @Override\n+          protected PasswordAuthentication getPasswordAuthentication() {\n+            return new PasswordAuthentication(username, password);\n+          }\n+        });\n+  }\n+\n+  public String getToemail() {\n+    return toemail;\n+  }\n+\n+  public void setToemail(String toemail) {\n+    this.toemail = toemail;\n+  }\n+\n+  public String getSubject() {\n+    return subject;\n+  }\n+\n+  public void setSubject(String subject) {\n+    this.subject = subject;\n+  }\n+\n+  public String getMessageBody() {\n+    return messageBody;\n+  }\n+\n+  public void setMessageBody(String messageBody) {\n+    this.messageBody = messageBody;\n+  }\n+\n+  public String getSmtp_Hostname() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1275b0d755dc41d7df75133eab56d82eed9cb5e1"}, "originalPosition": 396}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzQzMDkxOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/Mail.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxN1rOG77uhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxN1rOG77uhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ5NzczMg==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nParameter name 'smtp_Hostname' must match pattern '^a-z?$'.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465497732", "createdAt": "2020-08-05T06:18:17Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/Mail.java", "diffHunk": "@@ -23,308 +23,304 @@\n import javax.mail.internet.MimeBodyPart;\n import javax.mail.internet.MimeMessage;\n import javax.mail.internet.MimeMultipart;\n-\n import lombok.Setter;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n \n public class Mail {\n \n-    private static final Logger logger = LogManager.getLogger(Mail.class);\n-\n-    private String toemail;\n-    private String subject;\n-    private String messageBody;\n-    // Fallback hostname if we are authenticating.\n-    private static final String SMTP_HOSTNAME = \"smtp.gmail.com\";\n-    // Fallback hostname if we are not authenticating.\n-    private static final String SMTP_RELAY_HOSTNAME = \"smtp-relay.gmail.com\";\n-    private static final String SMTP_PORT = \"465\";\n-    private String smtp_Hostname = \"\";\n-    private String smtp_portvalue = \"\";\n-    static String SSL_FACTORY = \"javax.net.ssl.SSLSocketFactory\";\n-    private String sslFactory = \"\";\n-    private String fromEmailAddress = \"\";\n-    private String fromEmailPass = \"\";\n-    private String fromEmailName = \"\";\n-    private String ccEmail;\n-    private String bccEmail;\n-    private String attachmentPath;\n-    // Domain that we send in the EHLO request if we are not authenticating\n-    // with the SMTP server.\n-    @Setter\n-    private String fromDomain = \"\";\n-    // If set to true, we will not authenticate with the SMTP service and\n-    // rather rely on the SMTP service's configured IP whitelist. If false we\n-    // will authenticate with the provided fromEmailAddress and fromEmailPass.\n-    @Setter\n-    private Boolean useIpWhitelist = false;\n-\n-    public boolean sendemail() throws Exception {\n-        logger.debug(\" sendemail() ==== starts\");\n-        boolean sentMail = false;\n-        try {\n-            final String username = this.getFromEmailAddress();\n-            final String password = this.getFromEmailPass();\n-            Properties props = makeProperties(useIpWhitelist);\n-            Session session = useIpWhitelist ? makeSession(props) :\n-                    makeSession(props, username, password);\n-            Message message = new MimeMessage(session);\n-            message.setFrom(new InternetAddress(username));\n-            if (StringUtils.isNotBlank(this.getToemail())) {\n-                if (this.getToemail().indexOf(\",\") != -1) {\n-                    message.setRecipients(\n-                            Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n-                } else {\n-                    message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n-                }\n-            }\n-            if (StringUtils.isNotBlank(this.getCcEmail())) {\n-                message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n-            }\n-            if (StringUtils.isNotBlank(this.getBccEmail())) {\n-                message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n-            }\n-            message.setSubject(this.subject);\n-            message.setContent(this.getMessageBody(), \"text/html\");\n-            Transport transport = session.getTransport();\n-            transport.send(message);\n-            logger.debug(\"sendemail()==== ends\");\n-            sentMail = true;\n-        } catch (MessagingException e) {\n-            logger.error(\"sendemail() MessagingException- error\", e);\n-        } catch (Exception e) {\n-            logger.error(\"ERROR:  sendemail() - error( ) \" + e + \" : \");\n-        }\n-        logger.debug(\"Mail.sendemail() :: Ends\");\n-        return sentMail;\n-    }\n-\n-    public boolean sendMailWithAttachment() throws Exception {\n-        logger.debug(\"sendMailWithAttachment()==== start\");\n-        boolean sentMail = false;\n-        try {\n-            final String username = this.getFromEmailAddress();\n-            final String password = this.getFromEmailPass();\n-            Properties props = makeProperties(useIpWhitelist);\n-            Session session = useIpWhitelist ? makeSession(props) :\n-                    makeSession(props, username, password);\n-            Message message = new MimeMessage(session);\n-            if (StringUtils.isNotBlank(this.getToemail())) {\n-                if (this.getToemail().indexOf(\",\") != -1) {\n-                    message.setRecipients(\n-                            Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n-                } else {\n-                    message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n-                }\n-            }\n-            if (StringUtils.isNotBlank(this.getCcEmail())) {\n-                message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n-            }\n-            if (StringUtils.isNotBlank(this.getBccEmail())) {\n-                message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n-            }\n-            message.setSubject(this.subject);\n-            message.setFrom(new InternetAddress(username));\n-            // message.setText(\"Check attachment in Mail\");\n-            // message.setContent(messageBody, \"text/html\");\n-            // Create the message part\n-            BodyPart messageBodyPart = new MimeBodyPart();\n-            // Create a multipar message\n-            Multipart multipart = new MimeMultipart();\n-            // Part two is attachment\n-            messageBodyPart = new MimeBodyPart();\n-            // String filename = \"D:\\\\temp\\\\TestLinks.pdf\"; // D:\\temp\\noteb.txt\n-            DataSource source = new FileDataSource(this.getAttachmentPath());\n-            messageBodyPart.setDataHandler(new DataHandler(source));\n-            messageBodyPart.setFileName(source.getName());\n-            messageBodyPart.setHeader(\"Content-Transfer-Encoding\", \"base64\");\n-            messageBodyPart.setHeader(\"Content-Type\", source.getContentType());\n-            // Send the complete message parts\n-            multipart.addBodyPart(messageBodyPart);\n-\n-            messageBodyPart = new MimeBodyPart();\n-            messageBodyPart.setText(messageBody);\n-            messageBodyPart.setHeader(\"MIME-Version\", \"1.0\");\n-            messageBodyPart.setHeader(\"Content-Type\", messageBodyPart.getContentType());\n-            multipart.addBodyPart(messageBodyPart);\n-\n-            message.setContent(multipart);\n-            Transport.send(message);\n-            sentMail = true;\n-        } catch (MessagingException e) {\n-            logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n-            sentMail = false;\n-        } catch (Exception e) {\n-            logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n-        }\n-        logger.debug(\"Mail.sendMailWithAttachment() :: Ends\");\n-        return sentMail;\n-    }\n-\n-    // Constructs a Propterties either relying on IP Whitelist on the SMTP\n-    // service or on authentication with email and password.\n-    private Properties makeProperties(Boolean useIpWhitelist) {\n-        Properties props = new Properties();\n-        props.put(\"mail.smtp.host\", this.getSmtp_Hostname());\n-        props.put(\"mail.smtp.port\", this.getSmtp_portvalue());\n-        props.put(\"mail.smtp.socketFactory.class\", this.getSslFactory());\n-        props.put(\"mail.smtp.socketFactory.port\", this.getSmtp_portvalue());\n-        if (useIpWhitelist) {\n-            props.put(\"mail.smtp.auth\", \"false\");\n-            props.put(\"mail.smtp.ssl.enable\", \"true\");\n-            props.put(\"mail.smtp.localhost\", fromDomain);\n+  private static final Logger logger = LogManager.getLogger(Mail.class);\n+\n+  private String toemail;\n+  private String subject;\n+  private String messageBody;\n+  // Fallback hostname if we are authenticating.\n+  private static final String SMTP_HOSTNAME = \"smtp.gmail.com\";\n+  // Fallback hostname if we are not authenticating.\n+  private static final String SMTP_RELAY_HOSTNAME = \"smtp-relay.gmail.com\";\n+  private static final String SMTP_PORT = \"465\";\n+  private String smtp_Hostname = \"\";\n+  private String smtp_portvalue = \"\";\n+  static String SSL_FACTORY = \"javax.net.ssl.SSLSocketFactory\";\n+  private String sslFactory = \"\";\n+  private String fromEmailAddress = \"\";\n+  private String fromEmailPass = \"\";\n+  private String fromEmailName = \"\";\n+  private String ccEmail;\n+  private String bccEmail;\n+  private String attachmentPath;\n+  // Domain that we send in the EHLO request if we are not authenticating\n+  // with the SMTP server.\n+  @Setter private String fromDomain = \"\";\n+  // If set to true, we will not authenticate with the SMTP service and\n+  // rather rely on the SMTP service's configured IP whitelist. If false we\n+  // will authenticate with the provided fromEmailAddress and fromEmailPass.\n+  @Setter private Boolean useIpWhitelist = false;\n+\n+  public boolean sendemail() throws Exception {\n+    logger.debug(\" sendemail() ==== starts\");\n+    boolean sentMail = false;\n+    try {\n+      final String username = this.getFromEmailAddress();\n+      final String password = this.getFromEmailPass();\n+      Properties props = makeProperties(useIpWhitelist);\n+      Session session =\n+          useIpWhitelist ? makeSession(props) : makeSession(props, username, password);\n+      Message message = new MimeMessage(session);\n+      message.setFrom(new InternetAddress(username));\n+      if (StringUtils.isNotBlank(this.getToemail())) {\n+        if (this.getToemail().indexOf(\",\") != -1) {\n+          message.setRecipients(\n+              Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n         } else {\n-            props.put(\"mail.smtp.auth\", \"true\");\n+          message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n         }\n-        return props;\n-    }\n-\n-    private Session makeSession(Properties props) {\n-        return Session.getInstance(props, null);\n-    }\n-\n-    private Session makeSession(Properties props, String username,\n-                                String password) {\n-        return Session.getInstance(\n-                props,\n-                new javax.mail.Authenticator() {\n-                    @Override\n-                    protected PasswordAuthentication getPasswordAuthentication() {\n-                        return new PasswordAuthentication(username, password);\n-                    }\n-                });\n-    }\n-\n-    public String getToemail() {\n-        return toemail;\n-    }\n-\n-    public void setToemail(String toemail) {\n-        this.toemail = toemail;\n-    }\n-\n-    public String getSubject() {\n-        return subject;\n-    }\n-\n-    public void setSubject(String subject) {\n-        this.subject = subject;\n-    }\n-\n-    public String getMessageBody() {\n-        return messageBody;\n-    }\n-\n-    public void setMessageBody(String messageBody) {\n-        this.messageBody = messageBody;\n-    }\n-\n-    public String getSmtp_Hostname() {\n-        if (this.smtp_Hostname.equals(\"\")) {\n-            if (useIpWhitelist) {\n-                return Mail.SMTP_RELAY_HOSTNAME;\n-            } else {\n-                return Mail.SMTP_HOSTNAME;\n-            }\n+      }\n+      if (StringUtils.isNotBlank(this.getCcEmail())) {\n+        message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n+      }\n+      if (StringUtils.isNotBlank(this.getBccEmail())) {\n+        message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n+      }\n+      message.setSubject(this.subject);\n+      message.setContent(this.getMessageBody(), \"text/html\");\n+      Transport transport = session.getTransport();\n+      transport.send(message);\n+      logger.debug(\"sendemail()==== ends\");\n+      sentMail = true;\n+    } catch (MessagingException e) {\n+      logger.error(\"sendemail() MessagingException- error\", e);\n+    } catch (Exception e) {\n+      logger.error(\"ERROR:  sendemail() - error( ) \" + e + \" : \");\n+    }\n+    logger.debug(\"Mail.sendemail() :: Ends\");\n+    return sentMail;\n+  }\n+\n+  public boolean sendMailWithAttachment() throws Exception {\n+    logger.debug(\"sendMailWithAttachment()==== start\");\n+    boolean sentMail = false;\n+    try {\n+      final String username = this.getFromEmailAddress();\n+      final String password = this.getFromEmailPass();\n+      Properties props = makeProperties(useIpWhitelist);\n+      Session session =\n+          useIpWhitelist ? makeSession(props) : makeSession(props, username, password);\n+      Message message = new MimeMessage(session);\n+      if (StringUtils.isNotBlank(this.getToemail())) {\n+        if (this.getToemail().indexOf(\",\") != -1) {\n+          message.setRecipients(\n+              Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n         } else {\n-            return this.smtp_Hostname;\n+          message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n         }\n-    }\n+      }\n+      if (StringUtils.isNotBlank(this.getCcEmail())) {\n+        message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n+      }\n+      if (StringUtils.isNotBlank(this.getBccEmail())) {\n+        message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n+      }\n+      message.setSubject(this.subject);\n+      message.setFrom(new InternetAddress(username));\n+      // message.setText(\"Check attachment in Mail\");\n+      // message.setContent(messageBody, \"text/html\");\n+      // Create the message part\n+      BodyPart messageBodyPart = new MimeBodyPart();\n+      // Create a multipar message\n+      Multipart multipart = new MimeMultipart();\n+      // Part two is attachment\n+      messageBodyPart = new MimeBodyPart();\n+      // String filename = \"D:\\\\temp\\\\TestLinks.pdf\"; // D:\\temp\\noteb.txt\n+      DataSource source = new FileDataSource(this.getAttachmentPath());\n+      messageBodyPart.setDataHandler(new DataHandler(source));\n+      messageBodyPart.setFileName(source.getName());\n+      messageBodyPart.setHeader(\"Content-Transfer-Encoding\", \"base64\");\n+      messageBodyPart.setHeader(\"Content-Type\", source.getContentType());\n+      // Send the complete message parts\n+      multipart.addBodyPart(messageBodyPart);\n+\n+      messageBodyPart = new MimeBodyPart();\n+      messageBodyPart.setText(messageBody);\n+      messageBodyPart.setHeader(\"MIME-Version\", \"1.0\");\n+      messageBodyPart.setHeader(\"Content-Type\", messageBodyPart.getContentType());\n+      multipart.addBodyPart(messageBodyPart);\n+\n+      message.setContent(multipart);\n+      Transport.send(message);\n+      sentMail = true;\n+    } catch (MessagingException e) {\n+      logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n+      sentMail = false;\n+    } catch (Exception e) {\n+      logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n+    }\n+    logger.debug(\"Mail.sendMailWithAttachment() :: Ends\");\n+    return sentMail;\n+  }\n+\n+  // Constructs a Propterties either relying on IP Whitelist on the SMTP\n+  // service or on authentication with email and password.\n+  private Properties makeProperties(Boolean useIpWhitelist) {\n+    Properties props = new Properties();\n+    props.put(\"mail.smtp.host\", this.getSmtp_Hostname());\n+    props.put(\"mail.smtp.port\", this.getSmtp_portvalue());\n+    props.put(\"mail.smtp.socketFactory.class\", this.getSslFactory());\n+    props.put(\"mail.smtp.socketFactory.port\", this.getSmtp_portvalue());\n+    if (useIpWhitelist) {\n+      props.put(\"mail.smtp.auth\", \"false\");\n+      props.put(\"mail.smtp.ssl.enable\", \"true\");\n+      props.put(\"mail.smtp.localhost\", fromDomain);\n+    } else {\n+      props.put(\"mail.smtp.auth\", \"true\");\n+    }\n+    return props;\n+  }\n+\n+  private Session makeSession(Properties props) {\n+    return Session.getInstance(props, null);\n+  }\n+\n+  private Session makeSession(Properties props, String username, String password) {\n+    return Session.getInstance(\n+        props,\n+        new javax.mail.Authenticator() {\n+          @Override\n+          protected PasswordAuthentication getPasswordAuthentication() {\n+            return new PasswordAuthentication(username, password);\n+          }\n+        });\n+  }\n+\n+  public String getToemail() {\n+    return toemail;\n+  }\n+\n+  public void setToemail(String toemail) {\n+    this.toemail = toemail;\n+  }\n+\n+  public String getSubject() {\n+    return subject;\n+  }\n+\n+  public void setSubject(String subject) {\n+    this.subject = subject;\n+  }\n+\n+  public String getMessageBody() {\n+    return messageBody;\n+  }\n+\n+  public void setMessageBody(String messageBody) {\n+    this.messageBody = messageBody;\n+  }\n+\n+  public String getSmtp_Hostname() {\n+    if (this.smtp_Hostname.equals(\"\")) {\n+      if (useIpWhitelist) {\n+        return Mail.SMTP_RELAY_HOSTNAME;\n+      } else {\n+        return Mail.SMTP_HOSTNAME;\n+      }\n+    } else {\n+      return this.smtp_Hostname;\n+    }\n+  }\n+\n+  public void setSmtp_Hostname(String smtp_Hostname) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1275b0d755dc41d7df75133eab56d82eed9cb5e1"}, "originalPosition": 408}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzQzMDkyOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/Mail.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxN1rOG77uhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxN1rOG77uhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ5NzczNA==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nMissing a Javadoc comment.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465497734", "createdAt": "2020-08-05T06:18:17Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/Mail.java", "diffHunk": "@@ -23,308 +23,304 @@\n import javax.mail.internet.MimeBodyPart;\n import javax.mail.internet.MimeMessage;\n import javax.mail.internet.MimeMultipart;\n-\n import lombok.Setter;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n \n public class Mail {\n \n-    private static final Logger logger = LogManager.getLogger(Mail.class);\n-\n-    private String toemail;\n-    private String subject;\n-    private String messageBody;\n-    // Fallback hostname if we are authenticating.\n-    private static final String SMTP_HOSTNAME = \"smtp.gmail.com\";\n-    // Fallback hostname if we are not authenticating.\n-    private static final String SMTP_RELAY_HOSTNAME = \"smtp-relay.gmail.com\";\n-    private static final String SMTP_PORT = \"465\";\n-    private String smtp_Hostname = \"\";\n-    private String smtp_portvalue = \"\";\n-    static String SSL_FACTORY = \"javax.net.ssl.SSLSocketFactory\";\n-    private String sslFactory = \"\";\n-    private String fromEmailAddress = \"\";\n-    private String fromEmailPass = \"\";\n-    private String fromEmailName = \"\";\n-    private String ccEmail;\n-    private String bccEmail;\n-    private String attachmentPath;\n-    // Domain that we send in the EHLO request if we are not authenticating\n-    // with the SMTP server.\n-    @Setter\n-    private String fromDomain = \"\";\n-    // If set to true, we will not authenticate with the SMTP service and\n-    // rather rely on the SMTP service's configured IP whitelist. If false we\n-    // will authenticate with the provided fromEmailAddress and fromEmailPass.\n-    @Setter\n-    private Boolean useIpWhitelist = false;\n-\n-    public boolean sendemail() throws Exception {\n-        logger.debug(\" sendemail() ==== starts\");\n-        boolean sentMail = false;\n-        try {\n-            final String username = this.getFromEmailAddress();\n-            final String password = this.getFromEmailPass();\n-            Properties props = makeProperties(useIpWhitelist);\n-            Session session = useIpWhitelist ? makeSession(props) :\n-                    makeSession(props, username, password);\n-            Message message = new MimeMessage(session);\n-            message.setFrom(new InternetAddress(username));\n-            if (StringUtils.isNotBlank(this.getToemail())) {\n-                if (this.getToemail().indexOf(\",\") != -1) {\n-                    message.setRecipients(\n-                            Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n-                } else {\n-                    message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n-                }\n-            }\n-            if (StringUtils.isNotBlank(this.getCcEmail())) {\n-                message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n-            }\n-            if (StringUtils.isNotBlank(this.getBccEmail())) {\n-                message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n-            }\n-            message.setSubject(this.subject);\n-            message.setContent(this.getMessageBody(), \"text/html\");\n-            Transport transport = session.getTransport();\n-            transport.send(message);\n-            logger.debug(\"sendemail()==== ends\");\n-            sentMail = true;\n-        } catch (MessagingException e) {\n-            logger.error(\"sendemail() MessagingException- error\", e);\n-        } catch (Exception e) {\n-            logger.error(\"ERROR:  sendemail() - error( ) \" + e + \" : \");\n-        }\n-        logger.debug(\"Mail.sendemail() :: Ends\");\n-        return sentMail;\n-    }\n-\n-    public boolean sendMailWithAttachment() throws Exception {\n-        logger.debug(\"sendMailWithAttachment()==== start\");\n-        boolean sentMail = false;\n-        try {\n-            final String username = this.getFromEmailAddress();\n-            final String password = this.getFromEmailPass();\n-            Properties props = makeProperties(useIpWhitelist);\n-            Session session = useIpWhitelist ? makeSession(props) :\n-                    makeSession(props, username, password);\n-            Message message = new MimeMessage(session);\n-            if (StringUtils.isNotBlank(this.getToemail())) {\n-                if (this.getToemail().indexOf(\",\") != -1) {\n-                    message.setRecipients(\n-                            Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n-                } else {\n-                    message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n-                }\n-            }\n-            if (StringUtils.isNotBlank(this.getCcEmail())) {\n-                message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n-            }\n-            if (StringUtils.isNotBlank(this.getBccEmail())) {\n-                message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n-            }\n-            message.setSubject(this.subject);\n-            message.setFrom(new InternetAddress(username));\n-            // message.setText(\"Check attachment in Mail\");\n-            // message.setContent(messageBody, \"text/html\");\n-            // Create the message part\n-            BodyPart messageBodyPart = new MimeBodyPart();\n-            // Create a multipar message\n-            Multipart multipart = new MimeMultipart();\n-            // Part two is attachment\n-            messageBodyPart = new MimeBodyPart();\n-            // String filename = \"D:\\\\temp\\\\TestLinks.pdf\"; // D:\\temp\\noteb.txt\n-            DataSource source = new FileDataSource(this.getAttachmentPath());\n-            messageBodyPart.setDataHandler(new DataHandler(source));\n-            messageBodyPart.setFileName(source.getName());\n-            messageBodyPart.setHeader(\"Content-Transfer-Encoding\", \"base64\");\n-            messageBodyPart.setHeader(\"Content-Type\", source.getContentType());\n-            // Send the complete message parts\n-            multipart.addBodyPart(messageBodyPart);\n-\n-            messageBodyPart = new MimeBodyPart();\n-            messageBodyPart.setText(messageBody);\n-            messageBodyPart.setHeader(\"MIME-Version\", \"1.0\");\n-            messageBodyPart.setHeader(\"Content-Type\", messageBodyPart.getContentType());\n-            multipart.addBodyPart(messageBodyPart);\n-\n-            message.setContent(multipart);\n-            Transport.send(message);\n-            sentMail = true;\n-        } catch (MessagingException e) {\n-            logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n-            sentMail = false;\n-        } catch (Exception e) {\n-            logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n-        }\n-        logger.debug(\"Mail.sendMailWithAttachment() :: Ends\");\n-        return sentMail;\n-    }\n-\n-    // Constructs a Propterties either relying on IP Whitelist on the SMTP\n-    // service or on authentication with email and password.\n-    private Properties makeProperties(Boolean useIpWhitelist) {\n-        Properties props = new Properties();\n-        props.put(\"mail.smtp.host\", this.getSmtp_Hostname());\n-        props.put(\"mail.smtp.port\", this.getSmtp_portvalue());\n-        props.put(\"mail.smtp.socketFactory.class\", this.getSslFactory());\n-        props.put(\"mail.smtp.socketFactory.port\", this.getSmtp_portvalue());\n-        if (useIpWhitelist) {\n-            props.put(\"mail.smtp.auth\", \"false\");\n-            props.put(\"mail.smtp.ssl.enable\", \"true\");\n-            props.put(\"mail.smtp.localhost\", fromDomain);\n+  private static final Logger logger = LogManager.getLogger(Mail.class);\n+\n+  private String toemail;\n+  private String subject;\n+  private String messageBody;\n+  // Fallback hostname if we are authenticating.\n+  private static final String SMTP_HOSTNAME = \"smtp.gmail.com\";\n+  // Fallback hostname if we are not authenticating.\n+  private static final String SMTP_RELAY_HOSTNAME = \"smtp-relay.gmail.com\";\n+  private static final String SMTP_PORT = \"465\";\n+  private String smtp_Hostname = \"\";\n+  private String smtp_portvalue = \"\";\n+  static String SSL_FACTORY = \"javax.net.ssl.SSLSocketFactory\";\n+  private String sslFactory = \"\";\n+  private String fromEmailAddress = \"\";\n+  private String fromEmailPass = \"\";\n+  private String fromEmailName = \"\";\n+  private String ccEmail;\n+  private String bccEmail;\n+  private String attachmentPath;\n+  // Domain that we send in the EHLO request if we are not authenticating\n+  // with the SMTP server.\n+  @Setter private String fromDomain = \"\";\n+  // If set to true, we will not authenticate with the SMTP service and\n+  // rather rely on the SMTP service's configured IP whitelist. If false we\n+  // will authenticate with the provided fromEmailAddress and fromEmailPass.\n+  @Setter private Boolean useIpWhitelist = false;\n+\n+  public boolean sendemail() throws Exception {\n+    logger.debug(\" sendemail() ==== starts\");\n+    boolean sentMail = false;\n+    try {\n+      final String username = this.getFromEmailAddress();\n+      final String password = this.getFromEmailPass();\n+      Properties props = makeProperties(useIpWhitelist);\n+      Session session =\n+          useIpWhitelist ? makeSession(props) : makeSession(props, username, password);\n+      Message message = new MimeMessage(session);\n+      message.setFrom(new InternetAddress(username));\n+      if (StringUtils.isNotBlank(this.getToemail())) {\n+        if (this.getToemail().indexOf(\",\") != -1) {\n+          message.setRecipients(\n+              Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n         } else {\n-            props.put(\"mail.smtp.auth\", \"true\");\n+          message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n         }\n-        return props;\n-    }\n-\n-    private Session makeSession(Properties props) {\n-        return Session.getInstance(props, null);\n-    }\n-\n-    private Session makeSession(Properties props, String username,\n-                                String password) {\n-        return Session.getInstance(\n-                props,\n-                new javax.mail.Authenticator() {\n-                    @Override\n-                    protected PasswordAuthentication getPasswordAuthentication() {\n-                        return new PasswordAuthentication(username, password);\n-                    }\n-                });\n-    }\n-\n-    public String getToemail() {\n-        return toemail;\n-    }\n-\n-    public void setToemail(String toemail) {\n-        this.toemail = toemail;\n-    }\n-\n-    public String getSubject() {\n-        return subject;\n-    }\n-\n-    public void setSubject(String subject) {\n-        this.subject = subject;\n-    }\n-\n-    public String getMessageBody() {\n-        return messageBody;\n-    }\n-\n-    public void setMessageBody(String messageBody) {\n-        this.messageBody = messageBody;\n-    }\n-\n-    public String getSmtp_Hostname() {\n-        if (this.smtp_Hostname.equals(\"\")) {\n-            if (useIpWhitelist) {\n-                return Mail.SMTP_RELAY_HOSTNAME;\n-            } else {\n-                return Mail.SMTP_HOSTNAME;\n-            }\n+      }\n+      if (StringUtils.isNotBlank(this.getCcEmail())) {\n+        message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n+      }\n+      if (StringUtils.isNotBlank(this.getBccEmail())) {\n+        message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n+      }\n+      message.setSubject(this.subject);\n+      message.setContent(this.getMessageBody(), \"text/html\");\n+      Transport transport = session.getTransport();\n+      transport.send(message);\n+      logger.debug(\"sendemail()==== ends\");\n+      sentMail = true;\n+    } catch (MessagingException e) {\n+      logger.error(\"sendemail() MessagingException- error\", e);\n+    } catch (Exception e) {\n+      logger.error(\"ERROR:  sendemail() - error( ) \" + e + \" : \");\n+    }\n+    logger.debug(\"Mail.sendemail() :: Ends\");\n+    return sentMail;\n+  }\n+\n+  public boolean sendMailWithAttachment() throws Exception {\n+    logger.debug(\"sendMailWithAttachment()==== start\");\n+    boolean sentMail = false;\n+    try {\n+      final String username = this.getFromEmailAddress();\n+      final String password = this.getFromEmailPass();\n+      Properties props = makeProperties(useIpWhitelist);\n+      Session session =\n+          useIpWhitelist ? makeSession(props) : makeSession(props, username, password);\n+      Message message = new MimeMessage(session);\n+      if (StringUtils.isNotBlank(this.getToemail())) {\n+        if (this.getToemail().indexOf(\",\") != -1) {\n+          message.setRecipients(\n+              Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n         } else {\n-            return this.smtp_Hostname;\n+          message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n         }\n-    }\n+      }\n+      if (StringUtils.isNotBlank(this.getCcEmail())) {\n+        message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n+      }\n+      if (StringUtils.isNotBlank(this.getBccEmail())) {\n+        message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n+      }\n+      message.setSubject(this.subject);\n+      message.setFrom(new InternetAddress(username));\n+      // message.setText(\"Check attachment in Mail\");\n+      // message.setContent(messageBody, \"text/html\");\n+      // Create the message part\n+      BodyPart messageBodyPart = new MimeBodyPart();\n+      // Create a multipar message\n+      Multipart multipart = new MimeMultipart();\n+      // Part two is attachment\n+      messageBodyPart = new MimeBodyPart();\n+      // String filename = \"D:\\\\temp\\\\TestLinks.pdf\"; // D:\\temp\\noteb.txt\n+      DataSource source = new FileDataSource(this.getAttachmentPath());\n+      messageBodyPart.setDataHandler(new DataHandler(source));\n+      messageBodyPart.setFileName(source.getName());\n+      messageBodyPart.setHeader(\"Content-Transfer-Encoding\", \"base64\");\n+      messageBodyPart.setHeader(\"Content-Type\", source.getContentType());\n+      // Send the complete message parts\n+      multipart.addBodyPart(messageBodyPart);\n+\n+      messageBodyPart = new MimeBodyPart();\n+      messageBodyPart.setText(messageBody);\n+      messageBodyPart.setHeader(\"MIME-Version\", \"1.0\");\n+      messageBodyPart.setHeader(\"Content-Type\", messageBodyPart.getContentType());\n+      multipart.addBodyPart(messageBodyPart);\n+\n+      message.setContent(multipart);\n+      Transport.send(message);\n+      sentMail = true;\n+    } catch (MessagingException e) {\n+      logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n+      sentMail = false;\n+    } catch (Exception e) {\n+      logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n+    }\n+    logger.debug(\"Mail.sendMailWithAttachment() :: Ends\");\n+    return sentMail;\n+  }\n+\n+  // Constructs a Propterties either relying on IP Whitelist on the SMTP\n+  // service or on authentication with email and password.\n+  private Properties makeProperties(Boolean useIpWhitelist) {\n+    Properties props = new Properties();\n+    props.put(\"mail.smtp.host\", this.getSmtp_Hostname());\n+    props.put(\"mail.smtp.port\", this.getSmtp_portvalue());\n+    props.put(\"mail.smtp.socketFactory.class\", this.getSslFactory());\n+    props.put(\"mail.smtp.socketFactory.port\", this.getSmtp_portvalue());\n+    if (useIpWhitelist) {\n+      props.put(\"mail.smtp.auth\", \"false\");\n+      props.put(\"mail.smtp.ssl.enable\", \"true\");\n+      props.put(\"mail.smtp.localhost\", fromDomain);\n+    } else {\n+      props.put(\"mail.smtp.auth\", \"true\");\n+    }\n+    return props;\n+  }\n+\n+  private Session makeSession(Properties props) {\n+    return Session.getInstance(props, null);\n+  }\n+\n+  private Session makeSession(Properties props, String username, String password) {\n+    return Session.getInstance(\n+        props,\n+        new javax.mail.Authenticator() {\n+          @Override\n+          protected PasswordAuthentication getPasswordAuthentication() {\n+            return new PasswordAuthentication(username, password);\n+          }\n+        });\n+  }\n+\n+  public String getToemail() {\n+    return toemail;\n+  }\n+\n+  public void setToemail(String toemail) {\n+    this.toemail = toemail;\n+  }\n+\n+  public String getSubject() {\n+    return subject;\n+  }\n+\n+  public void setSubject(String subject) {\n+    this.subject = subject;\n+  }\n+\n+  public String getMessageBody() {\n+    return messageBody;\n+  }\n+\n+  public void setMessageBody(String messageBody) {\n+    this.messageBody = messageBody;\n+  }\n+\n+  public String getSmtp_Hostname() {\n+    if (this.smtp_Hostname.equals(\"\")) {\n+      if (useIpWhitelist) {\n+        return Mail.SMTP_RELAY_HOSTNAME;\n+      } else {\n+        return Mail.SMTP_HOSTNAME;\n+      }\n+    } else {\n+      return this.smtp_Hostname;\n+    }\n+  }\n+\n+  public void setSmtp_Hostname(String smtp_Hostname) {\n+    this.smtp_Hostname = smtp_Hostname;\n+  }\n+\n+  public String getSmtp_portvalue() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1275b0d755dc41d7df75133eab56d82eed9cb5e1"}, "originalPosition": 412}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzQzMDkzOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/Mail.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxN1rOG77uhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxN1rOG77uhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ5NzczNQ==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nParameter name 'smtp_portvalue' must match pattern '^a-z?$'.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465497735", "createdAt": "2020-08-05T06:18:17Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/Mail.java", "diffHunk": "@@ -23,308 +23,304 @@\n import javax.mail.internet.MimeBodyPart;\n import javax.mail.internet.MimeMessage;\n import javax.mail.internet.MimeMultipart;\n-\n import lombok.Setter;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n \n public class Mail {\n \n-    private static final Logger logger = LogManager.getLogger(Mail.class);\n-\n-    private String toemail;\n-    private String subject;\n-    private String messageBody;\n-    // Fallback hostname if we are authenticating.\n-    private static final String SMTP_HOSTNAME = \"smtp.gmail.com\";\n-    // Fallback hostname if we are not authenticating.\n-    private static final String SMTP_RELAY_HOSTNAME = \"smtp-relay.gmail.com\";\n-    private static final String SMTP_PORT = \"465\";\n-    private String smtp_Hostname = \"\";\n-    private String smtp_portvalue = \"\";\n-    static String SSL_FACTORY = \"javax.net.ssl.SSLSocketFactory\";\n-    private String sslFactory = \"\";\n-    private String fromEmailAddress = \"\";\n-    private String fromEmailPass = \"\";\n-    private String fromEmailName = \"\";\n-    private String ccEmail;\n-    private String bccEmail;\n-    private String attachmentPath;\n-    // Domain that we send in the EHLO request if we are not authenticating\n-    // with the SMTP server.\n-    @Setter\n-    private String fromDomain = \"\";\n-    // If set to true, we will not authenticate with the SMTP service and\n-    // rather rely on the SMTP service's configured IP whitelist. If false we\n-    // will authenticate with the provided fromEmailAddress and fromEmailPass.\n-    @Setter\n-    private Boolean useIpWhitelist = false;\n-\n-    public boolean sendemail() throws Exception {\n-        logger.debug(\" sendemail() ==== starts\");\n-        boolean sentMail = false;\n-        try {\n-            final String username = this.getFromEmailAddress();\n-            final String password = this.getFromEmailPass();\n-            Properties props = makeProperties(useIpWhitelist);\n-            Session session = useIpWhitelist ? makeSession(props) :\n-                    makeSession(props, username, password);\n-            Message message = new MimeMessage(session);\n-            message.setFrom(new InternetAddress(username));\n-            if (StringUtils.isNotBlank(this.getToemail())) {\n-                if (this.getToemail().indexOf(\",\") != -1) {\n-                    message.setRecipients(\n-                            Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n-                } else {\n-                    message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n-                }\n-            }\n-            if (StringUtils.isNotBlank(this.getCcEmail())) {\n-                message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n-            }\n-            if (StringUtils.isNotBlank(this.getBccEmail())) {\n-                message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n-            }\n-            message.setSubject(this.subject);\n-            message.setContent(this.getMessageBody(), \"text/html\");\n-            Transport transport = session.getTransport();\n-            transport.send(message);\n-            logger.debug(\"sendemail()==== ends\");\n-            sentMail = true;\n-        } catch (MessagingException e) {\n-            logger.error(\"sendemail() MessagingException- error\", e);\n-        } catch (Exception e) {\n-            logger.error(\"ERROR:  sendemail() - error( ) \" + e + \" : \");\n-        }\n-        logger.debug(\"Mail.sendemail() :: Ends\");\n-        return sentMail;\n-    }\n-\n-    public boolean sendMailWithAttachment() throws Exception {\n-        logger.debug(\"sendMailWithAttachment()==== start\");\n-        boolean sentMail = false;\n-        try {\n-            final String username = this.getFromEmailAddress();\n-            final String password = this.getFromEmailPass();\n-            Properties props = makeProperties(useIpWhitelist);\n-            Session session = useIpWhitelist ? makeSession(props) :\n-                    makeSession(props, username, password);\n-            Message message = new MimeMessage(session);\n-            if (StringUtils.isNotBlank(this.getToemail())) {\n-                if (this.getToemail().indexOf(\",\") != -1) {\n-                    message.setRecipients(\n-                            Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n-                } else {\n-                    message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n-                }\n-            }\n-            if (StringUtils.isNotBlank(this.getCcEmail())) {\n-                message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n-            }\n-            if (StringUtils.isNotBlank(this.getBccEmail())) {\n-                message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n-            }\n-            message.setSubject(this.subject);\n-            message.setFrom(new InternetAddress(username));\n-            // message.setText(\"Check attachment in Mail\");\n-            // message.setContent(messageBody, \"text/html\");\n-            // Create the message part\n-            BodyPart messageBodyPart = new MimeBodyPart();\n-            // Create a multipar message\n-            Multipart multipart = new MimeMultipart();\n-            // Part two is attachment\n-            messageBodyPart = new MimeBodyPart();\n-            // String filename = \"D:\\\\temp\\\\TestLinks.pdf\"; // D:\\temp\\noteb.txt\n-            DataSource source = new FileDataSource(this.getAttachmentPath());\n-            messageBodyPart.setDataHandler(new DataHandler(source));\n-            messageBodyPart.setFileName(source.getName());\n-            messageBodyPart.setHeader(\"Content-Transfer-Encoding\", \"base64\");\n-            messageBodyPart.setHeader(\"Content-Type\", source.getContentType());\n-            // Send the complete message parts\n-            multipart.addBodyPart(messageBodyPart);\n-\n-            messageBodyPart = new MimeBodyPart();\n-            messageBodyPart.setText(messageBody);\n-            messageBodyPart.setHeader(\"MIME-Version\", \"1.0\");\n-            messageBodyPart.setHeader(\"Content-Type\", messageBodyPart.getContentType());\n-            multipart.addBodyPart(messageBodyPart);\n-\n-            message.setContent(multipart);\n-            Transport.send(message);\n-            sentMail = true;\n-        } catch (MessagingException e) {\n-            logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n-            sentMail = false;\n-        } catch (Exception e) {\n-            logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n-        }\n-        logger.debug(\"Mail.sendMailWithAttachment() :: Ends\");\n-        return sentMail;\n-    }\n-\n-    // Constructs a Propterties either relying on IP Whitelist on the SMTP\n-    // service or on authentication with email and password.\n-    private Properties makeProperties(Boolean useIpWhitelist) {\n-        Properties props = new Properties();\n-        props.put(\"mail.smtp.host\", this.getSmtp_Hostname());\n-        props.put(\"mail.smtp.port\", this.getSmtp_portvalue());\n-        props.put(\"mail.smtp.socketFactory.class\", this.getSslFactory());\n-        props.put(\"mail.smtp.socketFactory.port\", this.getSmtp_portvalue());\n-        if (useIpWhitelist) {\n-            props.put(\"mail.smtp.auth\", \"false\");\n-            props.put(\"mail.smtp.ssl.enable\", \"true\");\n-            props.put(\"mail.smtp.localhost\", fromDomain);\n+  private static final Logger logger = LogManager.getLogger(Mail.class);\n+\n+  private String toemail;\n+  private String subject;\n+  private String messageBody;\n+  // Fallback hostname if we are authenticating.\n+  private static final String SMTP_HOSTNAME = \"smtp.gmail.com\";\n+  // Fallback hostname if we are not authenticating.\n+  private static final String SMTP_RELAY_HOSTNAME = \"smtp-relay.gmail.com\";\n+  private static final String SMTP_PORT = \"465\";\n+  private String smtp_Hostname = \"\";\n+  private String smtp_portvalue = \"\";\n+  static String SSL_FACTORY = \"javax.net.ssl.SSLSocketFactory\";\n+  private String sslFactory = \"\";\n+  private String fromEmailAddress = \"\";\n+  private String fromEmailPass = \"\";\n+  private String fromEmailName = \"\";\n+  private String ccEmail;\n+  private String bccEmail;\n+  private String attachmentPath;\n+  // Domain that we send in the EHLO request if we are not authenticating\n+  // with the SMTP server.\n+  @Setter private String fromDomain = \"\";\n+  // If set to true, we will not authenticate with the SMTP service and\n+  // rather rely on the SMTP service's configured IP whitelist. If false we\n+  // will authenticate with the provided fromEmailAddress and fromEmailPass.\n+  @Setter private Boolean useIpWhitelist = false;\n+\n+  public boolean sendemail() throws Exception {\n+    logger.debug(\" sendemail() ==== starts\");\n+    boolean sentMail = false;\n+    try {\n+      final String username = this.getFromEmailAddress();\n+      final String password = this.getFromEmailPass();\n+      Properties props = makeProperties(useIpWhitelist);\n+      Session session =\n+          useIpWhitelist ? makeSession(props) : makeSession(props, username, password);\n+      Message message = new MimeMessage(session);\n+      message.setFrom(new InternetAddress(username));\n+      if (StringUtils.isNotBlank(this.getToemail())) {\n+        if (this.getToemail().indexOf(\",\") != -1) {\n+          message.setRecipients(\n+              Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n         } else {\n-            props.put(\"mail.smtp.auth\", \"true\");\n+          message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n         }\n-        return props;\n-    }\n-\n-    private Session makeSession(Properties props) {\n-        return Session.getInstance(props, null);\n-    }\n-\n-    private Session makeSession(Properties props, String username,\n-                                String password) {\n-        return Session.getInstance(\n-                props,\n-                new javax.mail.Authenticator() {\n-                    @Override\n-                    protected PasswordAuthentication getPasswordAuthentication() {\n-                        return new PasswordAuthentication(username, password);\n-                    }\n-                });\n-    }\n-\n-    public String getToemail() {\n-        return toemail;\n-    }\n-\n-    public void setToemail(String toemail) {\n-        this.toemail = toemail;\n-    }\n-\n-    public String getSubject() {\n-        return subject;\n-    }\n-\n-    public void setSubject(String subject) {\n-        this.subject = subject;\n-    }\n-\n-    public String getMessageBody() {\n-        return messageBody;\n-    }\n-\n-    public void setMessageBody(String messageBody) {\n-        this.messageBody = messageBody;\n-    }\n-\n-    public String getSmtp_Hostname() {\n-        if (this.smtp_Hostname.equals(\"\")) {\n-            if (useIpWhitelist) {\n-                return Mail.SMTP_RELAY_HOSTNAME;\n-            } else {\n-                return Mail.SMTP_HOSTNAME;\n-            }\n+      }\n+      if (StringUtils.isNotBlank(this.getCcEmail())) {\n+        message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n+      }\n+      if (StringUtils.isNotBlank(this.getBccEmail())) {\n+        message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n+      }\n+      message.setSubject(this.subject);\n+      message.setContent(this.getMessageBody(), \"text/html\");\n+      Transport transport = session.getTransport();\n+      transport.send(message);\n+      logger.debug(\"sendemail()==== ends\");\n+      sentMail = true;\n+    } catch (MessagingException e) {\n+      logger.error(\"sendemail() MessagingException- error\", e);\n+    } catch (Exception e) {\n+      logger.error(\"ERROR:  sendemail() - error( ) \" + e + \" : \");\n+    }\n+    logger.debug(\"Mail.sendemail() :: Ends\");\n+    return sentMail;\n+  }\n+\n+  public boolean sendMailWithAttachment() throws Exception {\n+    logger.debug(\"sendMailWithAttachment()==== start\");\n+    boolean sentMail = false;\n+    try {\n+      final String username = this.getFromEmailAddress();\n+      final String password = this.getFromEmailPass();\n+      Properties props = makeProperties(useIpWhitelist);\n+      Session session =\n+          useIpWhitelist ? makeSession(props) : makeSession(props, username, password);\n+      Message message = new MimeMessage(session);\n+      if (StringUtils.isNotBlank(this.getToemail())) {\n+        if (this.getToemail().indexOf(\",\") != -1) {\n+          message.setRecipients(\n+              Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n         } else {\n-            return this.smtp_Hostname;\n+          message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n         }\n-    }\n+      }\n+      if (StringUtils.isNotBlank(this.getCcEmail())) {\n+        message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n+      }\n+      if (StringUtils.isNotBlank(this.getBccEmail())) {\n+        message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n+      }\n+      message.setSubject(this.subject);\n+      message.setFrom(new InternetAddress(username));\n+      // message.setText(\"Check attachment in Mail\");\n+      // message.setContent(messageBody, \"text/html\");\n+      // Create the message part\n+      BodyPart messageBodyPart = new MimeBodyPart();\n+      // Create a multipar message\n+      Multipart multipart = new MimeMultipart();\n+      // Part two is attachment\n+      messageBodyPart = new MimeBodyPart();\n+      // String filename = \"D:\\\\temp\\\\TestLinks.pdf\"; // D:\\temp\\noteb.txt\n+      DataSource source = new FileDataSource(this.getAttachmentPath());\n+      messageBodyPart.setDataHandler(new DataHandler(source));\n+      messageBodyPart.setFileName(source.getName());\n+      messageBodyPart.setHeader(\"Content-Transfer-Encoding\", \"base64\");\n+      messageBodyPart.setHeader(\"Content-Type\", source.getContentType());\n+      // Send the complete message parts\n+      multipart.addBodyPart(messageBodyPart);\n+\n+      messageBodyPart = new MimeBodyPart();\n+      messageBodyPart.setText(messageBody);\n+      messageBodyPart.setHeader(\"MIME-Version\", \"1.0\");\n+      messageBodyPart.setHeader(\"Content-Type\", messageBodyPart.getContentType());\n+      multipart.addBodyPart(messageBodyPart);\n+\n+      message.setContent(multipart);\n+      Transport.send(message);\n+      sentMail = true;\n+    } catch (MessagingException e) {\n+      logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n+      sentMail = false;\n+    } catch (Exception e) {\n+      logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n+    }\n+    logger.debug(\"Mail.sendMailWithAttachment() :: Ends\");\n+    return sentMail;\n+  }\n+\n+  // Constructs a Propterties either relying on IP Whitelist on the SMTP\n+  // service or on authentication with email and password.\n+  private Properties makeProperties(Boolean useIpWhitelist) {\n+    Properties props = new Properties();\n+    props.put(\"mail.smtp.host\", this.getSmtp_Hostname());\n+    props.put(\"mail.smtp.port\", this.getSmtp_portvalue());\n+    props.put(\"mail.smtp.socketFactory.class\", this.getSslFactory());\n+    props.put(\"mail.smtp.socketFactory.port\", this.getSmtp_portvalue());\n+    if (useIpWhitelist) {\n+      props.put(\"mail.smtp.auth\", \"false\");\n+      props.put(\"mail.smtp.ssl.enable\", \"true\");\n+      props.put(\"mail.smtp.localhost\", fromDomain);\n+    } else {\n+      props.put(\"mail.smtp.auth\", \"true\");\n+    }\n+    return props;\n+  }\n+\n+  private Session makeSession(Properties props) {\n+    return Session.getInstance(props, null);\n+  }\n+\n+  private Session makeSession(Properties props, String username, String password) {\n+    return Session.getInstance(\n+        props,\n+        new javax.mail.Authenticator() {\n+          @Override\n+          protected PasswordAuthentication getPasswordAuthentication() {\n+            return new PasswordAuthentication(username, password);\n+          }\n+        });\n+  }\n+\n+  public String getToemail() {\n+    return toemail;\n+  }\n+\n+  public void setToemail(String toemail) {\n+    this.toemail = toemail;\n+  }\n+\n+  public String getSubject() {\n+    return subject;\n+  }\n+\n+  public void setSubject(String subject) {\n+    this.subject = subject;\n+  }\n+\n+  public String getMessageBody() {\n+    return messageBody;\n+  }\n+\n+  public void setMessageBody(String messageBody) {\n+    this.messageBody = messageBody;\n+  }\n+\n+  public String getSmtp_Hostname() {\n+    if (this.smtp_Hostname.equals(\"\")) {\n+      if (useIpWhitelist) {\n+        return Mail.SMTP_RELAY_HOSTNAME;\n+      } else {\n+        return Mail.SMTP_HOSTNAME;\n+      }\n+    } else {\n+      return this.smtp_Hostname;\n+    }\n+  }\n+\n+  public void setSmtp_Hostname(String smtp_Hostname) {\n+    this.smtp_Hostname = smtp_Hostname;\n+  }\n+\n+  public String getSmtp_portvalue() {\n+    String portvalue = \"\";\n+    if (this.smtp_portvalue.equals(\"\")) {\n+      portvalue = Mail.SMTP_PORT;\n+    } else {\n+      portvalue = this.smtp_portvalue;\n+    }\n+\n+    return portvalue;\n+  }\n+\n+  public void setSmtp_portvalue(String smtp_portvalue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1275b0d755dc41d7df75133eab56d82eed9cb5e1"}, "originalPosition": 423}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzQzMDk0OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/Mail.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxN1rOG77uig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxN1rOG77uig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ5NzczOA==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nAbbreviation in name 'getSSL_FACTORY' must contain no more than '2' consecutive capital letters.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465497738", "createdAt": "2020-08-05T06:18:17Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/Mail.java", "diffHunk": "@@ -23,308 +23,304 @@\n import javax.mail.internet.MimeBodyPart;\n import javax.mail.internet.MimeMessage;\n import javax.mail.internet.MimeMultipart;\n-\n import lombok.Setter;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n \n public class Mail {\n \n-    private static final Logger logger = LogManager.getLogger(Mail.class);\n-\n-    private String toemail;\n-    private String subject;\n-    private String messageBody;\n-    // Fallback hostname if we are authenticating.\n-    private static final String SMTP_HOSTNAME = \"smtp.gmail.com\";\n-    // Fallback hostname if we are not authenticating.\n-    private static final String SMTP_RELAY_HOSTNAME = \"smtp-relay.gmail.com\";\n-    private static final String SMTP_PORT = \"465\";\n-    private String smtp_Hostname = \"\";\n-    private String smtp_portvalue = \"\";\n-    static String SSL_FACTORY = \"javax.net.ssl.SSLSocketFactory\";\n-    private String sslFactory = \"\";\n-    private String fromEmailAddress = \"\";\n-    private String fromEmailPass = \"\";\n-    private String fromEmailName = \"\";\n-    private String ccEmail;\n-    private String bccEmail;\n-    private String attachmentPath;\n-    // Domain that we send in the EHLO request if we are not authenticating\n-    // with the SMTP server.\n-    @Setter\n-    private String fromDomain = \"\";\n-    // If set to true, we will not authenticate with the SMTP service and\n-    // rather rely on the SMTP service's configured IP whitelist. If false we\n-    // will authenticate with the provided fromEmailAddress and fromEmailPass.\n-    @Setter\n-    private Boolean useIpWhitelist = false;\n-\n-    public boolean sendemail() throws Exception {\n-        logger.debug(\" sendemail() ==== starts\");\n-        boolean sentMail = false;\n-        try {\n-            final String username = this.getFromEmailAddress();\n-            final String password = this.getFromEmailPass();\n-            Properties props = makeProperties(useIpWhitelist);\n-            Session session = useIpWhitelist ? makeSession(props) :\n-                    makeSession(props, username, password);\n-            Message message = new MimeMessage(session);\n-            message.setFrom(new InternetAddress(username));\n-            if (StringUtils.isNotBlank(this.getToemail())) {\n-                if (this.getToemail().indexOf(\",\") != -1) {\n-                    message.setRecipients(\n-                            Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n-                } else {\n-                    message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n-                }\n-            }\n-            if (StringUtils.isNotBlank(this.getCcEmail())) {\n-                message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n-            }\n-            if (StringUtils.isNotBlank(this.getBccEmail())) {\n-                message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n-            }\n-            message.setSubject(this.subject);\n-            message.setContent(this.getMessageBody(), \"text/html\");\n-            Transport transport = session.getTransport();\n-            transport.send(message);\n-            logger.debug(\"sendemail()==== ends\");\n-            sentMail = true;\n-        } catch (MessagingException e) {\n-            logger.error(\"sendemail() MessagingException- error\", e);\n-        } catch (Exception e) {\n-            logger.error(\"ERROR:  sendemail() - error( ) \" + e + \" : \");\n-        }\n-        logger.debug(\"Mail.sendemail() :: Ends\");\n-        return sentMail;\n-    }\n-\n-    public boolean sendMailWithAttachment() throws Exception {\n-        logger.debug(\"sendMailWithAttachment()==== start\");\n-        boolean sentMail = false;\n-        try {\n-            final String username = this.getFromEmailAddress();\n-            final String password = this.getFromEmailPass();\n-            Properties props = makeProperties(useIpWhitelist);\n-            Session session = useIpWhitelist ? makeSession(props) :\n-                    makeSession(props, username, password);\n-            Message message = new MimeMessage(session);\n-            if (StringUtils.isNotBlank(this.getToemail())) {\n-                if (this.getToemail().indexOf(\",\") != -1) {\n-                    message.setRecipients(\n-                            Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n-                } else {\n-                    message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n-                }\n-            }\n-            if (StringUtils.isNotBlank(this.getCcEmail())) {\n-                message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n-            }\n-            if (StringUtils.isNotBlank(this.getBccEmail())) {\n-                message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n-            }\n-            message.setSubject(this.subject);\n-            message.setFrom(new InternetAddress(username));\n-            // message.setText(\"Check attachment in Mail\");\n-            // message.setContent(messageBody, \"text/html\");\n-            // Create the message part\n-            BodyPart messageBodyPart = new MimeBodyPart();\n-            // Create a multipar message\n-            Multipart multipart = new MimeMultipart();\n-            // Part two is attachment\n-            messageBodyPart = new MimeBodyPart();\n-            // String filename = \"D:\\\\temp\\\\TestLinks.pdf\"; // D:\\temp\\noteb.txt\n-            DataSource source = new FileDataSource(this.getAttachmentPath());\n-            messageBodyPart.setDataHandler(new DataHandler(source));\n-            messageBodyPart.setFileName(source.getName());\n-            messageBodyPart.setHeader(\"Content-Transfer-Encoding\", \"base64\");\n-            messageBodyPart.setHeader(\"Content-Type\", source.getContentType());\n-            // Send the complete message parts\n-            multipart.addBodyPart(messageBodyPart);\n-\n-            messageBodyPart = new MimeBodyPart();\n-            messageBodyPart.setText(messageBody);\n-            messageBodyPart.setHeader(\"MIME-Version\", \"1.0\");\n-            messageBodyPart.setHeader(\"Content-Type\", messageBodyPart.getContentType());\n-            multipart.addBodyPart(messageBodyPart);\n-\n-            message.setContent(multipart);\n-            Transport.send(message);\n-            sentMail = true;\n-        } catch (MessagingException e) {\n-            logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n-            sentMail = false;\n-        } catch (Exception e) {\n-            logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n-        }\n-        logger.debug(\"Mail.sendMailWithAttachment() :: Ends\");\n-        return sentMail;\n-    }\n-\n-    // Constructs a Propterties either relying on IP Whitelist on the SMTP\n-    // service or on authentication with email and password.\n-    private Properties makeProperties(Boolean useIpWhitelist) {\n-        Properties props = new Properties();\n-        props.put(\"mail.smtp.host\", this.getSmtp_Hostname());\n-        props.put(\"mail.smtp.port\", this.getSmtp_portvalue());\n-        props.put(\"mail.smtp.socketFactory.class\", this.getSslFactory());\n-        props.put(\"mail.smtp.socketFactory.port\", this.getSmtp_portvalue());\n-        if (useIpWhitelist) {\n-            props.put(\"mail.smtp.auth\", \"false\");\n-            props.put(\"mail.smtp.ssl.enable\", \"true\");\n-            props.put(\"mail.smtp.localhost\", fromDomain);\n+  private static final Logger logger = LogManager.getLogger(Mail.class);\n+\n+  private String toemail;\n+  private String subject;\n+  private String messageBody;\n+  // Fallback hostname if we are authenticating.\n+  private static final String SMTP_HOSTNAME = \"smtp.gmail.com\";\n+  // Fallback hostname if we are not authenticating.\n+  private static final String SMTP_RELAY_HOSTNAME = \"smtp-relay.gmail.com\";\n+  private static final String SMTP_PORT = \"465\";\n+  private String smtp_Hostname = \"\";\n+  private String smtp_portvalue = \"\";\n+  static String SSL_FACTORY = \"javax.net.ssl.SSLSocketFactory\";\n+  private String sslFactory = \"\";\n+  private String fromEmailAddress = \"\";\n+  private String fromEmailPass = \"\";\n+  private String fromEmailName = \"\";\n+  private String ccEmail;\n+  private String bccEmail;\n+  private String attachmentPath;\n+  // Domain that we send in the EHLO request if we are not authenticating\n+  // with the SMTP server.\n+  @Setter private String fromDomain = \"\";\n+  // If set to true, we will not authenticate with the SMTP service and\n+  // rather rely on the SMTP service's configured IP whitelist. If false we\n+  // will authenticate with the provided fromEmailAddress and fromEmailPass.\n+  @Setter private Boolean useIpWhitelist = false;\n+\n+  public boolean sendemail() throws Exception {\n+    logger.debug(\" sendemail() ==== starts\");\n+    boolean sentMail = false;\n+    try {\n+      final String username = this.getFromEmailAddress();\n+      final String password = this.getFromEmailPass();\n+      Properties props = makeProperties(useIpWhitelist);\n+      Session session =\n+          useIpWhitelist ? makeSession(props) : makeSession(props, username, password);\n+      Message message = new MimeMessage(session);\n+      message.setFrom(new InternetAddress(username));\n+      if (StringUtils.isNotBlank(this.getToemail())) {\n+        if (this.getToemail().indexOf(\",\") != -1) {\n+          message.setRecipients(\n+              Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n         } else {\n-            props.put(\"mail.smtp.auth\", \"true\");\n+          message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n         }\n-        return props;\n-    }\n-\n-    private Session makeSession(Properties props) {\n-        return Session.getInstance(props, null);\n-    }\n-\n-    private Session makeSession(Properties props, String username,\n-                                String password) {\n-        return Session.getInstance(\n-                props,\n-                new javax.mail.Authenticator() {\n-                    @Override\n-                    protected PasswordAuthentication getPasswordAuthentication() {\n-                        return new PasswordAuthentication(username, password);\n-                    }\n-                });\n-    }\n-\n-    public String getToemail() {\n-        return toemail;\n-    }\n-\n-    public void setToemail(String toemail) {\n-        this.toemail = toemail;\n-    }\n-\n-    public String getSubject() {\n-        return subject;\n-    }\n-\n-    public void setSubject(String subject) {\n-        this.subject = subject;\n-    }\n-\n-    public String getMessageBody() {\n-        return messageBody;\n-    }\n-\n-    public void setMessageBody(String messageBody) {\n-        this.messageBody = messageBody;\n-    }\n-\n-    public String getSmtp_Hostname() {\n-        if (this.smtp_Hostname.equals(\"\")) {\n-            if (useIpWhitelist) {\n-                return Mail.SMTP_RELAY_HOSTNAME;\n-            } else {\n-                return Mail.SMTP_HOSTNAME;\n-            }\n+      }\n+      if (StringUtils.isNotBlank(this.getCcEmail())) {\n+        message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n+      }\n+      if (StringUtils.isNotBlank(this.getBccEmail())) {\n+        message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n+      }\n+      message.setSubject(this.subject);\n+      message.setContent(this.getMessageBody(), \"text/html\");\n+      Transport transport = session.getTransport();\n+      transport.send(message);\n+      logger.debug(\"sendemail()==== ends\");\n+      sentMail = true;\n+    } catch (MessagingException e) {\n+      logger.error(\"sendemail() MessagingException- error\", e);\n+    } catch (Exception e) {\n+      logger.error(\"ERROR:  sendemail() - error( ) \" + e + \" : \");\n+    }\n+    logger.debug(\"Mail.sendemail() :: Ends\");\n+    return sentMail;\n+  }\n+\n+  public boolean sendMailWithAttachment() throws Exception {\n+    logger.debug(\"sendMailWithAttachment()==== start\");\n+    boolean sentMail = false;\n+    try {\n+      final String username = this.getFromEmailAddress();\n+      final String password = this.getFromEmailPass();\n+      Properties props = makeProperties(useIpWhitelist);\n+      Session session =\n+          useIpWhitelist ? makeSession(props) : makeSession(props, username, password);\n+      Message message = new MimeMessage(session);\n+      if (StringUtils.isNotBlank(this.getToemail())) {\n+        if (this.getToemail().indexOf(\",\") != -1) {\n+          message.setRecipients(\n+              Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n         } else {\n-            return this.smtp_Hostname;\n+          message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n         }\n-    }\n+      }\n+      if (StringUtils.isNotBlank(this.getCcEmail())) {\n+        message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n+      }\n+      if (StringUtils.isNotBlank(this.getBccEmail())) {\n+        message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n+      }\n+      message.setSubject(this.subject);\n+      message.setFrom(new InternetAddress(username));\n+      // message.setText(\"Check attachment in Mail\");\n+      // message.setContent(messageBody, \"text/html\");\n+      // Create the message part\n+      BodyPart messageBodyPart = new MimeBodyPart();\n+      // Create a multipar message\n+      Multipart multipart = new MimeMultipart();\n+      // Part two is attachment\n+      messageBodyPart = new MimeBodyPart();\n+      // String filename = \"D:\\\\temp\\\\TestLinks.pdf\"; // D:\\temp\\noteb.txt\n+      DataSource source = new FileDataSource(this.getAttachmentPath());\n+      messageBodyPart.setDataHandler(new DataHandler(source));\n+      messageBodyPart.setFileName(source.getName());\n+      messageBodyPart.setHeader(\"Content-Transfer-Encoding\", \"base64\");\n+      messageBodyPart.setHeader(\"Content-Type\", source.getContentType());\n+      // Send the complete message parts\n+      multipart.addBodyPart(messageBodyPart);\n+\n+      messageBodyPart = new MimeBodyPart();\n+      messageBodyPart.setText(messageBody);\n+      messageBodyPart.setHeader(\"MIME-Version\", \"1.0\");\n+      messageBodyPart.setHeader(\"Content-Type\", messageBodyPart.getContentType());\n+      multipart.addBodyPart(messageBodyPart);\n+\n+      message.setContent(multipart);\n+      Transport.send(message);\n+      sentMail = true;\n+    } catch (MessagingException e) {\n+      logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n+      sentMail = false;\n+    } catch (Exception e) {\n+      logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n+    }\n+    logger.debug(\"Mail.sendMailWithAttachment() :: Ends\");\n+    return sentMail;\n+  }\n+\n+  // Constructs a Propterties either relying on IP Whitelist on the SMTP\n+  // service or on authentication with email and password.\n+  private Properties makeProperties(Boolean useIpWhitelist) {\n+    Properties props = new Properties();\n+    props.put(\"mail.smtp.host\", this.getSmtp_Hostname());\n+    props.put(\"mail.smtp.port\", this.getSmtp_portvalue());\n+    props.put(\"mail.smtp.socketFactory.class\", this.getSslFactory());\n+    props.put(\"mail.smtp.socketFactory.port\", this.getSmtp_portvalue());\n+    if (useIpWhitelist) {\n+      props.put(\"mail.smtp.auth\", \"false\");\n+      props.put(\"mail.smtp.ssl.enable\", \"true\");\n+      props.put(\"mail.smtp.localhost\", fromDomain);\n+    } else {\n+      props.put(\"mail.smtp.auth\", \"true\");\n+    }\n+    return props;\n+  }\n+\n+  private Session makeSession(Properties props) {\n+    return Session.getInstance(props, null);\n+  }\n+\n+  private Session makeSession(Properties props, String username, String password) {\n+    return Session.getInstance(\n+        props,\n+        new javax.mail.Authenticator() {\n+          @Override\n+          protected PasswordAuthentication getPasswordAuthentication() {\n+            return new PasswordAuthentication(username, password);\n+          }\n+        });\n+  }\n+\n+  public String getToemail() {\n+    return toemail;\n+  }\n+\n+  public void setToemail(String toemail) {\n+    this.toemail = toemail;\n+  }\n+\n+  public String getSubject() {\n+    return subject;\n+  }\n+\n+  public void setSubject(String subject) {\n+    this.subject = subject;\n+  }\n+\n+  public String getMessageBody() {\n+    return messageBody;\n+  }\n+\n+  public void setMessageBody(String messageBody) {\n+    this.messageBody = messageBody;\n+  }\n+\n+  public String getSmtp_Hostname() {\n+    if (this.smtp_Hostname.equals(\"\")) {\n+      if (useIpWhitelist) {\n+        return Mail.SMTP_RELAY_HOSTNAME;\n+      } else {\n+        return Mail.SMTP_HOSTNAME;\n+      }\n+    } else {\n+      return this.smtp_Hostname;\n+    }\n+  }\n+\n+  public void setSmtp_Hostname(String smtp_Hostname) {\n+    this.smtp_Hostname = smtp_Hostname;\n+  }\n+\n+  public String getSmtp_portvalue() {\n+    String portvalue = \"\";\n+    if (this.smtp_portvalue.equals(\"\")) {\n+      portvalue = Mail.SMTP_PORT;\n+    } else {\n+      portvalue = this.smtp_portvalue;\n+    }\n+\n+    return portvalue;\n+  }\n+\n+  public void setSmtp_portvalue(String smtp_portvalue) {\n+    this.smtp_portvalue = smtp_portvalue;\n+  }\n+\n+  public static String getSSL_FACTORY() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1275b0d755dc41d7df75133eab56d82eed9cb5e1"}, "originalPosition": 427}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzQzMDk1OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/Mail.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxOFrOG77uiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxOFrOG77uiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ5NzczOQ==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nAbbreviation in name 'setSSL_FACTORY' must contain no more than '2' consecutive capital letters.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465497739", "createdAt": "2020-08-05T06:18:18Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/Mail.java", "diffHunk": "@@ -23,308 +23,304 @@\n import javax.mail.internet.MimeBodyPart;\n import javax.mail.internet.MimeMessage;\n import javax.mail.internet.MimeMultipart;\n-\n import lombok.Setter;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n \n public class Mail {\n \n-    private static final Logger logger = LogManager.getLogger(Mail.class);\n-\n-    private String toemail;\n-    private String subject;\n-    private String messageBody;\n-    // Fallback hostname if we are authenticating.\n-    private static final String SMTP_HOSTNAME = \"smtp.gmail.com\";\n-    // Fallback hostname if we are not authenticating.\n-    private static final String SMTP_RELAY_HOSTNAME = \"smtp-relay.gmail.com\";\n-    private static final String SMTP_PORT = \"465\";\n-    private String smtp_Hostname = \"\";\n-    private String smtp_portvalue = \"\";\n-    static String SSL_FACTORY = \"javax.net.ssl.SSLSocketFactory\";\n-    private String sslFactory = \"\";\n-    private String fromEmailAddress = \"\";\n-    private String fromEmailPass = \"\";\n-    private String fromEmailName = \"\";\n-    private String ccEmail;\n-    private String bccEmail;\n-    private String attachmentPath;\n-    // Domain that we send in the EHLO request if we are not authenticating\n-    // with the SMTP server.\n-    @Setter\n-    private String fromDomain = \"\";\n-    // If set to true, we will not authenticate with the SMTP service and\n-    // rather rely on the SMTP service's configured IP whitelist. If false we\n-    // will authenticate with the provided fromEmailAddress and fromEmailPass.\n-    @Setter\n-    private Boolean useIpWhitelist = false;\n-\n-    public boolean sendemail() throws Exception {\n-        logger.debug(\" sendemail() ==== starts\");\n-        boolean sentMail = false;\n-        try {\n-            final String username = this.getFromEmailAddress();\n-            final String password = this.getFromEmailPass();\n-            Properties props = makeProperties(useIpWhitelist);\n-            Session session = useIpWhitelist ? makeSession(props) :\n-                    makeSession(props, username, password);\n-            Message message = new MimeMessage(session);\n-            message.setFrom(new InternetAddress(username));\n-            if (StringUtils.isNotBlank(this.getToemail())) {\n-                if (this.getToemail().indexOf(\",\") != -1) {\n-                    message.setRecipients(\n-                            Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n-                } else {\n-                    message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n-                }\n-            }\n-            if (StringUtils.isNotBlank(this.getCcEmail())) {\n-                message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n-            }\n-            if (StringUtils.isNotBlank(this.getBccEmail())) {\n-                message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n-            }\n-            message.setSubject(this.subject);\n-            message.setContent(this.getMessageBody(), \"text/html\");\n-            Transport transport = session.getTransport();\n-            transport.send(message);\n-            logger.debug(\"sendemail()==== ends\");\n-            sentMail = true;\n-        } catch (MessagingException e) {\n-            logger.error(\"sendemail() MessagingException- error\", e);\n-        } catch (Exception e) {\n-            logger.error(\"ERROR:  sendemail() - error( ) \" + e + \" : \");\n-        }\n-        logger.debug(\"Mail.sendemail() :: Ends\");\n-        return sentMail;\n-    }\n-\n-    public boolean sendMailWithAttachment() throws Exception {\n-        logger.debug(\"sendMailWithAttachment()==== start\");\n-        boolean sentMail = false;\n-        try {\n-            final String username = this.getFromEmailAddress();\n-            final String password = this.getFromEmailPass();\n-            Properties props = makeProperties(useIpWhitelist);\n-            Session session = useIpWhitelist ? makeSession(props) :\n-                    makeSession(props, username, password);\n-            Message message = new MimeMessage(session);\n-            if (StringUtils.isNotBlank(this.getToemail())) {\n-                if (this.getToemail().indexOf(\",\") != -1) {\n-                    message.setRecipients(\n-                            Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n-                } else {\n-                    message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n-                }\n-            }\n-            if (StringUtils.isNotBlank(this.getCcEmail())) {\n-                message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n-            }\n-            if (StringUtils.isNotBlank(this.getBccEmail())) {\n-                message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n-            }\n-            message.setSubject(this.subject);\n-            message.setFrom(new InternetAddress(username));\n-            // message.setText(\"Check attachment in Mail\");\n-            // message.setContent(messageBody, \"text/html\");\n-            // Create the message part\n-            BodyPart messageBodyPart = new MimeBodyPart();\n-            // Create a multipar message\n-            Multipart multipart = new MimeMultipart();\n-            // Part two is attachment\n-            messageBodyPart = new MimeBodyPart();\n-            // String filename = \"D:\\\\temp\\\\TestLinks.pdf\"; // D:\\temp\\noteb.txt\n-            DataSource source = new FileDataSource(this.getAttachmentPath());\n-            messageBodyPart.setDataHandler(new DataHandler(source));\n-            messageBodyPart.setFileName(source.getName());\n-            messageBodyPart.setHeader(\"Content-Transfer-Encoding\", \"base64\");\n-            messageBodyPart.setHeader(\"Content-Type\", source.getContentType());\n-            // Send the complete message parts\n-            multipart.addBodyPart(messageBodyPart);\n-\n-            messageBodyPart = new MimeBodyPart();\n-            messageBodyPart.setText(messageBody);\n-            messageBodyPart.setHeader(\"MIME-Version\", \"1.0\");\n-            messageBodyPart.setHeader(\"Content-Type\", messageBodyPart.getContentType());\n-            multipart.addBodyPart(messageBodyPart);\n-\n-            message.setContent(multipart);\n-            Transport.send(message);\n-            sentMail = true;\n-        } catch (MessagingException e) {\n-            logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n-            sentMail = false;\n-        } catch (Exception e) {\n-            logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n-        }\n-        logger.debug(\"Mail.sendMailWithAttachment() :: Ends\");\n-        return sentMail;\n-    }\n-\n-    // Constructs a Propterties either relying on IP Whitelist on the SMTP\n-    // service or on authentication with email and password.\n-    private Properties makeProperties(Boolean useIpWhitelist) {\n-        Properties props = new Properties();\n-        props.put(\"mail.smtp.host\", this.getSmtp_Hostname());\n-        props.put(\"mail.smtp.port\", this.getSmtp_portvalue());\n-        props.put(\"mail.smtp.socketFactory.class\", this.getSslFactory());\n-        props.put(\"mail.smtp.socketFactory.port\", this.getSmtp_portvalue());\n-        if (useIpWhitelist) {\n-            props.put(\"mail.smtp.auth\", \"false\");\n-            props.put(\"mail.smtp.ssl.enable\", \"true\");\n-            props.put(\"mail.smtp.localhost\", fromDomain);\n+  private static final Logger logger = LogManager.getLogger(Mail.class);\n+\n+  private String toemail;\n+  private String subject;\n+  private String messageBody;\n+  // Fallback hostname if we are authenticating.\n+  private static final String SMTP_HOSTNAME = \"smtp.gmail.com\";\n+  // Fallback hostname if we are not authenticating.\n+  private static final String SMTP_RELAY_HOSTNAME = \"smtp-relay.gmail.com\";\n+  private static final String SMTP_PORT = \"465\";\n+  private String smtp_Hostname = \"\";\n+  private String smtp_portvalue = \"\";\n+  static String SSL_FACTORY = \"javax.net.ssl.SSLSocketFactory\";\n+  private String sslFactory = \"\";\n+  private String fromEmailAddress = \"\";\n+  private String fromEmailPass = \"\";\n+  private String fromEmailName = \"\";\n+  private String ccEmail;\n+  private String bccEmail;\n+  private String attachmentPath;\n+  // Domain that we send in the EHLO request if we are not authenticating\n+  // with the SMTP server.\n+  @Setter private String fromDomain = \"\";\n+  // If set to true, we will not authenticate with the SMTP service and\n+  // rather rely on the SMTP service's configured IP whitelist. If false we\n+  // will authenticate with the provided fromEmailAddress and fromEmailPass.\n+  @Setter private Boolean useIpWhitelist = false;\n+\n+  public boolean sendemail() throws Exception {\n+    logger.debug(\" sendemail() ==== starts\");\n+    boolean sentMail = false;\n+    try {\n+      final String username = this.getFromEmailAddress();\n+      final String password = this.getFromEmailPass();\n+      Properties props = makeProperties(useIpWhitelist);\n+      Session session =\n+          useIpWhitelist ? makeSession(props) : makeSession(props, username, password);\n+      Message message = new MimeMessage(session);\n+      message.setFrom(new InternetAddress(username));\n+      if (StringUtils.isNotBlank(this.getToemail())) {\n+        if (this.getToemail().indexOf(\",\") != -1) {\n+          message.setRecipients(\n+              Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n         } else {\n-            props.put(\"mail.smtp.auth\", \"true\");\n+          message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n         }\n-        return props;\n-    }\n-\n-    private Session makeSession(Properties props) {\n-        return Session.getInstance(props, null);\n-    }\n-\n-    private Session makeSession(Properties props, String username,\n-                                String password) {\n-        return Session.getInstance(\n-                props,\n-                new javax.mail.Authenticator() {\n-                    @Override\n-                    protected PasswordAuthentication getPasswordAuthentication() {\n-                        return new PasswordAuthentication(username, password);\n-                    }\n-                });\n-    }\n-\n-    public String getToemail() {\n-        return toemail;\n-    }\n-\n-    public void setToemail(String toemail) {\n-        this.toemail = toemail;\n-    }\n-\n-    public String getSubject() {\n-        return subject;\n-    }\n-\n-    public void setSubject(String subject) {\n-        this.subject = subject;\n-    }\n-\n-    public String getMessageBody() {\n-        return messageBody;\n-    }\n-\n-    public void setMessageBody(String messageBody) {\n-        this.messageBody = messageBody;\n-    }\n-\n-    public String getSmtp_Hostname() {\n-        if (this.smtp_Hostname.equals(\"\")) {\n-            if (useIpWhitelist) {\n-                return Mail.SMTP_RELAY_HOSTNAME;\n-            } else {\n-                return Mail.SMTP_HOSTNAME;\n-            }\n+      }\n+      if (StringUtils.isNotBlank(this.getCcEmail())) {\n+        message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n+      }\n+      if (StringUtils.isNotBlank(this.getBccEmail())) {\n+        message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n+      }\n+      message.setSubject(this.subject);\n+      message.setContent(this.getMessageBody(), \"text/html\");\n+      Transport transport = session.getTransport();\n+      transport.send(message);\n+      logger.debug(\"sendemail()==== ends\");\n+      sentMail = true;\n+    } catch (MessagingException e) {\n+      logger.error(\"sendemail() MessagingException- error\", e);\n+    } catch (Exception e) {\n+      logger.error(\"ERROR:  sendemail() - error( ) \" + e + \" : \");\n+    }\n+    logger.debug(\"Mail.sendemail() :: Ends\");\n+    return sentMail;\n+  }\n+\n+  public boolean sendMailWithAttachment() throws Exception {\n+    logger.debug(\"sendMailWithAttachment()==== start\");\n+    boolean sentMail = false;\n+    try {\n+      final String username = this.getFromEmailAddress();\n+      final String password = this.getFromEmailPass();\n+      Properties props = makeProperties(useIpWhitelist);\n+      Session session =\n+          useIpWhitelist ? makeSession(props) : makeSession(props, username, password);\n+      Message message = new MimeMessage(session);\n+      if (StringUtils.isNotBlank(this.getToemail())) {\n+        if (this.getToemail().indexOf(\",\") != -1) {\n+          message.setRecipients(\n+              Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n         } else {\n-            return this.smtp_Hostname;\n+          message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n         }\n-    }\n+      }\n+      if (StringUtils.isNotBlank(this.getCcEmail())) {\n+        message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n+      }\n+      if (StringUtils.isNotBlank(this.getBccEmail())) {\n+        message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n+      }\n+      message.setSubject(this.subject);\n+      message.setFrom(new InternetAddress(username));\n+      // message.setText(\"Check attachment in Mail\");\n+      // message.setContent(messageBody, \"text/html\");\n+      // Create the message part\n+      BodyPart messageBodyPart = new MimeBodyPart();\n+      // Create a multipar message\n+      Multipart multipart = new MimeMultipart();\n+      // Part two is attachment\n+      messageBodyPart = new MimeBodyPart();\n+      // String filename = \"D:\\\\temp\\\\TestLinks.pdf\"; // D:\\temp\\noteb.txt\n+      DataSource source = new FileDataSource(this.getAttachmentPath());\n+      messageBodyPart.setDataHandler(new DataHandler(source));\n+      messageBodyPart.setFileName(source.getName());\n+      messageBodyPart.setHeader(\"Content-Transfer-Encoding\", \"base64\");\n+      messageBodyPart.setHeader(\"Content-Type\", source.getContentType());\n+      // Send the complete message parts\n+      multipart.addBodyPart(messageBodyPart);\n+\n+      messageBodyPart = new MimeBodyPart();\n+      messageBodyPart.setText(messageBody);\n+      messageBodyPart.setHeader(\"MIME-Version\", \"1.0\");\n+      messageBodyPart.setHeader(\"Content-Type\", messageBodyPart.getContentType());\n+      multipart.addBodyPart(messageBodyPart);\n+\n+      message.setContent(multipart);\n+      Transport.send(message);\n+      sentMail = true;\n+    } catch (MessagingException e) {\n+      logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n+      sentMail = false;\n+    } catch (Exception e) {\n+      logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n+    }\n+    logger.debug(\"Mail.sendMailWithAttachment() :: Ends\");\n+    return sentMail;\n+  }\n+\n+  // Constructs a Propterties either relying on IP Whitelist on the SMTP\n+  // service or on authentication with email and password.\n+  private Properties makeProperties(Boolean useIpWhitelist) {\n+    Properties props = new Properties();\n+    props.put(\"mail.smtp.host\", this.getSmtp_Hostname());\n+    props.put(\"mail.smtp.port\", this.getSmtp_portvalue());\n+    props.put(\"mail.smtp.socketFactory.class\", this.getSslFactory());\n+    props.put(\"mail.smtp.socketFactory.port\", this.getSmtp_portvalue());\n+    if (useIpWhitelist) {\n+      props.put(\"mail.smtp.auth\", \"false\");\n+      props.put(\"mail.smtp.ssl.enable\", \"true\");\n+      props.put(\"mail.smtp.localhost\", fromDomain);\n+    } else {\n+      props.put(\"mail.smtp.auth\", \"true\");\n+    }\n+    return props;\n+  }\n+\n+  private Session makeSession(Properties props) {\n+    return Session.getInstance(props, null);\n+  }\n+\n+  private Session makeSession(Properties props, String username, String password) {\n+    return Session.getInstance(\n+        props,\n+        new javax.mail.Authenticator() {\n+          @Override\n+          protected PasswordAuthentication getPasswordAuthentication() {\n+            return new PasswordAuthentication(username, password);\n+          }\n+        });\n+  }\n+\n+  public String getToemail() {\n+    return toemail;\n+  }\n+\n+  public void setToemail(String toemail) {\n+    this.toemail = toemail;\n+  }\n+\n+  public String getSubject() {\n+    return subject;\n+  }\n+\n+  public void setSubject(String subject) {\n+    this.subject = subject;\n+  }\n+\n+  public String getMessageBody() {\n+    return messageBody;\n+  }\n+\n+  public void setMessageBody(String messageBody) {\n+    this.messageBody = messageBody;\n+  }\n+\n+  public String getSmtp_Hostname() {\n+    if (this.smtp_Hostname.equals(\"\")) {\n+      if (useIpWhitelist) {\n+        return Mail.SMTP_RELAY_HOSTNAME;\n+      } else {\n+        return Mail.SMTP_HOSTNAME;\n+      }\n+    } else {\n+      return this.smtp_Hostname;\n+    }\n+  }\n+\n+  public void setSmtp_Hostname(String smtp_Hostname) {\n+    this.smtp_Hostname = smtp_Hostname;\n+  }\n+\n+  public String getSmtp_portvalue() {\n+    String portvalue = \"\";\n+    if (this.smtp_portvalue.equals(\"\")) {\n+      portvalue = Mail.SMTP_PORT;\n+    } else {\n+      portvalue = this.smtp_portvalue;\n+    }\n+\n+    return portvalue;\n+  }\n+\n+  public void setSmtp_portvalue(String smtp_portvalue) {\n+    this.smtp_portvalue = smtp_portvalue;\n+  }\n+\n+  public static String getSSL_FACTORY() {\n+    return SSL_FACTORY;\n+  }\n+\n+  public static void setSSL_FACTORY(String sSL_FACTORY) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1275b0d755dc41d7df75133eab56d82eed9cb5e1"}, "originalPosition": 431}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzQzMDk2OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/Mail.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxOFrOG77ujA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxOFrOG77ujA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ5Nzc0MA==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nAbbreviation in name 'sSL_FACTORY' must contain no more than '2' consecutive capital letters.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465497740", "createdAt": "2020-08-05T06:18:18Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/Mail.java", "diffHunk": "@@ -23,308 +23,304 @@\n import javax.mail.internet.MimeBodyPart;\n import javax.mail.internet.MimeMessage;\n import javax.mail.internet.MimeMultipart;\n-\n import lombok.Setter;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n \n public class Mail {\n \n-    private static final Logger logger = LogManager.getLogger(Mail.class);\n-\n-    private String toemail;\n-    private String subject;\n-    private String messageBody;\n-    // Fallback hostname if we are authenticating.\n-    private static final String SMTP_HOSTNAME = \"smtp.gmail.com\";\n-    // Fallback hostname if we are not authenticating.\n-    private static final String SMTP_RELAY_HOSTNAME = \"smtp-relay.gmail.com\";\n-    private static final String SMTP_PORT = \"465\";\n-    private String smtp_Hostname = \"\";\n-    private String smtp_portvalue = \"\";\n-    static String SSL_FACTORY = \"javax.net.ssl.SSLSocketFactory\";\n-    private String sslFactory = \"\";\n-    private String fromEmailAddress = \"\";\n-    private String fromEmailPass = \"\";\n-    private String fromEmailName = \"\";\n-    private String ccEmail;\n-    private String bccEmail;\n-    private String attachmentPath;\n-    // Domain that we send in the EHLO request if we are not authenticating\n-    // with the SMTP server.\n-    @Setter\n-    private String fromDomain = \"\";\n-    // If set to true, we will not authenticate with the SMTP service and\n-    // rather rely on the SMTP service's configured IP whitelist. If false we\n-    // will authenticate with the provided fromEmailAddress and fromEmailPass.\n-    @Setter\n-    private Boolean useIpWhitelist = false;\n-\n-    public boolean sendemail() throws Exception {\n-        logger.debug(\" sendemail() ==== starts\");\n-        boolean sentMail = false;\n-        try {\n-            final String username = this.getFromEmailAddress();\n-            final String password = this.getFromEmailPass();\n-            Properties props = makeProperties(useIpWhitelist);\n-            Session session = useIpWhitelist ? makeSession(props) :\n-                    makeSession(props, username, password);\n-            Message message = new MimeMessage(session);\n-            message.setFrom(new InternetAddress(username));\n-            if (StringUtils.isNotBlank(this.getToemail())) {\n-                if (this.getToemail().indexOf(\",\") != -1) {\n-                    message.setRecipients(\n-                            Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n-                } else {\n-                    message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n-                }\n-            }\n-            if (StringUtils.isNotBlank(this.getCcEmail())) {\n-                message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n-            }\n-            if (StringUtils.isNotBlank(this.getBccEmail())) {\n-                message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n-            }\n-            message.setSubject(this.subject);\n-            message.setContent(this.getMessageBody(), \"text/html\");\n-            Transport transport = session.getTransport();\n-            transport.send(message);\n-            logger.debug(\"sendemail()==== ends\");\n-            sentMail = true;\n-        } catch (MessagingException e) {\n-            logger.error(\"sendemail() MessagingException- error\", e);\n-        } catch (Exception e) {\n-            logger.error(\"ERROR:  sendemail() - error( ) \" + e + \" : \");\n-        }\n-        logger.debug(\"Mail.sendemail() :: Ends\");\n-        return sentMail;\n-    }\n-\n-    public boolean sendMailWithAttachment() throws Exception {\n-        logger.debug(\"sendMailWithAttachment()==== start\");\n-        boolean sentMail = false;\n-        try {\n-            final String username = this.getFromEmailAddress();\n-            final String password = this.getFromEmailPass();\n-            Properties props = makeProperties(useIpWhitelist);\n-            Session session = useIpWhitelist ? makeSession(props) :\n-                    makeSession(props, username, password);\n-            Message message = new MimeMessage(session);\n-            if (StringUtils.isNotBlank(this.getToemail())) {\n-                if (this.getToemail().indexOf(\",\") != -1) {\n-                    message.setRecipients(\n-                            Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n-                } else {\n-                    message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n-                }\n-            }\n-            if (StringUtils.isNotBlank(this.getCcEmail())) {\n-                message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n-            }\n-            if (StringUtils.isNotBlank(this.getBccEmail())) {\n-                message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n-            }\n-            message.setSubject(this.subject);\n-            message.setFrom(new InternetAddress(username));\n-            // message.setText(\"Check attachment in Mail\");\n-            // message.setContent(messageBody, \"text/html\");\n-            // Create the message part\n-            BodyPart messageBodyPart = new MimeBodyPart();\n-            // Create a multipar message\n-            Multipart multipart = new MimeMultipart();\n-            // Part two is attachment\n-            messageBodyPart = new MimeBodyPart();\n-            // String filename = \"D:\\\\temp\\\\TestLinks.pdf\"; // D:\\temp\\noteb.txt\n-            DataSource source = new FileDataSource(this.getAttachmentPath());\n-            messageBodyPart.setDataHandler(new DataHandler(source));\n-            messageBodyPart.setFileName(source.getName());\n-            messageBodyPart.setHeader(\"Content-Transfer-Encoding\", \"base64\");\n-            messageBodyPart.setHeader(\"Content-Type\", source.getContentType());\n-            // Send the complete message parts\n-            multipart.addBodyPart(messageBodyPart);\n-\n-            messageBodyPart = new MimeBodyPart();\n-            messageBodyPart.setText(messageBody);\n-            messageBodyPart.setHeader(\"MIME-Version\", \"1.0\");\n-            messageBodyPart.setHeader(\"Content-Type\", messageBodyPart.getContentType());\n-            multipart.addBodyPart(messageBodyPart);\n-\n-            message.setContent(multipart);\n-            Transport.send(message);\n-            sentMail = true;\n-        } catch (MessagingException e) {\n-            logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n-            sentMail = false;\n-        } catch (Exception e) {\n-            logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n-        }\n-        logger.debug(\"Mail.sendMailWithAttachment() :: Ends\");\n-        return sentMail;\n-    }\n-\n-    // Constructs a Propterties either relying on IP Whitelist on the SMTP\n-    // service or on authentication with email and password.\n-    private Properties makeProperties(Boolean useIpWhitelist) {\n-        Properties props = new Properties();\n-        props.put(\"mail.smtp.host\", this.getSmtp_Hostname());\n-        props.put(\"mail.smtp.port\", this.getSmtp_portvalue());\n-        props.put(\"mail.smtp.socketFactory.class\", this.getSslFactory());\n-        props.put(\"mail.smtp.socketFactory.port\", this.getSmtp_portvalue());\n-        if (useIpWhitelist) {\n-            props.put(\"mail.smtp.auth\", \"false\");\n-            props.put(\"mail.smtp.ssl.enable\", \"true\");\n-            props.put(\"mail.smtp.localhost\", fromDomain);\n+  private static final Logger logger = LogManager.getLogger(Mail.class);\n+\n+  private String toemail;\n+  private String subject;\n+  private String messageBody;\n+  // Fallback hostname if we are authenticating.\n+  private static final String SMTP_HOSTNAME = \"smtp.gmail.com\";\n+  // Fallback hostname if we are not authenticating.\n+  private static final String SMTP_RELAY_HOSTNAME = \"smtp-relay.gmail.com\";\n+  private static final String SMTP_PORT = \"465\";\n+  private String smtp_Hostname = \"\";\n+  private String smtp_portvalue = \"\";\n+  static String SSL_FACTORY = \"javax.net.ssl.SSLSocketFactory\";\n+  private String sslFactory = \"\";\n+  private String fromEmailAddress = \"\";\n+  private String fromEmailPass = \"\";\n+  private String fromEmailName = \"\";\n+  private String ccEmail;\n+  private String bccEmail;\n+  private String attachmentPath;\n+  // Domain that we send in the EHLO request if we are not authenticating\n+  // with the SMTP server.\n+  @Setter private String fromDomain = \"\";\n+  // If set to true, we will not authenticate with the SMTP service and\n+  // rather rely on the SMTP service's configured IP whitelist. If false we\n+  // will authenticate with the provided fromEmailAddress and fromEmailPass.\n+  @Setter private Boolean useIpWhitelist = false;\n+\n+  public boolean sendemail() throws Exception {\n+    logger.debug(\" sendemail() ==== starts\");\n+    boolean sentMail = false;\n+    try {\n+      final String username = this.getFromEmailAddress();\n+      final String password = this.getFromEmailPass();\n+      Properties props = makeProperties(useIpWhitelist);\n+      Session session =\n+          useIpWhitelist ? makeSession(props) : makeSession(props, username, password);\n+      Message message = new MimeMessage(session);\n+      message.setFrom(new InternetAddress(username));\n+      if (StringUtils.isNotBlank(this.getToemail())) {\n+        if (this.getToemail().indexOf(\",\") != -1) {\n+          message.setRecipients(\n+              Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n         } else {\n-            props.put(\"mail.smtp.auth\", \"true\");\n+          message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n         }\n-        return props;\n-    }\n-\n-    private Session makeSession(Properties props) {\n-        return Session.getInstance(props, null);\n-    }\n-\n-    private Session makeSession(Properties props, String username,\n-                                String password) {\n-        return Session.getInstance(\n-                props,\n-                new javax.mail.Authenticator() {\n-                    @Override\n-                    protected PasswordAuthentication getPasswordAuthentication() {\n-                        return new PasswordAuthentication(username, password);\n-                    }\n-                });\n-    }\n-\n-    public String getToemail() {\n-        return toemail;\n-    }\n-\n-    public void setToemail(String toemail) {\n-        this.toemail = toemail;\n-    }\n-\n-    public String getSubject() {\n-        return subject;\n-    }\n-\n-    public void setSubject(String subject) {\n-        this.subject = subject;\n-    }\n-\n-    public String getMessageBody() {\n-        return messageBody;\n-    }\n-\n-    public void setMessageBody(String messageBody) {\n-        this.messageBody = messageBody;\n-    }\n-\n-    public String getSmtp_Hostname() {\n-        if (this.smtp_Hostname.equals(\"\")) {\n-            if (useIpWhitelist) {\n-                return Mail.SMTP_RELAY_HOSTNAME;\n-            } else {\n-                return Mail.SMTP_HOSTNAME;\n-            }\n+      }\n+      if (StringUtils.isNotBlank(this.getCcEmail())) {\n+        message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n+      }\n+      if (StringUtils.isNotBlank(this.getBccEmail())) {\n+        message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n+      }\n+      message.setSubject(this.subject);\n+      message.setContent(this.getMessageBody(), \"text/html\");\n+      Transport transport = session.getTransport();\n+      transport.send(message);\n+      logger.debug(\"sendemail()==== ends\");\n+      sentMail = true;\n+    } catch (MessagingException e) {\n+      logger.error(\"sendemail() MessagingException- error\", e);\n+    } catch (Exception e) {\n+      logger.error(\"ERROR:  sendemail() - error( ) \" + e + \" : \");\n+    }\n+    logger.debug(\"Mail.sendemail() :: Ends\");\n+    return sentMail;\n+  }\n+\n+  public boolean sendMailWithAttachment() throws Exception {\n+    logger.debug(\"sendMailWithAttachment()==== start\");\n+    boolean sentMail = false;\n+    try {\n+      final String username = this.getFromEmailAddress();\n+      final String password = this.getFromEmailPass();\n+      Properties props = makeProperties(useIpWhitelist);\n+      Session session =\n+          useIpWhitelist ? makeSession(props) : makeSession(props, username, password);\n+      Message message = new MimeMessage(session);\n+      if (StringUtils.isNotBlank(this.getToemail())) {\n+        if (this.getToemail().indexOf(\",\") != -1) {\n+          message.setRecipients(\n+              Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n         } else {\n-            return this.smtp_Hostname;\n+          message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n         }\n-    }\n+      }\n+      if (StringUtils.isNotBlank(this.getCcEmail())) {\n+        message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n+      }\n+      if (StringUtils.isNotBlank(this.getBccEmail())) {\n+        message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n+      }\n+      message.setSubject(this.subject);\n+      message.setFrom(new InternetAddress(username));\n+      // message.setText(\"Check attachment in Mail\");\n+      // message.setContent(messageBody, \"text/html\");\n+      // Create the message part\n+      BodyPart messageBodyPart = new MimeBodyPart();\n+      // Create a multipar message\n+      Multipart multipart = new MimeMultipart();\n+      // Part two is attachment\n+      messageBodyPart = new MimeBodyPart();\n+      // String filename = \"D:\\\\temp\\\\TestLinks.pdf\"; // D:\\temp\\noteb.txt\n+      DataSource source = new FileDataSource(this.getAttachmentPath());\n+      messageBodyPart.setDataHandler(new DataHandler(source));\n+      messageBodyPart.setFileName(source.getName());\n+      messageBodyPart.setHeader(\"Content-Transfer-Encoding\", \"base64\");\n+      messageBodyPart.setHeader(\"Content-Type\", source.getContentType());\n+      // Send the complete message parts\n+      multipart.addBodyPart(messageBodyPart);\n+\n+      messageBodyPart = new MimeBodyPart();\n+      messageBodyPart.setText(messageBody);\n+      messageBodyPart.setHeader(\"MIME-Version\", \"1.0\");\n+      messageBodyPart.setHeader(\"Content-Type\", messageBodyPart.getContentType());\n+      multipart.addBodyPart(messageBodyPart);\n+\n+      message.setContent(multipart);\n+      Transport.send(message);\n+      sentMail = true;\n+    } catch (MessagingException e) {\n+      logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n+      sentMail = false;\n+    } catch (Exception e) {\n+      logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n+    }\n+    logger.debug(\"Mail.sendMailWithAttachment() :: Ends\");\n+    return sentMail;\n+  }\n+\n+  // Constructs a Propterties either relying on IP Whitelist on the SMTP\n+  // service or on authentication with email and password.\n+  private Properties makeProperties(Boolean useIpWhitelist) {\n+    Properties props = new Properties();\n+    props.put(\"mail.smtp.host\", this.getSmtp_Hostname());\n+    props.put(\"mail.smtp.port\", this.getSmtp_portvalue());\n+    props.put(\"mail.smtp.socketFactory.class\", this.getSslFactory());\n+    props.put(\"mail.smtp.socketFactory.port\", this.getSmtp_portvalue());\n+    if (useIpWhitelist) {\n+      props.put(\"mail.smtp.auth\", \"false\");\n+      props.put(\"mail.smtp.ssl.enable\", \"true\");\n+      props.put(\"mail.smtp.localhost\", fromDomain);\n+    } else {\n+      props.put(\"mail.smtp.auth\", \"true\");\n+    }\n+    return props;\n+  }\n+\n+  private Session makeSession(Properties props) {\n+    return Session.getInstance(props, null);\n+  }\n+\n+  private Session makeSession(Properties props, String username, String password) {\n+    return Session.getInstance(\n+        props,\n+        new javax.mail.Authenticator() {\n+          @Override\n+          protected PasswordAuthentication getPasswordAuthentication() {\n+            return new PasswordAuthentication(username, password);\n+          }\n+        });\n+  }\n+\n+  public String getToemail() {\n+    return toemail;\n+  }\n+\n+  public void setToemail(String toemail) {\n+    this.toemail = toemail;\n+  }\n+\n+  public String getSubject() {\n+    return subject;\n+  }\n+\n+  public void setSubject(String subject) {\n+    this.subject = subject;\n+  }\n+\n+  public String getMessageBody() {\n+    return messageBody;\n+  }\n+\n+  public void setMessageBody(String messageBody) {\n+    this.messageBody = messageBody;\n+  }\n+\n+  public String getSmtp_Hostname() {\n+    if (this.smtp_Hostname.equals(\"\")) {\n+      if (useIpWhitelist) {\n+        return Mail.SMTP_RELAY_HOSTNAME;\n+      } else {\n+        return Mail.SMTP_HOSTNAME;\n+      }\n+    } else {\n+      return this.smtp_Hostname;\n+    }\n+  }\n+\n+  public void setSmtp_Hostname(String smtp_Hostname) {\n+    this.smtp_Hostname = smtp_Hostname;\n+  }\n+\n+  public String getSmtp_portvalue() {\n+    String portvalue = \"\";\n+    if (this.smtp_portvalue.equals(\"\")) {\n+      portvalue = Mail.SMTP_PORT;\n+    } else {\n+      portvalue = this.smtp_portvalue;\n+    }\n+\n+    return portvalue;\n+  }\n+\n+  public void setSmtp_portvalue(String smtp_portvalue) {\n+    this.smtp_portvalue = smtp_portvalue;\n+  }\n+\n+  public static String getSSL_FACTORY() {\n+    return SSL_FACTORY;\n+  }\n+\n+  public static void setSSL_FACTORY(String sSL_FACTORY) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1275b0d755dc41d7df75133eab56d82eed9cb5e1"}, "originalPosition": 431}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzQzMDk4OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/Mail.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxOFrOG77ujw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxOFrOG77ujw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ5Nzc0Mw==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nParameter name 'sSL_FACTORY' must match pattern '^a-z?$'.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465497743", "createdAt": "2020-08-05T06:18:18Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/Mail.java", "diffHunk": "@@ -23,308 +23,304 @@\n import javax.mail.internet.MimeBodyPart;\n import javax.mail.internet.MimeMessage;\n import javax.mail.internet.MimeMultipart;\n-\n import lombok.Setter;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n \n public class Mail {\n \n-    private static final Logger logger = LogManager.getLogger(Mail.class);\n-\n-    private String toemail;\n-    private String subject;\n-    private String messageBody;\n-    // Fallback hostname if we are authenticating.\n-    private static final String SMTP_HOSTNAME = \"smtp.gmail.com\";\n-    // Fallback hostname if we are not authenticating.\n-    private static final String SMTP_RELAY_HOSTNAME = \"smtp-relay.gmail.com\";\n-    private static final String SMTP_PORT = \"465\";\n-    private String smtp_Hostname = \"\";\n-    private String smtp_portvalue = \"\";\n-    static String SSL_FACTORY = \"javax.net.ssl.SSLSocketFactory\";\n-    private String sslFactory = \"\";\n-    private String fromEmailAddress = \"\";\n-    private String fromEmailPass = \"\";\n-    private String fromEmailName = \"\";\n-    private String ccEmail;\n-    private String bccEmail;\n-    private String attachmentPath;\n-    // Domain that we send in the EHLO request if we are not authenticating\n-    // with the SMTP server.\n-    @Setter\n-    private String fromDomain = \"\";\n-    // If set to true, we will not authenticate with the SMTP service and\n-    // rather rely on the SMTP service's configured IP whitelist. If false we\n-    // will authenticate with the provided fromEmailAddress and fromEmailPass.\n-    @Setter\n-    private Boolean useIpWhitelist = false;\n-\n-    public boolean sendemail() throws Exception {\n-        logger.debug(\" sendemail() ==== starts\");\n-        boolean sentMail = false;\n-        try {\n-            final String username = this.getFromEmailAddress();\n-            final String password = this.getFromEmailPass();\n-            Properties props = makeProperties(useIpWhitelist);\n-            Session session = useIpWhitelist ? makeSession(props) :\n-                    makeSession(props, username, password);\n-            Message message = new MimeMessage(session);\n-            message.setFrom(new InternetAddress(username));\n-            if (StringUtils.isNotBlank(this.getToemail())) {\n-                if (this.getToemail().indexOf(\",\") != -1) {\n-                    message.setRecipients(\n-                            Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n-                } else {\n-                    message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n-                }\n-            }\n-            if (StringUtils.isNotBlank(this.getCcEmail())) {\n-                message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n-            }\n-            if (StringUtils.isNotBlank(this.getBccEmail())) {\n-                message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n-            }\n-            message.setSubject(this.subject);\n-            message.setContent(this.getMessageBody(), \"text/html\");\n-            Transport transport = session.getTransport();\n-            transport.send(message);\n-            logger.debug(\"sendemail()==== ends\");\n-            sentMail = true;\n-        } catch (MessagingException e) {\n-            logger.error(\"sendemail() MessagingException- error\", e);\n-        } catch (Exception e) {\n-            logger.error(\"ERROR:  sendemail() - error( ) \" + e + \" : \");\n-        }\n-        logger.debug(\"Mail.sendemail() :: Ends\");\n-        return sentMail;\n-    }\n-\n-    public boolean sendMailWithAttachment() throws Exception {\n-        logger.debug(\"sendMailWithAttachment()==== start\");\n-        boolean sentMail = false;\n-        try {\n-            final String username = this.getFromEmailAddress();\n-            final String password = this.getFromEmailPass();\n-            Properties props = makeProperties(useIpWhitelist);\n-            Session session = useIpWhitelist ? makeSession(props) :\n-                    makeSession(props, username, password);\n-            Message message = new MimeMessage(session);\n-            if (StringUtils.isNotBlank(this.getToemail())) {\n-                if (this.getToemail().indexOf(\",\") != -1) {\n-                    message.setRecipients(\n-                            Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n-                } else {\n-                    message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n-                }\n-            }\n-            if (StringUtils.isNotBlank(this.getCcEmail())) {\n-                message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n-            }\n-            if (StringUtils.isNotBlank(this.getBccEmail())) {\n-                message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n-            }\n-            message.setSubject(this.subject);\n-            message.setFrom(new InternetAddress(username));\n-            // message.setText(\"Check attachment in Mail\");\n-            // message.setContent(messageBody, \"text/html\");\n-            // Create the message part\n-            BodyPart messageBodyPart = new MimeBodyPart();\n-            // Create a multipar message\n-            Multipart multipart = new MimeMultipart();\n-            // Part two is attachment\n-            messageBodyPart = new MimeBodyPart();\n-            // String filename = \"D:\\\\temp\\\\TestLinks.pdf\"; // D:\\temp\\noteb.txt\n-            DataSource source = new FileDataSource(this.getAttachmentPath());\n-            messageBodyPart.setDataHandler(new DataHandler(source));\n-            messageBodyPart.setFileName(source.getName());\n-            messageBodyPart.setHeader(\"Content-Transfer-Encoding\", \"base64\");\n-            messageBodyPart.setHeader(\"Content-Type\", source.getContentType());\n-            // Send the complete message parts\n-            multipart.addBodyPart(messageBodyPart);\n-\n-            messageBodyPart = new MimeBodyPart();\n-            messageBodyPart.setText(messageBody);\n-            messageBodyPart.setHeader(\"MIME-Version\", \"1.0\");\n-            messageBodyPart.setHeader(\"Content-Type\", messageBodyPart.getContentType());\n-            multipart.addBodyPart(messageBodyPart);\n-\n-            message.setContent(multipart);\n-            Transport.send(message);\n-            sentMail = true;\n-        } catch (MessagingException e) {\n-            logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n-            sentMail = false;\n-        } catch (Exception e) {\n-            logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n-        }\n-        logger.debug(\"Mail.sendMailWithAttachment() :: Ends\");\n-        return sentMail;\n-    }\n-\n-    // Constructs a Propterties either relying on IP Whitelist on the SMTP\n-    // service or on authentication with email and password.\n-    private Properties makeProperties(Boolean useIpWhitelist) {\n-        Properties props = new Properties();\n-        props.put(\"mail.smtp.host\", this.getSmtp_Hostname());\n-        props.put(\"mail.smtp.port\", this.getSmtp_portvalue());\n-        props.put(\"mail.smtp.socketFactory.class\", this.getSslFactory());\n-        props.put(\"mail.smtp.socketFactory.port\", this.getSmtp_portvalue());\n-        if (useIpWhitelist) {\n-            props.put(\"mail.smtp.auth\", \"false\");\n-            props.put(\"mail.smtp.ssl.enable\", \"true\");\n-            props.put(\"mail.smtp.localhost\", fromDomain);\n+  private static final Logger logger = LogManager.getLogger(Mail.class);\n+\n+  private String toemail;\n+  private String subject;\n+  private String messageBody;\n+  // Fallback hostname if we are authenticating.\n+  private static final String SMTP_HOSTNAME = \"smtp.gmail.com\";\n+  // Fallback hostname if we are not authenticating.\n+  private static final String SMTP_RELAY_HOSTNAME = \"smtp-relay.gmail.com\";\n+  private static final String SMTP_PORT = \"465\";\n+  private String smtp_Hostname = \"\";\n+  private String smtp_portvalue = \"\";\n+  static String SSL_FACTORY = \"javax.net.ssl.SSLSocketFactory\";\n+  private String sslFactory = \"\";\n+  private String fromEmailAddress = \"\";\n+  private String fromEmailPass = \"\";\n+  private String fromEmailName = \"\";\n+  private String ccEmail;\n+  private String bccEmail;\n+  private String attachmentPath;\n+  // Domain that we send in the EHLO request if we are not authenticating\n+  // with the SMTP server.\n+  @Setter private String fromDomain = \"\";\n+  // If set to true, we will not authenticate with the SMTP service and\n+  // rather rely on the SMTP service's configured IP whitelist. If false we\n+  // will authenticate with the provided fromEmailAddress and fromEmailPass.\n+  @Setter private Boolean useIpWhitelist = false;\n+\n+  public boolean sendemail() throws Exception {\n+    logger.debug(\" sendemail() ==== starts\");\n+    boolean sentMail = false;\n+    try {\n+      final String username = this.getFromEmailAddress();\n+      final String password = this.getFromEmailPass();\n+      Properties props = makeProperties(useIpWhitelist);\n+      Session session =\n+          useIpWhitelist ? makeSession(props) : makeSession(props, username, password);\n+      Message message = new MimeMessage(session);\n+      message.setFrom(new InternetAddress(username));\n+      if (StringUtils.isNotBlank(this.getToemail())) {\n+        if (this.getToemail().indexOf(\",\") != -1) {\n+          message.setRecipients(\n+              Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n         } else {\n-            props.put(\"mail.smtp.auth\", \"true\");\n+          message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n         }\n-        return props;\n-    }\n-\n-    private Session makeSession(Properties props) {\n-        return Session.getInstance(props, null);\n-    }\n-\n-    private Session makeSession(Properties props, String username,\n-                                String password) {\n-        return Session.getInstance(\n-                props,\n-                new javax.mail.Authenticator() {\n-                    @Override\n-                    protected PasswordAuthentication getPasswordAuthentication() {\n-                        return new PasswordAuthentication(username, password);\n-                    }\n-                });\n-    }\n-\n-    public String getToemail() {\n-        return toemail;\n-    }\n-\n-    public void setToemail(String toemail) {\n-        this.toemail = toemail;\n-    }\n-\n-    public String getSubject() {\n-        return subject;\n-    }\n-\n-    public void setSubject(String subject) {\n-        this.subject = subject;\n-    }\n-\n-    public String getMessageBody() {\n-        return messageBody;\n-    }\n-\n-    public void setMessageBody(String messageBody) {\n-        this.messageBody = messageBody;\n-    }\n-\n-    public String getSmtp_Hostname() {\n-        if (this.smtp_Hostname.equals(\"\")) {\n-            if (useIpWhitelist) {\n-                return Mail.SMTP_RELAY_HOSTNAME;\n-            } else {\n-                return Mail.SMTP_HOSTNAME;\n-            }\n+      }\n+      if (StringUtils.isNotBlank(this.getCcEmail())) {\n+        message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n+      }\n+      if (StringUtils.isNotBlank(this.getBccEmail())) {\n+        message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n+      }\n+      message.setSubject(this.subject);\n+      message.setContent(this.getMessageBody(), \"text/html\");\n+      Transport transport = session.getTransport();\n+      transport.send(message);\n+      logger.debug(\"sendemail()==== ends\");\n+      sentMail = true;\n+    } catch (MessagingException e) {\n+      logger.error(\"sendemail() MessagingException- error\", e);\n+    } catch (Exception e) {\n+      logger.error(\"ERROR:  sendemail() - error( ) \" + e + \" : \");\n+    }\n+    logger.debug(\"Mail.sendemail() :: Ends\");\n+    return sentMail;\n+  }\n+\n+  public boolean sendMailWithAttachment() throws Exception {\n+    logger.debug(\"sendMailWithAttachment()==== start\");\n+    boolean sentMail = false;\n+    try {\n+      final String username = this.getFromEmailAddress();\n+      final String password = this.getFromEmailPass();\n+      Properties props = makeProperties(useIpWhitelist);\n+      Session session =\n+          useIpWhitelist ? makeSession(props) : makeSession(props, username, password);\n+      Message message = new MimeMessage(session);\n+      if (StringUtils.isNotBlank(this.getToemail())) {\n+        if (this.getToemail().indexOf(\",\") != -1) {\n+          message.setRecipients(\n+              Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n         } else {\n-            return this.smtp_Hostname;\n+          message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n         }\n-    }\n+      }\n+      if (StringUtils.isNotBlank(this.getCcEmail())) {\n+        message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n+      }\n+      if (StringUtils.isNotBlank(this.getBccEmail())) {\n+        message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n+      }\n+      message.setSubject(this.subject);\n+      message.setFrom(new InternetAddress(username));\n+      // message.setText(\"Check attachment in Mail\");\n+      // message.setContent(messageBody, \"text/html\");\n+      // Create the message part\n+      BodyPart messageBodyPart = new MimeBodyPart();\n+      // Create a multipar message\n+      Multipart multipart = new MimeMultipart();\n+      // Part two is attachment\n+      messageBodyPart = new MimeBodyPart();\n+      // String filename = \"D:\\\\temp\\\\TestLinks.pdf\"; // D:\\temp\\noteb.txt\n+      DataSource source = new FileDataSource(this.getAttachmentPath());\n+      messageBodyPart.setDataHandler(new DataHandler(source));\n+      messageBodyPart.setFileName(source.getName());\n+      messageBodyPart.setHeader(\"Content-Transfer-Encoding\", \"base64\");\n+      messageBodyPart.setHeader(\"Content-Type\", source.getContentType());\n+      // Send the complete message parts\n+      multipart.addBodyPart(messageBodyPart);\n+\n+      messageBodyPart = new MimeBodyPart();\n+      messageBodyPart.setText(messageBody);\n+      messageBodyPart.setHeader(\"MIME-Version\", \"1.0\");\n+      messageBodyPart.setHeader(\"Content-Type\", messageBodyPart.getContentType());\n+      multipart.addBodyPart(messageBodyPart);\n+\n+      message.setContent(multipart);\n+      Transport.send(message);\n+      sentMail = true;\n+    } catch (MessagingException e) {\n+      logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n+      sentMail = false;\n+    } catch (Exception e) {\n+      logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n+    }\n+    logger.debug(\"Mail.sendMailWithAttachment() :: Ends\");\n+    return sentMail;\n+  }\n+\n+  // Constructs a Propterties either relying on IP Whitelist on the SMTP\n+  // service or on authentication with email and password.\n+  private Properties makeProperties(Boolean useIpWhitelist) {\n+    Properties props = new Properties();\n+    props.put(\"mail.smtp.host\", this.getSmtp_Hostname());\n+    props.put(\"mail.smtp.port\", this.getSmtp_portvalue());\n+    props.put(\"mail.smtp.socketFactory.class\", this.getSslFactory());\n+    props.put(\"mail.smtp.socketFactory.port\", this.getSmtp_portvalue());\n+    if (useIpWhitelist) {\n+      props.put(\"mail.smtp.auth\", \"false\");\n+      props.put(\"mail.smtp.ssl.enable\", \"true\");\n+      props.put(\"mail.smtp.localhost\", fromDomain);\n+    } else {\n+      props.put(\"mail.smtp.auth\", \"true\");\n+    }\n+    return props;\n+  }\n+\n+  private Session makeSession(Properties props) {\n+    return Session.getInstance(props, null);\n+  }\n+\n+  private Session makeSession(Properties props, String username, String password) {\n+    return Session.getInstance(\n+        props,\n+        new javax.mail.Authenticator() {\n+          @Override\n+          protected PasswordAuthentication getPasswordAuthentication() {\n+            return new PasswordAuthentication(username, password);\n+          }\n+        });\n+  }\n+\n+  public String getToemail() {\n+    return toemail;\n+  }\n+\n+  public void setToemail(String toemail) {\n+    this.toemail = toemail;\n+  }\n+\n+  public String getSubject() {\n+    return subject;\n+  }\n+\n+  public void setSubject(String subject) {\n+    this.subject = subject;\n+  }\n+\n+  public String getMessageBody() {\n+    return messageBody;\n+  }\n+\n+  public void setMessageBody(String messageBody) {\n+    this.messageBody = messageBody;\n+  }\n+\n+  public String getSmtp_Hostname() {\n+    if (this.smtp_Hostname.equals(\"\")) {\n+      if (useIpWhitelist) {\n+        return Mail.SMTP_RELAY_HOSTNAME;\n+      } else {\n+        return Mail.SMTP_HOSTNAME;\n+      }\n+    } else {\n+      return this.smtp_Hostname;\n+    }\n+  }\n+\n+  public void setSmtp_Hostname(String smtp_Hostname) {\n+    this.smtp_Hostname = smtp_Hostname;\n+  }\n+\n+  public String getSmtp_portvalue() {\n+    String portvalue = \"\";\n+    if (this.smtp_portvalue.equals(\"\")) {\n+      portvalue = Mail.SMTP_PORT;\n+    } else {\n+      portvalue = this.smtp_portvalue;\n+    }\n+\n+    return portvalue;\n+  }\n+\n+  public void setSmtp_portvalue(String smtp_portvalue) {\n+    this.smtp_portvalue = smtp_portvalue;\n+  }\n+\n+  public static String getSSL_FACTORY() {\n+    return SSL_FACTORY;\n+  }\n+\n+  public static void setSSL_FACTORY(String sSL_FACTORY) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1275b0d755dc41d7df75133eab56d82eed9cb5e1"}, "originalPosition": 431}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzQzMDk5OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/Mail.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxOFrOG77ukA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxOFrOG77ukA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ5Nzc0NA==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nMissing a Javadoc comment.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465497744", "createdAt": "2020-08-05T06:18:18Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/Mail.java", "diffHunk": "@@ -23,308 +23,304 @@\n import javax.mail.internet.MimeBodyPart;\n import javax.mail.internet.MimeMessage;\n import javax.mail.internet.MimeMultipart;\n-\n import lombok.Setter;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n \n public class Mail {\n \n-    private static final Logger logger = LogManager.getLogger(Mail.class);\n-\n-    private String toemail;\n-    private String subject;\n-    private String messageBody;\n-    // Fallback hostname if we are authenticating.\n-    private static final String SMTP_HOSTNAME = \"smtp.gmail.com\";\n-    // Fallback hostname if we are not authenticating.\n-    private static final String SMTP_RELAY_HOSTNAME = \"smtp-relay.gmail.com\";\n-    private static final String SMTP_PORT = \"465\";\n-    private String smtp_Hostname = \"\";\n-    private String smtp_portvalue = \"\";\n-    static String SSL_FACTORY = \"javax.net.ssl.SSLSocketFactory\";\n-    private String sslFactory = \"\";\n-    private String fromEmailAddress = \"\";\n-    private String fromEmailPass = \"\";\n-    private String fromEmailName = \"\";\n-    private String ccEmail;\n-    private String bccEmail;\n-    private String attachmentPath;\n-    // Domain that we send in the EHLO request if we are not authenticating\n-    // with the SMTP server.\n-    @Setter\n-    private String fromDomain = \"\";\n-    // If set to true, we will not authenticate with the SMTP service and\n-    // rather rely on the SMTP service's configured IP whitelist. If false we\n-    // will authenticate with the provided fromEmailAddress and fromEmailPass.\n-    @Setter\n-    private Boolean useIpWhitelist = false;\n-\n-    public boolean sendemail() throws Exception {\n-        logger.debug(\" sendemail() ==== starts\");\n-        boolean sentMail = false;\n-        try {\n-            final String username = this.getFromEmailAddress();\n-            final String password = this.getFromEmailPass();\n-            Properties props = makeProperties(useIpWhitelist);\n-            Session session = useIpWhitelist ? makeSession(props) :\n-                    makeSession(props, username, password);\n-            Message message = new MimeMessage(session);\n-            message.setFrom(new InternetAddress(username));\n-            if (StringUtils.isNotBlank(this.getToemail())) {\n-                if (this.getToemail().indexOf(\",\") != -1) {\n-                    message.setRecipients(\n-                            Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n-                } else {\n-                    message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n-                }\n-            }\n-            if (StringUtils.isNotBlank(this.getCcEmail())) {\n-                message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n-            }\n-            if (StringUtils.isNotBlank(this.getBccEmail())) {\n-                message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n-            }\n-            message.setSubject(this.subject);\n-            message.setContent(this.getMessageBody(), \"text/html\");\n-            Transport transport = session.getTransport();\n-            transport.send(message);\n-            logger.debug(\"sendemail()==== ends\");\n-            sentMail = true;\n-        } catch (MessagingException e) {\n-            logger.error(\"sendemail() MessagingException- error\", e);\n-        } catch (Exception e) {\n-            logger.error(\"ERROR:  sendemail() - error( ) \" + e + \" : \");\n-        }\n-        logger.debug(\"Mail.sendemail() :: Ends\");\n-        return sentMail;\n-    }\n-\n-    public boolean sendMailWithAttachment() throws Exception {\n-        logger.debug(\"sendMailWithAttachment()==== start\");\n-        boolean sentMail = false;\n-        try {\n-            final String username = this.getFromEmailAddress();\n-            final String password = this.getFromEmailPass();\n-            Properties props = makeProperties(useIpWhitelist);\n-            Session session = useIpWhitelist ? makeSession(props) :\n-                    makeSession(props, username, password);\n-            Message message = new MimeMessage(session);\n-            if (StringUtils.isNotBlank(this.getToemail())) {\n-                if (this.getToemail().indexOf(\",\") != -1) {\n-                    message.setRecipients(\n-                            Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n-                } else {\n-                    message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n-                }\n-            }\n-            if (StringUtils.isNotBlank(this.getCcEmail())) {\n-                message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n-            }\n-            if (StringUtils.isNotBlank(this.getBccEmail())) {\n-                message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n-            }\n-            message.setSubject(this.subject);\n-            message.setFrom(new InternetAddress(username));\n-            // message.setText(\"Check attachment in Mail\");\n-            // message.setContent(messageBody, \"text/html\");\n-            // Create the message part\n-            BodyPart messageBodyPart = new MimeBodyPart();\n-            // Create a multipar message\n-            Multipart multipart = new MimeMultipart();\n-            // Part two is attachment\n-            messageBodyPart = new MimeBodyPart();\n-            // String filename = \"D:\\\\temp\\\\TestLinks.pdf\"; // D:\\temp\\noteb.txt\n-            DataSource source = new FileDataSource(this.getAttachmentPath());\n-            messageBodyPart.setDataHandler(new DataHandler(source));\n-            messageBodyPart.setFileName(source.getName());\n-            messageBodyPart.setHeader(\"Content-Transfer-Encoding\", \"base64\");\n-            messageBodyPart.setHeader(\"Content-Type\", source.getContentType());\n-            // Send the complete message parts\n-            multipart.addBodyPart(messageBodyPart);\n-\n-            messageBodyPart = new MimeBodyPart();\n-            messageBodyPart.setText(messageBody);\n-            messageBodyPart.setHeader(\"MIME-Version\", \"1.0\");\n-            messageBodyPart.setHeader(\"Content-Type\", messageBodyPart.getContentType());\n-            multipart.addBodyPart(messageBodyPart);\n-\n-            message.setContent(multipart);\n-            Transport.send(message);\n-            sentMail = true;\n-        } catch (MessagingException e) {\n-            logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n-            sentMail = false;\n-        } catch (Exception e) {\n-            logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n-        }\n-        logger.debug(\"Mail.sendMailWithAttachment() :: Ends\");\n-        return sentMail;\n-    }\n-\n-    // Constructs a Propterties either relying on IP Whitelist on the SMTP\n-    // service or on authentication with email and password.\n-    private Properties makeProperties(Boolean useIpWhitelist) {\n-        Properties props = new Properties();\n-        props.put(\"mail.smtp.host\", this.getSmtp_Hostname());\n-        props.put(\"mail.smtp.port\", this.getSmtp_portvalue());\n-        props.put(\"mail.smtp.socketFactory.class\", this.getSslFactory());\n-        props.put(\"mail.smtp.socketFactory.port\", this.getSmtp_portvalue());\n-        if (useIpWhitelist) {\n-            props.put(\"mail.smtp.auth\", \"false\");\n-            props.put(\"mail.smtp.ssl.enable\", \"true\");\n-            props.put(\"mail.smtp.localhost\", fromDomain);\n+  private static final Logger logger = LogManager.getLogger(Mail.class);\n+\n+  private String toemail;\n+  private String subject;\n+  private String messageBody;\n+  // Fallback hostname if we are authenticating.\n+  private static final String SMTP_HOSTNAME = \"smtp.gmail.com\";\n+  // Fallback hostname if we are not authenticating.\n+  private static final String SMTP_RELAY_HOSTNAME = \"smtp-relay.gmail.com\";\n+  private static final String SMTP_PORT = \"465\";\n+  private String smtp_Hostname = \"\";\n+  private String smtp_portvalue = \"\";\n+  static String SSL_FACTORY = \"javax.net.ssl.SSLSocketFactory\";\n+  private String sslFactory = \"\";\n+  private String fromEmailAddress = \"\";\n+  private String fromEmailPass = \"\";\n+  private String fromEmailName = \"\";\n+  private String ccEmail;\n+  private String bccEmail;\n+  private String attachmentPath;\n+  // Domain that we send in the EHLO request if we are not authenticating\n+  // with the SMTP server.\n+  @Setter private String fromDomain = \"\";\n+  // If set to true, we will not authenticate with the SMTP service and\n+  // rather rely on the SMTP service's configured IP whitelist. If false we\n+  // will authenticate with the provided fromEmailAddress and fromEmailPass.\n+  @Setter private Boolean useIpWhitelist = false;\n+\n+  public boolean sendemail() throws Exception {\n+    logger.debug(\" sendemail() ==== starts\");\n+    boolean sentMail = false;\n+    try {\n+      final String username = this.getFromEmailAddress();\n+      final String password = this.getFromEmailPass();\n+      Properties props = makeProperties(useIpWhitelist);\n+      Session session =\n+          useIpWhitelist ? makeSession(props) : makeSession(props, username, password);\n+      Message message = new MimeMessage(session);\n+      message.setFrom(new InternetAddress(username));\n+      if (StringUtils.isNotBlank(this.getToemail())) {\n+        if (this.getToemail().indexOf(\",\") != -1) {\n+          message.setRecipients(\n+              Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n         } else {\n-            props.put(\"mail.smtp.auth\", \"true\");\n+          message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n         }\n-        return props;\n-    }\n-\n-    private Session makeSession(Properties props) {\n-        return Session.getInstance(props, null);\n-    }\n-\n-    private Session makeSession(Properties props, String username,\n-                                String password) {\n-        return Session.getInstance(\n-                props,\n-                new javax.mail.Authenticator() {\n-                    @Override\n-                    protected PasswordAuthentication getPasswordAuthentication() {\n-                        return new PasswordAuthentication(username, password);\n-                    }\n-                });\n-    }\n-\n-    public String getToemail() {\n-        return toemail;\n-    }\n-\n-    public void setToemail(String toemail) {\n-        this.toemail = toemail;\n-    }\n-\n-    public String getSubject() {\n-        return subject;\n-    }\n-\n-    public void setSubject(String subject) {\n-        this.subject = subject;\n-    }\n-\n-    public String getMessageBody() {\n-        return messageBody;\n-    }\n-\n-    public void setMessageBody(String messageBody) {\n-        this.messageBody = messageBody;\n-    }\n-\n-    public String getSmtp_Hostname() {\n-        if (this.smtp_Hostname.equals(\"\")) {\n-            if (useIpWhitelist) {\n-                return Mail.SMTP_RELAY_HOSTNAME;\n-            } else {\n-                return Mail.SMTP_HOSTNAME;\n-            }\n+      }\n+      if (StringUtils.isNotBlank(this.getCcEmail())) {\n+        message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n+      }\n+      if (StringUtils.isNotBlank(this.getBccEmail())) {\n+        message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n+      }\n+      message.setSubject(this.subject);\n+      message.setContent(this.getMessageBody(), \"text/html\");\n+      Transport transport = session.getTransport();\n+      transport.send(message);\n+      logger.debug(\"sendemail()==== ends\");\n+      sentMail = true;\n+    } catch (MessagingException e) {\n+      logger.error(\"sendemail() MessagingException- error\", e);\n+    } catch (Exception e) {\n+      logger.error(\"ERROR:  sendemail() - error( ) \" + e + \" : \");\n+    }\n+    logger.debug(\"Mail.sendemail() :: Ends\");\n+    return sentMail;\n+  }\n+\n+  public boolean sendMailWithAttachment() throws Exception {\n+    logger.debug(\"sendMailWithAttachment()==== start\");\n+    boolean sentMail = false;\n+    try {\n+      final String username = this.getFromEmailAddress();\n+      final String password = this.getFromEmailPass();\n+      Properties props = makeProperties(useIpWhitelist);\n+      Session session =\n+          useIpWhitelist ? makeSession(props) : makeSession(props, username, password);\n+      Message message = new MimeMessage(session);\n+      if (StringUtils.isNotBlank(this.getToemail())) {\n+        if (this.getToemail().indexOf(\",\") != -1) {\n+          message.setRecipients(\n+              Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n         } else {\n-            return this.smtp_Hostname;\n+          message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n         }\n-    }\n+      }\n+      if (StringUtils.isNotBlank(this.getCcEmail())) {\n+        message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n+      }\n+      if (StringUtils.isNotBlank(this.getBccEmail())) {\n+        message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n+      }\n+      message.setSubject(this.subject);\n+      message.setFrom(new InternetAddress(username));\n+      // message.setText(\"Check attachment in Mail\");\n+      // message.setContent(messageBody, \"text/html\");\n+      // Create the message part\n+      BodyPart messageBodyPart = new MimeBodyPart();\n+      // Create a multipar message\n+      Multipart multipart = new MimeMultipart();\n+      // Part two is attachment\n+      messageBodyPart = new MimeBodyPart();\n+      // String filename = \"D:\\\\temp\\\\TestLinks.pdf\"; // D:\\temp\\noteb.txt\n+      DataSource source = new FileDataSource(this.getAttachmentPath());\n+      messageBodyPart.setDataHandler(new DataHandler(source));\n+      messageBodyPart.setFileName(source.getName());\n+      messageBodyPart.setHeader(\"Content-Transfer-Encoding\", \"base64\");\n+      messageBodyPart.setHeader(\"Content-Type\", source.getContentType());\n+      // Send the complete message parts\n+      multipart.addBodyPart(messageBodyPart);\n+\n+      messageBodyPart = new MimeBodyPart();\n+      messageBodyPart.setText(messageBody);\n+      messageBodyPart.setHeader(\"MIME-Version\", \"1.0\");\n+      messageBodyPart.setHeader(\"Content-Type\", messageBodyPart.getContentType());\n+      multipart.addBodyPart(messageBodyPart);\n+\n+      message.setContent(multipart);\n+      Transport.send(message);\n+      sentMail = true;\n+    } catch (MessagingException e) {\n+      logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n+      sentMail = false;\n+    } catch (Exception e) {\n+      logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n+    }\n+    logger.debug(\"Mail.sendMailWithAttachment() :: Ends\");\n+    return sentMail;\n+  }\n+\n+  // Constructs a Propterties either relying on IP Whitelist on the SMTP\n+  // service or on authentication with email and password.\n+  private Properties makeProperties(Boolean useIpWhitelist) {\n+    Properties props = new Properties();\n+    props.put(\"mail.smtp.host\", this.getSmtp_Hostname());\n+    props.put(\"mail.smtp.port\", this.getSmtp_portvalue());\n+    props.put(\"mail.smtp.socketFactory.class\", this.getSslFactory());\n+    props.put(\"mail.smtp.socketFactory.port\", this.getSmtp_portvalue());\n+    if (useIpWhitelist) {\n+      props.put(\"mail.smtp.auth\", \"false\");\n+      props.put(\"mail.smtp.ssl.enable\", \"true\");\n+      props.put(\"mail.smtp.localhost\", fromDomain);\n+    } else {\n+      props.put(\"mail.smtp.auth\", \"true\");\n+    }\n+    return props;\n+  }\n+\n+  private Session makeSession(Properties props) {\n+    return Session.getInstance(props, null);\n+  }\n+\n+  private Session makeSession(Properties props, String username, String password) {\n+    return Session.getInstance(\n+        props,\n+        new javax.mail.Authenticator() {\n+          @Override\n+          protected PasswordAuthentication getPasswordAuthentication() {\n+            return new PasswordAuthentication(username, password);\n+          }\n+        });\n+  }\n+\n+  public String getToemail() {\n+    return toemail;\n+  }\n+\n+  public void setToemail(String toemail) {\n+    this.toemail = toemail;\n+  }\n+\n+  public String getSubject() {\n+    return subject;\n+  }\n+\n+  public void setSubject(String subject) {\n+    this.subject = subject;\n+  }\n+\n+  public String getMessageBody() {\n+    return messageBody;\n+  }\n+\n+  public void setMessageBody(String messageBody) {\n+    this.messageBody = messageBody;\n+  }\n+\n+  public String getSmtp_Hostname() {\n+    if (this.smtp_Hostname.equals(\"\")) {\n+      if (useIpWhitelist) {\n+        return Mail.SMTP_RELAY_HOSTNAME;\n+      } else {\n+        return Mail.SMTP_HOSTNAME;\n+      }\n+    } else {\n+      return this.smtp_Hostname;\n+    }\n+  }\n+\n+  public void setSmtp_Hostname(String smtp_Hostname) {\n+    this.smtp_Hostname = smtp_Hostname;\n+  }\n+\n+  public String getSmtp_portvalue() {\n+    String portvalue = \"\";\n+    if (this.smtp_portvalue.equals(\"\")) {\n+      portvalue = Mail.SMTP_PORT;\n+    } else {\n+      portvalue = this.smtp_portvalue;\n+    }\n+\n+    return portvalue;\n+  }\n+\n+  public void setSmtp_portvalue(String smtp_portvalue) {\n+    this.smtp_portvalue = smtp_portvalue;\n+  }\n+\n+  public static String getSSL_FACTORY() {\n+    return SSL_FACTORY;\n+  }\n+\n+  public static void setSSL_FACTORY(String sSL_FACTORY) {\n+    SSL_FACTORY = sSL_FACTORY;\n+  }\n+\n+  public String getSslFactory() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1275b0d755dc41d7df75133eab56d82eed9cb5e1"}, "originalPosition": 435}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzQzMTAxOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/CloudStorageService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxOFrOG77ukg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxOFrOG77ukg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ5Nzc0Ng==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nMissing a Javadoc comment.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465497746", "createdAt": "2020-08-05T06:18:18Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/CloudStorageService.java", "diffHunk": "@@ -7,76 +7,69 @@\n  */\n package com.google.cloud.healthcare.fdamystudies.service;\n \n-import java.io.ByteArrayOutputStream;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.regex.Pattern;\n-import javax.annotation.PostConstruct;\n-\n import com.google.api.gax.paging.Page;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n import com.google.cloud.storage.Blob;\n import com.google.cloud.storage.Bucket;\n import com.google.cloud.storage.Storage;\n import com.google.cloud.storage.StorageException;\n import com.google.cloud.storage.StorageOptions;\n-import java.net.URL;\n+import java.io.ByteArrayOutputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import javax.annotation.PostConstruct;\n import lombok.AllArgsConstructor;\n import lombok.NoArgsConstructor;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n-import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n \n @Service\n public class CloudStorageService {\n-    private static Logger logger = LoggerFactory.getLogger(CloudStorageService.class);\n+  private static Logger logger = LoggerFactory.getLogger(CloudStorageService.class);\n \n-    private Storage storageService;\n+  private Storage storageService;\n \n-    @Autowired\n-    private ApplicationPropertyConfiguration appConfig;\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n \n-    @PostConstruct\n-    private void init() {\n-        storageService = StorageOptions.getDefaultInstance().getService();\n-    }\n+  @PostConstruct\n+  private void init() {\n+    storageService = StorageOptions.getDefaultInstance().getService();\n+  }\n \n-    @AllArgsConstructor\n-    @NoArgsConstructor\n-    public static class InstitutionResource {\n-        public String title;\n-        public ByteArrayOutputStream stream = new ByteArrayOutputStream();\n-        public String hash;\n-    }\n+  @AllArgsConstructor\n+  @NoArgsConstructor\n+  public static class InstitutionResource {\n+    public String title;\n+    public ByteArrayOutputStream stream = new ByteArrayOutputStream();\n+    public String hash;\n+  }\n \n-    public List<InstitutionResource> getAllInstitutionResources(String institutionId) {\n-        Bucket bucket = null;\n-        try {\n-            bucket = storageService.get(appConfig.getInstitutionBucketName());\n-        } catch (StorageException e) {\n-            logger.error(e.getMessage());\n-        } finally {\n-            if (bucket == null) return new ArrayList<>();\n-        }\n-        Page<Blob> blobs = bucket.list(Storage.BlobListOption.prefix(institutionId));\n-\n-        ArrayList<InstitutionResource> resources = new ArrayList<>();\n-        for (Blob blob : blobs.iterateAll()) {\n-            InstitutionResource resource = new InstitutionResource();\n-            // Remove institutionId directory path from title.\n-            resource.title = blob.getName().replaceFirst(Pattern.quote(institutionId + \"/\"),\n-                    \"\");\n-            resource.hash = blob.getMd5();\n-            // There are placeholder files in GCS that match the directory\n-            // but do not have a file name. Skip these.\n-            if (resource.title.isEmpty()) continue;\n-            blob.downloadTo(resource.stream);\n-            resources.add(resource);\n-        }\n-        return resources;\n+  public List<InstitutionResource> getAllInstitutionResources(String institutionId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1275b0d755dc41d7df75133eab56d82eed9cb5e1"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzQzMTAzOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/CloudStorageService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxOFrOG77ulA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxOFrOG77ulA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ5Nzc0OA==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\n'if' construct must use '{}'s.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465497748", "createdAt": "2020-08-05T06:18:18Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/CloudStorageService.java", "diffHunk": "@@ -7,76 +7,69 @@\n  */\n package com.google.cloud.healthcare.fdamystudies.service;\n \n-import java.io.ByteArrayOutputStream;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.regex.Pattern;\n-import javax.annotation.PostConstruct;\n-\n import com.google.api.gax.paging.Page;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n import com.google.cloud.storage.Blob;\n import com.google.cloud.storage.Bucket;\n import com.google.cloud.storage.Storage;\n import com.google.cloud.storage.StorageException;\n import com.google.cloud.storage.StorageOptions;\n-import java.net.URL;\n+import java.io.ByteArrayOutputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import javax.annotation.PostConstruct;\n import lombok.AllArgsConstructor;\n import lombok.NoArgsConstructor;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n-import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n \n @Service\n public class CloudStorageService {\n-    private static Logger logger = LoggerFactory.getLogger(CloudStorageService.class);\n+  private static Logger logger = LoggerFactory.getLogger(CloudStorageService.class);\n \n-    private Storage storageService;\n+  private Storage storageService;\n \n-    @Autowired\n-    private ApplicationPropertyConfiguration appConfig;\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n \n-    @PostConstruct\n-    private void init() {\n-        storageService = StorageOptions.getDefaultInstance().getService();\n-    }\n+  @PostConstruct\n+  private void init() {\n+    storageService = StorageOptions.getDefaultInstance().getService();\n+  }\n \n-    @AllArgsConstructor\n-    @NoArgsConstructor\n-    public static class InstitutionResource {\n-        public String title;\n-        public ByteArrayOutputStream stream = new ByteArrayOutputStream();\n-        public String hash;\n-    }\n+  @AllArgsConstructor\n+  @NoArgsConstructor\n+  public static class InstitutionResource {\n+    public String title;\n+    public ByteArrayOutputStream stream = new ByteArrayOutputStream();\n+    public String hash;\n+  }\n \n-    public List<InstitutionResource> getAllInstitutionResources(String institutionId) {\n-        Bucket bucket = null;\n-        try {\n-            bucket = storageService.get(appConfig.getInstitutionBucketName());\n-        } catch (StorageException e) {\n-            logger.error(e.getMessage());\n-        } finally {\n-            if (bucket == null) return new ArrayList<>();\n-        }\n-        Page<Blob> blobs = bucket.list(Storage.BlobListOption.prefix(institutionId));\n-\n-        ArrayList<InstitutionResource> resources = new ArrayList<>();\n-        for (Blob blob : blobs.iterateAll()) {\n-            InstitutionResource resource = new InstitutionResource();\n-            // Remove institutionId directory path from title.\n-            resource.title = blob.getName().replaceFirst(Pattern.quote(institutionId + \"/\"),\n-                    \"\");\n-            resource.hash = blob.getMd5();\n-            // There are placeholder files in GCS that match the directory\n-            // but do not have a file name. Skip these.\n-            if (resource.title.isEmpty()) continue;\n-            blob.downloadTo(resource.stream);\n-            resources.add(resource);\n-        }\n-        return resources;\n+  public List<InstitutionResource> getAllInstitutionResources(String institutionId) {\n+    Bucket bucket = null;\n+    try {\n+      bucket = storageService.get(appConfig.getInstitutionBucketName());\n+    } catch (StorageException e) {\n+      logger.error(e.getMessage());\n+    } finally {\n+      if (bucket == null) return new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1275b0d755dc41d7df75133eab56d82eed9cb5e1"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzQzMTA0OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/CloudStorageService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxOFrOG77ulQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxOFrOG77ulQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ5Nzc0OQ==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\n'if' construct must use '{}'s.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465497749", "createdAt": "2020-08-05T06:18:18Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/CloudStorageService.java", "diffHunk": "@@ -7,76 +7,69 @@\n  */\n package com.google.cloud.healthcare.fdamystudies.service;\n \n-import java.io.ByteArrayOutputStream;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.regex.Pattern;\n-import javax.annotation.PostConstruct;\n-\n import com.google.api.gax.paging.Page;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n import com.google.cloud.storage.Blob;\n import com.google.cloud.storage.Bucket;\n import com.google.cloud.storage.Storage;\n import com.google.cloud.storage.StorageException;\n import com.google.cloud.storage.StorageOptions;\n-import java.net.URL;\n+import java.io.ByteArrayOutputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import javax.annotation.PostConstruct;\n import lombok.AllArgsConstructor;\n import lombok.NoArgsConstructor;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n-import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n \n @Service\n public class CloudStorageService {\n-    private static Logger logger = LoggerFactory.getLogger(CloudStorageService.class);\n+  private static Logger logger = LoggerFactory.getLogger(CloudStorageService.class);\n \n-    private Storage storageService;\n+  private Storage storageService;\n \n-    @Autowired\n-    private ApplicationPropertyConfiguration appConfig;\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n \n-    @PostConstruct\n-    private void init() {\n-        storageService = StorageOptions.getDefaultInstance().getService();\n-    }\n+  @PostConstruct\n+  private void init() {\n+    storageService = StorageOptions.getDefaultInstance().getService();\n+  }\n \n-    @AllArgsConstructor\n-    @NoArgsConstructor\n-    public static class InstitutionResource {\n-        public String title;\n-        public ByteArrayOutputStream stream = new ByteArrayOutputStream();\n-        public String hash;\n-    }\n+  @AllArgsConstructor\n+  @NoArgsConstructor\n+  public static class InstitutionResource {\n+    public String title;\n+    public ByteArrayOutputStream stream = new ByteArrayOutputStream();\n+    public String hash;\n+  }\n \n-    public List<InstitutionResource> getAllInstitutionResources(String institutionId) {\n-        Bucket bucket = null;\n-        try {\n-            bucket = storageService.get(appConfig.getInstitutionBucketName());\n-        } catch (StorageException e) {\n-            logger.error(e.getMessage());\n-        } finally {\n-            if (bucket == null) return new ArrayList<>();\n-        }\n-        Page<Blob> blobs = bucket.list(Storage.BlobListOption.prefix(institutionId));\n-\n-        ArrayList<InstitutionResource> resources = new ArrayList<>();\n-        for (Blob blob : blobs.iterateAll()) {\n-            InstitutionResource resource = new InstitutionResource();\n-            // Remove institutionId directory path from title.\n-            resource.title = blob.getName().replaceFirst(Pattern.quote(institutionId + \"/\"),\n-                    \"\");\n-            resource.hash = blob.getMd5();\n-            // There are placeholder files in GCS that match the directory\n-            // but do not have a file name. Skip these.\n-            if (resource.title.isEmpty()) continue;\n-            blob.downloadTo(resource.stream);\n-            resources.add(resource);\n-        }\n-        return resources;\n+  public List<InstitutionResource> getAllInstitutionResources(String institutionId) {\n+    Bucket bucket = null;\n+    try {\n+      bucket = storageService.get(appConfig.getInstitutionBucketName());\n+    } catch (StorageException e) {\n+      logger.error(e.getMessage());\n+    } finally {\n+      if (bucket == null) return new ArrayList<>();\n     }\n+    Page<Blob> blobs = bucket.list(Storage.BlobListOption.prefix(institutionId));\n \n+    ArrayList<InstitutionResource> resources = new ArrayList<>();\n+    for (Blob blob : blobs.iterateAll()) {\n+      InstitutionResource resource = new InstitutionResource();\n+      // Remove institutionId directory path from title.\n+      resource.title = blob.getName().replaceFirst(Pattern.quote(institutionId + \"/\"), \"\");\n+      resource.hash = blob.getMd5();\n+      // There are placeholder files in GCS that match the directory\n+      // but do not have a file name. Skip these.\n+      if (resource.title.isEmpty()) continue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1275b0d755dc41d7df75133eab56d82eed9cb5e1"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzQzMTA2OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/PersonalizedUserReportService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxOVrOG77umA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxOVrOG77umA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ5Nzc1Mg==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\n'lambda arguments' has incorrect indentation level 20, expected level should be one of the following: 14, 16.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465497752", "createdAt": "2020-08-05T06:18:19Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/PersonalizedUserReportService.java", "diffHunk": "@@ -38,8 +40,14 @@\n                     Comparator.comparing(PersonalizedUserReportBO::getCreationTime))))\n         .entrySet()\n         .stream()\n-        .filter(e -> e.getValue().getCreationTime()!=null)\n-        .sorted(Comparator.comparing(e -> ((Map.Entry<String, PersonalizedUserReportBO>) e).getValue().getCreationTime()).reversed())\n+        .filter(e -> e.getValue().getCreationTime() != null)\n+        .sorted(\n+            Comparator.comparing(\n+                    e ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1275b0d755dc41d7df75133eab56d82eed9cb5e1"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzQzMTEwOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxOVrOG77unA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxOVrOG77unA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ5Nzc1Ng==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nLine contains a tab character.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465497756", "createdAt": "2020-08-05T06:18:19Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/pom.xml", "diffHunk": "@@ -91,9 +91,8 @@\n \t\t\t<scope>runtime</scope>\n \t\t</dependency>\n \t\t<dependency>\n-\t\t\t<groupId>org.projectlombok</groupId>\n-\t\t\t<artifactId>lombok</artifactId>\n-\t\t\t<optional>true</optional>\n+\t\t\t<groupId>org.slf4j</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1275b0d755dc41d7df75133eab56d82eed9cb5e1"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzQzMTEyOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxOVrOG77unw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxOVrOG77unw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ5Nzc1OQ==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nLine contains a tab character.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465497759", "createdAt": "2020-08-05T06:18:19Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/pom.xml", "diffHunk": "@@ -91,9 +91,8 @@\n \t\t\t<scope>runtime</scope>\n \t\t</dependency>\n \t\t<dependency>\n-\t\t\t<groupId>org.projectlombok</groupId>\n-\t\t\t<artifactId>lombok</artifactId>\n-\t\t\t<optional>true</optional>\n+\t\t\t<groupId>org.slf4j</groupId>\n+\t\t\t<artifactId>slf4j-ext</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1275b0d755dc41d7df75133eab56d82eed9cb5e1"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzQzMTEzOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxOVrOG77uoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxOVrOG77uoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ5Nzc2MQ==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nLine contains a tab character.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465497761", "createdAt": "2020-08-05T06:18:19Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/pom.xml", "diffHunk": "@@ -104,7 +103,11 @@\n \t\t\t<groupId>org.springframework.boot</groupId>\n \t\t\t<artifactId>spring-boot-starter-test</artifactId>\n \t\t\t<scope>test</scope>\n-\t\t\t\n+\t\t</dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1275b0d755dc41d7df75133eab56d82eed9cb5e1"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzQzMTE1OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxOVrOG77uow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxOVrOG77uow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ5Nzc2Mw==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nLine contains a tab character.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465497763", "createdAt": "2020-08-05T06:18:19Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/pom.xml", "diffHunk": "@@ -104,7 +103,11 @@\n \t\t\t<groupId>org.springframework.boot</groupId>\n \t\t\t<artifactId>spring-boot-starter-test</artifactId>\n \t\t\t<scope>test</scope>\n-\t\t\t\n+\t\t</dependency>\n+\t\t<dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1275b0d755dc41d7df75133eab56d82eed9cb5e1"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzQzMTE3OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxOVrOG77upQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxOVrOG77upQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ5Nzc2NQ==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nLine contains a tab character.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465497765", "createdAt": "2020-08-05T06:18:19Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/pom.xml", "diffHunk": "@@ -104,7 +103,11 @@\n \t\t\t<groupId>org.springframework.boot</groupId>\n \t\t\t<artifactId>spring-boot-starter-test</artifactId>\n \t\t\t<scope>test</scope>\n-\t\t\t\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.projectlombok</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1275b0d755dc41d7df75133eab56d82eed9cb5e1"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzQzMTE5OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxOVrOG77uqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxOVrOG77uqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ5Nzc2OQ==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nLine contains a tab character.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465497769", "createdAt": "2020-08-05T06:18:19Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/pom.xml", "diffHunk": "@@ -104,7 +103,11 @@\n \t\t\t<groupId>org.springframework.boot</groupId>\n \t\t\t<artifactId>spring-boot-starter-test</artifactId>\n \t\t\t<scope>test</scope>\n-\t\t\t\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.projectlombok</groupId>\n+\t\t\t<artifactId>lombok</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1275b0d755dc41d7df75133eab56d82eed9cb5e1"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzQzMTIxOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxOVrOG77urA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoxODoxOVrOG77urA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ5Nzc3Mg==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nLine contains a tab character.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465497772", "createdAt": "2020-08-05T06:18:19Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/pom.xml", "diffHunk": "@@ -104,7 +103,11 @@\n \t\t\t<groupId>org.springframework.boot</groupId>\n \t\t\t<artifactId>spring-boot-starter-test</artifactId>\n \t\t\t<scope>test</scope>\n-\t\t\t\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.projectlombok</groupId>\n+\t\t\t<artifactId>lombok</artifactId>\n+\t\t\t<optional>true</optional>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1275b0d755dc41d7df75133eab56d82eed9cb5e1"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODkyMzY4OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzozNjozNVrOG8J_xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzozNjozNVrOG8J_xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczMTUyNg==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nLine contains a tab character.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465731526", "createdAt": "2020-08-05T13:36:35Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/pom.xml", "diffHunk": "@@ -158,15 +161,15 @@\n \t\t\t<version>2.0-m01</version>\n \t\t</dependency>\n \t\t<dependency>\n-\t\t    <groupId>com.notnoop.apns</groupId>\n-\t\t    <artifactId>apns</artifactId>\n-\t\t    <version>1.0.0.Beta6</version>\n+\t\t\t<groupId>com.notnoop.apns</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb569f055ae26f6763e48899d551550ae5fe2620"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODkyMzcxOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzozNjozNVrOG8J_yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzozNjozNVrOG8J_yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczMTUyOQ==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nLine contains a tab character.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465731529", "createdAt": "2020-08-05T13:36:35Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/pom.xml", "diffHunk": "@@ -158,15 +161,15 @@\n \t\t\t<version>2.0-m01</version>\n \t\t</dependency>\n \t\t<dependency>\n-\t\t    <groupId>com.notnoop.apns</groupId>\n-\t\t    <artifactId>apns</artifactId>\n-\t\t    <version>1.0.0.Beta6</version>\n+\t\t\t<groupId>com.notnoop.apns</groupId>\n+\t\t\t<artifactId>apns</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb569f055ae26f6763e48899d551550ae5fe2620"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODkyMzcyOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzozNjozNVrOG8J_yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzozNjozNVrOG8J_yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczMTUzMA==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nLine contains a tab character.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465731530", "createdAt": "2020-08-05T13:36:35Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/pom.xml", "diffHunk": "@@ -158,15 +161,15 @@\n \t\t\t<version>2.0-m01</version>\n \t\t</dependency>\n \t\t<dependency>\n-\t\t    <groupId>com.notnoop.apns</groupId>\n-\t\t    <artifactId>apns</artifactId>\n-\t\t    <version>1.0.0.Beta6</version>\n+\t\t\t<groupId>com.notnoop.apns</groupId>\n+\t\t\t<artifactId>apns</artifactId>\n+\t\t\t<version>1.0.0.Beta6</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb569f055ae26f6763e48899d551550ae5fe2620"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODkyMzc0OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzozNjozNVrOG8J_zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzozNjozNVrOG8J_zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczMTUzNA==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nLine contains a tab character.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465731534", "createdAt": "2020-08-05T13:36:35Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/pom.xml", "diffHunk": "@@ -158,15 +161,15 @@\n \t\t\t<version>2.0-m01</version>\n \t\t</dependency>\n \t\t<dependency>\n-\t\t    <groupId>com.notnoop.apns</groupId>\n-\t\t    <artifactId>apns</artifactId>\n-\t\t    <version>1.0.0.Beta6</version>\n+\t\t\t<groupId>com.notnoop.apns</groupId>\n+\t\t\t<artifactId>apns</artifactId>\n+\t\t\t<version>1.0.0.Beta6</version>\n+\t\t</dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb569f055ae26f6763e48899d551550ae5fe2620"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODkyMzc1OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzozNjozNVrOG8J_zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzozNjozNVrOG8J_zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczMTUzNQ==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nLine contains a tab character.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465731535", "createdAt": "2020-08-05T13:36:35Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/pom.xml", "diffHunk": "@@ -158,15 +161,15 @@\n \t\t\t<version>2.0-m01</version>\n \t\t</dependency>\n \t\t<dependency>\n-\t\t    <groupId>com.notnoop.apns</groupId>\n-\t\t    <artifactId>apns</artifactId>\n-\t\t    <version>1.0.0.Beta6</version>\n+\t\t\t<groupId>com.notnoop.apns</groupId>\n+\t\t\t<artifactId>apns</artifactId>\n+\t\t\t<version>1.0.0.Beta6</version>\n+\t\t</dependency>\n+\t\t<dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb569f055ae26f6763e48899d551550ae5fe2620"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODkyMzc3OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzozNjozNVrOG8J_0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzozNjozNVrOG8J_0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczMTUzNg==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nLine contains a tab character.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465731536", "createdAt": "2020-08-05T13:36:35Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/pom.xml", "diffHunk": "@@ -158,15 +161,15 @@\n \t\t\t<version>2.0-m01</version>\n \t\t</dependency>\n \t\t<dependency>\n-\t\t    <groupId>com.notnoop.apns</groupId>\n-\t\t    <artifactId>apns</artifactId>\n-\t\t    <version>1.0.0.Beta6</version>\n+\t\t\t<groupId>com.notnoop.apns</groupId>\n+\t\t\t<artifactId>apns</artifactId>\n+\t\t\t<version>1.0.0.Beta6</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>com.h2database</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb569f055ae26f6763e48899d551550ae5fe2620"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODkyMzgwOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzozNjozNVrOG8J_1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzozNjozNVrOG8J_1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczMTU0MA==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nLine contains a tab character.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465731540", "createdAt": "2020-08-05T13:36:35Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/pom.xml", "diffHunk": "@@ -158,15 +161,15 @@\n \t\t\t<version>2.0-m01</version>\n \t\t</dependency>\n \t\t<dependency>\n-\t\t    <groupId>com.notnoop.apns</groupId>\n-\t\t    <artifactId>apns</artifactId>\n-\t\t    <version>1.0.0.Beta6</version>\n+\t\t\t<groupId>com.notnoop.apns</groupId>\n+\t\t\t<artifactId>apns</artifactId>\n+\t\t\t<version>1.0.0.Beta6</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>com.h2database</groupId>\n+\t\t\t<artifactId>h2</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb569f055ae26f6763e48899d551550ae5fe2620"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODkyMzgxOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzozNjozNlrOG8J_1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzozNjozNlrOG8J_1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczMTU0Mg==", "bodyText": "[user-mgmt Checks] reported by reviewdog \ud83d\udc36\nLine contains a tab character.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/604#discussion_r465731542", "createdAt": "2020-08-05T13:36:36Z", "author": {"login": "github-actions"}, "path": "user-registration-server-ws/user-mgmt/pom.xml", "diffHunk": "@@ -158,15 +161,15 @@\n \t\t\t<version>2.0-m01</version>\n \t\t</dependency>\n \t\t<dependency>\n-\t\t    <groupId>com.notnoop.apns</groupId>\n-\t\t    <artifactId>apns</artifactId>\n-\t\t    <version>1.0.0.Beta6</version>\n+\t\t\t<groupId>com.notnoop.apns</groupId>\n+\t\t\t<artifactId>apns</artifactId>\n+\t\t\t<version>1.0.0.Beta6</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>com.h2database</groupId>\n+\t\t\t<artifactId>h2</artifactId>\n+\t\t\t<scope>test</scope>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb569f055ae26f6763e48899d551550ae5fe2620"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2265, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}