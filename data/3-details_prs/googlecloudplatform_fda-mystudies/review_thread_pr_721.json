{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyMjYyNDcz", "number": 721, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNjo0OTowMVrOEVfrog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxOToyNDozNFrOEVi8gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTc0NjI2OnYy", "diffSide": "RIGHT", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/repository/StudyPermissionRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNjo0OTowMVrOG8SI7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNjoxMzo0MVrOG8kqlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg2NDk0MA==", "bodyText": "Isn't this the same as the function findStudyPermissionsOfUserByStudyIds() above.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/721#discussion_r465864940", "createdAt": "2020-08-05T16:49:01Z", "author": {"login": "saminguyen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/repository/StudyPermissionRepository.java", "diffHunk": "@@ -51,4 +51,10 @@\n \n   @Query(\"SELECT sp from StudyPermissionEntity sp where sp.urAdminUser.id=:adminId\")\n   public List<StudyPermissionEntity> findByAdminUser(String adminId);\n+\n+  @Query(\n+      \"SELECT sp FROM StudyPermissionEntity sp \"\n+          + \"WHERE  sp.study.id IN (:usersStudyIds) and  sp.urAdminUser.id=:userId\")\n+  public List<StudyPermissionEntity> findByStudyIds(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d043999b0199e62963c5750c4962af3a664eff93"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE2ODQ3MQ==", "bodyText": "Removed findStudyPermissionsOfUserByStudyIds and reused findByStudyIds method", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/721#discussion_r466168471", "createdAt": "2020-08-06T06:13:41Z", "author": {"login": "Kantharajut-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/repository/StudyPermissionRepository.java", "diffHunk": "@@ -51,4 +51,10 @@\n \n   @Query(\"SELECT sp from StudyPermissionEntity sp where sp.urAdminUser.id=:adminId\")\n   public List<StudyPermissionEntity> findByAdminUser(String adminId);\n+\n+  @Query(\n+      \"SELECT sp FROM StudyPermissionEntity sp \"\n+          + \"WHERE  sp.study.id IN (:usersStudyIds) and  sp.urAdminUser.id=:userId\")\n+  public List<StudyPermissionEntity> findByStudyIds(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg2NDk0MA=="}, "originalCommit": {"oid": "d043999b0199e62963c5750c4962af3a664eff93"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTc1MjgyOnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/Site.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNjo1MDozNVrOG8SNBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNjoxNzoxOVrOG8kvWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg2NTk5MA==", "bodyText": "empty line after each field", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/721#discussion_r465865990", "createdAt": "2020-08-05T16:50:35Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/Site.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.beans;\n+\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.Setter;\n+\n+@Getter\n+@Setter\n+@NoArgsConstructor\n+public class Site {\n+  private String id;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d043999b0199e62963c5750c4962af3a664eff93"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE2OTY5MA==", "bodyText": "Added empty lines", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/721#discussion_r466169690", "createdAt": "2020-08-06T06:17:19Z", "author": {"login": "Kantharajut-btc"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/Site.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.beans;\n+\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.Setter;\n+\n+@Getter\n+@Setter\n+@NoArgsConstructor\n+public class Site {\n+  private String id;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg2NTk5MA=="}, "originalCommit": {"oid": "d043999b0199e62963c5750c4962af3a664eff93"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTc1NDQ3OnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/Site.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNjo1MTowMlrOG8SOGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNjoxNzo0MFrOG8kv1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg2NjI2NQ==", "bodyText": "Name this SiteDetails just for consistency?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/721#discussion_r465866265", "createdAt": "2020-08-05T16:51:02Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/Site.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.beans;\n+\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.Setter;\n+\n+@Getter\n+@Setter\n+@NoArgsConstructor\n+public class Site {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d043999b0199e62963c5750c4962af3a664eff93"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE2OTgxNQ==", "bodyText": "Changed to SiteDetails", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/721#discussion_r466169815", "createdAt": "2020-08-06T06:17:40Z", "author": {"login": "Kantharajut-btc"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/Site.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.beans;\n+\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.Setter;\n+\n+@Getter\n+@Setter\n+@NoArgsConstructor\n+public class Site {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg2NjI2NQ=="}, "originalCommit": {"oid": "d043999b0199e62963c5750c4962af3a664eff93"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDI4MDk4OnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/SiteServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxOToyNDozNVrOG8Xa_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNjoyMzo1OVrOG8k4Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk1MTQ4NA==", "bodyText": "is it easier just to set null values to 0L in the function that gets the count", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/721#discussion_r465951484", "createdAt": "2020-08-05T19:24:35Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/SiteServiceImpl.java", "diffHunk": "@@ -858,4 +864,128 @@ public ParticipantStatusResponse updateOnboardingStatus(\n             participantStatusRequest.getSiteId()));\n     return new ParticipantStatusResponse(MessageCode.UPDATE_STATUS_SUCCESS);\n   }\n+\n+  @Override\n+  @Transactional(readOnly = true)\n+  public SiteDetailsResponse getSites(String userId) {\n+    logger.entry(\"getSites(userId)\");\n+\n+    List<SitePermissionEntity> sitePermissions =\n+        sitePermissionRepository.findSitePermissionByUserId(userId);\n+    if (CollectionUtils.isEmpty(sitePermissions)) {\n+      logger.exit(ErrorCode.SITE_NOT_FOUND);\n+      return new SiteDetailsResponse(ErrorCode.SITE_NOT_FOUND);\n+    }\n+\n+    List<String> siteIds =\n+        sitePermissions\n+            .stream()\n+            .map(s -> s.getSite().getId())\n+            .distinct()\n+            .collect(Collectors.toList());\n+\n+    Map<String, Long> invitedCountBySiteIdMap = getInvitedCountBySiteId(siteIds);\n+\n+    Map<String, Long> enrolledCountBySiteIdMap = getEnrolledCountBySiteId(siteIds);\n+\n+    Map<StudyEntity, List<SitePermissionEntity>> sitePermissionsByStudy =\n+        sitePermissions.stream().collect(Collectors.groupingBy(SitePermissionEntity::getStudy));\n+\n+    Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId =\n+        getStudyPermissionsByStudyId(userId, sitePermissions);\n+\n+    List<StudyDetails> studies = new ArrayList<>();\n+    for (Map.Entry<StudyEntity, List<SitePermissionEntity>> entry :\n+        sitePermissionsByStudy.entrySet()) {\n+      StudyEntity study = entry.getKey();\n+      StudyDetails studyDetail = StudyMapper.toStudyDetails(studyPermissionsByStudyInfoId, study);\n+\n+      addSites(invitedCountBySiteIdMap, enrolledCountBySiteIdMap, study, studyDetail);\n+      studyDetail.setSitesCount((long) studyDetail.getSites().size());\n+\n+      studies.add(studyDetail);\n+    }\n+\n+    logger.exit(String.format(\"%d studies found\", studies.size()));\n+    return new SiteDetailsResponse(studies, MessageCode.GET_SITES_SUCCESS);\n+  }\n+\n+  private Map<String, StudyPermissionEntity> getStudyPermissionsByStudyId(\n+      String userId, List<SitePermissionEntity> sitePermissions) {\n+    List<String> usersStudyIds =\n+        sitePermissions\n+            .stream()\n+            .distinct()\n+            .map(studyEntity -> studyEntity.getStudy().getId())\n+            .collect(Collectors.toList());\n+\n+    List<StudyPermissionEntity> studyPermissions =\n+        studyPermissionRepository.findByStudyIds(usersStudyIds, userId);\n+\n+    Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId = new HashMap<>();\n+    if (CollectionUtils.isNotEmpty(studyPermissions)) {\n+      studyPermissionsByStudyInfoId =\n+          studyPermissions\n+              .stream()\n+              .collect(Collectors.toMap(e -> e.getStudy().getId(), Function.identity()));\n+    }\n+    return studyPermissionsByStudyInfoId;\n+  }\n+\n+  private Map<String, Long> getInvitedCountBySiteId(List<String> usersSiteIds) {\n+    List<ParticipantRegistrySiteEntity> participantRegistry =\n+        participantRegistrySiteRepository.findBySiteIds(usersSiteIds);\n+\n+    return participantRegistry\n+        .stream()\n+        .collect(\n+            Collectors.groupingBy(\n+                e -> e.getSite().getId(),\n+                Collectors.summingLong(ParticipantRegistrySiteEntity::getInvitationCount)));\n+  }\n+\n+  private Map<String, Long> getEnrolledCountBySiteId(List<String> usersSiteIds) {\n+    List<ParticipantStudyEntity> participantsEnrollments =\n+        participantStudyRepository.findBySiteIds(usersSiteIds);\n+\n+    return participantsEnrollments\n+        .stream()\n+        .collect(Collectors.groupingBy(e -> e.getSite().getId(), Collectors.counting()));\n+  }\n+\n+  private void addSites(\n+      Map<String, Long> invitedCountBySiteIdMap,\n+      Map<String, Long> enrolledCountBySiteIdMap,\n+      StudyEntity study,\n+      StudyDetails studyDetail) {\n+    for (SiteEntity siteEntity : study.getSites()) {\n+      Long invitedCount =\n+          invitedCountBySiteIdMap.get(siteEntity.getId()) == null\n+              ? 0L", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d043999b0199e62963c5750c4962af3a664eff93"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE3MTk1NA==", "bodyText": "InvitationCount in Entity is 0 by default hence removed null checking", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/721#discussion_r466171954", "createdAt": "2020-08-06T06:23:59Z", "author": {"login": "Kantharajut-btc"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/SiteServiceImpl.java", "diffHunk": "@@ -858,4 +864,128 @@ public ParticipantStatusResponse updateOnboardingStatus(\n             participantStatusRequest.getSiteId()));\n     return new ParticipantStatusResponse(MessageCode.UPDATE_STATUS_SUCCESS);\n   }\n+\n+  @Override\n+  @Transactional(readOnly = true)\n+  public SiteDetailsResponse getSites(String userId) {\n+    logger.entry(\"getSites(userId)\");\n+\n+    List<SitePermissionEntity> sitePermissions =\n+        sitePermissionRepository.findSitePermissionByUserId(userId);\n+    if (CollectionUtils.isEmpty(sitePermissions)) {\n+      logger.exit(ErrorCode.SITE_NOT_FOUND);\n+      return new SiteDetailsResponse(ErrorCode.SITE_NOT_FOUND);\n+    }\n+\n+    List<String> siteIds =\n+        sitePermissions\n+            .stream()\n+            .map(s -> s.getSite().getId())\n+            .distinct()\n+            .collect(Collectors.toList());\n+\n+    Map<String, Long> invitedCountBySiteIdMap = getInvitedCountBySiteId(siteIds);\n+\n+    Map<String, Long> enrolledCountBySiteIdMap = getEnrolledCountBySiteId(siteIds);\n+\n+    Map<StudyEntity, List<SitePermissionEntity>> sitePermissionsByStudy =\n+        sitePermissions.stream().collect(Collectors.groupingBy(SitePermissionEntity::getStudy));\n+\n+    Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId =\n+        getStudyPermissionsByStudyId(userId, sitePermissions);\n+\n+    List<StudyDetails> studies = new ArrayList<>();\n+    for (Map.Entry<StudyEntity, List<SitePermissionEntity>> entry :\n+        sitePermissionsByStudy.entrySet()) {\n+      StudyEntity study = entry.getKey();\n+      StudyDetails studyDetail = StudyMapper.toStudyDetails(studyPermissionsByStudyInfoId, study);\n+\n+      addSites(invitedCountBySiteIdMap, enrolledCountBySiteIdMap, study, studyDetail);\n+      studyDetail.setSitesCount((long) studyDetail.getSites().size());\n+\n+      studies.add(studyDetail);\n+    }\n+\n+    logger.exit(String.format(\"%d studies found\", studies.size()));\n+    return new SiteDetailsResponse(studies, MessageCode.GET_SITES_SUCCESS);\n+  }\n+\n+  private Map<String, StudyPermissionEntity> getStudyPermissionsByStudyId(\n+      String userId, List<SitePermissionEntity> sitePermissions) {\n+    List<String> usersStudyIds =\n+        sitePermissions\n+            .stream()\n+            .distinct()\n+            .map(studyEntity -> studyEntity.getStudy().getId())\n+            .collect(Collectors.toList());\n+\n+    List<StudyPermissionEntity> studyPermissions =\n+        studyPermissionRepository.findByStudyIds(usersStudyIds, userId);\n+\n+    Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId = new HashMap<>();\n+    if (CollectionUtils.isNotEmpty(studyPermissions)) {\n+      studyPermissionsByStudyInfoId =\n+          studyPermissions\n+              .stream()\n+              .collect(Collectors.toMap(e -> e.getStudy().getId(), Function.identity()));\n+    }\n+    return studyPermissionsByStudyInfoId;\n+  }\n+\n+  private Map<String, Long> getInvitedCountBySiteId(List<String> usersSiteIds) {\n+    List<ParticipantRegistrySiteEntity> participantRegistry =\n+        participantRegistrySiteRepository.findBySiteIds(usersSiteIds);\n+\n+    return participantRegistry\n+        .stream()\n+        .collect(\n+            Collectors.groupingBy(\n+                e -> e.getSite().getId(),\n+                Collectors.summingLong(ParticipantRegistrySiteEntity::getInvitationCount)));\n+  }\n+\n+  private Map<String, Long> getEnrolledCountBySiteId(List<String> usersSiteIds) {\n+    List<ParticipantStudyEntity> participantsEnrollments =\n+        participantStudyRepository.findBySiteIds(usersSiteIds);\n+\n+    return participantsEnrollments\n+        .stream()\n+        .collect(Collectors.groupingBy(e -> e.getSite().getId(), Collectors.counting()));\n+  }\n+\n+  private void addSites(\n+      Map<String, Long> invitedCountBySiteIdMap,\n+      Map<String, Long> enrolledCountBySiteIdMap,\n+      StudyEntity study,\n+      StudyDetails studyDetail) {\n+    for (SiteEntity siteEntity : study.getSites()) {\n+      Long invitedCount =\n+          invitedCountBySiteIdMap.get(siteEntity.getId()) == null\n+              ? 0L", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk1MTQ4NA=="}, "originalCommit": {"oid": "d043999b0199e62963c5750c4962af3a664eff93"}, "originalPosition": 138}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2097, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}