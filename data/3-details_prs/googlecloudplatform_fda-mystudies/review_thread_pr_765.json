{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5MjM0MjA0", "number": 765, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTo1NDo0MVrOEamVRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMjowMDowNFrOEc7ftA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzI2NDcxOnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/UserControllerTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTo1NDo0MVrOHEIR-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMjo0ODo0NVrOHGCXNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA5MjAyNA==", "bodyText": "This is not sufficient. Since you have different MimeMessage constructed for sendInvitationEmail() and sendUserUpdatedEmail() that should be reflected in unit testing also.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/765#discussion_r474092024", "createdAt": "2020-08-20T15:54:41Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/UserControllerTest.java", "diffHunk": "@@ -210,6 +217,8 @@ public void shouldCreateSuperAdminUser() throws Exception {\n             .andExpect(jsonPath(\"$.userId\", notNullValue()))\n             .andReturn();\n \n+    verify(emailSender, atLeastOnce()).send(isA(MimeMessage.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2017887be1d942f720a6ba278f5827bd702c55f5"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA5MjczMA==", "bodyText": "https://stackoverflow.com/questions/16854993/how-do-i-test-the-javamailsender-of-spring There is an example of testing for how MimeMessage was formed using Mockito in the second response here. I think this would be a helpful example", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/765#discussion_r474092730", "createdAt": "2020-08-20T15:55:42Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/UserControllerTest.java", "diffHunk": "@@ -210,6 +217,8 @@ public void shouldCreateSuperAdminUser() throws Exception {\n             .andExpect(jsonPath(\"$.userId\", notNullValue()))\n             .andReturn();\n \n+    verify(emailSender, atLeastOnce()).send(isA(MimeMessage.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA5MjAyNA=="}, "originalCommit": {"oid": "2017887be1d942f720a6ba278f5827bd702c55f5"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwMzA4OQ==", "bodyText": "Thanks for sharing the SO post. This configuration has been implemented in AppConfigTest class.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/765#discussion_r474503089", "createdAt": "2020-08-21T08:09:29Z", "author": {"login": "chiranjibi009"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/UserControllerTest.java", "diffHunk": "@@ -210,6 +217,8 @@ public void shouldCreateSuperAdminUser() throws Exception {\n             .andExpect(jsonPath(\"$.userId\", notNullValue()))\n             .andReturn();\n \n+    verify(emailSender, atLeastOnce()).send(isA(MimeMessage.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA5MjAyNA=="}, "originalCommit": {"oid": "2017887be1d942f720a6ba278f5827bd702c55f5"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA5MjIxNA==", "bodyText": "I looked at the AppConfigtest. I was saying that we should not just check for isA(MimeMessage.class) but also the content of the message being sent", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/765#discussion_r476092214", "createdAt": "2020-08-25T02:48:45Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/UserControllerTest.java", "diffHunk": "@@ -210,6 +217,8 @@ public void shouldCreateSuperAdminUser() throws Exception {\n             .andExpect(jsonPath(\"$.userId\", notNullValue()))\n             .andReturn();\n \n+    verify(emailSender, atLeastOnce()).send(isA(MimeMessage.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA5MjAyNA=="}, "originalCommit": {"oid": "2017887be1d942f720a6ba278f5827bd702c55f5"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NzcwMzU2OnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/UserControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMjowMDowNFrOHHxhCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMjowMDowNFrOHHxhCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzkxMzM1Mw==", "bodyText": "@chiranjibi009 I added some sample test code in here for your reference. Please make sure to test for other fields of MimeMessage, too. Sorry about missing this while reviewing PR #711. We should add a quick TODO for adding to the tests there also.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/765#discussion_r477913353", "createdAt": "2020-08-27T02:00:04Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/UserControllerTest.java", "diffHunk": "@@ -221,7 +222,10 @@ public void shouldCreateSuperAdminUser() throws Exception {\n             .andExpect(jsonPath(\"$.userId\", notNullValue()))\n             .andReturn();\n \n-    verify(emailSender, atLeastOnce()).send(isA(MimeMessage.class));\n+    ArgumentCaptor<MimeMessage> mimeMessageArgumentCaptor = ArgumentCaptor.forClass(MimeMessage.class);\n+    verify(emailSender, atLeastOnce()).send(mimeMessageArgumentCaptor.capture());\n+    MimeMessage capturedMimeMessage = mimeMessageArgumentCaptor.getValue();\n+    assertEquals(capturedMimeMessage.getAllRecipients()[0].toString(), TestConstants.USER_EMAIL_VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d142c00b39af2ae7ff7094f5029cae4f94bc0d75"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2142, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}