{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxNTY3OTM0", "number": 2234, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMjozNzozOVrOFCF0rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMzoyNTo1NFrOFCGk-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzM2ODc5OnYy", "diffSide": "RIGHT", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/ErrorCode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMjozNzozOVrOIBEMOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjoyNjoyNFrOIBnYmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk4ODE1NA==", "bodyText": "sortBy", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2234#discussion_r537988154", "createdAt": "2020-12-08T02:37:39Z", "author": {"login": "saminguyen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/ErrorCode.java", "diffHunk": "@@ -329,7 +329,13 @@\n       HttpStatus.NOT_FOUND.toString(),\n       \"This view displays app-wise enrollment if you manage multiple studies.\"),\n \n-  USER_EMAIL_EXIST(400, \"EC_0064\", Constants.BAD_REQUEST, \"The email already exists\");\n+  USER_EMAIL_EXIST(400, \"EC_0064\", Constants.BAD_REQUEST, \"The email already exists\"),\n+\n+  UNSUPPORTED_SORTBY_VALUE(\n+      400, \"EC_0076\", HttpStatus.BAD_REQUEST.toString(), \"Invalid sortby value\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fff833cbd81ee1d0dc105937bac6ab637462716"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU2NDc2MA==", "bodyText": "Changed to sortBy", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2234#discussion_r538564760", "createdAt": "2020-12-08T16:26:24Z", "author": {"login": "monica-BTC"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/ErrorCode.java", "diffHunk": "@@ -329,7 +329,13 @@\n       HttpStatus.NOT_FOUND.toString(),\n       \"This view displays app-wise enrollment if you manage multiple studies.\"),\n \n-  USER_EMAIL_EXIST(400, \"EC_0064\", Constants.BAD_REQUEST, \"The email already exists\");\n+  USER_EMAIL_EXIST(400, \"EC_0064\", Constants.BAD_REQUEST, \"The email already exists\"),\n+\n+  UNSUPPORTED_SORTBY_VALUE(\n+      400, \"EC_0076\", HttpStatus.BAD_REQUEST.toString(), \"Invalid sortby value\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk4ODE1NA=="}, "originalCommit": {"oid": "0fff833cbd81ee1d0dc105937bac6ab637462716"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzQ5MjQwOnYy", "diffSide": "RIGHT", "path": "participant-manager-datastore/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/AppControllerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMzoyNTo1NFrOIBFPew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjoyOTozOFrOIBnnbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAwNTM3MQ==", "bodyText": "check the first few participants returned to verify the sorting function", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2234#discussion_r538005371", "createdAt": "2020-12-08T03:25:54Z", "author": {"login": "saminguyen"}, "path": "participant-manager-datastore/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/AppControllerTest.java", "diffHunk": "@@ -427,6 +429,107 @@ public void shouldReturnGetAppParticipantsWithoutParticipants() throws Exception\n     verifyTokenIntrospectRequest();\n   }\n \n+  @Test\n+  public void shouldReturnAppParticipantsWithPagination() throws Exception {\n+    // Step 1 : Set studyEntity,siteEntity,locationEntity,userDetailsEntity and superAdmin to false\n+    userRegAdminEntity.setSuperAdmin(false);\n+    testDataHelper.getUserRegAdminRepository().save(userRegAdminEntity);\n+    studyEntity.setApp(appEntity);\n+    siteEntity.setStudy(studyEntity);\n+    locationEntity = testDataHelper.createLocation();\n+    siteEntity.setLocation(locationEntity);\n+    participantStudyEntity.setUserDetails(userDetailsEntity);\n+    testDataHelper.getParticipantStudyRepository().saveAndFlush(participantStudyEntity);\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.add(USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    // Step 1: 1 Participants for app already added in @BeforeEach, add 20 new Participants for\n+    // app\n+    for (int i = 1; i <= 20; i++) {\n+      userDetailsEntity = testDataHelper.newUserDetails();\n+      userDetailsEntity.setApp(appEntity);\n+      userDetailsEntity.setEmail(EMAIL_VALUE + String.valueOf(i));\n+      testDataHelper.getUserDetailsRepository().saveAndFlush(userDetailsEntity);\n+      // Pagination records should be in descending order of created timestamp\n+      // Entities are not saved in sequential order so adding delay\n+      Thread.sleep(500);\n+    }\n+\n+    // Step 2: Call API and expect GET_PARTICIPANT_REGISTRY_SUCCESS message and fetch 11 data\n+    // out of 21\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_APP_PARTICIPANTS.getPath(), appEntity.getId())\n+                .headers(headers)\n+                .param(\"limit\", \"20\")\n+                .param(\"offset\", \"10\")\n+                .param(\"sortBy\", \"registrationDate\")\n+                .param(\"sortDirection\", \"desc\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fff833cbd81ee1d0dc105937bac6ab637462716"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU2ODU1OA==", "bodyText": "Sorted By email and verified.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2234#discussion_r538568558", "createdAt": "2020-12-08T16:29:38Z", "author": {"login": "monica-BTC"}, "path": "participant-manager-datastore/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/AppControllerTest.java", "diffHunk": "@@ -427,6 +429,107 @@ public void shouldReturnGetAppParticipantsWithoutParticipants() throws Exception\n     verifyTokenIntrospectRequest();\n   }\n \n+  @Test\n+  public void shouldReturnAppParticipantsWithPagination() throws Exception {\n+    // Step 1 : Set studyEntity,siteEntity,locationEntity,userDetailsEntity and superAdmin to false\n+    userRegAdminEntity.setSuperAdmin(false);\n+    testDataHelper.getUserRegAdminRepository().save(userRegAdminEntity);\n+    studyEntity.setApp(appEntity);\n+    siteEntity.setStudy(studyEntity);\n+    locationEntity = testDataHelper.createLocation();\n+    siteEntity.setLocation(locationEntity);\n+    participantStudyEntity.setUserDetails(userDetailsEntity);\n+    testDataHelper.getParticipantStudyRepository().saveAndFlush(participantStudyEntity);\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.add(USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    // Step 1: 1 Participants for app already added in @BeforeEach, add 20 new Participants for\n+    // app\n+    for (int i = 1; i <= 20; i++) {\n+      userDetailsEntity = testDataHelper.newUserDetails();\n+      userDetailsEntity.setApp(appEntity);\n+      userDetailsEntity.setEmail(EMAIL_VALUE + String.valueOf(i));\n+      testDataHelper.getUserDetailsRepository().saveAndFlush(userDetailsEntity);\n+      // Pagination records should be in descending order of created timestamp\n+      // Entities are not saved in sequential order so adding delay\n+      Thread.sleep(500);\n+    }\n+\n+    // Step 2: Call API and expect GET_PARTICIPANT_REGISTRY_SUCCESS message and fetch 11 data\n+    // out of 21\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_APP_PARTICIPANTS.getPath(), appEntity.getId())\n+                .headers(headers)\n+                .param(\"limit\", \"20\")\n+                .param(\"offset\", \"10\")\n+                .param(\"sortBy\", \"registrationDate\")\n+                .param(\"sortDirection\", \"desc\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAwNTM3MQ=="}, "originalCommit": {"oid": "0fff833cbd81ee1d0dc105937bac6ab637462716"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1495, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}