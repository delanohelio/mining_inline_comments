{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4NjQ3MjA2", "number": 757, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNzoyNDo1MVrOEY7WoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxOTowOToyNVrOEZMCAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NTczNzI5OnYy", "diffSide": "RIGHT", "path": "response-server-module/response-server-service/src/test/java/com/google/cloud/healthcare/fdamystudies/utils/TestUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNzoyNDo1MVrOHBdQBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNzoyNDo1MVrOHBdQBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI4OTg2MA==", "bodyText": "[response-server Checks] reported by reviewdog \ud83d\udc36\nMissing a Javadoc comment.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/757#discussion_r471289860", "createdAt": "2020-08-17T07:24:51Z", "author": {"login": "github-actions"}, "path": "response-server-module/response-server-service/src/test/java/com/google/cloud/healthcare/fdamystudies/utils/TestUtils.java", "diffHunk": "@@ -26,4 +32,14 @@ public static HttpHeaders newCommonHeaders() {\n     headers.add(HttpHeaders.ACCEPT, MediaType.APPLICATION_JSON);\n     return headers;\n   }\n+\n+  public static HttpHeaders newHeadersUser() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab49e03988584b563fe01ea5227877ead5a87e11"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NTczNzMwOnYy", "diffSide": "RIGHT", "path": "response-server-module/response-server-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/ProcessActivityStateControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNzoyNDo1MVrOHBdQBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNzoyNDo1MVrOHBdQBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI4OTg2MQ==", "bodyText": "[response-server Checks] reported by reviewdog \ud83d\udc36\nDistance between variable 'headers' declaration and its first usage is 4, but allowed 3.  Consider making that variable final if you still need to store its value in advance (before method calls that might have side effects on the original value).", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/757#discussion_r471289861", "createdAt": "2020-08-17T07:24:51Z", "author": {"login": "github-actions"}, "path": "response-server-module/response-server-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/ProcessActivityStateControllerTest.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectMapper;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.readJsonFile;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import com.google.cloud.healthcare.fdamystudies.bean.ActivityStateRequestBean;\n+import com.google.cloud.healthcare.fdamystudies.common.ApiEndpoint;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantActivitiesBo;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantActivitiesRepository;\n+import com.google.cloud.healthcare.fdamystudies.service.ParticipantActivityStateResponseService;\n+import com.google.cloud.healthcare.fdamystudies.utils.TestUtils;\n+import java.util.List;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.aggregator.ArgumentsAccessor;\n+import org.junit.jupiter.params.provider.CsvSource;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.skyscreamer.jsonassert.JSONCompareMode;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.util.LinkedMultiValueMap;\n+\n+public class ProcessActivityStateControllerTest extends BaseMockIT {\n+  @Autowired ParticipantActivitiesRepository participantActivitiesRepository;\n+  @Autowired ParticipantActivityStateResponseService participantActivitiesResponseService;\n+\n+  @Test\n+  void shouldUpdateActivityState() throws Exception {\n+    HttpHeaders headers = TestUtils.newHeadersUser();\n+    String inputJsonContent = readJsonFile(\"/update_activity_state_runs_info_request.json\");\n+    // Step 1: Call API to update activity state\n+    mockMvc\n+        .perform(\n+            post(ApiEndpoint.UPDATE_ACTIVITY_STATE.getPath())\n+                .contextPath(getContextPath())\n+                .content(inputJsonContent)\n+                .headers(headers))\n+        .andDo(print())\n+        .andExpect(status().isOk());\n+\n+    ActivityStateRequestBean inputActivityStateBean =\n+        getObjectMapper().readValue(inputJsonContent, ActivityStateRequestBean.class);\n+    String studyId = inputActivityStateBean.getStudyId();\n+    String participantId = inputActivityStateBean.getParticipantId();\n+\n+    // Step 2: verify updated values\n+    List<ParticipantActivitiesBo> resultsList =\n+        participantActivitiesRepository.findByStudyIdAndParticipantId(studyId, participantId);\n+    assertNotNull(resultsList);\n+    assertEquals(1, resultsList.size());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityId(),\n+        resultsList.get(0).getActivityId());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityVersion(),\n+        resultsList.get(0).getActivityVersion());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityState(),\n+        resultsList.get(0).getActivityState());\n+\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityRun().getTotal(),\n+        resultsList.get(0).getTotal());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityRun().getCompleted(),\n+        resultsList.get(0).getCompleted());\n+  }\n+\n+  @Test\n+  void shouldGetActivityStateValidParams() throws Exception {\n+    HttpHeaders headers = TestUtils.newHeadersUser();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab49e03988584b563fe01ea5227877ead5a87e11"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NTczNzMxOnYy", "diffSide": "RIGHT", "path": "response-server-module/response-server-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/ProcessActivityStateControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNzoyNDo1MVrOHBdQBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNzoyNDo1MVrOHBdQBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI4OTg2Mg==", "bodyText": "[response-server Checks] reported by reviewdog \ud83d\udc36\nDistance between variable 'headers' declaration and its first usage is 4, but allowed 3.  Consider making that variable final if you still need to store its value in advance (before method calls that might have side effects on the original value).", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/757#discussion_r471289862", "createdAt": "2020-08-17T07:24:51Z", "author": {"login": "github-actions"}, "path": "response-server-module/response-server-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/ProcessActivityStateControllerTest.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectMapper;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.readJsonFile;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import com.google.cloud.healthcare.fdamystudies.bean.ActivityStateRequestBean;\n+import com.google.cloud.healthcare.fdamystudies.common.ApiEndpoint;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantActivitiesBo;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantActivitiesRepository;\n+import com.google.cloud.healthcare.fdamystudies.service.ParticipantActivityStateResponseService;\n+import com.google.cloud.healthcare.fdamystudies.utils.TestUtils;\n+import java.util.List;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.aggregator.ArgumentsAccessor;\n+import org.junit.jupiter.params.provider.CsvSource;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.skyscreamer.jsonassert.JSONCompareMode;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.util.LinkedMultiValueMap;\n+\n+public class ProcessActivityStateControllerTest extends BaseMockIT {\n+  @Autowired ParticipantActivitiesRepository participantActivitiesRepository;\n+  @Autowired ParticipantActivityStateResponseService participantActivitiesResponseService;\n+\n+  @Test\n+  void shouldUpdateActivityState() throws Exception {\n+    HttpHeaders headers = TestUtils.newHeadersUser();\n+    String inputJsonContent = readJsonFile(\"/update_activity_state_runs_info_request.json\");\n+    // Step 1: Call API to update activity state\n+    mockMvc\n+        .perform(\n+            post(ApiEndpoint.UPDATE_ACTIVITY_STATE.getPath())\n+                .contextPath(getContextPath())\n+                .content(inputJsonContent)\n+                .headers(headers))\n+        .andDo(print())\n+        .andExpect(status().isOk());\n+\n+    ActivityStateRequestBean inputActivityStateBean =\n+        getObjectMapper().readValue(inputJsonContent, ActivityStateRequestBean.class);\n+    String studyId = inputActivityStateBean.getStudyId();\n+    String participantId = inputActivityStateBean.getParticipantId();\n+\n+    // Step 2: verify updated values\n+    List<ParticipantActivitiesBo> resultsList =\n+        participantActivitiesRepository.findByStudyIdAndParticipantId(studyId, participantId);\n+    assertNotNull(resultsList);\n+    assertEquals(1, resultsList.size());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityId(),\n+        resultsList.get(0).getActivityId());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityVersion(),\n+        resultsList.get(0).getActivityVersion());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityState(),\n+        resultsList.get(0).getActivityState());\n+\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityRun().getTotal(),\n+        resultsList.get(0).getTotal());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityRun().getCompleted(),\n+        resultsList.get(0).getCompleted());\n+  }\n+\n+  @Test\n+  void shouldGetActivityStateValidParams() throws Exception {\n+    HttpHeaders headers = TestUtils.newHeadersUser();\n+    // Step 1: Save the activity first\n+    String inputJsonContent = readJsonFile(\"/update_activity_state_runs_info_request.json\");\n+    ActivityStateRequestBean activityStateBean =\n+        getObjectMapper().readValue(inputJsonContent, ActivityStateRequestBean.class);\n+    participantActivitiesResponseService.saveParticipantActivities(activityStateBean);\n+\n+    LinkedMultiValueMap<String, String> requestParams = new LinkedMultiValueMap<>();\n+    // Step 2: Querying activity state with parameters based on how it has been saved in the get\n+    // activity  state call above\n+    requestParams.add(\"studyId\", \"RT3\");\n+    requestParams.add(\"participantId\", \"567\");\n+\n+    // Step 3: Call API to get activity state\n+    MvcResult result =\n+        mockMvc\n+            .perform(\n+                get(ApiEndpoint.GET_ACTIVITY_STATE.getPath())\n+                    .contextPath(getContextPath())\n+                    .params(requestParams)\n+                    .headers(headers))\n+            .andDo(print())\n+            .andExpect(status().isOk())\n+            .andReturn();\n+\n+    String actualResponse = result.getResponse().getContentAsString();\n+    String expectedResponse = readJsonFile(\"/get_activity_state_runs_info_response.json\");\n+    JSONAssert.assertEquals(expectedResponse, actualResponse, JSONCompareMode.NON_EXTENSIBLE);\n+  }\n+\n+  @Test\n+  void shouldUpdateActivityStateMultiple() throws Exception {\n+    HttpHeaders headers = TestUtils.newHeadersUser();\n+    String inputJsonContent =\n+        readJsonFile(\"/update_activity_state_runs_info__multiple_request.json\");\n+    // Step 1: Call API to update activity state\n+    mockMvc\n+        .perform(\n+            post(ApiEndpoint.UPDATE_ACTIVITY_STATE.getPath())\n+                .contextPath(getContextPath())\n+                .content(inputJsonContent)\n+                .headers(headers))\n+        .andDo(print())\n+        .andExpect(status().isOk());\n+\n+    // Step 2: verify updated values\n+    ActivityStateRequestBean inputActivityStateBean =\n+        getObjectMapper().readValue(inputJsonContent, ActivityStateRequestBean.class);\n+    String studyId = inputActivityStateBean.getStudyId();\n+    String participantId = inputActivityStateBean.getParticipantId();\n+\n+    List<ParticipantActivitiesBo> resultsList =\n+        participantActivitiesRepository.findByStudyIdAndParticipantId(studyId, participantId);\n+    assertNotNull(resultsList);\n+    assertEquals(2, resultsList.size());\n+\n+    // Validate 1st activity state\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityId(),\n+        resultsList.get(0).getActivityId());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityVersion(),\n+        resultsList.get(0).getActivityVersion());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityState(),\n+        resultsList.get(0).getActivityState());\n+\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityRun().getTotal(),\n+        resultsList.get(0).getTotal());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityRun().getCompleted(),\n+        resultsList.get(0).getCompleted());\n+\n+    // Validate 2nd activity state\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(1).getActivityId(),\n+        resultsList.get(1).getActivityId());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(1).getActivityVersion(),\n+        resultsList.get(1).getActivityVersion());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(1).getActivityState(),\n+        resultsList.get(1).getActivityState());\n+\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(1).getActivityRun().getTotal(),\n+        resultsList.get(1).getTotal());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(1).getActivityRun().getCompleted(),\n+        resultsList.get(1).getCompleted());\n+  }\n+\n+  @ParameterizedTest\n+  @CsvSource({\"RT4,567\", \"RT3,568\"})\n+  void shouldGetEmptyActivityStateParamsNotFound(ArgumentsAccessor argumentsAccessor)\n+      throws Exception {\n+    HttpHeaders headers = TestUtils.newHeadersUser();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab49e03988584b563fe01ea5227877ead5a87e11"}, "originalPosition": 186}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODA1OTA1OnYy", "diffSide": "RIGHT", "path": "response-server-module/response-server-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/ProcessActivityStateControllerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzozNDo0MlrOHBzS8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODo1NzoxN1rOHIG7lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY1MTA1OQ==", "bodyText": "Please construct an ActivityStateBean within this file using set variables and refrain from using external JSON files when possible. Then for building the requestParams in line 99-100 you can just say requestParams.add(\"studyId\", TEST_ACTIVITY_STATE_BEAN.getStudyId()), and it will be clear what test case you are trying to construct without having to refer to the json file.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/757#discussion_r471651059", "createdAt": "2020-08-17T17:34:42Z", "author": {"login": "saminguyen"}, "path": "response-server-module/response-server-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/ProcessActivityStateControllerTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectMapper;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.readJsonFile;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import com.google.cloud.healthcare.fdamystudies.bean.ActivityStateRequestBean;\n+import com.google.cloud.healthcare.fdamystudies.common.ApiEndpoint;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantActivitiesBo;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantActivitiesRepository;\n+import com.google.cloud.healthcare.fdamystudies.service.ParticipantActivityStateResponseService;\n+import com.google.cloud.healthcare.fdamystudies.utils.TestUtils;\n+import java.util.List;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.aggregator.ArgumentsAccessor;\n+import org.junit.jupiter.params.provider.CsvSource;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.skyscreamer.jsonassert.JSONCompareMode;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.util.LinkedMultiValueMap;\n+\n+public class ProcessActivityStateControllerTest extends BaseMockIT {\n+  @Autowired ParticipantActivitiesRepository participantActivitiesRepository;\n+  @Autowired ParticipantActivityStateResponseService participantActivitiesResponseService;\n+\n+  @Test\n+  void shouldUpdateActivityState() throws Exception {\n+\n+    String inputJsonContent = readJsonFile(\"/update_activity_state_runs_info_request.json\");\n+    // Step 1: Call API to update activity state\n+    HttpHeaders headers = TestUtils.newHeadersUser();\n+    mockMvc\n+        .perform(\n+            post(ApiEndpoint.UPDATE_ACTIVITY_STATE.getPath())\n+                .contextPath(getContextPath())\n+                .content(inputJsonContent)\n+                .headers(headers))\n+        .andDo(print())\n+        .andExpect(status().isOk());\n+\n+    ActivityStateRequestBean inputActivityStateBean =\n+        getObjectMapper().readValue(inputJsonContent, ActivityStateRequestBean.class);\n+    String studyId = inputActivityStateBean.getStudyId();\n+    String participantId = inputActivityStateBean.getParticipantId();\n+\n+    // Step 2: verify updated values\n+    List<ParticipantActivitiesBo> resultsList =\n+        participantActivitiesRepository.findByStudyIdAndParticipantId(studyId, participantId);\n+    assertNotNull(resultsList);\n+    assertEquals(1, resultsList.size());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityId(),\n+        resultsList.get(0).getActivityId());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityVersion(),\n+        resultsList.get(0).getActivityVersion());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityState(),\n+        resultsList.get(0).getActivityState());\n+\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityRun().getTotal(),\n+        resultsList.get(0).getTotal());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityRun().getCompleted(),\n+        resultsList.get(0).getCompleted());\n+  }\n+\n+  @Test\n+  void shouldGetActivityStateValidParams() throws Exception {\n+    // Step 1: Save the activity first\n+    String inputJsonContent = readJsonFile(\"/update_activity_state_runs_info_request.json\");\n+    ActivityStateRequestBean activityStateBean =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d56331b82f9a92d2a52ce0ca157e142308407253"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI2NDIxNA==", "bodyText": "Since response server is communicating with FireStore, all the responses will be complex so to maintain consistency we are JSON files throughout response server.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/757#discussion_r478264214", "createdAt": "2020-08-27T08:57:17Z", "author": {"login": "madhurya-btc"}, "path": "response-server-module/response-server-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/ProcessActivityStateControllerTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectMapper;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.readJsonFile;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import com.google.cloud.healthcare.fdamystudies.bean.ActivityStateRequestBean;\n+import com.google.cloud.healthcare.fdamystudies.common.ApiEndpoint;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantActivitiesBo;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantActivitiesRepository;\n+import com.google.cloud.healthcare.fdamystudies.service.ParticipantActivityStateResponseService;\n+import com.google.cloud.healthcare.fdamystudies.utils.TestUtils;\n+import java.util.List;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.aggregator.ArgumentsAccessor;\n+import org.junit.jupiter.params.provider.CsvSource;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.skyscreamer.jsonassert.JSONCompareMode;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.util.LinkedMultiValueMap;\n+\n+public class ProcessActivityStateControllerTest extends BaseMockIT {\n+  @Autowired ParticipantActivitiesRepository participantActivitiesRepository;\n+  @Autowired ParticipantActivityStateResponseService participantActivitiesResponseService;\n+\n+  @Test\n+  void shouldUpdateActivityState() throws Exception {\n+\n+    String inputJsonContent = readJsonFile(\"/update_activity_state_runs_info_request.json\");\n+    // Step 1: Call API to update activity state\n+    HttpHeaders headers = TestUtils.newHeadersUser();\n+    mockMvc\n+        .perform(\n+            post(ApiEndpoint.UPDATE_ACTIVITY_STATE.getPath())\n+                .contextPath(getContextPath())\n+                .content(inputJsonContent)\n+                .headers(headers))\n+        .andDo(print())\n+        .andExpect(status().isOk());\n+\n+    ActivityStateRequestBean inputActivityStateBean =\n+        getObjectMapper().readValue(inputJsonContent, ActivityStateRequestBean.class);\n+    String studyId = inputActivityStateBean.getStudyId();\n+    String participantId = inputActivityStateBean.getParticipantId();\n+\n+    // Step 2: verify updated values\n+    List<ParticipantActivitiesBo> resultsList =\n+        participantActivitiesRepository.findByStudyIdAndParticipantId(studyId, participantId);\n+    assertNotNull(resultsList);\n+    assertEquals(1, resultsList.size());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityId(),\n+        resultsList.get(0).getActivityId());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityVersion(),\n+        resultsList.get(0).getActivityVersion());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityState(),\n+        resultsList.get(0).getActivityState());\n+\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityRun().getTotal(),\n+        resultsList.get(0).getTotal());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityRun().getCompleted(),\n+        resultsList.get(0).getCompleted());\n+  }\n+\n+  @Test\n+  void shouldGetActivityStateValidParams() throws Exception {\n+    // Step 1: Save the activity first\n+    String inputJsonContent = readJsonFile(\"/update_activity_state_runs_info_request.json\");\n+    ActivityStateRequestBean activityStateBean =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY1MTA1OQ=="}, "originalCommit": {"oid": "d56331b82f9a92d2a52ce0ca157e142308407253"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODA3NTMwOnYy", "diffSide": "RIGHT", "path": "response-server-module/response-server-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/ProcessActivityStateControllerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzozOTo0NVrOHBzdJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODo1NzoyMFrOHIG7pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY1MzY2OA==", "bodyText": "Check for values of the expected response here too without using external JSON?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/757#discussion_r471653668", "createdAt": "2020-08-17T17:39:45Z", "author": {"login": "saminguyen"}, "path": "response-server-module/response-server-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/ProcessActivityStateControllerTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectMapper;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.readJsonFile;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import com.google.cloud.healthcare.fdamystudies.bean.ActivityStateRequestBean;\n+import com.google.cloud.healthcare.fdamystudies.common.ApiEndpoint;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantActivitiesBo;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantActivitiesRepository;\n+import com.google.cloud.healthcare.fdamystudies.service.ParticipantActivityStateResponseService;\n+import com.google.cloud.healthcare.fdamystudies.utils.TestUtils;\n+import java.util.List;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.aggregator.ArgumentsAccessor;\n+import org.junit.jupiter.params.provider.CsvSource;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.skyscreamer.jsonassert.JSONCompareMode;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.util.LinkedMultiValueMap;\n+\n+public class ProcessActivityStateControllerTest extends BaseMockIT {\n+  @Autowired ParticipantActivitiesRepository participantActivitiesRepository;\n+  @Autowired ParticipantActivityStateResponseService participantActivitiesResponseService;\n+\n+  @Test\n+  void shouldUpdateActivityState() throws Exception {\n+\n+    String inputJsonContent = readJsonFile(\"/update_activity_state_runs_info_request.json\");\n+    // Step 1: Call API to update activity state\n+    HttpHeaders headers = TestUtils.newHeadersUser();\n+    mockMvc\n+        .perform(\n+            post(ApiEndpoint.UPDATE_ACTIVITY_STATE.getPath())\n+                .contextPath(getContextPath())\n+                .content(inputJsonContent)\n+                .headers(headers))\n+        .andDo(print())\n+        .andExpect(status().isOk());\n+\n+    ActivityStateRequestBean inputActivityStateBean =\n+        getObjectMapper().readValue(inputJsonContent, ActivityStateRequestBean.class);\n+    String studyId = inputActivityStateBean.getStudyId();\n+    String participantId = inputActivityStateBean.getParticipantId();\n+\n+    // Step 2: verify updated values\n+    List<ParticipantActivitiesBo> resultsList =\n+        participantActivitiesRepository.findByStudyIdAndParticipantId(studyId, participantId);\n+    assertNotNull(resultsList);\n+    assertEquals(1, resultsList.size());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityId(),\n+        resultsList.get(0).getActivityId());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityVersion(),\n+        resultsList.get(0).getActivityVersion());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityState(),\n+        resultsList.get(0).getActivityState());\n+\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityRun().getTotal(),\n+        resultsList.get(0).getTotal());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityRun().getCompleted(),\n+        resultsList.get(0).getCompleted());\n+  }\n+\n+  @Test\n+  void shouldGetActivityStateValidParams() throws Exception {\n+    // Step 1: Save the activity first\n+    String inputJsonContent = readJsonFile(\"/update_activity_state_runs_info_request.json\");\n+    ActivityStateRequestBean activityStateBean =\n+        getObjectMapper().readValue(inputJsonContent, ActivityStateRequestBean.class);\n+    participantActivitiesResponseService.saveParticipantActivities(activityStateBean);\n+\n+    LinkedMultiValueMap<String, String> requestParams = new LinkedMultiValueMap<>();\n+    // Step 2: Querying activity state with parameters based on how it has been saved in the get\n+    // activity  state call above\n+    requestParams.add(\"studyId\", \"RT3\");\n+    requestParams.add(\"participantId\", \"567\");\n+\n+    // Step 3: Call API to get activity state\n+    HttpHeaders headers = TestUtils.newHeadersUser();\n+    MvcResult result =\n+        mockMvc\n+            .perform(\n+                get(ApiEndpoint.GET_ACTIVITY_STATE.getPath())\n+                    .contextPath(getContextPath())\n+                    .params(requestParams)\n+                    .headers(headers))\n+            .andDo(print())\n+            .andExpect(status().isOk())\n+            .andReturn();\n+\n+    String actualResponse = result.getResponse().getContentAsString();\n+    String expectedResponse = readJsonFile(\"/get_activity_state_runs_info_response.json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d56331b82f9a92d2a52ce0ca157e142308407253"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI2NDIzMA==", "bodyText": "Since response server is communicating with FireStore, all the responses will be complex so to maintain consistency we are using JSON files throughout response server.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/757#discussion_r478264230", "createdAt": "2020-08-27T08:57:20Z", "author": {"login": "madhurya-btc"}, "path": "response-server-module/response-server-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/ProcessActivityStateControllerTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectMapper;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.readJsonFile;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import com.google.cloud.healthcare.fdamystudies.bean.ActivityStateRequestBean;\n+import com.google.cloud.healthcare.fdamystudies.common.ApiEndpoint;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantActivitiesBo;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantActivitiesRepository;\n+import com.google.cloud.healthcare.fdamystudies.service.ParticipantActivityStateResponseService;\n+import com.google.cloud.healthcare.fdamystudies.utils.TestUtils;\n+import java.util.List;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.aggregator.ArgumentsAccessor;\n+import org.junit.jupiter.params.provider.CsvSource;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.skyscreamer.jsonassert.JSONCompareMode;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.util.LinkedMultiValueMap;\n+\n+public class ProcessActivityStateControllerTest extends BaseMockIT {\n+  @Autowired ParticipantActivitiesRepository participantActivitiesRepository;\n+  @Autowired ParticipantActivityStateResponseService participantActivitiesResponseService;\n+\n+  @Test\n+  void shouldUpdateActivityState() throws Exception {\n+\n+    String inputJsonContent = readJsonFile(\"/update_activity_state_runs_info_request.json\");\n+    // Step 1: Call API to update activity state\n+    HttpHeaders headers = TestUtils.newHeadersUser();\n+    mockMvc\n+        .perform(\n+            post(ApiEndpoint.UPDATE_ACTIVITY_STATE.getPath())\n+                .contextPath(getContextPath())\n+                .content(inputJsonContent)\n+                .headers(headers))\n+        .andDo(print())\n+        .andExpect(status().isOk());\n+\n+    ActivityStateRequestBean inputActivityStateBean =\n+        getObjectMapper().readValue(inputJsonContent, ActivityStateRequestBean.class);\n+    String studyId = inputActivityStateBean.getStudyId();\n+    String participantId = inputActivityStateBean.getParticipantId();\n+\n+    // Step 2: verify updated values\n+    List<ParticipantActivitiesBo> resultsList =\n+        participantActivitiesRepository.findByStudyIdAndParticipantId(studyId, participantId);\n+    assertNotNull(resultsList);\n+    assertEquals(1, resultsList.size());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityId(),\n+        resultsList.get(0).getActivityId());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityVersion(),\n+        resultsList.get(0).getActivityVersion());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityState(),\n+        resultsList.get(0).getActivityState());\n+\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityRun().getTotal(),\n+        resultsList.get(0).getTotal());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityRun().getCompleted(),\n+        resultsList.get(0).getCompleted());\n+  }\n+\n+  @Test\n+  void shouldGetActivityStateValidParams() throws Exception {\n+    // Step 1: Save the activity first\n+    String inputJsonContent = readJsonFile(\"/update_activity_state_runs_info_request.json\");\n+    ActivityStateRequestBean activityStateBean =\n+        getObjectMapper().readValue(inputJsonContent, ActivityStateRequestBean.class);\n+    participantActivitiesResponseService.saveParticipantActivities(activityStateBean);\n+\n+    LinkedMultiValueMap<String, String> requestParams = new LinkedMultiValueMap<>();\n+    // Step 2: Querying activity state with parameters based on how it has been saved in the get\n+    // activity  state call above\n+    requestParams.add(\"studyId\", \"RT3\");\n+    requestParams.add(\"participantId\", \"567\");\n+\n+    // Step 3: Call API to get activity state\n+    HttpHeaders headers = TestUtils.newHeadersUser();\n+    MvcResult result =\n+        mockMvc\n+            .perform(\n+                get(ApiEndpoint.GET_ACTIVITY_STATE.getPath())\n+                    .contextPath(getContextPath())\n+                    .params(requestParams)\n+                    .headers(headers))\n+            .andDo(print())\n+            .andExpect(status().isOk())\n+            .andReturn();\n+\n+    String actualResponse = result.getResponse().getContentAsString();\n+    String expectedResponse = readJsonFile(\"/get_activity_state_runs_info_response.json\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY1MzY2OA=="}, "originalCommit": {"oid": "d56331b82f9a92d2a52ce0ca157e142308407253"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODEwNTQzOnYy", "diffSide": "RIGHT", "path": "response-server-module/response-server-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/ProcessActivityStateControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzo0ODoxOVrOHBzuxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzo0ODoxOVrOHBzuxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY1ODE4Mw==", "bodyText": "Please reorder the Tests in this class - all get-activity-state tests then all the update-activity-state tests.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/757#discussion_r471658183", "createdAt": "2020-08-17T17:48:19Z", "author": {"login": "saminguyen"}, "path": "response-server-module/response-server-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/ProcessActivityStateControllerTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectMapper;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.readJsonFile;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import com.google.cloud.healthcare.fdamystudies.bean.ActivityStateRequestBean;\n+import com.google.cloud.healthcare.fdamystudies.common.ApiEndpoint;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantActivitiesBo;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantActivitiesRepository;\n+import com.google.cloud.healthcare.fdamystudies.service.ParticipantActivityStateResponseService;\n+import com.google.cloud.healthcare.fdamystudies.utils.TestUtils;\n+import java.util.List;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.aggregator.ArgumentsAccessor;\n+import org.junit.jupiter.params.provider.CsvSource;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.skyscreamer.jsonassert.JSONCompareMode;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.util.LinkedMultiValueMap;\n+\n+public class ProcessActivityStateControllerTest extends BaseMockIT {\n+  @Autowired ParticipantActivitiesRepository participantActivitiesRepository;\n+  @Autowired ParticipantActivityStateResponseService participantActivitiesResponseService;\n+\n+  @Test\n+  void shouldUpdateActivityState() throws Exception {\n+\n+    String inputJsonContent = readJsonFile(\"/update_activity_state_runs_info_request.json\");\n+    // Step 1: Call API to update activity state\n+    HttpHeaders headers = TestUtils.newHeadersUser();\n+    mockMvc\n+        .perform(\n+            post(ApiEndpoint.UPDATE_ACTIVITY_STATE.getPath())\n+                .contextPath(getContextPath())\n+                .content(inputJsonContent)\n+                .headers(headers))\n+        .andDo(print())\n+        .andExpect(status().isOk());\n+\n+    ActivityStateRequestBean inputActivityStateBean =\n+        getObjectMapper().readValue(inputJsonContent, ActivityStateRequestBean.class);\n+    String studyId = inputActivityStateBean.getStudyId();\n+    String participantId = inputActivityStateBean.getParticipantId();\n+\n+    // Step 2: verify updated values\n+    List<ParticipantActivitiesBo> resultsList =\n+        participantActivitiesRepository.findByStudyIdAndParticipantId(studyId, participantId);\n+    assertNotNull(resultsList);\n+    assertEquals(1, resultsList.size());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityId(),\n+        resultsList.get(0).getActivityId());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityVersion(),\n+        resultsList.get(0).getActivityVersion());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityState(),\n+        resultsList.get(0).getActivityState());\n+\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityRun().getTotal(),\n+        resultsList.get(0).getTotal());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityRun().getCompleted(),\n+        resultsList.get(0).getCompleted());\n+  }\n+\n+  @Test\n+  void shouldGetActivityStateValidParams() throws Exception {\n+    // Step 1: Save the activity first\n+    String inputJsonContent = readJsonFile(\"/update_activity_state_runs_info_request.json\");\n+    ActivityStateRequestBean activityStateBean =\n+        getObjectMapper().readValue(inputJsonContent, ActivityStateRequestBean.class);\n+    participantActivitiesResponseService.saveParticipantActivities(activityStateBean);\n+\n+    LinkedMultiValueMap<String, String> requestParams = new LinkedMultiValueMap<>();\n+    // Step 2: Querying activity state with parameters based on how it has been saved in the get\n+    // activity  state call above\n+    requestParams.add(\"studyId\", \"RT3\");\n+    requestParams.add(\"participantId\", \"567\");\n+\n+    // Step 3: Call API to get activity state\n+    HttpHeaders headers = TestUtils.newHeadersUser();\n+    MvcResult result =\n+        mockMvc\n+            .perform(\n+                get(ApiEndpoint.GET_ACTIVITY_STATE.getPath())\n+                    .contextPath(getContextPath())\n+                    .params(requestParams)\n+                    .headers(headers))\n+            .andDo(print())\n+            .andExpect(status().isOk())\n+            .andReturn();\n+\n+    String actualResponse = result.getResponse().getContentAsString();\n+    String expectedResponse = readJsonFile(\"/get_activity_state_runs_info_response.json\");\n+    JSONAssert.assertEquals(expectedResponse, actualResponse, JSONCompareMode.NON_EXTENSIBLE);\n+  }\n+\n+  @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d56331b82f9a92d2a52ce0ca157e142308407253"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODMzODI3OnYy", "diffSide": "RIGHT", "path": "response-server-module/response-server-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/ProcessActivityStateControllerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxODozODowNFrOHB2HhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxODozODowNFrOHB2HhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY5NzI4NA==", "bodyText": "same as above", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/757#discussion_r471697284", "createdAt": "2020-08-17T18:38:04Z", "author": {"login": "saminguyen"}, "path": "response-server-module/response-server-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/ProcessActivityStateControllerTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectMapper;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.readJsonFile;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import com.google.cloud.healthcare.fdamystudies.bean.ActivityStateRequestBean;\n+import com.google.cloud.healthcare.fdamystudies.common.ApiEndpoint;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantActivitiesBo;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantActivitiesRepository;\n+import com.google.cloud.healthcare.fdamystudies.service.ParticipantActivityStateResponseService;\n+import com.google.cloud.healthcare.fdamystudies.utils.TestUtils;\n+import java.util.List;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.aggregator.ArgumentsAccessor;\n+import org.junit.jupiter.params.provider.CsvSource;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.skyscreamer.jsonassert.JSONCompareMode;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.util.LinkedMultiValueMap;\n+\n+public class ProcessActivityStateControllerTest extends BaseMockIT {\n+  @Autowired ParticipantActivitiesRepository participantActivitiesRepository;\n+  @Autowired ParticipantActivityStateResponseService participantActivitiesResponseService;\n+\n+  @Test\n+  void shouldUpdateActivityState() throws Exception {\n+\n+    String inputJsonContent = readJsonFile(\"/update_activity_state_runs_info_request.json\");\n+    // Step 1: Call API to update activity state\n+    HttpHeaders headers = TestUtils.newHeadersUser();\n+    mockMvc\n+        .perform(\n+            post(ApiEndpoint.UPDATE_ACTIVITY_STATE.getPath())\n+                .contextPath(getContextPath())\n+                .content(inputJsonContent)\n+                .headers(headers))\n+        .andDo(print())\n+        .andExpect(status().isOk());\n+\n+    ActivityStateRequestBean inputActivityStateBean =\n+        getObjectMapper().readValue(inputJsonContent, ActivityStateRequestBean.class);\n+    String studyId = inputActivityStateBean.getStudyId();\n+    String participantId = inputActivityStateBean.getParticipantId();\n+\n+    // Step 2: verify updated values\n+    List<ParticipantActivitiesBo> resultsList =\n+        participantActivitiesRepository.findByStudyIdAndParticipantId(studyId, participantId);\n+    assertNotNull(resultsList);\n+    assertEquals(1, resultsList.size());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityId(),\n+        resultsList.get(0).getActivityId());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityVersion(),\n+        resultsList.get(0).getActivityVersion());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityState(),\n+        resultsList.get(0).getActivityState());\n+\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityRun().getTotal(),\n+        resultsList.get(0).getTotal());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityRun().getCompleted(),\n+        resultsList.get(0).getCompleted());\n+  }\n+\n+  @Test\n+  void shouldGetActivityStateValidParams() throws Exception {\n+    // Step 1: Save the activity first\n+    String inputJsonContent = readJsonFile(\"/update_activity_state_runs_info_request.json\");\n+    ActivityStateRequestBean activityStateBean =\n+        getObjectMapper().readValue(inputJsonContent, ActivityStateRequestBean.class);\n+    participantActivitiesResponseService.saveParticipantActivities(activityStateBean);\n+\n+    LinkedMultiValueMap<String, String> requestParams = new LinkedMultiValueMap<>();\n+    // Step 2: Querying activity state with parameters based on how it has been saved in the get\n+    // activity  state call above\n+    requestParams.add(\"studyId\", \"RT3\");\n+    requestParams.add(\"participantId\", \"567\");\n+\n+    // Step 3: Call API to get activity state\n+    HttpHeaders headers = TestUtils.newHeadersUser();\n+    MvcResult result =\n+        mockMvc\n+            .perform(\n+                get(ApiEndpoint.GET_ACTIVITY_STATE.getPath())\n+                    .contextPath(getContextPath())\n+                    .params(requestParams)\n+                    .headers(headers))\n+            .andDo(print())\n+            .andExpect(status().isOk())\n+            .andReturn();\n+\n+    String actualResponse = result.getResponse().getContentAsString();\n+    String expectedResponse = readJsonFile(\"/get_activity_state_runs_info_response.json\");\n+    JSONAssert.assertEquals(expectedResponse, actualResponse, JSONCompareMode.NON_EXTENSIBLE);\n+  }\n+\n+  @Test\n+  void shouldUpdateActivityStateMultiple() throws Exception {\n+\n+    String inputJsonContent =\n+        readJsonFile(\"/update_activity_state_runs_info__multiple_request.json\");\n+    // Step 1: Call API to update activity state\n+    HttpHeaders headers = TestUtils.newHeadersUser();\n+    mockMvc\n+        .perform(\n+            post(ApiEndpoint.UPDATE_ACTIVITY_STATE.getPath())\n+                .contextPath(getContextPath())\n+                .content(inputJsonContent)\n+                .headers(headers))\n+        .andDo(print())\n+        .andExpect(status().isOk());\n+\n+    // Step 2: verify updated values\n+    ActivityStateRequestBean inputActivityStateBean =\n+        getObjectMapper().readValue(inputJsonContent, ActivityStateRequestBean.class);\n+    String studyId = inputActivityStateBean.getStudyId();\n+    String participantId = inputActivityStateBean.getParticipantId();\n+\n+    List<ParticipantActivitiesBo> resultsList =\n+        participantActivitiesRepository.findByStudyIdAndParticipantId(studyId, participantId);\n+    assertNotNull(resultsList);\n+    assertEquals(2, resultsList.size());\n+\n+    // Validate 1st activity state\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityId(),\n+        resultsList.get(0).getActivityId());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityVersion(),\n+        resultsList.get(0).getActivityVersion());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityState(),\n+        resultsList.get(0).getActivityState());\n+\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityRun().getTotal(),\n+        resultsList.get(0).getTotal());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityRun().getCompleted(),\n+        resultsList.get(0).getCompleted());\n+\n+    // Validate 2nd activity state\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(1).getActivityId(),\n+        resultsList.get(1).getActivityId());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(1).getActivityVersion(),\n+        resultsList.get(1).getActivityVersion());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(1).getActivityState(),\n+        resultsList.get(1).getActivityState());\n+\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(1).getActivityRun().getTotal(),\n+        resultsList.get(1).getTotal());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(1).getActivityRun().getCompleted(),\n+        resultsList.get(1).getCompleted());\n+  }\n+\n+  @ParameterizedTest\n+  @CsvSource({\"RT4,567\", \"RT3,568\"})\n+  void shouldGetEmptyActivityStateParamsNotFound(ArgumentsAccessor argumentsAccessor)\n+      throws Exception {\n+    // Step 1: Save the activity first\n+    String inputJsonContent = readJsonFile(\"/update_activity_state_runs_info_request.json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d56331b82f9a92d2a52ce0ca157e142308407253"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODM2MDUzOnYy", "diffSide": "RIGHT", "path": "response-server-module/response-server-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/ProcessActivityStateControllerTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxODo0MTowMFrOHB2XOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNzo1NDowMFrOHIbKeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcwMTMwNg==", "bodyText": "You can just check for empty array and failure message here. No need for the short external json file", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/757#discussion_r471701306", "createdAt": "2020-08-17T18:41:00Z", "author": {"login": "saminguyen"}, "path": "response-server-module/response-server-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/ProcessActivityStateControllerTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectMapper;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.readJsonFile;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import com.google.cloud.healthcare.fdamystudies.bean.ActivityStateRequestBean;\n+import com.google.cloud.healthcare.fdamystudies.common.ApiEndpoint;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantActivitiesBo;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantActivitiesRepository;\n+import com.google.cloud.healthcare.fdamystudies.service.ParticipantActivityStateResponseService;\n+import com.google.cloud.healthcare.fdamystudies.utils.TestUtils;\n+import java.util.List;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.aggregator.ArgumentsAccessor;\n+import org.junit.jupiter.params.provider.CsvSource;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.skyscreamer.jsonassert.JSONCompareMode;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.util.LinkedMultiValueMap;\n+\n+public class ProcessActivityStateControllerTest extends BaseMockIT {\n+  @Autowired ParticipantActivitiesRepository participantActivitiesRepository;\n+  @Autowired ParticipantActivityStateResponseService participantActivitiesResponseService;\n+\n+  @Test\n+  void shouldUpdateActivityState() throws Exception {\n+\n+    String inputJsonContent = readJsonFile(\"/update_activity_state_runs_info_request.json\");\n+    // Step 1: Call API to update activity state\n+    HttpHeaders headers = TestUtils.newHeadersUser();\n+    mockMvc\n+        .perform(\n+            post(ApiEndpoint.UPDATE_ACTIVITY_STATE.getPath())\n+                .contextPath(getContextPath())\n+                .content(inputJsonContent)\n+                .headers(headers))\n+        .andDo(print())\n+        .andExpect(status().isOk());\n+\n+    ActivityStateRequestBean inputActivityStateBean =\n+        getObjectMapper().readValue(inputJsonContent, ActivityStateRequestBean.class);\n+    String studyId = inputActivityStateBean.getStudyId();\n+    String participantId = inputActivityStateBean.getParticipantId();\n+\n+    // Step 2: verify updated values\n+    List<ParticipantActivitiesBo> resultsList =\n+        participantActivitiesRepository.findByStudyIdAndParticipantId(studyId, participantId);\n+    assertNotNull(resultsList);\n+    assertEquals(1, resultsList.size());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityId(),\n+        resultsList.get(0).getActivityId());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityVersion(),\n+        resultsList.get(0).getActivityVersion());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityState(),\n+        resultsList.get(0).getActivityState());\n+\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityRun().getTotal(),\n+        resultsList.get(0).getTotal());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityRun().getCompleted(),\n+        resultsList.get(0).getCompleted());\n+  }\n+\n+  @Test\n+  void shouldGetActivityStateValidParams() throws Exception {\n+    // Step 1: Save the activity first\n+    String inputJsonContent = readJsonFile(\"/update_activity_state_runs_info_request.json\");\n+    ActivityStateRequestBean activityStateBean =\n+        getObjectMapper().readValue(inputJsonContent, ActivityStateRequestBean.class);\n+    participantActivitiesResponseService.saveParticipantActivities(activityStateBean);\n+\n+    LinkedMultiValueMap<String, String> requestParams = new LinkedMultiValueMap<>();\n+    // Step 2: Querying activity state with parameters based on how it has been saved in the get\n+    // activity  state call above\n+    requestParams.add(\"studyId\", \"RT3\");\n+    requestParams.add(\"participantId\", \"567\");\n+\n+    // Step 3: Call API to get activity state\n+    HttpHeaders headers = TestUtils.newHeadersUser();\n+    MvcResult result =\n+        mockMvc\n+            .perform(\n+                get(ApiEndpoint.GET_ACTIVITY_STATE.getPath())\n+                    .contextPath(getContextPath())\n+                    .params(requestParams)\n+                    .headers(headers))\n+            .andDo(print())\n+            .andExpect(status().isOk())\n+            .andReturn();\n+\n+    String actualResponse = result.getResponse().getContentAsString();\n+    String expectedResponse = readJsonFile(\"/get_activity_state_runs_info_response.json\");\n+    JSONAssert.assertEquals(expectedResponse, actualResponse, JSONCompareMode.NON_EXTENSIBLE);\n+  }\n+\n+  @Test\n+  void shouldUpdateActivityStateMultiple() throws Exception {\n+\n+    String inputJsonContent =\n+        readJsonFile(\"/update_activity_state_runs_info__multiple_request.json\");\n+    // Step 1: Call API to update activity state\n+    HttpHeaders headers = TestUtils.newHeadersUser();\n+    mockMvc\n+        .perform(\n+            post(ApiEndpoint.UPDATE_ACTIVITY_STATE.getPath())\n+                .contextPath(getContextPath())\n+                .content(inputJsonContent)\n+                .headers(headers))\n+        .andDo(print())\n+        .andExpect(status().isOk());\n+\n+    // Step 2: verify updated values\n+    ActivityStateRequestBean inputActivityStateBean =\n+        getObjectMapper().readValue(inputJsonContent, ActivityStateRequestBean.class);\n+    String studyId = inputActivityStateBean.getStudyId();\n+    String participantId = inputActivityStateBean.getParticipantId();\n+\n+    List<ParticipantActivitiesBo> resultsList =\n+        participantActivitiesRepository.findByStudyIdAndParticipantId(studyId, participantId);\n+    assertNotNull(resultsList);\n+    assertEquals(2, resultsList.size());\n+\n+    // Validate 1st activity state\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityId(),\n+        resultsList.get(0).getActivityId());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityVersion(),\n+        resultsList.get(0).getActivityVersion());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityState(),\n+        resultsList.get(0).getActivityState());\n+\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityRun().getTotal(),\n+        resultsList.get(0).getTotal());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityRun().getCompleted(),\n+        resultsList.get(0).getCompleted());\n+\n+    // Validate 2nd activity state\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(1).getActivityId(),\n+        resultsList.get(1).getActivityId());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(1).getActivityVersion(),\n+        resultsList.get(1).getActivityVersion());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(1).getActivityState(),\n+        resultsList.get(1).getActivityState());\n+\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(1).getActivityRun().getTotal(),\n+        resultsList.get(1).getTotal());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(1).getActivityRun().getCompleted(),\n+        resultsList.get(1).getCompleted());\n+  }\n+\n+  @ParameterizedTest\n+  @CsvSource({\"RT4,567\", \"RT3,568\"})\n+  void shouldGetEmptyActivityStateParamsNotFound(ArgumentsAccessor argumentsAccessor)\n+      throws Exception {\n+    // Step 1: Save the activity first\n+    String inputJsonContent = readJsonFile(\"/update_activity_state_runs_info_request.json\");\n+    ActivityStateRequestBean activityStateBean =\n+        getObjectMapper().readValue(inputJsonContent, ActivityStateRequestBean.class);\n+    participantActivitiesResponseService.saveParticipantActivities(activityStateBean);\n+\n+    LinkedMultiValueMap<String, String> requestParams = new LinkedMultiValueMap<>();\n+    // Step 2: Querying activity state with parameters, which are different from how it has been\n+    // saved in the save activity call above\n+    String studyIdArg = argumentsAccessor.getString(0);\n+    String participantIdArg = argumentsAccessor.getString(1);\n+    requestParams.add(\"studyId\", studyIdArg);\n+    requestParams.add(\"participantId\", participantIdArg);\n+\n+    // Step 3: Call API to update activity state\n+    HttpHeaders headers = TestUtils.newHeadersUser();\n+    MvcResult result =\n+        mockMvc\n+            .perform(\n+                get(ApiEndpoint.GET_ACTIVITY_STATE.getPath())\n+                    .contextPath(getContextPath())\n+                    .params(requestParams)\n+                    .headers(headers))\n+            .andDo(print())\n+            .andExpect(status().isOk())\n+            .andExpect(jsonPath(\"$.activities\").isArray())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d56331b82f9a92d2a52ce0ca157e142308407253"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI2NDI1Mg==", "bodyText": "Since response server is communicating with FireStore, all the responses will be complex so to maintain consistency we are using JSON files throughout response server.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/757#discussion_r478264252", "createdAt": "2020-08-27T08:57:23Z", "author": {"login": "madhurya-btc"}, "path": "response-server-module/response-server-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/ProcessActivityStateControllerTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectMapper;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.readJsonFile;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import com.google.cloud.healthcare.fdamystudies.bean.ActivityStateRequestBean;\n+import com.google.cloud.healthcare.fdamystudies.common.ApiEndpoint;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantActivitiesBo;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantActivitiesRepository;\n+import com.google.cloud.healthcare.fdamystudies.service.ParticipantActivityStateResponseService;\n+import com.google.cloud.healthcare.fdamystudies.utils.TestUtils;\n+import java.util.List;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.aggregator.ArgumentsAccessor;\n+import org.junit.jupiter.params.provider.CsvSource;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.skyscreamer.jsonassert.JSONCompareMode;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.util.LinkedMultiValueMap;\n+\n+public class ProcessActivityStateControllerTest extends BaseMockIT {\n+  @Autowired ParticipantActivitiesRepository participantActivitiesRepository;\n+  @Autowired ParticipantActivityStateResponseService participantActivitiesResponseService;\n+\n+  @Test\n+  void shouldUpdateActivityState() throws Exception {\n+\n+    String inputJsonContent = readJsonFile(\"/update_activity_state_runs_info_request.json\");\n+    // Step 1: Call API to update activity state\n+    HttpHeaders headers = TestUtils.newHeadersUser();\n+    mockMvc\n+        .perform(\n+            post(ApiEndpoint.UPDATE_ACTIVITY_STATE.getPath())\n+                .contextPath(getContextPath())\n+                .content(inputJsonContent)\n+                .headers(headers))\n+        .andDo(print())\n+        .andExpect(status().isOk());\n+\n+    ActivityStateRequestBean inputActivityStateBean =\n+        getObjectMapper().readValue(inputJsonContent, ActivityStateRequestBean.class);\n+    String studyId = inputActivityStateBean.getStudyId();\n+    String participantId = inputActivityStateBean.getParticipantId();\n+\n+    // Step 2: verify updated values\n+    List<ParticipantActivitiesBo> resultsList =\n+        participantActivitiesRepository.findByStudyIdAndParticipantId(studyId, participantId);\n+    assertNotNull(resultsList);\n+    assertEquals(1, resultsList.size());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityId(),\n+        resultsList.get(0).getActivityId());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityVersion(),\n+        resultsList.get(0).getActivityVersion());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityState(),\n+        resultsList.get(0).getActivityState());\n+\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityRun().getTotal(),\n+        resultsList.get(0).getTotal());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityRun().getCompleted(),\n+        resultsList.get(0).getCompleted());\n+  }\n+\n+  @Test\n+  void shouldGetActivityStateValidParams() throws Exception {\n+    // Step 1: Save the activity first\n+    String inputJsonContent = readJsonFile(\"/update_activity_state_runs_info_request.json\");\n+    ActivityStateRequestBean activityStateBean =\n+        getObjectMapper().readValue(inputJsonContent, ActivityStateRequestBean.class);\n+    participantActivitiesResponseService.saveParticipantActivities(activityStateBean);\n+\n+    LinkedMultiValueMap<String, String> requestParams = new LinkedMultiValueMap<>();\n+    // Step 2: Querying activity state with parameters based on how it has been saved in the get\n+    // activity  state call above\n+    requestParams.add(\"studyId\", \"RT3\");\n+    requestParams.add(\"participantId\", \"567\");\n+\n+    // Step 3: Call API to get activity state\n+    HttpHeaders headers = TestUtils.newHeadersUser();\n+    MvcResult result =\n+        mockMvc\n+            .perform(\n+                get(ApiEndpoint.GET_ACTIVITY_STATE.getPath())\n+                    .contextPath(getContextPath())\n+                    .params(requestParams)\n+                    .headers(headers))\n+            .andDo(print())\n+            .andExpect(status().isOk())\n+            .andReturn();\n+\n+    String actualResponse = result.getResponse().getContentAsString();\n+    String expectedResponse = readJsonFile(\"/get_activity_state_runs_info_response.json\");\n+    JSONAssert.assertEquals(expectedResponse, actualResponse, JSONCompareMode.NON_EXTENSIBLE);\n+  }\n+\n+  @Test\n+  void shouldUpdateActivityStateMultiple() throws Exception {\n+\n+    String inputJsonContent =\n+        readJsonFile(\"/update_activity_state_runs_info__multiple_request.json\");\n+    // Step 1: Call API to update activity state\n+    HttpHeaders headers = TestUtils.newHeadersUser();\n+    mockMvc\n+        .perform(\n+            post(ApiEndpoint.UPDATE_ACTIVITY_STATE.getPath())\n+                .contextPath(getContextPath())\n+                .content(inputJsonContent)\n+                .headers(headers))\n+        .andDo(print())\n+        .andExpect(status().isOk());\n+\n+    // Step 2: verify updated values\n+    ActivityStateRequestBean inputActivityStateBean =\n+        getObjectMapper().readValue(inputJsonContent, ActivityStateRequestBean.class);\n+    String studyId = inputActivityStateBean.getStudyId();\n+    String participantId = inputActivityStateBean.getParticipantId();\n+\n+    List<ParticipantActivitiesBo> resultsList =\n+        participantActivitiesRepository.findByStudyIdAndParticipantId(studyId, participantId);\n+    assertNotNull(resultsList);\n+    assertEquals(2, resultsList.size());\n+\n+    // Validate 1st activity state\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityId(),\n+        resultsList.get(0).getActivityId());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityVersion(),\n+        resultsList.get(0).getActivityVersion());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityState(),\n+        resultsList.get(0).getActivityState());\n+\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityRun().getTotal(),\n+        resultsList.get(0).getTotal());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityRun().getCompleted(),\n+        resultsList.get(0).getCompleted());\n+\n+    // Validate 2nd activity state\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(1).getActivityId(),\n+        resultsList.get(1).getActivityId());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(1).getActivityVersion(),\n+        resultsList.get(1).getActivityVersion());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(1).getActivityState(),\n+        resultsList.get(1).getActivityState());\n+\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(1).getActivityRun().getTotal(),\n+        resultsList.get(1).getTotal());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(1).getActivityRun().getCompleted(),\n+        resultsList.get(1).getCompleted());\n+  }\n+\n+  @ParameterizedTest\n+  @CsvSource({\"RT4,567\", \"RT3,568\"})\n+  void shouldGetEmptyActivityStateParamsNotFound(ArgumentsAccessor argumentsAccessor)\n+      throws Exception {\n+    // Step 1: Save the activity first\n+    String inputJsonContent = readJsonFile(\"/update_activity_state_runs_info_request.json\");\n+    ActivityStateRequestBean activityStateBean =\n+        getObjectMapper().readValue(inputJsonContent, ActivityStateRequestBean.class);\n+    participantActivitiesResponseService.saveParticipantActivities(activityStateBean);\n+\n+    LinkedMultiValueMap<String, String> requestParams = new LinkedMultiValueMap<>();\n+    // Step 2: Querying activity state with parameters, which are different from how it has been\n+    // saved in the save activity call above\n+    String studyIdArg = argumentsAccessor.getString(0);\n+    String participantIdArg = argumentsAccessor.getString(1);\n+    requestParams.add(\"studyId\", studyIdArg);\n+    requestParams.add(\"participantId\", participantIdArg);\n+\n+    // Step 3: Call API to update activity state\n+    HttpHeaders headers = TestUtils.newHeadersUser();\n+    MvcResult result =\n+        mockMvc\n+            .perform(\n+                get(ApiEndpoint.GET_ACTIVITY_STATE.getPath())\n+                    .contextPath(getContextPath())\n+                    .params(requestParams)\n+                    .headers(headers))\n+            .andDo(print())\n+            .andExpect(status().isOk())\n+            .andExpect(jsonPath(\"$.activities\").isArray())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcwMTMwNg=="}, "originalCommit": {"oid": "d56331b82f9a92d2a52ce0ca157e142308407253"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU5NTcwNA==", "bodyText": "Ok", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/757#discussion_r478595704", "createdAt": "2020-08-27T17:54:00Z", "author": {"login": "saminguyen"}, "path": "response-server-module/response-server-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/ProcessActivityStateControllerTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectMapper;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.readJsonFile;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import com.google.cloud.healthcare.fdamystudies.bean.ActivityStateRequestBean;\n+import com.google.cloud.healthcare.fdamystudies.common.ApiEndpoint;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantActivitiesBo;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantActivitiesRepository;\n+import com.google.cloud.healthcare.fdamystudies.service.ParticipantActivityStateResponseService;\n+import com.google.cloud.healthcare.fdamystudies.utils.TestUtils;\n+import java.util.List;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.aggregator.ArgumentsAccessor;\n+import org.junit.jupiter.params.provider.CsvSource;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.skyscreamer.jsonassert.JSONCompareMode;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.util.LinkedMultiValueMap;\n+\n+public class ProcessActivityStateControllerTest extends BaseMockIT {\n+  @Autowired ParticipantActivitiesRepository participantActivitiesRepository;\n+  @Autowired ParticipantActivityStateResponseService participantActivitiesResponseService;\n+\n+  @Test\n+  void shouldUpdateActivityState() throws Exception {\n+\n+    String inputJsonContent = readJsonFile(\"/update_activity_state_runs_info_request.json\");\n+    // Step 1: Call API to update activity state\n+    HttpHeaders headers = TestUtils.newHeadersUser();\n+    mockMvc\n+        .perform(\n+            post(ApiEndpoint.UPDATE_ACTIVITY_STATE.getPath())\n+                .contextPath(getContextPath())\n+                .content(inputJsonContent)\n+                .headers(headers))\n+        .andDo(print())\n+        .andExpect(status().isOk());\n+\n+    ActivityStateRequestBean inputActivityStateBean =\n+        getObjectMapper().readValue(inputJsonContent, ActivityStateRequestBean.class);\n+    String studyId = inputActivityStateBean.getStudyId();\n+    String participantId = inputActivityStateBean.getParticipantId();\n+\n+    // Step 2: verify updated values\n+    List<ParticipantActivitiesBo> resultsList =\n+        participantActivitiesRepository.findByStudyIdAndParticipantId(studyId, participantId);\n+    assertNotNull(resultsList);\n+    assertEquals(1, resultsList.size());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityId(),\n+        resultsList.get(0).getActivityId());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityVersion(),\n+        resultsList.get(0).getActivityVersion());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityState(),\n+        resultsList.get(0).getActivityState());\n+\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityRun().getTotal(),\n+        resultsList.get(0).getTotal());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityRun().getCompleted(),\n+        resultsList.get(0).getCompleted());\n+  }\n+\n+  @Test\n+  void shouldGetActivityStateValidParams() throws Exception {\n+    // Step 1: Save the activity first\n+    String inputJsonContent = readJsonFile(\"/update_activity_state_runs_info_request.json\");\n+    ActivityStateRequestBean activityStateBean =\n+        getObjectMapper().readValue(inputJsonContent, ActivityStateRequestBean.class);\n+    participantActivitiesResponseService.saveParticipantActivities(activityStateBean);\n+\n+    LinkedMultiValueMap<String, String> requestParams = new LinkedMultiValueMap<>();\n+    // Step 2: Querying activity state with parameters based on how it has been saved in the get\n+    // activity  state call above\n+    requestParams.add(\"studyId\", \"RT3\");\n+    requestParams.add(\"participantId\", \"567\");\n+\n+    // Step 3: Call API to get activity state\n+    HttpHeaders headers = TestUtils.newHeadersUser();\n+    MvcResult result =\n+        mockMvc\n+            .perform(\n+                get(ApiEndpoint.GET_ACTIVITY_STATE.getPath())\n+                    .contextPath(getContextPath())\n+                    .params(requestParams)\n+                    .headers(headers))\n+            .andDo(print())\n+            .andExpect(status().isOk())\n+            .andReturn();\n+\n+    String actualResponse = result.getResponse().getContentAsString();\n+    String expectedResponse = readJsonFile(\"/get_activity_state_runs_info_response.json\");\n+    JSONAssert.assertEquals(expectedResponse, actualResponse, JSONCompareMode.NON_EXTENSIBLE);\n+  }\n+\n+  @Test\n+  void shouldUpdateActivityStateMultiple() throws Exception {\n+\n+    String inputJsonContent =\n+        readJsonFile(\"/update_activity_state_runs_info__multiple_request.json\");\n+    // Step 1: Call API to update activity state\n+    HttpHeaders headers = TestUtils.newHeadersUser();\n+    mockMvc\n+        .perform(\n+            post(ApiEndpoint.UPDATE_ACTIVITY_STATE.getPath())\n+                .contextPath(getContextPath())\n+                .content(inputJsonContent)\n+                .headers(headers))\n+        .andDo(print())\n+        .andExpect(status().isOk());\n+\n+    // Step 2: verify updated values\n+    ActivityStateRequestBean inputActivityStateBean =\n+        getObjectMapper().readValue(inputJsonContent, ActivityStateRequestBean.class);\n+    String studyId = inputActivityStateBean.getStudyId();\n+    String participantId = inputActivityStateBean.getParticipantId();\n+\n+    List<ParticipantActivitiesBo> resultsList =\n+        participantActivitiesRepository.findByStudyIdAndParticipantId(studyId, participantId);\n+    assertNotNull(resultsList);\n+    assertEquals(2, resultsList.size());\n+\n+    // Validate 1st activity state\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityId(),\n+        resultsList.get(0).getActivityId());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityVersion(),\n+        resultsList.get(0).getActivityVersion());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityState(),\n+        resultsList.get(0).getActivityState());\n+\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityRun().getTotal(),\n+        resultsList.get(0).getTotal());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityRun().getCompleted(),\n+        resultsList.get(0).getCompleted());\n+\n+    // Validate 2nd activity state\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(1).getActivityId(),\n+        resultsList.get(1).getActivityId());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(1).getActivityVersion(),\n+        resultsList.get(1).getActivityVersion());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(1).getActivityState(),\n+        resultsList.get(1).getActivityState());\n+\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(1).getActivityRun().getTotal(),\n+        resultsList.get(1).getTotal());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(1).getActivityRun().getCompleted(),\n+        resultsList.get(1).getCompleted());\n+  }\n+\n+  @ParameterizedTest\n+  @CsvSource({\"RT4,567\", \"RT3,568\"})\n+  void shouldGetEmptyActivityStateParamsNotFound(ArgumentsAccessor argumentsAccessor)\n+      throws Exception {\n+    // Step 1: Save the activity first\n+    String inputJsonContent = readJsonFile(\"/update_activity_state_runs_info_request.json\");\n+    ActivityStateRequestBean activityStateBean =\n+        getObjectMapper().readValue(inputJsonContent, ActivityStateRequestBean.class);\n+    participantActivitiesResponseService.saveParticipantActivities(activityStateBean);\n+\n+    LinkedMultiValueMap<String, String> requestParams = new LinkedMultiValueMap<>();\n+    // Step 2: Querying activity state with parameters, which are different from how it has been\n+    // saved in the save activity call above\n+    String studyIdArg = argumentsAccessor.getString(0);\n+    String participantIdArg = argumentsAccessor.getString(1);\n+    requestParams.add(\"studyId\", studyIdArg);\n+    requestParams.add(\"participantId\", participantIdArg);\n+\n+    // Step 3: Call API to update activity state\n+    HttpHeaders headers = TestUtils.newHeadersUser();\n+    MvcResult result =\n+        mockMvc\n+            .perform(\n+                get(ApiEndpoint.GET_ACTIVITY_STATE.getPath())\n+                    .contextPath(getContextPath())\n+                    .params(requestParams)\n+                    .headers(headers))\n+            .andDo(print())\n+            .andExpect(status().isOk())\n+            .andExpect(jsonPath(\"$.activities\").isArray())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcwMTMwNg=="}, "originalCommit": {"oid": "d56331b82f9a92d2a52ce0ca157e142308407253"}, "originalPosition": 213}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODM2NDU0OnYy", "diffSide": "RIGHT", "path": "response-server-module/response-server-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/ProcessActivityStateControllerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxODo0MTozMlrOHB2aOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxODo0MTozMlrOHB2aOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcwMjA3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              void cleaUp() {\n          \n          \n            \n              void cleanUp() {", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/757#discussion_r471702072", "createdAt": "2020-08-17T18:41:32Z", "author": {"login": "saminguyen"}, "path": "response-server-module/response-server-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/ProcessActivityStateControllerTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectMapper;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.readJsonFile;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import com.google.cloud.healthcare.fdamystudies.bean.ActivityStateRequestBean;\n+import com.google.cloud.healthcare.fdamystudies.common.ApiEndpoint;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantActivitiesBo;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantActivitiesRepository;\n+import com.google.cloud.healthcare.fdamystudies.service.ParticipantActivityStateResponseService;\n+import com.google.cloud.healthcare.fdamystudies.utils.TestUtils;\n+import java.util.List;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.aggregator.ArgumentsAccessor;\n+import org.junit.jupiter.params.provider.CsvSource;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.skyscreamer.jsonassert.JSONCompareMode;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.util.LinkedMultiValueMap;\n+\n+public class ProcessActivityStateControllerTest extends BaseMockIT {\n+  @Autowired ParticipantActivitiesRepository participantActivitiesRepository;\n+  @Autowired ParticipantActivityStateResponseService participantActivitiesResponseService;\n+\n+  @Test\n+  void shouldUpdateActivityState() throws Exception {\n+\n+    String inputJsonContent = readJsonFile(\"/update_activity_state_runs_info_request.json\");\n+    // Step 1: Call API to update activity state\n+    HttpHeaders headers = TestUtils.newHeadersUser();\n+    mockMvc\n+        .perform(\n+            post(ApiEndpoint.UPDATE_ACTIVITY_STATE.getPath())\n+                .contextPath(getContextPath())\n+                .content(inputJsonContent)\n+                .headers(headers))\n+        .andDo(print())\n+        .andExpect(status().isOk());\n+\n+    ActivityStateRequestBean inputActivityStateBean =\n+        getObjectMapper().readValue(inputJsonContent, ActivityStateRequestBean.class);\n+    String studyId = inputActivityStateBean.getStudyId();\n+    String participantId = inputActivityStateBean.getParticipantId();\n+\n+    // Step 2: verify updated values\n+    List<ParticipantActivitiesBo> resultsList =\n+        participantActivitiesRepository.findByStudyIdAndParticipantId(studyId, participantId);\n+    assertNotNull(resultsList);\n+    assertEquals(1, resultsList.size());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityId(),\n+        resultsList.get(0).getActivityId());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityVersion(),\n+        resultsList.get(0).getActivityVersion());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityState(),\n+        resultsList.get(0).getActivityState());\n+\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityRun().getTotal(),\n+        resultsList.get(0).getTotal());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityRun().getCompleted(),\n+        resultsList.get(0).getCompleted());\n+  }\n+\n+  @Test\n+  void shouldGetActivityStateValidParams() throws Exception {\n+    // Step 1: Save the activity first\n+    String inputJsonContent = readJsonFile(\"/update_activity_state_runs_info_request.json\");\n+    ActivityStateRequestBean activityStateBean =\n+        getObjectMapper().readValue(inputJsonContent, ActivityStateRequestBean.class);\n+    participantActivitiesResponseService.saveParticipantActivities(activityStateBean);\n+\n+    LinkedMultiValueMap<String, String> requestParams = new LinkedMultiValueMap<>();\n+    // Step 2: Querying activity state with parameters based on how it has been saved in the get\n+    // activity  state call above\n+    requestParams.add(\"studyId\", \"RT3\");\n+    requestParams.add(\"participantId\", \"567\");\n+\n+    // Step 3: Call API to get activity state\n+    HttpHeaders headers = TestUtils.newHeadersUser();\n+    MvcResult result =\n+        mockMvc\n+            .perform(\n+                get(ApiEndpoint.GET_ACTIVITY_STATE.getPath())\n+                    .contextPath(getContextPath())\n+                    .params(requestParams)\n+                    .headers(headers))\n+            .andDo(print())\n+            .andExpect(status().isOk())\n+            .andReturn();\n+\n+    String actualResponse = result.getResponse().getContentAsString();\n+    String expectedResponse = readJsonFile(\"/get_activity_state_runs_info_response.json\");\n+    JSONAssert.assertEquals(expectedResponse, actualResponse, JSONCompareMode.NON_EXTENSIBLE);\n+  }\n+\n+  @Test\n+  void shouldUpdateActivityStateMultiple() throws Exception {\n+\n+    String inputJsonContent =\n+        readJsonFile(\"/update_activity_state_runs_info__multiple_request.json\");\n+    // Step 1: Call API to update activity state\n+    HttpHeaders headers = TestUtils.newHeadersUser();\n+    mockMvc\n+        .perform(\n+            post(ApiEndpoint.UPDATE_ACTIVITY_STATE.getPath())\n+                .contextPath(getContextPath())\n+                .content(inputJsonContent)\n+                .headers(headers))\n+        .andDo(print())\n+        .andExpect(status().isOk());\n+\n+    // Step 2: verify updated values\n+    ActivityStateRequestBean inputActivityStateBean =\n+        getObjectMapper().readValue(inputJsonContent, ActivityStateRequestBean.class);\n+    String studyId = inputActivityStateBean.getStudyId();\n+    String participantId = inputActivityStateBean.getParticipantId();\n+\n+    List<ParticipantActivitiesBo> resultsList =\n+        participantActivitiesRepository.findByStudyIdAndParticipantId(studyId, participantId);\n+    assertNotNull(resultsList);\n+    assertEquals(2, resultsList.size());\n+\n+    // Validate 1st activity state\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityId(),\n+        resultsList.get(0).getActivityId());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityVersion(),\n+        resultsList.get(0).getActivityVersion());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityState(),\n+        resultsList.get(0).getActivityState());\n+\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityRun().getTotal(),\n+        resultsList.get(0).getTotal());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(0).getActivityRun().getCompleted(),\n+        resultsList.get(0).getCompleted());\n+\n+    // Validate 2nd activity state\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(1).getActivityId(),\n+        resultsList.get(1).getActivityId());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(1).getActivityVersion(),\n+        resultsList.get(1).getActivityVersion());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(1).getActivityState(),\n+        resultsList.get(1).getActivityState());\n+\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(1).getActivityRun().getTotal(),\n+        resultsList.get(1).getTotal());\n+    assertEquals(\n+        inputActivityStateBean.getActivity().get(1).getActivityRun().getCompleted(),\n+        resultsList.get(1).getCompleted());\n+  }\n+\n+  @ParameterizedTest\n+  @CsvSource({\"RT4,567\", \"RT3,568\"})\n+  void shouldGetEmptyActivityStateParamsNotFound(ArgumentsAccessor argumentsAccessor)\n+      throws Exception {\n+    // Step 1: Save the activity first\n+    String inputJsonContent = readJsonFile(\"/update_activity_state_runs_info_request.json\");\n+    ActivityStateRequestBean activityStateBean =\n+        getObjectMapper().readValue(inputJsonContent, ActivityStateRequestBean.class);\n+    participantActivitiesResponseService.saveParticipantActivities(activityStateBean);\n+\n+    LinkedMultiValueMap<String, String> requestParams = new LinkedMultiValueMap<>();\n+    // Step 2: Querying activity state with parameters, which are different from how it has been\n+    // saved in the save activity call above\n+    String studyIdArg = argumentsAccessor.getString(0);\n+    String participantIdArg = argumentsAccessor.getString(1);\n+    requestParams.add(\"studyId\", studyIdArg);\n+    requestParams.add(\"participantId\", participantIdArg);\n+\n+    // Step 3: Call API to update activity state\n+    HttpHeaders headers = TestUtils.newHeadersUser();\n+    MvcResult result =\n+        mockMvc\n+            .perform(\n+                get(ApiEndpoint.GET_ACTIVITY_STATE.getPath())\n+                    .contextPath(getContextPath())\n+                    .params(requestParams)\n+                    .headers(headers))\n+            .andDo(print())\n+            .andExpect(status().isOk())\n+            .andExpect(jsonPath(\"$.activities\").isArray())\n+            .andReturn();\n+\n+    String actualResponse = result.getResponse().getContentAsString();\n+    String expectedResponse = readJsonFile(\"/get_empty_activity_state_response.json\");\n+    JSONAssert.assertEquals(expectedResponse, actualResponse, JSONCompareMode.NON_EXTENSIBLE);\n+  }\n+\n+  @ParameterizedTest\n+  @CsvSource({\",567\", \"RT3,\"})\n+  void shouldGetActivityStateBadRequestInvalidParams(ArgumentsAccessor argumentsAccessor)\n+      throws Exception {\n+\n+    LinkedMultiValueMap<String, String> requestParams = new LinkedMultiValueMap<>();\n+    String studyIdArg =\n+        argumentsAccessor.getString(0) == null ? \"\" : argumentsAccessor.getString(0);\n+    String participantIdArg =\n+        argumentsAccessor.getString(1) == null ? \"\" : argumentsAccessor.getString(1);\n+    requestParams.add(\"studyId\", studyIdArg);\n+    requestParams.add(\"participantId\", participantIdArg);\n+\n+    HttpHeaders headers = TestUtils.newHeadersUser();\n+    MvcResult result =\n+        mockMvc\n+            .perform(\n+                get(ApiEndpoint.GET_ACTIVITY_STATE.getPath())\n+                    .contextPath(getContextPath())\n+                    .params(requestParams)\n+                    .headers(headers))\n+            .andDo(print())\n+            .andExpect(status().isBadRequest())\n+            .andReturn();\n+    String actualResponse = result.getResponse().getContentAsString();\n+    String expectedResponse = readJsonFile(\"/invalid_args_expected_bad_request_response.json\");\n+    JSONAssert.assertEquals(expectedResponse, actualResponse, JSONCompareMode.NON_EXTENSIBLE);\n+  }\n+\n+  @AfterEach\n+  void cleaUp() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d56331b82f9a92d2a52ce0ca157e142308407253"}, "originalPosition": 251}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODQ2OTc5OnYy", "diffSide": "RIGHT", "path": "response-server-module/response-server-service/src/test/resources/get_activity_state_runs_info_response.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxOTowOToyNVrOHB3bpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxOTowOToyNVrOHB3bpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcxODgyMw==", "bodyText": "Newline at EOF", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/757#discussion_r471718823", "createdAt": "2020-08-17T19:09:25Z", "author": {"login": "saminguyen"}, "path": "response-server-module/response-server-service/src/test/resources/get_activity_state_runs_info_response.json", "diffHunk": "@@ -0,0 +1,17 @@\n+{\n+  \"activities\": [\n+    {\n+      \"activityId\": \"questionnaire_1\",\n+      \"bookmarked\": true,\n+      \"activityState\": \"Completed\",\n+      \"activityRunId\": \"7\",\n+      \"activityVersion\": \"9.0\",\n+      \"activityRun\": {\n+        \"total\": 11,\n+        \"completed\": 5,\n+        \"missed\": 6\n+      }\n+    }\n+  ],\n+  \"message\": \"SUCCESS\"\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d56331b82f9a92d2a52ce0ca157e142308407253"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2127, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}