{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyMTIyNjMw", "number": 719, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMjozMjoxOFrOEUx2fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMzo0ODowOVrOEU1XQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjIzNzQzOnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/SiteServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMjozMjoxOFrOG7Kz9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwODo0NjoyN1rOG8APBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY5NjMxMQ==", "bodyText": "validEmails?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/719#discussion_r464696311", "createdAt": "2020-08-03T22:32:18Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/SiteServiceImpl.java", "diffHunk": "@@ -689,4 +706,115 @@ private EmailResponse sendInvitationEmail(\n             templateArgs);\n     return emailService.sendMimeMail(emailRequest);\n   }\n+\n+  @Override\n+  @Transactional\n+  public ImportParticipantResponse importParticipants(\n+      String userId, String siteId, MultipartFile multipartFile) {\n+    logger.entry(\"begin importParticipants()\");\n+\n+    // Validate site type, status and access permission\n+    Optional<SiteEntity> optSite = siteRepository.findById(siteId);\n+\n+    if (!optSite.isPresent() || !optSite.get().getStatus().equals(ACTIVE_STATUS)) {\n+      logger.exit(ErrorCode.SITE_NOT_EXIST_OR_INACTIVE);\n+      return new ImportParticipantResponse(ErrorCode.SITE_NOT_EXIST_OR_INACTIVE);\n+    }\n+\n+    SiteEntity siteEntity = optSite.get();\n+    if (siteEntity.getStudy() != null && OPEN_STUDY.equals(siteEntity.getStudy().getType())) {\n+      logger.exit(ErrorCode.OPEN_STUDY);\n+      return new ImportParticipantResponse(ErrorCode.OPEN_STUDY);\n+    }\n+\n+    Optional<SitePermissionEntity> optSitePermission =\n+        sitePermissionRepository.findSitePermissionByUserIdAndSiteId(userId, siteId);\n+\n+    if (!optSitePermission.isPresent()\n+        || !optSitePermission.get().getCanEdit().equals(Permission.READ_EDIT.value())) {\n+      logger.exit(ErrorCode.MANAGE_SITE_PERMISSION_ACCESS_DENIED);\n+      return new ImportParticipantResponse(ErrorCode.MANAGE_SITE_PERMISSION_ACCESS_DENIED);\n+    }\n+\n+    // iterate and save valid email id's\n+    try (Workbook workbook =\n+        WorkbookFactory.create(new BufferedInputStream(multipartFile.getInputStream()))) {\n+\n+      Sheet sheet = workbook.getSheetAt(0);\n+      Row row = sheet.getRow(0);\n+      String columnName = row.getCell(EMAIL_ADDRESS_COLUMN).getStringCellValue();\n+      if (!\"Email Address\".equalsIgnoreCase(columnName)) {\n+        return new ImportParticipantResponse(ErrorCode.DOCUMENT_NOT_IN_PRESCRIBED_FORMAT);\n+      }\n+\n+      Iterator<Row> rows = sheet.rowIterator();\n+      Set<String> invalidEmails = new HashSet<>();\n+      Set<String> emails = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08502333e7172ee9049b339fef04698589b3c962"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU3MTU4OA==", "bodyText": "Changed to validEmails.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/719#discussion_r465571588", "createdAt": "2020-08-05T08:46:27Z", "author": {"login": "madhurya-btc"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/SiteServiceImpl.java", "diffHunk": "@@ -689,4 +706,115 @@ private EmailResponse sendInvitationEmail(\n             templateArgs);\n     return emailService.sendMimeMail(emailRequest);\n   }\n+\n+  @Override\n+  @Transactional\n+  public ImportParticipantResponse importParticipants(\n+      String userId, String siteId, MultipartFile multipartFile) {\n+    logger.entry(\"begin importParticipants()\");\n+\n+    // Validate site type, status and access permission\n+    Optional<SiteEntity> optSite = siteRepository.findById(siteId);\n+\n+    if (!optSite.isPresent() || !optSite.get().getStatus().equals(ACTIVE_STATUS)) {\n+      logger.exit(ErrorCode.SITE_NOT_EXIST_OR_INACTIVE);\n+      return new ImportParticipantResponse(ErrorCode.SITE_NOT_EXIST_OR_INACTIVE);\n+    }\n+\n+    SiteEntity siteEntity = optSite.get();\n+    if (siteEntity.getStudy() != null && OPEN_STUDY.equals(siteEntity.getStudy().getType())) {\n+      logger.exit(ErrorCode.OPEN_STUDY);\n+      return new ImportParticipantResponse(ErrorCode.OPEN_STUDY);\n+    }\n+\n+    Optional<SitePermissionEntity> optSitePermission =\n+        sitePermissionRepository.findSitePermissionByUserIdAndSiteId(userId, siteId);\n+\n+    if (!optSitePermission.isPresent()\n+        || !optSitePermission.get().getCanEdit().equals(Permission.READ_EDIT.value())) {\n+      logger.exit(ErrorCode.MANAGE_SITE_PERMISSION_ACCESS_DENIED);\n+      return new ImportParticipantResponse(ErrorCode.MANAGE_SITE_PERMISSION_ACCESS_DENIED);\n+    }\n+\n+    // iterate and save valid email id's\n+    try (Workbook workbook =\n+        WorkbookFactory.create(new BufferedInputStream(multipartFile.getInputStream()))) {\n+\n+      Sheet sheet = workbook.getSheetAt(0);\n+      Row row = sheet.getRow(0);\n+      String columnName = row.getCell(EMAIL_ADDRESS_COLUMN).getStringCellValue();\n+      if (!\"Email Address\".equalsIgnoreCase(columnName)) {\n+        return new ImportParticipantResponse(ErrorCode.DOCUMENT_NOT_IN_PRESCRIBED_FORMAT);\n+      }\n+\n+      Iterator<Row> rows = sheet.rowIterator();\n+      Set<String> invalidEmails = new HashSet<>();\n+      Set<String> emails = new HashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY5NjMxMQ=="}, "originalCommit": {"oid": "08502333e7172ee9049b339fef04698589b3c962"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjI1MTQ0OnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/ImportParticipantResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMjozODo0OFrOG7K8Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwODo0Njo0NFrOG8APyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY5ODQ1OQ==", "bodyText": "I do not think we should not be using Request objs as part of a different response object. Can you use ParticipantDetail here instead?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/719#discussion_r464698459", "createdAt": "2020-08-03T22:38:48Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/ImportParticipantResponse.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.beans;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonInclude.Include;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.Setter;\n+\n+@JsonInclude(Include.NON_NULL)\n+@Getter\n+@Setter\n+@NoArgsConstructor\n+public class ImportParticipantResponse extends BaseResponse {\n+\n+  private List<ParticipantDetailRequest> participants = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08502333e7172ee9049b339fef04698589b3c962"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU3MTc4Nw==", "bodyText": "Changed to ParticipantDetail.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/719#discussion_r465571787", "createdAt": "2020-08-05T08:46:44Z", "author": {"login": "madhurya-btc"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/ImportParticipantResponse.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.beans;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonInclude.Include;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.Setter;\n+\n+@JsonInclude(Include.NON_NULL)\n+@Getter\n+@Setter\n+@NoArgsConstructor\n+public class ImportParticipantResponse extends BaseResponse {\n+\n+  private List<ParticipantDetailRequest> participants = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY5ODQ1OQ=="}, "originalCommit": {"oid": "08502333e7172ee9049b339fef04698589b3c962"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjI3NjIwOnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/SitesControllerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMjo1MDowOFrOG7LKmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwODo0NzoxNVrOG8AQ-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcwMjEwNg==", "bodyText": "you should probably have IMPORT_EMAIL_1 and IMPORT_EMAIL_2 being the two emails in Email_Import_Template.xlsx and have another one being INVALID_TEST_EMAIL = \"mockito\"", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/719#discussion_r464702106", "createdAt": "2020-08-03T22:50:08Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/SitesControllerTest.java", "diffHunk": "@@ -103,6 +110,8 @@\n   private SitePermissionEntity sitePermissionEntity;\n   private StudyConsentEntity studyConsentEntity;\n \n+  private static final String IMPORT_EMAIL = \"mockitoimport01@grr.la\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08502333e7172ee9049b339fef04698589b3c962"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU3MjA4OA==", "bodyText": "Created IMPORT_EMAIL_1 , IMPORT_EMAIL_2 and INVALID_TEST_EMAIL .", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/719#discussion_r465572088", "createdAt": "2020-08-05T08:47:15Z", "author": {"login": "madhurya-btc"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/SitesControllerTest.java", "diffHunk": "@@ -103,6 +110,8 @@\n   private SitePermissionEntity sitePermissionEntity;\n   private StudyConsentEntity studyConsentEntity;\n \n+  private static final String IMPORT_EMAIL = \"mockitoimport01@grr.la\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcwMjEwNg=="}, "originalCommit": {"oid": "08502333e7172ee9049b339fef04698589b3c962"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjI3NjY0OnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/SitesControllerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMjo1MDoyN1rOG7LK5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwODo0NzozOVrOG8AR3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcwMjE4MA==", "bodyText": "check both emails returned", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/719#discussion_r464702180", "createdAt": "2020-08-03T22:50:27Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/SitesControllerTest.java", "diffHunk": "@@ -786,6 +795,164 @@ public void shouldInviteParticipant() throws Exception {\n         OnboardingStatus.INVITED.getCode(), optParticipantRegistrySite.get().getOnboardingStatus());\n   }\n \n+  @Test\n+  public void shouldReturnAccessDeniedForImportNewParticipant() throws Exception {\n+    // Step 1: set manage site permission to view only\n+    sitePermissionEntity = siteEntity.getSitePermissions().get(0);\n+    sitePermissionEntity.setCanEdit(Permission.READ_VIEW.value());\n+    testDataHelper.getSiteRepository().saveAndFlush(siteEntity);\n+\n+    // Step 2: Call API to return MANAGE_SITE_PERMISSION_ACCESS_DENIED error\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    MockMultipartFile file = getMultipartFile(\"classpath:Email_Import_Template.xlsx\");\n+    mockMvc\n+        .perform(\n+            multipart(ApiEndpoint.IMPORT_PARTICIPANT.getPath(), siteEntity.getId())\n+                .file(file)\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isForbidden())\n+        .andExpect(\n+            jsonPath(\n+                \"$.error_description\", is(MANAGE_SITE_PERMISSION_ACCESS_DENIED.getDescription())));\n+  }\n+\n+  @Test\n+  public void shouldReturnOpenStudyForImportNewParticipant() throws Exception {\n+    // Step 1: set study type to open study\n+    sitePermissionEntity = siteEntity.getSitePermissions().get(0);\n+    studyEntity.setType(CommonConstants.OPEN_STUDY);\n+    siteEntity.setStudy(studyEntity);\n+    testDataHelper.getSiteRepository().saveAndFlush(siteEntity);\n+\n+    // Step 2: Call API to return OPEN_STUDY error\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    MockMultipartFile file = getMultipartFile(\"classpath:Email_Import_Template.xlsx\");\n+    mockMvc\n+        .perform(\n+            multipart(ApiEndpoint.IMPORT_PARTICIPANT.getPath(), siteEntity.getId())\n+                .file(file)\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isForbidden())\n+        .andExpect(jsonPath(\"$.error_description\", is(OPEN_STUDY.getDescription())));\n+  }\n+\n+  @Test\n+  public void shouldReturnSiteNotExistForImportNewParticipant() throws Exception {\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    MockMultipartFile file = getMultipartFile(\"classpath:Email_Import_Template.xlsx\");\n+    mockMvc\n+        .perform(\n+            multipart(ApiEndpoint.IMPORT_PARTICIPANT.getPath(), IdGenerator.id())\n+                .file(file)\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isBadRequest())\n+        .andExpect(\n+            jsonPath(\"$.error_description\", is(SITE_NOT_EXIST_OR_INACTIVE.getDescription())));\n+  }\n+\n+  @Test\n+  public void shouldReturnWithBadHeaders() throws Exception {\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    MockMultipartFile file = getMultipartFile(\"classpath:Email_Import_Template_bad_header.xlsx\");\n+    mockMvc\n+        .perform(\n+            multipart(ApiEndpoint.IMPORT_PARTICIPANT.getPath(), siteEntity.getId())\n+                .file(file)\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isBadRequest())\n+        .andExpect(\n+            jsonPath(\n+                \"$.error_description\",\n+                is(ErrorCode.DOCUMENT_NOT_IN_PRESCRIBED_FORMAT.getDescription())));\n+  }\n+\n+  @Test\n+  public void shouldReturnImportNewParticipantAndInvalidEmail() throws Exception {\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    // Step 1: Call API to import new participants\n+    MockMultipartFile file =\n+        getMultipartFile(\"classpath:Email_Import_Template_Invalid_Emails.xlsx\");\n+    MvcResult result =\n+        mockMvc\n+            .perform(\n+                multipart(ApiEndpoint.IMPORT_PARTICIPANT.getPath(), siteEntity.getId())\n+                    .file(file)\n+                    .headers(headers)\n+                    .contextPath(getContextPath()))\n+            .andDo(print())\n+            .andExpect(status().isOk())\n+            .andExpect(\n+                jsonPath(\"$.message\", is(MessageCode.IMPORT_PARTICIPANT_SUCCESS.getMessage())))\n+            .andExpect(jsonPath(\"$.participants\").isArray())\n+            .andExpect(jsonPath(\"$.participants\", hasSize(1)))\n+            .andExpect(jsonPath(\"$.participants[0].email\", is(\"mockitoimport@grr.la\")))\n+            .andExpect(jsonPath(\"$.invalidEmails\", hasSize(1)))\n+            .andExpect(jsonPath(\"$.invalidEmails[0]\", is(\"mockito\")))\n+            .andReturn();\n+\n+    String participantId =\n+        JsonPath.read(result.getResponse().getContentAsString(), \"$.participants[0].participantId\");\n+\n+    // Step 2: verify saved values\n+    Optional<ParticipantRegistrySiteEntity> optParticipantRegistrySite =\n+        participantRegistrySiteRepository.findById(participantId);\n+    assertNotNull(optParticipantRegistrySite.get().getSite());\n+    assertEquals(siteEntity.getId(), optParticipantRegistrySite.get().getSite().getId());\n+    assertEquals(\"mockitoimport@grr.la\", optParticipantRegistrySite.get().getEmail());\n+  }\n+\n+  @Test\n+  public void shouldReturnImportNewParticipant() throws Exception {\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    // Step 1: Call API to import new participants\n+    MockMultipartFile file = getMultipartFile(\"classpath:Email_Import_Template.xlsx\");\n+    MvcResult result =\n+        mockMvc\n+            .perform(\n+                multipart(ApiEndpoint.IMPORT_PARTICIPANT.getPath(), siteEntity.getId())\n+                    .file(file)\n+                    .headers(headers)\n+                    .contextPath(getContextPath()))\n+            .andDo(print())\n+            .andExpect(status().isOk())\n+            .andExpect(\n+                jsonPath(\"$.message\", is(MessageCode.IMPORT_PARTICIPANT_SUCCESS.getMessage())))\n+            .andExpect(jsonPath(\"$.participants\").isArray())\n+            .andExpect(jsonPath(\"$.participants\", hasSize(2)))\n+            .andExpect(jsonPath(\"$.participants[0].email\", is(IMPORT_EMAIL)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08502333e7172ee9049b339fef04698589b3c962"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU3MjMxNg==", "bodyText": "Checked both emails.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/719#discussion_r465572316", "createdAt": "2020-08-05T08:47:39Z", "author": {"login": "madhurya-btc"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/SitesControllerTest.java", "diffHunk": "@@ -786,6 +795,164 @@ public void shouldInviteParticipant() throws Exception {\n         OnboardingStatus.INVITED.getCode(), optParticipantRegistrySite.get().getOnboardingStatus());\n   }\n \n+  @Test\n+  public void shouldReturnAccessDeniedForImportNewParticipant() throws Exception {\n+    // Step 1: set manage site permission to view only\n+    sitePermissionEntity = siteEntity.getSitePermissions().get(0);\n+    sitePermissionEntity.setCanEdit(Permission.READ_VIEW.value());\n+    testDataHelper.getSiteRepository().saveAndFlush(siteEntity);\n+\n+    // Step 2: Call API to return MANAGE_SITE_PERMISSION_ACCESS_DENIED error\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    MockMultipartFile file = getMultipartFile(\"classpath:Email_Import_Template.xlsx\");\n+    mockMvc\n+        .perform(\n+            multipart(ApiEndpoint.IMPORT_PARTICIPANT.getPath(), siteEntity.getId())\n+                .file(file)\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isForbidden())\n+        .andExpect(\n+            jsonPath(\n+                \"$.error_description\", is(MANAGE_SITE_PERMISSION_ACCESS_DENIED.getDescription())));\n+  }\n+\n+  @Test\n+  public void shouldReturnOpenStudyForImportNewParticipant() throws Exception {\n+    // Step 1: set study type to open study\n+    sitePermissionEntity = siteEntity.getSitePermissions().get(0);\n+    studyEntity.setType(CommonConstants.OPEN_STUDY);\n+    siteEntity.setStudy(studyEntity);\n+    testDataHelper.getSiteRepository().saveAndFlush(siteEntity);\n+\n+    // Step 2: Call API to return OPEN_STUDY error\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    MockMultipartFile file = getMultipartFile(\"classpath:Email_Import_Template.xlsx\");\n+    mockMvc\n+        .perform(\n+            multipart(ApiEndpoint.IMPORT_PARTICIPANT.getPath(), siteEntity.getId())\n+                .file(file)\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isForbidden())\n+        .andExpect(jsonPath(\"$.error_description\", is(OPEN_STUDY.getDescription())));\n+  }\n+\n+  @Test\n+  public void shouldReturnSiteNotExistForImportNewParticipant() throws Exception {\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    MockMultipartFile file = getMultipartFile(\"classpath:Email_Import_Template.xlsx\");\n+    mockMvc\n+        .perform(\n+            multipart(ApiEndpoint.IMPORT_PARTICIPANT.getPath(), IdGenerator.id())\n+                .file(file)\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isBadRequest())\n+        .andExpect(\n+            jsonPath(\"$.error_description\", is(SITE_NOT_EXIST_OR_INACTIVE.getDescription())));\n+  }\n+\n+  @Test\n+  public void shouldReturnWithBadHeaders() throws Exception {\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    MockMultipartFile file = getMultipartFile(\"classpath:Email_Import_Template_bad_header.xlsx\");\n+    mockMvc\n+        .perform(\n+            multipart(ApiEndpoint.IMPORT_PARTICIPANT.getPath(), siteEntity.getId())\n+                .file(file)\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isBadRequest())\n+        .andExpect(\n+            jsonPath(\n+                \"$.error_description\",\n+                is(ErrorCode.DOCUMENT_NOT_IN_PRESCRIBED_FORMAT.getDescription())));\n+  }\n+\n+  @Test\n+  public void shouldReturnImportNewParticipantAndInvalidEmail() throws Exception {\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    // Step 1: Call API to import new participants\n+    MockMultipartFile file =\n+        getMultipartFile(\"classpath:Email_Import_Template_Invalid_Emails.xlsx\");\n+    MvcResult result =\n+        mockMvc\n+            .perform(\n+                multipart(ApiEndpoint.IMPORT_PARTICIPANT.getPath(), siteEntity.getId())\n+                    .file(file)\n+                    .headers(headers)\n+                    .contextPath(getContextPath()))\n+            .andDo(print())\n+            .andExpect(status().isOk())\n+            .andExpect(\n+                jsonPath(\"$.message\", is(MessageCode.IMPORT_PARTICIPANT_SUCCESS.getMessage())))\n+            .andExpect(jsonPath(\"$.participants\").isArray())\n+            .andExpect(jsonPath(\"$.participants\", hasSize(1)))\n+            .andExpect(jsonPath(\"$.participants[0].email\", is(\"mockitoimport@grr.la\")))\n+            .andExpect(jsonPath(\"$.invalidEmails\", hasSize(1)))\n+            .andExpect(jsonPath(\"$.invalidEmails[0]\", is(\"mockito\")))\n+            .andReturn();\n+\n+    String participantId =\n+        JsonPath.read(result.getResponse().getContentAsString(), \"$.participants[0].participantId\");\n+\n+    // Step 2: verify saved values\n+    Optional<ParticipantRegistrySiteEntity> optParticipantRegistrySite =\n+        participantRegistrySiteRepository.findById(participantId);\n+    assertNotNull(optParticipantRegistrySite.get().getSite());\n+    assertEquals(siteEntity.getId(), optParticipantRegistrySite.get().getSite().getId());\n+    assertEquals(\"mockitoimport@grr.la\", optParticipantRegistrySite.get().getEmail());\n+  }\n+\n+  @Test\n+  public void shouldReturnImportNewParticipant() throws Exception {\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    // Step 1: Call API to import new participants\n+    MockMultipartFile file = getMultipartFile(\"classpath:Email_Import_Template.xlsx\");\n+    MvcResult result =\n+        mockMvc\n+            .perform(\n+                multipart(ApiEndpoint.IMPORT_PARTICIPANT.getPath(), siteEntity.getId())\n+                    .file(file)\n+                    .headers(headers)\n+                    .contextPath(getContextPath()))\n+            .andDo(print())\n+            .andExpect(status().isOk())\n+            .andExpect(\n+                jsonPath(\"$.message\", is(MessageCode.IMPORT_PARTICIPANT_SUCCESS.getMessage())))\n+            .andExpect(jsonPath(\"$.participants\").isArray())\n+            .andExpect(jsonPath(\"$.participants\", hasSize(2)))\n+            .andExpect(jsonPath(\"$.participants[0].email\", is(IMPORT_EMAIL)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcwMjE4MA=="}, "originalCommit": {"oid": "08502333e7172ee9049b339fef04698589b3c962"}, "originalPosition": 192}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjgxMjgyOnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/SiteController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMzo0ODowOVrOG7QC0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMzo0ODowOVrOG7QC0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4MjAzMg==", "bodyText": "inputFile?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/719#discussion_r464782032", "createdAt": "2020-08-04T03:48:09Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/SiteController.java", "diffHunk": "@@ -157,4 +159,19 @@\n     return ResponseEntity.status(inviteParticipantResponse.getHttpStatusCode())\n         .body(inviteParticipantResponse);\n   }\n+\n+  @PostMapping(\n+      value = \"/sites/{siteId}/participants/import\",\n+      produces = MediaType.APPLICATION_JSON_VALUE)\n+  public ResponseEntity<ImportParticipantResponse> importParticipants(\n+      @PathVariable String siteId,\n+      @RequestHeader(name = USER_ID_HEADER) String userId,\n+      @RequestParam MultipartFile file,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08502333e7172ee9049b339fef04698589b3c962"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2093, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}