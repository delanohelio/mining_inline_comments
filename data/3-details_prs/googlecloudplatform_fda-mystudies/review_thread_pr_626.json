{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4MzUzMDM5", "number": 626, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNTowNjoxM1rOEQqtCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNjowNDo1MFrOEQsW0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTEyMzI5OnYy", "diffSide": "RIGHT", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/ActiveUserFilter.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNTowNjoxM1rOG08ffQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzoxODoyN1rOG5inBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE3MDIzNw==", "bodyText": "What's the advantage of doing this in a filter? If we do this in the controllers we benefit from the error handling there.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/626#discussion_r458170237", "createdAt": "2020-07-21T15:06:13Z", "author": {"login": "nikklassen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/ActiveUserFilter.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.filter;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.USER_ID_HEADER;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.annotation.PostConstruct;\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.server.PathContainer;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.util.pattern.PathPattern;\n+import org.springframework.web.util.pattern.PathPatternParser;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.model.UserRegAdminEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserRegAdminRepository;\n+\n+@Component\n+@Order(3)\n+public class ActiveUserFilter implements Filter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "456bd182f4c3993007d56f5da72bc269c2f91c1f"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU0NTg4NA==", "bodyText": "We pass USER_ID_HEADER in most of API's in participant-manager-service, so we added filter to avoid code duplication.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/626#discussion_r458545884", "createdAt": "2020-07-22T05:38:01Z", "author": {"login": "madhurya-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/ActiveUserFilter.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.filter;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.USER_ID_HEADER;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.annotation.PostConstruct;\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.server.PathContainer;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.util.pattern.PathPattern;\n+import org.springframework.web.util.pattern.PathPatternParser;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.model.UserRegAdminEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserRegAdminRepository;\n+\n+@Component\n+@Order(3)\n+public class ActiveUserFilter implements Filter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE3MDIzNw=="}, "originalCommit": {"oid": "456bd182f4c3993007d56f5da72bc269c2f91c1f"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY5NDgxMw==", "bodyText": "Ok, given that I have a few suggestions. First of all, this shouldn't be in the common services because the participant manager is the one that defines the /locations/ route. Second, it would be great if we could integrate this into Spring's authorization framework instead of writing our own mapping logic from scratch. See https://docs.spring.io/spring-security/site/docs/current/reference/html5/#mvc-requestmatcher for an example of how you can avoid a lot of the logic in the class with request matchers.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/626#discussion_r459694813", "createdAt": "2020-07-23T20:00:33Z", "author": {"login": "nikklassen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/ActiveUserFilter.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.filter;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.USER_ID_HEADER;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.annotation.PostConstruct;\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.server.PathContainer;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.util.pattern.PathPattern;\n+import org.springframework.web.util.pattern.PathPatternParser;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.model.UserRegAdminEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserRegAdminRepository;\n+\n+@Component\n+@Order(3)\n+public class ActiveUserFilter implements Filter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE3MDIzNw=="}, "originalCommit": {"oid": "456bd182f4c3993007d56f5da72bc269c2f91c1f"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2NDg3Mg==", "bodyText": "Agree with you, we'll move ActiveUserFilter to participant manager service.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/626#discussion_r459864872", "createdAt": "2020-07-24T05:57:08Z", "author": {"login": "dhanyak-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/ActiveUserFilter.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.filter;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.USER_ID_HEADER;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.annotation.PostConstruct;\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.server.PathContainer;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.util.pattern.PathPattern;\n+import org.springframework.web.util.pattern.PathPatternParser;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.model.UserRegAdminEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserRegAdminRepository;\n+\n+@Component\n+@Order(3)\n+public class ActiveUserFilter implements Filter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE3MDIzNw=="}, "originalCommit": {"oid": "456bd182f4c3993007d56f5da72bc269c2f91c1f"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk4OTA2Mg==", "bodyText": "Moved ActiveUserFilter to participant manager service.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/626#discussion_r462989062", "createdAt": "2020-07-30T13:18:27Z", "author": {"login": "madhurya-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/filter/ActiveUserFilter.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.filter;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.USER_ID_HEADER;\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.annotation.PostConstruct;\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.server.PathContainer;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.util.pattern.PathPattern;\n+import org.springframework.web.util.pattern.PathPatternParser;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.model.UserRegAdminEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserRegAdminRepository;\n+\n+@Component\n+@Order(3)\n+public class ActiveUserFilter implements Filter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE3MDIzNw=="}, "originalCommit": {"oid": "456bd182f4c3993007d56f5da72bc269c2f91c1f"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTMyNzM0OnYy", "diffSide": "RIGHT", "path": "common-modules/common-tests/src/main/java/com/google/cloud/healthcare/fdamystudies/common/BaseMockIT.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNTo1MDowMlrOG0-gxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDowNTozMFrOG2Zstw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwMzMzMw==", "bodyText": "I would prefer we use something built into the test framework to do this. It looks like https://junit.org/junit5/docs/current/user-guide/#writing-tests-display-name-generator-default should do what you want.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/626#discussion_r458203333", "createdAt": "2020-07-21T15:50:02Z", "author": {"login": "nikklassen"}, "path": "common-modules/common-tests/src/main/java/com/google/cloud/healthcare/fdamystudies/common/BaseMockIT.java", "diffHunk": "@@ -130,4 +139,14 @@ protected MvcResult performPost(\n         .andExpect(content().string(containsString(expectedTextInResponseBody)))\n         .andReturn();\n   }\n+\n+  @BeforeEach", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "456bd182f4c3993007d56f5da72bc269c2f91c1f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU0ODcxOA==", "bodyText": "We added these methods to analyze build issues. @DisplayName used to provide custom name for test methods. In below sample code Junit framework displays \"Always UP\" instead of \"health\" in results tab.\n@Test\n@DisplayName(\"Always UP\")\npublic void health() throws Exception {}", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/626#discussion_r458548718", "createdAt": "2020-07-22T05:47:24Z", "author": {"login": "madhurya-btc"}, "path": "common-modules/common-tests/src/main/java/com/google/cloud/healthcare/fdamystudies/common/BaseMockIT.java", "diffHunk": "@@ -130,4 +139,14 @@ protected MvcResult performPost(\n         .andExpect(content().string(containsString(expectedTextInResponseBody)))\n         .andReturn();\n   }\n+\n+  @BeforeEach", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwMzMzMw=="}, "originalCommit": {"oid": "456bd182f4c3993007d56f5da72bc269c2f91c1f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY5NzMzNQ==", "bodyText": "My mistake, I thought setting the test name would automatically log the test names as they run. It looks like the correct way to do this is with https://www.baeldung.com/junit-testwatcher", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/626#discussion_r459697335", "createdAt": "2020-07-23T20:05:30Z", "author": {"login": "nikklassen"}, "path": "common-modules/common-tests/src/main/java/com/google/cloud/healthcare/fdamystudies/common/BaseMockIT.java", "diffHunk": "@@ -130,4 +139,14 @@ protected MvcResult performPost(\n         .andExpect(content().string(containsString(expectedTextInResponseBody)))\n         .andReturn();\n   }\n+\n+  @BeforeEach", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwMzMzMw=="}, "originalCommit": {"oid": "456bd182f4c3993007d56f5da72bc269c2f91c1f"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTM0NTgxOnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/LocationServiceImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNTo1NDowOVrOG0-skw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDowNTo1MVrOG2Ztig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwNjM1NQ==", "bodyText": "Services should return business object, i.e. LocationEntity", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/626#discussion_r458206355", "createdAt": "2020-07-21T15:54:09Z", "author": {"login": "nikklassen"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/LocationServiceImpl.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import java.util.Optional;\n+\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.LocationRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.LocationResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.ManageLocation;\n+import com.google.cloud.healthcare.fdamystudies.mapper.LocationMapper;\n+import com.google.cloud.healthcare.fdamystudies.model.LocationEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.UserRegAdminEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.LocationRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserRegAdminRepository;\n+\n+@Service\n+public class LocationServiceImpl implements LocationService {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(LocationServiceImpl.class.getName());\n+\n+  @Autowired private UserRegAdminRepository userRegAdminRepository;\n+\n+  @Autowired private LocationRepository locationRepository;\n+\n+  @Override\n+  @Transactional\n+  public LocationResponse addNewLocation(LocationRequest locationRequest) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "456bd182f4c3993007d56f5da72bc269c2f91c1f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU0OTYzMg==", "bodyText": "I have followed the approach of audit-log-service, so returning LocationResponse.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/626#discussion_r458549632", "createdAt": "2020-07-22T05:50:10Z", "author": {"login": "madhurya-btc"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/LocationServiceImpl.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import java.util.Optional;\n+\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.LocationRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.LocationResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.ManageLocation;\n+import com.google.cloud.healthcare.fdamystudies.mapper.LocationMapper;\n+import com.google.cloud.healthcare.fdamystudies.model.LocationEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.UserRegAdminEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.LocationRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserRegAdminRepository;\n+\n+@Service\n+public class LocationServiceImpl implements LocationService {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(LocationServiceImpl.class.getName());\n+\n+  @Autowired private UserRegAdminRepository userRegAdminRepository;\n+\n+  @Autowired private LocationRepository locationRepository;\n+\n+  @Override\n+  @Transactional\n+  public LocationResponse addNewLocation(LocationRequest locationRequest) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwNjM1NQ=="}, "originalCommit": {"oid": "456bd182f4c3993007d56f5da72bc269c2f91c1f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY5NzU0Ng==", "bodyText": "That was incorrect in the audit-log-service as well.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/626#discussion_r459697546", "createdAt": "2020-07-23T20:05:51Z", "author": {"login": "nikklassen"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/LocationServiceImpl.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import java.util.Optional;\n+\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.LocationRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.LocationResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.ManageLocation;\n+import com.google.cloud.healthcare.fdamystudies.mapper.LocationMapper;\n+import com.google.cloud.healthcare.fdamystudies.model.LocationEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.UserRegAdminEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.LocationRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserRegAdminRepository;\n+\n+@Service\n+public class LocationServiceImpl implements LocationService {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(LocationServiceImpl.class.getName());\n+\n+  @Autowired private UserRegAdminRepository userRegAdminRepository;\n+\n+  @Autowired private LocationRepository locationRepository;\n+\n+  @Override\n+  @Transactional\n+  public LocationResponse addNewLocation(LocationRequest locationRequest) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwNjM1NQ=="}, "originalCommit": {"oid": "456bd182f4c3993007d56f5da72bc269c2f91c1f"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTM0NjI4OnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/LocationServiceImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNTo1NDoxNVrOG0-s2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDowNjoxN1rOG2ZucQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwNjQyNw==", "bodyText": "Move this to the controller", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/626#discussion_r458206427", "createdAt": "2020-07-21T15:54:15Z", "author": {"login": "nikklassen"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/LocationServiceImpl.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import java.util.Optional;\n+\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.LocationRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.LocationResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.ManageLocation;\n+import com.google.cloud.healthcare.fdamystudies.mapper.LocationMapper;\n+import com.google.cloud.healthcare.fdamystudies.model.LocationEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.UserRegAdminEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.LocationRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserRegAdminRepository;\n+\n+@Service\n+public class LocationServiceImpl implements LocationService {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(LocationServiceImpl.class.getName());\n+\n+  @Autowired private UserRegAdminRepository userRegAdminRepository;\n+\n+  @Autowired private LocationRepository locationRepository;\n+\n+  @Override\n+  @Transactional\n+  public LocationResponse addNewLocation(LocationRequest locationRequest) {\n+    logger.entry(\"begin addNewLocation()\");\n+\n+    Optional<UserRegAdminEntity> optUserRegAdminUser =\n+        userRegAdminRepository.findById(locationRequest.getUserId());\n+\n+    UserRegAdminEntity adminUser = optUserRegAdminUser.get();\n+    ManageLocation manageLocation = ManageLocation.valueOf(adminUser.getManageLocations());\n+    if (ManageLocation.DENY.equals(manageLocation)) {\n+      logger.exit(\n+          String.format(\n+              \"Add location failed with error code=%s\", ErrorCode.LOCATION_ACCESS_DENIED));\n+      return new LocationResponse(ErrorCode.LOCATION_ACCESS_DENIED);\n+    }\n+    LocationEntity locationEntity = LocationMapper.fromLocationRequest(locationRequest);\n+    locationEntity.setCreatedBy(adminUser.getId());\n+    locationEntity = locationRepository.saveAndFlush(locationEntity);\n+    logger.exit(String.format(\"locationId=%s\", locationEntity.getId()));\n+\n+    return LocationMapper.toLocationResponse(locationEntity);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "456bd182f4c3993007d56f5da72bc269c2f91c1f"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU1MDMxMg==", "bodyText": "I have followed the approach of audit-log-service, so for consistency will keep the code in service layer. Otherwise it will result in lots of re-work in other services also.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/626#discussion_r458550312", "createdAt": "2020-07-22T05:52:12Z", "author": {"login": "madhurya-btc"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/LocationServiceImpl.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import java.util.Optional;\n+\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.LocationRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.LocationResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.ManageLocation;\n+import com.google.cloud.healthcare.fdamystudies.mapper.LocationMapper;\n+import com.google.cloud.healthcare.fdamystudies.model.LocationEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.UserRegAdminEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.LocationRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserRegAdminRepository;\n+\n+@Service\n+public class LocationServiceImpl implements LocationService {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(LocationServiceImpl.class.getName());\n+\n+  @Autowired private UserRegAdminRepository userRegAdminRepository;\n+\n+  @Autowired private LocationRepository locationRepository;\n+\n+  @Override\n+  @Transactional\n+  public LocationResponse addNewLocation(LocationRequest locationRequest) {\n+    logger.entry(\"begin addNewLocation()\");\n+\n+    Optional<UserRegAdminEntity> optUserRegAdminUser =\n+        userRegAdminRepository.findById(locationRequest.getUserId());\n+\n+    UserRegAdminEntity adminUser = optUserRegAdminUser.get();\n+    ManageLocation manageLocation = ManageLocation.valueOf(adminUser.getManageLocations());\n+    if (ManageLocation.DENY.equals(manageLocation)) {\n+      logger.exit(\n+          String.format(\n+              \"Add location failed with error code=%s\", ErrorCode.LOCATION_ACCESS_DENIED));\n+      return new LocationResponse(ErrorCode.LOCATION_ACCESS_DENIED);\n+    }\n+    LocationEntity locationEntity = LocationMapper.fromLocationRequest(locationRequest);\n+    locationEntity.setCreatedBy(adminUser.getId());\n+    locationEntity = locationRepository.saveAndFlush(locationEntity);\n+    logger.exit(String.format(\"locationId=%s\", locationEntity.getId()));\n+\n+    return LocationMapper.toLocationResponse(locationEntity);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwNjQyNw=="}, "originalCommit": {"oid": "456bd182f4c3993007d56f5da72bc269c2f91c1f"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY5Nzc3Nw==", "bodyText": "This was incorrect in the audit-log-service as well, it should've been corrected. I am making the same comments on the new auth service.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/626#discussion_r459697777", "createdAt": "2020-07-23T20:06:17Z", "author": {"login": "nikklassen"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/LocationServiceImpl.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import java.util.Optional;\n+\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.LocationRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.LocationResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.ManageLocation;\n+import com.google.cloud.healthcare.fdamystudies.mapper.LocationMapper;\n+import com.google.cloud.healthcare.fdamystudies.model.LocationEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.UserRegAdminEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.LocationRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserRegAdminRepository;\n+\n+@Service\n+public class LocationServiceImpl implements LocationService {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(LocationServiceImpl.class.getName());\n+\n+  @Autowired private UserRegAdminRepository userRegAdminRepository;\n+\n+  @Autowired private LocationRepository locationRepository;\n+\n+  @Override\n+  @Transactional\n+  public LocationResponse addNewLocation(LocationRequest locationRequest) {\n+    logger.entry(\"begin addNewLocation()\");\n+\n+    Optional<UserRegAdminEntity> optUserRegAdminUser =\n+        userRegAdminRepository.findById(locationRequest.getUserId());\n+\n+    UserRegAdminEntity adminUser = optUserRegAdminUser.get();\n+    ManageLocation manageLocation = ManageLocation.valueOf(adminUser.getManageLocations());\n+    if (ManageLocation.DENY.equals(manageLocation)) {\n+      logger.exit(\n+          String.format(\n+              \"Add location failed with error code=%s\", ErrorCode.LOCATION_ACCESS_DENIED));\n+      return new LocationResponse(ErrorCode.LOCATION_ACCESS_DENIED);\n+    }\n+    LocationEntity locationEntity = LocationMapper.fromLocationRequest(locationRequest);\n+    locationEntity.setCreatedBy(adminUser.getId());\n+    locationEntity = locationRepository.saveAndFlush(locationEntity);\n+    logger.exit(String.format(\"locationId=%s\", locationEntity.getId()));\n+\n+    return LocationMapper.toLocationResponse(locationEntity);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwNjQyNw=="}, "originalCommit": {"oid": "456bd182f4c3993007d56f5da72bc269c2f91c1f"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTM0NzcxOnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/LocationServiceImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNTo1NDozNFrOG0-tuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDowNzoyOVrOG2Zwyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwNjY0OQ==", "bodyText": "Move this to the controller", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/626#discussion_r458206649", "createdAt": "2020-07-21T15:54:34Z", "author": {"login": "nikklassen"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/LocationServiceImpl.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import java.util.Optional;\n+\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.LocationRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.LocationResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.ManageLocation;\n+import com.google.cloud.healthcare.fdamystudies.mapper.LocationMapper;\n+import com.google.cloud.healthcare.fdamystudies.model.LocationEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.UserRegAdminEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.LocationRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserRegAdminRepository;\n+\n+@Service\n+public class LocationServiceImpl implements LocationService {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(LocationServiceImpl.class.getName());\n+\n+  @Autowired private UserRegAdminRepository userRegAdminRepository;\n+\n+  @Autowired private LocationRepository locationRepository;\n+\n+  @Override\n+  @Transactional\n+  public LocationResponse addNewLocation(LocationRequest locationRequest) {\n+    logger.entry(\"begin addNewLocation()\");\n+\n+    Optional<UserRegAdminEntity> optUserRegAdminUser =\n+        userRegAdminRepository.findById(locationRequest.getUserId());\n+\n+    UserRegAdminEntity adminUser = optUserRegAdminUser.get();\n+    ManageLocation manageLocation = ManageLocation.valueOf(adminUser.getManageLocations());\n+    if (ManageLocation.DENY.equals(manageLocation)) {\n+      logger.exit(\n+          String.format(\n+              \"Add location failed with error code=%s\", ErrorCode.LOCATION_ACCESS_DENIED));\n+      return new LocationResponse(ErrorCode.LOCATION_ACCESS_DENIED);\n+    }\n+    LocationEntity locationEntity = LocationMapper.fromLocationRequest(locationRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "456bd182f4c3993007d56f5da72bc269c2f91c1f"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU1MDcwMQ==", "bodyText": "I have followed the approach of audit-log-service, so for consistency will keep the code in service layer. Otherwise it will result in lots of re-work in other services also.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/626#discussion_r458550701", "createdAt": "2020-07-22T05:53:31Z", "author": {"login": "madhurya-btc"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/LocationServiceImpl.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import java.util.Optional;\n+\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.LocationRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.LocationResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.ManageLocation;\n+import com.google.cloud.healthcare.fdamystudies.mapper.LocationMapper;\n+import com.google.cloud.healthcare.fdamystudies.model.LocationEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.UserRegAdminEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.LocationRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserRegAdminRepository;\n+\n+@Service\n+public class LocationServiceImpl implements LocationService {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(LocationServiceImpl.class.getName());\n+\n+  @Autowired private UserRegAdminRepository userRegAdminRepository;\n+\n+  @Autowired private LocationRepository locationRepository;\n+\n+  @Override\n+  @Transactional\n+  public LocationResponse addNewLocation(LocationRequest locationRequest) {\n+    logger.entry(\"begin addNewLocation()\");\n+\n+    Optional<UserRegAdminEntity> optUserRegAdminUser =\n+        userRegAdminRepository.findById(locationRequest.getUserId());\n+\n+    UserRegAdminEntity adminUser = optUserRegAdminUser.get();\n+    ManageLocation manageLocation = ManageLocation.valueOf(adminUser.getManageLocations());\n+    if (ManageLocation.DENY.equals(manageLocation)) {\n+      logger.exit(\n+          String.format(\n+              \"Add location failed with error code=%s\", ErrorCode.LOCATION_ACCESS_DENIED));\n+      return new LocationResponse(ErrorCode.LOCATION_ACCESS_DENIED);\n+    }\n+    LocationEntity locationEntity = LocationMapper.fromLocationRequest(locationRequest);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwNjY0OQ=="}, "originalCommit": {"oid": "456bd182f4c3993007d56f5da72bc269c2f91c1f"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY5ODM3OQ==", "bodyText": "Dhanya is moving this logic in the auth service as well.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/626#discussion_r459698379", "createdAt": "2020-07-23T20:07:29Z", "author": {"login": "nikklassen"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/LocationServiceImpl.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import java.util.Optional;\n+\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.LocationRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.LocationResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.ManageLocation;\n+import com.google.cloud.healthcare.fdamystudies.mapper.LocationMapper;\n+import com.google.cloud.healthcare.fdamystudies.model.LocationEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.UserRegAdminEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.LocationRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserRegAdminRepository;\n+\n+@Service\n+public class LocationServiceImpl implements LocationService {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(LocationServiceImpl.class.getName());\n+\n+  @Autowired private UserRegAdminRepository userRegAdminRepository;\n+\n+  @Autowired private LocationRepository locationRepository;\n+\n+  @Override\n+  @Transactional\n+  public LocationResponse addNewLocation(LocationRequest locationRequest) {\n+    logger.entry(\"begin addNewLocation()\");\n+\n+    Optional<UserRegAdminEntity> optUserRegAdminUser =\n+        userRegAdminRepository.findById(locationRequest.getUserId());\n+\n+    UserRegAdminEntity adminUser = optUserRegAdminUser.get();\n+    ManageLocation manageLocation = ManageLocation.valueOf(adminUser.getManageLocations());\n+    if (ManageLocation.DENY.equals(manageLocation)) {\n+      logger.exit(\n+          String.format(\n+              \"Add location failed with error code=%s\", ErrorCode.LOCATION_ACCESS_DENIED));\n+      return new LocationResponse(ErrorCode.LOCATION_ACCESS_DENIED);\n+    }\n+    LocationEntity locationEntity = LocationMapper.fromLocationRequest(locationRequest);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwNjY0OQ=="}, "originalCommit": {"oid": "456bd182f4c3993007d56f5da72bc269c2f91c1f"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTM5NDA4OnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/mapper/LocationMapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNjowNDo1MFrOG0_KTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNTo1Nzo1NVrOG1TzjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIxMzk2NA==", "bodyText": "If this always has one value it's not really adding any information. You can just set this status in the HTTP controller.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/626#discussion_r458213964", "createdAt": "2020-07-21T16:04:50Z", "author": {"login": "nikklassen"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/mapper/LocationMapper.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.mapper;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.ACTIVE_STATUS;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.NO;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.LocationRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.LocationResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.model.LocationEntity;\n+\n+public final class LocationMapper {\n+\n+  private LocationMapper() {}\n+\n+  public static LocationResponse toLocationResponse(LocationEntity location) {\n+    LocationResponse response = new LocationResponse(MessageCode.ADD_LOCATION_SUCCESS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "456bd182f4c3993007d56f5da72bc269c2f91c1f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU1MjIwNQ==", "bodyText": "This code has been refactored as below, follow up  PR #653\n ```\n\npublic static LocationResponse toLocationResponse(\nLocationEntity location, MessageCode messageCode) {\nLocationResponse response = new LocationResponse(messageCode);}", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/626#discussion_r458552205", "createdAt": "2020-07-22T05:57:55Z", "author": {"login": "madhurya-btc"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/mapper/LocationMapper.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.mapper;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.ACTIVE_STATUS;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.NO;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.LocationRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.LocationResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.model.LocationEntity;\n+\n+public final class LocationMapper {\n+\n+  private LocationMapper() {}\n+\n+  public static LocationResponse toLocationResponse(LocationEntity location) {\n+    LocationResponse response = new LocationResponse(MessageCode.ADD_LOCATION_SUCCESS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIxMzk2NA=="}, "originalCommit": {"oid": "456bd182f4c3993007d56f5da72bc269c2f91c1f"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2286, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}