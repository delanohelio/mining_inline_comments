{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1MDE1NjE2", "number": 428, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzo0MzoyMVrOEA5Rhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzozNTo0OFrOEA-t0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzczODMwOnYy", "diffSide": "RIGHT", "path": "iOS/HPHC/HPHC/Models/UserModel/User.swift", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzo0MzoyMVrOGcdKjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMTo1MTowM1rOGdH0ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5MTE0OA==", "bodyText": "loggedInUser", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/428#discussion_r432491148", "createdAt": "2020-05-29T13:43:21Z", "author": {"login": "nikklassen"}, "path": "iOS/HPHC/HPHC/Models/UserModel/User.swift", "diffHunk": "@@ -19,39 +19,39 @@\n import Foundation\n \n enum UserType: Int {\n-  case AnonymousUser = 0\n-  case FDAUser\n+  case anonymousUser = 0\n+  case loggedUser", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2866af7553fa975f419b338301e7f4e8051409"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE5MDA4Mw==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/428#discussion_r433190083", "createdAt": "2020-06-01T11:51:03Z", "author": {"login": "tushar-boston"}, "path": "iOS/HPHC/HPHC/Models/UserModel/User.swift", "diffHunk": "@@ -19,39 +19,39 @@\n import Foundation\n \n enum UserType: Int {\n-  case AnonymousUser = 0\n-  case FDAUser\n+  case anonymousUser = 0\n+  case loggedUser", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5MTE0OA=="}, "originalCommit": {"oid": "ff2866af7553fa975f419b338301e7f4e8051409"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Mzc1MDI4OnYy", "diffSide": "RIGHT", "path": "iOS/HPHC/HPHC/Utils/Utilities.swift", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzo0NjozMVrOGcdSSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjo1MDozNVrOGdSLtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5MzEyOQ==", "bodyText": "why aren't these just constants? They don't really describe different aspects of the same concept", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/428#discussion_r432493129", "createdAt": "2020-05-29T13:46:31Z", "author": {"login": "nikklassen"}, "path": "iOS/HPHC/HPHC/Utils/Utilities.swift", "diffHunk": "@@ -30,51 +30,51 @@ enum DirectoryType: String {\n \n enum ScreenSize {\n \n-  static let SCREEN_WIDTH = UIScreen.main.bounds.size.width\n-  static let SCREEN_HEIGHT = UIScreen.main.bounds.size.height\n-  static let SCREEN_MAX_LENGTH = max(ScreenSize.SCREEN_WIDTH, ScreenSize.SCREEN_HEIGHT)\n-  static let SCREEN_MIN_LENGTH = min(ScreenSize.SCREEN_WIDTH, ScreenSize.SCREEN_HEIGHT)\n+  static let screenWidth = UIScreen.main.bounds.size.width", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2866af7553fa975f419b338301e7f4e8051409"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA1ODgzNw==", "bodyText": "These are constants only but will be instantiated on runtime based on device width and height.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/428#discussion_r433058837", "createdAt": "2020-06-01T06:13:39Z", "author": {"login": "tushar-boston"}, "path": "iOS/HPHC/HPHC/Utils/Utilities.swift", "diffHunk": "@@ -30,51 +30,51 @@ enum DirectoryType: String {\n \n enum ScreenSize {\n \n-  static let SCREEN_WIDTH = UIScreen.main.bounds.size.width\n-  static let SCREEN_HEIGHT = UIScreen.main.bounds.size.height\n-  static let SCREEN_MAX_LENGTH = max(ScreenSize.SCREEN_WIDTH, ScreenSize.SCREEN_HEIGHT)\n-  static let SCREEN_MIN_LENGTH = min(ScreenSize.SCREEN_WIDTH, ScreenSize.SCREEN_HEIGHT)\n+  static let screenWidth = UIScreen.main.bounds.size.width", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5MzEyOQ=="}, "originalCommit": {"oid": "ff2866af7553fa975f419b338301e7f4e8051409"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIyODcxMQ==", "bodyText": "Right, but what I meant is this isn't an enum. By calling it an enum people are going to think it's different types of screen sizes, but it's just 4 different numbers you've group together. Please change it to something that isn't an enum.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/428#discussion_r433228711", "createdAt": "2020-06-01T13:19:39Z", "author": {"login": "nikklassen"}, "path": "iOS/HPHC/HPHC/Utils/Utilities.swift", "diffHunk": "@@ -30,51 +30,51 @@ enum DirectoryType: String {\n \n enum ScreenSize {\n \n-  static let SCREEN_WIDTH = UIScreen.main.bounds.size.width\n-  static let SCREEN_HEIGHT = UIScreen.main.bounds.size.height\n-  static let SCREEN_MAX_LENGTH = max(ScreenSize.SCREEN_WIDTH, ScreenSize.SCREEN_HEIGHT)\n-  static let SCREEN_MIN_LENGTH = min(ScreenSize.SCREEN_WIDTH, ScreenSize.SCREEN_HEIGHT)\n+  static let screenWidth = UIScreen.main.bounds.size.width", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5MzEyOQ=="}, "originalCommit": {"oid": "ff2866af7553fa975f419b338301e7f4e8051409"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM1OTc5OA==", "bodyText": "Makes sense. Updated them to struct so that they're still scoped in a type and can be accessed globally.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/428#discussion_r433359798", "createdAt": "2020-06-01T16:50:35Z", "author": {"login": "tushar-boston"}, "path": "iOS/HPHC/HPHC/Utils/Utilities.swift", "diffHunk": "@@ -30,51 +30,51 @@ enum DirectoryType: String {\n \n enum ScreenSize {\n \n-  static let SCREEN_WIDTH = UIScreen.main.bounds.size.width\n-  static let SCREEN_HEIGHT = UIScreen.main.bounds.size.height\n-  static let SCREEN_MAX_LENGTH = max(ScreenSize.SCREEN_WIDTH, ScreenSize.SCREEN_HEIGHT)\n-  static let SCREEN_MIN_LENGTH = min(ScreenSize.SCREEN_WIDTH, ScreenSize.SCREEN_HEIGHT)\n+  static let screenWidth = UIScreen.main.bounds.size.width", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5MzEyOQ=="}, "originalCommit": {"oid": "ff2866af7553fa975f419b338301e7f4e8051409"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Mzc1OTUwOnYy", "diffSide": "RIGHT", "path": "iOS/HPHC/HPHC/Utils/Utilities.swift", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzo0OTowMFrOGcdYNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzoyMToxMVrOGdKOtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NDY0NQ==", "bodyText": "This also doesn't seem like an enum.  DeviceType should be these named values, but then you should have a function called getDeviceType that returns the correct one dynamically.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/428#discussion_r432494645", "createdAt": "2020-05-29T13:49:00Z", "author": {"login": "nikklassen"}, "path": "iOS/HPHC/HPHC/Utils/Utilities.swift", "diffHunk": "@@ -30,51 +30,51 @@ enum DirectoryType: String {\n \n enum ScreenSize {\n \n-  static let SCREEN_WIDTH = UIScreen.main.bounds.size.width\n-  static let SCREEN_HEIGHT = UIScreen.main.bounds.size.height\n-  static let SCREEN_MAX_LENGTH = max(ScreenSize.SCREEN_WIDTH, ScreenSize.SCREEN_HEIGHT)\n-  static let SCREEN_MIN_LENGTH = min(ScreenSize.SCREEN_WIDTH, ScreenSize.SCREEN_HEIGHT)\n+  static let screenWidth = UIScreen.main.bounds.size.width\n+  static let screenHeight = UIScreen.main.bounds.size.height\n+  static let screenMaxLength = max(ScreenSize.screenWidth, ScreenSize.screenHeight)\n+  static let screenMinLength = min(ScreenSize.screenWidth, ScreenSize.screenHeight)\n }\n \n enum DeviceType {\n \n-  static let IS_IPHONE_4_OR_LESS =\n+  static let isIPhone4OrLess =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2866af7553fa975f419b338301e7f4e8051409"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE4OTcyMQ==", "bodyText": "These are typed property that all instances of the type can access. Essentially a global variable associated with DeviceType.\nThese are accessed for a direct comparison.\nFor eg:- if DeviceType. isIPhone4OrLess { // Do something }", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/428#discussion_r433189721", "createdAt": "2020-06-01T11:50:08Z", "author": {"login": "tushar-boston"}, "path": "iOS/HPHC/HPHC/Utils/Utilities.swift", "diffHunk": "@@ -30,51 +30,51 @@ enum DirectoryType: String {\n \n enum ScreenSize {\n \n-  static let SCREEN_WIDTH = UIScreen.main.bounds.size.width\n-  static let SCREEN_HEIGHT = UIScreen.main.bounds.size.height\n-  static let SCREEN_MAX_LENGTH = max(ScreenSize.SCREEN_WIDTH, ScreenSize.SCREEN_HEIGHT)\n-  static let SCREEN_MIN_LENGTH = min(ScreenSize.SCREEN_WIDTH, ScreenSize.SCREEN_HEIGHT)\n+  static let screenWidth = UIScreen.main.bounds.size.width\n+  static let screenHeight = UIScreen.main.bounds.size.height\n+  static let screenMaxLength = max(ScreenSize.screenWidth, ScreenSize.screenHeight)\n+  static let screenMinLength = min(ScreenSize.screenWidth, ScreenSize.screenHeight)\n }\n \n enum DeviceType {\n \n-  static let IS_IPHONE_4_OR_LESS =\n+  static let isIPhone4OrLess =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NDY0NQ=="}, "originalCommit": {"oid": "ff2866af7553fa975f419b338301e7f4e8051409"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIyOTQ5NA==", "bodyText": "I understand how you are using this. But again, this is not how enums are supposed to work. An enum would enumerate the possible device types.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/428#discussion_r433229494", "createdAt": "2020-06-01T13:21:11Z", "author": {"login": "nikklassen"}, "path": "iOS/HPHC/HPHC/Utils/Utilities.swift", "diffHunk": "@@ -30,51 +30,51 @@ enum DirectoryType: String {\n \n enum ScreenSize {\n \n-  static let SCREEN_WIDTH = UIScreen.main.bounds.size.width\n-  static let SCREEN_HEIGHT = UIScreen.main.bounds.size.height\n-  static let SCREEN_MAX_LENGTH = max(ScreenSize.SCREEN_WIDTH, ScreenSize.SCREEN_HEIGHT)\n-  static let SCREEN_MIN_LENGTH = min(ScreenSize.SCREEN_WIDTH, ScreenSize.SCREEN_HEIGHT)\n+  static let screenWidth = UIScreen.main.bounds.size.width\n+  static let screenHeight = UIScreen.main.bounds.size.height\n+  static let screenMaxLength = max(ScreenSize.screenWidth, ScreenSize.screenHeight)\n+  static let screenMinLength = min(ScreenSize.screenWidth, ScreenSize.screenHeight)\n }\n \n enum DeviceType {\n \n-  static let IS_IPHONE_4_OR_LESS =\n+  static let isIPhone4OrLess =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NDY0NQ=="}, "originalCommit": {"oid": "ff2866af7553fa975f419b338301e7f4e8051409"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Mzc2MjA0OnYy", "diffSide": "RIGHT", "path": "iOS/HPHC/HPHC/Utils/Utilities.swift", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzo0OTo0MFrOGcdZ2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzo0OTo0MFrOGcdZ2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NTA2Nw==", "bodyText": "same as DeviceType", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/428#discussion_r432495067", "createdAt": "2020-05-29T13:49:40Z", "author": {"login": "nikklassen"}, "path": "iOS/HPHC/HPHC/Utils/Utilities.swift", "diffHunk": "@@ -30,51 +30,51 @@ enum DirectoryType: String {\n \n enum ScreenSize {\n \n-  static let SCREEN_WIDTH = UIScreen.main.bounds.size.width\n-  static let SCREEN_HEIGHT = UIScreen.main.bounds.size.height\n-  static let SCREEN_MAX_LENGTH = max(ScreenSize.SCREEN_WIDTH, ScreenSize.SCREEN_HEIGHT)\n-  static let SCREEN_MIN_LENGTH = min(ScreenSize.SCREEN_WIDTH, ScreenSize.SCREEN_HEIGHT)\n+  static let screenWidth = UIScreen.main.bounds.size.width\n+  static let screenHeight = UIScreen.main.bounds.size.height\n+  static let screenMaxLength = max(ScreenSize.screenWidth, ScreenSize.screenHeight)\n+  static let screenMinLength = min(ScreenSize.screenWidth, ScreenSize.screenHeight)\n }\n \n enum DeviceType {\n \n-  static let IS_IPHONE_4_OR_LESS =\n+  static let isIPhone4OrLess =\n     UIDevice.current.userInterfaceIdiom == .phone\n     && ScreenSize\n-      .SCREEN_MAX_LENGTH < 568.0\n+      .screenMaxLength < 568.0\n \n-  static let IS_IPHONE_5 =\n+  static let isIPhone5 =\n     UIDevice.current.userInterfaceIdiom == .phone\n     && ScreenSize\n-      .SCREEN_MAX_LENGTH == 568.0\n+      .screenMaxLength == 568.0\n \n-  static let IS_IPHONE_6 =\n+  static let isIPhoneSE2 =\n     UIDevice.current.userInterfaceIdiom == .phone\n     && ScreenSize\n-      .SCREEN_MAX_LENGTH == 667.0\n+      .screenMaxLength == 667.0\n \n-  static let IS_IPHONE_6P =\n+  static let isIPhone8P =\n     UIDevice.current.userInterfaceIdiom == .phone\n     && ScreenSize\n-      .SCREEN_MAX_LENGTH == 736.0\n+      .screenMaxLength == 736.0\n \n-  static let IS_IPAD =\n+  static let isIPad =\n     UIDevice.current.userInterfaceIdiom == .pad\n-    && ScreenSize.SCREEN_MAX_LENGTH\n+    && ScreenSize.screenMaxLength\n       == 1024.0\n \n-  static let IS_IPHONE_X_OR_HIGH =\n+  static let isIPhoneXOrHigh =\n     UIDevice.current.userInterfaceIdiom == .phone\n     && ScreenSize\n-      .SCREEN_MAX_LENGTH >= 812\n+      .screenMaxLength >= 812\n }\n \n enum iOSVersion {\n \n-  static let SYS_VERSION_FLOAT = (UIDevice.current.systemVersion as NSString).floatValue\n-  static let iOS7 = (iOSVersion.SYS_VERSION_FLOAT < 8.0 && iOSVersion.SYS_VERSION_FLOAT >= 7.0)\n-  static let iOS8 = (iOSVersion.SYS_VERSION_FLOAT >= 8.0 && iOSVersion.SYS_VERSION_FLOAT < 9.0)\n-  static let iOS9 = (iOSVersion.SYS_VERSION_FLOAT >= 9.0 && iOSVersion.SYS_VERSION_FLOAT < 10.0)\n+  static let systemVersion = (UIDevice.current.systemVersion as NSString).floatValue", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2866af7553fa975f419b338301e7f4e8051409"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDI5NDI2OnYy", "diffSide": "RIGHT", "path": "iOS/HPHC/HPHC/Models/Dashboard/StudyDashboard.swift", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNTo1NzowMlrOGcir8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzoyMjo1NlrOGdKSGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU4MTYxNg==", "bodyText": "why do these need to be strings now?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/428#discussion_r432581616", "createdAt": "2020-05-29T15:57:02Z", "author": {"login": "nikklassen"}, "path": "iOS/HPHC/HPHC/Models/Dashboard/StudyDashboard.swift", "diffHunk": "@@ -22,21 +22,32 @@ import UIKit\n \n enum StatisticsFormula: String {\n \n-  case Summation\n-  case Average\n-  case Maximum\n-  case Minimum\n+  case summation = \"Summation\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2866af7553fa975f419b338301e7f4e8051409"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE4NTI5MQ==", "bodyText": "To instantiate it. The existing code was instantiating them using the raw values which are coming from APIs. I've explicitly defined the raw values so that they won't break.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/428#discussion_r433185291", "createdAt": "2020-06-01T11:38:09Z", "author": {"login": "tushar-boston"}, "path": "iOS/HPHC/HPHC/Models/Dashboard/StudyDashboard.swift", "diffHunk": "@@ -22,21 +22,32 @@ import UIKit\n \n enum StatisticsFormula: String {\n \n-  case Summation\n-  case Average\n-  case Maximum\n-  case Minimum\n+  case summation = \"Summation\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU4MTYxNg=="}, "originalCommit": {"oid": "ff2866af7553fa975f419b338301e7f4e8051409"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIzMDM2Mg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/428#discussion_r433230362", "createdAt": "2020-06-01T13:22:56Z", "author": {"login": "nikklassen"}, "path": "iOS/HPHC/HPHC/Models/Dashboard/StudyDashboard.swift", "diffHunk": "@@ -22,21 +22,32 @@ import UIKit\n \n enum StatisticsFormula: String {\n \n-  case Summation\n-  case Average\n-  case Maximum\n-  case Minimum\n+  case summation = \"Summation\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU4MTYxNg=="}, "originalCommit": {"oid": "ff2866af7553fa975f419b338301e7f4e8051409"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDYyOTkzOnYy", "diffSide": "RIGHT", "path": "iOS/HPHC/HPHC/Views/Cells/CollectionView/Study/StudyDashboardStatisticsCollectionViewCell.swift", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzozNTo0OFrOGcmDvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMTozNTo1OFrOGdHfEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzNjg2Mw==", "bodyText": "Did you make this a string so that this doesn't have to be a switch?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/428#discussion_r432636863", "createdAt": "2020-05-29T17:35:48Z", "author": {"login": "nikklassen"}, "path": "iOS/HPHC/HPHC/Views/Cells/CollectionView/Study/StudyDashboardStatisticsCollectionViewCell.swift", "diffHunk": "@@ -19,38 +20,38 @@\n import UIKit\n \n enum StatisticsType: String {\n-  case Activity\n-  case Sleep\n-  case Weight\n-  case Nutrition\n-  case HeartRate\n-  case BloodGlucose\n-  case ActiveTask\n-  case BabyKicks\n-  case Mood\n-  case Other\n+  case activity = \"Activity\"\n+  case sleep = \"Sleep\"\n+  case weight = \"Weight\"\n+  case nutrition = \"Nutrition\"\n+  case heartRate = \"HeartRate\"\n+  case bloodGlucose = \"BloodGlucose\"\n+  case activeTask = \"ActiveTask\"\n+  case babyKicks = \"BabyKicks\"\n+  case mood = \"Mood\"\n+  case other = \"Other\"\n \n   var description: String {\n     switch self {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2866af7553fa975f419b338301e7f4e8051409"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE4NDUzMA==", "bodyText": "No, these are raw values to instantiate the enum. if we don't define them, by default enum can be instantiated using the element name.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/428#discussion_r433184530", "createdAt": "2020-06-01T11:35:58Z", "author": {"login": "tushar-boston"}, "path": "iOS/HPHC/HPHC/Views/Cells/CollectionView/Study/StudyDashboardStatisticsCollectionViewCell.swift", "diffHunk": "@@ -19,38 +20,38 @@\n import UIKit\n \n enum StatisticsType: String {\n-  case Activity\n-  case Sleep\n-  case Weight\n-  case Nutrition\n-  case HeartRate\n-  case BloodGlucose\n-  case ActiveTask\n-  case BabyKicks\n-  case Mood\n-  case Other\n+  case activity = \"Activity\"\n+  case sleep = \"Sleep\"\n+  case weight = \"Weight\"\n+  case nutrition = \"Nutrition\"\n+  case heartRate = \"HeartRate\"\n+  case bloodGlucose = \"BloodGlucose\"\n+  case activeTask = \"ActiveTask\"\n+  case babyKicks = \"BabyKicks\"\n+  case mood = \"Mood\"\n+  case other = \"Other\"\n \n   var description: String {\n     switch self {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzNjg2Mw=="}, "originalCommit": {"oid": "ff2866af7553fa975f419b338301e7f4e8051409"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1150, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}