{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzNTkwNTI2", "number": 1047, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODowODoyNVrOEoM9XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODozMzo0MlrOEoNe5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTkwODEyOnYy", "diffSide": "RIGHT", "path": "WCP/fdahpStudyDesigner/src/main/java/com/fdahpstudydesigner/controller/UsersController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODowODoyNVrOHZJ-VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODowODoyNVrOHZJ-VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEzOTg2MQ==", "bodyText": "typo, please rename", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1047#discussion_r496139861", "createdAt": "2020-09-28T18:08:25Z", "author": {"login": "saminguyen"}, "path": "WCP/fdahpStudyDesigner/src/main/java/com/fdahpstudydesigner/controller/UsersController.java", "diffHunk": "@@ -62,6 +79,8 @@\n \n   @Autowired private UsersService usersService;\n \n+  @Autowired private StudyBuilderAuditEventHelper auditLogEvEntHelper;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b06a33f2a822bfdd914e2be5fc5518c478c9482d"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTk5Mzk5OnYy", "diffSide": "RIGHT", "path": "WCP/fdahpStudyDesigner/src/test/java/com/fdahpstudydesigner/controller/UsersControllerTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODozMzo0MlrOHZKzpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMDo1MToxNFrOHaBOAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE1MzUwOQ==", "bodyText": "Do we not check for the values being passed into the audit event in unit tests? We should check if the audit event call has the correct ${edited_user_id}, and same with other audit log requests", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1047#discussion_r496153509", "createdAt": "2020-09-28T18:33:42Z", "author": {"login": "saminguyen"}, "path": "WCP/fdahpStudyDesigner/src/test/java/com/fdahpstudydesigner/controller/UsersControllerTest.java", "diffHunk": "@@ -0,0 +1,204 @@\n+package com.fdahpstudydesigner.controller;\n+\n+import static com.fdahpstudydesigner.common.StudyBuilderAuditEvent.ACCOUNT_DETAILS_VIEWED;\n+import static com.fdahpstudydesigner.common.StudyBuilderAuditEvent.NEW_USER_CREATION_FAILED;\n+import static com.fdahpstudydesigner.common.StudyBuilderAuditEvent.PASSWORD_CHANGE_ENFORCED_FOR_ALL_USERS;\n+import static com.fdahpstudydesigner.common.StudyBuilderAuditEvent.PASSWORD_CHANGE_ENFORCED_FOR_USER;\n+import static com.fdahpstudydesigner.common.StudyBuilderAuditEvent.PASSWORD_CHANGE_ENFORCEMENT_EMAIL_FAILED;\n+import static com.fdahpstudydesigner.common.StudyBuilderAuditEvent.PASSWORD_HELP_EMAIL_FAILED;\n+import static com.fdahpstudydesigner.common.StudyBuilderAuditEvent.USER_ACCOUNT_UPDATED_FAILED;\n+import static com.fdahpstudydesigner.common.StudyBuilderAuditEvent.USER_RECORD_VIEWED;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;\n+import com.fdahpstudydesigner.common.BaseMockIT;\n+import com.fdahpstudydesigner.common.PathMappingUri;\n+import com.fdahpstudydesigner.util.FdahpStudyDesignerConstants;\n+import com.fdahpstudydesigner.util.SessionObject;\n+import java.util.HashMap;\n+import java.util.UUID;\n+import org.junit.Test;\n+import org.springframework.http.HttpHeaders;\n+\n+public class UsersControllerTest extends BaseMockIT {\n+\n+  @Test\n+  public void shouldViewUserDetails() throws Exception {\n+    HttpHeaders headers = getCommonHeaders();\n+\n+    mockMvc\n+        .perform(\n+            post(PathMappingUri.VIEW_USER_DETAILS.getPath())\n+                .param(\"userId\", \"2\")\n+                .param(\"checkViewRefreshFlag\", \"true\")\n+                .headers(headers)\n+                .sessionAttrs(getSession()))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(view().name(\"addOrEditUserPage\"));\n+\n+    verifyAuditEventCall(ACCOUNT_DETAILS_VIEWED);\n+  }\n+\n+  @Test\n+  public void shouldUserRecordViewed() throws Exception {\n+    HttpHeaders headers = getCommonHeaders();\n+\n+    SessionObject session = new SessionObject();\n+    session.setSessionId(UUID.randomUUID().toString());\n+    session.setEmail(\"super@gmail.com\");\n+    session.setFirstName(\"firstname\");\n+    session.setLastName(\"lastname\");\n+    session.setAccessLevel(\"2\");\n+    session.setUserId(1);\n+\n+    HashMap<String, Object> sessionAttributes = new HashMap<String, Object>();\n+    sessionAttributes.put(FdahpStudyDesignerConstants.SESSION_OBJECT, session);\n+\n+    mockMvc\n+        .perform(\n+            post(PathMappingUri.VIEW_USER_DETAILS.getPath())\n+                .param(\"userId\", \"2\")\n+                .param(\"checkViewRefreshFlag\", \"true\")\n+                .headers(headers)\n+                .sessionAttrs(sessionAttributes))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(view().name(\"addOrEditUserPage\"));\n+\n+    verifyAuditEventCall(USER_RECORD_VIEWED);\n+  }\n+\n+  @Test\n+  public void shouldResendActivateDetailsLink() throws Exception {\n+    HttpHeaders headers = getCommonHeaders();\n+\n+    mockMvc\n+        .perform(\n+            post(PathMappingUri.RESEND_ACTIVATE_DETAILS_LINK.getPath())\n+                .param(\"userId\", \"2\")\n+                .headers(headers)\n+                .sessionAttrs(getSession()))\n+        .andDo(print())\n+        .andExpect(status().isFound())\n+        .andExpect(view().name(\"redirect:/adminUsersView/getUserList.do\"));\n+\n+    // H2 database doesn't support Column \"BINARY\". Expect LoginDAOImpl throws\n+    // org.h2.jdbc.JdbcSQLException: Column \"BINARY\" not found;\n+    verifyAuditEventCall(PASSWORD_HELP_EMAIL_FAILED);\n+  }\n+\n+  @Test\n+  public void shouldEnforcePasswordChange() throws Exception {\n+    HttpHeaders headers = getCommonHeaders();\n+\n+    mockMvc\n+        .perform(\n+            post(PathMappingUri.ENFORCE_PASSWORD_CHANGE.getPath())\n+                .param(\"changePassworduserId\", \"2\")\n+                .param(\"emailId\", \"super@gmail.com\")\n+                .headers(headers)\n+                .sessionAttrs(getSession()))\n+        .andDo(print())\n+        .andExpect(status().isFound())\n+        .andExpect(view().name(\"redirect:/adminUsersView/getUserList.do\"));\n+\n+    verifyAuditEventCall(PASSWORD_CHANGE_ENFORCED_FOR_USER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b06a33f2a822bfdd914e2be5fc5518c478c9482d"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgzOTMwNg==", "bodyText": "We are setting all the required values in the session object.\nAll the required validations for audit log events are written in BaseMockIT class.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1047#discussion_r496839306", "createdAt": "2020-09-29T15:51:32Z", "author": {"login": "chiranjibi009"}, "path": "WCP/fdahpStudyDesigner/src/test/java/com/fdahpstudydesigner/controller/UsersControllerTest.java", "diffHunk": "@@ -0,0 +1,204 @@\n+package com.fdahpstudydesigner.controller;\n+\n+import static com.fdahpstudydesigner.common.StudyBuilderAuditEvent.ACCOUNT_DETAILS_VIEWED;\n+import static com.fdahpstudydesigner.common.StudyBuilderAuditEvent.NEW_USER_CREATION_FAILED;\n+import static com.fdahpstudydesigner.common.StudyBuilderAuditEvent.PASSWORD_CHANGE_ENFORCED_FOR_ALL_USERS;\n+import static com.fdahpstudydesigner.common.StudyBuilderAuditEvent.PASSWORD_CHANGE_ENFORCED_FOR_USER;\n+import static com.fdahpstudydesigner.common.StudyBuilderAuditEvent.PASSWORD_CHANGE_ENFORCEMENT_EMAIL_FAILED;\n+import static com.fdahpstudydesigner.common.StudyBuilderAuditEvent.PASSWORD_HELP_EMAIL_FAILED;\n+import static com.fdahpstudydesigner.common.StudyBuilderAuditEvent.USER_ACCOUNT_UPDATED_FAILED;\n+import static com.fdahpstudydesigner.common.StudyBuilderAuditEvent.USER_RECORD_VIEWED;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;\n+import com.fdahpstudydesigner.common.BaseMockIT;\n+import com.fdahpstudydesigner.common.PathMappingUri;\n+import com.fdahpstudydesigner.util.FdahpStudyDesignerConstants;\n+import com.fdahpstudydesigner.util.SessionObject;\n+import java.util.HashMap;\n+import java.util.UUID;\n+import org.junit.Test;\n+import org.springframework.http.HttpHeaders;\n+\n+public class UsersControllerTest extends BaseMockIT {\n+\n+  @Test\n+  public void shouldViewUserDetails() throws Exception {\n+    HttpHeaders headers = getCommonHeaders();\n+\n+    mockMvc\n+        .perform(\n+            post(PathMappingUri.VIEW_USER_DETAILS.getPath())\n+                .param(\"userId\", \"2\")\n+                .param(\"checkViewRefreshFlag\", \"true\")\n+                .headers(headers)\n+                .sessionAttrs(getSession()))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(view().name(\"addOrEditUserPage\"));\n+\n+    verifyAuditEventCall(ACCOUNT_DETAILS_VIEWED);\n+  }\n+\n+  @Test\n+  public void shouldUserRecordViewed() throws Exception {\n+    HttpHeaders headers = getCommonHeaders();\n+\n+    SessionObject session = new SessionObject();\n+    session.setSessionId(UUID.randomUUID().toString());\n+    session.setEmail(\"super@gmail.com\");\n+    session.setFirstName(\"firstname\");\n+    session.setLastName(\"lastname\");\n+    session.setAccessLevel(\"2\");\n+    session.setUserId(1);\n+\n+    HashMap<String, Object> sessionAttributes = new HashMap<String, Object>();\n+    sessionAttributes.put(FdahpStudyDesignerConstants.SESSION_OBJECT, session);\n+\n+    mockMvc\n+        .perform(\n+            post(PathMappingUri.VIEW_USER_DETAILS.getPath())\n+                .param(\"userId\", \"2\")\n+                .param(\"checkViewRefreshFlag\", \"true\")\n+                .headers(headers)\n+                .sessionAttrs(sessionAttributes))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(view().name(\"addOrEditUserPage\"));\n+\n+    verifyAuditEventCall(USER_RECORD_VIEWED);\n+  }\n+\n+  @Test\n+  public void shouldResendActivateDetailsLink() throws Exception {\n+    HttpHeaders headers = getCommonHeaders();\n+\n+    mockMvc\n+        .perform(\n+            post(PathMappingUri.RESEND_ACTIVATE_DETAILS_LINK.getPath())\n+                .param(\"userId\", \"2\")\n+                .headers(headers)\n+                .sessionAttrs(getSession()))\n+        .andDo(print())\n+        .andExpect(status().isFound())\n+        .andExpect(view().name(\"redirect:/adminUsersView/getUserList.do\"));\n+\n+    // H2 database doesn't support Column \"BINARY\". Expect LoginDAOImpl throws\n+    // org.h2.jdbc.JdbcSQLException: Column \"BINARY\" not found;\n+    verifyAuditEventCall(PASSWORD_HELP_EMAIL_FAILED);\n+  }\n+\n+  @Test\n+  public void shouldEnforcePasswordChange() throws Exception {\n+    HttpHeaders headers = getCommonHeaders();\n+\n+    mockMvc\n+        .perform(\n+            post(PathMappingUri.ENFORCE_PASSWORD_CHANGE.getPath())\n+                .param(\"changePassworduserId\", \"2\")\n+                .param(\"emailId\", \"super@gmail.com\")\n+                .headers(headers)\n+                .sessionAttrs(getSession()))\n+        .andDo(print())\n+        .andExpect(status().isFound())\n+        .andExpect(view().name(\"redirect:/adminUsersView/getUserList.do\"));\n+\n+    verifyAuditEventCall(PASSWORD_CHANGE_ENFORCED_FOR_USER);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE1MzUwOQ=="}, "originalCommit": {"oid": "b06a33f2a822bfdd914e2be5fc5518c478c9482d"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA0NDk5NA==", "bodyText": "Yes, I do see that that is the case. The only thing that is checked in the audit request's description though is that it does not contain any \"{\", \"}\". I am suggesting it might be helpful to check what values are actually being passed in the description, but that would probably be an enhancement for the future. I will approve this PR for now", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1047#discussion_r497044994", "createdAt": "2020-09-29T20:51:14Z", "author": {"login": "saminguyen"}, "path": "WCP/fdahpStudyDesigner/src/test/java/com/fdahpstudydesigner/controller/UsersControllerTest.java", "diffHunk": "@@ -0,0 +1,204 @@\n+package com.fdahpstudydesigner.controller;\n+\n+import static com.fdahpstudydesigner.common.StudyBuilderAuditEvent.ACCOUNT_DETAILS_VIEWED;\n+import static com.fdahpstudydesigner.common.StudyBuilderAuditEvent.NEW_USER_CREATION_FAILED;\n+import static com.fdahpstudydesigner.common.StudyBuilderAuditEvent.PASSWORD_CHANGE_ENFORCED_FOR_ALL_USERS;\n+import static com.fdahpstudydesigner.common.StudyBuilderAuditEvent.PASSWORD_CHANGE_ENFORCED_FOR_USER;\n+import static com.fdahpstudydesigner.common.StudyBuilderAuditEvent.PASSWORD_CHANGE_ENFORCEMENT_EMAIL_FAILED;\n+import static com.fdahpstudydesigner.common.StudyBuilderAuditEvent.PASSWORD_HELP_EMAIL_FAILED;\n+import static com.fdahpstudydesigner.common.StudyBuilderAuditEvent.USER_ACCOUNT_UPDATED_FAILED;\n+import static com.fdahpstudydesigner.common.StudyBuilderAuditEvent.USER_RECORD_VIEWED;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;\n+import com.fdahpstudydesigner.common.BaseMockIT;\n+import com.fdahpstudydesigner.common.PathMappingUri;\n+import com.fdahpstudydesigner.util.FdahpStudyDesignerConstants;\n+import com.fdahpstudydesigner.util.SessionObject;\n+import java.util.HashMap;\n+import java.util.UUID;\n+import org.junit.Test;\n+import org.springframework.http.HttpHeaders;\n+\n+public class UsersControllerTest extends BaseMockIT {\n+\n+  @Test\n+  public void shouldViewUserDetails() throws Exception {\n+    HttpHeaders headers = getCommonHeaders();\n+\n+    mockMvc\n+        .perform(\n+            post(PathMappingUri.VIEW_USER_DETAILS.getPath())\n+                .param(\"userId\", \"2\")\n+                .param(\"checkViewRefreshFlag\", \"true\")\n+                .headers(headers)\n+                .sessionAttrs(getSession()))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(view().name(\"addOrEditUserPage\"));\n+\n+    verifyAuditEventCall(ACCOUNT_DETAILS_VIEWED);\n+  }\n+\n+  @Test\n+  public void shouldUserRecordViewed() throws Exception {\n+    HttpHeaders headers = getCommonHeaders();\n+\n+    SessionObject session = new SessionObject();\n+    session.setSessionId(UUID.randomUUID().toString());\n+    session.setEmail(\"super@gmail.com\");\n+    session.setFirstName(\"firstname\");\n+    session.setLastName(\"lastname\");\n+    session.setAccessLevel(\"2\");\n+    session.setUserId(1);\n+\n+    HashMap<String, Object> sessionAttributes = new HashMap<String, Object>();\n+    sessionAttributes.put(FdahpStudyDesignerConstants.SESSION_OBJECT, session);\n+\n+    mockMvc\n+        .perform(\n+            post(PathMappingUri.VIEW_USER_DETAILS.getPath())\n+                .param(\"userId\", \"2\")\n+                .param(\"checkViewRefreshFlag\", \"true\")\n+                .headers(headers)\n+                .sessionAttrs(sessionAttributes))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(view().name(\"addOrEditUserPage\"));\n+\n+    verifyAuditEventCall(USER_RECORD_VIEWED);\n+  }\n+\n+  @Test\n+  public void shouldResendActivateDetailsLink() throws Exception {\n+    HttpHeaders headers = getCommonHeaders();\n+\n+    mockMvc\n+        .perform(\n+            post(PathMappingUri.RESEND_ACTIVATE_DETAILS_LINK.getPath())\n+                .param(\"userId\", \"2\")\n+                .headers(headers)\n+                .sessionAttrs(getSession()))\n+        .andDo(print())\n+        .andExpect(status().isFound())\n+        .andExpect(view().name(\"redirect:/adminUsersView/getUserList.do\"));\n+\n+    // H2 database doesn't support Column \"BINARY\". Expect LoginDAOImpl throws\n+    // org.h2.jdbc.JdbcSQLException: Column \"BINARY\" not found;\n+    verifyAuditEventCall(PASSWORD_HELP_EMAIL_FAILED);\n+  }\n+\n+  @Test\n+  public void shouldEnforcePasswordChange() throws Exception {\n+    HttpHeaders headers = getCommonHeaders();\n+\n+    mockMvc\n+        .perform(\n+            post(PathMappingUri.ENFORCE_PASSWORD_CHANGE.getPath())\n+                .param(\"changePassworduserId\", \"2\")\n+                .param(\"emailId\", \"super@gmail.com\")\n+                .headers(headers)\n+                .sessionAttrs(getSession()))\n+        .andDo(print())\n+        .andExpect(status().isFound())\n+        .andExpect(view().name(\"redirect:/adminUsersView/getUserList.do\"));\n+\n+    verifyAuditEventCall(PASSWORD_CHANGE_ENFORCED_FOR_USER);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE1MzUwOQ=="}, "originalCommit": {"oid": "b06a33f2a822bfdd914e2be5fc5518c478c9482d"}, "originalPosition": 107}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1834, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}