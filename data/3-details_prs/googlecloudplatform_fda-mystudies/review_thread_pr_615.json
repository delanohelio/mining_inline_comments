{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3NjAwOTQx", "number": 615, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMjowMjo1NFrOEOcs3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMzozMzowNFrOEOd_aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNTg1NzU2OnYy", "diffSide": "RIGHT", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/DevicePlatform.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMjowMjo1NFrOGxm96w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNTo1MzowNFrOGzYTKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY3MTg1MQ==", "bodyText": "use numerical value. We are not saving any space if the value of the enum takes the same space as its name.\nunless this is not the value that ends up in the audit log database?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/615#discussion_r454671851", "createdAt": "2020-07-14T22:02:54Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/DevicePlatform.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.common;\n+\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+\n+@Getter\n+@RequiredArgsConstructor\n+public enum DevicePlatform {\n+  IOS(\"IOS\", \"Represents an apple platform\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d019d4cef83c27fc695fb0ff41b9ad9871c66ea1"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUyODY4Mw==", "bodyText": "These values are used to determine the redirect url for callback/error/forgot password scenario based on device platform, not saved in the oauth scim service database.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/615#discussion_r456528683", "createdAt": "2020-07-17T15:53:04Z", "author": {"login": "dhanyak-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/DevicePlatform.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.common;\n+\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+\n+@Getter\n+@RequiredArgsConstructor\n+public enum DevicePlatform {\n+  IOS(\"IOS\", \"Represents an apple platform\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY3MTg1MQ=="}, "originalCommit": {"oid": "d019d4cef83c27fc695fb0ff41b9ad9871c66ea1"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNTk4NzYwOnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/config/RedirectConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMjo1NjowM1rOGxoLNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDo0NjoxNlrOG0Q0Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY5MTYzNw==", "bodyText": "maybe move this code to the DevicePlatform? e.g.\nDevicePlatform.fromString(devicePlatform) == ANDROID", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/615#discussion_r454691637", "createdAt": "2020-07-14T22:56:03Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/config/RedirectConfig.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.config;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.DevicePlatform.ANDROID;\n+import static com.google.cloud.healthcare.fdamystudies.common.DevicePlatform.IOS;\n+\n+import java.io.Serializable;\n+import lombok.Getter;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+@Getter\n+public class RedirectConfig implements Serializable {\n+\n+  private static final long serialVersionUID = 2189883675260389666L;\n+\n+  @Value(\"${participant.manager.callback-url}\")\n+  private String participantManagerCallbackUrl;\n+\n+  @Value(\"${mystudies.ios.app.callback-url}\")\n+  private String myStudiesIosAppCallbackUrl;\n+\n+  @Value(\"${mystudies.android.app.callback-url}\")\n+  private String myStudiesAndroidAppCallbackUrl;\n+\n+  public String getCallbackUrl(String devicePlatform) {\n+    if (ANDROID.getValue().equalsIgnoreCase(devicePlatform)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d019d4cef83c27fc695fb0ff41b9ad9871c66ea1"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ1NDYwMw==", "bodyText": "looks like this is fixed.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/615#discussion_r457454603", "createdAt": "2020-07-20T14:46:16Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/config/RedirectConfig.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.config;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.DevicePlatform.ANDROID;\n+import static com.google.cloud.healthcare.fdamystudies.common.DevicePlatform.IOS;\n+\n+import java.io.Serializable;\n+import lombok.Getter;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+@Getter\n+public class RedirectConfig implements Serializable {\n+\n+  private static final long serialVersionUID = 2189883675260389666L;\n+\n+  @Value(\"${participant.manager.callback-url}\")\n+  private String participantManagerCallbackUrl;\n+\n+  @Value(\"${mystudies.ios.app.callback-url}\")\n+  private String myStudiesIosAppCallbackUrl;\n+\n+  @Value(\"${mystudies.android.app.callback-url}\")\n+  private String myStudiesAndroidAppCallbackUrl;\n+\n+  public String getCallbackUrl(String devicePlatform) {\n+    if (ANDROID.getValue().equalsIgnoreCase(devicePlatform)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY5MTYzNw=="}, "originalCommit": {"oid": "d019d4cef83c27fc695fb0ff41b9ad9871c66ea1"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNTk5NDUzOnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMjo1OToyNVrOGxoPeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNjoyNjo1NlrOG0p2Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY5MjcyOQ==", "bodyText": "Looks like loginChallenge should be required then?\nAlso why is it returning string \"error\"? not a meaningful string, and/or an exception?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/615#discussion_r454692729", "createdAt": "2020-07-14T22:59:25Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CookieUtils.addCookie;\n+import static com.google.cloud.healthcare.fdamystudies.common.CookieUtils.addCookies;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.APP_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CLIENT_APP_VERSION;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CORRELATION_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_PLATFORM;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_TYPE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.ORG_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.SKIP;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.TEMP_REG_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.USER_ID;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.RedirectConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.model.UserEntity;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.OAuthService;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.UserService;\n+import java.util.Optional;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.util.UriComponentsBuilder;\n+import org.springframework.web.util.WebUtils;\n+\n+@Controller\n+public class LoginController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserController.class.getName());\n+\n+  private static final String LOGIN = \"login\";\n+\n+  private static final String LOGIN_CHALLENGE = \"login_challenge\";\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private UserService userService;\n+\n+  @Autowired private RedirectConfig redirectConfig;\n+\n+  @GetMapping(value = \"/login\")\n+  public String authorize(\n+      @RequestParam(name = LOGIN_CHALLENGE, required = false) String loginChallenge,\n+      @RequestParam(required = false) String code,\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      Model model) {\n+    logger.entry(String.format(\"%s request\", request.getRequestURI()));\n+\n+    if (StringUtils.isNotBlank(code)) {\n+      logger.exit(\n+          \"login/consent flow completed, redirect to callbackUrl with auth code and userId\");\n+      return redirectToCallbackUrl(request, code, response);\n+    }\n+\n+    if (StringUtils.isEmpty(loginChallenge)) {\n+      return \"error\";\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d019d4cef83c27fc695fb0ff41b9ad9871c66ea1"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUzMjMxMA==", "bodyText": "\"error\" - is a placeholder. I need to configure error urls for android/ios/participant manager and redirect to respective error url.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/615#discussion_r456532310", "createdAt": "2020-07-17T15:59:37Z", "author": {"login": "dhanyak-btc"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CookieUtils.addCookie;\n+import static com.google.cloud.healthcare.fdamystudies.common.CookieUtils.addCookies;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.APP_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CLIENT_APP_VERSION;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CORRELATION_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_PLATFORM;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_TYPE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.ORG_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.SKIP;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.TEMP_REG_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.USER_ID;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.RedirectConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.model.UserEntity;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.OAuthService;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.UserService;\n+import java.util.Optional;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.util.UriComponentsBuilder;\n+import org.springframework.web.util.WebUtils;\n+\n+@Controller\n+public class LoginController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserController.class.getName());\n+\n+  private static final String LOGIN = \"login\";\n+\n+  private static final String LOGIN_CHALLENGE = \"login_challenge\";\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private UserService userService;\n+\n+  @Autowired private RedirectConfig redirectConfig;\n+\n+  @GetMapping(value = \"/login\")\n+  public String authorize(\n+      @RequestParam(name = LOGIN_CHALLENGE, required = false) String loginChallenge,\n+      @RequestParam(required = false) String code,\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      Model model) {\n+    logger.entry(String.format(\"%s request\", request.getRequestURI()));\n+\n+    if (StringUtils.isNotBlank(code)) {\n+      logger.exit(\n+          \"login/consent flow completed, redirect to callbackUrl with auth code and userId\");\n+      return redirectToCallbackUrl(request, code, response);\n+    }\n+\n+    if (StringUtils.isEmpty(loginChallenge)) {\n+      return \"error\";\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY5MjcyOQ=="}, "originalCommit": {"oid": "d019d4cef83c27fc695fb0ff41b9ad9871c66ea1"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ1MDIyNQ==", "bodyText": "please add a TODO comment with link to the bug that will handle this case, e.g.\n// TODO(714): replace with redirect to appropriate error URL.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/615#discussion_r457450225", "createdAt": "2020-07-20T14:41:10Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CookieUtils.addCookie;\n+import static com.google.cloud.healthcare.fdamystudies.common.CookieUtils.addCookies;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.APP_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CLIENT_APP_VERSION;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CORRELATION_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_PLATFORM;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_TYPE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.ORG_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.SKIP;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.TEMP_REG_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.USER_ID;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.RedirectConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.model.UserEntity;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.OAuthService;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.UserService;\n+import java.util.Optional;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.util.UriComponentsBuilder;\n+import org.springframework.web.util.WebUtils;\n+\n+@Controller\n+public class LoginController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserController.class.getName());\n+\n+  private static final String LOGIN = \"login\";\n+\n+  private static final String LOGIN_CHALLENGE = \"login_challenge\";\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private UserService userService;\n+\n+  @Autowired private RedirectConfig redirectConfig;\n+\n+  @GetMapping(value = \"/login\")\n+  public String authorize(\n+      @RequestParam(name = LOGIN_CHALLENGE, required = false) String loginChallenge,\n+      @RequestParam(required = false) String code,\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      Model model) {\n+    logger.entry(String.format(\"%s request\", request.getRequestURI()));\n+\n+    if (StringUtils.isNotBlank(code)) {\n+      logger.exit(\n+          \"login/consent flow completed, redirect to callbackUrl with auth code and userId\");\n+      return redirectToCallbackUrl(request, code, response);\n+    }\n+\n+    if (StringUtils.isEmpty(loginChallenge)) {\n+      return \"error\";\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY5MjcyOQ=="}, "originalCommit": {"oid": "d019d4cef83c27fc695fb0ff41b9ad9871c66ea1"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2NDc5NA==", "bodyText": "This review comment has been fixed in PR #650", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/615#discussion_r457864794", "createdAt": "2020-07-21T06:26:56Z", "author": {"login": "dhanyak-btc"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CookieUtils.addCookie;\n+import static com.google.cloud.healthcare.fdamystudies.common.CookieUtils.addCookies;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.APP_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CLIENT_APP_VERSION;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CORRELATION_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_PLATFORM;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_TYPE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.ORG_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.SKIP;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.TEMP_REG_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.USER_ID;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.RedirectConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.model.UserEntity;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.OAuthService;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.UserService;\n+import java.util.Optional;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.util.UriComponentsBuilder;\n+import org.springframework.web.util.WebUtils;\n+\n+@Controller\n+public class LoginController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserController.class.getName());\n+\n+  private static final String LOGIN = \"login\";\n+\n+  private static final String LOGIN_CHALLENGE = \"login_challenge\";\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private UserService userService;\n+\n+  @Autowired private RedirectConfig redirectConfig;\n+\n+  @GetMapping(value = \"/login\")\n+  public String authorize(\n+      @RequestParam(name = LOGIN_CHALLENGE, required = false) String loginChallenge,\n+      @RequestParam(required = false) String code,\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      Model model) {\n+    logger.entry(String.format(\"%s request\", request.getRequestURI()));\n+\n+    if (StringUtils.isNotBlank(code)) {\n+      logger.exit(\n+          \"login/consent flow completed, redirect to callbackUrl with auth code and userId\");\n+      return redirectToCallbackUrl(request, code, response);\n+    }\n+\n+    if (StringUtils.isEmpty(loginChallenge)) {\n+      return \"error\";\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY5MjcyOQ=="}, "originalCommit": {"oid": "d019d4cef83c27fc695fb0ff41b9ad9871c66ea1"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjAwNDEwOnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMzowMzo0MlrOGxoVLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNjowNjo0N1rOGzYwzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY5NDE5MA==", "bodyText": "should this be named loginResponse instead of requestLoginResponse?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/615#discussion_r454694190", "createdAt": "2020-07-14T23:03:42Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CookieUtils.addCookie;\n+import static com.google.cloud.healthcare.fdamystudies.common.CookieUtils.addCookies;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.APP_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CLIENT_APP_VERSION;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CORRELATION_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_PLATFORM;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_TYPE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.ORG_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.SKIP;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.TEMP_REG_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.USER_ID;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.RedirectConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.model.UserEntity;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.OAuthService;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.UserService;\n+import java.util.Optional;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.util.UriComponentsBuilder;\n+import org.springframework.web.util.WebUtils;\n+\n+@Controller\n+public class LoginController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserController.class.getName());\n+\n+  private static final String LOGIN = \"login\";\n+\n+  private static final String LOGIN_CHALLENGE = \"login_challenge\";\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private UserService userService;\n+\n+  @Autowired private RedirectConfig redirectConfig;\n+\n+  @GetMapping(value = \"/login\")\n+  public String authorize(\n+      @RequestParam(name = LOGIN_CHALLENGE, required = false) String loginChallenge,\n+      @RequestParam(required = false) String code,\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      Model model) {\n+    logger.entry(String.format(\"%s request\", request.getRequestURI()));\n+\n+    if (StringUtils.isNotBlank(code)) {\n+      logger.exit(\n+          \"login/consent flow completed, redirect to callbackUrl with auth code and userId\");\n+      return redirectToCallbackUrl(request, code, response);\n+    }\n+\n+    if (StringUtils.isEmpty(loginChallenge)) {\n+      return \"error\";\n+    }\n+\n+    // show or skip login page\n+    MultiValueMap<String, String> paramMap = new LinkedMultiValueMap<>();\n+    paramMap.add(LOGIN_CHALLENGE, loginChallenge);\n+    ResponseEntity<JsonNode> requestLoginResponse = oauthService.requestLogin(paramMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d019d4cef83c27fc695fb0ff41b9ad9871c66ea1"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUzNjI2OQ==", "bodyText": "I named the variable requestLoginResponse to avoid confusion between Hydra's endpoints responses: /oauth2/auth/requests/login and /oauth2/auth/requests/login/accept\nRenamed to loginResponse", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/615#discussion_r456536269", "createdAt": "2020-07-17T16:06:47Z", "author": {"login": "dhanyak-btc"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CookieUtils.addCookie;\n+import static com.google.cloud.healthcare.fdamystudies.common.CookieUtils.addCookies;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.APP_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CLIENT_APP_VERSION;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CORRELATION_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_PLATFORM;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_TYPE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.ORG_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.SKIP;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.TEMP_REG_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.USER_ID;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.RedirectConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.model.UserEntity;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.OAuthService;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.UserService;\n+import java.util.Optional;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.util.UriComponentsBuilder;\n+import org.springframework.web.util.WebUtils;\n+\n+@Controller\n+public class LoginController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserController.class.getName());\n+\n+  private static final String LOGIN = \"login\";\n+\n+  private static final String LOGIN_CHALLENGE = \"login_challenge\";\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private UserService userService;\n+\n+  @Autowired private RedirectConfig redirectConfig;\n+\n+  @GetMapping(value = \"/login\")\n+  public String authorize(\n+      @RequestParam(name = LOGIN_CHALLENGE, required = false) String loginChallenge,\n+      @RequestParam(required = false) String code,\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      Model model) {\n+    logger.entry(String.format(\"%s request\", request.getRequestURI()));\n+\n+    if (StringUtils.isNotBlank(code)) {\n+      logger.exit(\n+          \"login/consent flow completed, redirect to callbackUrl with auth code and userId\");\n+      return redirectToCallbackUrl(request, code, response);\n+    }\n+\n+    if (StringUtils.isEmpty(loginChallenge)) {\n+      return \"error\";\n+    }\n+\n+    // show or skip login page\n+    MultiValueMap<String, String> paramMap = new LinkedMultiValueMap<>();\n+    paramMap.add(LOGIN_CHALLENGE, loginChallenge);\n+    ResponseEntity<JsonNode> requestLoginResponse = oauthService.requestLogin(paramMap);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY5NDE5MA=="}, "originalCommit": {"oid": "d019d4cef83c27fc695fb0ff41b9ad9871c66ea1"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjAwNjA4OnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMzowNDozOVrOGxoWXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNjowNzo0N1rOGzYyuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY5NDQ5NA==", "bodyText": "nit: change to login to follow our usual naming pattern", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/615#discussion_r454694494", "createdAt": "2020-07-14T23:04:39Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CookieUtils.addCookie;\n+import static com.google.cloud.healthcare.fdamystudies.common.CookieUtils.addCookies;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.APP_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CLIENT_APP_VERSION;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CORRELATION_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_PLATFORM;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_TYPE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.ORG_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.SKIP;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.TEMP_REG_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.USER_ID;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.RedirectConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.model.UserEntity;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.OAuthService;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.UserService;\n+import java.util.Optional;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.util.UriComponentsBuilder;\n+import org.springframework.web.util.WebUtils;\n+\n+@Controller\n+public class LoginController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserController.class.getName());\n+\n+  private static final String LOGIN = \"login\";\n+\n+  private static final String LOGIN_CHALLENGE = \"login_challenge\";\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private UserService userService;\n+\n+  @Autowired private RedirectConfig redirectConfig;\n+\n+  @GetMapping(value = \"/login\")\n+  public String authorize(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d019d4cef83c27fc695fb0ff41b9ad9871c66ea1"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUzNjc2Mw==", "bodyText": "Renamed to login", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/615#discussion_r456536763", "createdAt": "2020-07-17T16:07:47Z", "author": {"login": "dhanyak-btc"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CookieUtils.addCookie;\n+import static com.google.cloud.healthcare.fdamystudies.common.CookieUtils.addCookies;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.APP_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CLIENT_APP_VERSION;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CORRELATION_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_PLATFORM;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_TYPE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.ORG_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.SKIP;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.TEMP_REG_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.USER_ID;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.RedirectConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.model.UserEntity;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.OAuthService;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.UserService;\n+import java.util.Optional;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.util.UriComponentsBuilder;\n+import org.springframework.web.util.WebUtils;\n+\n+@Controller\n+public class LoginController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserController.class.getName());\n+\n+  private static final String LOGIN = \"login\";\n+\n+  private static final String LOGIN_CHALLENGE = \"login_challenge\";\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private UserService userService;\n+\n+  @Autowired private RedirectConfig redirectConfig;\n+\n+  @GetMapping(value = \"/login\")\n+  public String authorize(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY5NDQ5NA=="}, "originalCommit": {"oid": "d019d4cef83c27fc695fb0ff41b9ad9871c66ea1"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjAyODQ5OnYy", "diffSide": "RIGHT", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/CookieUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMzoxNDoyMFrOGxojcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNjoxNDoxM1rOGzY_3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY5Nzg0MQ==", "bodyText": "I would prefer this to be set to true by default, or to be set as a config param and set to false for dev environments only.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/615#discussion_r454697841", "createdAt": "2020-07-14T23:14:20Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/CookieUtils.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.common;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.util.MultiValueMap;\n+\n+public final class CookieUtils {\n+\n+  private CookieUtils() {}\n+\n+  public static void addCookies(\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      MultiValueMap<String, String> params,\n+      String... cookieNames) {\n+    for (String cookieName : cookieNames) {\n+      addCookie(request, response, cookieName, params.getFirst(cookieName));\n+    }\n+  }\n+\n+  public static void addCookie(\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      String cookieName,\n+      String cookieValue) {\n+    Cookie cookie = new Cookie(cookieName, cookieValue);\n+    cookie.setMaxAge(600);\n+    if (StringUtils.equalsIgnoreCase(\"https\", request.getScheme())) {\n+      cookie.setSecure(true);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d019d4cef83c27fc695fb0ff41b9ad9871c66ea1"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU0MDEyNg==", "bodyText": "Added below code to AppPropertyConfig and moved the code from CookieUtils to LoginController.\n@Value(\"${cookie.secure:true}\")\nprivate boolean secureCookie;", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/615#discussion_r456540126", "createdAt": "2020-07-17T16:14:13Z", "author": {"login": "dhanyak-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/CookieUtils.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.common;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.util.MultiValueMap;\n+\n+public final class CookieUtils {\n+\n+  private CookieUtils() {}\n+\n+  public static void addCookies(\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      MultiValueMap<String, String> params,\n+      String... cookieNames) {\n+    for (String cookieName : cookieNames) {\n+      addCookie(request, response, cookieName, params.getFirst(cookieName));\n+    }\n+  }\n+\n+  public static void addCookie(\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      String cookieName,\n+      String cookieValue) {\n+    Cookie cookie = new Cookie(cookieName, cookieValue);\n+    cookie.setMaxAge(600);\n+    if (StringUtils.equalsIgnoreCase(\"https\", request.getScheme())) {\n+      cookie.setSecure(true);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY5Nzg0MQ=="}, "originalCommit": {"oid": "d019d4cef83c27fc695fb0ff41b9ad9871c66ea1"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjAzMTIwOnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMzoxNTozNlrOGxolCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNjoxNTo1M1rOGzZDUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY5ODI0OA==", "bodyText": "no reason to add ORG_ID since it will be removed.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/615#discussion_r454698248", "createdAt": "2020-07-14T23:15:36Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CookieUtils.addCookie;\n+import static com.google.cloud.healthcare.fdamystudies.common.CookieUtils.addCookies;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.APP_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CLIENT_APP_VERSION;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CORRELATION_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_PLATFORM;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_TYPE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.ORG_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.SKIP;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.TEMP_REG_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.USER_ID;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.RedirectConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.model.UserEntity;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.OAuthService;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.UserService;\n+import java.util.Optional;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.util.UriComponentsBuilder;\n+import org.springframework.web.util.WebUtils;\n+\n+@Controller\n+public class LoginController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserController.class.getName());\n+\n+  private static final String LOGIN = \"login\";\n+\n+  private static final String LOGIN_CHALLENGE = \"login_challenge\";\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private UserService userService;\n+\n+  @Autowired private RedirectConfig redirectConfig;\n+\n+  @GetMapping(value = \"/login\")\n+  public String authorize(\n+      @RequestParam(name = LOGIN_CHALLENGE, required = false) String loginChallenge,\n+      @RequestParam(required = false) String code,\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      Model model) {\n+    logger.entry(String.format(\"%s request\", request.getRequestURI()));\n+\n+    if (StringUtils.isNotBlank(code)) {\n+      logger.exit(\n+          \"login/consent flow completed, redirect to callbackUrl with auth code and userId\");\n+      return redirectToCallbackUrl(request, code, response);\n+    }\n+\n+    if (StringUtils.isEmpty(loginChallenge)) {\n+      return \"error\";\n+    }\n+\n+    // show or skip login page\n+    MultiValueMap<String, String> paramMap = new LinkedMultiValueMap<>();\n+    paramMap.add(LOGIN_CHALLENGE, loginChallenge);\n+    ResponseEntity<JsonNode> requestLoginResponse = oauthService.requestLogin(paramMap);\n+    if (requestLoginResponse.getStatusCode().is2xxSuccessful()) {\n+      JsonNode responseBody = requestLoginResponse.getBody();\n+      if (skipLogin(responseBody)) {\n+        logger.exit(\"skip login, return to callback URL\");\n+        return redirectToCallbackUrl(request, code, response);\n+      }\n+      return redirectToLoginOrSigninPage(request, response, responseBody, model, loginChallenge);\n+    }\n+\n+    return \"error\";\n+  }\n+\n+  private boolean skipLogin(JsonNode responseBody) {\n+    return responseBody.has(SKIP) && responseBody.get(SKIP).booleanValue();\n+  }\n+\n+  private String redirectToLoginOrSigninPage(\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      JsonNode responseBody,\n+      Model model,\n+      String loginChallenge) {\n+\n+    String requestUrl = responseBody.get(\"request_url\").textValue();\n+    MultiValueMap<String, String> qsParams =\n+        UriComponentsBuilder.fromUriString(requestUrl).build().getQueryParams();\n+\n+    addCookie(request, response, LOGIN_CHALLENGE, loginChallenge);\n+    addCookies(\n+        request,\n+        response,\n+        qsParams,\n+        APP_ID,\n+        ORG_ID,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d019d4cef83c27fc695fb0ff41b9ad9871c66ea1"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU0MTAwOQ==", "bodyText": "I've already submitted multiple PR's with ORG_ID. I'll address this comment in followup PR.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/615#discussion_r456541009", "createdAt": "2020-07-17T16:15:53Z", "author": {"login": "dhanyak-btc"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CookieUtils.addCookie;\n+import static com.google.cloud.healthcare.fdamystudies.common.CookieUtils.addCookies;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.APP_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CLIENT_APP_VERSION;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CORRELATION_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_PLATFORM;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_TYPE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.ORG_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.SKIP;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.TEMP_REG_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.USER_ID;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.RedirectConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.model.UserEntity;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.OAuthService;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.UserService;\n+import java.util.Optional;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.util.UriComponentsBuilder;\n+import org.springframework.web.util.WebUtils;\n+\n+@Controller\n+public class LoginController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserController.class.getName());\n+\n+  private static final String LOGIN = \"login\";\n+\n+  private static final String LOGIN_CHALLENGE = \"login_challenge\";\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private UserService userService;\n+\n+  @Autowired private RedirectConfig redirectConfig;\n+\n+  @GetMapping(value = \"/login\")\n+  public String authorize(\n+      @RequestParam(name = LOGIN_CHALLENGE, required = false) String loginChallenge,\n+      @RequestParam(required = false) String code,\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      Model model) {\n+    logger.entry(String.format(\"%s request\", request.getRequestURI()));\n+\n+    if (StringUtils.isNotBlank(code)) {\n+      logger.exit(\n+          \"login/consent flow completed, redirect to callbackUrl with auth code and userId\");\n+      return redirectToCallbackUrl(request, code, response);\n+    }\n+\n+    if (StringUtils.isEmpty(loginChallenge)) {\n+      return \"error\";\n+    }\n+\n+    // show or skip login page\n+    MultiValueMap<String, String> paramMap = new LinkedMultiValueMap<>();\n+    paramMap.add(LOGIN_CHALLENGE, loginChallenge);\n+    ResponseEntity<JsonNode> requestLoginResponse = oauthService.requestLogin(paramMap);\n+    if (requestLoginResponse.getStatusCode().is2xxSuccessful()) {\n+      JsonNode responseBody = requestLoginResponse.getBody();\n+      if (skipLogin(responseBody)) {\n+        logger.exit(\"skip login, return to callback URL\");\n+        return redirectToCallbackUrl(request, code, response);\n+      }\n+      return redirectToLoginOrSigninPage(request, response, responseBody, model, loginChallenge);\n+    }\n+\n+    return \"error\";\n+  }\n+\n+  private boolean skipLogin(JsonNode responseBody) {\n+    return responseBody.has(SKIP) && responseBody.get(SKIP).booleanValue();\n+  }\n+\n+  private String redirectToLoginOrSigninPage(\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      JsonNode responseBody,\n+      Model model,\n+      String loginChallenge) {\n+\n+    String requestUrl = responseBody.get(\"request_url\").textValue();\n+    MultiValueMap<String, String> qsParams =\n+        UriComponentsBuilder.fromUriString(requestUrl).build().getQueryParams();\n+\n+    addCookie(request, response, LOGIN_CHALLENGE, loginChallenge);\n+    addCookies(\n+        request,\n+        response,\n+        qsParams,\n+        APP_ID,\n+        ORG_ID,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY5ODI0OA=="}, "originalCommit": {"oid": "d019d4cef83c27fc695fb0ff41b9ad9871c66ea1"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjAzNjI2OnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMzoxNzo0NFrOGxon7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNjoyMDoyMVrOGzZLvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY5ODk4OA==", "bodyText": "why do we need all these details?\nCookie will be bound to the browser/device it was planted in, so It's not likely that we would get the same cookie coming from another device etc", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/615#discussion_r454698988", "createdAt": "2020-07-14T23:17:44Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CookieUtils.addCookie;\n+import static com.google.cloud.healthcare.fdamystudies.common.CookieUtils.addCookies;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.APP_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CLIENT_APP_VERSION;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CORRELATION_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_PLATFORM;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_TYPE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.ORG_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.SKIP;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.TEMP_REG_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.USER_ID;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.RedirectConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.model.UserEntity;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.OAuthService;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.UserService;\n+import java.util.Optional;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.util.UriComponentsBuilder;\n+import org.springframework.web.util.WebUtils;\n+\n+@Controller\n+public class LoginController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserController.class.getName());\n+\n+  private static final String LOGIN = \"login\";\n+\n+  private static final String LOGIN_CHALLENGE = \"login_challenge\";\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private UserService userService;\n+\n+  @Autowired private RedirectConfig redirectConfig;\n+\n+  @GetMapping(value = \"/login\")\n+  public String authorize(\n+      @RequestParam(name = LOGIN_CHALLENGE, required = false) String loginChallenge,\n+      @RequestParam(required = false) String code,\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      Model model) {\n+    logger.entry(String.format(\"%s request\", request.getRequestURI()));\n+\n+    if (StringUtils.isNotBlank(code)) {\n+      logger.exit(\n+          \"login/consent flow completed, redirect to callbackUrl with auth code and userId\");\n+      return redirectToCallbackUrl(request, code, response);\n+    }\n+\n+    if (StringUtils.isEmpty(loginChallenge)) {\n+      return \"error\";\n+    }\n+\n+    // show or skip login page\n+    MultiValueMap<String, String> paramMap = new LinkedMultiValueMap<>();\n+    paramMap.add(LOGIN_CHALLENGE, loginChallenge);\n+    ResponseEntity<JsonNode> requestLoginResponse = oauthService.requestLogin(paramMap);\n+    if (requestLoginResponse.getStatusCode().is2xxSuccessful()) {\n+      JsonNode responseBody = requestLoginResponse.getBody();\n+      if (skipLogin(responseBody)) {\n+        logger.exit(\"skip login, return to callback URL\");\n+        return redirectToCallbackUrl(request, code, response);\n+      }\n+      return redirectToLoginOrSigninPage(request, response, responseBody, model, loginChallenge);\n+    }\n+\n+    return \"error\";\n+  }\n+\n+  private boolean skipLogin(JsonNode responseBody) {\n+    return responseBody.has(SKIP) && responseBody.get(SKIP).booleanValue();\n+  }\n+\n+  private String redirectToLoginOrSigninPage(\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      JsonNode responseBody,\n+      Model model,\n+      String loginChallenge) {\n+\n+    String requestUrl = responseBody.get(\"request_url\").textValue();\n+    MultiValueMap<String, String> qsParams =\n+        UriComponentsBuilder.fromUriString(requestUrl).build().getQueryParams();\n+\n+    addCookie(request, response, LOGIN_CHALLENGE, loginChallenge);\n+    addCookies(\n+        request,\n+        response,\n+        qsParams,\n+        APP_ID,\n+        ORG_ID,\n+        CORRELATION_ID,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d019d4cef83c27fc695fb0ff41b9ad9871c66ea1"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU0MzE2Ng==", "bodyText": "Login/Consent flow has multiple redirects, so I need APP_ID in consent, auto sign-in flows. ORG_ID will be removed in next PR. CORRELATION_ID is for audit log event.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/615#discussion_r456543166", "createdAt": "2020-07-17T16:20:21Z", "author": {"login": "dhanyak-btc"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CookieUtils.addCookie;\n+import static com.google.cloud.healthcare.fdamystudies.common.CookieUtils.addCookies;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.APP_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CLIENT_APP_VERSION;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CORRELATION_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_PLATFORM;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_TYPE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.ORG_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.SKIP;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.TEMP_REG_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.USER_ID;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.RedirectConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.model.UserEntity;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.OAuthService;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.UserService;\n+import java.util.Optional;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.util.UriComponentsBuilder;\n+import org.springframework.web.util.WebUtils;\n+\n+@Controller\n+public class LoginController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserController.class.getName());\n+\n+  private static final String LOGIN = \"login\";\n+\n+  private static final String LOGIN_CHALLENGE = \"login_challenge\";\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private UserService userService;\n+\n+  @Autowired private RedirectConfig redirectConfig;\n+\n+  @GetMapping(value = \"/login\")\n+  public String authorize(\n+      @RequestParam(name = LOGIN_CHALLENGE, required = false) String loginChallenge,\n+      @RequestParam(required = false) String code,\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      Model model) {\n+    logger.entry(String.format(\"%s request\", request.getRequestURI()));\n+\n+    if (StringUtils.isNotBlank(code)) {\n+      logger.exit(\n+          \"login/consent flow completed, redirect to callbackUrl with auth code and userId\");\n+      return redirectToCallbackUrl(request, code, response);\n+    }\n+\n+    if (StringUtils.isEmpty(loginChallenge)) {\n+      return \"error\";\n+    }\n+\n+    // show or skip login page\n+    MultiValueMap<String, String> paramMap = new LinkedMultiValueMap<>();\n+    paramMap.add(LOGIN_CHALLENGE, loginChallenge);\n+    ResponseEntity<JsonNode> requestLoginResponse = oauthService.requestLogin(paramMap);\n+    if (requestLoginResponse.getStatusCode().is2xxSuccessful()) {\n+      JsonNode responseBody = requestLoginResponse.getBody();\n+      if (skipLogin(responseBody)) {\n+        logger.exit(\"skip login, return to callback URL\");\n+        return redirectToCallbackUrl(request, code, response);\n+      }\n+      return redirectToLoginOrSigninPage(request, response, responseBody, model, loginChallenge);\n+    }\n+\n+    return \"error\";\n+  }\n+\n+  private boolean skipLogin(JsonNode responseBody) {\n+    return responseBody.has(SKIP) && responseBody.get(SKIP).booleanValue();\n+  }\n+\n+  private String redirectToLoginOrSigninPage(\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      JsonNode responseBody,\n+      Model model,\n+      String loginChallenge) {\n+\n+    String requestUrl = responseBody.get(\"request_url\").textValue();\n+    MultiValueMap<String, String> qsParams =\n+        UriComponentsBuilder.fromUriString(requestUrl).build().getQueryParams();\n+\n+    addCookie(request, response, LOGIN_CHALLENGE, loginChallenge);\n+    addCookies(\n+        request,\n+        response,\n+        qsParams,\n+        APP_ID,\n+        ORG_ID,\n+        CORRELATION_ID,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY5ODk4OA=="}, "originalCommit": {"oid": "d019d4cef83c27fc695fb0ff41b9ad9871c66ea1"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjAzNjk3OnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMzoxNzo1OFrOGxooTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNjoyMTo0MFrOGzZOCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY5OTA4Ng==", "bodyText": "why is this needed?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/615#discussion_r454699086", "createdAt": "2020-07-14T23:17:58Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CookieUtils.addCookie;\n+import static com.google.cloud.healthcare.fdamystudies.common.CookieUtils.addCookies;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.APP_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CLIENT_APP_VERSION;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CORRELATION_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_PLATFORM;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_TYPE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.ORG_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.SKIP;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.TEMP_REG_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.USER_ID;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.RedirectConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.model.UserEntity;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.OAuthService;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.UserService;\n+import java.util.Optional;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.util.UriComponentsBuilder;\n+import org.springframework.web.util.WebUtils;\n+\n+@Controller\n+public class LoginController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserController.class.getName());\n+\n+  private static final String LOGIN = \"login\";\n+\n+  private static final String LOGIN_CHALLENGE = \"login_challenge\";\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private UserService userService;\n+\n+  @Autowired private RedirectConfig redirectConfig;\n+\n+  @GetMapping(value = \"/login\")\n+  public String authorize(\n+      @RequestParam(name = LOGIN_CHALLENGE, required = false) String loginChallenge,\n+      @RequestParam(required = false) String code,\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      Model model) {\n+    logger.entry(String.format(\"%s request\", request.getRequestURI()));\n+\n+    if (StringUtils.isNotBlank(code)) {\n+      logger.exit(\n+          \"login/consent flow completed, redirect to callbackUrl with auth code and userId\");\n+      return redirectToCallbackUrl(request, code, response);\n+    }\n+\n+    if (StringUtils.isEmpty(loginChallenge)) {\n+      return \"error\";\n+    }\n+\n+    // show or skip login page\n+    MultiValueMap<String, String> paramMap = new LinkedMultiValueMap<>();\n+    paramMap.add(LOGIN_CHALLENGE, loginChallenge);\n+    ResponseEntity<JsonNode> requestLoginResponse = oauthService.requestLogin(paramMap);\n+    if (requestLoginResponse.getStatusCode().is2xxSuccessful()) {\n+      JsonNode responseBody = requestLoginResponse.getBody();\n+      if (skipLogin(responseBody)) {\n+        logger.exit(\"skip login, return to callback URL\");\n+        return redirectToCallbackUrl(request, code, response);\n+      }\n+      return redirectToLoginOrSigninPage(request, response, responseBody, model, loginChallenge);\n+    }\n+\n+    return \"error\";\n+  }\n+\n+  private boolean skipLogin(JsonNode responseBody) {\n+    return responseBody.has(SKIP) && responseBody.get(SKIP).booleanValue();\n+  }\n+\n+  private String redirectToLoginOrSigninPage(\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      JsonNode responseBody,\n+      Model model,\n+      String loginChallenge) {\n+\n+    String requestUrl = responseBody.get(\"request_url\").textValue();\n+    MultiValueMap<String, String> qsParams =\n+        UriComponentsBuilder.fromUriString(requestUrl).build().getQueryParams();\n+\n+    addCookie(request, response, LOGIN_CHALLENGE, loginChallenge);\n+    addCookies(\n+        request,\n+        response,\n+        qsParams,\n+        APP_ID,\n+        ORG_ID,\n+        CORRELATION_ID,\n+        CLIENT_APP_VERSION,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d019d4cef83c27fc695fb0ff41b9ad9871c66ea1"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU0Mzc1NA==", "bodyText": "Login/Consent flow has multiple redirects, so I need APP_ID in consent, auto sign-in flows. ORG_ID will be removed in next PR. CORRELATION_ID and CLIENT_APP_VERSION for audit log event.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/615#discussion_r456543754", "createdAt": "2020-07-17T16:21:40Z", "author": {"login": "dhanyak-btc"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CookieUtils.addCookie;\n+import static com.google.cloud.healthcare.fdamystudies.common.CookieUtils.addCookies;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.APP_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CLIENT_APP_VERSION;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CORRELATION_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_PLATFORM;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_TYPE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.ORG_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.SKIP;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.TEMP_REG_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.USER_ID;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.RedirectConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.model.UserEntity;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.OAuthService;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.UserService;\n+import java.util.Optional;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.util.UriComponentsBuilder;\n+import org.springframework.web.util.WebUtils;\n+\n+@Controller\n+public class LoginController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserController.class.getName());\n+\n+  private static final String LOGIN = \"login\";\n+\n+  private static final String LOGIN_CHALLENGE = \"login_challenge\";\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private UserService userService;\n+\n+  @Autowired private RedirectConfig redirectConfig;\n+\n+  @GetMapping(value = \"/login\")\n+  public String authorize(\n+      @RequestParam(name = LOGIN_CHALLENGE, required = false) String loginChallenge,\n+      @RequestParam(required = false) String code,\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      Model model) {\n+    logger.entry(String.format(\"%s request\", request.getRequestURI()));\n+\n+    if (StringUtils.isNotBlank(code)) {\n+      logger.exit(\n+          \"login/consent flow completed, redirect to callbackUrl with auth code and userId\");\n+      return redirectToCallbackUrl(request, code, response);\n+    }\n+\n+    if (StringUtils.isEmpty(loginChallenge)) {\n+      return \"error\";\n+    }\n+\n+    // show or skip login page\n+    MultiValueMap<String, String> paramMap = new LinkedMultiValueMap<>();\n+    paramMap.add(LOGIN_CHALLENGE, loginChallenge);\n+    ResponseEntity<JsonNode> requestLoginResponse = oauthService.requestLogin(paramMap);\n+    if (requestLoginResponse.getStatusCode().is2xxSuccessful()) {\n+      JsonNode responseBody = requestLoginResponse.getBody();\n+      if (skipLogin(responseBody)) {\n+        logger.exit(\"skip login, return to callback URL\");\n+        return redirectToCallbackUrl(request, code, response);\n+      }\n+      return redirectToLoginOrSigninPage(request, response, responseBody, model, loginChallenge);\n+    }\n+\n+    return \"error\";\n+  }\n+\n+  private boolean skipLogin(JsonNode responseBody) {\n+    return responseBody.has(SKIP) && responseBody.get(SKIP).booleanValue();\n+  }\n+\n+  private String redirectToLoginOrSigninPage(\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      JsonNode responseBody,\n+      Model model,\n+      String loginChallenge) {\n+\n+    String requestUrl = responseBody.get(\"request_url\").textValue();\n+    MultiValueMap<String, String> qsParams =\n+        UriComponentsBuilder.fromUriString(requestUrl).build().getQueryParams();\n+\n+    addCookie(request, response, LOGIN_CHALLENGE, loginChallenge);\n+    addCookies(\n+        request,\n+        response,\n+        qsParams,\n+        APP_ID,\n+        ORG_ID,\n+        CORRELATION_ID,\n+        CLIENT_APP_VERSION,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY5OTA4Ng=="}, "originalCommit": {"oid": "d019d4cef83c27fc695fb0ff41b9ad9871c66ea1"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjA0MTQ5OnYy", "diffSide": "RIGHT", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/CookieUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMzoyMDoxMVrOGxorFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNjoyMjoyNVrOGzZPYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY5OTc5OQ==", "bodyText": "this is pretty short for a normal cookie; Considering your cookieUtil has a generic name and signature, I suggest you either:\n\npass cookie's age as an input\nrename the class to signal that this is for a spacial usecase, i.e. loginCookie", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/615#discussion_r454699799", "createdAt": "2020-07-14T23:20:11Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/CookieUtils.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.common;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.util.MultiValueMap;\n+\n+public final class CookieUtils {\n+\n+  private CookieUtils() {}\n+\n+  public static void addCookies(\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      MultiValueMap<String, String> params,\n+      String... cookieNames) {\n+    for (String cookieName : cookieNames) {\n+      addCookie(request, response, cookieName, params.getFirst(cookieName));\n+    }\n+  }\n+\n+  public static void addCookie(\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      String cookieName,\n+      String cookieValue) {\n+    Cookie cookie = new Cookie(cookieName, cookieValue);\n+    cookie.setMaxAge(600);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d019d4cef83c27fc695fb0ff41b9ad9871c66ea1"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU0NDA5OQ==", "bodyText": "Removed CookieUtils and moved the code to LoginController.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/615#discussion_r456544099", "createdAt": "2020-07-17T16:22:25Z", "author": {"login": "dhanyak-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/CookieUtils.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.common;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.util.MultiValueMap;\n+\n+public final class CookieUtils {\n+\n+  private CookieUtils() {}\n+\n+  public static void addCookies(\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      MultiValueMap<String, String> params,\n+      String... cookieNames) {\n+    for (String cookieName : cookieNames) {\n+      addCookie(request, response, cookieName, params.getFirst(cookieName));\n+    }\n+  }\n+\n+  public static void addCookie(\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      String cookieName,\n+      String cookieValue) {\n+    Cookie cookie = new Cookie(cookieName, cookieValue);\n+    cookie.setMaxAge(600);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY5OTc5OQ=="}, "originalCommit": {"oid": "d019d4cef83c27fc695fb0ff41b9ad9871c66ea1"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjA1MzgxOnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/main/resources/templates/signin.html", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMzoyNTo0MVrOGxoyXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNjozMDo1MVrOG0p8gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwMTY2Mw==", "bodyText": "I am guessing these pages will be replaced by proper forms?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/615#discussion_r454701663", "createdAt": "2020-07-14T23:25:41Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/resources/templates/signin.html", "diffHunk": "@@ -0,0 +1,11 @@\n+<!DOCTYPE html>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d019d4cef83c27fc695fb0ff41b9ad9871c66ea1"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU0NDQ1Nw==", "bodyText": "Yes, I'll replace it with proper forms in followup PR;s", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/615#discussion_r456544457", "createdAt": "2020-07-17T16:23:11Z", "author": {"login": "dhanyak-btc"}, "path": "oauth-scim-module/oauth-scim-service/src/main/resources/templates/signin.html", "diffHunk": "@@ -0,0 +1,11 @@\n+<!DOCTYPE html>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwMTY2Mw=="}, "originalCommit": {"oid": "d019d4cef83c27fc695fb0ff41b9ad9871c66ea1"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ1MjcwMg==", "bodyText": "let's start marking coming up PRs in form of separate issues, this way reviewers would have more context as to what is completed vs in progress.\nusing a TODO comment with link to the next issue handling the remaining work is the standard way to do that in Google. We can take a similar approach here.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/615#discussion_r457452702", "createdAt": "2020-07-20T14:44:11Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/resources/templates/signin.html", "diffHunk": "@@ -0,0 +1,11 @@\n+<!DOCTYPE html>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwMTY2Mw=="}, "originalCommit": {"oid": "d019d4cef83c27fc695fb0ff41b9ad9871c66ea1"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2NjM2OQ==", "bodyText": "I'll inform the team to use // TODO (issue) in PR. Added TODO comments in HTML files with issue number #662", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/615#discussion_r457866369", "createdAt": "2020-07-21T06:30:51Z", "author": {"login": "dhanyak-btc"}, "path": "oauth-scim-module/oauth-scim-service/src/main/resources/templates/signin.html", "diffHunk": "@@ -0,0 +1,11 @@\n+<!DOCTYPE html>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwMTY2Mw=="}, "originalCommit": {"oid": "d019d4cef83c27fc695fb0ff41b9ad9871c66ea1"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjA1NTY5OnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/main/resources/templates/error.html", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMzoyNjo0NFrOGxozeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNjoyNjowMlrOGzZWaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwMTk0Ng==", "bodyText": "why is there an html page for error? considering auth server is not a front facing service I would expect errors to be returned via json.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/615#discussion_r454701946", "createdAt": "2020-07-14T23:26:44Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/resources/templates/error.html", "diffHunk": "@@ -0,0 +1,12 @@\n+<!DOCTYPE html>\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\"\n+  xmlns:th=\"https://www.thymeleaf.org\"\n+  xmlns:sec=\"https://www.thymeleaf.org/thymeleaf-extras-springsecurity3\">\n+<head>\n+<title>Error</title>\n+</head>\n+<body>\n+  <p>Sorry, an error has occurred and your request could not be\n+    processed. Please try again later.</p>\n+</body>\n+</html>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d019d4cef83c27fc695fb0ff41b9ad9871c66ea1"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU0NTg5Nw==", "bodyText": "I agree with you. I initially thought auth server will display generic error page for any exceptions. It'll be removed in followup PR and redirected to error url (configurable for IOS/ANDROID/Participant Manager)", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/615#discussion_r456545897", "createdAt": "2020-07-17T16:26:02Z", "author": {"login": "dhanyak-btc"}, "path": "oauth-scim-module/oauth-scim-service/src/main/resources/templates/error.html", "diffHunk": "@@ -0,0 +1,12 @@\n+<!DOCTYPE html>\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\"\n+  xmlns:th=\"https://www.thymeleaf.org\"\n+  xmlns:sec=\"https://www.thymeleaf.org/thymeleaf-extras-springsecurity3\">\n+<head>\n+<title>Error</title>\n+</head>\n+<body>\n+  <p>Sorry, an error has occurred and your request could not be\n+    processed. Please try again later.</p>\n+</body>\n+</html>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwMTk0Ng=="}, "originalCommit": {"oid": "d019d4cef83c27fc695fb0ff41b9ad9871c66ea1"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjA2ODg4OnYy", "diffSide": "RIGHT", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMzozMzowNFrOGxo7Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNjozMjo0MFrOG0p_MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwMzg3OA==", "bodyText": "I am finding this approach a bit confusing; wouldn't it make sense to return a proper json error string and just display that instead?\nConsidering Auth server is not directly client facing, I don't think having an error page makes a lot of sense anyway.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/615#discussion_r454703878", "createdAt": "2020-07-14T23:33:04Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CookieUtils.addCookie;\n+import static com.google.cloud.healthcare.fdamystudies.common.CookieUtils.addCookies;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.APP_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CLIENT_APP_VERSION;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CORRELATION_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_PLATFORM;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_TYPE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.ORG_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.SKIP;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.TEMP_REG_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.USER_ID;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.RedirectConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.model.UserEntity;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.OAuthService;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.UserService;\n+import java.util.Optional;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.util.UriComponentsBuilder;\n+import org.springframework.web.util.WebUtils;\n+\n+@Controller\n+public class LoginController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserController.class.getName());\n+\n+  private static final String LOGIN = \"login\";\n+\n+  private static final String LOGIN_CHALLENGE = \"login_challenge\";\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private UserService userService;\n+\n+  @Autowired private RedirectConfig redirectConfig;\n+\n+  @GetMapping(value = \"/login\")\n+  public String authorize(\n+      @RequestParam(name = LOGIN_CHALLENGE, required = false) String loginChallenge,\n+      @RequestParam(required = false) String code,\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      Model model) {\n+    logger.entry(String.format(\"%s request\", request.getRequestURI()));\n+\n+    if (StringUtils.isNotBlank(code)) {\n+      logger.exit(\n+          \"login/consent flow completed, redirect to callbackUrl with auth code and userId\");\n+      return redirectToCallbackUrl(request, code, response);\n+    }\n+\n+    if (StringUtils.isEmpty(loginChallenge)) {\n+      return \"error\";\n+    }\n+\n+    // show or skip login page\n+    MultiValueMap<String, String> paramMap = new LinkedMultiValueMap<>();\n+    paramMap.add(LOGIN_CHALLENGE, loginChallenge);\n+    ResponseEntity<JsonNode> requestLoginResponse = oauthService.requestLogin(paramMap);\n+    if (requestLoginResponse.getStatusCode().is2xxSuccessful()) {\n+      JsonNode responseBody = requestLoginResponse.getBody();\n+      if (skipLogin(responseBody)) {\n+        logger.exit(\"skip login, return to callback URL\");\n+        return redirectToCallbackUrl(request, code, response);\n+      }\n+      return redirectToLoginOrSigninPage(request, response, responseBody, model, loginChallenge);\n+    }\n+\n+    return \"error\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d019d4cef83c27fc695fb0ff41b9ad9871c66ea1"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU0NjEyNw==", "bodyText": "I agree with you. I initially thought auth server will display generic error page for any exceptions. It'll be removed in followup PR and redirected to error url (configurable for IOS/ANDROID/Participant Manager)", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/615#discussion_r456546127", "createdAt": "2020-07-17T16:26:24Z", "author": {"login": "dhanyak-btc"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CookieUtils.addCookie;\n+import static com.google.cloud.healthcare.fdamystudies.common.CookieUtils.addCookies;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.APP_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CLIENT_APP_VERSION;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CORRELATION_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_PLATFORM;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_TYPE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.ORG_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.SKIP;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.TEMP_REG_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.USER_ID;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.RedirectConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.model.UserEntity;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.OAuthService;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.UserService;\n+import java.util.Optional;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.util.UriComponentsBuilder;\n+import org.springframework.web.util.WebUtils;\n+\n+@Controller\n+public class LoginController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserController.class.getName());\n+\n+  private static final String LOGIN = \"login\";\n+\n+  private static final String LOGIN_CHALLENGE = \"login_challenge\";\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private UserService userService;\n+\n+  @Autowired private RedirectConfig redirectConfig;\n+\n+  @GetMapping(value = \"/login\")\n+  public String authorize(\n+      @RequestParam(name = LOGIN_CHALLENGE, required = false) String loginChallenge,\n+      @RequestParam(required = false) String code,\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      Model model) {\n+    logger.entry(String.format(\"%s request\", request.getRequestURI()));\n+\n+    if (StringUtils.isNotBlank(code)) {\n+      logger.exit(\n+          \"login/consent flow completed, redirect to callbackUrl with auth code and userId\");\n+      return redirectToCallbackUrl(request, code, response);\n+    }\n+\n+    if (StringUtils.isEmpty(loginChallenge)) {\n+      return \"error\";\n+    }\n+\n+    // show or skip login page\n+    MultiValueMap<String, String> paramMap = new LinkedMultiValueMap<>();\n+    paramMap.add(LOGIN_CHALLENGE, loginChallenge);\n+    ResponseEntity<JsonNode> requestLoginResponse = oauthService.requestLogin(paramMap);\n+    if (requestLoginResponse.getStatusCode().is2xxSuccessful()) {\n+      JsonNode responseBody = requestLoginResponse.getBody();\n+      if (skipLogin(responseBody)) {\n+        logger.exit(\"skip login, return to callback URL\");\n+        return redirectToCallbackUrl(request, code, response);\n+      }\n+      return redirectToLoginOrSigninPage(request, response, responseBody, model, loginChallenge);\n+    }\n+\n+    return \"error\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwMzg3OA=="}, "originalCommit": {"oid": "d019d4cef83c27fc695fb0ff41b9ad9871c66ea1"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ1MTM0Nw==", "bodyText": "Please create an issue tracking this work and add a comment in the code to note the upcoming change.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/615#discussion_r457451347", "createdAt": "2020-07-20T14:42:31Z", "author": {"login": "zohrehj"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CookieUtils.addCookie;\n+import static com.google.cloud.healthcare.fdamystudies.common.CookieUtils.addCookies;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.APP_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CLIENT_APP_VERSION;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CORRELATION_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_PLATFORM;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_TYPE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.ORG_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.SKIP;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.TEMP_REG_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.USER_ID;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.RedirectConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.model.UserEntity;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.OAuthService;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.UserService;\n+import java.util.Optional;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.util.UriComponentsBuilder;\n+import org.springframework.web.util.WebUtils;\n+\n+@Controller\n+public class LoginController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserController.class.getName());\n+\n+  private static final String LOGIN = \"login\";\n+\n+  private static final String LOGIN_CHALLENGE = \"login_challenge\";\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private UserService userService;\n+\n+  @Autowired private RedirectConfig redirectConfig;\n+\n+  @GetMapping(value = \"/login\")\n+  public String authorize(\n+      @RequestParam(name = LOGIN_CHALLENGE, required = false) String loginChallenge,\n+      @RequestParam(required = false) String code,\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      Model model) {\n+    logger.entry(String.format(\"%s request\", request.getRequestURI()));\n+\n+    if (StringUtils.isNotBlank(code)) {\n+      logger.exit(\n+          \"login/consent flow completed, redirect to callbackUrl with auth code and userId\");\n+      return redirectToCallbackUrl(request, code, response);\n+    }\n+\n+    if (StringUtils.isEmpty(loginChallenge)) {\n+      return \"error\";\n+    }\n+\n+    // show or skip login page\n+    MultiValueMap<String, String> paramMap = new LinkedMultiValueMap<>();\n+    paramMap.add(LOGIN_CHALLENGE, loginChallenge);\n+    ResponseEntity<JsonNode> requestLoginResponse = oauthService.requestLogin(paramMap);\n+    if (requestLoginResponse.getStatusCode().is2xxSuccessful()) {\n+      JsonNode responseBody = requestLoginResponse.getBody();\n+      if (skipLogin(responseBody)) {\n+        logger.exit(\"skip login, return to callback URL\");\n+        return redirectToCallbackUrl(request, code, response);\n+      }\n+      return redirectToLoginOrSigninPage(request, response, responseBody, model, loginChallenge);\n+    }\n+\n+    return \"error\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwMzg3OA=="}, "originalCommit": {"oid": "d019d4cef83c27fc695fb0ff41b9ad9871c66ea1"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2NzA1Ng==", "bodyText": "This comment has been addressed in #650 and #651", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/615#discussion_r457867056", "createdAt": "2020-07-21T06:32:40Z", "author": {"login": "dhanyak-btc"}, "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CookieUtils.addCookie;\n+import static com.google.cloud.healthcare.fdamystudies.common.CookieUtils.addCookies;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.APP_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CLIENT_APP_VERSION;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CORRELATION_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_PLATFORM;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_TYPE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.ORG_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.SKIP;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.TEMP_REG_ID;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.USER_ID;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.RedirectConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.model.UserEntity;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.OAuthService;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.UserService;\n+import java.util.Optional;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.util.UriComponentsBuilder;\n+import org.springframework.web.util.WebUtils;\n+\n+@Controller\n+public class LoginController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserController.class.getName());\n+\n+  private static final String LOGIN = \"login\";\n+\n+  private static final String LOGIN_CHALLENGE = \"login_challenge\";\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private UserService userService;\n+\n+  @Autowired private RedirectConfig redirectConfig;\n+\n+  @GetMapping(value = \"/login\")\n+  public String authorize(\n+      @RequestParam(name = LOGIN_CHALLENGE, required = false) String loginChallenge,\n+      @RequestParam(required = false) String code,\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      Model model) {\n+    logger.entry(String.format(\"%s request\", request.getRequestURI()));\n+\n+    if (StringUtils.isNotBlank(code)) {\n+      logger.exit(\n+          \"login/consent flow completed, redirect to callbackUrl with auth code and userId\");\n+      return redirectToCallbackUrl(request, code, response);\n+    }\n+\n+    if (StringUtils.isEmpty(loginChallenge)) {\n+      return \"error\";\n+    }\n+\n+    // show or skip login page\n+    MultiValueMap<String, String> paramMap = new LinkedMultiValueMap<>();\n+    paramMap.add(LOGIN_CHALLENGE, loginChallenge);\n+    ResponseEntity<JsonNode> requestLoginResponse = oauthService.requestLogin(paramMap);\n+    if (requestLoginResponse.getStatusCode().is2xxSuccessful()) {\n+      JsonNode responseBody = requestLoginResponse.getBody();\n+      if (skipLogin(responseBody)) {\n+        logger.exit(\"skip login, return to callback URL\");\n+        return redirectToCallbackUrl(request, code, response);\n+      }\n+      return redirectToLoginOrSigninPage(request, response, responseBody, model, loginChallenge);\n+    }\n+\n+    return \"error\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwMzg3OA=="}, "originalCommit": {"oid": "d019d4cef83c27fc695fb0ff41b9ad9871c66ea1"}, "originalPosition": 92}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2267, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}