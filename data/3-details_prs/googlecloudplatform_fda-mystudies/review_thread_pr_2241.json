{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxNjUyNDY1", "number": 2241, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxOTo0NjoyNFrOFAb0jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxOTo0NjoyNFrOFAb0jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MDAwMTQxOnYy", "diffSide": "RIGHT", "path": "participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/AppServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxOTo0NjoyNFrOH-uidg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoxNTowNFrOH_FhWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUzNjI0Ng==", "bodyText": "I think it would be helpful to have test cases with multiple studies (and sites) within the response so we can cover the sorting and makes sure it works.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2241#discussion_r535536246", "createdAt": "2020-12-03T19:46:24Z", "author": {"login": "saminguyen"}, "path": "participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/AppServiceImpl.java", "diffHunk": "@@ -306,56 +308,76 @@ public AppResponse getAppsWithOptionalFields(String userId, String[] fields) {\n       throw new ErrorCodeException(ErrorCode.NOT_SUPER_ADMIN_ACCESS);\n     }\n \n-    List<AppEntity> apps = appRepository.findAll();\n+    List<AppStudySiteInfo> appStudySiteInfoList = appRepository.findAppsStudiesSites();\n \n-    List<StudyEntity> studies = new ArrayList<>();\n-    apps.stream().map(AppEntity::getStudies).forEach(studies::addAll);\n+    Map<String, AppDetails> appsMap = new HashMap<>();\n+    Map<String, AppStudyResponse> studiesMap = new HashMap<>();\n+    Map<String, AppSiteResponse> sitesMap = new HashMap<>();\n \n-    List<SiteEntity> sites = new ArrayList<>();\n-    studies.stream().map(StudyEntity::getSites).forEach(sites::addAll);\n+    AppDetails appDetails = null;\n+    for (AppStudySiteInfo appStudySiteInfo : appStudySiteInfoList) {\n+      if (!appsMap.containsKey(appStudySiteInfo.getAppId())) {\n+        appDetails = AppMapper.toAppDetails(appStudySiteInfo);\n+        appsMap.put(appStudySiteInfo.getAppId(), appDetails);\n+      }\n+      appDetails = appsMap.get(appStudySiteInfo.getAppId());\n+\n+      AppStudyResponse appStudyResponse = null;\n+      if (!studiesMap.containsKey(appStudySiteInfo.getAppStudyIdKey())\n+          && ArrayUtils.contains(fields, \"studies\")) {\n+        appStudyResponse = StudyMapper.toAppStudyResponse(appStudySiteInfo);\n+        studiesMap.put(appStudySiteInfo.getAppStudyIdKey(), appStudyResponse);\n+        appDetails.getStudies().add(appStudyResponse);\n+      }\n+      appStudyResponse = studiesMap.get(appStudySiteInfo.getAppStudyIdKey());\n+\n+      if (StringUtils.isNotEmpty(appStudySiteInfo.getSiteId())\n+          && ArrayUtils.contains(fields, \"sites\")\n+          && appStudyResponse != null\n+          && !sitesMap.containsKey(appStudySiteInfo.getAppStudySiteIdKey())) {\n+        AppSiteResponse appSiteResponse = SiteMapper.toAppSiteResponse(appStudySiteInfo);\n+        sitesMap.put(appStudySiteInfo.getAppStudySiteIdKey(), appSiteResponse);\n+\n+        appStudyResponse.getSites().add(appSiteResponse);\n+        appStudyResponse.setTotalSitesCount(appStudyResponse.getSites().size());\n+        appDetails.setTotalSitesCount(appDetails.getTotalSitesCount() + 1);\n+        sortSites(appStudyResponse);\n+      }\n+      sortStudies(appDetails);\n+    }\n \n-    AppResponse appResponse = prepareAppResponse(apps, studies, sites, fields);\n+    List<AppDetails> apps = appsMap.values().stream().collect(Collectors.toList());\n+    List<AppDetails> sortedApps =\n+        apps.stream()\n+            .sorted(Comparator.comparing(AppDetails::getName))\n+            .collect(Collectors.toList());\n+\n+    AppResponse appResponse = new AppResponse(MessageCode.GET_APPS_DETAILS_SUCCESS, sortedApps);\n \n     logger.exit(String.format(\"total apps=%d\", appResponse.getApps().size()));\n     return appResponse;\n   }\n \n-  private AppResponse prepareAppResponse(\n-      List<AppEntity> apps, List<StudyEntity> studies, List<SiteEntity> sites, String[] fields) {\n-    Map<String, List<StudyEntity>> groupByAppIdStudyMap =\n-        studies.stream().collect(Collectors.groupingBy(StudyEntity::getAppId));\n-\n-    Map<String, List<SiteEntity>> groupByStudyIdSiteMap =\n-        sites.stream().collect(Collectors.groupingBy(SiteEntity::getStudyId));\n-\n-    List<AppDetails> appsList = new ArrayList<>();\n-    for (AppEntity app : apps) {\n-      AppDetails appDetails = AppMapper.toAppDetails(app);\n-      if (ArrayUtils.contains(fields, \"studies\")) {\n-        List<StudyEntity> appStudies = groupByAppIdStudyMap.get(app.getId());\n-        List<AppStudyResponse> appStudyResponses =\n-            CollectionUtils.emptyIfNull(appStudies)\n-                .stream()\n-                .map(\n-                    study ->\n-                        StudyMapper.toAppStudyResponse(\n-                            study, groupByStudyIdSiteMap.get(study.getId()), fields))\n-                .collect(Collectors.toList());\n-\n-        appDetails.getStudies().addAll(appStudyResponses);\n-      }\n-      int totalSitesCount =\n-          appDetails\n-              .getStudies()\n-              .stream()\n-              .map(study -> study.getSites().size())\n-              .reduce(0, Integer::sum);\n-      appDetails.setTotalSitesCount(totalSitesCount);\n-\n-      appsList.add(appDetails);\n-    }\n+  private void sortStudies(AppDetails appDetails) {\n+    List<AppStudyResponse> sortedStudies =\n+        appDetails\n+            .getStudies()\n+            .stream()\n+            .sorted(Comparator.comparing(AppStudyResponse::getStudyName))\n+            .collect(Collectors.toList());\n+    appDetails.getStudies().clear();\n+    appDetails.getStudies().addAll(sortedStudies);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5de3acb22b521ff9966e83432c2ddd29448844b"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkxMjc5Mg==", "bodyText": "Added shouldReturnSortedStudiesAndSites() test case.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2241#discussion_r535912792", "createdAt": "2020-12-04T08:15:04Z", "author": {"login": "monica-BTC"}, "path": "participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/AppServiceImpl.java", "diffHunk": "@@ -306,56 +308,76 @@ public AppResponse getAppsWithOptionalFields(String userId, String[] fields) {\n       throw new ErrorCodeException(ErrorCode.NOT_SUPER_ADMIN_ACCESS);\n     }\n \n-    List<AppEntity> apps = appRepository.findAll();\n+    List<AppStudySiteInfo> appStudySiteInfoList = appRepository.findAppsStudiesSites();\n \n-    List<StudyEntity> studies = new ArrayList<>();\n-    apps.stream().map(AppEntity::getStudies).forEach(studies::addAll);\n+    Map<String, AppDetails> appsMap = new HashMap<>();\n+    Map<String, AppStudyResponse> studiesMap = new HashMap<>();\n+    Map<String, AppSiteResponse> sitesMap = new HashMap<>();\n \n-    List<SiteEntity> sites = new ArrayList<>();\n-    studies.stream().map(StudyEntity::getSites).forEach(sites::addAll);\n+    AppDetails appDetails = null;\n+    for (AppStudySiteInfo appStudySiteInfo : appStudySiteInfoList) {\n+      if (!appsMap.containsKey(appStudySiteInfo.getAppId())) {\n+        appDetails = AppMapper.toAppDetails(appStudySiteInfo);\n+        appsMap.put(appStudySiteInfo.getAppId(), appDetails);\n+      }\n+      appDetails = appsMap.get(appStudySiteInfo.getAppId());\n+\n+      AppStudyResponse appStudyResponse = null;\n+      if (!studiesMap.containsKey(appStudySiteInfo.getAppStudyIdKey())\n+          && ArrayUtils.contains(fields, \"studies\")) {\n+        appStudyResponse = StudyMapper.toAppStudyResponse(appStudySiteInfo);\n+        studiesMap.put(appStudySiteInfo.getAppStudyIdKey(), appStudyResponse);\n+        appDetails.getStudies().add(appStudyResponse);\n+      }\n+      appStudyResponse = studiesMap.get(appStudySiteInfo.getAppStudyIdKey());\n+\n+      if (StringUtils.isNotEmpty(appStudySiteInfo.getSiteId())\n+          && ArrayUtils.contains(fields, \"sites\")\n+          && appStudyResponse != null\n+          && !sitesMap.containsKey(appStudySiteInfo.getAppStudySiteIdKey())) {\n+        AppSiteResponse appSiteResponse = SiteMapper.toAppSiteResponse(appStudySiteInfo);\n+        sitesMap.put(appStudySiteInfo.getAppStudySiteIdKey(), appSiteResponse);\n+\n+        appStudyResponse.getSites().add(appSiteResponse);\n+        appStudyResponse.setTotalSitesCount(appStudyResponse.getSites().size());\n+        appDetails.setTotalSitesCount(appDetails.getTotalSitesCount() + 1);\n+        sortSites(appStudyResponse);\n+      }\n+      sortStudies(appDetails);\n+    }\n \n-    AppResponse appResponse = prepareAppResponse(apps, studies, sites, fields);\n+    List<AppDetails> apps = appsMap.values().stream().collect(Collectors.toList());\n+    List<AppDetails> sortedApps =\n+        apps.stream()\n+            .sorted(Comparator.comparing(AppDetails::getName))\n+            .collect(Collectors.toList());\n+\n+    AppResponse appResponse = new AppResponse(MessageCode.GET_APPS_DETAILS_SUCCESS, sortedApps);\n \n     logger.exit(String.format(\"total apps=%d\", appResponse.getApps().size()));\n     return appResponse;\n   }\n \n-  private AppResponse prepareAppResponse(\n-      List<AppEntity> apps, List<StudyEntity> studies, List<SiteEntity> sites, String[] fields) {\n-    Map<String, List<StudyEntity>> groupByAppIdStudyMap =\n-        studies.stream().collect(Collectors.groupingBy(StudyEntity::getAppId));\n-\n-    Map<String, List<SiteEntity>> groupByStudyIdSiteMap =\n-        sites.stream().collect(Collectors.groupingBy(SiteEntity::getStudyId));\n-\n-    List<AppDetails> appsList = new ArrayList<>();\n-    for (AppEntity app : apps) {\n-      AppDetails appDetails = AppMapper.toAppDetails(app);\n-      if (ArrayUtils.contains(fields, \"studies\")) {\n-        List<StudyEntity> appStudies = groupByAppIdStudyMap.get(app.getId());\n-        List<AppStudyResponse> appStudyResponses =\n-            CollectionUtils.emptyIfNull(appStudies)\n-                .stream()\n-                .map(\n-                    study ->\n-                        StudyMapper.toAppStudyResponse(\n-                            study, groupByStudyIdSiteMap.get(study.getId()), fields))\n-                .collect(Collectors.toList());\n-\n-        appDetails.getStudies().addAll(appStudyResponses);\n-      }\n-      int totalSitesCount =\n-          appDetails\n-              .getStudies()\n-              .stream()\n-              .map(study -> study.getSites().size())\n-              .reduce(0, Integer::sum);\n-      appDetails.setTotalSitesCount(totalSitesCount);\n-\n-      appsList.add(appDetails);\n-    }\n+  private void sortStudies(AppDetails appDetails) {\n+    List<AppStudyResponse> sortedStudies =\n+        appDetails\n+            .getStudies()\n+            .stream()\n+            .sorted(Comparator.comparing(AppStudyResponse::getStudyName))\n+            .collect(Collectors.toList());\n+    appDetails.getStudies().clear();\n+    appDetails.getStudies().addAll(sortedStudies);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUzNjI0Ng=="}, "originalCommit": {"oid": "a5de3acb22b521ff9966e83432c2ddd29448844b"}, "originalPosition": 136}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1504, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}