{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczMzE0MDQ0", "number": 801, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMjo0ODoyOFrOEc913Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMzowMDozMlrOEc-Z0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4ODA4Nzk3OnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/LocationControllerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMjo0ODoyOFrOHH1pxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwOTo0ODowM1rOHI2elA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk4MTEyNw==", "bodyText": "nit: Inactive, not Deactive", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/801#discussion_r477981127", "createdAt": "2020-08-27T02:48:28Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/LocationControllerTest.java", "diffHunk": "@@ -314,6 +336,57 @@ public void shouldUpdateToReactiveLocation() throws Exception {\n     LocationEntity locationEntity = optLocationEntity.get();\n     assertNotNull(locationEntity);\n     assertEquals(ACTIVE_STATUS, locationEntity.getStatus());\n+\n+    AuditLogEventRequest auditRequest = new AuditLogEventRequest();\n+    auditRequest.setUserId(userRegAdminEntity.getId());\n+\n+    Map<String, AuditLogEventRequest> auditEventMap = new HashedMap<>();\n+    auditEventMap.put(LOCATION_ACTIVATED.getEventCode(), auditRequest);\n+\n+    verifyAuditEventCall(auditEventMap, LOCATION_ACTIVATED);\n+  }\n+\n+  @Test\n+  public void shouldUpdateToDeactiveLocation() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85691eb52b0576c63dd8917c3077db844aabd1f2"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTA0MzIyMA==", "bodyText": "Fixed Review comment.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/801#discussion_r479043220", "createdAt": "2020-08-28T09:48:03Z", "author": {"login": "monica-BTC"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/LocationControllerTest.java", "diffHunk": "@@ -314,6 +336,57 @@ public void shouldUpdateToReactiveLocation() throws Exception {\n     LocationEntity locationEntity = optLocationEntity.get();\n     assertNotNull(locationEntity);\n     assertEquals(ACTIVE_STATUS, locationEntity.getStatus());\n+\n+    AuditLogEventRequest auditRequest = new AuditLogEventRequest();\n+    auditRequest.setUserId(userRegAdminEntity.getId());\n+\n+    Map<String, AuditLogEventRequest> auditEventMap = new HashedMap<>();\n+    auditEventMap.put(LOCATION_ACTIVATED.getEventCode(), auditRequest);\n+\n+    verifyAuditEventCall(auditEventMap, LOCATION_ACTIVATED);\n+  }\n+\n+  @Test\n+  public void shouldUpdateToDeactiveLocation() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk4MTEyNw=="}, "originalCommit": {"oid": "85691eb52b0576c63dd8917c3077db844aabd1f2"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4ODE4MDAzOnYy", "diffSide": "RIGHT", "path": "common-modules/common-tests/src/main/java/com/google/cloud/healthcare/fdamystudies/common/BaseMockIT.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMzowMDozMlrOHH2ptQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwOToxNzoyNFrOHJw_kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk5NzQ5Mw==", "bodyText": "Why are you capturing the request here, I do not see argument.getAllValues() being called.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/801#discussion_r477997493", "createdAt": "2020-08-27T03:00:32Z", "author": {"login": "saminguyen"}, "path": "common-modules/common-tests/src/main/java/com/google/cloud/healthcare/fdamystudies/common/BaseMockIT.java", "diffHunk": "@@ -149,10 +170,96 @@ protected MvcResult performPost(\n         .andReturn();\n   }\n \n+  /**\n+   * @param assertOptionalFieldsForEvent is a {@link Map} collection that contains {@link eventCode}\n+   *     as key and {@link AuditLogEventRequest} with optional field values as value.\n+   * @param auditEvents audit event enums\n+   */\n+  protected void verifyAuditEventCall(\n+      Map<String, AuditLogEventRequest> assertOptionalFieldsForEvent,\n+      AuditLogEvent... auditEvents) {\n+\n+    verifyAuditEventCall(auditEvents);\n+\n+    Map<String, AuditLogEventRequest> auditRequestByEventCode =\n+        auditRequests\n+            .stream()\n+            .collect(Collectors.toMap(AuditLogEventRequest::getEventCode, Function.identity()));\n+\n+    assertOptionalFieldsForEvent.forEach(\n+        (eventCode, expectedAuditRequest) -> {\n+          AuditLogEventRequest auditRequest = auditRequestByEventCode.get(eventCode);\n+          assertEquals(expectedAuditRequest.getUserId(), auditRequest.getUserId());\n+          assertEquals(expectedAuditRequest.getParticipantId(), auditRequest.getParticipantId());\n+          assertEquals(expectedAuditRequest.getStudyId(), auditRequest.getStudyId());\n+          assertEquals(expectedAuditRequest.getStudyVersion(), auditRequest.getStudyVersion());\n+        });\n+  }\n+\n+  protected void verifyAuditEventCall(AuditLogEvent... auditEvents) {\n+    ArgumentCaptor<AuditLogEventRequest> argument =\n+        ArgumentCaptor.forClass(AuditLogEventRequest.class);\n+    verify(mockAuditService, atLeastOnce()).postAuditLogEvent(argument.capture());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85691eb52b0576c63dd8917c3077db844aabd1f2"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTE2MzAzMA==", "bodyText": "We tried with argument.getAllValues() but the Mockito is overriding the values with the last method call argument so need to handle this differently. We are using same auditRequest object for multiple audit events.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/801#discussion_r479163030", "createdAt": "2020-08-28T11:29:34Z", "author": {"login": "dhanyak-btc"}, "path": "common-modules/common-tests/src/main/java/com/google/cloud/healthcare/fdamystudies/common/BaseMockIT.java", "diffHunk": "@@ -149,10 +170,96 @@ protected MvcResult performPost(\n         .andReturn();\n   }\n \n+  /**\n+   * @param assertOptionalFieldsForEvent is a {@link Map} collection that contains {@link eventCode}\n+   *     as key and {@link AuditLogEventRequest} with optional field values as value.\n+   * @param auditEvents audit event enums\n+   */\n+  protected void verifyAuditEventCall(\n+      Map<String, AuditLogEventRequest> assertOptionalFieldsForEvent,\n+      AuditLogEvent... auditEvents) {\n+\n+    verifyAuditEventCall(auditEvents);\n+\n+    Map<String, AuditLogEventRequest> auditRequestByEventCode =\n+        auditRequests\n+            .stream()\n+            .collect(Collectors.toMap(AuditLogEventRequest::getEventCode, Function.identity()));\n+\n+    assertOptionalFieldsForEvent.forEach(\n+        (eventCode, expectedAuditRequest) -> {\n+          AuditLogEventRequest auditRequest = auditRequestByEventCode.get(eventCode);\n+          assertEquals(expectedAuditRequest.getUserId(), auditRequest.getUserId());\n+          assertEquals(expectedAuditRequest.getParticipantId(), auditRequest.getParticipantId());\n+          assertEquals(expectedAuditRequest.getStudyId(), auditRequest.getStudyId());\n+          assertEquals(expectedAuditRequest.getStudyVersion(), auditRequest.getStudyVersion());\n+        });\n+  }\n+\n+  protected void verifyAuditEventCall(AuditLogEvent... auditEvents) {\n+    ArgumentCaptor<AuditLogEventRequest> argument =\n+        ArgumentCaptor.forClass(AuditLogEventRequest.class);\n+    verify(mockAuditService, atLeastOnce()).postAuditLogEvent(argument.capture());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk5NzQ5Mw=="}, "originalCommit": {"oid": "85691eb52b0576c63dd8917c3077db844aabd1f2"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ1NTk2Mw==", "bodyText": "I see! @monica-BTC can we remove the argument captor from this method then?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/801#discussion_r479455963", "createdAt": "2020-08-28T17:59:12Z", "author": {"login": "saminguyen"}, "path": "common-modules/common-tests/src/main/java/com/google/cloud/healthcare/fdamystudies/common/BaseMockIT.java", "diffHunk": "@@ -149,10 +170,96 @@ protected MvcResult performPost(\n         .andReturn();\n   }\n \n+  /**\n+   * @param assertOptionalFieldsForEvent is a {@link Map} collection that contains {@link eventCode}\n+   *     as key and {@link AuditLogEventRequest} with optional field values as value.\n+   * @param auditEvents audit event enums\n+   */\n+  protected void verifyAuditEventCall(\n+      Map<String, AuditLogEventRequest> assertOptionalFieldsForEvent,\n+      AuditLogEvent... auditEvents) {\n+\n+    verifyAuditEventCall(auditEvents);\n+\n+    Map<String, AuditLogEventRequest> auditRequestByEventCode =\n+        auditRequests\n+            .stream()\n+            .collect(Collectors.toMap(AuditLogEventRequest::getEventCode, Function.identity()));\n+\n+    assertOptionalFieldsForEvent.forEach(\n+        (eventCode, expectedAuditRequest) -> {\n+          AuditLogEventRequest auditRequest = auditRequestByEventCode.get(eventCode);\n+          assertEquals(expectedAuditRequest.getUserId(), auditRequest.getUserId());\n+          assertEquals(expectedAuditRequest.getParticipantId(), auditRequest.getParticipantId());\n+          assertEquals(expectedAuditRequest.getStudyId(), auditRequest.getStudyId());\n+          assertEquals(expectedAuditRequest.getStudyVersion(), auditRequest.getStudyVersion());\n+        });\n+  }\n+\n+  protected void verifyAuditEventCall(AuditLogEvent... auditEvents) {\n+    ArgumentCaptor<AuditLogEventRequest> argument =\n+        ArgumentCaptor.forClass(AuditLogEventRequest.class);\n+    verify(mockAuditService, atLeastOnce()).postAuditLogEvent(argument.capture());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk5NzQ5Mw=="}, "originalCommit": {"oid": "85691eb52b0576c63dd8917c3077db844aabd1f2"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAwMTkzNw==", "bodyText": "I tried by removing argument captor from this method. I got below error.\nArgument(s) are different! Wanted:\nauditEventServiceImpl.postAuditLogEvent(\nAuditLogEventRequest(correlationId=null, eventCode=null, source=null, destination=null, resourceServer=null, userAccessLevel=null, sourceApplicationVersion=null, destinationApplicationVersion=null, platformVersion=null, occured=null, appId=null, mobilePlatform=null, appVersion=null, participantId=null, studyId=null, studyVersion=null, siteId=null)\n);", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/801#discussion_r480001937", "createdAt": "2020-08-31T09:17:24Z", "author": {"login": "monica-BTC"}, "path": "common-modules/common-tests/src/main/java/com/google/cloud/healthcare/fdamystudies/common/BaseMockIT.java", "diffHunk": "@@ -149,10 +170,96 @@ protected MvcResult performPost(\n         .andReturn();\n   }\n \n+  /**\n+   * @param assertOptionalFieldsForEvent is a {@link Map} collection that contains {@link eventCode}\n+   *     as key and {@link AuditLogEventRequest} with optional field values as value.\n+   * @param auditEvents audit event enums\n+   */\n+  protected void verifyAuditEventCall(\n+      Map<String, AuditLogEventRequest> assertOptionalFieldsForEvent,\n+      AuditLogEvent... auditEvents) {\n+\n+    verifyAuditEventCall(auditEvents);\n+\n+    Map<String, AuditLogEventRequest> auditRequestByEventCode =\n+        auditRequests\n+            .stream()\n+            .collect(Collectors.toMap(AuditLogEventRequest::getEventCode, Function.identity()));\n+\n+    assertOptionalFieldsForEvent.forEach(\n+        (eventCode, expectedAuditRequest) -> {\n+          AuditLogEventRequest auditRequest = auditRequestByEventCode.get(eventCode);\n+          assertEquals(expectedAuditRequest.getUserId(), auditRequest.getUserId());\n+          assertEquals(expectedAuditRequest.getParticipantId(), auditRequest.getParticipantId());\n+          assertEquals(expectedAuditRequest.getStudyId(), auditRequest.getStudyId());\n+          assertEquals(expectedAuditRequest.getStudyVersion(), auditRequest.getStudyVersion());\n+        });\n+  }\n+\n+  protected void verifyAuditEventCall(AuditLogEvent... auditEvents) {\n+    ArgumentCaptor<AuditLogEventRequest> argument =\n+        ArgumentCaptor.forClass(AuditLogEventRequest.class);\n+    verify(mockAuditService, atLeastOnce()).postAuditLogEvent(argument.capture());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk5NzQ5Mw=="}, "originalCommit": {"oid": "85691eb52b0576c63dd8917c3077db844aabd1f2"}, "originalPosition": 106}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2193, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}