{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4OTUyMzA1", "number": 637, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODoyODo0NlrOERkRLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODo1NDoyMlrOERkzdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODU1NDY4OnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/helper/TestDataHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODoyODo0NlrOG2Wk3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNTozODo0OVrOG2jqFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NjE3Mw==", "bodyText": "Use CommonConstants.CLOSE_STUDY", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/637#discussion_r459646173", "createdAt": "2020-07-23T18:28:46Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/helper/TestDataHelper.java", "diffHunk": "@@ -137,6 +137,7 @@ public AppEntity createAppEntity(UserRegAdminEntity userEntity) {\n \n   public StudyEntity createStudyEntity(UserRegAdminEntity userEntity, AppEntity appEntity) {\n     StudyEntity studyEntity = new StudyEntity();\n+    studyEntity.setType(\"CLOSE\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac1b133e7f76db791900e787e9c1c599df6d5f94"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2MDUwMg==", "bodyText": "Changed to CommonConstants.CLOSE_STUDY.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/637#discussion_r459860502", "createdAt": "2020-07-24T05:38:49Z", "author": {"login": "monica-BTC"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/helper/TestDataHelper.java", "diffHunk": "@@ -137,6 +137,7 @@ public AppEntity createAppEntity(UserRegAdminEntity userEntity) {\n \n   public StudyEntity createStudyEntity(UserRegAdminEntity userEntity, AppEntity appEntity) {\n     StudyEntity studyEntity = new StudyEntity();\n+    studyEntity.setType(\"CLOSE\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NjE3Mw=="}, "originalCommit": {"oid": "ac1b133e7f76db791900e787e9c1c599df6d5f94"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODU4ODI1OnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/StudyDetails.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODozODo0OVrOG2W6jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNTozOTowOVrOG2jqXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1MTcyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private Long totalSitesCount;\n          \n          \n            \n              private Long sitesCount;", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/637#discussion_r459651727", "createdAt": "2020-07-23T18:38:49Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/StudyDetails.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.beans;\n+\n+import java.util.List;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+@Setter\n+@Getter\n+public class StudyDetails {\n+  private String id;\n+\n+  private String customId;\n+\n+  private String name;\n+\n+  private Long totalSitesCount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac1b133e7f76db791900e787e9c1c599df6d5f94"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2MDU3NA==", "bodyText": "Changed to sitesCount.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/637#discussion_r459860574", "createdAt": "2020-07-24T05:39:09Z", "author": {"login": "monica-BTC"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/StudyDetails.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.beans;\n+\n+import java.util.List;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+@Setter\n+@Getter\n+public class StudyDetails {\n+  private String id;\n+\n+  private String customId;\n+\n+  private String name;\n+\n+  private Long totalSitesCount;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1MTcyNw=="}, "originalCommit": {"oid": "ac1b133e7f76db791900e787e9c1c599df6d5f94"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODYxNDg3OnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudyServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODo0NjoxMVrOG2XLNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNTozOTo1N1rOG2jrIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1NTk4OQ==", "bodyText": "you should extract entry.getKey() and getValue() out as local variable to make the code more readable.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/637#discussion_r459655989", "createdAt": "2020-07-23T18:46:11Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudyServiceImpl.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.CLOSE_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.OPEN_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_AND_EDIT_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.VIEW_VALUE;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.StudyDetails;\n+import com.google.cloud.healthcare.fdamystudies.beans.StudyResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantRegistrySiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SitePermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyPermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantRegistrySiteRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantStudyRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.SitePermissionRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.StudyPermissionRepository;\n+\n+@Service\n+public class StudyServiceImpl implements StudyService {\n+  private XLogger logger = XLoggerFactory.getXLogger(StudyServiceImpl.class.getName());\n+\n+  @Autowired private StudyPermissionRepository studyPermissionRepository;\n+\n+  @Autowired private ParticipantRegistrySiteRepository participantRegistrySiteRepository;\n+\n+  @Autowired private ParticipantStudyRepository participantStudiesRepository;\n+\n+  @Autowired private SitePermissionRepository sitePermissionRepository;\n+\n+  @Override\n+  @Transactional(readOnly = true)\n+  public StudyResponse getStudies(String userId) {\n+    logger.entry(\"getStudies(String userId)\");\n+\n+    List<SitePermissionEntity> sitePermissions =\n+        sitePermissionRepository.findSitePermissionByUserId(userId);\n+\n+    if (CollectionUtils.isEmpty(sitePermissions)) {\n+      logger.exit(ErrorCode.STUDY_NOT_FOUND);\n+      return new StudyResponse(ErrorCode.STUDY_NOT_FOUND);\n+    }\n+\n+    Map<StudyEntity, List<SitePermissionEntity>> studyPermissionMap =\n+        sitePermissions.stream().collect(Collectors.groupingBy(SitePermissionEntity::getStudy));\n+\n+    List<String> usersStudyIds =\n+        sitePermissions\n+            .stream()\n+            .distinct()\n+            .map(studyEntity -> studyEntity.getStudy().getId())\n+            .collect(Collectors.toList());\n+\n+    Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId =\n+        getStudyPermissionsByStudyInfoId(userId, usersStudyIds);\n+\n+    List<String> usersSiteIds =\n+        sitePermissions\n+            .stream()\n+            .map(s -> s.getSite().getId())\n+            .distinct()\n+            .collect(Collectors.toList());\n+\n+    Map<String, Long> siteWithInvitedParticipantCountMap =\n+        getSiteWithInvitedParticipantCountMap(usersSiteIds);\n+\n+    Map<String, Long> siteWithEnrolledParticipantCountMap =\n+        getSiteWithEnrolledParticipantCountMap(usersSiteIds);\n+\n+    return prepareStudyResponse(\n+        sitePermissions,\n+        studyPermissionsByStudyInfoId,\n+        studyPermissionMap,\n+        siteWithInvitedParticipantCountMap,\n+        siteWithEnrolledParticipantCountMap);\n+  }\n+\n+  private Map<String, StudyPermissionEntity> getStudyPermissionsByStudyInfoId(\n+      String userId, List<String> usersStudyIds) {\n+    List<StudyPermissionEntity> studyPermissions =\n+        studyPermissionRepository.findStudyPermissionsOfUserByStudyIds(usersStudyIds, userId);\n+\n+    Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId = new HashMap<>();\n+    if (CollectionUtils.isNotEmpty(studyPermissions)) {\n+      studyPermissionsByStudyInfoId =\n+          studyPermissions\n+              .stream()\n+              .collect(Collectors.toMap(e -> e.getStudy().getId(), Function.identity()));\n+    }\n+    return studyPermissionsByStudyInfoId;\n+  }\n+\n+  private StudyResponse prepareStudyResponse(\n+      List<SitePermissionEntity> sitePermissions,\n+      Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId,\n+      Map<StudyEntity, List<SitePermissionEntity>> studyPermissionMap,\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map<String, Long> siteWithEnrolledParticipantCountMap) {\n+    List<StudyDetails> studies = new ArrayList<>();\n+    for (Map.Entry<StudyEntity, List<SitePermissionEntity>> entry : studyPermissionMap.entrySet()) {\n+      StudyDetails studyDetail = new StudyDetails();\n+      String studyId = entry.getKey().getId();\n+      studyDetail.setId(studyId);\n+      studyDetail.setCustomId(entry.getKey().getCustomId());\n+      studyDetail.setName(entry.getKey().getName());\n+      studyDetail.setType(entry.getKey().getType());\n+      studyDetail.setTotalSitesCount((long) entry.getValue().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac1b133e7f76db791900e787e9c1c599df6d5f94"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2MDc2OQ==", "bodyText": "Extracted key and value to local variable.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/637#discussion_r459860769", "createdAt": "2020-07-24T05:39:57Z", "author": {"login": "monica-BTC"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudyServiceImpl.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.CLOSE_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.OPEN_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_AND_EDIT_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.VIEW_VALUE;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.StudyDetails;\n+import com.google.cloud.healthcare.fdamystudies.beans.StudyResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantRegistrySiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SitePermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyPermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantRegistrySiteRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantStudyRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.SitePermissionRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.StudyPermissionRepository;\n+\n+@Service\n+public class StudyServiceImpl implements StudyService {\n+  private XLogger logger = XLoggerFactory.getXLogger(StudyServiceImpl.class.getName());\n+\n+  @Autowired private StudyPermissionRepository studyPermissionRepository;\n+\n+  @Autowired private ParticipantRegistrySiteRepository participantRegistrySiteRepository;\n+\n+  @Autowired private ParticipantStudyRepository participantStudiesRepository;\n+\n+  @Autowired private SitePermissionRepository sitePermissionRepository;\n+\n+  @Override\n+  @Transactional(readOnly = true)\n+  public StudyResponse getStudies(String userId) {\n+    logger.entry(\"getStudies(String userId)\");\n+\n+    List<SitePermissionEntity> sitePermissions =\n+        sitePermissionRepository.findSitePermissionByUserId(userId);\n+\n+    if (CollectionUtils.isEmpty(sitePermissions)) {\n+      logger.exit(ErrorCode.STUDY_NOT_FOUND);\n+      return new StudyResponse(ErrorCode.STUDY_NOT_FOUND);\n+    }\n+\n+    Map<StudyEntity, List<SitePermissionEntity>> studyPermissionMap =\n+        sitePermissions.stream().collect(Collectors.groupingBy(SitePermissionEntity::getStudy));\n+\n+    List<String> usersStudyIds =\n+        sitePermissions\n+            .stream()\n+            .distinct()\n+            .map(studyEntity -> studyEntity.getStudy().getId())\n+            .collect(Collectors.toList());\n+\n+    Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId =\n+        getStudyPermissionsByStudyInfoId(userId, usersStudyIds);\n+\n+    List<String> usersSiteIds =\n+        sitePermissions\n+            .stream()\n+            .map(s -> s.getSite().getId())\n+            .distinct()\n+            .collect(Collectors.toList());\n+\n+    Map<String, Long> siteWithInvitedParticipantCountMap =\n+        getSiteWithInvitedParticipantCountMap(usersSiteIds);\n+\n+    Map<String, Long> siteWithEnrolledParticipantCountMap =\n+        getSiteWithEnrolledParticipantCountMap(usersSiteIds);\n+\n+    return prepareStudyResponse(\n+        sitePermissions,\n+        studyPermissionsByStudyInfoId,\n+        studyPermissionMap,\n+        siteWithInvitedParticipantCountMap,\n+        siteWithEnrolledParticipantCountMap);\n+  }\n+\n+  private Map<String, StudyPermissionEntity> getStudyPermissionsByStudyInfoId(\n+      String userId, List<String> usersStudyIds) {\n+    List<StudyPermissionEntity> studyPermissions =\n+        studyPermissionRepository.findStudyPermissionsOfUserByStudyIds(usersStudyIds, userId);\n+\n+    Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId = new HashMap<>();\n+    if (CollectionUtils.isNotEmpty(studyPermissions)) {\n+      studyPermissionsByStudyInfoId =\n+          studyPermissions\n+              .stream()\n+              .collect(Collectors.toMap(e -> e.getStudy().getId(), Function.identity()));\n+    }\n+    return studyPermissionsByStudyInfoId;\n+  }\n+\n+  private StudyResponse prepareStudyResponse(\n+      List<SitePermissionEntity> sitePermissions,\n+      Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId,\n+      Map<StudyEntity, List<SitePermissionEntity>> studyPermissionMap,\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map<String, Long> siteWithEnrolledParticipantCountMap) {\n+    List<StudyDetails> studies = new ArrayList<>();\n+    for (Map.Entry<StudyEntity, List<SitePermissionEntity>> entry : studyPermissionMap.entrySet()) {\n+      StudyDetails studyDetail = new StudyDetails();\n+      String studyId = entry.getKey().getId();\n+      studyDetail.setId(studyId);\n+      studyDetail.setCustomId(entry.getKey().getCustomId());\n+      studyDetail.setName(entry.getKey().getName());\n+      studyDetail.setType(entry.getKey().getType());\n+      studyDetail.setTotalSitesCount((long) entry.getValue().size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1NTk4OQ=="}, "originalCommit": {"oid": "ac1b133e7f76db791900e787e9c1c599df6d5f94"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODYxNzA0OnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudyServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODo0Njo0OVrOG2XMew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNTo0MDo0NVrOG2jr0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1NjMxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  studyEnrolledCount =\n          \n          \n            \n                      studyEnrolledCount\n          \n          \n            \n                          + siteWithEnrolledParticipantCountMap.get(sitePermission.getSite().getId());\n          \n          \n            \n                  studyEnrolledCount += siteWithEnrolledParticipantCountMap.get(sitePermission.getSite().getId());", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/637#discussion_r459656315", "createdAt": "2020-07-23T18:46:49Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudyServiceImpl.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.CLOSE_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.OPEN_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_AND_EDIT_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.VIEW_VALUE;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.StudyDetails;\n+import com.google.cloud.healthcare.fdamystudies.beans.StudyResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantRegistrySiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SitePermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyPermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantRegistrySiteRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantStudyRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.SitePermissionRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.StudyPermissionRepository;\n+\n+@Service\n+public class StudyServiceImpl implements StudyService {\n+  private XLogger logger = XLoggerFactory.getXLogger(StudyServiceImpl.class.getName());\n+\n+  @Autowired private StudyPermissionRepository studyPermissionRepository;\n+\n+  @Autowired private ParticipantRegistrySiteRepository participantRegistrySiteRepository;\n+\n+  @Autowired private ParticipantStudyRepository participantStudiesRepository;\n+\n+  @Autowired private SitePermissionRepository sitePermissionRepository;\n+\n+  @Override\n+  @Transactional(readOnly = true)\n+  public StudyResponse getStudies(String userId) {\n+    logger.entry(\"getStudies(String userId)\");\n+\n+    List<SitePermissionEntity> sitePermissions =\n+        sitePermissionRepository.findSitePermissionByUserId(userId);\n+\n+    if (CollectionUtils.isEmpty(sitePermissions)) {\n+      logger.exit(ErrorCode.STUDY_NOT_FOUND);\n+      return new StudyResponse(ErrorCode.STUDY_NOT_FOUND);\n+    }\n+\n+    Map<StudyEntity, List<SitePermissionEntity>> studyPermissionMap =\n+        sitePermissions.stream().collect(Collectors.groupingBy(SitePermissionEntity::getStudy));\n+\n+    List<String> usersStudyIds =\n+        sitePermissions\n+            .stream()\n+            .distinct()\n+            .map(studyEntity -> studyEntity.getStudy().getId())\n+            .collect(Collectors.toList());\n+\n+    Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId =\n+        getStudyPermissionsByStudyInfoId(userId, usersStudyIds);\n+\n+    List<String> usersSiteIds =\n+        sitePermissions\n+            .stream()\n+            .map(s -> s.getSite().getId())\n+            .distinct()\n+            .collect(Collectors.toList());\n+\n+    Map<String, Long> siteWithInvitedParticipantCountMap =\n+        getSiteWithInvitedParticipantCountMap(usersSiteIds);\n+\n+    Map<String, Long> siteWithEnrolledParticipantCountMap =\n+        getSiteWithEnrolledParticipantCountMap(usersSiteIds);\n+\n+    return prepareStudyResponse(\n+        sitePermissions,\n+        studyPermissionsByStudyInfoId,\n+        studyPermissionMap,\n+        siteWithInvitedParticipantCountMap,\n+        siteWithEnrolledParticipantCountMap);\n+  }\n+\n+  private Map<String, StudyPermissionEntity> getStudyPermissionsByStudyInfoId(\n+      String userId, List<String> usersStudyIds) {\n+    List<StudyPermissionEntity> studyPermissions =\n+        studyPermissionRepository.findStudyPermissionsOfUserByStudyIds(usersStudyIds, userId);\n+\n+    Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId = new HashMap<>();\n+    if (CollectionUtils.isNotEmpty(studyPermissions)) {\n+      studyPermissionsByStudyInfoId =\n+          studyPermissions\n+              .stream()\n+              .collect(Collectors.toMap(e -> e.getStudy().getId(), Function.identity()));\n+    }\n+    return studyPermissionsByStudyInfoId;\n+  }\n+\n+  private StudyResponse prepareStudyResponse(\n+      List<SitePermissionEntity> sitePermissions,\n+      Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId,\n+      Map<StudyEntity, List<SitePermissionEntity>> studyPermissionMap,\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map<String, Long> siteWithEnrolledParticipantCountMap) {\n+    List<StudyDetails> studies = new ArrayList<>();\n+    for (Map.Entry<StudyEntity, List<SitePermissionEntity>> entry : studyPermissionMap.entrySet()) {\n+      StudyDetails studyDetail = new StudyDetails();\n+      String studyId = entry.getKey().getId();\n+      studyDetail.setId(studyId);\n+      studyDetail.setCustomId(entry.getKey().getCustomId());\n+      studyDetail.setName(entry.getKey().getName());\n+      studyDetail.setType(entry.getKey().getType());\n+      studyDetail.setTotalSitesCount((long) entry.getValue().size());\n+\n+      if (studyPermissionsByStudyInfoId.get(studyId) != null) {\n+        Integer studyEditPermission =\n+            studyPermissionsByStudyInfoId.get(entry.getKey().getId()).getEdit();\n+        studyDetail.setStudyPermission(\n+            studyEditPermission == VIEW_VALUE ? READ_PERMISSION : READ_AND_EDIT_PERMISSION);\n+        studyDetail.setStudyPermission(studyEditPermission);\n+      }\n+\n+      calculateEnrollmentPercentage(\n+          siteWithInvitedParticipantCountMap,\n+          siteWithEnrolledParticipantCountMap,\n+          entry,\n+          studyDetail);\n+      studies.add(studyDetail);\n+    }\n+\n+    StudyResponse studyResponse =\n+        new StudyResponse(MessageCode.GET_STUDIES_SUCCESS, studies, sitePermissions.size());\n+    logger.exit(String.format(\"total studies=%d\", studyResponse.getStudies().size()));\n+    return studyResponse;\n+  }\n+\n+  private void calculateEnrollmentPercentage(\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map<String, Long> siteWithEnrolledParticipantCountMap,\n+      Map.Entry<StudyEntity, List<SitePermissionEntity>> entry,\n+      StudyDetails studyDetail) {\n+    Long studyInvitedCount = 0L;\n+    Long studyEnrolledCount = 0L;\n+    for (SitePermissionEntity sitePermission : entry.getValue()) {\n+      studyInvitedCount =\n+          getStudyInvitedCount(\n+              siteWithInvitedParticipantCountMap, entry, studyInvitedCount, sitePermission);\n+\n+      studyEnrolledCount =\n+          studyEnrolledCount\n+              + siteWithEnrolledParticipantCountMap.get(sitePermission.getSite().getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac1b133e7f76db791900e787e9c1c599df6d5f94"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2MDk0NQ==", "bodyText": "Changed to \"+=\" operator.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/637#discussion_r459860945", "createdAt": "2020-07-24T05:40:45Z", "author": {"login": "monica-BTC"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudyServiceImpl.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.CLOSE_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.OPEN_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_AND_EDIT_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.VIEW_VALUE;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.StudyDetails;\n+import com.google.cloud.healthcare.fdamystudies.beans.StudyResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantRegistrySiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SitePermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyPermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantRegistrySiteRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantStudyRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.SitePermissionRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.StudyPermissionRepository;\n+\n+@Service\n+public class StudyServiceImpl implements StudyService {\n+  private XLogger logger = XLoggerFactory.getXLogger(StudyServiceImpl.class.getName());\n+\n+  @Autowired private StudyPermissionRepository studyPermissionRepository;\n+\n+  @Autowired private ParticipantRegistrySiteRepository participantRegistrySiteRepository;\n+\n+  @Autowired private ParticipantStudyRepository participantStudiesRepository;\n+\n+  @Autowired private SitePermissionRepository sitePermissionRepository;\n+\n+  @Override\n+  @Transactional(readOnly = true)\n+  public StudyResponse getStudies(String userId) {\n+    logger.entry(\"getStudies(String userId)\");\n+\n+    List<SitePermissionEntity> sitePermissions =\n+        sitePermissionRepository.findSitePermissionByUserId(userId);\n+\n+    if (CollectionUtils.isEmpty(sitePermissions)) {\n+      logger.exit(ErrorCode.STUDY_NOT_FOUND);\n+      return new StudyResponse(ErrorCode.STUDY_NOT_FOUND);\n+    }\n+\n+    Map<StudyEntity, List<SitePermissionEntity>> studyPermissionMap =\n+        sitePermissions.stream().collect(Collectors.groupingBy(SitePermissionEntity::getStudy));\n+\n+    List<String> usersStudyIds =\n+        sitePermissions\n+            .stream()\n+            .distinct()\n+            .map(studyEntity -> studyEntity.getStudy().getId())\n+            .collect(Collectors.toList());\n+\n+    Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId =\n+        getStudyPermissionsByStudyInfoId(userId, usersStudyIds);\n+\n+    List<String> usersSiteIds =\n+        sitePermissions\n+            .stream()\n+            .map(s -> s.getSite().getId())\n+            .distinct()\n+            .collect(Collectors.toList());\n+\n+    Map<String, Long> siteWithInvitedParticipantCountMap =\n+        getSiteWithInvitedParticipantCountMap(usersSiteIds);\n+\n+    Map<String, Long> siteWithEnrolledParticipantCountMap =\n+        getSiteWithEnrolledParticipantCountMap(usersSiteIds);\n+\n+    return prepareStudyResponse(\n+        sitePermissions,\n+        studyPermissionsByStudyInfoId,\n+        studyPermissionMap,\n+        siteWithInvitedParticipantCountMap,\n+        siteWithEnrolledParticipantCountMap);\n+  }\n+\n+  private Map<String, StudyPermissionEntity> getStudyPermissionsByStudyInfoId(\n+      String userId, List<String> usersStudyIds) {\n+    List<StudyPermissionEntity> studyPermissions =\n+        studyPermissionRepository.findStudyPermissionsOfUserByStudyIds(usersStudyIds, userId);\n+\n+    Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId = new HashMap<>();\n+    if (CollectionUtils.isNotEmpty(studyPermissions)) {\n+      studyPermissionsByStudyInfoId =\n+          studyPermissions\n+              .stream()\n+              .collect(Collectors.toMap(e -> e.getStudy().getId(), Function.identity()));\n+    }\n+    return studyPermissionsByStudyInfoId;\n+  }\n+\n+  private StudyResponse prepareStudyResponse(\n+      List<SitePermissionEntity> sitePermissions,\n+      Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId,\n+      Map<StudyEntity, List<SitePermissionEntity>> studyPermissionMap,\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map<String, Long> siteWithEnrolledParticipantCountMap) {\n+    List<StudyDetails> studies = new ArrayList<>();\n+    for (Map.Entry<StudyEntity, List<SitePermissionEntity>> entry : studyPermissionMap.entrySet()) {\n+      StudyDetails studyDetail = new StudyDetails();\n+      String studyId = entry.getKey().getId();\n+      studyDetail.setId(studyId);\n+      studyDetail.setCustomId(entry.getKey().getCustomId());\n+      studyDetail.setName(entry.getKey().getName());\n+      studyDetail.setType(entry.getKey().getType());\n+      studyDetail.setTotalSitesCount((long) entry.getValue().size());\n+\n+      if (studyPermissionsByStudyInfoId.get(studyId) != null) {\n+        Integer studyEditPermission =\n+            studyPermissionsByStudyInfoId.get(entry.getKey().getId()).getEdit();\n+        studyDetail.setStudyPermission(\n+            studyEditPermission == VIEW_VALUE ? READ_PERMISSION : READ_AND_EDIT_PERMISSION);\n+        studyDetail.setStudyPermission(studyEditPermission);\n+      }\n+\n+      calculateEnrollmentPercentage(\n+          siteWithInvitedParticipantCountMap,\n+          siteWithEnrolledParticipantCountMap,\n+          entry,\n+          studyDetail);\n+      studies.add(studyDetail);\n+    }\n+\n+    StudyResponse studyResponse =\n+        new StudyResponse(MessageCode.GET_STUDIES_SUCCESS, studies, sitePermissions.size());\n+    logger.exit(String.format(\"total studies=%d\", studyResponse.getStudies().size()));\n+    return studyResponse;\n+  }\n+\n+  private void calculateEnrollmentPercentage(\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map<String, Long> siteWithEnrolledParticipantCountMap,\n+      Map.Entry<StudyEntity, List<SitePermissionEntity>> entry,\n+      StudyDetails studyDetail) {\n+    Long studyInvitedCount = 0L;\n+    Long studyEnrolledCount = 0L;\n+    for (SitePermissionEntity sitePermission : entry.getValue()) {\n+      studyInvitedCount =\n+          getStudyInvitedCount(\n+              siteWithInvitedParticipantCountMap, entry, studyInvitedCount, sitePermission);\n+\n+      studyEnrolledCount =\n+          studyEnrolledCount\n+              + siteWithEnrolledParticipantCountMap.get(sitePermission.getSite().getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1NjMxNQ=="}, "originalCommit": {"oid": "ac1b133e7f76db791900e787e9c1c599df6d5f94"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODYzNjQ0OnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudyServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODo1MjoyMlrOG2XYmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNTo0MDo1MFrOG2jr5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1OTQxNw==", "bodyText": "same as above", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/637#discussion_r459659417", "createdAt": "2020-07-23T18:52:22Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudyServiceImpl.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.CLOSE_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.OPEN_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_AND_EDIT_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.VIEW_VALUE;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.StudyDetails;\n+import com.google.cloud.healthcare.fdamystudies.beans.StudyResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantRegistrySiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SitePermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyPermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantRegistrySiteRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantStudyRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.SitePermissionRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.StudyPermissionRepository;\n+\n+@Service\n+public class StudyServiceImpl implements StudyService {\n+  private XLogger logger = XLoggerFactory.getXLogger(StudyServiceImpl.class.getName());\n+\n+  @Autowired private StudyPermissionRepository studyPermissionRepository;\n+\n+  @Autowired private ParticipantRegistrySiteRepository participantRegistrySiteRepository;\n+\n+  @Autowired private ParticipantStudyRepository participantStudiesRepository;\n+\n+  @Autowired private SitePermissionRepository sitePermissionRepository;\n+\n+  @Override\n+  @Transactional(readOnly = true)\n+  public StudyResponse getStudies(String userId) {\n+    logger.entry(\"getStudies(String userId)\");\n+\n+    List<SitePermissionEntity> sitePermissions =\n+        sitePermissionRepository.findSitePermissionByUserId(userId);\n+\n+    if (CollectionUtils.isEmpty(sitePermissions)) {\n+      logger.exit(ErrorCode.STUDY_NOT_FOUND);\n+      return new StudyResponse(ErrorCode.STUDY_NOT_FOUND);\n+    }\n+\n+    Map<StudyEntity, List<SitePermissionEntity>> studyPermissionMap =\n+        sitePermissions.stream().collect(Collectors.groupingBy(SitePermissionEntity::getStudy));\n+\n+    List<String> usersStudyIds =\n+        sitePermissions\n+            .stream()\n+            .distinct()\n+            .map(studyEntity -> studyEntity.getStudy().getId())\n+            .collect(Collectors.toList());\n+\n+    Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId =\n+        getStudyPermissionsByStudyInfoId(userId, usersStudyIds);\n+\n+    List<String> usersSiteIds =\n+        sitePermissions\n+            .stream()\n+            .map(s -> s.getSite().getId())\n+            .distinct()\n+            .collect(Collectors.toList());\n+\n+    Map<String, Long> siteWithInvitedParticipantCountMap =\n+        getSiteWithInvitedParticipantCountMap(usersSiteIds);\n+\n+    Map<String, Long> siteWithEnrolledParticipantCountMap =\n+        getSiteWithEnrolledParticipantCountMap(usersSiteIds);\n+\n+    return prepareStudyResponse(\n+        sitePermissions,\n+        studyPermissionsByStudyInfoId,\n+        studyPermissionMap,\n+        siteWithInvitedParticipantCountMap,\n+        siteWithEnrolledParticipantCountMap);\n+  }\n+\n+  private Map<String, StudyPermissionEntity> getStudyPermissionsByStudyInfoId(\n+      String userId, List<String> usersStudyIds) {\n+    List<StudyPermissionEntity> studyPermissions =\n+        studyPermissionRepository.findStudyPermissionsOfUserByStudyIds(usersStudyIds, userId);\n+\n+    Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId = new HashMap<>();\n+    if (CollectionUtils.isNotEmpty(studyPermissions)) {\n+      studyPermissionsByStudyInfoId =\n+          studyPermissions\n+              .stream()\n+              .collect(Collectors.toMap(e -> e.getStudy().getId(), Function.identity()));\n+    }\n+    return studyPermissionsByStudyInfoId;\n+  }\n+\n+  private StudyResponse prepareStudyResponse(\n+      List<SitePermissionEntity> sitePermissions,\n+      Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId,\n+      Map<StudyEntity, List<SitePermissionEntity>> studyPermissionMap,\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map<String, Long> siteWithEnrolledParticipantCountMap) {\n+    List<StudyDetails> studies = new ArrayList<>();\n+    for (Map.Entry<StudyEntity, List<SitePermissionEntity>> entry : studyPermissionMap.entrySet()) {\n+      StudyDetails studyDetail = new StudyDetails();\n+      String studyId = entry.getKey().getId();\n+      studyDetail.setId(studyId);\n+      studyDetail.setCustomId(entry.getKey().getCustomId());\n+      studyDetail.setName(entry.getKey().getName());\n+      studyDetail.setType(entry.getKey().getType());\n+      studyDetail.setTotalSitesCount((long) entry.getValue().size());\n+\n+      if (studyPermissionsByStudyInfoId.get(studyId) != null) {\n+        Integer studyEditPermission =\n+            studyPermissionsByStudyInfoId.get(entry.getKey().getId()).getEdit();\n+        studyDetail.setStudyPermission(\n+            studyEditPermission == VIEW_VALUE ? READ_PERMISSION : READ_AND_EDIT_PERMISSION);\n+        studyDetail.setStudyPermission(studyEditPermission);\n+      }\n+\n+      calculateEnrollmentPercentage(\n+          siteWithInvitedParticipantCountMap,\n+          siteWithEnrolledParticipantCountMap,\n+          entry,\n+          studyDetail);\n+      studies.add(studyDetail);\n+    }\n+\n+    StudyResponse studyResponse =\n+        new StudyResponse(MessageCode.GET_STUDIES_SUCCESS, studies, sitePermissions.size());\n+    logger.exit(String.format(\"total studies=%d\", studyResponse.getStudies().size()));\n+    return studyResponse;\n+  }\n+\n+  private void calculateEnrollmentPercentage(\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map<String, Long> siteWithEnrolledParticipantCountMap,\n+      Map.Entry<StudyEntity, List<SitePermissionEntity>> entry,\n+      StudyDetails studyDetail) {\n+    Long studyInvitedCount = 0L;\n+    Long studyEnrolledCount = 0L;\n+    for (SitePermissionEntity sitePermission : entry.getValue()) {\n+      studyInvitedCount =\n+          getStudyInvitedCount(\n+              siteWithInvitedParticipantCountMap, entry, studyInvitedCount, sitePermission);\n+\n+      studyEnrolledCount =\n+          studyEnrolledCount\n+              + siteWithEnrolledParticipantCountMap.get(sitePermission.getSite().getId());\n+    }\n+\n+    studyDetail.setEnrolled(studyEnrolledCount);\n+    studyDetail.setInvited(studyInvitedCount);\n+    if (studyDetail.getInvited() != 0 && studyDetail.getInvited() >= studyDetail.getEnrolled()) {\n+      Double percentage =\n+          (Double.valueOf(studyDetail.getEnrolled()) * 100)\n+              / Double.valueOf(studyDetail.getInvited());\n+      studyDetail.setEnrollmentPercentage(percentage);\n+    }\n+  }\n+\n+  private Long getStudyInvitedCount(\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map.Entry<StudyEntity, List<SitePermissionEntity>> entry,\n+      Long studyInvitedCount,\n+      SitePermissionEntity sitePermission) {\n+    String siteId = sitePermission.getSite().getId();\n+    String studyType = entry.getKey().getType();\n+    if (siteWithInvitedParticipantCountMap.get(siteId) != null && studyType.equals(CLOSE_STUDY)) {\n+      studyInvitedCount = studyInvitedCount + siteWithInvitedParticipantCountMap.get(siteId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac1b133e7f76db791900e787e9c1c599df6d5f94"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2MDk2Nw==", "bodyText": "Changed to \"+=\" operator.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/637#discussion_r459860967", "createdAt": "2020-07-24T05:40:50Z", "author": {"login": "monica-BTC"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudyServiceImpl.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.CLOSE_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.OPEN_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_AND_EDIT_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.VIEW_VALUE;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.StudyDetails;\n+import com.google.cloud.healthcare.fdamystudies.beans.StudyResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantRegistrySiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SitePermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyPermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantRegistrySiteRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantStudyRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.SitePermissionRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.StudyPermissionRepository;\n+\n+@Service\n+public class StudyServiceImpl implements StudyService {\n+  private XLogger logger = XLoggerFactory.getXLogger(StudyServiceImpl.class.getName());\n+\n+  @Autowired private StudyPermissionRepository studyPermissionRepository;\n+\n+  @Autowired private ParticipantRegistrySiteRepository participantRegistrySiteRepository;\n+\n+  @Autowired private ParticipantStudyRepository participantStudiesRepository;\n+\n+  @Autowired private SitePermissionRepository sitePermissionRepository;\n+\n+  @Override\n+  @Transactional(readOnly = true)\n+  public StudyResponse getStudies(String userId) {\n+    logger.entry(\"getStudies(String userId)\");\n+\n+    List<SitePermissionEntity> sitePermissions =\n+        sitePermissionRepository.findSitePermissionByUserId(userId);\n+\n+    if (CollectionUtils.isEmpty(sitePermissions)) {\n+      logger.exit(ErrorCode.STUDY_NOT_FOUND);\n+      return new StudyResponse(ErrorCode.STUDY_NOT_FOUND);\n+    }\n+\n+    Map<StudyEntity, List<SitePermissionEntity>> studyPermissionMap =\n+        sitePermissions.stream().collect(Collectors.groupingBy(SitePermissionEntity::getStudy));\n+\n+    List<String> usersStudyIds =\n+        sitePermissions\n+            .stream()\n+            .distinct()\n+            .map(studyEntity -> studyEntity.getStudy().getId())\n+            .collect(Collectors.toList());\n+\n+    Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId =\n+        getStudyPermissionsByStudyInfoId(userId, usersStudyIds);\n+\n+    List<String> usersSiteIds =\n+        sitePermissions\n+            .stream()\n+            .map(s -> s.getSite().getId())\n+            .distinct()\n+            .collect(Collectors.toList());\n+\n+    Map<String, Long> siteWithInvitedParticipantCountMap =\n+        getSiteWithInvitedParticipantCountMap(usersSiteIds);\n+\n+    Map<String, Long> siteWithEnrolledParticipantCountMap =\n+        getSiteWithEnrolledParticipantCountMap(usersSiteIds);\n+\n+    return prepareStudyResponse(\n+        sitePermissions,\n+        studyPermissionsByStudyInfoId,\n+        studyPermissionMap,\n+        siteWithInvitedParticipantCountMap,\n+        siteWithEnrolledParticipantCountMap);\n+  }\n+\n+  private Map<String, StudyPermissionEntity> getStudyPermissionsByStudyInfoId(\n+      String userId, List<String> usersStudyIds) {\n+    List<StudyPermissionEntity> studyPermissions =\n+        studyPermissionRepository.findStudyPermissionsOfUserByStudyIds(usersStudyIds, userId);\n+\n+    Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId = new HashMap<>();\n+    if (CollectionUtils.isNotEmpty(studyPermissions)) {\n+      studyPermissionsByStudyInfoId =\n+          studyPermissions\n+              .stream()\n+              .collect(Collectors.toMap(e -> e.getStudy().getId(), Function.identity()));\n+    }\n+    return studyPermissionsByStudyInfoId;\n+  }\n+\n+  private StudyResponse prepareStudyResponse(\n+      List<SitePermissionEntity> sitePermissions,\n+      Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId,\n+      Map<StudyEntity, List<SitePermissionEntity>> studyPermissionMap,\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map<String, Long> siteWithEnrolledParticipantCountMap) {\n+    List<StudyDetails> studies = new ArrayList<>();\n+    for (Map.Entry<StudyEntity, List<SitePermissionEntity>> entry : studyPermissionMap.entrySet()) {\n+      StudyDetails studyDetail = new StudyDetails();\n+      String studyId = entry.getKey().getId();\n+      studyDetail.setId(studyId);\n+      studyDetail.setCustomId(entry.getKey().getCustomId());\n+      studyDetail.setName(entry.getKey().getName());\n+      studyDetail.setType(entry.getKey().getType());\n+      studyDetail.setTotalSitesCount((long) entry.getValue().size());\n+\n+      if (studyPermissionsByStudyInfoId.get(studyId) != null) {\n+        Integer studyEditPermission =\n+            studyPermissionsByStudyInfoId.get(entry.getKey().getId()).getEdit();\n+        studyDetail.setStudyPermission(\n+            studyEditPermission == VIEW_VALUE ? READ_PERMISSION : READ_AND_EDIT_PERMISSION);\n+        studyDetail.setStudyPermission(studyEditPermission);\n+      }\n+\n+      calculateEnrollmentPercentage(\n+          siteWithInvitedParticipantCountMap,\n+          siteWithEnrolledParticipantCountMap,\n+          entry,\n+          studyDetail);\n+      studies.add(studyDetail);\n+    }\n+\n+    StudyResponse studyResponse =\n+        new StudyResponse(MessageCode.GET_STUDIES_SUCCESS, studies, sitePermissions.size());\n+    logger.exit(String.format(\"total studies=%d\", studyResponse.getStudies().size()));\n+    return studyResponse;\n+  }\n+\n+  private void calculateEnrollmentPercentage(\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map<String, Long> siteWithEnrolledParticipantCountMap,\n+      Map.Entry<StudyEntity, List<SitePermissionEntity>> entry,\n+      StudyDetails studyDetail) {\n+    Long studyInvitedCount = 0L;\n+    Long studyEnrolledCount = 0L;\n+    for (SitePermissionEntity sitePermission : entry.getValue()) {\n+      studyInvitedCount =\n+          getStudyInvitedCount(\n+              siteWithInvitedParticipantCountMap, entry, studyInvitedCount, sitePermission);\n+\n+      studyEnrolledCount =\n+          studyEnrolledCount\n+              + siteWithEnrolledParticipantCountMap.get(sitePermission.getSite().getId());\n+    }\n+\n+    studyDetail.setEnrolled(studyEnrolledCount);\n+    studyDetail.setInvited(studyInvitedCount);\n+    if (studyDetail.getInvited() != 0 && studyDetail.getInvited() >= studyDetail.getEnrolled()) {\n+      Double percentage =\n+          (Double.valueOf(studyDetail.getEnrolled()) * 100)\n+              / Double.valueOf(studyDetail.getInvited());\n+      studyDetail.setEnrollmentPercentage(percentage);\n+    }\n+  }\n+\n+  private Long getStudyInvitedCount(\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map.Entry<StudyEntity, List<SitePermissionEntity>> entry,\n+      Long studyInvitedCount,\n+      SitePermissionEntity sitePermission) {\n+    String siteId = sitePermission.getSite().getId();\n+    String studyType = entry.getKey().getType();\n+    if (siteWithInvitedParticipantCountMap.get(siteId) != null && studyType.equals(CLOSE_STUDY)) {\n+      studyInvitedCount = studyInvitedCount + siteWithInvitedParticipantCountMap.get(siteId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1OTQxNw=="}, "originalCommit": {"oid": "ac1b133e7f76db791900e787e9c1c599df6d5f94"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODYzNzAxOnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudyServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODo1MjozNVrOG2XY-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNTo0MTowMFrOG2jsAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1OTUxNA==", "bodyText": "same as above", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/637#discussion_r459659514", "createdAt": "2020-07-23T18:52:35Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudyServiceImpl.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.CLOSE_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.OPEN_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_AND_EDIT_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.VIEW_VALUE;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.StudyDetails;\n+import com.google.cloud.healthcare.fdamystudies.beans.StudyResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantRegistrySiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SitePermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyPermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantRegistrySiteRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantStudyRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.SitePermissionRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.StudyPermissionRepository;\n+\n+@Service\n+public class StudyServiceImpl implements StudyService {\n+  private XLogger logger = XLoggerFactory.getXLogger(StudyServiceImpl.class.getName());\n+\n+  @Autowired private StudyPermissionRepository studyPermissionRepository;\n+\n+  @Autowired private ParticipantRegistrySiteRepository participantRegistrySiteRepository;\n+\n+  @Autowired private ParticipantStudyRepository participantStudiesRepository;\n+\n+  @Autowired private SitePermissionRepository sitePermissionRepository;\n+\n+  @Override\n+  @Transactional(readOnly = true)\n+  public StudyResponse getStudies(String userId) {\n+    logger.entry(\"getStudies(String userId)\");\n+\n+    List<SitePermissionEntity> sitePermissions =\n+        sitePermissionRepository.findSitePermissionByUserId(userId);\n+\n+    if (CollectionUtils.isEmpty(sitePermissions)) {\n+      logger.exit(ErrorCode.STUDY_NOT_FOUND);\n+      return new StudyResponse(ErrorCode.STUDY_NOT_FOUND);\n+    }\n+\n+    Map<StudyEntity, List<SitePermissionEntity>> studyPermissionMap =\n+        sitePermissions.stream().collect(Collectors.groupingBy(SitePermissionEntity::getStudy));\n+\n+    List<String> usersStudyIds =\n+        sitePermissions\n+            .stream()\n+            .distinct()\n+            .map(studyEntity -> studyEntity.getStudy().getId())\n+            .collect(Collectors.toList());\n+\n+    Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId =\n+        getStudyPermissionsByStudyInfoId(userId, usersStudyIds);\n+\n+    List<String> usersSiteIds =\n+        sitePermissions\n+            .stream()\n+            .map(s -> s.getSite().getId())\n+            .distinct()\n+            .collect(Collectors.toList());\n+\n+    Map<String, Long> siteWithInvitedParticipantCountMap =\n+        getSiteWithInvitedParticipantCountMap(usersSiteIds);\n+\n+    Map<String, Long> siteWithEnrolledParticipantCountMap =\n+        getSiteWithEnrolledParticipantCountMap(usersSiteIds);\n+\n+    return prepareStudyResponse(\n+        sitePermissions,\n+        studyPermissionsByStudyInfoId,\n+        studyPermissionMap,\n+        siteWithInvitedParticipantCountMap,\n+        siteWithEnrolledParticipantCountMap);\n+  }\n+\n+  private Map<String, StudyPermissionEntity> getStudyPermissionsByStudyInfoId(\n+      String userId, List<String> usersStudyIds) {\n+    List<StudyPermissionEntity> studyPermissions =\n+        studyPermissionRepository.findStudyPermissionsOfUserByStudyIds(usersStudyIds, userId);\n+\n+    Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId = new HashMap<>();\n+    if (CollectionUtils.isNotEmpty(studyPermissions)) {\n+      studyPermissionsByStudyInfoId =\n+          studyPermissions\n+              .stream()\n+              .collect(Collectors.toMap(e -> e.getStudy().getId(), Function.identity()));\n+    }\n+    return studyPermissionsByStudyInfoId;\n+  }\n+\n+  private StudyResponse prepareStudyResponse(\n+      List<SitePermissionEntity> sitePermissions,\n+      Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId,\n+      Map<StudyEntity, List<SitePermissionEntity>> studyPermissionMap,\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map<String, Long> siteWithEnrolledParticipantCountMap) {\n+    List<StudyDetails> studies = new ArrayList<>();\n+    for (Map.Entry<StudyEntity, List<SitePermissionEntity>> entry : studyPermissionMap.entrySet()) {\n+      StudyDetails studyDetail = new StudyDetails();\n+      String studyId = entry.getKey().getId();\n+      studyDetail.setId(studyId);\n+      studyDetail.setCustomId(entry.getKey().getCustomId());\n+      studyDetail.setName(entry.getKey().getName());\n+      studyDetail.setType(entry.getKey().getType());\n+      studyDetail.setTotalSitesCount((long) entry.getValue().size());\n+\n+      if (studyPermissionsByStudyInfoId.get(studyId) != null) {\n+        Integer studyEditPermission =\n+            studyPermissionsByStudyInfoId.get(entry.getKey().getId()).getEdit();\n+        studyDetail.setStudyPermission(\n+            studyEditPermission == VIEW_VALUE ? READ_PERMISSION : READ_AND_EDIT_PERMISSION);\n+        studyDetail.setStudyPermission(studyEditPermission);\n+      }\n+\n+      calculateEnrollmentPercentage(\n+          siteWithInvitedParticipantCountMap,\n+          siteWithEnrolledParticipantCountMap,\n+          entry,\n+          studyDetail);\n+      studies.add(studyDetail);\n+    }\n+\n+    StudyResponse studyResponse =\n+        new StudyResponse(MessageCode.GET_STUDIES_SUCCESS, studies, sitePermissions.size());\n+    logger.exit(String.format(\"total studies=%d\", studyResponse.getStudies().size()));\n+    return studyResponse;\n+  }\n+\n+  private void calculateEnrollmentPercentage(\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map<String, Long> siteWithEnrolledParticipantCountMap,\n+      Map.Entry<StudyEntity, List<SitePermissionEntity>> entry,\n+      StudyDetails studyDetail) {\n+    Long studyInvitedCount = 0L;\n+    Long studyEnrolledCount = 0L;\n+    for (SitePermissionEntity sitePermission : entry.getValue()) {\n+      studyInvitedCount =\n+          getStudyInvitedCount(\n+              siteWithInvitedParticipantCountMap, entry, studyInvitedCount, sitePermission);\n+\n+      studyEnrolledCount =\n+          studyEnrolledCount\n+              + siteWithEnrolledParticipantCountMap.get(sitePermission.getSite().getId());\n+    }\n+\n+    studyDetail.setEnrolled(studyEnrolledCount);\n+    studyDetail.setInvited(studyInvitedCount);\n+    if (studyDetail.getInvited() != 0 && studyDetail.getInvited() >= studyDetail.getEnrolled()) {\n+      Double percentage =\n+          (Double.valueOf(studyDetail.getEnrolled()) * 100)\n+              / Double.valueOf(studyDetail.getInvited());\n+      studyDetail.setEnrollmentPercentage(percentage);\n+    }\n+  }\n+\n+  private Long getStudyInvitedCount(\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map.Entry<StudyEntity, List<SitePermissionEntity>> entry,\n+      Long studyInvitedCount,\n+      SitePermissionEntity sitePermission) {\n+    String siteId = sitePermission.getSite().getId();\n+    String studyType = entry.getKey().getType();\n+    if (siteWithInvitedParticipantCountMap.get(siteId) != null && studyType.equals(CLOSE_STUDY)) {\n+      studyInvitedCount = studyInvitedCount + siteWithInvitedParticipantCountMap.get(siteId);\n+    }\n+\n+    if (studyType.equals(OPEN_STUDY)) {\n+      studyInvitedCount = studyInvitedCount + sitePermission.getSite().getTargetEnrollment();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac1b133e7f76db791900e787e9c1c599df6d5f94"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2MDk5Mg==", "bodyText": "Changed to \"+=\" operator.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/637#discussion_r459860992", "createdAt": "2020-07-24T05:41:00Z", "author": {"login": "monica-BTC"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudyServiceImpl.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.CLOSE_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.OPEN_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_AND_EDIT_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.VIEW_VALUE;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.StudyDetails;\n+import com.google.cloud.healthcare.fdamystudies.beans.StudyResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantRegistrySiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SitePermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyPermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantRegistrySiteRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantStudyRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.SitePermissionRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.StudyPermissionRepository;\n+\n+@Service\n+public class StudyServiceImpl implements StudyService {\n+  private XLogger logger = XLoggerFactory.getXLogger(StudyServiceImpl.class.getName());\n+\n+  @Autowired private StudyPermissionRepository studyPermissionRepository;\n+\n+  @Autowired private ParticipantRegistrySiteRepository participantRegistrySiteRepository;\n+\n+  @Autowired private ParticipantStudyRepository participantStudiesRepository;\n+\n+  @Autowired private SitePermissionRepository sitePermissionRepository;\n+\n+  @Override\n+  @Transactional(readOnly = true)\n+  public StudyResponse getStudies(String userId) {\n+    logger.entry(\"getStudies(String userId)\");\n+\n+    List<SitePermissionEntity> sitePermissions =\n+        sitePermissionRepository.findSitePermissionByUserId(userId);\n+\n+    if (CollectionUtils.isEmpty(sitePermissions)) {\n+      logger.exit(ErrorCode.STUDY_NOT_FOUND);\n+      return new StudyResponse(ErrorCode.STUDY_NOT_FOUND);\n+    }\n+\n+    Map<StudyEntity, List<SitePermissionEntity>> studyPermissionMap =\n+        sitePermissions.stream().collect(Collectors.groupingBy(SitePermissionEntity::getStudy));\n+\n+    List<String> usersStudyIds =\n+        sitePermissions\n+            .stream()\n+            .distinct()\n+            .map(studyEntity -> studyEntity.getStudy().getId())\n+            .collect(Collectors.toList());\n+\n+    Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId =\n+        getStudyPermissionsByStudyInfoId(userId, usersStudyIds);\n+\n+    List<String> usersSiteIds =\n+        sitePermissions\n+            .stream()\n+            .map(s -> s.getSite().getId())\n+            .distinct()\n+            .collect(Collectors.toList());\n+\n+    Map<String, Long> siteWithInvitedParticipantCountMap =\n+        getSiteWithInvitedParticipantCountMap(usersSiteIds);\n+\n+    Map<String, Long> siteWithEnrolledParticipantCountMap =\n+        getSiteWithEnrolledParticipantCountMap(usersSiteIds);\n+\n+    return prepareStudyResponse(\n+        sitePermissions,\n+        studyPermissionsByStudyInfoId,\n+        studyPermissionMap,\n+        siteWithInvitedParticipantCountMap,\n+        siteWithEnrolledParticipantCountMap);\n+  }\n+\n+  private Map<String, StudyPermissionEntity> getStudyPermissionsByStudyInfoId(\n+      String userId, List<String> usersStudyIds) {\n+    List<StudyPermissionEntity> studyPermissions =\n+        studyPermissionRepository.findStudyPermissionsOfUserByStudyIds(usersStudyIds, userId);\n+\n+    Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId = new HashMap<>();\n+    if (CollectionUtils.isNotEmpty(studyPermissions)) {\n+      studyPermissionsByStudyInfoId =\n+          studyPermissions\n+              .stream()\n+              .collect(Collectors.toMap(e -> e.getStudy().getId(), Function.identity()));\n+    }\n+    return studyPermissionsByStudyInfoId;\n+  }\n+\n+  private StudyResponse prepareStudyResponse(\n+      List<SitePermissionEntity> sitePermissions,\n+      Map<String, StudyPermissionEntity> studyPermissionsByStudyInfoId,\n+      Map<StudyEntity, List<SitePermissionEntity>> studyPermissionMap,\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map<String, Long> siteWithEnrolledParticipantCountMap) {\n+    List<StudyDetails> studies = new ArrayList<>();\n+    for (Map.Entry<StudyEntity, List<SitePermissionEntity>> entry : studyPermissionMap.entrySet()) {\n+      StudyDetails studyDetail = new StudyDetails();\n+      String studyId = entry.getKey().getId();\n+      studyDetail.setId(studyId);\n+      studyDetail.setCustomId(entry.getKey().getCustomId());\n+      studyDetail.setName(entry.getKey().getName());\n+      studyDetail.setType(entry.getKey().getType());\n+      studyDetail.setTotalSitesCount((long) entry.getValue().size());\n+\n+      if (studyPermissionsByStudyInfoId.get(studyId) != null) {\n+        Integer studyEditPermission =\n+            studyPermissionsByStudyInfoId.get(entry.getKey().getId()).getEdit();\n+        studyDetail.setStudyPermission(\n+            studyEditPermission == VIEW_VALUE ? READ_PERMISSION : READ_AND_EDIT_PERMISSION);\n+        studyDetail.setStudyPermission(studyEditPermission);\n+      }\n+\n+      calculateEnrollmentPercentage(\n+          siteWithInvitedParticipantCountMap,\n+          siteWithEnrolledParticipantCountMap,\n+          entry,\n+          studyDetail);\n+      studies.add(studyDetail);\n+    }\n+\n+    StudyResponse studyResponse =\n+        new StudyResponse(MessageCode.GET_STUDIES_SUCCESS, studies, sitePermissions.size());\n+    logger.exit(String.format(\"total studies=%d\", studyResponse.getStudies().size()));\n+    return studyResponse;\n+  }\n+\n+  private void calculateEnrollmentPercentage(\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map<String, Long> siteWithEnrolledParticipantCountMap,\n+      Map.Entry<StudyEntity, List<SitePermissionEntity>> entry,\n+      StudyDetails studyDetail) {\n+    Long studyInvitedCount = 0L;\n+    Long studyEnrolledCount = 0L;\n+    for (SitePermissionEntity sitePermission : entry.getValue()) {\n+      studyInvitedCount =\n+          getStudyInvitedCount(\n+              siteWithInvitedParticipantCountMap, entry, studyInvitedCount, sitePermission);\n+\n+      studyEnrolledCount =\n+          studyEnrolledCount\n+              + siteWithEnrolledParticipantCountMap.get(sitePermission.getSite().getId());\n+    }\n+\n+    studyDetail.setEnrolled(studyEnrolledCount);\n+    studyDetail.setInvited(studyInvitedCount);\n+    if (studyDetail.getInvited() != 0 && studyDetail.getInvited() >= studyDetail.getEnrolled()) {\n+      Double percentage =\n+          (Double.valueOf(studyDetail.getEnrolled()) * 100)\n+              / Double.valueOf(studyDetail.getInvited());\n+      studyDetail.setEnrollmentPercentage(percentage);\n+    }\n+  }\n+\n+  private Long getStudyInvitedCount(\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map.Entry<StudyEntity, List<SitePermissionEntity>> entry,\n+      Long studyInvitedCount,\n+      SitePermissionEntity sitePermission) {\n+    String siteId = sitePermission.getSite().getId();\n+    String studyType = entry.getKey().getType();\n+    if (siteWithInvitedParticipantCountMap.get(siteId) != null && studyType.equals(CLOSE_STUDY)) {\n+      studyInvitedCount = studyInvitedCount + siteWithInvitedParticipantCountMap.get(siteId);\n+    }\n+\n+    if (studyType.equals(OPEN_STUDY)) {\n+      studyInvitedCount = studyInvitedCount + sitePermission.getSite().getTargetEnrollment();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1OTUxNA=="}, "originalCommit": {"oid": "ac1b133e7f76db791900e787e9c1c599df6d5f94"}, "originalPosition": 195}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODY0MTI0OnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/StudyControllerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODo1NDowMVrOG2Xb5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNTo0MToyMFrOG2jsUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MDI2MA==", "bodyText": "shouldReturnStudyNotFound", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/637#discussion_r459660260", "createdAt": "2020-07-23T18:54:01Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/StudyControllerTest.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.Collections;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.MediaType;\n+\n+import com.google.cloud.healthcare.fdamystudies.common.ApiEndpoint;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.IdGenerator;\n+import com.google.cloud.healthcare.fdamystudies.common.TestConstants;\n+import com.google.cloud.healthcare.fdamystudies.helper.TestDataHelper;\n+import com.google.cloud.healthcare.fdamystudies.model.AppEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantRegistrySiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.UserRegAdminEntity;\n+import com.google.cloud.healthcare.fdamystudies.service.StudyService;\n+\n+public class StudyControllerTest extends BaseMockIT {\n+\n+  @Autowired private StudyService studyService;\n+\n+  @Autowired private StudyController controller;\n+\n+  @Autowired private TestDataHelper testDataHelper;\n+\n+  private UserRegAdminEntity userRegAdminEntity;\n+\n+  private SiteEntity siteEntity;\n+\n+  private StudyEntity studyEntity;\n+\n+  private ParticipantRegistrySiteEntity participantRegistrySiteEntity;\n+\n+  private ParticipantStudyEntity participantStudyEntity;\n+\n+  private AppEntity appEntity;\n+\n+  @BeforeEach\n+  public void setUp() {\n+    userRegAdminEntity = testDataHelper.createUserRegAdminEntity();\n+    appEntity = testDataHelper.createAppEntity(userRegAdminEntity);\n+    studyEntity = testDataHelper.createStudyEntity(userRegAdminEntity, appEntity);\n+    siteEntity = testDataHelper.createSiteEntity(studyEntity, userRegAdminEntity, appEntity);\n+    participantRegistrySiteEntity =\n+        testDataHelper.createParticipantRegistrySite(siteEntity, studyEntity);\n+    participantStudyEntity =\n+        testDataHelper.createParticipantStudyEntity(\n+            siteEntity, studyEntity, participantRegistrySiteEntity);\n+  }\n+\n+  @Test\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(mockMvc);\n+    assertNotNull(studyService);\n+  }\n+\n+  @Test\n+  public void shouldReturnStudies() throws Exception {\n+    HttpHeaders headers = newCommonHeaders();\n+    headers.add(TestConstants.USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_STUDIES.getPath()).headers(headers).contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(jsonPath(\"$.studies\").isArray())\n+        .andExpect(jsonPath(\"$.studies[0].id\").isNotEmpty())\n+        .andExpect(jsonPath(\"$.sitePermissionCount\").value(1));\n+  }\n+\n+  @Test\n+  public void shouldReturnBadRequestForGetStudies() throws Exception {\n+    HttpHeaders headers = newCommonHeaders();\n+\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_STUDIES.getPath()).headers(headers).contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isBadRequest())\n+        .andExpect(jsonPath(\"$.violations\").isArray())\n+        .andExpect(jsonPath(\"$.violations[0].path\").value(\"userId\"))\n+        .andExpect(jsonPath(\"$.violations[0].message\").value(\"header is required\"));\n+  }\n+\n+  @Test\n+  public void shouldNotReturnStudies() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac1b133e7f76db791900e787e9c1c599df6d5f94"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2MTA3Mw==", "bodyText": "Changed to shouldReturnStudyNotFound.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/637#discussion_r459861073", "createdAt": "2020-07-24T05:41:20Z", "author": {"login": "monica-BTC"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/StudyControllerTest.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.Collections;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.MediaType;\n+\n+import com.google.cloud.healthcare.fdamystudies.common.ApiEndpoint;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.IdGenerator;\n+import com.google.cloud.healthcare.fdamystudies.common.TestConstants;\n+import com.google.cloud.healthcare.fdamystudies.helper.TestDataHelper;\n+import com.google.cloud.healthcare.fdamystudies.model.AppEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantRegistrySiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.UserRegAdminEntity;\n+import com.google.cloud.healthcare.fdamystudies.service.StudyService;\n+\n+public class StudyControllerTest extends BaseMockIT {\n+\n+  @Autowired private StudyService studyService;\n+\n+  @Autowired private StudyController controller;\n+\n+  @Autowired private TestDataHelper testDataHelper;\n+\n+  private UserRegAdminEntity userRegAdminEntity;\n+\n+  private SiteEntity siteEntity;\n+\n+  private StudyEntity studyEntity;\n+\n+  private ParticipantRegistrySiteEntity participantRegistrySiteEntity;\n+\n+  private ParticipantStudyEntity participantStudyEntity;\n+\n+  private AppEntity appEntity;\n+\n+  @BeforeEach\n+  public void setUp() {\n+    userRegAdminEntity = testDataHelper.createUserRegAdminEntity();\n+    appEntity = testDataHelper.createAppEntity(userRegAdminEntity);\n+    studyEntity = testDataHelper.createStudyEntity(userRegAdminEntity, appEntity);\n+    siteEntity = testDataHelper.createSiteEntity(studyEntity, userRegAdminEntity, appEntity);\n+    participantRegistrySiteEntity =\n+        testDataHelper.createParticipantRegistrySite(siteEntity, studyEntity);\n+    participantStudyEntity =\n+        testDataHelper.createParticipantStudyEntity(\n+            siteEntity, studyEntity, participantRegistrySiteEntity);\n+  }\n+\n+  @Test\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(mockMvc);\n+    assertNotNull(studyService);\n+  }\n+\n+  @Test\n+  public void shouldReturnStudies() throws Exception {\n+    HttpHeaders headers = newCommonHeaders();\n+    headers.add(TestConstants.USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_STUDIES.getPath()).headers(headers).contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(jsonPath(\"$.studies\").isArray())\n+        .andExpect(jsonPath(\"$.studies[0].id\").isNotEmpty())\n+        .andExpect(jsonPath(\"$.sitePermissionCount\").value(1));\n+  }\n+\n+  @Test\n+  public void shouldReturnBadRequestForGetStudies() throws Exception {\n+    HttpHeaders headers = newCommonHeaders();\n+\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_STUDIES.getPath()).headers(headers).contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isBadRequest())\n+        .andExpect(jsonPath(\"$.violations\").isArray())\n+        .andExpect(jsonPath(\"$.violations[0].path\").value(\"userId\"))\n+        .andExpect(jsonPath(\"$.violations[0].message\").value(\"header is required\"));\n+  }\n+\n+  @Test\n+  public void shouldNotReturnStudies() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MDI2MA=="}, "originalCommit": {"oid": "ac1b133e7f76db791900e787e9c1c599df6d5f94"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODY0MjQ0OnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/StudyControllerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODo1NDoyMlrOG2XcqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNTo0MTo1NFrOG2jswQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MDQ1Ng==", "bodyText": "check for expected array length", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/637#discussion_r459660456", "createdAt": "2020-07-23T18:54:22Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/StudyControllerTest.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.Collections;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.MediaType;\n+\n+import com.google.cloud.healthcare.fdamystudies.common.ApiEndpoint;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.IdGenerator;\n+import com.google.cloud.healthcare.fdamystudies.common.TestConstants;\n+import com.google.cloud.healthcare.fdamystudies.helper.TestDataHelper;\n+import com.google.cloud.healthcare.fdamystudies.model.AppEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantRegistrySiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.UserRegAdminEntity;\n+import com.google.cloud.healthcare.fdamystudies.service.StudyService;\n+\n+public class StudyControllerTest extends BaseMockIT {\n+\n+  @Autowired private StudyService studyService;\n+\n+  @Autowired private StudyController controller;\n+\n+  @Autowired private TestDataHelper testDataHelper;\n+\n+  private UserRegAdminEntity userRegAdminEntity;\n+\n+  private SiteEntity siteEntity;\n+\n+  private StudyEntity studyEntity;\n+\n+  private ParticipantRegistrySiteEntity participantRegistrySiteEntity;\n+\n+  private ParticipantStudyEntity participantStudyEntity;\n+\n+  private AppEntity appEntity;\n+\n+  @BeforeEach\n+  public void setUp() {\n+    userRegAdminEntity = testDataHelper.createUserRegAdminEntity();\n+    appEntity = testDataHelper.createAppEntity(userRegAdminEntity);\n+    studyEntity = testDataHelper.createStudyEntity(userRegAdminEntity, appEntity);\n+    siteEntity = testDataHelper.createSiteEntity(studyEntity, userRegAdminEntity, appEntity);\n+    participantRegistrySiteEntity =\n+        testDataHelper.createParticipantRegistrySite(siteEntity, studyEntity);\n+    participantStudyEntity =\n+        testDataHelper.createParticipantStudyEntity(\n+            siteEntity, studyEntity, participantRegistrySiteEntity);\n+  }\n+\n+  @Test\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(mockMvc);\n+    assertNotNull(studyService);\n+  }\n+\n+  @Test\n+  public void shouldReturnStudies() throws Exception {\n+    HttpHeaders headers = newCommonHeaders();\n+    headers.add(TestConstants.USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_STUDIES.getPath()).headers(headers).contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(jsonPath(\"$.studies\").isArray())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac1b133e7f76db791900e787e9c1c599df6d5f94"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2MTE4NQ==", "bodyText": "Checked for array length.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/637#discussion_r459861185", "createdAt": "2020-07-24T05:41:54Z", "author": {"login": "monica-BTC"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/StudyControllerTest.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.Collections;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.MediaType;\n+\n+import com.google.cloud.healthcare.fdamystudies.common.ApiEndpoint;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.IdGenerator;\n+import com.google.cloud.healthcare.fdamystudies.common.TestConstants;\n+import com.google.cloud.healthcare.fdamystudies.helper.TestDataHelper;\n+import com.google.cloud.healthcare.fdamystudies.model.AppEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantRegistrySiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.UserRegAdminEntity;\n+import com.google.cloud.healthcare.fdamystudies.service.StudyService;\n+\n+public class StudyControllerTest extends BaseMockIT {\n+\n+  @Autowired private StudyService studyService;\n+\n+  @Autowired private StudyController controller;\n+\n+  @Autowired private TestDataHelper testDataHelper;\n+\n+  private UserRegAdminEntity userRegAdminEntity;\n+\n+  private SiteEntity siteEntity;\n+\n+  private StudyEntity studyEntity;\n+\n+  private ParticipantRegistrySiteEntity participantRegistrySiteEntity;\n+\n+  private ParticipantStudyEntity participantStudyEntity;\n+\n+  private AppEntity appEntity;\n+\n+  @BeforeEach\n+  public void setUp() {\n+    userRegAdminEntity = testDataHelper.createUserRegAdminEntity();\n+    appEntity = testDataHelper.createAppEntity(userRegAdminEntity);\n+    studyEntity = testDataHelper.createStudyEntity(userRegAdminEntity, appEntity);\n+    siteEntity = testDataHelper.createSiteEntity(studyEntity, userRegAdminEntity, appEntity);\n+    participantRegistrySiteEntity =\n+        testDataHelper.createParticipantRegistrySite(siteEntity, studyEntity);\n+    participantStudyEntity =\n+        testDataHelper.createParticipantStudyEntity(\n+            siteEntity, studyEntity, participantRegistrySiteEntity);\n+  }\n+\n+  @Test\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(mockMvc);\n+    assertNotNull(studyService);\n+  }\n+\n+  @Test\n+  public void shouldReturnStudies() throws Exception {\n+    HttpHeaders headers = newCommonHeaders();\n+    headers.add(TestConstants.USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_STUDIES.getPath()).headers(headers).contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(jsonPath(\"$.studies\").isArray())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MDQ1Ng=="}, "originalCommit": {"oid": "ac1b133e7f76db791900e787e9c1c599df6d5f94"}, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2302, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}