{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwOTgyMTY2", "number": 20, "reviewThreads": {"totalCount": 120, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjoyMTo0MFrODqk3yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMToyMzo1NlrODq-djw==", "hasNextPage": false, "hasPreviousPage": true}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTcwODg5OnYy", "diffSide": "RIGHT", "path": "WCP-WS/src/main/java/com/hphc/mystudies/util/HibernateUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjoyMTo0MFrOF6aQow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjoyMTo0MFrOF6aQow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5MTk3MQ==", "bodyText": "should we add Google copyright header here as well?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r396791971", "createdAt": "2020-03-23T22:21:40Z", "author": {"login": "zohrehj"}, "path": "WCP-WS/src/main/java/com/hphc/mystudies/util/HibernateUtil.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright \ufffd 2017-2018 Harvard Pilgrim Health Care Institute (HPHCI) and its Contributors.\n+ * Copyright \u00a9 2017-2018 Harvard Pilgrim Health Care Institute (HPHCI) and its Contributors.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcaba86f1bb819598a16c9c91201e204176e414"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTcxMjIwOnYy", "diffSide": "RIGHT", "path": "WCP-WS/src/main/java/com/hphc/mystudies/util/StudyMetaDataUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjoyMjo1NlrOF6aSuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjoyMjo1NlrOF6aSuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5MjUwNw==", "bodyText": "please remove commented code", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r396792507", "createdAt": "2020-03-23T22:22:56Z", "author": {"login": "zohrehj"}, "path": "WCP-WS/src/main/java/com/hphc/mystudies/util/StudyMetaDataUtil.java", "diffHunk": "@@ -39,992 +39,759 @@\n import java.util.StringTokenizer;\n import java.util.TimeZone;\n import java.util.concurrent.TimeUnit;\n-\n import javax.servlet.ServletContext;\n import javax.servlet.http.HttpServletResponse;\n-\n import org.apache.commons.lang3.StringUtils;\n import org.apache.log4j.Logger;\n-\n import com.hphc.mystudies.bean.FailureResponse;\n import com.sun.jersey.core.util.Base64;\n \n-/**\n- * Provides static methods.\n- * \n- * @author BTC\n- *\n- */\n public class StudyMetaDataUtil {\n \n-\tprivate static final Logger LOGGER = Logger.getLogger(StudyMetaDataUtil.class.getName());\n-\n-\t@SuppressWarnings(\"rawtypes\")\n-\tprotected static final HashMap configMap = StudyMetaDataUtil.getAppProperties();\n-\n-\t@SuppressWarnings(\"rawtypes\")\n-\tprotected static final HashMap authConfigMap = StudyMetaDataUtil.getAuthorizationProperties();\n-\n-\t@SuppressWarnings(\"unchecked\")\n-\tprivate static final HashMap<String, String> authPropMap = StudyMetaDataUtil.authConfigMap;\n-\n-\t/**\n-\t * Get properties defined in messageResource and application property files\n-\t * \n-\t * @author BTC\n-\t * @return the properties\n-\t */\n-\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n-\tpublic static HashMap getAppProperties() {\n-\t\tLOGGER.info(\"INFO: StudyMetaDataUtil - getAppProperties() :: starts\");\n-\t\tHashMap hm = new HashMap<String, String>();\n-\t\tEnumeration<String> keys = null;\n-\t\tEnumeration<Object> objectKeys = null;\n-\t\ttry {\n-\t\t\tResourceBundle rb = ResourceBundle.getBundle(\"messageResource\");\n-\t\t\tkeys = rb.getKeys();\n-\t\t\twhile (keys.hasMoreElements()) {\n-\t\t\t\tString key = keys.nextElement();\n-\t\t\t\tString value = rb.getString(key);\n-\t\t\t\thm.put(key, value);\n-\t\t\t}\n-\t\t\tServletContext context = ServletContextHolder.getServletContext();\n-\t\t\tProperties prop = new Properties();\n-\t\t\tprop.load(new FileInputStream(context.getInitParameter(\"property_file_location_path\")));\n-\t\t\tobjectKeys = prop.keys();\n-\t\t\twhile (objectKeys.hasMoreElements()) {\n-\t\t\t\tString key = (String) objectKeys.nextElement();\n-\t\t\t\tString value = prop.getProperty(key);\n-\t\t\t\thm.put(key, value);\n-\t\t\t}\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"StudyMetaDataUtil - getAppProperties() - ERROR \", e);\n-\t\t}\n-\t\tLOGGER.info(\"INFO: StudyMetaDataUtil - getAppProperties() :: ends\");\n-\t\treturn hm;\n-\t}\n-\n-\t/**\n-\t * Set failure response for the provided status, title and detail\n-\t * \n-\t * @author BTC\n-\t * @param status the response status\n-\t * @param title  the response title\n-\t * @param detail the response details\n-\t * @return {@link FailureResponse}\n-\t */\n-\tpublic static FailureResponse getFailureResponse(String status, String title, String detail) {\n-\t\tLOGGER.info(\"INFO: StudyMetaDataUtil - getFailureResponse() :: Starts\");\n-\t\tFailureResponse failureResponse = new FailureResponse();\n-\t\ttry {\n-\t\t\tfailureResponse.setResultType(StudyMetaDataConstants.FAILURE);\n-\t\t\tfailureResponse.getErrors().setStatus(status);\n-\t\t\tfailureResponse.getErrors().setTitle(title);\n-\t\t\tfailureResponse.getErrors().setDetail(detail);\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"ERROR: StudyMetaDataUtil - getFailureResponse() \", e);\n-\t\t}\n-\t\tLOGGER.info(\"INFO: StudyMetaDataUtil - getFailureResponse() :: Ends\");\n-\t\treturn failureResponse;\n-\t}\n-\n-\t/**\n-\t * Update response details for the provided status, title, detail and response\n-\t * \n-\t * @author BTC\n-\t * @param status   the response status\n-\t * @param title    the response title\n-\t * @param detail   the response details\n-\t * @param response {@link HttpServletResponse}\n-\t */\n-\tpublic static void getFailureResponse(String status, String title, String detail, HttpServletResponse response) {\n-\t\tLOGGER.info(\"INFO: StudyMetaDataUtil - getFailureResponse() :: Starts\");\n-\t\ttry {\n-\t\t\tresponse.setHeader(\"status\", status);\n-\t\t\tresponse.setHeader(\"title\", title);\n-\t\t\tresponse.setHeader(\"StatusMessage\", detail);\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"ERROR: StudyMetaDataUtil - getFailureResponse() \", e);\n-\t\t}\n-\t\tLOGGER.info(\"INFO: StudyMetaDataUtil - getFailureResponse() :: Ends\");\n-\t}\n-\n-\t/**\n-\t * Get number of days for the provided month and year\n-\t * \n-\t * @author BTC\n-\t * @param month the month value\n-\t * @param year  the year value\n-\t * @return {@link Integer}\n-\t */\n-\tpublic static int noOfDaysForMonthYear(int month, int year) {\n-\t\tLOGGER.info(\"INFO: StudyMetaDataUtil - noOfDaysForMonthYear() :: Starts\");\n-\t\tint numDays = 30;\n-\t\ttry {\n-\t\t\tCalendar calendar = Calendar.getInstance();\n-\t\t\tcalendar.set(Calendar.YEAR, year);\n-\t\t\tcalendar.set(Calendar.MONTH, month - 1);\n-\t\t\tnumDays = calendar.getActualMaximum(Calendar.DATE);\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"ERROR: StudyMetaDataUtil - noOfDaysForMonthYear() \" + e);\n-\t\t}\n-\t\tLOGGER.info(\"INFO: StudyMetaDataUtil - noOfDaysForMonthYear() :: Ends\");\n-\t\treturn numDays;\n-\t}\n-\n-\t/**\n-\t * Get number of days between the provided start and end date's\n-\t * \n-\t * @author BTC\n-\t * @param startDate the start date\n-\t * @param endDate   the end date\n-\t * @return {@link Integer}\n-\t */\n-\tpublic static int noOfDaysBetweenTwoDates(String startDate, String endDate) {\n-\t\tLOGGER.info(\"INFO: StudyMetaDataUtil - noOfDaysBetweenTwoDates() :: Starts\");\n-\t\tint daysdiff = 0;\n-\t\ttry {\n-\t\t\tlong diff = StudyMetaDataConstants.SDF_DATE.parse(endDate).getTime()\n-\t\t\t\t\t- StudyMetaDataConstants.SDF_DATE.parse(startDate).getTime();\n-\t\t\tlong diffDays = diff / (24 * 60 * 60 * 1000) + 1;\n-\t\t\tdaysdiff = (int) diffDays;\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"ERROR: StudyMetaDataUtil - noOfDaysBetweenTwoDates() \" + e);\n-\t\t}\n-\t\tLOGGER.info(\"INFO: StudyMetaDataUtil - noOfDaysBetweenTwoDates() :: Ends\");\n-\t\treturn daysdiff;\n-\t}\n-\n-\t/**\n-\t * Get server current date\n-\t * \n-\t * @author BTC\n-\t * @return current date\n-\t */\n-\tpublic static String getCurrentDate() {\n-\t\tLOGGER.info(\"INFO: StudyMetaDataUtil - getCurrentDate() :: Starts\");\n-\t\tString dateNow = \"\";\n-\t\ttry {\n-\t\t\tCalendar currentDate = Calendar.getInstance();\n-\t\t\tSimpleDateFormat formatter = new SimpleDateFormat(\"yyyy-MM-dd\");\n-\t\t\tformatter.setTimeZone(TimeZone.getTimeZone(\"America/New_York\"));\n-\t\t\tdateNow = formatter.format(currentDate.getTime());\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"ERROR: StudyMetaDataUtil - getCurrentDate() \" + e);\n-\t\t}\n-\t\tLOGGER.info(\"INFO: StudyMetaDataUtil - getCurrentDate() :: Ends\");\n-\t\treturn dateNow;\n-\t}\n-\n-\t/**\n-\t * Get server current date time\n-\t * \n-\t * @author BTC\n-\t * @return current date time\n-\t */\n-\tpublic static String getCurrentDateTime() {\n-\t\tLOGGER.info(\"StudyMetaDataUtil: getCurrentDateTime() - Starts \");\n-\t\tString getToday = \"\";\n-\t\ttry {\n-\t\t\tDate today = new Date();\n-\t\t\tSimpleDateFormat formatter = new SimpleDateFormat(StudyMetaDataConstants.SDF_DATE_TIME_PATTERN);\n-\t\t\tformatter.setTimeZone(TimeZone.getTimeZone(\"America/New_York\"));\n-\t\t\tgetToday = formatter.format(today.getTime());\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"StudyMetaDataUtil - getCurrentDateTime() - ERROR \", e);\n-\t\t}\n-\t\tLOGGER.info(\"StudyMetaDataUtil: getCurrentDateTime() - Ends \");\n-\t\treturn getToday;\n-\t}\n-\n-\t/**\n-\t * Get formatted date for the provided date, input and output format\n-\t * \n-\t * @author BTC\n-\t * @param inputDate    the input date\n-\t * @param inputFormat  the input format\n-\t * @param outputFormat the output format\n-\t * @return the formatted date\n-\t */\n-\tpublic static String getFormattedDate1(String inputDate, String inputFormat, String outputFormat) {\n-\t\tLOGGER.info(\"StudyMetaDataUtil: getFormattedDate1() - Starts \");\n-\t\tString finalDate = \"\";\n-\t\tjava.sql.Date formattedDate = null;\n-\t\tif (inputDate != null && !\"\".equals(inputDate) && !\"null\".equalsIgnoreCase(inputDate)) {\n-\t\t\ttry {\n-\t\t\t\tSimpleDateFormat formatter = new SimpleDateFormat(inputFormat);\n-\t\t\t\tformattedDate = new java.sql.Date(formatter.parse(inputDate).getTime());\n-\n-\t\t\t\tformatter = new SimpleDateFormat(outputFormat);\n-\t\t\t\tfinalDate = formatter.format(formattedDate);\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tLOGGER.error(\"StudyMetaDataUtil: getFormattedDate1() - ERROR\", e);\n-\t\t\t}\n-\t\t}\n-\t\tLOGGER.info(\"StudyMetaDataUtil: getFormattedDate1() - Ends \");\n-\t\treturn finalDate;\n-\t}\n-\n-\t/**\n-\t * Get time difference in days hours minutes between two dates\n-\t * \n-\t * @author BTC\n-\t * @param dateOne the date1\n-\t * @param dateTwo the date2\n-\t * @return {@link String}\n-\t */\n-\tpublic static String getTimeDiffInDaysHoursMins(Date dateOne, Date dateTwo) {\n-\t\tLOGGER.info(\"StudyMetaDataUtil: getTimeDiffInDaysHoursMins() - Starts \");\n-\t\tString diff = \"\";\n-\t\ttry {\n-\t\t\tlong timeDiff = Math.abs(dateOne.getTime() - dateTwo.getTime());\n-\t\t\tdiff = String.format(\"%d Day(s) %d hour(s) %d min(s)\", TimeUnit.MILLISECONDS.toDays(timeDiff),\n-\t\t\t\t\tTimeUnit.MILLISECONDS.toHours(timeDiff)\n-\t\t\t\t\t\t\t- TimeUnit.DAYS.toHours(TimeUnit.MILLISECONDS.toDays(timeDiff)),\n-\t\t\t\t\tTimeUnit.MILLISECONDS.toMinutes(timeDiff)\n-\t\t\t\t\t\t\t- TimeUnit.HOURS.toMinutes(TimeUnit.MILLISECONDS.toHours(timeDiff)));\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"StudyMetaDataUtil - getTimeDiffInDaysHoursMins() - ERROR \", e);\n-\t\t}\n-\t\tLOGGER.info(\"StudyMetaDataUtil: getTimeDiffInDaysHoursMins() - Ends \");\n-\t\treturn diff;\n-\t}\n-\n-\t/**\n-\t * Get time difference in days hours minutes between two dates\n-\t * \n-\t * @author BTC\n-\t * @param dateOne1\n-\t * @param dateTwo2\n-\t * @return {@link String}\n-\t */\n-\tpublic static String getTimeDiffInDaysHoursMins(String dateOne1, String dateTwo2) {\n-\t\tLOGGER.info(\"StudyMetaDataUtil: getTimeDiffInDaysHoursMins() - Starts \");\n-\t\tString diff = \"\";\n-\t\ttry {\n-\t\t\tDate dateOne = StudyMetaDataConstants.SDF_DATE_TIME.parse(dateOne1);\n-\t\t\tDate dateTwo = StudyMetaDataConstants.SDF_DATE_TIME.parse(dateTwo2);\n-\t\t\tlong timeDiff = Math.abs(dateOne.getTime() - dateTwo.getTime());\n-\t\t\tdiff = String.format(\"%d\", TimeUnit.MILLISECONDS.toMinutes(timeDiff));\n-\t\t} catch (ParseException e) {\n-\t\t\tLOGGER.error(\"StudyMetaDataUtil - getTimeDiffInDaysHoursMins() - ERROR \", e);\n-\t\t}\n-\t\tLOGGER.info(\"StudyMetaDataUtil: getTimeDiffInDaysHoursMins() - Ends \");\n-\t\treturn diff;\n-\t}\n-\n-\t/**\n-\t * Get encoded base64 string for the provided text\n-\t * \n-\t * @author BTC\n-\t * @param plainText\n-\t * @return {@link String}\n-\t */\n-\tpublic static String getEncodedStringByBase64(String plainText) {\n-\t\tLOGGER.info(\"StudyMetaDataUtil: getEncodedStringByBase64() - Starts \");\n-\t\tif (StringUtils.isEmpty(plainText)) {\n-\t\t\treturn \"\";\n-\t\t}\n-\t\ttry {\n-\t\t\tbyte[] bytesEncoded = Base64.encode(plainText.getBytes());\n-\t\t\treturn new String(bytesEncoded);\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"StudyMetaDataUtil - getEncodedStringByBase64() - ERROR \", e);\n-\n-\t\t}\n-\t\tLOGGER.info(\"StudyMetaDataUtil: getEncodedStringByBase64() - Ends \");\n-\t\treturn \"\";\n-\t}\n-\n-\t/**\n-\t * Get decoded base64 string for the provided text\n-\t * \n-\t * @author BTC\n-\t * @param encodedText\n-\t * @return {@link String}\n-\t */\n-\tpublic static String getDecodedStringByBase64(String encodedText) {\n-\t\tLOGGER.info(\"StudyMetaDataUtil: getDecodedStringByBase64() - Starts \");\n-\t\tif (StringUtils.isEmpty(encodedText)) {\n-\t\t\treturn \"\";\n-\t\t}\n-\t\ttry {\n-\t\t\tbyte[] valueDecoded = Base64.decode(encodedText);\n-\t\t\treturn new String(valueDecoded);\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"StudyMetaDataUtil - getDecodedStringByBase64() - ERROR \", e);\n-\t\t}\n-\t\tLOGGER.info(\"StudyMetaDataUtil: getDecodedStringByBase64() - Ends \");\n-\t\treturn \"\";\n-\n-\t}\n-\n-\t/**\n-\t * Get encrypted string for the provided input\n-\t * \n-\t * @author BTC\n-\t * @param input\n-\t * @return {@link String}\n-\t */\n-\tpublic static String getEncryptedString(String input) {\n-\t\tLOGGER.info(\"INFO: getEncryptedString :: Starts\");\n-\t\tStringBuilder sb = new StringBuilder();\n-\t\tString encryptValue = \"\";\n-\t\tif (StringUtils.isNotEmpty(input)) {\n-\t\t\tencryptValue = input + StudyMetaDataConstants.PASS_SALT;\n-\t\t\ttry {\n-\t\t\t\tMessageDigest messageDigest = MessageDigest.getInstance(\"SHA-512\");\n-\t\t\t\tmessageDigest.update(encryptValue.getBytes(\"UTF-8\"));\n-\t\t\t\tbyte[] digestBytes = messageDigest.digest();\n-\t\t\t\tString hex = null;\n-\t\t\t\tfor (int i = 0; i < 8; i++) {\n-\t\t\t\t\thex = Integer.toHexString(0xFF & digestBytes[i]);\n-\t\t\t\t\tif (hex.length() < 2)\n-\t\t\t\t\t\tsb.append(\"0\");\n-\t\t\t\t\tsb.append(hex);\n-\t\t\t\t}\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tLOGGER.error(\"ERROR: getEncryptedString \", e);\n-\t\t\t}\n-\t\t}\n-\t\tLOGGER.info(\"INFO: getEncryptedString :: Ends\");\n-\t\treturn sb.toString();\n-\t}\n-\n-\t/**\n-\t * Get formatted date for the provided date, input and output format\n-\t * \n-\t * @author BTC\n-\t * @param inputDate\n-\t * @param inputFormat\n-\t * @param outputFormat\n-\t * @return {@link String}\n-\t */\n-\tpublic static String getFormattedDate(String inputDate, String inputFormat, String outputFormat) {\n-\t\tLOGGER.info(\"StudyMetaDataUtil: getFormattedDate() - Starts \");\n-\t\tString finalDate = \"\";\n-\t\tjava.sql.Date formattedDate = null;\n-\t\tif (inputDate != null && !\"\".equals(inputDate) && !\"null\".equalsIgnoreCase(inputDate)) {\n-\t\t\ttry {\n-\t\t\t\tSimpleDateFormat formatter = new SimpleDateFormat(inputFormat);\n-\t\t\t\tformattedDate = new java.sql.Date(formatter.parse(inputDate).getTime());\n-\n-\t\t\t\tformatter = new SimpleDateFormat(outputFormat);\n-\t\t\t\tfinalDate = formatter.format(formattedDate);\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tLOGGER.error(\"ERROR: getFormattedDate \", e);\n-\t\t\t}\n-\t\t}\n-\t\tLOGGER.info(\"StudyMetaDataUtil: getFormattedDate() - Ends \");\n-\t\treturn finalDate;\n-\t}\n-\n-\t/**\n-\t * Get new date time for the provided date time and minutes\n-\t * \n-\t * @author BTC\n-\t * @param dtStr\n-\t * @param minutes\n-\t * @return {@link String}\n-\t */\n-\tpublic static String addMinutes(String dtStr, int minutes) {\n-\t\tLOGGER.info(\"StudyMetaDataUtil: addMinutes() - Starts \");\n-\t\tString newdateStr = \"\";\n-\t\ttry {\n-\t\t\tSimpleDateFormat date = new SimpleDateFormat(StudyMetaDataConstants.SDF_DATE_TIME_PATTERN);\n-\t\t\tDate dt = date.parse(dtStr);\n-\t\t\tCalendar cal = Calendar.getInstance();\n-\t\t\tcal.setTime(dt);\n-\t\t\tcal.add(Calendar.MINUTE, minutes);\n-\t\t\tDate newDate = cal.getTime();\n-\t\t\tnewdateStr = date.format(newDate);\n-\t\t} catch (ParseException e) {\n-\t\t\tLOGGER.error(\"StudyMetaDataUtil - addMinutes() - ERROR \", e);\n-\t\t}\n-\t\tLOGGER.info(\"StudyMetaDataUtil: addMinutes() - Ends \");\n-\t\treturn newdateStr;\n-\t}\n-\n-\t/**\n-\t * Get new date time for the provided date time and days\n-\t * \n-\t * @author BTC\n-\t * @param dtStr\n-\t * @param days\n-\t * @return {@link String}\n-\t */\n-\tpublic static String addDays(String dtStr, int days) {\n-\t\tLOGGER.info(\"StudyMetaDataUtil: addDays() - Starts \");\n-\t\tString newdateStr = \"\";\n-\t\ttry {\n-\t\t\tDate dt = StudyMetaDataConstants.SDF_DATE_TIME.parse(dtStr);\n-\t\t\tCalendar cal = Calendar.getInstance();\n-\t\t\tcal.setTime(dt);\n-\t\t\tcal.add(Calendar.DATE, days);\n-\t\t\tDate newDate = cal.getTime();\n-\t\t\tnewdateStr = StudyMetaDataConstants.SDF_DATE_TIME.format(newDate);\n-\t\t} catch (ParseException e) {\n-\t\t\tLOGGER.error(\"StudyMetaDataUtil - addDays() - ERROR \", e);\n-\t\t}\n-\t\tLOGGER.info(\"StudyMetaDataUtil: addDays() - Ends \");\n-\t\treturn newdateStr;\n-\t}\n-\n-\t/**\n-\t * Get new date time for the provided date time and months\n-\t * \n-\t * @author BTC\n-\t * @param dtStr\n-\t * @param months\n-\t * @return String\n-\t */\n-\tpublic static String addMonth(String dtStr, int months) {\n-\t\tLOGGER.info(\"StudyMetaDataUtil: addMonth() - Starts \");\n-\t\tString newdateStr = \"\";\n-\t\ttry {\n-\t\t\tDate dt = StudyMetaDataConstants.SDF_DATE.parse(dtStr);\n-\t\t\tCalendar cal = Calendar.getInstance();\n-\t\t\tcal.setTime(dt);\n-\t\t\tcal.add(Calendar.MONTH, months);\n-\t\t\tDate newDate = cal.getTime();\n-\t\t\tnewdateStr = StudyMetaDataConstants.SDF_DATE.format(newDate);\n-\t\t} catch (ParseException e) {\n-\t\t\tLOGGER.error(\"StudyMetaDataUtil - addMonth() - ERROR \", e);\n-\t\t}\n-\t\tLOGGER.info(\"StudyMetaDataUtil: addMonth() - Ends \");\n-\t\treturn newdateStr;\n-\n-\t}\n-\n-\t/**\n-\t * Get new date time for the provided date time and years\n-\t * \n-\t * @author BTC\n-\t * @param dtStr\n-\t * @param years\n-\t * @return {@link String}\n-\t */\n-\tpublic static String addYear(String dtStr, int years) {\n-\t\tLOGGER.info(\"StudyMetaDataUtil: addYear() - Starts \");\n-\t\tString newdateStr = \"\";\n-\t\ttry {\n-\t\t\tDate dt = StudyMetaDataConstants.SDF_DATE.parse(dtStr);\n-\t\t\tCalendar cal = Calendar.getInstance();\n-\t\t\tcal.setTime(dt);\n-\t\t\tcal.add(Calendar.YEAR, years);\n-\t\t\tDate newDate = cal.getTime();\n-\t\t\tnewdateStr = StudyMetaDataConstants.SDF_DATE.format(newDate);\n-\t\t} catch (ParseException e) {\n-\t\t\tLOGGER.error(\"StudyMetaDataUtil - addYear() - ERROR \", e);\n-\t\t}\n-\t\tLOGGER.info(\"StudyMetaDataUtil: addYear() - Ends \");\n-\t\treturn newdateStr;\n-\t}\n-\n-\t/**\n-\t * Get seconds for the provided date\n-\t * \n-\t * @author BTC\n-\t * @param getCurrentDate\n-\t * @return {@link Long}\n-\t */\n-\tpublic static Long getDateToSeconds(String getCurrentDate) {\n-\t\tLOGGER.info(\"StudyMetaDataUtil: getDateToSeconds() - Starts \");\n-\t\tLong getInSeconds = null;\n-\t\ttry {\n-\t\t\tDate dt = StudyMetaDataConstants.SDF_DATE.parse(getCurrentDate);\n-\t\t\tgetInSeconds = dt.getTime();\n-\t\t} catch (ParseException e) {\n-\t\t\tLOGGER.error(\"StudyMetaDataUtil - getDateToSeconds() - ERROR \", e);\n-\t\t}\n-\t\tLOGGER.info(\"StudyMetaDataUtil: getDateToSeconds() - Ends \");\n-\t\treturn getInSeconds;\n-\t}\n-\n-\t/**\n-\t * Get date time for the provided seconds and timezone\n-\t * \n-\t * @author BTC\n-\t * @param value\n-\t * @return String\n-\t */\n-\tpublic static String getSecondsToDate(String value) {\n-\t\tLOGGER.info(\"StudyMetaDataUtil: getSecondsToDate() - Starts \");\n-\t\tString dateText;\n-\t\tlong getLongValue = Long.parseLong(value);\n-\t\tDate date = new Date(getLongValue);\n-\t\tSimpleDateFormat df2 = new SimpleDateFormat(\"MM/dd/yyyy\");// yyyy-MM-dd\n-\t\tdf2.setTimeZone(TimeZone.getTimeZone(\"America/New_York\"));\n-\t\tdateText = df2.format(date);\n-\t\tLOGGER.info(\"StudyMetaDataUtil: getSecondsToDate() - Ends \");\n-\t\treturn dateText;\n-\t}\n-\n-\t/**\n-\t * Get date time for the provided date and timezone\n-\t * \n-\t * @author BTC\n-\t * @param value\n-\t * @return String\n-\t */\n-\tpublic static String getToDate(String value) {\n-\t\tLOGGER.info(\"StudyMetaDataUtil: getToDate() - Starts \");\n-\t\tString dateText;\n-\t\tSimpleDateFormat df2 = new SimpleDateFormat(\"yyyy-MM-dd\");// yyyy-MM-dd\n-\t\tdf2.setTimeZone(TimeZone.getTimeZone(\"America/New_York\"));\n-\t\tdateText = df2.format(value);\n-\t\tLOGGER.info(\"StudyMetaDataUtil: getToDate() - Ends \");\n-\t\treturn dateText;\n-\t}\n-\n-\t/**\n-\t * Get current date time for UTC timezone\n-\t * \n-\t * @author BTC\n-\t * @return {@link String}\n-\t */\n-\tpublic static String getCurrentDateTimeInUTC() {\n-\t\tLOGGER.info(\"StudyMetaDataUtil: getCurrentDateTimeInUTC() - Starts \");\n-\t\tString dateNow = null;\n-\t\tfinal SimpleDateFormat sdf = new SimpleDateFormat(StudyMetaDataConstants.SDF_DATE_TIME_PATTERN);\n-\t\tString timeZone = \"UTC\";\n-\t\ttry {\n-\t\t\tString strDate = new Date() + \"\";\n-\t\t\tif (strDate.indexOf(\"IST\") != -1) {\n-\t\t\t\ttimeZone = \"IST\";\n-\t\t\t}\n-\t\t\tsdf.setTimeZone(TimeZone.getTimeZone(timeZone));\n-\t\t\tdateNow = sdf.format(new Date());\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"StudyMetaDataUtil: getCurrentDateTimeInUTC(): ERROR \" + e);\n-\t\t}\n-\t\tLOGGER.info(\"StudyMetaDataUtil: getCurrentDateTimeInUTC() - Ends \");\n-\t\treturn dateNow;\n-\t}\n-\n-\t/**\n-\t * Get the platform type for the provided credentials and type\n-\t * \n-\t * @author BTC\n-\t * @param authCredentials the Basic Authorization\n-\t * @param type\n-\t * @return {@link String}\n-\t */\n-\tpublic static String platformType(String authCredentials, String type) {\n-\t\tLOGGER.info(\"INFO: StudyMetaDataUtil - platformType() - Starts\");\n-\t\tString bundleIdAndAppToken = null;\n-\t\tString platform = \"\";\n-\t\ttry {\n-\t\t\tif (StringUtils.isNotEmpty(authCredentials) && authCredentials.contains(\"Basic\")) {\n-\t\t\t\tfinal String encodedUserPassword = authCredentials.replaceFirst(\"Basic\" + \" \", \"\");\n-\t\t\t\tbyte[] decodedBytes = Base64.decode(encodedUserPassword);\n-\t\t\t\tbundleIdAndAppToken = new String(decodedBytes, \"UTF-8\");\n-\n-\t\t\t\tif (bundleIdAndAppToken.contains(\":\")) {\n-\t\t\t\t\tfinal StringTokenizer tokenizer = new StringTokenizer(bundleIdAndAppToken, \":\");\n-\t\t\t\t\tfinal String bundleId = tokenizer.nextToken();\n-\t\t\t\t\tfinal String appToken = tokenizer.nextToken();\n-\n-\t\t\t\t\tif (authPropMap.containsKey(bundleId) && authPropMap.containsKey(appToken)) {\n-\t\t\t\t\t\tString appBundleId = \"\";\n-\t\t\t\t\t\tString appTokenId = \"\";\n-\t\t\t\t\t\tfor (Map.Entry<String, String> map : authPropMap.entrySet()) {\n-\t\t\t\t\t\t\tif (map.getKey().equals(appToken)) {\n-\t\t\t\t\t\t\t\tappTokenId = map.getValue();\n-\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\tif (map.getKey().equals(bundleId)) {\n-\t\t\t\t\t\t\t\tappBundleId = map.getValue();\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\tif (StringUtils.isNotEmpty(appBundleId) && StringUtils.isNotEmpty(appTokenId)) {\n-\t\t\t\t\t\t\tfinal StringTokenizer authTokenizer = new StringTokenizer(appTokenId, \".\");\n-\t\t\t\t\t\t\tfinal String platformType = authTokenizer.nextToken();\n-\n-\t\t\t\t\t\t\tif (platformType.equals(StudyMetaDataConstants.STUDY_PLATFORM_ANDROID)) {\n-\t\t\t\t\t\t\t\tswitch (type) {\n-\t\t\t\t\t\t\t\tcase StudyMetaDataConstants.STUDY_AUTH_TYPE_PLATFORM:\n-\t\t\t\t\t\t\t\t\tplatform = StudyMetaDataConstants.STUDY_PLATFORM_TYPE_ANDROID;\n-\t\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t\t\tcase StudyMetaDataConstants.STUDY_AUTH_TYPE_OS:\n-\t\t\t\t\t\t\t\t\tplatform = StudyMetaDataConstants.STUDY_PLATFORM_ANDROID;\n-\t\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t\t\tcase StudyMetaDataConstants.STUDY_AUTH_TYPE_BUNDLE_ID:\n-\t\t\t\t\t\t\t\t\tplatform = bundleId;\n-\t\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tswitch (type) {\n-\t\t\t\t\t\t\t\tcase StudyMetaDataConstants.STUDY_AUTH_TYPE_PLATFORM:\n-\t\t\t\t\t\t\t\t\tplatform = StudyMetaDataConstants.STUDY_PLATFORM_TYPE_IOS;\n-\t\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t\t\tcase StudyMetaDataConstants.STUDY_AUTH_TYPE_OS:\n-\t\t\t\t\t\t\t\t\tplatform = StudyMetaDataConstants.STUDY_PLATFORM_IOS;\n-\t\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t\t\tcase StudyMetaDataConstants.STUDY_AUTH_TYPE_BUNDLE_ID:\n-\t\t\t\t\t\t\t\t\tplatform = bundleId;\n-\t\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"StudyMetaDataUtil - platformType() :: ERROR\", e);\n-\t\t}\n-\t\tLOGGER.info(\"INFO: StudyMetaDataUtil - platformType() - Ends\");\n-\t\treturn platform;\n-\t}\n-\n-\t/**\n-\t * Get properties defined in authorizationResource property file\n-\t * \n-\t * @author BTC\n-\t * @return HashMap\n-\t */\n-\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n-\tpublic static HashMap getAuthorizationProperties() {\n-\t\tLOGGER.info(\"INFO: StudyMetaDataUtil - getAuthorizationProperties() :: Starts\");\n-\t\tHashMap hashMap = new HashMap<String, String>();\n-\t\tResourceBundle rb = ResourceBundle.getBundle(\"authorizationResource\");\n-\t\tEnumeration<String> keys = rb.getKeys();\n-\t\twhile (keys.hasMoreElements()) {\n-\t\t\tString key = keys.nextElement();\n-\t\t\tString value = rb.getString(key);\n-\t\t\thashMap.put(key, value);\n-\t\t}\n-\t\tLOGGER.info(\"INFO: StudyMetaDataUtil - getAuthorizationProperties() :: Ends\");\n-\t\treturn hashMap;\n-\t}\n-\n-\t/**\n-\t * Get the day for the provided date\n-\t * \n-\t * @author BTC\n-\t * @param input\n-\t * @return String\n-\t */\n-\tpublic static String getDayByDate(String input) {\n-\t\tLOGGER.info(\"StudyMetaDataUtil: getDayByDate() - Starts \");\n-\t\tString actualDay = \"\";\n-\t\ttry {\n-\t\t\tif (StringUtils.isNotEmpty(input)) {\n-\t\t\t\tSimpleDateFormat newDateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n-\t\t\t\tDate MyDate = newDateFormat.parse(input);\n-\t\t\t\tnewDateFormat.applyPattern(StudyMetaDataConstants.SDF_DAY);\n-\t\t\t\tactualDay = newDateFormat.format(MyDate);\n-\t\t\t}\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"StudyMetaDataUtil - getDayByDate() - ERROR \", e);\n-\t\t}\n-\t\tLOGGER.info(\"StudyMetaDataUtil: getDayByDate() - Ends \");\n-\t\treturn actualDay;\n-\t}\n-\n-\t/**\n-\t * Get the new date by adding days for the provided date and days\n-\t * \n-\t * @author BTC\n-\t * @param input\n-\t * @param days\n-\t * @return String\n-\t */\n-\tpublic static String addDaysToDate(String input, int days) {\n-\t\tLOGGER.info(\"StudyMetaDataUtil: addDaysToDate() - Starts \");\n-\t\tString output = \"\";\n-\t\ttry {\n-\t\t\tDate dt = StudyMetaDataConstants.SDF_DATE.parse(input);\n-\t\t\tCalendar cal = Calendar.getInstance();\n-\t\t\tcal.setTime(dt);\n-\t\t\tcal.add(Calendar.DATE, days);\n-\t\t\tDate newDate = cal.getTime();\n-\t\t\toutput = StudyMetaDataConstants.SDF_DATE.format(newDate);\n-\t\t} catch (ParseException e) {\n-\t\t\tLOGGER.error(\"StudyMetaDataUtil - addDaysToDate() - ERROR \", e);\n-\t\t}\n-\t\tLOGGER.info(\"StudyMetaDataUtil: addDaysToDate() - Ends \");\n-\t\treturn output;\n-\t}\n-\n-\t/**\n-\t * Get the new date by adding weeks for the provided date and weeks\n-\t * \n-\t * @author BTC\n-\t * @param input\n-\t * @param weeks\n-\t * @return {@link String}\n-\t */\n-\tpublic static String addWeeksToDate(String input, int weeks) {\n-\t\tLOGGER.info(\"StudyMetaDataUtil: addWeeksToDate() - Starts \");\n-\t\tString output = \"\";\n-\t\ttry {\n-\t\t\tDate dt = StudyMetaDataConstants.SDF_DATE.parse(input);\n-\t\t\tCalendar cal = Calendar.getInstance();\n-\t\t\tcal.setTime(dt);\n-\t\t\tcal.add(Calendar.WEEK_OF_MONTH, weeks);\n-\t\t\tDate newDate = cal.getTime();\n-\t\t\toutput = StudyMetaDataConstants.SDF_DATE.format(newDate);\n-\t\t} catch (ParseException e) {\n-\t\t\tLOGGER.error(\"StudyMetaDataUtil - addWeeksToDate() - ERROR \", e);\n-\t\t}\n-\t\tLOGGER.info(\"StudyMetaDataUtil: addWeeksToDate() - Ends \");\n-\t\treturn output;\n-\t}\n-\n-\t/**\n-\t * Get the new date by adding months for the provided date and months\n-\t * \n-\t * @author BTC\n-\t * @param input\n-\t * @param months\n-\t * @return String\n-\t */\n-\tpublic static String addMonthsToDate(String input, int months) {\n-\t\tLOGGER.info(\"StudyMetaDataUtil: addMonthsToDate() - Starts \");\n-\t\tString output = \"\";\n-\t\ttry {\n-\t\t\tDate dt = StudyMetaDataConstants.SDF_DATE.parse(input);\n-\t\t\tCalendar cal = Calendar.getInstance();\n-\t\t\tcal.setTime(dt);\n-\t\t\tcal.add(Calendar.MONTH, months);\n-\t\t\tDate newDate = cal.getTime();\n-\t\t\toutput = StudyMetaDataConstants.SDF_DATE.format(newDate);\n-\t\t} catch (ParseException e) {\n-\t\t\tLOGGER.error(\"StudyMetaDataUtil - addMonthsToDate() - ERROR \", e);\n-\t\t}\n-\t\tLOGGER.info(\"StudyMetaDataUtil: addMonthsToDate() - Ends \");\n-\t\treturn output;\n-\t}\n-\n-\t/**\n-\t * Get formatted date for the provided date time, input and output format\n-\t * \n-\t * @author BTC\n-\t * @param input\n-\t * @param inputFormat\n-\t * @param outputFormat\n-\t * @return {@link String}\n-\t */\n-\tpublic static String getFormattedDateTimeZone(String input, String inputFormat, String outputFormat) {\n-\t\tLOGGER.info(\"StudyMetaDataUtil: getFormattedDateTimeZone() - Starts \");\n-\t\tString output = \"\";\n-\t\ttry {\n-\t\t\tif (StringUtils.isNotEmpty(input)) {\n-\t\t\t\tSimpleDateFormat inputSDF = new SimpleDateFormat(inputFormat);\n-\t\t\t\tDate inputDate = inputSDF.parse(input);\n-\t\t\t\tSimpleDateFormat outputSDF = new SimpleDateFormat(outputFormat);\n-\t\t\t\toutput = outputSDF.format(inputDate);\n-\t\t\t}\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"AuthenticationService - getFormattedDateTimeZone() :: ERROR\", e);\n-\t\t}\n-\t\tLOGGER.info(\"StudyMetaDataUtil: getFormattedDateTimeZone() - Ends \");\n-\t\treturn output;\n-\t}\n-\n-\t/**\n-\t * Get the new date by adding seconds for the provided date time and seconds\n-\t * \n-\t * @author BTC\n-\t * @param dtStr\n-\t * @param seconds\n-\t * @return {@link String}\n-\t */\n-\tpublic static String addSeconds(String dtStr, int seconds) {\n-\t\tLOGGER.info(\"StudyMetaDataUtil: addSeconds() - Starts \");\n-\t\tString newdateStr = \"\";\n-\t\ttry {\n-\t\t\tSimpleDateFormat date = new SimpleDateFormat(StudyMetaDataConstants.SDF_DATE_TIME_PATTERN);\n-\t\t\tDate dt = date.parse(dtStr);\n-\t\t\tCalendar cal = Calendar.getInstance();\n-\t\t\tcal.setTime(dt);\n-\t\t\tcal.add(Calendar.SECOND, seconds);\n-\t\t\tDate newDate = cal.getTime();\n-\t\t\tnewdateStr = date.format(newDate);\n-\t\t} catch (ParseException e) {\n-\t\t\tLOGGER.error(\"AuthenticationService - addSeconds() :: ERROR\", e);\n-\t\t}\n-\t\tLOGGER.info(\"StudyMetaDataUtil: addSeconds() - Ends \");\n-\t\treturn newdateStr;\n-\t}\n-\n-\t/**\n-\t * Append milliseconds for the image path\n-\t * \n-\t * @author BTC\n-\t * @return {@link String}\n-\t */\n-\tpublic static String getMilliSecondsForImagePath() {\n-\t\tLOGGER.info(\"StudyMetaDataUtil: getMilliSecondsForImagePath() - Starts \");\n-\t\tString milliSeconds;\n-\t\tCalendar cal = Calendar.getInstance();\n-\t\tmilliSeconds = \"?v=\" + cal.getTimeInMillis();\n-\t\tLOGGER.info(\"StudyMetaDataUtil: getMilliSecondsForImagePath() - Ends \");\n-\t\treturn milliSeconds;\n-\t}\n-\n-\t/**\n-\t * Get the platform bundle identifier for the provided authorization credentials\n-\t * \n-\t * @author BTC\n-\t * @param authCredentials the Basic Authorization\n-\t * @return {@link String}\n-\t */\n-\tpublic static String getBundleIdFromAuthorization(String authCredentials) {\n-\t\tLOGGER.info(\"INFO: StudyMetaDataUtil - getBundleIdFromAuthorization() - Starts\");\n-\t\tString bundleIdAndAppToken = null;\n-\t\tString appBundleId = \"\";\n-\t\ttry {\n-\t\t\tif (StringUtils.isNotEmpty(authCredentials) && authCredentials.contains(\"Basic\")) {\n-\t\t\t\tfinal String encodedUserPassword = authCredentials.replaceFirst(\"Basic\" + \" \", \"\");\n-\t\t\t\tbyte[] decodedBytes = Base64.decode(encodedUserPassword);\n-\t\t\t\tbundleIdAndAppToken = new String(decodedBytes, \"UTF-8\");\n-\t\t\t\tif (bundleIdAndAppToken.contains(\":\")) {\n-\t\t\t\t\tfinal StringTokenizer tokenizer = new StringTokenizer(bundleIdAndAppToken, \":\");\n-\t\t\t\t\tfinal String bundleId = tokenizer.nextToken();\n-\t\t\t\t\tfinal String appToken = tokenizer.nextToken();\n-\t\t\t\t\tif (authPropMap.containsKey(bundleId) && authPropMap.containsKey(appToken)) {\n-\t\t\t\t\t\tappBundleId = bundleId;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"StudyMetaDataUtil - getBundleIdFromAuthorization() :: ERROR\", e);\n-\t\t}\n-\t\tLOGGER.info(\"INFO: StudyMetaDataUtil - getBundleIdFromAuthorization() - Ends\");\n-\t\treturn appBundleId;\n-\t}\n-\n-\t/**\n-\t * Replace all single quotes with escape character for the provided text\n-\t * \n-\t * @author BTC\n-\t * @param activityId\n-\t * @return {@link String}\n-\t */\n-\tpublic static String replaceSingleQuotes(String activityId) {\n-\t\tLOGGER.info(\"INFO: StudyMetaDataUtil - replaceSingleQuotes() - Starts\");\n-\t\tString newActivityId = activityId;\n-\t\tif (activityId.indexOf(\"'\") > -1) {\n-\t\t\tnewActivityId = activityId.replaceAll(\"'\", \"''\");\n-\t\t}\n-\t\tLOGGER.info(\"INFO: StudyMetaDataUtil - replaceSingleQuotes() - Ends\");\n-\t\treturn newActivityId;\n-\t}\n-\n-\t// Get the day for the WeekName\n-\tpublic static int getDayName(String dayName) {\n-\t\tint day = 0;\n-\t\tswitch (dayName) {\n-\t\tcase \"Sunday\":\n-\t\t\tday = 1;\n-\t\t\tbreak;\n-\t\tcase \"Monday\":\n-\t\t\tday = 2;\n-\t\t\tbreak;\n-\t\tcase \"Tuesday\":\n-\t\t\tday = 3;\n-\t\t\tbreak;\n-\t\tcase \"Wednesday\":\n-\t\t\tday = 4;\n-\t\t\tbreak;\n-\t\tcase \"Thursday\":\n-\t\t\tday = 5;\n-\t\t\tbreak;\n-\t\tcase \"Friday\":\n-\t\t\tday = 6;\n-\t\t\tbreak;\n-\t\tcase \"Saturday\":\n-\t\t\tday = 7;\n-\t\t\tbreak;\n-\t\t}\n-\n-\t\treturn day;\n-\t}\n-\n-\tpublic static String saveResponsesActivityDocument(String jsonData, String activityId, String studyId,\n-\t\t\tString activityRunId, String participantId, String version) {\n-\t\tLOGGER.info(\"INFO: StudyMetaDataUtil - saveResponsesActivityDocument() :: starts\");\n-\t\tFile serverFile;\n-\t\tString consentFileName = null;\n-\t\ttry {\n-\t\t\tif (StringUtils.isNotEmpty(jsonData)) {\n-\t\t\t\t// byte[] bytes = Base64.decode(content.replaceAll(\"\\n\", \"\"));\n-\t\t\t\tbyte[] bytes = jsonData.getBytes();\n-\t\t\t\tString currentPath = System.getProperty((String) getAppProperties().get(\"fda.current.path\"));\n-\t\t\t\t// String currentPath =\n-\t\t\t\t// getAppProperties().get(\"fda.docs.responses.path\").toString();\n-\t\t\t\tString rootPath = currentPath.replace('\\\\', '/') + getAppProperties().get(\"fda.docs.responses.path\");\n-\t\t\t\t// String rootPath = currentPath.replace('\\\\', '/');\n-\t\t\t\tFile directory = new File(rootPath + File.separator);\n-\t\t\t\tif (!directory.exists()) {\n-\t\t\t\t\tdirectory.mkdirs();\n-\t\t\t\t}\n-\t\t\t\tconsentFileName = getStandardFileNameForResponses(activityId, studyId, activityRunId, participantId,\n-\t\t\t\t\t\tversion);\n-\t\t\t\tLOGGER.warn(\"WARN: StudyMetaDataUtil - saveResponsesActivityDocument() :: CONSENT FILE NAME ==> \"\n-\t\t\t\t\t\t+ consentFileName);\n-\t\t\t\tserverFile = new File(\"/var/www/html/dataResponses/data\" + File.separator + consentFileName);\n-\n-\t\t\t\tserverFile.setReadable(true);\n-\t\t\t\tserverFile.setExecutable(true);\n-\t\t\t\tserverFile.setWritable(true);\n-\n-\t\t\t\tserverFile.getAbsolutePath();\n-\n-\t\t\t\tsaveFileInPath(serverFile, bytes);\n-\t\t\t}\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"ERROR: StudyMetaDataUtil - saveResponsesActivityDocument()\", e);\n-\t\t}\n-\t\tLOGGER.info(\"INFO: StudyMetaDataUtil - saveResponsesActivityDocument() :: ends\");\n-\t\treturn consentFileName;\n-\t}\n-\n-\t/**\n-\t * Save the file in path\n-\t * \n-\t * @author Malay\n-\t * @param serverFile the connsent document file\n-\t * @param bytes      the byte array of file\n-\t */\n-\tpublic static void saveFileInPath(File serverFile, byte[] bytes) {\n-\t\tLOGGER.info(\"INFO: StudyMetaDataUtil - saveFileInPath() :: starts\");\n-\t\ttry (FileOutputStream fileOutputStream = new FileOutputStream(serverFile);\n-\t\t\t\tBufferedOutputStream stream = new BufferedOutputStream(fileOutputStream);) {\n-\t\t\tstream.write(bytes);\n-\t\t\tLOGGER.warn(\"WARN: StudyMetaDataUtil - saveFileInPath() :: CONSENT FILE PATH ==> \"\n-\t\t\t\t\t+ serverFile.getAbsolutePath());\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"ERROR: StudyMetaDataUtil - saveFileInPath()\", e);\n-\t\t}\n-\t\tLOGGER.info(\"INFO: StudyMetaDataUtil - saveFileInPath() :: ends\");\n-\t}\n-\n-\t/**\n-\t * Get the standard file name for the provided user and enrollment identifier\n-\t * \n-\t * @author Malay\n-\t * @param userId       the user identifier\n-\t * @param enrollmentId the enrollment identifier\n-\t * @return the standard file name\n-\t */\n-\tpublic static String getStandardFileNameForResponses(String activityId, String studyId, String activityRunId,\n-\t\t\tString participantId, String version) {\n-\t\tLOGGER.info(\"INFO: StudyMetaDataUtil - getStandardFileNameForResponses() :: starts\");\n-\t\tString fileName = null;\n-\t\ttry {\n-\t\t\tfileName = new StringBuilder().append(\"FDAHPHCI_\")\n-\t\t\t\t\t.append(new SimpleDateFormat(\"MMddyyyyHHmmss\").format(new Date())).append(\"_\").append(studyId)\n-\t\t\t\t\t.append(\"_\").append(activityId).append(\"_\").append(activityRunId).append(\"_\").append(participantId)\n-\t\t\t\t\t.append(\"_\").append(version).append(\".json\").toString();\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"ERROR: StudyMetaDataUtil - getStandardFileNameForResponses()\", e);\n-\t\t}\n-\t\tLOGGER.info(\"INFO: StudyMetaDataUtil - getStandardFileNameForResponses() :: ends\");\n-\t\treturn fileName;\n-\t}\n-\n-}\n\\ No newline at end of file\n+  private static final Logger LOGGER = Logger.getLogger(StudyMetaDataUtil.class.getName());\n+\n+  @SuppressWarnings(\"rawtypes\")\n+  protected static final HashMap configMap = StudyMetaDataUtil.getAppProperties();\n+\n+  @SuppressWarnings(\"rawtypes\")\n+  protected static final HashMap authConfigMap = StudyMetaDataUtil.getAuthorizationProperties();\n+\n+  @SuppressWarnings(\"unchecked\")\n+  private static final HashMap<String, String> authPropMap = StudyMetaDataUtil.authConfigMap;\n+\n+  @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+  public static HashMap getAppProperties() {\n+    LOGGER.info(\"INFO: StudyMetaDataUtil - getAppProperties() :: starts\");\n+    HashMap hm = new HashMap<String, String>();\n+    Enumeration<String> keys = null;\n+    Enumeration<Object> objectKeys = null;\n+    try {\n+      ResourceBundle rb = ResourceBundle.getBundle(\"messageResource\");\n+      keys = rb.getKeys();\n+      while (keys.hasMoreElements()) {\n+        String key = keys.nextElement();\n+        String value = rb.getString(key);\n+        hm.put(key, value);\n+      }\n+      ServletContext context = ServletContextHolder.getServletContext();\n+      Properties prop = new Properties();\n+      /*\n+       * prop.load(new\n+       * FileInputStream(context.getInitParameter(\"property_file_location_path\")));\n+       */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcaba86f1bb819598a16c9c91201e204176e414"}, "originalPosition": 1041}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTcxMzkwOnYy", "diffSide": "RIGHT", "path": "WCP-WS/src/main/java/com/hphc/mystudies/util/StudyMetaDataUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjoyMzoyOVrOF6aTxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjoyMzoyOVrOF6aTxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5Mjc3NQ==", "bodyText": "add Google copyright line?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r396792775", "createdAt": "2020-03-23T22:23:29Z", "author": {"login": "zohrehj"}, "path": "WCP-WS/src/main/java/com/hphc/mystudies/util/StudyMetaDataUtil.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright \ufffd 2017-2018 Harvard Pilgrim Health Care Institute (HPHCI) and its Contributors.\n+ * Copyright \u00a9 2017-2018 Harvard Pilgrim Health Care Institute (HPHCI) and its Contributors.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcaba86f1bb819598a16c9c91201e204176e414"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTcxNzY0OnYy", "diffSide": "RIGHT", "path": "WCP-WS/src/main/resources/application_local.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjoyNDo1NVrOF6aWAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjoyNDo1NVrOF6aWAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5MzM0NA==", "bodyText": "should this be left blank instead? we do not want people to send emails to these addresses.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r396793344", "createdAt": "2020-03-23T22:24:55Z", "author": {"login": "zohrehj"}, "path": "WCP-WS/src/main/resources/application_local.properties", "diffHunk": "@@ -0,0 +1,70 @@\n+#Email Configuration local\n+from.email.address=dummy-value\n+from.email.password=dummy-value\n+sslfactory.value=javax.net.ssl.SSLSocketFactory\n+smtp.portvalue=dummy-value\n+smtp.hostname=dummy-value\n+\n+#For server\n+fda.imgUploadPath=/webapps/fdaResources/\n+fda.currentPath=catalina.home\n+fda.imgDisplaydPath=/fdaResources/\n+\n+#For  server\n+acceptLinkMail =http://dummy-value/fdahpStudyDesigner/createPassword.do?securityToken=\n+login.url=http://dummy-value/fdahpStudyDesigner/login.do\n+signUp.url=http://dummy-value/fdahpStudyDesigner/signUp.do?securityToken=\n+\n+db.url=dummy-value/fda_hphc\n+db.username=dummy-value\n+db.password=dummy-value\n+\n+########################## Web Configuration Portal Web-Services (WCP WS) Configuration Details  STARTS ##########################\n+#DataBase Configuration\n+hibernate.connection.url=jdbc:mysql://dummy-value/fda_hphc?createDatabaseIfNotExist=true&autoReconnect=true&useSSL=false\n+hibernate.connection.driver_class=com.mysql.cj.jdbc.Driver\n+hibernate.connection.username=dummy-value\n+hibernate.connection.password=dummy-value\n+\n+fda.smd.catalinaPath=catalina.home\n+\n+#Study Image/Logo Path Local\n+fda.smd.study.thumbnailPath=http://dummy-value/fdaResources/studylogo/\n+fda.smd.study.pagePath=http://dummy-value/fdaResources/studypages/\n+fda.smd.resource.pdfPath=http://dummy-value/fdaResources/studyResources/\n+fda.smd.questionnaire.image=http://dummy-value/fdaResources/questionnaire/\n+fda.smd.gatewayResource.pdfPath=http://dummy-value/fdaResources/gatewayResource/App_Glossary.pdf\n+\n+\n+#Study Privacy and Policy, Terms of use Path\n+#fda.smd.pricaypolicy=http://192.168.0.50:8080/fdaResources/studyHtml/privacyAndPolicy.html\n+#fda.smd.terms=http://192.168.0.50:8080/fdaResources/studyHtml/terms.html\n+\n+fda.smd.pricaypolicy=https://www.fda.gov/AboutFDA/AboutThisWebsite/WebsitePolicies/#privacy\n+fda.smd.terms=https://www.fda.gov/AboutFDA/AboutThisWebsite/WebsitePolicies/\n+\n+\n+\n+#Reachout email\n+fda.smd.feedback=FDAMyStudiesFeedback@harvardpilgrim.org", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcaba86f1bb819598a16c9c91201e204176e414"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTcxODc4OnYy", "diffSide": "RIGHT", "path": "WCP-WS/src/main/resources/application_local.properties", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjoyNToyMVrOF6aWqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjoyNToyMVrOF6aWqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5MzUxNQ==", "bodyText": "please remove", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r396793515", "createdAt": "2020-03-23T22:25:21Z", "author": {"login": "zohrehj"}, "path": "WCP-WS/src/main/resources/application_local.properties", "diffHunk": "@@ -0,0 +1,70 @@\n+#Email Configuration local\n+from.email.address=dummy-value\n+from.email.password=dummy-value\n+sslfactory.value=javax.net.ssl.SSLSocketFactory\n+smtp.portvalue=dummy-value\n+smtp.hostname=dummy-value\n+\n+#For server\n+fda.imgUploadPath=/webapps/fdaResources/\n+fda.currentPath=catalina.home\n+fda.imgDisplaydPath=/fdaResources/\n+\n+#For  server\n+acceptLinkMail =http://dummy-value/fdahpStudyDesigner/createPassword.do?securityToken=\n+login.url=http://dummy-value/fdahpStudyDesigner/login.do\n+signUp.url=http://dummy-value/fdahpStudyDesigner/signUp.do?securityToken=\n+\n+db.url=dummy-value/fda_hphc\n+db.username=dummy-value\n+db.password=dummy-value\n+\n+########################## Web Configuration Portal Web-Services (WCP WS) Configuration Details  STARTS ##########################\n+#DataBase Configuration\n+hibernate.connection.url=jdbc:mysql://dummy-value/fda_hphc?createDatabaseIfNotExist=true&autoReconnect=true&useSSL=false\n+hibernate.connection.driver_class=com.mysql.cj.jdbc.Driver\n+hibernate.connection.username=dummy-value\n+hibernate.connection.password=dummy-value\n+\n+fda.smd.catalinaPath=catalina.home\n+\n+#Study Image/Logo Path Local\n+fda.smd.study.thumbnailPath=http://dummy-value/fdaResources/studylogo/\n+fda.smd.study.pagePath=http://dummy-value/fdaResources/studypages/\n+fda.smd.resource.pdfPath=http://dummy-value/fdaResources/studyResources/\n+fda.smd.questionnaire.image=http://dummy-value/fdaResources/questionnaire/\n+fda.smd.gatewayResource.pdfPath=http://dummy-value/fdaResources/gatewayResource/App_Glossary.pdf\n+\n+\n+#Study Privacy and Policy, Terms of use Path\n+#fda.smd.pricaypolicy=http://192.168.0.50:8080/fdaResources/studyHtml/privacyAndPolicy.html\n+#fda.smd.terms=http://192.168.0.50:8080/fdaResources/studyHtml/terms.html", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcaba86f1bb819598a16c9c91201e204176e414"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTcyMjg0OnYy", "diffSide": "RIGHT", "path": "WCP-WS/src/main/resources/application_local.properties", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjoyNjozOFrOF6aZCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjoyNjozOFrOF6aZCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5NDEyMw==", "bodyText": "please add a few lines explaining that these values should be replaced with deployment specific values.\nPlease do not use any real values here, unless the value is okay to use for a default deployment.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r396794123", "createdAt": "2020-03-23T22:26:38Z", "author": {"login": "zohrehj"}, "path": "WCP-WS/src/main/resources/application_local.properties", "diffHunk": "@@ -0,0 +1,70 @@\n+#Email Configuration local", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcaba86f1bb819598a16c9c91201e204176e414"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTcyNzcyOnYy", "diffSide": "RIGHT", "path": "WCP/fdahpStudyDesigner/src/main/java/com/fdahpstudydesigner/bean/StudyDetailsBean.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjoyODoyM1rOF6acCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDozOToyN1rOF7CL2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5NDg4OA==", "bodyText": "if this is a new file it should have Google copyright header", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r396794888", "createdAt": "2020-03-23T22:28:23Z", "author": {"login": "zohrehj"}, "path": "WCP/fdahpStudyDesigner/src/main/java/com/fdahpstudydesigner/bean/StudyDetailsBean.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.fdahpstudydesigner.bean;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcaba86f1bb819598a16c9c91201e204176e414"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ0NjEwNA==", "bodyText": "I am guessing it is not a new file then? based on the copyright, it should be an existing file that was modified? please confirm", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r397446104", "createdAt": "2020-03-24T20:39:27Z", "author": {"login": "zohrehj"}, "path": "WCP/fdahpStudyDesigner/src/main/java/com/fdahpstudydesigner/bean/StudyDetailsBean.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.fdahpstudydesigner.bean;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5NDg4OA=="}, "originalCommit": {"oid": "0fcaba86f1bb819598a16c9c91201e204176e414"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTczMzY0OnYy", "diffSide": "RIGHT", "path": "WCP/fdahpStudyDesigner/src/main/java/com/fdahpstudydesigner/bo/AnchorDateTypeBo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjozMDo1MlrOF6af1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjozMDo1MlrOF6af1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5NTg2MA==", "bodyText": "missing copyright header", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r396795860", "createdAt": "2020-03-23T22:30:52Z", "author": {"login": "zohrehj"}, "path": "WCP/fdahpStudyDesigner/src/main/java/com/fdahpstudydesigner/bo/AnchorDateTypeBo.java", "diffHunk": "@@ -1,92 +1,85 @@\n package com.fdahpstudydesigner.bo;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcaba86f1bb819598a16c9c91201e204176e414"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTczNDIxOnYy", "diffSide": "RIGHT", "path": "WCP/fdahpStudyDesigner/src/main/java/com/fdahpstudydesigner/bo/ActivetaskFormulaBo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjozMTowNVrOF6agJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjozMTowNVrOF6agJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5NTk0Mg==", "bodyText": "missing copyright header", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r396795942", "createdAt": "2020-03-23T22:31:05Z", "author": {"login": "zohrehj"}, "path": "WCP/fdahpStudyDesigner/src/main/java/com/fdahpstudydesigner/bo/ActivetaskFormulaBo.java", "diffHunk": "@@ -1,47 +1,41 @@\n package com.fdahpstudydesigner.bo;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcaba86f1bb819598a16c9c91201e204176e414"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTczNDgwOnYy", "diffSide": "RIGHT", "path": "WCP/fdahpStudyDesigner/src/main/java/com/fdahpstudydesigner/bo/ActiveTaskStepBo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjozMToxOVrOF6aghw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjozMToxOVrOF6aghw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5NjAzOQ==", "bodyText": "missing copyright header", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r396796039", "createdAt": "2020-03-23T22:31:19Z", "author": {"login": "zohrehj"}, "path": "WCP/fdahpStudyDesigner/src/main/java/com/fdahpstudydesigner/bo/ActiveTaskStepBo.java", "diffHunk": "@@ -1,7 +1,6 @@\n package com.fdahpstudydesigner.bo;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcaba86f1bb819598a16c9c91201e204176e414"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTczNTMyOnYy", "diffSide": "RIGHT", "path": "WCP/fdahpStudyDesigner/src/main/java/com/fdahpstudydesigner/bo/ActiveTaskMasterAttributeBo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjozMTozMFrOF6ag2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjozMTozMFrOF6ag2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5NjEyMA==", "bodyText": "missing copyright header", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r396796120", "createdAt": "2020-03-23T22:31:30Z", "author": {"login": "zohrehj"}, "path": "WCP/fdahpStudyDesigner/src/main/java/com/fdahpstudydesigner/bo/ActiveTaskMasterAttributeBo.java", "diffHunk": "@@ -1,115 +1,109 @@\n package com.fdahpstudydesigner.bo;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcaba86f1bb819598a16c9c91201e204176e414"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTczNTY3OnYy", "diffSide": "RIGHT", "path": "WCP/fdahpStudyDesigner/src/main/java/com/fdahpstudydesigner/bo/ActiveTaskListBo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjozMTo0MFrOF6ahCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjozMTo0MFrOF6ahCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5NjE3MQ==", "bodyText": "missing copyright header", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r396796171", "createdAt": "2020-03-23T22:31:40Z", "author": {"login": "zohrehj"}, "path": "WCP/fdahpStudyDesigner/src/main/java/com/fdahpstudydesigner/bo/ActiveTaskListBo.java", "diffHunk": "@@ -1,7 +1,6 @@\n package com.fdahpstudydesigner.bo;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcaba86f1bb819598a16c9c91201e204176e414"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTc5MTk1OnYy", "diffSide": "RIGHT", "path": "auth-server-ws/.mvn/wrapper/MavenWrapperDownloader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjo1MzoyNVrOF6bDuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjo1MzoyNVrOF6bDuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgwNTA0OA==", "bodyText": "should this be Google copyright instead?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r396805048", "createdAt": "2020-03-23T22:53:25Z", "author": {"login": "zohrehj"}, "path": "auth-server-ws/.mvn/wrapper/MavenWrapperDownloader.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2012-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcaba86f1bb819598a16c9c91201e204176e414"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTc5Njc1OnYy", "diffSide": "RIGHT", "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/SecurityWithSpringBootRestWithDatabaseApplication.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjo1NDoyN1rOF6bGtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjo1NDoyN1rOF6bGtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgwNTgxMw==", "bodyText": "this is the right text, but the format and line break is incorrect", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r396805813", "createdAt": "2020-03-23T22:54:27Z", "author": {"login": "zohrehj"}, "path": "auth-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/SecurityWithSpringBootRestWithDatabaseApplication.java", "diffHunk": "@@ -0,0 +1,19 @@\n+/*\n+ *Copyright 2020 Google LLC\n+ *\n+ *Use of this source code is governed by an MIT-style license that can be found in the LICENSE file\n+ *or at https://opensource.org/licenses/MIT.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcaba86f1bb819598a16c9c91201e204176e414"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTgzMzA2OnYy", "diffSide": "RIGHT", "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/ParticipantIdController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMzowOTozMVrOF6bcTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNToyNzo0N1rOF61vTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgxMTM0Mw==", "bodyText": "where does acitivityLog gets stored?\nplease do not log partipantId or clientID anywhere outside of the database.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r396811343", "createdAt": "2020-03-23T23:09:31Z", "author": {"login": "zohrehj"}, "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/ParticipantIdController.java", "diffHunk": "@@ -53,6 +59,14 @@\n       participantBo.setStudyId(enrollmentTokenIdentifierBean.getCustomStudyId());\n       participantBo.setCreatedBy(applicationId);\n       String particpantUniqueIdentifier = participantService.saveParticipant(participantBo);\n+      commonService.createActivityLog(\n+          null,\n+          \"Participant Id generated successfully\",\n+          \"Participant Id generated successfully for partcipant \"\n+              + particpantUniqueIdentifier", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcaba86f1bb819598a16c9c91201e204176e414"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE4MTI4Mw==", "bodyText": "The method -  commonService.createActivityLog() - calls the audit log functionality and is logging these to the audit log table in the database.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r397181283", "createdAt": "2020-03-24T14:10:31Z", "author": {"login": "ranjanirao20"}, "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/ParticipantIdController.java", "diffHunk": "@@ -53,6 +59,14 @@\n       participantBo.setStudyId(enrollmentTokenIdentifierBean.getCustomStudyId());\n       participantBo.setCreatedBy(applicationId);\n       String particpantUniqueIdentifier = participantService.saveParticipant(participantBo);\n+      commonService.createActivityLog(\n+          null,\n+          \"Participant Id generated successfully\",\n+          \"Participant Id generated successfully for partcipant \"\n+              + particpantUniqueIdentifier", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgxMTM0Mw=="}, "originalCommit": {"oid": "0fcaba86f1bb819598a16c9c91201e204176e414"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0MjE4OA==", "bodyText": "that makes sense, thank you for clarifying", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r397242188", "createdAt": "2020-03-24T15:27:47Z", "author": {"login": "zohrehj"}, "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/ParticipantIdController.java", "diffHunk": "@@ -53,6 +59,14 @@\n       participantBo.setStudyId(enrollmentTokenIdentifierBean.getCustomStudyId());\n       participantBo.setCreatedBy(applicationId);\n       String particpantUniqueIdentifier = participantService.saveParticipant(participantBo);\n+      commonService.createActivityLog(\n+          null,\n+          \"Participant Id generated successfully\",\n+          \"Participant Id generated successfully for partcipant \"\n+              + particpantUniqueIdentifier", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgxMTM0Mw=="}, "originalCommit": {"oid": "0fcaba86f1bb819598a16c9c91201e204176e414"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzczNTIwOnYy", "diffSide": "RIGHT", "path": "WCP-WS/src/main/java/com/hphc/mystudies/dao/AppMetaDataDao.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDozNTowOFrOF7CCgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDozNTowOFrOF7CCgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ0MzcxMw==", "bodyText": "missing copyright header", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r397443713", "createdAt": "2020-03-24T20:35:08Z", "author": {"login": "zohrehj"}, "path": "WCP-WS/src/main/java/com/hphc/mystudies/dao/AppMetaDataDao.java", "diffHunk": "@@ -55,7 +55,6 @@\n import com.hphc.mystudies.util.StudyMetaDataEnum;\n import com.hphc.mystudies.util.StudyMetaDataUtil;\n \n-\n public class AppMetaDataDao {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fddf9cecd9fcc8ffe2986847d20a8a59427b1f3"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Mzc0MDUyOnYy", "diffSide": "RIGHT", "path": "WCP/fdahpStudyDesigner/src/main/java/com/fdahpstudydesigner/bean/ActiveStatisticsBean.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDozNjo0NFrOF7CFxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDozNjo0NFrOF7CFxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ0NDU0OA==", "bodyText": "nit: copyright symbol is corrupted", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r397444548", "createdAt": "2020-03-24T20:36:44Z", "author": {"login": "zohrehj"}, "path": "WCP/fdahpStudyDesigner/src/main/java/com/fdahpstudydesigner/bean/ActiveStatisticsBean.java", "diffHunk": "@@ -1,3 +1,26 @@\n+/*\n+ * Copyright \u00c2\u00a9 2017-2018 Harvard Pilgrim Health Care Institute (HPHCI) and its Contributors.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fddf9cecd9fcc8ffe2986847d20a8a59427b1f3"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Mzc0MTMyOnYy", "diffSide": "RIGHT", "path": "WCP/fdahpStudyDesigner/src/main/java/com/fdahpstudydesigner/bean/DynamicBean.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDozNjo1OVrOF7CGXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDozNjo1OVrOF7CGXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ0NDcwMA==", "bodyText": "same here", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r397444700", "createdAt": "2020-03-24T20:36:59Z", "author": {"login": "zohrehj"}, "path": "WCP/fdahpStudyDesigner/src/main/java/com/fdahpstudydesigner/bean/DynamicBean.java", "diffHunk": "@@ -1,3 +1,26 @@\n+/*\n+ * Copyright \u00c2\u00a9 2017-2018 Harvard Pilgrim Health Care Institute (HPHCI) and its Contributors.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fddf9cecd9fcc8ffe2986847d20a8a59427b1f3"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Mzc0NDU4OnYy", "diffSide": "RIGHT", "path": "WCP/fdahpStudyDesigner/src/main/java/com/fdahpstudydesigner/bean/StudyDetailsBean.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDozODowMVrOF7CIiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDozODowMVrOF7CIiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ0NTI1Ng==", "bodyText": "copyright symbol is not showing up correctly in any of the recently added copyright headers", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r397445256", "createdAt": "2020-03-24T20:38:01Z", "author": {"login": "zohrehj"}, "path": "WCP/fdahpStudyDesigner/src/main/java/com/fdahpstudydesigner/bean/StudyDetailsBean.java", "diffHunk": "@@ -1,3 +1,25 @@\n+/*\n+ * Copyright \ufffd 2017-2018 Harvard Pilgrim Health Care Institute (HPHCI) and its Contributors.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fddf9cecd9fcc8ffe2986847d20a8a59427b1f3"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzkwMTU5OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/UserEnrollmentTokenMgmtServiceWsApplication.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMToyMzo1NlrOF7Do-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMToyMzo1NlrOF7Do-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2OTk0Nw==", "bodyText": "missing Google copyright", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r397469947", "createdAt": "2020-03-24T21:23:56Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/UserEnrollmentTokenMgmtServiceWsApplication.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package com.google.cloud.healthcare.fdamystudies;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODM3MzM5OnYy", "diffSide": "RIGHT", "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/FdaMystudiesResponseServerApplication.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMjo1NjoxNVrOF4tI9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDozMDoyOFrOF6y9xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAwNDE1MA==", "bodyText": "please don't use these lines above and beyond the google license", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395004150", "createdAt": "2020-03-19T12:56:15Z", "author": {"login": "zohrehj"}, "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/FdaMystudiesResponseServerApplication.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/**\n+ * ***************************************************************************** Copyright 2020", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7064c5438adbea0bf49bac4712489b11dc84864e"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAwNDU1Nw==", "bodyText": "license should match google license exactly, please do not modify the code or add formatting like the  tag below.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395004557", "createdAt": "2020-03-19T12:56:56Z", "author": {"login": "zohrehj"}, "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/FdaMystudiesResponseServerApplication.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/**\n+ * ***************************************************************************** Copyright 2020", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAwNDE1MA=="}, "originalCommit": {"oid": "7064c5438adbea0bf49bac4712489b11dc84864e"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE5Njc0Mw==", "bodyText": "Fixed in last PR", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r397196743", "createdAt": "2020-03-24T14:30:28Z", "author": {"login": "ranjanirao20"}, "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/FdaMystudiesResponseServerApplication.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/**\n+ * ***************************************************************************** Copyright 2020", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAwNDE1MA=="}, "originalCommit": {"oid": "7064c5438adbea0bf49bac4712489b11dc84864e"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODM4OTg3OnYy", "diffSide": "RIGHT", "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/bean/ActiveTaskActivityStructureBean.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzowMDo0M1rOF4tTSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDozMTowNlrOF6y_uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAwNjc5Mw==", "bodyText": "multiple licenses. Also not matching specified license. Should be:\n/**\n* Copyright 2020 Google LLC\n*\n* Use of this source code is governed by an MIT-style\n* license that can be found in the LICENSE file or at\n* https://opensource.org/licenses/MIT.\n*/\n\nplease do not change in any way.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395006793", "createdAt": "2020-03-19T13:00:43Z", "author": {"login": "zohrehj"}, "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/bean/ActiveTaskActivityStructureBean.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/**\n+ * ***************************************************************************** Copyright 2020\n+ * Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * ****************************************************************************\n+ */\n+/**\n+ * ***************************************************************************** Copyright 2020\n+ * Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * ****************************************************************************\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7064c5438adbea0bf49bac4712489b11dc84864e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE5NzI0MQ==", "bodyText": "Fixed in last PR", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r397197241", "createdAt": "2020-03-24T14:31:06Z", "author": {"login": "ranjanirao20"}, "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/bean/ActiveTaskActivityStructureBean.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/**\n+ * ***************************************************************************** Copyright 2020\n+ * Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * ****************************************************************************\n+ */\n+/**\n+ * ***************************************************************************** Copyright 2020\n+ * Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * ****************************************************************************\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAwNjc5Mw=="}, "originalCommit": {"oid": "7064c5438adbea0bf49bac4712489b11dc84864e"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODM5MTkxOnYy", "diffSide": "RIGHT", "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/bean/ActivitiesRequestBean.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzowMToxNlrOF4tUgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzowMToxNlrOF4tUgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAwNzEwNg==", "bodyText": "missing google license", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395007106", "createdAt": "2020-03-19T13:01:16Z", "author": {"login": "zohrehj"}, "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/bean/ActivitiesRequestBean.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.google.cloud.healthcare.fdamystudies.bean;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7064c5438adbea0bf49bac4712489b11dc84864e"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODQwMzA3OnYy", "diffSide": "RIGHT", "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/ProcessActivityResponseController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzowNDoyOVrOF4tbtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzowNDoyOVrOF4tbtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAwODk1MA==", "bodyText": "We don't want to log PII", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395008950", "createdAt": "2020-03-19T13:04:29Z", "author": {"login": "zohrehj"}, "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/ProcessActivityResponseController.java", "diffHunk": "@@ -0,0 +1,435 @@\n+/**\n+ * ***************************************************************************** Copyright 2020\n+ * Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * ****************************************************************************\n+ */\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.RestController;\n+import com.google.cloud.healthcare.fdamystudies.bean.ActivityResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ActivityStateRequestBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ParticipantActivityBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ParticipantStudyInformation;\n+import com.google.cloud.healthcare.fdamystudies.bean.QuestionnaireActivityStructureBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StoredResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyActivityMetadataRequestBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.SuccessResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantBo;\n+import com.google.cloud.healthcare.fdamystudies.service.ActivityResponseProcessorService;\n+import com.google.cloud.healthcare.fdamystudies.service.ParticipantActivityStateResponseService;\n+import com.google.cloud.healthcare.fdamystudies.service.ParticipantService;\n+import com.google.cloud.healthcare.fdamystudies.service.ParticipantStudyInfoService;\n+import com.google.cloud.healthcare.fdamystudies.service.StudyMetadataService;\n+import com.google.cloud.healthcare.fdamystudies.utils.AppConstants;\n+import com.google.cloud.healthcare.fdamystudies.utils.AppUtil;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@RestController\n+public class ProcessActivityResponseController {\n+  @Autowired private ParticipantService participantService;\n+  @Autowired private StudyMetadataService studyMetadataService;\n+  @Autowired private ParticipantStudyInfoService partStudyInfoService;\n+\n+  @Autowired private ActivityResponseProcessorService activityResponseProcessorService;\n+\n+  @Autowired\n+  private ParticipantActivityStateResponseService participantActivityStateResponseService;\n+\n+  private static final Logger logger =\n+      LoggerFactory.getLogger(ProcessActivityResponseController.class);\n+\n+  @PostMapping(\"/participant/process-response\")\n+  public ResponseEntity<?> processActivityResponseForParticipant(\n+      @RequestBody ActivityResponseBean questionnaireActivityResponseBean) {\n+    String orgId = null;\n+    String applicationId = null;\n+    String studyId = null;\n+    String activityId = null;\n+    String activityVersion = null;\n+    String participantId = null;\n+    String secureEnrollmentToken = null;\n+    boolean savedResponseData = false;\n+    try {\n+      orgId = questionnaireActivityResponseBean.getOrgId();\n+      applicationId = questionnaireActivityResponseBean.getApplicationId();\n+      studyId = questionnaireActivityResponseBean.getMetadata().getStudyId();\n+      activityId = questionnaireActivityResponseBean.getMetadata().getActivityId();\n+      activityVersion = questionnaireActivityResponseBean.getMetadata().getVersion();\n+      participantId = questionnaireActivityResponseBean.getParticipantId();\n+      secureEnrollmentToken = questionnaireActivityResponseBean.getTokenIdentifier();\n+      logger.info(\n+          \"Input values are :\\n Study Id: \"\n+              + studyId\n+              + \"\\n Activity Id: \"\n+              + activityId\n+              + \"\\n Activity Version: \"\n+              + activityVersion\n+              + \"\\n Particpant Id: \"\n+              + participantId);\n+      if (StringUtils.isBlank(orgId)\n+          || StringUtils.isBlank(applicationId)\n+          || StringUtils.isBlank(secureEnrollmentToken)\n+          || StringUtils.isBlank(studyId)\n+          || StringUtils.isBlank(activityId)\n+          || StringUtils.isBlank(activityVersion)) {\n+        logger.error(\n+            \"Input values are :\\n Study Id: \"\n+                + studyId\n+                + \"\\n Activity Id: \"\n+                + activityId\n+                + \"\\n Activity Version: \"\n+                + activityVersion);\n+        ErrorBean errorBean =\n+            AppUtil.dynamicResponse(\n+                ErrorCode.EC_701.code(),\n+                ErrorCode.EC_701.errorMessage(),\n+                AppConstants.ERROR_STR,\n+                ErrorCode.EC_701.errorMessage());\n+        return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n+      }\n+      // Check if participant is valid\n+      ParticipantBo participantBo = new ParticipantBo();\n+      participantBo.setTokenIdentifier(secureEnrollmentToken);\n+      participantBo.setParticipantIdentifier(participantId);\n+\n+      if (participantService.isValidParticipant(participantBo)) {\n+\n+        // Get ActivityMetadata from the WCP - we map the metadata information to the activity\n+        // response information to come up with a consolidated response object\n+        StudyActivityMetadataRequestBean studyActivityMetadataRequestBean =\n+            new StudyActivityMetadataRequestBean();\n+        studyActivityMetadataRequestBean.setStudyId(studyId);\n+        studyActivityMetadataRequestBean.setActivityId(activityId);\n+        studyActivityMetadataRequestBean.setActivityVersion(activityVersion);\n+        QuestionnaireActivityStructureBean activityMetadatFromWCP =\n+            studyMetadataService.getStudyActivityMetadata(\n+                orgId, applicationId, studyActivityMetadataRequestBean);\n+        if (activityMetadatFromWCP == null) {\n+          logger.error(\n+              \"Input values are :\\n Study Id: \"\n+                  + studyId\n+                  + \"\\n Activity Id: \"\n+                  + activityId\n+                  + \"\\n Activity Version: \"\n+                  + activityVersion);\n+          ErrorBean errorBean =\n+              AppUtil.dynamicResponse(\n+                  ErrorCode.EC_705.code(),\n+                  ErrorCode.EC_705.errorMessage(),\n+                  AppConstants.ERROR_STR,\n+                  ErrorCode.EC_705.errorMessage());\n+          return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n+        }\n+        // Get ParticipantStudyInfo from Registration Server\n+        ParticipantStudyInformation partStudyInfo =\n+            partStudyInfoService.getParticipantStudyInfo(\n+                orgId, applicationId, studyId, participantId);\n+        if (partStudyInfo == null) {\n+          logger.error(\n+              \"Input values are :\\n Study Id: \"\n+                  + studyId\n+                  + \"\\n participantId Id: \"\n+                  + participantId);\n+          ErrorBean errorBean =\n+              AppUtil.dynamicResponse(\n+                  ErrorCode.EC_715.code(),\n+                  ErrorCode.EC_715.errorMessage(),\n+                  AppConstants.ERROR_STR,\n+                  ErrorCode.EC_715.errorMessage());\n+          return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n+        }\n+        Boolean sharingConsent =\n+            (StringUtils.isBlank(partStudyInfo.getSharing())\n+                && partStudyInfo.getSharing().equalsIgnoreCase(AppConstants.TRUE_STR));\n+        questionnaireActivityResponseBean.setSharingConsent(sharingConsent);\n+        boolean withdrawalStatus = !StringUtils.isBlank(partStudyInfo.getWithdrawal());\n+        if (withdrawalStatus) {\n+          activityResponseProcessorService.saveActivityResponseDataForParticipant(\n+              activityMetadatFromWCP, questionnaireActivityResponseBean);\n+          savedResponseData = true;\n+\n+          // Update Participant ACtivity State\n+          ActivityStateRequestBean activityStateRequestBean = new ActivityStateRequestBean();\n+          activityStateRequestBean.setParticipantId(participantId);\n+          activityStateRequestBean.setStudyId(studyId);\n+\n+          List<ParticipantActivityBean> activity = new ArrayList<>();\n+          ParticipantActivityBean participantActivityBean = new ParticipantActivityBean();\n+          participantActivityBean.setActivityId(activityId);\n+          participantActivityBean.setActivityVersion(activityVersion);\n+          participantActivityBean.setActivityState(AppConstants.COMPLETED);\n+          activity.add(participantActivityBean);\n+          activityStateRequestBean.setActivity(activity);\n+          participantActivityStateResponseService.saveParticipantActivities(\n+              activityStateRequestBean);\n+          SuccessResponseBean srBean = new SuccessResponseBean();\n+          srBean.setMessage(AppConstants.SUCCESS_MSG);\n+          return new ResponseEntity<>(srBean, HttpStatus.OK);\n+        } else {\n+          ErrorBean errorBean =\n+              AppUtil.dynamicResponse(\n+                  ErrorCode.EC_716.code(),\n+                  ErrorCode.EC_716.errorMessage(),\n+                  AppConstants.ERROR_STR,\n+                  \"Could not save response for participant.\\n Study Id: \"\n+                      + studyId\n+                      + \"\\n Activity Id: \"\n+                      + activityId\n+                      + \"\\n Activity Version: \"\n+                      + activityVersion\n+                      + \"\\n Particpant Id: \"\n+                      + participantId);\n+\n+          logger.error(\n+              \"Could not save response for participant.\\n Study Id: \"\n+                  + studyId\n+                  + \"\\n Activity Id: \"\n+                  + activityId\n+                  + \"\\n Activity Version: \"\n+                  + activityVersion\n+                  + \"\\n Particpant Id: \"\n+                  + participantId);\n+          return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n+        }\n+      } else {\n+        ErrorBean errorBean =\n+            AppUtil.dynamicResponse(\n+                ErrorCode.EC_706.code(),\n+                ErrorCode.EC_706.errorMessage(),\n+                AppConstants.ERROR_STR,\n+                \"Could not save response for participant.\\n Study Id: \"\n+                    + studyId\n+                    + \"\\n Activity Id: \"\n+                    + activityId\n+                    + \"\\n Activity Version: \"\n+                    + activityVersion\n+                    + \"\\n Particpant Id: \"\n+                    + participantId);\n+\n+        logger.error(\n+            \"Could not save response for participant.\\n Study Id: \"\n+                + studyId\n+                + \"\\n Activity Id: \"\n+                + activityId\n+                + \"\\n Activity Version: \"\n+                + activityVersion\n+                + \"\\n Particpant Id: \"\n+                + participantId);\n+        return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n+      }\n+    } catch (Exception e) {\n+\n+      if (!savedResponseData) {\n+        ErrorBean errorBean =\n+            AppUtil.dynamicResponse(\n+                ErrorCode.EC_707.code(),\n+                ErrorCode.EC_707.errorMessage(),\n+                AppConstants.ERROR_STR,\n+                e.getMessage());\n+        logger.error(\n+            \"Could not save response for participant.\\n Study Id: \"\n+                + studyId\n+                + \"\\n Activity Id: \"\n+                + activityId\n+                + \"\\n Activity Version: \"\n+                + activityVersion\n+                + \"\\n Particpant Id: \"\n+                + participantId);\n+        return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n+      } else {\n+        ErrorBean errorBean =\n+            AppUtil.dynamicResponse(\n+                ErrorCode.EC_714.code(),\n+                ErrorCode.EC_714.errorMessage(),\n+                AppConstants.ERROR_STR,\n+                e.getMessage());\n+        logger.error(\n+            \"Could not update participant activity data for participant.\\n Study Id: \"\n+                + studyId\n+                + \"\\n Activity Id: \"\n+                + activityId\n+                + \"\\n Activity Version: \"\n+                + activityVersion\n+                + \"\\n Particpant Id: \"\n+                + participantId);\n+        return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n+      }\n+    }\n+  }\n+\n+  @GetMapping(\"/participant/getresponse\")\n+  public ResponseEntity<?> getActivityResponseDataForParticipant(\n+      @RequestParam(\"orgId\") String orgId,\n+      @RequestParam(\"appId\") String applicationId,\n+      @RequestParam(\"studyId\") String studyId,\n+      @RequestParam(\"siteId\") String siteId,\n+      @RequestParam(\"participantId\") String participantId,\n+      @RequestParam(AppConstants.PARTICIPANT_TOKEN_IDENTIFIER_KEY) String tokenIdentifier,\n+      @RequestParam(\"activityId\") String activityId) {\n+    try {\n+\n+      logger.info(\n+          \"Input values are :\\n Study Id: \"\n+              + studyId\n+              + \"\\n Site Id: \"\n+              + siteId\n+              + \"\\n Activity Id: \"\n+              + activityId\n+              + \"\\n Particpant Id: \"\n+              + participantId);\n+      if (StringUtils.isBlank(orgId)\n+          || StringUtils.isBlank(applicationId)\n+          || StringUtils.isBlank(studyId)\n+          || StringUtils.isBlank(siteId)\n+          || StringUtils.isBlank(participantId)\n+          || StringUtils.isBlank(activityId)\n+          || StringUtils.isBlank(tokenIdentifier)) {\n+        ErrorBean errorBean =\n+            AppUtil.dynamicResponse(\n+                ErrorCode.EC_701.code(),\n+                ErrorCode.EC_701.errorMessage(),\n+                AppConstants.ERROR_STR,\n+                ErrorCode.EC_701.errorMessage());\n+        return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n+      }\n+      // Check if participant is valid\n+      ParticipantBo participantBo = new ParticipantBo();\n+      participantBo.setTokenIdentifier(tokenIdentifier);\n+      participantBo.setParticipantIdentifier(participantId);\n+\n+      if (participantService.isValidParticipant(participantBo)) {\n+\n+        StoredResponseBean storedResponseBean =\n+            activityResponseProcessorService.getActivityResponseDataForParticipant(\n+                studyId, siteId, participantId, activityId);\n+        if (storedResponseBean == null) {\n+          logger.error(\n+              \"Input values are :\\n Study Id: \"\n+                  + studyId\n+                  + \"\\n Site Id: \"\n+                  + siteId\n+                  + \"\\n Activity Id: \"\n+                  + activityId\n+                  + \"\\n Participant id: \"\n+                  + participantId);\n+          ErrorBean errorBean =\n+              AppUtil.dynamicResponse(\n+                  ErrorCode.EC_706.code(),\n+                  ErrorCode.EC_706.errorMessage(),\n+                  AppConstants.ERROR_STR,\n+                  ErrorCode.EC_706.errorMessage());\n+          return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n+        }\n+\n+        return new ResponseEntity<>(storedResponseBean, HttpStatus.OK);\n+      } else {\n+        ErrorBean errorBean =\n+            AppUtil.dynamicResponse(\n+                ErrorCode.EC_706.code(),\n+                ErrorCode.EC_706.errorMessage(),\n+                AppConstants.ERROR_STR,\n+                \"Could not get response data for participant.\\n Study Id: \"\n+                    + studyId\n+                    + \"\\n Site Id: \"\n+                    + siteId\n+                    + \"\\n Activity Id: \"\n+                    + activityId\n+                    + \"\\n Particpant Id: \"\n+                    + participantId);\n+\n+        logger.error(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7064c5438adbea0bf49bac4712489b11dc84864e"}, "originalPosition": 356}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODQwNTA4OnYy", "diffSide": "RIGHT", "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/ProcessActivityResponseController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzowNTowMVrOF4tc9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzowNTowMVrOF4tc9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAwOTI2OQ==", "bodyText": "please remove all PII from server logs.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395009269", "createdAt": "2020-03-19T13:05:01Z", "author": {"login": "zohrehj"}, "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/ProcessActivityResponseController.java", "diffHunk": "@@ -0,0 +1,435 @@\n+/**\n+ * ***************************************************************************** Copyright 2020\n+ * Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * ****************************************************************************\n+ */\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.RestController;\n+import com.google.cloud.healthcare.fdamystudies.bean.ActivityResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ActivityStateRequestBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ParticipantActivityBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ParticipantStudyInformation;\n+import com.google.cloud.healthcare.fdamystudies.bean.QuestionnaireActivityStructureBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StoredResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyActivityMetadataRequestBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.SuccessResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantBo;\n+import com.google.cloud.healthcare.fdamystudies.service.ActivityResponseProcessorService;\n+import com.google.cloud.healthcare.fdamystudies.service.ParticipantActivityStateResponseService;\n+import com.google.cloud.healthcare.fdamystudies.service.ParticipantService;\n+import com.google.cloud.healthcare.fdamystudies.service.ParticipantStudyInfoService;\n+import com.google.cloud.healthcare.fdamystudies.service.StudyMetadataService;\n+import com.google.cloud.healthcare.fdamystudies.utils.AppConstants;\n+import com.google.cloud.healthcare.fdamystudies.utils.AppUtil;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@RestController\n+public class ProcessActivityResponseController {\n+  @Autowired private ParticipantService participantService;\n+  @Autowired private StudyMetadataService studyMetadataService;\n+  @Autowired private ParticipantStudyInfoService partStudyInfoService;\n+\n+  @Autowired private ActivityResponseProcessorService activityResponseProcessorService;\n+\n+  @Autowired\n+  private ParticipantActivityStateResponseService participantActivityStateResponseService;\n+\n+  private static final Logger logger =\n+      LoggerFactory.getLogger(ProcessActivityResponseController.class);\n+\n+  @PostMapping(\"/participant/process-response\")\n+  public ResponseEntity<?> processActivityResponseForParticipant(\n+      @RequestBody ActivityResponseBean questionnaireActivityResponseBean) {\n+    String orgId = null;\n+    String applicationId = null;\n+    String studyId = null;\n+    String activityId = null;\n+    String activityVersion = null;\n+    String participantId = null;\n+    String secureEnrollmentToken = null;\n+    boolean savedResponseData = false;\n+    try {\n+      orgId = questionnaireActivityResponseBean.getOrgId();\n+      applicationId = questionnaireActivityResponseBean.getApplicationId();\n+      studyId = questionnaireActivityResponseBean.getMetadata().getStudyId();\n+      activityId = questionnaireActivityResponseBean.getMetadata().getActivityId();\n+      activityVersion = questionnaireActivityResponseBean.getMetadata().getVersion();\n+      participantId = questionnaireActivityResponseBean.getParticipantId();\n+      secureEnrollmentToken = questionnaireActivityResponseBean.getTokenIdentifier();\n+      logger.info(\n+          \"Input values are :\\n Study Id: \"\n+              + studyId\n+              + \"\\n Activity Id: \"\n+              + activityId\n+              + \"\\n Activity Version: \"\n+              + activityVersion\n+              + \"\\n Particpant Id: \"\n+              + participantId);\n+      if (StringUtils.isBlank(orgId)\n+          || StringUtils.isBlank(applicationId)\n+          || StringUtils.isBlank(secureEnrollmentToken)\n+          || StringUtils.isBlank(studyId)\n+          || StringUtils.isBlank(activityId)\n+          || StringUtils.isBlank(activityVersion)) {\n+        logger.error(\n+            \"Input values are :\\n Study Id: \"\n+                + studyId\n+                + \"\\n Activity Id: \"\n+                + activityId\n+                + \"\\n Activity Version: \"\n+                + activityVersion);\n+        ErrorBean errorBean =\n+            AppUtil.dynamicResponse(\n+                ErrorCode.EC_701.code(),\n+                ErrorCode.EC_701.errorMessage(),\n+                AppConstants.ERROR_STR,\n+                ErrorCode.EC_701.errorMessage());\n+        return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n+      }\n+      // Check if participant is valid\n+      ParticipantBo participantBo = new ParticipantBo();\n+      participantBo.setTokenIdentifier(secureEnrollmentToken);\n+      participantBo.setParticipantIdentifier(participantId);\n+\n+      if (participantService.isValidParticipant(participantBo)) {\n+\n+        // Get ActivityMetadata from the WCP - we map the metadata information to the activity\n+        // response information to come up with a consolidated response object\n+        StudyActivityMetadataRequestBean studyActivityMetadataRequestBean =\n+            new StudyActivityMetadataRequestBean();\n+        studyActivityMetadataRequestBean.setStudyId(studyId);\n+        studyActivityMetadataRequestBean.setActivityId(activityId);\n+        studyActivityMetadataRequestBean.setActivityVersion(activityVersion);\n+        QuestionnaireActivityStructureBean activityMetadatFromWCP =\n+            studyMetadataService.getStudyActivityMetadata(\n+                orgId, applicationId, studyActivityMetadataRequestBean);\n+        if (activityMetadatFromWCP == null) {\n+          logger.error(\n+              \"Input values are :\\n Study Id: \"\n+                  + studyId\n+                  + \"\\n Activity Id: \"\n+                  + activityId\n+                  + \"\\n Activity Version: \"\n+                  + activityVersion);\n+          ErrorBean errorBean =\n+              AppUtil.dynamicResponse(\n+                  ErrorCode.EC_705.code(),\n+                  ErrorCode.EC_705.errorMessage(),\n+                  AppConstants.ERROR_STR,\n+                  ErrorCode.EC_705.errorMessage());\n+          return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n+        }\n+        // Get ParticipantStudyInfo from Registration Server\n+        ParticipantStudyInformation partStudyInfo =\n+            partStudyInfoService.getParticipantStudyInfo(\n+                orgId, applicationId, studyId, participantId);\n+        if (partStudyInfo == null) {\n+          logger.error(\n+              \"Input values are :\\n Study Id: \"\n+                  + studyId\n+                  + \"\\n participantId Id: \"\n+                  + participantId);\n+          ErrorBean errorBean =\n+              AppUtil.dynamicResponse(\n+                  ErrorCode.EC_715.code(),\n+                  ErrorCode.EC_715.errorMessage(),\n+                  AppConstants.ERROR_STR,\n+                  ErrorCode.EC_715.errorMessage());\n+          return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n+        }\n+        Boolean sharingConsent =\n+            (StringUtils.isBlank(partStudyInfo.getSharing())\n+                && partStudyInfo.getSharing().equalsIgnoreCase(AppConstants.TRUE_STR));\n+        questionnaireActivityResponseBean.setSharingConsent(sharingConsent);\n+        boolean withdrawalStatus = !StringUtils.isBlank(partStudyInfo.getWithdrawal());\n+        if (withdrawalStatus) {\n+          activityResponseProcessorService.saveActivityResponseDataForParticipant(\n+              activityMetadatFromWCP, questionnaireActivityResponseBean);\n+          savedResponseData = true;\n+\n+          // Update Participant ACtivity State\n+          ActivityStateRequestBean activityStateRequestBean = new ActivityStateRequestBean();\n+          activityStateRequestBean.setParticipantId(participantId);\n+          activityStateRequestBean.setStudyId(studyId);\n+\n+          List<ParticipantActivityBean> activity = new ArrayList<>();\n+          ParticipantActivityBean participantActivityBean = new ParticipantActivityBean();\n+          participantActivityBean.setActivityId(activityId);\n+          participantActivityBean.setActivityVersion(activityVersion);\n+          participantActivityBean.setActivityState(AppConstants.COMPLETED);\n+          activity.add(participantActivityBean);\n+          activityStateRequestBean.setActivity(activity);\n+          participantActivityStateResponseService.saveParticipantActivities(\n+              activityStateRequestBean);\n+          SuccessResponseBean srBean = new SuccessResponseBean();\n+          srBean.setMessage(AppConstants.SUCCESS_MSG);\n+          return new ResponseEntity<>(srBean, HttpStatus.OK);\n+        } else {\n+          ErrorBean errorBean =\n+              AppUtil.dynamicResponse(\n+                  ErrorCode.EC_716.code(),\n+                  ErrorCode.EC_716.errorMessage(),\n+                  AppConstants.ERROR_STR,\n+                  \"Could not save response for participant.\\n Study Id: \"\n+                      + studyId\n+                      + \"\\n Activity Id: \"\n+                      + activityId\n+                      + \"\\n Activity Version: \"\n+                      + activityVersion\n+                      + \"\\n Particpant Id: \"\n+                      + participantId);\n+\n+          logger.error(\n+              \"Could not save response for participant.\\n Study Id: \"\n+                  + studyId\n+                  + \"\\n Activity Id: \"\n+                  + activityId\n+                  + \"\\n Activity Version: \"\n+                  + activityVersion\n+                  + \"\\n Particpant Id: \"\n+                  + participantId);\n+          return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n+        }\n+      } else {\n+        ErrorBean errorBean =\n+            AppUtil.dynamicResponse(\n+                ErrorCode.EC_706.code(),\n+                ErrorCode.EC_706.errorMessage(),\n+                AppConstants.ERROR_STR,\n+                \"Could not save response for participant.\\n Study Id: \"\n+                    + studyId\n+                    + \"\\n Activity Id: \"\n+                    + activityId\n+                    + \"\\n Activity Version: \"\n+                    + activityVersion\n+                    + \"\\n Particpant Id: \"\n+                    + participantId);\n+\n+        logger.error(\n+            \"Could not save response for participant.\\n Study Id: \"\n+                + studyId\n+                + \"\\n Activity Id: \"\n+                + activityId\n+                + \"\\n Activity Version: \"\n+                + activityVersion\n+                + \"\\n Particpant Id: \"\n+                + participantId);\n+        return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n+      }\n+    } catch (Exception e) {\n+\n+      if (!savedResponseData) {\n+        ErrorBean errorBean =\n+            AppUtil.dynamicResponse(\n+                ErrorCode.EC_707.code(),\n+                ErrorCode.EC_707.errorMessage(),\n+                AppConstants.ERROR_STR,\n+                e.getMessage());\n+        logger.error(\n+            \"Could not save response for participant.\\n Study Id: \"\n+                + studyId\n+                + \"\\n Activity Id: \"\n+                + activityId\n+                + \"\\n Activity Version: \"\n+                + activityVersion\n+                + \"\\n Particpant Id: \"\n+                + participantId);\n+        return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n+      } else {\n+        ErrorBean errorBean =\n+            AppUtil.dynamicResponse(\n+                ErrorCode.EC_714.code(),\n+                ErrorCode.EC_714.errorMessage(),\n+                AppConstants.ERROR_STR,\n+                e.getMessage());\n+        logger.error(\n+            \"Could not update participant activity data for participant.\\n Study Id: \"\n+                + studyId\n+                + \"\\n Activity Id: \"\n+                + activityId\n+                + \"\\n Activity Version: \"\n+                + activityVersion\n+                + \"\\n Particpant Id: \"\n+                + participantId);\n+        return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n+      }\n+    }\n+  }\n+\n+  @GetMapping(\"/participant/getresponse\")\n+  public ResponseEntity<?> getActivityResponseDataForParticipant(\n+      @RequestParam(\"orgId\") String orgId,\n+      @RequestParam(\"appId\") String applicationId,\n+      @RequestParam(\"studyId\") String studyId,\n+      @RequestParam(\"siteId\") String siteId,\n+      @RequestParam(\"participantId\") String participantId,\n+      @RequestParam(AppConstants.PARTICIPANT_TOKEN_IDENTIFIER_KEY) String tokenIdentifier,\n+      @RequestParam(\"activityId\") String activityId) {\n+    try {\n+\n+      logger.info(\n+          \"Input values are :\\n Study Id: \"\n+              + studyId\n+              + \"\\n Site Id: \"\n+              + siteId\n+              + \"\\n Activity Id: \"\n+              + activityId\n+              + \"\\n Particpant Id: \"\n+              + participantId);\n+      if (StringUtils.isBlank(orgId)\n+          || StringUtils.isBlank(applicationId)\n+          || StringUtils.isBlank(studyId)\n+          || StringUtils.isBlank(siteId)\n+          || StringUtils.isBlank(participantId)\n+          || StringUtils.isBlank(activityId)\n+          || StringUtils.isBlank(tokenIdentifier)) {\n+        ErrorBean errorBean =\n+            AppUtil.dynamicResponse(\n+                ErrorCode.EC_701.code(),\n+                ErrorCode.EC_701.errorMessage(),\n+                AppConstants.ERROR_STR,\n+                ErrorCode.EC_701.errorMessage());\n+        return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n+      }\n+      // Check if participant is valid\n+      ParticipantBo participantBo = new ParticipantBo();\n+      participantBo.setTokenIdentifier(tokenIdentifier);\n+      participantBo.setParticipantIdentifier(participantId);\n+\n+      if (participantService.isValidParticipant(participantBo)) {\n+\n+        StoredResponseBean storedResponseBean =\n+            activityResponseProcessorService.getActivityResponseDataForParticipant(\n+                studyId, siteId, participantId, activityId);\n+        if (storedResponseBean == null) {\n+          logger.error(\n+              \"Input values are :\\n Study Id: \"\n+                  + studyId\n+                  + \"\\n Site Id: \"\n+                  + siteId\n+                  + \"\\n Activity Id: \"\n+                  + activityId\n+                  + \"\\n Participant id: \"\n+                  + participantId);\n+          ErrorBean errorBean =\n+              AppUtil.dynamicResponse(\n+                  ErrorCode.EC_706.code(),\n+                  ErrorCode.EC_706.errorMessage(),\n+                  AppConstants.ERROR_STR,\n+                  ErrorCode.EC_706.errorMessage());\n+          return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n+        }\n+\n+        return new ResponseEntity<>(storedResponseBean, HttpStatus.OK);\n+      } else {\n+        ErrorBean errorBean =\n+            AppUtil.dynamicResponse(\n+                ErrorCode.EC_706.code(),\n+                ErrorCode.EC_706.errorMessage(),\n+                AppConstants.ERROR_STR,\n+                \"Could not get response data for participant.\\n Study Id: \"\n+                    + studyId\n+                    + \"\\n Site Id: \"\n+                    + siteId\n+                    + \"\\n Activity Id: \"\n+                    + activityId\n+                    + \"\\n Particpant Id: \"\n+                    + participantId);\n+\n+        logger.error(\n+            \"Could not get response data for participant.\\n Study Id: \"\n+                + studyId\n+                + \"\\n Site Id: \"\n+                + siteId\n+                + \"\\n Activity Id: \"\n+                + activityId\n+                + \"\\n Particpant Id: \"\n+                + participantId);\n+        return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n+      }\n+    } catch (Exception e) {\n+      ErrorBean errorBean =\n+          AppUtil.dynamicResponse(\n+              ErrorCode.EC_708.code(),\n+              ErrorCode.EC_708.errorMessage(),\n+              AppConstants.ERROR_STR,\n+              e.getMessage());\n+      logger.error(\n+          \"Could not get response data for participant.\\n Study Id: \"\n+              + studyId\n+              + \"\\n Site Id: \"\n+              + siteId\n+              + \"\\n Activity Id: \"\n+              + activityId\n+              + \"\\n Particpant Id: \"\n+              + participantId);\n+      return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n+    }\n+  }\n+\n+  @PostMapping(\"/participant/withdraw\")\n+  public ResponseEntity<?> withdrawParticipantFromStudy(\n+      @RequestParam(name = \"studyId\") String studyId,\n+      @RequestParam(name = \"participantId\") String participantId,\n+      @RequestParam(name = \"deleteResponses\") String deleteResponses) {\n+    logger.info(\"Input values are :\\n Study Id: \" + studyId + \"\\n Particpant Id: \" + participantId);\n+    if (StringUtils.isBlank(studyId) || StringUtils.isBlank(participantId)) {\n+      ErrorBean errorBean =\n+          AppUtil.dynamicResponse(\n+              ErrorCode.EC_701.code(),\n+              ErrorCode.EC_701.errorMessage(),\n+              AppConstants.ERROR_STR,\n+              ErrorCode.EC_701.errorMessage());\n+      return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n+    } else {\n+      try {\n+        if (!StringUtils.isBlank(deleteResponses)\n+            && deleteResponses.equalsIgnoreCase(AppConstants.TRUE_STR)) {\n+          activityResponseProcessorService.deleteActivityResponseDataForParticipant(\n+              studyId, participantId);\n+          SuccessResponseBean srBean = new SuccessResponseBean();\n+          srBean.setMessage(AppConstants.SUCCESS_MSG);\n+          return new ResponseEntity<>(srBean, HttpStatus.OK);\n+        } else {\n+          activityResponseProcessorService.updateWithdrawalStatusForParticipant(\n+              studyId, participantId);\n+          SuccessResponseBean srBean = new SuccessResponseBean();\n+          srBean.setMessage(AppConstants.SUCCESS_MSG);\n+          return new ResponseEntity<>(srBean, HttpStatus.OK);\n+        }\n+      } catch (Exception e) {\n+        ErrorBean errorBean =\n+            AppUtil.dynamicResponse(\n+                ErrorCode.EC_712.code(),\n+                ErrorCode.EC_712.errorMessage(),\n+                AppConstants.ERROR_STR,\n+                e.getMessage());\n+        logger.error(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7064c5438adbea0bf49bac4712489b11dc84864e"}, "originalPosition": 424}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODQwNzEwOnYy", "diffSide": "RIGHT", "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/ProcessActivityStateController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzowNTozMlrOF4teKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzowNTozMlrOF4teKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAwOTU3OA==", "bodyText": "please remove commented code", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395009578", "createdAt": "2020-03-19T13:05:32Z", "author": {"login": "zohrehj"}, "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/ProcessActivityStateController.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * ***************************************************************************** Copyright 2020\n+ * Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * ****************************************************************************\n+ */\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.Context;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.util.Strings;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.RestController;\n+import com.google.cloud.healthcare.fdamystudies.bean.ActivitiesBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ActivityStateRequestBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.SuccessResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.service.ParticipantActivityStateResponseService;\n+import com.google.cloud.healthcare.fdamystudies.utils.AppConstants;\n+import com.google.cloud.healthcare.fdamystudies.utils.AppUtil;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@RestController\n+public class ProcessActivityStateController {\n+  @Autowired\n+  private ParticipantActivityStateResponseService participantActivityStateResponseService;\n+\n+  private static final Logger logger =\n+      LoggerFactory.getLogger(ProcessActivityStateController.class);\n+\n+  @GetMapping(\n+      value = \"/participant/get-activity-state\",\n+      consumes = MediaType.APPLICATION_JSON_VALUE,\n+      produces = MediaType.APPLICATION_JSON_VALUE)\n+  public ResponseEntity<?> getActivityState(\n+      @RequestParam(name = \"studyId\") String studyId,\n+      @RequestParam(\"participantId\") String participantId) {\n+    logger.info(\"Input values are :\\n Study Id: \" + studyId + \"\\n Particpant Id: \" + participantId);\n+    if (StringUtils.isBlank(studyId) || StringUtils.isBlank(participantId)) {\n+      ErrorBean errorBean =\n+          AppUtil.dynamicResponse(\n+              ErrorCode.EC_701.code(),\n+              ErrorCode.EC_701.errorMessage(),\n+              AppConstants.ERROR_STR,\n+              ErrorCode.EC_701.errorMessage());\n+      return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n+    } else {\n+      try {\n+        ActivitiesBean activitiesBean =\n+            participantActivityStateResponseService.getParticipantActivities(\n+                studyId, participantId);\n+        return new ResponseEntity<>(activitiesBean, HttpStatus.OK);\n+      } catch (Exception e) {\n+        ErrorBean errorBean =\n+            AppUtil.dynamicResponse(\n+                ErrorCode.EC_713.code(),\n+                ErrorCode.EC_713.errorMessage(),\n+                AppConstants.ERROR_STR,\n+                e.getMessage());\n+        logger.error(\n+            \"(C)...ProcessActivityResponseController.getActivityState()...Exception \"\n+                + e.getMessage());\n+        return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n+      }\n+    }\n+  }\n+\n+  @PostMapping(\"/participant/update-activity-state\")\n+  public ResponseEntity<?> updateActivityState(\n+      @RequestBody ActivityStateRequestBean activityStateRequestBean,\n+      @Context HttpServletResponse response) {\n+\n+    if (activityStateRequestBean == null\n+        || Strings.isBlank(activityStateRequestBean.getParticipantId())\n+        || Strings.isBlank(activityStateRequestBean.getStudyId())) {\n+      ErrorBean errorBean =\n+          AppUtil.dynamicResponse(\n+              ErrorCode.EC_701.code(),\n+              ErrorCode.EC_701.errorMessage(),\n+              AppConstants.ERROR_STR,\n+              ErrorCode.EC_701.errorMessage());\n+      return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n+    } else {\n+      try {\n+        participantActivityStateResponseService.saveParticipantActivities(activityStateRequestBean);\n+        SuccessResponseBean srBean = new SuccessResponseBean();\n+        srBean.setMessage(AppConstants.SUCCESS_MSG);\n+        return new ResponseEntity<>(srBean, HttpStatus.OK);\n+\n+      } catch (Exception e) {\n+        ErrorBean errorBean =\n+            AppUtil.dynamicResponse(\n+                ErrorCode.EC_714.code(),\n+                ErrorCode.EC_714.errorMessage(),\n+                AppConstants.ERROR_STR,\n+                e.getMessage());\n+        logger.error(\n+            \"(C)...ProcessActivityResponseController.updateActivityState()...Exception \"\n+                + e.getMessage());\n+        return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n+      }\n+    }\n+    // try {\n+    // if (activityStateBean != null && participantId != null\n+    // && !StringUtils.isEmpty(participantId)) {\n+    // if (activityStateBean.getActivity() != null && !activityStateBean.getActivity().isEmpty()) {\n+    // List<ActivitiesBean> activitiesBeanList = activityStateBean.getActivity();\n+    // List<ParticipantActivityBean> participantActivitiesList = activityResponseProcessorService\n+    // .getParticipantActivitiesList(activityStateBean.getStudyId(), participantId);\n+    // for (int i = 0; i < activitiesBeanList.size(); i++) {\n+    // ActivitiesBean activitiesBean = activitiesBeanList.get(i);\n+    // boolean isExists = false;\n+    // if (participantActivitiesList != null && !participantActivitiesList.isEmpty()) {\n+    // for (ParticipantActivityBean participantActivities : participantActivitiesList) {\n+    // if (participantActivities.getActivityId()\n+    // .equalsIgnoreCase(activitiesBean.getActivityId())) {\n+    // isExists = true;\n+    // if (activitiesBean.getActivityVersion() != null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7064c5438adbea0bf49bac4712489b11dc84864e"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODQxMzg1OnYy", "diffSide": "RIGHT", "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/CloudFirestoreResponsesDaoImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzowNzoyNFrOF4tieQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzowNzoyNFrOF4tieQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxMDY4MQ==", "bodyText": "please remove debug logs from final code.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395010681", "createdAt": "2020-03-19T13:07:24Z", "author": {"login": "zohrehj"}, "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/CloudFirestoreResponsesDaoImpl.java", "diffHunk": "@@ -0,0 +1,475 @@\n+/**\n+ * ***************************************************************************** Copyright 2020\n+ * Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * ****************************************************************************\n+ */\n+package com.google.cloud.healthcare.fdamystudies.dao;\n+\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.retry.annotation.Backoff;\n+import org.springframework.retry.annotation.Retryable;\n+import org.springframework.stereotype.Repository;\n+import com.google.api.core.ApiFuture;\n+import com.google.cloud.firestore.Firestore;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.cloud.firestore.Query;\n+import com.google.cloud.firestore.QueryDocumentSnapshot;\n+import com.google.cloud.firestore.QuerySnapshot;\n+import com.google.cloud.firestore.WriteBatch;\n+import com.google.cloud.firestore.WriteResult;\n+import com.google.cloud.healthcare.fdamystudies.bean.ResponseRows;\n+import com.google.cloud.healthcare.fdamystudies.bean.SavedActivityResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.StoredResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.utils.AppConstants;\n+import com.google.cloud.healthcare.fdamystudies.utils.ProcessResponseException;\n+import com.google.gson.Gson;\n+\n+@Repository\n+@Qualifier(\"cloudFirestoreResponsesDaoImpl\")\n+public class CloudFirestoreResponsesDaoImpl implements ResponsesDao {\n+  @Autowired private ApplicationConfiguration appConfig;\n+  private Firestore responsesDb;\n+  private static final Logger logger =\n+      LoggerFactory.getLogger(CloudFirestoreResponsesDaoImpl.class);\n+\n+  @Override\n+  @Retryable(\n+      value = {Exception.class},\n+      maxAttempts = 3,\n+      backoff = @Backoff(delay = 500))\n+  public void saveStudyMetadata(\n+      String studyCollectionName, String studyId, Map<String, Object> dataToStore)\n+      throws ProcessResponseException {\n+    if (studyCollectionName != null && studyId != null && dataToStore != null) {\n+      try {\n+\n+        logger.info(\"saveStudyMetadata() : \\n Study Collection Name: \" + studyCollectionName);\n+        initializeFirestore();\n+        ApiFuture<WriteResult> cr =\n+            this.responsesDb.collection(studyCollectionName).document(studyId).set(dataToStore);\n+        logger.debug(\n+            \"saveStudyMetadata() : \\n Study Collection Name: \"\n+                + studyCollectionName\n+                + \" added successfully\");\n+\n+      } catch (Exception e) {\n+        logger.error(e.getMessage(), e);\n+        throw new ProcessResponseException(e.getMessage());\n+      }\n+    } else {\n+\n+      throw new ProcessResponseException(\n+          \"CloudFirestoreResponsesDaoImpl.saveStudyMetadata() - Study Collection is null or dataToStore is null\");\n+    }\n+  }\n+\n+  @Override\n+  @Retryable(\n+      value = {Exception.class},\n+      maxAttempts = 3,\n+      backoff = @Backoff(delay = 500))\n+  public void saveActivityResponseData(\n+      String studyId,\n+      String studyCollectionName,\n+      String activitiesCollectionName,\n+      Map<String, Object> dataToStoreActivityResults)\n+      throws ProcessResponseException {\n+    try {\n+      initializeFirestore();\n+\n+      Map<String, Object> studyVersionMap = new HashMap<>();\n+      // TEST CODE\n+      studyVersionMap.put(\"studyVersion\", dataToStoreActivityResults.get(\"studyVersion\"));\n+      // END TEST CODE\n+      ApiFuture<WriteResult> futuresStudyColl =\n+          this.responsesDb.collection(studyCollectionName).document(studyId).set(studyVersionMap);\n+      WriteResult wresultStudy = futuresStudyColl.get();\n+      logger.debug(\"Updated time: \" + wresultStudy.getUpdateTime());\n+      ApiFuture<WriteResult> futuresActivities =\n+          this.responsesDb\n+              .collection(studyCollectionName)\n+              .document(studyId)\n+              .collection(activitiesCollectionName)\n+              .document()\n+              .set(dataToStoreActivityResults);\n+      WriteResult wresult = futuresActivities.get();\n+      logger.debug(\"Updated time: \" + wresult.getUpdateTime());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7064c5438adbea0bf49bac4712489b11dc84864e"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODQyMjM4OnYy", "diffSide": "RIGHT", "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/ParticipantActivitiesDaoImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzowOTo0NVrOF4tn1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzowOTo0NVrOF4tn1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxMjA1NQ==", "bodyText": "this is not Google copyright test. Please change to the MIT license text that has been approved.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395012055", "createdAt": "2020-03-19T13:09:45Z", "author": {"login": "zohrehj"}, "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/ParticipantActivitiesDaoImpl.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * Copyright 2020 Google LLC\n+ *\n+ * <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software\n+ * and associated documentation files (the \"Software\"), to deal in the Software without restriction,\n+ * including without limitation the rights to use, copy, modify, merge, publish, distribute,\n+ * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions: The above copyright notice and this\n+ * permission notice shall be included in all copies or substantial portions of the Software.THE\n+ * SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT\n+ * LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n+ * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7064c5438adbea0bf49bac4712489b11dc84864e"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODQyNTgzOnYy", "diffSide": "RIGHT", "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/exception/InvalidStudyIdException.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzoxMDo0NFrOF4tqGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzoxMDo0NFrOF4tqGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxMjYzMg==", "bodyText": "same here, this is not the approved Google copyright header", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395012632", "createdAt": "2020-03-19T13:10:44Z", "author": {"login": "zohrehj"}, "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/exception/InvalidStudyIdException.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/**\n+ * Copyright 2020 Google LLC\n+ *\n+ * <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software\n+ * and associated documentation files (the \"Software\"), to deal in the Software without restriction,\n+ * including without limitation the rights to use, copy, modify, merge, publish, distribute,\n+ * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions: The above copyright notice and this\n+ * permission notice shall be included in all copies or substantial portions of the Software.THE\n+ * SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT\n+ * LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n+ * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7064c5438adbea0bf49bac4712489b11dc84864e"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODQyOTE3OnYy", "diffSide": "RIGHT", "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/exception/ProcessActivityStateException.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzoxMTozN1rOF4tsLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzoxMTozN1rOF4tsLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxMzE2NA==", "bodyText": "please correct all copyright headers.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395013164", "createdAt": "2020-03-19T13:11:37Z", "author": {"login": "zohrehj"}, "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/exception/ProcessActivityStateException.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/**\n+ * Copyright 2020 Google LLC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7064c5438adbea0bf49bac4712489b11dc84864e"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODQzMDA4OnYy", "diffSide": "RIGHT", "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/model/ParticipantActivity.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzoxMTo1MVrOF4tsxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzoxMTo1MVrOF4tsxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxMzMxOQ==", "bodyText": "missing copyright", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395013319", "createdAt": "2020-03-19T13:11:51Z", "author": {"login": "zohrehj"}, "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/model/ParticipantActivity.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.google.cloud.healthcare.fdamystudies.model;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7064c5438adbea0bf49bac4712489b11dc84864e"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODQzMDk5OnYy", "diffSide": "RIGHT", "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/model/ParticipantActivity.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzoxMjowNlrOF4ttag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzoxMjowNlrOF4ttag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxMzQ4Mg==", "bodyText": "remove please", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395013482", "createdAt": "2020-03-19T13:12:06Z", "author": {"login": "zohrehj"}, "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/model/ParticipantActivity.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.google.cloud.healthcare.fdamystudies.model;\n+\n+import java.time.LocalDateTime;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+@Setter\n+@Getter\n+@Entity\n+@Table(name = \"participant_activities\")\n+public class ParticipantActivity {\n+\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.AUTO)\n+  @Column(name = \"id\")\n+  private Integer id;\n+\n+  @Column(name = \"_ts\")\n+  private String _ts;\n+\n+  @ManyToOne(cascade = CascadeType.ALL)\n+  @JoinColumn(name = \"participant_id\", insertable = false, updatable = false)\n+  private ParticipantBo participantInfo;\n+\n+  @Column(name = \"study_id\")\n+  private String studyId;\n+\n+  @Column(name = \"activity_id\")\n+  private String activityId;\n+\n+  @Column(name = \"activity_complete_id\")\n+  private Integer activityCompleteId;\n+\n+  @Column(name = \"activity_type\")\n+  private String activityType;\n+\n+  @Column(name = \"bookmark\", columnDefinition = \"TINYINT(1)\")\n+  private Boolean bookmark = false;\n+\n+  @Column(name = \"status\")\n+  private String status;\n+\n+  @Column(name = \"activity_version\")\n+  private String activityVersion;\n+\n+  @Column(name = \"activity_state\")\n+  private String activityState;\n+\n+  @Column(name = \"activity_run_id\")\n+  private String activityRunId;\n+\n+  @Column(name = \"total\")\n+  private Integer total;\n+\n+  @Column(name = \"completed\")\n+  private Integer completed;\n+\n+  @Column(name = \"missed\")\n+  private Integer missed;\n+\n+  /*  @Column(name = \"application_id\")\n+  private String applicationId;\n+\n+  @Column(name = \"org_id\")\n+  private String orgId;*/\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7064c5438adbea0bf49bac4712489b11dc84864e"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODQzMTU4OnYy", "diffSide": "RIGHT", "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/model/ParticipantActivity.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzoxMjoxNVrOF4ttzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzoxMjoxNVrOF4ttzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxMzU4MQ==", "bodyText": "same here", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395013581", "createdAt": "2020-03-19T13:12:15Z", "author": {"login": "zohrehj"}, "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/model/ParticipantActivity.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.google.cloud.healthcare.fdamystudies.model;\n+\n+import java.time.LocalDateTime;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+@Setter\n+@Getter\n+@Entity\n+@Table(name = \"participant_activities\")\n+public class ParticipantActivity {\n+\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.AUTO)\n+  @Column(name = \"id\")\n+  private Integer id;\n+\n+  @Column(name = \"_ts\")\n+  private String _ts;\n+\n+  @ManyToOne(cascade = CascadeType.ALL)\n+  @JoinColumn(name = \"participant_id\", insertable = false, updatable = false)\n+  private ParticipantBo participantInfo;\n+\n+  @Column(name = \"study_id\")\n+  private String studyId;\n+\n+  @Column(name = \"activity_id\")\n+  private String activityId;\n+\n+  @Column(name = \"activity_complete_id\")\n+  private Integer activityCompleteId;\n+\n+  @Column(name = \"activity_type\")\n+  private String activityType;\n+\n+  @Column(name = \"bookmark\", columnDefinition = \"TINYINT(1)\")\n+  private Boolean bookmark = false;\n+\n+  @Column(name = \"status\")\n+  private String status;\n+\n+  @Column(name = \"activity_version\")\n+  private String activityVersion;\n+\n+  @Column(name = \"activity_state\")\n+  private String activityState;\n+\n+  @Column(name = \"activity_run_id\")\n+  private String activityRunId;\n+\n+  @Column(name = \"total\")\n+  private Integer total;\n+\n+  @Column(name = \"completed\")\n+  private Integer completed;\n+\n+  @Column(name = \"missed\")\n+  private Integer missed;\n+\n+  /*  @Column(name = \"application_id\")\n+  private String applicationId;\n+\n+  @Column(name = \"org_id\")\n+  private String orgId;*/\n+\n+  @Column(name = \"activity_start_date\")\n+  private LocalDateTime activityStartDate;\n+\n+  @Column(name = \"activity_end_date\")\n+  private LocalDateTime activityEndDate;\n+\n+  @Column(name = \"anchordate_version\")\n+  private String anchorDateVersion;\n+\n+  @Column(name = \"anchordate_created_date\")\n+  private LocalDateTime anchorDateCreatedDate;\n+\n+  @Column(name = \"last_modified_date\")\n+  private LocalDateTime lastModifiedDate;\n+\n+  /*@Column(name = \"user_id\")\n+  private String userId;*/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7064c5438adbea0bf49bac4712489b11dc84864e"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODQzMzI1OnYy", "diffSide": "RIGHT", "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ActivityResponseProcessorServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzoxMjo0MFrOF4tu2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzoxMjo0MFrOF4tu2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxMzg0OA==", "bodyText": "please remove", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395013848", "createdAt": "2020-03-19T13:12:40Z", "author": {"login": "zohrehj"}, "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ActivityResponseProcessorServiceImpl.java", "diffHunk": "@@ -0,0 +1,372 @@\n+/**\n+ * ***************************************************************************** Copyright 2020\n+ * Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * ****************************************************************************\n+ */\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import java.beans.BeanInfo;\n+import java.beans.Introspector;\n+import java.beans.PropertyDescriptor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.util.Strings;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import com.google.cloud.healthcare.fdamystudies.bean.ActivityMetadataBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ActivityResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ActivityValueGroupBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.QuestionnaireActivityStepsBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.QuestionnaireActivityStructureBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StoredResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.dao.ResponsesDao;\n+import com.google.cloud.healthcare.fdamystudies.utils.AppConstants;\n+import com.google.cloud.healthcare.fdamystudies.utils.AppUtil;\n+import com.google.cloud.healthcare.fdamystudies.utils.ProcessResponseException;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+\n+@Service\n+public class ActivityResponseProcessorServiceImpl implements ActivityResponseProcessorService {\n+  @Autowired\n+  @Qualifier(\"cloudFirestoreResponsesDaoImpl\")\n+  // @Qualifier(\"fileResponsesDaoImpl\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7064c5438adbea0bf49bac4712489b11dc84864e"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODQzNDgzOnYy", "diffSide": "RIGHT", "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ActivityResponseProcessorServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzoxMzowM1rOF4tv4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzoxMzowM1rOF4tv4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxNDExNA==", "bodyText": "PII in log, please remove", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395014114", "createdAt": "2020-03-19T13:13:03Z", "author": {"login": "zohrehj"}, "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ActivityResponseProcessorServiceImpl.java", "diffHunk": "@@ -0,0 +1,372 @@\n+/**\n+ * ***************************************************************************** Copyright 2020\n+ * Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * ****************************************************************************\n+ */\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import java.beans.BeanInfo;\n+import java.beans.Introspector;\n+import java.beans.PropertyDescriptor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.util.Strings;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import com.google.cloud.healthcare.fdamystudies.bean.ActivityMetadataBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ActivityResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ActivityValueGroupBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.QuestionnaireActivityStepsBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.QuestionnaireActivityStructureBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StoredResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.dao.ResponsesDao;\n+import com.google.cloud.healthcare.fdamystudies.utils.AppConstants;\n+import com.google.cloud.healthcare.fdamystudies.utils.AppUtil;\n+import com.google.cloud.healthcare.fdamystudies.utils.ProcessResponseException;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+\n+@Service\n+public class ActivityResponseProcessorServiceImpl implements ActivityResponseProcessorService {\n+  @Autowired\n+  @Qualifier(\"cloudFirestoreResponsesDaoImpl\")\n+  // @Qualifier(\"fileResponsesDaoImpl\")\n+  private ResponsesDao responsesDao;\n+\n+  @Autowired private ApplicationConfiguration appConfig;\n+\n+  private static final Logger logger =\n+      LoggerFactory.getLogger(ActivityResponseProcessorServiceImpl.class);\n+\n+  @Override\n+  public void saveActivityResponseDataForParticipant(\n+      QuestionnaireActivityStructureBean activityMetadataBeanFromWCP,\n+      ActivityResponseBean questionnaireActivityResponseBean)\n+      throws ProcessResponseException {\n+    if (activityMetadataBeanFromWCP == null) {\n+      throw new ProcessResponseException(\"QuestionnaireActivityStructureBean is null.\");\n+    }\n+    if (questionnaireActivityResponseBean == null) {\n+      throw new ProcessResponseException(\"QuestionnaireActivityResponseBean is null.\");\n+    }\n+    ActivityMetadataBean activityMetadataResponse = questionnaireActivityResponseBean.getMetadata();\n+    if (activityMetadataResponse == null) {\n+      throw new ProcessResponseException(\"ActivityMetadataBean is null \");\n+    }\n+    List<QuestionnaireActivityStepsBean> questionnaireResponses =\n+        questionnaireActivityResponseBean.getData().getResults();\n+    if (questionnaireResponses == null) {\n+      throw new ProcessResponseException(\n+          \"QuestionnaireActivityResponseBean is null for activity Id: \"\n+              + activityMetadataResponse.getActivityId());\n+    }\n+\n+    List<QuestionnaireActivityStepsBean> questionnaireMetadata =\n+        activityMetadataBeanFromWCP.getSteps();\n+    if (questionnaireMetadata == null) {\n+      throw new ProcessResponseException(\n+          \"QuestionnaireActivityStructureBean is null for activity Id: \"\n+              + activityMetadataResponse.getActivityId());\n+    }\n+    if (activityMetadataResponse\n+        .getActivityId()\n+        .equalsIgnoreCase(activityMetadataBeanFromWCP.getMetadata().getActivityId())) {\n+      processActivityResponses(questionnaireResponses, questionnaireMetadata);\n+      String rawResponseData = null;\n+      if (appConfig.getSaveRawResponseData().equalsIgnoreCase(AppConstants.TRUE_STR)) {\n+        rawResponseData = getRawJsonInputData(questionnaireActivityResponseBean);\n+      }\n+      this.saveActivityResponseData(questionnaireActivityResponseBean, rawResponseData);\n+    } else {\n+      logger.error(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7064c5438adbea0bf49bac4712489b11dc84864e"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODQ0MDgzOnYy", "diffSide": "RIGHT", "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ActivityResponseProcessorServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzoxNDo0NlrOF4tz5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzoxNDo0NlrOF4tz5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxNTE0MA==", "bodyText": "remove all PII being logged.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395015140", "createdAt": "2020-03-19T13:14:46Z", "author": {"login": "zohrehj"}, "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ActivityResponseProcessorServiceImpl.java", "diffHunk": "@@ -0,0 +1,372 @@\n+/**\n+ * ***************************************************************************** Copyright 2020\n+ * Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * ****************************************************************************\n+ */\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import java.beans.BeanInfo;\n+import java.beans.Introspector;\n+import java.beans.PropertyDescriptor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.util.Strings;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import com.google.cloud.healthcare.fdamystudies.bean.ActivityMetadataBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ActivityResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ActivityValueGroupBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.QuestionnaireActivityStepsBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.QuestionnaireActivityStructureBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StoredResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.dao.ResponsesDao;\n+import com.google.cloud.healthcare.fdamystudies.utils.AppConstants;\n+import com.google.cloud.healthcare.fdamystudies.utils.AppUtil;\n+import com.google.cloud.healthcare.fdamystudies.utils.ProcessResponseException;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+\n+@Service\n+public class ActivityResponseProcessorServiceImpl implements ActivityResponseProcessorService {\n+  @Autowired\n+  @Qualifier(\"cloudFirestoreResponsesDaoImpl\")\n+  // @Qualifier(\"fileResponsesDaoImpl\")\n+  private ResponsesDao responsesDao;\n+\n+  @Autowired private ApplicationConfiguration appConfig;\n+\n+  private static final Logger logger =\n+      LoggerFactory.getLogger(ActivityResponseProcessorServiceImpl.class);\n+\n+  @Override\n+  public void saveActivityResponseDataForParticipant(\n+      QuestionnaireActivityStructureBean activityMetadataBeanFromWCP,\n+      ActivityResponseBean questionnaireActivityResponseBean)\n+      throws ProcessResponseException {\n+    if (activityMetadataBeanFromWCP == null) {\n+      throw new ProcessResponseException(\"QuestionnaireActivityStructureBean is null.\");\n+    }\n+    if (questionnaireActivityResponseBean == null) {\n+      throw new ProcessResponseException(\"QuestionnaireActivityResponseBean is null.\");\n+    }\n+    ActivityMetadataBean activityMetadataResponse = questionnaireActivityResponseBean.getMetadata();\n+    if (activityMetadataResponse == null) {\n+      throw new ProcessResponseException(\"ActivityMetadataBean is null \");\n+    }\n+    List<QuestionnaireActivityStepsBean> questionnaireResponses =\n+        questionnaireActivityResponseBean.getData().getResults();\n+    if (questionnaireResponses == null) {\n+      throw new ProcessResponseException(\n+          \"QuestionnaireActivityResponseBean is null for activity Id: \"\n+              + activityMetadataResponse.getActivityId());\n+    }\n+\n+    List<QuestionnaireActivityStepsBean> questionnaireMetadata =\n+        activityMetadataBeanFromWCP.getSteps();\n+    if (questionnaireMetadata == null) {\n+      throw new ProcessResponseException(\n+          \"QuestionnaireActivityStructureBean is null for activity Id: \"\n+              + activityMetadataResponse.getActivityId());\n+    }\n+    if (activityMetadataResponse\n+        .getActivityId()\n+        .equalsIgnoreCase(activityMetadataBeanFromWCP.getMetadata().getActivityId())) {\n+      processActivityResponses(questionnaireResponses, questionnaireMetadata);\n+      String rawResponseData = null;\n+      if (appConfig.getSaveRawResponseData().equalsIgnoreCase(AppConstants.TRUE_STR)) {\n+        rawResponseData = getRawJsonInputData(questionnaireActivityResponseBean);\n+      }\n+      this.saveActivityResponseData(questionnaireActivityResponseBean, rawResponseData);\n+    } else {\n+      logger.error(\n+          \"saveActivityResponseDataForParticipant() - The activity ID in the response does not match activity ID in the metadata provided.\\n\"\n+              + \"Activity Id in response: \"\n+              + activityMetadataResponse.getActivityId()\n+              + \"\\n\"\n+              + \"Activity Id in metadata: \"\n+              + activityMetadataBeanFromWCP.getMetadata().getActivityId());\n+      throw new ProcessResponseException(\n+          \"The activity ID in the response does not match activity ID in the metadata provided.\");\n+    }\n+  }\n+\n+  @Override\n+  public void deleteActivityResponseDataForParticipant(String studyId, String participantId)\n+      throws ProcessResponseException {\n+    if (Strings.isBlank(studyId) || Strings.isBlank(participantId)) {\n+      throw new ProcessResponseException(\"Required input parameter is blank or null\");\n+    } else {\n+\n+      responsesDao.deleteActivityResponseDataForParticipant(\n+          AppUtil.makeStudyCollectionName(studyId),\n+          studyId,\n+          AppConstants.ACTIVITIES_COLLECTION_NAME,\n+          participantId);\n+    }\n+  }\n+\n+  private void processActivityResponses(\n+      List<QuestionnaireActivityStepsBean> questionnaireResponses,\n+      List<QuestionnaireActivityStepsBean> activityMetadataBeanFromWCP) {\n+    for (QuestionnaireActivityStepsBean responseBean : questionnaireResponses) {\n+      if (responseBean.getResultType().equalsIgnoreCase(AppConstants.GROUPED_FIELD_KEY)) {\n+        ActivityValueGroupBean valueGroupResponse =\n+            getValueGroupResponses(activityMetadataBeanFromWCP, responseBean);\n+        responseBean.setActvityValueGroup(valueGroupResponse);\n+        // Remove the value object, as we have plugged in the metadata and added to the\n+        // ActivityValueGroupBean\n+        responseBean.setValue(AppConstants.EMPTY_STR);\n+      } else {\n+        plugInMetadataToResponses(activityMetadataBeanFromWCP, responseBean, false);\n+      }\n+    }\n+  }\n+\n+  private ActivityValueGroupBean getValueGroupResponses(\n+      List<QuestionnaireActivityStepsBean> activityMetadataBeanFromWCP,\n+      QuestionnaireActivityStepsBean responseBean) {\n+    ActivityValueGroupBean activityValueGroupBeanRet = new ActivityValueGroupBean();\n+    List<QuestionnaireActivityStepsBean> valueResponseBeanList =\n+        new ArrayList<QuestionnaireActivityStepsBean>();\n+    Object value = responseBean.getValue();\n+    if (value instanceof List) {\n+      List<Object> valueList = (ArrayList<Object>) value;\n+      for (int i = 0; i < valueList.size(); i++) {\n+        Object valuObj = valueList.get(i);\n+        if (valuObj instanceof List) {\n+          List<HashMap> objListMap = (ArrayList<HashMap>) valuObj;\n+          Gson gson = new Gson();\n+          for (HashMap valueObjMap : objListMap) {\n+            String json = gson.toJson(valueObjMap, Map.class);\n+            QuestionnaireActivityStepsBean valueBean =\n+                gson.fromJson(json, QuestionnaireActivityStepsBean.class);\n+            plugInMetadataToResponses(activityMetadataBeanFromWCP, valueBean, true);\n+            valueResponseBeanList.add(valueBean);\n+          }\n+        }\n+      }\n+    }\n+    activityValueGroupBeanRet.setValueGroup(valueResponseBeanList);\n+    return activityValueGroupBeanRet;\n+  }\n+\n+  private void plugInMetadataToResponses(\n+      List<QuestionnaireActivityStepsBean> activityMetadataBeanFromWCP,\n+      QuestionnaireActivityStepsBean responseBean,\n+      boolean fromGrouped) {\n+    List<QuestionnaireActivityStepsBean> metadataMatchList = null;\n+\n+    String questionKey = responseBean.getKey();\n+    if (fromGrouped) {\n+      for (QuestionnaireActivityStepsBean stepBean : activityMetadataBeanFromWCP) {\n+        List<QuestionnaireActivityStepsBean> stepsBean = stepBean.getSteps();\n+        metadataMatchList =\n+            stepsBean\n+                .stream()\n+                .filter(QuestionnaireActivityStepsBeanPredicate.questionKeyMatch(questionKey))\n+                .collect(Collectors.<QuestionnaireActivityStepsBean>toList());\n+        if (metadataMatchList != null && metadataMatchList.size() > 0) {\n+          break;\n+        }\n+      }\n+    } else {\n+      metadataMatchList =\n+          activityMetadataBeanFromWCP\n+              .stream()\n+              .filter(QuestionnaireActivityStepsBeanPredicate.questionKeyMatch(questionKey))\n+              .collect(Collectors.<QuestionnaireActivityStepsBean>toList());\n+    }\n+    if (metadataMatchList != null) {\n+      for (QuestionnaireActivityStepsBean metadataMatchBean : metadataMatchList) {\n+        responseBean.setSkippable(metadataMatchBean.getSkippable());\n+        responseBean.setText(metadataMatchBean.getText());\n+        responseBean.setTitle(metadataMatchBean.getTitle());\n+      }\n+    }\n+  }\n+\n+  private void saveActivityResponseData(\n+      ActivityResponseBean questionnaireActivityResponseBean, String rawResponseData)\n+      throws ProcessResponseException {\n+    try {\n+\n+      // Add Timestamp to bean\n+      questionnaireActivityResponseBean.setCreatedTimestamp(\n+          String.valueOf(System.currentTimeMillis()));\n+      Map<String, Object> dataToStoreActivityResults =\n+          this.getHashMapForBean(questionnaireActivityResponseBean.getMetadata());\n+      dataToStoreActivityResults.remove(AppConstants.DATA_FIELD_KEY);\n+\n+      List<QuestionnaireActivityStepsBean> questionnaireResponses =\n+          questionnaireActivityResponseBean.getData().getResults();\n+      List<Map<String, Object>> stepsList = new ArrayList<Map<String, Object>>();\n+      for (QuestionnaireActivityStepsBean tmpBean : questionnaireResponses) {\n+        Map<String, Object> dataToStoreTemp = getHashMapForBean(tmpBean);\n+        stepsList.add(dataToStoreTemp);\n+      }\n+      dataToStoreActivityResults.put(AppConstants.RESULTS_FIELD_KEY, stepsList);\n+      this.addParticipantDataToMap(questionnaireActivityResponseBean, dataToStoreActivityResults);\n+      if (rawResponseData != null) {\n+        // Store raw response data\n+        dataToStoreActivityResults.put(AppConstants.RAW_RESPONSE_FIELD_KEY, rawResponseData);\n+      }\n+      dataToStoreActivityResults.put(\n+          AppConstants.CREATED_TS_KEY, questionnaireActivityResponseBean.getCreatedTimestamp());\n+\n+      String studyId = questionnaireActivityResponseBean.getMetadata().getStudyId();\n+\n+      String studyCollectionName = AppUtil.makeStudyCollectionName(studyId);\n+      logger.info(\"saveActivityResponseData() : \\n Study Collection Name: \" + studyCollectionName);\n+      responsesDao.saveActivityResponseData(\n+          studyId,\n+          studyCollectionName,\n+          AppConstants.ACTIVITIES_COLLECTION_NAME,\n+          dataToStoreActivityResults);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7064c5438adbea0bf49bac4712489b11dc84864e"}, "originalPosition": 237}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODQ0ODg1OnYy", "diffSide": "RIGHT", "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ActivityResponseProcessorServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzoxNzowMFrOF4t5RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzoxNzowMFrOF4t5RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxNjUxNg==", "bodyText": "this is a very complex piece of code, consider creating smaller methods with single responsibility instead, which would make the code easier to test and read.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395016516", "createdAt": "2020-03-19T13:17:00Z", "author": {"login": "zohrehj"}, "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ActivityResponseProcessorServiceImpl.java", "diffHunk": "@@ -0,0 +1,372 @@\n+/**\n+ * ***************************************************************************** Copyright 2020\n+ * Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * ****************************************************************************\n+ */\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import java.beans.BeanInfo;\n+import java.beans.Introspector;\n+import java.beans.PropertyDescriptor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.util.Strings;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import com.google.cloud.healthcare.fdamystudies.bean.ActivityMetadataBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ActivityResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ActivityValueGroupBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.QuestionnaireActivityStepsBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.QuestionnaireActivityStructureBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StoredResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.dao.ResponsesDao;\n+import com.google.cloud.healthcare.fdamystudies.utils.AppConstants;\n+import com.google.cloud.healthcare.fdamystudies.utils.AppUtil;\n+import com.google.cloud.healthcare.fdamystudies.utils.ProcessResponseException;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+\n+@Service\n+public class ActivityResponseProcessorServiceImpl implements ActivityResponseProcessorService {\n+  @Autowired\n+  @Qualifier(\"cloudFirestoreResponsesDaoImpl\")\n+  // @Qualifier(\"fileResponsesDaoImpl\")\n+  private ResponsesDao responsesDao;\n+\n+  @Autowired private ApplicationConfiguration appConfig;\n+\n+  private static final Logger logger =\n+      LoggerFactory.getLogger(ActivityResponseProcessorServiceImpl.class);\n+\n+  @Override\n+  public void saveActivityResponseDataForParticipant(\n+      QuestionnaireActivityStructureBean activityMetadataBeanFromWCP,\n+      ActivityResponseBean questionnaireActivityResponseBean)\n+      throws ProcessResponseException {\n+    if (activityMetadataBeanFromWCP == null) {\n+      throw new ProcessResponseException(\"QuestionnaireActivityStructureBean is null.\");\n+    }\n+    if (questionnaireActivityResponseBean == null) {\n+      throw new ProcessResponseException(\"QuestionnaireActivityResponseBean is null.\");\n+    }\n+    ActivityMetadataBean activityMetadataResponse = questionnaireActivityResponseBean.getMetadata();\n+    if (activityMetadataResponse == null) {\n+      throw new ProcessResponseException(\"ActivityMetadataBean is null \");\n+    }\n+    List<QuestionnaireActivityStepsBean> questionnaireResponses =\n+        questionnaireActivityResponseBean.getData().getResults();\n+    if (questionnaireResponses == null) {\n+      throw new ProcessResponseException(\n+          \"QuestionnaireActivityResponseBean is null for activity Id: \"\n+              + activityMetadataResponse.getActivityId());\n+    }\n+\n+    List<QuestionnaireActivityStepsBean> questionnaireMetadata =\n+        activityMetadataBeanFromWCP.getSteps();\n+    if (questionnaireMetadata == null) {\n+      throw new ProcessResponseException(\n+          \"QuestionnaireActivityStructureBean is null for activity Id: \"\n+              + activityMetadataResponse.getActivityId());\n+    }\n+    if (activityMetadataResponse\n+        .getActivityId()\n+        .equalsIgnoreCase(activityMetadataBeanFromWCP.getMetadata().getActivityId())) {\n+      processActivityResponses(questionnaireResponses, questionnaireMetadata);\n+      String rawResponseData = null;\n+      if (appConfig.getSaveRawResponseData().equalsIgnoreCase(AppConstants.TRUE_STR)) {\n+        rawResponseData = getRawJsonInputData(questionnaireActivityResponseBean);\n+      }\n+      this.saveActivityResponseData(questionnaireActivityResponseBean, rawResponseData);\n+    } else {\n+      logger.error(\n+          \"saveActivityResponseDataForParticipant() - The activity ID in the response does not match activity ID in the metadata provided.\\n\"\n+              + \"Activity Id in response: \"\n+              + activityMetadataResponse.getActivityId()\n+              + \"\\n\"\n+              + \"Activity Id in metadata: \"\n+              + activityMetadataBeanFromWCP.getMetadata().getActivityId());\n+      throw new ProcessResponseException(\n+          \"The activity ID in the response does not match activity ID in the metadata provided.\");\n+    }\n+  }\n+\n+  @Override\n+  public void deleteActivityResponseDataForParticipant(String studyId, String participantId)\n+      throws ProcessResponseException {\n+    if (Strings.isBlank(studyId) || Strings.isBlank(participantId)) {\n+      throw new ProcessResponseException(\"Required input parameter is blank or null\");\n+    } else {\n+\n+      responsesDao.deleteActivityResponseDataForParticipant(\n+          AppUtil.makeStudyCollectionName(studyId),\n+          studyId,\n+          AppConstants.ACTIVITIES_COLLECTION_NAME,\n+          participantId);\n+    }\n+  }\n+\n+  private void processActivityResponses(\n+      List<QuestionnaireActivityStepsBean> questionnaireResponses,\n+      List<QuestionnaireActivityStepsBean> activityMetadataBeanFromWCP) {\n+    for (QuestionnaireActivityStepsBean responseBean : questionnaireResponses) {\n+      if (responseBean.getResultType().equalsIgnoreCase(AppConstants.GROUPED_FIELD_KEY)) {\n+        ActivityValueGroupBean valueGroupResponse =\n+            getValueGroupResponses(activityMetadataBeanFromWCP, responseBean);\n+        responseBean.setActvityValueGroup(valueGroupResponse);\n+        // Remove the value object, as we have plugged in the metadata and added to the\n+        // ActivityValueGroupBean\n+        responseBean.setValue(AppConstants.EMPTY_STR);\n+      } else {\n+        plugInMetadataToResponses(activityMetadataBeanFromWCP, responseBean, false);\n+      }\n+    }\n+  }\n+\n+  private ActivityValueGroupBean getValueGroupResponses(\n+      List<QuestionnaireActivityStepsBean> activityMetadataBeanFromWCP,\n+      QuestionnaireActivityStepsBean responseBean) {\n+    ActivityValueGroupBean activityValueGroupBeanRet = new ActivityValueGroupBean();\n+    List<QuestionnaireActivityStepsBean> valueResponseBeanList =\n+        new ArrayList<QuestionnaireActivityStepsBean>();\n+    Object value = responseBean.getValue();\n+    if (value instanceof List) {\n+      List<Object> valueList = (ArrayList<Object>) value;\n+      for (int i = 0; i < valueList.size(); i++) {\n+        Object valuObj = valueList.get(i);\n+        if (valuObj instanceof List) {\n+          List<HashMap> objListMap = (ArrayList<HashMap>) valuObj;\n+          Gson gson = new Gson();\n+          for (HashMap valueObjMap : objListMap) {\n+            String json = gson.toJson(valueObjMap, Map.class);\n+            QuestionnaireActivityStepsBean valueBean =\n+                gson.fromJson(json, QuestionnaireActivityStepsBean.class);\n+            plugInMetadataToResponses(activityMetadataBeanFromWCP, valueBean, true);\n+            valueResponseBeanList.add(valueBean);\n+          }\n+        }\n+      }\n+    }\n+    activityValueGroupBeanRet.setValueGroup(valueResponseBeanList);\n+    return activityValueGroupBeanRet;\n+  }\n+\n+  private void plugInMetadataToResponses(\n+      List<QuestionnaireActivityStepsBean> activityMetadataBeanFromWCP,\n+      QuestionnaireActivityStepsBean responseBean,\n+      boolean fromGrouped) {\n+    List<QuestionnaireActivityStepsBean> metadataMatchList = null;\n+\n+    String questionKey = responseBean.getKey();\n+    if (fromGrouped) {\n+      for (QuestionnaireActivityStepsBean stepBean : activityMetadataBeanFromWCP) {\n+        List<QuestionnaireActivityStepsBean> stepsBean = stepBean.getSteps();\n+        metadataMatchList =\n+            stepsBean\n+                .stream()\n+                .filter(QuestionnaireActivityStepsBeanPredicate.questionKeyMatch(questionKey))\n+                .collect(Collectors.<QuestionnaireActivityStepsBean>toList());\n+        if (metadataMatchList != null && metadataMatchList.size() > 0) {\n+          break;\n+        }\n+      }\n+    } else {\n+      metadataMatchList =\n+          activityMetadataBeanFromWCP\n+              .stream()\n+              .filter(QuestionnaireActivityStepsBeanPredicate.questionKeyMatch(questionKey))\n+              .collect(Collectors.<QuestionnaireActivityStepsBean>toList());\n+    }\n+    if (metadataMatchList != null) {\n+      for (QuestionnaireActivityStepsBean metadataMatchBean : metadataMatchList) {\n+        responseBean.setSkippable(metadataMatchBean.getSkippable());\n+        responseBean.setText(metadataMatchBean.getText());\n+        responseBean.setTitle(metadataMatchBean.getTitle());\n+      }\n+    }\n+  }\n+\n+  private void saveActivityResponseData(\n+      ActivityResponseBean questionnaireActivityResponseBean, String rawResponseData)\n+      throws ProcessResponseException {\n+    try {\n+\n+      // Add Timestamp to bean\n+      questionnaireActivityResponseBean.setCreatedTimestamp(\n+          String.valueOf(System.currentTimeMillis()));\n+      Map<String, Object> dataToStoreActivityResults =\n+          this.getHashMapForBean(questionnaireActivityResponseBean.getMetadata());\n+      dataToStoreActivityResults.remove(AppConstants.DATA_FIELD_KEY);\n+\n+      List<QuestionnaireActivityStepsBean> questionnaireResponses =\n+          questionnaireActivityResponseBean.getData().getResults();\n+      List<Map<String, Object>> stepsList = new ArrayList<Map<String, Object>>();\n+      for (QuestionnaireActivityStepsBean tmpBean : questionnaireResponses) {\n+        Map<String, Object> dataToStoreTemp = getHashMapForBean(tmpBean);\n+        stepsList.add(dataToStoreTemp);\n+      }\n+      dataToStoreActivityResults.put(AppConstants.RESULTS_FIELD_KEY, stepsList);\n+      this.addParticipantDataToMap(questionnaireActivityResponseBean, dataToStoreActivityResults);\n+      if (rawResponseData != null) {\n+        // Store raw response data\n+        dataToStoreActivityResults.put(AppConstants.RAW_RESPONSE_FIELD_KEY, rawResponseData);\n+      }\n+      dataToStoreActivityResults.put(\n+          AppConstants.CREATED_TS_KEY, questionnaireActivityResponseBean.getCreatedTimestamp());\n+\n+      String studyId = questionnaireActivityResponseBean.getMetadata().getStudyId();\n+\n+      String studyCollectionName = AppUtil.makeStudyCollectionName(studyId);\n+      logger.info(\"saveActivityResponseData() : \\n Study Collection Name: \" + studyCollectionName);\n+      responsesDao.saveActivityResponseData(\n+          studyId,\n+          studyCollectionName,\n+          AppConstants.ACTIVITIES_COLLECTION_NAME,\n+          dataToStoreActivityResults);\n+      logger.info(\"saveActivityResponseData() : \\n Study Collection Name: \" + studyCollectionName);\n+\n+    } catch (Exception e) {\n+      logger.error(e.getMessage(), e);\n+      throw new ProcessResponseException(e.getMessage());\n+    }\n+  }\n+\n+  private Map<String, Object> getMapForParticipantCollection(\n+      ActivityResponseBean questionnaireActivityResponseBean) {\n+    Map<String, Object> dataToStoreParticipantCollMap = new HashMap<String, Object>();\n+    dataToStoreParticipantCollMap.put(\n+        AppConstants.PARTICIPANT_ID_KEY, questionnaireActivityResponseBean.getParticipantId());\n+    dataToStoreParticipantCollMap.put(\n+        AppConstants.SITE_ID_KEY, questionnaireActivityResponseBean.getSiteId());\n+    dataToStoreParticipantCollMap.put(\n+        AppConstants.SHARING_CONSENT_KEY, questionnaireActivityResponseBean.getSharingConsent());\n+    dataToStoreParticipantCollMap.put(\n+        AppConstants.CREATED_TS_KEY, questionnaireActivityResponseBean.getCreatedTimestamp());\n+    return dataToStoreParticipantCollMap;\n+  }\n+\n+  private void addParticipantDataToMap(\n+      ActivityResponseBean questionnaireActivityResponseBean,\n+      Map<String, Object> dataToStoreActivityResults) {\n+\n+    dataToStoreActivityResults.put(\n+        AppConstants.PARTICIPANT_ID_KEY, questionnaireActivityResponseBean.getParticipantId());\n+    dataToStoreActivityResults.put(\n+        AppConstants.SITE_ID_KEY, questionnaireActivityResponseBean.getSiteId());\n+    dataToStoreActivityResults.put(\n+        AppConstants.SHARING_CONSENT_KEY, questionnaireActivityResponseBean.getSharingConsent());\n+    dataToStoreActivityResults.put(\n+        AppConstants.CREATED_TS_KEY, questionnaireActivityResponseBean.getCreatedTimestamp());\n+  }\n+\n+  private String getRawJsonInputData(Object argBean) {\n+    try {\n+      Gson gson = new Gson();\n+      return gson.toJson(argBean);\n+    } catch (Exception ex) {\n+      logger.error(\"Could not convert bean to Json data. \\n Exception \" + ex.getMessage());\n+      // This error should not stop processing of the bean, for save. So returning empty data\n+      return AppConstants.EMPTY_STR;\n+    }\n+  }\n+\n+  private Map<String, Object> getHashMapForBean(Object bean) throws Exception {\n+    BeanInfo beanInfo;\n+    beanInfo = Introspector.getBeanInfo(bean.getClass());\n+    PropertyDescriptor[] propDescriptor = beanInfo.getPropertyDescriptors();\n+    Map<String, Object> dataToStore = new HashMap<>();\n+    GsonBuilder gsonBuilder = new GsonBuilder();\n+    Gson gson = gsonBuilder.create();\n+    List<Map<String, Object>> stepsList = new ArrayList<Map<String, Object>>();\n+    for (PropertyDescriptor pd : propDescriptor) {\n+      String propertyName = pd.getName();\n+      if (!propertyName.equals(AppConstants.PROPERTY_NAME_CLASS)) {\n+        Method getterMethod = pd.getReadMethod();\n+        try {\n+          Object propertyValue = getterMethod.invoke(bean);\n+          if (!(propertyValue instanceof String)) {\n+            if (propertyValue instanceof ActivityValueGroupBean\n+                || propertyValue instanceof ActivityMetadataBean) {\n+              dataToStore.put(propertyName, getHashMapForBean(propertyValue));\n+            } else if (propertyValue instanceof List) {\n+              try {\n+                ArrayList<Object> pValueList = (ArrayList<Object>) propertyValue;\n+                for (Object valueObj : pValueList) {\n+                  if (valueObj instanceof QuestionnaireActivityStepsBean) {\n+                    Map<String, Object> tempMap = getHashMapForBean(valueObj);\n+                    stepsList.add(tempMap);\n+                  } else if (valueObj instanceof String) {\n+                    if (valueObj != null) {\n+                      dataToStore.put(propertyName, valueObj);\n+                    }\n+                  } else {\n+                    propertyValue = gson.toJson(valueObj);\n+                    dataToStore.put(propertyName, propertyValue);\n+                  }\n+                  if (stepsList != null && !stepsList.isEmpty()) {\n+                    dataToStore.put(AppConstants.RESULTS_FIELD_KEY, stepsList);\n+                  }\n+                }\n+              } catch (ClassCastException ce) {\n+                propertyValue = gson.toJson(propertyValue);\n+                dataToStore.put(propertyName, getHashMapForBean(propertyValue));\n+              }\n+            } else {\n+              propertyValue = gson.toJson(propertyValue);\n+              dataToStore.put(propertyName, propertyValue);\n+            }\n+          } else {\n+            if (propertyValue != null) {\n+              dataToStore.put(propertyName, propertyValue);\n+            }\n+          }\n+          logger.debug(\n+              \"getHashMapForBean() : \\n Property Name: \"\n+                  + propertyName\n+                  + \"\\t Propert Value : \"\n+                  + propertyValue);\n+        } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {\n+          logger.error(e.getMessage(), e);\n+          throw new ProcessResponseException(e.getMessage());\n+        }\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7064c5438adbea0bf49bac4712489b11dc84864e"}, "originalPosition": 344}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODQ1MjQwOnYy", "diffSide": "RIGHT", "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudyMetadataServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzoxODowN1rOF4t7yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDo0NjowNlrOF6zuKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxNzE2Mg==", "bodyText": "remove", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395017162", "createdAt": "2020-03-19T13:18:07Z", "author": {"login": "zohrehj"}, "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudyMetadataServiceImpl.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/**\n+ * ***************************************************************************** Copyright 2020\n+ * Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * ****************************************************************************\n+ */\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import java.beans.BeanInfo;\n+import java.beans.IntrospectionException;\n+import java.beans.Introspector;\n+import java.beans.PropertyDescriptor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Service;\n+import org.springframework.web.client.RestTemplate;\n+import org.springframework.web.util.UriComponentsBuilder;\n+import com.google.cloud.healthcare.fdamystudies.bean.QuestionnaireActivityMetaDataBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.QuestionnaireActivityStructureBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyActivityMetadataRequestBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyMetadataBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.dao.ResponsesDao;\n+import com.google.cloud.healthcare.fdamystudies.utils.AppConstants;\n+import com.google.cloud.healthcare.fdamystudies.utils.AppUtil;\n+import com.google.cloud.healthcare.fdamystudies.utils.ProcessResponseException;\n+\n+@Service\n+public class StudyMetadataServiceImpl implements StudyMetadataService {\n+  @Autowired private RestTemplate restTemplate;\n+  @Autowired private ApplicationConfiguration appConfig;\n+\n+  @Autowired\n+  @Qualifier(\"cloudFirestoreResponsesDaoImpl\")\n+  // @Qualifier(\"fileResponsesDaoImpl\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7064c5438adbea0bf49bac4712489b11dc84864e"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwOTEzMA==", "bodyText": "Done", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r397209130", "createdAt": "2020-03-24T14:46:06Z", "author": {"login": "ranjanirao20"}, "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudyMetadataServiceImpl.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/**\n+ * ***************************************************************************** Copyright 2020\n+ * Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * ****************************************************************************\n+ */\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import java.beans.BeanInfo;\n+import java.beans.IntrospectionException;\n+import java.beans.Introspector;\n+import java.beans.PropertyDescriptor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Service;\n+import org.springframework.web.client.RestTemplate;\n+import org.springframework.web.util.UriComponentsBuilder;\n+import com.google.cloud.healthcare.fdamystudies.bean.QuestionnaireActivityMetaDataBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.QuestionnaireActivityStructureBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyActivityMetadataRequestBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyMetadataBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.dao.ResponsesDao;\n+import com.google.cloud.healthcare.fdamystudies.utils.AppConstants;\n+import com.google.cloud.healthcare.fdamystudies.utils.AppUtil;\n+import com.google.cloud.healthcare.fdamystudies.utils.ProcessResponseException;\n+\n+@Service\n+public class StudyMetadataServiceImpl implements StudyMetadataService {\n+  @Autowired private RestTemplate restTemplate;\n+  @Autowired private ApplicationConfiguration appConfig;\n+\n+  @Autowired\n+  @Qualifier(\"cloudFirestoreResponsesDaoImpl\")\n+  // @Qualifier(\"fileResponsesDaoImpl\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxNzE2Mg=="}, "originalCommit": {"oid": "7064c5438adbea0bf49bac4712489b11dc84864e"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODQ1NzQyOnYy", "diffSide": "RIGHT", "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/utils/AuthenticationFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzoxOTozMlrOF4t_Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDo0NjoxN1rOF6zutQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxNzk5NA==", "bodyText": "nit: you have APPLICATION_ID_HEADER as constant, why not move these to constants as well?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395017994", "createdAt": "2020-03-19T13:19:32Z", "author": {"login": "zohrehj"}, "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/utils/AuthenticationFilter.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * ***************************************************************************** Copyright 2020\n+ * Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * ****************************************************************************\n+ */\n+package com.google.cloud.healthcare.fdamystudies.utils;\n+\n+import java.io.IOException;\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonServiceImpl;\n+\n+@Component\n+public class AuthenticationFilter implements Filter {\n+\n+  private static Logger logger = LoggerFactory.getLogger(AuthenticationFilter.class);\n+\n+  @Override\n+  public void init(final FilterConfig filterConfig) throws ServletException {\n+    logger.info(\"Initializing filter :{}\", this);\n+  }\n+\n+  @Override\n+  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n+      throws IOException, ServletException {\n+    HttpServletRequest httpServletRequest = (HttpServletRequest) request;\n+    HttpServletResponse httpServletResponse = (HttpServletResponse) response;\n+    if (request instanceof HttpServletRequest) {\n+      if (!AppConstants.OPTIONS_METHOD.equalsIgnoreCase(httpServletRequest.getMethod())) {\n+        String userId = httpServletRequest.getHeader(AppConstants.USER_ID_KEY);\n+        String accessToken = httpServletRequest.getHeader(AppConstants.ACCESS_TOKEN_KEY);\n+        String clientToken = httpServletRequest.getHeader(AppConstants.CLIENT_TOKEN_KEY);\n+        Integer value = null;\n+        boolean isValid = false;\n+        boolean isInterceptorURL = false;\n+        boolean isServerApiUrl = false;\n+        String appMessage = \"\";\n+        ApplicationConfiguration applicationConfiguration =\n+            BeanUtil.getBean(ApplicationConfiguration.class);\n+        String interceptorURL = applicationConfiguration.getInterceptorUrls();\n+        String serverApiUrls = applicationConfiguration.getServerApiUrls();\n+        String uri = ((HttpServletRequest) request).getRequestURI();\n+        String[] list = interceptorURL.split(\",\");\n+        for (int i = 0; i < list.length; i++) {\n+          if (uri.endsWith(list[i].trim())) {\n+            isInterceptorURL = true;\n+            break;\n+          }\n+        }\n+        if (!isInterceptorURL) {\n+          String[] listServerApiUrls = serverApiUrls.split(\",\");\n+          for (int i = 0; i < listServerApiUrls.length; i++) {\n+            if (uri.endsWith(listServerApiUrls[i].trim())) {\n+              isServerApiUrl = true;\n+              break;\n+            }\n+          }\n+        }\n+        if (isInterceptorURL) {\n+          httpServletResponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n+          httpServletResponse.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n+          httpServletResponse.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n+          httpServletResponse.setHeader(\n+              \"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS, HEAD\");\n+          chain.doFilter(request, response);\n+        } else if (isServerApiUrl) {\n+          String applicationId = httpServletRequest.getHeader(AppConstants.APPLICATION_ID_HEADER);\n+          String clientId = httpServletRequest.getHeader(AppConstants.CLIENT_ID_PARAM);\n+          String clientSecret = httpServletRequest.getHeader(AppConstants.CLIENT_SECRET_PARAM);\n+          CommonServiceImpl commonService = BeanUtil.getBean(CommonServiceImpl.class);\n+          boolean isAllowed =\n+              commonService.validateServerClientCredentials(applicationId, clientId, clientSecret);\n+          if (isAllowed) {\n+            httpServletResponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7064c5438adbea0bf49bac4712489b11dc84864e"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwOTI2OQ==", "bodyText": "Done", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r397209269", "createdAt": "2020-03-24T14:46:17Z", "author": {"login": "ranjanirao20"}, "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/utils/AuthenticationFilter.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * ***************************************************************************** Copyright 2020\n+ * Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * ****************************************************************************\n+ */\n+package com.google.cloud.healthcare.fdamystudies.utils;\n+\n+import java.io.IOException;\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonServiceImpl;\n+\n+@Component\n+public class AuthenticationFilter implements Filter {\n+\n+  private static Logger logger = LoggerFactory.getLogger(AuthenticationFilter.class);\n+\n+  @Override\n+  public void init(final FilterConfig filterConfig) throws ServletException {\n+    logger.info(\"Initializing filter :{}\", this);\n+  }\n+\n+  @Override\n+  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n+      throws IOException, ServletException {\n+    HttpServletRequest httpServletRequest = (HttpServletRequest) request;\n+    HttpServletResponse httpServletResponse = (HttpServletResponse) response;\n+    if (request instanceof HttpServletRequest) {\n+      if (!AppConstants.OPTIONS_METHOD.equalsIgnoreCase(httpServletRequest.getMethod())) {\n+        String userId = httpServletRequest.getHeader(AppConstants.USER_ID_KEY);\n+        String accessToken = httpServletRequest.getHeader(AppConstants.ACCESS_TOKEN_KEY);\n+        String clientToken = httpServletRequest.getHeader(AppConstants.CLIENT_TOKEN_KEY);\n+        Integer value = null;\n+        boolean isValid = false;\n+        boolean isInterceptorURL = false;\n+        boolean isServerApiUrl = false;\n+        String appMessage = \"\";\n+        ApplicationConfiguration applicationConfiguration =\n+            BeanUtil.getBean(ApplicationConfiguration.class);\n+        String interceptorURL = applicationConfiguration.getInterceptorUrls();\n+        String serverApiUrls = applicationConfiguration.getServerApiUrls();\n+        String uri = ((HttpServletRequest) request).getRequestURI();\n+        String[] list = interceptorURL.split(\",\");\n+        for (int i = 0; i < list.length; i++) {\n+          if (uri.endsWith(list[i].trim())) {\n+            isInterceptorURL = true;\n+            break;\n+          }\n+        }\n+        if (!isInterceptorURL) {\n+          String[] listServerApiUrls = serverApiUrls.split(\",\");\n+          for (int i = 0; i < listServerApiUrls.length; i++) {\n+            if (uri.endsWith(listServerApiUrls[i].trim())) {\n+              isServerApiUrl = true;\n+              break;\n+            }\n+          }\n+        }\n+        if (isInterceptorURL) {\n+          httpServletResponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n+          httpServletResponse.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n+          httpServletResponse.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n+          httpServletResponse.setHeader(\n+              \"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS, HEAD\");\n+          chain.doFilter(request, response);\n+        } else if (isServerApiUrl) {\n+          String applicationId = httpServletRequest.getHeader(AppConstants.APPLICATION_ID_HEADER);\n+          String clientId = httpServletRequest.getHeader(AppConstants.CLIENT_ID_PARAM);\n+          String clientSecret = httpServletRequest.getHeader(AppConstants.CLIENT_SECRET_PARAM);\n+          CommonServiceImpl commonService = BeanUtil.getBean(CommonServiceImpl.class);\n+          boolean isAllowed =\n+              commonService.validateServerClientCredentials(applicationId, clientId, clientSecret);\n+          if (isAllowed) {\n+            httpServletResponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxNzk5NA=="}, "originalCommit": {"oid": "7064c5438adbea0bf49bac4712489b11dc84864e"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODQ2MDYxOnYy", "diffSide": "RIGHT", "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/utils/AuthenticationFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzoyMDoyMlrOF4uBLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzoyMDoyMlrOF4uBLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxODU0Mw==", "bodyText": "this is repeated across the class, consider moving to a method", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395018543", "createdAt": "2020-03-19T13:20:22Z", "author": {"login": "zohrehj"}, "path": "response-server-ws/src/main/java/com/google/cloud/healthcare/fdamystudies/utils/AuthenticationFilter.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * ***************************************************************************** Copyright 2020\n+ * Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * ****************************************************************************\n+ */\n+package com.google.cloud.healthcare.fdamystudies.utils;\n+\n+import java.io.IOException;\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonServiceImpl;\n+\n+@Component\n+public class AuthenticationFilter implements Filter {\n+\n+  private static Logger logger = LoggerFactory.getLogger(AuthenticationFilter.class);\n+\n+  @Override\n+  public void init(final FilterConfig filterConfig) throws ServletException {\n+    logger.info(\"Initializing filter :{}\", this);\n+  }\n+\n+  @Override\n+  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n+      throws IOException, ServletException {\n+    HttpServletRequest httpServletRequest = (HttpServletRequest) request;\n+    HttpServletResponse httpServletResponse = (HttpServletResponse) response;\n+    if (request instanceof HttpServletRequest) {\n+      if (!AppConstants.OPTIONS_METHOD.equalsIgnoreCase(httpServletRequest.getMethod())) {\n+        String userId = httpServletRequest.getHeader(AppConstants.USER_ID_KEY);\n+        String accessToken = httpServletRequest.getHeader(AppConstants.ACCESS_TOKEN_KEY);\n+        String clientToken = httpServletRequest.getHeader(AppConstants.CLIENT_TOKEN_KEY);\n+        Integer value = null;\n+        boolean isValid = false;\n+        boolean isInterceptorURL = false;\n+        boolean isServerApiUrl = false;\n+        String appMessage = \"\";\n+        ApplicationConfiguration applicationConfiguration =\n+            BeanUtil.getBean(ApplicationConfiguration.class);\n+        String interceptorURL = applicationConfiguration.getInterceptorUrls();\n+        String serverApiUrls = applicationConfiguration.getServerApiUrls();\n+        String uri = ((HttpServletRequest) request).getRequestURI();\n+        String[] list = interceptorURL.split(\",\");\n+        for (int i = 0; i < list.length; i++) {\n+          if (uri.endsWith(list[i].trim())) {\n+            isInterceptorURL = true;\n+            break;\n+          }\n+        }\n+        if (!isInterceptorURL) {\n+          String[] listServerApiUrls = serverApiUrls.split(\",\");\n+          for (int i = 0; i < listServerApiUrls.length; i++) {\n+            if (uri.endsWith(listServerApiUrls[i].trim())) {\n+              isServerApiUrl = true;\n+              break;\n+            }\n+          }\n+        }\n+        if (isInterceptorURL) {\n+          httpServletResponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n+          httpServletResponse.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n+          httpServletResponse.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n+          httpServletResponse.setHeader(\n+              \"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS, HEAD\");\n+          chain.doFilter(request, response);\n+        } else if (isServerApiUrl) {\n+          String applicationId = httpServletRequest.getHeader(AppConstants.APPLICATION_ID_HEADER);\n+          String clientId = httpServletRequest.getHeader(AppConstants.CLIENT_ID_PARAM);\n+          String clientSecret = httpServletRequest.getHeader(AppConstants.CLIENT_SECRET_PARAM);\n+          CommonServiceImpl commonService = BeanUtil.getBean(CommonServiceImpl.class);\n+          boolean isAllowed =\n+              commonService.validateServerClientCredentials(applicationId, clientId, clientSecret);\n+          if (isAllowed) {\n+            httpServletResponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n+            httpServletResponse.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n+            httpServletResponse.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n+            httpServletResponse.setHeader(\n+                \"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS, HEAD\");\n+            chain.doFilter(request, response);\n+          } else {\n+            if (response instanceof HttpServletResponse) {\n+              httpServletResponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n+              httpServletResponse.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n+              httpServletResponse.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n+              httpServletResponse.setHeader(\n+                  \"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS, HEAD\");\n+              httpServletResponse.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n+            }\n+          }\n+        } else {\n+          if ((accessToken != null)\n+              && !StringUtils.isEmpty(accessToken)\n+              && (userId != null)\n+              && !StringUtils.isEmpty(userId)\n+              && (null != clientToken)\n+              && !StringUtils.isEmpty(clientToken)) {\n+            CommonService commonService = BeanUtil.getBean(CommonService.class);\n+            value = commonService.validateAccessToken(userId, accessToken, clientToken);\n+            if (value != null && value.intValue() == 1) {\n+              httpServletResponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n+              httpServletResponse.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n+              httpServletResponse.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n+              httpServletResponse.setHeader(\n+                  \"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS, HEAD\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7064c5438adbea0bf49bac4712489b11dc84864e"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODQ3NzAwOnYy", "diffSide": "RIGHT", "path": "response-server-ws/src/main/resources/log4j2.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzoyNDoyMFrOF4uLWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDo0NjozOVrOF6zvxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAyMTE0Ng==", "bodyText": "I don't think we need copyright on these properties files", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395021146", "createdAt": "2020-03-19T13:24:20Z", "author": {"login": "zohrehj"}, "path": "response-server-ws/src/main/resources/log4j2.xml", "diffHunk": "@@ -0,0 +1,58 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!-- Copyright 2020 Google LLC \n+Use of this source code is governed by an MIT-style\n+license that can be found in the LICENSE file or at \n+https://opensource.org/licenses/MIT.  -->\n+<Configuration status=\"WARN\" monitorInterval=\"30\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7064c5438adbea0bf49bac4712489b11dc84864e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwOTU0Mw==", "bodyText": "Removed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r397209543", "createdAt": "2020-03-24T14:46:39Z", "author": {"login": "ranjanirao20"}, "path": "response-server-ws/src/main/resources/log4j2.xml", "diffHunk": "@@ -0,0 +1,58 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!-- Copyright 2020 Google LLC \n+Use of this source code is governed by an MIT-style\n+license that can be found in the LICENSE file or at \n+https://opensource.org/licenses/MIT.  -->\n+<Configuration status=\"WARN\" monitorInterval=\"30\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAyMTE0Ng=="}, "originalCommit": {"oid": "7064c5438adbea0bf49bac4712489b11dc84864e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTY5OTYwOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/MyStudiesUserRegWsApplication.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODowODo1OFrOF46jOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODowODo1OFrOF46jOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyMzg2Nw==", "bodyText": "please add Google copyright to new files", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395223867", "createdAt": "2020-03-19T18:08:58Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/MyStudiesUserRegWsApplication.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.google.cloud.healthcare.fdamystudies;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTcwMTU0OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/bean/BodyForProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODowOTozN1rOF46klA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODowOTozN1rOF46klA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyNDIxMg==", "bodyText": "please do not add Author info.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395224212", "createdAt": "2020-03-19T18:09:37Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/bean/BodyForProvider.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/** */\n+package com.google.cloud.healthcare.fdamystudies.bean;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+\n+/**\n+ * Project Name: UserManagementServiceBundle\n+ *\n+ * @author Chiranjibi Dash\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTcwMjEwOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/bean/BodyForProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODowOTo0OFrOF46k_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODowOTo0OFrOF46k_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyNDMxNg==", "bodyText": "missing copyright header", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395224316", "createdAt": "2020-03-19T18:09:48Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/bean/BodyForProvider.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/** */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTcwNjY5OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/AppConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoxMToxNVrOF46oCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoxMToxNVrOF46oCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyNTA5Nw==", "bodyText": "remove commented code.\nIs this class needed?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395225097", "createdAt": "2020-03-19T18:11:15Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/AppConfig.java", "diffHunk": "@@ -0,0 +1,13 @@\n+/** */\n+package com.google.cloud.healthcare.fdamystudies.config;\n+\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+public class AppConfig {\n+\n+  /* @Bean\n+  public RestTemplate restTemplate() {\n+    return new RestTemplate();\n+  }*/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTcwNzY5OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/ApplicationPropertyConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoxMTozMlrOF46orQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoxMTozMlrOF46orQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyNTI2MQ==", "bodyText": "please remove", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395225261", "createdAt": "2020-03-19T18:11:32Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/ApplicationPropertyConfiguration.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package com.google.cloud.healthcare.fdamystudies.config;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.PropertySource;\n+import lombok.ToString;\n+\n+@Configuration\n+// @PropertySource(\"classpath:application-${spring.profiles.active}.properties\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTcwODg4OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/BeanConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoxMTo1NlrOF46phQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoxMTo1NlrOF46phQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyNTQ3Nw==", "bodyText": "remove commented code", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395225477", "createdAt": "2020-03-19T18:11:56Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/BeanConfig.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.google.cloud.healthcare.fdamystudies.config;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.web.servlet.FilterRegistrationBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.web.client.RestTemplate;\n+import org.springframework.web.servlet.config.annotation.CorsRegistry;\n+import org.springframework.web.servlet.config.annotation.EnableWebMvc;\n+import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n+import com.google.cloud.healthcare.fdamystudies.utils.AuthenticationFilter;\n+\n+@EnableScheduling\n+@Configuration\n+@EnableWebMvc\n+public class BeanConfig implements WebMvcConfigurer {\n+\n+  @Autowired ApplicationPropertyConfiguration appConfig;\n+\n+  /*  @Bean\n+  public EmailNotification emailNotification() {\n+    return new EmailNotification(appConfig);\n+  }*/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTcwOTUzOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/BeanConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoxMjowN1rOF46p6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoxMjowN1rOF46p6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyNTU3Ng==", "bodyText": "same here", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395225576", "createdAt": "2020-03-19T18:12:07Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/BeanConfig.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.google.cloud.healthcare.fdamystudies.config;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.web.servlet.FilterRegistrationBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.web.client.RestTemplate;\n+import org.springframework.web.servlet.config.annotation.CorsRegistry;\n+import org.springframework.web.servlet.config.annotation.EnableWebMvc;\n+import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n+import com.google.cloud.healthcare.fdamystudies.utils.AuthenticationFilter;\n+\n+@EnableScheduling\n+@Configuration\n+@EnableWebMvc\n+public class BeanConfig implements WebMvcConfigurer {\n+\n+  @Autowired ApplicationPropertyConfiguration appConfig;\n+\n+  /*  @Bean\n+  public EmailNotification emailNotification() {\n+    return new EmailNotification(appConfig);\n+  }*/\n+\n+  @Bean\n+  public WebMvcConfigurer corsConfigurer() {\n+    return new WebMvcConfigurer() {\n+      @Override\n+      public void addCorsMappings(CorsRegistry registry) {\n+        registry.addMapping(\"/**\").allowedOrigins(\"*\").allowedHeaders(\"*\").allowedMethods(\"*\");\n+        //            \t.exposedHeaders(\"\");\n+        //            \t.allowedHeaders(\"*\")\n+        //            \t.allowedMethods(\"*\");\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTcxMDQ4OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/BeanConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoxMjoyNVrOF46qjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoxMjoyNVrOF46qjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyNTc0Mg==", "bodyText": "remove", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395225742", "createdAt": "2020-03-19T18:12:25Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/BeanConfig.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.google.cloud.healthcare.fdamystudies.config;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.web.servlet.FilterRegistrationBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.web.client.RestTemplate;\n+import org.springframework.web.servlet.config.annotation.CorsRegistry;\n+import org.springframework.web.servlet.config.annotation.EnableWebMvc;\n+import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n+import com.google.cloud.healthcare.fdamystudies.utils.AuthenticationFilter;\n+\n+@EnableScheduling\n+@Configuration\n+@EnableWebMvc\n+public class BeanConfig implements WebMvcConfigurer {\n+\n+  @Autowired ApplicationPropertyConfiguration appConfig;\n+\n+  /*  @Bean\n+  public EmailNotification emailNotification() {\n+    return new EmailNotification(appConfig);\n+  }*/\n+\n+  @Bean\n+  public WebMvcConfigurer corsConfigurer() {\n+    return new WebMvcConfigurer() {\n+      @Override\n+      public void addCorsMappings(CorsRegistry registry) {\n+        registry.addMapping(\"/**\").allowedOrigins(\"*\").allowedHeaders(\"*\").allowedMethods(\"*\");\n+        //            \t.exposedHeaders(\"\");\n+        //            \t.allowedHeaders(\"*\")\n+        //            \t.allowedMethods(\"*\");\n+      }\n+    };\n+  }\n+\n+  @Bean\n+  public FilterRegistrationBean<AuthenticationFilter> loggingFilter() {\n+    FilterRegistrationBean<AuthenticationFilter> authenticationBean =\n+        new FilterRegistrationBean<>();\n+    authenticationBean.setFilter(new AuthenticationFilter());\n+    authenticationBean.addUrlPatterns(\"/*\");\n+    //\t     authenticationBean.addUrlPatterns(\"/admin/manageUser/*\");\n+    //\t     authenticationBean.addUrlPatterns(\"/search/*\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTcxMTgxOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/WebSecurityConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoxMjo0OVrOF46rdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoxMjo0OVrOF46rdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyNTk3Mg==", "bodyText": "please remove commented code", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395225972", "createdAt": "2020-03-19T18:12:49Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/WebSecurityConfig.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package com.google.cloud.healthcare.fdamystudies.config;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.builders.WebSecurity;\n+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\n+import org.springframework.security.web.AuthenticationEntryPoint;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+\n+@Configuration\n+@EnableWebSecurity\n+public class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n+\n+  @Autowired private AuthenticationEntryPoint authEntryPoint;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @Override\n+  protected void configure(HttpSecurity http) throws Exception {\n+    http.csrf().disable();\n+    http.cors();\n+    //\t\t// All requests send to the Web Server request must be authenticated\n+    //\t\thttp.authorizeRequests().anyRequest().authenticated();\n+    //\n+    //\t\t// Use AuthenticationEntryPoint to authenticate user/password\n+    //\t\thttp.httpBasic().authenticationEntryPoint(authEntryPoint);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTcxNTAwOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/UserConsentManagementController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoxMzo0MlrOF46tgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoxMzo0MlrOF46tgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyNjQ5Ng==", "bodyText": "this is repeated a lot. Can it be extracted somehow?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395226496", "createdAt": "2020-03-19T18:13:42Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/UserConsentManagementController.java", "diffHunk": "@@ -0,0 +1,307 @@\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+import org.apache.tomcat.util.codec.binary.Base64;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.util.StringUtils;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestHeader;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.AppUtil;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.utils.MyStudiesUserRegUtil;\n+\n+@RestController\n+public class UserConsentManagementController {\n+\n+  @Autowired private UserConsentManagementService userConsentManagementService;\n+\n+  @Autowired CommonService commonService;\n+\n+  @Autowired ApplicationPropertyConfiguration appConfig;\n+\n+  @Autowired private FileStorageService cloudStorageService;\n+\n+  private static final Logger logger =\n+      LoggerFactory.getLogger(UserConsentManagementController.class);\n+\n+  @RequestMapping(value = \"/ping\")\n+  public String ping() {\n+    logger.info(\" UserConsentManagementController - ping()  \");\n+    return \"Mystudies UserRegistration Webservice Started !!!\";\n+  }\n+\n+  @PostMapping(\n+      value = \"/updateEligibilityConsentStatus\",\n+      consumes = \"application/json\",\n+      produces = \"application/json\")\n+  public ResponseEntity<?> updateEligibilityConsentStatus(\n+      @RequestHeader(\"userId\") String userId,\n+      @RequestBody ConsentStatusBean consentStatusBean,\n+      @Context HttpServletResponse response) {\n+    logger.info(\"UserConsentManagementController updateEligibilityConsentStatus() - starts \");\n+    ErrorBean errorBean = null;\n+    StudyInfoBean studyInfoBean = null;\n+    Integer userDetailId = 0;\n+    try {\n+      if ((consentStatusBean != null)\n+          && (consentStatusBean.getConsent() != null)\n+          && ((consentStatusBean.getConsent().getVersion() != null)\n+              && (consentStatusBean.getConsent().getPdf() != null))\n+          && (consentStatusBean.getConsent().getStatus() != null)) {\n+        if ((consentStatusBean.getStudyId() != null)\n+            && !StringUtils.isEmpty(consentStatusBean.getStudyId())\n+            && (userId != null)\n+            && !StringUtils.isEmpty(userId)) {\n+          studyInfoBean =\n+              userConsentManagementService.getStudyInfoId(consentStatusBean.getStudyId());\n+          ParticipantStudiesBO participantStudies =\n+              userConsentManagementService.getParticipantStudies(\n+                  studyInfoBean.getStudyInfoId(), userId);\n+          if (participantStudies != null) {\n+            if (consentStatusBean.getEligibility() != null) {\n+              participantStudies.setEligbibility(consentStatusBean.getEligibility());\n+            }\n+            if ((consentStatusBean.getSharing() != null)\n+                && !StringUtils.isEmpty(consentStatusBean.getSharing())) {\n+              participantStudies.setSharing(consentStatusBean.getSharing());\n+            }\n+            List<ParticipantStudiesBO> participantStudiesList =\n+                new ArrayList<ParticipantStudiesBO>();\n+            participantStudiesList.add(participantStudies);\n+            String message =\n+                userConsentManagementService.saveParticipantStudies(participantStudiesList);\n+\n+            StudyConsentBO studyConsent = null;\n+            if ((consentStatusBean.getConsent().getVersion() != null)\n+                && !StringUtils.isEmpty(consentStatusBean.getConsent().getVersion())) {\n+              studyConsent =\n+                  userConsentManagementService.getStudyConsent(\n+                      userId,\n+                      studyInfoBean.getStudyInfoId(),\n+                      consentStatusBean.getConsent().getVersion());\n+              userDetailId = userConsentManagementService.getUserDetailsId(userId);\n+              if (studyConsent != null) {\n+                if ((consentStatusBean.getConsent().getVersion() != null)\n+                    && !StringUtils.isEmpty(consentStatusBean.getConsent().getVersion())) {\n+                  studyConsent.setVersion(consentStatusBean.getConsent().getVersion());\n+                }\n+                if ((consentStatusBean.getConsent().getStatus() != null)\n+                    && !StringUtils.isEmpty(consentStatusBean.getConsent().getStatus())) {\n+                  studyConsent.setStatus(consentStatusBean.getConsent().getStatus());\n+                }\n+                if ((consentStatusBean.getConsent().getPdf() != null)\n+                    && !StringUtils.isEmpty(consentStatusBean.getConsent().getPdf())) {\n+                  String underDirectory = userId + \"/\" + consentStatusBean.getStudyId();\n+                  String fileName =\n+                      userId\n+                          + \"_\"\n+                          + consentStatusBean.getStudyId()\n+                          + \"_\"\n+                          + consentStatusBean.getConsent().getVersion()\n+                          + \"_\"\n+                          + new SimpleDateFormat(\"MMddyyyyHHmmss\").format(new Date())\n+                          + \".pdf\";\n+                  String content = consentStatusBean.getConsent().getPdf();\n+\n+                  String path = cloudStorageService.saveFile(fileName, content, underDirectory);\n+                  // String path = saveStudyConsentDocument(studyConsent);\n+                  studyConsent.setPdfPath(path);\n+                  studyConsent.setPdfStorage(1);\n+                }\n+                studyConsent.setUserId(userDetailId);\n+                studyConsent.setStudyInfoId(studyInfoBean.getStudyInfoId());\n+              } else {\n+                studyConsent = new StudyConsentBO();\n+                studyConsent.setUserId(userDetailId);\n+                studyConsent.setStudyInfoId(studyInfoBean.getStudyInfoId());\n+                studyConsent.setStatus(consentStatusBean.getConsent().getStatus());\n+                studyConsent.setVersion(consentStatusBean.getConsent().getVersion());\n+                studyConsent.setPdf(consentStatusBean.getConsent().getPdf());\n+                if ((consentStatusBean.getConsent().getPdf() != null)\n+                    && !StringUtils.isEmpty(consentStatusBean.getConsent().getPdf())) {\n+                  String underDirectory = userId + \"/\" + consentStatusBean.getStudyId();\n+                  String fileName =\n+                      userId\n+                          + \"_\"\n+                          + consentStatusBean.getStudyId()\n+                          + \"_\"\n+                          + consentStatusBean.getConsent().getVersion()\n+                          + \"_\"\n+                          + new SimpleDateFormat(\"MMddyyyyHHmmss\").format(new Date())\n+                          + \".pdf\";\n+                  String content = consentStatusBean.getConsent().getPdf();\n+\n+                  String path = cloudStorageService.saveFile(fileName, content, underDirectory);\n+                  // String path = saveStudyConsentDocument(studyConsent);\n+                  studyConsent.setPdfPath(path);\n+                  studyConsent.setPdfStorage(1);\n+                }\n+              }\n+              String addOrUpdateConsentMessage =\n+                  userConsentManagementService.saveStudyConsent(studyConsent);\n+              if ((addOrUpdateConsentMessage.equalsIgnoreCase(\n+                      MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue())\n+                  && message.equalsIgnoreCase(\n+                      MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue()))) {\n+                errorBean = new ErrorBean(ErrorCode.EC_200.code(), ErrorCode.EC_110.errorMessage());\n+              } else {\n+                errorBean = new ErrorBean(ErrorCode.EC_111.code(), ErrorCode.EC_111.errorMessage());\n+              }\n+            } else {\n+              MyStudiesUserRegUtil.getFailureResponse(\n+                  MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n+                  MyStudiesUserRegUtil.ErrorCodes.CONSENT_VERSION_REQUIRED.getValue(),\n+                  MyStudiesUserRegUtil.ErrorCodes.CONSENT_VERSION_REQUIRED.getValue(),\n+                  response);\n+              return null;\n+            }\n+\n+          } else {\n+            MyStudiesUserRegUtil.getFailureResponse(\n+                MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n+                MyStudiesUserRegUtil.ErrorCodes.NO_DATA_AVAILABLE.getValue(),\n+                MyStudiesUserRegUtil.ErrorCodes.NO_DATA_AVAILABLE.getValue(),\n+                response);\n+            return null;\n+          }\n+\n+        } else {\n+          MyStudiesUserRegUtil.getFailureResponse(\n+              MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n+              MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+              MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n+              response);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 200}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTczMzM4OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/model/StudyConsentBO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoxODo1OFrOF465ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoxODo1OFrOF465ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyOTU0Ng==", "bodyText": "please remove", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395229546", "createdAt": "2020-03-19T18:18:58Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/model/StudyConsentBO.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.google.cloud.healthcare.fdamystudies.model;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"study_consent\")\n+public class StudyConsentBO {\n+\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.AUTO)\n+  @Column(name = \"study_consent_id\")\n+  private Integer id;\n+\n+  @Column(name = \"study_info_id\")\n+  private Integer studyInfoId;\n+\n+  @Column(name = \"user_details_id\")\n+  private Integer userId;\n+\n+  @Column(name = \"status\")\n+  private String status;\n+\n+  @Column(name = \"version\")\n+  private String version;\n+\n+  @Column(name = \"pdf\")\n+  private String pdf;\n+\n+  @Column(name = \"pdfpath\")\n+  private String pdfPath;\n+\n+  // represents whether pdf content is stored in db=0 or gcp=1\n+  @Column(name = \"pdfStorage\", nullable = false, columnDefinition = \"TINYINT\")\n+  private int pdfStorage;\n+\n+  /*  @Column(name = \"application_id\")\n+  private String applicationId;\n+\n+  @Column(name = \"org_id\")\n+  private String orgId;*/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTczNDkwOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/model/UserAppDetailsBO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoxOToyNlrOF466aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoxOToyNlrOF466aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyOTgwMw==", "bodyText": "remove commented out code", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395229803", "createdAt": "2020-03-19T18:19:26Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/model/UserAppDetailsBO.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.google.cloud.healthcare.fdamystudies.model;\n+\n+import java.io.Serializable;\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+@Setter\n+@Getter\n+@Entity\n+@Table(name = \"user_app_details\")\n+public class UserAppDetailsBO implements Serializable {\n+\n+  private static final long serialVersionUID = 4985607753888575491L;\n+\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.AUTO)\n+  @Column(name = \"user_app_details_id\")\n+  private Integer userAppDetailsId;\n+\n+  @Column(name = \"app_info_id\")\n+  private Integer appInfoId;\n+\n+  @Column(name = \"user_details_id\")\n+  private Integer userDetailsId;\n+\n+  @Column(name = \"created_on\")\n+  private Date createdOn;\n+\n+  /*\n+  @Column(name = \"org_id\")\n+  private String orgId;\n+  */\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTczNjAxOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/model/UserDetailsBO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoxOTo0NVrOF467Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoxOTo0NVrOF467Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyOTk4Mg==", "bodyText": "please remove", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395229982", "createdAt": "2020-03-19T18:19:45Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/model/UserDetailsBO.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.google.cloud.healthcare.fdamystudies.model;\n+\n+import java.io.Serializable;\n+import java.time.LocalDateTime;\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+\n+@ToString\n+@Setter\n+@Getter\n+@Entity\n+@Table(name = \"user_details\")\n+public class UserDetailsBO implements Serializable {\n+\n+  private static final long serialVersionUID = 4985607753888575491L;\n+\n+  @Id\n+  @Column(name = \"user_details_id\")\n+  @GeneratedValue(strategy = GenerationType.AUTO)\n+  private Integer userDetailsId;\n+\n+  @Column(name = \"user_id\")\n+  private String userId;\n+\n+  @Column(name = \"app_info_id\")\n+  private Integer appInfoId;\n+\n+  @Column(name = \"email\")\n+  private String email;\n+\n+  @Column(name = \"status\")\n+  private Integer status;\n+\n+  @Column(name = \"first_name\")\n+  private String firstName;\n+\n+  @Column(name = \"last_name\")\n+  private String lastName;\n+\n+  @Column(name = \"local_notification_flag\", columnDefinition = \"TINYINT(1)\")\n+  private Boolean localNotificationFlag = false;\n+\n+  @Column(name = \"locale\")\n+  private String locale;\n+\n+  @Column(name = \"remote_notification_flag\", columnDefinition = \"TINYINT(1)\")\n+  private Boolean remoteNotificationFlag = false;\n+\n+  @Column(name = \"security_token\")\n+  private String securityToken;\n+\n+  @Column(name = \"touch_id\", columnDefinition = \"TINYINT(1)\")\n+  private Boolean touchId = false;\n+\n+  @Column(name = \"_ts\")\n+  private Date _ts;\n+\n+  @Column(name = \"use_pass_code\", columnDefinition = \"TINYINT(1)\")\n+  private Boolean usePassCode = false;\n+\n+  @Column(name = \"verification_date\")\n+  private Date verificationDate;\n+\n+  @Column(name = \"reminder_lead_time\")\n+  private String reminderLeadTime;\n+\n+  @Column(name = \"code_expire_date\")\n+  private LocalDateTime codeExpireDate;\n+\n+  @Column(name = \"email_code\")\n+  private String emailCode;\n+\n+  /*\n+   @Column(name = \"password\")\n+   private String password;\n+\n+  @Column(name = \"temp_password\", columnDefinition = \"TINYINT(1)\")\n+  private Boolean tempPassword = false;\n+\n+  @Column(name = \"reset_password\")\n+  private String resetPassword;\n+\n+  @Column(name = \"temp_password_date\")\n+  private Date tempPasswordDate;\n+\n+  @Column(name = \"password_updated_date\")\n+  private Date passwordUpdatedDate;\n+  */\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTc0MDY5OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/CloudStorageService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoyMTowN1rOF46-NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoyMTowN1rOF46-NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIzMDc3Mg==", "bodyText": "missing copyright like all other files under consent mgmt.\nIndentation in this file does not follow style guide, please change to 2 spaces.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395230772", "createdAt": "2020-03-19T18:21:07Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/CloudStorageService.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.google.cloud.healthcare.fdamystudies.service;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTc0OTI5OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/utils/AppConstants.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoyMzoyNVrOF47DkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoyMzoyNVrOF47DkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIzMjE0NA==", "bodyText": "this should not be a hard coded value, at the very least it needs to be picked up from a properties file.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395232144", "createdAt": "2020-03-19T18:23:25Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/utils/AppConstants.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package com.google.cloud.healthcare.fdamystudies.utils;\n+\n+public class AppConstants {\n+\n+  private AppConstants() {}\n+\n+  public static final String SERVER_TIMEZONE = \"America/New_York\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTc1NDU1OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/utils/AuthenticationFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoyNDo1MlrOF47G6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoyNDo1MlrOF47G6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIzMzAwMw==", "bodyText": "this is repeated across multiple files and components;  doe it make sense to move into a separate helper method?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395233003", "createdAt": "2020-03-19T18:24:52Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/utils/AuthenticationFilter.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package com.google.cloud.healthcare.fdamystudies.utils;\n+\n+import java.io.IOException;\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonServiceImpl;\n+\n+@Component\n+public class AuthenticationFilter implements Filter {\n+\n+  private static Logger logger = LoggerFactory.getLogger(AuthenticationFilter.class);\n+\n+  @Override\n+  public void init(final FilterConfig filterConfig) throws ServletException {\n+    logger.info(\"Initializing filter :{}\", this);\n+  }\n+\n+  @Override\n+  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n+      throws IOException, ServletException {\n+    HttpServletRequest httpServletRequest = (HttpServletRequest) request;\n+    HttpServletResponse httpServletResponse = (HttpServletResponse) response;\n+    if (request instanceof HttpServletRequest) {\n+      if (!\"OPTIONS\".equalsIgnoreCase(httpServletRequest.getMethod())) {\n+        String userId = httpServletRequest.getHeader(\"userId\");\n+        String accessToken = httpServletRequest.getHeader(\"accessToken\");\n+        String clientToken = httpServletRequest.getHeader(\"clientToken\");\n+        Integer value = null;\n+        boolean isValid = false;\n+        boolean isInterceptorURL = false;\n+        String appMessage = \"\";\n+        ApplicationPropertyConfiguration applicationConfiguratation =\n+            BeanUtil.getBean(ApplicationPropertyConfiguration.class);\n+        String interceptorURL = applicationConfiguratation.getInterceptorUrls();\n+        String uri = ((HttpServletRequest) request).getRequestURI();\n+        String[] list = interceptorURL.split(\",\");\n+        for (int i = 0; i < list.length; i++) {\n+          if (uri.endsWith(list[i].trim())) {\n+            isInterceptorURL = true;\n+          }\n+        }\n+        if (isInterceptorURL) {\n+          isValid = true;\n+          httpServletResponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n+          httpServletResponse.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n+          httpServletResponse.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n+          httpServletResponse.setHeader(\n+              \"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS, HEAD\");\n+          chain.doFilter(request, response);\n+        } else {\n+          if ((accessToken != null)\n+              && !StringUtils.isEmpty(accessToken)\n+              && (userId != null)\n+              && !StringUtils.isEmpty(userId)\n+              && (null != clientToken)\n+              && !StringUtils.isEmpty(clientToken)) {\n+            CommonServiceImpl commonService = BeanUtil.getBean(CommonServiceImpl.class);\n+            value = commonService.validateAccessToken(userId, accessToken, clientToken);\n+            if (value == 1) {\n+              httpServletResponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n+              httpServletResponse.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n+              httpServletResponse.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n+              httpServletResponse.setHeader(\n+                  \"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS, HEAD\");\n+              chain.doFilter(request, response);\n+            } else {\n+              if (response instanceof HttpServletResponse) {\n+                httpServletResponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n+                httpServletResponse.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n+                httpServletResponse.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n+                httpServletResponse.setHeader(\n+                    \"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS, HEAD\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTc1NjcwOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/utils/BeanUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoyNToyOFrOF47IWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoyNToyOFrOF47IWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIzMzM3MQ==", "bodyText": "indentation is tab, should be 2 spaces instead.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395233371", "createdAt": "2020-03-19T18:25:28Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/utils/BeanUtil.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package com.google.cloud.healthcare.fdamystudies.utils;\n+\n+import org.springframework.beans.BeansException;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.ApplicationContextAware;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class BeanUtil implements ApplicationContextAware {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTc2MzQ5OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/utils/ErrorCode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoyNzoxNVrOF47Mjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoyNzoxNVrOF47Mjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIzNDQ0Nw==", "bodyText": "these codes are duplicated in response server as well. Does it make sense to move them into a shared dircetory?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395234447", "createdAt": "2020-03-19T18:27:15Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/utils/ErrorCode.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package com.google.cloud.healthcare.fdamystudies.utils;\n+\n+public enum ErrorCode {\n+  EC_10(10, \"Unable to send Notifications.\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTk3ODA3OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/enroll-mgmt/.mvn/wrapper/MavenWrapperDownloader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOToyOTozOVrOF49Vjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOToyOTozOVrOF49Vjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI2OTUxOQ==", "bodyText": "indentation in this file is tab based; please correct.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395269519", "createdAt": "2020-03-19T19:29:39Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/enroll-mgmt/.mvn/wrapper/MavenWrapperDownloader.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2012-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import java.net.*;\n+import java.io.*;\n+import java.nio.channels.*;\n+import java.util.Properties;\n+\n+public class MavenWrapperDownloader {\n+\n+    private static final String WRAPPER_VERSION = \"0.5.5\";\n+    /**\n+     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.\n+     */\n+    private static final String DEFAULT_DOWNLOAD_URL = \"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/\"\n+        + WRAPPER_VERSION + \"/maven-wrapper-\" + WRAPPER_VERSION + \".jar\";\n+\n+    /**\n+     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to\n+     * use instead of the default one.\n+     */\n+    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =\n+            \".mvn/wrapper/maven-wrapper.properties\";\n+\n+    /**\n+     * Path where the maven-wrapper.jar will be saved to.\n+     */\n+    private static final String MAVEN_WRAPPER_JAR_PATH =\n+            \".mvn/wrapper/maven-wrapper.jar\";\n+\n+    /**\n+     * Name of the property which should be used to override the default download url for the wrapper.\n+     */\n+    private static final String PROPERTY_NAME_WRAPPER_URL = \"wrapperUrl\";\n+\n+    public static void main(String args[]) {\n+        System.out.println(\"- Downloader started\");\n+        File baseDirectory = new File(args[0]);\n+        System.out.println(\"- Using base directory: \" + baseDirectory.getAbsolutePath());\n+\n+        // If the maven-wrapper.properties exists, read it and check if it contains a custom\n+        // wrapperUrl parameter.\n+        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);\n+        String url = DEFAULT_DOWNLOAD_URL;\n+        if(mavenWrapperPropertyFile.exists()) {\n+            FileInputStream mavenWrapperPropertyFileInputStream = null;\n+            try {\n+                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);\n+                Properties mavenWrapperProperties = new Properties();\n+                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);\n+                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);\n+            } catch (IOException e) {\n+                System.out.println(\"- ERROR loading '\" + MAVEN_WRAPPER_PROPERTIES_PATH + \"'\");\n+            } finally {\n+                try {\n+                    if(mavenWrapperPropertyFileInputStream != null) {\n+                        mavenWrapperPropertyFileInputStream.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTk3ODk1OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/enroll-mgmt/.mvn/wrapper/MavenWrapperDownloader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOToyOTo1M1rOF49WFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOToyOTo1M1rOF49WFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI2OTY1NA==", "bodyText": "should this be logged at least?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395269654", "createdAt": "2020-03-19T19:29:53Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/enroll-mgmt/.mvn/wrapper/MavenWrapperDownloader.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2012-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import java.net.*;\n+import java.io.*;\n+import java.nio.channels.*;\n+import java.util.Properties;\n+\n+public class MavenWrapperDownloader {\n+\n+    private static final String WRAPPER_VERSION = \"0.5.5\";\n+    /**\n+     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.\n+     */\n+    private static final String DEFAULT_DOWNLOAD_URL = \"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/\"\n+        + WRAPPER_VERSION + \"/maven-wrapper-\" + WRAPPER_VERSION + \".jar\";\n+\n+    /**\n+     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to\n+     * use instead of the default one.\n+     */\n+    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =\n+            \".mvn/wrapper/maven-wrapper.properties\";\n+\n+    /**\n+     * Path where the maven-wrapper.jar will be saved to.\n+     */\n+    private static final String MAVEN_WRAPPER_JAR_PATH =\n+            \".mvn/wrapper/maven-wrapper.jar\";\n+\n+    /**\n+     * Name of the property which should be used to override the default download url for the wrapper.\n+     */\n+    private static final String PROPERTY_NAME_WRAPPER_URL = \"wrapperUrl\";\n+\n+    public static void main(String args[]) {\n+        System.out.println(\"- Downloader started\");\n+        File baseDirectory = new File(args[0]);\n+        System.out.println(\"- Using base directory: \" + baseDirectory.getAbsolutePath());\n+\n+        // If the maven-wrapper.properties exists, read it and check if it contains a custom\n+        // wrapperUrl parameter.\n+        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);\n+        String url = DEFAULT_DOWNLOAD_URL;\n+        if(mavenWrapperPropertyFile.exists()) {\n+            FileInputStream mavenWrapperPropertyFileInputStream = null;\n+            try {\n+                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);\n+                Properties mavenWrapperProperties = new Properties();\n+                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);\n+                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);\n+            } catch (IOException e) {\n+                System.out.println(\"- ERROR loading '\" + MAVEN_WRAPPER_PROPERTIES_PATH + \"'\");\n+            } finally {\n+                try {\n+                    if(mavenWrapperPropertyFileInputStream != null) {\n+                        mavenWrapperPropertyFileInputStream.close();\n+                    }\n+                } catch (IOException e) {\n+                    // Ignore ...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTk3OTgxOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/enroll-mgmt/.mvn/wrapper/MavenWrapperDownloader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTozMDowOVrOF49Wng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTozMDowOVrOF49Wng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI2OTc5MA==", "bodyText": "added by mistake?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395269790", "createdAt": "2020-03-19T19:30:09Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/enroll-mgmt/.mvn/wrapper/MavenWrapperDownloader.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2012-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import java.net.*;\n+import java.io.*;\n+import java.nio.channels.*;\n+import java.util.Properties;\n+\n+public class MavenWrapperDownloader {\n+\n+    private static final String WRAPPER_VERSION = \"0.5.5\";\n+    /**\n+     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.\n+     */\n+    private static final String DEFAULT_DOWNLOAD_URL = \"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/\"\n+        + WRAPPER_VERSION + \"/maven-wrapper-\" + WRAPPER_VERSION + \".jar\";\n+\n+    /**\n+     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to\n+     * use instead of the default one.\n+     */\n+    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =\n+            \".mvn/wrapper/maven-wrapper.properties\";\n+\n+    /**\n+     * Path where the maven-wrapper.jar will be saved to.\n+     */\n+    private static final String MAVEN_WRAPPER_JAR_PATH =\n+            \".mvn/wrapper/maven-wrapper.jar\";\n+\n+    /**\n+     * Name of the property which should be used to override the default download url for the wrapper.\n+     */\n+    private static final String PROPERTY_NAME_WRAPPER_URL = \"wrapperUrl\";\n+\n+    public static void main(String args[]) {\n+        System.out.println(\"- Downloader started\");\n+        File baseDirectory = new File(args[0]);\n+        System.out.println(\"- Using base directory: \" + baseDirectory.getAbsolutePath());\n+\n+        // If the maven-wrapper.properties exists, read it and check if it contains a custom\n+        // wrapperUrl parameter.\n+        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);\n+        String url = DEFAULT_DOWNLOAD_URL;\n+        if(mavenWrapperPropertyFile.exists()) {\n+            FileInputStream mavenWrapperPropertyFileInputStream = null;\n+            try {\n+                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);\n+                Properties mavenWrapperProperties = new Properties();\n+                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);\n+                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);\n+            } catch (IOException e) {\n+                System.out.println(\"- ERROR loading '\" + MAVEN_WRAPPER_PROPERTIES_PATH + \"'\");\n+            } finally {\n+                try {\n+                    if(mavenWrapperPropertyFileInputStream != null) {\n+                        mavenWrapperPropertyFileInputStream.close();\n+                    }\n+                } catch (IOException e) {\n+                    // Ignore ...\n+                }\n+            }\n+        }\n+        System.out.println(\"- Downloading from: \" + url);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTk4MzA0OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/ServletInitializer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTozMToxMlrOF49Yzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMToyMzozNFrOF7DoRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI3MDM1MA==", "bodyText": "please use the standard format with no additional lines or tags.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395270350", "createdAt": "2020-03-19T19:31:12Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/ServletInitializer.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/**\n+ * *****************************************************************************\n+ *\n+ * <p>Copyright 2020 Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * *****************************************************************************\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2OTc2NA==", "bodyText": "looks like this one was missed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r397469764", "createdAt": "2020-03-24T21:23:34Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/ServletInitializer.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/**\n+ * *****************************************************************************\n+ *\n+ * <p>Copyright 2020 Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * *****************************************************************************\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI3MDM1MA=="}, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTk4NDQ4OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/UserEnrollmentTokenMgmtServiceWsApplication.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTozMTo0MFrOF49ZwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTozMTo0MFrOF49ZwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI3MDU5Mg==", "bodyText": "indentation is tab based. please fix.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395270592", "createdAt": "2020-03-19T19:31:40Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/UserEnrollmentTokenMgmtServiceWsApplication.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package com.google.cloud.healthcare.fdamystudies;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class UserEnrollmentTokenMgmtServiceWsApplication {\n+\n+\tpublic static void main(String[] args) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTk5ODY5OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/StudyStateBean.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTozNjowM1rOF49i1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTozNjowM1rOF49i1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI3MjkxNg==", "bodyText": "content of the license is not accurate; please replace with correct license text.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395272916", "createdAt": "2020-03-19T19:36:03Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/StudyStateBean.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/**\n+ * Copyright 2020 Google LLC\n+ *\n+ * <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software\n+ * and associated documentation files (the \"Software\"), to deal in the Software without restriction,\n+ * including without limitation the rights to use, copy, modify, merge, publish, distribute,\n+ * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions: The above copyright notice and this\n+ * permission notice shall be included in all copies or substantial portions of the Software.THE\n+ * SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT\n+ * LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n+ * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDAwMDcyOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/AppConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTozNjozNFrOF49kGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTozNjozNFrOF49kGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI3MzI0MA==", "bodyText": "please remove author info", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395273240", "createdAt": "2020-03-19T19:36:34Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/AppConfig.java", "diffHunk": "@@ -0,0 +1,18 @@\n+/** */\n+package com.google.cloud.healthcare.fdamystudies.config;\n+\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Project Name: MyStudiesuserRegWs\n+ *\n+ * @author Chiranjibi Dash, Date: Dec 27, 2019, Time: 12:18:58 PM\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDAwMTM2OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/AppConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTozNjo0NVrOF49kgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTozNjo0NVrOF49kgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI3MzM0Ng==", "bodyText": "remove commented code", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395273346", "createdAt": "2020-03-19T19:36:45Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/AppConfig.java", "diffHunk": "@@ -0,0 +1,18 @@\n+/** */\n+package com.google.cloud.healthcare.fdamystudies.config;\n+\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Project Name: MyStudiesuserRegWs\n+ *\n+ * @author Chiranjibi Dash, Date: Dec 27, 2019, Time: 12:18:58 PM\n+ */\n+@Configuration\n+public class AppConfig {\n+\n+  /*  @Bean\n+  public RestTemplate restTemplate() {\n+    return new RestTemplate();\n+  }*/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDAwMTkwOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/ApplicationPropertyConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTozNjo1NFrOF49k3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTozNjo1NFrOF49k3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI3MzQzOQ==", "bodyText": "remove", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395273439", "createdAt": "2020-03-19T19:36:54Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/ApplicationPropertyConfiguration.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.google.cloud.healthcare.fdamystudies.config;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.PropertySource;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+\n+@Configuration\n+// @PropertySource(\"classpath:application-${spring.profiles.active}.properties\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDAwMzg3OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/BeanConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTozNzoyOFrOF49mFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTozNzoyOFrOF49mFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI3Mzc1MA==", "bodyText": "please clean up all commented out code.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395273750", "createdAt": "2020-03-19T19:37:28Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/BeanConfig.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.google.cloud.healthcare.fdamystudies.config;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.web.servlet.FilterRegistrationBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.web.client.RestTemplate;\n+import org.springframework.web.servlet.config.annotation.CorsRegistry;\n+import org.springframework.web.servlet.config.annotation.EnableWebMvc;\n+import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n+import com.google.cloud.healthcare.fdamystudies.util.AuthenticationFilter;\n+\n+@EnableScheduling\n+@Configuration\n+@EnableWebMvc\n+public class BeanConfig implements WebMvcConfigurer {\n+\n+  @Autowired ApplicationPropertyConfiguration appConfig;\n+\n+  /*  @Bean\n+  public EmailNotification emailNotification() {\n+    return new EmailNotification(appConfig);\n+  }*/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDAwNDQ4OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/BeanConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTozNzozOVrOF49mew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTozNzozOVrOF49mew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI3Mzg1MQ==", "bodyText": "clean please", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395273851", "createdAt": "2020-03-19T19:37:39Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/BeanConfig.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.google.cloud.healthcare.fdamystudies.config;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.web.servlet.FilterRegistrationBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.web.client.RestTemplate;\n+import org.springframework.web.servlet.config.annotation.CorsRegistry;\n+import org.springframework.web.servlet.config.annotation.EnableWebMvc;\n+import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n+import com.google.cloud.healthcare.fdamystudies.util.AuthenticationFilter;\n+\n+@EnableScheduling\n+@Configuration\n+@EnableWebMvc\n+public class BeanConfig implements WebMvcConfigurer {\n+\n+  @Autowired ApplicationPropertyConfiguration appConfig;\n+\n+  /*  @Bean\n+  public EmailNotification emailNotification() {\n+    return new EmailNotification(appConfig);\n+  }*/\n+\n+  @Bean\n+  public WebMvcConfigurer corsConfigurer() {\n+    return new WebMvcConfigurer() {\n+      @Override\n+      public void addCorsMappings(CorsRegistry registry) {\n+        registry.addMapping(\"/**\").allowedOrigins(\"*\").allowedHeaders(\"*\").allowedMethods(\"*\");\n+        //            \t.exposedHeaders(\"\");\n+        //            \t.allowedHeaders(\"*\")\n+        //            \t.allowedMethods(\"*\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDAwNTI4OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/BeanConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTozNzo1MFrOF49m5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTozNzo1MFrOF49m5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI3Mzk1Ng==", "bodyText": "same here", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395273956", "createdAt": "2020-03-19T19:37:50Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/BeanConfig.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.google.cloud.healthcare.fdamystudies.config;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.web.servlet.FilterRegistrationBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.web.client.RestTemplate;\n+import org.springframework.web.servlet.config.annotation.CorsRegistry;\n+import org.springframework.web.servlet.config.annotation.EnableWebMvc;\n+import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n+import com.google.cloud.healthcare.fdamystudies.util.AuthenticationFilter;\n+\n+@EnableScheduling\n+@Configuration\n+@EnableWebMvc\n+public class BeanConfig implements WebMvcConfigurer {\n+\n+  @Autowired ApplicationPropertyConfiguration appConfig;\n+\n+  /*  @Bean\n+  public EmailNotification emailNotification() {\n+    return new EmailNotification(appConfig);\n+  }*/\n+\n+  @Bean\n+  public WebMvcConfigurer corsConfigurer() {\n+    return new WebMvcConfigurer() {\n+      @Override\n+      public void addCorsMappings(CorsRegistry registry) {\n+        registry.addMapping(\"/**\").allowedOrigins(\"*\").allowedHeaders(\"*\").allowedMethods(\"*\");\n+        //            \t.exposedHeaders(\"\");\n+        //            \t.allowedHeaders(\"*\")\n+        //            \t.allowedMethods(\"*\");\n+      }\n+    };\n+  }\n+\n+  @Bean\n+  public FilterRegistrationBean<AuthenticationFilter> loggingFilter() {\n+    FilterRegistrationBean<AuthenticationFilter> authenticationBean =\n+        new FilterRegistrationBean<>();\n+    authenticationBean.setFilter(new AuthenticationFilter());\n+    authenticationBean.addUrlPatterns(\"/*\");\n+    //\t     authenticationBean.addUrlPatterns(\"/admin/manageUser/*\");\n+    //\t     authenticationBean.addUrlPatterns(\"/search/*\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDAxMTQxOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/ParticipantStudiesInfoDao.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTozOTozN1rOF49qsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTozOTozN1rOF49qsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI3NDkzMA==", "bodyText": "content is incorrect. please fix", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395274930", "createdAt": "2020-03-19T19:39:37Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/ParticipantStudiesInfoDao.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/**\n+ * Copyright 2020 Google LLC\n+ *\n+ * <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software\n+ * and associated documentation files (the \"Software\"), to deal in the Software without restriction,\n+ * including without limitation the rights to use, copy, modify, merge, publish, distribute,\n+ * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions: The above copyright notice and this\n+ * permission notice shall be included in all copies or substantial portions of the Software.THE\n+ * SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT\n+ * LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n+ * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDAxMzE1OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/ParticipantStudiesInfoDaoImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo0MDowNFrOF49rqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo0MDowNFrOF49rqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI3NTE3OA==", "bodyText": "not the agreed upon license. please fix", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395275178", "createdAt": "2020-03-19T19:40:04Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/ParticipantStudiesInfoDaoImpl.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Copyright 2020 Google LLC\n+ *\n+ * <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software\n+ * and associated documentation files (the \"Software\"), to deal in the Software without restriction,\n+ * including without limitation the rights to use, copy, modify, merge, publish, distribute,\n+ * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions: The above copyright notice and this\n+ * permission notice shall be included in all copies or substantial portions of the Software.THE\n+ * SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT\n+ * LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n+ * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDAxOTM3OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/model/ParticipantRegistrySite.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo0MTo1OVrOF49vpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo0MTo1OVrOF49vpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI3NjE5Ng==", "bodyText": "please replace with agreed upon MIT license", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395276196", "createdAt": "2020-03-19T19:41:59Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/model/ParticipantRegistrySite.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the\n+ * Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n+ * Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n+ * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDAyMzkwOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/model/UserDetails.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo0MzoxOVrOF49yiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo0MzoxOVrOF49yiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI3NjkzNg==", "bodyText": "please remove", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395276936", "createdAt": "2020-03-19T19:43:19Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/model/UserDetails.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.google.cloud.healthcare.fdamystudies.model;\n+\n+import java.time.LocalDateTime;\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+\n+@ToString\n+@Setter\n+@Getter\n+@Entity\n+@Table(name = \"user_details\")\n+public class UserDetails {\n+  @Id\n+  @Column(name = \"user_details_id\")\n+  @GeneratedValue(strategy = GenerationType.AUTO)\n+  private Integer userDetailsId;\n+\n+  @Column(name = \"user_id\")\n+  private String userId;\n+\n+  @Column(name = \"app_info_id\")\n+  private Integer appInfoId;\n+\n+  @Column(name = \"email\")\n+  private String email;\n+\n+  @Column(name = \"status\")\n+  private Integer status;\n+\n+  @Column(name = \"first_name\")\n+  private String firstName;\n+\n+  @Column(name = \"last_name\")\n+  private String lastName;\n+\n+  @Column(name = \"local_notification_flag\", columnDefinition = \"TINYINT(1)\")\n+  private Boolean localNotificationFlag = false;\n+\n+  @Column(name = \"locale\")\n+  private String locale;\n+\n+  @Column(name = \"remote_notification_flag\", columnDefinition = \"TINYINT(1)\")\n+  private Boolean remoteNotificationFlag = false;\n+\n+  @Column(name = \"security_token\")\n+  private String securityToken;\n+\n+  @Column(name = \"touch_id\", columnDefinition = \"TINYINT(1)\")\n+  private Boolean touchId = false;\n+\n+  @Column(name = \"_ts\")\n+  private Date _ts;\n+\n+  @Column(name = \"use_pass_code\", columnDefinition = \"TINYINT(1)\")\n+  private Boolean usePassCode = false;\n+\n+  @Column(name = \"verification_date\")\n+  private Date verificationDate;\n+\n+  @Column(name = \"reminder_lead_time\")\n+  private String reminderLeadTime;\n+\n+  @Column(name = \"code_expire_date\")\n+  private LocalDateTime codeExpireDate;\n+\n+  @Column(name = \"email_code\")\n+  private String emailCode;\n+\n+  /*\n+   @Column(name = \"password\")\n+   private String password;\n+\n+  @Column(name = \"temp_password\", columnDefinition = \"TINYINT(1)\")\n+  private Boolean tempPassword = false;\n+\n+  @Column(name = \"reset_password\")\n+  private String resetPassword;\n+\n+  @Column(name = \"temp_password_date\")\n+  private Date tempPasswordDate;\n+\n+  @Column(name = \"password_updated_date\")\n+  private Date passwordUpdatedDate;\n+  */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDAyNzcyOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/EnrollmentTokenServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo0NDoyMVrOF490yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo0NDoyMVrOF490yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI3NzUxMw==", "bodyText": "please remove", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395277513", "createdAt": "2020-03-19T19:44:21Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/EnrollmentTokenServiceImpl.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import javax.validation.constraints.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import com.google.cloud.healthcare.fdamystudies.beans.EnrollmentResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.dao.EnrollmentTokenDao;\n+import com.google.cloud.healthcare.fdamystudies.util.EnrollmentManagementUtil;\n+\n+@Service\n+public class EnrollmentTokenServiceImpl implements EnrollmentTokenService {\n+\n+  @Autowired EnrollmentTokenDao enrollmentTokenDao;\n+\n+  @Autowired EnrollmentManagementUtil enrollUtil;\n+\n+  @Autowired CommonService commonService;\n+\n+  private static final Logger logger = LoggerFactory.getLogger(EnrollmentTokenServiceImpl.class);\n+\n+  @Override\n+  public boolean enrollmentTokenRequired(@NotNull String studyId) {\n+    logger.info(\"EnrollmentTokenServiceImpl hasParticipant() - Starts \");\n+    boolean isTokenRequired = false;\n+    try {\n+      isTokenRequired = enrollmentTokenDao.enrollmentTokenRequired(studyId);\n+    } catch (Exception e) {\n+      logger.error(\"EnrollmentTokenServiceImpl enrollmentTokenRequired() - error \", e);\n+    }\n+    //    return isTokenRequired;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDAyODQwOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/EnrollmentTokenServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo0NDozNFrOF491Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo0NDozNFrOF491Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI3NzYxOQ==", "bodyText": "please clean up all commented out code", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395277619", "createdAt": "2020-03-19T19:44:34Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/EnrollmentTokenServiceImpl.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import javax.validation.constraints.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import com.google.cloud.healthcare.fdamystudies.beans.EnrollmentResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.dao.EnrollmentTokenDao;\n+import com.google.cloud.healthcare.fdamystudies.util.EnrollmentManagementUtil;\n+\n+@Service\n+public class EnrollmentTokenServiceImpl implements EnrollmentTokenService {\n+\n+  @Autowired EnrollmentTokenDao enrollmentTokenDao;\n+\n+  @Autowired EnrollmentManagementUtil enrollUtil;\n+\n+  @Autowired CommonService commonService;\n+\n+  private static final Logger logger = LoggerFactory.getLogger(EnrollmentTokenServiceImpl.class);\n+\n+  @Override\n+  public boolean enrollmentTokenRequired(@NotNull String studyId) {\n+    logger.info(\"EnrollmentTokenServiceImpl hasParticipant() - Starts \");\n+    boolean isTokenRequired = false;\n+    try {\n+      isTokenRequired = enrollmentTokenDao.enrollmentTokenRequired(studyId);\n+    } catch (Exception e) {\n+      logger.error(\"EnrollmentTokenServiceImpl enrollmentTokenRequired() - error \", e);\n+    }\n+    //    return isTokenRequired;\n+    return true;\n+  }\n+\n+  @Override\n+  public boolean hasParticipant(@NotNull String studyId, @NotNull String tokenValue) {\n+    logger.info(\"EnrollmentTokenServiceImpl hasParticipant() - Starts \");\n+    boolean hasParticipant = false;\n+    try {\n+      hasParticipant = enrollmentTokenDao.hasParticipant(studyId, tokenValue);\n+    } catch (Exception e) {\n+      logger.error(\"EnrollmentTokenServiceImpl hasParticipant() - error \", e);\n+    }\n+    logger.info(\"EnrollmentTokenServiceImpl hasParticipant() - Ends \");\n+    return hasParticipant;\n+  }\n+\n+  @Override\n+  public boolean isValidStudyToken(@NotNull String token, @NotNull String studyId) {\n+    logger.info(\"EnrollmentTokenServiceImpl isValidStudyToken() - Starts \");\n+    boolean isValidStudyToken = false;\n+    try {\n+      isValidStudyToken = enrollmentTokenDao.isValidStudyToken(token, studyId);\n+    } catch (Exception e) {\n+      logger.error(\"EnrollmentTokenServiceImpl isValidStudyToken() - error \", e);\n+    }\n+    logger.info(\"EnrollmentTokenServiceImpl isValidStudyToken() - Ends \");\n+    //    return isValidStudyToken;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDAyOTUwOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/EnrollmentTokenServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo0NDo1M1rOF4914g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo0NDo1M1rOF4914g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI3Nzc5NA==", "bodyText": "same here", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395277794", "createdAt": "2020-03-19T19:44:53Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/EnrollmentTokenServiceImpl.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import javax.validation.constraints.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import com.google.cloud.healthcare.fdamystudies.beans.EnrollmentResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.dao.EnrollmentTokenDao;\n+import com.google.cloud.healthcare.fdamystudies.util.EnrollmentManagementUtil;\n+\n+@Service\n+public class EnrollmentTokenServiceImpl implements EnrollmentTokenService {\n+\n+  @Autowired EnrollmentTokenDao enrollmentTokenDao;\n+\n+  @Autowired EnrollmentManagementUtil enrollUtil;\n+\n+  @Autowired CommonService commonService;\n+\n+  private static final Logger logger = LoggerFactory.getLogger(EnrollmentTokenServiceImpl.class);\n+\n+  @Override\n+  public boolean enrollmentTokenRequired(@NotNull String studyId) {\n+    logger.info(\"EnrollmentTokenServiceImpl hasParticipant() - Starts \");\n+    boolean isTokenRequired = false;\n+    try {\n+      isTokenRequired = enrollmentTokenDao.enrollmentTokenRequired(studyId);\n+    } catch (Exception e) {\n+      logger.error(\"EnrollmentTokenServiceImpl enrollmentTokenRequired() - error \", e);\n+    }\n+    //    return isTokenRequired;\n+    return true;\n+  }\n+\n+  @Override\n+  public boolean hasParticipant(@NotNull String studyId, @NotNull String tokenValue) {\n+    logger.info(\"EnrollmentTokenServiceImpl hasParticipant() - Starts \");\n+    boolean hasParticipant = false;\n+    try {\n+      hasParticipant = enrollmentTokenDao.hasParticipant(studyId, tokenValue);\n+    } catch (Exception e) {\n+      logger.error(\"EnrollmentTokenServiceImpl hasParticipant() - error \", e);\n+    }\n+    logger.info(\"EnrollmentTokenServiceImpl hasParticipant() - Ends \");\n+    return hasParticipant;\n+  }\n+\n+  @Override\n+  public boolean isValidStudyToken(@NotNull String token, @NotNull String studyId) {\n+    logger.info(\"EnrollmentTokenServiceImpl isValidStudyToken() - Starts \");\n+    boolean isValidStudyToken = false;\n+    try {\n+      isValidStudyToken = enrollmentTokenDao.isValidStudyToken(token, studyId);\n+    } catch (Exception e) {\n+      logger.error(\"EnrollmentTokenServiceImpl isValidStudyToken() - error \", e);\n+    }\n+    logger.info(\"EnrollmentTokenServiceImpl isValidStudyToken() - Ends \");\n+    //    return isValidStudyToken;\n+    return true;\n+  }\n+\n+  @Override\n+  public boolean studyExists(@NotNull String studyId) {\n+    logger.info(\"EnrollmentTokenServiceImpl studyExists() - Starts \");\n+    boolean isStudyExist = false;\n+    try {\n+      isStudyExist = enrollmentTokenDao.studyExists(studyId);\n+    } catch (Exception e) {\n+      logger.error(\"EnrollmentTokenServiceImpl studyExists() - error \", e);\n+    }\n+\n+    logger.info(\"EnrollmentTokenServiceImpl studyExists() - Ends \");\n+    //    return isStudyExist;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDAzMjk2OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudyStateServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo0NTo0N1rOF4938g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo0NTo0N1rOF4938g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI3ODMyMg==", "bodyText": "please remove", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395278322", "createdAt": "2020-03-19T19:45:47Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudyStateServiceImpl.java", "diffHunk": "@@ -0,0 +1,209 @@\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import com.google.cloud.healthcare.fdamystudies.beans.StudiesBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.StudyStateBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.StudyStateRespBean;\n+import com.google.cloud.healthcare.fdamystudies.dao.CommonDao;\n+import com.google.cloud.healthcare.fdamystudies.dao.ParticipantStudiesInfoDao;\n+import com.google.cloud.healthcare.fdamystudies.dao.StudyStateDao;\n+import com.google.cloud.healthcare.fdamystudies.dao.UserRegAdminUserDao;\n+import com.google.cloud.healthcare.fdamystudies.exception.InvalidUserIdException;\n+import com.google.cloud.healthcare.fdamystudies.exception.NoStudyEnrolledException;\n+import com.google.cloud.healthcare.fdamystudies.exception.SystemException;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetails;\n+import com.google.cloud.healthcare.fdamystudies.util.BeanUtil;\n+import com.google.cloud.healthcare.fdamystudies.util.MyStudiesUserRegUtil;\n+\n+@Service\n+public class StudyStateServiceImpl implements StudyStateService {\n+  private static final Logger logger = LoggerFactory.getLogger(StudyStateServiceImpl.class);\n+\n+  @Autowired StudyStateDao studyStateDao;\n+  @Autowired CommonDao commonDao;\n+\n+  @Autowired private UserRegAdminUserDao userRegAdminUserDao;\n+\n+  @Autowired private ParticipantStudiesInfoDao participantStudiesInfoDao;\n+\n+  @Override\n+  public List<ParticipantStudiesBO> getParticipantStudiesList(String userId) {\n+    logger.info(\"StudyStateServiceImpl getParticipantStudiesList() - Starts \");\n+    List<ParticipantStudiesBO> participantStudiesList = null;\n+    try {\n+      participantStudiesList = studyStateDao.getParticipantStudiesList(userId);\n+    } catch (Exception e) {\n+      logger.error(\"StudyStateServiceImpl getParticipantStudiesList() - error \", e);\n+    }\n+    logger.info(\"StudyStateServiceImpl getParticipantStudiesList() - Ends \");\n+    return participantStudiesList;\n+  }\n+\n+  @Override\n+  public StudyStateRespBean saveParticipantStudies(\n+      List<StudiesBean> studiesBeenList,\n+      List<ParticipantStudiesBO> existParticipantStudies,\n+      String userId) {\n+    logger.info(\"StudyStateServiceImpl saveParticipantStudies() - Starts \");\n+    StudyStateRespBean studyStateRespBean = null;\n+    String message = MyStudiesUserRegUtil.ErrorCodes.FAILURE.getValue();\n+    boolean isExists = false;\n+    List<ParticipantStudiesBO> addParticipantStudiesList = new ArrayList<ParticipantStudiesBO>();\n+    ParticipantStudiesBO participantStudyBo = new ParticipantStudiesBO();\n+    try {\n+      for (int i = 0; i < studiesBeenList.size(); i++) {\n+        StudiesBean studiesBean = studiesBeenList.get(i);\n+        Integer studyInfoId = commonDao.getStudyId(studiesBean.getStudyId());\n+        if (existParticipantStudies != null && !existParticipantStudies.isEmpty()) {\n+          for (ParticipantStudiesBO participantStudies : existParticipantStudies) {\n+            if (studyInfoId.equals(participantStudies.getStudyId())) {\n+              isExists = true;\n+              if (participantStudies.getStatus() != null\n+                  && participantStudies\n+                      .getStatus()\n+                      .equalsIgnoreCase(MyStudiesUserRegUtil.ErrorCodes.YET_TO_JOIN.getValue())) {\n+                participantStudies.setEnrolledDate(MyStudiesUserRegUtil.getCurrentUtilDateTime());\n+              }\n+              if (studiesBean.getStatus() != null\n+                  && !StringUtils.isEmpty(studiesBean.getStatus())) {\n+                participantStudies.setStatus(studiesBean.getStatus());\n+                if (studiesBean\n+                    .getStatus()\n+                    .equalsIgnoreCase(MyStudiesUserRegUtil.ErrorCodes.IN_PROGRESS.getValue())) {\n+                  /* List<ParticipantActivities> participantActivitiesList =\n+                      FdahpUserRegWSManager.get()\n+                          .getParticipantActivitiesList(\n+                              studiesBean.getStudyId(), userId, applicationId, orgId);\n+                  if (participantActivitiesList != null && participantActivitiesList.size() > 0) {\n+                    for (ParticipantActivities participantActivities : participantActivitiesList) {\n+                      participantActivities.setActivityVersion(null);\n+                      participantActivities.setActivityState(null);\n+                      participantActivities.setActivityRunId(null);\n+                      participantActivities.setBookmark(false);\n+                      participantActivities.setTotal(0);\n+                      participantActivities.setCompleted(0);\n+                      participantActivities.setMissed(0);\n+                    }\n+                    FdahpUserRegWSManager.get()\n+                        .saveParticipantActivities(participantActivitiesList);\n+                  }*/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDAzOTM5OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/AuthenticationFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo0NzoyNlrOF497tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo0NzoyNlrOF497tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI3OTI4NQ==", "bodyText": "if there are work items associate with these TODOs, please add a reference here", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395279285", "createdAt": "2020-03-19T19:47:26Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/AuthenticationFilter.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package com.google.cloud.healthcare.fdamystudies.util;\n+\n+import java.io.IOException;\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonServiceImpl;\n+\n+@Component\n+public class AuthenticationFilter implements Filter {\n+\n+  private static Logger logger = LoggerFactory.getLogger(AuthenticationFilter.class);\n+\n+  @Override\n+  public void init(final FilterConfig filterConfig) throws ServletException {\n+    logger.info(\"Initializing filter :{}\", this);\n+  }\n+\n+  @Override\n+  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n+      throws IOException, ServletException {\n+    HttpServletRequest httpServletRequest = (HttpServletRequest) request;\n+    HttpServletResponse httpServletResponse = (HttpServletResponse) response;\n+    if (request instanceof HttpServletRequest) {\n+      if (!\"OPTIONS\".equalsIgnoreCase(httpServletRequest.getMethod())) {\n+        String userId = httpServletRequest.getHeader(\"userId\");\n+        String accessToken = httpServletRequest.getHeader(\"accessToken\");\n+        String clientToken = httpServletRequest.getHeader(\"clientToken\");\n+        Integer value = null;\n+        boolean isInterceptorURL = false;\n+        boolean isInvalidURL = false;\n+        ApplicationPropertyConfiguration applicationConfiguratation =\n+            BeanUtil.getBean(ApplicationPropertyConfiguration.class);\n+        String interceptorURL = applicationConfiguratation.getInterceptorUrls();\n+        String invalidURL = applicationConfiguratation.getInvalidUrl();\n+        String uri = ((HttpServletRequest) request).getRequestURI();\n+        String[] list = interceptorURL.split(\",\");\n+        String[] invalidUrlList = invalidURL.split(\",\");\n+        for (int i = 0; i < list.length; i++) {\n+          logger.info(list[i]);\n+          if (uri.endsWith(list[i].trim())) {\n+            isInterceptorURL = true;\n+          }\n+        }\n+        // TODO: removed below Logic once studyState API implemented during sprint 3 development", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDA0MTYxOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/BeanUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo0Nzo1OVrOF499BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo0Nzo1OVrOF499BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI3OTYyMA==", "bodyText": "indentation is incorrect", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395279620", "createdAt": "2020-03-19T19:47:59Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/BeanUtil.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package com.google.cloud.healthcare.fdamystudies.util;\n+\n+import org.springframework.beans.BeansException;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.ApplicationContextAware;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class BeanUtil implements ApplicationContextAware {\n+\n+\tprivate static ApplicationContext context;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDA0NDgwOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/EmailNotification.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo0ODo0NlrOF49-1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo0ODo0NlrOF49-1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI4MDA4NQ==", "bodyText": "please remove", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395280085", "createdAt": "2020-03-19T19:48:46Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/EmailNotification.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package com.google.cloud.healthcare.fdamystudies.util;\n+\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+\n+/** @author Aswini */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDA0NzQwOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/EnrollmentManagementUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo0OTozN1rOF4-AiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo0OTozN1rOF4-AiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI4MDUyMQ==", "bodyText": "remove please", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395280521", "createdAt": "2020-03-19T19:49:37Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/EnrollmentManagementUtil.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.google.cloud.healthcare.fdamystudies.util;\n+\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.SecureRandom;\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.Random;\n+import javax.validation.constraints.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.client.RestTemplate;\n+import com.google.cloud.healthcare.fdamystudies.beans.EnrollmentBodyProvider;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+\n+@Component\n+public class EnrollmentManagementUtil {\n+\n+  //  private String validInputChars;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDA1MTI5OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/EnrollmentManagementUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo1MDo0NlrOF4-C5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo1MDo0NlrOF4-C5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI4MTEyNA==", "bodyText": "remove commented code.\nThis method is always returning true? that can't be correct", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395281124", "createdAt": "2020-03-19T19:50:46Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/EnrollmentManagementUtil.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.google.cloud.healthcare.fdamystudies.util;\n+\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.SecureRandom;\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.Random;\n+import javax.validation.constraints.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.client.RestTemplate;\n+import com.google.cloud.healthcare.fdamystudies.beans.EnrollmentBodyProvider;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+\n+@Component\n+public class EnrollmentManagementUtil {\n+\n+  //  private String validInputChars;\n+\n+  private static final Random generator = new Random();\n+  static final String SOURCE = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n+  static SecureRandom secureRnd = new SecureRandom();\n+  private static final String validInputChars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n+  private Integer n = validInputChars.length();\n+  private static final Logger logger = LoggerFactory.getLogger(EnrollmentManagementUtil.class);\n+\n+  @Autowired private RestTemplate restTemplate;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  /*\n+   * This method is used to validate the user\n+   * and user's current session through a REST API\n+   * call to AuthServer.\n+   */\n+\n+  public boolean isChecksumValid(@NotNull String token) {\n+    try {\n+      //      return isValid(token.toUpperCase());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDA1NTcwOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/Mail.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo1MjoxOVrOF4-F6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo1MjoxOVrOF4-F6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI4MTg5OQ==", "bodyText": "remove all author references please", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395281899", "createdAt": "2020-03-19T19:52:19Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/Mail.java", "diffHunk": "@@ -0,0 +1,301 @@\n+package com.google.cloud.healthcare.fdamystudies.util;\n+\n+/** @author Aswini */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDA1NjczOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/Mail.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo1MjozOFrOF4-Glg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo1MjozOFrOF4-Glg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI4MjA3MA==", "bodyText": "nit: remove empty comment block", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395282070", "createdAt": "2020-03-19T19:52:38Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/Mail.java", "diffHunk": "@@ -0,0 +1,301 @@\n+package com.google.cloud.healthcare.fdamystudies.util;\n+\n+/** @author Aswini */\n+import java.util.Properties;\n+import javax.activation.DataHandler;\n+import javax.activation.DataSource;\n+import javax.activation.FileDataSource;\n+import javax.mail.BodyPart;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.Multipart;\n+import javax.mail.PasswordAuthentication;\n+import javax.mail.Session;\n+import javax.mail.Transport;\n+import javax.mail.internet.InternetAddress;\n+import javax.mail.internet.MimeBodyPart;\n+import javax.mail.internet.MimeMessage;\n+import javax.mail.internet.MimeMultipart;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class Mail {\n+\n+  /** */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDA1ODAxOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/Mail.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo1Mjo1OVrOF4-HcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo1Mjo1OVrOF4-HcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI4MjI4OQ==", "bodyText": "why is this a warning? please remove debug logs", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395282289", "createdAt": "2020-03-19T19:52:59Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/Mail.java", "diffHunk": "@@ -0,0 +1,301 @@\n+package com.google.cloud.healthcare.fdamystudies.util;\n+\n+/** @author Aswini */\n+import java.util.Properties;\n+import javax.activation.DataHandler;\n+import javax.activation.DataSource;\n+import javax.activation.FileDataSource;\n+import javax.mail.BodyPart;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.Multipart;\n+import javax.mail.PasswordAuthentication;\n+import javax.mail.Session;\n+import javax.mail.Transport;\n+import javax.mail.internet.InternetAddress;\n+import javax.mail.internet.MimeBodyPart;\n+import javax.mail.internet.MimeMessage;\n+import javax.mail.internet.MimeMultipart;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class Mail {\n+\n+  /** */\n+  private static final Logger logger = LogManager.getLogger(Mail.class);\n+\n+  private String toemail;\n+  private String subject;\n+  private String messageBody;\n+  private static final String SMTP_HOST_NAME = \"smtp.gmail.com\";\n+  private static final String SMTP_PORT = \"465\";\n+  private String smtp_Hostname = \"\";\n+  private String smtp_portvalue = \"\";\n+  static String SSL_FACTORY = \"javax.net.ssl.SSLSocketFactory\";\n+  private String sslFactory = \"\";\n+  private String fromEmailAddress = \"\";\n+  private String fromEmailPass = \"\";\n+  private String fromEmailName = \"\";\n+  private String ccEmail;\n+  private String bccEmail;\n+  private String attachmentPath;\n+\n+  public boolean sendemail() throws Exception {\n+    logger.warn(\" sendemail() ====start\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDA2MjIwOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/Mail.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo1NDoxOFrOF4-KKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo1NDoxOFrOF4-KKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI4Mjk4NQ==", "bodyText": "nit: should be toEmail?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395282985", "createdAt": "2020-03-19T19:54:18Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/Mail.java", "diffHunk": "@@ -0,0 +1,301 @@\n+package com.google.cloud.healthcare.fdamystudies.util;\n+\n+/** @author Aswini */\n+import java.util.Properties;\n+import javax.activation.DataHandler;\n+import javax.activation.DataSource;\n+import javax.activation.FileDataSource;\n+import javax.mail.BodyPart;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.Multipart;\n+import javax.mail.PasswordAuthentication;\n+import javax.mail.Session;\n+import javax.mail.Transport;\n+import javax.mail.internet.InternetAddress;\n+import javax.mail.internet.MimeBodyPart;\n+import javax.mail.internet.MimeMessage;\n+import javax.mail.internet.MimeMultipart;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class Mail {\n+\n+  /** */\n+  private static final Logger logger = LogManager.getLogger(Mail.class);\n+\n+  private String toemail;\n+  private String subject;\n+  private String messageBody;\n+  private static final String SMTP_HOST_NAME = \"smtp.gmail.com\";\n+  private static final String SMTP_PORT = \"465\";\n+  private String smtp_Hostname = \"\";\n+  private String smtp_portvalue = \"\";\n+  static String SSL_FACTORY = \"javax.net.ssl.SSLSocketFactory\";\n+  private String sslFactory = \"\";\n+  private String fromEmailAddress = \"\";\n+  private String fromEmailPass = \"\";\n+  private String fromEmailName = \"\";\n+  private String ccEmail;\n+  private String bccEmail;\n+  private String attachmentPath;\n+\n+  public boolean sendemail() throws Exception {\n+    logger.warn(\" sendemail() ====start\");\n+    boolean sentMail = false;\n+    try {\n+      final String username = this.getFromEmailAddress();\n+      final String password = this.getFromEmailPass();\n+      Properties props = new Properties();\n+      props.put(\"mail.smtp.auth\", \"true\");\n+      props.put(\"mail.smtp.host\", this.getSmtp_Hostname());\n+      props.put(\"mail.smtp.socketFactory.port\", this.getSmtp_portvalue());\n+      props.put(\"mail.smtp.socketFactory.class\", this.getSslFactory());\n+      props.put(\"mail.smtp.port\", this.getSmtp_portvalue());\n+      Session session =\n+          Session.getInstance(\n+              props,\n+              new javax.mail.Authenticator() {\n+                @Override\n+                protected PasswordAuthentication getPasswordAuthentication() {\n+                  return new PasswordAuthentication(username, password);\n+                }\n+              });\n+      Message message = new MimeMessage(session);\n+      message.setFrom(new InternetAddress(username));\n+      if (StringUtils.isNotBlank(this.getToemail())) {\n+        if (this.getToemail().indexOf(\",\") != -1) {\n+          message.setRecipients(\n+              Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n+        } else {\n+          message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n+        }\n+      }\n+      if (StringUtils.isNotBlank(this.getCcEmail())) {\n+        message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n+      }\n+      if (StringUtils.isNotBlank(this.getBccEmail())) {\n+        message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n+      }\n+      message.setSubject(this.subject);\n+      message.setContent(this.getMessageBody(), \"text/html\");\n+      Transport.send(message);\n+      logger.debug(\"sendemail()====end\");\n+      sentMail = true;\n+    } catch (MessagingException e) {\n+      logger.error(\"sendemail() MessagingException- error\", e);\n+    } catch (Exception e) {\n+      logger.error(\"ERROR:  sendemail() - error( ) \" + e + \" : \");\n+    }\n+    logger.info(\"Mail.sendemail() :: Ends\");\n+    return sentMail;\n+  }\n+\n+  public boolean sendMailWithAttachment() throws Exception {\n+    logger.debug(\"sendemail()====start\");\n+    boolean sentMail = false;\n+    try {\n+      final String username = this.getFromEmailAddress();\n+      final String password = this.getFromEmailPass();\n+      Properties props = new Properties();\n+      props.put(\"mail.smtp.auth\", \"true\");\n+      props.put(\"mail.smtp.host\", this.getSmtp_Hostname());\n+      props.put(\"mail.smtp.socketFactory.port\", this.getSmtp_portvalue());\n+      props.put(\"mail.smtp.socketFactory.class\", this.getSslFactory());\n+      props.put(\"mail.smtp.port\", this.getSmtp_portvalue());\n+      Session session =\n+          Session.getInstance(\n+              props,\n+              new javax.mail.Authenticator() {\n+                @Override\n+                protected PasswordAuthentication getPasswordAuthentication() {\n+                  return new PasswordAuthentication(username, password);\n+                }\n+              });\n+      Message message = new MimeMessage(session);\n+      if (StringUtils.isNotBlank(this.getToemail())) {\n+        if (this.getToemail().indexOf(\",\") != -1) {\n+          message.setRecipients(\n+              Message.RecipientType.BCC, InternetAddress.parse(this.getToemail()));\n+        } else {\n+          message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(this.getToemail()));\n+        }\n+      }\n+      if (StringUtils.isNotBlank(this.getCcEmail())) {\n+        message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(this.getCcEmail()));\n+      }\n+      if (StringUtils.isNotBlank(this.getBccEmail())) {\n+        message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(this.getBccEmail()));\n+      }\n+      message.setSubject(this.subject);\n+      message.setFrom(new InternetAddress(username));\n+      // message.setText(\"Check attachment in Mail\");\n+      // message.setContent(messageBody, \"text/html\");\n+      // Create the message part\n+      BodyPart messageBodyPart = new MimeBodyPart();\n+      // Create a multipar message\n+      Multipart multipart = new MimeMultipart();\n+      // Part two is attachment\n+      messageBodyPart = new MimeBodyPart();\n+      // String filename = \"D:\\\\temp\\\\TestLinks.pdf\"; // D:\\temp\\noteb.txt\n+      DataSource source = new FileDataSource(this.getAttachmentPath());\n+      messageBodyPart.setDataHandler(new DataHandler(source));\n+      messageBodyPart.setFileName(source.getName());\n+      messageBodyPart.setHeader(\"Content-Transfer-Encoding\", \"base64\");\n+      messageBodyPart.setHeader(\"Content-Type\", source.getContentType());\n+      // Send the complete message parts\n+      multipart.addBodyPart(messageBodyPart);\n+\n+      messageBodyPart = new MimeBodyPart();\n+      messageBodyPart.setText(messageBody);\n+      messageBodyPart.setHeader(\"MIME-Version\", \"1.0\");\n+      messageBodyPart.setHeader(\"Content-Type\", messageBodyPart.getContentType());\n+      multipart.addBodyPart(messageBodyPart);\n+\n+      message.setContent(multipart);\n+      Transport.send(message);\n+      sentMail = true;\n+    } catch (MessagingException e) {\n+      logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n+      sentMail = false;\n+    } catch (Exception e) {\n+      logger.error(\"ERROR:  sendemail() - \" + e + \" : \");\n+    }\n+    logger.info(\"Mail.sendemail() :: Ends\");\n+    return sentMail;\n+  }\n+\n+  public String getToemail() {\n+    return toemail;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDA2NzAyOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/AppConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo1NTo0N1rOF4-NIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo1NTo0N1rOF4-NIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI4Mzc0NQ==", "bodyText": "please use the exact formatting of the Google copyright header.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395283745", "createdAt": "2020-03-19T19:55:47Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/AppConfig.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * *****************************************************************************\n+ *\n+ * <p>Copyright 2020 Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * *****************************************************************************", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDA2NzkxOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/AppConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo1NjowMVrOF4-NrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo1NjowMVrOF4-NrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI4Mzg4NA==", "bodyText": "all commented out code should be removed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395283884", "createdAt": "2020-03-19T19:56:01Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/AppConfig.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * *****************************************************************************\n+ *\n+ * <p>Copyright 2020 Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * *****************************************************************************\n+ */\n+package com.google.cloud.healthcare.fdamystudies;\n+\n+// @Configuration\n+// @EnableTransactionManagement\n+// @EnableJpaRepositories(\n+//    basePackages = \"com.btc.fda.repository\",\n+//    entityManagerFactoryRef = \"entityManagerFactory\",\n+//    transactionManagerRef = \"transactionManager\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDA3MjAwOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/AppConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo1NzoyMFrOF4-QUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo1NzoyMFrOF4-QUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI4NDU2Mw==", "bodyText": "this class is entirely commented out? is it not needed? or is it in progress?\nIf it's not needed, please delete it. If not, please add TODO or comments instead of commented out code.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395284563", "createdAt": "2020-03-19T19:57:20Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/AppConfig.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * *****************************************************************************\n+ *\n+ * <p>Copyright 2020 Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * *****************************************************************************\n+ */\n+package com.google.cloud.healthcare.fdamystudies;\n+\n+// @Configuration\n+// @EnableTransactionManagement\n+// @EnableJpaRepositories(\n+//    basePackages = \"com.btc.fda.repository\",\n+//    entityManagerFactoryRef = \"entityManagerFactory\",\n+//    transactionManagerRef = \"transactionManager\")\n+public class AppConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDA3NjMzOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/OAuth2ResourceServerConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo1ODozMlrOF4-TEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo1ODozMlrOF4-TEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI4NTI2NA==", "bodyText": "same as previous class, please fix copyright header. Remove class if it's not needed.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395285264", "createdAt": "2020-03-19T19:58:32Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/OAuth2ResourceServerConfig.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/**\n+ * *****************************************************************************\n+ *\n+ * <p>Copyright 2020 Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * *****************************************************************************\n+ */\n+package com.google.cloud.healthcare.fdamystudies;\n+\n+// @Configuration", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDA3ODE2OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/UserManagementServicesApplication.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo1OTowNlrOF4-URA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo1OTowNlrOF4-URA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI4NTU3Mg==", "bodyText": "please remove", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395285572", "createdAt": "2020-03-19T19:59:06Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/UserManagementServicesApplication.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/**\n+ * *****************************************************************************\n+ *\n+ * <p>Copyright 2020 Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * *****************************************************************************\n+ */\n+package com.google.cloud.healthcare.fdamystudies;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+// import\n+// org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDA3ODg0OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/bean/UserRegistrationResponse.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo1OToxOVrOF4-UuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo1OToxOVrOF4-UuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI4NTY4OQ==", "bodyText": "remove author tag", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395285689", "createdAt": "2020-03-19T19:59:19Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/bean/UserRegistrationResponse.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/**\n+ * *****************************************************************************\n+ *\n+ * <p>Copyright 2020 Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * *****************************************************************************\n+ */\n+/** */\n+package com.google.cloud.healthcare.fdamystudies.bean;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+\n+/**\n+ * Project Name: UserManagementServiceBundle\n+ *\n+ * @author Chiranjibi Dash", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDA3OTYxOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/bean/VerifyEmailIdResponse.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo1OTozMlrOF4-VMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo1OTozMlrOF4-VMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI4NTgwOA==", "bodyText": "please remove", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395285808", "createdAt": "2020-03-19T19:59:32Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/bean/VerifyEmailIdResponse.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/**\n+ * *****************************************************************************\n+ *\n+ * <p>Copyright 2020 Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * *****************************************************************************\n+ */\n+/** */\n+package com.google.cloud.healthcare.fdamystudies.bean;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+\n+/**\n+ * Project Name: UserManagementServiceBundle\n+ *\n+ * @author Chiranjibi Dash\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDA4MTQ3OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/BodyForProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDowMDowNlrOF4-WUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDowMDowNlrOF4-WUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI4NjA5OA==", "bodyText": "remove please", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395286098", "createdAt": "2020-03-19T20:00:06Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/BodyForProvider.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/**\n+ * *****************************************************************************\n+ *\n+ * <p>Copyright 2020 Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * *****************************************************************************\n+ */\n+/** */\n+package com.google.cloud.healthcare.fdamystudies.beans;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+\n+/**\n+ * Project Name: UserManagementServiceBundle\n+ *\n+ * @author Chiranjibi Dash\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDA4MzYwOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/DeleteAccountInfo.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDowMDo0OVrOF4-Xyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDowMDo0OVrOF4-Xyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI4NjQ3NA==", "bodyText": "remove please", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395286474", "createdAt": "2020-03-19T20:00:49Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/DeleteAccountInfo.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/**\n+ * *****************************************************************************\n+ *\n+ * <p>Copyright 2020 Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * *****************************************************************************\n+ */\n+/** */\n+package com.google.cloud.healthcare.fdamystudies.beans;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+\n+/**\n+ * Project Name: UserManagementServiceBundle\n+ *\n+ * @author Chiranjibi Dash\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDA4NjI0OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/DeleteAccountInfo.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDowMTo0NFrOF4-ZgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDowMTo0NFrOF4-ZgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI4NjkxMg==", "bodyText": "please change copyright to the one provided.\nplease remove empty comment block", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395286912", "createdAt": "2020-03-19T20:01:44Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/DeleteAccountInfo.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/**\n+ * *****************************************************************************\n+ *\n+ * <p>Copyright 2020 Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * *****************************************************************************\n+ */\n+/** */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDA5MDk0OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/DeleteAccountInfoResponseBean.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDowMzoxMlrOF4-cmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDowMzoxMlrOF4-cmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI4NzcwNQ==", "bodyText": "please remove", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395287705", "createdAt": "2020-03-19T20:03:12Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/DeleteAccountInfoResponseBean.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/**\n+ * *****************************************************************************\n+ *\n+ * <p>Copyright 2020 Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * *****************************************************************************\n+ */\n+/** */\n+package com.google.cloud.healthcare.fdamystudies.beans;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+\n+/**\n+ * Project Name: UserManagementServiceBundle\n+ *\n+ * @author Chiranjibi Dash\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDA5MTc4OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/DeleteAccountInfoResponseBean.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDowMzoyOFrOF4-dFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDowMzoyOFrOF4-dFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI4NzgzMQ==", "bodyText": "please fix copy right, and remove empty comment", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395287831", "createdAt": "2020-03-19T20:03:28Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/DeleteAccountInfoResponseBean.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/**\n+ * *****************************************************************************\n+ *\n+ * <p>Copyright 2020 Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * *****************************************************************************\n+ */\n+/** */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDA5NzkzOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/ErrorBean.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDowNToxNFrOF4-g6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDowNToxNFrOF4-g6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI4ODgxMQ==", "bodyText": "how come you are not using lombok Getter and Setter for this class as well?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395288811", "createdAt": "2020-03-19T20:05:14Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/ErrorBean.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * *****************************************************************************\n+ *\n+ * <p>Copyright 2020 Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * *****************************************************************************\n+ */\n+package com.google.cloud.healthcare.fdamystudies.beans;\n+\n+public class ErrorBean {\n+\n+  private Integer code = 0;\n+  private String message = \"\";\n+\n+  public Integer getCode() {\n+    return code;\n+  }\n+\n+  public ErrorBean setCode(Integer code) {\n+    this.code = code;\n+    return this;\n+  }\n+\n+  public String getMessage() {\n+    return message;\n+  }\n+\n+  public ErrorBean setMessage(String message) {\n+    this.message = message;\n+    return this;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDExNTA3OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationForm.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoxMDo1MVrOF4-r2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoxMDo1MVrOF4-r2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI5MTYwOA==", "bodyText": "please remove", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395291608", "createdAt": "2020-03-19T20:10:51Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationForm.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/**\n+ * *****************************************************************************\n+ *\n+ * <p>Copyright 2020 Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * *****************************************************************************\n+ */\n+/** */\n+package com.google.cloud.healthcare.fdamystudies.beans;\n+\n+import java.time.LocalDateTime;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+\n+/**\n+ * PROJECT NAME: FDA-EA-UserRegistration-Server\n+ *\n+ * @author Chiranjibi Dash DATE: Dec 13, 2019 TIME: 11:59:07 AM\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDExNTUzOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationForm.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoxMTowMVrOF4-sKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoxMTowMVrOF4-sKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI5MTY5MQ==", "bodyText": "please fix", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395291691", "createdAt": "2020-03-19T20:11:01Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationForm.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/**\n+ * *****************************************************************************\n+ *\n+ * <p>Copyright 2020 Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * *****************************************************************************\n+ */\n+/** */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDExOTc3OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/AppConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoxMjoyOFrOF4-u6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoxMjoyOFrOF4-u6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI5MjM5NQ==", "bodyText": "please remove commented out code", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395292395", "createdAt": "2020-03-19T20:12:28Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/AppConfig.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/**\n+ * *****************************************************************************\n+ *\n+ * <p>Copyright 2020 Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * *****************************************************************************\n+ */\n+/** */\n+package com.google.cloud.healthcare.fdamystudies.config;\n+\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Project Name: MyStudiesuserRegWs\n+ *\n+ * @author Chiranjibi Dash, Date: Dec 27, 2019, Time: 12:18:58 PM\n+ */\n+@Configuration\n+public class AppConfig {\n+\n+  /*  @Bean\n+  public RestTemplate restTemplate() {\n+    return new RestTemplate();\n+  }*/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDEyMDIxOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/AppConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoxMjozN1rOF4-vMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoxMjozN1rOF4-vMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI5MjQ2NQ==", "bodyText": "please remove", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395292465", "createdAt": "2020-03-19T20:12:37Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/AppConfig.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/**\n+ * *****************************************************************************\n+ *\n+ * <p>Copyright 2020 Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * *****************************************************************************\n+ */\n+/** */\n+package com.google.cloud.healthcare.fdamystudies.config;\n+\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Project Name: MyStudiesuserRegWs\n+ *\n+ * @author Chiranjibi Dash, Date: Dec 27, 2019, Time: 12:18:58 PM\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDEyMTI0OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/AppConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoxMjo1NFrOF4-v0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoxMjo1NFrOF4-v0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI5MjYyNw==", "bodyText": "please fix", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395292627", "createdAt": "2020-03-19T20:12:54Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/AppConfig.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/**\n+ * *****************************************************************************\n+ *\n+ * <p>Copyright 2020 Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * *****************************************************************************\n+ */\n+/** */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDEyMjA2OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/ApplicationPropertyConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoxMzoxMFrOF4-wXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoxMzoxMFrOF4-wXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI5Mjc2NQ==", "bodyText": "please clean up", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395292765", "createdAt": "2020-03-19T20:13:10Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/ApplicationPropertyConfiguration.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * *****************************************************************************\n+ *\n+ * <p>Copyright 2020 Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * *****************************************************************************\n+ */\n+package com.google.cloud.healthcare.fdamystudies.config;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.PropertySource;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+\n+@Configuration\n+// @PropertySource(\"classpath:application-${spring.profiles.active}.properties\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDEyNTI1OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/BeanConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoxMzo1OFrOF4-yfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoxMzo1OFrOF4-yfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI5MzMxMA==", "bodyText": "please remove commented out code", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395293310", "createdAt": "2020-03-19T20:13:58Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/BeanConfig.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/**\n+ * *****************************************************************************\n+ *\n+ * <p>Copyright 2020 Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * *****************************************************************************\n+ */\n+package com.google.cloud.healthcare.fdamystudies.config;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.web.servlet.FilterRegistrationBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.web.client.RestTemplate;\n+import org.springframework.web.servlet.config.annotation.CorsRegistry;\n+import org.springframework.web.servlet.config.annotation.EnableWebMvc;\n+import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n+import com.google.cloud.healthcare.fdamystudies.util.AuthenticationFilter;\n+\n+@EnableScheduling\n+@Configuration\n+@EnableWebMvc\n+public class BeanConfig implements WebMvcConfigurer {\n+\n+  @Autowired ApplicationPropertyConfiguration appConfig;\n+\n+  /*  @Bean\n+  public EmailNotification emailNotification() {\n+    return new EmailNotification(appConfig);\n+  }*/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDEyNjQzOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/WebSecurityConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoxNDoyM1rOF4-zPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoxNDoyM1rOF4-zPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI5MzUwMg==", "bodyText": "please clean up your code", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395293502", "createdAt": "2020-03-19T20:14:23Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/WebSecurityConfig.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * *****************************************************************************\n+ *\n+ * <p>Copyright 2020 Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * *****************************************************************************\n+ */\n+package com.google.cloud.healthcare.fdamystudies.config;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.builders.WebSecurity;\n+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\n+import org.springframework.security.web.AuthenticationEntryPoint;\n+\n+@Configuration\n+@EnableWebSecurity\n+public class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n+\n+  @Autowired private AuthenticationEntryPoint authEntryPoint;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @Override\n+  protected void configure(HttpSecurity http) throws Exception {\n+    http.csrf().disable();\n+    http.cors();\n+    //\t\t// All requests send to the Web Server request must be authenticated\n+    //\t\thttp.authorizeRequests().anyRequest().authenticated();\n+    //\n+    //\t\t// Use AuthenticationEntryPoint to authenticate user/password\n+    //\t\thttp.httpBasic().authenticationEntryPoint(authEntryPoint);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDEyNzUyOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/WebSecurityConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoxNDo0MlrOF4-z8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoxNDo0MlrOF4-z8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI5MzY4MA==", "bodyText": "should be removed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395293680", "createdAt": "2020-03-19T20:14:42Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/WebSecurityConfig.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * *****************************************************************************\n+ *\n+ * <p>Copyright 2020 Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * *****************************************************************************\n+ */\n+package com.google.cloud.healthcare.fdamystudies.config;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.builders.WebSecurity;\n+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\n+import org.springframework.security.web.AuthenticationEntryPoint;\n+\n+@Configuration\n+@EnableWebSecurity\n+public class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n+\n+  @Autowired private AuthenticationEntryPoint authEntryPoint;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @Override\n+  protected void configure(HttpSecurity http) throws Exception {\n+    http.csrf().disable();\n+    http.cors();\n+    //\t\t// All requests send to the Web Server request must be authenticated\n+    //\t\thttp.authorizeRequests().anyRequest().authenticated();\n+    //\n+    //\t\t// Use AuthenticationEntryPoint to authenticate user/password\n+    //\t\thttp.httpBasic().authenticationEntryPoint(authEntryPoint);\n+  }\n+\n+  @Bean\n+  public BCryptPasswordEncoder passwordEncoder() {\n+    return new BCryptPasswordEncoder();\n+  }\n+\n+  //\t@Autowired\n+  //\tpublic void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {\n+  //\t\tString appPd = this.passwordEncoder().encode(appConfig.getAppPasswd());\n+  //\t\tInMemoryUserDetailsManagerConfigurer<AuthenticationManagerBuilder> mngConfig =\n+  // auth.inMemoryAuthentication();\n+  //\t\tUserDetails u1 = User.withUsername(appConfig.getAppUserId()).password(appPd).roles(\"USER\")\n+  //\t\t\t\t.build();\n+  //\t\tmngConfig.withUser(u1);\n+  //\t}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDEyOTY3OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/UserRegistrationController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoxNToyMVrOF4-1QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoxNToyMVrOF4-1QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI5NDAxNw==", "bodyText": "please remove author tag across the code", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395294017", "createdAt": "2020-03-19T20:15:21Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/UserRegistrationController.java", "diffHunk": "@@ -0,0 +1,419 @@\n+/**\n+ * *****************************************************************************\n+ *\n+ * <p>Copyright 2020 Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * *****************************************************************************\n+ */\n+/** */\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.Context;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestHeader;\n+import org.springframework.web.bind.annotation.RestController;\n+import com.google.cloud.healthcare.fdamystudies.bean.UserRegistrationResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.AppOrgInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.AuthRegistrationResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.DeleteAccountInfoResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationForm;\n+import com.google.cloud.healthcare.fdamystudies.dao.CommonDao;\n+import com.google.cloud.healthcare.fdamystudies.exceptions.SystemException;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetails;\n+import com.google.cloud.healthcare.fdamystudies.service.FdaEaUserDetailsService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserRegAdminUserService;\n+import com.google.cloud.healthcare.fdamystudies.util.EmailNotification;\n+import com.google.cloud.healthcare.fdamystudies.util.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.util.MyStudiesUserRegUtil;\n+import com.google.cloud.healthcare.fdamystudies.util.UserManagementUtil;\n+\n+/**\n+ * Project Name: UserManagementServiceBundle\n+ *\n+ * @author Chiranjibi Dash\n+ */\n+@RestController\n+public class UserRegistrationController {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(UserRegistrationController.class);\n+\n+  @Autowired private FdaEaUserDetailsService service;\n+\n+  @Autowired private EmailNotification emailNotification;\n+\n+  @Autowired private CommonDao profiledao;\n+\n+  @Autowired private UserManagementUtil userManagementUtil;\n+\n+  @Autowired private UserRegAdminUserService adminUserService;\n+\n+  @Value(\"${email.code.expire_time}\")\n+  private long expireTime;\n+\n+  @GetMapping(\"/healthCheck\")\n+  public ResponseEntity<?> healthCheck() {\n+    return ResponseEntity.ok(\"Up and Running\");\n+  }\n+\n+  /**\n+   * @author Chiranjibi Dash", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDEzMDYwOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/UserRegistrationController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoxNTozOFrOF4-11A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoxNTozOFrOF4-11A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI5NDE2NA==", "bodyText": "why is this in uppercase", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395294164", "createdAt": "2020-03-19T20:15:38Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/UserRegistrationController.java", "diffHunk": "@@ -0,0 +1,419 @@\n+/**\n+ * *****************************************************************************\n+ *\n+ * <p>Copyright 2020 Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * *****************************************************************************\n+ */\n+/** */\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.Context;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestHeader;\n+import org.springframework.web.bind.annotation.RestController;\n+import com.google.cloud.healthcare.fdamystudies.bean.UserRegistrationResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.AppOrgInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.AuthRegistrationResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.DeleteAccountInfoResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationForm;\n+import com.google.cloud.healthcare.fdamystudies.dao.CommonDao;\n+import com.google.cloud.healthcare.fdamystudies.exceptions.SystemException;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetails;\n+import com.google.cloud.healthcare.fdamystudies.service.FdaEaUserDetailsService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserRegAdminUserService;\n+import com.google.cloud.healthcare.fdamystudies.util.EmailNotification;\n+import com.google.cloud.healthcare.fdamystudies.util.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.util.MyStudiesUserRegUtil;\n+import com.google.cloud.healthcare.fdamystudies.util.UserManagementUtil;\n+\n+/**\n+ * Project Name: UserManagementServiceBundle\n+ *\n+ * @author Chiranjibi Dash\n+ */\n+@RestController\n+public class UserRegistrationController {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(UserRegistrationController.class);\n+\n+  @Autowired private FdaEaUserDetailsService service;\n+\n+  @Autowired private EmailNotification emailNotification;\n+\n+  @Autowired private CommonDao profiledao;\n+\n+  @Autowired private UserManagementUtil userManagementUtil;\n+\n+  @Autowired private UserRegAdminUserService adminUserService;\n+\n+  @Value(\"${email.code.expire_time}\")\n+  private long expireTime;\n+\n+  @GetMapping(\"/healthCheck\")\n+  public ResponseEntity<?> healthCheck() {\n+    return ResponseEntity.ok(\"Up and Running\");\n+  }\n+\n+  /**\n+   * @author Chiranjibi Dash\n+   * @param userForm\n+   * @param applicationId\n+   * @param orgId\n+   * @param accessToken\n+   * @param response\n+   * @return ResponseEntity<?>\n+   */\n+  @PostMapping(\"/register\")\n+  public ResponseEntity<?> registerUser(\n+      @RequestBody UserRegistrationForm userForm,\n+      @RequestHeader(\"appId\") String appId,\n+      @RequestHeader(\"orgId\") String orgId,\n+      @RequestHeader(\"clientId\") String clientId,\n+      @RequestHeader(\"secretKey\") String secretKey,\n+      @Context HttpServletResponse response) {\n+\n+    logger.info(\"UserRegistrationController.registerUser() Started\");\n+    UserRegistrationResponse registrationResponse = null;\n+\n+    if ((clientId.length() == 0 || clientId == null && StringUtils.isEmpty(clientId))\n+        || (secretKey.length() == 0 || secretKey == null && StringUtils.isEmpty(secretKey))\n+        || (userForm.getEmailId() == null && StringUtils.isEmpty(userForm.getEmailId()))\n+        || (userForm.getPassword() == null && StringUtils.isEmpty(userForm.getPassword()))) {\n+      MyStudiesUserRegUtil.getFailureResponse(\n+          400 + \"\",\n+          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n+          response);\n+      registrationResponse = new UserRegistrationResponse();\n+      registrationResponse.setCode(400);\n+      registrationResponse.setMessage(\n+          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue());\n+      logger.info(\"UserRegistrationController.registerUser() ENDED with BAD_REQUEST\");\n+      return new ResponseEntity<>(registrationResponse, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    boolean emailResponse = false;\n+    try {\n+\n+      if ((userForm.getEmailId() != null && StringUtils.isNotEmpty(userForm.getEmailId()))\n+          && (userForm.getPassword() != null && StringUtils.isNotEmpty(userForm.getPassword()))) {\n+\n+        // SAVING USER INFORMATION in AUTH SERVER By calling registerUserInAuthServer()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDEzMTExOnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/UserRegistrationController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoxNTo0OFrOF4-2Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoxNTo0OFrOF4-2Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI5NDI1MQ==", "bodyText": "same here", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395294251", "createdAt": "2020-03-19T20:15:48Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/UserRegistrationController.java", "diffHunk": "@@ -0,0 +1,419 @@\n+/**\n+ * *****************************************************************************\n+ *\n+ * <p>Copyright 2020 Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * *****************************************************************************\n+ */\n+/** */\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.Context;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestHeader;\n+import org.springframework.web.bind.annotation.RestController;\n+import com.google.cloud.healthcare.fdamystudies.bean.UserRegistrationResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.AppOrgInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.AuthRegistrationResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.DeleteAccountInfoResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationForm;\n+import com.google.cloud.healthcare.fdamystudies.dao.CommonDao;\n+import com.google.cloud.healthcare.fdamystudies.exceptions.SystemException;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetails;\n+import com.google.cloud.healthcare.fdamystudies.service.FdaEaUserDetailsService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserRegAdminUserService;\n+import com.google.cloud.healthcare.fdamystudies.util.EmailNotification;\n+import com.google.cloud.healthcare.fdamystudies.util.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.util.MyStudiesUserRegUtil;\n+import com.google.cloud.healthcare.fdamystudies.util.UserManagementUtil;\n+\n+/**\n+ * Project Name: UserManagementServiceBundle\n+ *\n+ * @author Chiranjibi Dash\n+ */\n+@RestController\n+public class UserRegistrationController {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(UserRegistrationController.class);\n+\n+  @Autowired private FdaEaUserDetailsService service;\n+\n+  @Autowired private EmailNotification emailNotification;\n+\n+  @Autowired private CommonDao profiledao;\n+\n+  @Autowired private UserManagementUtil userManagementUtil;\n+\n+  @Autowired private UserRegAdminUserService adminUserService;\n+\n+  @Value(\"${email.code.expire_time}\")\n+  private long expireTime;\n+\n+  @GetMapping(\"/healthCheck\")\n+  public ResponseEntity<?> healthCheck() {\n+    return ResponseEntity.ok(\"Up and Running\");\n+  }\n+\n+  /**\n+   * @author Chiranjibi Dash\n+   * @param userForm\n+   * @param applicationId\n+   * @param orgId\n+   * @param accessToken\n+   * @param response\n+   * @return ResponseEntity<?>\n+   */\n+  @PostMapping(\"/register\")\n+  public ResponseEntity<?> registerUser(\n+      @RequestBody UserRegistrationForm userForm,\n+      @RequestHeader(\"appId\") String appId,\n+      @RequestHeader(\"orgId\") String orgId,\n+      @RequestHeader(\"clientId\") String clientId,\n+      @RequestHeader(\"secretKey\") String secretKey,\n+      @Context HttpServletResponse response) {\n+\n+    logger.info(\"UserRegistrationController.registerUser() Started\");\n+    UserRegistrationResponse registrationResponse = null;\n+\n+    if ((clientId.length() == 0 || clientId == null && StringUtils.isEmpty(clientId))\n+        || (secretKey.length() == 0 || secretKey == null && StringUtils.isEmpty(secretKey))\n+        || (userForm.getEmailId() == null && StringUtils.isEmpty(userForm.getEmailId()))\n+        || (userForm.getPassword() == null && StringUtils.isEmpty(userForm.getPassword()))) {\n+      MyStudiesUserRegUtil.getFailureResponse(\n+          400 + \"\",\n+          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n+          response);\n+      registrationResponse = new UserRegistrationResponse();\n+      registrationResponse.setCode(400);\n+      registrationResponse.setMessage(\n+          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue());\n+      logger.info(\"UserRegistrationController.registerUser() ENDED with BAD_REQUEST\");\n+      return new ResponseEntity<>(registrationResponse, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    boolean emailResponse = false;\n+    try {\n+\n+      if ((userForm.getEmailId() != null && StringUtils.isNotEmpty(userForm.getEmailId()))\n+          && (userForm.getPassword() != null && StringUtils.isNotEmpty(userForm.getPassword()))) {\n+\n+        // SAVING USER INFORMATION in AUTH SERVER By calling registerUserInAuthServer()\n+        AuthRegistrationResponseBean authServerResponse =\n+            userManagementUtil.registerUserInAuthServer(\n+                userForm, appId, orgId, clientId, secretKey);\n+        logger.info(\"(C)...REGISTRATION RESPONSE BEAN: \" + authServerResponse);\n+\n+        if (authServerResponse != null && \"OK\".equals(authServerResponse.getMessage())) {\n+          logger.info(\"providerResponse: \" + authServerResponse.getMessage());\n+\n+          // save userId and email in the UserRegistration server\n+\n+          UserDetails userDetailsUsingUserId = prepareUserDetails(authServerResponse.getUserId());\n+          if (userDetailsUsingUserId != null) {\n+            // prepare error response here\n+            MyStudiesUserRegUtil.getFailureResponse(\n+                400 + \"\",\n+                MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+                MyStudiesUserRegUtil.ErrorCodes.EMAIL_EXISTS.getValue(),\n+                response);\n+\n+            registrationResponse = new UserRegistrationResponse();\n+            registrationResponse.setCode(400);\n+            registrationResponse.setMessage(\n+                MyStudiesUserRegUtil.ErrorCodes.EMAIL_EXISTS.getValue());\n+            logger.info(\"UserRegistrationController.registerUser() ENDED\");\n+            return new ResponseEntity<>(registrationResponse, HttpStatus.BAD_REQUEST);\n+          }\n+\n+          UserDetails userDetails = null;\n+          try {\n+\n+            // prepare the UserDetails and save in DB\n+            logger.info(\"GETTING PRIMERY KEY OF APPID AND ORGID\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDEzNTU2OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/UserRegistrationController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoxNzoxMVrOF4-48A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoxNzoxMVrOF4-48A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI5NDk2MA==", "bodyText": "do not log PII, that includes email", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395294960", "createdAt": "2020-03-19T20:17:11Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/UserRegistrationController.java", "diffHunk": "@@ -0,0 +1,419 @@\n+/**\n+ * *****************************************************************************\n+ *\n+ * <p>Copyright 2020 Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * *****************************************************************************\n+ */\n+/** */\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.Context;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestHeader;\n+import org.springframework.web.bind.annotation.RestController;\n+import com.google.cloud.healthcare.fdamystudies.bean.UserRegistrationResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.AppOrgInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.AuthRegistrationResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.DeleteAccountInfoResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationForm;\n+import com.google.cloud.healthcare.fdamystudies.dao.CommonDao;\n+import com.google.cloud.healthcare.fdamystudies.exceptions.SystemException;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetails;\n+import com.google.cloud.healthcare.fdamystudies.service.FdaEaUserDetailsService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserRegAdminUserService;\n+import com.google.cloud.healthcare.fdamystudies.util.EmailNotification;\n+import com.google.cloud.healthcare.fdamystudies.util.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.util.MyStudiesUserRegUtil;\n+import com.google.cloud.healthcare.fdamystudies.util.UserManagementUtil;\n+\n+/**\n+ * Project Name: UserManagementServiceBundle\n+ *\n+ * @author Chiranjibi Dash\n+ */\n+@RestController\n+public class UserRegistrationController {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(UserRegistrationController.class);\n+\n+  @Autowired private FdaEaUserDetailsService service;\n+\n+  @Autowired private EmailNotification emailNotification;\n+\n+  @Autowired private CommonDao profiledao;\n+\n+  @Autowired private UserManagementUtil userManagementUtil;\n+\n+  @Autowired private UserRegAdminUserService adminUserService;\n+\n+  @Value(\"${email.code.expire_time}\")\n+  private long expireTime;\n+\n+  @GetMapping(\"/healthCheck\")\n+  public ResponseEntity<?> healthCheck() {\n+    return ResponseEntity.ok(\"Up and Running\");\n+  }\n+\n+  /**\n+   * @author Chiranjibi Dash\n+   * @param userForm\n+   * @param applicationId\n+   * @param orgId\n+   * @param accessToken\n+   * @param response\n+   * @return ResponseEntity<?>\n+   */\n+  @PostMapping(\"/register\")\n+  public ResponseEntity<?> registerUser(\n+      @RequestBody UserRegistrationForm userForm,\n+      @RequestHeader(\"appId\") String appId,\n+      @RequestHeader(\"orgId\") String orgId,\n+      @RequestHeader(\"clientId\") String clientId,\n+      @RequestHeader(\"secretKey\") String secretKey,\n+      @Context HttpServletResponse response) {\n+\n+    logger.info(\"UserRegistrationController.registerUser() Started\");\n+    UserRegistrationResponse registrationResponse = null;\n+\n+    if ((clientId.length() == 0 || clientId == null && StringUtils.isEmpty(clientId))\n+        || (secretKey.length() == 0 || secretKey == null && StringUtils.isEmpty(secretKey))\n+        || (userForm.getEmailId() == null && StringUtils.isEmpty(userForm.getEmailId()))\n+        || (userForm.getPassword() == null && StringUtils.isEmpty(userForm.getPassword()))) {\n+      MyStudiesUserRegUtil.getFailureResponse(\n+          400 + \"\",\n+          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n+          response);\n+      registrationResponse = new UserRegistrationResponse();\n+      registrationResponse.setCode(400);\n+      registrationResponse.setMessage(\n+          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue());\n+      logger.info(\"UserRegistrationController.registerUser() ENDED with BAD_REQUEST\");\n+      return new ResponseEntity<>(registrationResponse, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    boolean emailResponse = false;\n+    try {\n+\n+      if ((userForm.getEmailId() != null && StringUtils.isNotEmpty(userForm.getEmailId()))\n+          && (userForm.getPassword() != null && StringUtils.isNotEmpty(userForm.getPassword()))) {\n+\n+        // SAVING USER INFORMATION in AUTH SERVER By calling registerUserInAuthServer()\n+        AuthRegistrationResponseBean authServerResponse =\n+            userManagementUtil.registerUserInAuthServer(\n+                userForm, appId, orgId, clientId, secretKey);\n+        logger.info(\"(C)...REGISTRATION RESPONSE BEAN: \" + authServerResponse);\n+\n+        if (authServerResponse != null && \"OK\".equals(authServerResponse.getMessage())) {\n+          logger.info(\"providerResponse: \" + authServerResponse.getMessage());\n+\n+          // save userId and email in the UserRegistration server\n+\n+          UserDetails userDetailsUsingUserId = prepareUserDetails(authServerResponse.getUserId());\n+          if (userDetailsUsingUserId != null) {\n+            // prepare error response here\n+            MyStudiesUserRegUtil.getFailureResponse(\n+                400 + \"\",\n+                MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+                MyStudiesUserRegUtil.ErrorCodes.EMAIL_EXISTS.getValue(),\n+                response);\n+\n+            registrationResponse = new UserRegistrationResponse();\n+            registrationResponse.setCode(400);\n+            registrationResponse.setMessage(\n+                MyStudiesUserRegUtil.ErrorCodes.EMAIL_EXISTS.getValue());\n+            logger.info(\"UserRegistrationController.registerUser() ENDED\");\n+            return new ResponseEntity<>(registrationResponse, HttpStatus.BAD_REQUEST);\n+          }\n+\n+          UserDetails userDetails = null;\n+          try {\n+\n+            // prepare the UserDetails and save in DB\n+            logger.info(\"GETTING PRIMERY KEY OF APPID AND ORGID\");\n+            AppOrgInfoBean appInfo = profiledao.getUserAppDetailsByAllApi(null, appId, orgId);\n+            logger.info(appInfo.getAppInfoId() + \"   \" + appInfo.getOrgInfoId());\n+            if (appInfo == null || appInfo.getAppInfoId() == 0) {\n+              logger.info(\n+                  \"(URS)...DELETING record in Auth Server STARTED. Though appId and orgId are not valid in UserRegistration server\");\n+              DeleteAccountInfoResponseBean deleteResponse =\n+                  userManagementUtil.deleteUserInfoInAuthServer(\n+                      authServerResponse.getUserId(),\n+                      authServerResponse.getClientToken(),\n+                      authServerResponse.getAccessToken());\n+\n+              if (deleteResponse != null && \"200\".equals(deleteResponse.getCode())) {\n+                logger.info(\n+                    \"Due to System failure in User Registration Server, user is deleted in Auth Server: \"\n+                        + userForm.getEmailId());\n+                logger.info(\"(URS)...DELETING record in Auth Server ENDED.\");\n+              }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDEzNjg0OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/UserRegistrationController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoxNzozOVrOF4-50g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoxNzozOVrOF4-50g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI5NTE4Ng==", "bodyText": "same here, do not log PII", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395295186", "createdAt": "2020-03-19T20:17:39Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/UserRegistrationController.java", "diffHunk": "@@ -0,0 +1,419 @@\n+/**\n+ * *****************************************************************************\n+ *\n+ * <p>Copyright 2020 Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * *****************************************************************************\n+ */\n+/** */\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.Context;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestHeader;\n+import org.springframework.web.bind.annotation.RestController;\n+import com.google.cloud.healthcare.fdamystudies.bean.UserRegistrationResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.AppOrgInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.AuthRegistrationResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.DeleteAccountInfoResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationForm;\n+import com.google.cloud.healthcare.fdamystudies.dao.CommonDao;\n+import com.google.cloud.healthcare.fdamystudies.exceptions.SystemException;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetails;\n+import com.google.cloud.healthcare.fdamystudies.service.FdaEaUserDetailsService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserRegAdminUserService;\n+import com.google.cloud.healthcare.fdamystudies.util.EmailNotification;\n+import com.google.cloud.healthcare.fdamystudies.util.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.util.MyStudiesUserRegUtil;\n+import com.google.cloud.healthcare.fdamystudies.util.UserManagementUtil;\n+\n+/**\n+ * Project Name: UserManagementServiceBundle\n+ *\n+ * @author Chiranjibi Dash\n+ */\n+@RestController\n+public class UserRegistrationController {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(UserRegistrationController.class);\n+\n+  @Autowired private FdaEaUserDetailsService service;\n+\n+  @Autowired private EmailNotification emailNotification;\n+\n+  @Autowired private CommonDao profiledao;\n+\n+  @Autowired private UserManagementUtil userManagementUtil;\n+\n+  @Autowired private UserRegAdminUserService adminUserService;\n+\n+  @Value(\"${email.code.expire_time}\")\n+  private long expireTime;\n+\n+  @GetMapping(\"/healthCheck\")\n+  public ResponseEntity<?> healthCheck() {\n+    return ResponseEntity.ok(\"Up and Running\");\n+  }\n+\n+  /**\n+   * @author Chiranjibi Dash\n+   * @param userForm\n+   * @param applicationId\n+   * @param orgId\n+   * @param accessToken\n+   * @param response\n+   * @return ResponseEntity<?>\n+   */\n+  @PostMapping(\"/register\")\n+  public ResponseEntity<?> registerUser(\n+      @RequestBody UserRegistrationForm userForm,\n+      @RequestHeader(\"appId\") String appId,\n+      @RequestHeader(\"orgId\") String orgId,\n+      @RequestHeader(\"clientId\") String clientId,\n+      @RequestHeader(\"secretKey\") String secretKey,\n+      @Context HttpServletResponse response) {\n+\n+    logger.info(\"UserRegistrationController.registerUser() Started\");\n+    UserRegistrationResponse registrationResponse = null;\n+\n+    if ((clientId.length() == 0 || clientId == null && StringUtils.isEmpty(clientId))\n+        || (secretKey.length() == 0 || secretKey == null && StringUtils.isEmpty(secretKey))\n+        || (userForm.getEmailId() == null && StringUtils.isEmpty(userForm.getEmailId()))\n+        || (userForm.getPassword() == null && StringUtils.isEmpty(userForm.getPassword()))) {\n+      MyStudiesUserRegUtil.getFailureResponse(\n+          400 + \"\",\n+          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n+          response);\n+      registrationResponse = new UserRegistrationResponse();\n+      registrationResponse.setCode(400);\n+      registrationResponse.setMessage(\n+          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue());\n+      logger.info(\"UserRegistrationController.registerUser() ENDED with BAD_REQUEST\");\n+      return new ResponseEntity<>(registrationResponse, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    boolean emailResponse = false;\n+    try {\n+\n+      if ((userForm.getEmailId() != null && StringUtils.isNotEmpty(userForm.getEmailId()))\n+          && (userForm.getPassword() != null && StringUtils.isNotEmpty(userForm.getPassword()))) {\n+\n+        // SAVING USER INFORMATION in AUTH SERVER By calling registerUserInAuthServer()\n+        AuthRegistrationResponseBean authServerResponse =\n+            userManagementUtil.registerUserInAuthServer(\n+                userForm, appId, orgId, clientId, secretKey);\n+        logger.info(\"(C)...REGISTRATION RESPONSE BEAN: \" + authServerResponse);\n+\n+        if (authServerResponse != null && \"OK\".equals(authServerResponse.getMessage())) {\n+          logger.info(\"providerResponse: \" + authServerResponse.getMessage());\n+\n+          // save userId and email in the UserRegistration server\n+\n+          UserDetails userDetailsUsingUserId = prepareUserDetails(authServerResponse.getUserId());\n+          if (userDetailsUsingUserId != null) {\n+            // prepare error response here\n+            MyStudiesUserRegUtil.getFailureResponse(\n+                400 + \"\",\n+                MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+                MyStudiesUserRegUtil.ErrorCodes.EMAIL_EXISTS.getValue(),\n+                response);\n+\n+            registrationResponse = new UserRegistrationResponse();\n+            registrationResponse.setCode(400);\n+            registrationResponse.setMessage(\n+                MyStudiesUserRegUtil.ErrorCodes.EMAIL_EXISTS.getValue());\n+            logger.info(\"UserRegistrationController.registerUser() ENDED\");\n+            return new ResponseEntity<>(registrationResponse, HttpStatus.BAD_REQUEST);\n+          }\n+\n+          UserDetails userDetails = null;\n+          try {\n+\n+            // prepare the UserDetails and save in DB\n+            logger.info(\"GETTING PRIMERY KEY OF APPID AND ORGID\");\n+            AppOrgInfoBean appInfo = profiledao.getUserAppDetailsByAllApi(null, appId, orgId);\n+            logger.info(appInfo.getAppInfoId() + \"   \" + appInfo.getOrgInfoId());\n+            if (appInfo == null || appInfo.getAppInfoId() == 0) {\n+              logger.info(\n+                  \"(URS)...DELETING record in Auth Server STARTED. Though appId and orgId are not valid in UserRegistration server\");\n+              DeleteAccountInfoResponseBean deleteResponse =\n+                  userManagementUtil.deleteUserInfoInAuthServer(\n+                      authServerResponse.getUserId(),\n+                      authServerResponse.getClientToken(),\n+                      authServerResponse.getAccessToken());\n+\n+              if (deleteResponse != null && \"200\".equals(deleteResponse.getCode())) {\n+                logger.info(\n+                    \"Due to System failure in User Registration Server, user is deleted in Auth Server: \"\n+                        + userForm.getEmailId());\n+                logger.info(\"(URS)...DELETING record in Auth Server ENDED.\");\n+              }\n+              MyStudiesUserRegUtil.getFailureResponse(\n+                  401 + \"\",\n+                  MyStudiesUserRegUtil.ErrorCodes.UNAUTHORIZED.getValue(),\n+                  MyStudiesUserRegUtil.ErrorCodes.UNAUTHORIZED.getValue(),\n+                  response);\n+\n+              registrationResponse = new UserRegistrationResponse();\n+              registrationResponse.setCode(401);\n+              registrationResponse.setMessage(\n+                  MyStudiesUserRegUtil.ErrorCodes.UNAUTHORIZED.getValue());\n+              logger.info(\"UserRegistrationController.registerUser() ENDED\");\n+              return new ResponseEntity<>(registrationResponse, HttpStatus.UNAUTHORIZED);\n+            } else {\n+              userForm.setUserId(authServerResponse.getUserId());\n+              userForm.setPassword(null);\n+\n+              userDetails = getUserDetails(userForm);\n+              userDetails.setAppInfoId(appInfo.getAppInfoId());\n+              userDetails.setEmailCode(RandomStringUtils.randomAlphanumeric(6));\n+              // set the Otp Expire Time\n+              userDetails.setCodeExpireDate(LocalDateTime.now().plusMinutes(expireTime));\n+              logger.info(\"USERDETAILS TO BE SAVED IN DB\" + userDetails);\n+              UserDetails serviceResp = service.saveUser(userDetails);\n+              logger.info(\"(C)...serviceResp: \" + serviceResp);\n+              // TODO: serviceResp null check\n+              if (serviceResp != null) {\n+                List<String> emailContent = prepareEmailContent(serviceResp.getEmailCode());\n+                logger.info(\"emailContent: \" + emailContent);\n+                emailResponse =\n+                    emailNotification.sendEmailNotification(\n+                        emailContent.get(0),\n+                        emailContent.get(1),\n+                        serviceResp.getEmail(),\n+                        null,\n+                        null);\n+                logger.info(\"emailNotification; \" + emailResponse);\n+\n+                MyStudiesUserRegUtil.getFailureResponse(\n+                    MyStudiesUserRegUtil.ErrorCodes.STATUS_200.getValue(),\n+                    MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n+                    MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n+                    response);\n+                registrationResponse = new UserRegistrationResponse();\n+                registrationResponse.setCode(ErrorCode.EC_200.code());\n+                registrationResponse.setMessage(ErrorCode.EC_200.errorMessage());\n+                registrationResponse.setAccessToken(authServerResponse.getAccessToken());\n+                registrationResponse.setRefreshToken(authServerResponse.getRefreshToken());\n+                registrationResponse.setUserId(authServerResponse.getUserId());\n+                registrationResponse.setClientToken(authServerResponse.getClientToken());\n+                logger.info(\"UserRegistrationController.registerUser() ENDED\");\n+                return new ResponseEntity<>(registrationResponse, HttpStatus.OK);\n+              } else throw new SystemException();\n+            }\n+          } catch (SystemException e) {\n+            logger.error(\"UserRegistrationController.registerUser(): \", e);\n+            logger.info(\n+                \"(URS)...DELETING record in Auth Server STARTED. Though it could not able to save record in UserRegistration server\");\n+            DeleteAccountInfoResponseBean deleteResponse =\n+                userManagementUtil.deleteUserInfoInAuthServer(\n+                    authServerResponse.getUserId(),\n+                    authServerResponse.getClientToken(),\n+                    authServerResponse.getClientToken());\n+\n+            if (deleteResponse != null && \"200\".equals(deleteResponse.getCode())) {\n+              logger.info(\n+                  \"Due to System failure in User Registration Server, user is deleted in Auth Server: \"\n+                      + userForm.getEmailId());\n+              logger.info(\"(URS)...DELETING record in Auth Server ENDED.\");\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 236}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDEzODU4OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/UserRegistrationController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoxODoxMFrOF4-65w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoxODoxMFrOF4-65w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI5NTQ2Mw==", "bodyText": "please remove all @author tags", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395295463", "createdAt": "2020-03-19T20:18:10Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/UserRegistrationController.java", "diffHunk": "@@ -0,0 +1,419 @@\n+/**\n+ * *****************************************************************************\n+ *\n+ * <p>Copyright 2020 Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * *****************************************************************************\n+ */\n+/** */\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.Context;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestHeader;\n+import org.springframework.web.bind.annotation.RestController;\n+import com.google.cloud.healthcare.fdamystudies.bean.UserRegistrationResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.AppOrgInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.AuthRegistrationResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.DeleteAccountInfoResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationForm;\n+import com.google.cloud.healthcare.fdamystudies.dao.CommonDao;\n+import com.google.cloud.healthcare.fdamystudies.exceptions.SystemException;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetails;\n+import com.google.cloud.healthcare.fdamystudies.service.FdaEaUserDetailsService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserRegAdminUserService;\n+import com.google.cloud.healthcare.fdamystudies.util.EmailNotification;\n+import com.google.cloud.healthcare.fdamystudies.util.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.util.MyStudiesUserRegUtil;\n+import com.google.cloud.healthcare.fdamystudies.util.UserManagementUtil;\n+\n+/**\n+ * Project Name: UserManagementServiceBundle\n+ *\n+ * @author Chiranjibi Dash\n+ */\n+@RestController\n+public class UserRegistrationController {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(UserRegistrationController.class);\n+\n+  @Autowired private FdaEaUserDetailsService service;\n+\n+  @Autowired private EmailNotification emailNotification;\n+\n+  @Autowired private CommonDao profiledao;\n+\n+  @Autowired private UserManagementUtil userManagementUtil;\n+\n+  @Autowired private UserRegAdminUserService adminUserService;\n+\n+  @Value(\"${email.code.expire_time}\")\n+  private long expireTime;\n+\n+  @GetMapping(\"/healthCheck\")\n+  public ResponseEntity<?> healthCheck() {\n+    return ResponseEntity.ok(\"Up and Running\");\n+  }\n+\n+  /**\n+   * @author Chiranjibi Dash\n+   * @param userForm\n+   * @param applicationId\n+   * @param orgId\n+   * @param accessToken\n+   * @param response\n+   * @return ResponseEntity<?>\n+   */\n+  @PostMapping(\"/register\")\n+  public ResponseEntity<?> registerUser(\n+      @RequestBody UserRegistrationForm userForm,\n+      @RequestHeader(\"appId\") String appId,\n+      @RequestHeader(\"orgId\") String orgId,\n+      @RequestHeader(\"clientId\") String clientId,\n+      @RequestHeader(\"secretKey\") String secretKey,\n+      @Context HttpServletResponse response) {\n+\n+    logger.info(\"UserRegistrationController.registerUser() Started\");\n+    UserRegistrationResponse registrationResponse = null;\n+\n+    if ((clientId.length() == 0 || clientId == null && StringUtils.isEmpty(clientId))\n+        || (secretKey.length() == 0 || secretKey == null && StringUtils.isEmpty(secretKey))\n+        || (userForm.getEmailId() == null && StringUtils.isEmpty(userForm.getEmailId()))\n+        || (userForm.getPassword() == null && StringUtils.isEmpty(userForm.getPassword()))) {\n+      MyStudiesUserRegUtil.getFailureResponse(\n+          400 + \"\",\n+          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n+          response);\n+      registrationResponse = new UserRegistrationResponse();\n+      registrationResponse.setCode(400);\n+      registrationResponse.setMessage(\n+          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue());\n+      logger.info(\"UserRegistrationController.registerUser() ENDED with BAD_REQUEST\");\n+      return new ResponseEntity<>(registrationResponse, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    boolean emailResponse = false;\n+    try {\n+\n+      if ((userForm.getEmailId() != null && StringUtils.isNotEmpty(userForm.getEmailId()))\n+          && (userForm.getPassword() != null && StringUtils.isNotEmpty(userForm.getPassword()))) {\n+\n+        // SAVING USER INFORMATION in AUTH SERVER By calling registerUserInAuthServer()\n+        AuthRegistrationResponseBean authServerResponse =\n+            userManagementUtil.registerUserInAuthServer(\n+                userForm, appId, orgId, clientId, secretKey);\n+        logger.info(\"(C)...REGISTRATION RESPONSE BEAN: \" + authServerResponse);\n+\n+        if (authServerResponse != null && \"OK\".equals(authServerResponse.getMessage())) {\n+          logger.info(\"providerResponse: \" + authServerResponse.getMessage());\n+\n+          // save userId and email in the UserRegistration server\n+\n+          UserDetails userDetailsUsingUserId = prepareUserDetails(authServerResponse.getUserId());\n+          if (userDetailsUsingUserId != null) {\n+            // prepare error response here\n+            MyStudiesUserRegUtil.getFailureResponse(\n+                400 + \"\",\n+                MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+                MyStudiesUserRegUtil.ErrorCodes.EMAIL_EXISTS.getValue(),\n+                response);\n+\n+            registrationResponse = new UserRegistrationResponse();\n+            registrationResponse.setCode(400);\n+            registrationResponse.setMessage(\n+                MyStudiesUserRegUtil.ErrorCodes.EMAIL_EXISTS.getValue());\n+            logger.info(\"UserRegistrationController.registerUser() ENDED\");\n+            return new ResponseEntity<>(registrationResponse, HttpStatus.BAD_REQUEST);\n+          }\n+\n+          UserDetails userDetails = null;\n+          try {\n+\n+            // prepare the UserDetails and save in DB\n+            logger.info(\"GETTING PRIMERY KEY OF APPID AND ORGID\");\n+            AppOrgInfoBean appInfo = profiledao.getUserAppDetailsByAllApi(null, appId, orgId);\n+            logger.info(appInfo.getAppInfoId() + \"   \" + appInfo.getOrgInfoId());\n+            if (appInfo == null || appInfo.getAppInfoId() == 0) {\n+              logger.info(\n+                  \"(URS)...DELETING record in Auth Server STARTED. Though appId and orgId are not valid in UserRegistration server\");\n+              DeleteAccountInfoResponseBean deleteResponse =\n+                  userManagementUtil.deleteUserInfoInAuthServer(\n+                      authServerResponse.getUserId(),\n+                      authServerResponse.getClientToken(),\n+                      authServerResponse.getAccessToken());\n+\n+              if (deleteResponse != null && \"200\".equals(deleteResponse.getCode())) {\n+                logger.info(\n+                    \"Due to System failure in User Registration Server, user is deleted in Auth Server: \"\n+                        + userForm.getEmailId());\n+                logger.info(\"(URS)...DELETING record in Auth Server ENDED.\");\n+              }\n+              MyStudiesUserRegUtil.getFailureResponse(\n+                  401 + \"\",\n+                  MyStudiesUserRegUtil.ErrorCodes.UNAUTHORIZED.getValue(),\n+                  MyStudiesUserRegUtil.ErrorCodes.UNAUTHORIZED.getValue(),\n+                  response);\n+\n+              registrationResponse = new UserRegistrationResponse();\n+              registrationResponse.setCode(401);\n+              registrationResponse.setMessage(\n+                  MyStudiesUserRegUtil.ErrorCodes.UNAUTHORIZED.getValue());\n+              logger.info(\"UserRegistrationController.registerUser() ENDED\");\n+              return new ResponseEntity<>(registrationResponse, HttpStatus.UNAUTHORIZED);\n+            } else {\n+              userForm.setUserId(authServerResponse.getUserId());\n+              userForm.setPassword(null);\n+\n+              userDetails = getUserDetails(userForm);\n+              userDetails.setAppInfoId(appInfo.getAppInfoId());\n+              userDetails.setEmailCode(RandomStringUtils.randomAlphanumeric(6));\n+              // set the Otp Expire Time\n+              userDetails.setCodeExpireDate(LocalDateTime.now().plusMinutes(expireTime));\n+              logger.info(\"USERDETAILS TO BE SAVED IN DB\" + userDetails);\n+              UserDetails serviceResp = service.saveUser(userDetails);\n+              logger.info(\"(C)...serviceResp: \" + serviceResp);\n+              // TODO: serviceResp null check\n+              if (serviceResp != null) {\n+                List<String> emailContent = prepareEmailContent(serviceResp.getEmailCode());\n+                logger.info(\"emailContent: \" + emailContent);\n+                emailResponse =\n+                    emailNotification.sendEmailNotification(\n+                        emailContent.get(0),\n+                        emailContent.get(1),\n+                        serviceResp.getEmail(),\n+                        null,\n+                        null);\n+                logger.info(\"emailNotification; \" + emailResponse);\n+\n+                MyStudiesUserRegUtil.getFailureResponse(\n+                    MyStudiesUserRegUtil.ErrorCodes.STATUS_200.getValue(),\n+                    MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n+                    MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n+                    response);\n+                registrationResponse = new UserRegistrationResponse();\n+                registrationResponse.setCode(ErrorCode.EC_200.code());\n+                registrationResponse.setMessage(ErrorCode.EC_200.errorMessage());\n+                registrationResponse.setAccessToken(authServerResponse.getAccessToken());\n+                registrationResponse.setRefreshToken(authServerResponse.getRefreshToken());\n+                registrationResponse.setUserId(authServerResponse.getUserId());\n+                registrationResponse.setClientToken(authServerResponse.getClientToken());\n+                logger.info(\"UserRegistrationController.registerUser() ENDED\");\n+                return new ResponseEntity<>(registrationResponse, HttpStatus.OK);\n+              } else throw new SystemException();\n+            }\n+          } catch (SystemException e) {\n+            logger.error(\"UserRegistrationController.registerUser(): \", e);\n+            logger.info(\n+                \"(URS)...DELETING record in Auth Server STARTED. Though it could not able to save record in UserRegistration server\");\n+            DeleteAccountInfoResponseBean deleteResponse =\n+                userManagementUtil.deleteUserInfoInAuthServer(\n+                    authServerResponse.getUserId(),\n+                    authServerResponse.getClientToken(),\n+                    authServerResponse.getClientToken());\n+\n+            if (deleteResponse != null && \"200\".equals(deleteResponse.getCode())) {\n+              logger.info(\n+                  \"Due to System failure in User Registration Server, user is deleted in Auth Server: \"\n+                      + userForm.getEmailId());\n+              logger.info(\"(URS)...DELETING record in Auth Server ENDED.\");\n+            }\n+            MyStudiesUserRegUtil.getFailureResponse(\n+                500 + \"\",\n+                MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n+                MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n+                response);\n+            logger.info(\"UserRegistrationController.registerUser() ENDED\");\n+            return new ResponseEntity<>(registrationResponse, HttpStatus.INTERNAL_SERVER_ERROR);\n+          } catch (Exception e) {\n+            logger.error(\"UserRegistrationController.registerUser(): \", e);\n+            DeleteAccountInfoResponseBean deleteResponse =\n+                userManagementUtil.deleteUserInfoInAuthServer(\n+                    authServerResponse.getUserId(),\n+                    authServerResponse.getClientToken(),\n+                    authServerResponse.getClientToken());\n+            if (deleteResponse != null && \"200\".equals(deleteResponse.getCode())) {\n+              logger.info(\n+                  \"Due to System failure in User Registration Server, user is deleted in Auth Server: \"\n+                      + userForm.getEmailId());\n+              logger.info(\"(URS)...DELETING record in Auth Server ENDED.\");\n+            }\n+            MyStudiesUserRegUtil.getFailureResponse(\n+                500 + \"\",\n+                MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n+                MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n+                response);\n+\n+            registrationResponse = new UserRegistrationResponse();\n+            registrationResponse.setCode(500);\n+            registrationResponse.setMessage(\n+                MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n+            logger.info(\"UserRegistrationController.registerUser() ENDED\");\n+            return new ResponseEntity<>(registrationResponse, HttpStatus.INTERNAL_SERVER_ERROR);\n+          }\n+\n+        } else {\n+          if (\"400\".equals(authServerResponse.getHttpStatusCode())) {\n+            MyStudiesUserRegUtil.getFailureResponse(\n+                authServerResponse.getCode(),\n+                authServerResponse.getTitle(),\n+                authServerResponse.getMessage(),\n+                response);\n+\n+            registrationResponse = new UserRegistrationResponse();\n+            registrationResponse.setCode(400);\n+            registrationResponse.setMessage(authServerResponse.getMessage());\n+            logger.info(\"UserRegistrationController.registerUser() ENDED\");\n+            return new ResponseEntity<>(registrationResponse, HttpStatus.BAD_REQUEST);\n+          } else if (\"401\".equals(authServerResponse.getHttpStatusCode())) {\n+            MyStudiesUserRegUtil.getFailureResponse(\n+                authServerResponse.getCode(),\n+                authServerResponse.getTitle(),\n+                authServerResponse.getMessage(),\n+                response);\n+            registrationResponse = new UserRegistrationResponse();\n+            registrationResponse.setCode(401);\n+            registrationResponse.setMessage(authServerResponse.getMessage());\n+            logger.info(\"UserRegistrationController.registerUser() ENDED\");\n+            return new ResponseEntity<>(registrationResponse, HttpStatus.UNAUTHORIZED);\n+          } else {\n+            MyStudiesUserRegUtil.getFailureResponse(\n+                500 + \"\",\n+                MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n+                MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n+                response);\n+\n+            registrationResponse = new UserRegistrationResponse();\n+            registrationResponse.setCode(500);\n+            registrationResponse.setMessage(\n+                MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n+            logger.info(\"UserRegistrationController.registerUser() ENDED\");\n+            return new ResponseEntity<>(registrationResponse, HttpStatus.INTERNAL_SERVER_ERROR);\n+          }\n+        }\n+      } else {\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            400 + \"\",\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.USER_FORM_EMPTY.getValue(),\n+            response);\n+        registrationResponse = new UserRegistrationResponse();\n+        registrationResponse.setCode(400);\n+        registrationResponse.setMessage(MyStudiesUserRegUtil.ErrorCodes.USER_FORM_EMPTY.getValue());\n+        logger.info(\"UserRegistrationController.registerUser() ENDED\");\n+        return new ResponseEntity<>(registrationResponse, HttpStatus.BAD_REQUEST);\n+      }\n+    } catch (Exception e) {\n+      logger.error(\"UserRegistrationController.registerUser(): \", e);\n+      MyStudiesUserRegUtil.getFailureResponse(\n+          500 + \"\",\n+          MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n+          MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n+          response);\n+      registrationResponse = new UserRegistrationResponse();\n+      registrationResponse.setCode(500);\n+      registrationResponse.setMessage(\n+          MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n+      logger.error(\"UserRegistrationController.registerUser() ENDED\");\n+      return new ResponseEntity<>(registrationResponse, HttpStatus.INTERNAL_SERVER_ERROR);\n+    }\n+  }\n+\n+  /**\n+   * @author Chiranjibi Dash", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 339}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDE0Mjc4OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/UserRegistrationController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoxOTozNVrOF4-9lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoxOTozNVrOF4-9lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI5NjE1MQ==", "bodyText": "Ideally email content should not be in the code; it should be stored in a text/html friendly format that allows potential reuse in different scenarios.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395296151", "createdAt": "2020-03-19T20:19:35Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/UserRegistrationController.java", "diffHunk": "@@ -0,0 +1,419 @@\n+/**\n+ * *****************************************************************************\n+ *\n+ * <p>Copyright 2020 Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * *****************************************************************************\n+ */\n+/** */\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.Context;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestHeader;\n+import org.springframework.web.bind.annotation.RestController;\n+import com.google.cloud.healthcare.fdamystudies.bean.UserRegistrationResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.AppOrgInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.AuthRegistrationResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.DeleteAccountInfoResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationForm;\n+import com.google.cloud.healthcare.fdamystudies.dao.CommonDao;\n+import com.google.cloud.healthcare.fdamystudies.exceptions.SystemException;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetails;\n+import com.google.cloud.healthcare.fdamystudies.service.FdaEaUserDetailsService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserRegAdminUserService;\n+import com.google.cloud.healthcare.fdamystudies.util.EmailNotification;\n+import com.google.cloud.healthcare.fdamystudies.util.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.util.MyStudiesUserRegUtil;\n+import com.google.cloud.healthcare.fdamystudies.util.UserManagementUtil;\n+\n+/**\n+ * Project Name: UserManagementServiceBundle\n+ *\n+ * @author Chiranjibi Dash\n+ */\n+@RestController\n+public class UserRegistrationController {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(UserRegistrationController.class);\n+\n+  @Autowired private FdaEaUserDetailsService service;\n+\n+  @Autowired private EmailNotification emailNotification;\n+\n+  @Autowired private CommonDao profiledao;\n+\n+  @Autowired private UserManagementUtil userManagementUtil;\n+\n+  @Autowired private UserRegAdminUserService adminUserService;\n+\n+  @Value(\"${email.code.expire_time}\")\n+  private long expireTime;\n+\n+  @GetMapping(\"/healthCheck\")\n+  public ResponseEntity<?> healthCheck() {\n+    return ResponseEntity.ok(\"Up and Running\");\n+  }\n+\n+  /**\n+   * @author Chiranjibi Dash\n+   * @param userForm\n+   * @param applicationId\n+   * @param orgId\n+   * @param accessToken\n+   * @param response\n+   * @return ResponseEntity<?>\n+   */\n+  @PostMapping(\"/register\")\n+  public ResponseEntity<?> registerUser(\n+      @RequestBody UserRegistrationForm userForm,\n+      @RequestHeader(\"appId\") String appId,\n+      @RequestHeader(\"orgId\") String orgId,\n+      @RequestHeader(\"clientId\") String clientId,\n+      @RequestHeader(\"secretKey\") String secretKey,\n+      @Context HttpServletResponse response) {\n+\n+    logger.info(\"UserRegistrationController.registerUser() Started\");\n+    UserRegistrationResponse registrationResponse = null;\n+\n+    if ((clientId.length() == 0 || clientId == null && StringUtils.isEmpty(clientId))\n+        || (secretKey.length() == 0 || secretKey == null && StringUtils.isEmpty(secretKey))\n+        || (userForm.getEmailId() == null && StringUtils.isEmpty(userForm.getEmailId()))\n+        || (userForm.getPassword() == null && StringUtils.isEmpty(userForm.getPassword()))) {\n+      MyStudiesUserRegUtil.getFailureResponse(\n+          400 + \"\",\n+          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n+          response);\n+      registrationResponse = new UserRegistrationResponse();\n+      registrationResponse.setCode(400);\n+      registrationResponse.setMessage(\n+          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue());\n+      logger.info(\"UserRegistrationController.registerUser() ENDED with BAD_REQUEST\");\n+      return new ResponseEntity<>(registrationResponse, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    boolean emailResponse = false;\n+    try {\n+\n+      if ((userForm.getEmailId() != null && StringUtils.isNotEmpty(userForm.getEmailId()))\n+          && (userForm.getPassword() != null && StringUtils.isNotEmpty(userForm.getPassword()))) {\n+\n+        // SAVING USER INFORMATION in AUTH SERVER By calling registerUserInAuthServer()\n+        AuthRegistrationResponseBean authServerResponse =\n+            userManagementUtil.registerUserInAuthServer(\n+                userForm, appId, orgId, clientId, secretKey);\n+        logger.info(\"(C)...REGISTRATION RESPONSE BEAN: \" + authServerResponse);\n+\n+        if (authServerResponse != null && \"OK\".equals(authServerResponse.getMessage())) {\n+          logger.info(\"providerResponse: \" + authServerResponse.getMessage());\n+\n+          // save userId and email in the UserRegistration server\n+\n+          UserDetails userDetailsUsingUserId = prepareUserDetails(authServerResponse.getUserId());\n+          if (userDetailsUsingUserId != null) {\n+            // prepare error response here\n+            MyStudiesUserRegUtil.getFailureResponse(\n+                400 + \"\",\n+                MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+                MyStudiesUserRegUtil.ErrorCodes.EMAIL_EXISTS.getValue(),\n+                response);\n+\n+            registrationResponse = new UserRegistrationResponse();\n+            registrationResponse.setCode(400);\n+            registrationResponse.setMessage(\n+                MyStudiesUserRegUtil.ErrorCodes.EMAIL_EXISTS.getValue());\n+            logger.info(\"UserRegistrationController.registerUser() ENDED\");\n+            return new ResponseEntity<>(registrationResponse, HttpStatus.BAD_REQUEST);\n+          }\n+\n+          UserDetails userDetails = null;\n+          try {\n+\n+            // prepare the UserDetails and save in DB\n+            logger.info(\"GETTING PRIMERY KEY OF APPID AND ORGID\");\n+            AppOrgInfoBean appInfo = profiledao.getUserAppDetailsByAllApi(null, appId, orgId);\n+            logger.info(appInfo.getAppInfoId() + \"   \" + appInfo.getOrgInfoId());\n+            if (appInfo == null || appInfo.getAppInfoId() == 0) {\n+              logger.info(\n+                  \"(URS)...DELETING record in Auth Server STARTED. Though appId and orgId are not valid in UserRegistration server\");\n+              DeleteAccountInfoResponseBean deleteResponse =\n+                  userManagementUtil.deleteUserInfoInAuthServer(\n+                      authServerResponse.getUserId(),\n+                      authServerResponse.getClientToken(),\n+                      authServerResponse.getAccessToken());\n+\n+              if (deleteResponse != null && \"200\".equals(deleteResponse.getCode())) {\n+                logger.info(\n+                    \"Due to System failure in User Registration Server, user is deleted in Auth Server: \"\n+                        + userForm.getEmailId());\n+                logger.info(\"(URS)...DELETING record in Auth Server ENDED.\");\n+              }\n+              MyStudiesUserRegUtil.getFailureResponse(\n+                  401 + \"\",\n+                  MyStudiesUserRegUtil.ErrorCodes.UNAUTHORIZED.getValue(),\n+                  MyStudiesUserRegUtil.ErrorCodes.UNAUTHORIZED.getValue(),\n+                  response);\n+\n+              registrationResponse = new UserRegistrationResponse();\n+              registrationResponse.setCode(401);\n+              registrationResponse.setMessage(\n+                  MyStudiesUserRegUtil.ErrorCodes.UNAUTHORIZED.getValue());\n+              logger.info(\"UserRegistrationController.registerUser() ENDED\");\n+              return new ResponseEntity<>(registrationResponse, HttpStatus.UNAUTHORIZED);\n+            } else {\n+              userForm.setUserId(authServerResponse.getUserId());\n+              userForm.setPassword(null);\n+\n+              userDetails = getUserDetails(userForm);\n+              userDetails.setAppInfoId(appInfo.getAppInfoId());\n+              userDetails.setEmailCode(RandomStringUtils.randomAlphanumeric(6));\n+              // set the Otp Expire Time\n+              userDetails.setCodeExpireDate(LocalDateTime.now().plusMinutes(expireTime));\n+              logger.info(\"USERDETAILS TO BE SAVED IN DB\" + userDetails);\n+              UserDetails serviceResp = service.saveUser(userDetails);\n+              logger.info(\"(C)...serviceResp: \" + serviceResp);\n+              // TODO: serviceResp null check\n+              if (serviceResp != null) {\n+                List<String> emailContent = prepareEmailContent(serviceResp.getEmailCode());\n+                logger.info(\"emailContent: \" + emailContent);\n+                emailResponse =\n+                    emailNotification.sendEmailNotification(\n+                        emailContent.get(0),\n+                        emailContent.get(1),\n+                        serviceResp.getEmail(),\n+                        null,\n+                        null);\n+                logger.info(\"emailNotification; \" + emailResponse);\n+\n+                MyStudiesUserRegUtil.getFailureResponse(\n+                    MyStudiesUserRegUtil.ErrorCodes.STATUS_200.getValue(),\n+                    MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n+                    MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n+                    response);\n+                registrationResponse = new UserRegistrationResponse();\n+                registrationResponse.setCode(ErrorCode.EC_200.code());\n+                registrationResponse.setMessage(ErrorCode.EC_200.errorMessage());\n+                registrationResponse.setAccessToken(authServerResponse.getAccessToken());\n+                registrationResponse.setRefreshToken(authServerResponse.getRefreshToken());\n+                registrationResponse.setUserId(authServerResponse.getUserId());\n+                registrationResponse.setClientToken(authServerResponse.getClientToken());\n+                logger.info(\"UserRegistrationController.registerUser() ENDED\");\n+                return new ResponseEntity<>(registrationResponse, HttpStatus.OK);\n+              } else throw new SystemException();\n+            }\n+          } catch (SystemException e) {\n+            logger.error(\"UserRegistrationController.registerUser(): \", e);\n+            logger.info(\n+                \"(URS)...DELETING record in Auth Server STARTED. Though it could not able to save record in UserRegistration server\");\n+            DeleteAccountInfoResponseBean deleteResponse =\n+                userManagementUtil.deleteUserInfoInAuthServer(\n+                    authServerResponse.getUserId(),\n+                    authServerResponse.getClientToken(),\n+                    authServerResponse.getClientToken());\n+\n+            if (deleteResponse != null && \"200\".equals(deleteResponse.getCode())) {\n+              logger.info(\n+                  \"Due to System failure in User Registration Server, user is deleted in Auth Server: \"\n+                      + userForm.getEmailId());\n+              logger.info(\"(URS)...DELETING record in Auth Server ENDED.\");\n+            }\n+            MyStudiesUserRegUtil.getFailureResponse(\n+                500 + \"\",\n+                MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n+                MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n+                response);\n+            logger.info(\"UserRegistrationController.registerUser() ENDED\");\n+            return new ResponseEntity<>(registrationResponse, HttpStatus.INTERNAL_SERVER_ERROR);\n+          } catch (Exception e) {\n+            logger.error(\"UserRegistrationController.registerUser(): \", e);\n+            DeleteAccountInfoResponseBean deleteResponse =\n+                userManagementUtil.deleteUserInfoInAuthServer(\n+                    authServerResponse.getUserId(),\n+                    authServerResponse.getClientToken(),\n+                    authServerResponse.getClientToken());\n+            if (deleteResponse != null && \"200\".equals(deleteResponse.getCode())) {\n+              logger.info(\n+                  \"Due to System failure in User Registration Server, user is deleted in Auth Server: \"\n+                      + userForm.getEmailId());\n+              logger.info(\"(URS)...DELETING record in Auth Server ENDED.\");\n+            }\n+            MyStudiesUserRegUtil.getFailureResponse(\n+                500 + \"\",\n+                MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n+                MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n+                response);\n+\n+            registrationResponse = new UserRegistrationResponse();\n+            registrationResponse.setCode(500);\n+            registrationResponse.setMessage(\n+                MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n+            logger.info(\"UserRegistrationController.registerUser() ENDED\");\n+            return new ResponseEntity<>(registrationResponse, HttpStatus.INTERNAL_SERVER_ERROR);\n+          }\n+\n+        } else {\n+          if (\"400\".equals(authServerResponse.getHttpStatusCode())) {\n+            MyStudiesUserRegUtil.getFailureResponse(\n+                authServerResponse.getCode(),\n+                authServerResponse.getTitle(),\n+                authServerResponse.getMessage(),\n+                response);\n+\n+            registrationResponse = new UserRegistrationResponse();\n+            registrationResponse.setCode(400);\n+            registrationResponse.setMessage(authServerResponse.getMessage());\n+            logger.info(\"UserRegistrationController.registerUser() ENDED\");\n+            return new ResponseEntity<>(registrationResponse, HttpStatus.BAD_REQUEST);\n+          } else if (\"401\".equals(authServerResponse.getHttpStatusCode())) {\n+            MyStudiesUserRegUtil.getFailureResponse(\n+                authServerResponse.getCode(),\n+                authServerResponse.getTitle(),\n+                authServerResponse.getMessage(),\n+                response);\n+            registrationResponse = new UserRegistrationResponse();\n+            registrationResponse.setCode(401);\n+            registrationResponse.setMessage(authServerResponse.getMessage());\n+            logger.info(\"UserRegistrationController.registerUser() ENDED\");\n+            return new ResponseEntity<>(registrationResponse, HttpStatus.UNAUTHORIZED);\n+          } else {\n+            MyStudiesUserRegUtil.getFailureResponse(\n+                500 + \"\",\n+                MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n+                MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n+                response);\n+\n+            registrationResponse = new UserRegistrationResponse();\n+            registrationResponse.setCode(500);\n+            registrationResponse.setMessage(\n+                MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n+            logger.info(\"UserRegistrationController.registerUser() ENDED\");\n+            return new ResponseEntity<>(registrationResponse, HttpStatus.INTERNAL_SERVER_ERROR);\n+          }\n+        }\n+      } else {\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            400 + \"\",\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.USER_FORM_EMPTY.getValue(),\n+            response);\n+        registrationResponse = new UserRegistrationResponse();\n+        registrationResponse.setCode(400);\n+        registrationResponse.setMessage(MyStudiesUserRegUtil.ErrorCodes.USER_FORM_EMPTY.getValue());\n+        logger.info(\"UserRegistrationController.registerUser() ENDED\");\n+        return new ResponseEntity<>(registrationResponse, HttpStatus.BAD_REQUEST);\n+      }\n+    } catch (Exception e) {\n+      logger.error(\"UserRegistrationController.registerUser(): \", e);\n+      MyStudiesUserRegUtil.getFailureResponse(\n+          500 + \"\",\n+          MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n+          MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n+          response);\n+      registrationResponse = new UserRegistrationResponse();\n+      registrationResponse.setCode(500);\n+      registrationResponse.setMessage(\n+          MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n+      logger.error(\"UserRegistrationController.registerUser() ENDED\");\n+      return new ResponseEntity<>(registrationResponse, HttpStatus.INTERNAL_SERVER_ERROR);\n+    }\n+  }\n+\n+  /**\n+   * @author Chiranjibi Dash\n+   * @param otp\n+   * @return List<String>\n+   */\n+  private List<String> prepareEmailContent(String otp) {\n+    List<String> emailContent = null;\n+    if (otp != null) {\n+      emailContent = new ArrayList<>();\n+      String message =\n+          \"<html>\"\n+              + \"<body>\"\n+              + \"<div style='margin:20px;padding:10px;font-family: sans-serif;font-size: 14px;'>\"\n+              + \"<span>Hi,</span><br/><br/>\"\n+              + \"<span>Thank you for registering with us! We look forward to having you on board and actively taking part in<br/>research studies conducted by the FDA and its partners.</span><br/><br/>\"\n+              + \"<span>Your sign-up process is almost complete. Please use the verification code provided below to<br/>complete the Verification step in the mobile app. </span><br/><br/>\"\n+              + \"<span><strong>Verification Code: </strong>\"\n+              + otp\n+              + \"</span><br/><br/>\"\n+              + \"<span>This code can be used only once and is valid for a period of 48 hours only.</span><br/><br/>\"\n+              + \"<span>Please note that  registration (or sign up) for the app  is requested only to provide you with a <br/>seamless experience of using the app. Your registration information does not become part of <br/>the data collected for any study housed in the app. Each study has its own consent process <br/> and no data for any study will not be collected unless and until you provide an informed consent<br/> prior to joining the study </span><br/><br/>\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 358}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDE1Mzk1OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/FdaEaUserDetailsDaoImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoyMzowNVrOF4_Esw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoyMzowNVrOF4_Esw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI5Nzk3MQ==", "bodyText": "please remove", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395297971", "createdAt": "2020-03-19T20:23:05Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/FdaEaUserDetailsDaoImpl.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * *****************************************************************************\n+ *\n+ * <p>Copyright 2020 Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * *****************************************************************************\n+ */\n+/** */\n+package com.google.cloud.healthcare.fdamystudies.dao;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n+import com.google.cloud.healthcare.fdamystudies.exceptions.SystemException;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetails;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserDetailsBORepository;\n+\n+/**\n+ * Project Name: MyStudies-UserReg-WS\n+ *\n+ * @author Chiranjibi Dash, Date: Dec 18, 2019, Time: 5:40:27 PM\n+ */\n+@Repository\n+public class FdaEaUserDetailsDaoImpl implements FdaEaUserDetailsDao {\n+\n+  @Autowired private UserDetailsBORepository repository;\n+\n+  //    @Autowired private EntityManagerFactory entityManagerFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDE1OTU3OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/UserProfileManagementDaoImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoyNTowN1rOF4_IkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoyNTowN1rOF4_IkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI5ODk2MA==", "bodyText": "remove please", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r395298960", "createdAt": "2020-03-19T20:25:07Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/UserProfileManagementDaoImpl.java", "diffHunk": "@@ -0,0 +1,450 @@\n+/**\n+ * *****************************************************************************\n+ *\n+ * <p>Copyright 2020 Google LLC\n+ *\n+ * <p>Use of this source code is governed by an MIT-style license that can be found in the LICENSE\n+ * file or at https://opensource.org/licenses/MIT.\n+ * *****************************************************************************\n+ */\n+package com.google.cloud.healthcare.fdamystudies.dao;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.criteria.CriteriaBuilder;\n+import javax.persistence.criteria.CriteriaDelete;\n+import javax.persistence.criteria.CriteriaQuery;\n+import javax.persistence.criteria.CriteriaUpdate;\n+import javax.persistence.criteria.Expression;\n+import javax.persistence.criteria.Predicate;\n+import javax.persistence.criteria.Root;\n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+import org.hibernate.Transaction;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+import com.google.cloud.healthcare.fdamystudies.beans.DeactivateAcctBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.model.AppInfoDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.model.AuthInfoBO;\n+import com.google.cloud.healthcare.fdamystudies.model.LoginAttemptsBO;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantActivities;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyInfoBO;\n+import com.google.cloud.healthcare.fdamystudies.model.UserAppDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetails;\n+import com.google.cloud.healthcare.fdamystudies.util.AppConstants;\n+import com.google.cloud.healthcare.fdamystudies.util.ErrorCode;\n+\n+@Repository\n+public class UserProfileManagementDaoImpl implements UserProfileManagementDao {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(UserProfileManagementDaoImpl.class);\n+\n+  @Autowired private EntityManagerFactory entityManagerFactory;\n+\n+  @Autowired ApplicationPropertyConfiguration appConfig;\n+\n+  @Autowired CommonDao commonDao;\n+\n+  @Override\n+  public UserDetails getParticipantInfoDetails(String userId) {\n+    logger.info(\"UserProfileManagementDaoImpl getParticipantInfoDetails() - Starts \");\n+    CriteriaBuilder criteriaBuilder = null;\n+    CriteriaQuery<UserDetails> criteriaQuery = null;\n+    Root<UserDetails> userDetailsBoRoot = null;\n+    Predicate[] predicates = new Predicate[1];\n+    List<UserDetails> userDetailsBoList = null;\n+    UserDetails userDetails = null;\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+      criteriaBuilder = session.getCriteriaBuilder();\n+      criteriaQuery = criteriaBuilder.createQuery(UserDetails.class);\n+      userDetailsBoRoot = criteriaQuery.from(UserDetails.class);\n+      predicates[0] = criteriaBuilder.equal(userDetailsBoRoot.get(AppConstants.KEY_USERID), userId);\n+      criteriaQuery.select(userDetailsBoRoot).where(predicates);\n+      userDetailsBoList = session.createQuery(criteriaQuery).getResultList();\n+      if (!userDetailsBoList.isEmpty()) {\n+        userDetails = userDetailsBoList.get(0);\n+      }\n+    } catch (Exception e) {\n+      logger.error(\"UserProfileManagementDaoImpl getParticipantInfoDetails() - error \", e);\n+    }\n+    logger.info(\"UserProfileManagementDaoImpl getParticipantInfoDetails() - Ends \");\n+    return userDetails;\n+  }\n+\n+  @Override\n+  public AuthInfoBO getAuthInfo(Integer userDetailsId) {\n+    logger.info(\"UserProfileManagementDaoImpl getAuthInfo() - Starts \");\n+    CriteriaBuilder criteriaBuilder = null;\n+    CriteriaQuery<AuthInfoBO> criteriaQuery = null;\n+    Root<AuthInfoBO> authInfoBoRoot = null;\n+    Predicate[] predicates = new Predicate[1];\n+    List<AuthInfoBO> authInfoBoList = null;\n+    AuthInfoBO authInfo = null;\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+      criteriaBuilder = session.getCriteriaBuilder();\n+      criteriaQuery = criteriaBuilder.createQuery(AuthInfoBO.class);\n+      authInfoBoRoot = criteriaQuery.from(AuthInfoBO.class);\n+      predicates[0] =\n+          criteriaBuilder.equal(authInfoBoRoot.get(AppConstants.KEY_USERID), userDetailsId);\n+      criteriaQuery.select(authInfoBoRoot).where(predicates);\n+      authInfoBoList = session.createQuery(criteriaQuery).getResultList();\n+      if (!authInfoBoList.isEmpty()) {\n+        authInfo = authInfoBoList.get(0);\n+      }\n+    } catch (Exception e) {\n+      logger.error(\"UserProfileManagementDaoImpl getAuthInfo() - error \", e);\n+    }\n+    logger.info(\"UserProfileManagementDaoImpl getAuthInfo() - Ends \");\n+    return authInfo;\n+  }\n+\n+  @Override\n+  public ErrorBean updateUserProfile(String userId, UserDetails userDetail, AuthInfoBO authInfo) {\n+    logger.info(\"UserProfileManagementDaoImpl updateUserProfile() - Starts \");\n+    Transaction transaction = null;\n+    ErrorBean errorBean = null;\n+    Boolean isUpdatedAuthInfo = false;\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+      transaction = session.beginTransaction();\n+\n+      if (null != userDetail) {\n+        session.saveOrUpdate(userDetail);\n+        errorBean = new ErrorBean(ErrorCode.EC_200.code(), ErrorCode.EC_200.errorMessage());\n+        if (null != authInfo) {\n+          session.saveOrUpdate(authInfo);\n+          isUpdatedAuthInfo = true;\n+        }\n+      } else {\n+        errorBean = new ErrorBean(ErrorCode.EC_61.code(), ErrorCode.EC_61.errorMessage());\n+      }\n+      transaction.commit();\n+    } catch (Exception e) {\n+      logger.error(\"UserProfileManagementDaoImpl updateUserProfile() - error \", e);\n+      errorBean = new ErrorBean(ErrorCode.EC_34.code(), ErrorCode.EC_34.errorMessage());\n+      if (transaction != null) {\n+        try {\n+          transaction.rollback();\n+        } catch (Exception e1) {\n+          logger.error(\"UserProfileManagementDaoImpl - updateUserProfile() - error rollback\", e1);\n+        }\n+      }\n+    }\n+    logger.info(\"UserProfileManagementDaoImpl updateUserProfile() - Starts \");\n+    return errorBean;\n+  }\n+\n+  @Override\n+  public UserDetails getParticipantDetailsByEmail(\n+      String email, Integer appInfoId, Integer orgInfoId) {\n+    logger.info(\"UserProfileManagementDaoImpl getParticipantDetailsByEmail() - Starts \");\n+    UserDetails userDetails = null;\n+    CriteriaBuilder criteriaBuilder = null;\n+    CriteriaQuery<UserDetails> criteriaQuery = null;\n+    Root<UserDetails> userDetailsBoRoot = null;\n+    Predicate[] predicates = new Predicate[2];\n+    List<UserDetails> userDetailsBoList = null;\n+\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+      criteriaBuilder = session.getCriteriaBuilder();\n+      criteriaQuery = criteriaBuilder.createQuery(UserDetails.class);\n+      userDetailsBoRoot = criteriaQuery.from(UserDetails.class);\n+      predicates[0] = criteriaBuilder.equal(userDetailsBoRoot.get(AppConstants.EMAIL), email);\n+      predicates[1] = criteriaBuilder.equal(userDetailsBoRoot.get(\"appInfoId\"), appInfoId);\n+      criteriaQuery.select(userDetailsBoRoot).where(predicates);\n+      userDetailsBoList = session.createQuery(criteriaQuery).getResultList();\n+      if (!userDetailsBoList.isEmpty()) {\n+        userDetails = userDetailsBoList.get(0);\n+      }\n+    } catch (Exception e) {\n+      logger.error(\"UserProfileManagementDaoImpl getParticipantInfoDetails() - error \", e);\n+    }\n+    logger.info(\"UserProfileManagementDaoImpl getParticipantDetailsByEmail() - Ends \");\n+    return userDetails;\n+  }\n+\n+  @Override\n+  public LoginAttemptsBO getLoginAttempts(String email) {\n+    logger.info(\"UserProfileManagementDaoImpl getParticipantDetailsByEmail() - Starts \");\n+\n+    LoginAttemptsBO loginAttempt = null;\n+    CriteriaBuilder criteriaBuilder = null;\n+    CriteriaQuery<LoginAttemptsBO> criteriaQuery = null;\n+    Root<LoginAttemptsBO> loginAttemptRoot = null;\n+    Predicate[] predicates = new Predicate[1];\n+    List<LoginAttemptsBO> loginAttemptList = null;\n+\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+      criteriaBuilder = session.getCriteriaBuilder();\n+      criteriaQuery = criteriaBuilder.createQuery(LoginAttemptsBO.class);\n+      loginAttemptRoot = criteriaQuery.from(LoginAttemptsBO.class);\n+      predicates[0] = criteriaBuilder.equal(loginAttemptRoot.get(AppConstants.EMAIL), email);\n+      criteriaQuery.select(loginAttemptRoot).where(predicates);\n+      loginAttemptList = session.createQuery(criteriaQuery).getResultList();\n+      if (!loginAttemptList.isEmpty()) {\n+        loginAttempt = loginAttemptList.get(0);\n+      }\n+    } catch (Exception e) {\n+      logger.error(\"UserProfileManagementDaoImpl getParticipantInfoDetails() - error \", e);\n+    }\n+    logger.info(\"UserProfileManagementDaoImpl getParticipantDetailsByEmail() - Ends \");\n+    return loginAttempt;\n+  }\n+\n+  @Override\n+  public UserDetails saveParticipant(UserDetails participant) {\n+    logger.info(\"UserProfileManagementDaoImpl saveParticipant() - Starts \");\n+    Transaction transaction = null;\n+    CriteriaBuilder criteriaBuilder = null;\n+    CriteriaQuery<UserDetails> criteriaQuery = null;\n+    Predicate[] predicates = new Predicate[1];\n+    Root<UserDetails> userDetailsRoot = null;\n+    List<UserDetails> userDetailsList = null;\n+    UserDetails userDetails = null;\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+      criteriaBuilder = session.getCriteriaBuilder();\n+      transaction = session.beginTransaction();\n+      criteriaQuery = criteriaBuilder.createQuery(UserDetails.class);\n+      userDetailsRoot = criteriaQuery.from(UserDetails.class);\n+      predicates[0] =\n+          criteriaBuilder.equal(\n+              userDetailsRoot.get(AppConstants.USER_DETAILS_ID), participant.getUserDetailsId());\n+      criteriaQuery.select(userDetailsRoot).where(predicates);\n+      userDetailsList = session.createQuery(criteriaQuery).getResultList();\n+      if (!userDetailsList.isEmpty()) {\n+        userDetails = userDetailsList.get(0);\n+        userDetails.setEmailCode(participant.getEmailCode());\n+        userDetails.setCodeExpireDate(participant.getCodeExpireDate());\n+        session.update(userDetails);\n+      }\n+      transaction.commit();\n+    } catch (Exception e) {\n+      logger.error(\"UserProfileManagementDaoImpl - saveParticipant() - error \", e);\n+      if (transaction != null) {\n+        try {\n+          transaction.rollback();\n+        } catch (Exception e1) {\n+          logger.error(\n+              \"UserProfileManagementDaoImpl - getUserDetailsForPasswordReset() - error rollback\",\n+              e1);\n+        }\n+      }\n+    }\n+    logger.info(\"UserProfileManagementDaoImpl saveParticipant() - Ends \");\n+    return userDetails;\n+  }\n+\n+  @Override\n+  public void resetLoginAttempts(String email) {\n+    CriteriaBuilder criteriaBuilder = null;\n+    CriteriaDelete<LoginAttemptsBO> criteriaDelete = null;\n+    Root<LoginAttemptsBO> attemptRoot = null;\n+    Transaction transaction = null;\n+    logger.info(\"UserProfileManagementDaoImpl - resetLoginAttempts() - starts\");\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+      criteriaBuilder = session.getCriteriaBuilder();\n+      transaction = session.beginTransaction();\n+      criteriaDelete = criteriaBuilder.createCriteriaDelete(LoginAttemptsBO.class);\n+      attemptRoot = criteriaDelete.from(LoginAttemptsBO.class);\n+      criteriaDelete.where(criteriaBuilder.equal(attemptRoot.get(\"userEmailId\"), email));\n+      session.createQuery(criteriaDelete).executeUpdate();\n+      transaction.commit();\n+    } catch (Exception e) {\n+      logger.error(\"UserProfileManagementDaoImpl - resetLoginAttempts() - error \", e);\n+      if (transaction != null) {\n+        try {\n+          transaction.rollback();\n+        } catch (Exception e1) {\n+          logger.error(\"UserProfileManagementDaoImpl - resetLoginAttempts() - error rollback\", e1);\n+        }\n+      }\n+    }\n+\n+    logger.info(\"UserProfileManagementDaoImpl - resetLoginAttempts() - end\");\n+  }\n+\n+  @Override\n+  public UserDetails getParticipantDetails(String userId) {\n+    logger.info(\"UserProfileManagementDaoImpl getParticipantDetails() - Starts \");\n+    UserDetails userDetails = null;\n+    CriteriaBuilder criteriaBuilder = null;\n+    CriteriaQuery<UserDetails> criteriaQuery = null;\n+    Root<UserDetails> userDetailsBoRoot = null;\n+    Predicate[] predicates = new Predicate[1];\n+    List<UserDetails> userDetailsBoList = null;\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+      criteriaBuilder = session.getCriteriaBuilder();\n+      criteriaQuery = criteriaBuilder.createQuery(UserDetails.class);\n+      userDetailsBoRoot = criteriaQuery.from(UserDetails.class);\n+      predicates[0] = criteriaBuilder.equal(userDetailsBoRoot.get(AppConstants.KEY_USERID), userId);\n+      criteriaQuery.select(userDetailsBoRoot).where(predicates);\n+      userDetailsBoList = session.createQuery(criteriaQuery).getResultList();\n+      if (!userDetailsBoList.isEmpty()) {\n+        userDetails = userDetailsBoList.get(0);\n+      }\n+    } catch (Exception e) {\n+      logger.error(\"UserProfileManagementDaoImpl getParticipantDetails() - error \", e);\n+    }\n+    logger.info(\"UserProfileManagementDaoImpl getParticipantDetails() - Ends \");\n+    return userDetails;\n+  }\n+\n+  @Override\n+  public boolean deActivateAcct(\n+      String userId, DeactivateAcctBean deactivateAcctBean, Integer userDetailsId) {\n+    logger.info(\"UserProfileManagementDaoImpl deActivateAcct() - Starts \");\n+    Transaction transaction = null;\n+    CriteriaBuilder criteriaBuilder = null;\n+\n+    CriteriaDelete<UserAppDetailsBO> criteriaUserAppDetailsDelete = null;\n+    Root<UserAppDetailsBO> userAppDetailsRoot = null;\n+    CriteriaDelete<AuthInfoBO> criteriaAuthInfoDelete = null;\n+    Root<AuthInfoBO> authInfoRoot = null;\n+\n+    CriteriaDelete<UserDetails> criteriaUserDetailsDelete = null;\n+    Root<UserDetails> userDetailsRoot = null;\n+    CriteriaUpdate<UserDetails> criteriaUserDetailsUpdate = null;\n+    Root<UserDetails> userDetailsRootUpdate = null;\n+\n+    CriteriaDelete<ParticipantActivities> criteriaParticipantActivitiesDelete = null;\n+    Root<ParticipantActivities> participantActivitiesRoot = null;\n+\n+    CriteriaDelete<ParticipantStudiesBO> criteriaParticipantStudiesDelete = null;\n+    Root<ParticipantStudiesBO> participantStudiesRootDelete = null;\n+\n+    CriteriaUpdate<ParticipantStudiesBO> CriteriaParticipantStudiesUpdate = null;\n+    Root<ParticipantStudiesBO> participantStudiesRoot = null;\n+    CriteriaQuery<ParticipantStudiesBO> participantStudiesCriteriaQuery = null;\n+    List<Predicate> studyIdPredicates = new ArrayList<Predicate>();\n+    Predicate[] studyInfoIdPredicates = new Predicate[1];\n+    Expression<String> studyIdExpression = null;\n+    Predicate[] predicatesAuthInfo = new Predicate[1];\n+    Predicate[] predicatesUserDetails = new Predicate[1];\n+    Predicate[] predicatesUserAppDetails = new Predicate[1];\n+    Predicate[] predicatesParticiapntActivities = new Predicate[3];\n+    List<ParticipantStudiesBO> participantStudiesBoList = null;\n+    ParticipantStudiesBO participantStudiesBO = null;\n+    CriteriaQuery<StudyInfoBO> studyInfoQuery = null;\n+    Root<StudyInfoBO> root_studyBO = null;\n+    List<StudyInfoBO> studyInfoBoList = null;\n+    StudyInfoBO studyInfoBO = null;\n+    List<Integer> studyInfoIdList = new ArrayList<>();\n+    int isUpdated = 0;\n+    int count = 0;\n+    boolean returnVal = false;\n+    try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+      transaction = session.beginTransaction();\n+      criteriaBuilder = session.getCriteriaBuilder();\n+      if (!deactivateAcctBean.getDeleteData().isEmpty()) {\n+        studyInfoQuery = criteriaBuilder.createQuery(StudyInfoBO.class);\n+        root_studyBO = studyInfoQuery.from(StudyInfoBO.class);\n+        studyIdExpression = root_studyBO.get(\"customStudyId\");\n+        studyInfoIdPredicates[0] = studyIdExpression.in(deactivateAcctBean.getDeleteData());\n+        studyInfoQuery.select(root_studyBO).where(studyInfoIdPredicates);\n+        studyInfoBoList = session.createQuery(studyInfoQuery).getResultList();\n+        studyInfoIdList =\n+            studyInfoBoList.stream().map(StudyInfoBO::getStudyInfoId).collect(Collectors.toList());\n+        CriteriaParticipantStudiesUpdate =\n+            criteriaBuilder.createCriteriaUpdate(ParticipantStudiesBO.class);\n+        participantStudiesRoot = CriteriaParticipantStudiesUpdate.from(ParticipantStudiesBO.class);\n+        CriteriaParticipantStudiesUpdate.set(\"status\", \"Withdrawn\");\n+        CriteriaParticipantStudiesUpdate.set(\"participantId\", \"NULL\");\n+        studyIdPredicates.add(\n+            criteriaBuilder.equal(participantStudiesRoot.get(\"userDetailsId\"), userDetailsId));\n+        studyIdExpression = participantStudiesRoot.get(\"studyInfoId\");\n+        studyIdPredicates.add(studyIdExpression.in(studyInfoIdList));\n+        CriteriaParticipantStudiesUpdate.where(\n+            studyIdPredicates.toArray(new Predicate[studyIdPredicates.size()]));\n+        isUpdated = session.createQuery(CriteriaParticipantStudiesUpdate).executeUpdate();\n+      }\n+\n+      /*criteriaParticipantActivitiesDelete =\n+          criteriaBuilder.createCriteriaDelete(ParticipantActivities.class);\n+      participantActivitiesRoot =\n+          criteriaParticipantActivitiesDelete.from(ParticipantActivities.class);\n+      predicatesParticiapntActivities[0] =\n+          criteriaBuilder.equal(participantActivitiesRoot.get(\"userId\"), userId);\n+      predicatesParticiapntActivities[1] =\n+          criteriaBuilder.equal(participantActivitiesRoot.get(\"applicationId\"), applicationId);\n+      predicatesParticiapntActivities[2] =\n+          criteriaBuilder.equal(participantActivitiesRoot.get(\"orgId\"), orgId);\n+      criteriaParticipantActivitiesDelete.where(predicatesParticiapntActivities);\n+      session.createQuery(criteriaParticipantActivitiesDelete).executeUpdate();*/\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824eb50f7381ad1b7dff99672b03ea3664370b71"}, "originalPosition": 379}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTcwNzkwOnYy", "diffSide": "RIGHT", "path": "WCP-WS/src/main/java/com/hphc/mystudies/util/HibernateUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjoyMToxM1rOF6aP_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjoyMToxM1rOF6aP_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5MTgwNw==", "bodyText": "please remove", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/20#discussion_r396791807", "createdAt": "2020-03-23T22:21:13Z", "author": {"login": "zohrehj"}, "path": "WCP-WS/src/main/java/com/hphc/mystudies/util/HibernateUtil.java", "diffHunk": "@@ -22,60 +22,53 @@\n  */\n package com.hphc.mystudies.util;\n \n-import java.io.FileInputStream;\n+import java.io.InputStream;\n import java.util.Properties;\n-\n import org.apache.log4j.Logger;\n import org.hibernate.SessionFactory;\n import org.hibernate.cfg.AnnotationConfiguration;\n \n-/**\n- * Provides hibernate configuration details to get session factory.\n- * \n- * @author BTC\n- *\n- */\n public class HibernateUtil {\n \n-\tprivate static Logger logger = Logger.getLogger(HibernateUtil.class);\n+  private static Logger logger = Logger.getLogger(HibernateUtil.class);\n+\n+  private static SessionFactory sessionFactory = null;\n+\n+  private HibernateUtil() {\n+    super();\n+  }\n \n-\tprivate static SessionFactory sessionFactory = null;\n+  public static SessionFactory getSessionFactory() {\n+    logger.info(\"INFO: HibernateUtil - getSessionFactory() :: Starts\");\n+    try {\n+      if (sessionFactory == null) {\n \n-\t/**\n-\t * \n-\t */\n-\tprivate HibernateUtil() {\n-\t\tsuper();\n-\t}\n+        InputStream inputStream =\n+            HibernateUtil.class\n+                .getClassLoader()\n+                .getResourceAsStream(\"application_local.properties\");\n \n-\t/**\n-\t * \n-\t * @return\n-\t */\n-\tpublic static SessionFactory getSessionFactory() {\n-\t\tlogger.info(\"INFO: HibernateUtil - getSessionFactory() :: Starts\");\n-\t\ttry {\n-\t\t\tif (sessionFactory == null) {\n-\t\t\t\tProperties properties = new Properties();\n-\t\t\t\tproperties.load(new FileInputStream(ServletContextHolder\n-\t\t\t\t\t\t.getServletContext().getInitParameter(\n-\t\t\t\t\t\t\t\t\"property_file_location_path\")));\n-\t\t\t\tsessionFactory = new AnnotationConfiguration()\n-\t\t\t\t\t\t.addProperties(properties)\n-\t\t\t\t\t\t.configure(\"hibernate.cfg.xml\").buildSessionFactory();\n-\t\t\t}\n-\t\t} catch (Exception e) {\n-\t\t\tlogger.error(\"HibernateUtil - getSessionFactory() :: ERROR \", e);\n-\t\t}\n-\t\tlogger.info(\"INFO: HibernateUtil - getSessionFactory() :: Ends\");\n-\t\treturn sessionFactory;\n-\t}\n+        Properties properties = new Properties();\n+        /*\n+         * properties.load(new FileInputStream(\n+         * ServletContextHolder.getServletContext().getInitParameter(\n+         * \"property_file_location_path\")));\n+         */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcaba86f1bb819598a16c9c91201e204176e414"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1339, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}