{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3MjI1MzU3", "number": 390, "title": "code push for unit test case changes for consent-mgmt bundle", "bodyText": "This PR contains the code commit for unit test case and code coverage .", "createdAt": "2020-05-13T09:07:43Z", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390", "merged": true, "mergeCommit": {"oid": "ff1ad220d4c97f0c18c60336509ac05273739083"}, "closed": true, "closedAt": "2020-05-28T05:18:34Z", "author": {"login": "aswinijena100"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcg1H-IAH2gAyNDE3MjI1MzU3OmNlYzE5ZWZkYzc2NmRjYzk4NmVhODQ4M2Y0MjgwMjU1ZmE4Yzk4NDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABclaLAZAFqTQxOTI3NTE1OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "cec19efdc766dcc986ea8483f4280255fa8c9844", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/cec19efdc766dcc986ea8483f4280255fa8c9844", "committedDate": "2020-05-13T09:05:20Z", "message": "code commit for unit test case code changes for consent-mgmt bundle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/7ad0b5e9e185c9337beec619cdd5a0a373d0d01a", "committedDate": "2020-05-13T15:10:39Z", "message": "code commit to change wiremock default port to 8001 from 8080"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39854663bfb9aa98b3be40c05f193e6d6c6beb38", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/39854663bfb9aa98b3be40c05f193e6d6c6beb38", "committedDate": "2020-05-13T17:19:10Z", "message": "change the property value to mocktest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/a512ad79b7306b42480e007176dd59c72b4c71e9", "committedDate": "2020-05-13T17:23:12Z", "message": "reverted back property file propeties to original value"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwOTI5NTUy", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#pullrequestreview-410929552", "createdAt": "2020-05-13T13:35:02Z", "commit": {"oid": "cec19efdc766dcc986ea8483f4280255fa8c9844"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzozNTowMlrOGUx3vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxOTo1OTo1NVrOGVBbMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0MTc5MA==", "bodyText": "commented out code should not be commited.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424441790", "createdAt": "2020-05-13T13:35:02Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/common/BaseMockit.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.common;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;\n+import org.springframework.boot.test.web.client.TestRestTemplate;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.test.context.ContextConfiguration;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.github.tomakehurst.wiremock.WireMockServer;\n+import com.google.cloud.healthcare.fdamystudies.config.WireMockInitializer;\n+\n+@ContextConfiguration(initializers = {WireMockInitializer.class})\n+@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)\n+@ActiveProfiles(\"mockit\")\n+public class BaseMockit {\n+\n+  protected static final String VALID_BEARER_TOKEN = \"Bearer 7fd50c2c-d618-493c-89d6-f1887e3e4bb8\";\n+\n+  protected static final String INVALID_BEARER_TOKEN =\n+      \"Bearer cd57710c-1d19-4058-8bfe-a6aac3a39e35\";\n+\n+  @Autowired private WireMockServer wireMockServer;\n+\n+  @LocalServerPort protected int randomServerPort;\n+\n+  @Autowired private TestRestTemplate restTemplate;\n+\n+  @Autowired private ObjectMapper objectMapper;\n+\n+  private boolean wireMockInitialized = false;\n+\n+  protected TestRestTemplate getRestTemplate() {\n+    return restTemplate;\n+  }\n+\n+  protected WireMockServer getWireMockServer() {\n+    return wireMockServer;\n+  }\n+\n+  protected ObjectNode getObjectNode() {\n+    return objectMapper.createObjectNode();\n+  }\n+\n+  protected ObjectMapper getObjectMapper() {\n+    return objectMapper;\n+  }\n+\n+  protected void setUpHydraMockResponse() {\n+    if (!wireMockInitialized) {\n+      //      getWireMockServer()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cec19efdc766dcc986ea8483f4280255fa8c9844"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0NDk5MQ==", "bodyText": "not used", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424444991", "createdAt": "2020-05-13T13:39:19Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cec19efdc766dcc986ea8483f4280255fa8c9844"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0NjEzMA==", "bodyText": "fields don't need to be public in test classes", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424446130", "createdAt": "2020-05-13T13:40:46Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cec19efdc766dcc986ea8483f4280255fa8c9844"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0NzAxNw==", "bodyText": "Tests should not rely on a particular ordering. If a test requires setup that another test performs then you should extract that setup to a method and run it for both tests.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424447017", "createdAt": "2020-05-13T13:42:00Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8080/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach\n+  public void setWireMockUrl() {\n+    appConfig.setAuthServerAccessTokenValidationUrl(WIREMOCK_URL);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(getRestTemplate());\n+    assertNotNull(cloudStorageService);\n+    assertNotNull(userConsentManagementService);\n+  }\n+\n+  @Test\n+  @Order(1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cec19efdc766dcc986ea8483f4280255fa8c9844"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ1MDkxOQ==", "bodyText": "prefer lambda syntax, here and elsewhere", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424450919", "createdAt": "2020-05-13T13:47:05Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8080/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach\n+  public void setWireMockUrl() {\n+    appConfig.setAuthServerAccessTokenValidationUrl(WIREMOCK_URL);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(getRestTemplate());\n+    assertNotNull(cloudStorageService);\n+    assertNotNull(userConsentManagementService);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void ping() {\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+\n+    String response = getRestTemplate().getForObject(\"/ping\", String.class);\n+    assertEquals(\"Mystudies UserRegistration Webservice Started !!!\", response);\n+  }\n+\n+  @Test\n+  @Order(2)\n+  public void updateEligibilityConsentStatus() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to save study consent first time\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cec19efdc766dcc986ea8483f4280255fa8c9844"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ1NTg4OQ==", "bodyText": "should we be checking that this fails before the consent status is updated?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424455889", "createdAt": "2020-05-13T13:53:34Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8080/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach\n+  public void setWireMockUrl() {\n+    appConfig.setAuthServerAccessTokenValidationUrl(WIREMOCK_URL);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(getRestTemplate());\n+    assertNotNull(cloudStorageService);\n+    assertNotNull(userConsentManagementService);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void ping() {\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+\n+    String response = getRestTemplate().getForObject(\"/ping\", String.class);\n+    assertEquals(\"Mystudies UserRegistration Webservice Started !!!\", response);\n+  }\n+\n+  @Test\n+  @Order(2)\n+  public void updateEligibilityConsentStatus() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to save study consent first time\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=1.0\",\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cec19efdc766dcc986ea8483f4280255fa8c9844"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ1Njk3Mw==", "bodyText": "why does this matter?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424456973", "createdAt": "2020-05-13T13:55:00Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8080/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach\n+  public void setWireMockUrl() {\n+    appConfig.setAuthServerAccessTokenValidationUrl(WIREMOCK_URL);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(getRestTemplate());\n+    assertNotNull(cloudStorageService);\n+    assertNotNull(userConsentManagementService);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void ping() {\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+\n+    String response = getRestTemplate().getForObject(\"/ping\", String.class);\n+    assertEquals(\"Mystudies UserRegistration Webservice Started !!!\", response);\n+  }\n+\n+  @Test\n+  @Order(2)\n+  public void updateEligibilityConsentStatus() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to save study consent first time\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=1.0\",\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(3)\n+  public void updateEligibilityConsentStatusUpdateExisting() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to Update study consent pdf content value\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0_UPDATED.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0_UPDATED.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    String queryParamVersion = VERSION_1_0;\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + queryParamVersion,\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(4)\n+  public void updateEligibilityConsentStatusAddNewVersion() throws InterruptedException {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Add sleep so that different consents are saved with some time difference", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cec19efdc766dcc986ea8483f4280255fa8c9844"}, "originalPosition": 279}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ1NzYyOA==", "bodyText": "This code is duplicated across several tests. Use a helper function instead.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424457628", "createdAt": "2020-05-13T13:55:54Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8080/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach\n+  public void setWireMockUrl() {\n+    appConfig.setAuthServerAccessTokenValidationUrl(WIREMOCK_URL);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(getRestTemplate());\n+    assertNotNull(cloudStorageService);\n+    assertNotNull(userConsentManagementService);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void ping() {\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+\n+    String response = getRestTemplate().getForObject(\"/ping\", String.class);\n+    assertEquals(\"Mystudies UserRegistration Webservice Started !!!\", response);\n+  }\n+\n+  @Test\n+  @Order(2)\n+  public void updateEligibilityConsentStatus() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to save study consent first time\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=1.0\",\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(3)\n+  public void updateEligibilityConsentStatusUpdateExisting() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to Update study consent pdf content value\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cec19efdc766dcc986ea8483f4280255fa8c9844"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNDYwMg==", "bodyText": "Use should use patterns instead of full paths, i.e. **/.settings or **/.idea, to cover all cases in the repo.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424634602", "createdAt": "2020-05-13T18:10:31Z", "author": {"login": "nikklassen"}, "path": ".gitignore", "diffHunk": "@@ -1,3 +1,14 @@\n **/.terraform\n *.tfstate\n *.tfstate.*\n+WCP-WS/target/\n+WCP-WS/\n+user-registration-server-ws/consent-mgmt/.settings/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNTAxNQ==", "bodyText": "**/*.log.gz", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424635015", "createdAt": "2020-05-13T18:11:07Z", "author": {"login": "nikklassen"}, "path": ".gitignore", "diffHunk": "@@ -1,3 +1,14 @@\n **/.terraform\n *.tfstate\n *.tfstate.*\n+WCP-WS/target/\n+WCP-WS/\n+user-registration-server-ws/consent-mgmt/.settings/\n+user-registration-server-ws/consent-mgmt/target/\n+user-registration-server-ws/consent-mgmt/.classpath\n+user-registration-server-ws/consent-mgmt/.factorypath\n+user-registration-server-ws/consent-mgmt/userregws_20200424.log.gz", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNTc3Mg==", "bodyText": "Please remove sample code", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424635772", "createdAt": "2020-05-13T18:12:24Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks private UserConsentManagementController userConsentManagementController;\n+\n+  @Test\n+  public void testList() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNTg3Mg==", "bodyText": "not used", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424635872", "createdAt": "2020-05-13T18:12:35Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNTk4NA==", "bodyText": "not used", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424635984", "createdAt": "2020-05-13T18:12:43Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNjM3NQ==", "bodyText": "Does this have significance? If not just use something that is helpful if printed out, like \"userId\"", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424636375", "createdAt": "2020-05-13T18:13:24Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks private UserConsentManagementController userConsentManagementController;\n+\n+  @Test\n+  public void testList() {\n+    // Sample Mockito unit test that uses mocked java.util.List //\n+\n+    list.add(\"X\");\n+\n+    Mockito.verify(list, times(1)).add(\"X\");\n+\n+    Mockito.when(list.size()).thenReturn(2);\n+    assertEquals(2, list.size());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDF() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2MDQ1OQ==", "bodyText": "This isn't necessary since the cast on the next line will fail if you're wrong. Please remove asserts on the class in this file", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424660459", "createdAt": "2020-05-13T18:53:41Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks private UserConsentManagementController userConsentManagementController;\n+\n+  @Test\n+  public void testList() {\n+    // Sample Mockito unit test that uses mocked java.util.List //\n+\n+    list.add(\"X\");\n+\n+    Mockito.verify(list, times(1)).add(\"X\");\n+\n+    Mockito.when(list.size()).thenReturn(2);\n+    assertEquals(2, list.size());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDF() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    ConsentStudyResponseBean resp = new ConsentStudyResponseBean();\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(resp);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ConsentStudyResponseBean.class, responseEntity.getBody().getClass());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2NjAyMA==", "bodyText": "This is mostly a suggestion (I'll bring it up in our technical catch up) but you can use Lombok's @EqualsAndHashCode annotation to create equals methods for beans. If we do that it means we can compare beans directly with assertEquals, which would make these asserts cleaner. i.e. if you add @EqualsAndHashCode to ConsentStudyResponseBean you could do\nConsentStudyResponseBean expected = new ConsentStudyResponseBean();\nexpected.setMessage(\"success\")\nassertEquals(expected, responseEntity);", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424666020", "createdAt": "2020-05-13T19:03:22Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks private UserConsentManagementController userConsentManagementController;\n+\n+  @Test\n+  public void testList() {\n+    // Sample Mockito unit test that uses mocked java.util.List //\n+\n+    list.add(\"X\");\n+\n+    Mockito.verify(list, times(1)).add(\"X\");\n+\n+    Mockito.when(list.size()).thenReturn(2);\n+    assertEquals(2, list.size());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDF() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    ConsentStudyResponseBean resp = new ConsentStudyResponseBean();\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(resp);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ConsentStudyResponseBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\"success\", ((ConsentStudyResponseBean) responseEntity.getBody()).getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2NjIxMA==", "bodyText": "assertNull", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424666210", "createdAt": "2020-05-13T19:03:45Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks private UserConsentManagementController userConsentManagementController;\n+\n+  @Test\n+  public void testList() {\n+    // Sample Mockito unit test that uses mocked java.util.List //\n+\n+    list.add(\"X\");\n+\n+    Mockito.verify(list, times(1)).add(\"X\");\n+\n+    Mockito.when(list.size()).thenReturn(2);\n+    assertEquals(2, list.size());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDF() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    ConsentStudyResponseBean resp = new ConsentStudyResponseBean();\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(resp);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ConsentStudyResponseBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\"success\", ((ConsentStudyResponseBean) responseEntity.getBody()).getMessage());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFNoDataFound() throws IOException {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(null);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(null, responseEntity);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3MzY4OQ==", "bodyText": "Don't overdo it on asserting that functions weren't called. Verifying too many mock functions just makes tests brittle. Only include \"not called\" if it's very important and you can't check it any other way.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424673689", "createdAt": "2020-05-13T19:17:24Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks private UserConsentManagementController userConsentManagementController;\n+\n+  @Test\n+  public void testList() {\n+    // Sample Mockito unit test that uses mocked java.util.List //\n+\n+    list.add(\"X\");\n+\n+    Mockito.verify(list, times(1)).add(\"X\");\n+\n+    Mockito.when(list.size()).thenReturn(2);\n+    assertEquals(2, list.size());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDF() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    ConsentStudyResponseBean resp = new ConsentStudyResponseBean();\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(resp);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ConsentStudyResponseBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\"success\", ((ConsentStudyResponseBean) responseEntity.getBody()).getMessage());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFNoDataFound() throws IOException {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(null);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(null, responseEntity);\n+    assertEquals(400, response.getStatus());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFInvalidData() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+\n+    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n+    Mockito.verify(userConsentManagementService, never()).getStudyInfoId(studyId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3NDEyMQ==", "bodyText": "Why not add a constructor that takes studyInfoId?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424674121", "createdAt": "2020-05-13T19:18:09Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks private UserConsentManagementController userConsentManagementController;\n+\n+  @Test\n+  public void testList() {\n+    // Sample Mockito unit test that uses mocked java.util.List //\n+\n+    list.add(\"X\");\n+\n+    Mockito.verify(list, times(1)).add(\"X\");\n+\n+    Mockito.when(list.size()).thenReturn(2);\n+    assertEquals(2, list.size());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDF() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3NDU1NQ==", "bodyText": "Consider adding more constructors to your beans or adding @Builder.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424674555", "createdAt": "2020-05-13T19:19:01Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks private UserConsentManagementController userConsentManagementController;\n+\n+  @Test\n+  public void testList() {\n+    // Sample Mockito unit test that uses mocked java.util.List //\n+\n+    list.add(\"X\");\n+\n+    Mockito.verify(list, times(1)).add(\"X\");\n+\n+    Mockito.when(list.size()).thenReturn(2);\n+    assertEquals(2, list.size());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDF() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    ConsentStudyResponseBean resp = new ConsentStudyResponseBean();\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(resp);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ConsentStudyResponseBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\"success\", ((ConsentStudyResponseBean) responseEntity.getBody()).getMessage());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFNoDataFound() throws IOException {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(null);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(null, responseEntity);\n+    assertEquals(400, response.getStatus());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFInvalidData() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+\n+    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n+    Mockito.verify(userConsentManagementService, never()).getStudyInfoId(studyId);\n+    Mockito.verify(userConsentManagementService, never())\n+        .getStudyConsentDetails(userId, studyInfoId, consentVersion);\n+  }\n+\n+  @Test\n+  public void testUpdateEligibilityConsentStatus() {\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+    Integer userDetailsId = 1;\n+\n+    HttpServletResponse response = new MockHttpServletResponse();\n+    ConsentStatusBean bean = new ConsentStatusBean();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3NjQ3MQ==", "bodyText": "Consider a static import for Mockito functions", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424676471", "createdAt": "2020-05-13T19:22:30Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks private UserConsentManagementController userConsentManagementController;\n+\n+  @Test\n+  public void testList() {\n+    // Sample Mockito unit test that uses mocked java.util.List //\n+\n+    list.add(\"X\");\n+\n+    Mockito.verify(list, times(1)).add(\"X\");\n+\n+    Mockito.when(list.size()).thenReturn(2);\n+    assertEquals(2, list.size());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDF() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    ConsentStudyResponseBean resp = new ConsentStudyResponseBean();\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(resp);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ConsentStudyResponseBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\"success\", ((ConsentStudyResponseBean) responseEntity.getBody()).getMessage());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFNoDataFound() throws IOException {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(null);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(null, responseEntity);\n+    assertEquals(400, response.getStatus());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFInvalidData() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+\n+    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n+    Mockito.verify(userConsentManagementService, never()).getStudyInfoId(studyId);\n+    Mockito.verify(userConsentManagementService, never())\n+        .getStudyConsentDetails(userId, studyInfoId, consentVersion);\n+  }\n+\n+  @Test\n+  public void testUpdateEligibilityConsentStatus() {\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+    Integer userDetailsId = 1;\n+\n+    HttpServletResponse response = new MockHttpServletResponse();\n+    ConsentStatusBean bean = new ConsentStatusBean();\n+    bean.setStudyId(studyId);\n+    bean.setEligibility(Boolean.TRUE);\n+    bean.setSharing(\"true\");\n+    ConsentReqBean reqBean = new ConsentReqBean();\n+    reqBean.setPdf(Base64.getEncoder().encodeToString(\"content\".getBytes()));\n+    reqBean.setVersion(\"1.0\");\n+    reqBean.setStatus(\"completed\");\n+    bean.setConsent(reqBean);\n+\n+    StudyConsentBO studyConsent = new StudyConsentBO();\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+    ParticipantStudiesBO participantStudies = new ParticipantStudiesBO();\n+    String underDirectory = userId + \"/\" + studyId;\n+    String fileName =\n+        userId\n+            + \"_\"\n+            + studyId\n+            + \"_\"\n+            + consentVersion\n+            + \"_\"\n+            + new SimpleDateFormat(\"MMddyyyyHHmmss\").format(new Date())\n+            + \".pdf\";\n+\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(userConsentManagementService.getParticipantStudies(studyInfoId, userId))\n+        .thenReturn(participantStudies);\n+    Mockito.when(\n+            userConsentManagementService.saveParticipantStudies(\n+                Collections.singletonList(participantStudies)))\n+        .thenReturn(\"SUCCESS\");\n+    Mockito.when(userConsentManagementService.getStudyConsent(userId, studyInfoId, consentVersion))\n+        .thenReturn(studyConsent);\n+    Mockito.when(userConsentManagementService.getUserDetailsId(userId)).thenReturn(userDetailsId);\n+    Mockito.when(userConsentManagementService.saveStudyConsent(studyConsent)).thenReturn(\"SUCCESS\");\n+    Mockito.when(cloudStorageService.saveFile(fileName, reqBean.getPdf(), underDirectory))\n+        .thenReturn(fileName + \"/\" + underDirectory);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.updateEligibilityConsentStatus(userId, bean, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ErrorBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\n+        ErrorCode.EC_200.code(), ((ErrorBean) responseEntity.getBody()).getCode().intValue());\n+  }\n+\n+  @Test\n+  public void testUpdateEligibilityConsentStatusVersionRequired() {\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    HttpServletResponse response = new MockHttpServletResponse();\n+    ConsentStatusBean bean = new ConsentStatusBean();\n+    bean.setStudyId(studyId);\n+    bean.setEligibility(Boolean.TRUE);\n+    bean.setSharing(\"true\");\n+    ConsentReqBean reqBean = new ConsentReqBean();\n+    reqBean.setVersion(\"\");\n+    reqBean.setPdf(Base64.getEncoder().encodeToString(\"content\".getBytes()));\n+    reqBean.setStatus(\"completed\");\n+    bean.setConsent(reqBean);\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+    ParticipantStudiesBO participantStudies = new ParticipantStudiesBO();\n+\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 220}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3ODAxMw==", "bodyText": "Unless these values need to pass validation just use short strings like \"access token\"", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424678013", "createdAt": "2020-05-13T19:25:25Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/CommonServiceImplTests.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.google.cloud.healthcare.fdamystudies.service.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import org.hibernate.HibernateException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.client.RestClientException;\n+import org.springframework.web.client.RestTemplate;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.dao.CommonDao;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonServiceImpl;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class CommonServiceImplTests {\n+\n+  @Mock private RestTemplate restTemplate;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @Mock private CommonDao commonDao;\n+\n+  @InjectMocks private CommonServiceImpl commonServiceImpl;\n+\n+  @Test\n+  public void testGetUserDetailsId() {\n+    String userId = \"kJSdYD2e\";\n+    Integer userDetailsId = 2;\n+    Mockito.when(commonDao.getUserDetailsId(userId)).thenReturn(userDetailsId);\n+    Integer result = commonServiceImpl.getUserDetailsId(userId);\n+    assertEquals(userDetailsId, result);\n+  }\n+\n+  @Test\n+  public void testGetUserDetailsIdExceptionCase() {\n+    String userId = \"kJSdYD2e\";\n+    Mockito.when(commonDao.getUserDetailsId(userId))\n+        .thenThrow(new HibernateException(\"Some hibernate exception\"));\n+    Integer result = commonServiceImpl.getUserDetailsId(userId);\n+    assertNull(result);\n+  }\n+\n+  @Test\n+  public void testValidateAccessToken() {\n+    String userId = \"kJSdYD2e\";\n+    String accessToken = \"jsdYUdbsKUDY&jshdDsknsdhjsds\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MDk3MA==", "bodyText": "Why not just example.com?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424680970", "createdAt": "2020-05-13T19:30:47Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/CommonServiceImplTests.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.google.cloud.healthcare.fdamystudies.service.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import org.hibernate.HibernateException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.client.RestClientException;\n+import org.springframework.web.client.RestTemplate;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.dao.CommonDao;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonServiceImpl;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class CommonServiceImplTests {\n+\n+  @Mock private RestTemplate restTemplate;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @Mock private CommonDao commonDao;\n+\n+  @InjectMocks private CommonServiceImpl commonServiceImpl;\n+\n+  @Test\n+  public void testGetUserDetailsId() {\n+    String userId = \"kJSdYD2e\";\n+    Integer userDetailsId = 2;\n+    Mockito.when(commonDao.getUserDetailsId(userId)).thenReturn(userDetailsId);\n+    Integer result = commonServiceImpl.getUserDetailsId(userId);\n+    assertEquals(userDetailsId, result);\n+  }\n+\n+  @Test\n+  public void testGetUserDetailsIdExceptionCase() {\n+    String userId = \"kJSdYD2e\";\n+    Mockito.when(commonDao.getUserDetailsId(userId))\n+        .thenThrow(new HibernateException(\"Some hibernate exception\"));\n+    Integer result = commonServiceImpl.getUserDetailsId(userId);\n+    assertNull(result);\n+  }\n+\n+  @Test\n+  public void testValidateAccessToken() {\n+    String userId = \"kJSdYD2e\";\n+    String accessToken = \"jsdYUdbsKUDY&jshdDsknsdhjsds\";\n+    String clientToken = \"skdj7dsjhdhYTTD65TDjksbdbKSDHSDJAsjhdsjdsd\";\n+    Mockito.when(appConfig.getAuthServerAccessTokenValidationUrl())\n+        .thenReturn(\"http://someurl-not-to-be-hit.com\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MTIxMQ==", "bodyText": "Not used", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424681211", "createdAt": "2020-05-13T19:31:17Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.google.cloud.healthcare.fdamystudies.service.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import java.util.LinkedList;\n+import java.util.List;\n+import org.hibernate.HibernateException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.dao.UserConsentManagementDao;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyInfoBO;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementServiceTests {\n+\n+  @Mock private UserConsentManagementDao userConsentManagementDao;\n+\n+  @Mock private FileStorageService cloudStorageService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MjI5Mg==", "bodyText": "Integer studyId = 1, here and elsewhere", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424682292", "createdAt": "2020-05-13T19:33:25Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.google.cloud.healthcare.fdamystudies.service.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import java.util.LinkedList;\n+import java.util.List;\n+import org.hibernate.HibernateException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.dao.UserConsentManagementDao;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyInfoBO;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementServiceTests {\n+\n+  @Mock private UserConsentManagementDao userConsentManagementDao;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @InjectMocks private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @Test\n+  public void testGetParticipantStudies() {\n+\n+    Integer studyId = Integer.valueOf(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MzQ3Mg==", "bodyText": "You've already checked that result is the same object as bo. These assertions are redundent.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424683472", "createdAt": "2020-05-13T19:35:38Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.google.cloud.healthcare.fdamystudies.service.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import java.util.LinkedList;\n+import java.util.List;\n+import org.hibernate.HibernateException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.dao.UserConsentManagementDao;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyInfoBO;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementServiceTests {\n+\n+  @Mock private UserConsentManagementDao userConsentManagementDao;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @InjectMocks private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @Test\n+  public void testGetParticipantStudies() {\n+\n+    Integer studyId = Integer.valueOf(1);\n+    String userId = \"sdjUyd\";\n+    ParticipantStudiesBO bo = new ParticipantStudiesBO();\n+\n+    StudyInfoBO sBO = new StudyInfoBO();\n+    sBO.setId(studyId);\n+    bo.setStudyInfo(sBO);\n+    UserDetailsBO uBO = new UserDetailsBO();\n+    uBO.setUserId(userId);\n+    bo.setUserDetails(uBO);\n+\n+    Mockito.when(userConsentManagementDao.getParticipantStudies(studyId, userId)).thenReturn(bo);\n+    ParticipantStudiesBO result =\n+        userConsentManagementService.getParticipantStudies(studyId, userId);\n+\n+    ArgumentCaptor<Integer> studyIdPassed = ArgumentCaptor.forClass(Integer.class);\n+    ArgumentCaptor<String> userIdPassed = ArgumentCaptor.forClass(String.class);\n+    Mockito.verify(userConsentManagementDao)\n+        .getParticipantStudies(studyIdPassed.capture(), userIdPassed.capture());\n+    assertEquals(studyId, studyIdPassed.getValue());\n+    assertEquals(userId, userIdPassed.getValue());\n+    assertEquals(bo, result);\n+    assertEquals(bo.getStudyInfo().getId(), result.getStudyInfo().getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4NTEzOA==", "bodyText": "remove", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424685138", "createdAt": "2020-05-13T19:38:37Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.google.cloud.healthcare.fdamystudies.service.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import java.util.LinkedList;\n+import java.util.List;\n+import org.hibernate.HibernateException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.dao.UserConsentManagementDao;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyInfoBO;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementServiceTests {\n+\n+  @Mock private UserConsentManagementDao userConsentManagementDao;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @InjectMocks private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @Test\n+  public void testGetParticipantStudies() {\n+\n+    Integer studyId = Integer.valueOf(1);\n+    String userId = \"sdjUyd\";\n+    ParticipantStudiesBO bo = new ParticipantStudiesBO();\n+\n+    StudyInfoBO sBO = new StudyInfoBO();\n+    sBO.setId(studyId);\n+    bo.setStudyInfo(sBO);\n+    UserDetailsBO uBO = new UserDetailsBO();\n+    uBO.setUserId(userId);\n+    bo.setUserDetails(uBO);\n+\n+    Mockito.when(userConsentManagementDao.getParticipantStudies(studyId, userId)).thenReturn(bo);\n+    ParticipantStudiesBO result =\n+        userConsentManagementService.getParticipantStudies(studyId, userId);\n+\n+    ArgumentCaptor<Integer> studyIdPassed = ArgumentCaptor.forClass(Integer.class);\n+    ArgumentCaptor<String> userIdPassed = ArgumentCaptor.forClass(String.class);\n+    Mockito.verify(userConsentManagementDao)\n+        .getParticipantStudies(studyIdPassed.capture(), userIdPassed.capture());\n+    assertEquals(studyId, studyIdPassed.getValue());\n+    assertEquals(userId, userIdPassed.getValue());\n+    assertEquals(bo, result);\n+    assertEquals(bo.getStudyInfo().getId(), result.getStudyInfo().getId());\n+    assertEquals(bo.getUserDetails().getUserId(), result.getUserDetails().getUserId());\n+  }\n+\n+  @Test\n+  public void testGetParticipantStudiesExceptionCase() {\n+    Integer studyId = Integer.valueOf(1);\n+    String userId = \"sdjUyd\";\n+    Mockito.when(userConsentManagementDao.getParticipantStudies(studyId, userId))\n+        .thenThrow(HibernateException.class);\n+    ParticipantStudiesBO result =\n+        userConsentManagementService.getParticipantStudies(studyId, userId);\n+    assertNull(result);\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @Test\n+  public void testSaveParticipantStudies() {\n+    List<ParticipantStudiesBO> participantStudiesList = new LinkedList<>();\n+    ParticipantStudiesBO participantStudiesBO = new ParticipantStudiesBO();\n+    participantStudiesBO.setParticipantId(\"\");\n+    participantStudiesList.add(participantStudiesBO);\n+\n+    ArgumentCaptor<List<ParticipantStudiesBO>> participantStudiesBOListPassed =\n+        ArgumentCaptor.forClass(List.class);\n+    ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4OTMxOA==", "bodyText": "This appears to be called twice and fails the second time.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424689318", "createdAt": "2020-05-13T19:46:35Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/config/WireMockInitializer.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.config;\n+\n+import org.springframework.context.ApplicationContextInitializer;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.context.event.ContextClosedEvent;\n+import com.github.tomakehurst.wiremock.WireMockServer;\n+import com.github.tomakehurst.wiremock.core.WireMockConfiguration;\n+\n+public class WireMockInitializer\n+    implements ApplicationContextInitializer<ConfigurableApplicationContext> {\n+\n+  @Override\n+  public void initialize(ConfigurableApplicationContext configurableApplicationContext) {\n+    WireMockServer wireMockServer = new WireMockServer(new WireMockConfiguration().port(8001));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4OTc3Ng==", "bodyText": "You don't need captors here, you can just pass studyId to the verify call.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424689776", "createdAt": "2020-05-13T19:47:31Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.google.cloud.healthcare.fdamystudies.service.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import java.util.LinkedList;\n+import java.util.List;\n+import org.hibernate.HibernateException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.dao.UserConsentManagementDao;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyInfoBO;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementServiceTests {\n+\n+  @Mock private UserConsentManagementDao userConsentManagementDao;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @InjectMocks private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @Test\n+  public void testGetParticipantStudies() {\n+\n+    Integer studyId = Integer.valueOf(1);\n+    String userId = \"sdjUyd\";\n+    ParticipantStudiesBO bo = new ParticipantStudiesBO();\n+\n+    StudyInfoBO sBO = new StudyInfoBO();\n+    sBO.setId(studyId);\n+    bo.setStudyInfo(sBO);\n+    UserDetailsBO uBO = new UserDetailsBO();\n+    uBO.setUserId(userId);\n+    bo.setUserDetails(uBO);\n+\n+    Mockito.when(userConsentManagementDao.getParticipantStudies(studyId, userId)).thenReturn(bo);\n+    ParticipantStudiesBO result =\n+        userConsentManagementService.getParticipantStudies(studyId, userId);\n+\n+    ArgumentCaptor<Integer> studyIdPassed = ArgumentCaptor.forClass(Integer.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5MDE1Mw==", "bodyText": "Verify is redundant if you use participantStudiesList in when", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424690153", "createdAt": "2020-05-13T19:48:11Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.google.cloud.healthcare.fdamystudies.service.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import java.util.LinkedList;\n+import java.util.List;\n+import org.hibernate.HibernateException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.dao.UserConsentManagementDao;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyInfoBO;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementServiceTests {\n+\n+  @Mock private UserConsentManagementDao userConsentManagementDao;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @InjectMocks private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @Test\n+  public void testGetParticipantStudies() {\n+\n+    Integer studyId = Integer.valueOf(1);\n+    String userId = \"sdjUyd\";\n+    ParticipantStudiesBO bo = new ParticipantStudiesBO();\n+\n+    StudyInfoBO sBO = new StudyInfoBO();\n+    sBO.setId(studyId);\n+    bo.setStudyInfo(sBO);\n+    UserDetailsBO uBO = new UserDetailsBO();\n+    uBO.setUserId(userId);\n+    bo.setUserDetails(uBO);\n+\n+    Mockito.when(userConsentManagementDao.getParticipantStudies(studyId, userId)).thenReturn(bo);\n+    ParticipantStudiesBO result =\n+        userConsentManagementService.getParticipantStudies(studyId, userId);\n+\n+    ArgumentCaptor<Integer> studyIdPassed = ArgumentCaptor.forClass(Integer.class);\n+    ArgumentCaptor<String> userIdPassed = ArgumentCaptor.forClass(String.class);\n+    Mockito.verify(userConsentManagementDao)\n+        .getParticipantStudies(studyIdPassed.capture(), userIdPassed.capture());\n+    assertEquals(studyId, studyIdPassed.getValue());\n+    assertEquals(userId, userIdPassed.getValue());\n+    assertEquals(bo, result);\n+    assertEquals(bo.getStudyInfo().getId(), result.getStudyInfo().getId());\n+    assertEquals(bo.getUserDetails().getUserId(), result.getUserDetails().getUserId());\n+  }\n+\n+  @Test\n+  public void testGetParticipantStudiesExceptionCase() {\n+    Integer studyId = Integer.valueOf(1);\n+    String userId = \"sdjUyd\";\n+    Mockito.when(userConsentManagementDao.getParticipantStudies(studyId, userId))\n+        .thenThrow(HibernateException.class);\n+    ParticipantStudiesBO result =\n+        userConsentManagementService.getParticipantStudies(studyId, userId);\n+    assertNull(result);\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @Test\n+  public void testSaveParticipantStudies() {\n+    List<ParticipantStudiesBO> participantStudiesList = new LinkedList<>();\n+    ParticipantStudiesBO participantStudiesBO = new ParticipantStudiesBO();\n+    participantStudiesBO.setParticipantId(\"\");\n+    participantStudiesList.add(participantStudiesBO);\n+\n+    ArgumentCaptor<List<ParticipantStudiesBO>> participantStudiesBOListPassed =\n+        ArgumentCaptor.forClass(List.class);\n+    ;\n+    Mockito.when(userConsentManagementDao.saveParticipantStudies(participantStudiesList))\n+        .thenReturn(\"SUCCESS\");\n+    String result = userConsentManagementService.saveParticipantStudies(participantStudiesList);\n+    Mockito.verify(userConsentManagementDao)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5MDM1MA==", "bodyText": "Don't need these", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424690350", "createdAt": "2020-05-13T19:48:32Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.google.cloud.healthcare.fdamystudies.service.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import java.util.LinkedList;\n+import java.util.List;\n+import org.hibernate.HibernateException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.dao.UserConsentManagementDao;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyInfoBO;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementServiceTests {\n+\n+  @Mock private UserConsentManagementDao userConsentManagementDao;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @InjectMocks private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @Test\n+  public void testGetParticipantStudies() {\n+\n+    Integer studyId = Integer.valueOf(1);\n+    String userId = \"sdjUyd\";\n+    ParticipantStudiesBO bo = new ParticipantStudiesBO();\n+\n+    StudyInfoBO sBO = new StudyInfoBO();\n+    sBO.setId(studyId);\n+    bo.setStudyInfo(sBO);\n+    UserDetailsBO uBO = new UserDetailsBO();\n+    uBO.setUserId(userId);\n+    bo.setUserDetails(uBO);\n+\n+    Mockito.when(userConsentManagementDao.getParticipantStudies(studyId, userId)).thenReturn(bo);\n+    ParticipantStudiesBO result =\n+        userConsentManagementService.getParticipantStudies(studyId, userId);\n+\n+    ArgumentCaptor<Integer> studyIdPassed = ArgumentCaptor.forClass(Integer.class);\n+    ArgumentCaptor<String> userIdPassed = ArgumentCaptor.forClass(String.class);\n+    Mockito.verify(userConsentManagementDao)\n+        .getParticipantStudies(studyIdPassed.capture(), userIdPassed.capture());\n+    assertEquals(studyId, studyIdPassed.getValue());\n+    assertEquals(userId, userIdPassed.getValue());\n+    assertEquals(bo, result);\n+    assertEquals(bo.getStudyInfo().getId(), result.getStudyInfo().getId());\n+    assertEquals(bo.getUserDetails().getUserId(), result.getUserDetails().getUserId());\n+  }\n+\n+  @Test\n+  public void testGetParticipantStudiesExceptionCase() {\n+    Integer studyId = Integer.valueOf(1);\n+    String userId = \"sdjUyd\";\n+    Mockito.when(userConsentManagementDao.getParticipantStudies(studyId, userId))\n+        .thenThrow(HibernateException.class);\n+    ParticipantStudiesBO result =\n+        userConsentManagementService.getParticipantStudies(studyId, userId);\n+    assertNull(result);\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @Test\n+  public void testSaveParticipantStudies() {\n+    List<ParticipantStudiesBO> participantStudiesList = new LinkedList<>();\n+    ParticipantStudiesBO participantStudiesBO = new ParticipantStudiesBO();\n+    participantStudiesBO.setParticipantId(\"\");\n+    participantStudiesList.add(participantStudiesBO);\n+\n+    ArgumentCaptor<List<ParticipantStudiesBO>> participantStudiesBOListPassed =\n+        ArgumentCaptor.forClass(List.class);\n+    ;\n+    Mockito.when(userConsentManagementDao.saveParticipantStudies(participantStudiesList))\n+        .thenReturn(\"SUCCESS\");\n+    String result = userConsentManagementService.saveParticipantStudies(participantStudiesList);\n+    Mockito.verify(userConsentManagementDao)\n+        .saveParticipantStudies(participantStudiesBOListPassed.capture());\n+\n+    assertNotNull(participantStudiesBOListPassed.getValue());\n+    assertEquals(1, participantStudiesBOListPassed.getValue().size());\n+    assertEquals(participantStudiesBO, participantStudiesBOListPassed.getValue().get(0));\n+    assertEquals(\"SUCCESS\", result);\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @Test\n+  public void testSaveParticipantStudiesExceptionCase() {\n+    List<ParticipantStudiesBO> participantStudiesList = new LinkedList<>();\n+    ParticipantStudiesBO participantStudiesBO = new ParticipantStudiesBO();\n+    participantStudiesBO.setParticipantId(\"\");\n+    participantStudiesList.add(participantStudiesBO);\n+\n+    ArgumentCaptor<List<ParticipantStudiesBO>> participantStudiesBOListPassed =\n+        ArgumentCaptor.forClass(List.class);\n+    Mockito.when(userConsentManagementDao.saveParticipantStudies(participantStudiesList))\n+        .thenThrow(HibernateException.class);\n+    String result = userConsentManagementService.saveParticipantStudies(participantStudiesList);\n+    Mockito.verify(userConsentManagementDao)\n+        .saveParticipantStudies(participantStudiesBOListPassed.capture());\n+\n+    assertNotNull(participantStudiesBOListPassed.getValue());\n+    assertEquals(1, participantStudiesBOListPassed.getValue().size());\n+    assertEquals(participantStudiesBO, participantStudiesBOListPassed.getValue().get(0));\n+    assertEquals(\"FAILURE\", result);\n+  }\n+\n+  @Test\n+  public void testGetStudyConsent() {\n+    String userId = \"hdUydjsII\";\n+    Integer studyId = Integer.valueOf(2);\n+    String consentVersion = \"1.0\";\n+\n+    StudyConsentBO bo = new StudyConsentBO();\n+    bo.setStudyInfoId(studyId);\n+    ArgumentCaptor<String> userIdPassed = ArgumentCaptor.forClass(String.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5MDQ2Nw==", "bodyText": "Same here", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424690467", "createdAt": "2020-05-13T19:48:46Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.google.cloud.healthcare.fdamystudies.service.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import java.util.LinkedList;\n+import java.util.List;\n+import org.hibernate.HibernateException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.dao.UserConsentManagementDao;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyInfoBO;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementServiceTests {\n+\n+  @Mock private UserConsentManagementDao userConsentManagementDao;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @InjectMocks private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @Test\n+  public void testGetParticipantStudies() {\n+\n+    Integer studyId = Integer.valueOf(1);\n+    String userId = \"sdjUyd\";\n+    ParticipantStudiesBO bo = new ParticipantStudiesBO();\n+\n+    StudyInfoBO sBO = new StudyInfoBO();\n+    sBO.setId(studyId);\n+    bo.setStudyInfo(sBO);\n+    UserDetailsBO uBO = new UserDetailsBO();\n+    uBO.setUserId(userId);\n+    bo.setUserDetails(uBO);\n+\n+    Mockito.when(userConsentManagementDao.getParticipantStudies(studyId, userId)).thenReturn(bo);\n+    ParticipantStudiesBO result =\n+        userConsentManagementService.getParticipantStudies(studyId, userId);\n+\n+    ArgumentCaptor<Integer> studyIdPassed = ArgumentCaptor.forClass(Integer.class);\n+    ArgumentCaptor<String> userIdPassed = ArgumentCaptor.forClass(String.class);\n+    Mockito.verify(userConsentManagementDao)\n+        .getParticipantStudies(studyIdPassed.capture(), userIdPassed.capture());\n+    assertEquals(studyId, studyIdPassed.getValue());\n+    assertEquals(userId, userIdPassed.getValue());\n+    assertEquals(bo, result);\n+    assertEquals(bo.getStudyInfo().getId(), result.getStudyInfo().getId());\n+    assertEquals(bo.getUserDetails().getUserId(), result.getUserDetails().getUserId());\n+  }\n+\n+  @Test\n+  public void testGetParticipantStudiesExceptionCase() {\n+    Integer studyId = Integer.valueOf(1);\n+    String userId = \"sdjUyd\";\n+    Mockito.when(userConsentManagementDao.getParticipantStudies(studyId, userId))\n+        .thenThrow(HibernateException.class);\n+    ParticipantStudiesBO result =\n+        userConsentManagementService.getParticipantStudies(studyId, userId);\n+    assertNull(result);\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @Test\n+  public void testSaveParticipantStudies() {\n+    List<ParticipantStudiesBO> participantStudiesList = new LinkedList<>();\n+    ParticipantStudiesBO participantStudiesBO = new ParticipantStudiesBO();\n+    participantStudiesBO.setParticipantId(\"\");\n+    participantStudiesList.add(participantStudiesBO);\n+\n+    ArgumentCaptor<List<ParticipantStudiesBO>> participantStudiesBOListPassed =\n+        ArgumentCaptor.forClass(List.class);\n+    ;\n+    Mockito.when(userConsentManagementDao.saveParticipantStudies(participantStudiesList))\n+        .thenReturn(\"SUCCESS\");\n+    String result = userConsentManagementService.saveParticipantStudies(participantStudiesList);\n+    Mockito.verify(userConsentManagementDao)\n+        .saveParticipantStudies(participantStudiesBOListPassed.capture());\n+\n+    assertNotNull(participantStudiesBOListPassed.getValue());\n+    assertEquals(1, participantStudiesBOListPassed.getValue().size());\n+    assertEquals(participantStudiesBO, participantStudiesBOListPassed.getValue().get(0));\n+    assertEquals(\"SUCCESS\", result);\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @Test\n+  public void testSaveParticipantStudiesExceptionCase() {\n+    List<ParticipantStudiesBO> participantStudiesList = new LinkedList<>();\n+    ParticipantStudiesBO participantStudiesBO = new ParticipantStudiesBO();\n+    participantStudiesBO.setParticipantId(\"\");\n+    participantStudiesList.add(participantStudiesBO);\n+\n+    ArgumentCaptor<List<ParticipantStudiesBO>> participantStudiesBOListPassed =\n+        ArgumentCaptor.forClass(List.class);\n+    Mockito.when(userConsentManagementDao.saveParticipantStudies(participantStudiesList))\n+        .thenThrow(HibernateException.class);\n+    String result = userConsentManagementService.saveParticipantStudies(participantStudiesList);\n+    Mockito.verify(userConsentManagementDao)\n+        .saveParticipantStudies(participantStudiesBOListPassed.capture());\n+\n+    assertNotNull(participantStudiesBOListPassed.getValue());\n+    assertEquals(1, participantStudiesBOListPassed.getValue().size());\n+    assertEquals(participantStudiesBO, participantStudiesBOListPassed.getValue().get(0));\n+    assertEquals(\"FAILURE\", result);\n+  }\n+\n+  @Test\n+  public void testGetStudyConsent() {\n+    String userId = \"hdUydjsII\";\n+    Integer studyId = Integer.valueOf(2);\n+    String consentVersion = \"1.0\";\n+\n+    StudyConsentBO bo = new StudyConsentBO();\n+    bo.setStudyInfoId(studyId);\n+    ArgumentCaptor<String> userIdPassed = ArgumentCaptor.forClass(String.class);\n+    ArgumentCaptor<Integer> studyIdPassed = ArgumentCaptor.forClass(Integer.class);\n+    ArgumentCaptor<String> consentVersionPassed = ArgumentCaptor.forClass(String.class);\n+\n+    Mockito.when(userConsentManagementDao.getStudyConsent(userId, studyId, consentVersion))\n+        .thenReturn(bo);\n+    StudyConsentBO result =\n+        userConsentManagementService.getStudyConsent(userId, studyId, consentVersion);\n+    Mockito.verify(userConsentManagementDao)\n+        .getStudyConsent(\n+            userIdPassed.capture(), studyIdPassed.capture(), consentVersionPassed.capture());\n+    assertEquals(userId, userIdPassed.getValue());\n+    assertEquals(studyId, studyIdPassed.getValue());\n+    assertEquals(consentVersion, consentVersionPassed.getValue());\n+    assertEquals(studyId, result.getStudyInfoId());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentExceptionCase() {\n+    String userId = \"hdUydjsII\";\n+    Integer studyId = Integer.valueOf(2);\n+    String consentVersion = \"1.0\";\n+    ArgumentCaptor<String> userIdPassed = ArgumentCaptor.forClass(String.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5MjE2OQ==", "bodyText": "Looks like you are missing tests for getStudyConsentDetails", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424692169", "createdAt": "2020-05-13T19:51:55Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.google.cloud.healthcare.fdamystudies.service.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import java.util.LinkedList;\n+import java.util.List;\n+import org.hibernate.HibernateException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.dao.UserConsentManagementDao;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyInfoBO;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementServiceTests {\n+\n+  @Mock private UserConsentManagementDao userConsentManagementDao;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @InjectMocks private UserConsentManagementServiceImpl userConsentManagementService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5NDg3OQ==", "bodyText": "Are you able to just remove the columns with null values to make this easier to read?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424694879", "createdAt": "2020-05-13T19:56:49Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/resources/data.sql", "diffHunk": "@@ -0,0 +1,37 @@\n+\n+INSERT INTO `org_info` (`id`, `name`, `org_id`, `created_on`, `created_by`, `modified_by`, `modified_date`) VALUES\n+\t(1, 'organizations name', 1, '2020-03-03 15:35:27', 0, 0, '2020-03-12 15:25:14');\n+\n+INSERT INTO `app_info` (`app_info_id`, `custom_app_id`, `org_info_id`, `created_on`, `android_bundle_id`, `app_name`, `created_by`, `modified_by`, `android_server_key`, `app_description`, `ios_certificate`, `ios_bundle_id`, `ios_certificate_password`, `from_email_id`, `from_email_password`, `forgot_email_body`, `forgot_email_sub`, `reg_email_body`, `reg_email_sub`, `method_handler`, `modified_date`) VALUES", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5NTQ5OA==", "bodyText": "Next line makes this redundant", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424695498", "createdAt": "2020-05-13T19:57:58Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.google.cloud.healthcare.fdamystudies.service.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import java.util.LinkedList;\n+import java.util.List;\n+import org.hibernate.HibernateException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.dao.UserConsentManagementDao;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyInfoBO;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementServiceTests {\n+\n+  @Mock private UserConsentManagementDao userConsentManagementDao;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @InjectMocks private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @Test\n+  public void testGetParticipantStudies() {\n+\n+    Integer studyId = Integer.valueOf(1);\n+    String userId = \"sdjUyd\";\n+    ParticipantStudiesBO bo = new ParticipantStudiesBO();\n+\n+    StudyInfoBO sBO = new StudyInfoBO();\n+    sBO.setId(studyId);\n+    bo.setStudyInfo(sBO);\n+    UserDetailsBO uBO = new UserDetailsBO();\n+    uBO.setUserId(userId);\n+    bo.setUserDetails(uBO);\n+\n+    Mockito.when(userConsentManagementDao.getParticipantStudies(studyId, userId)).thenReturn(bo);\n+    ParticipantStudiesBO result =\n+        userConsentManagementService.getParticipantStudies(studyId, userId);\n+\n+    ArgumentCaptor<Integer> studyIdPassed = ArgumentCaptor.forClass(Integer.class);\n+    ArgumentCaptor<String> userIdPassed = ArgumentCaptor.forClass(String.class);\n+    Mockito.verify(userConsentManagementDao)\n+        .getParticipantStudies(studyIdPassed.capture(), userIdPassed.capture());\n+    assertEquals(studyId, studyIdPassed.getValue());\n+    assertEquals(userId, userIdPassed.getValue());\n+    assertEquals(bo, result);\n+    assertEquals(bo.getStudyInfo().getId(), result.getStudyInfo().getId());\n+    assertEquals(bo.getUserDetails().getUserId(), result.getUserDetails().getUserId());\n+  }\n+\n+  @Test\n+  public void testGetParticipantStudiesExceptionCase() {\n+    Integer studyId = Integer.valueOf(1);\n+    String userId = \"sdjUyd\";\n+    Mockito.when(userConsentManagementDao.getParticipantStudies(studyId, userId))\n+        .thenThrow(HibernateException.class);\n+    ParticipantStudiesBO result =\n+        userConsentManagementService.getParticipantStudies(studyId, userId);\n+    assertNull(result);\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @Test\n+  public void testSaveParticipantStudies() {\n+    List<ParticipantStudiesBO> participantStudiesList = new LinkedList<>();\n+    ParticipantStudiesBO participantStudiesBO = new ParticipantStudiesBO();\n+    participantStudiesBO.setParticipantId(\"\");\n+    participantStudiesList.add(participantStudiesBO);\n+\n+    ArgumentCaptor<List<ParticipantStudiesBO>> participantStudiesBOListPassed =\n+        ArgumentCaptor.forClass(List.class);\n+    ;\n+    Mockito.when(userConsentManagementDao.saveParticipantStudies(participantStudiesList))\n+        .thenReturn(\"SUCCESS\");\n+    String result = userConsentManagementService.saveParticipantStudies(participantStudiesList);\n+    Mockito.verify(userConsentManagementDao)\n+        .saveParticipantStudies(participantStudiesBOListPassed.capture());\n+\n+    assertNotNull(participantStudiesBOListPassed.getValue());\n+    assertEquals(1, participantStudiesBOListPassed.getValue().size());\n+    assertEquals(participantStudiesBO, participantStudiesBOListPassed.getValue().get(0));\n+    assertEquals(\"SUCCESS\", result);\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @Test\n+  public void testSaveParticipantStudiesExceptionCase() {\n+    List<ParticipantStudiesBO> participantStudiesList = new LinkedList<>();\n+    ParticipantStudiesBO participantStudiesBO = new ParticipantStudiesBO();\n+    participantStudiesBO.setParticipantId(\"\");\n+    participantStudiesList.add(participantStudiesBO);\n+\n+    ArgumentCaptor<List<ParticipantStudiesBO>> participantStudiesBOListPassed =\n+        ArgumentCaptor.forClass(List.class);\n+    Mockito.when(userConsentManagementDao.saveParticipantStudies(participantStudiesList))\n+        .thenThrow(HibernateException.class);\n+    String result = userConsentManagementService.saveParticipantStudies(participantStudiesList);\n+    Mockito.verify(userConsentManagementDao)\n+        .saveParticipantStudies(participantStudiesBOListPassed.capture());\n+\n+    assertNotNull(participantStudiesBOListPassed.getValue());\n+    assertEquals(1, participantStudiesBOListPassed.getValue().size());\n+    assertEquals(participantStudiesBO, participantStudiesBOListPassed.getValue().get(0));\n+    assertEquals(\"FAILURE\", result);\n+  }\n+\n+  @Test\n+  public void testGetStudyConsent() {\n+    String userId = \"hdUydjsII\";\n+    Integer studyId = Integer.valueOf(2);\n+    String consentVersion = \"1.0\";\n+\n+    StudyConsentBO bo = new StudyConsentBO();\n+    bo.setStudyInfoId(studyId);\n+    ArgumentCaptor<String> userIdPassed = ArgumentCaptor.forClass(String.class);\n+    ArgumentCaptor<Integer> studyIdPassed = ArgumentCaptor.forClass(Integer.class);\n+    ArgumentCaptor<String> consentVersionPassed = ArgumentCaptor.forClass(String.class);\n+\n+    Mockito.when(userConsentManagementDao.getStudyConsent(userId, studyId, consentVersion))\n+        .thenReturn(bo);\n+    StudyConsentBO result =\n+        userConsentManagementService.getStudyConsent(userId, studyId, consentVersion);\n+    Mockito.verify(userConsentManagementDao)\n+        .getStudyConsent(\n+            userIdPassed.capture(), studyIdPassed.capture(), consentVersionPassed.capture());\n+    assertEquals(userId, userIdPassed.getValue());\n+    assertEquals(studyId, studyIdPassed.getValue());\n+    assertEquals(consentVersion, consentVersionPassed.getValue());\n+    assertEquals(studyId, result.getStudyInfoId());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentExceptionCase() {\n+    String userId = \"hdUydjsII\";\n+    Integer studyId = Integer.valueOf(2);\n+    String consentVersion = \"1.0\";\n+    ArgumentCaptor<String> userIdPassed = ArgumentCaptor.forClass(String.class);\n+    ArgumentCaptor<Integer> studyIdPassed = ArgumentCaptor.forClass(Integer.class);\n+    ArgumentCaptor<String> consentVersionPassed = ArgumentCaptor.forClass(String.class);\n+\n+    Mockito.when(userConsentManagementDao.getStudyConsent(userId, studyId, consentVersion))\n+        .thenThrow(HibernateException.class);\n+    StudyConsentBO result =\n+        userConsentManagementService.getStudyConsent(userId, studyId, consentVersion);\n+    Mockito.verify(userConsentManagementDao)\n+        .getStudyConsent(\n+            userIdPassed.capture(), studyIdPassed.capture(), consentVersionPassed.capture());\n+    assertEquals(userId, userIdPassed.getValue());\n+    assertEquals(studyId, studyIdPassed.getValue());\n+    assertEquals(consentVersion, consentVersionPassed.getValue());\n+    assertNull(result);\n+  }\n+\n+  @Test\n+  public void testSaveStudyConsent() {\n+    StudyConsentBO studyConsentBO = new StudyConsentBO();\n+    Mockito.when(userConsentManagementDao.saveStudyConsent(studyConsentBO)).thenReturn(\"SUCCESS\");\n+\n+    String result = userConsentManagementService.saveStudyConsent(studyConsentBO);\n+    assertEquals(\"SUCCESS\", result);\n+  }\n+\n+  @Test\n+  public void testSaveStudyConsentExceptionCase() {\n+    StudyConsentBO studyConsentBO = new StudyConsentBO();\n+    Mockito.when(userConsentManagementDao.saveStudyConsent(studyConsentBO))\n+        .thenThrow(HibernateException.class);\n+\n+    String result = userConsentManagementService.saveStudyConsent(studyConsentBO);\n+    assertEquals(\"FAILURE\", result);\n+  }\n+\n+  @Test\n+  public void testGetStudyInfoId() {\n+    String studyId = \"testStudyId\";\n+    StudyInfoBean bean = new StudyInfoBean();\n+    bean.setStudyInfoId(2);\n+\n+    Mockito.when(userConsentManagementDao.getStudyInfoId(studyId)).thenReturn(bean);\n+    ArgumentCaptor<String> studyIdPassed = ArgumentCaptor.forClass(String.class);\n+    StudyInfoBean result = userConsentManagementService.getStudyInfoId(studyId);\n+    Mockito.verify(userConsentManagementDao).getStudyInfoId(studyIdPassed.capture());\n+    assertEquals(studyId, studyIdPassed.getValue());\n+    assertEquals(bean.getStudyInfoId(), result.getStudyInfoId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5NTkzOQ==", "bodyText": "How do you know this was caused by the exception you expected?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424695939", "createdAt": "2020-05-13T19:58:45Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/CommonServiceImplTests.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.google.cloud.healthcare.fdamystudies.service.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import org.hibernate.HibernateException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.client.RestClientException;\n+import org.springframework.web.client.RestTemplate;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.dao.CommonDao;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonServiceImpl;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class CommonServiceImplTests {\n+\n+  @Mock private RestTemplate restTemplate;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @Mock private CommonDao commonDao;\n+\n+  @InjectMocks private CommonServiceImpl commonServiceImpl;\n+\n+  @Test\n+  public void testGetUserDetailsId() {\n+    String userId = \"kJSdYD2e\";\n+    Integer userDetailsId = 2;\n+    Mockito.when(commonDao.getUserDetailsId(userId)).thenReturn(userDetailsId);\n+    Integer result = commonServiceImpl.getUserDetailsId(userId);\n+    assertEquals(userDetailsId, result);\n+  }\n+\n+  @Test\n+  public void testGetUserDetailsIdExceptionCase() {\n+    String userId = \"kJSdYD2e\";\n+    Mockito.when(commonDao.getUserDetailsId(userId))\n+        .thenThrow(new HibernateException(\"Some hibernate exception\"));\n+    Integer result = commonServiceImpl.getUserDetailsId(userId);\n+    assertNull(result);\n+  }\n+\n+  @Test\n+  public void testValidateAccessToken() {\n+    String userId = \"kJSdYD2e\";\n+    String accessToken = \"jsdYUdbsKUDY&jshdDsknsdhjsds\";\n+    String clientToken = \"skdj7dsjhdhYTTD65TDjksbdbKSDHSDJAsjhdsjdsd\";\n+    Mockito.when(appConfig.getAuthServerAccessTokenValidationUrl())\n+        .thenReturn(\"http://someurl-not-to-be-hit.com\");\n+    Mockito.when(\n+            restTemplate.exchange(\n+                ArgumentMatchers.eq(\"http://someurl-not-to-be-hit.com\"),\n+                ArgumentMatchers.eq(HttpMethod.POST),\n+                ArgumentMatchers.any(HttpEntity.class),\n+                ArgumentMatchers.eq(String.class)))\n+        .thenReturn(new ResponseEntity<String>(\"1\", HttpStatus.OK));\n+\n+    Integer result = commonServiceImpl.validateAccessToken(userId, accessToken, clientToken);\n+    assertEquals(Integer.valueOf(1), result);\n+  }\n+\n+  @Test\n+  public void testValidateAccessTokenExceptionCase() {\n+    String userId = \"kJSdYD2e\";\n+    String accessToken = \"jsdYUdbsKUDY&jshdDsknsdhjsds\";\n+    String clientToken = \"skdj7dsjhdhYTTD65TDjksbdbKSDHSDJAsjhdsjdsd\";\n+    Mockito.when(appConfig.getAuthServerAccessTokenValidationUrl())\n+        .thenReturn(\"http://someurl-not-to-be-hit.com\");\n+    Mockito.when(\n+            restTemplate.exchange(\n+                ArgumentMatchers.eq(\"http://someurl-not-to-be-hit.com\"),\n+                ArgumentMatchers.eq(HttpMethod.POST),\n+                ArgumentMatchers.any(HttpEntity.class),\n+                ArgumentMatchers.eq(String.class)))\n+        .thenThrow(RestClientException.class);\n+\n+    Integer result = commonServiceImpl.validateAccessToken(userId, accessToken, clientToken);\n+    assertNull(result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5NjYyNA==", "bodyText": "Why do we include the code in the request body?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424696624", "createdAt": "2020-05-13T19:59:55Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach\n+  public void setWireMockUrl() {\n+    appConfig.setAuthServerAccessTokenValidationUrl(WIREMOCK_URL);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(getRestTemplate());\n+    assertNotNull(cloudStorageService);\n+    assertNotNull(userConsentManagementService);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void ping() {\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+\n+    String response = getRestTemplate().getForObject(\"/ping\", String.class);\n+    assertEquals(\"Mystudies UserRegistration Webservice Started !!!\", response);\n+  }\n+\n+  @Test\n+  @Order(2)\n+  public void updateEligibilityConsentStatus() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to save study consent first time\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 152}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMDk2OTcy", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#pullrequestreview-411096972", "createdAt": "2020-05-13T16:27:25Z", "commit": {"oid": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 38, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjoyNzoyNVrOGU5x6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMDo1OTowMFrOGVDTPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3MTM2OQ==", "bodyText": "why is this directory added to git ignore?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424571369", "createdAt": "2020-05-13T16:27:25Z", "author": {"login": "zohrehj"}, "path": ".gitignore", "diffHunk": "@@ -1,3 +1,14 @@\n **/.terraform\n *.tfstate\n *.tfstate.*\n+WCP-WS/target/\n+WCP-WS/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3MjE3MQ==", "bodyText": "this is spacific to a single day, and not a useful way to create gitignore rules\nsee https://git-scm.com/docs/gitignore for more context", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424572171", "createdAt": "2020-05-13T16:28:40Z", "author": {"login": "zohrehj"}, "path": ".gitignore", "diffHunk": "@@ -1,3 +1,14 @@\n **/.terraform\n *.tfstate\n *.tfstate.*\n+WCP-WS/target/\n+WCP-WS/\n+user-registration-server-ws/consent-mgmt/.settings/\n+user-registration-server-ws/consent-mgmt/target/\n+user-registration-server-ws/consent-mgmt/.classpath\n+user-registration-server-ws/consent-mgmt/.factorypath\n+user-registration-server-ws/consent-mgmt/userregws_20200424.log.gz\n+WCP/fdahpStudyDesigner/.settings/\n+user-registration-server-ws/consent-mgmt/.idea/\n+user-registration-server-ws/consent-mgmt/ConsentMgmtServicesWs.iml\n+user-registration-server-ws/consent-mgmt/userregws_20200430.log.gz", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3NDI4NA==", "bodyText": "please fix", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424574284", "createdAt": "2020-05-13T16:31:55Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/common/BaseMockit.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.common;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;\n+import org.springframework.boot.test.web.client.TestRestTemplate;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.test.context.ContextConfiguration;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.github.tomakehurst.wiremock.WireMockServer;\n+import com.google.cloud.healthcare.fdamystudies.config.WireMockInitializer;\n+\n+@ContextConfiguration(initializers = {WireMockInitializer.class})\n+@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)\n+@ActiveProfiles(\"mockit\")\n+public class BaseMockit {\n+\n+  protected static final String VALID_BEARER_TOKEN = \"Bearer 7fd50c2c-d618-493c-89d6-f1887e3e4bb8\";\n+\n+  protected static final String INVALID_BEARER_TOKEN =\n+      \"Bearer cd57710c-1d19-4058-8bfe-a6aac3a39e35\";\n+\n+  @Autowired private WireMockServer wireMockServer;\n+\n+  @LocalServerPort protected int randomServerPort;\n+\n+  @Autowired private TestRestTemplate restTemplate;\n+\n+  @Autowired private ObjectMapper objectMapper;\n+\n+  private boolean wireMockInitialized = false;\n+\n+  protected TestRestTemplate getRestTemplate() {\n+    return restTemplate;\n+  }\n+\n+  protected WireMockServer getWireMockServer() {\n+    return wireMockServer;\n+  }\n+\n+  protected ObjectNode getObjectNode() {\n+    return objectMapper.createObjectNode();\n+  }\n+\n+  protected ObjectMapper getObjectMapper() {\n+    return objectMapper;\n+  }\n+\n+  protected void setUpHydraMockResponse() {\n+    if (!wireMockInitialized) {\n+      //      getWireMockServer()\n+      //          .stubFor(\n+      //              get(urlEqualTo(\"http://localhost:8080/AuthServer/tokenAuthentication\"))\n+      //\n+      // .willReturn(aResponse().withBodyFile(\"hydra/auth-server-token-validation.json\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4NzIwOA==", "bodyText": "please format this code and fix the indentation, it looks incorrect in some places", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424587208", "createdAt": "2020-05-13T16:52:15Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach\n+  public void setWireMockUrl() {\n+    appConfig.setAuthServerAccessTokenValidationUrl(WIREMOCK_URL);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(getRestTemplate());\n+    assertNotNull(cloudStorageService);\n+    assertNotNull(userConsentManagementService);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void ping() {\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+\n+    String response = getRestTemplate().getForObject(\"/ping\", String.class);\n+    assertEquals(\"Mystudies UserRegistration Webservice Started !!!\", response);\n+  }\n+\n+  @Test\n+  @Order(2)\n+  public void updateEligibilityConsentStatus() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to save study consent first time\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4OTY4NA==", "bodyText": "let's not set specific order in place.\nI would like to reduce possibilities of tests developing dependencies overtime.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424589684", "createdAt": "2020-05-13T16:56:09Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach\n+  public void setWireMockUrl() {\n+    appConfig.setAuthServerAccessTokenValidationUrl(WIREMOCK_URL);\n+  }\n+\n+  @Test\n+  @Order(1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU5MjkwMQ==", "bodyText": "line break", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424592901", "createdAt": "2020-05-13T17:01:05Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks private UserConsentManagementController userConsentManagementController;\n+\n+  @Test\n+  public void testList() {\n+    // Sample Mockito unit test that uses mocked java.util.List //\n+\n+    list.add(\"X\");\n+\n+    Mockito.verify(list, times(1)).add(\"X\");\n+\n+    Mockito.when(list.size()).thenReturn(2);\n+    assertEquals(2, list.size());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDF() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwMTQwMg==", "bodyText": "@beforeeach or @before?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424601402", "createdAt": "2020-05-13T17:15:27Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwMTkyMw==", "bodyText": "Maybe WIREMOCK_URL and/or setWireMockUrl should be provided by the mock util?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424601923", "createdAt": "2020-05-13T17:16:24Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyODY4Nw==", "bodyText": "If you are mocking this URL, is there really a need to setup a wireMock server?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424628687", "createdAt": "2020-05-13T18:00:30Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/CommonServiceImplTests.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.google.cloud.healthcare.fdamystudies.service.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import org.hibernate.HibernateException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.client.RestClientException;\n+import org.springframework.web.client.RestTemplate;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.dao.CommonDao;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonServiceImpl;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class CommonServiceImplTests {\n+\n+  @Mock private RestTemplate restTemplate;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @Mock private CommonDao commonDao;\n+\n+  @InjectMocks private CommonServiceImpl commonServiceImpl;\n+\n+  @Test\n+  public void testGetUserDetailsId() {\n+    String userId = \"kJSdYD2e\";\n+    Integer userDetailsId = 2;\n+    Mockito.when(commonDao.getUserDetailsId(userId)).thenReturn(userDetailsId);\n+    Integer result = commonServiceImpl.getUserDetailsId(userId);\n+    assertEquals(userDetailsId, result);\n+  }\n+\n+  @Test\n+  public void testGetUserDetailsIdExceptionCase() {\n+    String userId = \"kJSdYD2e\";\n+    Mockito.when(commonDao.getUserDetailsId(userId))\n+        .thenThrow(new HibernateException(\"Some hibernate exception\"));\n+    Integer result = commonServiceImpl.getUserDetailsId(userId);\n+    assertNull(result);\n+  }\n+\n+  @Test\n+  public void testValidateAccessToken() {\n+    String userId = \"kJSdYD2e\";\n+    String accessToken = \"jsdYUdbsKUDY&jshdDsknsdhjsds\";\n+    String clientToken = \"skdj7dsjhdhYTTD65TDjksbdbKSDHSDJAsjhdsjdsd\";\n+    Mockito.when(appConfig.getAuthServerAccessTokenValidationUrl())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY0MjE5OQ==", "bodyText": "JsonNode body = responseEntity.getBody();\nassertEquals(ConsentStudyResponseBean.class, body.getClass());\nassertEquals(\"success\", ((ConsentStudyResponseBean) body).getMessage());\n\n?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424642199", "createdAt": "2020-05-13T18:23:06Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks private UserConsentManagementController userConsentManagementController;\n+\n+  @Test\n+  public void testList() {\n+    // Sample Mockito unit test that uses mocked java.util.List //\n+\n+    list.add(\"X\");\n+\n+    Mockito.verify(list, times(1)).add(\"X\");\n+\n+    Mockito.when(list.size()).thenReturn(2);\n+    assertEquals(2, list.size());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDF() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    ConsentStudyResponseBean resp = new ConsentStudyResponseBean();\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(resp);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ConsentStudyResponseBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\"success\", ((ConsentStudyResponseBean) responseEntity.getBody()).getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY0OTQwNg==", "bodyText": "Is defining an order required? if not, let's keep the default behavior.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424649406", "createdAt": "2020-05-13T18:34:59Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1OTE0OA==", "bodyText": "this test is very dependent on the content of the implementation, checking the spacing would even break the test. It's better to assert more generic attributes, such as response status code in this case.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424659148", "createdAt": "2020-05-13T18:51:28Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach\n+  public void setWireMockUrl() {\n+    appConfig.setAuthServerAccessTokenValidationUrl(WIREMOCK_URL);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(getRestTemplate());\n+    assertNotNull(cloudStorageService);\n+    assertNotNull(userConsentManagementService);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void ping() {\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+\n+    String response = getRestTemplate().getForObject(\"/ping\", String.class);\n+    assertEquals(\"Mystudies UserRegistration Webservice Started !!!\", response);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2MjE1Ng==", "bodyText": "If the test can assert that response == success test, then we would not need to update the test when changing the language of the resonse.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424662156", "createdAt": "2020-05-13T18:56:28Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach\n+  public void setWireMockUrl() {\n+    appConfig.setAuthServerAccessTokenValidationUrl(WIREMOCK_URL);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(getRestTemplate());\n+    assertNotNull(cloudStorageService);\n+    assertNotNull(userConsentManagementService);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void ping() {\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+\n+    String response = getRestTemplate().getForObject(\"/ping\", String.class);\n+    assertEquals(\"Mystudies UserRegistration Webservice Started !!!\", response);\n+  }\n+\n+  @Test\n+  @Order(2)\n+  public void updateEligibilityConsentStatus() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to save study consent first time\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2MjYzMw==", "bodyText": "previous check should be sufficient, no need to verify it manually.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424662633", "createdAt": "2020-05-13T18:57:18Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach\n+  public void setWireMockUrl() {\n+    appConfig.setAuthServerAccessTokenValidationUrl(WIREMOCK_URL);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(getRestTemplate());\n+    assertNotNull(cloudStorageService);\n+    assertNotNull(userConsentManagementService);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void ping() {\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+\n+    String response = getRestTemplate().getForObject(\"/ping\", String.class);\n+    assertEquals(\"Mystudies UserRegistration Webservice Started !!!\", response);\n+  }\n+\n+  @Test\n+  @Order(2)\n+  public void updateEligibilityConsentStatus() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to save study consent first time\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2Mzk0Nw==", "bodyText": "can these asserts be moved into a helper method, since they seem to be repeated on multiple tests?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424663947", "createdAt": "2020-05-13T18:59:40Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach\n+  public void setWireMockUrl() {\n+    appConfig.setAuthServerAccessTokenValidationUrl(WIREMOCK_URL);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(getRestTemplate());\n+    assertNotNull(cloudStorageService);\n+    assertNotNull(userConsentManagementService);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void ping() {\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+\n+    String response = getRestTemplate().getForObject(\"/ping\", String.class);\n+    assertEquals(\"Mystudies UserRegistration Webservice Started !!!\", response);\n+  }\n+\n+  @Test\n+  @Order(2)\n+  public void updateEligibilityConsentStatus() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to save study consent first time\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=1.0\",\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(3)\n+  public void updateEligibilityConsentStatusUpdateExisting() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to Update study consent pdf content value\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0_UPDATED.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0_UPDATED.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    String queryParamVersion = VERSION_1_0;\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + queryParamVersion,\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a"}, "originalPosition": 268}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2NDU4OQ==", "bodyText": "move to a function? it can get content bytes as input", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424664589", "createdAt": "2020-05-13T19:00:44Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach\n+  public void setWireMockUrl() {\n+    appConfig.setAuthServerAccessTokenValidationUrl(WIREMOCK_URL);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(getRestTemplate());\n+    assertNotNull(cloudStorageService);\n+    assertNotNull(userConsentManagementService);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void ping() {\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+\n+    String response = getRestTemplate().getForObject(\"/ping\", String.class);\n+    assertEquals(\"Mystudies UserRegistration Webservice Started !!!\", response);\n+  }\n+\n+  @Test\n+  @Order(2)\n+  public void updateEligibilityConsentStatus() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to save study consent first time\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=1.0\",\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(3)\n+  public void updateEligibilityConsentStatusUpdateExisting() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to Update study consent pdf content value\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0_UPDATED.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0_UPDATED.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a"}, "originalPosition": 251}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2NzA1OA==", "bodyText": "seems to be repeating on all tests, please move to beforeeach or helper method", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424667058", "createdAt": "2020-05-13T19:05:15Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach\n+  public void setWireMockUrl() {\n+    appConfig.setAuthServerAccessTokenValidationUrl(WIREMOCK_URL);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(getRestTemplate());\n+    assertNotNull(cloudStorageService);\n+    assertNotNull(userConsentManagementService);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void ping() {\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+\n+    String response = getRestTemplate().getForObject(\"/ping\", String.class);\n+    assertEquals(\"Mystudies UserRegistration Webservice Started !!!\", response);\n+  }\n+\n+  @Test\n+  @Order(2)\n+  public void updateEligibilityConsentStatus() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to save study consent first time\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=1.0\",\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(3)\n+  public void updateEligibilityConsentStatusUpdateExisting() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to Update study consent pdf content value\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0_UPDATED.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0_UPDATED.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    String queryParamVersion = VERSION_1_0;\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + queryParamVersion,\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(4)\n+  public void updateEligibilityConsentStatusAddNewVersion() throws InterruptedException {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Add sleep so that different consents are saved with some time difference\n+    TimeUnit.SECONDS.sleep(1);\n+\n+    // Invoke http api endpoint to Add new study consent pdf version\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_2.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_2);\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_2.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    String queryParamVersion = VERSION_1_2;\n+\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + queryParamVersion,\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_2, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+\n+    // Invoke http api endpoint to get old consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0_UPDATED.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    queryParamVersion = VERSION_1_0;\n+    pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0_UPDATED.getBytes());\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + queryParamVersion,\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+\n+    // Invoke http api endpoint to get content without mentioning version\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_2.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth\",\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+    pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_2.getBytes());\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_2, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(5)\n+  public void updateEligibilityConsentStatusInvalidInput() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+    headers.add(\"Content-Type\", \"application/json\");\n+    headers.add(\"Accept\", \"application/json\");\n+\n+    // Invoke http api endpoint to Add new study consent pdf version\n+    // Set mockito expectations for saving file into cloudStorageService\n+\n+    // without consent request\n+    ObjectNode consentRequest = null;\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+    assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());\n+\n+    // without consent\n+    consentRequest = new ObjectMapper().createObjectNode();\n+    requestEntity = new HttpEntity<>(consentRequest, headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+    assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());\n+\n+    // without consent version\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    requestEntity = new HttpEntity<>(consentRequest, headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+    assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());\n+\n+    // without consent pdf content\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    requestEntity = new HttpEntity<>(consentRequest, headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+    assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());\n+\n+    // without consent status\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_PDF, Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes()));\n+    requestEntity = new HttpEntity<>(consentRequest, headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+    assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());\n+\n+    // without studyId\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_PDF, Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes()));\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consentRequest.put(FIELD_STUDY_ID, \"\");\n+\n+    requestEntity = new HttpEntity<>(consentRequest, headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+    assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());\n+\n+    // without userId header\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_PDF, Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes()));\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+\n+    headers.put(USER_ID_HEADER, Collections.singletonList(\"\"));\n+    requestEntity = new HttpEntity<>(consentRequest, headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+    assertEquals(HttpStatus.UNAUTHORIZED, responseEntity.getStatusCode());\n+\n+    // without a matching entry for userId and studyId in participantStudies\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_PDF, Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes()));\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+\n+    headers.put(USER_ID_HEADER, Collections.singletonList(\"BhGsYUyd\"));\n+    requestEntity = new HttpEntity<>(consentRequest, headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+    assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());\n+\n+    // with empty version\n+    consent.put(FIELD_VERSION, \"\");\n+    consent.put(FIELD_PDF, Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes()));\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+\n+    headers.put(USER_ID_HEADER, Collections.singletonList(VALID_USER_ID));\n+    requestEntity = new HttpEntity<>(consentRequest, headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+    assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());\n+  }\n+\n+  @Test\n+  @Order(6)\n+  public void testUpdateEligibilityConsentStatusEmptyPdf() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to Add new study consent pdf version\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_2);\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consent.put(FIELD_PDF, \"\"); // empty pdf\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Verify that cloud storage wasn't called\n+    Mockito.verify(cloudStorageService, times(0))\n+        .saveFile(Mockito.anyString(), Mockito.anyString(), Mockito.anyString());\n+\n+    // Invoke http api endpoint to Add new study consent pdf version\n+    consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+\n+    consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_3);\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consent.put(FIELD_PDF, \"\"); // empty pdf\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    requestEntity = new HttpEntity<>(consentRequest, headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+    // Verify that cloud storage wasn't called\n+    Mockito.verify(cloudStorageService, times(0))\n+        .saveFile(Mockito.anyString(), Mockito.anyString(), Mockito.anyString());\n+  }\n+\n+  @Test\n+  public void testUpdateEligibilityConsentStatusSaveFailure() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a"}, "originalPosition": 605}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3MTMyMQ==", "bodyText": "not needed.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424671321", "createdAt": "2020-05-13T19:13:04Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach\n+  public void setWireMockUrl() {\n+    appConfig.setAuthServerAccessTokenValidationUrl(WIREMOCK_URL);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(getRestTemplate());\n+    assertNotNull(cloudStorageService);\n+    assertNotNull(userConsentManagementService);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void ping() {\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+\n+    String response = getRestTemplate().getForObject(\"/ping\", String.class);\n+    assertEquals(\"Mystudies UserRegistration Webservice Started !!!\", response);\n+  }\n+\n+  @Test\n+  @Order(2)\n+  public void updateEligibilityConsentStatus() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to save study consent first time\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=1.0\",\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(3)\n+  public void updateEligibilityConsentStatusUpdateExisting() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to Update study consent pdf content value\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0_UPDATED.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0_UPDATED.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    String queryParamVersion = VERSION_1_0;\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + queryParamVersion,\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(4)\n+  public void updateEligibilityConsentStatusAddNewVersion() throws InterruptedException {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Add sleep so that different consents are saved with some time difference\n+    TimeUnit.SECONDS.sleep(1);\n+\n+    // Invoke http api endpoint to Add new study consent pdf version\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_2.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_2);\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 319}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3MjAwMg==", "bodyText": "why not just use VERSION_1_0 here?\ndoesn't look like this queryParamVersion variable is used anywhere else", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424672002", "createdAt": "2020-05-13T19:14:18Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach\n+  public void setWireMockUrl() {\n+    appConfig.setAuthServerAccessTokenValidationUrl(WIREMOCK_URL);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(getRestTemplate());\n+    assertNotNull(cloudStorageService);\n+    assertNotNull(userConsentManagementService);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void ping() {\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+\n+    String response = getRestTemplate().getForObject(\"/ping\", String.class);\n+    assertEquals(\"Mystudies UserRegistration Webservice Started !!!\", response);\n+  }\n+\n+  @Test\n+  @Order(2)\n+  public void updateEligibilityConsentStatus() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to save study consent first time\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=1.0\",\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(3)\n+  public void updateEligibilityConsentStatusUpdateExisting() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to Update study consent pdf content value\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0_UPDATED.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0_UPDATED.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    String queryParamVersion = VERSION_1_0;\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + queryParamVersion,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 257}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3MjI3NA==", "bodyText": "same here, no need to define a new variable for version for a single use.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424672274", "createdAt": "2020-05-13T19:14:50Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach\n+  public void setWireMockUrl() {\n+    appConfig.setAuthServerAccessTokenValidationUrl(WIREMOCK_URL);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(getRestTemplate());\n+    assertNotNull(cloudStorageService);\n+    assertNotNull(userConsentManagementService);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void ping() {\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+\n+    String response = getRestTemplate().getForObject(\"/ping\", String.class);\n+    assertEquals(\"Mystudies UserRegistration Webservice Started !!!\", response);\n+  }\n+\n+  @Test\n+  @Order(2)\n+  public void updateEligibilityConsentStatus() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to save study consent first time\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=1.0\",\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(3)\n+  public void updateEligibilityConsentStatusUpdateExisting() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to Update study consent pdf content value\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0_UPDATED.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0_UPDATED.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    String queryParamVersion = VERSION_1_0;\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + queryParamVersion,\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(4)\n+  public void updateEligibilityConsentStatusAddNewVersion() throws InterruptedException {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Add sleep so that different consents are saved with some time difference\n+    TimeUnit.SECONDS.sleep(1);\n+\n+    // Invoke http api endpoint to Add new study consent pdf version\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_2.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_2);\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_2.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    String queryParamVersion = VERSION_1_2;\n+\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + queryParamVersion,\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_2, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+\n+    // Invoke http api endpoint to get old consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0_UPDATED.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    queryParamVersion = VERSION_1_0;\n+    pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0_UPDATED.getBytes());\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + queryParamVersion,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 376}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3MjUyMA==", "bodyText": "and here, queryParamVersion doesn't look needed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424672520", "createdAt": "2020-05-13T19:15:14Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach\n+  public void setWireMockUrl() {\n+    appConfig.setAuthServerAccessTokenValidationUrl(WIREMOCK_URL);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(getRestTemplate());\n+    assertNotNull(cloudStorageService);\n+    assertNotNull(userConsentManagementService);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void ping() {\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+\n+    String response = getRestTemplate().getForObject(\"/ping\", String.class);\n+    assertEquals(\"Mystudies UserRegistration Webservice Started !!!\", response);\n+  }\n+\n+  @Test\n+  @Order(2)\n+  public void updateEligibilityConsentStatus() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to save study consent first time\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=1.0\",\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(3)\n+  public void updateEligibilityConsentStatusUpdateExisting() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to Update study consent pdf content value\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0_UPDATED.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0_UPDATED.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    String queryParamVersion = VERSION_1_0;\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + queryParamVersion,\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(4)\n+  public void updateEligibilityConsentStatusAddNewVersion() throws InterruptedException {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Add sleep so that different consents are saved with some time difference\n+    TimeUnit.SECONDS.sleep(1);\n+\n+    // Invoke http api endpoint to Add new study consent pdf version\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_2.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_2);\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_2.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    String queryParamVersion = VERSION_1_2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 337}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MTIwNA==", "bodyText": "let's keep things consistent, please move content type and accept header keys and values into constants.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424681204", "createdAt": "2020-05-13T19:31:15Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach\n+  public void setWireMockUrl() {\n+    appConfig.setAuthServerAccessTokenValidationUrl(WIREMOCK_URL);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(getRestTemplate());\n+    assertNotNull(cloudStorageService);\n+    assertNotNull(userConsentManagementService);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void ping() {\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+\n+    String response = getRestTemplate().getForObject(\"/ping\", String.class);\n+    assertEquals(\"Mystudies UserRegistration Webservice Started !!!\", response);\n+  }\n+\n+  @Test\n+  @Order(2)\n+  public void updateEligibilityConsentStatus() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to save study consent first time\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=1.0\",\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(3)\n+  public void updateEligibilityConsentStatusUpdateExisting() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to Update study consent pdf content value\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0_UPDATED.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0_UPDATED.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    String queryParamVersion = VERSION_1_0;\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + queryParamVersion,\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(4)\n+  public void updateEligibilityConsentStatusAddNewVersion() throws InterruptedException {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Add sleep so that different consents are saved with some time difference\n+    TimeUnit.SECONDS.sleep(1);\n+\n+    // Invoke http api endpoint to Add new study consent pdf version\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_2.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_2);\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_2.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    String queryParamVersion = VERSION_1_2;\n+\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + queryParamVersion,\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_2, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+\n+    // Invoke http api endpoint to get old consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0_UPDATED.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    queryParamVersion = VERSION_1_0;\n+    pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0_UPDATED.getBytes());\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + queryParamVersion,\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+\n+    // Invoke http api endpoint to get content without mentioning version\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_2.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth\",\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+    pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_2.getBytes());\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_2, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(5)\n+  public void updateEligibilityConsentStatusInvalidInput() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+    headers.add(\"Content-Type\", \"application/json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 428}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4Mjk0NA==", "bodyText": "not needed, since they are already set on the existing consent object", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424682944", "createdAt": "2020-05-13T19:34:36Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach\n+  public void setWireMockUrl() {\n+    appConfig.setAuthServerAccessTokenValidationUrl(WIREMOCK_URL);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(getRestTemplate());\n+    assertNotNull(cloudStorageService);\n+    assertNotNull(userConsentManagementService);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void ping() {\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+\n+    String response = getRestTemplate().getForObject(\"/ping\", String.class);\n+    assertEquals(\"Mystudies UserRegistration Webservice Started !!!\", response);\n+  }\n+\n+  @Test\n+  @Order(2)\n+  public void updateEligibilityConsentStatus() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to save study consent first time\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=1.0\",\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(3)\n+  public void updateEligibilityConsentStatusUpdateExisting() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to Update study consent pdf content value\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0_UPDATED.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0_UPDATED.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    String queryParamVersion = VERSION_1_0;\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + queryParamVersion,\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(4)\n+  public void updateEligibilityConsentStatusAddNewVersion() throws InterruptedException {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Add sleep so that different consents are saved with some time difference\n+    TimeUnit.SECONDS.sleep(1);\n+\n+    // Invoke http api endpoint to Add new study consent pdf version\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_2.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_2);\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_2.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    String queryParamVersion = VERSION_1_2;\n+\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + queryParamVersion,\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_2, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+\n+    // Invoke http api endpoint to get old consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0_UPDATED.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    queryParamVersion = VERSION_1_0;\n+    pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0_UPDATED.getBytes());\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + queryParamVersion,\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+\n+    // Invoke http api endpoint to get content without mentioning version\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_2.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth\",\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+    pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_2.getBytes());\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_2, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(5)\n+  public void updateEligibilityConsentStatusInvalidInput() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+    headers.add(\"Content-Type\", \"application/json\");\n+    headers.add(\"Accept\", \"application/json\");\n+\n+    // Invoke http api endpoint to Add new study consent pdf version\n+    // Set mockito expectations for saving file into cloudStorageService\n+\n+    // without consent request\n+    ObjectNode consentRequest = null;\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+    assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());\n+\n+    // without consent\n+    consentRequest = new ObjectMapper().createObjectNode();\n+    requestEntity = new HttpEntity<>(consentRequest, headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+    assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());\n+\n+    // without consent version\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    requestEntity = new HttpEntity<>(consentRequest, headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+    assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());\n+\n+    // without consent pdf content\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    requestEntity = new HttpEntity<>(consentRequest, headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+    assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());\n+\n+    // without consent status\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_PDF, Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes()));\n+    requestEntity = new HttpEntity<>(consentRequest, headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+    assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());\n+\n+    // without studyId\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_PDF, Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes()));\n+    consent.put(FIELD_STATUS, \"complete\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 485}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4NjMwMQ==", "bodyText": "Is it possible to write this as a parameterized test instead?\ninput would be a consent object and expected output would be the statusCode.\nsee https://github.com/junit-team/junit4/wiki/Parameterized-tests", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424686301", "createdAt": "2020-05-13T19:40:44Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach\n+  public void setWireMockUrl() {\n+    appConfig.setAuthServerAccessTokenValidationUrl(WIREMOCK_URL);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(getRestTemplate());\n+    assertNotNull(cloudStorageService);\n+    assertNotNull(userConsentManagementService);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void ping() {\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+\n+    String response = getRestTemplate().getForObject(\"/ping\", String.class);\n+    assertEquals(\"Mystudies UserRegistration Webservice Started !!!\", response);\n+  }\n+\n+  @Test\n+  @Order(2)\n+  public void updateEligibilityConsentStatus() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to save study consent first time\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=1.0\",\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(3)\n+  public void updateEligibilityConsentStatusUpdateExisting() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to Update study consent pdf content value\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0_UPDATED.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0_UPDATED.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    String queryParamVersion = VERSION_1_0;\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + queryParamVersion,\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(4)\n+  public void updateEligibilityConsentStatusAddNewVersion() throws InterruptedException {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Add sleep so that different consents are saved with some time difference\n+    TimeUnit.SECONDS.sleep(1);\n+\n+    // Invoke http api endpoint to Add new study consent pdf version\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_2.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_2);\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_2.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    String queryParamVersion = VERSION_1_2;\n+\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + queryParamVersion,\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_2, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+\n+    // Invoke http api endpoint to get old consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0_UPDATED.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    queryParamVersion = VERSION_1_0;\n+    pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0_UPDATED.getBytes());\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + queryParamVersion,\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+\n+    // Invoke http api endpoint to get content without mentioning version\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_2.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth\",\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+    pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_2.getBytes());\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_2, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(5)\n+  public void updateEligibilityConsentStatusInvalidInput() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 423}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4ODMzMA==", "bodyText": "please remove unrelated mockito test", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424688330", "createdAt": "2020-05-13T19:44:44Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks private UserConsentManagementController userConsentManagementController;\n+\n+  @Test\n+  public void testList() {\n+    // Sample Mockito unit test that uses mocked java.util.List //\n+\n+    list.add(\"X\");\n+\n+    Mockito.verify(list, times(1)).add(\"X\");\n+\n+    Mockito.when(list.size()).thenReturn(2);\n+    assertEquals(2, list.size());\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5MDcyOA==", "bodyText": "use HttpStatus instead", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424690728", "createdAt": "2020-05-13T19:49:17Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks private UserConsentManagementController userConsentManagementController;\n+\n+  @Test\n+  public void testList() {\n+    // Sample Mockito unit test that uses mocked java.util.List //\n+\n+    list.add(\"X\");\n+\n+    Mockito.verify(list, times(1)).add(\"X\");\n+\n+    Mockito.when(list.size()).thenReturn(2);\n+    assertEquals(2, list.size());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDF() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    ConsentStudyResponseBean resp = new ConsentStudyResponseBean();\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(resp);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ConsentStudyResponseBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\"success\", ((ConsentStudyResponseBean) responseEntity.getBody()).getMessage());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFNoDataFound() throws IOException {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(null);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(null, responseEntity);\n+    assertEquals(400, response.getStatus());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5Mjg5NA==", "bodyText": "nit:\nString now = new SimpleDateFormat(\"MMddyyyyHHmmss\").format(new Date())\nString fileName = String.join(\"_\", userId, studyId, consentVersion, now, \".pdf\")", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424692894", "createdAt": "2020-05-13T19:53:10Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks private UserConsentManagementController userConsentManagementController;\n+\n+  @Test\n+  public void testList() {\n+    // Sample Mockito unit test that uses mocked java.util.List //\n+\n+    list.add(\"X\");\n+\n+    Mockito.verify(list, times(1)).add(\"X\");\n+\n+    Mockito.when(list.size()).thenReturn(2);\n+    assertEquals(2, list.size());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDF() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    ConsentStudyResponseBean resp = new ConsentStudyResponseBean();\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(resp);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ConsentStudyResponseBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\"success\", ((ConsentStudyResponseBean) responseEntity.getBody()).getMessage());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFNoDataFound() throws IOException {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(null);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(null, responseEntity);\n+    assertEquals(400, response.getStatus());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFInvalidData() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+\n+    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n+    Mockito.verify(userConsentManagementService, never()).getStudyInfoId(studyId);\n+    Mockito.verify(userConsentManagementService, never())\n+        .getStudyConsentDetails(userId, studyInfoId, consentVersion);\n+  }\n+\n+  @Test\n+  public void testUpdateEligibilityConsentStatus() {\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+    Integer userDetailsId = 1;\n+\n+    HttpServletResponse response = new MockHttpServletResponse();\n+    ConsentStatusBean bean = new ConsentStatusBean();\n+    bean.setStudyId(studyId);\n+    bean.setEligibility(Boolean.TRUE);\n+    bean.setSharing(\"true\");\n+    ConsentReqBean reqBean = new ConsentReqBean();\n+    reqBean.setPdf(Base64.getEncoder().encodeToString(\"content\".getBytes()));\n+    reqBean.setVersion(\"1.0\");\n+    reqBean.setStatus(\"completed\");\n+    bean.setConsent(reqBean);\n+\n+    StudyConsentBO studyConsent = new StudyConsentBO();\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+    ParticipantStudiesBO participantStudies = new ParticipantStudiesBO();\n+    String underDirectory = userId + \"/\" + studyId;\n+    String fileName =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5MzY4Nw==", "bodyText": "checking the statusCode is sufficient, no need to do this.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424693687", "createdAt": "2020-05-13T19:54:33Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks private UserConsentManagementController userConsentManagementController;\n+\n+  @Test\n+  public void testList() {\n+    // Sample Mockito unit test that uses mocked java.util.List //\n+\n+    list.add(\"X\");\n+\n+    Mockito.verify(list, times(1)).add(\"X\");\n+\n+    Mockito.when(list.size()).thenReturn(2);\n+    assertEquals(2, list.size());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDF() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    ConsentStudyResponseBean resp = new ConsentStudyResponseBean();\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(resp);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ConsentStudyResponseBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\"success\", ((ConsentStudyResponseBean) responseEntity.getBody()).getMessage());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFNoDataFound() throws IOException {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(null);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(null, responseEntity);\n+    assertEquals(400, response.getStatus());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFInvalidData() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+\n+    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n+    Mockito.verify(userConsentManagementService, never()).getStudyInfoId(studyId);\n+    Mockito.verify(userConsentManagementService, never())\n+        .getStudyConsentDetails(userId, studyInfoId, consentVersion);\n+  }\n+\n+  @Test\n+  public void testUpdateEligibilityConsentStatus() {\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+    Integer userDetailsId = 1;\n+\n+    HttpServletResponse response = new MockHttpServletResponse();\n+    ConsentStatusBean bean = new ConsentStatusBean();\n+    bean.setStudyId(studyId);\n+    bean.setEligibility(Boolean.TRUE);\n+    bean.setSharing(\"true\");\n+    ConsentReqBean reqBean = new ConsentReqBean();\n+    reqBean.setPdf(Base64.getEncoder().encodeToString(\"content\".getBytes()));\n+    reqBean.setVersion(\"1.0\");\n+    reqBean.setStatus(\"completed\");\n+    bean.setConsent(reqBean);\n+\n+    StudyConsentBO studyConsent = new StudyConsentBO();\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+    ParticipantStudiesBO participantStudies = new ParticipantStudiesBO();\n+    String underDirectory = userId + \"/\" + studyId;\n+    String fileName =\n+        userId\n+            + \"_\"\n+            + studyId\n+            + \"_\"\n+            + consentVersion\n+            + \"_\"\n+            + new SimpleDateFormat(\"MMddyyyyHHmmss\").format(new Date())\n+            + \".pdf\";\n+\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(userConsentManagementService.getParticipantStudies(studyInfoId, userId))\n+        .thenReturn(participantStudies);\n+    Mockito.when(\n+            userConsentManagementService.saveParticipantStudies(\n+                Collections.singletonList(participantStudies)))\n+        .thenReturn(\"SUCCESS\");\n+    Mockito.when(userConsentManagementService.getStudyConsent(userId, studyInfoId, consentVersion))\n+        .thenReturn(studyConsent);\n+    Mockito.when(userConsentManagementService.getUserDetailsId(userId)).thenReturn(userDetailsId);\n+    Mockito.when(userConsentManagementService.saveStudyConsent(studyConsent)).thenReturn(\"SUCCESS\");\n+    Mockito.when(cloudStorageService.saveFile(fileName, reqBean.getPdf(), underDirectory))\n+        .thenReturn(fileName + \"/\" + underDirectory);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.updateEligibilityConsentStatus(userId, bean, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ErrorBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\n+        ErrorCode.EC_200.code(), ((ErrorBean) responseEntity.getBody()).getCode().intValue());\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5NDA1OA==", "bodyText": "please reformat. It's hard to read as is.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424694058", "createdAt": "2020-05-13T19:55:16Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks private UserConsentManagementController userConsentManagementController;\n+\n+  @Test\n+  public void testList() {\n+    // Sample Mockito unit test that uses mocked java.util.List //\n+\n+    list.add(\"X\");\n+\n+    Mockito.verify(list, times(1)).add(\"X\");\n+\n+    Mockito.when(list.size()).thenReturn(2);\n+    assertEquals(2, list.size());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDF() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    ConsentStudyResponseBean resp = new ConsentStudyResponseBean();\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(resp);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ConsentStudyResponseBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\"success\", ((ConsentStudyResponseBean) responseEntity.getBody()).getMessage());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFNoDataFound() throws IOException {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(null);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(null, responseEntity);\n+    assertEquals(400, response.getStatus());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFInvalidData() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+\n+    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n+    Mockito.verify(userConsentManagementService, never()).getStudyInfoId(studyId);\n+    Mockito.verify(userConsentManagementService, never())\n+        .getStudyConsentDetails(userId, studyInfoId, consentVersion);\n+  }\n+\n+  @Test\n+  public void testUpdateEligibilityConsentStatus() {\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+    Integer userDetailsId = 1;\n+\n+    HttpServletResponse response = new MockHttpServletResponse();\n+    ConsentStatusBean bean = new ConsentStatusBean();\n+    bean.setStudyId(studyId);\n+    bean.setEligibility(Boolean.TRUE);\n+    bean.setSharing(\"true\");\n+    ConsentReqBean reqBean = new ConsentReqBean();\n+    reqBean.setPdf(Base64.getEncoder().encodeToString(\"content\".getBytes()));\n+    reqBean.setVersion(\"1.0\");\n+    reqBean.setStatus(\"completed\");\n+    bean.setConsent(reqBean);\n+\n+    StudyConsentBO studyConsent = new StudyConsentBO();\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+    ParticipantStudiesBO participantStudies = new ParticipantStudiesBO();\n+    String underDirectory = userId + \"/\" + studyId;\n+    String fileName =\n+        userId\n+            + \"_\"\n+            + studyId\n+            + \"_\"\n+            + consentVersion\n+            + \"_\"\n+            + new SimpleDateFormat(\"MMddyyyyHHmmss\").format(new Date())\n+            + \".pdf\";\n+\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(userConsentManagementService.getParticipantStudies(studyInfoId, userId))\n+        .thenReturn(participantStudies);\n+    Mockito.when(\n+            userConsentManagementService.saveParticipantStudies(\n+                Collections.singletonList(participantStudies)))\n+        .thenReturn(\"SUCCESS\");\n+    Mockito.when(userConsentManagementService.getStudyConsent(userId, studyInfoId, consentVersion))\n+        .thenReturn(studyConsent);\n+    Mockito.when(userConsentManagementService.getUserDetailsId(userId)).thenReturn(userDetailsId);\n+    Mockito.when(userConsentManagementService.saveStudyConsent(studyConsent)).thenReturn(\"SUCCESS\");\n+    Mockito.when(cloudStorageService.saveFile(fileName, reqBean.getPdf(), underDirectory))\n+        .thenReturn(fileName + \"/\" + underDirectory);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.updateEligibilityConsentStatus(userId, bean, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ErrorBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\n+        ErrorCode.EC_200.code(), ((ErrorBean) responseEntity.getBody()).getCode().intValue());\n+  }\n+\n+  @Test\n+  public void testUpdateEligibilityConsentStatusVersionRequired() {\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    HttpServletResponse response = new MockHttpServletResponse();\n+    ConsentStatusBean bean = new ConsentStatusBean();\n+    bean.setStudyId(studyId);\n+    bean.setEligibility(Boolean.TRUE);\n+    bean.setSharing(\"true\");\n+    ConsentReqBean reqBean = new ConsentReqBean();\n+    reqBean.setVersion(\"\");\n+    reqBean.setPdf(Base64.getEncoder().encodeToString(\"content\".getBytes()));\n+    reqBean.setStatus(\"completed\");\n+    bean.setConsent(reqBean);\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+    ParticipantStudiesBO participantStudies = new ParticipantStudiesBO();\n+\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(userConsentManagementService.getParticipantStudies(studyInfoId, userId))\n+        .thenReturn(participantStudies);\n+    Mockito.when(\n+            userConsentManagementService.saveParticipantStudies(\n+                Collections.singletonList(participantStudies)))\n+        .thenReturn(\"SUCCESS\");\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.updateEligibilityConsentStatus(userId, bean, response);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 230}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5NDc3OQ==", "bodyText": "nit: use a single line to group related statements. e.g.\n    ConsentReqBean reqBean = new ConsentReqBean();\n    reqBean.setPdf(Base64.getEncoder().encodeToString(\"content\".getBytes()));\n    reqBean.setStatus(\"completed\");\n    \n    ConsentStatusBean bean = new ConsentStatusBean();\n    bean.setStudyId(studyId);\n    bean.setEligibility(Boolean.TRUE);\n    bean.setSharing(\"true\");\n    bean.setConsent(reqBean);", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424694779", "createdAt": "2020-05-13T19:56:39Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks private UserConsentManagementController userConsentManagementController;\n+\n+  @Test\n+  public void testList() {\n+    // Sample Mockito unit test that uses mocked java.util.List //\n+\n+    list.add(\"X\");\n+\n+    Mockito.verify(list, times(1)).add(\"X\");\n+\n+    Mockito.when(list.size()).thenReturn(2);\n+    assertEquals(2, list.size());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDF() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    ConsentStudyResponseBean resp = new ConsentStudyResponseBean();\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(resp);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ConsentStudyResponseBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\"success\", ((ConsentStudyResponseBean) responseEntity.getBody()).getMessage());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFNoDataFound() throws IOException {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(null);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(null, responseEntity);\n+    assertEquals(400, response.getStatus());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFInvalidData() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+\n+    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n+    Mockito.verify(userConsentManagementService, never()).getStudyInfoId(studyId);\n+    Mockito.verify(userConsentManagementService, never())\n+        .getStudyConsentDetails(userId, studyInfoId, consentVersion);\n+  }\n+\n+  @Test\n+  public void testUpdateEligibilityConsentStatus() {\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+    Integer userDetailsId = 1;\n+\n+    HttpServletResponse response = new MockHttpServletResponse();\n+    ConsentStatusBean bean = new ConsentStatusBean();\n+    bean.setStudyId(studyId);\n+    bean.setEligibility(Boolean.TRUE);\n+    bean.setSharing(\"true\");\n+    ConsentReqBean reqBean = new ConsentReqBean();\n+    reqBean.setPdf(Base64.getEncoder().encodeToString(\"content\".getBytes()));\n+    reqBean.setVersion(\"1.0\");\n+    reqBean.setStatus(\"completed\");\n+    bean.setConsent(reqBean);\n+\n+    StudyConsentBO studyConsent = new StudyConsentBO();\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+    ParticipantStudiesBO participantStudies = new ParticipantStudiesBO();\n+    String underDirectory = userId + \"/\" + studyId;\n+    String fileName =\n+        userId\n+            + \"_\"\n+            + studyId\n+            + \"_\"\n+            + consentVersion\n+            + \"_\"\n+            + new SimpleDateFormat(\"MMddyyyyHHmmss\").format(new Date())\n+            + \".pdf\";\n+\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(userConsentManagementService.getParticipantStudies(studyInfoId, userId))\n+        .thenReturn(participantStudies);\n+    Mockito.when(\n+            userConsentManagementService.saveParticipantStudies(\n+                Collections.singletonList(participantStudies)))\n+        .thenReturn(\"SUCCESS\");\n+    Mockito.when(userConsentManagementService.getStudyConsent(userId, studyInfoId, consentVersion))\n+        .thenReturn(studyConsent);\n+    Mockito.when(userConsentManagementService.getUserDetailsId(userId)).thenReturn(userDetailsId);\n+    Mockito.when(userConsentManagementService.saveStudyConsent(studyConsent)).thenReturn(\"SUCCESS\");\n+    Mockito.when(cloudStorageService.saveFile(fileName, reqBean.getPdf(), underDirectory))\n+        .thenReturn(fileName + \"/\" + underDirectory);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.updateEligibilityConsentStatus(userId, bean, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ErrorBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\n+        ErrorCode.EC_200.code(), ((ErrorBean) responseEntity.getBody()).getCode().intValue());\n+  }\n+\n+  @Test\n+  public void testUpdateEligibilityConsentStatusVersionRequired() {\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    HttpServletResponse response = new MockHttpServletResponse();\n+    ConsentStatusBean bean = new ConsentStatusBean();\n+    bean.setStudyId(studyId);\n+    bean.setEligibility(Boolean.TRUE);\n+    bean.setSharing(\"true\");\n+    ConsentReqBean reqBean = new ConsentReqBean();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5NjUyOA==", "bodyText": "out of scope, but why is sharing a string instead of boolean?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424696528", "createdAt": "2020-05-13T19:59:45Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks private UserConsentManagementController userConsentManagementController;\n+\n+  @Test\n+  public void testList() {\n+    // Sample Mockito unit test that uses mocked java.util.List //\n+\n+    list.add(\"X\");\n+\n+    Mockito.verify(list, times(1)).add(\"X\");\n+\n+    Mockito.when(list.size()).thenReturn(2);\n+    assertEquals(2, list.size());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDF() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    ConsentStudyResponseBean resp = new ConsentStudyResponseBean();\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(resp);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ConsentStudyResponseBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\"success\", ((ConsentStudyResponseBean) responseEntity.getBody()).getMessage());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFNoDataFound() throws IOException {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(null);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(null, responseEntity);\n+    assertEquals(400, response.getStatus());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFInvalidData() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+\n+    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n+    Mockito.verify(userConsentManagementService, never()).getStudyInfoId(studyId);\n+    Mockito.verify(userConsentManagementService, never())\n+        .getStudyConsentDetails(userId, studyInfoId, consentVersion);\n+  }\n+\n+  @Test\n+  public void testUpdateEligibilityConsentStatus() {\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+    Integer userDetailsId = 1;\n+\n+    HttpServletResponse response = new MockHttpServletResponse();\n+    ConsentStatusBean bean = new ConsentStatusBean();\n+    bean.setStudyId(studyId);\n+    bean.setEligibility(Boolean.TRUE);\n+    bean.setSharing(\"true\");\n+    ConsentReqBean reqBean = new ConsentReqBean();\n+    reqBean.setPdf(Base64.getEncoder().encodeToString(\"content\".getBytes()));\n+    reqBean.setVersion(\"1.0\");\n+    reqBean.setStatus(\"completed\");\n+    bean.setConsent(reqBean);\n+\n+    StudyConsentBO studyConsent = new StudyConsentBO();\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+    ParticipantStudiesBO participantStudies = new ParticipantStudiesBO();\n+    String underDirectory = userId + \"/\" + studyId;\n+    String fileName =\n+        userId\n+            + \"_\"\n+            + studyId\n+            + \"_\"\n+            + consentVersion\n+            + \"_\"\n+            + new SimpleDateFormat(\"MMddyyyyHHmmss\").format(new Date())\n+            + \".pdf\";\n+\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(userConsentManagementService.getParticipantStudies(studyInfoId, userId))\n+        .thenReturn(participantStudies);\n+    Mockito.when(\n+            userConsentManagementService.saveParticipantStudies(\n+                Collections.singletonList(participantStudies)))\n+        .thenReturn(\"SUCCESS\");\n+    Mockito.when(userConsentManagementService.getStudyConsent(userId, studyInfoId, consentVersion))\n+        .thenReturn(studyConsent);\n+    Mockito.when(userConsentManagementService.getUserDetailsId(userId)).thenReturn(userDetailsId);\n+    Mockito.when(userConsentManagementService.saveStudyConsent(studyConsent)).thenReturn(\"SUCCESS\");\n+    Mockito.when(cloudStorageService.saveFile(fileName, reqBean.getPdf(), underDirectory))\n+        .thenReturn(fileName + \"/\" + underDirectory);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.updateEligibilityConsentStatus(userId, bean, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ErrorBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\n+        ErrorCode.EC_200.code(), ((ErrorBean) responseEntity.getBody()).getCode().intValue());\n+  }\n+\n+  @Test\n+  public void testUpdateEligibilityConsentStatusVersionRequired() {\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    HttpServletResponse response = new MockHttpServletResponse();\n+    ConsentStatusBean bean = new ConsentStatusBean();\n+    bean.setStudyId(studyId);\n+    bean.setEligibility(Boolean.TRUE);\n+    bean.setSharing(\"true\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5NzM5MA==", "bodyText": "any reason you are using singletonList here?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424697390", "createdAt": "2020-05-13T20:01:18Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks private UserConsentManagementController userConsentManagementController;\n+\n+  @Test\n+  public void testList() {\n+    // Sample Mockito unit test that uses mocked java.util.List //\n+\n+    list.add(\"X\");\n+\n+    Mockito.verify(list, times(1)).add(\"X\");\n+\n+    Mockito.when(list.size()).thenReturn(2);\n+    assertEquals(2, list.size());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDF() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    ConsentStudyResponseBean resp = new ConsentStudyResponseBean();\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(resp);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ConsentStudyResponseBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\"success\", ((ConsentStudyResponseBean) responseEntity.getBody()).getMessage());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFNoDataFound() throws IOException {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(null);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(null, responseEntity);\n+    assertEquals(400, response.getStatus());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFInvalidData() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+\n+    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n+    Mockito.verify(userConsentManagementService, never()).getStudyInfoId(studyId);\n+    Mockito.verify(userConsentManagementService, never())\n+        .getStudyConsentDetails(userId, studyInfoId, consentVersion);\n+  }\n+\n+  @Test\n+  public void testUpdateEligibilityConsentStatus() {\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+    Integer userDetailsId = 1;\n+\n+    HttpServletResponse response = new MockHttpServletResponse();\n+    ConsentStatusBean bean = new ConsentStatusBean();\n+    bean.setStudyId(studyId);\n+    bean.setEligibility(Boolean.TRUE);\n+    bean.setSharing(\"true\");\n+    ConsentReqBean reqBean = new ConsentReqBean();\n+    reqBean.setPdf(Base64.getEncoder().encodeToString(\"content\".getBytes()));\n+    reqBean.setVersion(\"1.0\");\n+    reqBean.setStatus(\"completed\");\n+    bean.setConsent(reqBean);\n+\n+    StudyConsentBO studyConsent = new StudyConsentBO();\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+    ParticipantStudiesBO participantStudies = new ParticipantStudiesBO();\n+    String underDirectory = userId + \"/\" + studyId;\n+    String fileName =\n+        userId\n+            + \"_\"\n+            + studyId\n+            + \"_\"\n+            + consentVersion\n+            + \"_\"\n+            + new SimpleDateFormat(\"MMddyyyyHHmmss\").format(new Date())\n+            + \".pdf\";\n+\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(userConsentManagementService.getParticipantStudies(studyInfoId, userId))\n+        .thenReturn(participantStudies);\n+    Mockito.when(\n+            userConsentManagementService.saveParticipantStudies(\n+                Collections.singletonList(participantStudies)))\n+        .thenReturn(\"SUCCESS\");\n+    Mockito.when(userConsentManagementService.getStudyConsent(userId, studyInfoId, consentVersion))\n+        .thenReturn(studyConsent);\n+    Mockito.when(userConsentManagementService.getUserDetailsId(userId)).thenReturn(userDetailsId);\n+    Mockito.when(userConsentManagementService.saveStudyConsent(studyConsent)).thenReturn(\"SUCCESS\");\n+    Mockito.when(cloudStorageService.saveFile(fileName, reqBean.getPdf(), underDirectory))\n+        .thenReturn(fileName + \"/\" + underDirectory);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.updateEligibilityConsentStatus(userId, bean, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ErrorBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\n+        ErrorCode.EC_200.code(), ((ErrorBean) responseEntity.getBody()).getCode().intValue());\n+  }\n+\n+  @Test\n+  public void testUpdateEligibilityConsentStatusVersionRequired() {\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    HttpServletResponse response = new MockHttpServletResponse();\n+    ConsentStatusBean bean = new ConsentStatusBean();\n+    bean.setStudyId(studyId);\n+    bean.setEligibility(Boolean.TRUE);\n+    bean.setSharing(\"true\");\n+    ConsentReqBean reqBean = new ConsentReqBean();\n+    reqBean.setVersion(\"\");\n+    reqBean.setPdf(Base64.getEncoder().encodeToString(\"content\".getBytes()));\n+    reqBean.setStatus(\"completed\");\n+    bean.setConsent(reqBean);\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+    ParticipantStudiesBO participantStudies = new ParticipantStudiesBO();\n+\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(userConsentManagementService.getParticipantStudies(studyInfoId, userId))\n+        .thenReturn(participantStudies);\n+    Mockito.when(\n+            userConsentManagementService.saveParticipantStudies(\n+                Collections.singletonList(participantStudies)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 225}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5ODEzNw==", "bodyText": "move to a variable since it's used in another location as well", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424698137", "createdAt": "2020-05-13T20:02:47Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks private UserConsentManagementController userConsentManagementController;\n+\n+  @Test\n+  public void testList() {\n+    // Sample Mockito unit test that uses mocked java.util.List //\n+\n+    list.add(\"X\");\n+\n+    Mockito.verify(list, times(1)).add(\"X\");\n+\n+    Mockito.when(list.size()).thenReturn(2);\n+    assertEquals(2, list.size());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDF() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    ConsentStudyResponseBean resp = new ConsentStudyResponseBean();\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(resp);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ConsentStudyResponseBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\"success\", ((ConsentStudyResponseBean) responseEntity.getBody()).getMessage());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFNoDataFound() throws IOException {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(null);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(null, responseEntity);\n+    assertEquals(400, response.getStatus());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFInvalidData() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+\n+    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n+    Mockito.verify(userConsentManagementService, never()).getStudyInfoId(studyId);\n+    Mockito.verify(userConsentManagementService, never())\n+        .getStudyConsentDetails(userId, studyInfoId, consentVersion);\n+  }\n+\n+  @Test\n+  public void testUpdateEligibilityConsentStatus() {\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+    Integer userDetailsId = 1;\n+\n+    HttpServletResponse response = new MockHttpServletResponse();\n+    ConsentStatusBean bean = new ConsentStatusBean();\n+    bean.setStudyId(studyId);\n+    bean.setEligibility(Boolean.TRUE);\n+    bean.setSharing(\"true\");\n+    ConsentReqBean reqBean = new ConsentReqBean();\n+    reqBean.setPdf(Base64.getEncoder().encodeToString(\"content\".getBytes()));\n+    reqBean.setVersion(\"1.0\");\n+    reqBean.setStatus(\"completed\");\n+    bean.setConsent(reqBean);\n+\n+    StudyConsentBO studyConsent = new StudyConsentBO();\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+    ParticipantStudiesBO participantStudies = new ParticipantStudiesBO();\n+    String underDirectory = userId + \"/\" + studyId;\n+    String fileName =\n+        userId\n+            + \"_\"\n+            + studyId\n+            + \"_\"\n+            + consentVersion\n+            + \"_\"\n+            + new SimpleDateFormat(\"MMddyyyyHHmmss\").format(new Date())\n+            + \".pdf\";\n+\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(userConsentManagementService.getParticipantStudies(studyInfoId, userId))\n+        .thenReturn(participantStudies);\n+    Mockito.when(\n+            userConsentManagementService.saveParticipantStudies(\n+                Collections.singletonList(participantStudies)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyMDQxOQ==", "bodyText": "use HttpStatus", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424720419", "createdAt": "2020-05-13T20:45:37Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks private UserConsentManagementController userConsentManagementController;\n+\n+  @Test\n+  public void testList() {\n+    // Sample Mockito unit test that uses mocked java.util.List //\n+\n+    list.add(\"X\");\n+\n+    Mockito.verify(list, times(1)).add(\"X\");\n+\n+    Mockito.when(list.size()).thenReturn(2);\n+    assertEquals(2, list.size());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDF() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    ConsentStudyResponseBean resp = new ConsentStudyResponseBean();\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(resp);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ConsentStudyResponseBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\"success\", ((ConsentStudyResponseBean) responseEntity.getBody()).getMessage());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFNoDataFound() throws IOException {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(null);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(null, responseEntity);\n+    assertEquals(400, response.getStatus());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFInvalidData() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+\n+    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n+    Mockito.verify(userConsentManagementService, never()).getStudyInfoId(studyId);\n+    Mockito.verify(userConsentManagementService, never())\n+        .getStudyConsentDetails(userId, studyInfoId, consentVersion);\n+  }\n+\n+  @Test\n+  public void testUpdateEligibilityConsentStatus() {\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+    Integer userDetailsId = 1;\n+\n+    HttpServletResponse response = new MockHttpServletResponse();\n+    ConsentStatusBean bean = new ConsentStatusBean();\n+    bean.setStudyId(studyId);\n+    bean.setEligibility(Boolean.TRUE);\n+    bean.setSharing(\"true\");\n+    ConsentReqBean reqBean = new ConsentReqBean();\n+    reqBean.setPdf(Base64.getEncoder().encodeToString(\"content\".getBytes()));\n+    reqBean.setVersion(\"1.0\");\n+    reqBean.setStatus(\"completed\");\n+    bean.setConsent(reqBean);\n+\n+    StudyConsentBO studyConsent = new StudyConsentBO();\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+    ParticipantStudiesBO participantStudies = new ParticipantStudiesBO();\n+    String underDirectory = userId + \"/\" + studyId;\n+    String fileName =\n+        userId\n+            + \"_\"\n+            + studyId\n+            + \"_\"\n+            + consentVersion\n+            + \"_\"\n+            + new SimpleDateFormat(\"MMddyyyyHHmmss\").format(new Date())\n+            + \".pdf\";\n+\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(userConsentManagementService.getParticipantStudies(studyInfoId, userId))\n+        .thenReturn(participantStudies);\n+    Mockito.when(\n+            userConsentManagementService.saveParticipantStudies(\n+                Collections.singletonList(participantStudies)))\n+        .thenReturn(\"SUCCESS\");\n+    Mockito.when(userConsentManagementService.getStudyConsent(userId, studyInfoId, consentVersion))\n+        .thenReturn(studyConsent);\n+    Mockito.when(userConsentManagementService.getUserDetailsId(userId)).thenReturn(userDetailsId);\n+    Mockito.when(userConsentManagementService.saveStudyConsent(studyConsent)).thenReturn(\"SUCCESS\");\n+    Mockito.when(cloudStorageService.saveFile(fileName, reqBean.getPdf(), underDirectory))\n+        .thenReturn(fileName + \"/\" + underDirectory);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.updateEligibilityConsentStatus(userId, bean, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ErrorBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\n+        ErrorCode.EC_200.code(), ((ErrorBean) responseEntity.getBody()).getCode().intValue());\n+  }\n+\n+  @Test\n+  public void testUpdateEligibilityConsentStatusVersionRequired() {\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    HttpServletResponse response = new MockHttpServletResponse();\n+    ConsentStatusBean bean = new ConsentStatusBean();\n+    bean.setStudyId(studyId);\n+    bean.setEligibility(Boolean.TRUE);\n+    bean.setSharing(\"true\");\n+    ConsentReqBean reqBean = new ConsentReqBean();\n+    reqBean.setVersion(\"\");\n+    reqBean.setPdf(Base64.getEncoder().encodeToString(\"content\".getBytes()));\n+    reqBean.setStatus(\"completed\");\n+    bean.setConsent(reqBean);\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+    ParticipantStudiesBO participantStudies = new ParticipantStudiesBO();\n+\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(userConsentManagementService.getParticipantStudies(studyInfoId, userId))\n+        .thenReturn(participantStudies);\n+    Mockito.when(\n+            userConsentManagementService.saveParticipantStudies(\n+                Collections.singletonList(participantStudies)))\n+        .thenReturn(\"SUCCESS\");\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.updateEligibilityConsentStatus(userId, bean, response);\n+\n+    assertEquals(null, responseEntity);\n+    assertEquals(400, response.getStatus());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyMTY0OQ==", "bodyText": "where is this file used?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424721649", "createdAt": "2020-05-13T20:47:53Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/test/resources/mappings/auth-server-token-validation.json", "diffHunk": "@@ -0,0 +1,10 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyNTM0Mw==", "bodyText": "please reformat the file, use 2 spaces for indentations instead of tabs.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424725343", "createdAt": "2020-05-13T20:55:09Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/test/resources/log4j2.xml", "diffHunk": "@@ -0,0 +1,35 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyNTY1NQ==", "bodyText": "nit: remove multiple blank lines", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424725655", "createdAt": "2020-05-13T20:55:43Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/test/resources/log4j2.xml", "diffHunk": "@@ -0,0 +1,35 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<Configuration status=\"WARN\" monitorInterval=\"30\">\n+\t<Properties>\n+\t\t<Property name=\"LOG_PATTERN\">%d{yyyy-MM-dd'T'HH:mm:ss.SSSZ} %p %m%n\n+\t\t</Property>\n+\t\t<Property name=\"APP_LOG_ROOT\">logs</Property>\n+\t</Properties>\n+\t<Appenders>\n+\t\t<Console name=\"Console\" target=\"SYSTEM_OUT\" follow=\"true\">\n+\t\t\t<PatternLayout pattern=\"${LOG_PATTERN}\" />\n+\t\t</Console>\n+\n+\t\t<RollingFile name=\"appLog\"\n+\t\t\tfileName=\"consent-management-server.log\"\n+\t\t\tfilePattern=\"consent-management-server-%d{yyyy-MM-dd}-%i.log\">\n+\t\t\t<PatternLayout pattern=\"${LOG_PATTERN}\" />\n+\t\t\t<Policies>\n+\t\t\t\t<SizeBasedTriggeringPolicy size=\"1MB\" />\n+\t\t\t</Policies>\n+\t\t\t<DefaultRolloverStrategy max=\"1\" />\n+\t\t</RollingFile>\n+\t</Appenders>\n+\t<Loggers>\n+\n+\t\t<Logger name=\"com.fda-mystudies-consent-management-server\" level=\"info\"\n+\t\t\tadditivity=\"false\">\n+\t\t\t<AppenderRef ref=\"appLog\" />\n+\t\t</Logger>\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyNzM1OA==", "bodyText": "nit: remove extra blank lines", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424727358", "createdAt": "2020-05-13T20:59:00Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/consent-mgmt/src/test/resources/data.sql", "diffHunk": "@@ -0,0 +1,37 @@\n+\n+INSERT INTO `org_info` (`id`, `name`, `org_id`, `created_on`, `created_by`, `modified_by`, `modified_date`) VALUES\n+\t(1, 'organizations name', 1, '2020-03-03 15:35:27', 0, 0, '2020-03-12 15:25:14');\n+\n+INSERT INTO `app_info` (`app_info_id`, `custom_app_id`, `org_info_id`, `created_on`, `android_bundle_id`, `app_name`, `created_by`, `modified_by`, `android_server_key`, `app_description`, `ios_certificate`, `ios_bundle_id`, `ios_certificate_password`, `from_email_id`, `from_email_password`, `forgot_email_body`, `forgot_email_sub`, `reg_email_body`, `reg_email_sub`, `method_handler`, `modified_date`) VALUES\n+\t(1, 'app-id-cust', 1, '2020-01-16 15:22:22', NULL, 'app-name-1', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '2020-03-12 15:17:56');\n+\t\n+\n+\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1c824e7cd9cd87a4e09b79093a170c5c6c99f0e", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/b1c824e7cd9cd87a4e09b79093a170c5c6c99f0e", "committedDate": "2020-05-14T10:27:46Z", "message": "code commit to resolve build check failed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExODIxODIx", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#pullrequestreview-411821821", "createdAt": "2020-05-14T13:48:11Z", "commit": {"oid": "b1c824e7cd9cd87a4e09b79093a170c5c6c99f0e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMzo0ODoxMVrOGVdIcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMzo1MzoxN1rOGVdXOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE1MDU3OQ==", "bodyText": "This doesn't seem related to this change.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r425150579", "createdAt": "2020-05-14T13:48:11Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/model/SiteBo.java", "diffHunk": "@@ -60,7 +60,7 @@\n \n   @Column(\n       name = \"modified_date\",\n-      columnDefinition = \"TIMESTAMP CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\")\n+      columnDefinition = \"TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1c824e7cd9cd87a4e09b79093a170c5c6c99f0e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE1MTE0MQ==", "bodyText": "Please remove", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r425151141", "createdAt": "2020-05-14T13:48:55Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/main/resources/application.properties", "diffHunk": "@@ -30,3 +30,22 @@ spring.http.encoding.charset=UTF-8\n \n spring.jmx.enabled = false\n \n+interceptor=/ping,/myStudiesConsentMgmtWS/testPDFUpload,/myStudiesConsentMgmtWS/testPDFDownload\n+\n+#Pdf Uploaded File Path\n+consentPdfUploadPath=/webapps/consentDucmentPdfFiles\n+\n+#Auth Server Dev\n+#authServerAccessTokenValidationUrl= http://localhost:8090/AuthServer/authServer/tokenAuthentication", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1c824e7cd9cd87a4e09b79093a170c5c6c99f0e"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE1MjgyNQ==", "bodyText": "nit: remove excess whitespace", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r425152825", "createdAt": "2020-05-14T13:51:09Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/resources/application-mockit.properties", "diffHunk": "@@ -28,3 +28,21 @@ spring.http.encoding.charset=UTF-8\n \n spring.jmx.enabled = false\n \n+interceptor=/ping,/myStudiesConsentMgmtWS/testPDFUpload,/myStudiesConsentMgmtWS/testPDFDownload\n+\n+#Pdf Uploaded File Path\n+consentPdfUploadPath=/webapps/consentDucmentPdfFiles\n+\n+#Auth Server QA \n+authServerAccessTokenValidationUrl=http://localhost:8001/AuthServer/tokenAuthentication\n+\n+clientId=mockit-client\n+secretKey=mockit-secret\n+\n+#cloud storage bucket name\n+bucketName=mockit-bucket\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1c824e7cd9cd87a4e09b79093a170c5c6c99f0e"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE1NDM2Mw==", "bodyText": "The indentation was correct before. Please fix your IDE settings, your code often has formatting issues.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r425154363", "createdAt": "2020-05-14T13:53:17Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/CommonServiceImplTests.java", "diffHunk": "@@ -23,67 +25,52 @@\n @RunWith(MockitoJUnitRunner.class)\n public class CommonServiceImplTests {\n \n-  @Mock private RestTemplate restTemplate;\n+\t@Mock\n+\tprivate RestTemplate restTemplate;\n \n-  @Mock private ApplicationPropertyConfiguration appConfig;\n+\t@Mock\n+\tprivate ApplicationPropertyConfiguration appConfig;\n \n-  @Mock private CommonDao commonDao;\n+\t@Mock\n+\tprivate CommonDao commonDao;\n \n-  @InjectMocks private CommonServiceImpl commonServiceImpl;\n+\t@InjectMocks\n+\tprivate CommonServiceImpl commonServiceImpl;\n \n-  @Test\n-  public void testGetUserDetailsId() {\n-    String userId = \"kJSdYD2e\";\n-    Integer userDetailsId = 2;\n-    Mockito.when(commonDao.getUserDetailsId(userId)).thenReturn(userDetailsId);\n-    Integer result = commonServiceImpl.getUserDetailsId(userId);\n-    assertEquals(userDetailsId, result);\n-  }\n+\t@Test\n+\tpublic void testGetUserDetailsId() {\n+\t\tString userId = \"kJSdYD2e\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1c824e7cd9cd87a4e09b79093a170c5c6c99f0e"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExOTM5MzQ5", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#pullrequestreview-411939349", "createdAt": "2020-05-14T15:46:34Z", "commit": {"oid": "b1c824e7cd9cd87a4e09b79093a170c5c6c99f0e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNTo0NjozNFrOGVinUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNTo0NjozNFrOGVinUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI0MDQwMg==", "bodyText": "Why is this test ignored?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r425240402", "createdAt": "2020-05-14T15:46:34Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/CommonServiceImplTests.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.google.cloud.healthcare.fdamystudies.service.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import org.hibernate.HibernateException;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.client.RestClientException;\n+import org.springframework.web.client.RestTemplate;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.dao.CommonDao;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonServiceImpl;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class CommonServiceImplTests {\n+\n+\t@Mock\n+\tprivate RestTemplate restTemplate;\n+\n+\t@Mock\n+\tprivate ApplicationPropertyConfiguration appConfig;\n+\n+\t@Mock\n+\tprivate CommonDao commonDao;\n+\n+\t@InjectMocks\n+\tprivate CommonServiceImpl commonServiceImpl;\n+\n+\t@Test\n+\tpublic void testGetUserDetailsId() {\n+\t\tString userId = \"kJSdYD2e\";\n+\t\tInteger userDetailsId = 2;\n+\t\tMockito.when(commonDao.getUserDetailsId(userId)).thenReturn(userDetailsId);\n+\t\tInteger result = commonServiceImpl.getUserDetailsId(userId);\n+\t\tassertEquals(userDetailsId, result);\n+\t}\n+\n+\t@Test\n+\tpublic void testGetUserDetailsIdExceptionCase() {\n+\t\tString userId = \"kJSdYD2e\";\n+\t\tInteger result=null;\n+\t\tMockito.when(commonDao.getUserDetailsId(userId)).thenThrow(new HibernateException(\"Some hibernate exception\"));\n+\t\ttry{\n+\t\t\t result = commonServiceImpl.getUserDetailsId(userId);\n+\t\t}catch (HibernateException expected) {\n+\t\t}\n+\t\tassertNull(result);\n+\t}\n+\n+\t@Test\n+\t@Ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1c824e7cd9cd87a4e09b79093a170c5c6c99f0e"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fa501080ea1cd292220d2469cd49684ac317c0a", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/9fa501080ea1cd292220d2469cd49684ac317c0a", "committedDate": "2020-05-20T09:23:13Z", "message": "code commit for PR #390 comment issue fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32433d2c7af7885f180948ae56577f0796ed342f", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/32433d2c7af7885f180948ae56577f0796ed342f", "committedDate": "2020-05-20T14:09:35Z", "message": "PR build failed issue fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1MzMwODE5", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#pullrequestreview-415330819", "createdAt": "2020-05-20T13:26:04Z", "commit": {"oid": "9fa501080ea1cd292220d2469cd49684ac317c0a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMzoyNjowNFrOGYLifA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDozMTowMFrOGYOubw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAwODA2MA==", "bodyText": "FIELD_SHARING is still unused.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428008060", "createdAt": "2020-05-20T13:26:04Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/Constants.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.google.cloud.healthcare.fdamystudies.testutils;\n+\n+public class Constants {\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+  public static final String VERSION_BAD =\n+      \"very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-\";\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+  public static final String ACCESS_TOKEN_VALUE = \"access Token value\";\n+  public static final String CLIENT_TOKEN_VALUE = \"client token value\";\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String CONTENT_TYPE_HEADER = \"Content-Type\";\n+  public static final String ACCEPT_HEADER = \"Accept\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fa501080ea1cd292220d2469cd49684ac317c0a"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAwODU1Mg==", "bodyText": "Why is this \"bad\". Please add a comment and use a more descriptive name.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428008552", "createdAt": "2020-05-20T13:26:44Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/Constants.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.google.cloud.healthcare.fdamystudies.testutils;\n+\n+public class Constants {\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+  public static final String VERSION_BAD =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fa501080ea1cd292220d2469cd49684ac317c0a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAwOTQxNQ==", "bodyText": "Remove ACCEPT_HEADER and CONTENT_TYPE header and use the Spring HttpHeaders class instead.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428009415", "createdAt": "2020-05-20T13:27:51Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/Constants.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.google.cloud.healthcare.fdamystudies.testutils;\n+\n+public class Constants {\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+  public static final String VERSION_BAD =\n+      \"very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-\";\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+  public static final String ACCESS_TOKEN_VALUE = \"access Token value\";\n+  public static final String CLIENT_TOKEN_VALUE = \"client token value\";\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String CONTENT_TYPE_HEADER = \"Content-Type\";\n+  public static final String ACCEPT_HEADER = \"Accept\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fa501080ea1cd292220d2469cd49684ac317c0a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAxMTIzOQ==", "bodyText": "typo: rerun should be return", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428011239", "createdAt": "2020-05-20T13:30:10Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/MockUtils.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.google.cloud.healthcare.fdamystudies.testutils;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.when;\n+import java.io.OutputStream;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.storage.StorageException;\n+\n+public class MockUtils {\n+\n+  private MockUtils() {}\n+\n+  public static void setCloudStorageSaveFileExpectations(\n+      final FileStorageService cloudStorageService) {\n+    when(cloudStorageService.saveFile(anyString(), anyString(), anyString()))\n+        .thenAnswer(\n+            (invocation) -> {\n+              String fileName = invocation.getArgument(0);\n+              String underDirectory = invocation.getArgument(2);\n+              return underDirectory + \"/\" + fileName;\n+            });\n+  }\n+\n+  public static void setCloudStorageDownloadExpectations(\n+      final FileStorageService cloudStorageSerice, final String content) {\n+    doAnswer(\n+            (invocation) -> {\n+              OutputStream os = invocation.getArgument(1);\n+              // This is expected to rerun the actual decoded value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fa501080ea1cd292220d2469cd49684ac317c0a"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAxMTUxMg==", "bodyText": "typo: cloudStorageService", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428011512", "createdAt": "2020-05-20T13:30:32Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/MockUtils.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.google.cloud.healthcare.fdamystudies.testutils;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.when;\n+import java.io.OutputStream;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.storage.StorageException;\n+\n+public class MockUtils {\n+\n+  private MockUtils() {}\n+\n+  public static void setCloudStorageSaveFileExpectations(\n+      final FileStorageService cloudStorageService) {\n+    when(cloudStorageService.saveFile(anyString(), anyString(), anyString()))\n+        .thenAnswer(\n+            (invocation) -> {\n+              String fileName = invocation.getArgument(0);\n+              String underDirectory = invocation.getArgument(2);\n+              return underDirectory + \"/\" + fileName;\n+            });\n+  }\n+\n+  public static void setCloudStorageDownloadExpectations(\n+      final FileStorageService cloudStorageSerice, final String content) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fa501080ea1cd292220d2469cd49684ac317c0a"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAxMjg5OA==", "bodyText": "Use NoArgs annotation for consistency.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428012898", "createdAt": "2020-05-20T13:32:23Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/bean/ConsentStudyResponseBean.java", "diffHunk": "@@ -7,18 +7,26 @@\n  */\n package com.google.cloud.healthcare.fdamystudies.bean;\n \n+import lombok.EqualsAndHashCode;\n import lombok.Getter;\n import lombok.Setter;\n import lombok.ToString;\n \n @Setter\n @Getter\n @ToString\n+@EqualsAndHashCode\n public class ConsentStudyResponseBean {\n   private String message;\n   private ConsentResponseBean consent = new ConsentResponseBean();\n   private String sharing;\n \n+  public ConsentStudyResponseBean() {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fa501080ea1cd292220d2469cd49684ac317c0a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAxNDg1Mg==", "bodyText": "Don't catch exception", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428014852", "createdAt": "2020-05-20T13:34:56Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/utils/MyStudiesUserRegUtil.java", "diffHunk": "@@ -152,6 +151,17 @@ public static Date getCurrentUtilDateTime() {\n     return date;\n   }\n \n+  public static LocalDateTime getCurrentDateTime() {\n+    logger.info(\"INFO: MyStudiesUserRegUtil - getCurrentDateTime() :: starts\");\n+    try {\n+      return LocalDateTime.now(ZoneId.of(AppConstants.SERVER_TIMEZONE));\n+    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fa501080ea1cd292220d2469cd49684ac317c0a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0MTAyMw==", "bodyText": "I think these tests would be cleaner and easier to read with the MockMvcController. I was just looking for articles about this and this one https://reflectoring.io/spring-boot-web-controller-test/ provides a lot of helpful information for writing tests that are easy to read and verify.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428041023", "createdAt": "2020-05-20T14:07:06Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -2,84 +2,43 @@\n \n import static org.junit.Assert.assertEquals;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fa501080ea1cd292220d2469cd49684ac317c0a"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA1MTExNw==", "bodyText": "It doesn't seem like this file is necessary given that we are testing all the APIs with the \"IntegrationTest\" file.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428051117", "createdAt": "2020-05-20T14:19:28Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,280 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32433d2c7af7885f180948ae56577f0796ed342f"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA1NDkzMQ==", "bodyText": "Use the constructor instead", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428054931", "createdAt": "2020-05-20T14:24:04Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java", "diffHunk": "@@ -0,0 +1,261 @@\n+package com.google.cloud.healthcare.fdamystudies.service.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.mockito.Mockito.when;\n+import java.util.Base64;\n+import java.util.LinkedList;\n+import java.util.List;\n+import org.hibernate.HibernateException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.dao.UserConsentManagementDao;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyInfoBO;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+import com.google.cloud.healthcare.fdamystudies.testutils.MockUtils;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementServiceTests {\n+\n+  @Mock private UserConsentManagementDao userConsentManagementDao;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @InjectMocks private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @Test\n+  public void testGetParticipantStudies() {\n+\n+    Integer studyId = 1;\n+    String userId = \"userId\";\n+    ParticipantStudiesBO bo = new ParticipantStudiesBO();\n+\n+    StudyInfoBO sBO = new StudyInfoBO();\n+    sBO.setId(studyId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32433d2c7af7885f180948ae56577f0796ed342f"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA1ODU5MQ==", "bodyText": "Use constants.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428058591", "createdAt": "2020-05-20T14:28:46Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java", "diffHunk": "@@ -0,0 +1,261 @@\n+package com.google.cloud.healthcare.fdamystudies.service.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.mockito.Mockito.when;\n+import java.util.Base64;\n+import java.util.LinkedList;\n+import java.util.List;\n+import org.hibernate.HibernateException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.dao.UserConsentManagementDao;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyInfoBO;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+import com.google.cloud.healthcare.fdamystudies.testutils.MockUtils;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementServiceTests {\n+\n+  @Mock private UserConsentManagementDao userConsentManagementDao;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @InjectMocks private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @Test\n+  public void testGetParticipantStudies() {\n+\n+    Integer studyId = 1;\n+    String userId = \"userId\";\n+    ParticipantStudiesBO bo = new ParticipantStudiesBO();\n+\n+    StudyInfoBO sBO = new StudyInfoBO();\n+    sBO.setId(studyId);\n+    bo.setStudyInfo(sBO);\n+    UserDetailsBO uBO = new UserDetailsBO();\n+    uBO.setUserId(userId);\n+    bo.setUserDetails(uBO);\n+\n+    when(userConsentManagementDao.getParticipantStudies(studyId, userId)).thenReturn(bo);\n+    ParticipantStudiesBO result =\n+        userConsentManagementService.getParticipantStudies(studyId, userId);\n+\n+    assertEquals(bo, result);\n+  }\n+\n+  @Test\n+  public void testGetParticipantStudiesExceptionCase() {\n+    Integer studyId = 1;\n+    String userId = \"userId\";\n+    when(userConsentManagementDao.getParticipantStudies(studyId, userId))\n+        .thenThrow(HibernateException.class);\n+    ParticipantStudiesBO result =\n+        userConsentManagementService.getParticipantStudies(studyId, userId);\n+    assertNull(result);\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @Test\n+  public void testSaveParticipantStudies() {\n+    List<ParticipantStudiesBO> participantStudiesList = new LinkedList<>();\n+    ParticipantStudiesBO participantStudiesBO = new ParticipantStudiesBO();\n+    participantStudiesBO.setParticipantId(\"\");\n+    participantStudiesList.add(participantStudiesBO);\n+\n+    when(userConsentManagementDao.saveParticipantStudies(participantStudiesList))\n+        .thenReturn(\"SUCCESS\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32433d2c7af7885f180948ae56577f0796ed342f"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA2MDI3MQ==", "bodyText": "You never pass null into this function. Since it's a test helper remove this check from these methods.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428060271", "createdAt": "2020-05-20T14:31:00Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/TestUtils.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package com.google.cloud.healthcare.fdamystudies.testutils;\n+\n+import static org.junit.Assert.assertEquals;\n+import javax.ws.rs.core.MediaType;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+public class TestUtils {\n+\n+  public static void addUserIdHeader(HttpHeaders headers) {\n+    if (headers == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32433d2c7af7885f180948ae56577f0796ed342f"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NDY5NTQ2", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#pullrequestreview-415469546", "createdAt": "2020-05-20T15:42:05Z", "commit": {"oid": "32433d2c7af7885f180948ae56577f0796ed342f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTo0MjowNlrOGYSEsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTo0MjowNlrOGYSEsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODExNTEyMg==", "bodyText": "Use ObjectMapper to serialize the Request Bean instead of manually constructing the requests.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428115122", "createdAt": "2020-05-20T15:42:06Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,422 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import java.util.Base64;\n+import java.util.Collections;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+import com.google.cloud.healthcare.fdamystudies.testutils.Constants;\n+import com.google.cloud.healthcare.fdamystudies.testutils.MockUtils;\n+import com.google.cloud.healthcare.fdamystudies.testutils.TestUtils;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  @Test\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(getRestTemplate());\n+    assertNotNull(cloudStorageService);\n+    assertNotNull(userConsentManagementService);\n+  }\n+\n+  @Test\n+  public void ping() {\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    TestUtils.addTokenHeaders(headers);\n+\n+    ResponseEntity<String> response = getRestTemplate().getForEntity(\"/ping\", String.class);\n+    assertEquals(HttpStatus.OK, response.getStatusCode());\n+  }\n+\n+  @Test\n+  public void updateEligibilityConsentStatus() {\n+    HttpHeaders headers = new HttpHeaders();\n+    TestUtils.addTokenHeaders(headers);\n+    TestUtils.addUserIdHeader(headers);\n+\n+    // Invoke http api endpoint to save study consent first time\n+    // Set mockito expectations for saving file into cloudStorageService\n+\n+    MockUtils.setCloudStorageSaveFileExpectations(cloudStorageService);\n+\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(Constants.FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(Constants.FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(Constants.CONTENT_1_0.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32433d2c7af7885f180948ae56577f0796ed342f"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NDc1NDIw", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#pullrequestreview-415475420", "createdAt": "2020-05-20T15:48:29Z", "commit": {"oid": "32433d2c7af7885f180948ae56577f0796ed342f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTo0ODozMFrOGYSWjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTo0ODozMFrOGYSWjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODExOTY5NA==", "bodyText": "Prefer @Data to combine a bunch of these properties, or @Value if we don't need setters.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428119694", "createdAt": "2020-05-20T15:48:30Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/bean/ConsentReqBean.java", "diffHunk": "@@ -7,13 +7,17 @@\n  */\n package com.google.cloud.healthcare.fdamystudies.bean;\n \n+import lombok.AllArgsConstructor;\n import lombok.Getter;\n+import lombok.NoArgsConstructor;\n import lombok.Setter;\n import lombok.ToString;\n \n @Setter\n @Getter\n @ToString\n+@NoArgsConstructor\n+@AllArgsConstructor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32433d2c7af7885f180948ae56577f0796ed342f"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e90f51e5592297595759ea5d3344ce39a598e3d4", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/e90f51e5592297595759ea5d3344ce39a598e3d4", "committedDate": "2020-05-21T14:14:50Z", "message": "PR comment issue fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2Mjk0NDYw", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#pullrequestreview-416294460", "createdAt": "2020-05-21T16:18:04Z", "commit": {"oid": "e90f51e5592297595759ea5d3344ce39a598e3d4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNjoxODowNVrOGY5hpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNjoxODowNVrOGY5hpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc2MTUxMQ==", "bodyText": "This is coming from MyStudiesUserRegUtil.ErrorCodes.SUCCESS. Use that value directly in your test.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428761511", "createdAt": "2020-05-21T16:18:05Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/Constants.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.google.cloud.healthcare.fdamystudies.testutils;\n+\n+public class Constants {\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  // A very long version to cause db exception while saving study_consent\n+  public static final String VERSION_VERY_LONG =\n+      \"very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-\";\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+  public static final String ACCESS_TOKEN_VALUE = \"access Token value\";\n+  public static final String CLIENT_TOKEN_VALUE = \"client token value\";\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String SUCCESS_MESSAGE = \"SUCCESS\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e90f51e5592297595759ea5d3344ce39a598e3d4"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55964c60f20b8d88a571fb38628558d08a724202", "author": {"user": {"login": "abhijeetn-btc", "name": "Abhijeet Narayan"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/55964c60f20b8d88a571fb38628558d08a724202", "committedDate": "2020-05-22T05:46:54Z", "message": "Updated .gitignore\n\ntarget, log and settings has been added to gitignore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d885ece327a37231e458698ddf79d03f8a7fac3", "author": {"user": {"login": "abhijeetn-btc", "name": "Abhijeet Narayan"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/5d885ece327a37231e458698ddf79d03f8a7fac3", "committedDate": "2020-05-22T07:30:04Z", "message": "Removed as per comments in PR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b448e8924e0c311b281dd4aa81816c7d6b281e8", "author": {"user": {"login": "abhijeetn-btc", "name": "Abhijeet Narayan"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/0b448e8924e0c311b281dd4aa81816c7d6b281e8", "committedDate": "2020-05-22T10:59:09Z", "message": "Changes for review comments\n\nUsing json string ineast of ObjectNode or JsonNode\nChanges in use of constants"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NzAzMjgx", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#pullrequestreview-417703281", "createdAt": "2020-05-25T13:15:08Z", "commit": {"oid": "0b448e8924e0c311b281dd4aa81816c7d6b281e8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzoxNTowOFrOGaAxmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzoyMDo0MFrOGaA7ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkyODg1Ng==", "bodyText": "WCP-WS is still ignored and should not be.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r429928856", "createdAt": "2020-05-25T13:15:08Z", "author": {"login": "nikklassen"}, "path": ".gitignore", "diffHunk": "@@ -1,3 +1,14 @@\n **/.terraform\n *.tfstate\n *.tfstate.*\n+WCP-WS/target/\n+WCP-WS/", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3MTM2OQ=="}, "originalCommit": {"oid": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzMTM2NA==", "bodyText": "I don't see any change.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r429931364", "createdAt": "2020-05-25T13:20:40Z", "author": {"login": "nikklassen"}, "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.google.cloud.healthcare.fdamystudies.service.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import java.util.LinkedList;\n+import java.util.List;\n+import org.hibernate.HibernateException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.dao.UserConsentManagementDao;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyInfoBO;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementServiceTests {\n+\n+  @Mock private UserConsentManagementDao userConsentManagementDao;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @InjectMocks private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @Test\n+  public void testGetParticipantStudies() {\n+\n+    Integer studyId = Integer.valueOf(1);\n+    String userId = \"sdjUyd\";\n+    ParticipantStudiesBO bo = new ParticipantStudiesBO();\n+\n+    StudyInfoBO sBO = new StudyInfoBO();\n+    sBO.setId(studyId);\n+    bo.setStudyInfo(sBO);\n+    UserDetailsBO uBO = new UserDetailsBO();\n+    uBO.setUserId(userId);\n+    bo.setUserDetails(uBO);\n+\n+    Mockito.when(userConsentManagementDao.getParticipantStudies(studyId, userId)).thenReturn(bo);\n+    ParticipantStudiesBO result =\n+        userConsentManagementService.getParticipantStudies(studyId, userId);\n+\n+    ArgumentCaptor<Integer> studyIdPassed = ArgumentCaptor.forClass(Integer.class);\n+    ArgumentCaptor<String> userIdPassed = ArgumentCaptor.forClass(String.class);\n+    Mockito.verify(userConsentManagementDao)\n+        .getParticipantStudies(studyIdPassed.capture(), userIdPassed.capture());\n+    assertEquals(studyId, studyIdPassed.getValue());\n+    assertEquals(userId, userIdPassed.getValue());\n+    assertEquals(bo, result);\n+    assertEquals(bo.getStudyInfo().getId(), result.getStudyInfo().getId());\n+    assertEquals(bo.getUserDetails().getUserId(), result.getUserDetails().getUserId());\n+  }\n+\n+  @Test\n+  public void testGetParticipantStudiesExceptionCase() {\n+    Integer studyId = Integer.valueOf(1);\n+    String userId = \"sdjUyd\";\n+    Mockito.when(userConsentManagementDao.getParticipantStudies(studyId, userId))\n+        .thenThrow(HibernateException.class);\n+    ParticipantStudiesBO result =\n+        userConsentManagementService.getParticipantStudies(studyId, userId);\n+    assertNull(result);\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @Test\n+  public void testSaveParticipantStudies() {\n+    List<ParticipantStudiesBO> participantStudiesList = new LinkedList<>();\n+    ParticipantStudiesBO participantStudiesBO = new ParticipantStudiesBO();\n+    participantStudiesBO.setParticipantId(\"\");\n+    participantStudiesList.add(participantStudiesBO);\n+\n+    ArgumentCaptor<List<ParticipantStudiesBO>> participantStudiesBOListPassed =\n+        ArgumentCaptor.forClass(List.class);\n+    ;\n+    Mockito.when(userConsentManagementDao.saveParticipantStudies(participantStudiesList))\n+        .thenReturn(\"SUCCESS\");\n+    String result = userConsentManagementService.saveParticipantStudies(participantStudiesList);\n+    Mockito.verify(userConsentManagementDao)\n+        .saveParticipantStudies(participantStudiesBOListPassed.capture());\n+\n+    assertNotNull(participantStudiesBOListPassed.getValue());\n+    assertEquals(1, participantStudiesBOListPassed.getValue().size());\n+    assertEquals(participantStudiesBO, participantStudiesBOListPassed.getValue().get(0));\n+    assertEquals(\"SUCCESS\", result);\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @Test\n+  public void testSaveParticipantStudiesExceptionCase() {\n+    List<ParticipantStudiesBO> participantStudiesList = new LinkedList<>();\n+    ParticipantStudiesBO participantStudiesBO = new ParticipantStudiesBO();\n+    participantStudiesBO.setParticipantId(\"\");\n+    participantStudiesList.add(participantStudiesBO);\n+\n+    ArgumentCaptor<List<ParticipantStudiesBO>> participantStudiesBOListPassed =\n+        ArgumentCaptor.forClass(List.class);\n+    Mockito.when(userConsentManagementDao.saveParticipantStudies(participantStudiesList))\n+        .thenThrow(HibernateException.class);\n+    String result = userConsentManagementService.saveParticipantStudies(participantStudiesList);\n+    Mockito.verify(userConsentManagementDao)\n+        .saveParticipantStudies(participantStudiesBOListPassed.capture());\n+\n+    assertNotNull(participantStudiesBOListPassed.getValue());\n+    assertEquals(1, participantStudiesBOListPassed.getValue().size());\n+    assertEquals(participantStudiesBO, participantStudiesBOListPassed.getValue().get(0));\n+    assertEquals(\"FAILURE\", result);\n+  }\n+\n+  @Test\n+  public void testGetStudyConsent() {\n+    String userId = \"hdUydjsII\";\n+    Integer studyId = Integer.valueOf(2);\n+    String consentVersion = \"1.0\";\n+\n+    StudyConsentBO bo = new StudyConsentBO();\n+    bo.setStudyInfoId(studyId);\n+    ArgumentCaptor<String> userIdPassed = ArgumentCaptor.forClass(String.class);\n+    ArgumentCaptor<Integer> studyIdPassed = ArgumentCaptor.forClass(Integer.class);\n+    ArgumentCaptor<String> consentVersionPassed = ArgumentCaptor.forClass(String.class);\n+\n+    Mockito.when(userConsentManagementDao.getStudyConsent(userId, studyId, consentVersion))\n+        .thenReturn(bo);\n+    StudyConsentBO result =\n+        userConsentManagementService.getStudyConsent(userId, studyId, consentVersion);\n+    Mockito.verify(userConsentManagementDao)\n+        .getStudyConsent(\n+            userIdPassed.capture(), studyIdPassed.capture(), consentVersionPassed.capture());\n+    assertEquals(userId, userIdPassed.getValue());\n+    assertEquals(studyId, studyIdPassed.getValue());\n+    assertEquals(consentVersion, consentVersionPassed.getValue());\n+    assertEquals(studyId, result.getStudyInfoId());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentExceptionCase() {\n+    String userId = \"hdUydjsII\";\n+    Integer studyId = Integer.valueOf(2);\n+    String consentVersion = \"1.0\";\n+    ArgumentCaptor<String> userIdPassed = ArgumentCaptor.forClass(String.class);\n+    ArgumentCaptor<Integer> studyIdPassed = ArgumentCaptor.forClass(Integer.class);\n+    ArgumentCaptor<String> consentVersionPassed = ArgumentCaptor.forClass(String.class);\n+\n+    Mockito.when(userConsentManagementDao.getStudyConsent(userId, studyId, consentVersion))\n+        .thenThrow(HibernateException.class);\n+    StudyConsentBO result =\n+        userConsentManagementService.getStudyConsent(userId, studyId, consentVersion);\n+    Mockito.verify(userConsentManagementDao)\n+        .getStudyConsent(\n+            userIdPassed.capture(), studyIdPassed.capture(), consentVersionPassed.capture());\n+    assertEquals(userId, userIdPassed.getValue());\n+    assertEquals(studyId, studyIdPassed.getValue());\n+    assertEquals(consentVersion, consentVersionPassed.getValue());\n+    assertNull(result);\n+  }\n+\n+  @Test\n+  public void testSaveStudyConsent() {\n+    StudyConsentBO studyConsentBO = new StudyConsentBO();\n+    Mockito.when(userConsentManagementDao.saveStudyConsent(studyConsentBO)).thenReturn(\"SUCCESS\");\n+\n+    String result = userConsentManagementService.saveStudyConsent(studyConsentBO);\n+    assertEquals(\"SUCCESS\", result);\n+  }\n+\n+  @Test\n+  public void testSaveStudyConsentExceptionCase() {\n+    StudyConsentBO studyConsentBO = new StudyConsentBO();\n+    Mockito.when(userConsentManagementDao.saveStudyConsent(studyConsentBO))\n+        .thenThrow(HibernateException.class);\n+\n+    String result = userConsentManagementService.saveStudyConsent(studyConsentBO);\n+    assertEquals(\"FAILURE\", result);\n+  }\n+\n+  @Test\n+  public void testGetStudyInfoId() {\n+    String studyId = \"testStudyId\";\n+    StudyInfoBean bean = new StudyInfoBean();\n+    bean.setStudyInfoId(2);\n+\n+    Mockito.when(userConsentManagementDao.getStudyInfoId(studyId)).thenReturn(bean);\n+    ArgumentCaptor<String> studyIdPassed = ArgumentCaptor.forClass(String.class);\n+    StudyInfoBean result = userConsentManagementService.getStudyInfoId(studyId);\n+    Mockito.verify(userConsentManagementDao).getStudyInfoId(studyIdPassed.capture());\n+    assertEquals(studyId, studyIdPassed.getValue());\n+    assertEquals(bean.getStudyInfoId(), result.getStudyInfoId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5NTQ5OA=="}, "originalCommit": {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9"}, "originalPosition": 196}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c21fcca7936eaa47831573df1b8330755f98aa2c", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/c21fcca7936eaa47831573df1b8330755f98aa2c", "committedDate": "2020-05-26T10:45:06Z", "message": "PR #390 comment issue fix on 26/05/2020"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c82a4778396da7438b8d5b44e1a05cb18fd4cecf", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/c82a4778396da7438b8d5b44e1a05cb18fd4cecf", "committedDate": "2020-05-26T10:47:23Z", "message": "removed WCP-WS from gitignore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7da1ed66078e3c26c1aceea216b1e365f738a7a", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/a7da1ed66078e3c26c1aceea216b1e365f738a7a", "committedDate": "2020-05-26T10:52:36Z", "message": "resolved compile time issue by refactoring class name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ab7ca658c53a8a96135022698f3c7113f5f7da4", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/2ab7ca658c53a8a96135022698f3c7113f5f7da4", "committedDate": "2020-05-26T10:53:10Z", "message": "Merge branch 'early-access-consent-mgmt-unit-test-case' of https://github.com/GoogleCloudPlatform/fda-mystudies into early-access-consent-mgmt-unit-test-case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e6a8b56a310efe1ec77fb65bc41a0007b972f0d", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/3e6a8b56a310efe1ec77fb65bc41a0007b972f0d", "committedDate": "2020-05-26T10:57:40Z", "message": "Merge branch 'early-access' into early-access-consent-mgmt-unit-test-case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1aca9c9cf388947b46c0eb614842ced290a2960", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/e1aca9c9cf388947b46c0eb614842ced290a2960", "committedDate": "2020-05-26T11:35:25Z", "message": "removed unneccessary hardcoded value"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NDQ0NzUw", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#pullrequestreview-418444750", "createdAt": "2020-05-26T15:57:36Z", "commit": {"oid": "e1aca9c9cf388947b46c0eb614842ced290a2960"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5Mjc1MTU4", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#pullrequestreview-419275158", "createdAt": "2020-05-27T14:30:50Z", "commit": {"oid": "e1aca9c9cf388947b46c0eb614842ced290a2960"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1052, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}