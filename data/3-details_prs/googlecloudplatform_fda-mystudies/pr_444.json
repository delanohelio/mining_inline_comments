{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3ODc3NTc1", "number": 444, "title": "audit log service - initial commit", "bodyText": "audit log service - initial commit", "createdAt": "2020-06-04T14:28:10Z", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444", "merged": true, "mergeCommit": {"oid": "fdd236a3c11769da00c7b1df966e2646b7d667fa"}, "closed": true, "closedAt": "2020-06-16T07:18:18Z", "author": {"login": "dhanyak-btc"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcn-1u6AH2gAyNDI3ODc3NTc1OjUwNWVmMWYxMjk3ZjA5YmYxNDhmODk5OTFiODJhZmMyN2M3NzM1MjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcrv9rcAH2gAyNDI3ODc3NTc1OjFmOWQ1NjdjOTY2NjIyNzdmY2M2OTNmNzlkOTI1NGVmOWFlZmI1YjU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "505ef1f1297f09bf148f89991b82afc27c773522", "author": {"user": {"login": "dhanyak-btc", "name": "Dhanya Kumar KV"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/505ef1f1297f09bf148f89991b82afc27c773522", "committedDate": "2020-06-04T14:21:56Z", "message": "initial commit for central audit log service\n\ninitial commit for central audit log service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "754e186be1f1668728fc27ba085d29658f9db7a8", "author": {"user": {"login": "dhanyak-btc", "name": "Dhanya Kumar KV"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/754e186be1f1668728fc27ba085d29658f9db7a8", "committedDate": "2020-06-04T14:25:11Z", "message": "workflow config for audit log server\n\nworkflow config for audit log server"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3Mjk2NzIz", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#pullrequestreview-427296723", "createdAt": "2020-06-09T15:44:20Z", "commit": {"oid": "754e186be1f1668728fc27ba085d29658f9db7a8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTo0NDoyMVrOGhQ46Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxODowMDozMlrOGhWEqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzMjkwNQ==", "bodyText": "This shows up in every service. I'd really like to see a common module that the microservices can include to share this stuff.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r437532905", "createdAt": "2020-06-09T15:44:21Z", "author": {"login": "nikklassen"}, "path": "audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/ErrorMessages.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.common;\n+\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.ToString;\n+\n+@Getter\n+@ToString\n+@RequiredArgsConstructor\n+public enum ErrorMessages {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754e186be1f1668728fc27ba085d29658f9db7a8"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzNTA3OA==", "bodyText": "Some of these properties, like PATH, STATE, etc. don't have enough context to be useful. Other people reading this code aren't going to know what PATH is for. If they are being serialization just keep the field names in that class.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r437535078", "createdAt": "2020-06-09T15:47:16Z", "author": {"login": "nikklassen"}, "path": "audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/FieldNames.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.common;\n+\n+public final class FieldNames {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754e186be1f1668728fc27ba085d29658f9db7a8"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzNTY4Mg==", "bodyText": "This is usually \"dateTime\".", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r437535682", "createdAt": "2020-06-09T15:48:05Z", "author": {"login": "nikklassen"}, "path": "audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/ErrorResponse.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.common;\n+\n+import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.ERROR_DESCRIPTION;\n+import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.PATH;\n+import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.STATUS;\n+import java.time.Instant;\n+import org.springframework.web.client.RestClientResponseException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+public class ErrorResponse {\n+\n+  private String requestUri = null;\n+\n+  private RestClientResponseException restClientResponseException = null;\n+\n+  public ErrorResponse(String requestUri, RestClientResponseException restClientResponseException) {\n+    this.requestUri = requestUri;\n+    this.restClientResponseException = restClientResponseException;\n+  }\n+\n+  public JsonNode toJson() {\n+    ObjectMapper mapper = new ObjectMapper();\n+    ObjectNode errorResponse = mapper.createObjectNode();\n+    errorResponse.put(PATH, requestUri);\n+    errorResponse.put(\"datetime\", Instant.now().toEpochMilli());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754e186be1f1668728fc27ba085d29658f9db7a8"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzNzA1NA==", "bodyText": "I personally don't like entry/exit logging, but if you're going to do it then the XLogger extension for SLF4J would be much better.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r437537054", "createdAt": "2020-06-09T15:50:05Z", "author": {"login": "nikklassen"}, "path": "audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/controller/HealthController.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.controller;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+@RestController\n+@RequestMapping(\"/v1\")\n+public class HealthController extends BaseController {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(HealthController.class);\n+\n+  @GetMapping(\n+      value = \"/health\",\n+      produces = {MediaType.APPLICATION_JSON_VALUE})\n+  public ResponseEntity<JsonNode> health(HttpServletRequest request) {\n+    if (LOG.isInfoEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754e186be1f1668728fc27ba085d29658f9db7a8"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU0NDIwNA==", "bodyText": "Use generics instead of Object for request.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r437544204", "createdAt": "2020-06-09T15:59:35Z", "author": {"login": "nikklassen"}, "path": "audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/BaseServiceImpl.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.ERROR_CODE;\n+import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.ERROR_DESCRIPTION;\n+import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.ERROR_TYPE;\n+import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.STATUS;\n+import java.util.Collections;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.springframework.web.client.HttpServerErrorException;\n+import org.springframework.web.client.RestTemplate;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.common.ErrorMessages;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.common.ErrorResponse;\n+\n+abstract class BaseServiceImpl {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(BaseServiceImpl.class);\n+\n+  @Autowired private ObjectMapper objectMapper;\n+\n+  @Autowired private RestTemplate restTemplate;\n+\n+  public ResponseEntity<JsonNode> exchangeForJson(\n+      String url, HttpHeaders headers, Object request, HttpMethod httpMethod) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754e186be1f1668728fc27ba085d29658f9db7a8"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU0NDcxNA==", "bodyText": "Don't catch Exception. Add a @ControllerAdvice to handle expected exceptions.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r437544714", "createdAt": "2020-06-09T16:00:21Z", "author": {"login": "nikklassen"}, "path": "audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/BaseServiceImpl.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.ERROR_CODE;\n+import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.ERROR_DESCRIPTION;\n+import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.ERROR_TYPE;\n+import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.STATUS;\n+import java.util.Collections;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.springframework.web.client.HttpServerErrorException;\n+import org.springframework.web.client.RestTemplate;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.common.ErrorMessages;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.common.ErrorResponse;\n+\n+abstract class BaseServiceImpl {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(BaseServiceImpl.class);\n+\n+  @Autowired private ObjectMapper objectMapper;\n+\n+  @Autowired private RestTemplate restTemplate;\n+\n+  public ResponseEntity<JsonNode> exchangeForJson(\n+      String url, HttpHeaders headers, Object request, HttpMethod httpMethod) {\n+    headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n+    HttpEntity<Object> requestEntity = new HttpEntity<>(request, headers);\n+    try {\n+      return restTemplate.exchange(url, httpMethod, requestEntity, JsonNode.class);\n+    } catch (HttpClientErrorException | HttpServerErrorException e) {\n+      LOG.error(String.format(\"%s request failed with an exception\", url), e);\n+      ErrorResponse err = new ErrorResponse(url, e);\n+      return ResponseEntity.status(e.getRawStatusCode()).body(err.toJson());\n+    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754e186be1f1668728fc27ba085d29658f9db7a8"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU4MjE5Nw==", "bodyText": "It would be better to use a real type here instead of JsonNode.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r437582197", "createdAt": "2020-06-09T16:59:45Z", "author": {"login": "nikklassen"}, "path": "audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/OAuthService.java", "diffHunk": "@@ -0,0 +1,17 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.service;\n+\n+import org.springframework.http.ResponseEntity;\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+public interface OAuthService {\n+\n+  public ResponseEntity<JsonNode> health();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754e186be1f1668728fc27ba085d29658f9db7a8"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU4MjU5Ng==", "bodyText": "You are already adding this in BaseServiceImpl", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r437582596", "createdAt": "2020-06-09T17:00:23Z", "author": {"login": "nikklassen"}, "path": "audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/OAuthServiceImpl.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.service;\n+\n+import java.util.Collections;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Service;\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+@Service\n+class OAuthServiceImpl extends BaseServiceImpl implements OAuthService {\n+\n+  @Value(\"${security.oauth2.health_endpoint}\")\n+  private String healthEndpoint;\n+\n+  @Override\n+  public ResponseEntity<JsonNode> health() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754e186be1f1668728fc27ba085d29658f9db7a8"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU4MjkxOQ==", "bodyText": "Do this in BaseServiceImpl, we are using JSON for everything.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r437582919", "createdAt": "2020-06-09T17:00:55Z", "author": {"login": "nikklassen"}, "path": "audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/OAuthServiceImpl.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.service;\n+\n+import java.util.Collections;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Service;\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+@Service\n+class OAuthServiceImpl extends BaseServiceImpl implements OAuthService {\n+\n+  @Value(\"${security.oauth2.health_endpoint}\")\n+  private String healthEndpoint;\n+\n+  @Override\n+  public ResponseEntity<JsonNode> health() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n+    headers.setContentType(MediaType.APPLICATION_JSON);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754e186be1f1668728fc27ba085d29658f9db7a8"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU4MzQxNg==", "bodyText": "Better to create an overload for GET because it will never have a request", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r437583416", "createdAt": "2020-06-09T17:01:48Z", "author": {"login": "nikklassen"}, "path": "audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/OAuthServiceImpl.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.service;\n+\n+import java.util.Collections;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Service;\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+@Service\n+class OAuthServiceImpl extends BaseServiceImpl implements OAuthService {\n+\n+  @Value(\"${security.oauth2.health_endpoint}\")\n+  private String healthEndpoint;\n+\n+  @Override\n+  public ResponseEntity<JsonNode> health() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n+    headers.setContentType(MediaType.APPLICATION_JSON);\n+\n+    return exchangeForJson(healthEndpoint, headers, null, HttpMethod.GET);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754e186be1f1668728fc27ba085d29658f9db7a8"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5MTgwNQ==", "bodyText": "serialization should be implemented in the ErrorMessage class, see my example in this commit", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r437591805", "createdAt": "2020-06-09T17:16:07Z", "author": {"login": "nikklassen"}, "path": "audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/BaseServiceImpl.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.ERROR_CODE;\n+import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.ERROR_DESCRIPTION;\n+import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.ERROR_TYPE;\n+import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.STATUS;\n+import java.util.Collections;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.springframework.web.client.HttpServerErrorException;\n+import org.springframework.web.client.RestTemplate;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.common.ErrorMessages;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.common.ErrorResponse;\n+\n+abstract class BaseServiceImpl {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(BaseServiceImpl.class);\n+\n+  @Autowired private ObjectMapper objectMapper;\n+\n+  @Autowired private RestTemplate restTemplate;\n+\n+  public ResponseEntity<JsonNode> exchangeForJson(\n+      String url, HttpHeaders headers, Object request, HttpMethod httpMethod) {\n+    headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n+    HttpEntity<Object> requestEntity = new HttpEntity<>(request, headers);\n+    try {\n+      return restTemplate.exchange(url, httpMethod, requestEntity, JsonNode.class);\n+    } catch (HttpClientErrorException | HttpServerErrorException e) {\n+      LOG.error(String.format(\"%s request failed with an exception\", url), e);\n+      ErrorResponse err = new ErrorResponse(url, e);\n+      return ResponseEntity.status(e.getRawStatusCode()).body(err.toJson());\n+    } catch (Exception e) {\n+      LOG.error(String.format(\"%s request failed with an exception\", url), e);\n+      return ResponseEntity.status(ErrorMessages.APPLICATION_ERROR.getStatusCode())\n+          .body(getErrorResponse(ErrorMessages.APPLICATION_ERROR));\n+    }\n+  }\n+\n+  protected ObjectNode getObjectNode() {\n+    return objectMapper.createObjectNode();\n+  }\n+\n+  protected JsonNode getErrorResponse(ErrorMessages error) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754e186be1f1668728fc27ba085d29658f9db7a8"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5NDA0Nw==", "bodyText": "Should be something like ErrorCode, is not just a message.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r437594047", "createdAt": "2020-06-09T17:20:05Z", "author": {"login": "nikklassen"}, "path": "audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/ErrorMessages.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.common;\n+\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.ToString;\n+\n+@Getter\n+@ToString\n+@RequiredArgsConstructor\n+public enum ErrorMessages {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754e186be1f1668728fc27ba085d29658f9db7a8"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5NDQ0NA==", "bodyText": "Enums shouldn't be plural", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r437594444", "createdAt": "2020-06-09T17:20:42Z", "author": {"login": "nikklassen"}, "path": "audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/ApiEndpoints.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.common;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public enum ApiEndpoints {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754e186be1f1668728fc27ba085d29658f9db7a8"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5NjM4Ng==", "bodyText": "URLs with a different port should be a different URL", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r437596386", "createdAt": "2020-06-09T17:24:05Z", "author": {"login": "nikklassen"}, "path": "audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/ApiEndpoints.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.common;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public enum ApiEndpoints {\n+  HEALTH(\"http://localhost:8001/audit-log-service/v1/health\"),\n+\n+  EVENTS(\"http://localhost:8001/audit-log-service/v1/events\");\n+\n+  private String url;\n+\n+  private ApiEndpoints(String url) {\n+    this.url = url;\n+  }\n+\n+  public String getUrl(int port) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754e186be1f1668728fc27ba085d29658f9db7a8"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5NjY2MQ==", "bodyText": "This is another class that would be great to share across services.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r437596661", "createdAt": "2020-06-09T17:24:34Z", "author": {"login": "nikklassen"}, "path": "audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/BaseMockIT.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.common;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.ResultMatcher;\n+import com.github.tomakehurst.wiremock.WireMockServer;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.config.WireMockInitializer;\n+\n+@ContextConfiguration(initializers = {WireMockInitializer.class})\n+@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)\n+@AutoConfigureMockMvc\n+@ActiveProfiles(\"mockit\")\n+public class BaseMockIT {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754e186be1f1668728fc27ba085d29658f9db7a8"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5NzYyMA==", "bodyText": "Only wrap the revelant part of the code in the condition. i.e.\nrequest = get(path)\nif (!StringUtils.isEmpty(requestBody)) {\n    request = request.content(requestBody)\n}\n\nBut if we don't perform get requests with a body than this is unnecessary.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r437597620", "createdAt": "2020-06-09T17:26:08Z", "author": {"login": "nikklassen"}, "path": "audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/BaseMockIT.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.common;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.ResultMatcher;\n+import com.github.tomakehurst.wiremock.WireMockServer;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.config.WireMockInitializer;\n+\n+@ContextConfiguration(initializers = {WireMockInitializer.class})\n+@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)\n+@AutoConfigureMockMvc\n+@ActiveProfiles(\"mockit\")\n+public class BaseMockIT {\n+\n+  protected static final String VALID_BEARER_TOKEN = \"Bearer 7fd50c2c-d618-493c-89d6-f1887e3e4bb8\";\n+\n+  protected static final String INVALID_BEARER_TOKEN =\n+      \"Bearer cd57710c-1d19-4058-8bfe-a6aac3a39e35\";\n+\n+  protected static final ResultMatcher OK = status().isOk();\n+\n+  protected static final ResultMatcher BAD_REQUEST = status().isBadRequest();\n+\n+  protected static final ResultMatcher UNAUTHORIZED = status().isUnauthorized();\n+\n+  protected static final ResultMatcher CREATED = status().isCreated();\n+\n+  protected static final ResultMatcher NOT_FOUND = status().isNotFound();\n+\n+  @Autowired private WireMockServer wireMockServer;\n+\n+  @Autowired protected MockMvc mockMvc;\n+\n+  @Value(\"${server.servlet.contextPath}\")\n+  protected String contextPath;\n+\n+  protected WireMockServer getWireMockServer() {\n+    return wireMockServer;\n+  }\n+\n+  protected void performPost(\n+      String path,\n+      String requestBody,\n+      HttpHeaders headers,\n+      String expectedTextInResponseBody,\n+      ResultMatcher httpStatusMatcher)\n+      throws Exception {\n+    mockMvc\n+        .perform(post(path).contextPath(contextPath).content(requestBody).headers(headers))\n+        .andDo(print())\n+        .andExpect(httpStatusMatcher)\n+        .andExpect(content().string(containsString(expectedTextInResponseBody)));\n+  }\n+\n+  protected void performGet(\n+      String path,\n+      String requestBody,\n+      HttpHeaders headers,\n+      String expectedTextInResponseBody,\n+      ResultMatcher httpStatusMatcher)\n+      throws Exception {\n+\n+    if (StringUtils.isEmpty(requestBody)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754e186be1f1668728fc27ba085d29658f9db7a8"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYxNzgzMg==", "bodyText": "We don't need to add this to requests, we know the API produces JSON", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r437617832", "createdAt": "2020-06-09T18:00:32Z", "author": {"login": "nikklassen"}, "path": "audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/controller/HealthControllerTest.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.controller;\n+\n+import java.util.Collections;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.MediaType;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.common.ApiEndpoints;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.common.BaseMockIT;\n+\n+public class HealthControllerTest extends BaseMockIT {\n+\n+  @Test\n+  public void health() throws Exception {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754e186be1f1668728fc27ba085d29658f9db7a8"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3981c3f46bf7e8821d300134f8ce9d41c6e930d7", "author": {"user": {"login": "dhanyak-btc", "name": "Dhanya Kumar KV"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/3981c3f46bf7e8821d300134f8ce9d41c6e930d7", "committedDate": "2020-06-11T10:14:28Z", "message": "PR review comments fixed\n\nPR review comments fixed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf6fe3a98886dc7a0ace7fa2bafc9d890f42cc1c", "author": {"user": {"login": "dhanyak-btc", "name": "Dhanya Kumar KV"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/bf6fe3a98886dc7a0ace7fa2bafc9d890f42cc1c", "committedDate": "2020-06-11T10:32:33Z", "message": "Added dependent modules to run\n\nAdded dependent modules to run"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "422636263b540aeafbfc1370e0688b96ed028acd", "author": {"user": {"login": "dhanyak-btc", "name": "Dhanya Kumar KV"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/422636263b540aeafbfc1370e0688b96ed028acd", "committedDate": "2020-06-11T10:35:36Z", "message": "Fixed build issue\n\nFixed build issue - no such directory or file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce220e268b7a878a45159ef63a1cec57d3fab284", "author": {"user": {"login": "dhanyak-btc", "name": "Dhanya Kumar KV"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/ce220e268b7a878a45159ef63a1cec57d3fab284", "committedDate": "2020-06-11T10:38:23Z", "message": "Fixing build issues\n\nFixing build issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4OTE1NTU0", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#pullrequestreview-428915554", "createdAt": "2020-06-11T13:35:17Z", "commit": {"oid": "ce220e268b7a878a45159ef63a1cec57d3fab284"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzozNToxOFrOGidXOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzo1ODo0M1rOGieuEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc4NTg1MA==", "bodyText": "I believe you can add the common modules to here with <modules> so they will automatically get built when you build this service.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r438785850", "createdAt": "2020-06-11T13:35:18Z", "author": {"login": "nikklassen"}, "path": "audit-log-service/pom.xml", "diffHunk": "@@ -0,0 +1,187 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce220e268b7a878a45159ef63a1cec57d3fab284"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc5MTI2OA==", "bodyText": "This should also be a StdSerializer.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r438791268", "createdAt": "2020-06-11T13:41:06Z", "author": {"login": "nikklassen"}, "path": "common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/ErrorResponse.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.common;\n+\n+import java.time.Instant;\n+import org.springframework.web.client.RestClientResponseException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+public class ErrorResponse {\n+\n+  public static final String PATH = \"path\";\n+\n+  public static final String STATUS = \"status\";\n+\n+  public static final String ERROR_DESCRIPTION = \"error_description\";\n+\n+  private String requestUri;\n+\n+  private RestClientResponseException restClientResponseException;\n+\n+  public ErrorResponse(String requestUri, RestClientResponseException restClientResponseException) {\n+    this.requestUri = requestUri;\n+    this.restClientResponseException = restClientResponseException;\n+  }\n+\n+  public JsonNode toJson() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce220e268b7a878a45159ef63a1cec57d3fab284"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc5MjY0Nw==", "bodyText": "Shouldn't we always be logging errors?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r438792647", "createdAt": "2020-06-11T13:42:34Z", "author": {"login": "nikklassen"}, "path": "common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/RestExceptionHandler.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package com.google.cloud.healthcare.fdamystudies.common;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.ControllerAdvice;\n+import org.springframework.web.bind.annotation.ExceptionHandler;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.web.context.request.WebRequest;\n+import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+@ControllerAdvice\n+public class RestExceptionHandler extends ResponseEntityExceptionHandler {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(RestExceptionHandler.class);\n+\n+  private static final String REQUEST_FAILED_WITH_AN_EXCEPTION =\n+      \"%s request failed with an exception\";\n+\n+  @ExceptionHandler(Exception.class)\n+  public ResponseEntity<JsonNode> handleSystemException(Exception ex, WebRequest request) {\n+    HttpServletRequest httpRequest = ((ServletWebRequest) request).getRequest();\n+\n+    if (LOG.isErrorEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce220e268b7a878a45159ef63a1cec57d3fab284"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc5NDYwNA==", "bodyText": "What value does this serve? The client knows what request they made.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r438794604", "createdAt": "2020-06-11T13:44:30Z", "author": {"login": "nikklassen"}, "path": "common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/RestExceptionHandler.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package com.google.cloud.healthcare.fdamystudies.common;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.ControllerAdvice;\n+import org.springframework.web.bind.annotation.ExceptionHandler;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.web.context.request.WebRequest;\n+import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+@ControllerAdvice\n+public class RestExceptionHandler extends ResponseEntityExceptionHandler {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(RestExceptionHandler.class);\n+\n+  private static final String REQUEST_FAILED_WITH_AN_EXCEPTION =\n+      \"%s request failed with an exception\";\n+\n+  @ExceptionHandler(Exception.class)\n+  public ResponseEntity<JsonNode> handleSystemException(Exception ex, WebRequest request) {\n+    HttpServletRequest httpRequest = ((ServletWebRequest) request).getRequest();\n+\n+    if (LOG.isErrorEnabled()) {\n+      LOG.error(String.format(REQUEST_FAILED_WITH_AN_EXCEPTION, httpRequest.getRequestURI()), ex);\n+    }\n+\n+    ObjectNode response = (ObjectNode) ErrorCode.APPLICATION_ERROR.toJson();\n+    response.put(\"path\", httpRequest.getPathInfo());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce220e268b7a878a45159ef63a1cec57d3fab284"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgwNDQ0Mw==", "bodyText": "The whole point of the fluent/builder API is to be flexible. You are essentially undoing that by creating overloads for every possible way of making a request. I am fine with a couple \"abbreviations\", but if there is a one-off method that needs to use cookies they can just write the full request themselves. Also, you don't know what you are going to need yet, so only write helpers for things that exist.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r438804443", "createdAt": "2020-06-11T13:55:01Z", "author": {"login": "nikklassen"}, "path": "common-tests/src/main/java/com/google/cloud/healthcare/fdamystudies/common/BaseMockIT.java", "diffHunk": "@@ -0,0 +1,315 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.common;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.patch;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrl;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import java.util.Base64;\n+import java.util.Collections;\n+import javax.servlet.http.Cookie;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.test.web.servlet.ResultMatcher;\n+import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;\n+import org.springframework.util.MultiValueMap;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.github.tomakehurst.wiremock.WireMockServer;\n+import com.google.cloud.healthcare.fdamystudies.config.WireMockInitializer;\n+\n+@ContextConfiguration(initializers = {WireMockInitializer.class})\n+@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)\n+@AutoConfigureMockMvc\n+@ActiveProfiles(\"mockit\")\n+public class BaseMockIT {\n+\n+  protected static final String AUTHORIZATION = \"Authorization\";\n+\n+  public static final String CORRELATION_ID = \"correlation_id\";\n+\n+  protected static final String VALID_BEARER_TOKEN = \"Bearer 7fd50c2c-d618-493c-89d6-f1887e3e4bb8\";\n+\n+  protected static final String INVALID_BEARER_TOKEN =\n+      \"Bearer cd57710c-1d19-4058-8bfe-a6aac3a39e35\";\n+\n+  protected static final String VALID_CORRELATION_ID = \"8a56d20c-d755-4487-b80d-22d5fa383046\";\n+\n+  protected static final ResultMatcher OK = status().isOk();\n+\n+  protected static final ResultMatcher BAD_REQUEST = status().isBadRequest();\n+\n+  protected static final ResultMatcher UNAUTHORIZED = status().isUnauthorized();\n+\n+  protected static final ResultMatcher CREATED = status().isCreated();\n+\n+  protected static final ResultMatcher NOT_FOUND = status().isNotFound();\n+\n+  protected static final ResultMatcher UNSUPPORTED_MEDIATYPE = status().isUnsupportedMediaType();\n+\n+  protected static final ResultMatcher REDIRECTION = status().is3xxRedirection();\n+\n+  protected static final ResultMatcher CONFLICT = status().isConflict();\n+\n+  @Autowired private WireMockServer wireMockServer;\n+\n+  @LocalServerPort protected int randomServerPort;\n+\n+  @Autowired private ObjectMapper objectMapper;\n+\n+  @Autowired private MockMvc mockMvc;\n+\n+  @Value(\"${server.servlet.contextPath}\")\n+  private String contextPath;\n+\n+  protected WireMockServer getWireMockServer() {\n+    return wireMockServer;\n+  }\n+\n+  protected ObjectNode getObjectNode() {\n+    return objectMapper.createObjectNode();\n+  }\n+\n+  protected ObjectMapper getObjectMapper() {\n+    return objectMapper;\n+  }\n+\n+  protected String getEncodedAuthorization(String clientId, String clientSecret) {\n+    String credentials = clientId + \":\" + clientSecret;\n+    return Base64.getEncoder().encodeToString(credentials.getBytes());\n+  }\n+\n+  protected HttpHeaders getCommonHeaders() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n+    headers.setContentType(MediaType.APPLICATION_JSON);\n+    headers.add(AUTHORIZATION, VALID_BEARER_TOKEN);\n+    headers.add(CORRELATION_ID, VALID_CORRELATION_ID);\n+    return headers;\n+  }\n+\n+  protected MvcResult performPost(\n+      String path,\n+      String requestBody,\n+      HttpHeaders headers,\n+      String expectedTextInResponseBody,\n+      ResultMatcher httpStatusMatcher,\n+      Cookie... cookies)\n+      throws Exception {\n+\n+    MockHttpServletRequestBuilder reqBuilder =\n+        post(path).contextPath(contextPath).content(requestBody).headers(headers);\n+\n+    if (cookies.length > 0) {\n+      reqBuilder.cookie(cookies);\n+    }\n+\n+    return mockMvc\n+        .perform(reqBuilder)\n+        .andDo(print())\n+        .andExpect(httpStatusMatcher)\n+        .andExpect(content().string(containsString(expectedTextInResponseBody)))\n+        .andReturn();\n+  }\n+\n+  protected MvcResult performPost(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce220e268b7a878a45159ef63a1cec57d3fab284"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgwODA4MQ==", "bodyText": "This file is now unused. Please remove.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r438808081", "createdAt": "2020-06-11T13:58:43Z", "author": {"login": "nikklassen"}, "path": "audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/FieldNames.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.common;\n+\n+public final class FieldNames {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzNTA3OA=="}, "originalCommit": {"oid": "754e186be1f1668728fc27ba085d29658f9db7a8"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "542ec3abe5561028b1724eba7471e7c8868fba6b", "author": {"user": {"login": "dhanyak-btc", "name": "Dhanya Kumar KV"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/542ec3abe5561028b1724eba7471e7c8868fba6b", "committedDate": "2020-06-11T15:03:09Z", "message": "Fixed PR review comments\n\nFixed PR review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "618f4852d04f4ef97100f17e13e89fbcc11fa30f", "author": {"user": {"login": "dhanyak-btc", "name": "Dhanya Kumar KV"}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/618f4852d04f4ef97100f17e13e89fbcc11fa30f", "committedDate": "2020-06-15T09:57:06Z", "message": "Created audit-log-modules and common-modules\n\nCreated audit-log-modules and common-modules"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwOTY3NTA5", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#pullrequestreview-430967509", "createdAt": "2020-06-15T20:25:53Z", "commit": {"oid": "618f4852d04f4ef97100f17e13e89fbcc11fa30f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f9d567c96662277fcc693f79d9254ef9aefb5b5", "author": {"user": {"login": "aswinijena100", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/1f9d567c96662277fcc693f79d9254ef9aefb5b5", "committedDate": "2020-06-16T07:17:44Z", "message": "Merge branch 'early-access' into early-access-audit-log-service"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 928, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}