{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1NTkxNzEx", "number": 734, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMTozNjo1MFrOEW-QLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzoxMzoyOVrOEW_r0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTI0MDc3OnYy", "diffSide": "RIGHT", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/ErrorCode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMTozNjo1MFrOG-gqsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNjowMTozMVrOG-pfgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwMDExMw==", "bodyText": "emailId->email", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/734#discussion_r468200113", "createdAt": "2020-08-10T21:36:50Z", "author": {"login": "saminguyen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/ErrorCode.java", "diffHunk": "@@ -110,13 +108,26 @@\n \n   CUSTOM_ID_EXISTS(400, \"EC_883\", Constants.BAD_REQUEST, \"customId already exists\"),\n \n-  USER_NOT_ACTIVE(400, \"EC_93\", Constants.BAD_REQUEST, \"User not Active\");\n+  USER_NOT_ACTIVE(400, \"EC_93\", Constants.BAD_REQUEST, \"User not Active\"),\n+\n+  USER_NOT_INVITED(\n+      400, \"EC-869\", Constants.BAD_REQUEST, \"Provided emailId not exists or user not invited\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ef39ad5dbc02fb5d186fbfe8cdf9e035d4960cf"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM0NDcwNA==", "bodyText": "Changed emailId to email", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/734#discussion_r468344704", "createdAt": "2020-08-11T06:01:31Z", "author": {"login": "Kantharajut-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/ErrorCode.java", "diffHunk": "@@ -110,13 +108,26 @@\n \n   CUSTOM_ID_EXISTS(400, \"EC_883\", Constants.BAD_REQUEST, \"customId already exists\"),\n \n-  USER_NOT_ACTIVE(400, \"EC_93\", Constants.BAD_REQUEST, \"User not Active\");\n+  USER_NOT_ACTIVE(400, \"EC_93\", Constants.BAD_REQUEST, \"User not Active\"),\n+\n+  USER_NOT_INVITED(\n+      400, \"EC-869\", Constants.BAD_REQUEST, \"Provided emailId not exists or user not invited\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwMDExMw=="}, "originalCommit": {"oid": "9ef39ad5dbc02fb5d186fbfe8cdf9e035d4960cf"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTMwMzA1OnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/SetUpAccountRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMTo1ODo1MFrOG-hPrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNjowMjo1MFrOG-phKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwOTU4Mg==", "bodyText": "you have too many extra backslash that are not needed.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  \"^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!\\\\\\\\\\\\\\\"#$%&'()*+,-.:;<=>?@\\\\\\\\\\\\\\\\[\\\\\\\\\\\\\\\\]^_`{|}~]).{8,64}$\";\n          \n          \n            \n                       \"^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!\\\\\\\"#$%&'()*+,-.:;<=>?@\\\\[\\\\]^_`{|}~]).{8,64}$\";", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/734#discussion_r468209582", "createdAt": "2020-08-10T21:58:50Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/SetUpAccountRequest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.google.cloud.healthcare.fdamystudies.beans;\n+\n+import javax.validation.constraints.Email;\n+import javax.validation.constraints.NotBlank;\n+import javax.validation.constraints.NotNull;\n+import javax.validation.constraints.Pattern;\n+import javax.validation.constraints.Size;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+@Getter\n+@Setter\n+@ToString\n+@Component\n+@Scope(value = \"prototype\")\n+public class SetUpAccountRequest {\n+\n+  private static final String PASSWORD_REGEX =\n+      \"^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!\\\\\\\\\\\\\\\"#$%&'()*+,-.:;<=>?@\\\\\\\\\\\\\\\\[\\\\\\\\\\\\\\\\]^_`{|}~]).{8,64}$\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ef39ad5dbc02fb5d186fbfe8cdf9e035d4960cf"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM0NTEzMA==", "bodyText": "fixed review comment", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/734#discussion_r468345130", "createdAt": "2020-08-11T06:02:50Z", "author": {"login": "Kantharajut-btc"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/SetUpAccountRequest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.google.cloud.healthcare.fdamystudies.beans;\n+\n+import javax.validation.constraints.Email;\n+import javax.validation.constraints.NotBlank;\n+import javax.validation.constraints.NotNull;\n+import javax.validation.constraints.Pattern;\n+import javax.validation.constraints.Size;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+@Getter\n+@Setter\n+@ToString\n+@Component\n+@Scope(value = \"prototype\")\n+public class SetUpAccountRequest {\n+\n+  private static final String PASSWORD_REGEX =\n+      \"^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!\\\\\\\\\\\\\\\"#$%&'()*+,-.:;<=>?@\\\\\\\\\\\\\\\\[\\\\\\\\\\\\\\\\]^_`{|}~]).{8,64}$\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwOTU4Mg=="}, "originalCommit": {"oid": "9ef39ad5dbc02fb5d186fbfe8cdf9e035d4960cf"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQ0ODE5OnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserProfileServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzowMDoxM1rOG-ilpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNjowNjo1NlrOG-pmcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIzMTU4OQ==", "bodyText": "Don't you have to call setErrorHandler on restTemplate to make sure your custom RestResponseErrorHandler above will work to catch all the exceptions by restTemplate?\nRefer to the answer in: https://stackoverflow.com/questions/46367039/how-to-handle-httpclientexception-properly/46368179#46368179", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/734#discussion_r468231589", "createdAt": "2020-08-10T23:00:13Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserProfileServiceImpl.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.AuthUserRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.SetUpAccountRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.SetUpAccountResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.common.UserAccountStatus;\n+import com.google.cloud.healthcare.fdamystudies.common.UserStatus;\n+import com.google.cloud.healthcare.fdamystudies.config.AppPropertyConfig;\n+import com.google.cloud.healthcare.fdamystudies.model.UserRegAdminEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserRegAdminRepository;\n+import java.util.Optional;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.client.RestTemplate;\n+\n+@Service\n+public class UserProfileServiceImpl implements UserProfileService {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserProfileServiceImpl.class.getName());\n+\n+  @Autowired private UserRegAdminRepository userRegAdminRepository;\n+\n+  @Autowired private AppPropertyConfig appPropertyConfig;\n+\n+  @Autowired private RestTemplate restTemplate;\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Override\n+  @Transactional\n+  public SetUpAccountResponse saveUser(SetUpAccountRequest setUpAccountRequest) {\n+    logger.entry(\"saveUser\");\n+\n+    Optional<UserRegAdminEntity> optUsers =\n+        userRegAdminRepository.findByEmail(setUpAccountRequest.getEmail());\n+    if (!optUsers.isPresent()) {\n+      return new SetUpAccountResponse(ErrorCode.USER_NOT_INVITED);\n+    }\n+\n+    // Bad request and errors handled in RestResponseErrorHandler class\n+    UserResponse authRegistrationResponse = registerUserInAuthServer(setUpAccountRequest);\n+\n+    UserRegAdminEntity userRegAdminUser = optUsers.get();\n+    userRegAdminUser.setUrAdminAuthId(authRegistrationResponse.getUserId());\n+    userRegAdminUser.setFirstName(setUpAccountRequest.getFirstName());\n+    userRegAdminUser.setLastName(setUpAccountRequest.getLastName());\n+    userRegAdminUser.setStatus(UserStatus.ACTIVE.getValue());\n+    userRegAdminUser = userRegAdminRepository.saveAndFlush(userRegAdminUser);\n+\n+    SetUpAccountResponse setUpAccountResponse =\n+        new SetUpAccountResponse(\n+            userRegAdminUser.getId(),\n+            authRegistrationResponse.getTempRegId(),\n+            authRegistrationResponse.getUserId(),\n+            MessageCode.SET_UP_ACCOUNT_SUCCESS);\n+\n+    logger.exit(MessageCode.SET_UP_ACCOUNT_SUCCESS);\n+    return setUpAccountResponse;\n+  }\n+\n+  private UserResponse registerUserInAuthServer(SetUpAccountRequest setUpAccountRequest) {\n+    logger.entry(\"registerUserInAuthServer()\");\n+\n+    AuthUserRequest userRequest =\n+        new AuthUserRequest(\n+            \"PARTICIPANT MANAGER\",\n+            setUpAccountRequest.getEmail(),\n+            setUpAccountRequest.getPassword(),\n+            UserAccountStatus.ACTIVE.getStatus());\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(\"Authorization\", \"Bearer \" + oauthService.getAccessToken());\n+\n+    HttpEntity<AuthUserRequest> requestEntity = new HttpEntity<>(userRequest, headers);\n+\n+    ResponseEntity<UserResponse> response =\n+        restTemplate.postForEntity(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ef39ad5dbc02fb5d186fbfe8cdf9e035d4960cf"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM0NjQ4MQ==", "bodyText": "Added below line in CommonModuleConfiguration\nrestTemplate.setErrorHandler(new RestResponseErrorHandler());", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/734#discussion_r468346481", "createdAt": "2020-08-11T06:06:56Z", "author": {"login": "Kantharajut-btc"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserProfileServiceImpl.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.AuthUserRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.SetUpAccountRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.SetUpAccountResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.common.UserAccountStatus;\n+import com.google.cloud.healthcare.fdamystudies.common.UserStatus;\n+import com.google.cloud.healthcare.fdamystudies.config.AppPropertyConfig;\n+import com.google.cloud.healthcare.fdamystudies.model.UserRegAdminEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserRegAdminRepository;\n+import java.util.Optional;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.client.RestTemplate;\n+\n+@Service\n+public class UserProfileServiceImpl implements UserProfileService {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserProfileServiceImpl.class.getName());\n+\n+  @Autowired private UserRegAdminRepository userRegAdminRepository;\n+\n+  @Autowired private AppPropertyConfig appPropertyConfig;\n+\n+  @Autowired private RestTemplate restTemplate;\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Override\n+  @Transactional\n+  public SetUpAccountResponse saveUser(SetUpAccountRequest setUpAccountRequest) {\n+    logger.entry(\"saveUser\");\n+\n+    Optional<UserRegAdminEntity> optUsers =\n+        userRegAdminRepository.findByEmail(setUpAccountRequest.getEmail());\n+    if (!optUsers.isPresent()) {\n+      return new SetUpAccountResponse(ErrorCode.USER_NOT_INVITED);\n+    }\n+\n+    // Bad request and errors handled in RestResponseErrorHandler class\n+    UserResponse authRegistrationResponse = registerUserInAuthServer(setUpAccountRequest);\n+\n+    UserRegAdminEntity userRegAdminUser = optUsers.get();\n+    userRegAdminUser.setUrAdminAuthId(authRegistrationResponse.getUserId());\n+    userRegAdminUser.setFirstName(setUpAccountRequest.getFirstName());\n+    userRegAdminUser.setLastName(setUpAccountRequest.getLastName());\n+    userRegAdminUser.setStatus(UserStatus.ACTIVE.getValue());\n+    userRegAdminUser = userRegAdminRepository.saveAndFlush(userRegAdminUser);\n+\n+    SetUpAccountResponse setUpAccountResponse =\n+        new SetUpAccountResponse(\n+            userRegAdminUser.getId(),\n+            authRegistrationResponse.getTempRegId(),\n+            authRegistrationResponse.getUserId(),\n+            MessageCode.SET_UP_ACCOUNT_SUCCESS);\n+\n+    logger.exit(MessageCode.SET_UP_ACCOUNT_SUCCESS);\n+    return setUpAccountResponse;\n+  }\n+\n+  private UserResponse registerUserInAuthServer(SetUpAccountRequest setUpAccountRequest) {\n+    logger.entry(\"registerUserInAuthServer()\");\n+\n+    AuthUserRequest userRequest =\n+        new AuthUserRequest(\n+            \"PARTICIPANT MANAGER\",\n+            setUpAccountRequest.getEmail(),\n+            setUpAccountRequest.getPassword(),\n+            UserAccountStatus.ACTIVE.getStatus());\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(\"Authorization\", \"Bearer \" + oauthService.getAccessToken());\n+\n+    HttpEntity<AuthUserRequest> requestEntity = new HttpEntity<>(userRequest, headers);\n+\n+    ResponseEntity<UserResponse> response =\n+        restTemplate.postForEntity(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIzMTU4OQ=="}, "originalCommit": {"oid": "9ef39ad5dbc02fb5d186fbfe8cdf9e035d4960cf"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQ2ODc5OnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/helper/TestDataHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzoxMDoxNVrOG-ix0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNjowOToyNVrOG-pplA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIzNDcwNw==", "bodyText": "just a small suggestion, these changes should be in the integration test PR next time if you do split the PRs.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/734#discussion_r468234707", "createdAt": "2020-08-10T23:10:15Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/helper/TestDataHelper.java", "diffHunk": "@@ -43,6 +44,12 @@\n \n   public static final String EMAIL_VALUE = \"mockit_email@grr.la\";\n \n+  public static final String ADMIN_LAST_NAME = \"mockito_last_name\";\n+\n+  public static final String ADMIN_FIRST_NAME = \"mockito\";\n+\n+  protected static final String VALID_BEARER_TOKEN = \"Bearer 7fd50c2c-d618-493c-89d6-f1887e3e4bb8\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ef39ad5dbc02fb5d186fbfe8cdf9e035d4960cf"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM0NzI4NA==", "bodyText": "Okay", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/734#discussion_r468347284", "createdAt": "2020-08-11T06:09:25Z", "author": {"login": "Kantharajut-btc"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/helper/TestDataHelper.java", "diffHunk": "@@ -43,6 +44,12 @@\n \n   public static final String EMAIL_VALUE = \"mockit_email@grr.la\";\n \n+  public static final String ADMIN_LAST_NAME = \"mockito_last_name\";\n+\n+  public static final String ADMIN_FIRST_NAME = \"mockito\";\n+\n+  protected static final String VALID_BEARER_TOKEN = \"Bearer 7fd50c2c-d618-493c-89d6-f1887e3e4bb8\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIzNDcwNw=="}, "originalCommit": {"oid": "9ef39ad5dbc02fb5d186fbfe8cdf9e035d4960cf"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQ3NTM4OnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/helper/TestDataHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzoxMzoyOVrOG-i10w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNjowODo0MlrOG-powg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIzNTczMQ==", "bodyText": "nit: Move these to TestConstants.java and have TestDataHelper only have functions for generating test entity objects, etc.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/734#discussion_r468235731", "createdAt": "2020-08-10T23:13:29Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/helper/TestDataHelper.java", "diffHunk": "@@ -43,6 +44,12 @@\n \n   public static final String EMAIL_VALUE = \"mockit_email@grr.la\";\n \n+  public static final String ADMIN_LAST_NAME = \"mockito_last_name\";\n+\n+  public static final String ADMIN_FIRST_NAME = \"mockito\";\n+\n+  protected static final String VALID_BEARER_TOKEN = \"Bearer 7fd50c2c-d618-493c-89d6-f1887e3e4bb8\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ef39ad5dbc02fb5d186fbfe8cdf9e035d4960cf"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM0NzA3NA==", "bodyText": "fixed review comment", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/734#discussion_r468347074", "createdAt": "2020-08-11T06:08:42Z", "author": {"login": "Kantharajut-btc"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/helper/TestDataHelper.java", "diffHunk": "@@ -43,6 +44,12 @@\n \n   public static final String EMAIL_VALUE = \"mockit_email@grr.la\";\n \n+  public static final String ADMIN_LAST_NAME = \"mockito_last_name\";\n+\n+  public static final String ADMIN_FIRST_NAME = \"mockito\";\n+\n+  protected static final String VALID_BEARER_TOKEN = \"Bearer 7fd50c2c-d618-493c-89d6-f1887e3e4bb8\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIzNTczMQ=="}, "originalCommit": {"oid": "9ef39ad5dbc02fb5d186fbfe8cdf9e035d4960cf"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2109, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}