{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyNjI2MjA2", "number": 799, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNToyNjo1NlrOEcH36g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNTo1MzozOVrOEcIkrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTI0NTg2OnYy", "diffSide": "RIGHT", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/AuditLogEventRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNToyNjo1NlrOHGdibQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwODo0OTozMlrOHHCTgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUzNzQ1Mw==", "bodyText": "nit: remove empty comment", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/799#discussion_r476537453", "createdAt": "2020-08-25T15:26:56Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/AuditLogEventRequest.java", "diffHunk": "@@ -19,7 +20,10 @@\n @Getter\n @Setter\n @ToString\n-public class AuditLogEventRequest {\n+public class AuditLogEventRequest implements Serializable {\n+\n+  /** */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18731f9aed65cae9f8f957fd29a7ed0859774dbd"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEzOTg0MA==", "bodyText": "fixed review comment", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/799#discussion_r477139840", "createdAt": "2020-08-26T08:49:32Z", "author": {"login": "Kantharajut-btc"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/AuditLogEventRequest.java", "diffHunk": "@@ -19,7 +20,10 @@\n @Getter\n @Setter\n @ToString\n-public class AuditLogEventRequest {\n+public class AuditLogEventRequest implements Serializable {\n+\n+  /** */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUzNzQ1Mw=="}, "originalCommit": {"oid": "18731f9aed65cae9f8f957fd29a7ed0859774dbd"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTI1OTQ3OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/enroll-mgmt-module/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/StudyStateController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNTozMDowMlrOHGdq_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwODo1MDowNlrOHHCU0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUzOTY0Ng==", "bodyText": "nit: move to constant", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/799#discussion_r476539646", "createdAt": "2020-08-25T15:30:02Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/enroll-mgmt-module/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/StudyStateController.java", "diffHunk": "@@ -111,7 +124,10 @@\n \n   @GetMapping(value = \"/studyState\", produces = MediaType.APPLICATION_JSON_VALUE)\n   public ResponseEntity<?> getStudyState(\n-      @RequestHeader(\"userId\") String userId, @Context HttpServletResponse response) {\n+      @RequestHeader(\"userId\") String userId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18731f9aed65cae9f8f957fd29a7ed0859774dbd"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE0MDE3OQ==", "bodyText": "fixed review comment", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/799#discussion_r477140179", "createdAt": "2020-08-26T08:50:06Z", "author": {"login": "Kantharajut-btc"}, "path": "user-registration-server-ws/enroll-mgmt-module/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/StudyStateController.java", "diffHunk": "@@ -111,7 +124,10 @@\n \n   @GetMapping(value = \"/studyState\", produces = MediaType.APPLICATION_JSON_VALUE)\n   public ResponseEntity<?> getStudyState(\n-      @RequestHeader(\"userId\") String userId, @Context HttpServletResponse response) {\n+      @RequestHeader(\"userId\") String userId,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUzOTY0Ng=="}, "originalCommit": {"oid": "18731f9aed65cae9f8f957fd29a7ed0859774dbd"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTI2NjUxOnYy", "diffSide": "LEFT", "path": "user-registration-server-ws/enroll-mgmt-module/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/enroll/model/ActivityLogBO.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNTozMTozOFrOHGdvgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNzoyNToxNlrOHIDtgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU0MDgwMA==", "bodyText": "please make sure the sql script for this module is also updated.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/799#discussion_r476540800", "createdAt": "2020-08-25T15:31:38Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/enroll-mgmt-module/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/enroll/model/ActivityLogBO.java", "diffHunk": "@@ -1,46 +0,0 @@\n-/*\n- * Copyright 2020 Google LLC\n- *\n- * Use of this source code is governed by an MIT-style\n- * license that can be found in the LICENSE file or at\n- * https://opensource.org/licenses/MIT.\n- */\n-\n-package com.google.cloud.healthcare.fdamystudies.enroll.model;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18731f9aed65cae9f8f957fd29a7ed0859774dbd"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMyNTEzMQ==", "bodyText": "this should be addressed, if it is too much work create a bug to address later.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/799#discussion_r477325131", "createdAt": "2020-08-26T14:01:37Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/enroll-mgmt-module/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/enroll/model/ActivityLogBO.java", "diffHunk": "@@ -1,46 +0,0 @@\n-/*\n- * Copyright 2020 Google LLC\n- *\n- * Use of this source code is governed by an MIT-style\n- * license that can be found in the LICENSE file or at\n- * https://opensource.org/licenses/MIT.\n- */\n-\n-package com.google.cloud.healthcare.fdamystudies.enroll.model;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU0MDgwMA=="}, "originalCommit": {"oid": "18731f9aed65cae9f8f957fd29a7ed0859774dbd"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODIxMTQ1Nw==", "bodyText": "Updated sql script", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/799#discussion_r478211457", "createdAt": "2020-08-27T07:25:16Z", "author": {"login": "Kantharajut-btc"}, "path": "user-registration-server-ws/enroll-mgmt-module/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/enroll/model/ActivityLogBO.java", "diffHunk": "@@ -1,46 +0,0 @@\n-/*\n- * Copyright 2020 Google LLC\n- *\n- * Use of this source code is governed by an MIT-style\n- * license that can be found in the LICENSE file or at\n- * https://opensource.org/licenses/MIT.\n- */\n-\n-package com.google.cloud.healthcare.fdamystudies.enroll.model;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU0MDgwMA=="}, "originalCommit": {"oid": "18731f9aed65cae9f8f957fd29a7ed0859774dbd"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTMwOTE5OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/enroll-mgmt-module/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudyStateServiceImpl.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNTo0MToyM1rOHGeKhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNDozODoyNVrOHITdRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU0NzcxOQ==", "bodyText": "Looks like this is saving a list of studies, and each of these studies may have a different state; Is that correct?\nIf yes, then I don't think adding the state_value of a single study into the audit log makes. sense", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/799#discussion_r476547719", "createdAt": "2020-08-25T15:41:23Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/enroll-mgmt-module/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudyStateServiceImpl.java", "diffHunk": "@@ -165,28 +179,12 @@ public StudyStateRespBean saveParticipantStudies(\n         studyStateRespBean = new StudyStateRespBean();\n         studyStateRespBean.setMessage(\n             MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue().toLowerCase());\n-        List<String> activityDescList =\n-            customStudyIdList\n-                .stream()\n-                .map(\n-                    studyId ->\n-                        String.format(AppConstants.AUDIT_EVENT_UPDATE_STUDY_STATE_DESC, studyId))\n-                .collect(Collectors.toList());\n-        commonService.createActivityLogList(\n-            userId, AppConstants.AUDIT_EVENT_UPDATE_STUDY_STATE_NAME, activityDescList);\n-      } else {\n-        List<String> activityDescList =\n-            customStudyIdList\n-                .stream()\n-                .map(\n-                    studyId ->\n-                        String.format(\n-                            AppConstants.AUDIT_EVENT_UPDATE_STUDY_STATE_FAILED_DESC, studyId))\n-                .collect(Collectors.toList());\n-        commonService.createActivityLogList(\n-            userId, AppConstants.AUDIT_EVENT_UPDATE_STUDY_STATE_FAILED_NAME, activityDescList);\n+        placeHolder.put(\"study_state_value\", addParticipantStudiesList.get(0).getStatus());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18731f9aed65cae9f8f957fd29a7ed0859774dbd"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE0MDU0Nw==", "bodyText": "fixed review comment", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/799#discussion_r477140547", "createdAt": "2020-08-26T08:50:41Z", "author": {"login": "Kantharajut-btc"}, "path": "user-registration-server-ws/enroll-mgmt-module/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudyStateServiceImpl.java", "diffHunk": "@@ -165,28 +179,12 @@ public StudyStateRespBean saveParticipantStudies(\n         studyStateRespBean = new StudyStateRespBean();\n         studyStateRespBean.setMessage(\n             MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue().toLowerCase());\n-        List<String> activityDescList =\n-            customStudyIdList\n-                .stream()\n-                .map(\n-                    studyId ->\n-                        String.format(AppConstants.AUDIT_EVENT_UPDATE_STUDY_STATE_DESC, studyId))\n-                .collect(Collectors.toList());\n-        commonService.createActivityLogList(\n-            userId, AppConstants.AUDIT_EVENT_UPDATE_STUDY_STATE_NAME, activityDescList);\n-      } else {\n-        List<String> activityDescList =\n-            customStudyIdList\n-                .stream()\n-                .map(\n-                    studyId ->\n-                        String.format(\n-                            AppConstants.AUDIT_EVENT_UPDATE_STUDY_STATE_FAILED_DESC, studyId))\n-                .collect(Collectors.toList());\n-        commonService.createActivityLogList(\n-            userId, AppConstants.AUDIT_EVENT_UPDATE_STUDY_STATE_FAILED_NAME, activityDescList);\n+        placeHolder.put(\"study_state_value\", addParticipantStudiesList.get(0).getStatus());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU0NzcxOQ=="}, "originalCommit": {"oid": "18731f9aed65cae9f8f957fd29a7ed0859774dbd"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMyNjYwMA==", "bodyText": "I am not seeing any changes. Also this comment questions the audit log definition for this case and addressing it may require further discussion.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/799#discussion_r477326600", "createdAt": "2020-08-26T14:03:44Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/enroll-mgmt-module/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudyStateServiceImpl.java", "diffHunk": "@@ -165,28 +179,12 @@ public StudyStateRespBean saveParticipantStudies(\n         studyStateRespBean = new StudyStateRespBean();\n         studyStateRespBean.setMessage(\n             MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue().toLowerCase());\n-        List<String> activityDescList =\n-            customStudyIdList\n-                .stream()\n-                .map(\n-                    studyId ->\n-                        String.format(AppConstants.AUDIT_EVENT_UPDATE_STUDY_STATE_DESC, studyId))\n-                .collect(Collectors.toList());\n-        commonService.createActivityLogList(\n-            userId, AppConstants.AUDIT_EVENT_UPDATE_STUDY_STATE_NAME, activityDescList);\n-      } else {\n-        List<String> activityDescList =\n-            customStudyIdList\n-                .stream()\n-                .map(\n-                    studyId ->\n-                        String.format(\n-                            AppConstants.AUDIT_EVENT_UPDATE_STUDY_STATE_FAILED_DESC, studyId))\n-                .collect(Collectors.toList());\n-        commonService.createActivityLogList(\n-            userId, AppConstants.AUDIT_EVENT_UPDATE_STUDY_STATE_FAILED_NAME, activityDescList);\n+        placeHolder.put(\"study_state_value\", addParticipantStudiesList.get(0).getStatus());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU0NzcxOQ=="}, "originalCommit": {"oid": "18731f9aed65cae9f8f957fd29a7ed0859774dbd"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ2OTQ0Nw==", "bodyText": "My bad, i did a mistake by adding the study state at the end which was overriding the study state for the other studies. Now i have refactored the code to add the study state for each study. please find the code snippet for your reference\n      for (ParticipantStudiesBO participantStudies : existParticipantStudies) {\n        if (studyInfo != null) {\n          if (studyInfo.getId().equals(participantStudies.getStudyInfo().getId())) {\n            isExists = true;\n            if (participantStudies.getStatus() != null\n                && participantStudies\n                    .getStatus()\n                    .equalsIgnoreCase(MyStudiesUserRegUtil.ErrorCodes.YET_TO_JOIN.getValue())) {\n              participantStudies.setEnrolledDate(MyStudiesUserRegUtil.getCurrentUtilDateTime());\n            }\n            if (studiesBean.getStatus() != null\n                && !StringUtils.isEmpty(studiesBean.getStatus())) {\n              participantStudies.setStatus(studiesBean.getStatus());\n\n              if (studiesBean\n                  .getStatus()\n                  .equalsIgnoreCase(MyStudiesUserRegUtil.ErrorCodes.IN_PROGRESS.getValue())) {\n                participantStudies.setEnrolledDate(\n                    MyStudiesUserRegUtil.getCurrentUtilDateTime());\n              }\n            }\n            if (studiesBean.getBookmarked() != null) {\n              participantStudies.setBookmark(studiesBean.getBookmarked());\n            }\n            if (studiesBean.getCompletion() != null) {\n              participantStudies.setCompletion(studiesBean.getCompletion());\n            }\n            if (studiesBean.getAdherence() != null) {\n              participantStudies.setAdherence(studiesBean.getAdherence());\n            }\n            if (studiesBean.getParticipantId() != null\n                && StringUtils.isNotEmpty(studiesBean.getParticipantId())) {\n              participantStudies.setParticipantId(studiesBean.getParticipantId());\n            }\n            `placeHolder.put(\"study_state_value\", participantStudies.getStatus());`\n            addParticipantStudiesList.add(participantStudies);\n          }\n        }\n      }", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/799#discussion_r478469447", "createdAt": "2020-08-27T14:38:25Z", "author": {"login": "Kantharajut-btc"}, "path": "user-registration-server-ws/enroll-mgmt-module/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/StudyStateServiceImpl.java", "diffHunk": "@@ -165,28 +179,12 @@ public StudyStateRespBean saveParticipantStudies(\n         studyStateRespBean = new StudyStateRespBean();\n         studyStateRespBean.setMessage(\n             MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue().toLowerCase());\n-        List<String> activityDescList =\n-            customStudyIdList\n-                .stream()\n-                .map(\n-                    studyId ->\n-                        String.format(AppConstants.AUDIT_EVENT_UPDATE_STUDY_STATE_DESC, studyId))\n-                .collect(Collectors.toList());\n-        commonService.createActivityLogList(\n-            userId, AppConstants.AUDIT_EVENT_UPDATE_STUDY_STATE_NAME, activityDescList);\n-      } else {\n-        List<String> activityDescList =\n-            customStudyIdList\n-                .stream()\n-                .map(\n-                    studyId ->\n-                        String.format(\n-                            AppConstants.AUDIT_EVENT_UPDATE_STUDY_STATE_FAILED_DESC, studyId))\n-                .collect(Collectors.toList());\n-        commonService.createActivityLogList(\n-            userId, AppConstants.AUDIT_EVENT_UPDATE_STUDY_STATE_FAILED_NAME, activityDescList);\n+        placeHolder.put(\"study_state_value\", addParticipantStudiesList.get(0).getStatus());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU0NzcxOQ=="}, "originalCommit": {"oid": "18731f9aed65cae9f8f957fd29a7ed0859774dbd"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTM0MzA5OnYy", "diffSide": "RIGHT", "path": "user-registration-server-ws/enroll-mgmt-module/enroll-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/TestUtils.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNTo0OTo0N1rOHGegEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNDowNzoxMVrOHHN2xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU1MzIzNA==", "bodyText": "this appId column was removed from the final audit columns", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/799#discussion_r476553234", "createdAt": "2020-08-25T15:49:47Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/enroll-mgmt-module/enroll-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/TestUtils.java", "diffHunk": "@@ -10,6 +11,9 @@ public static HttpHeaders getCommonHeaders() {\n     HttpHeaders headers = new HttpHeaders();\n     headers.add(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON);\n     headers.add(HttpHeaders.ACCEPT, MediaType.APPLICATION_JSON);\n+    headers.add(\"correlationId\", IdGenerator.id());\n+    headers.add(\"appVersion\", \"1.0\");\n+    headers.add(\"appId\", \"GCPMS001\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18731f9aed65cae9f8f957fd29a7ed0859774dbd"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE0MDk3Mg==", "bodyText": "fixed review comment", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/799#discussion_r477140972", "createdAt": "2020-08-26T08:51:24Z", "author": {"login": "Kantharajut-btc"}, "path": "user-registration-server-ws/enroll-mgmt-module/enroll-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/TestUtils.java", "diffHunk": "@@ -10,6 +11,9 @@ public static HttpHeaders getCommonHeaders() {\n     HttpHeaders headers = new HttpHeaders();\n     headers.add(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON);\n     headers.add(HttpHeaders.ACCEPT, MediaType.APPLICATION_JSON);\n+    headers.add(\"correlationId\", IdGenerator.id());\n+    headers.add(\"appVersion\", \"1.0\");\n+    headers.add(\"appId\", \"GCPMS001\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU1MzIzNA=="}, "originalCommit": {"oid": "18731f9aed65cae9f8f957fd29a7ed0859774dbd"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMyOTA5Mw==", "bodyText": "my mistake, appID is still there.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/799#discussion_r477329093", "createdAt": "2020-08-26T14:07:11Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/enroll-mgmt-module/enroll-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/TestUtils.java", "diffHunk": "@@ -10,6 +11,9 @@ public static HttpHeaders getCommonHeaders() {\n     HttpHeaders headers = new HttpHeaders();\n     headers.add(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON);\n     headers.add(HttpHeaders.ACCEPT, MediaType.APPLICATION_JSON);\n+    headers.add(\"correlationId\", IdGenerator.id());\n+    headers.add(\"appVersion\", \"1.0\");\n+    headers.add(\"appId\", \"GCPMS001\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU1MzIzNA=="}, "originalCommit": {"oid": "18731f9aed65cae9f8f957fd29a7ed0859774dbd"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTM2MDQ1OnYy", "diffSide": "RIGHT", "path": "common-modules/common-tests/src/main/java/com/google/cloud/healthcare/fdamystudies/common/BaseMockIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNTo1MzozOVrOHGeqfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwODo1MjozMVrOHHCaiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU1NTkwMw==", "bodyText": "remove debug log", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/799#discussion_r476555903", "createdAt": "2020-08-25T15:53:39Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-tests/src/main/java/com/google/cloud/healthcare/fdamystudies/common/BaseMockIT.java", "diffHunk": "@@ -149,9 +170,95 @@ protected MvcResult performPost(\n         .andReturn();\n   }\n \n+  /**\n+   * @param assertOptionalFieldsForEvent is a {@link Map} collection that contains {@link eventCode}\n+   *     as key and {@link AuditLogEventRequest} with optional field values as value.\n+   * @param auditEvents audit event enums\n+   */\n+  protected void verifyAuditEventCall(\n+      Map<String, AuditLogEventRequest> assertOptionalFieldsForEvent,\n+      AuditLogEvent... auditEvents) {\n+\n+    verifyAuditEventCall(auditEvents);\n+\n+    Map<String, AuditLogEventRequest> auditRequestByEventCode =\n+        auditRequests\n+            .stream()\n+            .collect(Collectors.toMap(AuditLogEventRequest::getEventCode, Function.identity()));\n+\n+    assertOptionalFieldsForEvent.forEach(\n+        (eventCode, expectedAuditRequest) -> {\n+          AuditLogEventRequest auditRequest = auditRequestByEventCode.get(eventCode);\n+          assertEquals(expectedAuditRequest.getUserId(), auditRequest.getUserId());\n+          assertEquals(expectedAuditRequest.getParticipantId(), auditRequest.getParticipantId());\n+          assertEquals(expectedAuditRequest.getStudyId(), auditRequest.getStudyId());\n+          assertEquals(expectedAuditRequest.getStudyVersion(), auditRequest.getStudyVersion());\n+        });\n+  }\n+\n+  protected void verifyAuditEventCall(AuditLogEvent... auditEvents) {\n+    ArgumentCaptor<AuditLogEventRequest> argument =\n+        ArgumentCaptor.forClass(AuditLogEventRequest.class);\n+    verify(mockAuditService, atLeastOnce()).postAuditLogEvent(argument.capture());\n+\n+    Map<String, AuditLogEventRequest> auditRequestByEventCode =\n+        auditRequests\n+            .stream()\n+            .collect(Collectors.toMap(AuditLogEventRequest::getEventCode, Function.identity()));\n+\n+    for (AuditLogEvent auditEvent : auditEvents) {\n+      AuditLogEventRequest auditRequest = auditRequestByEventCode.get(auditEvent.getEventCode());\n+      logger.debug(auditRequest.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18731f9aed65cae9f8f957fd29a7ed0859774dbd"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE0MTY0Mw==", "bodyText": "removed debug log", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/799#discussion_r477141643", "createdAt": "2020-08-26T08:52:31Z", "author": {"login": "Kantharajut-btc"}, "path": "common-modules/common-tests/src/main/java/com/google/cloud/healthcare/fdamystudies/common/BaseMockIT.java", "diffHunk": "@@ -149,9 +170,95 @@ protected MvcResult performPost(\n         .andReturn();\n   }\n \n+  /**\n+   * @param assertOptionalFieldsForEvent is a {@link Map} collection that contains {@link eventCode}\n+   *     as key and {@link AuditLogEventRequest} with optional field values as value.\n+   * @param auditEvents audit event enums\n+   */\n+  protected void verifyAuditEventCall(\n+      Map<String, AuditLogEventRequest> assertOptionalFieldsForEvent,\n+      AuditLogEvent... auditEvents) {\n+\n+    verifyAuditEventCall(auditEvents);\n+\n+    Map<String, AuditLogEventRequest> auditRequestByEventCode =\n+        auditRequests\n+            .stream()\n+            .collect(Collectors.toMap(AuditLogEventRequest::getEventCode, Function.identity()));\n+\n+    assertOptionalFieldsForEvent.forEach(\n+        (eventCode, expectedAuditRequest) -> {\n+          AuditLogEventRequest auditRequest = auditRequestByEventCode.get(eventCode);\n+          assertEquals(expectedAuditRequest.getUserId(), auditRequest.getUserId());\n+          assertEquals(expectedAuditRequest.getParticipantId(), auditRequest.getParticipantId());\n+          assertEquals(expectedAuditRequest.getStudyId(), auditRequest.getStudyId());\n+          assertEquals(expectedAuditRequest.getStudyVersion(), auditRequest.getStudyVersion());\n+        });\n+  }\n+\n+  protected void verifyAuditEventCall(AuditLogEvent... auditEvents) {\n+    ArgumentCaptor<AuditLogEventRequest> argument =\n+        ArgumentCaptor.forClass(AuditLogEventRequest.class);\n+    verify(mockAuditService, atLeastOnce()).postAuditLogEvent(argument.capture());\n+\n+    Map<String, AuditLogEventRequest> auditRequestByEventCode =\n+        auditRequests\n+            .stream()\n+            .collect(Collectors.toMap(AuditLogEventRequest::getEventCode, Function.identity()));\n+\n+    for (AuditLogEvent auditEvent : auditEvents) {\n+      AuditLogEventRequest auditRequest = auditRequestByEventCode.get(auditEvent.getEventCode());\n+      logger.debug(auditRequest.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU1NTkwMw=="}, "originalCommit": {"oid": "18731f9aed65cae9f8f957fd29a7ed0859774dbd"}, "originalPosition": 92}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2188, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}