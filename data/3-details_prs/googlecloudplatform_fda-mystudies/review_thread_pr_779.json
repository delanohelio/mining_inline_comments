{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNzg4MjU4", "number": 779, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjo1MToxNVrOEan7Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOToxNjoyOVrOEaq80A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzUyNTIyOnYy", "diffSide": "RIGHT", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/model/AppPermissionEntity.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjo1MToxNVrOHEK2pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNDozNzoxN1rOHGGrHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNDE4Mw==", "bodyText": "since we already have @ Getter Setter, why not just a field String appId here instead", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/779#discussion_r474134183", "createdAt": "2020-08-20T16:51:15Z", "author": {"login": "saminguyen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/model/AppPermissionEntity.java", "diffHunk": "@@ -64,4 +66,9 @@\n \n   @Column(name = \"created_by\", length = 64)\n   private String createdBy;\n+\n+  @Transient\n+  public String getAppId() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76898da8532e744ed8ab0382666da8f93b714875"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNTA5Ng==", "bodyText": "This is needed for lambda expression and marked as @Transient to avoid mapping to table column.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/779#discussion_r474505096", "createdAt": "2020-08-21T08:11:42Z", "author": {"login": "chiranjibi009"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/model/AppPermissionEntity.java", "diffHunk": "@@ -64,4 +66,9 @@\n \n   @Column(name = \"created_by\", length = 64)\n   private String createdBy;\n+\n+  @Transient\n+  public String getAppId() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNDE4Mw=="}, "originalCommit": {"oid": "76898da8532e744ed8ab0382666da8f93b714875"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE2Mjg0NA==", "bodyText": "Ok!", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/779#discussion_r476162844", "createdAt": "2020-08-25T04:37:17Z", "author": {"login": "saminguyen"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/model/AppPermissionEntity.java", "diffHunk": "@@ -64,4 +66,9 @@\n \n   @Column(name = \"created_by\", length = 64)\n   private String createdBy;\n+\n+  @Transient\n+  public String getAppId() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNDE4Mw=="}, "originalCommit": {"oid": "76898da8532e744ed8ab0382666da8f93b714875"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzkxNzczOnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODo0NDoxNFrOHEOqEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwODoyMDozOVrOHEh-Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE5NjQ5Nw==", "bodyText": "you can use lambda for short\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .mapToInt(appStudyResponse -> appStudyResponse.getSelectedSitesCount())\n          \n          \n            \n                         .mapToInt(UserStudyDetails::getSelectedSitesCount)", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/779#discussion_r474196497", "createdAt": "2020-08-20T18:44:14Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java", "diffHunk": "@@ -441,4 +448,158 @@ private void deleteAllPermissions(String userId) {\n     appPermissionRepository.deleteByAdminUserId(userId);\n     logger.exit(\"Successfully deleted all the assigned permissions.\");\n   }\n+\n+  @Override\n+  public GetAdminDetailsResponse getAdminDetails(String userId, String adminId) {\n+    logger.entry(\"getAdminDetails()\");\n+    ErrorCode errorCode = validateUserRequest(userId);\n+    if (errorCode != null) {\n+      logger.error(errorCode.toString());\n+      return new GetAdminDetailsResponse(errorCode);\n+    }\n+\n+    Optional<UserRegAdminEntity> optAdminDetails = userAdminRepository.findById(adminId);\n+    if (!optAdminDetails.isPresent()) {\n+      logger.error(ErrorCode.ADMIN_NOT_FOUND.toString());\n+      return new GetAdminDetailsResponse(ErrorCode.ADMIN_NOT_FOUND);\n+    }\n+\n+    UserRegAdminEntity adminDetails = optAdminDetails.get();\n+    User user = UserMapper.prepareUserInfo(adminDetails);\n+    List<AppEntity> apps = appRepository.findAll();\n+    List<AppPermissionEntity> appPermissions =\n+        appPermissionRepository.findByAdminUserId(user.getId());\n+\n+    Map<String, AppPermissionEntity> appPermissionMap =\n+        appPermissions\n+            .stream()\n+            .collect(Collectors.toMap(AppPermissionEntity::getAppId, Function.identity()));\n+\n+    for (AppEntity app : apps) {\n+      UserAppDetails userAppBean = UserMapper.toUserAppDetails(app);\n+      AppPermissionEntity appPermission = appPermissionMap.get(app.getId());\n+      if (appPermission != null && appPermission.getEditPermission() != null) {\n+        Permission permission = Permission.fromValue(appPermission.getEditPermission());\n+        userAppBean.setPermission(permission.value());\n+        if (Permission.NO_PERMISSION != permission) {\n+          userAppBean.setSelected(true);\n+        }\n+      } else if (adminDetails.isSuperAdmin()) {\n+        userAppBean.setPermission(Permission.READ_EDIT.value());\n+        userAppBean.setSelected(true);\n+      }\n+\n+      List<UserStudyDetails> userStudies = getUserStudies(app, adminDetails);\n+      userAppBean.getStudies().addAll(userStudies);\n+\n+      setStudiesSitesCountPerApp(userAppBean, userStudies);\n+\n+      user.getApps().add(userAppBean);\n+    }\n+\n+    logger.exit(\n+        String.format(\n+            \"total apps=%d, superadmin=%b, status=%s\",\n+            user.getApps().size(), user.isSuperAdmin(), user.getStatus()));\n+    return new GetAdminDetailsResponse(MessageCode.GET_ADMIN_DETAILS_SUCCESS, user);\n+  }\n+\n+  private void setStudiesSitesCountPerApp(\n+      UserAppDetails userAppBean, List<UserStudyDetails> userStudies) {\n+    int selectedStudiesCount =\n+        (int) userStudies.stream().filter(UserStudyDetails::isSelected).count();\n+    userAppBean.setSelectedStudiesCount(selectedStudiesCount);\n+    userAppBean.setTotalStudies(userStudies.size());\n+\n+    int selectedSitesCountPerApp =\n+        userStudies\n+            .stream()\n+            .mapToInt(appStudyResponse -> appStudyResponse.getSelectedSitesCount())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76898da8532e744ed8ab0382666da8f93b714875"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUxMjkzOA==", "bodyText": "Fixed review comment", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/779#discussion_r474512938", "createdAt": "2020-08-21T08:20:39Z", "author": {"login": "chiranjibi009"}, "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java", "diffHunk": "@@ -441,4 +448,158 @@ private void deleteAllPermissions(String userId) {\n     appPermissionRepository.deleteByAdminUserId(userId);\n     logger.exit(\"Successfully deleted all the assigned permissions.\");\n   }\n+\n+  @Override\n+  public GetAdminDetailsResponse getAdminDetails(String userId, String adminId) {\n+    logger.entry(\"getAdminDetails()\");\n+    ErrorCode errorCode = validateUserRequest(userId);\n+    if (errorCode != null) {\n+      logger.error(errorCode.toString());\n+      return new GetAdminDetailsResponse(errorCode);\n+    }\n+\n+    Optional<UserRegAdminEntity> optAdminDetails = userAdminRepository.findById(adminId);\n+    if (!optAdminDetails.isPresent()) {\n+      logger.error(ErrorCode.ADMIN_NOT_FOUND.toString());\n+      return new GetAdminDetailsResponse(ErrorCode.ADMIN_NOT_FOUND);\n+    }\n+\n+    UserRegAdminEntity adminDetails = optAdminDetails.get();\n+    User user = UserMapper.prepareUserInfo(adminDetails);\n+    List<AppEntity> apps = appRepository.findAll();\n+    List<AppPermissionEntity> appPermissions =\n+        appPermissionRepository.findByAdminUserId(user.getId());\n+\n+    Map<String, AppPermissionEntity> appPermissionMap =\n+        appPermissions\n+            .stream()\n+            .collect(Collectors.toMap(AppPermissionEntity::getAppId, Function.identity()));\n+\n+    for (AppEntity app : apps) {\n+      UserAppDetails userAppBean = UserMapper.toUserAppDetails(app);\n+      AppPermissionEntity appPermission = appPermissionMap.get(app.getId());\n+      if (appPermission != null && appPermission.getEditPermission() != null) {\n+        Permission permission = Permission.fromValue(appPermission.getEditPermission());\n+        userAppBean.setPermission(permission.value());\n+        if (Permission.NO_PERMISSION != permission) {\n+          userAppBean.setSelected(true);\n+        }\n+      } else if (adminDetails.isSuperAdmin()) {\n+        userAppBean.setPermission(Permission.READ_EDIT.value());\n+        userAppBean.setSelected(true);\n+      }\n+\n+      List<UserStudyDetails> userStudies = getUserStudies(app, adminDetails);\n+      userAppBean.getStudies().addAll(userStudies);\n+\n+      setStudiesSitesCountPerApp(userAppBean, userStudies);\n+\n+      user.getApps().add(userAppBean);\n+    }\n+\n+    logger.exit(\n+        String.format(\n+            \"total apps=%d, superadmin=%b, status=%s\",\n+            user.getApps().size(), user.isSuperAdmin(), user.getStatus()));\n+    return new GetAdminDetailsResponse(MessageCode.GET_ADMIN_DETAILS_SUCCESS, user);\n+  }\n+\n+  private void setStudiesSitesCountPerApp(\n+      UserAppDetails userAppBean, List<UserStudyDetails> userStudies) {\n+    int selectedStudiesCount =\n+        (int) userStudies.stream().filter(UserStudyDetails::isSelected).count();\n+    userAppBean.setSelectedStudiesCount(selectedStudiesCount);\n+    userAppBean.setTotalStudies(userStudies.size());\n+\n+    int selectedSitesCountPerApp =\n+        userStudies\n+            .stream()\n+            .mapToInt(appStudyResponse -> appStudyResponse.getSelectedSitesCount())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE5NjQ5Nw=="}, "originalCommit": {"oid": "76898da8532e744ed8ab0382666da8f93b714875"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Mzk1MjcxOnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/UserControllerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODo1NTowOVrOHEPA3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwODoyMDozMFrOHEh9mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIwMjMzMw==", "bodyText": "remove, you already checked this above", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/779#discussion_r474202333", "createdAt": "2020-08-20T18:55:09Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/UserControllerTest.java", "diffHunk": "@@ -506,6 +510,127 @@ public void shouldReturnPermissionMissingErrorForUpdateUser() throws Exception {\n             jsonPath(\"$.error_description\").value(ErrorCode.PERMISSION_MISSING.getDescription()));\n   }\n \n+  @Test\n+  public void shouldReturnAdminRecordsWithoutAppStudySitePermissionForGetAdminDetailsAndApps()\n+      throws Exception {\n+    // Step 1: Set few admins\n+    UserRegAdminEntity superAdmin = testDataHelper.createSuperAdmin();\n+\n+    // Step 2: Call API and expect MANAGE_USERS_SUCCESS message\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_ADMIN_DETAILS_AND_APPS.getPath(), superAdmin.getId())\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(jsonPath(\"$.user.id\", is(superAdmin.getId())))\n+        .andExpect(jsonPath(\"$.user.apps\").isArray())\n+        .andExpect(jsonPath(\"$.user.apps\").isNotEmpty())\n+        .andExpect(jsonPath(\"$.user.apps[0].totalStudies\", is(1)))\n+        .andExpect(jsonPath(\"$.user.apps[0].selectedStudiesCount\", is(0)))\n+        .andExpect(jsonPath(\"$.user.apps[0].totalSites\", is(1)))\n+        .andExpect(jsonPath(\"$.user.apps[0].selectedSitesCount\", is(0)))\n+        .andExpect(jsonPath(\"$.user.apps\").isNotEmpty())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76898da8532e744ed8ab0382666da8f93b714875"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUxMjc5NA==", "bodyText": "Fixed review comment", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/779#discussion_r474512794", "createdAt": "2020-08-21T08:20:30Z", "author": {"login": "chiranjibi009"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/UserControllerTest.java", "diffHunk": "@@ -506,6 +510,127 @@ public void shouldReturnPermissionMissingErrorForUpdateUser() throws Exception {\n             jsonPath(\"$.error_description\").value(ErrorCode.PERMISSION_MISSING.getDescription()));\n   }\n \n+  @Test\n+  public void shouldReturnAdminRecordsWithoutAppStudySitePermissionForGetAdminDetailsAndApps()\n+      throws Exception {\n+    // Step 1: Set few admins\n+    UserRegAdminEntity superAdmin = testDataHelper.createSuperAdmin();\n+\n+    // Step 2: Call API and expect MANAGE_USERS_SUCCESS message\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_ADMIN_DETAILS_AND_APPS.getPath(), superAdmin.getId())\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(jsonPath(\"$.user.id\", is(superAdmin.getId())))\n+        .andExpect(jsonPath(\"$.user.apps\").isArray())\n+        .andExpect(jsonPath(\"$.user.apps\").isNotEmpty())\n+        .andExpect(jsonPath(\"$.user.apps[0].totalStudies\", is(1)))\n+        .andExpect(jsonPath(\"$.user.apps[0].selectedStudiesCount\", is(0)))\n+        .andExpect(jsonPath(\"$.user.apps[0].totalSites\", is(1)))\n+        .andExpect(jsonPath(\"$.user.apps[0].selectedSitesCount\", is(0)))\n+        .andExpect(jsonPath(\"$.user.apps\").isNotEmpty())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIwMjMzMw=="}, "originalCommit": {"oid": "76898da8532e744ed8ab0382666da8f93b714875"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Mzk1NTYyOnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/UserControllerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODo1NTo1NFrOHEPCgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwODoyMDoxOFrOHEh82w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIwMjc1Mg==", "bodyText": "same as above - remove this line", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/779#discussion_r474202752", "createdAt": "2020-08-20T18:55:54Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/UserControllerTest.java", "diffHunk": "@@ -506,6 +510,127 @@ public void shouldReturnPermissionMissingErrorForUpdateUser() throws Exception {\n             jsonPath(\"$.error_description\").value(ErrorCode.PERMISSION_MISSING.getDescription()));\n   }\n \n+  @Test\n+  public void shouldReturnAdminRecordsWithoutAppStudySitePermissionForGetAdminDetailsAndApps()\n+      throws Exception {\n+    // Step 1: Set few admins\n+    UserRegAdminEntity superAdmin = testDataHelper.createSuperAdmin();\n+\n+    // Step 2: Call API and expect MANAGE_USERS_SUCCESS message\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_ADMIN_DETAILS_AND_APPS.getPath(), superAdmin.getId())\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(jsonPath(\"$.user.id\", is(superAdmin.getId())))\n+        .andExpect(jsonPath(\"$.user.apps\").isArray())\n+        .andExpect(jsonPath(\"$.user.apps\").isNotEmpty())\n+        .andExpect(jsonPath(\"$.user.apps[0].totalStudies\", is(1)))\n+        .andExpect(jsonPath(\"$.user.apps[0].selectedStudiesCount\", is(0)))\n+        .andExpect(jsonPath(\"$.user.apps[0].totalSites\", is(1)))\n+        .andExpect(jsonPath(\"$.user.apps[0].selectedSitesCount\", is(0)))\n+        .andExpect(jsonPath(\"$.user.apps\").isNotEmpty())\n+        .andExpect(jsonPath(\"$.message\", is(MessageCode.GET_ADMIN_DETAILS_SUCCESS.getMessage())));\n+  }\n+\n+  @Test\n+  public void shouldReturnAdminRecordsWithAppStudySiteForGetAdminDetailsAndApps() throws Exception {\n+    // Step 1: Set one admin\n+    UserRegAdminEntity superAdmin = testDataHelper.createSuperAdmin();\n+    testDataHelper.createAppPermission(superAdmin, appEntity, userRegAdminEntity.getId());\n+    testDataHelper.createStudyPermission(\n+        superAdmin, appEntity, studyEntity, userRegAdminEntity.getId());\n+    testDataHelper.createSitePermission(\n+        superAdmin, appEntity, studyEntity, siteEntity, userRegAdminEntity.getId());\n+\n+    // Step 2: Call API and expect MANAGE_USERS_SUCCESS message\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_ADMIN_DETAILS_AND_APPS.getPath(), superAdmin.getId())\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(jsonPath(\"$.user.id\", is(superAdmin.getId())))\n+        .andExpect(jsonPath(\"$.user.apps\").isArray())\n+        .andExpect(jsonPath(\"$.user.apps\").isNotEmpty())\n+        .andExpect(jsonPath(\"$.user.apps[0].totalStudies\", is(1)))\n+        .andExpect(jsonPath(\"$.user.apps[0].selectedStudiesCount\", is(1)))\n+        .andExpect(jsonPath(\"$.user.apps[0].totalSites\", is(1)))\n+        .andExpect(jsonPath(\"$.user.apps[0].selectedSitesCount\", is(1)))\n+        .andExpect(jsonPath(\"$.user.apps\").isNotEmpty())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76898da8532e744ed8ab0382666da8f93b714875"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUxMjYwMw==", "bodyText": "Fixed review comment", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/779#discussion_r474512603", "createdAt": "2020-08-21T08:20:18Z", "author": {"login": "chiranjibi009"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/UserControllerTest.java", "diffHunk": "@@ -506,6 +510,127 @@ public void shouldReturnPermissionMissingErrorForUpdateUser() throws Exception {\n             jsonPath(\"$.error_description\").value(ErrorCode.PERMISSION_MISSING.getDescription()));\n   }\n \n+  @Test\n+  public void shouldReturnAdminRecordsWithoutAppStudySitePermissionForGetAdminDetailsAndApps()\n+      throws Exception {\n+    // Step 1: Set few admins\n+    UserRegAdminEntity superAdmin = testDataHelper.createSuperAdmin();\n+\n+    // Step 2: Call API and expect MANAGE_USERS_SUCCESS message\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_ADMIN_DETAILS_AND_APPS.getPath(), superAdmin.getId())\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(jsonPath(\"$.user.id\", is(superAdmin.getId())))\n+        .andExpect(jsonPath(\"$.user.apps\").isArray())\n+        .andExpect(jsonPath(\"$.user.apps\").isNotEmpty())\n+        .andExpect(jsonPath(\"$.user.apps[0].totalStudies\", is(1)))\n+        .andExpect(jsonPath(\"$.user.apps[0].selectedStudiesCount\", is(0)))\n+        .andExpect(jsonPath(\"$.user.apps[0].totalSites\", is(1)))\n+        .andExpect(jsonPath(\"$.user.apps[0].selectedSitesCount\", is(0)))\n+        .andExpect(jsonPath(\"$.user.apps\").isNotEmpty())\n+        .andExpect(jsonPath(\"$.message\", is(MessageCode.GET_ADMIN_DETAILS_SUCCESS.getMessage())));\n+  }\n+\n+  @Test\n+  public void shouldReturnAdminRecordsWithAppStudySiteForGetAdminDetailsAndApps() throws Exception {\n+    // Step 1: Set one admin\n+    UserRegAdminEntity superAdmin = testDataHelper.createSuperAdmin();\n+    testDataHelper.createAppPermission(superAdmin, appEntity, userRegAdminEntity.getId());\n+    testDataHelper.createStudyPermission(\n+        superAdmin, appEntity, studyEntity, userRegAdminEntity.getId());\n+    testDataHelper.createSitePermission(\n+        superAdmin, appEntity, studyEntity, siteEntity, userRegAdminEntity.getId());\n+\n+    // Step 2: Call API and expect MANAGE_USERS_SUCCESS message\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_ADMIN_DETAILS_AND_APPS.getPath(), superAdmin.getId())\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(jsonPath(\"$.user.id\", is(superAdmin.getId())))\n+        .andExpect(jsonPath(\"$.user.apps\").isArray())\n+        .andExpect(jsonPath(\"$.user.apps\").isNotEmpty())\n+        .andExpect(jsonPath(\"$.user.apps[0].totalStudies\", is(1)))\n+        .andExpect(jsonPath(\"$.user.apps[0].selectedStudiesCount\", is(1)))\n+        .andExpect(jsonPath(\"$.user.apps[0].totalSites\", is(1)))\n+        .andExpect(jsonPath(\"$.user.apps[0].selectedSitesCount\", is(1)))\n+        .andExpect(jsonPath(\"$.user.apps\").isNotEmpty())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIwMjc1Mg=="}, "originalCommit": {"oid": "76898da8532e744ed8ab0382666da8f93b714875"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDAyMTI4OnYy", "diffSide": "RIGHT", "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/UserControllerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOToxNjoyOVrOHEPrmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwODoxNTo1MVrOHEhuBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIxMzI3Mg==", "bodyText": "The way I see it, the User object has a lot of nested ArrayList of objects (UserAppDetails, UserStudyDetails, UserSitesDetails. So to most effectively test all these values I think it is best to convert to user value in json to the actual object and compare all the fields that way. I think you could use om.fasterxml.jackson.databind.ObjectMapper readValue() for this.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/779#discussion_r474213272", "createdAt": "2020-08-20T19:16:29Z", "author": {"login": "saminguyen"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/UserControllerTest.java", "diffHunk": "@@ -506,6 +510,127 @@ public void shouldReturnPermissionMissingErrorForUpdateUser() throws Exception {\n             jsonPath(\"$.error_description\").value(ErrorCode.PERMISSION_MISSING.getDescription()));\n   }\n \n+  @Test\n+  public void shouldReturnAdminRecordsWithoutAppStudySitePermissionForGetAdminDetailsAndApps()\n+      throws Exception {\n+    // Step 1: Set few admins\n+    UserRegAdminEntity superAdmin = testDataHelper.createSuperAdmin();\n+\n+    // Step 2: Call API and expect MANAGE_USERS_SUCCESS message\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_ADMIN_DETAILS_AND_APPS.getPath(), superAdmin.getId())\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(jsonPath(\"$.user.id\", is(superAdmin.getId())))\n+        .andExpect(jsonPath(\"$.user.apps\").isArray())\n+        .andExpect(jsonPath(\"$.user.apps\").isNotEmpty())\n+        .andExpect(jsonPath(\"$.user.apps[0].totalStudies\", is(1)))\n+        .andExpect(jsonPath(\"$.user.apps[0].selectedStudiesCount\", is(0)))\n+        .andExpect(jsonPath(\"$.user.apps[0].totalSites\", is(1)))\n+        .andExpect(jsonPath(\"$.user.apps[0].selectedSitesCount\", is(0)))\n+        .andExpect(jsonPath(\"$.user.apps\").isNotEmpty())\n+        .andExpect(jsonPath(\"$.message\", is(MessageCode.GET_ADMIN_DETAILS_SUCCESS.getMessage())));\n+  }\n+\n+  @Test\n+  public void shouldReturnAdminRecordsWithAppStudySiteForGetAdminDetailsAndApps() throws Exception {\n+    // Step 1: Set one admin\n+    UserRegAdminEntity superAdmin = testDataHelper.createSuperAdmin();\n+    testDataHelper.createAppPermission(superAdmin, appEntity, userRegAdminEntity.getId());\n+    testDataHelper.createStudyPermission(\n+        superAdmin, appEntity, studyEntity, userRegAdminEntity.getId());\n+    testDataHelper.createSitePermission(\n+        superAdmin, appEntity, studyEntity, siteEntity, userRegAdminEntity.getId());\n+\n+    // Step 2: Call API and expect MANAGE_USERS_SUCCESS message\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_ADMIN_DETAILS_AND_APPS.getPath(), superAdmin.getId())\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(jsonPath(\"$.user.id\", is(superAdmin.getId())))\n+        .andExpect(jsonPath(\"$.user.apps\").isArray())\n+        .andExpect(jsonPath(\"$.user.apps\").isNotEmpty())\n+        .andExpect(jsonPath(\"$.user.apps[0].totalStudies\", is(1)))\n+        .andExpect(jsonPath(\"$.user.apps[0].selectedStudiesCount\", is(1)))\n+        .andExpect(jsonPath(\"$.user.apps[0].totalSites\", is(1)))\n+        .andExpect(jsonPath(\"$.user.apps[0].selectedSitesCount\", is(1)))\n+        .andExpect(jsonPath(\"$.user.apps\").isNotEmpty())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76898da8532e744ed8ab0382666da8f93b714875"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwODgwNw==", "bodyText": "We have used your suggested approach to assert bad request violations in other places, but here some of the fields are dynamically generated so we are using andExpect() to assert the values.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/779#discussion_r474508807", "createdAt": "2020-08-21T08:15:51Z", "author": {"login": "chiranjibi009"}, "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/UserControllerTest.java", "diffHunk": "@@ -506,6 +510,127 @@ public void shouldReturnPermissionMissingErrorForUpdateUser() throws Exception {\n             jsonPath(\"$.error_description\").value(ErrorCode.PERMISSION_MISSING.getDescription()));\n   }\n \n+  @Test\n+  public void shouldReturnAdminRecordsWithoutAppStudySitePermissionForGetAdminDetailsAndApps()\n+      throws Exception {\n+    // Step 1: Set few admins\n+    UserRegAdminEntity superAdmin = testDataHelper.createSuperAdmin();\n+\n+    // Step 2: Call API and expect MANAGE_USERS_SUCCESS message\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_ADMIN_DETAILS_AND_APPS.getPath(), superAdmin.getId())\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(jsonPath(\"$.user.id\", is(superAdmin.getId())))\n+        .andExpect(jsonPath(\"$.user.apps\").isArray())\n+        .andExpect(jsonPath(\"$.user.apps\").isNotEmpty())\n+        .andExpect(jsonPath(\"$.user.apps[0].totalStudies\", is(1)))\n+        .andExpect(jsonPath(\"$.user.apps[0].selectedStudiesCount\", is(0)))\n+        .andExpect(jsonPath(\"$.user.apps[0].totalSites\", is(1)))\n+        .andExpect(jsonPath(\"$.user.apps[0].selectedSitesCount\", is(0)))\n+        .andExpect(jsonPath(\"$.user.apps\").isNotEmpty())\n+        .andExpect(jsonPath(\"$.message\", is(MessageCode.GET_ADMIN_DETAILS_SUCCESS.getMessage())));\n+  }\n+\n+  @Test\n+  public void shouldReturnAdminRecordsWithAppStudySiteForGetAdminDetailsAndApps() throws Exception {\n+    // Step 1: Set one admin\n+    UserRegAdminEntity superAdmin = testDataHelper.createSuperAdmin();\n+    testDataHelper.createAppPermission(superAdmin, appEntity, userRegAdminEntity.getId());\n+    testDataHelper.createStudyPermission(\n+        superAdmin, appEntity, studyEntity, userRegAdminEntity.getId());\n+    testDataHelper.createSitePermission(\n+        superAdmin, appEntity, studyEntity, siteEntity, userRegAdminEntity.getId());\n+\n+    // Step 2: Call API and expect MANAGE_USERS_SUCCESS message\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_ADMIN_DETAILS_AND_APPS.getPath(), superAdmin.getId())\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(jsonPath(\"$.user.id\", is(superAdmin.getId())))\n+        .andExpect(jsonPath(\"$.user.apps\").isArray())\n+        .andExpect(jsonPath(\"$.user.apps\").isNotEmpty())\n+        .andExpect(jsonPath(\"$.user.apps[0].totalStudies\", is(1)))\n+        .andExpect(jsonPath(\"$.user.apps[0].selectedStudiesCount\", is(1)))\n+        .andExpect(jsonPath(\"$.user.apps[0].totalSites\", is(1)))\n+        .andExpect(jsonPath(\"$.user.apps[0].selectedSitesCount\", is(1)))\n+        .andExpect(jsonPath(\"$.user.apps\").isNotEmpty())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIxMzI3Mg=="}, "originalCommit": {"oid": "76898da8532e744ed8ab0382666da8f93b714875"}, "originalPosition": 84}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2162, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}