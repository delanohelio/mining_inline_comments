{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxNDc1MTg3", "number": 785, "title": "User Management Service: /register endpoint refactoring and integration with oauth-scim-service", "bodyText": "/register endpoint refactored - Added UserRegistrationService and UserRegistrationServiceImpl  class.\nIntegration with oauth-scim-service to create an user account.\n/deactivate endpoint - removed old auth server related codes to fix test failures.\nAdded new tests for the /register implementation.\nBeanConfig- extended CommonModuleConfiguration to reuse the configurations.", "createdAt": "2020-08-21T07:47:56Z", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785", "merged": true, "mergeCommit": {"oid": "d9636157b0aeaa627b95fd6b0bd529fe6d82f9df"}, "closed": true, "closedAt": "2020-08-27T12:11:36Z", "author": {"login": "madhurya-btc"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdA0rrAAH2gAyNDcxNDc1MTg3OjgxMDU0YWI2NGM0MGMxZDEwODE1YjA4NWZmYjliYTM2OWE3ZTAyNzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdC_J3qgFqTQ3NjY0NzcxMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "81054ab64c40c1d10815b085ffb9ba369a7e0274", "author": {"user": {"login": "madhurya-btc", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/81054ab64c40c1d10815b085ffb9ba369a7e0274", "committedDate": "2020-08-20T18:40:00Z", "message": "/register implementation and new auth server integration with test cases."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4cf309005b4b3836626998b5a1244f3341f3b1e", "author": {"user": {"login": "madhurya-btc", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/b4cf309005b4b3836626998b5a1244f3341f3b1e", "committedDate": "2020-08-21T07:21:56Z", "message": "/register api implementation with oauth-scim-server integration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811", "author": {"user": {"login": "madhurya-btc", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/0fcec4ac5547f49264696c003c3436497ba5d811", "committedDate": "2020-08-21T07:34:10Z", "message": "test cases for /register API endpoint"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNTg5Nzk3", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#pullrequestreview-472589797", "createdAt": "2020-08-21T15:31:34Z", "commit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTozMTozNVrOHEx0Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzoxNjoxMVrOHE1DhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3MjQ5NA==", "bodyText": "why is unauthorized the very last fallback?\nthis is something we should identify at the very start of a call and not risk potentially leaking other information out to unauthorized users.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474772494", "createdAt": "2020-08-21T15:31:35Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/exceptions/RestResponseErrorHandler.java", "diffHunk": "@@ -38,6 +38,8 @@ public void handleError(ClientHttpResponse response) throws IOException {\n         String code = JsonPath.read(responseBody, \"$.error_code\");\n         String description = JsonPath.read(responseBody, \"$.error_description\");\n         errorCode = ErrorCode.fromCodeAndDescription(code, description);\n+      } else if (HttpStatus.UNAUTHORIZED == response.getStatusCode()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3MjkzOA==", "bodyText": "static imports should be added below normal imports", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474772938", "createdAt": "2020-08-21T15:32:27Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationForm.java", "diffHunk": "@@ -8,12 +8,20 @@\n \n package com.google.cloud.healthcare.fdamystudies.beans;\n \n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.PASSWORD_REGEX;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.PASSWORD_REGEX_MESSAGE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3MzI4MA==", "bodyText": "Can we use the standard length for this instead of a onetime size?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474773280", "createdAt": "2020-08-21T15:33:04Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationForm.java", "diffHunk": "@@ -24,8 +32,18 @@\n   private String userId;\n   private String firstName;\n   private String lastName;\n-  @NotNull private String emailId;\n+\n+  @ToString.Exclude\n+  @NotBlank\n+  @Size(max = 320)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3NDM1MA==", "bodyText": "we just removed orgId, why is it added again here?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474774350", "createdAt": "2020-08-21T15:34:58Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationForm.java", "diffHunk": "@@ -35,6 +53,8 @@\n   private int status;\n   private boolean tempPassword;\n   private LocalDateTime tempPasswordDate;\n+  private String appId;\n+  private String orgId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3NDY1Nw==", "bodyText": "same here, I believe this should be removed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474774657", "createdAt": "2020-08-21T15:35:31Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/ApplicationPropertyConfiguration.java", "diffHunk": "@@ -125,4 +125,7 @@\n \n   @Value(\"${auth.server.deactivateurl}\")\n   private String authServerDeactivateUrl;\n+\n+  @Value(\"${org.name}\")\n+  private String orgName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxMDUzMQ==", "bodyText": "maybe remove lombok.ToString? since you are excluding all the fields", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474810531", "createdAt": "2020-08-21T16:45:19Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationResponse.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.beans;\n+\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.Setter;\n+import lombok.ToString;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxMTY4Mw==", "bodyText": "remove orgId?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474811683", "createdAt": "2020-08-21T16:47:27Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/UserRegistrationController.java", "diffHunk": "@@ -74,230 +43,19 @@\n   }\n \n   @PostMapping(\"/register\")\n-  public ResponseEntity<?> registerUser(\n-      @Valid @RequestBody UserRegistrationForm userForm,\n+  public ResponseEntity<UserRegistrationResponse> registerUser(\n+      @Valid @RequestBody UserRegistrationForm user,\n       @RequestHeader(\"appId\") String appId,\n       @RequestHeader(\"orgId\") String orgId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxNDM0NA==", "bodyText": "nit: rename to deactivateAcct to be consistent with the casing in DeactivateAcctBean", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474814344", "createdAt": "2020-08-21T16:52:56Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserManagementProfileService.java", "diffHunk": "@@ -33,8 +33,7 @@ public UserDetailsBO getParticipantDetailsByEmail(\n \n   public UserDetailsBO saveParticipant(UserDetailsBO participant);\n \n-  public String deActivateAcct(\n-      String userId, DeactivateAcctBean deactivateBean, String accessToken, String clientToken);\n+  public String deActivateAcct(String userId, DeactivateAcctBean deactivateBean);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMDc5Ng==", "bodyText": "please remove", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474820796", "createdAt": "2020-08-21T17:06:10Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserRegistrationServiceImpl.java", "diffHunk": "@@ -0,0 +1,179 @@\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.ErrorCode.EMAIL_SEND_FAILED_EXCEPTION;\n+import static com.google.cloud.healthcare.fdamystudies.common.ErrorCode.USER_ALREADY_EXISTS;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.AppOrgInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationForm;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.common.UserAccountStatus;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.dao.CommonDao;\n+import com.google.cloud.healthcare.fdamystudies.exceptions.ErrorCodeException;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserDetailsBORepository;\n+import com.google.cloud.healthcare.fdamystudies.usermgmt.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.util.MyStudiesUserRegUtil;\n+import java.time.LocalDateTime;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Service;\n+import org.springframework.web.client.RestTemplate;\n+\n+@Service\n+public class UserRegistrationServiceImpl implements UserRegistrationService {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserRegistrationServiceImpl.class.getName());\n+\n+  @Autowired private UserDetailsBORepository userDetailsRepository;\n+\n+  @Autowired private CommonDao commonDao;\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private RestTemplate restTemplate;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @Autowired private EmailService emailService;\n+\n+  @Value(\"${register.url}\")\n+  private String authRegisterUrl;\n+\n+  @Value(\"${email.code.expire_time}\")\n+  private long expireTime;\n+\n+  @Override\n+  public UserRegistrationResponse register(UserRegistrationForm user) {\n+    logger.entry(\"begin register()\");\n+\n+    // find appInfoId using appId\n+    AppOrgInfoBean appOrgInfoBean =\n+        commonDao.getUserAppDetailsByAllApi(user.getUserId(), user.getAppId(), user.getOrgId());\n+\n+    // find user by email and appId\n+    Optional<UserDetailsBO> optUserDetails =\n+        userDetailsRepository.findByEmailAndAppInfoId(\n+            user.getEmailId(), appOrgInfoBean.getAppInfoId());\n+\n+    // Return USER_ALREADY_EXISTS error code if user account already exists for the given email\n+    UserDetailsBO userDetailsBO = new UserDetailsBO();\n+    if (optUserDetails.isPresent()) {\n+      userDetailsBO = optUserDetails.get();\n+      if (StringUtils.isNotEmpty(userDetailsBO.getUserId())) {\n+        if (generateVerificationCode(userDetailsBO)) {\n+          generateAndSaveVerificationCode(userDetailsBO);\n+        }\n+\n+        logger.warn(USER_ALREADY_EXISTS.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMTgxNw==", "bodyText": "please remove these warn logs, since the exception handling code seems to be providing the proper error log", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474821817", "createdAt": "2020-08-21T17:08:24Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserRegistrationServiceImpl.java", "diffHunk": "@@ -0,0 +1,179 @@\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.ErrorCode.EMAIL_SEND_FAILED_EXCEPTION;\n+import static com.google.cloud.healthcare.fdamystudies.common.ErrorCode.USER_ALREADY_EXISTS;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.AppOrgInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationForm;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.common.UserAccountStatus;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.dao.CommonDao;\n+import com.google.cloud.healthcare.fdamystudies.exceptions.ErrorCodeException;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserDetailsBORepository;\n+import com.google.cloud.healthcare.fdamystudies.usermgmt.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.util.MyStudiesUserRegUtil;\n+import java.time.LocalDateTime;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Service;\n+import org.springframework.web.client.RestTemplate;\n+\n+@Service\n+public class UserRegistrationServiceImpl implements UserRegistrationService {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserRegistrationServiceImpl.class.getName());\n+\n+  @Autowired private UserDetailsBORepository userDetailsRepository;\n+\n+  @Autowired private CommonDao commonDao;\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private RestTemplate restTemplate;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @Autowired private EmailService emailService;\n+\n+  @Value(\"${register.url}\")\n+  private String authRegisterUrl;\n+\n+  @Value(\"${email.code.expire_time}\")\n+  private long expireTime;\n+\n+  @Override\n+  public UserRegistrationResponse register(UserRegistrationForm user) {\n+    logger.entry(\"begin register()\");\n+\n+    // find appInfoId using appId\n+    AppOrgInfoBean appOrgInfoBean =\n+        commonDao.getUserAppDetailsByAllApi(user.getUserId(), user.getAppId(), user.getOrgId());\n+\n+    // find user by email and appId\n+    Optional<UserDetailsBO> optUserDetails =\n+        userDetailsRepository.findByEmailAndAppInfoId(\n+            user.getEmailId(), appOrgInfoBean.getAppInfoId());\n+\n+    // Return USER_ALREADY_EXISTS error code if user account already exists for the given email\n+    UserDetailsBO userDetailsBO = new UserDetailsBO();\n+    if (optUserDetails.isPresent()) {\n+      userDetailsBO = optUserDetails.get();\n+      if (StringUtils.isNotEmpty(userDetailsBO.getUserId())) {\n+        if (generateVerificationCode(userDetailsBO)) {\n+          generateAndSaveVerificationCode(userDetailsBO);\n+        }\n+\n+        logger.warn(USER_ALREADY_EXISTS.toString());\n+        throw new ErrorCodeException(USER_ALREADY_EXISTS);\n+      }\n+    }\n+\n+    // save user details\n+    userDetailsBO = toUserDetailsBO(user, userDetailsBO);\n+    userDetailsBO.setAppInfoId(appOrgInfoBean.getAppInfoId());\n+    userDetailsBO = userDetailsRepository.saveAndFlush(userDetailsBO);\n+\n+    // Call POST /users API to create a user account in oauth-scim-server\n+    UserResponse authUserResponse = registerUserInAuthServer(user);\n+\n+    // save authUserId and verfication code\n+    userDetailsBO.setUserId(authUserResponse.getUserId());\n+    userDetailsBO = userDetailsRepository.saveAndFlush(userDetailsBO);\n+\n+    // generate save and email the verification code\n+    userDetailsBO = generateAndSaveVerificationCode(userDetailsBO);\n+\n+    // verification code is empty if send email is failed\n+    if (StringUtils.isEmpty(userDetailsBO.getEmailCode())) {\n+      logger.warn(EMAIL_SEND_FAILED_EXCEPTION.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMjA2Ng==", "bodyText": "this should be a constant", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474822066", "createdAt": "2020-08-21T17:08:57Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserRegistrationServiceImpl.java", "diffHunk": "@@ -0,0 +1,179 @@\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.ErrorCode.EMAIL_SEND_FAILED_EXCEPTION;\n+import static com.google.cloud.healthcare.fdamystudies.common.ErrorCode.USER_ALREADY_EXISTS;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.AppOrgInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationForm;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.common.UserAccountStatus;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.dao.CommonDao;\n+import com.google.cloud.healthcare.fdamystudies.exceptions.ErrorCodeException;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserDetailsBORepository;\n+import com.google.cloud.healthcare.fdamystudies.usermgmt.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.util.MyStudiesUserRegUtil;\n+import java.time.LocalDateTime;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Service;\n+import org.springframework.web.client.RestTemplate;\n+\n+@Service\n+public class UserRegistrationServiceImpl implements UserRegistrationService {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserRegistrationServiceImpl.class.getName());\n+\n+  @Autowired private UserDetailsBORepository userDetailsRepository;\n+\n+  @Autowired private CommonDao commonDao;\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private RestTemplate restTemplate;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @Autowired private EmailService emailService;\n+\n+  @Value(\"${register.url}\")\n+  private String authRegisterUrl;\n+\n+  @Value(\"${email.code.expire_time}\")\n+  private long expireTime;\n+\n+  @Override\n+  public UserRegistrationResponse register(UserRegistrationForm user) {\n+    logger.entry(\"begin register()\");\n+\n+    // find appInfoId using appId\n+    AppOrgInfoBean appOrgInfoBean =\n+        commonDao.getUserAppDetailsByAllApi(user.getUserId(), user.getAppId(), user.getOrgId());\n+\n+    // find user by email and appId\n+    Optional<UserDetailsBO> optUserDetails =\n+        userDetailsRepository.findByEmailAndAppInfoId(\n+            user.getEmailId(), appOrgInfoBean.getAppInfoId());\n+\n+    // Return USER_ALREADY_EXISTS error code if user account already exists for the given email\n+    UserDetailsBO userDetailsBO = new UserDetailsBO();\n+    if (optUserDetails.isPresent()) {\n+      userDetailsBO = optUserDetails.get();\n+      if (StringUtils.isNotEmpty(userDetailsBO.getUserId())) {\n+        if (generateVerificationCode(userDetailsBO)) {\n+          generateAndSaveVerificationCode(userDetailsBO);\n+        }\n+\n+        logger.warn(USER_ALREADY_EXISTS.toString());\n+        throw new ErrorCodeException(USER_ALREADY_EXISTS);\n+      }\n+    }\n+\n+    // save user details\n+    userDetailsBO = toUserDetailsBO(user, userDetailsBO);\n+    userDetailsBO.setAppInfoId(appOrgInfoBean.getAppInfoId());\n+    userDetailsBO = userDetailsRepository.saveAndFlush(userDetailsBO);\n+\n+    // Call POST /users API to create a user account in oauth-scim-server\n+    UserResponse authUserResponse = registerUserInAuthServer(user);\n+\n+    // save authUserId and verfication code\n+    userDetailsBO.setUserId(authUserResponse.getUserId());\n+    userDetailsBO = userDetailsRepository.saveAndFlush(userDetailsBO);\n+\n+    // generate save and email the verification code\n+    userDetailsBO = generateAndSaveVerificationCode(userDetailsBO);\n+\n+    // verification code is empty if send email is failed\n+    if (StringUtils.isEmpty(userDetailsBO.getEmailCode())) {\n+      logger.warn(EMAIL_SEND_FAILED_EXCEPTION.toString());\n+      throw new ErrorCodeException(EMAIL_SEND_FAILED_EXCEPTION);\n+    }\n+\n+    logger.exit(\"user account successfully created and email sent with verification code\");\n+\n+    return new UserRegistrationResponse(\n+        String.valueOf(userDetailsBO.getUserDetailsId()),\n+        authUserResponse.getTempRegId(),\n+        authUserResponse.getUserId());\n+  }\n+\n+  private boolean generateVerificationCode(UserDetailsBO userDetailsBO) {\n+    return UserAccountStatus.PENDING_CONFIRMATION.getStatus() == userDetailsBO.getStatus()\n+        && (StringUtils.isEmpty(userDetailsBO.getEmailCode())\n+            || LocalDateTime.now().isAfter(userDetailsBO.getCodeExpireDate()));\n+  }\n+\n+  private UserDetailsBO generateAndSaveVerificationCode(UserDetailsBO userDetailsBO) {\n+    String verificationCode = RandomStringUtils.randomAlphanumeric(6);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMjk5OA==", "bodyText": "nit: either put in UserRegistrationForm or put in userDetailsBO and rename to fromUserRegistrationForm", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474822998", "createdAt": "2020-08-21T17:10:51Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserRegistrationServiceImpl.java", "diffHunk": "@@ -0,0 +1,179 @@\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.ErrorCode.EMAIL_SEND_FAILED_EXCEPTION;\n+import static com.google.cloud.healthcare.fdamystudies.common.ErrorCode.USER_ALREADY_EXISTS;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.AppOrgInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationForm;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.common.UserAccountStatus;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.dao.CommonDao;\n+import com.google.cloud.healthcare.fdamystudies.exceptions.ErrorCodeException;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserDetailsBORepository;\n+import com.google.cloud.healthcare.fdamystudies.usermgmt.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.util.MyStudiesUserRegUtil;\n+import java.time.LocalDateTime;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Service;\n+import org.springframework.web.client.RestTemplate;\n+\n+@Service\n+public class UserRegistrationServiceImpl implements UserRegistrationService {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserRegistrationServiceImpl.class.getName());\n+\n+  @Autowired private UserDetailsBORepository userDetailsRepository;\n+\n+  @Autowired private CommonDao commonDao;\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private RestTemplate restTemplate;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @Autowired private EmailService emailService;\n+\n+  @Value(\"${register.url}\")\n+  private String authRegisterUrl;\n+\n+  @Value(\"${email.code.expire_time}\")\n+  private long expireTime;\n+\n+  @Override\n+  public UserRegistrationResponse register(UserRegistrationForm user) {\n+    logger.entry(\"begin register()\");\n+\n+    // find appInfoId using appId\n+    AppOrgInfoBean appOrgInfoBean =\n+        commonDao.getUserAppDetailsByAllApi(user.getUserId(), user.getAppId(), user.getOrgId());\n+\n+    // find user by email and appId\n+    Optional<UserDetailsBO> optUserDetails =\n+        userDetailsRepository.findByEmailAndAppInfoId(\n+            user.getEmailId(), appOrgInfoBean.getAppInfoId());\n+\n+    // Return USER_ALREADY_EXISTS error code if user account already exists for the given email\n+    UserDetailsBO userDetailsBO = new UserDetailsBO();\n+    if (optUserDetails.isPresent()) {\n+      userDetailsBO = optUserDetails.get();\n+      if (StringUtils.isNotEmpty(userDetailsBO.getUserId())) {\n+        if (generateVerificationCode(userDetailsBO)) {\n+          generateAndSaveVerificationCode(userDetailsBO);\n+        }\n+\n+        logger.warn(USER_ALREADY_EXISTS.toString());\n+        throw new ErrorCodeException(USER_ALREADY_EXISTS);\n+      }\n+    }\n+\n+    // save user details\n+    userDetailsBO = toUserDetailsBO(user, userDetailsBO);\n+    userDetailsBO.setAppInfoId(appOrgInfoBean.getAppInfoId());\n+    userDetailsBO = userDetailsRepository.saveAndFlush(userDetailsBO);\n+\n+    // Call POST /users API to create a user account in oauth-scim-server\n+    UserResponse authUserResponse = registerUserInAuthServer(user);\n+\n+    // save authUserId and verfication code\n+    userDetailsBO.setUserId(authUserResponse.getUserId());\n+    userDetailsBO = userDetailsRepository.saveAndFlush(userDetailsBO);\n+\n+    // generate save and email the verification code\n+    userDetailsBO = generateAndSaveVerificationCode(userDetailsBO);\n+\n+    // verification code is empty if send email is failed\n+    if (StringUtils.isEmpty(userDetailsBO.getEmailCode())) {\n+      logger.warn(EMAIL_SEND_FAILED_EXCEPTION.toString());\n+      throw new ErrorCodeException(EMAIL_SEND_FAILED_EXCEPTION);\n+    }\n+\n+    logger.exit(\"user account successfully created and email sent with verification code\");\n+\n+    return new UserRegistrationResponse(\n+        String.valueOf(userDetailsBO.getUserDetailsId()),\n+        authUserResponse.getTempRegId(),\n+        authUserResponse.getUserId());\n+  }\n+\n+  private boolean generateVerificationCode(UserDetailsBO userDetailsBO) {\n+    return UserAccountStatus.PENDING_CONFIRMATION.getStatus() == userDetailsBO.getStatus()\n+        && (StringUtils.isEmpty(userDetailsBO.getEmailCode())\n+            || LocalDateTime.now().isAfter(userDetailsBO.getCodeExpireDate()));\n+  }\n+\n+  private UserDetailsBO generateAndSaveVerificationCode(UserDetailsBO userDetailsBO) {\n+    String verificationCode = RandomStringUtils.randomAlphanumeric(6);\n+    EmailResponse emailResponse = sendConfirmationEmail(userDetailsBO, verificationCode);\n+    if (MessageCode.EMAIL_ACCEPTED_BY_MAIL_SERVER.getMessage().equals(emailResponse.getMessage())) {\n+      userDetailsBO.setEmailCode(verificationCode);\n+      userDetailsBO.setCodeExpireDate(LocalDateTime.now().plusMinutes(expireTime));\n+      userDetailsBO = userDetailsRepository.saveAndFlush(userDetailsBO);\n+    }\n+    return userDetailsBO;\n+  }\n+\n+  private UserDetailsBO toUserDetailsBO(UserRegistrationForm user, UserDetailsBO userDetailsBO) {\n+    userDetailsBO.setStatus(UserAccountStatus.PENDING_CONFIRMATION.getStatus());\n+    userDetailsBO.setVerificationDate(MyStudiesUserRegUtil.getCurrentUtilDateTime());\n+    userDetailsBO.setUserId(user.getUserId());\n+    userDetailsBO.setEmail(user.getEmailId());\n+    userDetailsBO.setUsePassCode(user.isUsePassCode());\n+    userDetailsBO.setLocalNotificationFlag(user.isLocalNotification());\n+    userDetailsBO.setRemoteNotificationFlag(user.isRemoteNotification());\n+    userDetailsBO.setTouchId(user.isTouchId());\n+    return userDetailsBO;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyNDMyNA==", "bodyText": "nit: break into multiple lines", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474824324", "createdAt": "2020-08-21T17:13:37Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/UserRegistrationControllerTest.java", "diffHunk": "@@ -62,87 +75,67 @@ public void healthCheck() throws Exception {\n     mockMvc.perform(get(\"/healthCheck\")).andDo(print()).andExpect(status().isOk());\n   }\n \n-  @Order(1)\n   @Test\n-  public void shouldReturnBadRequestForInvalidUserDetails() throws Exception {\n+  public void shouldReturnBadRequestForRegisterUser() throws Exception {\n     HttpHeaders headers =\n-        TestUtils.getCommonHeaders(\n-            Constants.APP_ID_HEADER,\n-            Constants.ORG_ID_HEADER,\n-            Constants.CLIENT_ID_HEADER,\n-            Constants.SECRET_KEY_HEADER);\n-\n-    // password is equalTo emailId\n-    String requestJson = getRegisterUser(Constants.EMAIL_ID, Constants.EMAIL_ID);\n-    mockMvc\n-        .perform(\n-            post(REGISTER_PATH).content(requestJson).headers(headers).contextPath(getContextPath()))\n-        .andDo(print())\n-        .andExpect(status().isBadRequest())\n-        .andExpect(jsonPath(\"$.code\", is(HttpStatus.BAD_REQUEST.value())))\n-        .andExpect(jsonPath(\"$.message\", is(Constants.INVALID_PASSWORD)));\n+        TestUtils.getCommonHeaders(Constants.APP_ID_HEADER, Constants.ORG_ID_HEADER);\n \n-    verify(\n-        1,\n-        postRequestedFor(urlEqualTo(\"/AuthServer/register\"))\n-            .withRequestBody(new ContainsPattern(Constants.EMAIL_ID)));\n+    UserRegistrationForm userRegistrationForm = new UserRegistrationForm();\n+    MvcResult result =\n+        mockMvc\n+            .perform(\n+                post(REGISTER_PATH)\n+                    .content(asJsonString(userRegistrationForm))\n+                    .headers(headers)\n+                    .contextPath(getContextPath()))\n+            .andDo(print())\n+            .andExpect(status().isBadRequest())\n+            .andExpect(jsonPath(\"$.violations\").isArray())\n+            .andReturn();\n+\n+    String actualResponse = result.getResponse().getContentAsString();\n+    String expectedResponse = readJsonFile(\"/responses/register_account_bad_request.json\");\n+    JSONAssert.assertEquals(expectedResponse, actualResponse, JSONCompareMode.NON_EXTENSIBLE);\n+  }\n+\n+  @Test\n+  public void shouldReturnBadRequestForInvalidPassword() throws Exception {\n+    HttpHeaders headers =\n+        TestUtils.getCommonHeaders(Constants.APP_ID_HEADER, Constants.ORG_ID_HEADER);\n \n     // invalid  password\n-    requestJson = getRegisterUser(Constants.EMAIL_ID, Constants.INVALID_PASSWORD);\n+    String requestJson = getRegisterUser(\"mockito123@gmail.com\", Constants.INVALID_PASSWORD);\n     mockMvc\n         .perform(\n             post(REGISTER_PATH).content(requestJson).headers(headers).contextPath(getContextPath()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyNTIwMg==", "bodyText": "orgName should be removed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474825202", "createdAt": "2020-08-21T17:15:19Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/test/resources/application-mockit.properties", "diffHunk": "@@ -108,4 +108,21 @@ contactus.email=<ContactUs Mail>\n contactus.mail.subject=<App Name> App Helpdesk:\n \n contactus.mail.content=<html><body><div><div><span>Hi</span></div><br><div style='padding-bottom:10px;'><span>A user of the &lt;App Neme&gt; mobile app has reached out this helpdesk via the &#39;Contact Us&#39; form in the mobile app. The details submitted in the form are given below:</span></div><div><div>___________________________________________</div><div style='padding-top:20px;'>First Name: $firstName</div><div style='padding-top:10px;'>Email: <a href='mailto: $email'> $email </a></div><div style='padding-top:10px;'>Subject: $subject</div><div style='padding-top:10px;padding-bottom:10px'>Message: $body</div></div><div>___________________________________________</div><div style='padding-top:10px;'><span>Please respond to the app user at the email provided.</span></div><br><div><span>Thanks,</span><br><span>The &lt;Org Name&gt; MyStudies Support Team</span><br><span>-------------------------------------------</span><br><span style='font-size:10px;'>Note: This is an auto-generated email. Please do not reply.</span></div></div></body></html>\n-# Feedback & Contactus mail content ends\n\\ No newline at end of file\n+\n+# Feedback & Contactus mail content ends\n+\n+org.name = Org Name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyNTYwNQ==", "bodyText": "should the rest of the auth server URLs also be updated to the new auth server?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474825605", "createdAt": "2020-08-21T17:16:11Z", "author": {"login": "zohrehj"}, "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/test/resources/application-mockit.properties", "diffHunk": "@@ -73,7 +73,7 @@ spring.main.allow-bean-definition-overriding=true\n #Auth Server Local\n authServerAccessTokenValidationUrl=http://localhost:8080/AuthServer/tokenAuthentication\n auth.server.url=http://localhost:8080/AuthServer\n-register.url=http://localhost:8080/AuthServer/register\n+register.url=http://localhost:8080/oauth-scim-service/users\n auth.server.updateStatusUrl=http://localhost:8080/AuthServer/updateStatus", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0be44e3c1c8936c27233b2b799dd48a77169653", "author": {"user": {"login": "madhurya-btc", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/f0be44e3c1c8936c27233b2b799dd48a77169653", "committedDate": "2020-08-23T15:08:02Z", "message": "PR comment fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczNTE4NTU3", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#pullrequestreview-473518557", "createdAt": "2020-08-24T14:01:22Z", "commit": {"oid": "f0be44e3c1c8936c27233b2b799dd48a77169653"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDowMToyMlrOHFmc9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDowMToyMlrOHFmc9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYzNDkzNQ==", "bodyText": "you can remove the @ToString.Exclude clause from all methods now", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475634935", "createdAt": "2020-08-24T14:01:22Z", "author": {"login": "zohrehj"}, "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationResponse.java", "diffHunk": "@@ -13,7 +13,6 @@\n import lombok.Getter;\n import lombok.NoArgsConstructor;\n import lombok.Setter;\n-import lombok.ToString;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0be44e3c1c8936c27233b2b799dd48a77169653"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "958b223cc4766b0ed8ff51d36a700476f7ea6522", "author": {"user": {"login": "madhurya-btc", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/958b223cc4766b0ed8ff51d36a700476f7ea6522", "committedDate": "2020-08-24T16:05:44Z", "message": "PR comment fixes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14038340a2434a80115843dce481aee8be84f0fd", "author": {"user": {"login": "madhurya-btc", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/14038340a2434a80115843dce481aee8be84f0fd", "committedDate": "2020-08-26T08:54:39Z", "message": "As per mobile team requirement, attribute value authUserId is changed to userId"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d80fb9eb32333eb860c0e33f91333037ad9889c", "author": {"user": {"login": "madhurya-btc", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/4d80fb9eb32333eb860c0e33f91333037ad9889c", "committedDate": "2020-08-26T09:24:35Z", "message": "test cases failure fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NTE3MDQy", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#pullrequestreview-475517042", "createdAt": "2020-08-26T13:58:17Z", "commit": {"oid": "4d80fb9eb32333eb860c0e33f91333037ad9889c"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ff1cd96138b9797f55302dfcd111fda482919d2", "author": {"user": {"login": "madhurya-btc", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/4ff1cd96138b9797f55302dfcd111fda482919d2", "committedDate": "2020-08-26T14:44:09Z", "message": "Merge branch 'develop' into user-mgmt-oauth-scim-register-implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c165d8c6e95e68ecac00f7a529898a55787a64f8", "author": {"user": {"login": "madhurya-btc", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/c165d8c6e95e68ecac00f7a529898a55787a64f8", "committedDate": "2020-08-27T05:43:32Z", "message": "Resolved conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06fe79bbe960624056e8757ee91fbf2ede86e26b", "author": {"user": {"login": "navya-BTC", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/06fe79bbe960624056e8757ee91fbf2ede86e26b", "committedDate": "2020-08-27T07:39:43Z", "message": "resolved Testcases issue\n\nresolved Testcases issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bba9dc1ae5965aa895f66e5e07ff5d721491d9b1", "author": {"user": {"login": "madhurya-btc", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/bba9dc1ae5965aa895f66e5e07ff5d721491d9b1", "committedDate": "2020-08-27T10:42:16Z", "message": "Merge branch 'develop' into user-mgmt-oauth-scim-register-implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ea565e78fc264e4c1faa55434371c843f04cb6b", "author": {"user": {"login": "madhurya-btc", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/0ea565e78fc264e4c1faa55434371c843f04cb6b", "committedDate": "2020-08-27T10:58:03Z", "message": "resolved conflicts and organized imports"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NjQ3NzEy", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#pullrequestreview-476647712", "createdAt": "2020-08-27T11:59:53Z", "commit": {"oid": "0ea565e78fc264e4c1faa55434371c843f04cb6b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 712, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}