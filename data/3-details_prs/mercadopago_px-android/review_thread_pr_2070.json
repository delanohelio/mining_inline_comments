{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5NTUzODU1", "number": 2070, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwNjo0Mzo1MFrODomVxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwNzoyMjo0OFrODom0TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODk3Nzk2OnYy", "diffSide": "RIGHT", "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/di/Session.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwNjo0Mzo1MFrOF3Pl2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwNzowMToxMFrOF3P7Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ3MTQ0OQ==", "bodyText": "el valor de paymentSettings.getCurrency va a ser resuelto al momento que se llame getPaymentRewardRepository, que va a ser al momento de realizar las inyecciones de dependencia, pasaria el repositorio de paymentSettings directamente a CongratsRepositoryImpl para que resuelva lo que necesite en su momento (y de paso es un parametro menos)", "url": "https://github.com/mercadopago/px-android/pull/2070#discussion_r393471449", "createdAt": "2020-03-17T06:43:50Z", "author": {"login": "cgaggino"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/di/Session.java", "diffHunk": "@@ -447,17 +447,17 @@ public PaymentMethodsRepository getPaymentMethodsRepository() {\n         return paymentMethodsRepository;\n     }\n \n-    public PaymentRewardRepository getPaymentRewardRepository() {\n-        if (paymentRewardRepository == null) {\n+    public CongratsRepository getCongratsRepository() {\n+        if (congratsRepository == null) {\n             final Context applicationContext = getApplicationContext();\n-            final PaymentRewardService paymentRewardService =\n-                RetrofitUtil.getRetrofitClient(applicationContext).create(PaymentRewardService.class);\n+            final CongratsService congratsService =\n+                RetrofitUtil.getRetrofitClient(applicationContext).create(CongratsService.class);\n             final PaymentSettingRepository paymentSettings = getConfigurationModule().getPaymentSettings();\n-            paymentRewardRepository =\n-                new PaymentRewardRepositoryImpl(getPaymentRewardCache(), paymentRewardService,\n-                    paymentSettings.getPrivateKey(), getPlatform(applicationContext),\n+            congratsRepository =\n+                new CongratsRepositoryImpl(getPaymentRewardCache(), congratsService, paymentSettings.getPrivateKey(),\n+                    paymentSettings.getCurrency(), getPlatform(applicationContext),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33b579b3f7d125fff3a01cced6452155f6f18d4d"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ3NjkzOA==", "bodyText": "Si, ya lo tuve que arreglar, me tir\u00f3 el famoso error de que no puede traer currency del storage", "url": "https://github.com/mercadopago/px-android/pull/2070#discussion_r393476938", "createdAt": "2020-03-17T07:01:10Z", "author": {"login": "guchito9"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/di/Session.java", "diffHunk": "@@ -447,17 +447,17 @@ public PaymentMethodsRepository getPaymentMethodsRepository() {\n         return paymentMethodsRepository;\n     }\n \n-    public PaymentRewardRepository getPaymentRewardRepository() {\n-        if (paymentRewardRepository == null) {\n+    public CongratsRepository getCongratsRepository() {\n+        if (congratsRepository == null) {\n             final Context applicationContext = getApplicationContext();\n-            final PaymentRewardService paymentRewardService =\n-                RetrofitUtil.getRetrofitClient(applicationContext).create(PaymentRewardService.class);\n+            final CongratsService congratsService =\n+                RetrofitUtil.getRetrofitClient(applicationContext).create(CongratsService.class);\n             final PaymentSettingRepository paymentSettings = getConfigurationModule().getPaymentSettings();\n-            paymentRewardRepository =\n-                new PaymentRewardRepositoryImpl(getPaymentRewardCache(), paymentRewardService,\n-                    paymentSettings.getPrivateKey(), getPlatform(applicationContext),\n+            congratsRepository =\n+                new CongratsRepositoryImpl(getPaymentRewardCache(), congratsService, paymentSettings.getPrivateKey(),\n+                    paymentSettings.getCurrency(), getPlatform(applicationContext),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ3MTQ0OQ=="}, "originalCommit": {"oid": "33b579b3f7d125fff3a01cced6452155f6f18d4d"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTAyNzQ2OnYy", "diffSide": "RIGHT", "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/datasource/CongratsRepositoryImpl.kt", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwNzowODozMlrOF3QEPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzozODoxM1rOF3cnIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ3OTIyOA==", "bodyText": "No ofrecemos remedies si no tiene AT?", "url": "https://github.com/mercadopago/px-android/pull/2070#discussion_r393479228", "createdAt": "2020-03-17T07:08:32Z", "author": {"login": "cgaggino"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/datasource/CongratsRepositoryImpl.kt", "diffHunk": "@@ -0,0 +1,91 @@\n+package com.mercadopago.android.px.internal.datasource\n+\n+import com.mercadopago.android.px.internal.repository.CongratsRepository\n+import com.mercadopago.android.px.internal.repository.CongratsRepository.PostPaymentCallback\n+import com.mercadopago.android.px.internal.repository.PaymentSettingRepository\n+import com.mercadopago.android.px.internal.services.CongratsService\n+import com.mercadopago.android.px.internal.util.StatusHelper\n+import com.mercadopago.android.px.internal.util.TextUtil\n+import com.mercadopago.android.px.internal.viewmodel.BusinessPaymentModel\n+import com.mercadopago.android.px.internal.viewmodel.PaymentModel\n+import com.mercadopago.android.px.model.*\n+import com.mercadopago.android.px.model.internal.PaymentReward\n+import com.mercadopago.android.px.model.internal.remedies.RemediesResponse\n+import com.mercadopago.android.px.services.BuildConfig\n+import kotlinx.coroutines.CoroutineScope\n+import kotlinx.coroutines.Dispatchers\n+import kotlinx.coroutines.launch\n+import kotlinx.coroutines.withContext\n+\n+class CongratsRepositoryImpl(private val congratsService: CongratsService,\n+        private val paymentSetting: PaymentSettingRepository, private val platform: String, private val locale: String,\n+        private val flow: String?) : CongratsRepository {\n+\n+    private val paymentRewardCache = HashMap<String, PaymentReward>()\n+    private val remediesCache = HashMap<String, RemediesResponse>()\n+    private val privateKey = paymentSetting.privateKey\n+\n+    override fun getPostPaymentData(payment: IPaymentDescriptor, paymentResult: PaymentResult,\n+                                    callback: PostPaymentCallback) {\n+        val hasAccessToken = TextUtil.isNotEmpty(privateKey)\n+        val hasToReturnEmptyResponse = !hasAccessToken\n+        val isSuccess = StatusHelper.isSuccess(payment)\n+        CoroutineScope(Dispatchers.IO).launch {\n+            val paymentId = payment.paymentIds?.get(0) ?: payment.id.toString()\n+            val paymentReward = when {\n+                hasToReturnEmptyResponse || !isSuccess -> PaymentReward.EMPTY\n+                paymentRewardCache.containsKey(paymentId) -> paymentRewardCache[paymentId]!!\n+                else -> getPaymentReward(payment, paymentResult).apply { paymentRewardCache[paymentId] = this }\n+            }\n+            val remediesResponse = when {\n+                hasToReturnEmptyResponse || isSuccess -> RemediesResponse.EMPTY", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3278c6e26ee765f3d4ad81ad8cd11d506c4c109"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ4MjQzNQ==", "bodyText": "No, es requerido por el endpoint, pero estoy dudando de que sea realmente asi", "url": "https://github.com/mercadopago/px-android/pull/2070#discussion_r393482435", "createdAt": "2020-03-17T07:18:31Z", "author": {"login": "guchito9"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/datasource/CongratsRepositoryImpl.kt", "diffHunk": "@@ -0,0 +1,91 @@\n+package com.mercadopago.android.px.internal.datasource\n+\n+import com.mercadopago.android.px.internal.repository.CongratsRepository\n+import com.mercadopago.android.px.internal.repository.CongratsRepository.PostPaymentCallback\n+import com.mercadopago.android.px.internal.repository.PaymentSettingRepository\n+import com.mercadopago.android.px.internal.services.CongratsService\n+import com.mercadopago.android.px.internal.util.StatusHelper\n+import com.mercadopago.android.px.internal.util.TextUtil\n+import com.mercadopago.android.px.internal.viewmodel.BusinessPaymentModel\n+import com.mercadopago.android.px.internal.viewmodel.PaymentModel\n+import com.mercadopago.android.px.model.*\n+import com.mercadopago.android.px.model.internal.PaymentReward\n+import com.mercadopago.android.px.model.internal.remedies.RemediesResponse\n+import com.mercadopago.android.px.services.BuildConfig\n+import kotlinx.coroutines.CoroutineScope\n+import kotlinx.coroutines.Dispatchers\n+import kotlinx.coroutines.launch\n+import kotlinx.coroutines.withContext\n+\n+class CongratsRepositoryImpl(private val congratsService: CongratsService,\n+        private val paymentSetting: PaymentSettingRepository, private val platform: String, private val locale: String,\n+        private val flow: String?) : CongratsRepository {\n+\n+    private val paymentRewardCache = HashMap<String, PaymentReward>()\n+    private val remediesCache = HashMap<String, RemediesResponse>()\n+    private val privateKey = paymentSetting.privateKey\n+\n+    override fun getPostPaymentData(payment: IPaymentDescriptor, paymentResult: PaymentResult,\n+                                    callback: PostPaymentCallback) {\n+        val hasAccessToken = TextUtil.isNotEmpty(privateKey)\n+        val hasToReturnEmptyResponse = !hasAccessToken\n+        val isSuccess = StatusHelper.isSuccess(payment)\n+        CoroutineScope(Dispatchers.IO).launch {\n+            val paymentId = payment.paymentIds?.get(0) ?: payment.id.toString()\n+            val paymentReward = when {\n+                hasToReturnEmptyResponse || !isSuccess -> PaymentReward.EMPTY\n+                paymentRewardCache.containsKey(paymentId) -> paymentRewardCache[paymentId]!!\n+                else -> getPaymentReward(payment, paymentResult).apply { paymentRewardCache[paymentId] = this }\n+            }\n+            val remediesResponse = when {\n+                hasToReturnEmptyResponse || isSuccess -> RemediesResponse.EMPTY", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ3OTIyOA=="}, "originalCommit": {"oid": "b3278c6e26ee765f3d4ad81ad8cd11d506c4c109"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ4NjAyOA==", "bodyText": "Yo creo que a un whitelabel si le fallo por cvv se lo podriamos pedir en la congrat, un highrisk no porque no puede ir a kyc", "url": "https://github.com/mercadopago/px-android/pull/2070#discussion_r393486028", "createdAt": "2020-03-17T07:28:40Z", "author": {"login": "cgaggino"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/datasource/CongratsRepositoryImpl.kt", "diffHunk": "@@ -0,0 +1,91 @@\n+package com.mercadopago.android.px.internal.datasource\n+\n+import com.mercadopago.android.px.internal.repository.CongratsRepository\n+import com.mercadopago.android.px.internal.repository.CongratsRepository.PostPaymentCallback\n+import com.mercadopago.android.px.internal.repository.PaymentSettingRepository\n+import com.mercadopago.android.px.internal.services.CongratsService\n+import com.mercadopago.android.px.internal.util.StatusHelper\n+import com.mercadopago.android.px.internal.util.TextUtil\n+import com.mercadopago.android.px.internal.viewmodel.BusinessPaymentModel\n+import com.mercadopago.android.px.internal.viewmodel.PaymentModel\n+import com.mercadopago.android.px.model.*\n+import com.mercadopago.android.px.model.internal.PaymentReward\n+import com.mercadopago.android.px.model.internal.remedies.RemediesResponse\n+import com.mercadopago.android.px.services.BuildConfig\n+import kotlinx.coroutines.CoroutineScope\n+import kotlinx.coroutines.Dispatchers\n+import kotlinx.coroutines.launch\n+import kotlinx.coroutines.withContext\n+\n+class CongratsRepositoryImpl(private val congratsService: CongratsService,\n+        private val paymentSetting: PaymentSettingRepository, private val platform: String, private val locale: String,\n+        private val flow: String?) : CongratsRepository {\n+\n+    private val paymentRewardCache = HashMap<String, PaymentReward>()\n+    private val remediesCache = HashMap<String, RemediesResponse>()\n+    private val privateKey = paymentSetting.privateKey\n+\n+    override fun getPostPaymentData(payment: IPaymentDescriptor, paymentResult: PaymentResult,\n+                                    callback: PostPaymentCallback) {\n+        val hasAccessToken = TextUtil.isNotEmpty(privateKey)\n+        val hasToReturnEmptyResponse = !hasAccessToken\n+        val isSuccess = StatusHelper.isSuccess(payment)\n+        CoroutineScope(Dispatchers.IO).launch {\n+            val paymentId = payment.paymentIds?.get(0) ?: payment.id.toString()\n+            val paymentReward = when {\n+                hasToReturnEmptyResponse || !isSuccess -> PaymentReward.EMPTY\n+                paymentRewardCache.containsKey(paymentId) -> paymentRewardCache[paymentId]!!\n+                else -> getPaymentReward(payment, paymentResult).apply { paymentRewardCache[paymentId] = this }\n+            }\n+            val remediesResponse = when {\n+                hasToReturnEmptyResponse || isSuccess -> RemediesResponse.EMPTY", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ3OTIyOA=="}, "originalCommit": {"oid": "b3278c6e26ee765f3d4ad81ad8cd11d506c4c109"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4NDc2OQ==", "bodyText": "Claro, eso seguro, por ah\u00ed ahora sigo as\u00ed y despu\u00e9s lo unifico, pero quiero confirmar si puedo ir al endpoint o no", "url": "https://github.com/mercadopago/px-android/pull/2070#discussion_r393684769", "createdAt": "2020-03-17T13:38:13Z", "author": {"login": "guchito9"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/datasource/CongratsRepositoryImpl.kt", "diffHunk": "@@ -0,0 +1,91 @@\n+package com.mercadopago.android.px.internal.datasource\n+\n+import com.mercadopago.android.px.internal.repository.CongratsRepository\n+import com.mercadopago.android.px.internal.repository.CongratsRepository.PostPaymentCallback\n+import com.mercadopago.android.px.internal.repository.PaymentSettingRepository\n+import com.mercadopago.android.px.internal.services.CongratsService\n+import com.mercadopago.android.px.internal.util.StatusHelper\n+import com.mercadopago.android.px.internal.util.TextUtil\n+import com.mercadopago.android.px.internal.viewmodel.BusinessPaymentModel\n+import com.mercadopago.android.px.internal.viewmodel.PaymentModel\n+import com.mercadopago.android.px.model.*\n+import com.mercadopago.android.px.model.internal.PaymentReward\n+import com.mercadopago.android.px.model.internal.remedies.RemediesResponse\n+import com.mercadopago.android.px.services.BuildConfig\n+import kotlinx.coroutines.CoroutineScope\n+import kotlinx.coroutines.Dispatchers\n+import kotlinx.coroutines.launch\n+import kotlinx.coroutines.withContext\n+\n+class CongratsRepositoryImpl(private val congratsService: CongratsService,\n+        private val paymentSetting: PaymentSettingRepository, private val platform: String, private val locale: String,\n+        private val flow: String?) : CongratsRepository {\n+\n+    private val paymentRewardCache = HashMap<String, PaymentReward>()\n+    private val remediesCache = HashMap<String, RemediesResponse>()\n+    private val privateKey = paymentSetting.privateKey\n+\n+    override fun getPostPaymentData(payment: IPaymentDescriptor, paymentResult: PaymentResult,\n+                                    callback: PostPaymentCallback) {\n+        val hasAccessToken = TextUtil.isNotEmpty(privateKey)\n+        val hasToReturnEmptyResponse = !hasAccessToken\n+        val isSuccess = StatusHelper.isSuccess(payment)\n+        CoroutineScope(Dispatchers.IO).launch {\n+            val paymentId = payment.paymentIds?.get(0) ?: payment.id.toString()\n+            val paymentReward = when {\n+                hasToReturnEmptyResponse || !isSuccess -> PaymentReward.EMPTY\n+                paymentRewardCache.containsKey(paymentId) -> paymentRewardCache[paymentId]!!\n+                else -> getPaymentReward(payment, paymentResult).apply { paymentRewardCache[paymentId] = this }\n+            }\n+            val remediesResponse = when {\n+                hasToReturnEmptyResponse || isSuccess -> RemediesResponse.EMPTY", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ3OTIyOA=="}, "originalCommit": {"oid": "b3278c6e26ee765f3d4ad81ad8cd11d506c4c109"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTAzNTUxOnYy", "diffSide": "RIGHT", "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/datasource/CongratsRepositoryImpl.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwNzoxMjo0OFrOF3QJgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwNzoxODo1MVrOF3QRPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ4MDU3OA==", "bodyText": "Que significa este exception?", "url": "https://github.com/mercadopago/px-android/pull/2070#discussion_r393480578", "createdAt": "2020-03-17T07:12:48Z", "author": {"login": "cgaggino"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/datasource/CongratsRepositoryImpl.kt", "diffHunk": "@@ -0,0 +1,91 @@\n+package com.mercadopago.android.px.internal.datasource\n+\n+import com.mercadopago.android.px.internal.repository.CongratsRepository\n+import com.mercadopago.android.px.internal.repository.CongratsRepository.PostPaymentCallback\n+import com.mercadopago.android.px.internal.repository.PaymentSettingRepository\n+import com.mercadopago.android.px.internal.services.CongratsService\n+import com.mercadopago.android.px.internal.util.StatusHelper\n+import com.mercadopago.android.px.internal.util.TextUtil\n+import com.mercadopago.android.px.internal.viewmodel.BusinessPaymentModel\n+import com.mercadopago.android.px.internal.viewmodel.PaymentModel\n+import com.mercadopago.android.px.model.*\n+import com.mercadopago.android.px.model.internal.PaymentReward\n+import com.mercadopago.android.px.model.internal.remedies.RemediesResponse\n+import com.mercadopago.android.px.services.BuildConfig\n+import kotlinx.coroutines.CoroutineScope\n+import kotlinx.coroutines.Dispatchers\n+import kotlinx.coroutines.launch\n+import kotlinx.coroutines.withContext\n+\n+class CongratsRepositoryImpl(private val congratsService: CongratsService,\n+        private val paymentSetting: PaymentSettingRepository, private val platform: String, private val locale: String,\n+        private val flow: String?) : CongratsRepository {\n+\n+    private val paymentRewardCache = HashMap<String, PaymentReward>()\n+    private val remediesCache = HashMap<String, RemediesResponse>()\n+    private val privateKey = paymentSetting.privateKey\n+\n+    override fun getPostPaymentData(payment: IPaymentDescriptor, paymentResult: PaymentResult,\n+                                    callback: PostPaymentCallback) {\n+        val hasAccessToken = TextUtil.isNotEmpty(privateKey)\n+        val hasToReturnEmptyResponse = !hasAccessToken\n+        val isSuccess = StatusHelper.isSuccess(payment)\n+        CoroutineScope(Dispatchers.IO).launch {\n+            val paymentId = payment.paymentIds?.get(0) ?: payment.id.toString()\n+            val paymentReward = when {\n+                hasToReturnEmptyResponse || !isSuccess -> PaymentReward.EMPTY\n+                paymentRewardCache.containsKey(paymentId) -> paymentRewardCache[paymentId]!!\n+                else -> getPaymentReward(payment, paymentResult).apply { paymentRewardCache[paymentId] = this }\n+            }\n+            val remediesResponse = when {\n+                hasToReturnEmptyResponse || isSuccess -> RemediesResponse.EMPTY\n+                remediesCache.containsKey(paymentId) -> remediesCache[paymentId]!!\n+                else -> getRemedies(payment).apply { remediesCache[paymentId] = this }\n+            }\n+            withContext(Dispatchers.Main) {\n+                handleResult(payment, paymentResult, paymentReward, remediesResponse, paymentSetting.currency, callback)\n+            }\n+        }\n+    }\n+\n+    private suspend fun getPaymentReward(payment: IPaymentDescriptor, paymentResult: PaymentResult) =\n+        try {\n+            val joinedPaymentIds = TextUtil.join(payment.paymentIds)\n+            val campaignId = paymentResult.paymentData.campaign?.run { id } ?: \"\"\n+            val response = congratsService.getPaymentReward(BuildConfig.API_ENVIRONMENT, locale, privateKey,\n+                    joinedPaymentIds, platform, campaignId, flow).await()\n+            if (response.isSuccessful) {\n+                response.body()!!\n+            } else {\n+                PaymentReward.EMPTY\n+            }\n+        } catch (e: Exception) {\n+            PaymentReward.EMPTY", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3278c6e26ee765f3d4ad81ad8cd11d506c4c109"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ4MjU1Nw==", "bodyText": "No hay conexi\u00f3n", "url": "https://github.com/mercadopago/px-android/pull/2070#discussion_r393482557", "createdAt": "2020-03-17T07:18:51Z", "author": {"login": "guchito9"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/datasource/CongratsRepositoryImpl.kt", "diffHunk": "@@ -0,0 +1,91 @@\n+package com.mercadopago.android.px.internal.datasource\n+\n+import com.mercadopago.android.px.internal.repository.CongratsRepository\n+import com.mercadopago.android.px.internal.repository.CongratsRepository.PostPaymentCallback\n+import com.mercadopago.android.px.internal.repository.PaymentSettingRepository\n+import com.mercadopago.android.px.internal.services.CongratsService\n+import com.mercadopago.android.px.internal.util.StatusHelper\n+import com.mercadopago.android.px.internal.util.TextUtil\n+import com.mercadopago.android.px.internal.viewmodel.BusinessPaymentModel\n+import com.mercadopago.android.px.internal.viewmodel.PaymentModel\n+import com.mercadopago.android.px.model.*\n+import com.mercadopago.android.px.model.internal.PaymentReward\n+import com.mercadopago.android.px.model.internal.remedies.RemediesResponse\n+import com.mercadopago.android.px.services.BuildConfig\n+import kotlinx.coroutines.CoroutineScope\n+import kotlinx.coroutines.Dispatchers\n+import kotlinx.coroutines.launch\n+import kotlinx.coroutines.withContext\n+\n+class CongratsRepositoryImpl(private val congratsService: CongratsService,\n+        private val paymentSetting: PaymentSettingRepository, private val platform: String, private val locale: String,\n+        private val flow: String?) : CongratsRepository {\n+\n+    private val paymentRewardCache = HashMap<String, PaymentReward>()\n+    private val remediesCache = HashMap<String, RemediesResponse>()\n+    private val privateKey = paymentSetting.privateKey\n+\n+    override fun getPostPaymentData(payment: IPaymentDescriptor, paymentResult: PaymentResult,\n+                                    callback: PostPaymentCallback) {\n+        val hasAccessToken = TextUtil.isNotEmpty(privateKey)\n+        val hasToReturnEmptyResponse = !hasAccessToken\n+        val isSuccess = StatusHelper.isSuccess(payment)\n+        CoroutineScope(Dispatchers.IO).launch {\n+            val paymentId = payment.paymentIds?.get(0) ?: payment.id.toString()\n+            val paymentReward = when {\n+                hasToReturnEmptyResponse || !isSuccess -> PaymentReward.EMPTY\n+                paymentRewardCache.containsKey(paymentId) -> paymentRewardCache[paymentId]!!\n+                else -> getPaymentReward(payment, paymentResult).apply { paymentRewardCache[paymentId] = this }\n+            }\n+            val remediesResponse = when {\n+                hasToReturnEmptyResponse || isSuccess -> RemediesResponse.EMPTY\n+                remediesCache.containsKey(paymentId) -> remediesCache[paymentId]!!\n+                else -> getRemedies(payment).apply { remediesCache[paymentId] = this }\n+            }\n+            withContext(Dispatchers.Main) {\n+                handleResult(payment, paymentResult, paymentReward, remediesResponse, paymentSetting.currency, callback)\n+            }\n+        }\n+    }\n+\n+    private suspend fun getPaymentReward(payment: IPaymentDescriptor, paymentResult: PaymentResult) =\n+        try {\n+            val joinedPaymentIds = TextUtil.join(payment.paymentIds)\n+            val campaignId = paymentResult.paymentData.campaign?.run { id } ?: \"\"\n+            val response = congratsService.getPaymentReward(BuildConfig.API_ENVIRONMENT, locale, privateKey,\n+                    joinedPaymentIds, platform, campaignId, flow).await()\n+            if (response.isSuccessful) {\n+                response.body()!!\n+            } else {\n+                PaymentReward.EMPTY\n+            }\n+        } catch (e: Exception) {\n+            PaymentReward.EMPTY", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ4MDU3OA=="}, "originalCommit": {"oid": "b3278c6e26ee765f3d4ad81ad8cd11d506c4c109"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTA0MDkyOnYy", "diffSide": "LEFT", "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_result/model/remedies/RemediesResponse.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwNzoxNTozNlrOF3QNFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwNzoxOToyN1rOF3QSFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ4MTQ5NQ==", "bodyText": "Quedo el archivo vacio?", "url": "https://github.com/mercadopago/px-android/pull/2070#discussion_r393481495", "createdAt": "2020-03-17T07:15:36Z", "author": {"login": "cgaggino"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_result/model/remedies/RemediesResponse.kt", "diffHunk": "@@ -1,3 +0,0 @@\n-package com.mercadopago.android.px.internal.features.payment_result.model.remedies\n-\n-data class RemediesResponse(val suggestionPaymentMethod: SuggestionPaymentMethod)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3278c6e26ee765f3d4ad81ad8cd11d506c4c109"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ4Mjc3Mg==", "bodyText": "Todav\u00eda no termin\u00e9 las pegadas a remedies, dej\u00e9 el esqueleto hecho para el servicio", "url": "https://github.com/mercadopago/px-android/pull/2070#discussion_r393482772", "createdAt": "2020-03-17T07:19:27Z", "author": {"login": "guchito9"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_result/model/remedies/RemediesResponse.kt", "diffHunk": "@@ -1,3 +0,0 @@\n-package com.mercadopago.android.px.internal.features.payment_result.model.remedies\n-\n-data class RemediesResponse(val suggestionPaymentMethod: SuggestionPaymentMethod)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ4MTQ5NQ=="}, "originalCommit": {"oid": "b3278c6e26ee765f3d4ad81ad8cd11d506c4c109"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTA1NjEzOnYy", "diffSide": "RIGHT", "path": "px-services/src/main/java/com/mercadopago/android/px/internal/util/RetrofitUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwNzoyMjo0OFrOF3QWgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzo0MDoxMFrOF3crvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ4MzkwNA==", "bodyText": "La logica de retries funciona igual?", "url": "https://github.com/mercadopago/px-android/pull/2070#discussion_r393483904", "createdAt": "2020-03-17T07:22:48Z", "author": {"login": "cgaggino"}, "path": "px-services/src/main/java/com/mercadopago/android/px/internal/util/RetrofitUtil.java", "diffHunk": "@@ -32,6 +33,7 @@ private static Retrofit getRetrofit(final Context context,\n             .addConverterFactory(GsonConverterFactory.create(JsonUtil.getGson()))\n             .client(HttpClientUtil.getClient(context, connectTimeout, readTimeout, writeTimeout))\n             .addCallAdapterFactory(new ErrorHandlingCallAdapter.ErrorHandlingCallAdapterFactory())\n+            .addCallAdapterFactory(CoroutineCallAdapterFactory.create())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3278c6e26ee765f3d4ad81ad8cd11d506c4c109"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4NTk0OA==", "bodyText": "Lamentablemente no, cae por el adapter nuevo. Por ah\u00ed estar\u00eda bueno discutir si vale la pena llevarlo al mismo comportamiento, pero se puede hacer en el futuro.", "url": "https://github.com/mercadopago/px-android/pull/2070#discussion_r393685948", "createdAt": "2020-03-17T13:40:10Z", "author": {"login": "guchito9"}, "path": "px-services/src/main/java/com/mercadopago/android/px/internal/util/RetrofitUtil.java", "diffHunk": "@@ -32,6 +33,7 @@ private static Retrofit getRetrofit(final Context context,\n             .addConverterFactory(GsonConverterFactory.create(JsonUtil.getGson()))\n             .client(HttpClientUtil.getClient(context, connectTimeout, readTimeout, writeTimeout))\n             .addCallAdapterFactory(new ErrorHandlingCallAdapter.ErrorHandlingCallAdapterFactory())\n+            .addCallAdapterFactory(CoroutineCallAdapterFactory.create())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ4MzkwNA=="}, "originalCommit": {"oid": "b3278c6e26ee765f3d4ad81ad8cd11d506c4c109"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1653, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}