{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5ODgzMTcy", "number": 2125, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNjo0MDoxMlrOD3C1rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMjo0MjoyNlrOD30-Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MDQ0NzgyOnYy", "diffSide": "RIGHT", "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/datasource/CongratsRepositoryImpl.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNjo0MDoxMlrOGNE8lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNjo0MDoxMlrOGNE8lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM2NTcxNg==", "bodyText": "OJOTA", "url": "https://github.com/mercadopago/px-android/pull/2125#discussion_r416365716", "createdAt": "2020-04-28T06:40:12Z", "author": {"login": "guchito9"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/datasource/CongratsRepositoryImpl.kt", "diffHunk": "@@ -42,60 +46,101 @@ class CongratsRepositoryImpl(\n                 paymentRewardCache.containsKey(paymentId) -> paymentRewardCache[paymentId]!!\n                 else -> getPaymentReward(payment, paymentResult).apply { paymentRewardCache[paymentId] = this }\n             }\n-            val remediesResponse = when {\n+            val remediesDataModel = when {\n                 hasToReturnEmptyResponse || isSuccess -> RemediesResponse.EMPTY\n                 remediesCache.containsKey(paymentId) -> remediesCache[paymentId]!!\n-                else -> getRemedies(payment, paymentResult.paymentData).apply { remediesCache[paymentId] = this }\n+                else -> {\n+                    getRemedies(payment, paymentResult.paymentData).apply { remediesCache[paymentId] = this }\n+                }\n             }\n             withContext(Dispatchers.Main) {\n-                handleResult(payment, paymentResult, paymentReward, remediesResponse, paymentSetting.currency, callback)\n+                handleResult(payment, paymentResult, paymentReward, remediesDataModel, paymentSetting.currency, callback)\n             }\n         }\n     }\n \n     private suspend fun getPaymentReward(payment: IPaymentDescriptor, paymentResult: PaymentResult) =\n-        try {\n-            val joinedPaymentIds = TextUtil.join(payment.paymentIds)\n-            val joinedPaymentMethodsIds = paymentResult.paymentDataList\n-                .joinToString(TextUtil.CSV_DELIMITER) { p -> (p.paymentMethod.id) }\n-            val campaignId = paymentResult.paymentData.campaign?.run { id } ?: \"\"\n-            val response = congratsService.getCongrats(BuildConfig.API_ENVIRONMENT, locale, privateKey,\n-                joinedPaymentIds, platform, campaignId, payerComplianceRepository.turnedIFPECompliant(),\n-                joinedPaymentMethodsIds, flow).await()\n-            if (response.isSuccessful) {\n-                response.body()!!\n-            } else {\n+            try {\n+                val joinedPaymentIds = TextUtil.join(payment.paymentIds)\n+                val joinedPaymentMethodsIds = paymentResult.paymentDataList\n+                        .joinToString(TextUtil.CSV_DELIMITER) { p -> (p.paymentMethod.id) }\n+                val campaignId = paymentResult.paymentData.campaign?.run { id } ?: \"\"\n+                val response = congratsService.getCongrats(BuildConfig.API_ENVIRONMENT, locale, privateKey,\n+                        joinedPaymentIds, platform, campaignId, payerComplianceRepository.turnedIFPECompliant(),\n+                        joinedPaymentMethodsIds, flow).await()\n+                if (response.isSuccessful) {\n+                    response.body()!!\n+                } else {\n+                    CongratsResponse.EMPTY\n+                }\n+            } catch (e: Exception) {\n                 CongratsResponse.EMPTY\n             }\n-        } catch (e: Exception) {\n-            CongratsResponse.EMPTY\n-        }\n+\n+    private fun getPayerPaymentMethods(response: InitResponse?) =\n+            mutableListOf<Triple<SecurityCode?, String, CustomSearchItem>>()\n+                    .also { mapPayerPaymentMethods ->\n+                        response?.run {\n+                            customSearchItems.forEach { customSearchItem ->\n+                                express.find { it.customOptionId == customSearchItem.id }?.let { expressMetadata ->\n+                                    mapPayerPaymentMethods.add(\n+                                            Triple(getCardById(customSearchItem.id)?.securityCode,\n+                                                    expressMetadata.customOptionId,\n+                                                    customSearchItem)\n+                                    )\n+                                }\n+                            }\n+                        }\n+                    }\n+\n+    private suspend fun loadInitResponse() =\n+            when (val callbackResult = initService.init().awaitCallback<InitResponse>()) {\n+                is Response.Success<*> -> callbackResult.result as InitResponse\n+                is Response.Failure<*> -> null\n+            }\n \n     private suspend fun getRemedies(payment: IPaymentDescriptor, paymentData: PaymentData) =\n-        try {\n-            val body = RemediesBodyMapper(userSelectionRepository).map(paymentData)\n+            try {\n+                val initResponse = loadInitResponse()\n+                val payerPaymentMethods = getPayerPaymentMethods(initResponse)\n+                val hasOneTap = initResponse?.hasExpressCheckoutMetadata() ?: false\n+                val customOptionId = paymentData.token?.cardId ?: paymentData.paymentMethod.id\n+                val escCardIds = escManagerBehaviour.escCardIds\n+                val body = RemediesBodyMapper(\n+                        userSelectionRepository,\n+                        amountRepository,\n+                        customOptionId,\n+                        escCardIds.contains(customOptionId),\n+                        AlternativePayerPaymentMethodsMapper(escCardIds).map(payerPaymentMethods.filter { it.second != customOptionId })\n+                ).map(paymentData)\n+                val response = congratsService.getRemedies(\n+                        \"alpha\",\n+                        \"5148018960\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d065997e5c6857e500e8240d196ed2a3d24e512"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MDQ4OTg4OnYy", "diffSide": "RIGHT", "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_result/remedies/RemedyState.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNjo1MzoxOFrOGNFU3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxODo0MjoxMVrOGOMHPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM3MTkzMw==", "bodyText": "Se puede sacar el express metadata de ac\u00e1", "url": "https://github.com/mercadopago/px-android/pull/2125#discussion_r416371933", "createdAt": "2020-04-28T06:53:18Z", "author": {"login": "guchito9"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_result/remedies/RemedyState.kt", "diffHunk": "@@ -1,11 +1,12 @@\n package com.mercadopago.android.px.internal.features.payment_result.remedies\n \n-import com.mercadopago.android.px.internal.features.payment_result.remedies.view.CvvRemedy\n+import com.mercadopago.android.px.internal.features.payment_result.remedies.view.RetryPaymentFragment\n import com.mercadopago.android.px.internal.features.payment_result.remedies.view.HighRiskRemedy\n import com.mercadopago.android.px.internal.viewmodel.PaymentModel\n+import com.mercadopago.android.px.model.ExpressMetadata\n \n internal sealed class RemedyState {\n-    internal data class ShowCvvRemedy(val model: CvvRemedy.Model): RemedyState()\n+    internal data class ShowRetryPaymentRemedy(val data: Pair<RetryPaymentFragment.Model, ExpressMetadata?>): RemedyState()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ba7e10068d5125e28e4e2537aa1cc28b0cf0029"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUzMTcwOQ==", "bodyText": "Lo dejo para otro momento :P", "url": "https://github.com/mercadopago/px-android/pull/2125#discussion_r417531709", "createdAt": "2020-04-29T18:42:11Z", "author": {"login": "guchito9"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_result/remedies/RemedyState.kt", "diffHunk": "@@ -1,11 +1,12 @@\n package com.mercadopago.android.px.internal.features.payment_result.remedies\n \n-import com.mercadopago.android.px.internal.features.payment_result.remedies.view.CvvRemedy\n+import com.mercadopago.android.px.internal.features.payment_result.remedies.view.RetryPaymentFragment\n import com.mercadopago.android.px.internal.features.payment_result.remedies.view.HighRiskRemedy\n import com.mercadopago.android.px.internal.viewmodel.PaymentModel\n+import com.mercadopago.android.px.model.ExpressMetadata\n \n internal sealed class RemedyState {\n-    internal data class ShowCvvRemedy(val model: CvvRemedy.Model): RemedyState()\n+    internal data class ShowRetryPaymentRemedy(val data: Pair<RetryPaymentFragment.Model, ExpressMetadata?>): RemedyState()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM3MTkzMw=="}, "originalCommit": {"oid": "4ba7e10068d5125e28e4e2537aa1cc28b0cf0029"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MDQ5NTI2OnYy", "diffSide": "RIGHT", "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_result/remedies/view/RetryPaymentFragment.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNjo1NDo0N1rOGNFX3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNjo1NDo0N1rOGNFX3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM3MjcwMg==", "bodyText": "Trillereada", "url": "https://github.com/mercadopago/px-android/pull/2125#discussion_r416372702", "createdAt": "2020-04-28T06:54:47Z", "author": {"login": "guchito9"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_result/remedies/view/RetryPaymentFragment.kt", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.mercadopago.android.px.internal.features.payment_result.remedies.view\n+\n+import android.os.Bundle\n+import android.os.Parcel\n+import android.os.Parcelable\n+import android.support.v4.app.Fragment\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import android.widget.TextView\n+import com.mercadopago.android.px.R\n+import com.mercadopago.android.px.internal.di.MapperProvider\n+import com.mercadopago.android.px.internal.extensions.gone\n+import com.mercadopago.android.px.internal.extensions.visible\n+import com.mercadopago.android.px.internal.features.express.slider.PaymentMethodFragment\n+import com.mercadopago.android.px.internal.features.express.slider.PaymentMethodLowResDrawer\n+import com.mercadopago.android.px.internal.features.payment_result.remedies.RemediesPayerCost\n+import com.mercadopago.android.px.internal.view.PaymentMethodDescriptorView\n+import com.mercadopago.android.px.model.ExpressMetadata\n+\n+internal class RetryPaymentFragment : Fragment(), PaymentMethodFragment.DisabledDetailDialogLauncher {\n+\n+    private lateinit var message: TextView\n+    private lateinit var cvvRemedy: CvvRemedy\n+    private lateinit var paymentMethodDescriptor: PaymentMethodDescriptorView\n+    private lateinit var paymentMethodTitle: TextView\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n+        return inflater.inflate(R.layout.px_remedies_retry_payment, container, false)\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        message = view.findViewById(R.id.message)\n+        cvvRemedy = view.findViewById(R.id.cvv_remedy)\n+        paymentMethodDescriptor = view.findViewById(R.id.payment_method_descriptor)\n+        paymentMethodTitle = view.findViewById(R.id.payment_method_title)\n+    }\n+\n+    fun init(model: Model, methodData: ExpressMetadata?) {\n+        message.text = model.message\n+        methodData?.let {\n+            addCard(it)\n+            if (model.isAnotherMethod) {\n+                showPaymentMethodDescriptor(it, model.payerCost)\n+            }\n+        }\n+        model.cvvModel?.let { cvvRemedy.init(it) } ?: cvvRemedy.gone()\n+    }\n+\n+    fun setListener(listener: CvvRemedy.Listener) {\n+        cvvRemedy.listener = listener\n+    }\n+\n+    private fun addCard(methodData: ExpressMetadata) {\n+        childFragmentManager.beginTransaction().apply {\n+            val drawableFragmentItem = MapperProvider.getPaymentMethodDrawableItemMapper().map(methodData)!!\n+            replace(R.id.card_container, drawableFragmentItem.draw(PaymentMethodLowResDrawer()))\n+            commitAllowingStateLoss()\n+        }\n+    }\n+\n+    private fun showPaymentMethodDescriptor(methodData: ExpressMetadata, payerCost: RemediesPayerCost?) {\n+        paymentMethodDescriptor.visible()\n+        paymentMethodTitle.visible()\n+        if (!paymentMethodTitle.text.contains(\":\")) paymentMethodTitle.append(\":\") // FIXME", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ba7e10068d5125e28e4e2537aa1cc28b0cf0029"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MDUwOTI4OnYy", "diffSide": "LEFT", "path": "px-services/src/main/java/com/mercadopago/android/px/model/PayerCost.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNjo1ODozMVrOGNFftw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNjo1ODozMVrOGNFftw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM3NDcxMQ==", "bodyText": "Turbina es poco", "url": "https://github.com/mercadopago/px-android/pull/2125#discussion_r416374711", "createdAt": "2020-04-28T06:58:31Z", "author": {"login": "guchito9"}, "path": "px-services/src/main/java/com/mercadopago/android/px/model/PayerCost.java", "diffHunk": "@@ -20,7 +20,6 @@\n     private static final String CFT = \"CFT\";\n     private static final String TEA = \"TEA\";\n     private List<String> labels;\n-    private String recommendedMessage;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ba7e10068d5125e28e4e2537aa1cc28b0cf0029"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MDUxNTMyOnYy", "diffSide": "RIGHT", "path": "px-services/src/main/java/com/mercadopago/android/px/services/CallbackFunctions.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNzowMDowOVrOGNFjKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNzowMDowOVrOGNFjKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM3NTU5NA==", "bodyText": "Qued\u00f3 en firma p\u00fablica esto", "url": "https://github.com/mercadopago/px-android/pull/2125#discussion_r416375594", "createdAt": "2020-04-28T07:00:09Z", "author": {"login": "guchito9"}, "path": "px-services/src/main/java/com/mercadopago/android/px/services/CallbackFunctions.kt", "diffHunk": "@@ -0,0 +1,21 @@\n+package com.mercadopago.android.px.services\n+\n+import com.mercadopago.android.px.internal.callbacks.MPCall\n+import com.mercadopago.android.px.model.exceptions.ApiException\n+import kotlinx.coroutines.suspendCancellableCoroutine\n+import kotlin.coroutines.resume\n+\n+suspend fun <T> MPCall<T>.awaitCallback(): Response =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ba7e10068d5125e28e4e2537aa1cc28b0cf0029"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MDUxNjE5OnYy", "diffSide": "RIGHT", "path": "px-services/src/main/java/com/mercadopago/android/px/services/Response.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNzowMDoyNFrOGNFjmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNzowMDoyNFrOGNFjmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM3NTcwNg==", "bodyText": "Qued\u00f3 en firma p\u00fablica esto", "url": "https://github.com/mercadopago/px-android/pull/2125#discussion_r416375706", "createdAt": "2020-04-28T07:00:24Z", "author": {"login": "guchito9"}, "path": "px-services/src/main/java/com/mercadopago/android/px/services/Response.kt", "diffHunk": "@@ -0,0 +1,6 @@\n+package com.mercadopago.android.px.services\n+\n+sealed class Response {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ba7e10068d5125e28e4e2537aa1cc28b0cf0029"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MDUxNzgwOnYy", "diffSide": "RIGHT", "path": "px-checkout/src/test/java/com/mercadopago/android/px/internal/features/payment_result/components/FooterPaymentResponseTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNzowMDo0OFrOGNFkew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNzowMDo0OFrOGNFkew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM3NTkzMQ==", "bodyText": "Error involuntario", "url": "https://github.com/mercadopago/px-android/pull/2125#discussion_r416375931", "createdAt": "2020-04-28T07:00:48Z", "author": {"login": "guchito9"}, "path": "px-checkout/src/test/java/com/mercadopago/android/px/internal/features/payment_result/components/FooterPaymentResponseTest.java", "diffHunk": "@@ -23,7 +23,7 @@\n import static org.mockito.Mockito.when;\n \n @RunWith(MockitoJUnitRunner.class)\n-public class FooterPaymentResultTest {\n+public class FooterPaymentResponseTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ba7e10068d5125e28e4e2537aa1cc28b0cf0029"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODI3MDUyOnYy", "diffSide": "RIGHT", "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/datasource/CongratsRepositoryImpl.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMDozMTozOVrOGOP2ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMDozMTozOVrOGOP2ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU5MjkzMg==", "bodyText": "pol\u00e9mico", "url": "https://github.com/mercadopago/px-android/pull/2125#discussion_r417592932", "createdAt": "2020-04-29T20:31:39Z", "author": {"login": "cgaggino"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/datasource/CongratsRepositoryImpl.kt", "diffHunk": "@@ -54,48 +60,87 @@ class CongratsRepositoryImpl(\n     }\n \n     private suspend fun getPaymentReward(payment: IPaymentDescriptor, paymentResult: PaymentResult) =\n-        try {\n-            val joinedPaymentIds = TextUtil.join(payment.paymentIds)\n-            val joinedPaymentMethodsIds = paymentResult.paymentDataList\n-                .joinToString(TextUtil.CSV_DELIMITER) { p -> (p.paymentMethod.id) }\n-            val campaignId = paymentResult.paymentData.campaign?.run { id } ?: \"\"\n-            val response = congratsService.getCongrats(BuildConfig.API_ENVIRONMENT, locale, privateKey,\n-                joinedPaymentIds, platform, campaignId, payerComplianceRepository.turnedIFPECompliant(),\n-                joinedPaymentMethodsIds, flow).await()\n-            if (response.isSuccessful) {\n-                response.body()!!\n-            } else {\n+            try {\n+                val joinedPaymentIds = TextUtil.join(payment.paymentIds)\n+                val joinedPaymentMethodsIds = paymentResult.paymentDataList\n+                        .joinToString(TextUtil.CSV_DELIMITER) { p -> (p.paymentMethod.id) }\n+                val campaignId = paymentResult.paymentData.campaign?.run { id } ?: \"\"\n+                val response = congratsService.getCongrats(BuildConfig.API_ENVIRONMENT, locale, privateKey,\n+                        joinedPaymentIds, platform, campaignId, payerComplianceRepository.turnedIFPECompliant(),\n+                        joinedPaymentMethodsIds, flow).await()\n+                if (response.isSuccessful) {\n+                    response.body()!!\n+                } else {\n+                    CongratsResponse.EMPTY\n+                }\n+            } catch (e: Exception) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "777532872e07a1b31e01addc66b290427d6c66cc"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODI3NTY2OnYy", "diffSide": "RIGHT", "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/datasource/CongratsRepositoryImpl.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMDozMzoxM1rOGOP5pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMTowMjowMlrOGOQ2uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU5Mzc2Nw==", "bodyText": "cambio de 4 a 8 la tabulaci\u00f3n?", "url": "https://github.com/mercadopago/px-android/pull/2125#discussion_r417593767", "createdAt": "2020-04-29T20:33:13Z", "author": {"login": "cgaggino"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/datasource/CongratsRepositoryImpl.kt", "diffHunk": "@@ -54,48 +60,87 @@ class CongratsRepositoryImpl(\n     }\n \n     private suspend fun getPaymentReward(payment: IPaymentDescriptor, paymentResult: PaymentResult) =\n-        try {\n-            val joinedPaymentIds = TextUtil.join(payment.paymentIds)\n-            val joinedPaymentMethodsIds = paymentResult.paymentDataList\n-                .joinToString(TextUtil.CSV_DELIMITER) { p -> (p.paymentMethod.id) }\n-            val campaignId = paymentResult.paymentData.campaign?.run { id } ?: \"\"\n-            val response = congratsService.getCongrats(BuildConfig.API_ENVIRONMENT, locale, privateKey,\n-                joinedPaymentIds, platform, campaignId, payerComplianceRepository.turnedIFPECompliant(),\n-                joinedPaymentMethodsIds, flow).await()\n-            if (response.isSuccessful) {\n-                response.body()!!\n-            } else {\n+            try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "777532872e07a1b31e01addc66b290427d6c66cc"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYwOTQwMw==", "bodyText": "Es la config rancia de George", "url": "https://github.com/mercadopago/px-android/pull/2125#discussion_r417609403", "createdAt": "2020-04-29T21:02:02Z", "author": {"login": "guchito9"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/datasource/CongratsRepositoryImpl.kt", "diffHunk": "@@ -54,48 +60,87 @@ class CongratsRepositoryImpl(\n     }\n \n     private suspend fun getPaymentReward(payment: IPaymentDescriptor, paymentResult: PaymentResult) =\n-        try {\n-            val joinedPaymentIds = TextUtil.join(payment.paymentIds)\n-            val joinedPaymentMethodsIds = paymentResult.paymentDataList\n-                .joinToString(TextUtil.CSV_DELIMITER) { p -> (p.paymentMethod.id) }\n-            val campaignId = paymentResult.paymentData.campaign?.run { id } ?: \"\"\n-            val response = congratsService.getCongrats(BuildConfig.API_ENVIRONMENT, locale, privateKey,\n-                joinedPaymentIds, platform, campaignId, payerComplianceRepository.turnedIFPECompliant(),\n-                joinedPaymentMethodsIds, flow).await()\n-            if (response.isSuccessful) {\n-                response.body()!!\n-            } else {\n+            try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU5Mzc2Nw=="}, "originalCommit": {"oid": "777532872e07a1b31e01addc66b290427d6c66cc"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODM5MDAxOnYy", "diffSide": "RIGHT", "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/pay_button/PayButton.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMTowNzozMVrOGORCGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjoyNDowMFrOGOw3eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYxMjMxNQ==", "bodyText": "se trackea otra cosa al confirmar el remedy?", "url": "https://github.com/mercadopago/px-android/pull/2125#discussion_r417612315", "createdAt": "2020-04-29T21:07:31Z", "author": {"login": "cgaggino"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/pay_button/PayButton.kt", "diffHunk": "@@ -34,7 +34,7 @@ interface PayButton {\n     }\n \n     interface OnReadyForPaymentCallback {\n-        fun call(paymentConfiguration: PaymentConfiguration, confirmTrackerData: ConfirmData?)\n+        fun call(paymentConfiguration: PaymentConfiguration, confirmTrackerData: ConfirmData? = null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "777532872e07a1b31e01addc66b290427d6c66cc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEzMzg4Mg==", "bodyText": "No, supuestamente est\u00e1 el track del remedy en si y listo", "url": "https://github.com/mercadopago/px-android/pull/2125#discussion_r418133882", "createdAt": "2020-04-30T16:24:00Z", "author": {"login": "guchito9"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/pay_button/PayButton.kt", "diffHunk": "@@ -34,7 +34,7 @@ interface PayButton {\n     }\n \n     interface OnReadyForPaymentCallback {\n-        fun call(paymentConfiguration: PaymentConfiguration, confirmTrackerData: ConfirmData?)\n+        fun call(paymentConfiguration: PaymentConfiguration, confirmTrackerData: ConfirmData? = null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYxMjMxNQ=="}, "originalCommit": {"oid": "777532872e07a1b31e01addc66b290427d6c66cc"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODYwODY5OnYy", "diffSide": "RIGHT", "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_result/remedies/AlternativePayerPaymentMethodsMapper.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMjoyMToyN1rOGOTJ2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMjoyMToyN1rOGOTJ2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY0NzA2Nw==", "bodyText": "Revisar los types del mapper, con estos types podriamos mapper una lista de lista de triples", "url": "https://github.com/mercadopago/px-android/pull/2125#discussion_r417647067", "createdAt": "2020-04-29T22:21:27Z", "author": {"login": "cgaggino"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_result/remedies/AlternativePayerPaymentMethodsMapper.kt", "diffHunk": "@@ -0,0 +1,38 @@\n+package com.mercadopago.android.px.internal.features.payment_result.remedies\n+\n+import com.mercadopago.android.px.internal.model.EscStatus\n+import com.mercadopago.android.px.internal.viewmodel.mappers.Mapper\n+import com.mercadopago.android.px.model.CustomSearchItem\n+import com.mercadopago.android.px.model.SecurityCode\n+import com.mercadopago.android.px.model.internal.remedies.Installment\n+import com.mercadopago.android.px.model.internal.remedies.RemedyPaymentMethod\n+\n+class AlternativePayerPaymentMethodsMapper(\n+        private val escCardIds: Set<String>\n+) : Mapper<List<Triple<SecurityCode?, String, CustomSearchItem>>, List<RemedyPaymentMethod>>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "777532872e07a1b31e01addc66b290427d6c66cc"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODY2MTU4OnYy", "diffSide": "RIGHT", "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_result/remedies/RemediesViewModel.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMjo0MjoyNlrOGOTpRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjoyMzoyMlrOGOw2Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY1NTExMQ==", "bodyText": "Este loadInitResponse lo vi en varios lados, lo podremos poner dentro de initService?", "url": "https://github.com/mercadopago/px-android/pull/2125#discussion_r417655111", "createdAt": "2020-04-29T22:42:26Z", "author": {"login": "cgaggino"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_result/remedies/RemediesViewModel.kt", "diffHunk": "@@ -5,51 +5,155 @@ import android.os.Bundle\n import com.mercadopago.android.px.addons.ESCManagerBehaviour\n import com.mercadopago.android.px.internal.base.BaseViewModel\n import com.mercadopago.android.px.internal.features.pay_button.PayButton\n-import com.mercadopago.android.px.internal.repository.CardTokenRepository\n-import com.mercadopago.android.px.internal.repository.CongratsRepository\n+import com.mercadopago.android.px.internal.repository.*\n import com.mercadopago.android.px.internal.repository.CongratsRepository.PostPaymentCallback\n-import com.mercadopago.android.px.internal.repository.PaymentRepository\n-import com.mercadopago.android.px.internal.repository.PaymentSettingRepository\n import com.mercadopago.android.px.internal.util.CVVRecoveryWrapper\n+import com.mercadopago.android.px.internal.util.TokenCreationWrapper\n import com.mercadopago.android.px.internal.viewmodel.PaymentModel\n+import com.mercadopago.android.px.model.Card\n import com.mercadopago.android.px.model.IPaymentDescriptor\n+import com.mercadopago.android.px.model.PayerCost\n+import com.mercadopago.android.px.model.internal.InitResponse\n+import com.mercadopago.android.px.model.internal.PaymentConfiguration\n+import com.mercadopago.android.px.internal.services.Response\n+import com.mercadopago.android.px.internal.services.awaitCallback\n+import com.mercadopago.android.px.model.PaymentData\n+import com.mercadopago.android.px.model.internal.remedies.RemedyPaymentMethod\n import com.mercadopago.android.px.tracking.internal.events.RemedyEvent\n import com.mercadopago.android.px.tracking.internal.model.RemedyTrackData\n import kotlinx.coroutines.CoroutineScope\n import kotlinx.coroutines.Dispatchers\n import kotlinx.coroutines.launch\n import kotlinx.coroutines.withContext\n+import java.lang.Exception\n import java.util.*\n \n internal class RemediesViewModel(\n     private val remediesModel: RemediesModel,\n+    paymentModel: PaymentModel,\n     private val paymentRepository: PaymentRepository,\n     private val paymentSettingRepository: PaymentSettingRepository,\n     private val cardTokenRepository: CardTokenRepository,\n     private val escManagerBehaviour: ESCManagerBehaviour,\n     private val congratsRepository: CongratsRepository,\n-    private val paymentMethodType: String,\n-    private val paymentMethodId: String\n+    private val initRepository: InitRepository,\n+    private val amountConfigurationRepository: AmountConfigurationRepository\n ) : BaseViewModel(), Remedies.ViewModel {\n \n     val remedyState: MutableLiveData<RemedyState> = MutableLiveData()\n+    private val isSilverBullet = remediesModel.retryPayment?.isAnotherMethod == true\n+    private val methodIds: MethodIds\n     private var cvv = \"\"\n+    private var paymentConfiguration: PaymentConfiguration? = null\n+    private var card: Card? = null\n \n     init {\n-        remediesModel.cvvRemedyModel?.let {\n-            remedyState.value = RemedyState.ShowCvvRemedy(it)\n-        }\n-        remediesModel.highRiskRemedyModel?.let {\n-            remedyState.value = RemedyState.ShowKyCRemedy(it)\n+        methodIds = getMethodIds(paymentModel)!!\n+        val customOptionId = methodIds.customOptionId\n+        CoroutineScope(Dispatchers.IO).launch {\n+            loadInitResponse()?.let {initResponse ->\n+                val methodData = initResponse.express.find { it.customOptionId == customOptionId }\n+                val isCard = methodData?.isCard == true\n+                if (isCard) {\n+                    card = initResponse.getCardById(customOptionId)\n+                }\n+                paymentConfiguration = PaymentConfiguration(methodIds.methodId, customOptionId, isCard, false,\n+                    getPayerCost(customOptionId, paymentModel))\n+                withContext(Dispatchers.Main) {\n+                    remediesModel.retryPayment?.let {\n+                        remedyState.value = RemedyState.ShowRetryPaymentRemedy(Pair(it, methodData))\n+                    }\n+                    remediesModel.highRisk?.let {\n+                        remedyState.value = RemedyState.ShowKyCRemedy(it)\n+                    }\n+                }\n+            }\n         }\n     }\n \n     private fun getExtraInfoTrackForPaymentMethodSuggestion() = mapOf(\n-            \"payment_method_type\" to paymentMethodType,\n-            \"payment_method_id\" to paymentMethodId\n+        \"payment_method_type\" to methodIds.typeId,\n+        \"payment_method_id\" to methodIds.methodId\n     )\n \n     override fun onPayButtonPressed(callback: PayButton.OnEnqueueResolvedCallback) {\n+        if (isSilverBullet) {\n+            startPayment(callback)\n+        } else {\n+            startCvvRecovery(callback)\n+        }\n+    }\n+\n+    override fun onPrePayment(callback: PayButton.OnReadyForPaymentCallback) {\n+        callback.call(paymentConfiguration!!)\n+    }\n+\n+    private fun getMethodIds(paymentModel: PaymentModel): MethodIds? {\n+        return paymentModel.run {\n+            if (isSilverBullet) {\n+                remedies.suggestedPaymentMethod?.alternativePaymentMethod?.let {\n+                    MethodIds.with(it)\n+                }\n+            } else {\n+                MethodIds.with(paymentResult.paymentData)\n+            }\n+        }\n+    }\n+\n+    private fun getPayerCost(customOptionId: String, paymentModel: PaymentModel): PayerCost? {\n+        return paymentModel.run {\n+            if (isSilverBullet) {\n+                remedies.suggestedPaymentMethod?.alternativePaymentMethod?.installmentsList?.run {\n+                    if (isNotEmpty()) {\n+                        get(0).let {\n+                            amountConfigurationRepository.getConfigurationFor(customOptionId)?.run {\n+                                for (i in 0 until payerCosts.size) {\n+                                    val payerCost = payerCosts[i]\n+                                    if (payerCost.installments == it.installments) {\n+                                        remediesModel.retryPayment?.payerCost = RemediesPayerCost(i, it.installments)\n+                                        return payerCost\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                    return null\n+                }\n+            } else {\n+                paymentResult.paymentData.payerCost\n+            }\n+        }\n+    }\n+\n+    private suspend fun loadInitResponse() =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "777532872e07a1b31e01addc66b290427d6c66cc"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEzMzUwNw==", "bodyText": "Por ahora no porque tenemos que pasarlo a Kotlin", "url": "https://github.com/mercadopago/px-android/pull/2125#discussion_r418133507", "createdAt": "2020-04-30T16:23:22Z", "author": {"login": "guchito9"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_result/remedies/RemediesViewModel.kt", "diffHunk": "@@ -5,51 +5,155 @@ import android.os.Bundle\n import com.mercadopago.android.px.addons.ESCManagerBehaviour\n import com.mercadopago.android.px.internal.base.BaseViewModel\n import com.mercadopago.android.px.internal.features.pay_button.PayButton\n-import com.mercadopago.android.px.internal.repository.CardTokenRepository\n-import com.mercadopago.android.px.internal.repository.CongratsRepository\n+import com.mercadopago.android.px.internal.repository.*\n import com.mercadopago.android.px.internal.repository.CongratsRepository.PostPaymentCallback\n-import com.mercadopago.android.px.internal.repository.PaymentRepository\n-import com.mercadopago.android.px.internal.repository.PaymentSettingRepository\n import com.mercadopago.android.px.internal.util.CVVRecoveryWrapper\n+import com.mercadopago.android.px.internal.util.TokenCreationWrapper\n import com.mercadopago.android.px.internal.viewmodel.PaymentModel\n+import com.mercadopago.android.px.model.Card\n import com.mercadopago.android.px.model.IPaymentDescriptor\n+import com.mercadopago.android.px.model.PayerCost\n+import com.mercadopago.android.px.model.internal.InitResponse\n+import com.mercadopago.android.px.model.internal.PaymentConfiguration\n+import com.mercadopago.android.px.internal.services.Response\n+import com.mercadopago.android.px.internal.services.awaitCallback\n+import com.mercadopago.android.px.model.PaymentData\n+import com.mercadopago.android.px.model.internal.remedies.RemedyPaymentMethod\n import com.mercadopago.android.px.tracking.internal.events.RemedyEvent\n import com.mercadopago.android.px.tracking.internal.model.RemedyTrackData\n import kotlinx.coroutines.CoroutineScope\n import kotlinx.coroutines.Dispatchers\n import kotlinx.coroutines.launch\n import kotlinx.coroutines.withContext\n+import java.lang.Exception\n import java.util.*\n \n internal class RemediesViewModel(\n     private val remediesModel: RemediesModel,\n+    paymentModel: PaymentModel,\n     private val paymentRepository: PaymentRepository,\n     private val paymentSettingRepository: PaymentSettingRepository,\n     private val cardTokenRepository: CardTokenRepository,\n     private val escManagerBehaviour: ESCManagerBehaviour,\n     private val congratsRepository: CongratsRepository,\n-    private val paymentMethodType: String,\n-    private val paymentMethodId: String\n+    private val initRepository: InitRepository,\n+    private val amountConfigurationRepository: AmountConfigurationRepository\n ) : BaseViewModel(), Remedies.ViewModel {\n \n     val remedyState: MutableLiveData<RemedyState> = MutableLiveData()\n+    private val isSilverBullet = remediesModel.retryPayment?.isAnotherMethod == true\n+    private val methodIds: MethodIds\n     private var cvv = \"\"\n+    private var paymentConfiguration: PaymentConfiguration? = null\n+    private var card: Card? = null\n \n     init {\n-        remediesModel.cvvRemedyModel?.let {\n-            remedyState.value = RemedyState.ShowCvvRemedy(it)\n-        }\n-        remediesModel.highRiskRemedyModel?.let {\n-            remedyState.value = RemedyState.ShowKyCRemedy(it)\n+        methodIds = getMethodIds(paymentModel)!!\n+        val customOptionId = methodIds.customOptionId\n+        CoroutineScope(Dispatchers.IO).launch {\n+            loadInitResponse()?.let {initResponse ->\n+                val methodData = initResponse.express.find { it.customOptionId == customOptionId }\n+                val isCard = methodData?.isCard == true\n+                if (isCard) {\n+                    card = initResponse.getCardById(customOptionId)\n+                }\n+                paymentConfiguration = PaymentConfiguration(methodIds.methodId, customOptionId, isCard, false,\n+                    getPayerCost(customOptionId, paymentModel))\n+                withContext(Dispatchers.Main) {\n+                    remediesModel.retryPayment?.let {\n+                        remedyState.value = RemedyState.ShowRetryPaymentRemedy(Pair(it, methodData))\n+                    }\n+                    remediesModel.highRisk?.let {\n+                        remedyState.value = RemedyState.ShowKyCRemedy(it)\n+                    }\n+                }\n+            }\n         }\n     }\n \n     private fun getExtraInfoTrackForPaymentMethodSuggestion() = mapOf(\n-            \"payment_method_type\" to paymentMethodType,\n-            \"payment_method_id\" to paymentMethodId\n+        \"payment_method_type\" to methodIds.typeId,\n+        \"payment_method_id\" to methodIds.methodId\n     )\n \n     override fun onPayButtonPressed(callback: PayButton.OnEnqueueResolvedCallback) {\n+        if (isSilverBullet) {\n+            startPayment(callback)\n+        } else {\n+            startCvvRecovery(callback)\n+        }\n+    }\n+\n+    override fun onPrePayment(callback: PayButton.OnReadyForPaymentCallback) {\n+        callback.call(paymentConfiguration!!)\n+    }\n+\n+    private fun getMethodIds(paymentModel: PaymentModel): MethodIds? {\n+        return paymentModel.run {\n+            if (isSilverBullet) {\n+                remedies.suggestedPaymentMethod?.alternativePaymentMethod?.let {\n+                    MethodIds.with(it)\n+                }\n+            } else {\n+                MethodIds.with(paymentResult.paymentData)\n+            }\n+        }\n+    }\n+\n+    private fun getPayerCost(customOptionId: String, paymentModel: PaymentModel): PayerCost? {\n+        return paymentModel.run {\n+            if (isSilverBullet) {\n+                remedies.suggestedPaymentMethod?.alternativePaymentMethod?.installmentsList?.run {\n+                    if (isNotEmpty()) {\n+                        get(0).let {\n+                            amountConfigurationRepository.getConfigurationFor(customOptionId)?.run {\n+                                for (i in 0 until payerCosts.size) {\n+                                    val payerCost = payerCosts[i]\n+                                    if (payerCost.installments == it.installments) {\n+                                        remediesModel.retryPayment?.payerCost = RemediesPayerCost(i, it.installments)\n+                                        return payerCost\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                    return null\n+                }\n+            } else {\n+                paymentResult.paymentData.payerCost\n+            }\n+        }\n+    }\n+\n+    private suspend fun loadInitResponse() =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY1NTExMQ=="}, "originalCommit": {"oid": "777532872e07a1b31e01addc66b290427d6c66cc"}, "originalPosition": 137}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1875, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}