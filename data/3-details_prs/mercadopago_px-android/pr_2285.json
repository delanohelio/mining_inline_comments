{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3OTg2MzY1", "number": 2285, "title": "[feature] open offline methods sheet if no other method is available", "bodyText": "Improved offline methods to open automatically collapsed and always show pay button", "createdAt": "2020-08-14T13:32:03Z", "url": "https://github.com/mercadopago/px-android/pull/2285", "merged": true, "mergeCommit": {"oid": "90a39128290560f262f963b0034584d6afcbeaaa"}, "closed": true, "closedAt": "2020-08-20T15:20:56Z", "author": {"login": "cgaggino"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-22vTgFqTQ2NzY4NzY0OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdAxWJ9gH2gAyNDY3OTg2MzY1OjhkNjIzN2U3YzIwMjM4MmFjNmUxNWQzYWM4ZmQwMWZkMGFmZWQ2MDg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3Njg3NjQ4", "url": "https://github.com/mercadopago/px-android/pull/2285#pullrequestreview-467687648", "createdAt": "2020-08-14T15:53:20Z", "commit": {"oid": "c03b277173687a3335c24da37f13586bb81a37bf"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNTo1MzoyMVrOHA54dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjowMzo0MVrOHA6NkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcxMDM5MA==", "bodyText": "Esto quedo medio raro", "url": "https://github.com/mercadopago/px-android/pull/2285#discussion_r470710390", "createdAt": "2020-08-14T15:53:21Z", "author": {"login": "jorGonzalez291292"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/express/ExpressPaymentPresenter.java", "diffHunk": "@@ -192,7 +181,9 @@ public void loadViewModel() {\n         getView().updateAdapters(model);\n         updateElements();\n         getView().updatePaymentMethods(paymentMethodDrawableItemMapper.map(expressMetadataList));\n-        getView().updateBottomSheetStatus(!otherPaymentMethodClickable);\n+        if(OfflineMethods.shouldLaunch(expressMetadataList)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c03b277173687a3335c24da37f13586bb81a37bf"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcxMTg1OQ==", "bodyText": "Necesitamos seguir pasando offlineMethods?", "url": "https://github.com/mercadopago/px-android/pull/2285#discussion_r470711859", "createdAt": "2020-08-14T15:56:03Z", "author": {"login": "jorGonzalez291292"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/express/ExpressPaymentPresenter.java", "diffHunk": "@@ -416,27 +405,7 @@ public void failure(final ApiException apiException) {\n \n     @Override\n     public void onOtherPaymentMethodClicked(@NonNull final OfflinePaymentTypesMetadata offlineMethods) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c03b277173687a3335c24da37f13586bb81a37bf"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcxNTc5Mw==", "bodyText": "Esto te sirve?\nfun shouldLaunch(expressMetadataList: List<ExpressMetadata>): Boolean {\n        return expressMetadataList.filter { express -> express.status.run { isActive &&  isEnabled } }\n           .let { it.size == 1 &&  it[0].isOfflineMethods }\n }", "url": "https://github.com/mercadopago/px-android/pull/2285#discussion_r470715793", "createdAt": "2020-08-14T16:03:41Z", "author": {"login": "jorGonzalez291292"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/express/offline_methods/OfflineMethods.kt", "diffHunk": "@@ -0,0 +1,37 @@\n+package com.mercadopago.android.px.internal.features.express.offline_methods\n+\n+import androidx.lifecycle.LiveData\n+import com.mercadopago.android.px.internal.callbacks.Event\n+import com.mercadopago.android.px.internal.features.pay_button.PayButton\n+import com.mercadopago.android.px.internal.viewmodel.AmountLocalized\n+import com.mercadopago.android.px.model.ExpressMetadata\n+import com.mercadopago.android.px.model.OfflinePaymentType\n+import com.mercadopago.android.px.model.internal.Text\n+\n+object OfflineMethods {\n+\n+    interface View : PayButton.Handler {\n+        fun showExpanded()\n+        fun showCollapsed()\n+    }\n+\n+    interface ViewModel {\n+        fun trackView()\n+        fun onViewLoaded(): LiveData<Model>\n+        fun onMethodSelected(selectedItem: OfflineMethodItem)\n+        fun onPrePayment(callback: PayButton.OnReadyForPaymentCallback)\n+        fun onBack()\n+        fun getObservableDeepLink(): LiveData<Event<String>>\n+    }\n+\n+    data class Model(\n+        val bottomDescription: Text?,\n+        val amountLocalized: AmountLocalized,\n+        val offlinePaymentTypes: List<OfflinePaymentType>)\n+\n+    @JvmStatic fun shouldLaunch(expressMetadataList: List<ExpressMetadata>): Boolean {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c03b277173687a3335c24da37f13586bb81a37bf"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3Njk3NzY3", "url": "https://github.com/mercadopago/px-android/pull/2285#pullrequestreview-467697767", "createdAt": "2020-08-14T16:08:35Z", "commit": {"oid": "c03b277173687a3335c24da37f13586bb81a37bf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjowODozNVrOHA6XYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjowODozNVrOHA6XYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcxODMwNw==", "bodyText": "Te parece mejor tener esto as\u00ed?\nprivate fun loadAnimation(animResId: Int): Animation {\n   return  AnimationUtils.loadAnimation(context, animResId)\n            .apply { this.duration = duration.toLong() }\n}", "url": "https://github.com/mercadopago/px-android/pull/2285#discussion_r470718307", "createdAt": "2020-08-14T16:08:35Z", "author": {"login": "jorGonzalez291292"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/express/offline_methods/OfflineMethodsFragment.kt", "diffHunk": "@@ -0,0 +1,215 @@\n+package com.mercadopago.android.px.internal.features.express.offline_methods\n+\n+import android.content.Context\n+import android.content.Intent\n+import android.net.Uri\n+import android.os.Bundle\n+import android.text.Editable\n+import android.text.SpannableStringBuilder\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import android.view.animation.Animation\n+import android.view.animation.AnimationUtils\n+import android.widget.TextView\n+import androidx.core.content.ContextCompat\n+import androidx.fragment.app.Fragment\n+import androidx.recyclerview.widget.DividerItemDecoration\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import androidx.recyclerview.widget.RecyclerView\n+import com.google.android.material.bottomsheet.BottomSheetBehavior\n+import com.mercadopago.android.px.R\n+import com.mercadopago.android.px.core.BackHandler\n+import com.mercadopago.android.px.internal.di.Session\n+import com.mercadopago.android.px.internal.extensions.invisible\n+import com.mercadopago.android.px.internal.extensions.visible\n+import com.mercadopago.android.px.internal.features.pay_button.PayButton.OnReadyForPaymentCallback\n+import com.mercadopago.android.px.internal.features.pay_button.PayButtonFragment\n+import com.mercadopago.android.px.internal.font.PxFont\n+import com.mercadopago.android.px.internal.util.TextUtil\n+import com.mercadopago.android.px.internal.util.ViewUtils\n+import com.mercadopago.android.px.internal.util.nonNullObserve\n+import com.mercadopago.android.px.internal.util.nonNullObserveOnce\n+import com.mercadopago.android.px.internal.view.MPTextView\n+import com.mercadopago.android.px.internal.viewmodel.AmountLocalized\n+import com.mercadopago.android.px.model.internal.Text\n+\n+class OfflineMethodsFragment : Fragment(), OfflineMethods.View, BackHandler {\n+    private var fadeInAnimation: Animation? = null\n+    private var fadeOutAnimation: Animation? = null\n+\n+    private lateinit var panIndicator: View\n+    private lateinit var payButtonFragment: PayButtonFragment\n+    private lateinit var totalAmountTextView: TextView\n+    private lateinit var header: View\n+    private lateinit var footer: View\n+    private lateinit var fakeFooter: View\n+    private lateinit var bottomDescription: MPTextView\n+    private lateinit var adapter: OfflineMethodsAdapter\n+\n+    private lateinit var bottomSheet: View\n+    private lateinit var bottomSheetBehavior: BottomSheetBehavior<View>\n+    private lateinit var viewModel: OfflineMethodsViewModel\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n+        return inflater.inflate(R.layout.px_fragment_offline_methods, container, false)\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        viewModel = Session.getInstance().viewModelModule.get(this, OfflineMethodsViewModel::class.java)\n+\n+        with(view) {\n+            header = findViewById(R.id.header)\n+            footer = findViewById(R.id.bottom_sheet_footer)\n+            fakeFooter = findViewById(R.id.fake_footer)\n+            panIndicator = findViewById(R.id.pan_indicator)\n+            bottomSheet = findViewById(R.id.offline_methods_bottom_sheet)\n+            totalAmountTextView = findViewById(R.id.total_amount)\n+            bottomDescription = findViewById(R.id.bottom_description)\n+            configureRecycler(findViewById(R.id.methods))\n+        }\n+\n+        payButtonFragment = childFragmentManager.findFragmentById(R.id.pay_button) as PayButtonFragment\n+        payButtonFragment.disable()\n+\n+        configureBottomSheet()\n+\n+        viewModel.onViewLoaded().nonNullObserveOnce(viewLifecycleOwner) { model -> draw(model) }\n+        viewModel.getObservableDeepLink().nonNullObserve(viewLifecycleOwner) { event ->\n+            event.getContentIfNotHandled()?.run { startKnowYourCustomerFlow(this) }\n+        }\n+    }\n+\n+    private fun draw(model: OfflineMethods.Model) {\n+        ViewUtils.loadOrHide(View.GONE, Text.EMPTY, bottomDescription)\n+        fakeFooter.layoutParams.height = footer.height\n+        updateTotalView(model.amountLocalized)\n+        adapter.setItems(FromOfflinePaymentTypesMetadataToOfflineItems(context).map(model.offlinePaymentTypes))\n+    }\n+\n+    private fun configureBottomSheet() {\n+        bottomSheetBehavior = BottomSheetBehavior.from(bottomSheet)\n+        bottomSheetBehavior.isHideable = true\n+        bottomSheetBehavior.state = BottomSheetBehavior.STATE_HIDDEN\n+        bottomSheetBehavior.setBottomSheetCallback(object : BottomSheetBehavior.BottomSheetCallback() {\n+            override fun onStateChanged(view: View, state: Int) {}\n+            override fun onSlide(view: View, offset: Float) {\n+                header.alpha = if (offset >= 0) offset else 0f\n+                footer.alpha = if (offset >= 0) 1f else if (offset <= -0.5) 0f else 1 + offset*2\n+                header.alpha.takeIf { it == 0f }?.run { header.invisible() } ?: run { header.visible() }\n+                footer.alpha.takeIf { it == 0f }?.run { footer.invisible() } ?: run { footer.visible() }\n+            }\n+        })\n+    }\n+\n+    private fun configureRecycler(recycler: RecyclerView) {\n+        val linearLayoutManager = LinearLayoutManager(context).also { recycler.layoutManager = it }\n+        recycler.addOnScrollListener(object : RecyclerView.OnScrollListener() {\n+            override fun onScrollStateChanged(recyclerView: RecyclerView, newState: Int) {\n+                super.onScrollStateChanged(recyclerView, newState)\n+                val atTop = !recyclerView.canScrollVertically(-1)\n+                when (newState) {\n+                    RecyclerView.SCROLL_STATE_DRAGGING -> if (atTop) {\n+                        panIndicator.clearAnimation()\n+                        panIndicator.startAnimation(fadeOutAnimation)\n+                    }\n+                    RecyclerView.SCROLL_STATE_IDLE -> if (atTop) {\n+                        panIndicator.clearAnimation()\n+                        panIndicator.startAnimation(fadeInAnimation)\n+                    }\n+                }\n+            }\n+        })\n+        context?.let {\n+            val decoration = DividerItemDecoration(it, linearLayoutManager.orientation)\n+            decoration.setDrawable(ContextCompat.getDrawable(it, R.drawable.px_item_decorator_divider)!!)\n+            recycler.addItemDecoration(decoration)\n+        }\n+        adapter = OfflineMethodsAdapter(object : OnMethodSelectedListener {\n+            override fun onItemSelected(selectedItem: OfflineMethodItem) {\n+                viewModel.onMethodSelected(selectedItem)\n+                payButtonFragment.enable()\n+            }\n+        }).also { recycler.adapter = it }\n+    }\n+\n+    private fun updateTotalView(amountLocalized: AmountLocalized) {\n+        val editable: Editable = SpannableStringBuilder()\n+        val editableDescription: Editable = SpannableStringBuilder()\n+        val totalText = getString(R.string.px_review_summary_total)\n+        context?.let {\n+            editable.append(totalText)\n+                .append(TextUtil.SPACE)\n+                .append(amountLocalized[it])\n+            ViewUtils.setFontInSpannable(it, PxFont.SEMI_BOLD, editable)\n+            totalAmountTextView.text = editable\n+        }\n+        editableDescription\n+            .append(totalText)\n+            .append(TextUtil.SPACE)\n+            //TODO por que estaba en floatValue?\n+            .append(amountLocalized.amount.toString())\n+            .append(getString(R.string.px_money))\n+        totalAmountTextView.contentDescription = editableDescription\n+    }\n+\n+    override fun handleBack(): Boolean {\n+        val isExploding = payButtonFragment.isExploding()\n+        val isVisible = bottomSheetBehavior.state != BottomSheetBehavior.STATE_HIDDEN\n+        if (!isExploding && isVisible) {\n+            bottomSheetBehavior.state = BottomSheetBehavior.STATE_HIDDEN\n+            viewModel.onBack()\n+        }\n+        return isExploding || isVisible\n+    }\n+\n+    override fun onCreateAnimation(transit: Int, enter: Boolean, nextAnim: Int): Animation? {\n+        val offset = resources.getInteger(R.integer.px_long_animation_time)\n+        val duration = resources.getInteger(R.integer.px_shorter_animation_time)\n+        val animation = AnimationUtils.loadAnimation(context, if (enter) R.anim.px_fade_in else R.anim.px_fade_out)\n+        animation.duration = duration.toLong()\n+        if (enter) {\n+            animation.startOffset = offset.toLong()\n+        }\n+        header.startAnimation(animation)\n+        return super.onCreateAnimation(transit, enter, nextAnim)\n+    }\n+\n+    override fun showExpanded() {\n+        bottomSheet.post { bottomSheetBehavior.state = BottomSheetBehavior.STATE_EXPANDED }\n+    }\n+\n+    override fun showCollapsed() {\n+        bottomSheet.post { bottomSheetBehavior.state = BottomSheetBehavior.STATE_COLLAPSED }\n+    }\n+\n+    private fun startKnowYourCustomerFlow(flowLink: String) {\n+        val intent = Intent(Intent.ACTION_VIEW)\n+        intent.data = Uri.parse(flowLink)\n+        startActivity(intent)\n+    }\n+\n+    override fun prePayment(callback: OnReadyForPaymentCallback) {\n+        viewModel.onPrePayment(callback)\n+    }\n+\n+    override fun onAttach(context: Context) {\n+        super.onAttach(context)\n+        val duration = resources.getInteger(R.integer.px_shorter_animation_time)\n+        fadeInAnimation = AnimationUtils.loadAnimation(context, R.anim.px_fade_in)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c03b277173687a3335c24da37f13586bb81a37bf"}, "originalPosition": 200}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3NzAwNzU1", "url": "https://github.com/mercadopago/px-android/pull/2285#pullrequestreview-467700755", "createdAt": "2020-08-14T16:13:07Z", "commit": {"oid": "c03b277173687a3335c24da37f13586bb81a37bf"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjoxMzowN1rOHA6gPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjoxNDo1NlrOHA6kaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcyMDU3Mg==", "bodyText": "override fun getObservableDeepLink() = observableDeepLink", "url": "https://github.com/mercadopago/px-android/pull/2285#discussion_r470720572", "createdAt": "2020-08-14T16:13:07Z", "author": {"login": "jorGonzalez291292"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/express/offline_methods/OfflineMethodsViewModel.kt", "diffHunk": "@@ -0,0 +1,102 @@\n+package com.mercadopago.android.px.internal.features.express.offline_methods\n+\n+import androidx.lifecycle.LiveData\n+import androidx.lifecycle.MutableLiveData\n+import com.mercadopago.android.px.internal.base.BaseViewModel\n+import com.mercadopago.android.px.internal.callbacks.Event\n+import com.mercadopago.android.px.internal.extensions.orIfEmpty\n+import com.mercadopago.android.px.internal.features.pay_button.PayButton.OnReadyForPaymentCallback\n+import com.mercadopago.android.px.internal.repository.AmountRepository\n+import com.mercadopago.android.px.internal.repository.DiscountRepository\n+import com.mercadopago.android.px.internal.repository.InitRepository\n+import com.mercadopago.android.px.internal.repository.PaymentSettingRepository\n+import com.mercadopago.android.px.internal.util.TextUtil\n+import com.mercadopago.android.px.internal.viewmodel.AmountLocalized\n+import com.mercadopago.android.px.model.OfflineMethodsCompliance\n+import com.mercadopago.android.px.model.SensitiveInformation\n+import com.mercadopago.android.px.model.internal.PaymentConfiguration\n+import com.mercadopago.android.px.tracking.internal.events.BackEvent\n+import com.mercadopago.android.px.tracking.internal.events.KnowYourCustomerFlowEvent\n+import com.mercadopago.android.px.tracking.internal.model.ConfirmData\n+import com.mercadopago.android.px.tracking.internal.views.OfflineMethodsViewTracker\n+import kotlinx.coroutines.CoroutineScope\n+import kotlinx.coroutines.Dispatchers\n+import kotlinx.coroutines.launch\n+\n+class OfflineMethodsViewModel(private val initRepository: InitRepository,\n+    private val paymentSettingRepository: PaymentSettingRepository,\n+    private val amountRepository: AmountRepository,\n+    private val discountRepository: DiscountRepository) : BaseViewModel(), OfflineMethods.ViewModel {\n+\n+    private lateinit var viewTracker: OfflineMethodsViewTracker\n+    private var payerCompliance: OfflineMethodsCompliance? = null\n+    private var selectedItem: OfflineMethodItem? = null\n+\n+    private val observableDeepLink = MutableLiveData<Event<String>>()\n+\n+    override fun onViewLoaded(): LiveData<OfflineMethods.Model> {\n+        val liveData = MutableLiveData<OfflineMethods.Model>()\n+        CoroutineScope(Dispatchers.IO).launch {\n+            initRepository.loadInitResponse()?.let {\n+                val offlineMethods = it.express.firstOrNull { express -> express.isOfflineMethods }?.offlineMethods\n+                val bottomDescription = offlineMethods?.displayInfo?.bottomDescription\n+                val defaultPaymentTypeId = offlineMethods?.paymentTypes?.firstOrNull()?.id ?: TextUtil.EMPTY\n+                val amountLocalized = AmountLocalized(\n+                    amountRepository.getAmountToPay(defaultPaymentTypeId, discountRepository.currentConfiguration),\n+                    paymentSettingRepository.currency)\n+                payerCompliance = it.payerCompliance?.offlineMethods\n+                val offlinePaymentTypes = offlineMethods?.paymentTypes.orEmpty()\n+                viewTracker = OfflineMethodsViewTracker(offlinePaymentTypes)\n+                liveData.postValue(OfflineMethods.Model(bottomDescription, amountLocalized, offlinePaymentTypes))\n+            }\n+        }\n+        return liveData\n+    }\n+\n+    override fun trackView() {\n+        viewTracker.track()\n+    }\n+\n+    override fun onMethodSelected(selectedItem: OfflineMethodItem) {\n+        this.selectedItem = selectedItem\n+    }\n+\n+    override fun onPrePayment(callback: OnReadyForPaymentCallback) {\n+        selectedItem?.let { item ->\n+            payerCompliance?.let {\n+                if (item.isAdditionalInfoNeeded && it.isCompliant) {\n+                    completePayerInformation(it.sensitiveInformation)\n+                    requireCurrentConfiguration(item, callback)\n+                } else if (item.isAdditionalInfoNeeded) {\n+                    KnowYourCustomerFlowEvent(viewTracker).track()\n+                    observableDeepLink.value = Event(it.turnComplianceDeepLink)\n+                }\n+            }\n+        }\n+    }\n+\n+    private fun requireCurrentConfiguration(item: OfflineMethodItem, callback: OnReadyForPaymentCallback) {\n+        val paymentMethodId = item.paymentMethodId.orIfEmpty(TextUtil.EMPTY)\n+        val paymentTypeId = item.paymentTypeId.orIfEmpty(TextUtil.EMPTY)\n+        val confirmData = ConfirmData.from(paymentTypeId, paymentMethodId,\n+            payerCompliance?.isCompliant == true, item.isAdditionalInfoNeeded)\n+        val paymentConfiguration = PaymentConfiguration(paymentMethodId, paymentTypeId,\n+            paymentMethodId, isCard = false, splitPayment = false, payerCost = null)\n+        callback.call(paymentConfiguration, confirmData)\n+    }\n+\n+    private fun completePayerInformation(sensitiveInformation: SensitiveInformation) {\n+        val checkoutPreference = paymentSettingRepository.checkoutPreference\n+        val payer = checkoutPreference!!.payer\n+        payer.firstName = sensitiveInformation.firstName\n+        payer.lastName = sensitiveInformation.lastName\n+        payer.identification = sensitiveInformation.identification\n+        paymentSettingRepository.configure(checkoutPreference)\n+    }\n+\n+    override fun onBack() {\n+        BackEvent(viewTracker).track()\n+    }\n+\n+    override fun getObservableDeepLink(): LiveData<Event<String>> = observableDeepLink", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c03b277173687a3335c24da37f13586bb81a37bf"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcyMTY0MA==", "bodyText": "Si solo vamos a trackear, te parece bien que le cambiemos el nombre a algo como onTrackBack() o trackBack()?", "url": "https://github.com/mercadopago/px-android/pull/2285#discussion_r470721640", "createdAt": "2020-08-14T16:14:56Z", "author": {"login": "jorGonzalez291292"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/express/offline_methods/OfflineMethodsViewModel.kt", "diffHunk": "@@ -0,0 +1,102 @@\n+package com.mercadopago.android.px.internal.features.express.offline_methods\n+\n+import androidx.lifecycle.LiveData\n+import androidx.lifecycle.MutableLiveData\n+import com.mercadopago.android.px.internal.base.BaseViewModel\n+import com.mercadopago.android.px.internal.callbacks.Event\n+import com.mercadopago.android.px.internal.extensions.orIfEmpty\n+import com.mercadopago.android.px.internal.features.pay_button.PayButton.OnReadyForPaymentCallback\n+import com.mercadopago.android.px.internal.repository.AmountRepository\n+import com.mercadopago.android.px.internal.repository.DiscountRepository\n+import com.mercadopago.android.px.internal.repository.InitRepository\n+import com.mercadopago.android.px.internal.repository.PaymentSettingRepository\n+import com.mercadopago.android.px.internal.util.TextUtil\n+import com.mercadopago.android.px.internal.viewmodel.AmountLocalized\n+import com.mercadopago.android.px.model.OfflineMethodsCompliance\n+import com.mercadopago.android.px.model.SensitiveInformation\n+import com.mercadopago.android.px.model.internal.PaymentConfiguration\n+import com.mercadopago.android.px.tracking.internal.events.BackEvent\n+import com.mercadopago.android.px.tracking.internal.events.KnowYourCustomerFlowEvent\n+import com.mercadopago.android.px.tracking.internal.model.ConfirmData\n+import com.mercadopago.android.px.tracking.internal.views.OfflineMethodsViewTracker\n+import kotlinx.coroutines.CoroutineScope\n+import kotlinx.coroutines.Dispatchers\n+import kotlinx.coroutines.launch\n+\n+class OfflineMethodsViewModel(private val initRepository: InitRepository,\n+    private val paymentSettingRepository: PaymentSettingRepository,\n+    private val amountRepository: AmountRepository,\n+    private val discountRepository: DiscountRepository) : BaseViewModel(), OfflineMethods.ViewModel {\n+\n+    private lateinit var viewTracker: OfflineMethodsViewTracker\n+    private var payerCompliance: OfflineMethodsCompliance? = null\n+    private var selectedItem: OfflineMethodItem? = null\n+\n+    private val observableDeepLink = MutableLiveData<Event<String>>()\n+\n+    override fun onViewLoaded(): LiveData<OfflineMethods.Model> {\n+        val liveData = MutableLiveData<OfflineMethods.Model>()\n+        CoroutineScope(Dispatchers.IO).launch {\n+            initRepository.loadInitResponse()?.let {\n+                val offlineMethods = it.express.firstOrNull { express -> express.isOfflineMethods }?.offlineMethods\n+                val bottomDescription = offlineMethods?.displayInfo?.bottomDescription\n+                val defaultPaymentTypeId = offlineMethods?.paymentTypes?.firstOrNull()?.id ?: TextUtil.EMPTY\n+                val amountLocalized = AmountLocalized(\n+                    amountRepository.getAmountToPay(defaultPaymentTypeId, discountRepository.currentConfiguration),\n+                    paymentSettingRepository.currency)\n+                payerCompliance = it.payerCompliance?.offlineMethods\n+                val offlinePaymentTypes = offlineMethods?.paymentTypes.orEmpty()\n+                viewTracker = OfflineMethodsViewTracker(offlinePaymentTypes)\n+                liveData.postValue(OfflineMethods.Model(bottomDescription, amountLocalized, offlinePaymentTypes))\n+            }\n+        }\n+        return liveData\n+    }\n+\n+    override fun trackView() {\n+        viewTracker.track()\n+    }\n+\n+    override fun onMethodSelected(selectedItem: OfflineMethodItem) {\n+        this.selectedItem = selectedItem\n+    }\n+\n+    override fun onPrePayment(callback: OnReadyForPaymentCallback) {\n+        selectedItem?.let { item ->\n+            payerCompliance?.let {\n+                if (item.isAdditionalInfoNeeded && it.isCompliant) {\n+                    completePayerInformation(it.sensitiveInformation)\n+                    requireCurrentConfiguration(item, callback)\n+                } else if (item.isAdditionalInfoNeeded) {\n+                    KnowYourCustomerFlowEvent(viewTracker).track()\n+                    observableDeepLink.value = Event(it.turnComplianceDeepLink)\n+                }\n+            }\n+        }\n+    }\n+\n+    private fun requireCurrentConfiguration(item: OfflineMethodItem, callback: OnReadyForPaymentCallback) {\n+        val paymentMethodId = item.paymentMethodId.orIfEmpty(TextUtil.EMPTY)\n+        val paymentTypeId = item.paymentTypeId.orIfEmpty(TextUtil.EMPTY)\n+        val confirmData = ConfirmData.from(paymentTypeId, paymentMethodId,\n+            payerCompliance?.isCompliant == true, item.isAdditionalInfoNeeded)\n+        val paymentConfiguration = PaymentConfiguration(paymentMethodId, paymentTypeId,\n+            paymentMethodId, isCard = false, splitPayment = false, payerCost = null)\n+        callback.call(paymentConfiguration, confirmData)\n+    }\n+\n+    private fun completePayerInformation(sensitiveInformation: SensitiveInformation) {\n+        val checkoutPreference = paymentSettingRepository.checkoutPreference\n+        val payer = checkoutPreference!!.payer\n+        payer.firstName = sensitiveInformation.firstName\n+        payer.lastName = sensitiveInformation.lastName\n+        payer.identification = sensitiveInformation.identification\n+        paymentSettingRepository.configure(checkoutPreference)\n+    }\n+\n+    override fun onBack() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c03b277173687a3335c24da37f13586bb81a37bf"}, "originalPosition": 97}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c03b277173687a3335c24da37f13586bb81a37bf", "author": {"user": {"login": "cgaggino", "name": "Cristian Gaggino"}}, "url": "https://github.com/mercadopago/px-android/commit/c03b277173687a3335c24da37f13586bb81a37bf", "committedDate": "2020-08-14T13:27:58Z", "message": "* Improved offline methods to open automatically collapsed and always show pay button"}, "afterCommit": {"oid": "3e910dee72cfda29b998428fd25821c46072bd0a", "author": {"user": {"login": "cgaggino", "name": "Cristian Gaggino"}}, "url": "https://github.com/mercadopago/px-android/commit/3e910dee72cfda29b998428fd25821c46072bd0a", "committedDate": "2020-08-14T17:23:22Z", "message": "* Improved offline methods to open automatically collapsed and always show pay button"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3e910dee72cfda29b998428fd25821c46072bd0a", "author": {"user": {"login": "cgaggino", "name": "Cristian Gaggino"}}, "url": "https://github.com/mercadopago/px-android/commit/3e910dee72cfda29b998428fd25821c46072bd0a", "committedDate": "2020-08-14T17:23:22Z", "message": "* Improved offline methods to open automatically collapsed and always show pay button"}, "afterCommit": {"oid": "da17d49290ebda8126d2e4c3f0ab868becad5c7e", "author": {"user": {"login": "cgaggino", "name": "Cristian Gaggino"}}, "url": "https://github.com/mercadopago/px-android/commit/da17d49290ebda8126d2e4c3f0ab868becad5c7e", "committedDate": "2020-08-14T17:26:51Z", "message": "* Improved offline methods to open automatically collapsed and always show pay button"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "054d1d53712d3e575e02b1376d779890aeeece3f", "author": {"user": {"login": "cgaggino", "name": "Cristian Gaggino"}}, "url": "https://github.com/mercadopago/px-android/commit/054d1d53712d3e575e02b1376d779890aeeece3f", "committedDate": "2020-08-14T17:52:26Z", "message": "* Improved offline methods to open automatically collapsed and always show pay button"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "da17d49290ebda8126d2e4c3f0ab868becad5c7e", "author": {"user": {"login": "cgaggino", "name": "Cristian Gaggino"}}, "url": "https://github.com/mercadopago/px-android/commit/da17d49290ebda8126d2e4c3f0ab868becad5c7e", "committedDate": "2020-08-14T17:26:51Z", "message": "* Improved offline methods to open automatically collapsed and always show pay button"}, "afterCommit": {"oid": "054d1d53712d3e575e02b1376d779890aeeece3f", "author": {"user": {"login": "cgaggino", "name": "Cristian Gaggino"}}, "url": "https://github.com/mercadopago/px-android/commit/054d1d53712d3e575e02b1376d779890aeeece3f", "committedDate": "2020-08-14T17:52:26Z", "message": "* Improved offline methods to open automatically collapsed and always show pay button"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NTQ2MDk2", "url": "https://github.com/mercadopago/px-android/pull/2285#pullrequestreview-469546096", "createdAt": "2020-08-18T15:02:27Z", "commit": {"oid": "054d1d53712d3e575e02b1376d779890aeeece3f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNDk4Mjc0", "url": "https://github.com/mercadopago/px-android/pull/2285#pullrequestreview-470498274", "createdAt": "2020-08-19T14:11:28Z", "commit": {"oid": "054d1d53712d3e575e02b1376d779890aeeece3f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDoxMToyOVrOHDJSFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDoxMToyOVrOHDJSFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA1OTg2Mg==", "bodyText": "Magia pura", "url": "https://github.com/mercadopago/px-android/pull/2285#discussion_r473059862", "createdAt": "2020-08-19T14:11:29Z", "author": {"login": "guchito9"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/express/offline_methods/OfflineMethodsFragment.kt", "diffHunk": "@@ -0,0 +1,217 @@\n+package com.mercadopago.android.px.internal.features.express.offline_methods\n+\n+import android.content.Context\n+import android.content.Intent\n+import android.net.Uri\n+import android.os.Bundle\n+import android.text.Editable\n+import android.text.SpannableStringBuilder\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import android.view.animation.Animation\n+import android.view.animation.AnimationUtils\n+import android.widget.TextView\n+import androidx.core.content.ContextCompat\n+import androidx.fragment.app.Fragment\n+import androidx.recyclerview.widget.DividerItemDecoration\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import androidx.recyclerview.widget.RecyclerView\n+import com.google.android.material.bottomsheet.BottomSheetBehavior\n+import com.mercadopago.android.px.R\n+import com.mercadopago.android.px.core.BackHandler\n+import com.mercadopago.android.px.internal.di.Session\n+import com.mercadopago.android.px.internal.extensions.invisible\n+import com.mercadopago.android.px.internal.extensions.visible\n+import com.mercadopago.android.px.internal.features.pay_button.PayButton.OnReadyForPaymentCallback\n+import com.mercadopago.android.px.internal.features.pay_button.PayButtonFragment\n+import com.mercadopago.android.px.internal.font.PxFont\n+import com.mercadopago.android.px.internal.util.TextUtil\n+import com.mercadopago.android.px.internal.util.ViewUtils\n+import com.mercadopago.android.px.internal.util.nonNullObserve\n+import com.mercadopago.android.px.internal.util.nonNullObserveOnce\n+import com.mercadopago.android.px.internal.view.MPTextView\n+import com.mercadopago.android.px.internal.viewmodel.AmountLocalized\n+import com.mercadopago.android.px.model.internal.Text\n+\n+class OfflineMethodsFragment : Fragment(), OfflineMethods.View, BackHandler {\n+    private var fadeInAnimation: Animation? = null\n+    private var fadeOutAnimation: Animation? = null\n+\n+    private lateinit var panIndicator: View\n+    private lateinit var payButtonFragment: PayButtonFragment\n+    private lateinit var totalAmountTextView: TextView\n+    private lateinit var header: View\n+    private lateinit var footer: View\n+    private lateinit var fakeFooter: View\n+    private lateinit var bottomDescription: MPTextView\n+    private lateinit var adapter: OfflineMethodsAdapter\n+\n+    private lateinit var bottomSheet: View\n+    private lateinit var bottomSheetBehavior: BottomSheetBehavior<View>\n+    private lateinit var viewModel: OfflineMethodsViewModel\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n+        return inflater.inflate(R.layout.px_fragment_offline_methods, container, false)\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        viewModel = Session.getInstance().viewModelModule.get(this, OfflineMethodsViewModel::class.java)\n+\n+        with(view) {\n+            header = findViewById(R.id.header)\n+            footer = findViewById(R.id.bottom_sheet_footer)\n+            fakeFooter = findViewById(R.id.fake_footer)\n+            panIndicator = findViewById(R.id.pan_indicator)\n+            bottomSheet = findViewById(R.id.offline_methods_bottom_sheet)\n+            totalAmountTextView = findViewById(R.id.total_amount)\n+            bottomDescription = findViewById(R.id.bottom_description)\n+            configureRecycler(findViewById(R.id.methods))\n+        }\n+\n+        payButtonFragment = childFragmentManager.findFragmentById(R.id.pay_button) as PayButtonFragment\n+        payButtonFragment.disable()\n+\n+        configureBottomSheet()\n+\n+        viewModel.onViewLoaded().nonNullObserveOnce(viewLifecycleOwner) { model -> draw(model) }\n+        viewModel.getObservableDeepLink().nonNullObserve(viewLifecycleOwner) { event ->\n+            event.getContentIfNotHandled()?.run { startKnowYourCustomerFlow(this) }\n+        }\n+    }\n+\n+    private fun draw(model: OfflineMethods.Model) {\n+        ViewUtils.loadOrHide(View.GONE, Text.EMPTY, bottomDescription)\n+        fakeFooter.layoutParams.height = footer.height\n+        updateTotalView(model.amountLocalized)\n+        adapter.setItems(FromOfflinePaymentTypesMetadataToOfflineItems(context).map(model.offlinePaymentTypes))\n+    }\n+\n+    private fun configureBottomSheet() {\n+        bottomSheetBehavior = BottomSheetBehavior.from(bottomSheet)\n+        bottomSheetBehavior.isHideable = true\n+        bottomSheetBehavior.state = BottomSheetBehavior.STATE_HIDDEN\n+        bottomSheetBehavior.setBottomSheetCallback(object : BottomSheetBehavior.BottomSheetCallback() {\n+            override fun onStateChanged(view: View, state: Int) {}\n+            override fun onSlide(view: View, offset: Float) {\n+                header.alpha = if (offset >= 0) offset else 0f\n+                footer.alpha = if (offset >= 0) 1f else if (offset <= -0.5) 0f else 1 + offset*2\n+                header.alpha.takeIf { it == 0f }?.run { header.invisible() } ?: run { header.visible() }\n+                footer.alpha.takeIf { it == 0f }?.run { footer.invisible() } ?: run { footer.visible() }\n+            }\n+        })\n+    }\n+\n+    private fun configureRecycler(recycler: RecyclerView) {\n+        val linearLayoutManager = LinearLayoutManager(context).also { recycler.layoutManager = it }\n+        recycler.addOnScrollListener(object : RecyclerView.OnScrollListener() {\n+            override fun onScrollStateChanged(recyclerView: RecyclerView, newState: Int) {\n+                super.onScrollStateChanged(recyclerView, newState)\n+                val atTop = !recyclerView.canScrollVertically(-1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "054d1d53712d3e575e02b1376d779890aeeece3f"}, "originalPosition": 111}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNTA0ODcy", "url": "https://github.com/mercadopago/px-android/pull/2285#pullrequestreview-470504872", "createdAt": "2020-08-19T14:18:21Z", "commit": {"oid": "054d1d53712d3e575e02b1376d779890aeeece3f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0452a8a8dedaab9b11ac7bae335836ad4ce21637", "author": {"user": {"login": "cgaggino", "name": "Cristian Gaggino"}}, "url": "https://github.com/mercadopago/px-android/commit/0452a8a8dedaab9b11ac7bae335836ad4ce21637", "committedDate": "2020-08-20T13:27:03Z", "message": "Merge branch 'master' into feature/show_offline_methods_automatically"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8fe3d2485efea349ef331e7057364b7ac26d3d1", "author": {"user": {"login": "cgaggino", "name": "Cristian Gaggino"}}, "url": "https://github.com/mercadopago/px-android/commit/d8fe3d2485efea349ef331e7057364b7ac26d3d1", "committedDate": "2020-08-20T13:29:01Z", "message": "* Added top constant"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d6237e7c202382ac6e15d3ac8fd01fd0afed608", "author": {"user": {"login": "cgaggino", "name": "Cristian Gaggino"}}, "url": "https://github.com/mercadopago/px-android/commit/8d6237e7c202382ac6e15d3ac8fd01fd0afed608", "committedDate": "2020-08-20T14:46:47Z", "message": "Merge branch 'master' into feature/show_offline_methods_automatically"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3737, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}