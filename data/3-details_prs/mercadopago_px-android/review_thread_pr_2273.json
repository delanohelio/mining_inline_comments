{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0MjYzNDA1", "number": 2273, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNjo1NDoxMlrOEXtsKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNjo1NDo1MlrOEXttCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzAxMjg4OnYy", "diffSide": "RIGHT", "path": "px-checkout/src/test/java/com/mercadopago/android/px/format/InterestRateFormatterTest.kt", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNjo1NDoxMlrOG_qFdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNDozNzowNlrOHAOkRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQwMjk5OQ==", "bodyText": "osea que crashea si el interest rate es empty?", "url": "https://github.com/mercadopago/px-android/pull/2273#discussion_r469402999", "createdAt": "2020-08-12T16:54:12Z", "author": {"login": "cgaggino"}, "path": "px-checkout/src/test/java/com/mercadopago/android/px/format/InterestRateFormatterTest.kt", "diffHunk": "@@ -0,0 +1,131 @@\n+package com.mercadopago.android.px.format\n+\n+import android.support.v4.content.ContextCompat\n+import android.text.SpannableStringBuilder\n+import android.text.style.ForegroundColorSpan\n+import com.mercadopago.android.px.BasicRobolectricTest\n+import com.mercadopago.android.px.R\n+import com.mercadopago.android.px.internal.font.PxFont\n+import com.mercadopago.android.px.internal.util.JsonUtil\n+import com.mercadopago.android.px.internal.util.ViewUtils\n+import com.mercadopago.android.px.internal.util.textformatter.InterestFormatter\n+import com.mercadopago.android.px.model.internal.Text\n+import org.junit.Assert.assertEquals\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import org.robolectric.RobolectricTestRunner\n+\n+@RunWith(RobolectricTestRunner::class)\n+class InterestRateFormatterTest : BasicRobolectricTest() {\n+\n+    private lateinit var expected: SpannableStringBuilder\n+    private lateinit var actual: SpannableStringBuilder\n+\n+    @Before\n+    fun setUp() {\n+        expected = SpannableStringBuilder()\n+        actual = SpannableStringBuilder()\n+    }\n+\n+    @Test\n+    fun whenInterestRateIsCFT() {\n+        setFontAndColor(expected, \"3x \\$47,88\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(expected, \"(\\$143,64)\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+        setFontAndColor(expected, \"CFT: 199,26%\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+\n+        val cftText = JsonUtil\n+                .fromJson(\"{\\\"message\\\":\\\"CFT: 199,26%\\\",\\\"text_color\\\":\\\"#999999\\\",\\\"weight\\\":\\\"regular\\\"}\",\n+                        Text::class.java)\n+\n+        setFontAndColor(actual, \"3x \\$47,88\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(actual, \"(\\$143,64)\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+        InterestFormatter(actual).withText(cftText).apply(getContext())\n+\n+        assertEqualsContent()\n+    }\n+\n+    @Test\n+    fun whenInterestRateIsCFTNA() {\n+\n+        setFontAndColor(expected, \"3x \\$45,88\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(expected, \"(\\$137,64)\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+        setFontAndColor(expected, \"CFTNA: 96,8%\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+\n+        val cftnaText = JsonUtil\n+                .fromJson(\"{\\\"message\\\":\\\"CFTNA: 96,8%\\\",\\\"text_color\\\":\\\"#999999\\\",\\\"weight\\\":\\\"regular\\\"}\",\n+                        Text::class.java)\n+\n+        setFontAndColor(actual, \"3x \\$45,88\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(actual, \"(\\$137,64)\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+        InterestFormatter(actual).withText(cftnaText).apply(getContext())\n+\n+        assertEqualsContent()\n+    }\n+\n+    @Test\n+    fun whenInterestRateIsCFTEA() {\n+        setFontAndColor(expected, \"3x \\$40\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(expected, \"Interest-free\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_components_success_color))\n+        setFontAndColor(expected, \"CFTEA: 0,00%\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+\n+        val cfteaText = JsonUtil\n+                .fromJson(\"{\\\"message\\\":\\\"CFTEA: 0,00%\\\",\\\"text_color\\\":\\\"#999999\\\",\\\"weight\\\":\\\"regular\\\"}\",\n+                        Text::class.java)\n+\n+        setFontAndColor(actual, \"3x \\$40\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(actual, \"Interest-free\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_components_success_color))\n+        InterestFormatter(actual).withText(cfteaText).apply(getContext())\n+\n+        assertEqualsContent()\n+    }\n+\n+    @Test(expected = IllegalStateException::class)\n+    fun whenInterestRateIsEmpty() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55be082b82c0b4a8f6a9ef2c8837a5c896b5d054"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQwMzE4OA==", "bodyText": "o est\u00e1 handleada la excepci\u00f3n", "url": "https://github.com/mercadopago/px-android/pull/2273#discussion_r469403188", "createdAt": "2020-08-12T16:54:32Z", "author": {"login": "cgaggino"}, "path": "px-checkout/src/test/java/com/mercadopago/android/px/format/InterestRateFormatterTest.kt", "diffHunk": "@@ -0,0 +1,131 @@\n+package com.mercadopago.android.px.format\n+\n+import android.support.v4.content.ContextCompat\n+import android.text.SpannableStringBuilder\n+import android.text.style.ForegroundColorSpan\n+import com.mercadopago.android.px.BasicRobolectricTest\n+import com.mercadopago.android.px.R\n+import com.mercadopago.android.px.internal.font.PxFont\n+import com.mercadopago.android.px.internal.util.JsonUtil\n+import com.mercadopago.android.px.internal.util.ViewUtils\n+import com.mercadopago.android.px.internal.util.textformatter.InterestFormatter\n+import com.mercadopago.android.px.model.internal.Text\n+import org.junit.Assert.assertEquals\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import org.robolectric.RobolectricTestRunner\n+\n+@RunWith(RobolectricTestRunner::class)\n+class InterestRateFormatterTest : BasicRobolectricTest() {\n+\n+    private lateinit var expected: SpannableStringBuilder\n+    private lateinit var actual: SpannableStringBuilder\n+\n+    @Before\n+    fun setUp() {\n+        expected = SpannableStringBuilder()\n+        actual = SpannableStringBuilder()\n+    }\n+\n+    @Test\n+    fun whenInterestRateIsCFT() {\n+        setFontAndColor(expected, \"3x \\$47,88\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(expected, \"(\\$143,64)\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+        setFontAndColor(expected, \"CFT: 199,26%\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+\n+        val cftText = JsonUtil\n+                .fromJson(\"{\\\"message\\\":\\\"CFT: 199,26%\\\",\\\"text_color\\\":\\\"#999999\\\",\\\"weight\\\":\\\"regular\\\"}\",\n+                        Text::class.java)\n+\n+        setFontAndColor(actual, \"3x \\$47,88\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(actual, \"(\\$143,64)\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+        InterestFormatter(actual).withText(cftText).apply(getContext())\n+\n+        assertEqualsContent()\n+    }\n+\n+    @Test\n+    fun whenInterestRateIsCFTNA() {\n+\n+        setFontAndColor(expected, \"3x \\$45,88\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(expected, \"(\\$137,64)\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+        setFontAndColor(expected, \"CFTNA: 96,8%\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+\n+        val cftnaText = JsonUtil\n+                .fromJson(\"{\\\"message\\\":\\\"CFTNA: 96,8%\\\",\\\"text_color\\\":\\\"#999999\\\",\\\"weight\\\":\\\"regular\\\"}\",\n+                        Text::class.java)\n+\n+        setFontAndColor(actual, \"3x \\$45,88\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(actual, \"(\\$137,64)\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+        InterestFormatter(actual).withText(cftnaText).apply(getContext())\n+\n+        assertEqualsContent()\n+    }\n+\n+    @Test\n+    fun whenInterestRateIsCFTEA() {\n+        setFontAndColor(expected, \"3x \\$40\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(expected, \"Interest-free\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_components_success_color))\n+        setFontAndColor(expected, \"CFTEA: 0,00%\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+\n+        val cfteaText = JsonUtil\n+                .fromJson(\"{\\\"message\\\":\\\"CFTEA: 0,00%\\\",\\\"text_color\\\":\\\"#999999\\\",\\\"weight\\\":\\\"regular\\\"}\",\n+                        Text::class.java)\n+\n+        setFontAndColor(actual, \"3x \\$40\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(actual, \"Interest-free\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_components_success_color))\n+        InterestFormatter(actual).withText(cfteaText).apply(getContext())\n+\n+        assertEqualsContent()\n+    }\n+\n+    @Test(expected = IllegalStateException::class)\n+    fun whenInterestRateIsEmpty() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQwMjk5OQ=="}, "originalCommit": {"oid": "55be082b82c0b4a8f6a9ef2c8837a5c896b5d054"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk3NzMzNQ==", "bodyText": "Claro, el formatter no acepta un objeto Text null, el que lo usa debe checkear que no lo sea.\nfun withText(text: Text) = apply {\n        this.text = text.message\n        this.font = PxFont.from(text.weight)\n        try {\n            this.textColor = Color.parseColor(text.textColor)\n        } catch (e: IllegalArgumentException) {}\n        return this\n    }", "url": "https://github.com/mercadopago/px-android/pull/2273#discussion_r469977335", "createdAt": "2020-08-13T14:06:28Z", "author": {"login": "jorGonzalez291292"}, "path": "px-checkout/src/test/java/com/mercadopago/android/px/format/InterestRateFormatterTest.kt", "diffHunk": "@@ -0,0 +1,131 @@\n+package com.mercadopago.android.px.format\n+\n+import android.support.v4.content.ContextCompat\n+import android.text.SpannableStringBuilder\n+import android.text.style.ForegroundColorSpan\n+import com.mercadopago.android.px.BasicRobolectricTest\n+import com.mercadopago.android.px.R\n+import com.mercadopago.android.px.internal.font.PxFont\n+import com.mercadopago.android.px.internal.util.JsonUtil\n+import com.mercadopago.android.px.internal.util.ViewUtils\n+import com.mercadopago.android.px.internal.util.textformatter.InterestFormatter\n+import com.mercadopago.android.px.model.internal.Text\n+import org.junit.Assert.assertEquals\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import org.robolectric.RobolectricTestRunner\n+\n+@RunWith(RobolectricTestRunner::class)\n+class InterestRateFormatterTest : BasicRobolectricTest() {\n+\n+    private lateinit var expected: SpannableStringBuilder\n+    private lateinit var actual: SpannableStringBuilder\n+\n+    @Before\n+    fun setUp() {\n+        expected = SpannableStringBuilder()\n+        actual = SpannableStringBuilder()\n+    }\n+\n+    @Test\n+    fun whenInterestRateIsCFT() {\n+        setFontAndColor(expected, \"3x \\$47,88\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(expected, \"(\\$143,64)\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+        setFontAndColor(expected, \"CFT: 199,26%\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+\n+        val cftText = JsonUtil\n+                .fromJson(\"{\\\"message\\\":\\\"CFT: 199,26%\\\",\\\"text_color\\\":\\\"#999999\\\",\\\"weight\\\":\\\"regular\\\"}\",\n+                        Text::class.java)\n+\n+        setFontAndColor(actual, \"3x \\$47,88\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(actual, \"(\\$143,64)\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+        InterestFormatter(actual).withText(cftText).apply(getContext())\n+\n+        assertEqualsContent()\n+    }\n+\n+    @Test\n+    fun whenInterestRateIsCFTNA() {\n+\n+        setFontAndColor(expected, \"3x \\$45,88\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(expected, \"(\\$137,64)\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+        setFontAndColor(expected, \"CFTNA: 96,8%\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+\n+        val cftnaText = JsonUtil\n+                .fromJson(\"{\\\"message\\\":\\\"CFTNA: 96,8%\\\",\\\"text_color\\\":\\\"#999999\\\",\\\"weight\\\":\\\"regular\\\"}\",\n+                        Text::class.java)\n+\n+        setFontAndColor(actual, \"3x \\$45,88\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(actual, \"(\\$137,64)\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+        InterestFormatter(actual).withText(cftnaText).apply(getContext())\n+\n+        assertEqualsContent()\n+    }\n+\n+    @Test\n+    fun whenInterestRateIsCFTEA() {\n+        setFontAndColor(expected, \"3x \\$40\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(expected, \"Interest-free\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_components_success_color))\n+        setFontAndColor(expected, \"CFTEA: 0,00%\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+\n+        val cfteaText = JsonUtil\n+                .fromJson(\"{\\\"message\\\":\\\"CFTEA: 0,00%\\\",\\\"text_color\\\":\\\"#999999\\\",\\\"weight\\\":\\\"regular\\\"}\",\n+                        Text::class.java)\n+\n+        setFontAndColor(actual, \"3x \\$40\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(actual, \"Interest-free\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_components_success_color))\n+        InterestFormatter(actual).withText(cfteaText).apply(getContext())\n+\n+        assertEqualsContent()\n+    }\n+\n+    @Test(expected = IllegalStateException::class)\n+    fun whenInterestRateIsEmpty() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQwMjk5OQ=="}, "originalCommit": {"oid": "55be082b82c0b4a8f6a9ef2c8837a5c896b5d054"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAwMDcxMQ==", "bodyText": "borrado", "url": "https://github.com/mercadopago/px-android/pull/2273#discussion_r470000711", "createdAt": "2020-08-13T14:37:06Z", "author": {"login": "jorGonzalez291292"}, "path": "px-checkout/src/test/java/com/mercadopago/android/px/format/InterestRateFormatterTest.kt", "diffHunk": "@@ -0,0 +1,131 @@\n+package com.mercadopago.android.px.format\n+\n+import android.support.v4.content.ContextCompat\n+import android.text.SpannableStringBuilder\n+import android.text.style.ForegroundColorSpan\n+import com.mercadopago.android.px.BasicRobolectricTest\n+import com.mercadopago.android.px.R\n+import com.mercadopago.android.px.internal.font.PxFont\n+import com.mercadopago.android.px.internal.util.JsonUtil\n+import com.mercadopago.android.px.internal.util.ViewUtils\n+import com.mercadopago.android.px.internal.util.textformatter.InterestFormatter\n+import com.mercadopago.android.px.model.internal.Text\n+import org.junit.Assert.assertEquals\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import org.robolectric.RobolectricTestRunner\n+\n+@RunWith(RobolectricTestRunner::class)\n+class InterestRateFormatterTest : BasicRobolectricTest() {\n+\n+    private lateinit var expected: SpannableStringBuilder\n+    private lateinit var actual: SpannableStringBuilder\n+\n+    @Before\n+    fun setUp() {\n+        expected = SpannableStringBuilder()\n+        actual = SpannableStringBuilder()\n+    }\n+\n+    @Test\n+    fun whenInterestRateIsCFT() {\n+        setFontAndColor(expected, \"3x \\$47,88\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(expected, \"(\\$143,64)\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+        setFontAndColor(expected, \"CFT: 199,26%\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+\n+        val cftText = JsonUtil\n+                .fromJson(\"{\\\"message\\\":\\\"CFT: 199,26%\\\",\\\"text_color\\\":\\\"#999999\\\",\\\"weight\\\":\\\"regular\\\"}\",\n+                        Text::class.java)\n+\n+        setFontAndColor(actual, \"3x \\$47,88\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(actual, \"(\\$143,64)\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+        InterestFormatter(actual).withText(cftText).apply(getContext())\n+\n+        assertEqualsContent()\n+    }\n+\n+    @Test\n+    fun whenInterestRateIsCFTNA() {\n+\n+        setFontAndColor(expected, \"3x \\$45,88\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(expected, \"(\\$137,64)\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+        setFontAndColor(expected, \"CFTNA: 96,8%\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+\n+        val cftnaText = JsonUtil\n+                .fromJson(\"{\\\"message\\\":\\\"CFTNA: 96,8%\\\",\\\"text_color\\\":\\\"#999999\\\",\\\"weight\\\":\\\"regular\\\"}\",\n+                        Text::class.java)\n+\n+        setFontAndColor(actual, \"3x \\$45,88\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(actual, \"(\\$137,64)\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+        InterestFormatter(actual).withText(cftnaText).apply(getContext())\n+\n+        assertEqualsContent()\n+    }\n+\n+    @Test\n+    fun whenInterestRateIsCFTEA() {\n+        setFontAndColor(expected, \"3x \\$40\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(expected, \"Interest-free\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_components_success_color))\n+        setFontAndColor(expected, \"CFTEA: 0,00%\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+\n+        val cfteaText = JsonUtil\n+                .fromJson(\"{\\\"message\\\":\\\"CFTEA: 0,00%\\\",\\\"text_color\\\":\\\"#999999\\\",\\\"weight\\\":\\\"regular\\\"}\",\n+                        Text::class.java)\n+\n+        setFontAndColor(actual, \"3x \\$40\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(actual, \"Interest-free\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_components_success_color))\n+        InterestFormatter(actual).withText(cfteaText).apply(getContext())\n+\n+        assertEqualsContent()\n+    }\n+\n+    @Test(expected = IllegalStateException::class)\n+    fun whenInterestRateIsEmpty() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQwMjk5OQ=="}, "originalCommit": {"oid": "55be082b82c0b4a8f6a9ef2c8837a5c896b5d054"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzAxNTE1OnYy", "diffSide": "RIGHT", "path": "px-checkout/src/test/java/com/mercadopago/android/px/format/InterestRateFormatterTest.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNjo1NDo1MlrOG_qHAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNDozNzoxNlrOHAOkyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQwMzM5Mw==", "bodyText": "idem", "url": "https://github.com/mercadopago/px-android/pull/2273#discussion_r469403393", "createdAt": "2020-08-12T16:54:52Z", "author": {"login": "cgaggino"}, "path": "px-checkout/src/test/java/com/mercadopago/android/px/format/InterestRateFormatterTest.kt", "diffHunk": "@@ -0,0 +1,131 @@\n+package com.mercadopago.android.px.format\n+\n+import android.support.v4.content.ContextCompat\n+import android.text.SpannableStringBuilder\n+import android.text.style.ForegroundColorSpan\n+import com.mercadopago.android.px.BasicRobolectricTest\n+import com.mercadopago.android.px.R\n+import com.mercadopago.android.px.internal.font.PxFont\n+import com.mercadopago.android.px.internal.util.JsonUtil\n+import com.mercadopago.android.px.internal.util.ViewUtils\n+import com.mercadopago.android.px.internal.util.textformatter.InterestFormatter\n+import com.mercadopago.android.px.model.internal.Text\n+import org.junit.Assert.assertEquals\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import org.robolectric.RobolectricTestRunner\n+\n+@RunWith(RobolectricTestRunner::class)\n+class InterestRateFormatterTest : BasicRobolectricTest() {\n+\n+    private lateinit var expected: SpannableStringBuilder\n+    private lateinit var actual: SpannableStringBuilder\n+\n+    @Before\n+    fun setUp() {\n+        expected = SpannableStringBuilder()\n+        actual = SpannableStringBuilder()\n+    }\n+\n+    @Test\n+    fun whenInterestRateIsCFT() {\n+        setFontAndColor(expected, \"3x \\$47,88\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(expected, \"(\\$143,64)\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+        setFontAndColor(expected, \"CFT: 199,26%\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+\n+        val cftText = JsonUtil\n+                .fromJson(\"{\\\"message\\\":\\\"CFT: 199,26%\\\",\\\"text_color\\\":\\\"#999999\\\",\\\"weight\\\":\\\"regular\\\"}\",\n+                        Text::class.java)\n+\n+        setFontAndColor(actual, \"3x \\$47,88\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(actual, \"(\\$143,64)\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+        InterestFormatter(actual).withText(cftText).apply(getContext())\n+\n+        assertEqualsContent()\n+    }\n+\n+    @Test\n+    fun whenInterestRateIsCFTNA() {\n+\n+        setFontAndColor(expected, \"3x \\$45,88\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(expected, \"(\\$137,64)\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+        setFontAndColor(expected, \"CFTNA: 96,8%\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+\n+        val cftnaText = JsonUtil\n+                .fromJson(\"{\\\"message\\\":\\\"CFTNA: 96,8%\\\",\\\"text_color\\\":\\\"#999999\\\",\\\"weight\\\":\\\"regular\\\"}\",\n+                        Text::class.java)\n+\n+        setFontAndColor(actual, \"3x \\$45,88\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(actual, \"(\\$137,64)\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+        InterestFormatter(actual).withText(cftnaText).apply(getContext())\n+\n+        assertEqualsContent()\n+    }\n+\n+    @Test\n+    fun whenInterestRateIsCFTEA() {\n+        setFontAndColor(expected, \"3x \\$40\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(expected, \"Interest-free\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_components_success_color))\n+        setFontAndColor(expected, \"CFTEA: 0,00%\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+\n+        val cfteaText = JsonUtil\n+                .fromJson(\"{\\\"message\\\":\\\"CFTEA: 0,00%\\\",\\\"text_color\\\":\\\"#999999\\\",\\\"weight\\\":\\\"regular\\\"}\",\n+                        Text::class.java)\n+\n+        setFontAndColor(actual, \"3x \\$40\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(actual, \"Interest-free\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_components_success_color))\n+        InterestFormatter(actual).withText(cfteaText).apply(getContext())\n+\n+        assertEqualsContent()\n+    }\n+\n+    @Test(expected = IllegalStateException::class)\n+    fun whenInterestRateIsEmpty() {\n+\n+        val cftText = JsonUtil\n+                .fromJson(\"\",\n+                        Text::class.java)\n+\n+        setFontAndColor(actual, \"3x \\$47,88\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(actual, \"(\\$143,64)\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+        InterestFormatter(actual).withText(cftText).apply(getContext())\n+    }\n+\n+    @Test(expected = IllegalStateException::class)\n+    fun whenInterestRateTextMessageIsEmpty() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55be082b82c0b4a8f6a9ef2c8837a5c896b5d054"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAwMDg0MQ==", "bodyText": "cambiado!", "url": "https://github.com/mercadopago/px-android/pull/2273#discussion_r470000841", "createdAt": "2020-08-13T14:37:16Z", "author": {"login": "jorGonzalez291292"}, "path": "px-checkout/src/test/java/com/mercadopago/android/px/format/InterestRateFormatterTest.kt", "diffHunk": "@@ -0,0 +1,131 @@\n+package com.mercadopago.android.px.format\n+\n+import android.support.v4.content.ContextCompat\n+import android.text.SpannableStringBuilder\n+import android.text.style.ForegroundColorSpan\n+import com.mercadopago.android.px.BasicRobolectricTest\n+import com.mercadopago.android.px.R\n+import com.mercadopago.android.px.internal.font.PxFont\n+import com.mercadopago.android.px.internal.util.JsonUtil\n+import com.mercadopago.android.px.internal.util.ViewUtils\n+import com.mercadopago.android.px.internal.util.textformatter.InterestFormatter\n+import com.mercadopago.android.px.model.internal.Text\n+import org.junit.Assert.assertEquals\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import org.robolectric.RobolectricTestRunner\n+\n+@RunWith(RobolectricTestRunner::class)\n+class InterestRateFormatterTest : BasicRobolectricTest() {\n+\n+    private lateinit var expected: SpannableStringBuilder\n+    private lateinit var actual: SpannableStringBuilder\n+\n+    @Before\n+    fun setUp() {\n+        expected = SpannableStringBuilder()\n+        actual = SpannableStringBuilder()\n+    }\n+\n+    @Test\n+    fun whenInterestRateIsCFT() {\n+        setFontAndColor(expected, \"3x \\$47,88\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(expected, \"(\\$143,64)\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+        setFontAndColor(expected, \"CFT: 199,26%\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+\n+        val cftText = JsonUtil\n+                .fromJson(\"{\\\"message\\\":\\\"CFT: 199,26%\\\",\\\"text_color\\\":\\\"#999999\\\",\\\"weight\\\":\\\"regular\\\"}\",\n+                        Text::class.java)\n+\n+        setFontAndColor(actual, \"3x \\$47,88\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(actual, \"(\\$143,64)\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+        InterestFormatter(actual).withText(cftText).apply(getContext())\n+\n+        assertEqualsContent()\n+    }\n+\n+    @Test\n+    fun whenInterestRateIsCFTNA() {\n+\n+        setFontAndColor(expected, \"3x \\$45,88\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(expected, \"(\\$137,64)\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+        setFontAndColor(expected, \"CFTNA: 96,8%\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+\n+        val cftnaText = JsonUtil\n+                .fromJson(\"{\\\"message\\\":\\\"CFTNA: 96,8%\\\",\\\"text_color\\\":\\\"#999999\\\",\\\"weight\\\":\\\"regular\\\"}\",\n+                        Text::class.java)\n+\n+        setFontAndColor(actual, \"3x \\$45,88\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(actual, \"(\\$137,64)\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+        InterestFormatter(actual).withText(cftnaText).apply(getContext())\n+\n+        assertEqualsContent()\n+    }\n+\n+    @Test\n+    fun whenInterestRateIsCFTEA() {\n+        setFontAndColor(expected, \"3x \\$40\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(expected, \"Interest-free\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_components_success_color))\n+        setFontAndColor(expected, \"CFTEA: 0,00%\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+\n+        val cfteaText = JsonUtil\n+                .fromJson(\"{\\\"message\\\":\\\"CFTEA: 0,00%\\\",\\\"text_color\\\":\\\"#999999\\\",\\\"weight\\\":\\\"regular\\\"}\",\n+                        Text::class.java)\n+\n+        setFontAndColor(actual, \"3x \\$40\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(actual, \"Interest-free\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_components_success_color))\n+        InterestFormatter(actual).withText(cfteaText).apply(getContext())\n+\n+        assertEqualsContent()\n+    }\n+\n+    @Test(expected = IllegalStateException::class)\n+    fun whenInterestRateIsEmpty() {\n+\n+        val cftText = JsonUtil\n+                .fromJson(\"\",\n+                        Text::class.java)\n+\n+        setFontAndColor(actual, \"3x \\$47,88\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(actual, \"(\\$143,64)\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+        InterestFormatter(actual).withText(cftText).apply(getContext())\n+    }\n+\n+    @Test(expected = IllegalStateException::class)\n+    fun whenInterestRateTextMessageIsEmpty() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQwMzM5Mw=="}, "originalCommit": {"oid": "55be082b82c0b4a8f6a9ef2c8837a5c896b5d054"}, "originalPosition": 96}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1757, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}