{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2MjQ5OTEz", "number": 2359, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDo0MDozMlrOEv0McQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjoxMDowM1rOEv3hfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTczNjgxOnYy", "diffSide": "RIGHT", "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/extensions/BaseExtensions.kt", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDo0MDozMlrOHlAgzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNDoxMDowN1rOHludCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU2Nzc1OA==", "bodyText": "should not be null", "url": "https://github.com/mercadopago/px-android/pull/2359#discussion_r508567758", "createdAt": "2020-10-20T14:40:32Z", "author": {"login": "cgaggino"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/extensions/BaseExtensions.kt", "diffHunk": "@@ -2,25 +2,22 @@ package com.mercadopago.android.px.internal.extensions\n \n import android.app.Activity\n import android.graphics.Rect\n-import android.view.View\n-import androidx.core.view.ViewCompat\n+import androidx.fragment.app.Fragment\n \n internal fun CharSequence?.isNotNullNorEmpty() = !isNullOrEmpty()\n \n internal fun <T : CharSequence> T?.orIfEmpty(fallback: T) = if (isNotNullNorEmpty()) this!! else fallback\n \n-internal fun View.gone() = apply { visibility = View.GONE }\n-\n-internal fun View.visible() = apply { visibility = View.VISIBLE }\n-\n-internal fun View.invisible() = apply { visibility = View.INVISIBLE }\n-\n internal fun Any?.runIfNull(action: () -> Unit) {\n     if (this == null) {\n         action.invoke()\n     }\n }\n \n+internal inline fun <reified T> notNull(param: T?) = param ?: error(\"${T::class.java.simpleName} not be null\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c9bd24623810f76482c37339d92d528ab0c1bea"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY2MjQ3MQ==", "bodyText": "cual es la diferencia con checkNotNull de kotlin?", "url": "https://github.com/mercadopago/px-android/pull/2359#discussion_r508662471", "createdAt": "2020-10-20T16:15:13Z", "author": {"login": "cgaggino"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/extensions/BaseExtensions.kt", "diffHunk": "@@ -2,25 +2,22 @@ package com.mercadopago.android.px.internal.extensions\n \n import android.app.Activity\n import android.graphics.Rect\n-import android.view.View\n-import androidx.core.view.ViewCompat\n+import androidx.fragment.app.Fragment\n \n internal fun CharSequence?.isNotNullNorEmpty() = !isNullOrEmpty()\n \n internal fun <T : CharSequence> T?.orIfEmpty(fallback: T) = if (isNotNullNorEmpty()) this!! else fallback\n \n-internal fun View.gone() = apply { visibility = View.GONE }\n-\n-internal fun View.visible() = apply { visibility = View.VISIBLE }\n-\n-internal fun View.invisible() = apply { visibility = View.INVISIBLE }\n-\n internal fun Any?.runIfNull(action: () -> Unit) {\n     if (this == null) {\n         action.invoke()\n     }\n }\n \n+internal inline fun <reified T> notNull(param: T?) = param ?: error(\"${T::class.java.simpleName} not be null\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU2Nzc1OA=="}, "originalCommit": {"oid": "6c9bd24623810f76482c37339d92d528ab0c1bea"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg3ODYyMQ==", "bodyText": "La diferencia es que no lo conoc\u00eda jajaja Y que el nuestro nos da un mensaje m\u00e1s personalizado :P", "url": "https://github.com/mercadopago/px-android/pull/2359#discussion_r508878621", "createdAt": "2020-10-20T22:30:53Z", "author": {"login": "jorGonzalez291292"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/extensions/BaseExtensions.kt", "diffHunk": "@@ -2,25 +2,22 @@ package com.mercadopago.android.px.internal.extensions\n \n import android.app.Activity\n import android.graphics.Rect\n-import android.view.View\n-import androidx.core.view.ViewCompat\n+import androidx.fragment.app.Fragment\n \n internal fun CharSequence?.isNotNullNorEmpty() = !isNullOrEmpty()\n \n internal fun <T : CharSequence> T?.orIfEmpty(fallback: T) = if (isNotNullNorEmpty()) this!! else fallback\n \n-internal fun View.gone() = apply { visibility = View.GONE }\n-\n-internal fun View.visible() = apply { visibility = View.VISIBLE }\n-\n-internal fun View.invisible() = apply { visibility = View.INVISIBLE }\n-\n internal fun Any?.runIfNull(action: () -> Unit) {\n     if (this == null) {\n         action.invoke()\n     }\n }\n \n+internal inline fun <reified T> notNull(param: T?) = param ?: error(\"${T::class.java.simpleName} not be null\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU2Nzc1OA=="}, "originalCommit": {"oid": "6c9bd24623810f76482c37339d92d528ab0c1bea"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMyMDQ1OA==", "bodyText": "podes ponerle un mensaje personalizado al de kotlin tambien", "url": "https://github.com/mercadopago/px-android/pull/2359#discussion_r509320458", "createdAt": "2020-10-21T14:10:07Z", "author": {"login": "cgaggino"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/extensions/BaseExtensions.kt", "diffHunk": "@@ -2,25 +2,22 @@ package com.mercadopago.android.px.internal.extensions\n \n import android.app.Activity\n import android.graphics.Rect\n-import android.view.View\n-import androidx.core.view.ViewCompat\n+import androidx.fragment.app.Fragment\n \n internal fun CharSequence?.isNotNullNorEmpty() = !isNullOrEmpty()\n \n internal fun <T : CharSequence> T?.orIfEmpty(fallback: T) = if (isNotNullNorEmpty()) this!! else fallback\n \n-internal fun View.gone() = apply { visibility = View.GONE }\n-\n-internal fun View.visible() = apply { visibility = View.VISIBLE }\n-\n-internal fun View.invisible() = apply { visibility = View.INVISIBLE }\n-\n internal fun Any?.runIfNull(action: () -> Unit) {\n     if (this == null) {\n         action.invoke()\n     }\n }\n \n+internal inline fun <reified T> notNull(param: T?) = param ?: error(\"${T::class.java.simpleName} not be null\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU2Nzc1OA=="}, "originalCommit": {"oid": "6c9bd24623810f76482c37339d92d528ab0c1bea"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTc0NDAwOnYy", "diffSide": "RIGHT", "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/base/use_case/UseCase.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDo0MTo1MlrOHlAlXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNToyNToyNFrOHlC44w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU2ODkyNg==", "bodyText": "al final no trackeamos un friction?", "url": "https://github.com/mercadopago/px-android/pull/2359#discussion_r508568926", "createdAt": "2020-10-20T14:41:52Z", "author": {"login": "cgaggino"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/base/use_case/UseCase.kt", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.mercadopago.android.px.internal.base.use_case\n+\n+import com.mercadopago.android.px.internal.callbacks.Response\n+import com.mercadopago.android.px.internal.extensions.orIfEmpty\n+import com.mercadopago.android.px.model.exceptions.MercadoPagoError\n+import kotlinx.coroutines.CoroutineScope\n+import kotlinx.coroutines.Dispatchers\n+import kotlinx.coroutines.launch\n+import kotlinx.coroutines.withContext\n+import kotlin.coroutines.CoroutineContext\n+\n+typealias CallBack<T> = (T) -> Unit\n+\n+abstract class UseCase<in P, out R> {\n+\n+    protected abstract val contextProvider: CoroutineContextProvider\n+    protected abstract suspend fun doExecute(param: P): Response<R, MercadoPagoError>\n+\n+    fun execute(param: P, success: CallBack<R> = {}, failure: CallBack<MercadoPagoError> = {}) {\n+        CoroutineScope(contextProvider.IO).launch {\n+            try {\n+                doExecute(param).also { response ->\n+                    withContext(contextProvider.Main) {\n+                        response.resolve(success, failure)\n+                    }\n+                }\n+            } catch (e: Exception) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c9bd24623810f76482c37339d92d528ab0c1bea"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYwNjY5MQ==", "bodyText": "Ahora lo agrego!", "url": "https://github.com/mercadopago/px-android/pull/2359#discussion_r508606691", "createdAt": "2020-10-20T15:25:24Z", "author": {"login": "jorGonzalez291292"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/base/use_case/UseCase.kt", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.mercadopago.android.px.internal.base.use_case\n+\n+import com.mercadopago.android.px.internal.callbacks.Response\n+import com.mercadopago.android.px.internal.extensions.orIfEmpty\n+import com.mercadopago.android.px.model.exceptions.MercadoPagoError\n+import kotlinx.coroutines.CoroutineScope\n+import kotlinx.coroutines.Dispatchers\n+import kotlinx.coroutines.launch\n+import kotlinx.coroutines.withContext\n+import kotlin.coroutines.CoroutineContext\n+\n+typealias CallBack<T> = (T) -> Unit\n+\n+abstract class UseCase<in P, out R> {\n+\n+    protected abstract val contextProvider: CoroutineContextProvider\n+    protected abstract suspend fun doExecute(param: P): Response<R, MercadoPagoError>\n+\n+    fun execute(param: P, success: CallBack<R> = {}, failure: CallBack<MercadoPagoError> = {}) {\n+        CoroutineScope(contextProvider.IO).launch {\n+            try {\n+                doExecute(param).also { response ->\n+                    withContext(contextProvider.Main) {\n+                        response.resolve(success, failure)\n+                    }\n+                }\n+            } catch (e: Exception) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU2ODkyNg=="}, "originalCommit": {"oid": "6c9bd24623810f76482c37339d92d528ab0c1bea"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTg2MDgwOnYy", "diffSide": "RIGHT", "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/review_and_confirm/ReviewAndConfirmActivity.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTowMzozM1rOHlBt7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTowODowOVrOHlB8CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU4NzUwMA==", "bodyText": "para que guardamos fragment manager? en el proximo diff de este mismo archivo hacemos lo mismo y no lo guardamos", "url": "https://github.com/mercadopago/px-android/pull/2359#discussion_r508587500", "createdAt": "2020-10-20T15:03:33Z", "author": {"login": "cgaggino"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/review_and_confirm/ReviewAndConfirmActivity.java", "diffHunk": "@@ -84,7 +88,8 @@ public static Intent getIntentForAction(@NonNull final Context context,\n     @Override\n     protected void onCreated(@Nullable final Bundle savedInstanceState) {\n         setContentView(R.layout.px_view_container_review_and_confirm);\n-        payButton = (PayButtonFragment) getSupportFragmentManager().findFragmentById(R.id.pay_button);\n+        final FragmentManager fragmentManager = getSupportFragmentManager();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c9bd24623810f76482c37339d92d528ab0c1bea"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU5MTExMw==", "bodyText": "Se manque\u00f3. Se hab\u00eda cambiado ese c\u00f3digo y cuando lo dej\u00e9 como estaba la cagu\u00e9 ahi", "url": "https://github.com/mercadopago/px-android/pull/2359#discussion_r508591113", "createdAt": "2020-10-20T15:08:09Z", "author": {"login": "guchito9"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/review_and_confirm/ReviewAndConfirmActivity.java", "diffHunk": "@@ -84,7 +88,8 @@ public static Intent getIntentForAction(@NonNull final Context context,\n     @Override\n     protected void onCreated(@Nullable final Bundle savedInstanceState) {\n         setContentView(R.layout.px_view_container_review_and_confirm);\n-        payButton = (PayButtonFragment) getSupportFragmentManager().findFragmentById(R.id.pay_button);\n+        final FragmentManager fragmentManager = getSupportFragmentManager();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU4NzUwMA=="}, "originalCommit": {"oid": "6c9bd24623810f76482c37339d92d528ab0c1bea"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjA2OTA5OnYy", "diffSide": "RIGHT", "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/review_and_confirm/ReviewAndConfirmActivity.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTozODoyM1rOHlD1Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTozODoyM1rOHlD1Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYyMjE1MA==", "bodyText": "qued\u00f3 de m\u00e1s este c\u00f3digo pareciera", "url": "https://github.com/mercadopago/px-android/pull/2359#discussion_r508622150", "createdAt": "2020-10-20T15:38:23Z", "author": {"login": "cgaggino"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/review_and_confirm/ReviewAndConfirmActivity.java", "diffHunk": "@@ -253,8 +258,16 @@ public void onBackPressed() {\n             return;\n         }\n \n-        presenter.onBackPressed();\n-        setResult(RESULT_CANCELED_RYC);\n+        final Fragment fragment = getSupportFragmentManager().findFragmentByTag(SecurityCodeFragment.TAG);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c9bd24623810f76482c37339d92d528ab0c1bea"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjI3MDg3OnYy", "diffSide": "RIGHT", "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/security_code/SecurityCodeFragment.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjowODoxNFrOHlF2-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjowODoxNFrOHlF2-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY1NTM1Mw==", "bodyText": "should not be null, creo que buscaria todos los \"not be null\" y me fijaria si le falta should o algo :P", "url": "https://github.com/mercadopago/px-android/pull/2359#discussion_r508655353", "createdAt": "2020-10-20T16:08:14Z", "author": {"login": "cgaggino"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/security_code/SecurityCodeFragment.kt", "diffHunk": "@@ -0,0 +1,283 @@\n+package com.mercadopago.android.px.internal.features.security_code\n+\n+import android.animation.Animator\n+import android.content.Intent\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.View.GONE\n+import android.view.View.VISIBLE\n+import android.view.ViewGroup\n+import android.widget.TextView\n+import androidx.appcompat.app.AppCompatActivity\n+import androidx.appcompat.widget.Toolbar\n+import androidx.constraintlayout.widget.ConstraintLayout\n+import androidx.constraintlayout.widget.ConstraintSet\n+import com.meli.android.carddrawer.model.CardDrawerView\n+import com.mercadolibre.android.andesui.snackbar.action.AndesSnackbarAction\n+import com.mercadolibre.android.andesui.textfield.AndesTextfieldCode\n+import com.mercadolibre.android.andesui.textfield.style.AndesTextfieldCodeStyle\n+import com.mercadopago.android.px.R\n+import com.mercadopago.android.px.core.BackHandler\n+import com.mercadopago.android.px.internal.base.BaseFragment\n+import com.mercadopago.android.px.internal.di.viewModel\n+import com.mercadopago.android.px.internal.extensions.postDelayed\n+import com.mercadopago.android.px.internal.extensions.runWhenLaidOut\n+import com.mercadopago.android.px.internal.extensions.showSnackBar\n+import com.mercadopago.android.px.internal.features.Constants\n+import com.mercadopago.android.px.internal.features.express.RenderMode\n+import com.mercadopago.android.px.internal.features.pay_button.PayButton\n+import com.mercadopago.android.px.internal.features.pay_button.PayButtonFragment\n+import com.mercadopago.android.px.internal.features.security_code.model.SecurityCodeParams\n+import com.mercadopago.android.px.internal.util.ViewUtils\n+import com.mercadopago.android.px.internal.util.nonNullObserve\n+import com.mercadopago.android.px.internal.view.animator.SecurityCodeTransition\n+import com.mercadopago.android.px.internal.viewmodel.PostPaymentAction\n+import com.mercadopago.android.px.model.exceptions.MercadoPagoError\n+\n+private const val ARG_PARAMS = \"security_code_params\"\n+private const val HIGH_RES_MIN_HEIGHT = 620\n+private const val LOW_RES_MIN_HEIGHT = 585\n+\n+internal class SecurityCodeFragment : BaseFragment(), PayButton.Handler, BackHandler {\n+\n+    private val securityCodeViewModel: SecurityCodeViewModel by viewModel()\n+\n+    private lateinit var cvvEditText: AndesTextfieldCode\n+    private lateinit var cvvTitle: TextView\n+    private lateinit var payButtonFragment: PayButtonFragment\n+    private lateinit var cvvToolbar: Toolbar\n+    private lateinit var renderMode: RenderMode\n+    private lateinit var cardDrawer: CardDrawerView\n+    private lateinit var cvvSubtitle: TextView\n+    private lateinit var transition: SecurityCodeTransition\n+    private var fragmentContainer: Int = 0\n+    private var shouldAnimate = true\n+    private var backEnabled = false\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n+        arguments?.getParcelable<SecurityCodeParams>(ARG_PARAMS)?.let {\n+            fragmentContainer = it.fragmentContainer\n+            defineRenderMode(it.renderMode)\n+\n+            val view = inflater.inflate(\n+                if (renderMode == RenderMode.LOW_RES) {\n+                    R.layout.px_fragment_security_code_lowres\n+                } else {\n+                    R.layout.px_fragment_security_code\n+                },\n+                container, false\n+            ) as ConstraintLayout\n+\n+            cvvToolbar = view.findViewById(R.id.cvv_toolbar)\n+            cardDrawer = view.findViewById(R.id.card_drawer)\n+            cvvEditText = view.findViewById(R.id.cvv_edit_text)\n+            cvvTitle = view.findViewById(R.id.cvv_title)\n+            cvvSubtitle = view.findViewById(R.id.cvv_subtitle)\n+\n+            transition = SecurityCodeTransition(view, cardDrawer, cvvToolbar, cvvTitle, cvvSubtitle, cvvEditText,\n+                view.findViewById(R.id.pay_button))\n+\n+            if (renderMode == RenderMode.NO_CARD) {\n+                cardDrawer.visibility = GONE\n+                cvvSubtitle.visibility = VISIBLE\n+            }\n+\n+            return view\n+        } ?: error(\"Arguments not be null\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c9bd24623810f76482c37339d92d528ab0c1bea"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjI4MjIyOnYy", "diffSide": "RIGHT", "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/security_code/SecurityCodeViewModel.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjoxMDowM1rOHlF-nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjoxMDowM1rOHlF-nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY1NzMxMQ==", "bodyText": "no puede ser algo que haga el caso de uso configurar el token? pareciera que es algo que se va a necesitar siempre que se use el caso de uso de tokenizaci\u00f3n", "url": "https://github.com/mercadopago/px-android/pull/2359#discussion_r508657311", "createdAt": "2020-10-20T16:10:03Z", "author": {"login": "cgaggino"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/security_code/SecurityCodeViewModel.kt", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.mercadopago.android.px.internal.features.security_code\n+\n+import androidx.lifecycle.LiveData\n+import androidx.lifecycle.MutableLiveData\n+import com.mercadopago.android.px.internal.base.BaseViewModel\n+import com.mercadopago.android.px.internal.base.use_case.TokenizeParams\n+import com.mercadopago.android.px.internal.base.use_case.TokenizeUseCase\n+import com.mercadopago.android.px.internal.features.pay_button.PayButton\n+import com.mercadopago.android.px.internal.features.security_code.domain.use_case.DisplayDataUseCase\n+import com.mercadopago.android.px.internal.features.security_code.domain.use_case.DisplayDataUseCase.CardParams\n+import com.mercadopago.android.px.internal.features.security_code.domain.use_case.SecurityTrackModelUseCase\n+import com.mercadopago.android.px.internal.features.security_code.mapper.SecurityCodeDisplayModelMapper\n+import com.mercadopago.android.px.internal.features.security_code.mapper.TrackingParamModelMapper\n+import com.mercadopago.android.px.internal.features.security_code.model.SecurityCodeDisplayModel\n+import com.mercadopago.android.px.internal.features.security_code.tracking.SecurityCodeTracker\n+import com.mercadopago.android.px.internal.repository.PaymentSettingRepository\n+import com.mercadopago.android.px.model.Card\n+import com.mercadopago.android.px.model.PaymentRecovery\n+import com.mercadopago.android.px.model.internal.PaymentConfiguration\n+import com.mercadopago.android.px.tracking.internal.model.Reason\n+\n+internal class SecurityCodeViewModel(\n+    private val paymentSettingRepository: PaymentSettingRepository,\n+    private val tokenizeUseCase: TokenizeUseCase,\n+    private val displayDataUseCase: DisplayDataUseCase,\n+    private val trackModelUseCase: SecurityTrackModelUseCase,\n+    private val trackParamsMapper: TrackingParamModelMapper,\n+    private val securityCodeDisplayModelMapper: SecurityCodeDisplayModelMapper) : BaseViewModel() {\n+\n+    private val displayModelMutableLiveData = MutableLiveData<SecurityCodeDisplayModel>()\n+    val displayModelLiveData: LiveData<SecurityCodeDisplayModel>\n+        get() = displayModelMutableLiveData\n+    private val tokenizeErrorApiMutableLiveData = MutableLiveData<Unit>()\n+    val tokenizeErrorApiLiveData: LiveData<Unit>\n+        get() = tokenizeErrorApiMutableLiveData\n+\n+    private lateinit var paymentConfiguration: PaymentConfiguration\n+    private lateinit var securityCodeTracker: SecurityCodeTracker\n+    private lateinit var card: Card\n+    private lateinit var reason: Reason\n+    private var paymentRecovery: PaymentRecovery? = null\n+\n+    fun init(\n+        paymentConfiguration: PaymentConfiguration,\n+        card: Card?,\n+        paymentRecovery: PaymentRecovery?,\n+        reason: Reason?) {\n+        this.paymentConfiguration = paymentConfiguration\n+        this.card = card ?: paymentRecovery?.card ?: error(\"Card is required for SecurityCode Screen\")\n+        this.paymentRecovery = paymentRecovery\n+        this.reason = reason ?: paymentRecovery?.let { Reason.from(it) }\n+            ?: error(\"PaymentRecovery or Reason are required for SecurityCode Screen\")\n+\n+        trackModelUseCase.execute(trackParamsMapper.map(this.card, this.reason),\n+            success = { tracker ->\n+                securityCodeTracker = tracker\n+                securityCodeTracker.trackSecurityCode()\n+            })\n+\n+        val cardParams = with(this.card) {\n+            CardParams(id,\n+                paymentMethod?.displayInfo?.cvvInfo,\n+                getSecurityCodeLength(),\n+                getSecurityCodeLocation())\n+        }\n+\n+        displayDataUseCase.execute(cardParams,\n+            success = { displayData ->\n+                displayModelMutableLiveData.value = securityCodeDisplayModelMapper.map(displayData)\n+            })\n+    }\n+\n+    fun onBack() {\n+        securityCodeTracker.trackAbortSecurityCode()\n+    }\n+\n+    fun onPaymentError() {\n+        securityCodeTracker.trackPaymentApiError()\n+    }\n+\n+    fun handlePrepayment(callback: PayButton.OnReadyForPaymentCallback) {\n+        securityCodeTracker.trackConfirmSecurityCode()\n+        callback.call(paymentConfiguration)\n+    }\n+\n+    fun enqueueOnExploding(cvv: String, callback: PayButton.OnEnqueueResolvedCallback) {\n+        tokenizeUseCase.execute(TokenizeParams(cvv, card, paymentRecovery),\n+            success = { token ->\n+                paymentSettingRepository.configure(token)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c9bd24623810f76482c37339d92d528ab0c1bea"}, "originalPosition": 89}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1720, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}