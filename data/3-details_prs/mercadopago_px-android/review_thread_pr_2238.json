{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0NTg4ODg1", "number": 2238, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNjo1MjowMVrOEQtisQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDo1ODowNlrOEQyxlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTU4ODMzOnYy", "diffSide": "RIGHT", "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_congrats/PaymentCongrats.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNjo1MjowMVrOG1BEPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNjo1MjowMVrOG1BEPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI0NTE4Mw==", "bodyText": "ac\u00e1 no ser\u00eda \"for PaymentCongrats\"?", "url": "https://github.com/mercadopago/px-android/pull/2238#discussion_r458245183", "createdAt": "2020-07-21T16:52:01Z", "author": {"login": "nmanuelidesML"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_congrats/PaymentCongrats.java", "diffHunk": "@@ -0,0 +1,523 @@\n+package com.mercadopago.android.px.internal.features.payment_congrats;\n+\n+import android.os.Bundle;\n+import android.os.Parcel;\n+import android.os.Parcelable;\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n+import android.support.v4.app.Fragment;\n+import com.mercadopago.android.px.internal.util.ListUtil;\n+import com.mercadopago.android.px.internal.util.TextUtil;\n+import com.mercadopago.android.px.model.ExitAction;\n+import com.mercadopago.android.px.model.ExternalFragment;\n+import java.util.List;\n+import org.jetbrains.annotations.NotNull;\n+\n+public class PaymentCongrats implements Parcelable {\n+    //Basic data\n+    @NonNull private final CongratsType congratsType;\n+    @NonNull private final String title;\n+    @Nullable private final String subtitle;\n+    @NonNull private final String imageUrl;\n+    @Nullable private final String help;\n+    private final int iconId;\n+    @Nullable private final String statementDescription;\n+    private final boolean shouldShowPaymentMethod;\n+\n+    //Receipt data\n+    @Nullable private final String receiptId;\n+    @Nullable private final List<String> receiptIdList;\n+    private final boolean shouldShowReceipt;\n+\n+    // Exit Buttons\n+    @Nullable private final ExitAction exitActionPrimary;\n+    @Nullable private final ExitAction exitActionSecondary;\n+\n+\n+    // custom views for integrators\n+    @Nullable private final ExternalFragment topFragment;\n+    @Nullable private final ExternalFragment bottomFragment;\n+    @Nullable private final ExternalFragment importantFragment;\n+\n+    private final int currencyDecimalPlaces;\n+    @NonNull private final String currencyDecimalSeparator;\n+    @NonNull private final String currencySymbol;\n+    @NonNull private final String currencyThousandsSeparator;\n+\n+    private PaymentCongrats(final Builder builder) {\n+        congratsType = builder.congratsType;\n+        title = builder.title;\n+        subtitle = builder.subtitle;\n+        imageUrl = builder.imageUrl;\n+        help = builder.help;\n+        iconId = builder.iconId;\n+        receiptId = builder.receiptId;\n+        receiptIdList = builder.receiptIdList;\n+        exitActionPrimary = builder.exitActionPrimary;\n+        exitActionSecondary = builder.exitActionSecondary;\n+        statementDescription = builder.statementDescription;\n+        shouldShowPaymentMethod = builder.shouldShowPaymentMethod;\n+        shouldShowReceipt = builder.shouldShowReceipt;\n+        topFragment = builder.topFragment;\n+        bottomFragment = builder.bottomFragment;\n+        importantFragment = builder.importantFragment;\n+        currencyDecimalPlaces = builder.currencyDecimalPlaces;\n+        currencyDecimalSeparator = builder.currencyDecimalSeparator;\n+        currencySymbol = builder.currencySymbol;\n+        currencyThousandsSeparator = builder.currencyThousandsSeparator;\n+    }\n+\n+    @Override\n+    public int describeContents() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public void writeToParcel(Parcel dest, int flags) {\n+        dest.writeString(this.congratsType.type);\n+        dest.writeString(this.title);\n+        dest.writeString(this.subtitle);\n+        dest.writeString(this.imageUrl);\n+        dest.writeString(this.help);\n+        dest.writeInt(this.iconId);\n+        dest.writeString(this.receiptId);\n+        dest.writeStringList(this.receiptIdList);\n+        dest.writeParcelable(this.exitActionPrimary, flags);\n+        dest.writeParcelable(this.exitActionSecondary, flags);\n+        dest.writeString(this.statementDescription);\n+        dest.writeValue(this.shouldShowPaymentMethod);\n+        dest.writeValue(this.shouldShowReceipt);\n+        dest.writeParcelable(this.topFragment, flags);\n+        dest.writeParcelable(this.bottomFragment, flags);\n+        dest.writeParcelable(this.importantFragment, flags);\n+        dest.writeInt(this.currencyDecimalPlaces);\n+        dest.writeString(this.currencyDecimalSeparator);\n+        dest.writeString(this.currencySymbol);\n+        dest.writeString(this.currencyThousandsSeparator);\n+    }\n+\n+    protected PaymentCongrats(Parcel in) {\n+        this.congratsType = CongratsType.fromName(in.readString());\n+        this.title = in.readString();\n+        this.subtitle = in.readString();\n+        this.imageUrl = in.readString();\n+        this.help = in.readString();\n+        this.iconId = in.readInt();\n+        this.receiptId = in.readString();\n+        this.receiptIdList = in.createStringArrayList();\n+        this.exitActionPrimary = in.readParcelable(ExitAction.class.getClassLoader());\n+        this.exitActionSecondary = in.readParcelable(ExitAction.class.getClassLoader());\n+        this.statementDescription = in.readString();\n+        this.shouldShowPaymentMethod = (Boolean) in.readValue(Boolean.class.getClassLoader());\n+        this.shouldShowReceipt = (Boolean) in.readValue(Boolean.class.getClassLoader());\n+        this.topFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.bottomFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.importantFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.currencyDecimalPlaces = in.readInt();\n+        this.currencyDecimalSeparator = in.readString();\n+        this.currencySymbol = in.readString();\n+        this.currencyThousandsSeparator = in.readString();\n+    }\n+\n+    public static final Parcelable.Creator<PaymentCongrats> CREATOR = new Parcelable.Creator<PaymentCongrats>() {\n+        @Override\n+        public PaymentCongrats createFromParcel(Parcel source) {\n+            return new PaymentCongrats(source);\n+        }\n+\n+        @Override\n+        public PaymentCongrats[] newArray(int size) {\n+            return new PaymentCongrats[size];\n+        }\n+    };\n+\n+    @NotNull\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    @Nullable\n+    public String getSubtitle() {\n+        return subtitle;\n+    }\n+\n+    @NotNull\n+    public String getImageUrl() {\n+        return imageUrl;\n+    }\n+\n+    @Nullable\n+    public String getHelp() {\n+        return help;\n+    }\n+\n+    public String getReceipt() {\n+        return ListUtil.isNotEmpty(receiptIdList) ? receiptIdList.get(0) : receiptId;\n+    }\n+\n+    @Nullable\n+    public ExitAction getExitActionPrimary() {\n+        return exitActionPrimary;\n+    }\n+\n+    @Nullable\n+    public ExitAction getExitActionSecondary() {\n+        return exitActionSecondary;\n+    }\n+\n+    @Nullable\n+    public String getStatementDescription() {\n+        return statementDescription;\n+    }\n+\n+    @Nullable\n+    public Boolean getShouldShowPaymentMethod() {\n+        return shouldShowPaymentMethod;\n+    }\n+\n+    @Nullable\n+    public Boolean getShouldShowReceipt() {\n+        return shouldShowReceipt;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getTopFragment() {\n+        return topFragment;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getBottomFragment() {\n+        return bottomFragment;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getImportantFragment() {\n+        return importantFragment;\n+    }\n+\n+    public int getCurrencyDecimalPlaces() {\n+        return currencyDecimalPlaces;\n+    }\n+\n+    @NonNull\n+    public String getCurrencyDecimalSeparator() {\n+        return currencyDecimalSeparator;\n+    }\n+\n+    @NonNull\n+    public String getCurrencySymbol() {\n+        return currencySymbol;\n+    }\n+\n+    @NonNull\n+    public String getCurrencyThousandsSeparator() {\n+        return currencyThousandsSeparator;\n+    }\n+\n+    public Boolean hasTopFragment() {\n+        return getTopFragment() != null;\n+    }\n+\n+    public Boolean hasBottomFragment() {\n+        return getBottomFragment() != null;\n+    }\n+\n+    public Boolean hasImportantFragment() {\n+        return getImportantFragment() != null;\n+    }\n+\n+    public Boolean hasHelp() {\n+        return TextUtil.isNotEmpty(help);\n+    }\n+\n+    @NonNull\n+    public CongratsType getCongratsType() {\n+        return congratsType;\n+    }\n+\n+    public enum CongratsType {\n+        APPROVED(\"APPROVED\"),\n+        REJECTED(\"REJECTED\"),\n+        PENDING(\"PENDING\");\n+\n+        public final String type;\n+\n+        CongratsType(final String type) {\n+            this.type = type;\n+        }\n+\n+        public static CongratsType fromName(final String text) {\n+            for (final CongratsType s : CongratsType.values()) {\n+                if (s.type.equalsIgnoreCase(text)) {\n+                    return s;\n+                }\n+            }\n+            throw new IllegalStateException(\"Invalid decorator\");\n+        }\n+    }\n+\n+    public static class Builder {\n+        //Basic data\n+        /* default */ CongratsType congratsType;\n+        /* default */ String title;\n+        /* default */ String subtitle;\n+        /* default */ String imageUrl;\n+        /* default */ String help;\n+        /* default */ int iconId;\n+\n+        /* default */ String receiptId;\n+        /* default */ List<String> receiptIdList;\n+\n+        // Exit Buttons\n+        /* default */ ExitAction exitActionPrimary;\n+        /* default */ ExitAction exitActionSecondary;\n+\n+        /* default */ String statementDescription;\n+\n+        /* default */ boolean shouldShowPaymentMethod = false;\n+        /* default */ boolean shouldShowReceipt = false;\n+\n+        // custom views for integrators\n+        /* default */ ExternalFragment topFragment;\n+        /* default */ ExternalFragment bottomFragment;\n+        /* default */ ExternalFragment importantFragment;\n+\n+        /* default */ int currencyDecimalPlaces = 2;\n+        /* default */ String currencyDecimalSeparator = \",\";\n+        /* default */ String currencySymbol = \"$\";\n+        /* default */ String currencyThousandsSeparator = \".\";\n+\n+        public Builder() {}\n+\n+        public PaymentCongrats build() {\n+            if (exitActionPrimary == null && exitActionSecondary == null) {\n+                throw new IllegalStateException(\"At least one button should be provided for BusinessPayment\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cea5d6b256d9fc3303cf003b35c18bfb544a655"}, "originalPosition": 294}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTYzNTg4OnYy", "diffSide": "RIGHT", "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_congrats/PaymentCongrats.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzowNDoxNlrOG1Bh7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzoyNjoyOVrOG1CXGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI1Mjc4MQ==", "bodyText": "ac\u00e1 no me queda claro algo, q value deberia ser seteado true para q eso se muestre? pq el m\u00e9todo solo recibe un String", "url": "https://github.com/mercadopago/px-android/pull/2238#discussion_r458252781", "createdAt": "2020-07-21T17:04:16Z", "author": {"login": "nmanuelidesML"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_congrats/PaymentCongrats.java", "diffHunk": "@@ -0,0 +1,523 @@\n+package com.mercadopago.android.px.internal.features.payment_congrats;\n+\n+import android.os.Bundle;\n+import android.os.Parcel;\n+import android.os.Parcelable;\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n+import android.support.v4.app.Fragment;\n+import com.mercadopago.android.px.internal.util.ListUtil;\n+import com.mercadopago.android.px.internal.util.TextUtil;\n+import com.mercadopago.android.px.model.ExitAction;\n+import com.mercadopago.android.px.model.ExternalFragment;\n+import java.util.List;\n+import org.jetbrains.annotations.NotNull;\n+\n+public class PaymentCongrats implements Parcelable {\n+    //Basic data\n+    @NonNull private final CongratsType congratsType;\n+    @NonNull private final String title;\n+    @Nullable private final String subtitle;\n+    @NonNull private final String imageUrl;\n+    @Nullable private final String help;\n+    private final int iconId;\n+    @Nullable private final String statementDescription;\n+    private final boolean shouldShowPaymentMethod;\n+\n+    //Receipt data\n+    @Nullable private final String receiptId;\n+    @Nullable private final List<String> receiptIdList;\n+    private final boolean shouldShowReceipt;\n+\n+    // Exit Buttons\n+    @Nullable private final ExitAction exitActionPrimary;\n+    @Nullable private final ExitAction exitActionSecondary;\n+\n+\n+    // custom views for integrators\n+    @Nullable private final ExternalFragment topFragment;\n+    @Nullable private final ExternalFragment bottomFragment;\n+    @Nullable private final ExternalFragment importantFragment;\n+\n+    private final int currencyDecimalPlaces;\n+    @NonNull private final String currencyDecimalSeparator;\n+    @NonNull private final String currencySymbol;\n+    @NonNull private final String currencyThousandsSeparator;\n+\n+    private PaymentCongrats(final Builder builder) {\n+        congratsType = builder.congratsType;\n+        title = builder.title;\n+        subtitle = builder.subtitle;\n+        imageUrl = builder.imageUrl;\n+        help = builder.help;\n+        iconId = builder.iconId;\n+        receiptId = builder.receiptId;\n+        receiptIdList = builder.receiptIdList;\n+        exitActionPrimary = builder.exitActionPrimary;\n+        exitActionSecondary = builder.exitActionSecondary;\n+        statementDescription = builder.statementDescription;\n+        shouldShowPaymentMethod = builder.shouldShowPaymentMethod;\n+        shouldShowReceipt = builder.shouldShowReceipt;\n+        topFragment = builder.topFragment;\n+        bottomFragment = builder.bottomFragment;\n+        importantFragment = builder.importantFragment;\n+        currencyDecimalPlaces = builder.currencyDecimalPlaces;\n+        currencyDecimalSeparator = builder.currencyDecimalSeparator;\n+        currencySymbol = builder.currencySymbol;\n+        currencyThousandsSeparator = builder.currencyThousandsSeparator;\n+    }\n+\n+    @Override\n+    public int describeContents() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public void writeToParcel(Parcel dest, int flags) {\n+        dest.writeString(this.congratsType.type);\n+        dest.writeString(this.title);\n+        dest.writeString(this.subtitle);\n+        dest.writeString(this.imageUrl);\n+        dest.writeString(this.help);\n+        dest.writeInt(this.iconId);\n+        dest.writeString(this.receiptId);\n+        dest.writeStringList(this.receiptIdList);\n+        dest.writeParcelable(this.exitActionPrimary, flags);\n+        dest.writeParcelable(this.exitActionSecondary, flags);\n+        dest.writeString(this.statementDescription);\n+        dest.writeValue(this.shouldShowPaymentMethod);\n+        dest.writeValue(this.shouldShowReceipt);\n+        dest.writeParcelable(this.topFragment, flags);\n+        dest.writeParcelable(this.bottomFragment, flags);\n+        dest.writeParcelable(this.importantFragment, flags);\n+        dest.writeInt(this.currencyDecimalPlaces);\n+        dest.writeString(this.currencyDecimalSeparator);\n+        dest.writeString(this.currencySymbol);\n+        dest.writeString(this.currencyThousandsSeparator);\n+    }\n+\n+    protected PaymentCongrats(Parcel in) {\n+        this.congratsType = CongratsType.fromName(in.readString());\n+        this.title = in.readString();\n+        this.subtitle = in.readString();\n+        this.imageUrl = in.readString();\n+        this.help = in.readString();\n+        this.iconId = in.readInt();\n+        this.receiptId = in.readString();\n+        this.receiptIdList = in.createStringArrayList();\n+        this.exitActionPrimary = in.readParcelable(ExitAction.class.getClassLoader());\n+        this.exitActionSecondary = in.readParcelable(ExitAction.class.getClassLoader());\n+        this.statementDescription = in.readString();\n+        this.shouldShowPaymentMethod = (Boolean) in.readValue(Boolean.class.getClassLoader());\n+        this.shouldShowReceipt = (Boolean) in.readValue(Boolean.class.getClassLoader());\n+        this.topFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.bottomFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.importantFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.currencyDecimalPlaces = in.readInt();\n+        this.currencyDecimalSeparator = in.readString();\n+        this.currencySymbol = in.readString();\n+        this.currencyThousandsSeparator = in.readString();\n+    }\n+\n+    public static final Parcelable.Creator<PaymentCongrats> CREATOR = new Parcelable.Creator<PaymentCongrats>() {\n+        @Override\n+        public PaymentCongrats createFromParcel(Parcel source) {\n+            return new PaymentCongrats(source);\n+        }\n+\n+        @Override\n+        public PaymentCongrats[] newArray(int size) {\n+            return new PaymentCongrats[size];\n+        }\n+    };\n+\n+    @NotNull\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    @Nullable\n+    public String getSubtitle() {\n+        return subtitle;\n+    }\n+\n+    @NotNull\n+    public String getImageUrl() {\n+        return imageUrl;\n+    }\n+\n+    @Nullable\n+    public String getHelp() {\n+        return help;\n+    }\n+\n+    public String getReceipt() {\n+        return ListUtil.isNotEmpty(receiptIdList) ? receiptIdList.get(0) : receiptId;\n+    }\n+\n+    @Nullable\n+    public ExitAction getExitActionPrimary() {\n+        return exitActionPrimary;\n+    }\n+\n+    @Nullable\n+    public ExitAction getExitActionSecondary() {\n+        return exitActionSecondary;\n+    }\n+\n+    @Nullable\n+    public String getStatementDescription() {\n+        return statementDescription;\n+    }\n+\n+    @Nullable\n+    public Boolean getShouldShowPaymentMethod() {\n+        return shouldShowPaymentMethod;\n+    }\n+\n+    @Nullable\n+    public Boolean getShouldShowReceipt() {\n+        return shouldShowReceipt;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getTopFragment() {\n+        return topFragment;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getBottomFragment() {\n+        return bottomFragment;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getImportantFragment() {\n+        return importantFragment;\n+    }\n+\n+    public int getCurrencyDecimalPlaces() {\n+        return currencyDecimalPlaces;\n+    }\n+\n+    @NonNull\n+    public String getCurrencyDecimalSeparator() {\n+        return currencyDecimalSeparator;\n+    }\n+\n+    @NonNull\n+    public String getCurrencySymbol() {\n+        return currencySymbol;\n+    }\n+\n+    @NonNull\n+    public String getCurrencyThousandsSeparator() {\n+        return currencyThousandsSeparator;\n+    }\n+\n+    public Boolean hasTopFragment() {\n+        return getTopFragment() != null;\n+    }\n+\n+    public Boolean hasBottomFragment() {\n+        return getBottomFragment() != null;\n+    }\n+\n+    public Boolean hasImportantFragment() {\n+        return getImportantFragment() != null;\n+    }\n+\n+    public Boolean hasHelp() {\n+        return TextUtil.isNotEmpty(help);\n+    }\n+\n+    @NonNull\n+    public CongratsType getCongratsType() {\n+        return congratsType;\n+    }\n+\n+    public enum CongratsType {\n+        APPROVED(\"APPROVED\"),\n+        REJECTED(\"REJECTED\"),\n+        PENDING(\"PENDING\");\n+\n+        public final String type;\n+\n+        CongratsType(final String type) {\n+            this.type = type;\n+        }\n+\n+        public static CongratsType fromName(final String text) {\n+            for (final CongratsType s : CongratsType.values()) {\n+                if (s.type.equalsIgnoreCase(text)) {\n+                    return s;\n+                }\n+            }\n+            throw new IllegalStateException(\"Invalid decorator\");\n+        }\n+    }\n+\n+    public static class Builder {\n+        //Basic data\n+        /* default */ CongratsType congratsType;\n+        /* default */ String title;\n+        /* default */ String subtitle;\n+        /* default */ String imageUrl;\n+        /* default */ String help;\n+        /* default */ int iconId;\n+\n+        /* default */ String receiptId;\n+        /* default */ List<String> receiptIdList;\n+\n+        // Exit Buttons\n+        /* default */ ExitAction exitActionPrimary;\n+        /* default */ ExitAction exitActionSecondary;\n+\n+        /* default */ String statementDescription;\n+\n+        /* default */ boolean shouldShowPaymentMethod = false;\n+        /* default */ boolean shouldShowReceipt = false;\n+\n+        // custom views for integrators\n+        /* default */ ExternalFragment topFragment;\n+        /* default */ ExternalFragment bottomFragment;\n+        /* default */ ExternalFragment importantFragment;\n+\n+        /* default */ int currencyDecimalPlaces = 2;\n+        /* default */ String currencyDecimalSeparator = \",\";\n+        /* default */ String currencySymbol = \"$\";\n+        /* default */ String currencyThousandsSeparator = \".\";\n+\n+        public Builder() {}\n+\n+        public PaymentCongrats build() {\n+            if (exitActionPrimary == null && exitActionSecondary == null) {\n+                throw new IllegalStateException(\"At least one button should be provided for BusinessPayment\");\n+            }\n+            return new PaymentCongrats(this);\n+        }\n+\n+        /**\n+         * Set ups the congrats type (green, red, orange)\n+         *\n+         * @param congratsType enum with type atribute\n+         * @return builder\n+         */\n+        public Builder withCongratsType(final CongratsType congratsType) {\n+            this.congratsType = congratsType;\n+            return this;\n+        }\n+\n+        /**\n+         * Title show in the congrats's header\n+         *\n+         * @param title congrats's title\n+         * @return builder\n+         */\n+        public Builder withTitle(final String title) {\n+            this.title = title;\n+            return this;\n+        }\n+\n+        /**\n+         * When subtitle is set, then default subtitle will be replaced on the screen with it.\n+         *\n+         * @param subtitle subtitle text\n+         * @return builder\n+         */\n+        public Builder withSubtitle(final String subtitle) {\n+            this.subtitle = subtitle;\n+            return this;\n+        }\n+\n+        /**\n+         * Set ups the image in congarts's header\n+         *\n+         * @param imageUrl url for the header's image\n+         * @return builder\n+         */\n+        public Builder withImageUrl(final String imageUrl) {\n+            this.imageUrl = imageUrl;\n+            return this;\n+        }\n+\n+        /**\n+         * If value is set, then receipt view will appear.\n+         *\n+         * @param receiptId the receipt id to be shown.\n+         * @return builder\n+         */\n+        public Builder withReceipId(final String receiptId) {\n+            this.receiptId = receiptId;\n+            return this;\n+        }\n+\n+        /**\n+         * @param receiptIdList The list of receipt ids\n+         * @return builder\n+         */\n+        public Builder withReceiptIdList(final List<String> receiptIdList) {\n+            this.receiptIdList = receiptIdList;\n+            return this;\n+        }\n+\n+        /**\n+         * if help is set, then a small box with help instructions will appear\n+         *\n+         * @param help a help message\n+         * @return builder\n+         */\n+        public Builder withHelp(final String help) {\n+            this.help = help;\n+            return this;\n+        }\n+\n+        /**\n+         *\n+         * @param iconId header's icon\n+         * @return builder\n+         */\n+        public Builder withIconId(final int iconId) {\n+            this.iconId = iconId;\n+            return this;\n+        }\n+\n+        /**\n+         * if Exit action is set, then a big primary button will appear and the click action will trigger a resCode that\n+         * will be the same of the Exit action added.\n+         *\n+         * @param label text show in primary action\n+         * @param resCode resCode in exit case\n+         * @return builder\n+         */\n+        public Builder withExitActionPrimary(final String label, final int resCode) {\n+            this.exitActionPrimary = new ExitAction(label, resCode);\n+            return this;\n+        }\n+\n+        /**\n+         * if Exit action is set, then a big secondary button will appear and the click action will trigger a resCode that\n+         * will be the same of the Exit action added.\n+         *\n+         * @param label text show in secondary action\n+         * @param resCode resCode in exit case\n+         * @return builder\n+         */\n+        public Builder withExitActionSecondary(final String label, final int resCode) {\n+            this.exitActionSecondary = new ExitAction(label, resCode);\n+            return this;\n+        }\n+\n+        /**\n+         * If value true is set on and the payment method is credit card then the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cea5d6b256d9fc3303cf003b35c18bfb544a655"}, "originalPosition": 411}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI2NjM5NA==", "bodyText": "ah\u00ed lo redact\u00e9 de manera que se entiende mejor el comentario", "url": "https://github.com/mercadopago/px-android/pull/2238#discussion_r458266394", "createdAt": "2020-07-21T17:26:29Z", "author": {"login": "mmunozpatinomeli"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_congrats/PaymentCongrats.java", "diffHunk": "@@ -0,0 +1,523 @@\n+package com.mercadopago.android.px.internal.features.payment_congrats;\n+\n+import android.os.Bundle;\n+import android.os.Parcel;\n+import android.os.Parcelable;\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n+import android.support.v4.app.Fragment;\n+import com.mercadopago.android.px.internal.util.ListUtil;\n+import com.mercadopago.android.px.internal.util.TextUtil;\n+import com.mercadopago.android.px.model.ExitAction;\n+import com.mercadopago.android.px.model.ExternalFragment;\n+import java.util.List;\n+import org.jetbrains.annotations.NotNull;\n+\n+public class PaymentCongrats implements Parcelable {\n+    //Basic data\n+    @NonNull private final CongratsType congratsType;\n+    @NonNull private final String title;\n+    @Nullable private final String subtitle;\n+    @NonNull private final String imageUrl;\n+    @Nullable private final String help;\n+    private final int iconId;\n+    @Nullable private final String statementDescription;\n+    private final boolean shouldShowPaymentMethod;\n+\n+    //Receipt data\n+    @Nullable private final String receiptId;\n+    @Nullable private final List<String> receiptIdList;\n+    private final boolean shouldShowReceipt;\n+\n+    // Exit Buttons\n+    @Nullable private final ExitAction exitActionPrimary;\n+    @Nullable private final ExitAction exitActionSecondary;\n+\n+\n+    // custom views for integrators\n+    @Nullable private final ExternalFragment topFragment;\n+    @Nullable private final ExternalFragment bottomFragment;\n+    @Nullable private final ExternalFragment importantFragment;\n+\n+    private final int currencyDecimalPlaces;\n+    @NonNull private final String currencyDecimalSeparator;\n+    @NonNull private final String currencySymbol;\n+    @NonNull private final String currencyThousandsSeparator;\n+\n+    private PaymentCongrats(final Builder builder) {\n+        congratsType = builder.congratsType;\n+        title = builder.title;\n+        subtitle = builder.subtitle;\n+        imageUrl = builder.imageUrl;\n+        help = builder.help;\n+        iconId = builder.iconId;\n+        receiptId = builder.receiptId;\n+        receiptIdList = builder.receiptIdList;\n+        exitActionPrimary = builder.exitActionPrimary;\n+        exitActionSecondary = builder.exitActionSecondary;\n+        statementDescription = builder.statementDescription;\n+        shouldShowPaymentMethod = builder.shouldShowPaymentMethod;\n+        shouldShowReceipt = builder.shouldShowReceipt;\n+        topFragment = builder.topFragment;\n+        bottomFragment = builder.bottomFragment;\n+        importantFragment = builder.importantFragment;\n+        currencyDecimalPlaces = builder.currencyDecimalPlaces;\n+        currencyDecimalSeparator = builder.currencyDecimalSeparator;\n+        currencySymbol = builder.currencySymbol;\n+        currencyThousandsSeparator = builder.currencyThousandsSeparator;\n+    }\n+\n+    @Override\n+    public int describeContents() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public void writeToParcel(Parcel dest, int flags) {\n+        dest.writeString(this.congratsType.type);\n+        dest.writeString(this.title);\n+        dest.writeString(this.subtitle);\n+        dest.writeString(this.imageUrl);\n+        dest.writeString(this.help);\n+        dest.writeInt(this.iconId);\n+        dest.writeString(this.receiptId);\n+        dest.writeStringList(this.receiptIdList);\n+        dest.writeParcelable(this.exitActionPrimary, flags);\n+        dest.writeParcelable(this.exitActionSecondary, flags);\n+        dest.writeString(this.statementDescription);\n+        dest.writeValue(this.shouldShowPaymentMethod);\n+        dest.writeValue(this.shouldShowReceipt);\n+        dest.writeParcelable(this.topFragment, flags);\n+        dest.writeParcelable(this.bottomFragment, flags);\n+        dest.writeParcelable(this.importantFragment, flags);\n+        dest.writeInt(this.currencyDecimalPlaces);\n+        dest.writeString(this.currencyDecimalSeparator);\n+        dest.writeString(this.currencySymbol);\n+        dest.writeString(this.currencyThousandsSeparator);\n+    }\n+\n+    protected PaymentCongrats(Parcel in) {\n+        this.congratsType = CongratsType.fromName(in.readString());\n+        this.title = in.readString();\n+        this.subtitle = in.readString();\n+        this.imageUrl = in.readString();\n+        this.help = in.readString();\n+        this.iconId = in.readInt();\n+        this.receiptId = in.readString();\n+        this.receiptIdList = in.createStringArrayList();\n+        this.exitActionPrimary = in.readParcelable(ExitAction.class.getClassLoader());\n+        this.exitActionSecondary = in.readParcelable(ExitAction.class.getClassLoader());\n+        this.statementDescription = in.readString();\n+        this.shouldShowPaymentMethod = (Boolean) in.readValue(Boolean.class.getClassLoader());\n+        this.shouldShowReceipt = (Boolean) in.readValue(Boolean.class.getClassLoader());\n+        this.topFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.bottomFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.importantFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.currencyDecimalPlaces = in.readInt();\n+        this.currencyDecimalSeparator = in.readString();\n+        this.currencySymbol = in.readString();\n+        this.currencyThousandsSeparator = in.readString();\n+    }\n+\n+    public static final Parcelable.Creator<PaymentCongrats> CREATOR = new Parcelable.Creator<PaymentCongrats>() {\n+        @Override\n+        public PaymentCongrats createFromParcel(Parcel source) {\n+            return new PaymentCongrats(source);\n+        }\n+\n+        @Override\n+        public PaymentCongrats[] newArray(int size) {\n+            return new PaymentCongrats[size];\n+        }\n+    };\n+\n+    @NotNull\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    @Nullable\n+    public String getSubtitle() {\n+        return subtitle;\n+    }\n+\n+    @NotNull\n+    public String getImageUrl() {\n+        return imageUrl;\n+    }\n+\n+    @Nullable\n+    public String getHelp() {\n+        return help;\n+    }\n+\n+    public String getReceipt() {\n+        return ListUtil.isNotEmpty(receiptIdList) ? receiptIdList.get(0) : receiptId;\n+    }\n+\n+    @Nullable\n+    public ExitAction getExitActionPrimary() {\n+        return exitActionPrimary;\n+    }\n+\n+    @Nullable\n+    public ExitAction getExitActionSecondary() {\n+        return exitActionSecondary;\n+    }\n+\n+    @Nullable\n+    public String getStatementDescription() {\n+        return statementDescription;\n+    }\n+\n+    @Nullable\n+    public Boolean getShouldShowPaymentMethod() {\n+        return shouldShowPaymentMethod;\n+    }\n+\n+    @Nullable\n+    public Boolean getShouldShowReceipt() {\n+        return shouldShowReceipt;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getTopFragment() {\n+        return topFragment;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getBottomFragment() {\n+        return bottomFragment;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getImportantFragment() {\n+        return importantFragment;\n+    }\n+\n+    public int getCurrencyDecimalPlaces() {\n+        return currencyDecimalPlaces;\n+    }\n+\n+    @NonNull\n+    public String getCurrencyDecimalSeparator() {\n+        return currencyDecimalSeparator;\n+    }\n+\n+    @NonNull\n+    public String getCurrencySymbol() {\n+        return currencySymbol;\n+    }\n+\n+    @NonNull\n+    public String getCurrencyThousandsSeparator() {\n+        return currencyThousandsSeparator;\n+    }\n+\n+    public Boolean hasTopFragment() {\n+        return getTopFragment() != null;\n+    }\n+\n+    public Boolean hasBottomFragment() {\n+        return getBottomFragment() != null;\n+    }\n+\n+    public Boolean hasImportantFragment() {\n+        return getImportantFragment() != null;\n+    }\n+\n+    public Boolean hasHelp() {\n+        return TextUtil.isNotEmpty(help);\n+    }\n+\n+    @NonNull\n+    public CongratsType getCongratsType() {\n+        return congratsType;\n+    }\n+\n+    public enum CongratsType {\n+        APPROVED(\"APPROVED\"),\n+        REJECTED(\"REJECTED\"),\n+        PENDING(\"PENDING\");\n+\n+        public final String type;\n+\n+        CongratsType(final String type) {\n+            this.type = type;\n+        }\n+\n+        public static CongratsType fromName(final String text) {\n+            for (final CongratsType s : CongratsType.values()) {\n+                if (s.type.equalsIgnoreCase(text)) {\n+                    return s;\n+                }\n+            }\n+            throw new IllegalStateException(\"Invalid decorator\");\n+        }\n+    }\n+\n+    public static class Builder {\n+        //Basic data\n+        /* default */ CongratsType congratsType;\n+        /* default */ String title;\n+        /* default */ String subtitle;\n+        /* default */ String imageUrl;\n+        /* default */ String help;\n+        /* default */ int iconId;\n+\n+        /* default */ String receiptId;\n+        /* default */ List<String> receiptIdList;\n+\n+        // Exit Buttons\n+        /* default */ ExitAction exitActionPrimary;\n+        /* default */ ExitAction exitActionSecondary;\n+\n+        /* default */ String statementDescription;\n+\n+        /* default */ boolean shouldShowPaymentMethod = false;\n+        /* default */ boolean shouldShowReceipt = false;\n+\n+        // custom views for integrators\n+        /* default */ ExternalFragment topFragment;\n+        /* default */ ExternalFragment bottomFragment;\n+        /* default */ ExternalFragment importantFragment;\n+\n+        /* default */ int currencyDecimalPlaces = 2;\n+        /* default */ String currencyDecimalSeparator = \",\";\n+        /* default */ String currencySymbol = \"$\";\n+        /* default */ String currencyThousandsSeparator = \".\";\n+\n+        public Builder() {}\n+\n+        public PaymentCongrats build() {\n+            if (exitActionPrimary == null && exitActionSecondary == null) {\n+                throw new IllegalStateException(\"At least one button should be provided for BusinessPayment\");\n+            }\n+            return new PaymentCongrats(this);\n+        }\n+\n+        /**\n+         * Set ups the congrats type (green, red, orange)\n+         *\n+         * @param congratsType enum with type atribute\n+         * @return builder\n+         */\n+        public Builder withCongratsType(final CongratsType congratsType) {\n+            this.congratsType = congratsType;\n+            return this;\n+        }\n+\n+        /**\n+         * Title show in the congrats's header\n+         *\n+         * @param title congrats's title\n+         * @return builder\n+         */\n+        public Builder withTitle(final String title) {\n+            this.title = title;\n+            return this;\n+        }\n+\n+        /**\n+         * When subtitle is set, then default subtitle will be replaced on the screen with it.\n+         *\n+         * @param subtitle subtitle text\n+         * @return builder\n+         */\n+        public Builder withSubtitle(final String subtitle) {\n+            this.subtitle = subtitle;\n+            return this;\n+        }\n+\n+        /**\n+         * Set ups the image in congarts's header\n+         *\n+         * @param imageUrl url for the header's image\n+         * @return builder\n+         */\n+        public Builder withImageUrl(final String imageUrl) {\n+            this.imageUrl = imageUrl;\n+            return this;\n+        }\n+\n+        /**\n+         * If value is set, then receipt view will appear.\n+         *\n+         * @param receiptId the receipt id to be shown.\n+         * @return builder\n+         */\n+        public Builder withReceipId(final String receiptId) {\n+            this.receiptId = receiptId;\n+            return this;\n+        }\n+\n+        /**\n+         * @param receiptIdList The list of receipt ids\n+         * @return builder\n+         */\n+        public Builder withReceiptIdList(final List<String> receiptIdList) {\n+            this.receiptIdList = receiptIdList;\n+            return this;\n+        }\n+\n+        /**\n+         * if help is set, then a small box with help instructions will appear\n+         *\n+         * @param help a help message\n+         * @return builder\n+         */\n+        public Builder withHelp(final String help) {\n+            this.help = help;\n+            return this;\n+        }\n+\n+        /**\n+         *\n+         * @param iconId header's icon\n+         * @return builder\n+         */\n+        public Builder withIconId(final int iconId) {\n+            this.iconId = iconId;\n+            return this;\n+        }\n+\n+        /**\n+         * if Exit action is set, then a big primary button will appear and the click action will trigger a resCode that\n+         * will be the same of the Exit action added.\n+         *\n+         * @param label text show in primary action\n+         * @param resCode resCode in exit case\n+         * @return builder\n+         */\n+        public Builder withExitActionPrimary(final String label, final int resCode) {\n+            this.exitActionPrimary = new ExitAction(label, resCode);\n+            return this;\n+        }\n+\n+        /**\n+         * if Exit action is set, then a big secondary button will appear and the click action will trigger a resCode that\n+         * will be the same of the Exit action added.\n+         *\n+         * @param label text show in secondary action\n+         * @param resCode resCode in exit case\n+         * @return builder\n+         */\n+        public Builder withExitActionSecondary(final String label, final int resCode) {\n+            this.exitActionSecondary = new ExitAction(label, resCode);\n+            return this;\n+        }\n+\n+        /**\n+         * If value true is set on and the payment method is credit card then the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI1Mjc4MQ=="}, "originalCommit": {"oid": "5cea5d6b256d9fc3303cf003b35c18bfb544a655"}, "originalPosition": 411}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTY0NTcwOnYy", "diffSide": "RIGHT", "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_congrats/PaymentCongrats.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzowNjo0NlrOG1BoCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzowNjo0NlrOG1BoCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI1NDM0Ng==", "bodyText": "falto la \"d\" del \"Should\" y el \"Show\" ShouldShow", "url": "https://github.com/mercadopago/px-android/pull/2238#discussion_r458254346", "createdAt": "2020-07-21T17:06:46Z", "author": {"login": "nmanuelidesML"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_congrats/PaymentCongrats.java", "diffHunk": "@@ -0,0 +1,523 @@\n+package com.mercadopago.android.px.internal.features.payment_congrats;\n+\n+import android.os.Bundle;\n+import android.os.Parcel;\n+import android.os.Parcelable;\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n+import android.support.v4.app.Fragment;\n+import com.mercadopago.android.px.internal.util.ListUtil;\n+import com.mercadopago.android.px.internal.util.TextUtil;\n+import com.mercadopago.android.px.model.ExitAction;\n+import com.mercadopago.android.px.model.ExternalFragment;\n+import java.util.List;\n+import org.jetbrains.annotations.NotNull;\n+\n+public class PaymentCongrats implements Parcelable {\n+    //Basic data\n+    @NonNull private final CongratsType congratsType;\n+    @NonNull private final String title;\n+    @Nullable private final String subtitle;\n+    @NonNull private final String imageUrl;\n+    @Nullable private final String help;\n+    private final int iconId;\n+    @Nullable private final String statementDescription;\n+    private final boolean shouldShowPaymentMethod;\n+\n+    //Receipt data\n+    @Nullable private final String receiptId;\n+    @Nullable private final List<String> receiptIdList;\n+    private final boolean shouldShowReceipt;\n+\n+    // Exit Buttons\n+    @Nullable private final ExitAction exitActionPrimary;\n+    @Nullable private final ExitAction exitActionSecondary;\n+\n+\n+    // custom views for integrators\n+    @Nullable private final ExternalFragment topFragment;\n+    @Nullable private final ExternalFragment bottomFragment;\n+    @Nullable private final ExternalFragment importantFragment;\n+\n+    private final int currencyDecimalPlaces;\n+    @NonNull private final String currencyDecimalSeparator;\n+    @NonNull private final String currencySymbol;\n+    @NonNull private final String currencyThousandsSeparator;\n+\n+    private PaymentCongrats(final Builder builder) {\n+        congratsType = builder.congratsType;\n+        title = builder.title;\n+        subtitle = builder.subtitle;\n+        imageUrl = builder.imageUrl;\n+        help = builder.help;\n+        iconId = builder.iconId;\n+        receiptId = builder.receiptId;\n+        receiptIdList = builder.receiptIdList;\n+        exitActionPrimary = builder.exitActionPrimary;\n+        exitActionSecondary = builder.exitActionSecondary;\n+        statementDescription = builder.statementDescription;\n+        shouldShowPaymentMethod = builder.shouldShowPaymentMethod;\n+        shouldShowReceipt = builder.shouldShowReceipt;\n+        topFragment = builder.topFragment;\n+        bottomFragment = builder.bottomFragment;\n+        importantFragment = builder.importantFragment;\n+        currencyDecimalPlaces = builder.currencyDecimalPlaces;\n+        currencyDecimalSeparator = builder.currencyDecimalSeparator;\n+        currencySymbol = builder.currencySymbol;\n+        currencyThousandsSeparator = builder.currencyThousandsSeparator;\n+    }\n+\n+    @Override\n+    public int describeContents() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public void writeToParcel(Parcel dest, int flags) {\n+        dest.writeString(this.congratsType.type);\n+        dest.writeString(this.title);\n+        dest.writeString(this.subtitle);\n+        dest.writeString(this.imageUrl);\n+        dest.writeString(this.help);\n+        dest.writeInt(this.iconId);\n+        dest.writeString(this.receiptId);\n+        dest.writeStringList(this.receiptIdList);\n+        dest.writeParcelable(this.exitActionPrimary, flags);\n+        dest.writeParcelable(this.exitActionSecondary, flags);\n+        dest.writeString(this.statementDescription);\n+        dest.writeValue(this.shouldShowPaymentMethod);\n+        dest.writeValue(this.shouldShowReceipt);\n+        dest.writeParcelable(this.topFragment, flags);\n+        dest.writeParcelable(this.bottomFragment, flags);\n+        dest.writeParcelable(this.importantFragment, flags);\n+        dest.writeInt(this.currencyDecimalPlaces);\n+        dest.writeString(this.currencyDecimalSeparator);\n+        dest.writeString(this.currencySymbol);\n+        dest.writeString(this.currencyThousandsSeparator);\n+    }\n+\n+    protected PaymentCongrats(Parcel in) {\n+        this.congratsType = CongratsType.fromName(in.readString());\n+        this.title = in.readString();\n+        this.subtitle = in.readString();\n+        this.imageUrl = in.readString();\n+        this.help = in.readString();\n+        this.iconId = in.readInt();\n+        this.receiptId = in.readString();\n+        this.receiptIdList = in.createStringArrayList();\n+        this.exitActionPrimary = in.readParcelable(ExitAction.class.getClassLoader());\n+        this.exitActionSecondary = in.readParcelable(ExitAction.class.getClassLoader());\n+        this.statementDescription = in.readString();\n+        this.shouldShowPaymentMethod = (Boolean) in.readValue(Boolean.class.getClassLoader());\n+        this.shouldShowReceipt = (Boolean) in.readValue(Boolean.class.getClassLoader());\n+        this.topFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.bottomFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.importantFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.currencyDecimalPlaces = in.readInt();\n+        this.currencyDecimalSeparator = in.readString();\n+        this.currencySymbol = in.readString();\n+        this.currencyThousandsSeparator = in.readString();\n+    }\n+\n+    public static final Parcelable.Creator<PaymentCongrats> CREATOR = new Parcelable.Creator<PaymentCongrats>() {\n+        @Override\n+        public PaymentCongrats createFromParcel(Parcel source) {\n+            return new PaymentCongrats(source);\n+        }\n+\n+        @Override\n+        public PaymentCongrats[] newArray(int size) {\n+            return new PaymentCongrats[size];\n+        }\n+    };\n+\n+    @NotNull\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    @Nullable\n+    public String getSubtitle() {\n+        return subtitle;\n+    }\n+\n+    @NotNull\n+    public String getImageUrl() {\n+        return imageUrl;\n+    }\n+\n+    @Nullable\n+    public String getHelp() {\n+        return help;\n+    }\n+\n+    public String getReceipt() {\n+        return ListUtil.isNotEmpty(receiptIdList) ? receiptIdList.get(0) : receiptId;\n+    }\n+\n+    @Nullable\n+    public ExitAction getExitActionPrimary() {\n+        return exitActionPrimary;\n+    }\n+\n+    @Nullable\n+    public ExitAction getExitActionSecondary() {\n+        return exitActionSecondary;\n+    }\n+\n+    @Nullable\n+    public String getStatementDescription() {\n+        return statementDescription;\n+    }\n+\n+    @Nullable\n+    public Boolean getShouldShowPaymentMethod() {\n+        return shouldShowPaymentMethod;\n+    }\n+\n+    @Nullable\n+    public Boolean getShouldShowReceipt() {\n+        return shouldShowReceipt;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getTopFragment() {\n+        return topFragment;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getBottomFragment() {\n+        return bottomFragment;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getImportantFragment() {\n+        return importantFragment;\n+    }\n+\n+    public int getCurrencyDecimalPlaces() {\n+        return currencyDecimalPlaces;\n+    }\n+\n+    @NonNull\n+    public String getCurrencyDecimalSeparator() {\n+        return currencyDecimalSeparator;\n+    }\n+\n+    @NonNull\n+    public String getCurrencySymbol() {\n+        return currencySymbol;\n+    }\n+\n+    @NonNull\n+    public String getCurrencyThousandsSeparator() {\n+        return currencyThousandsSeparator;\n+    }\n+\n+    public Boolean hasTopFragment() {\n+        return getTopFragment() != null;\n+    }\n+\n+    public Boolean hasBottomFragment() {\n+        return getBottomFragment() != null;\n+    }\n+\n+    public Boolean hasImportantFragment() {\n+        return getImportantFragment() != null;\n+    }\n+\n+    public Boolean hasHelp() {\n+        return TextUtil.isNotEmpty(help);\n+    }\n+\n+    @NonNull\n+    public CongratsType getCongratsType() {\n+        return congratsType;\n+    }\n+\n+    public enum CongratsType {\n+        APPROVED(\"APPROVED\"),\n+        REJECTED(\"REJECTED\"),\n+        PENDING(\"PENDING\");\n+\n+        public final String type;\n+\n+        CongratsType(final String type) {\n+            this.type = type;\n+        }\n+\n+        public static CongratsType fromName(final String text) {\n+            for (final CongratsType s : CongratsType.values()) {\n+                if (s.type.equalsIgnoreCase(text)) {\n+                    return s;\n+                }\n+            }\n+            throw new IllegalStateException(\"Invalid decorator\");\n+        }\n+    }\n+\n+    public static class Builder {\n+        //Basic data\n+        /* default */ CongratsType congratsType;\n+        /* default */ String title;\n+        /* default */ String subtitle;\n+        /* default */ String imageUrl;\n+        /* default */ String help;\n+        /* default */ int iconId;\n+\n+        /* default */ String receiptId;\n+        /* default */ List<String> receiptIdList;\n+\n+        // Exit Buttons\n+        /* default */ ExitAction exitActionPrimary;\n+        /* default */ ExitAction exitActionSecondary;\n+\n+        /* default */ String statementDescription;\n+\n+        /* default */ boolean shouldShowPaymentMethod = false;\n+        /* default */ boolean shouldShowReceipt = false;\n+\n+        // custom views for integrators\n+        /* default */ ExternalFragment topFragment;\n+        /* default */ ExternalFragment bottomFragment;\n+        /* default */ ExternalFragment importantFragment;\n+\n+        /* default */ int currencyDecimalPlaces = 2;\n+        /* default */ String currencyDecimalSeparator = \",\";\n+        /* default */ String currencySymbol = \"$\";\n+        /* default */ String currencyThousandsSeparator = \".\";\n+\n+        public Builder() {}\n+\n+        public PaymentCongrats build() {\n+            if (exitActionPrimary == null && exitActionSecondary == null) {\n+                throw new IllegalStateException(\"At least one button should be provided for BusinessPayment\");\n+            }\n+            return new PaymentCongrats(this);\n+        }\n+\n+        /**\n+         * Set ups the congrats type (green, red, orange)\n+         *\n+         * @param congratsType enum with type atribute\n+         * @return builder\n+         */\n+        public Builder withCongratsType(final CongratsType congratsType) {\n+            this.congratsType = congratsType;\n+            return this;\n+        }\n+\n+        /**\n+         * Title show in the congrats's header\n+         *\n+         * @param title congrats's title\n+         * @return builder\n+         */\n+        public Builder withTitle(final String title) {\n+            this.title = title;\n+            return this;\n+        }\n+\n+        /**\n+         * When subtitle is set, then default subtitle will be replaced on the screen with it.\n+         *\n+         * @param subtitle subtitle text\n+         * @return builder\n+         */\n+        public Builder withSubtitle(final String subtitle) {\n+            this.subtitle = subtitle;\n+            return this;\n+        }\n+\n+        /**\n+         * Set ups the image in congarts's header\n+         *\n+         * @param imageUrl url for the header's image\n+         * @return builder\n+         */\n+        public Builder withImageUrl(final String imageUrl) {\n+            this.imageUrl = imageUrl;\n+            return this;\n+        }\n+\n+        /**\n+         * If value is set, then receipt view will appear.\n+         *\n+         * @param receiptId the receipt id to be shown.\n+         * @return builder\n+         */\n+        public Builder withReceipId(final String receiptId) {\n+            this.receiptId = receiptId;\n+            return this;\n+        }\n+\n+        /**\n+         * @param receiptIdList The list of receipt ids\n+         * @return builder\n+         */\n+        public Builder withReceiptIdList(final List<String> receiptIdList) {\n+            this.receiptIdList = receiptIdList;\n+            return this;\n+        }\n+\n+        /**\n+         * if help is set, then a small box with help instructions will appear\n+         *\n+         * @param help a help message\n+         * @return builder\n+         */\n+        public Builder withHelp(final String help) {\n+            this.help = help;\n+            return this;\n+        }\n+\n+        /**\n+         *\n+         * @param iconId header's icon\n+         * @return builder\n+         */\n+        public Builder withIconId(final int iconId) {\n+            this.iconId = iconId;\n+            return this;\n+        }\n+\n+        /**\n+         * if Exit action is set, then a big primary button will appear and the click action will trigger a resCode that\n+         * will be the same of the Exit action added.\n+         *\n+         * @param label text show in primary action\n+         * @param resCode resCode in exit case\n+         * @return builder\n+         */\n+        public Builder withExitActionPrimary(final String label, final int resCode) {\n+            this.exitActionPrimary = new ExitAction(label, resCode);\n+            return this;\n+        }\n+\n+        /**\n+         * if Exit action is set, then a big secondary button will appear and the click action will trigger a resCode that\n+         * will be the same of the Exit action added.\n+         *\n+         * @param label text show in secondary action\n+         * @param resCode resCode in exit case\n+         * @return builder\n+         */\n+        public Builder withExitActionSecondary(final String label, final int resCode) {\n+            this.exitActionSecondary = new ExitAction(label, resCode);\n+            return this;\n+        }\n+\n+        /**\n+         * If value true is set on and the payment method is credit card then the\n+         * statementDescription will be shown on payment method view.\n+         *\n+         * @param statementDescription disclaimer text\n+         * @return builder\n+         */\n+        public Builder withStatementDescription(final String statementDescription) {\n+            this.statementDescription = statementDescription;\n+            return this;\n+        }\n+\n+        /**\n+         * If value true is set, then payment method box will appear with the amount value and payment method options\n+         * that were selected by the user.\n+         *\n+         * @param shouldShowPaymentMethod visibility mode, default value is \"false\"\n+         * @return builder\n+         */\n+        public Builder withShoulPaymentMethod(final boolean shouldShowPaymentMethod) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cea5d6b256d9fc3303cf003b35c18bfb544a655"}, "originalPosition": 429}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTY1NDMxOnYy", "diffSide": "RIGHT", "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_congrats/PaymentCongrats.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzowODo1NVrOG1BtVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzoyNzo1MlrOG1CaVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI1NTcwMg==", "bodyText": "alguna raz\u00f3n en especial por la q ac\u00e1 usamos la clase Boolean y en el anterior el primitivo (boolean)?", "url": "https://github.com/mercadopago/px-android/pull/2238#discussion_r458255702", "createdAt": "2020-07-21T17:08:55Z", "author": {"login": "nmanuelidesML"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_congrats/PaymentCongrats.java", "diffHunk": "@@ -0,0 +1,523 @@\n+package com.mercadopago.android.px.internal.features.payment_congrats;\n+\n+import android.os.Bundle;\n+import android.os.Parcel;\n+import android.os.Parcelable;\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n+import android.support.v4.app.Fragment;\n+import com.mercadopago.android.px.internal.util.ListUtil;\n+import com.mercadopago.android.px.internal.util.TextUtil;\n+import com.mercadopago.android.px.model.ExitAction;\n+import com.mercadopago.android.px.model.ExternalFragment;\n+import java.util.List;\n+import org.jetbrains.annotations.NotNull;\n+\n+public class PaymentCongrats implements Parcelable {\n+    //Basic data\n+    @NonNull private final CongratsType congratsType;\n+    @NonNull private final String title;\n+    @Nullable private final String subtitle;\n+    @NonNull private final String imageUrl;\n+    @Nullable private final String help;\n+    private final int iconId;\n+    @Nullable private final String statementDescription;\n+    private final boolean shouldShowPaymentMethod;\n+\n+    //Receipt data\n+    @Nullable private final String receiptId;\n+    @Nullable private final List<String> receiptIdList;\n+    private final boolean shouldShowReceipt;\n+\n+    // Exit Buttons\n+    @Nullable private final ExitAction exitActionPrimary;\n+    @Nullable private final ExitAction exitActionSecondary;\n+\n+\n+    // custom views for integrators\n+    @Nullable private final ExternalFragment topFragment;\n+    @Nullable private final ExternalFragment bottomFragment;\n+    @Nullable private final ExternalFragment importantFragment;\n+\n+    private final int currencyDecimalPlaces;\n+    @NonNull private final String currencyDecimalSeparator;\n+    @NonNull private final String currencySymbol;\n+    @NonNull private final String currencyThousandsSeparator;\n+\n+    private PaymentCongrats(final Builder builder) {\n+        congratsType = builder.congratsType;\n+        title = builder.title;\n+        subtitle = builder.subtitle;\n+        imageUrl = builder.imageUrl;\n+        help = builder.help;\n+        iconId = builder.iconId;\n+        receiptId = builder.receiptId;\n+        receiptIdList = builder.receiptIdList;\n+        exitActionPrimary = builder.exitActionPrimary;\n+        exitActionSecondary = builder.exitActionSecondary;\n+        statementDescription = builder.statementDescription;\n+        shouldShowPaymentMethod = builder.shouldShowPaymentMethod;\n+        shouldShowReceipt = builder.shouldShowReceipt;\n+        topFragment = builder.topFragment;\n+        bottomFragment = builder.bottomFragment;\n+        importantFragment = builder.importantFragment;\n+        currencyDecimalPlaces = builder.currencyDecimalPlaces;\n+        currencyDecimalSeparator = builder.currencyDecimalSeparator;\n+        currencySymbol = builder.currencySymbol;\n+        currencyThousandsSeparator = builder.currencyThousandsSeparator;\n+    }\n+\n+    @Override\n+    public int describeContents() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public void writeToParcel(Parcel dest, int flags) {\n+        dest.writeString(this.congratsType.type);\n+        dest.writeString(this.title);\n+        dest.writeString(this.subtitle);\n+        dest.writeString(this.imageUrl);\n+        dest.writeString(this.help);\n+        dest.writeInt(this.iconId);\n+        dest.writeString(this.receiptId);\n+        dest.writeStringList(this.receiptIdList);\n+        dest.writeParcelable(this.exitActionPrimary, flags);\n+        dest.writeParcelable(this.exitActionSecondary, flags);\n+        dest.writeString(this.statementDescription);\n+        dest.writeValue(this.shouldShowPaymentMethod);\n+        dest.writeValue(this.shouldShowReceipt);\n+        dest.writeParcelable(this.topFragment, flags);\n+        dest.writeParcelable(this.bottomFragment, flags);\n+        dest.writeParcelable(this.importantFragment, flags);\n+        dest.writeInt(this.currencyDecimalPlaces);\n+        dest.writeString(this.currencyDecimalSeparator);\n+        dest.writeString(this.currencySymbol);\n+        dest.writeString(this.currencyThousandsSeparator);\n+    }\n+\n+    protected PaymentCongrats(Parcel in) {\n+        this.congratsType = CongratsType.fromName(in.readString());\n+        this.title = in.readString();\n+        this.subtitle = in.readString();\n+        this.imageUrl = in.readString();\n+        this.help = in.readString();\n+        this.iconId = in.readInt();\n+        this.receiptId = in.readString();\n+        this.receiptIdList = in.createStringArrayList();\n+        this.exitActionPrimary = in.readParcelable(ExitAction.class.getClassLoader());\n+        this.exitActionSecondary = in.readParcelable(ExitAction.class.getClassLoader());\n+        this.statementDescription = in.readString();\n+        this.shouldShowPaymentMethod = (Boolean) in.readValue(Boolean.class.getClassLoader());\n+        this.shouldShowReceipt = (Boolean) in.readValue(Boolean.class.getClassLoader());\n+        this.topFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.bottomFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.importantFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.currencyDecimalPlaces = in.readInt();\n+        this.currencyDecimalSeparator = in.readString();\n+        this.currencySymbol = in.readString();\n+        this.currencyThousandsSeparator = in.readString();\n+    }\n+\n+    public static final Parcelable.Creator<PaymentCongrats> CREATOR = new Parcelable.Creator<PaymentCongrats>() {\n+        @Override\n+        public PaymentCongrats createFromParcel(Parcel source) {\n+            return new PaymentCongrats(source);\n+        }\n+\n+        @Override\n+        public PaymentCongrats[] newArray(int size) {\n+            return new PaymentCongrats[size];\n+        }\n+    };\n+\n+    @NotNull\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    @Nullable\n+    public String getSubtitle() {\n+        return subtitle;\n+    }\n+\n+    @NotNull\n+    public String getImageUrl() {\n+        return imageUrl;\n+    }\n+\n+    @Nullable\n+    public String getHelp() {\n+        return help;\n+    }\n+\n+    public String getReceipt() {\n+        return ListUtil.isNotEmpty(receiptIdList) ? receiptIdList.get(0) : receiptId;\n+    }\n+\n+    @Nullable\n+    public ExitAction getExitActionPrimary() {\n+        return exitActionPrimary;\n+    }\n+\n+    @Nullable\n+    public ExitAction getExitActionSecondary() {\n+        return exitActionSecondary;\n+    }\n+\n+    @Nullable\n+    public String getStatementDescription() {\n+        return statementDescription;\n+    }\n+\n+    @Nullable\n+    public Boolean getShouldShowPaymentMethod() {\n+        return shouldShowPaymentMethod;\n+    }\n+\n+    @Nullable\n+    public Boolean getShouldShowReceipt() {\n+        return shouldShowReceipt;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getTopFragment() {\n+        return topFragment;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getBottomFragment() {\n+        return bottomFragment;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getImportantFragment() {\n+        return importantFragment;\n+    }\n+\n+    public int getCurrencyDecimalPlaces() {\n+        return currencyDecimalPlaces;\n+    }\n+\n+    @NonNull\n+    public String getCurrencyDecimalSeparator() {\n+        return currencyDecimalSeparator;\n+    }\n+\n+    @NonNull\n+    public String getCurrencySymbol() {\n+        return currencySymbol;\n+    }\n+\n+    @NonNull\n+    public String getCurrencyThousandsSeparator() {\n+        return currencyThousandsSeparator;\n+    }\n+\n+    public Boolean hasTopFragment() {\n+        return getTopFragment() != null;\n+    }\n+\n+    public Boolean hasBottomFragment() {\n+        return getBottomFragment() != null;\n+    }\n+\n+    public Boolean hasImportantFragment() {\n+        return getImportantFragment() != null;\n+    }\n+\n+    public Boolean hasHelp() {\n+        return TextUtil.isNotEmpty(help);\n+    }\n+\n+    @NonNull\n+    public CongratsType getCongratsType() {\n+        return congratsType;\n+    }\n+\n+    public enum CongratsType {\n+        APPROVED(\"APPROVED\"),\n+        REJECTED(\"REJECTED\"),\n+        PENDING(\"PENDING\");\n+\n+        public final String type;\n+\n+        CongratsType(final String type) {\n+            this.type = type;\n+        }\n+\n+        public static CongratsType fromName(final String text) {\n+            for (final CongratsType s : CongratsType.values()) {\n+                if (s.type.equalsIgnoreCase(text)) {\n+                    return s;\n+                }\n+            }\n+            throw new IllegalStateException(\"Invalid decorator\");\n+        }\n+    }\n+\n+    public static class Builder {\n+        //Basic data\n+        /* default */ CongratsType congratsType;\n+        /* default */ String title;\n+        /* default */ String subtitle;\n+        /* default */ String imageUrl;\n+        /* default */ String help;\n+        /* default */ int iconId;\n+\n+        /* default */ String receiptId;\n+        /* default */ List<String> receiptIdList;\n+\n+        // Exit Buttons\n+        /* default */ ExitAction exitActionPrimary;\n+        /* default */ ExitAction exitActionSecondary;\n+\n+        /* default */ String statementDescription;\n+\n+        /* default */ boolean shouldShowPaymentMethod = false;\n+        /* default */ boolean shouldShowReceipt = false;\n+\n+        // custom views for integrators\n+        /* default */ ExternalFragment topFragment;\n+        /* default */ ExternalFragment bottomFragment;\n+        /* default */ ExternalFragment importantFragment;\n+\n+        /* default */ int currencyDecimalPlaces = 2;\n+        /* default */ String currencyDecimalSeparator = \",\";\n+        /* default */ String currencySymbol = \"$\";\n+        /* default */ String currencyThousandsSeparator = \".\";\n+\n+        public Builder() {}\n+\n+        public PaymentCongrats build() {\n+            if (exitActionPrimary == null && exitActionSecondary == null) {\n+                throw new IllegalStateException(\"At least one button should be provided for BusinessPayment\");\n+            }\n+            return new PaymentCongrats(this);\n+        }\n+\n+        /**\n+         * Set ups the congrats type (green, red, orange)\n+         *\n+         * @param congratsType enum with type atribute\n+         * @return builder\n+         */\n+        public Builder withCongratsType(final CongratsType congratsType) {\n+            this.congratsType = congratsType;\n+            return this;\n+        }\n+\n+        /**\n+         * Title show in the congrats's header\n+         *\n+         * @param title congrats's title\n+         * @return builder\n+         */\n+        public Builder withTitle(final String title) {\n+            this.title = title;\n+            return this;\n+        }\n+\n+        /**\n+         * When subtitle is set, then default subtitle will be replaced on the screen with it.\n+         *\n+         * @param subtitle subtitle text\n+         * @return builder\n+         */\n+        public Builder withSubtitle(final String subtitle) {\n+            this.subtitle = subtitle;\n+            return this;\n+        }\n+\n+        /**\n+         * Set ups the image in congarts's header\n+         *\n+         * @param imageUrl url for the header's image\n+         * @return builder\n+         */\n+        public Builder withImageUrl(final String imageUrl) {\n+            this.imageUrl = imageUrl;\n+            return this;\n+        }\n+\n+        /**\n+         * If value is set, then receipt view will appear.\n+         *\n+         * @param receiptId the receipt id to be shown.\n+         * @return builder\n+         */\n+        public Builder withReceipId(final String receiptId) {\n+            this.receiptId = receiptId;\n+            return this;\n+        }\n+\n+        /**\n+         * @param receiptIdList The list of receipt ids\n+         * @return builder\n+         */\n+        public Builder withReceiptIdList(final List<String> receiptIdList) {\n+            this.receiptIdList = receiptIdList;\n+            return this;\n+        }\n+\n+        /**\n+         * if help is set, then a small box with help instructions will appear\n+         *\n+         * @param help a help message\n+         * @return builder\n+         */\n+        public Builder withHelp(final String help) {\n+            this.help = help;\n+            return this;\n+        }\n+\n+        /**\n+         *\n+         * @param iconId header's icon\n+         * @return builder\n+         */\n+        public Builder withIconId(final int iconId) {\n+            this.iconId = iconId;\n+            return this;\n+        }\n+\n+        /**\n+         * if Exit action is set, then a big primary button will appear and the click action will trigger a resCode that\n+         * will be the same of the Exit action added.\n+         *\n+         * @param label text show in primary action\n+         * @param resCode resCode in exit case\n+         * @return builder\n+         */\n+        public Builder withExitActionPrimary(final String label, final int resCode) {\n+            this.exitActionPrimary = new ExitAction(label, resCode);\n+            return this;\n+        }\n+\n+        /**\n+         * if Exit action is set, then a big secondary button will appear and the click action will trigger a resCode that\n+         * will be the same of the Exit action added.\n+         *\n+         * @param label text show in secondary action\n+         * @param resCode resCode in exit case\n+         * @return builder\n+         */\n+        public Builder withExitActionSecondary(final String label, final int resCode) {\n+            this.exitActionSecondary = new ExitAction(label, resCode);\n+            return this;\n+        }\n+\n+        /**\n+         * If value true is set on and the payment method is credit card then the\n+         * statementDescription will be shown on payment method view.\n+         *\n+         * @param statementDescription disclaimer text\n+         * @return builder\n+         */\n+        public Builder withStatementDescription(final String statementDescription) {\n+            this.statementDescription = statementDescription;\n+            return this;\n+        }\n+\n+        /**\n+         * If value true is set, then payment method box will appear with the amount value and payment method options\n+         * that were selected by the user.\n+         *\n+         * @param shouldShowPaymentMethod visibility mode, default value is \"false\"\n+         * @return builder\n+         */\n+        public Builder withShoulPaymentMethod(final boolean shouldShowPaymentMethod) {\n+            this.shouldShowPaymentMethod = shouldShowPaymentMethod;\n+            return this;\n+        }\n+\n+        /**\n+         * Override the receipt drawing, without depending on the receipt id\n+         *\n+         * @param shouldShowReceipt if the receipt should be drawn, default value is \"false\"\n+         * @return builder\n+         */\n+        public Builder withShouldShowReceipt(final Boolean shouldShowReceipt) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cea5d6b256d9fc3303cf003b35c18bfb544a655"}, "originalPosition": 440}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI2NzIyMw==", "bodyText": "eso es porque primero lo hab\u00eda hecho con Boolean, pero en el camino me di cuenta que era mejor boolean, lo cambi\u00e9 en todos lados y ac\u00e1 se me pas\u00f3", "url": "https://github.com/mercadopago/px-android/pull/2238#discussion_r458267223", "createdAt": "2020-07-21T17:27:52Z", "author": {"login": "mmunozpatinomeli"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_congrats/PaymentCongrats.java", "diffHunk": "@@ -0,0 +1,523 @@\n+package com.mercadopago.android.px.internal.features.payment_congrats;\n+\n+import android.os.Bundle;\n+import android.os.Parcel;\n+import android.os.Parcelable;\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n+import android.support.v4.app.Fragment;\n+import com.mercadopago.android.px.internal.util.ListUtil;\n+import com.mercadopago.android.px.internal.util.TextUtil;\n+import com.mercadopago.android.px.model.ExitAction;\n+import com.mercadopago.android.px.model.ExternalFragment;\n+import java.util.List;\n+import org.jetbrains.annotations.NotNull;\n+\n+public class PaymentCongrats implements Parcelable {\n+    //Basic data\n+    @NonNull private final CongratsType congratsType;\n+    @NonNull private final String title;\n+    @Nullable private final String subtitle;\n+    @NonNull private final String imageUrl;\n+    @Nullable private final String help;\n+    private final int iconId;\n+    @Nullable private final String statementDescription;\n+    private final boolean shouldShowPaymentMethod;\n+\n+    //Receipt data\n+    @Nullable private final String receiptId;\n+    @Nullable private final List<String> receiptIdList;\n+    private final boolean shouldShowReceipt;\n+\n+    // Exit Buttons\n+    @Nullable private final ExitAction exitActionPrimary;\n+    @Nullable private final ExitAction exitActionSecondary;\n+\n+\n+    // custom views for integrators\n+    @Nullable private final ExternalFragment topFragment;\n+    @Nullable private final ExternalFragment bottomFragment;\n+    @Nullable private final ExternalFragment importantFragment;\n+\n+    private final int currencyDecimalPlaces;\n+    @NonNull private final String currencyDecimalSeparator;\n+    @NonNull private final String currencySymbol;\n+    @NonNull private final String currencyThousandsSeparator;\n+\n+    private PaymentCongrats(final Builder builder) {\n+        congratsType = builder.congratsType;\n+        title = builder.title;\n+        subtitle = builder.subtitle;\n+        imageUrl = builder.imageUrl;\n+        help = builder.help;\n+        iconId = builder.iconId;\n+        receiptId = builder.receiptId;\n+        receiptIdList = builder.receiptIdList;\n+        exitActionPrimary = builder.exitActionPrimary;\n+        exitActionSecondary = builder.exitActionSecondary;\n+        statementDescription = builder.statementDescription;\n+        shouldShowPaymentMethod = builder.shouldShowPaymentMethod;\n+        shouldShowReceipt = builder.shouldShowReceipt;\n+        topFragment = builder.topFragment;\n+        bottomFragment = builder.bottomFragment;\n+        importantFragment = builder.importantFragment;\n+        currencyDecimalPlaces = builder.currencyDecimalPlaces;\n+        currencyDecimalSeparator = builder.currencyDecimalSeparator;\n+        currencySymbol = builder.currencySymbol;\n+        currencyThousandsSeparator = builder.currencyThousandsSeparator;\n+    }\n+\n+    @Override\n+    public int describeContents() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public void writeToParcel(Parcel dest, int flags) {\n+        dest.writeString(this.congratsType.type);\n+        dest.writeString(this.title);\n+        dest.writeString(this.subtitle);\n+        dest.writeString(this.imageUrl);\n+        dest.writeString(this.help);\n+        dest.writeInt(this.iconId);\n+        dest.writeString(this.receiptId);\n+        dest.writeStringList(this.receiptIdList);\n+        dest.writeParcelable(this.exitActionPrimary, flags);\n+        dest.writeParcelable(this.exitActionSecondary, flags);\n+        dest.writeString(this.statementDescription);\n+        dest.writeValue(this.shouldShowPaymentMethod);\n+        dest.writeValue(this.shouldShowReceipt);\n+        dest.writeParcelable(this.topFragment, flags);\n+        dest.writeParcelable(this.bottomFragment, flags);\n+        dest.writeParcelable(this.importantFragment, flags);\n+        dest.writeInt(this.currencyDecimalPlaces);\n+        dest.writeString(this.currencyDecimalSeparator);\n+        dest.writeString(this.currencySymbol);\n+        dest.writeString(this.currencyThousandsSeparator);\n+    }\n+\n+    protected PaymentCongrats(Parcel in) {\n+        this.congratsType = CongratsType.fromName(in.readString());\n+        this.title = in.readString();\n+        this.subtitle = in.readString();\n+        this.imageUrl = in.readString();\n+        this.help = in.readString();\n+        this.iconId = in.readInt();\n+        this.receiptId = in.readString();\n+        this.receiptIdList = in.createStringArrayList();\n+        this.exitActionPrimary = in.readParcelable(ExitAction.class.getClassLoader());\n+        this.exitActionSecondary = in.readParcelable(ExitAction.class.getClassLoader());\n+        this.statementDescription = in.readString();\n+        this.shouldShowPaymentMethod = (Boolean) in.readValue(Boolean.class.getClassLoader());\n+        this.shouldShowReceipt = (Boolean) in.readValue(Boolean.class.getClassLoader());\n+        this.topFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.bottomFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.importantFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.currencyDecimalPlaces = in.readInt();\n+        this.currencyDecimalSeparator = in.readString();\n+        this.currencySymbol = in.readString();\n+        this.currencyThousandsSeparator = in.readString();\n+    }\n+\n+    public static final Parcelable.Creator<PaymentCongrats> CREATOR = new Parcelable.Creator<PaymentCongrats>() {\n+        @Override\n+        public PaymentCongrats createFromParcel(Parcel source) {\n+            return new PaymentCongrats(source);\n+        }\n+\n+        @Override\n+        public PaymentCongrats[] newArray(int size) {\n+            return new PaymentCongrats[size];\n+        }\n+    };\n+\n+    @NotNull\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    @Nullable\n+    public String getSubtitle() {\n+        return subtitle;\n+    }\n+\n+    @NotNull\n+    public String getImageUrl() {\n+        return imageUrl;\n+    }\n+\n+    @Nullable\n+    public String getHelp() {\n+        return help;\n+    }\n+\n+    public String getReceipt() {\n+        return ListUtil.isNotEmpty(receiptIdList) ? receiptIdList.get(0) : receiptId;\n+    }\n+\n+    @Nullable\n+    public ExitAction getExitActionPrimary() {\n+        return exitActionPrimary;\n+    }\n+\n+    @Nullable\n+    public ExitAction getExitActionSecondary() {\n+        return exitActionSecondary;\n+    }\n+\n+    @Nullable\n+    public String getStatementDescription() {\n+        return statementDescription;\n+    }\n+\n+    @Nullable\n+    public Boolean getShouldShowPaymentMethod() {\n+        return shouldShowPaymentMethod;\n+    }\n+\n+    @Nullable\n+    public Boolean getShouldShowReceipt() {\n+        return shouldShowReceipt;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getTopFragment() {\n+        return topFragment;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getBottomFragment() {\n+        return bottomFragment;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getImportantFragment() {\n+        return importantFragment;\n+    }\n+\n+    public int getCurrencyDecimalPlaces() {\n+        return currencyDecimalPlaces;\n+    }\n+\n+    @NonNull\n+    public String getCurrencyDecimalSeparator() {\n+        return currencyDecimalSeparator;\n+    }\n+\n+    @NonNull\n+    public String getCurrencySymbol() {\n+        return currencySymbol;\n+    }\n+\n+    @NonNull\n+    public String getCurrencyThousandsSeparator() {\n+        return currencyThousandsSeparator;\n+    }\n+\n+    public Boolean hasTopFragment() {\n+        return getTopFragment() != null;\n+    }\n+\n+    public Boolean hasBottomFragment() {\n+        return getBottomFragment() != null;\n+    }\n+\n+    public Boolean hasImportantFragment() {\n+        return getImportantFragment() != null;\n+    }\n+\n+    public Boolean hasHelp() {\n+        return TextUtil.isNotEmpty(help);\n+    }\n+\n+    @NonNull\n+    public CongratsType getCongratsType() {\n+        return congratsType;\n+    }\n+\n+    public enum CongratsType {\n+        APPROVED(\"APPROVED\"),\n+        REJECTED(\"REJECTED\"),\n+        PENDING(\"PENDING\");\n+\n+        public final String type;\n+\n+        CongratsType(final String type) {\n+            this.type = type;\n+        }\n+\n+        public static CongratsType fromName(final String text) {\n+            for (final CongratsType s : CongratsType.values()) {\n+                if (s.type.equalsIgnoreCase(text)) {\n+                    return s;\n+                }\n+            }\n+            throw new IllegalStateException(\"Invalid decorator\");\n+        }\n+    }\n+\n+    public static class Builder {\n+        //Basic data\n+        /* default */ CongratsType congratsType;\n+        /* default */ String title;\n+        /* default */ String subtitle;\n+        /* default */ String imageUrl;\n+        /* default */ String help;\n+        /* default */ int iconId;\n+\n+        /* default */ String receiptId;\n+        /* default */ List<String> receiptIdList;\n+\n+        // Exit Buttons\n+        /* default */ ExitAction exitActionPrimary;\n+        /* default */ ExitAction exitActionSecondary;\n+\n+        /* default */ String statementDescription;\n+\n+        /* default */ boolean shouldShowPaymentMethod = false;\n+        /* default */ boolean shouldShowReceipt = false;\n+\n+        // custom views for integrators\n+        /* default */ ExternalFragment topFragment;\n+        /* default */ ExternalFragment bottomFragment;\n+        /* default */ ExternalFragment importantFragment;\n+\n+        /* default */ int currencyDecimalPlaces = 2;\n+        /* default */ String currencyDecimalSeparator = \",\";\n+        /* default */ String currencySymbol = \"$\";\n+        /* default */ String currencyThousandsSeparator = \".\";\n+\n+        public Builder() {}\n+\n+        public PaymentCongrats build() {\n+            if (exitActionPrimary == null && exitActionSecondary == null) {\n+                throw new IllegalStateException(\"At least one button should be provided for BusinessPayment\");\n+            }\n+            return new PaymentCongrats(this);\n+        }\n+\n+        /**\n+         * Set ups the congrats type (green, red, orange)\n+         *\n+         * @param congratsType enum with type atribute\n+         * @return builder\n+         */\n+        public Builder withCongratsType(final CongratsType congratsType) {\n+            this.congratsType = congratsType;\n+            return this;\n+        }\n+\n+        /**\n+         * Title show in the congrats's header\n+         *\n+         * @param title congrats's title\n+         * @return builder\n+         */\n+        public Builder withTitle(final String title) {\n+            this.title = title;\n+            return this;\n+        }\n+\n+        /**\n+         * When subtitle is set, then default subtitle will be replaced on the screen with it.\n+         *\n+         * @param subtitle subtitle text\n+         * @return builder\n+         */\n+        public Builder withSubtitle(final String subtitle) {\n+            this.subtitle = subtitle;\n+            return this;\n+        }\n+\n+        /**\n+         * Set ups the image in congarts's header\n+         *\n+         * @param imageUrl url for the header's image\n+         * @return builder\n+         */\n+        public Builder withImageUrl(final String imageUrl) {\n+            this.imageUrl = imageUrl;\n+            return this;\n+        }\n+\n+        /**\n+         * If value is set, then receipt view will appear.\n+         *\n+         * @param receiptId the receipt id to be shown.\n+         * @return builder\n+         */\n+        public Builder withReceipId(final String receiptId) {\n+            this.receiptId = receiptId;\n+            return this;\n+        }\n+\n+        /**\n+         * @param receiptIdList The list of receipt ids\n+         * @return builder\n+         */\n+        public Builder withReceiptIdList(final List<String> receiptIdList) {\n+            this.receiptIdList = receiptIdList;\n+            return this;\n+        }\n+\n+        /**\n+         * if help is set, then a small box with help instructions will appear\n+         *\n+         * @param help a help message\n+         * @return builder\n+         */\n+        public Builder withHelp(final String help) {\n+            this.help = help;\n+            return this;\n+        }\n+\n+        /**\n+         *\n+         * @param iconId header's icon\n+         * @return builder\n+         */\n+        public Builder withIconId(final int iconId) {\n+            this.iconId = iconId;\n+            return this;\n+        }\n+\n+        /**\n+         * if Exit action is set, then a big primary button will appear and the click action will trigger a resCode that\n+         * will be the same of the Exit action added.\n+         *\n+         * @param label text show in primary action\n+         * @param resCode resCode in exit case\n+         * @return builder\n+         */\n+        public Builder withExitActionPrimary(final String label, final int resCode) {\n+            this.exitActionPrimary = new ExitAction(label, resCode);\n+            return this;\n+        }\n+\n+        /**\n+         * if Exit action is set, then a big secondary button will appear and the click action will trigger a resCode that\n+         * will be the same of the Exit action added.\n+         *\n+         * @param label text show in secondary action\n+         * @param resCode resCode in exit case\n+         * @return builder\n+         */\n+        public Builder withExitActionSecondary(final String label, final int resCode) {\n+            this.exitActionSecondary = new ExitAction(label, resCode);\n+            return this;\n+        }\n+\n+        /**\n+         * If value true is set on and the payment method is credit card then the\n+         * statementDescription will be shown on payment method view.\n+         *\n+         * @param statementDescription disclaimer text\n+         * @return builder\n+         */\n+        public Builder withStatementDescription(final String statementDescription) {\n+            this.statementDescription = statementDescription;\n+            return this;\n+        }\n+\n+        /**\n+         * If value true is set, then payment method box will appear with the amount value and payment method options\n+         * that were selected by the user.\n+         *\n+         * @param shouldShowPaymentMethod visibility mode, default value is \"false\"\n+         * @return builder\n+         */\n+        public Builder withShoulPaymentMethod(final boolean shouldShowPaymentMethod) {\n+            this.shouldShowPaymentMethod = shouldShowPaymentMethod;\n+            return this;\n+        }\n+\n+        /**\n+         * Override the receipt drawing, without depending on the receipt id\n+         *\n+         * @param shouldShowReceipt if the receipt should be drawn, default value is \"false\"\n+         * @return builder\n+         */\n+        public Builder withShouldShowReceipt(final Boolean shouldShowReceipt) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI1NTcwMg=="}, "originalCommit": {"oid": "5cea5d6b256d9fc3303cf003b35c18bfb544a655"}, "originalPosition": 440}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTc2NTk0OnYy", "diffSide": "RIGHT", "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_congrats/PaymentCongrats.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzozODozNlrOG1Czjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzozODozNlrOG1Czjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI3MzY3OQ==", "bodyText": "sorry se me paso este es un boludez, error gramatical nomas : P es \"Sets up\"", "url": "https://github.com/mercadopago/px-android/pull/2238#discussion_r458273679", "createdAt": "2020-07-21T17:38:36Z", "author": {"login": "nmanuelidesML"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_congrats/PaymentCongrats.java", "diffHunk": "@@ -0,0 +1,523 @@\n+package com.mercadopago.android.px.internal.features.payment_congrats;\n+\n+import android.os.Bundle;\n+import android.os.Parcel;\n+import android.os.Parcelable;\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n+import android.support.v4.app.Fragment;\n+import com.mercadopago.android.px.internal.util.ListUtil;\n+import com.mercadopago.android.px.internal.util.TextUtil;\n+import com.mercadopago.android.px.model.ExitAction;\n+import com.mercadopago.android.px.model.ExternalFragment;\n+import java.util.List;\n+import org.jetbrains.annotations.NotNull;\n+\n+public class PaymentCongrats implements Parcelable {\n+    //Basic data\n+    @NonNull private final CongratsType congratsType;\n+    @NonNull private final String title;\n+    @Nullable private final String subtitle;\n+    @NonNull private final String imageUrl;\n+    @Nullable private final String help;\n+    private final int iconId;\n+    @Nullable private final String statementDescription;\n+    private final boolean shouldShowPaymentMethod;\n+\n+    //Receipt data\n+    @Nullable private final String receiptId;\n+    @Nullable private final List<String> receiptIdList;\n+    private final boolean shouldShowReceipt;\n+\n+    // Exit Buttons\n+    @Nullable private final ExitAction exitActionPrimary;\n+    @Nullable private final ExitAction exitActionSecondary;\n+\n+\n+    // custom views for integrators\n+    @Nullable private final ExternalFragment topFragment;\n+    @Nullable private final ExternalFragment bottomFragment;\n+    @Nullable private final ExternalFragment importantFragment;\n+\n+    private final int currencyDecimalPlaces;\n+    @NonNull private final String currencyDecimalSeparator;\n+    @NonNull private final String currencySymbol;\n+    @NonNull private final String currencyThousandsSeparator;\n+\n+    private PaymentCongrats(final Builder builder) {\n+        congratsType = builder.congratsType;\n+        title = builder.title;\n+        subtitle = builder.subtitle;\n+        imageUrl = builder.imageUrl;\n+        help = builder.help;\n+        iconId = builder.iconId;\n+        receiptId = builder.receiptId;\n+        receiptIdList = builder.receiptIdList;\n+        exitActionPrimary = builder.exitActionPrimary;\n+        exitActionSecondary = builder.exitActionSecondary;\n+        statementDescription = builder.statementDescription;\n+        shouldShowPaymentMethod = builder.shouldShowPaymentMethod;\n+        shouldShowReceipt = builder.shouldShowReceipt;\n+        topFragment = builder.topFragment;\n+        bottomFragment = builder.bottomFragment;\n+        importantFragment = builder.importantFragment;\n+        currencyDecimalPlaces = builder.currencyDecimalPlaces;\n+        currencyDecimalSeparator = builder.currencyDecimalSeparator;\n+        currencySymbol = builder.currencySymbol;\n+        currencyThousandsSeparator = builder.currencyThousandsSeparator;\n+    }\n+\n+    @Override\n+    public int describeContents() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public void writeToParcel(Parcel dest, int flags) {\n+        dest.writeString(this.congratsType.type);\n+        dest.writeString(this.title);\n+        dest.writeString(this.subtitle);\n+        dest.writeString(this.imageUrl);\n+        dest.writeString(this.help);\n+        dest.writeInt(this.iconId);\n+        dest.writeString(this.receiptId);\n+        dest.writeStringList(this.receiptIdList);\n+        dest.writeParcelable(this.exitActionPrimary, flags);\n+        dest.writeParcelable(this.exitActionSecondary, flags);\n+        dest.writeString(this.statementDescription);\n+        dest.writeValue(this.shouldShowPaymentMethod);\n+        dest.writeValue(this.shouldShowReceipt);\n+        dest.writeParcelable(this.topFragment, flags);\n+        dest.writeParcelable(this.bottomFragment, flags);\n+        dest.writeParcelable(this.importantFragment, flags);\n+        dest.writeInt(this.currencyDecimalPlaces);\n+        dest.writeString(this.currencyDecimalSeparator);\n+        dest.writeString(this.currencySymbol);\n+        dest.writeString(this.currencyThousandsSeparator);\n+    }\n+\n+    protected PaymentCongrats(Parcel in) {\n+        this.congratsType = CongratsType.fromName(in.readString());\n+        this.title = in.readString();\n+        this.subtitle = in.readString();\n+        this.imageUrl = in.readString();\n+        this.help = in.readString();\n+        this.iconId = in.readInt();\n+        this.receiptId = in.readString();\n+        this.receiptIdList = in.createStringArrayList();\n+        this.exitActionPrimary = in.readParcelable(ExitAction.class.getClassLoader());\n+        this.exitActionSecondary = in.readParcelable(ExitAction.class.getClassLoader());\n+        this.statementDescription = in.readString();\n+        this.shouldShowPaymentMethod = (Boolean) in.readValue(Boolean.class.getClassLoader());\n+        this.shouldShowReceipt = (Boolean) in.readValue(Boolean.class.getClassLoader());\n+        this.topFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.bottomFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.importantFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.currencyDecimalPlaces = in.readInt();\n+        this.currencyDecimalSeparator = in.readString();\n+        this.currencySymbol = in.readString();\n+        this.currencyThousandsSeparator = in.readString();\n+    }\n+\n+    public static final Parcelable.Creator<PaymentCongrats> CREATOR = new Parcelable.Creator<PaymentCongrats>() {\n+        @Override\n+        public PaymentCongrats createFromParcel(Parcel source) {\n+            return new PaymentCongrats(source);\n+        }\n+\n+        @Override\n+        public PaymentCongrats[] newArray(int size) {\n+            return new PaymentCongrats[size];\n+        }\n+    };\n+\n+    @NotNull\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    @Nullable\n+    public String getSubtitle() {\n+        return subtitle;\n+    }\n+\n+    @NotNull\n+    public String getImageUrl() {\n+        return imageUrl;\n+    }\n+\n+    @Nullable\n+    public String getHelp() {\n+        return help;\n+    }\n+\n+    public String getReceipt() {\n+        return ListUtil.isNotEmpty(receiptIdList) ? receiptIdList.get(0) : receiptId;\n+    }\n+\n+    @Nullable\n+    public ExitAction getExitActionPrimary() {\n+        return exitActionPrimary;\n+    }\n+\n+    @Nullable\n+    public ExitAction getExitActionSecondary() {\n+        return exitActionSecondary;\n+    }\n+\n+    @Nullable\n+    public String getStatementDescription() {\n+        return statementDescription;\n+    }\n+\n+    @Nullable\n+    public Boolean getShouldShowPaymentMethod() {\n+        return shouldShowPaymentMethod;\n+    }\n+\n+    @Nullable\n+    public Boolean getShouldShowReceipt() {\n+        return shouldShowReceipt;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getTopFragment() {\n+        return topFragment;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getBottomFragment() {\n+        return bottomFragment;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getImportantFragment() {\n+        return importantFragment;\n+    }\n+\n+    public int getCurrencyDecimalPlaces() {\n+        return currencyDecimalPlaces;\n+    }\n+\n+    @NonNull\n+    public String getCurrencyDecimalSeparator() {\n+        return currencyDecimalSeparator;\n+    }\n+\n+    @NonNull\n+    public String getCurrencySymbol() {\n+        return currencySymbol;\n+    }\n+\n+    @NonNull\n+    public String getCurrencyThousandsSeparator() {\n+        return currencyThousandsSeparator;\n+    }\n+\n+    public Boolean hasTopFragment() {\n+        return getTopFragment() != null;\n+    }\n+\n+    public Boolean hasBottomFragment() {\n+        return getBottomFragment() != null;\n+    }\n+\n+    public Boolean hasImportantFragment() {\n+        return getImportantFragment() != null;\n+    }\n+\n+    public Boolean hasHelp() {\n+        return TextUtil.isNotEmpty(help);\n+    }\n+\n+    @NonNull\n+    public CongratsType getCongratsType() {\n+        return congratsType;\n+    }\n+\n+    public enum CongratsType {\n+        APPROVED(\"APPROVED\"),\n+        REJECTED(\"REJECTED\"),\n+        PENDING(\"PENDING\");\n+\n+        public final String type;\n+\n+        CongratsType(final String type) {\n+            this.type = type;\n+        }\n+\n+        public static CongratsType fromName(final String text) {\n+            for (final CongratsType s : CongratsType.values()) {\n+                if (s.type.equalsIgnoreCase(text)) {\n+                    return s;\n+                }\n+            }\n+            throw new IllegalStateException(\"Invalid decorator\");\n+        }\n+    }\n+\n+    public static class Builder {\n+        //Basic data\n+        /* default */ CongratsType congratsType;\n+        /* default */ String title;\n+        /* default */ String subtitle;\n+        /* default */ String imageUrl;\n+        /* default */ String help;\n+        /* default */ int iconId;\n+\n+        /* default */ String receiptId;\n+        /* default */ List<String> receiptIdList;\n+\n+        // Exit Buttons\n+        /* default */ ExitAction exitActionPrimary;\n+        /* default */ ExitAction exitActionSecondary;\n+\n+        /* default */ String statementDescription;\n+\n+        /* default */ boolean shouldShowPaymentMethod = false;\n+        /* default */ boolean shouldShowReceipt = false;\n+\n+        // custom views for integrators\n+        /* default */ ExternalFragment topFragment;\n+        /* default */ ExternalFragment bottomFragment;\n+        /* default */ ExternalFragment importantFragment;\n+\n+        /* default */ int currencyDecimalPlaces = 2;\n+        /* default */ String currencyDecimalSeparator = \",\";\n+        /* default */ String currencySymbol = \"$\";\n+        /* default */ String currencyThousandsSeparator = \".\";\n+\n+        public Builder() {}\n+\n+        public PaymentCongrats build() {\n+            if (exitActionPrimary == null && exitActionSecondary == null) {\n+                throw new IllegalStateException(\"At least one button should be provided for PaymentCongrats\");\n+            }\n+            return new PaymentCongrats(this);\n+        }\n+\n+        /**\n+         * Set ups the congrats type (green, red, orange)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a775e45f744ecb13bd8ffed13425248f7e05e451"}, "originalPosition": 300}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTc2NzQ1OnYy", "diffSide": "RIGHT", "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_congrats/PaymentCongrats.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzozOTowMlrOG1C0ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzozOTowMlrOG1C0ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI3Mzk1MA==", "bodyText": "y ac\u00e1 es shown", "url": "https://github.com/mercadopago/px-android/pull/2238#discussion_r458273950", "createdAt": "2020-07-21T17:39:02Z", "author": {"login": "nmanuelidesML"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_congrats/PaymentCongrats.java", "diffHunk": "@@ -0,0 +1,523 @@\n+package com.mercadopago.android.px.internal.features.payment_congrats;\n+\n+import android.os.Bundle;\n+import android.os.Parcel;\n+import android.os.Parcelable;\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n+import android.support.v4.app.Fragment;\n+import com.mercadopago.android.px.internal.util.ListUtil;\n+import com.mercadopago.android.px.internal.util.TextUtil;\n+import com.mercadopago.android.px.model.ExitAction;\n+import com.mercadopago.android.px.model.ExternalFragment;\n+import java.util.List;\n+import org.jetbrains.annotations.NotNull;\n+\n+public class PaymentCongrats implements Parcelable {\n+    //Basic data\n+    @NonNull private final CongratsType congratsType;\n+    @NonNull private final String title;\n+    @Nullable private final String subtitle;\n+    @NonNull private final String imageUrl;\n+    @Nullable private final String help;\n+    private final int iconId;\n+    @Nullable private final String statementDescription;\n+    private final boolean shouldShowPaymentMethod;\n+\n+    //Receipt data\n+    @Nullable private final String receiptId;\n+    @Nullable private final List<String> receiptIdList;\n+    private final boolean shouldShowReceipt;\n+\n+    // Exit Buttons\n+    @Nullable private final ExitAction exitActionPrimary;\n+    @Nullable private final ExitAction exitActionSecondary;\n+\n+\n+    // custom views for integrators\n+    @Nullable private final ExternalFragment topFragment;\n+    @Nullable private final ExternalFragment bottomFragment;\n+    @Nullable private final ExternalFragment importantFragment;\n+\n+    private final int currencyDecimalPlaces;\n+    @NonNull private final String currencyDecimalSeparator;\n+    @NonNull private final String currencySymbol;\n+    @NonNull private final String currencyThousandsSeparator;\n+\n+    private PaymentCongrats(final Builder builder) {\n+        congratsType = builder.congratsType;\n+        title = builder.title;\n+        subtitle = builder.subtitle;\n+        imageUrl = builder.imageUrl;\n+        help = builder.help;\n+        iconId = builder.iconId;\n+        receiptId = builder.receiptId;\n+        receiptIdList = builder.receiptIdList;\n+        exitActionPrimary = builder.exitActionPrimary;\n+        exitActionSecondary = builder.exitActionSecondary;\n+        statementDescription = builder.statementDescription;\n+        shouldShowPaymentMethod = builder.shouldShowPaymentMethod;\n+        shouldShowReceipt = builder.shouldShowReceipt;\n+        topFragment = builder.topFragment;\n+        bottomFragment = builder.bottomFragment;\n+        importantFragment = builder.importantFragment;\n+        currencyDecimalPlaces = builder.currencyDecimalPlaces;\n+        currencyDecimalSeparator = builder.currencyDecimalSeparator;\n+        currencySymbol = builder.currencySymbol;\n+        currencyThousandsSeparator = builder.currencyThousandsSeparator;\n+    }\n+\n+    @Override\n+    public int describeContents() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public void writeToParcel(Parcel dest, int flags) {\n+        dest.writeString(this.congratsType.type);\n+        dest.writeString(this.title);\n+        dest.writeString(this.subtitle);\n+        dest.writeString(this.imageUrl);\n+        dest.writeString(this.help);\n+        dest.writeInt(this.iconId);\n+        dest.writeString(this.receiptId);\n+        dest.writeStringList(this.receiptIdList);\n+        dest.writeParcelable(this.exitActionPrimary, flags);\n+        dest.writeParcelable(this.exitActionSecondary, flags);\n+        dest.writeString(this.statementDescription);\n+        dest.writeValue(this.shouldShowPaymentMethod);\n+        dest.writeValue(this.shouldShowReceipt);\n+        dest.writeParcelable(this.topFragment, flags);\n+        dest.writeParcelable(this.bottomFragment, flags);\n+        dest.writeParcelable(this.importantFragment, flags);\n+        dest.writeInt(this.currencyDecimalPlaces);\n+        dest.writeString(this.currencyDecimalSeparator);\n+        dest.writeString(this.currencySymbol);\n+        dest.writeString(this.currencyThousandsSeparator);\n+    }\n+\n+    protected PaymentCongrats(Parcel in) {\n+        this.congratsType = CongratsType.fromName(in.readString());\n+        this.title = in.readString();\n+        this.subtitle = in.readString();\n+        this.imageUrl = in.readString();\n+        this.help = in.readString();\n+        this.iconId = in.readInt();\n+        this.receiptId = in.readString();\n+        this.receiptIdList = in.createStringArrayList();\n+        this.exitActionPrimary = in.readParcelable(ExitAction.class.getClassLoader());\n+        this.exitActionSecondary = in.readParcelable(ExitAction.class.getClassLoader());\n+        this.statementDescription = in.readString();\n+        this.shouldShowPaymentMethod = (Boolean) in.readValue(Boolean.class.getClassLoader());\n+        this.shouldShowReceipt = (Boolean) in.readValue(Boolean.class.getClassLoader());\n+        this.topFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.bottomFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.importantFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.currencyDecimalPlaces = in.readInt();\n+        this.currencyDecimalSeparator = in.readString();\n+        this.currencySymbol = in.readString();\n+        this.currencyThousandsSeparator = in.readString();\n+    }\n+\n+    public static final Parcelable.Creator<PaymentCongrats> CREATOR = new Parcelable.Creator<PaymentCongrats>() {\n+        @Override\n+        public PaymentCongrats createFromParcel(Parcel source) {\n+            return new PaymentCongrats(source);\n+        }\n+\n+        @Override\n+        public PaymentCongrats[] newArray(int size) {\n+            return new PaymentCongrats[size];\n+        }\n+    };\n+\n+    @NotNull\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    @Nullable\n+    public String getSubtitle() {\n+        return subtitle;\n+    }\n+\n+    @NotNull\n+    public String getImageUrl() {\n+        return imageUrl;\n+    }\n+\n+    @Nullable\n+    public String getHelp() {\n+        return help;\n+    }\n+\n+    public String getReceipt() {\n+        return ListUtil.isNotEmpty(receiptIdList) ? receiptIdList.get(0) : receiptId;\n+    }\n+\n+    @Nullable\n+    public ExitAction getExitActionPrimary() {\n+        return exitActionPrimary;\n+    }\n+\n+    @Nullable\n+    public ExitAction getExitActionSecondary() {\n+        return exitActionSecondary;\n+    }\n+\n+    @Nullable\n+    public String getStatementDescription() {\n+        return statementDescription;\n+    }\n+\n+    @Nullable\n+    public Boolean getShouldShowPaymentMethod() {\n+        return shouldShowPaymentMethod;\n+    }\n+\n+    @Nullable\n+    public Boolean getShouldShowReceipt() {\n+        return shouldShowReceipt;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getTopFragment() {\n+        return topFragment;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getBottomFragment() {\n+        return bottomFragment;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getImportantFragment() {\n+        return importantFragment;\n+    }\n+\n+    public int getCurrencyDecimalPlaces() {\n+        return currencyDecimalPlaces;\n+    }\n+\n+    @NonNull\n+    public String getCurrencyDecimalSeparator() {\n+        return currencyDecimalSeparator;\n+    }\n+\n+    @NonNull\n+    public String getCurrencySymbol() {\n+        return currencySymbol;\n+    }\n+\n+    @NonNull\n+    public String getCurrencyThousandsSeparator() {\n+        return currencyThousandsSeparator;\n+    }\n+\n+    public Boolean hasTopFragment() {\n+        return getTopFragment() != null;\n+    }\n+\n+    public Boolean hasBottomFragment() {\n+        return getBottomFragment() != null;\n+    }\n+\n+    public Boolean hasImportantFragment() {\n+        return getImportantFragment() != null;\n+    }\n+\n+    public Boolean hasHelp() {\n+        return TextUtil.isNotEmpty(help);\n+    }\n+\n+    @NonNull\n+    public CongratsType getCongratsType() {\n+        return congratsType;\n+    }\n+\n+    public enum CongratsType {\n+        APPROVED(\"APPROVED\"),\n+        REJECTED(\"REJECTED\"),\n+        PENDING(\"PENDING\");\n+\n+        public final String type;\n+\n+        CongratsType(final String type) {\n+            this.type = type;\n+        }\n+\n+        public static CongratsType fromName(final String text) {\n+            for (final CongratsType s : CongratsType.values()) {\n+                if (s.type.equalsIgnoreCase(text)) {\n+                    return s;\n+                }\n+            }\n+            throw new IllegalStateException(\"Invalid decorator\");\n+        }\n+    }\n+\n+    public static class Builder {\n+        //Basic data\n+        /* default */ CongratsType congratsType;\n+        /* default */ String title;\n+        /* default */ String subtitle;\n+        /* default */ String imageUrl;\n+        /* default */ String help;\n+        /* default */ int iconId;\n+\n+        /* default */ String receiptId;\n+        /* default */ List<String> receiptIdList;\n+\n+        // Exit Buttons\n+        /* default */ ExitAction exitActionPrimary;\n+        /* default */ ExitAction exitActionSecondary;\n+\n+        /* default */ String statementDescription;\n+\n+        /* default */ boolean shouldShowPaymentMethod = false;\n+        /* default */ boolean shouldShowReceipt = false;\n+\n+        // custom views for integrators\n+        /* default */ ExternalFragment topFragment;\n+        /* default */ ExternalFragment bottomFragment;\n+        /* default */ ExternalFragment importantFragment;\n+\n+        /* default */ int currencyDecimalPlaces = 2;\n+        /* default */ String currencyDecimalSeparator = \",\";\n+        /* default */ String currencySymbol = \"$\";\n+        /* default */ String currencyThousandsSeparator = \".\";\n+\n+        public Builder() {}\n+\n+        public PaymentCongrats build() {\n+            if (exitActionPrimary == null && exitActionSecondary == null) {\n+                throw new IllegalStateException(\"At least one button should be provided for PaymentCongrats\");\n+            }\n+            return new PaymentCongrats(this);\n+        }\n+\n+        /**\n+         * Set ups the congrats type (green, red, orange)\n+         *\n+         * @param congratsType enum with type atribute\n+         * @return builder\n+         */\n+        public Builder withCongratsType(final CongratsType congratsType) {\n+            this.congratsType = congratsType;\n+            return this;\n+        }\n+\n+        /**\n+         * Title show in the congrats's header", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a775e45f744ecb13bd8ffed13425248f7e05e451"}, "originalPosition": 311}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTc2ODUxOnYy", "diffSide": "RIGHT", "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_congrats/PaymentCongrats.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzozOToyM1rOG1C1WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzozOToyM1rOG1C1WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI3NDEzNw==", "bodyText": "Sets up", "url": "https://github.com/mercadopago/px-android/pull/2238#discussion_r458274137", "createdAt": "2020-07-21T17:39:23Z", "author": {"login": "nmanuelidesML"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_congrats/PaymentCongrats.java", "diffHunk": "@@ -0,0 +1,523 @@\n+package com.mercadopago.android.px.internal.features.payment_congrats;\n+\n+import android.os.Bundle;\n+import android.os.Parcel;\n+import android.os.Parcelable;\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n+import android.support.v4.app.Fragment;\n+import com.mercadopago.android.px.internal.util.ListUtil;\n+import com.mercadopago.android.px.internal.util.TextUtil;\n+import com.mercadopago.android.px.model.ExitAction;\n+import com.mercadopago.android.px.model.ExternalFragment;\n+import java.util.List;\n+import org.jetbrains.annotations.NotNull;\n+\n+public class PaymentCongrats implements Parcelable {\n+    //Basic data\n+    @NonNull private final CongratsType congratsType;\n+    @NonNull private final String title;\n+    @Nullable private final String subtitle;\n+    @NonNull private final String imageUrl;\n+    @Nullable private final String help;\n+    private final int iconId;\n+    @Nullable private final String statementDescription;\n+    private final boolean shouldShowPaymentMethod;\n+\n+    //Receipt data\n+    @Nullable private final String receiptId;\n+    @Nullable private final List<String> receiptIdList;\n+    private final boolean shouldShowReceipt;\n+\n+    // Exit Buttons\n+    @Nullable private final ExitAction exitActionPrimary;\n+    @Nullable private final ExitAction exitActionSecondary;\n+\n+\n+    // custom views for integrators\n+    @Nullable private final ExternalFragment topFragment;\n+    @Nullable private final ExternalFragment bottomFragment;\n+    @Nullable private final ExternalFragment importantFragment;\n+\n+    private final int currencyDecimalPlaces;\n+    @NonNull private final String currencyDecimalSeparator;\n+    @NonNull private final String currencySymbol;\n+    @NonNull private final String currencyThousandsSeparator;\n+\n+    private PaymentCongrats(final Builder builder) {\n+        congratsType = builder.congratsType;\n+        title = builder.title;\n+        subtitle = builder.subtitle;\n+        imageUrl = builder.imageUrl;\n+        help = builder.help;\n+        iconId = builder.iconId;\n+        receiptId = builder.receiptId;\n+        receiptIdList = builder.receiptIdList;\n+        exitActionPrimary = builder.exitActionPrimary;\n+        exitActionSecondary = builder.exitActionSecondary;\n+        statementDescription = builder.statementDescription;\n+        shouldShowPaymentMethod = builder.shouldShowPaymentMethod;\n+        shouldShowReceipt = builder.shouldShowReceipt;\n+        topFragment = builder.topFragment;\n+        bottomFragment = builder.bottomFragment;\n+        importantFragment = builder.importantFragment;\n+        currencyDecimalPlaces = builder.currencyDecimalPlaces;\n+        currencyDecimalSeparator = builder.currencyDecimalSeparator;\n+        currencySymbol = builder.currencySymbol;\n+        currencyThousandsSeparator = builder.currencyThousandsSeparator;\n+    }\n+\n+    @Override\n+    public int describeContents() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public void writeToParcel(Parcel dest, int flags) {\n+        dest.writeString(this.congratsType.type);\n+        dest.writeString(this.title);\n+        dest.writeString(this.subtitle);\n+        dest.writeString(this.imageUrl);\n+        dest.writeString(this.help);\n+        dest.writeInt(this.iconId);\n+        dest.writeString(this.receiptId);\n+        dest.writeStringList(this.receiptIdList);\n+        dest.writeParcelable(this.exitActionPrimary, flags);\n+        dest.writeParcelable(this.exitActionSecondary, flags);\n+        dest.writeString(this.statementDescription);\n+        dest.writeValue(this.shouldShowPaymentMethod);\n+        dest.writeValue(this.shouldShowReceipt);\n+        dest.writeParcelable(this.topFragment, flags);\n+        dest.writeParcelable(this.bottomFragment, flags);\n+        dest.writeParcelable(this.importantFragment, flags);\n+        dest.writeInt(this.currencyDecimalPlaces);\n+        dest.writeString(this.currencyDecimalSeparator);\n+        dest.writeString(this.currencySymbol);\n+        dest.writeString(this.currencyThousandsSeparator);\n+    }\n+\n+    protected PaymentCongrats(Parcel in) {\n+        this.congratsType = CongratsType.fromName(in.readString());\n+        this.title = in.readString();\n+        this.subtitle = in.readString();\n+        this.imageUrl = in.readString();\n+        this.help = in.readString();\n+        this.iconId = in.readInt();\n+        this.receiptId = in.readString();\n+        this.receiptIdList = in.createStringArrayList();\n+        this.exitActionPrimary = in.readParcelable(ExitAction.class.getClassLoader());\n+        this.exitActionSecondary = in.readParcelable(ExitAction.class.getClassLoader());\n+        this.statementDescription = in.readString();\n+        this.shouldShowPaymentMethod = (Boolean) in.readValue(Boolean.class.getClassLoader());\n+        this.shouldShowReceipt = (Boolean) in.readValue(Boolean.class.getClassLoader());\n+        this.topFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.bottomFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.importantFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.currencyDecimalPlaces = in.readInt();\n+        this.currencyDecimalSeparator = in.readString();\n+        this.currencySymbol = in.readString();\n+        this.currencyThousandsSeparator = in.readString();\n+    }\n+\n+    public static final Parcelable.Creator<PaymentCongrats> CREATOR = new Parcelable.Creator<PaymentCongrats>() {\n+        @Override\n+        public PaymentCongrats createFromParcel(Parcel source) {\n+            return new PaymentCongrats(source);\n+        }\n+\n+        @Override\n+        public PaymentCongrats[] newArray(int size) {\n+            return new PaymentCongrats[size];\n+        }\n+    };\n+\n+    @NotNull\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    @Nullable\n+    public String getSubtitle() {\n+        return subtitle;\n+    }\n+\n+    @NotNull\n+    public String getImageUrl() {\n+        return imageUrl;\n+    }\n+\n+    @Nullable\n+    public String getHelp() {\n+        return help;\n+    }\n+\n+    public String getReceipt() {\n+        return ListUtil.isNotEmpty(receiptIdList) ? receiptIdList.get(0) : receiptId;\n+    }\n+\n+    @Nullable\n+    public ExitAction getExitActionPrimary() {\n+        return exitActionPrimary;\n+    }\n+\n+    @Nullable\n+    public ExitAction getExitActionSecondary() {\n+        return exitActionSecondary;\n+    }\n+\n+    @Nullable\n+    public String getStatementDescription() {\n+        return statementDescription;\n+    }\n+\n+    @Nullable\n+    public Boolean getShouldShowPaymentMethod() {\n+        return shouldShowPaymentMethod;\n+    }\n+\n+    @Nullable\n+    public Boolean getShouldShowReceipt() {\n+        return shouldShowReceipt;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getTopFragment() {\n+        return topFragment;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getBottomFragment() {\n+        return bottomFragment;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getImportantFragment() {\n+        return importantFragment;\n+    }\n+\n+    public int getCurrencyDecimalPlaces() {\n+        return currencyDecimalPlaces;\n+    }\n+\n+    @NonNull\n+    public String getCurrencyDecimalSeparator() {\n+        return currencyDecimalSeparator;\n+    }\n+\n+    @NonNull\n+    public String getCurrencySymbol() {\n+        return currencySymbol;\n+    }\n+\n+    @NonNull\n+    public String getCurrencyThousandsSeparator() {\n+        return currencyThousandsSeparator;\n+    }\n+\n+    public Boolean hasTopFragment() {\n+        return getTopFragment() != null;\n+    }\n+\n+    public Boolean hasBottomFragment() {\n+        return getBottomFragment() != null;\n+    }\n+\n+    public Boolean hasImportantFragment() {\n+        return getImportantFragment() != null;\n+    }\n+\n+    public Boolean hasHelp() {\n+        return TextUtil.isNotEmpty(help);\n+    }\n+\n+    @NonNull\n+    public CongratsType getCongratsType() {\n+        return congratsType;\n+    }\n+\n+    public enum CongratsType {\n+        APPROVED(\"APPROVED\"),\n+        REJECTED(\"REJECTED\"),\n+        PENDING(\"PENDING\");\n+\n+        public final String type;\n+\n+        CongratsType(final String type) {\n+            this.type = type;\n+        }\n+\n+        public static CongratsType fromName(final String text) {\n+            for (final CongratsType s : CongratsType.values()) {\n+                if (s.type.equalsIgnoreCase(text)) {\n+                    return s;\n+                }\n+            }\n+            throw new IllegalStateException(\"Invalid decorator\");\n+        }\n+    }\n+\n+    public static class Builder {\n+        //Basic data\n+        /* default */ CongratsType congratsType;\n+        /* default */ String title;\n+        /* default */ String subtitle;\n+        /* default */ String imageUrl;\n+        /* default */ String help;\n+        /* default */ int iconId;\n+\n+        /* default */ String receiptId;\n+        /* default */ List<String> receiptIdList;\n+\n+        // Exit Buttons\n+        /* default */ ExitAction exitActionPrimary;\n+        /* default */ ExitAction exitActionSecondary;\n+\n+        /* default */ String statementDescription;\n+\n+        /* default */ boolean shouldShowPaymentMethod = false;\n+        /* default */ boolean shouldShowReceipt = false;\n+\n+        // custom views for integrators\n+        /* default */ ExternalFragment topFragment;\n+        /* default */ ExternalFragment bottomFragment;\n+        /* default */ ExternalFragment importantFragment;\n+\n+        /* default */ int currencyDecimalPlaces = 2;\n+        /* default */ String currencyDecimalSeparator = \",\";\n+        /* default */ String currencySymbol = \"$\";\n+        /* default */ String currencyThousandsSeparator = \".\";\n+\n+        public Builder() {}\n+\n+        public PaymentCongrats build() {\n+            if (exitActionPrimary == null && exitActionSecondary == null) {\n+                throw new IllegalStateException(\"At least one button should be provided for PaymentCongrats\");\n+            }\n+            return new PaymentCongrats(this);\n+        }\n+\n+        /**\n+         * Set ups the congrats type (green, red, orange)\n+         *\n+         * @param congratsType enum with type atribute\n+         * @return builder\n+         */\n+        public Builder withCongratsType(final CongratsType congratsType) {\n+            this.congratsType = congratsType;\n+            return this;\n+        }\n+\n+        /**\n+         * Title show in the congrats's header\n+         *\n+         * @param title congrats's title\n+         * @return builder\n+         */\n+        public Builder withTitle(final String title) {\n+            this.title = title;\n+            return this;\n+        }\n+\n+        /**\n+         * When subtitle is set, then default subtitle will be replaced on the screen with it.\n+         *\n+         * @param subtitle subtitle text\n+         * @return builder\n+         */\n+        public Builder withSubtitle(final String subtitle) {\n+            this.subtitle = subtitle;\n+            return this;\n+        }\n+\n+        /**\n+         * Set ups the image in congarts's header", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a775e45f744ecb13bd8ffed13425248f7e05e451"}, "originalPosition": 333}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTc3MDgyOnYy", "diffSide": "RIGHT", "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_congrats/PaymentCongrats.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzozOTo1NlrOG1C2xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzozOTo1NlrOG1C2xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI3NDUwMA==", "bodyText": "\"is set to true\"", "url": "https://github.com/mercadopago/px-android/pull/2238#discussion_r458274500", "createdAt": "2020-07-21T17:39:56Z", "author": {"login": "nmanuelidesML"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_congrats/PaymentCongrats.java", "diffHunk": "@@ -0,0 +1,523 @@\n+package com.mercadopago.android.px.internal.features.payment_congrats;\n+\n+import android.os.Bundle;\n+import android.os.Parcel;\n+import android.os.Parcelable;\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n+import android.support.v4.app.Fragment;\n+import com.mercadopago.android.px.internal.util.ListUtil;\n+import com.mercadopago.android.px.internal.util.TextUtil;\n+import com.mercadopago.android.px.model.ExitAction;\n+import com.mercadopago.android.px.model.ExternalFragment;\n+import java.util.List;\n+import org.jetbrains.annotations.NotNull;\n+\n+public class PaymentCongrats implements Parcelable {\n+    //Basic data\n+    @NonNull private final CongratsType congratsType;\n+    @NonNull private final String title;\n+    @Nullable private final String subtitle;\n+    @NonNull private final String imageUrl;\n+    @Nullable private final String help;\n+    private final int iconId;\n+    @Nullable private final String statementDescription;\n+    private final boolean shouldShowPaymentMethod;\n+\n+    //Receipt data\n+    @Nullable private final String receiptId;\n+    @Nullable private final List<String> receiptIdList;\n+    private final boolean shouldShowReceipt;\n+\n+    // Exit Buttons\n+    @Nullable private final ExitAction exitActionPrimary;\n+    @Nullable private final ExitAction exitActionSecondary;\n+\n+\n+    // custom views for integrators\n+    @Nullable private final ExternalFragment topFragment;\n+    @Nullable private final ExternalFragment bottomFragment;\n+    @Nullable private final ExternalFragment importantFragment;\n+\n+    private final int currencyDecimalPlaces;\n+    @NonNull private final String currencyDecimalSeparator;\n+    @NonNull private final String currencySymbol;\n+    @NonNull private final String currencyThousandsSeparator;\n+\n+    private PaymentCongrats(final Builder builder) {\n+        congratsType = builder.congratsType;\n+        title = builder.title;\n+        subtitle = builder.subtitle;\n+        imageUrl = builder.imageUrl;\n+        help = builder.help;\n+        iconId = builder.iconId;\n+        receiptId = builder.receiptId;\n+        receiptIdList = builder.receiptIdList;\n+        exitActionPrimary = builder.exitActionPrimary;\n+        exitActionSecondary = builder.exitActionSecondary;\n+        statementDescription = builder.statementDescription;\n+        shouldShowPaymentMethod = builder.shouldShowPaymentMethod;\n+        shouldShowReceipt = builder.shouldShowReceipt;\n+        topFragment = builder.topFragment;\n+        bottomFragment = builder.bottomFragment;\n+        importantFragment = builder.importantFragment;\n+        currencyDecimalPlaces = builder.currencyDecimalPlaces;\n+        currencyDecimalSeparator = builder.currencyDecimalSeparator;\n+        currencySymbol = builder.currencySymbol;\n+        currencyThousandsSeparator = builder.currencyThousandsSeparator;\n+    }\n+\n+    @Override\n+    public int describeContents() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public void writeToParcel(Parcel dest, int flags) {\n+        dest.writeString(this.congratsType.type);\n+        dest.writeString(this.title);\n+        dest.writeString(this.subtitle);\n+        dest.writeString(this.imageUrl);\n+        dest.writeString(this.help);\n+        dest.writeInt(this.iconId);\n+        dest.writeString(this.receiptId);\n+        dest.writeStringList(this.receiptIdList);\n+        dest.writeParcelable(this.exitActionPrimary, flags);\n+        dest.writeParcelable(this.exitActionSecondary, flags);\n+        dest.writeString(this.statementDescription);\n+        dest.writeValue(this.shouldShowPaymentMethod);\n+        dest.writeValue(this.shouldShowReceipt);\n+        dest.writeParcelable(this.topFragment, flags);\n+        dest.writeParcelable(this.bottomFragment, flags);\n+        dest.writeParcelable(this.importantFragment, flags);\n+        dest.writeInt(this.currencyDecimalPlaces);\n+        dest.writeString(this.currencyDecimalSeparator);\n+        dest.writeString(this.currencySymbol);\n+        dest.writeString(this.currencyThousandsSeparator);\n+    }\n+\n+    protected PaymentCongrats(Parcel in) {\n+        this.congratsType = CongratsType.fromName(in.readString());\n+        this.title = in.readString();\n+        this.subtitle = in.readString();\n+        this.imageUrl = in.readString();\n+        this.help = in.readString();\n+        this.iconId = in.readInt();\n+        this.receiptId = in.readString();\n+        this.receiptIdList = in.createStringArrayList();\n+        this.exitActionPrimary = in.readParcelable(ExitAction.class.getClassLoader());\n+        this.exitActionSecondary = in.readParcelable(ExitAction.class.getClassLoader());\n+        this.statementDescription = in.readString();\n+        this.shouldShowPaymentMethod = (Boolean) in.readValue(Boolean.class.getClassLoader());\n+        this.shouldShowReceipt = (Boolean) in.readValue(Boolean.class.getClassLoader());\n+        this.topFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.bottomFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.importantFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.currencyDecimalPlaces = in.readInt();\n+        this.currencyDecimalSeparator = in.readString();\n+        this.currencySymbol = in.readString();\n+        this.currencyThousandsSeparator = in.readString();\n+    }\n+\n+    public static final Parcelable.Creator<PaymentCongrats> CREATOR = new Parcelable.Creator<PaymentCongrats>() {\n+        @Override\n+        public PaymentCongrats createFromParcel(Parcel source) {\n+            return new PaymentCongrats(source);\n+        }\n+\n+        @Override\n+        public PaymentCongrats[] newArray(int size) {\n+            return new PaymentCongrats[size];\n+        }\n+    };\n+\n+    @NotNull\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    @Nullable\n+    public String getSubtitle() {\n+        return subtitle;\n+    }\n+\n+    @NotNull\n+    public String getImageUrl() {\n+        return imageUrl;\n+    }\n+\n+    @Nullable\n+    public String getHelp() {\n+        return help;\n+    }\n+\n+    public String getReceipt() {\n+        return ListUtil.isNotEmpty(receiptIdList) ? receiptIdList.get(0) : receiptId;\n+    }\n+\n+    @Nullable\n+    public ExitAction getExitActionPrimary() {\n+        return exitActionPrimary;\n+    }\n+\n+    @Nullable\n+    public ExitAction getExitActionSecondary() {\n+        return exitActionSecondary;\n+    }\n+\n+    @Nullable\n+    public String getStatementDescription() {\n+        return statementDescription;\n+    }\n+\n+    @Nullable\n+    public Boolean getShouldShowPaymentMethod() {\n+        return shouldShowPaymentMethod;\n+    }\n+\n+    @Nullable\n+    public Boolean getShouldShowReceipt() {\n+        return shouldShowReceipt;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getTopFragment() {\n+        return topFragment;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getBottomFragment() {\n+        return bottomFragment;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getImportantFragment() {\n+        return importantFragment;\n+    }\n+\n+    public int getCurrencyDecimalPlaces() {\n+        return currencyDecimalPlaces;\n+    }\n+\n+    @NonNull\n+    public String getCurrencyDecimalSeparator() {\n+        return currencyDecimalSeparator;\n+    }\n+\n+    @NonNull\n+    public String getCurrencySymbol() {\n+        return currencySymbol;\n+    }\n+\n+    @NonNull\n+    public String getCurrencyThousandsSeparator() {\n+        return currencyThousandsSeparator;\n+    }\n+\n+    public Boolean hasTopFragment() {\n+        return getTopFragment() != null;\n+    }\n+\n+    public Boolean hasBottomFragment() {\n+        return getBottomFragment() != null;\n+    }\n+\n+    public Boolean hasImportantFragment() {\n+        return getImportantFragment() != null;\n+    }\n+\n+    public Boolean hasHelp() {\n+        return TextUtil.isNotEmpty(help);\n+    }\n+\n+    @NonNull\n+    public CongratsType getCongratsType() {\n+        return congratsType;\n+    }\n+\n+    public enum CongratsType {\n+        APPROVED(\"APPROVED\"),\n+        REJECTED(\"REJECTED\"),\n+        PENDING(\"PENDING\");\n+\n+        public final String type;\n+\n+        CongratsType(final String type) {\n+            this.type = type;\n+        }\n+\n+        public static CongratsType fromName(final String text) {\n+            for (final CongratsType s : CongratsType.values()) {\n+                if (s.type.equalsIgnoreCase(text)) {\n+                    return s;\n+                }\n+            }\n+            throw new IllegalStateException(\"Invalid decorator\");\n+        }\n+    }\n+\n+    public static class Builder {\n+        //Basic data\n+        /* default */ CongratsType congratsType;\n+        /* default */ String title;\n+        /* default */ String subtitle;\n+        /* default */ String imageUrl;\n+        /* default */ String help;\n+        /* default */ int iconId;\n+\n+        /* default */ String receiptId;\n+        /* default */ List<String> receiptIdList;\n+\n+        // Exit Buttons\n+        /* default */ ExitAction exitActionPrimary;\n+        /* default */ ExitAction exitActionSecondary;\n+\n+        /* default */ String statementDescription;\n+\n+        /* default */ boolean shouldShowPaymentMethod = false;\n+        /* default */ boolean shouldShowReceipt = false;\n+\n+        // custom views for integrators\n+        /* default */ ExternalFragment topFragment;\n+        /* default */ ExternalFragment bottomFragment;\n+        /* default */ ExternalFragment importantFragment;\n+\n+        /* default */ int currencyDecimalPlaces = 2;\n+        /* default */ String currencyDecimalSeparator = \",\";\n+        /* default */ String currencySymbol = \"$\";\n+        /* default */ String currencyThousandsSeparator = \".\";\n+\n+        public Builder() {}\n+\n+        public PaymentCongrats build() {\n+            if (exitActionPrimary == null && exitActionSecondary == null) {\n+                throw new IllegalStateException(\"At least one button should be provided for PaymentCongrats\");\n+            }\n+            return new PaymentCongrats(this);\n+        }\n+\n+        /**\n+         * Set ups the congrats type (green, red, orange)\n+         *\n+         * @param congratsType enum with type atribute\n+         * @return builder\n+         */\n+        public Builder withCongratsType(final CongratsType congratsType) {\n+            this.congratsType = congratsType;\n+            return this;\n+        }\n+\n+        /**\n+         * Title show in the congrats's header\n+         *\n+         * @param title congrats's title\n+         * @return builder\n+         */\n+        public Builder withTitle(final String title) {\n+            this.title = title;\n+            return this;\n+        }\n+\n+        /**\n+         * When subtitle is set, then default subtitle will be replaced on the screen with it.\n+         *\n+         * @param subtitle subtitle text\n+         * @return builder\n+         */\n+        public Builder withSubtitle(final String subtitle) {\n+            this.subtitle = subtitle;\n+            return this;\n+        }\n+\n+        /**\n+         * Set ups the image in congarts's header\n+         *\n+         * @param imageUrl url for the header's image\n+         * @return builder\n+         */\n+        public Builder withImageUrl(final String imageUrl) {\n+            this.imageUrl = imageUrl;\n+            return this;\n+        }\n+\n+        /**\n+         * If value is set, then receipt view will appear.\n+         *\n+         * @param receiptId the receipt id to be shown.\n+         * @return builder\n+         */\n+        public Builder withReceipId(final String receiptId) {\n+            this.receiptId = receiptId;\n+            return this;\n+        }\n+\n+        /**\n+         * @param receiptIdList The list of receipt ids\n+         * @return builder\n+         */\n+        public Builder withReceiptIdList(final List<String> receiptIdList) {\n+            this.receiptIdList = receiptIdList;\n+            return this;\n+        }\n+\n+        /**\n+         * if help is set, then a small box with help instructions will appear\n+         *\n+         * @param help a help message\n+         * @return builder\n+         */\n+        public Builder withHelp(final String help) {\n+            this.help = help;\n+            return this;\n+        }\n+\n+        /**\n+         *\n+         * @param iconId header's icon\n+         * @return builder\n+         */\n+        public Builder withIconId(final int iconId) {\n+            this.iconId = iconId;\n+            return this;\n+        }\n+\n+        /**\n+         * if Exit action is set, then a big primary button will appear and the click action will trigger a resCode that\n+         * will be the same of the Exit action added.\n+         *\n+         * @param label text show in primary action\n+         * @param resCode resCode in exit case\n+         * @return builder\n+         */\n+        public Builder withExitActionPrimary(final String label, final int resCode) {\n+            this.exitActionPrimary = new ExitAction(label, resCode);\n+            return this;\n+        }\n+\n+        /**\n+         * if Exit action is set, then a big secondary button will appear and the click action will trigger a resCode that\n+         * will be the same of the Exit action added.\n+         *\n+         * @param label text show in secondary action\n+         * @param resCode resCode in exit case\n+         * @return builder\n+         */\n+        public Builder withExitActionSecondary(final String label, final int resCode) {\n+            this.exitActionSecondary = new ExitAction(label, resCode);\n+            return this;\n+        }\n+\n+        /**\n+         * If \"shouldShowPaymentMethod\" is set on true and the payment method is credit card then the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a775e45f744ecb13bd8ffed13425248f7e05e451"}, "originalPosition": 411}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDA2MzIzOnYy", "diffSide": "RIGHT", "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_congrats/PaymentCongrats.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTowMToyMlrOG1Fwxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDo1NjozM1rOG1JdhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyMjExOA==", "bodyText": "Me gustar\u00eda si no es muy complicado desarmarlo en m\u00e1s modelos, tipo que lo de currency quede todo en un objeto que tambien sea parte de la firma o algo asi, para que no quede una sola clase con tantos atributos y tenga mas contexto a la hora de armala, me lo imagino m\u00e1s asi\n\nheader\nbody\nfooter\ncurrency\n\nal menos con el currency que parece que queda muy suelto dentro de este modelo", "url": "https://github.com/mercadopago/px-android/pull/2238#discussion_r458322118", "createdAt": "2020-07-21T19:01:22Z", "author": {"login": "cgaggino"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_congrats/PaymentCongrats.java", "diffHunk": "@@ -0,0 +1,523 @@\n+package com.mercadopago.android.px.internal.features.payment_congrats;\n+\n+import android.os.Bundle;\n+import android.os.Parcel;\n+import android.os.Parcelable;\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n+import android.support.v4.app.Fragment;\n+import com.mercadopago.android.px.internal.util.ListUtil;\n+import com.mercadopago.android.px.internal.util.TextUtil;\n+import com.mercadopago.android.px.model.ExitAction;\n+import com.mercadopago.android.px.model.ExternalFragment;\n+import java.util.List;\n+import org.jetbrains.annotations.NotNull;\n+\n+public class PaymentCongrats implements Parcelable {\n+    //Basic data\n+    @NonNull private final CongratsType congratsType;\n+    @NonNull private final String title;\n+    @Nullable private final String subtitle;\n+    @NonNull private final String imageUrl;\n+    @Nullable private final String help;\n+    private final int iconId;\n+    @Nullable private final String statementDescription;\n+    private final boolean shouldShowPaymentMethod;\n+\n+    //Receipt data\n+    @Nullable private final String receiptId;\n+    @Nullable private final List<String> receiptIdList;\n+    private final boolean shouldShowReceipt;\n+\n+    // Exit Buttons\n+    @Nullable private final ExitAction exitActionPrimary;\n+    @Nullable private final ExitAction exitActionSecondary;\n+\n+\n+    // custom views for integrators\n+    @Nullable private final ExternalFragment topFragment;\n+    @Nullable private final ExternalFragment bottomFragment;\n+    @Nullable private final ExternalFragment importantFragment;\n+\n+    private final int currencyDecimalPlaces;\n+    @NonNull private final String currencyDecimalSeparator;\n+    @NonNull private final String currencySymbol;\n+    @NonNull private final String currencyThousandsSeparator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9017310e807dddfb436388b05025a456f5c7bcb"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM3MDQwOA==", "bodyText": "Ah\u00ed estuve analizando la propuesta, y la idea que se me ocurre es usar directamente el objeto Currency que ya existe, dejar este currency como atributo del PaymentCongrats, pero no en el Builder, a nivel Builder hab\u00edamos pensado tener valores por defecto en el currency con la configuraci\u00f3n de pesos, por ejemplo, para facilitar el uso de la PaymentCongrats desde afuera, dejando todos estos datos como opcionales.\nEntonces, se me ocurre, a nivel Builder seguir exponiendo m\u00e9todos c\u00f3mo \"withCurrencyDecimalSeparator()\" para que los integradores puedan reemplazar los valores por defecto si quieren y, al mismo tiempo, en el m\u00e9todo \"build()\" de manera interna crear un objeto \"Currency\" y que el PaymentCongrats directamente tenga el objeto Currency c\u00f3mo atributo.\nQue te parece esa idea?", "url": "https://github.com/mercadopago/px-android/pull/2238#discussion_r458370408", "createdAt": "2020-07-21T20:32:44Z", "author": {"login": "mmunozpatinomeli"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_congrats/PaymentCongrats.java", "diffHunk": "@@ -0,0 +1,523 @@\n+package com.mercadopago.android.px.internal.features.payment_congrats;\n+\n+import android.os.Bundle;\n+import android.os.Parcel;\n+import android.os.Parcelable;\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n+import android.support.v4.app.Fragment;\n+import com.mercadopago.android.px.internal.util.ListUtil;\n+import com.mercadopago.android.px.internal.util.TextUtil;\n+import com.mercadopago.android.px.model.ExitAction;\n+import com.mercadopago.android.px.model.ExternalFragment;\n+import java.util.List;\n+import org.jetbrains.annotations.NotNull;\n+\n+public class PaymentCongrats implements Parcelable {\n+    //Basic data\n+    @NonNull private final CongratsType congratsType;\n+    @NonNull private final String title;\n+    @Nullable private final String subtitle;\n+    @NonNull private final String imageUrl;\n+    @Nullable private final String help;\n+    private final int iconId;\n+    @Nullable private final String statementDescription;\n+    private final boolean shouldShowPaymentMethod;\n+\n+    //Receipt data\n+    @Nullable private final String receiptId;\n+    @Nullable private final List<String> receiptIdList;\n+    private final boolean shouldShowReceipt;\n+\n+    // Exit Buttons\n+    @Nullable private final ExitAction exitActionPrimary;\n+    @Nullable private final ExitAction exitActionSecondary;\n+\n+\n+    // custom views for integrators\n+    @Nullable private final ExternalFragment topFragment;\n+    @Nullable private final ExternalFragment bottomFragment;\n+    @Nullable private final ExternalFragment importantFragment;\n+\n+    private final int currencyDecimalPlaces;\n+    @NonNull private final String currencyDecimalSeparator;\n+    @NonNull private final String currencySymbol;\n+    @NonNull private final String currencyThousandsSeparator;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyMjExOA=="}, "originalCommit": {"oid": "c9017310e807dddfb436388b05025a456f5c7bcb"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM4MjcyNA==", "bodyText": "Me parece bien, usaria otra clase que no sea Currency igual porque es un dto de nuestra api, para que el d\u00eda de ma\u00f1ana no haya que hacer ese desacopalmiento tambien", "url": "https://github.com/mercadopago/px-android/pull/2238#discussion_r458382724", "createdAt": "2020-07-21T20:56:33Z", "author": {"login": "cgaggino"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_congrats/PaymentCongrats.java", "diffHunk": "@@ -0,0 +1,523 @@\n+package com.mercadopago.android.px.internal.features.payment_congrats;\n+\n+import android.os.Bundle;\n+import android.os.Parcel;\n+import android.os.Parcelable;\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n+import android.support.v4.app.Fragment;\n+import com.mercadopago.android.px.internal.util.ListUtil;\n+import com.mercadopago.android.px.internal.util.TextUtil;\n+import com.mercadopago.android.px.model.ExitAction;\n+import com.mercadopago.android.px.model.ExternalFragment;\n+import java.util.List;\n+import org.jetbrains.annotations.NotNull;\n+\n+public class PaymentCongrats implements Parcelable {\n+    //Basic data\n+    @NonNull private final CongratsType congratsType;\n+    @NonNull private final String title;\n+    @Nullable private final String subtitle;\n+    @NonNull private final String imageUrl;\n+    @Nullable private final String help;\n+    private final int iconId;\n+    @Nullable private final String statementDescription;\n+    private final boolean shouldShowPaymentMethod;\n+\n+    //Receipt data\n+    @Nullable private final String receiptId;\n+    @Nullable private final List<String> receiptIdList;\n+    private final boolean shouldShowReceipt;\n+\n+    // Exit Buttons\n+    @Nullable private final ExitAction exitActionPrimary;\n+    @Nullable private final ExitAction exitActionSecondary;\n+\n+\n+    // custom views for integrators\n+    @Nullable private final ExternalFragment topFragment;\n+    @Nullable private final ExternalFragment bottomFragment;\n+    @Nullable private final ExternalFragment importantFragment;\n+\n+    private final int currencyDecimalPlaces;\n+    @NonNull private final String currencyDecimalSeparator;\n+    @NonNull private final String currencySymbol;\n+    @NonNull private final String currencyThousandsSeparator;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyMjExOA=="}, "originalCommit": {"oid": "c9017310e807dddfb436388b05025a456f5c7bcb"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDA2Mzg4OnYy", "diffSide": "RIGHT", "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_congrats/PaymentCongrats.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTowMTozNlrOG1FxOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDo1ODo0MFrOG1meIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyMjIzMw==", "bodyText": "Creo que esto no va a hacer falta", "url": "https://github.com/mercadopago/px-android/pull/2238#discussion_r458322233", "createdAt": "2020-07-21T19:01:36Z", "author": {"login": "cgaggino"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_congrats/PaymentCongrats.java", "diffHunk": "@@ -0,0 +1,523 @@\n+package com.mercadopago.android.px.internal.features.payment_congrats;\n+\n+import android.os.Bundle;\n+import android.os.Parcel;\n+import android.os.Parcelable;\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n+import android.support.v4.app.Fragment;\n+import com.mercadopago.android.px.internal.util.ListUtil;\n+import com.mercadopago.android.px.internal.util.TextUtil;\n+import com.mercadopago.android.px.model.ExitAction;\n+import com.mercadopago.android.px.model.ExternalFragment;\n+import java.util.List;\n+import org.jetbrains.annotations.NotNull;\n+\n+public class PaymentCongrats implements Parcelable {\n+    //Basic data\n+    @NonNull private final CongratsType congratsType;\n+    @NonNull private final String title;\n+    @Nullable private final String subtitle;\n+    @NonNull private final String imageUrl;\n+    @Nullable private final String help;\n+    private final int iconId;\n+    @Nullable private final String statementDescription;\n+    private final boolean shouldShowPaymentMethod;\n+\n+    //Receipt data\n+    @Nullable private final String receiptId;\n+    @Nullable private final List<String> receiptIdList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9017310e807dddfb436388b05025a456f5c7bcb"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM1NjIxNA==", "bodyText": "Eso lo mantuve por lo que el BusinessPaymentResultMapper, usa el m\u00e9todo para obtener el receipt, por eso entend\u00ed que se usar\u00eda en principio...", "url": "https://github.com/mercadopago/px-android/pull/2238#discussion_r458356214", "createdAt": "2020-07-21T20:05:55Z", "author": {"login": "mmunozpatinomeli"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_congrats/PaymentCongrats.java", "diffHunk": "@@ -0,0 +1,523 @@\n+package com.mercadopago.android.px.internal.features.payment_congrats;\n+\n+import android.os.Bundle;\n+import android.os.Parcel;\n+import android.os.Parcelable;\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n+import android.support.v4.app.Fragment;\n+import com.mercadopago.android.px.internal.util.ListUtil;\n+import com.mercadopago.android.px.internal.util.TextUtil;\n+import com.mercadopago.android.px.model.ExitAction;\n+import com.mercadopago.android.px.model.ExternalFragment;\n+import java.util.List;\n+import org.jetbrains.annotations.NotNull;\n+\n+public class PaymentCongrats implements Parcelable {\n+    //Basic data\n+    @NonNull private final CongratsType congratsType;\n+    @NonNull private final String title;\n+    @Nullable private final String subtitle;\n+    @NonNull private final String imageUrl;\n+    @Nullable private final String help;\n+    private final int iconId;\n+    @Nullable private final String statementDescription;\n+    private final boolean shouldShowPaymentMethod;\n+\n+    //Receipt data\n+    @Nullable private final String receiptId;\n+    @Nullable private final List<String> receiptIdList;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyMjIzMw=="}, "originalCommit": {"oid": "c9017310e807dddfb436388b05025a456f5c7bcb"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc1MDQ1Mw==", "bodyText": "Por eso del mapper lo mantuve, si crees o ven que no se usa ya realmente lo sacamos pero actualmente el mapper lo usa en el body..", "url": "https://github.com/mercadopago/px-android/pull/2238#discussion_r458750453", "createdAt": "2020-07-22T12:21:45Z", "author": {"login": "mmunozpatinomeli"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_congrats/PaymentCongrats.java", "diffHunk": "@@ -0,0 +1,523 @@\n+package com.mercadopago.android.px.internal.features.payment_congrats;\n+\n+import android.os.Bundle;\n+import android.os.Parcel;\n+import android.os.Parcelable;\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n+import android.support.v4.app.Fragment;\n+import com.mercadopago.android.px.internal.util.ListUtil;\n+import com.mercadopago.android.px.internal.util.TextUtil;\n+import com.mercadopago.android.px.model.ExitAction;\n+import com.mercadopago.android.px.model.ExternalFragment;\n+import java.util.List;\n+import org.jetbrains.annotations.NotNull;\n+\n+public class PaymentCongrats implements Parcelable {\n+    //Basic data\n+    @NonNull private final CongratsType congratsType;\n+    @NonNull private final String title;\n+    @Nullable private final String subtitle;\n+    @NonNull private final String imageUrl;\n+    @Nullable private final String help;\n+    private final int iconId;\n+    @Nullable private final String statementDescription;\n+    private final boolean shouldShowPaymentMethod;\n+\n+    //Receipt data\n+    @Nullable private final String receiptId;\n+    @Nullable private final List<String> receiptIdList;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyMjIzMw=="}, "originalCommit": {"oid": "c9017310e807dddfb436388b05025a456f5c7bcb"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg1MzQ4Mg==", "bodyText": "No veo donde el mapper usa la lista de receipt ids, usa un solo receipt id, eso seria responsabilidad del integrador pasar ese unico receipt id, me parece", "url": "https://github.com/mercadopago/px-android/pull/2238#discussion_r458853482", "createdAt": "2020-07-22T14:52:26Z", "author": {"login": "cgaggino"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_congrats/PaymentCongrats.java", "diffHunk": "@@ -0,0 +1,523 @@\n+package com.mercadopago.android.px.internal.features.payment_congrats;\n+\n+import android.os.Bundle;\n+import android.os.Parcel;\n+import android.os.Parcelable;\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n+import android.support.v4.app.Fragment;\n+import com.mercadopago.android.px.internal.util.ListUtil;\n+import com.mercadopago.android.px.internal.util.TextUtil;\n+import com.mercadopago.android.px.model.ExitAction;\n+import com.mercadopago.android.px.model.ExternalFragment;\n+import java.util.List;\n+import org.jetbrains.annotations.NotNull;\n+\n+public class PaymentCongrats implements Parcelable {\n+    //Basic data\n+    @NonNull private final CongratsType congratsType;\n+    @NonNull private final String title;\n+    @Nullable private final String subtitle;\n+    @NonNull private final String imageUrl;\n+    @Nullable private final String help;\n+    private final int iconId;\n+    @Nullable private final String statementDescription;\n+    private final boolean shouldShowPaymentMethod;\n+\n+    //Receipt data\n+    @Nullable private final String receiptId;\n+    @Nullable private final List<String> receiptIdList;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyMjIzMw=="}, "originalCommit": {"oid": "c9017310e807dddfb436388b05025a456f5c7bcb"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg1ODAxOA==", "bodyText": "ahh hablas s\u00f3lo del list... sisis ahora lo borro", "url": "https://github.com/mercadopago/px-android/pull/2238#discussion_r458858018", "createdAt": "2020-07-22T14:58:40Z", "author": {"login": "mmunozpatinomeli"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_congrats/PaymentCongrats.java", "diffHunk": "@@ -0,0 +1,523 @@\n+package com.mercadopago.android.px.internal.features.payment_congrats;\n+\n+import android.os.Bundle;\n+import android.os.Parcel;\n+import android.os.Parcelable;\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n+import android.support.v4.app.Fragment;\n+import com.mercadopago.android.px.internal.util.ListUtil;\n+import com.mercadopago.android.px.internal.util.TextUtil;\n+import com.mercadopago.android.px.model.ExitAction;\n+import com.mercadopago.android.px.model.ExternalFragment;\n+import java.util.List;\n+import org.jetbrains.annotations.NotNull;\n+\n+public class PaymentCongrats implements Parcelable {\n+    //Basic data\n+    @NonNull private final CongratsType congratsType;\n+    @NonNull private final String title;\n+    @Nullable private final String subtitle;\n+    @NonNull private final String imageUrl;\n+    @Nullable private final String help;\n+    private final int iconId;\n+    @Nullable private final String statementDescription;\n+    private final boolean shouldShowPaymentMethod;\n+\n+    //Receipt data\n+    @Nullable private final String receiptId;\n+    @Nullable private final List<String> receiptIdList;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyMjIzMw=="}, "originalCommit": {"oid": "c9017310e807dddfb436388b05025a456f5c7bcb"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDA3Mjc1OnYy", "diffSide": "RIGHT", "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_congrats/PaymentCongrats.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTowNDoxMVrOG1F2vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTowNDoxMVrOG1F2vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyMzY0NA==", "bodyText": "No hace falta ponerles una property para esto, podemos usar el name del enum\nquedar\u00eda s.name().equals.... etc y a la hora de escribir el parcel tambien usas el name, ejmplo, congratsType.name()\ntratar\u00eda tambien de no definir variables de un solo caracter, aunque sean de un scope acotado como un for, minimamente value en vez de S creo que quedaria mas entendible a simple vista", "url": "https://github.com/mercadopago/px-android/pull/2238#discussion_r458323644", "createdAt": "2020-07-21T19:04:11Z", "author": {"login": "cgaggino"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_congrats/PaymentCongrats.java", "diffHunk": "@@ -0,0 +1,523 @@\n+package com.mercadopago.android.px.internal.features.payment_congrats;\n+\n+import android.os.Bundle;\n+import android.os.Parcel;\n+import android.os.Parcelable;\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n+import android.support.v4.app.Fragment;\n+import com.mercadopago.android.px.internal.util.ListUtil;\n+import com.mercadopago.android.px.internal.util.TextUtil;\n+import com.mercadopago.android.px.model.ExitAction;\n+import com.mercadopago.android.px.model.ExternalFragment;\n+import java.util.List;\n+import org.jetbrains.annotations.NotNull;\n+\n+public class PaymentCongrats implements Parcelable {\n+    //Basic data\n+    @NonNull private final CongratsType congratsType;\n+    @NonNull private final String title;\n+    @Nullable private final String subtitle;\n+    @NonNull private final String imageUrl;\n+    @Nullable private final String help;\n+    private final int iconId;\n+    @Nullable private final String statementDescription;\n+    private final boolean shouldShowPaymentMethod;\n+\n+    //Receipt data\n+    @Nullable private final String receiptId;\n+    @Nullable private final List<String> receiptIdList;\n+    private final boolean shouldShowReceipt;\n+\n+    // Exit Buttons\n+    @Nullable private final ExitAction exitActionPrimary;\n+    @Nullable private final ExitAction exitActionSecondary;\n+\n+\n+    // custom views for integrators\n+    @Nullable private final ExternalFragment topFragment;\n+    @Nullable private final ExternalFragment bottomFragment;\n+    @Nullable private final ExternalFragment importantFragment;\n+\n+    private final int currencyDecimalPlaces;\n+    @NonNull private final String currencyDecimalSeparator;\n+    @NonNull private final String currencySymbol;\n+    @NonNull private final String currencyThousandsSeparator;\n+\n+    private PaymentCongrats(final Builder builder) {\n+        congratsType = builder.congratsType;\n+        title = builder.title;\n+        subtitle = builder.subtitle;\n+        imageUrl = builder.imageUrl;\n+        help = builder.help;\n+        iconId = builder.iconId;\n+        receiptId = builder.receiptId;\n+        receiptIdList = builder.receiptIdList;\n+        exitActionPrimary = builder.exitActionPrimary;\n+        exitActionSecondary = builder.exitActionSecondary;\n+        statementDescription = builder.statementDescription;\n+        shouldShowPaymentMethod = builder.shouldShowPaymentMethod;\n+        shouldShowReceipt = builder.shouldShowReceipt;\n+        topFragment = builder.topFragment;\n+        bottomFragment = builder.bottomFragment;\n+        importantFragment = builder.importantFragment;\n+        currencyDecimalPlaces = builder.currencyDecimalPlaces;\n+        currencyDecimalSeparator = builder.currencyDecimalSeparator;\n+        currencySymbol = builder.currencySymbol;\n+        currencyThousandsSeparator = builder.currencyThousandsSeparator;\n+    }\n+\n+    @Override\n+    public int describeContents() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public void writeToParcel(Parcel dest, int flags) {\n+        dest.writeString(this.congratsType.type);\n+        dest.writeString(this.title);\n+        dest.writeString(this.subtitle);\n+        dest.writeString(this.imageUrl);\n+        dest.writeString(this.help);\n+        dest.writeInt(this.iconId);\n+        dest.writeString(this.receiptId);\n+        dest.writeStringList(this.receiptIdList);\n+        dest.writeParcelable(this.exitActionPrimary, flags);\n+        dest.writeParcelable(this.exitActionSecondary, flags);\n+        dest.writeString(this.statementDescription);\n+        dest.writeValue(this.shouldShowPaymentMethod);\n+        dest.writeValue(this.shouldShowReceipt);\n+        dest.writeParcelable(this.topFragment, flags);\n+        dest.writeParcelable(this.bottomFragment, flags);\n+        dest.writeParcelable(this.importantFragment, flags);\n+        dest.writeInt(this.currencyDecimalPlaces);\n+        dest.writeString(this.currencyDecimalSeparator);\n+        dest.writeString(this.currencySymbol);\n+        dest.writeString(this.currencyThousandsSeparator);\n+    }\n+\n+    protected PaymentCongrats(Parcel in) {\n+        this.congratsType = CongratsType.fromName(in.readString());\n+        this.title = in.readString();\n+        this.subtitle = in.readString();\n+        this.imageUrl = in.readString();\n+        this.help = in.readString();\n+        this.iconId = in.readInt();\n+        this.receiptId = in.readString();\n+        this.receiptIdList = in.createStringArrayList();\n+        this.exitActionPrimary = in.readParcelable(ExitAction.class.getClassLoader());\n+        this.exitActionSecondary = in.readParcelable(ExitAction.class.getClassLoader());\n+        this.statementDescription = in.readString();\n+        this.shouldShowPaymentMethod = (Boolean) in.readValue(Boolean.class.getClassLoader());\n+        this.shouldShowReceipt = (Boolean) in.readValue(Boolean.class.getClassLoader());\n+        this.topFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.bottomFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.importantFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.currencyDecimalPlaces = in.readInt();\n+        this.currencyDecimalSeparator = in.readString();\n+        this.currencySymbol = in.readString();\n+        this.currencyThousandsSeparator = in.readString();\n+    }\n+\n+    public static final Parcelable.Creator<PaymentCongrats> CREATOR = new Parcelable.Creator<PaymentCongrats>() {\n+        @Override\n+        public PaymentCongrats createFromParcel(Parcel source) {\n+            return new PaymentCongrats(source);\n+        }\n+\n+        @Override\n+        public PaymentCongrats[] newArray(int size) {\n+            return new PaymentCongrats[size];\n+        }\n+    };\n+\n+    @NotNull\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    @Nullable\n+    public String getSubtitle() {\n+        return subtitle;\n+    }\n+\n+    @NotNull\n+    public String getImageUrl() {\n+        return imageUrl;\n+    }\n+\n+    @Nullable\n+    public String getHelp() {\n+        return help;\n+    }\n+\n+    public String getReceipt() {\n+        return ListUtil.isNotEmpty(receiptIdList) ? receiptIdList.get(0) : receiptId;\n+    }\n+\n+    @Nullable\n+    public ExitAction getExitActionPrimary() {\n+        return exitActionPrimary;\n+    }\n+\n+    @Nullable\n+    public ExitAction getExitActionSecondary() {\n+        return exitActionSecondary;\n+    }\n+\n+    @Nullable\n+    public String getStatementDescription() {\n+        return statementDescription;\n+    }\n+\n+    @Nullable\n+    public Boolean getShouldShowPaymentMethod() {\n+        return shouldShowPaymentMethod;\n+    }\n+\n+    @Nullable\n+    public Boolean getShouldShowReceipt() {\n+        return shouldShowReceipt;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getTopFragment() {\n+        return topFragment;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getBottomFragment() {\n+        return bottomFragment;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getImportantFragment() {\n+        return importantFragment;\n+    }\n+\n+    public int getCurrencyDecimalPlaces() {\n+        return currencyDecimalPlaces;\n+    }\n+\n+    @NonNull\n+    public String getCurrencyDecimalSeparator() {\n+        return currencyDecimalSeparator;\n+    }\n+\n+    @NonNull\n+    public String getCurrencySymbol() {\n+        return currencySymbol;\n+    }\n+\n+    @NonNull\n+    public String getCurrencyThousandsSeparator() {\n+        return currencyThousandsSeparator;\n+    }\n+\n+    public Boolean hasTopFragment() {\n+        return getTopFragment() != null;\n+    }\n+\n+    public Boolean hasBottomFragment() {\n+        return getBottomFragment() != null;\n+    }\n+\n+    public Boolean hasImportantFragment() {\n+        return getImportantFragment() != null;\n+    }\n+\n+    public Boolean hasHelp() {\n+        return TextUtil.isNotEmpty(help);\n+    }\n+\n+    @NonNull\n+    public CongratsType getCongratsType() {\n+        return congratsType;\n+    }\n+\n+    public enum CongratsType {\n+        APPROVED(\"APPROVED\"),\n+        REJECTED(\"REJECTED\"),\n+        PENDING(\"PENDING\");\n+\n+        public final String type;\n+\n+        CongratsType(final String type) {\n+            this.type = type;\n+        }\n+\n+        public static CongratsType fromName(final String text) {\n+            for (final CongratsType s : CongratsType.values()) {\n+                if (s.type.equalsIgnoreCase(text)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9017310e807dddfb436388b05025a456f5c7bcb"}, "originalPosition": 251}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDA3NDM4OnYy", "diffSide": "RIGHT", "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_congrats/PaymentCongrats.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTowNDozM1rOG1F3oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDowMDowM1rOG1HqZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyMzg3Mg==", "bodyText": "Esto ser\u00eda invalid congrats type, no?", "url": "https://github.com/mercadopago/px-android/pull/2238#discussion_r458323872", "createdAt": "2020-07-21T19:04:33Z", "author": {"login": "cgaggino"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_congrats/PaymentCongrats.java", "diffHunk": "@@ -0,0 +1,523 @@\n+package com.mercadopago.android.px.internal.features.payment_congrats;\n+\n+import android.os.Bundle;\n+import android.os.Parcel;\n+import android.os.Parcelable;\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n+import android.support.v4.app.Fragment;\n+import com.mercadopago.android.px.internal.util.ListUtil;\n+import com.mercadopago.android.px.internal.util.TextUtil;\n+import com.mercadopago.android.px.model.ExitAction;\n+import com.mercadopago.android.px.model.ExternalFragment;\n+import java.util.List;\n+import org.jetbrains.annotations.NotNull;\n+\n+public class PaymentCongrats implements Parcelable {\n+    //Basic data\n+    @NonNull private final CongratsType congratsType;\n+    @NonNull private final String title;\n+    @Nullable private final String subtitle;\n+    @NonNull private final String imageUrl;\n+    @Nullable private final String help;\n+    private final int iconId;\n+    @Nullable private final String statementDescription;\n+    private final boolean shouldShowPaymentMethod;\n+\n+    //Receipt data\n+    @Nullable private final String receiptId;\n+    @Nullable private final List<String> receiptIdList;\n+    private final boolean shouldShowReceipt;\n+\n+    // Exit Buttons\n+    @Nullable private final ExitAction exitActionPrimary;\n+    @Nullable private final ExitAction exitActionSecondary;\n+\n+\n+    // custom views for integrators\n+    @Nullable private final ExternalFragment topFragment;\n+    @Nullable private final ExternalFragment bottomFragment;\n+    @Nullable private final ExternalFragment importantFragment;\n+\n+    private final int currencyDecimalPlaces;\n+    @NonNull private final String currencyDecimalSeparator;\n+    @NonNull private final String currencySymbol;\n+    @NonNull private final String currencyThousandsSeparator;\n+\n+    private PaymentCongrats(final Builder builder) {\n+        congratsType = builder.congratsType;\n+        title = builder.title;\n+        subtitle = builder.subtitle;\n+        imageUrl = builder.imageUrl;\n+        help = builder.help;\n+        iconId = builder.iconId;\n+        receiptId = builder.receiptId;\n+        receiptIdList = builder.receiptIdList;\n+        exitActionPrimary = builder.exitActionPrimary;\n+        exitActionSecondary = builder.exitActionSecondary;\n+        statementDescription = builder.statementDescription;\n+        shouldShowPaymentMethod = builder.shouldShowPaymentMethod;\n+        shouldShowReceipt = builder.shouldShowReceipt;\n+        topFragment = builder.topFragment;\n+        bottomFragment = builder.bottomFragment;\n+        importantFragment = builder.importantFragment;\n+        currencyDecimalPlaces = builder.currencyDecimalPlaces;\n+        currencyDecimalSeparator = builder.currencyDecimalSeparator;\n+        currencySymbol = builder.currencySymbol;\n+        currencyThousandsSeparator = builder.currencyThousandsSeparator;\n+    }\n+\n+    @Override\n+    public int describeContents() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public void writeToParcel(Parcel dest, int flags) {\n+        dest.writeString(this.congratsType.type);\n+        dest.writeString(this.title);\n+        dest.writeString(this.subtitle);\n+        dest.writeString(this.imageUrl);\n+        dest.writeString(this.help);\n+        dest.writeInt(this.iconId);\n+        dest.writeString(this.receiptId);\n+        dest.writeStringList(this.receiptIdList);\n+        dest.writeParcelable(this.exitActionPrimary, flags);\n+        dest.writeParcelable(this.exitActionSecondary, flags);\n+        dest.writeString(this.statementDescription);\n+        dest.writeValue(this.shouldShowPaymentMethod);\n+        dest.writeValue(this.shouldShowReceipt);\n+        dest.writeParcelable(this.topFragment, flags);\n+        dest.writeParcelable(this.bottomFragment, flags);\n+        dest.writeParcelable(this.importantFragment, flags);\n+        dest.writeInt(this.currencyDecimalPlaces);\n+        dest.writeString(this.currencyDecimalSeparator);\n+        dest.writeString(this.currencySymbol);\n+        dest.writeString(this.currencyThousandsSeparator);\n+    }\n+\n+    protected PaymentCongrats(Parcel in) {\n+        this.congratsType = CongratsType.fromName(in.readString());\n+        this.title = in.readString();\n+        this.subtitle = in.readString();\n+        this.imageUrl = in.readString();\n+        this.help = in.readString();\n+        this.iconId = in.readInt();\n+        this.receiptId = in.readString();\n+        this.receiptIdList = in.createStringArrayList();\n+        this.exitActionPrimary = in.readParcelable(ExitAction.class.getClassLoader());\n+        this.exitActionSecondary = in.readParcelable(ExitAction.class.getClassLoader());\n+        this.statementDescription = in.readString();\n+        this.shouldShowPaymentMethod = (Boolean) in.readValue(Boolean.class.getClassLoader());\n+        this.shouldShowReceipt = (Boolean) in.readValue(Boolean.class.getClassLoader());\n+        this.topFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.bottomFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.importantFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.currencyDecimalPlaces = in.readInt();\n+        this.currencyDecimalSeparator = in.readString();\n+        this.currencySymbol = in.readString();\n+        this.currencyThousandsSeparator = in.readString();\n+    }\n+\n+    public static final Parcelable.Creator<PaymentCongrats> CREATOR = new Parcelable.Creator<PaymentCongrats>() {\n+        @Override\n+        public PaymentCongrats createFromParcel(Parcel source) {\n+            return new PaymentCongrats(source);\n+        }\n+\n+        @Override\n+        public PaymentCongrats[] newArray(int size) {\n+            return new PaymentCongrats[size];\n+        }\n+    };\n+\n+    @NotNull\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    @Nullable\n+    public String getSubtitle() {\n+        return subtitle;\n+    }\n+\n+    @NotNull\n+    public String getImageUrl() {\n+        return imageUrl;\n+    }\n+\n+    @Nullable\n+    public String getHelp() {\n+        return help;\n+    }\n+\n+    public String getReceipt() {\n+        return ListUtil.isNotEmpty(receiptIdList) ? receiptIdList.get(0) : receiptId;\n+    }\n+\n+    @Nullable\n+    public ExitAction getExitActionPrimary() {\n+        return exitActionPrimary;\n+    }\n+\n+    @Nullable\n+    public ExitAction getExitActionSecondary() {\n+        return exitActionSecondary;\n+    }\n+\n+    @Nullable\n+    public String getStatementDescription() {\n+        return statementDescription;\n+    }\n+\n+    @Nullable\n+    public Boolean getShouldShowPaymentMethod() {\n+        return shouldShowPaymentMethod;\n+    }\n+\n+    @Nullable\n+    public Boolean getShouldShowReceipt() {\n+        return shouldShowReceipt;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getTopFragment() {\n+        return topFragment;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getBottomFragment() {\n+        return bottomFragment;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getImportantFragment() {\n+        return importantFragment;\n+    }\n+\n+    public int getCurrencyDecimalPlaces() {\n+        return currencyDecimalPlaces;\n+    }\n+\n+    @NonNull\n+    public String getCurrencyDecimalSeparator() {\n+        return currencyDecimalSeparator;\n+    }\n+\n+    @NonNull\n+    public String getCurrencySymbol() {\n+        return currencySymbol;\n+    }\n+\n+    @NonNull\n+    public String getCurrencyThousandsSeparator() {\n+        return currencyThousandsSeparator;\n+    }\n+\n+    public Boolean hasTopFragment() {\n+        return getTopFragment() != null;\n+    }\n+\n+    public Boolean hasBottomFragment() {\n+        return getBottomFragment() != null;\n+    }\n+\n+    public Boolean hasImportantFragment() {\n+        return getImportantFragment() != null;\n+    }\n+\n+    public Boolean hasHelp() {\n+        return TextUtil.isNotEmpty(help);\n+    }\n+\n+    @NonNull\n+    public CongratsType getCongratsType() {\n+        return congratsType;\n+    }\n+\n+    public enum CongratsType {\n+        APPROVED(\"APPROVED\"),\n+        REJECTED(\"REJECTED\"),\n+        PENDING(\"PENDING\");\n+\n+        public final String type;\n+\n+        CongratsType(final String type) {\n+            this.type = type;\n+        }\n+\n+        public static CongratsType fromName(final String text) {\n+            for (final CongratsType s : CongratsType.values()) {\n+                if (s.type.equalsIgnoreCase(text)) {\n+                    return s;\n+                }\n+            }\n+            throw new IllegalStateException(\"Invalid decorator\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9017310e807dddfb436388b05025a456f5c7bcb"}, "originalPosition": 255}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM1MzI1Mw==", "bodyText": "s\u00ed, error de tipeo! Ya lo arregl\u00e9!", "url": "https://github.com/mercadopago/px-android/pull/2238#discussion_r458353253", "createdAt": "2020-07-21T20:00:03Z", "author": {"login": "mmunozpatinomeli"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_congrats/PaymentCongrats.java", "diffHunk": "@@ -0,0 +1,523 @@\n+package com.mercadopago.android.px.internal.features.payment_congrats;\n+\n+import android.os.Bundle;\n+import android.os.Parcel;\n+import android.os.Parcelable;\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n+import android.support.v4.app.Fragment;\n+import com.mercadopago.android.px.internal.util.ListUtil;\n+import com.mercadopago.android.px.internal.util.TextUtil;\n+import com.mercadopago.android.px.model.ExitAction;\n+import com.mercadopago.android.px.model.ExternalFragment;\n+import java.util.List;\n+import org.jetbrains.annotations.NotNull;\n+\n+public class PaymentCongrats implements Parcelable {\n+    //Basic data\n+    @NonNull private final CongratsType congratsType;\n+    @NonNull private final String title;\n+    @Nullable private final String subtitle;\n+    @NonNull private final String imageUrl;\n+    @Nullable private final String help;\n+    private final int iconId;\n+    @Nullable private final String statementDescription;\n+    private final boolean shouldShowPaymentMethod;\n+\n+    //Receipt data\n+    @Nullable private final String receiptId;\n+    @Nullable private final List<String> receiptIdList;\n+    private final boolean shouldShowReceipt;\n+\n+    // Exit Buttons\n+    @Nullable private final ExitAction exitActionPrimary;\n+    @Nullable private final ExitAction exitActionSecondary;\n+\n+\n+    // custom views for integrators\n+    @Nullable private final ExternalFragment topFragment;\n+    @Nullable private final ExternalFragment bottomFragment;\n+    @Nullable private final ExternalFragment importantFragment;\n+\n+    private final int currencyDecimalPlaces;\n+    @NonNull private final String currencyDecimalSeparator;\n+    @NonNull private final String currencySymbol;\n+    @NonNull private final String currencyThousandsSeparator;\n+\n+    private PaymentCongrats(final Builder builder) {\n+        congratsType = builder.congratsType;\n+        title = builder.title;\n+        subtitle = builder.subtitle;\n+        imageUrl = builder.imageUrl;\n+        help = builder.help;\n+        iconId = builder.iconId;\n+        receiptId = builder.receiptId;\n+        receiptIdList = builder.receiptIdList;\n+        exitActionPrimary = builder.exitActionPrimary;\n+        exitActionSecondary = builder.exitActionSecondary;\n+        statementDescription = builder.statementDescription;\n+        shouldShowPaymentMethod = builder.shouldShowPaymentMethod;\n+        shouldShowReceipt = builder.shouldShowReceipt;\n+        topFragment = builder.topFragment;\n+        bottomFragment = builder.bottomFragment;\n+        importantFragment = builder.importantFragment;\n+        currencyDecimalPlaces = builder.currencyDecimalPlaces;\n+        currencyDecimalSeparator = builder.currencyDecimalSeparator;\n+        currencySymbol = builder.currencySymbol;\n+        currencyThousandsSeparator = builder.currencyThousandsSeparator;\n+    }\n+\n+    @Override\n+    public int describeContents() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public void writeToParcel(Parcel dest, int flags) {\n+        dest.writeString(this.congratsType.type);\n+        dest.writeString(this.title);\n+        dest.writeString(this.subtitle);\n+        dest.writeString(this.imageUrl);\n+        dest.writeString(this.help);\n+        dest.writeInt(this.iconId);\n+        dest.writeString(this.receiptId);\n+        dest.writeStringList(this.receiptIdList);\n+        dest.writeParcelable(this.exitActionPrimary, flags);\n+        dest.writeParcelable(this.exitActionSecondary, flags);\n+        dest.writeString(this.statementDescription);\n+        dest.writeValue(this.shouldShowPaymentMethod);\n+        dest.writeValue(this.shouldShowReceipt);\n+        dest.writeParcelable(this.topFragment, flags);\n+        dest.writeParcelable(this.bottomFragment, flags);\n+        dest.writeParcelable(this.importantFragment, flags);\n+        dest.writeInt(this.currencyDecimalPlaces);\n+        dest.writeString(this.currencyDecimalSeparator);\n+        dest.writeString(this.currencySymbol);\n+        dest.writeString(this.currencyThousandsSeparator);\n+    }\n+\n+    protected PaymentCongrats(Parcel in) {\n+        this.congratsType = CongratsType.fromName(in.readString());\n+        this.title = in.readString();\n+        this.subtitle = in.readString();\n+        this.imageUrl = in.readString();\n+        this.help = in.readString();\n+        this.iconId = in.readInt();\n+        this.receiptId = in.readString();\n+        this.receiptIdList = in.createStringArrayList();\n+        this.exitActionPrimary = in.readParcelable(ExitAction.class.getClassLoader());\n+        this.exitActionSecondary = in.readParcelable(ExitAction.class.getClassLoader());\n+        this.statementDescription = in.readString();\n+        this.shouldShowPaymentMethod = (Boolean) in.readValue(Boolean.class.getClassLoader());\n+        this.shouldShowReceipt = (Boolean) in.readValue(Boolean.class.getClassLoader());\n+        this.topFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.bottomFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.importantFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.currencyDecimalPlaces = in.readInt();\n+        this.currencyDecimalSeparator = in.readString();\n+        this.currencySymbol = in.readString();\n+        this.currencyThousandsSeparator = in.readString();\n+    }\n+\n+    public static final Parcelable.Creator<PaymentCongrats> CREATOR = new Parcelable.Creator<PaymentCongrats>() {\n+        @Override\n+        public PaymentCongrats createFromParcel(Parcel source) {\n+            return new PaymentCongrats(source);\n+        }\n+\n+        @Override\n+        public PaymentCongrats[] newArray(int size) {\n+            return new PaymentCongrats[size];\n+        }\n+    };\n+\n+    @NotNull\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    @Nullable\n+    public String getSubtitle() {\n+        return subtitle;\n+    }\n+\n+    @NotNull\n+    public String getImageUrl() {\n+        return imageUrl;\n+    }\n+\n+    @Nullable\n+    public String getHelp() {\n+        return help;\n+    }\n+\n+    public String getReceipt() {\n+        return ListUtil.isNotEmpty(receiptIdList) ? receiptIdList.get(0) : receiptId;\n+    }\n+\n+    @Nullable\n+    public ExitAction getExitActionPrimary() {\n+        return exitActionPrimary;\n+    }\n+\n+    @Nullable\n+    public ExitAction getExitActionSecondary() {\n+        return exitActionSecondary;\n+    }\n+\n+    @Nullable\n+    public String getStatementDescription() {\n+        return statementDescription;\n+    }\n+\n+    @Nullable\n+    public Boolean getShouldShowPaymentMethod() {\n+        return shouldShowPaymentMethod;\n+    }\n+\n+    @Nullable\n+    public Boolean getShouldShowReceipt() {\n+        return shouldShowReceipt;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getTopFragment() {\n+        return topFragment;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getBottomFragment() {\n+        return bottomFragment;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getImportantFragment() {\n+        return importantFragment;\n+    }\n+\n+    public int getCurrencyDecimalPlaces() {\n+        return currencyDecimalPlaces;\n+    }\n+\n+    @NonNull\n+    public String getCurrencyDecimalSeparator() {\n+        return currencyDecimalSeparator;\n+    }\n+\n+    @NonNull\n+    public String getCurrencySymbol() {\n+        return currencySymbol;\n+    }\n+\n+    @NonNull\n+    public String getCurrencyThousandsSeparator() {\n+        return currencyThousandsSeparator;\n+    }\n+\n+    public Boolean hasTopFragment() {\n+        return getTopFragment() != null;\n+    }\n+\n+    public Boolean hasBottomFragment() {\n+        return getBottomFragment() != null;\n+    }\n+\n+    public Boolean hasImportantFragment() {\n+        return getImportantFragment() != null;\n+    }\n+\n+    public Boolean hasHelp() {\n+        return TextUtil.isNotEmpty(help);\n+    }\n+\n+    @NonNull\n+    public CongratsType getCongratsType() {\n+        return congratsType;\n+    }\n+\n+    public enum CongratsType {\n+        APPROVED(\"APPROVED\"),\n+        REJECTED(\"REJECTED\"),\n+        PENDING(\"PENDING\");\n+\n+        public final String type;\n+\n+        CongratsType(final String type) {\n+            this.type = type;\n+        }\n+\n+        public static CongratsType fromName(final String text) {\n+            for (final CongratsType s : CongratsType.values()) {\n+                if (s.type.equalsIgnoreCase(text)) {\n+                    return s;\n+                }\n+            }\n+            throw new IllegalStateException(\"Invalid decorator\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyMzg3Mg=="}, "originalCommit": {"oid": "c9017310e807dddfb436388b05025a456f5c7bcb"}, "originalPosition": 255}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDQ0NTY1OnYy", "diffSide": "RIGHT", "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_congrats/PaymentCongrats.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDo1ODowNlrOG1Jgjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDo1Nzo0MVrOG1mbZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM4MzUwMw==", "bodyText": "qued\u00f3 de m\u00e1s el contructor", "url": "https://github.com/mercadopago/px-android/pull/2238#discussion_r458383503", "createdAt": "2020-07-21T20:58:06Z", "author": {"login": "cgaggino"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_congrats/PaymentCongrats.java", "diffHunk": "@@ -0,0 +1,520 @@\n+package com.mercadopago.android.px.internal.features.payment_congrats;\n+\n+import android.os.Bundle;\n+import android.os.Parcel;\n+import android.os.Parcelable;\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n+import android.support.v4.app.Fragment;\n+import com.mercadopago.android.px.internal.util.ListUtil;\n+import com.mercadopago.android.px.internal.util.TextUtil;\n+import com.mercadopago.android.px.model.ExitAction;\n+import com.mercadopago.android.px.model.ExternalFragment;\n+import java.util.List;\n+import org.jetbrains.annotations.NotNull;\n+\n+public class PaymentCongrats implements Parcelable {\n+    //Basic data\n+    @NonNull private final CongratsType congratsType;\n+    @NonNull private final String title;\n+    @Nullable private final String subtitle;\n+    @NonNull private final String imageUrl;\n+    @Nullable private final String help;\n+    private final int iconId;\n+    @Nullable private final String statementDescription;\n+    private final boolean shouldShowPaymentMethod;\n+\n+    //Receipt data\n+    @Nullable private final String receiptId;\n+    @Nullable private final List<String> receiptIdList;\n+    private final boolean shouldShowReceipt;\n+\n+    // Exit Buttons\n+    @Nullable private final ExitAction exitActionPrimary;\n+    @Nullable private final ExitAction exitActionSecondary;\n+\n+\n+    // custom views for integrators\n+    @Nullable private final ExternalFragment topFragment;\n+    @Nullable private final ExternalFragment bottomFragment;\n+    @Nullable private final ExternalFragment importantFragment;\n+\n+    private final int currencyDecimalPlaces;\n+    @NonNull private final String currencyDecimalSeparator;\n+    @NonNull private final String currencySymbol;\n+    @NonNull private final String currencyThousandsSeparator;\n+\n+    private PaymentCongrats(final Builder builder) {\n+        congratsType = builder.congratsType;\n+        title = builder.title;\n+        subtitle = builder.subtitle;\n+        imageUrl = builder.imageUrl;\n+        help = builder.help;\n+        iconId = builder.iconId;\n+        receiptId = builder.receiptId;\n+        receiptIdList = builder.receiptIdList;\n+        exitActionPrimary = builder.exitActionPrimary;\n+        exitActionSecondary = builder.exitActionSecondary;\n+        statementDescription = builder.statementDescription;\n+        shouldShowPaymentMethod = builder.shouldShowPaymentMethod;\n+        shouldShowReceipt = builder.shouldShowReceipt;\n+        topFragment = builder.topFragment;\n+        bottomFragment = builder.bottomFragment;\n+        importantFragment = builder.importantFragment;\n+        currencyDecimalPlaces = builder.currencyDecimalPlaces;\n+        currencyDecimalSeparator = builder.currencyDecimalSeparator;\n+        currencySymbol = builder.currencySymbol;\n+        currencyThousandsSeparator = builder.currencyThousandsSeparator;\n+    }\n+\n+    @Override\n+    public int describeContents() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public void writeToParcel(Parcel dest, int flags) {\n+        dest.writeString(this.congratsType.name());\n+        dest.writeString(this.title);\n+        dest.writeString(this.subtitle);\n+        dest.writeString(this.imageUrl);\n+        dest.writeString(this.help);\n+        dest.writeInt(this.iconId);\n+        dest.writeString(this.receiptId);\n+        dest.writeStringList(this.receiptIdList);\n+        dest.writeParcelable(this.exitActionPrimary, flags);\n+        dest.writeParcelable(this.exitActionSecondary, flags);\n+        dest.writeString(this.statementDescription);\n+        dest.writeValue(this.shouldShowPaymentMethod);\n+        dest.writeValue(this.shouldShowReceipt);\n+        dest.writeParcelable(this.topFragment, flags);\n+        dest.writeParcelable(this.bottomFragment, flags);\n+        dest.writeParcelable(this.importantFragment, flags);\n+        dest.writeInt(this.currencyDecimalPlaces);\n+        dest.writeString(this.currencyDecimalSeparator);\n+        dest.writeString(this.currencySymbol);\n+        dest.writeString(this.currencyThousandsSeparator);\n+    }\n+\n+    protected PaymentCongrats(Parcel in) {\n+        this.congratsType = CongratsType.fromName(in.readString());\n+        this.title = in.readString();\n+        this.subtitle = in.readString();\n+        this.imageUrl = in.readString();\n+        this.help = in.readString();\n+        this.iconId = in.readInt();\n+        this.receiptId = in.readString();\n+        this.receiptIdList = in.createStringArrayList();\n+        this.exitActionPrimary = in.readParcelable(ExitAction.class.getClassLoader());\n+        this.exitActionSecondary = in.readParcelable(ExitAction.class.getClassLoader());\n+        this.statementDescription = in.readString();\n+        this.shouldShowPaymentMethod = (Boolean) in.readValue(Boolean.class.getClassLoader());\n+        this.shouldShowReceipt = (Boolean) in.readValue(Boolean.class.getClassLoader());\n+        this.topFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.bottomFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.importantFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.currencyDecimalPlaces = in.readInt();\n+        this.currencyDecimalSeparator = in.readString();\n+        this.currencySymbol = in.readString();\n+        this.currencyThousandsSeparator = in.readString();\n+    }\n+\n+    public static final Parcelable.Creator<PaymentCongrats> CREATOR = new Parcelable.Creator<PaymentCongrats>() {\n+        @Override\n+        public PaymentCongrats createFromParcel(Parcel source) {\n+            return new PaymentCongrats(source);\n+        }\n+\n+        @Override\n+        public PaymentCongrats[] newArray(int size) {\n+            return new PaymentCongrats[size];\n+        }\n+    };\n+\n+    @NotNull\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    @Nullable\n+    public String getSubtitle() {\n+        return subtitle;\n+    }\n+\n+    @NotNull\n+    public String getImageUrl() {\n+        return imageUrl;\n+    }\n+\n+    @Nullable\n+    public String getHelp() {\n+        return help;\n+    }\n+\n+    public String getReceipt() {\n+        return ListUtil.isNotEmpty(receiptIdList) ? receiptIdList.get(0) : receiptId;\n+    }\n+\n+    @Nullable\n+    public ExitAction getExitActionPrimary() {\n+        return exitActionPrimary;\n+    }\n+\n+    @Nullable\n+    public ExitAction getExitActionSecondary() {\n+        return exitActionSecondary;\n+    }\n+\n+    @Nullable\n+    public String getStatementDescription() {\n+        return statementDescription;\n+    }\n+\n+    @Nullable\n+    public Boolean getShouldShowPaymentMethod() {\n+        return shouldShowPaymentMethod;\n+    }\n+\n+    @Nullable\n+    public Boolean getShouldShowReceipt() {\n+        return shouldShowReceipt;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getTopFragment() {\n+        return topFragment;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getBottomFragment() {\n+        return bottomFragment;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getImportantFragment() {\n+        return importantFragment;\n+    }\n+\n+    public int getCurrencyDecimalPlaces() {\n+        return currencyDecimalPlaces;\n+    }\n+\n+    @NonNull\n+    public String getCurrencyDecimalSeparator() {\n+        return currencyDecimalSeparator;\n+    }\n+\n+    @NonNull\n+    public String getCurrencySymbol() {\n+        return currencySymbol;\n+    }\n+\n+    @NonNull\n+    public String getCurrencyThousandsSeparator() {\n+        return currencyThousandsSeparator;\n+    }\n+\n+    public Boolean hasTopFragment() {\n+        return getTopFragment() != null;\n+    }\n+\n+    public Boolean hasBottomFragment() {\n+        return getBottomFragment() != null;\n+    }\n+\n+    public Boolean hasImportantFragment() {\n+        return getImportantFragment() != null;\n+    }\n+\n+    public Boolean hasHelp() {\n+        return TextUtil.isNotEmpty(help);\n+    }\n+\n+    @NonNull\n+    public CongratsType getCongratsType() {\n+        return congratsType;\n+    }\n+\n+    public enum CongratsType {\n+        APPROVED(\"APPROVED\"),\n+        REJECTED(\"REJECTED\"),\n+        PENDING(\"PENDING\");\n+\n+        CongratsType(final String type) { }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd784b8491f3ff69e37366487b24f707abe6e5f8"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc1MDAxNw==", "bodyText": "me lo exige el IDE :/", "url": "https://github.com/mercadopago/px-android/pull/2238#discussion_r458750017", "createdAt": "2020-07-22T12:20:52Z", "author": {"login": "mmunozpatinomeli"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_congrats/PaymentCongrats.java", "diffHunk": "@@ -0,0 +1,520 @@\n+package com.mercadopago.android.px.internal.features.payment_congrats;\n+\n+import android.os.Bundle;\n+import android.os.Parcel;\n+import android.os.Parcelable;\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n+import android.support.v4.app.Fragment;\n+import com.mercadopago.android.px.internal.util.ListUtil;\n+import com.mercadopago.android.px.internal.util.TextUtil;\n+import com.mercadopago.android.px.model.ExitAction;\n+import com.mercadopago.android.px.model.ExternalFragment;\n+import java.util.List;\n+import org.jetbrains.annotations.NotNull;\n+\n+public class PaymentCongrats implements Parcelable {\n+    //Basic data\n+    @NonNull private final CongratsType congratsType;\n+    @NonNull private final String title;\n+    @Nullable private final String subtitle;\n+    @NonNull private final String imageUrl;\n+    @Nullable private final String help;\n+    private final int iconId;\n+    @Nullable private final String statementDescription;\n+    private final boolean shouldShowPaymentMethod;\n+\n+    //Receipt data\n+    @Nullable private final String receiptId;\n+    @Nullable private final List<String> receiptIdList;\n+    private final boolean shouldShowReceipt;\n+\n+    // Exit Buttons\n+    @Nullable private final ExitAction exitActionPrimary;\n+    @Nullable private final ExitAction exitActionSecondary;\n+\n+\n+    // custom views for integrators\n+    @Nullable private final ExternalFragment topFragment;\n+    @Nullable private final ExternalFragment bottomFragment;\n+    @Nullable private final ExternalFragment importantFragment;\n+\n+    private final int currencyDecimalPlaces;\n+    @NonNull private final String currencyDecimalSeparator;\n+    @NonNull private final String currencySymbol;\n+    @NonNull private final String currencyThousandsSeparator;\n+\n+    private PaymentCongrats(final Builder builder) {\n+        congratsType = builder.congratsType;\n+        title = builder.title;\n+        subtitle = builder.subtitle;\n+        imageUrl = builder.imageUrl;\n+        help = builder.help;\n+        iconId = builder.iconId;\n+        receiptId = builder.receiptId;\n+        receiptIdList = builder.receiptIdList;\n+        exitActionPrimary = builder.exitActionPrimary;\n+        exitActionSecondary = builder.exitActionSecondary;\n+        statementDescription = builder.statementDescription;\n+        shouldShowPaymentMethod = builder.shouldShowPaymentMethod;\n+        shouldShowReceipt = builder.shouldShowReceipt;\n+        topFragment = builder.topFragment;\n+        bottomFragment = builder.bottomFragment;\n+        importantFragment = builder.importantFragment;\n+        currencyDecimalPlaces = builder.currencyDecimalPlaces;\n+        currencyDecimalSeparator = builder.currencyDecimalSeparator;\n+        currencySymbol = builder.currencySymbol;\n+        currencyThousandsSeparator = builder.currencyThousandsSeparator;\n+    }\n+\n+    @Override\n+    public int describeContents() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public void writeToParcel(Parcel dest, int flags) {\n+        dest.writeString(this.congratsType.name());\n+        dest.writeString(this.title);\n+        dest.writeString(this.subtitle);\n+        dest.writeString(this.imageUrl);\n+        dest.writeString(this.help);\n+        dest.writeInt(this.iconId);\n+        dest.writeString(this.receiptId);\n+        dest.writeStringList(this.receiptIdList);\n+        dest.writeParcelable(this.exitActionPrimary, flags);\n+        dest.writeParcelable(this.exitActionSecondary, flags);\n+        dest.writeString(this.statementDescription);\n+        dest.writeValue(this.shouldShowPaymentMethod);\n+        dest.writeValue(this.shouldShowReceipt);\n+        dest.writeParcelable(this.topFragment, flags);\n+        dest.writeParcelable(this.bottomFragment, flags);\n+        dest.writeParcelable(this.importantFragment, flags);\n+        dest.writeInt(this.currencyDecimalPlaces);\n+        dest.writeString(this.currencyDecimalSeparator);\n+        dest.writeString(this.currencySymbol);\n+        dest.writeString(this.currencyThousandsSeparator);\n+    }\n+\n+    protected PaymentCongrats(Parcel in) {\n+        this.congratsType = CongratsType.fromName(in.readString());\n+        this.title = in.readString();\n+        this.subtitle = in.readString();\n+        this.imageUrl = in.readString();\n+        this.help = in.readString();\n+        this.iconId = in.readInt();\n+        this.receiptId = in.readString();\n+        this.receiptIdList = in.createStringArrayList();\n+        this.exitActionPrimary = in.readParcelable(ExitAction.class.getClassLoader());\n+        this.exitActionSecondary = in.readParcelable(ExitAction.class.getClassLoader());\n+        this.statementDescription = in.readString();\n+        this.shouldShowPaymentMethod = (Boolean) in.readValue(Boolean.class.getClassLoader());\n+        this.shouldShowReceipt = (Boolean) in.readValue(Boolean.class.getClassLoader());\n+        this.topFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.bottomFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.importantFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.currencyDecimalPlaces = in.readInt();\n+        this.currencyDecimalSeparator = in.readString();\n+        this.currencySymbol = in.readString();\n+        this.currencyThousandsSeparator = in.readString();\n+    }\n+\n+    public static final Parcelable.Creator<PaymentCongrats> CREATOR = new Parcelable.Creator<PaymentCongrats>() {\n+        @Override\n+        public PaymentCongrats createFromParcel(Parcel source) {\n+            return new PaymentCongrats(source);\n+        }\n+\n+        @Override\n+        public PaymentCongrats[] newArray(int size) {\n+            return new PaymentCongrats[size];\n+        }\n+    };\n+\n+    @NotNull\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    @Nullable\n+    public String getSubtitle() {\n+        return subtitle;\n+    }\n+\n+    @NotNull\n+    public String getImageUrl() {\n+        return imageUrl;\n+    }\n+\n+    @Nullable\n+    public String getHelp() {\n+        return help;\n+    }\n+\n+    public String getReceipt() {\n+        return ListUtil.isNotEmpty(receiptIdList) ? receiptIdList.get(0) : receiptId;\n+    }\n+\n+    @Nullable\n+    public ExitAction getExitActionPrimary() {\n+        return exitActionPrimary;\n+    }\n+\n+    @Nullable\n+    public ExitAction getExitActionSecondary() {\n+        return exitActionSecondary;\n+    }\n+\n+    @Nullable\n+    public String getStatementDescription() {\n+        return statementDescription;\n+    }\n+\n+    @Nullable\n+    public Boolean getShouldShowPaymentMethod() {\n+        return shouldShowPaymentMethod;\n+    }\n+\n+    @Nullable\n+    public Boolean getShouldShowReceipt() {\n+        return shouldShowReceipt;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getTopFragment() {\n+        return topFragment;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getBottomFragment() {\n+        return bottomFragment;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getImportantFragment() {\n+        return importantFragment;\n+    }\n+\n+    public int getCurrencyDecimalPlaces() {\n+        return currencyDecimalPlaces;\n+    }\n+\n+    @NonNull\n+    public String getCurrencyDecimalSeparator() {\n+        return currencyDecimalSeparator;\n+    }\n+\n+    @NonNull\n+    public String getCurrencySymbol() {\n+        return currencySymbol;\n+    }\n+\n+    @NonNull\n+    public String getCurrencyThousandsSeparator() {\n+        return currencyThousandsSeparator;\n+    }\n+\n+    public Boolean hasTopFragment() {\n+        return getTopFragment() != null;\n+    }\n+\n+    public Boolean hasBottomFragment() {\n+        return getBottomFragment() != null;\n+    }\n+\n+    public Boolean hasImportantFragment() {\n+        return getImportantFragment() != null;\n+    }\n+\n+    public Boolean hasHelp() {\n+        return TextUtil.isNotEmpty(help);\n+    }\n+\n+    @NonNull\n+    public CongratsType getCongratsType() {\n+        return congratsType;\n+    }\n+\n+    public enum CongratsType {\n+        APPROVED(\"APPROVED\"),\n+        REJECTED(\"REJECTED\"),\n+        PENDING(\"PENDING\");\n+\n+        CongratsType(final String type) { }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM4MzUwMw=="}, "originalCommit": {"oid": "fd784b8491f3ff69e37366487b24f707abe6e5f8"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg1NDA5Nw==", "bodyText": "Te lo exige porque estas intanciando los enums con un string deberia quedar asi:\nAPPROVED,\nREJECTED,\nPENDING", "url": "https://github.com/mercadopago/px-android/pull/2238#discussion_r458854097", "createdAt": "2020-07-22T14:53:17Z", "author": {"login": "cgaggino"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_congrats/PaymentCongrats.java", "diffHunk": "@@ -0,0 +1,520 @@\n+package com.mercadopago.android.px.internal.features.payment_congrats;\n+\n+import android.os.Bundle;\n+import android.os.Parcel;\n+import android.os.Parcelable;\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n+import android.support.v4.app.Fragment;\n+import com.mercadopago.android.px.internal.util.ListUtil;\n+import com.mercadopago.android.px.internal.util.TextUtil;\n+import com.mercadopago.android.px.model.ExitAction;\n+import com.mercadopago.android.px.model.ExternalFragment;\n+import java.util.List;\n+import org.jetbrains.annotations.NotNull;\n+\n+public class PaymentCongrats implements Parcelable {\n+    //Basic data\n+    @NonNull private final CongratsType congratsType;\n+    @NonNull private final String title;\n+    @Nullable private final String subtitle;\n+    @NonNull private final String imageUrl;\n+    @Nullable private final String help;\n+    private final int iconId;\n+    @Nullable private final String statementDescription;\n+    private final boolean shouldShowPaymentMethod;\n+\n+    //Receipt data\n+    @Nullable private final String receiptId;\n+    @Nullable private final List<String> receiptIdList;\n+    private final boolean shouldShowReceipt;\n+\n+    // Exit Buttons\n+    @Nullable private final ExitAction exitActionPrimary;\n+    @Nullable private final ExitAction exitActionSecondary;\n+\n+\n+    // custom views for integrators\n+    @Nullable private final ExternalFragment topFragment;\n+    @Nullable private final ExternalFragment bottomFragment;\n+    @Nullable private final ExternalFragment importantFragment;\n+\n+    private final int currencyDecimalPlaces;\n+    @NonNull private final String currencyDecimalSeparator;\n+    @NonNull private final String currencySymbol;\n+    @NonNull private final String currencyThousandsSeparator;\n+\n+    private PaymentCongrats(final Builder builder) {\n+        congratsType = builder.congratsType;\n+        title = builder.title;\n+        subtitle = builder.subtitle;\n+        imageUrl = builder.imageUrl;\n+        help = builder.help;\n+        iconId = builder.iconId;\n+        receiptId = builder.receiptId;\n+        receiptIdList = builder.receiptIdList;\n+        exitActionPrimary = builder.exitActionPrimary;\n+        exitActionSecondary = builder.exitActionSecondary;\n+        statementDescription = builder.statementDescription;\n+        shouldShowPaymentMethod = builder.shouldShowPaymentMethod;\n+        shouldShowReceipt = builder.shouldShowReceipt;\n+        topFragment = builder.topFragment;\n+        bottomFragment = builder.bottomFragment;\n+        importantFragment = builder.importantFragment;\n+        currencyDecimalPlaces = builder.currencyDecimalPlaces;\n+        currencyDecimalSeparator = builder.currencyDecimalSeparator;\n+        currencySymbol = builder.currencySymbol;\n+        currencyThousandsSeparator = builder.currencyThousandsSeparator;\n+    }\n+\n+    @Override\n+    public int describeContents() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public void writeToParcel(Parcel dest, int flags) {\n+        dest.writeString(this.congratsType.name());\n+        dest.writeString(this.title);\n+        dest.writeString(this.subtitle);\n+        dest.writeString(this.imageUrl);\n+        dest.writeString(this.help);\n+        dest.writeInt(this.iconId);\n+        dest.writeString(this.receiptId);\n+        dest.writeStringList(this.receiptIdList);\n+        dest.writeParcelable(this.exitActionPrimary, flags);\n+        dest.writeParcelable(this.exitActionSecondary, flags);\n+        dest.writeString(this.statementDescription);\n+        dest.writeValue(this.shouldShowPaymentMethod);\n+        dest.writeValue(this.shouldShowReceipt);\n+        dest.writeParcelable(this.topFragment, flags);\n+        dest.writeParcelable(this.bottomFragment, flags);\n+        dest.writeParcelable(this.importantFragment, flags);\n+        dest.writeInt(this.currencyDecimalPlaces);\n+        dest.writeString(this.currencyDecimalSeparator);\n+        dest.writeString(this.currencySymbol);\n+        dest.writeString(this.currencyThousandsSeparator);\n+    }\n+\n+    protected PaymentCongrats(Parcel in) {\n+        this.congratsType = CongratsType.fromName(in.readString());\n+        this.title = in.readString();\n+        this.subtitle = in.readString();\n+        this.imageUrl = in.readString();\n+        this.help = in.readString();\n+        this.iconId = in.readInt();\n+        this.receiptId = in.readString();\n+        this.receiptIdList = in.createStringArrayList();\n+        this.exitActionPrimary = in.readParcelable(ExitAction.class.getClassLoader());\n+        this.exitActionSecondary = in.readParcelable(ExitAction.class.getClassLoader());\n+        this.statementDescription = in.readString();\n+        this.shouldShowPaymentMethod = (Boolean) in.readValue(Boolean.class.getClassLoader());\n+        this.shouldShowReceipt = (Boolean) in.readValue(Boolean.class.getClassLoader());\n+        this.topFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.bottomFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.importantFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.currencyDecimalPlaces = in.readInt();\n+        this.currencyDecimalSeparator = in.readString();\n+        this.currencySymbol = in.readString();\n+        this.currencyThousandsSeparator = in.readString();\n+    }\n+\n+    public static final Parcelable.Creator<PaymentCongrats> CREATOR = new Parcelable.Creator<PaymentCongrats>() {\n+        @Override\n+        public PaymentCongrats createFromParcel(Parcel source) {\n+            return new PaymentCongrats(source);\n+        }\n+\n+        @Override\n+        public PaymentCongrats[] newArray(int size) {\n+            return new PaymentCongrats[size];\n+        }\n+    };\n+\n+    @NotNull\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    @Nullable\n+    public String getSubtitle() {\n+        return subtitle;\n+    }\n+\n+    @NotNull\n+    public String getImageUrl() {\n+        return imageUrl;\n+    }\n+\n+    @Nullable\n+    public String getHelp() {\n+        return help;\n+    }\n+\n+    public String getReceipt() {\n+        return ListUtil.isNotEmpty(receiptIdList) ? receiptIdList.get(0) : receiptId;\n+    }\n+\n+    @Nullable\n+    public ExitAction getExitActionPrimary() {\n+        return exitActionPrimary;\n+    }\n+\n+    @Nullable\n+    public ExitAction getExitActionSecondary() {\n+        return exitActionSecondary;\n+    }\n+\n+    @Nullable\n+    public String getStatementDescription() {\n+        return statementDescription;\n+    }\n+\n+    @Nullable\n+    public Boolean getShouldShowPaymentMethod() {\n+        return shouldShowPaymentMethod;\n+    }\n+\n+    @Nullable\n+    public Boolean getShouldShowReceipt() {\n+        return shouldShowReceipt;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getTopFragment() {\n+        return topFragment;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getBottomFragment() {\n+        return bottomFragment;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getImportantFragment() {\n+        return importantFragment;\n+    }\n+\n+    public int getCurrencyDecimalPlaces() {\n+        return currencyDecimalPlaces;\n+    }\n+\n+    @NonNull\n+    public String getCurrencyDecimalSeparator() {\n+        return currencyDecimalSeparator;\n+    }\n+\n+    @NonNull\n+    public String getCurrencySymbol() {\n+        return currencySymbol;\n+    }\n+\n+    @NonNull\n+    public String getCurrencyThousandsSeparator() {\n+        return currencyThousandsSeparator;\n+    }\n+\n+    public Boolean hasTopFragment() {\n+        return getTopFragment() != null;\n+    }\n+\n+    public Boolean hasBottomFragment() {\n+        return getBottomFragment() != null;\n+    }\n+\n+    public Boolean hasImportantFragment() {\n+        return getImportantFragment() != null;\n+    }\n+\n+    public Boolean hasHelp() {\n+        return TextUtil.isNotEmpty(help);\n+    }\n+\n+    @NonNull\n+    public CongratsType getCongratsType() {\n+        return congratsType;\n+    }\n+\n+    public enum CongratsType {\n+        APPROVED(\"APPROVED\"),\n+        REJECTED(\"REJECTED\"),\n+        PENDING(\"PENDING\");\n+\n+        CongratsType(final String type) { }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM4MzUwMw=="}, "originalCommit": {"oid": "fd784b8491f3ff69e37366487b24f707abe6e5f8"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg1NzMxOA==", "bodyText": "ah\u00ed lo arregl\u00e9!", "url": "https://github.com/mercadopago/px-android/pull/2238#discussion_r458857318", "createdAt": "2020-07-22T14:57:41Z", "author": {"login": "mmunozpatinomeli"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/payment_congrats/PaymentCongrats.java", "diffHunk": "@@ -0,0 +1,520 @@\n+package com.mercadopago.android.px.internal.features.payment_congrats;\n+\n+import android.os.Bundle;\n+import android.os.Parcel;\n+import android.os.Parcelable;\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n+import android.support.v4.app.Fragment;\n+import com.mercadopago.android.px.internal.util.ListUtil;\n+import com.mercadopago.android.px.internal.util.TextUtil;\n+import com.mercadopago.android.px.model.ExitAction;\n+import com.mercadopago.android.px.model.ExternalFragment;\n+import java.util.List;\n+import org.jetbrains.annotations.NotNull;\n+\n+public class PaymentCongrats implements Parcelable {\n+    //Basic data\n+    @NonNull private final CongratsType congratsType;\n+    @NonNull private final String title;\n+    @Nullable private final String subtitle;\n+    @NonNull private final String imageUrl;\n+    @Nullable private final String help;\n+    private final int iconId;\n+    @Nullable private final String statementDescription;\n+    private final boolean shouldShowPaymentMethod;\n+\n+    //Receipt data\n+    @Nullable private final String receiptId;\n+    @Nullable private final List<String> receiptIdList;\n+    private final boolean shouldShowReceipt;\n+\n+    // Exit Buttons\n+    @Nullable private final ExitAction exitActionPrimary;\n+    @Nullable private final ExitAction exitActionSecondary;\n+\n+\n+    // custom views for integrators\n+    @Nullable private final ExternalFragment topFragment;\n+    @Nullable private final ExternalFragment bottomFragment;\n+    @Nullable private final ExternalFragment importantFragment;\n+\n+    private final int currencyDecimalPlaces;\n+    @NonNull private final String currencyDecimalSeparator;\n+    @NonNull private final String currencySymbol;\n+    @NonNull private final String currencyThousandsSeparator;\n+\n+    private PaymentCongrats(final Builder builder) {\n+        congratsType = builder.congratsType;\n+        title = builder.title;\n+        subtitle = builder.subtitle;\n+        imageUrl = builder.imageUrl;\n+        help = builder.help;\n+        iconId = builder.iconId;\n+        receiptId = builder.receiptId;\n+        receiptIdList = builder.receiptIdList;\n+        exitActionPrimary = builder.exitActionPrimary;\n+        exitActionSecondary = builder.exitActionSecondary;\n+        statementDescription = builder.statementDescription;\n+        shouldShowPaymentMethod = builder.shouldShowPaymentMethod;\n+        shouldShowReceipt = builder.shouldShowReceipt;\n+        topFragment = builder.topFragment;\n+        bottomFragment = builder.bottomFragment;\n+        importantFragment = builder.importantFragment;\n+        currencyDecimalPlaces = builder.currencyDecimalPlaces;\n+        currencyDecimalSeparator = builder.currencyDecimalSeparator;\n+        currencySymbol = builder.currencySymbol;\n+        currencyThousandsSeparator = builder.currencyThousandsSeparator;\n+    }\n+\n+    @Override\n+    public int describeContents() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public void writeToParcel(Parcel dest, int flags) {\n+        dest.writeString(this.congratsType.name());\n+        dest.writeString(this.title);\n+        dest.writeString(this.subtitle);\n+        dest.writeString(this.imageUrl);\n+        dest.writeString(this.help);\n+        dest.writeInt(this.iconId);\n+        dest.writeString(this.receiptId);\n+        dest.writeStringList(this.receiptIdList);\n+        dest.writeParcelable(this.exitActionPrimary, flags);\n+        dest.writeParcelable(this.exitActionSecondary, flags);\n+        dest.writeString(this.statementDescription);\n+        dest.writeValue(this.shouldShowPaymentMethod);\n+        dest.writeValue(this.shouldShowReceipt);\n+        dest.writeParcelable(this.topFragment, flags);\n+        dest.writeParcelable(this.bottomFragment, flags);\n+        dest.writeParcelable(this.importantFragment, flags);\n+        dest.writeInt(this.currencyDecimalPlaces);\n+        dest.writeString(this.currencyDecimalSeparator);\n+        dest.writeString(this.currencySymbol);\n+        dest.writeString(this.currencyThousandsSeparator);\n+    }\n+\n+    protected PaymentCongrats(Parcel in) {\n+        this.congratsType = CongratsType.fromName(in.readString());\n+        this.title = in.readString();\n+        this.subtitle = in.readString();\n+        this.imageUrl = in.readString();\n+        this.help = in.readString();\n+        this.iconId = in.readInt();\n+        this.receiptId = in.readString();\n+        this.receiptIdList = in.createStringArrayList();\n+        this.exitActionPrimary = in.readParcelable(ExitAction.class.getClassLoader());\n+        this.exitActionSecondary = in.readParcelable(ExitAction.class.getClassLoader());\n+        this.statementDescription = in.readString();\n+        this.shouldShowPaymentMethod = (Boolean) in.readValue(Boolean.class.getClassLoader());\n+        this.shouldShowReceipt = (Boolean) in.readValue(Boolean.class.getClassLoader());\n+        this.topFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.bottomFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.importantFragment = in.readParcelable(ExternalFragment.class.getClassLoader());\n+        this.currencyDecimalPlaces = in.readInt();\n+        this.currencyDecimalSeparator = in.readString();\n+        this.currencySymbol = in.readString();\n+        this.currencyThousandsSeparator = in.readString();\n+    }\n+\n+    public static final Parcelable.Creator<PaymentCongrats> CREATOR = new Parcelable.Creator<PaymentCongrats>() {\n+        @Override\n+        public PaymentCongrats createFromParcel(Parcel source) {\n+            return new PaymentCongrats(source);\n+        }\n+\n+        @Override\n+        public PaymentCongrats[] newArray(int size) {\n+            return new PaymentCongrats[size];\n+        }\n+    };\n+\n+    @NotNull\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    @Nullable\n+    public String getSubtitle() {\n+        return subtitle;\n+    }\n+\n+    @NotNull\n+    public String getImageUrl() {\n+        return imageUrl;\n+    }\n+\n+    @Nullable\n+    public String getHelp() {\n+        return help;\n+    }\n+\n+    public String getReceipt() {\n+        return ListUtil.isNotEmpty(receiptIdList) ? receiptIdList.get(0) : receiptId;\n+    }\n+\n+    @Nullable\n+    public ExitAction getExitActionPrimary() {\n+        return exitActionPrimary;\n+    }\n+\n+    @Nullable\n+    public ExitAction getExitActionSecondary() {\n+        return exitActionSecondary;\n+    }\n+\n+    @Nullable\n+    public String getStatementDescription() {\n+        return statementDescription;\n+    }\n+\n+    @Nullable\n+    public Boolean getShouldShowPaymentMethod() {\n+        return shouldShowPaymentMethod;\n+    }\n+\n+    @Nullable\n+    public Boolean getShouldShowReceipt() {\n+        return shouldShowReceipt;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getTopFragment() {\n+        return topFragment;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getBottomFragment() {\n+        return bottomFragment;\n+    }\n+\n+    @Nullable\n+    public ExternalFragment getImportantFragment() {\n+        return importantFragment;\n+    }\n+\n+    public int getCurrencyDecimalPlaces() {\n+        return currencyDecimalPlaces;\n+    }\n+\n+    @NonNull\n+    public String getCurrencyDecimalSeparator() {\n+        return currencyDecimalSeparator;\n+    }\n+\n+    @NonNull\n+    public String getCurrencySymbol() {\n+        return currencySymbol;\n+    }\n+\n+    @NonNull\n+    public String getCurrencyThousandsSeparator() {\n+        return currencyThousandsSeparator;\n+    }\n+\n+    public Boolean hasTopFragment() {\n+        return getTopFragment() != null;\n+    }\n+\n+    public Boolean hasBottomFragment() {\n+        return getBottomFragment() != null;\n+    }\n+\n+    public Boolean hasImportantFragment() {\n+        return getImportantFragment() != null;\n+    }\n+\n+    public Boolean hasHelp() {\n+        return TextUtil.isNotEmpty(help);\n+    }\n+\n+    @NonNull\n+    public CongratsType getCongratsType() {\n+        return congratsType;\n+    }\n+\n+    public enum CongratsType {\n+        APPROVED(\"APPROVED\"),\n+        REJECTED(\"REJECTED\"),\n+        PENDING(\"PENDING\");\n+\n+        CongratsType(final String type) { }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM4MzUwMw=="}, "originalCommit": {"oid": "fd784b8491f3ff69e37366487b24f707abe6e5f8"}, "originalPosition": 243}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1866, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}