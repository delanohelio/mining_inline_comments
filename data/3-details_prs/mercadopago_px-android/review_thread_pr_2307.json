{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1NDA5Nzc0", "number": 2307, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNDowNDozN1rOEdwvgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNTo1NDo1OVrOEdzXsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NjQyNzUyOnYy", "diffSide": "RIGHT", "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/explode/ExplodeDecorator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNDowNDozN1rOHJHknA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNToxODo1OVrOHJKmdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMyMzI5Mg==", "bodyText": "por qu\u00e9 cambio el nivel de acceso ac\u00e1?", "url": "https://github.com/mercadopago/px-android/pull/2307#discussion_r479323292", "createdAt": "2020-08-28T14:04:37Z", "author": {"login": "cgaggino"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/explode/ExplodeDecorator.java", "diffHunk": "@@ -20,7 +20,7 @@ public static ExplodeDecorator from(@NonNull final PaymentResultType type) {\n     private final int primaryColor;\n     private final int statusIcon;\n \n-    /* default */ ExplodeDecorator(@ColorRes final int primaryColor, @DrawableRes final int statusIcon) {\n+    public ExplodeDecorator(@ColorRes final int primaryColor, @DrawableRes final int statusIcon) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee1e6926849eda9c411e133c0e5b5fbb2a86e703"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMyNTk3MQ==", "bodyText": "Para poder llamarlo en estos test:\nhttps://github.com/mercadopago/px-android/pull/2307/files#diff-809feebbbc1c4d4a24f33cbc7991ba44R273", "url": "https://github.com/mercadopago/px-android/pull/2307#discussion_r479325971", "createdAt": "2020-08-28T14:07:33Z", "author": {"login": "jorGonzalez291292"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/explode/ExplodeDecorator.java", "diffHunk": "@@ -20,7 +20,7 @@ public static ExplodeDecorator from(@NonNull final PaymentResultType type) {\n     private final int primaryColor;\n     private final int statusIcon;\n \n-    /* default */ ExplodeDecorator(@ColorRes final int primaryColor, @DrawableRes final int statusIcon) {\n+    public ExplodeDecorator(@ColorRes final int primaryColor, @DrawableRes final int statusIcon) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMyMzI5Mg=="}, "originalCommit": {"oid": "ee1e6926849eda9c411e133c0e5b5fbb2a86e703"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM3MjkxNw==", "bodyText": "no es mejor usar el from que ya existe pasandole un result mockeado o crear otro from o usar whitebox si es que se puede? para no abrir la accesibilidad solo por un test", "url": "https://github.com/mercadopago/px-android/pull/2307#discussion_r479372917", "createdAt": "2020-08-28T15:18:59Z", "author": {"login": "cgaggino"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/explode/ExplodeDecorator.java", "diffHunk": "@@ -20,7 +20,7 @@ public static ExplodeDecorator from(@NonNull final PaymentResultType type) {\n     private final int primaryColor;\n     private final int statusIcon;\n \n-    /* default */ ExplodeDecorator(@ColorRes final int primaryColor, @DrawableRes final int statusIcon) {\n+    public ExplodeDecorator(@ColorRes final int primaryColor, @DrawableRes final int statusIcon) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMyMzI5Mg=="}, "originalCommit": {"oid": "ee1e6926849eda9c411e133c0e5b5fbb2a86e703"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NjU4MTI5OnYy", "diffSide": "RIGHT", "path": "px-checkout/src/test/java/com/mercadopago/android/px/KFunctionsTest.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNDozODowNlrOHJJG1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNDo0NjoyM1rOHJJaRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM0ODQzNg==", "bodyText": "No se puede simplemente castear el return de Mockito.any? en vez de castear el null? deberia tener los mismos resultados, entiendo que el problema es el check del return del any y no el return en s\u00ed", "url": "https://github.com/mercadopago/px-android/pull/2307#discussion_r479348436", "createdAt": "2020-08-28T14:38:06Z", "author": {"login": "cgaggino"}, "path": "px-checkout/src/test/java/com/mercadopago/android/px/KFunctionsTest.kt", "diffHunk": "@@ -0,0 +1,25 @@\n+package com.mercadopago.android.px\n+\n+import org.mockito.Mockito\n+\n+\n+/**\n+ * Returns Mockito.any() as nullable type to avoid java.lang.IllegalStateException when\n+ * null is returned.\n+ *\n+ * See https://medium.com/mobile-app-development-publication/befriending-kotlin-and-mockito-1c2e7b0ef791.\n+ * See https://stackoverflow.com/questions/30305217/is-it-possible-to-use-mockito-in-kotlin.\n+ */\n+fun <T> any(type : Class<T>): T {\n+    Mockito.any(type)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee1e6926849eda9c411e133c0e5b5fbb2a86e703"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM1MzQxMw==", "bodyText": "Cambiado!", "url": "https://github.com/mercadopago/px-android/pull/2307#discussion_r479353413", "createdAt": "2020-08-28T14:46:23Z", "author": {"login": "jorGonzalez291292"}, "path": "px-checkout/src/test/java/com/mercadopago/android/px/KFunctionsTest.kt", "diffHunk": "@@ -0,0 +1,25 @@\n+package com.mercadopago.android.px\n+\n+import org.mockito.Mockito\n+\n+\n+/**\n+ * Returns Mockito.any() as nullable type to avoid java.lang.IllegalStateException when\n+ * null is returned.\n+ *\n+ * See https://medium.com/mobile-app-development-publication/befriending-kotlin-and-mockito-1c2e7b0ef791.\n+ * See https://stackoverflow.com/questions/30305217/is-it-possible-to-use-mockito-in-kotlin.\n+ */\n+fun <T> any(type : Class<T>): T {\n+    Mockito.any(type)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM0ODQzNg=="}, "originalCommit": {"oid": "ee1e6926849eda9c411e133c0e5b5fbb2a86e703"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NjYxMTk2OnYy", "diffSide": "RIGHT", "path": "px-checkout/src/test/java/com/mercadopago/android/px/internal/datasource/PaymentServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNDo0NjoxMVrOHJJZyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNDo0NjoxMVrOHJJZyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM1MzI4OQ==", "bodyText": "Me gustaria que hagamos check de con que estamos llamando a la procesadora,\nla idea ser\u00eda: yo inicio un pago en payment service con X medio, espero que se llame a paymentProcessor con tal medio", "url": "https://github.com/mercadopago/px-android/pull/2307#discussion_r479353289", "createdAt": "2020-08-28T14:46:11Z", "author": {"login": "cgaggino"}, "path": "px-checkout/src/test/java/com/mercadopago/android/px/internal/datasource/PaymentServiceTest.java", "diffHunk": "@@ -236,15 +255,55 @@ public void whenOneTapPaymentWhenCapNotExceededAndNotApproved() {\n         when(escPaymentManager.hasEsc(card)).thenReturn(true);\n         when(escManagerBehaviour.isESCEnabled()).thenReturn(true);\n \n-        paymentService.attach(handler);\n         paymentService.startExpressPayment(mockPaymentConfiguration(node, payerCost));\n-\n         verify(escPaymentManager).hasEsc(card);\n         verifyNoMoreInteractions(escPaymentManager);\n         verify(tokenRepository).createToken(card);\n         verifyNoMoreInteractions(tokenRepository);\n     }\n \n+    @Test\n+    public void whenOneTapStartPaymentAndPaymentError() {\n+        final Observer<Event<MercadoPagoError>> errorObserver = mock(Observer.class);\n+        when(userSelectionRepository.getPaymentMethod().getPaymentTypeId()).thenReturn(PaymentTypes.CREDIT_CARD);\n+        when(userSelectionRepository.getPayerCost()).thenReturn(null);\n+        when(amountConfigurationRepository.getCurrentConfiguration()).thenReturn(mock(AmountConfiguration.class));\n+\n+        paymentService.handlerWrapper.createTransactionLiveData();\n+        paymentService.getObservableEvents().getPaymentErrorLiveData().observeForever(errorObserver);\n+        paymentService.startPayment();\n+\n+        verify(errorObserver).onChanged(any());\n+    }\n+\n+    @Test\n+    public void whenOneTapStartPaymentAndShouldShowVisualPayment() {\n+        final Observer<Event<Unit>> visualPaymentObserver = mock(Observer.class);\n+        when(userSelectionRepository.hasCardSelected()).thenReturn(true);\n+        when(userSelectionRepository.getPayerCost()).thenReturn(mock(PayerCost.class));\n+        when(paymentSettingRepository.hasToken()).thenReturn(true);\n+        when(paymentSettingRepository.getSecurityType()).thenReturn(SecurityType.SECOND_FACTOR);\n+        when(paymentProcessor.shouldShowFragmentOnPayment(any(CheckoutPreference.class))).thenReturn(true);\n+\n+        paymentService.handlerWrapper.createTransactionLiveData();\n+        paymentService.getObservableEvents().getVisualPaymentLiveData().observeForever(visualPaymentObserver);\n+        paymentService.startPayment();\n+\n+        verify(visualPaymentObserver).onChanged(any());\n+    }\n+\n+    @Test\n+    public void whenOneTapPaymentWhenHasTokenAndPaymentSuccess() {\n+        savedCreditCardOneTapPresent(CARD_ID_ESC_NOT_AVAILABLE);\n+        when(paymentSettingRepository.hasToken()).thenReturn(true);\n+        when(paymentSettingRepository.getSecurityType()).thenReturn(SecurityType.SECOND_FACTOR);\n+        when(paymentProcessor.shouldShowFragmentOnPayment(any(CheckoutPreference.class))).thenReturn(false);\n+        when(amountConfigurationRepository.getCurrentConfiguration()).thenReturn(mock(AmountConfiguration.class));\n+\n+        paymentService.startExpressPayment(mockPaymentConfiguration(node, payerCost));\n+        verify(paymentProcessor).startPayment(any(), any(), any());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee1e6926849eda9c411e133c0e5b5fbb2a86e703"}, "originalPosition": 220}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Njg1ODEwOnYy", "diffSide": "RIGHT", "path": "px-checkout/src/test/java/com/mercadopago/android/px/internal/datasource/PaymentServiceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNTo1NDo1OVrOHJL0HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNTo1NDo1OVrOHJL0HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM5Mjc5Ng==", "bodyText": "el expected tiene que ser lo que le estas pasando a service, en la linea 313", "url": "https://github.com/mercadopago/px-android/pull/2307#discussion_r479392796", "createdAt": "2020-08-28T15:54:59Z", "author": {"login": "cgaggino"}, "path": "px-checkout/src/test/java/com/mercadopago/android/px/internal/datasource/PaymentServiceTest.java", "diffHunk": "@@ -236,15 +262,66 @@ public void whenOneTapPaymentWhenCapNotExceededAndNotApproved() {\n         when(escPaymentManager.hasEsc(card)).thenReturn(true);\n         when(escManagerBehaviour.isESCEnabled()).thenReturn(true);\n \n-        paymentService.attach(handler);\n         paymentService.startExpressPayment(mockPaymentConfiguration(node, payerCost));\n-\n         verify(escPaymentManager).hasEsc(card);\n         verifyNoMoreInteractions(escPaymentManager);\n         verify(tokenRepository).createToken(card);\n         verifyNoMoreInteractions(tokenRepository);\n     }\n \n+    @Test\n+    public void whenOneTapStartPaymentAndPaymentError() {\n+        final Observer<Event<MercadoPagoError>> errorObserver = mock(Observer.class);\n+        when(userSelectionRepository.getPaymentMethod().getPaymentTypeId()).thenReturn(PaymentTypes.CREDIT_CARD);\n+        when(userSelectionRepository.getPayerCost()).thenReturn(null);\n+        when(amountConfigurationRepository.getCurrentConfiguration()).thenReturn(mock(AmountConfiguration.class));\n+\n+        paymentService.handlerWrapper.createTransactionLiveData();\n+        paymentService.getObservableEvents().getPaymentErrorLiveData().observeForever(errorObserver);\n+        paymentService.startPayment();\n+\n+        verify(errorObserver).onChanged(any());\n+    }\n+\n+    @Test\n+    public void whenOneTapStartPaymentAndShouldShowVisualPayment() {\n+        final Observer<Event<Unit>> visualPaymentObserver = mock(Observer.class);\n+        when(userSelectionRepository.hasCardSelected()).thenReturn(true);\n+        when(userSelectionRepository.getPayerCost()).thenReturn(mock(PayerCost.class));\n+        when(paymentSettingRepository.hasToken()).thenReturn(true);\n+        when(paymentSettingRepository.getSecurityType()).thenReturn(SecurityType.SECOND_FACTOR);\n+        when(paymentProcessor.shouldShowFragmentOnPayment(any(CheckoutPreference.class))).thenReturn(true);\n+\n+        paymentService.handlerWrapper.createTransactionLiveData();\n+        paymentService.getObservableEvents().getVisualPaymentLiveData().observeForever(visualPaymentObserver);\n+        paymentService.startPayment();\n+\n+        verify(visualPaymentObserver).onChanged(any());\n+    }\n+\n+    @Test\n+    public void whenOneTapPaymentWhenHasTokenAndPaymentSuccess() {\n+        final KArgumentCaptor<SplitPaymentProcessor.CheckoutData> captor = argumentCaptor(SplitPaymentProcessor.CheckoutData.class);\n+\n+        savedCreditCardOneTapPresent(CARD_ID_ESC_NOT_AVAILABLE);\n+        when(paymentSettingRepository.hasToken()).thenReturn(true);\n+        when(paymentSettingRepository.getSecurityType()).thenReturn(SecurityType.SECOND_FACTOR);\n+        when(paymentProcessor.shouldShowFragmentOnPayment(any(CheckoutPreference.class))).thenReturn(false);\n+        when(amountConfigurationRepository.getCurrentConfiguration()).thenReturn(mock(AmountConfiguration.class));\n+\n+\n+        paymentService.startExpressPayment(mockPaymentConfiguration(node, payerCost));\n+        verify(paymentProcessor).startPayment(any(), captor.capture() , any());\n+\n+        final PaymentMethod actualPm = captor.getValue().paymentDataList.get(0).getPaymentMethod();\n+        final PaymentMethod expectedPm = paymentService.getPaymentDataList().get(0).getPaymentMethod();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2df932659fffd911247288615c8d48050cc4dfbb"}, "originalPosition": 246}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1780, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}