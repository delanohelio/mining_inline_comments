{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNTI0MDkw", "number": 2083, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMTo0NjozNFrODrLTlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMTo1Mzo1MFrODrLddg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NjAwNTk5OnYy", "diffSide": "RIGHT", "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/generic_modal/GenericDialog.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMTo0NjozNFrOF7XZJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMzoxNDowNVrOF7aXwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc5MzU3Mg==", "bodyText": "Ac\u00e1, en ves de llamar siempre a view, podr\u00edas usar la standard function with().\nEj:\nwith(view) {\nval image = findViewById<ImageView>(R.id.px_dialog_generic_image)\n}", "url": "https://github.com/mercadopago/px-android/pull/2083#discussion_r397793572", "createdAt": "2020-03-25T11:46:34Z", "author": {"login": "jorGonzalez291292"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/generic_modal/GenericDialog.kt", "diffHunk": "@@ -0,0 +1,125 @@\n+package com.mercadopago.android.px.internal.features.generic_modal\n+\n+import android.content.Context\n+import android.os.Bundle\n+import android.support.annotation.StringDef\n+import android.support.v4.app.FragmentManager\n+import android.support.v4.content.ContextCompat\n+import android.view.View\n+import android.widget.Button\n+import android.widget.ImageView\n+import com.mercadolibre.android.ui.widgets.MeliDialog\n+import com.mercadopago.android.px.R\n+import com.mercadopago.android.px.internal.extensions.isNotNullNorEmpty\n+import com.mercadopago.android.px.internal.util.PicassoLoader\n+import com.mercadopago.android.px.internal.util.ViewUtils\n+import com.mercadopago.android.px.internal.view.OnSingleClickListener\n+\n+class GenericDialog : MeliDialog() {\n+\n+    private lateinit var item: GenericDialogItem\n+    private var listener: Listener? = null\n+\n+    override fun onAttach(context: Context) {\n+        super.onAttach(context)\n+\n+        this.item = arguments?.getParcelable(ARG_GENERIC_DIALOG_ITEM)!!\n+\n+        listener = when {\n+            targetFragment is Listener -> {\n+                targetFragment as Listener\n+            }\n+            parentFragment is Listener -> {\n+                parentFragment as Listener\n+            }\n+            context is Listener -> {\n+                context\n+            }\n+            else -> {\n+                throw IllegalStateException(\"Parent of ${javaClass.simpleName} \" +\n+                    \"should implement ${Listener::class.java.simpleName}\")\n+            }\n+        }\n+    }\n+\n+    override fun onDetach() {\n+        listener = null\n+        super.onDetach()\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+\n+        val image = view.findViewById<ImageView>(R.id.px_dialog_generic_image)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e505311992409661102a94b37d57695bd31dfe5a"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg0MjM2OQ==", "bodyText": "Estaba un poco esceptico de ponerlo porque no me copa mucho anidar tanto with apply let, complica un poco la lectura a simple vista y seguir los contextos, pero me ahorra el checkeo de null de context ya que el context dentro de la view es non null\nDeberiamos tener algun lineamiento igual de cuando es demasiado anidamiento, a veces es mejor tener c\u00f3digo mas legible que conciso", "url": "https://github.com/mercadopago/px-android/pull/2083#discussion_r397842369", "createdAt": "2020-03-25T13:14:05Z", "author": {"login": "cgaggino"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/generic_modal/GenericDialog.kt", "diffHunk": "@@ -0,0 +1,125 @@\n+package com.mercadopago.android.px.internal.features.generic_modal\n+\n+import android.content.Context\n+import android.os.Bundle\n+import android.support.annotation.StringDef\n+import android.support.v4.app.FragmentManager\n+import android.support.v4.content.ContextCompat\n+import android.view.View\n+import android.widget.Button\n+import android.widget.ImageView\n+import com.mercadolibre.android.ui.widgets.MeliDialog\n+import com.mercadopago.android.px.R\n+import com.mercadopago.android.px.internal.extensions.isNotNullNorEmpty\n+import com.mercadopago.android.px.internal.util.PicassoLoader\n+import com.mercadopago.android.px.internal.util.ViewUtils\n+import com.mercadopago.android.px.internal.view.OnSingleClickListener\n+\n+class GenericDialog : MeliDialog() {\n+\n+    private lateinit var item: GenericDialogItem\n+    private var listener: Listener? = null\n+\n+    override fun onAttach(context: Context) {\n+        super.onAttach(context)\n+\n+        this.item = arguments?.getParcelable(ARG_GENERIC_DIALOG_ITEM)!!\n+\n+        listener = when {\n+            targetFragment is Listener -> {\n+                targetFragment as Listener\n+            }\n+            parentFragment is Listener -> {\n+                parentFragment as Listener\n+            }\n+            context is Listener -> {\n+                context\n+            }\n+            else -> {\n+                throw IllegalStateException(\"Parent of ${javaClass.simpleName} \" +\n+                    \"should implement ${Listener::class.java.simpleName}\")\n+            }\n+        }\n+    }\n+\n+    override fun onDetach() {\n+        listener = null\n+        super.onDetach()\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+\n+        val image = view.findViewById<ImageView>(R.id.px_dialog_generic_image)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc5MzU3Mg=="}, "originalCommit": {"oid": "e505311992409661102a94b37d57695bd31dfe5a"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NjAxNDg2OnYy", "diffSide": "RIGHT", "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/express/ExpressPaymentPresenter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMTo0OToyMVrOF7Xelg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMTo0OToyMVrOF7Xelg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc5NDk2Ng==", "bodyText": "Pareciera que no hace falta tantos types, pero en realidad el de add new card deberia hacer otra cosa (ir directamente a card form) en comparaci\u00f3n a los otros dos, ademas falta otro action que es el de PAY_WITHOUT_SPLIT que tendria la l\u00f3gica tambien de desactivar el split", "url": "https://github.com/mercadopago/px-android/pull/2083#discussion_r397794966", "createdAt": "2020-03-25T11:49:21Z", "author": {"login": "cgaggino"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/express/ExpressPaymentPresenter.java", "diffHunk": "@@ -421,6 +446,18 @@ public void requireCurrentConfiguration(@NonNull PayButton.OnReadyForPaymentCall\n         callback.call(currentPaymentConfiguration, confirmTrackerData);\n     }\n \n+    @Override\n+    public void handleGenericDialogAction(@NonNull @GenericDialog.ActionType final String type) {\n+        switch (type) {\n+        case GenericDialog.ActionType.PAY_WITH_OTHER_METHOD:\n+        case GenericDialog.ActionType.PAY_WITH_OFFLINE_METHOD:\n+        case GenericDialog.ActionType.ADD_NEW_CARD:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e505311992409661102a94b37d57695bd31dfe5a"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NjAxOTE5OnYy", "diffSide": "RIGHT", "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/generic_modal/GenericDialog.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMTo1MDo0NlrOF7XhQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMjo1OTowMFrOF7Zy9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc5NTY0OQ==", "bodyText": "Podr\u00edamos tener extension functions para esto.\nEj:\ninternal fun <T : View> T.gone() {\n    visibility = View.GONE\n}\n\ninternal fun <T : View> T.visible() {\n    visibility = View.VISIBLE\n}\n\ninternal fun <T : View> T.invisible() {\n    visibility = View.INVISIBLE\n}", "url": "https://github.com/mercadopago/px-android/pull/2083#discussion_r397795649", "createdAt": "2020-03-25T11:50:46Z", "author": {"login": "jorGonzalez291292"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/generic_modal/GenericDialog.kt", "diffHunk": "@@ -0,0 +1,125 @@\n+package com.mercadopago.android.px.internal.features.generic_modal\n+\n+import android.content.Context\n+import android.os.Bundle\n+import android.support.annotation.StringDef\n+import android.support.v4.app.FragmentManager\n+import android.support.v4.content.ContextCompat\n+import android.view.View\n+import android.widget.Button\n+import android.widget.ImageView\n+import com.mercadolibre.android.ui.widgets.MeliDialog\n+import com.mercadopago.android.px.R\n+import com.mercadopago.android.px.internal.extensions.isNotNullNorEmpty\n+import com.mercadopago.android.px.internal.util.PicassoLoader\n+import com.mercadopago.android.px.internal.util.ViewUtils\n+import com.mercadopago.android.px.internal.view.OnSingleClickListener\n+\n+class GenericDialog : MeliDialog() {\n+\n+    private lateinit var item: GenericDialogItem\n+    private var listener: Listener? = null\n+\n+    override fun onAttach(context: Context) {\n+        super.onAttach(context)\n+\n+        this.item = arguments?.getParcelable(ARG_GENERIC_DIALOG_ITEM)!!\n+\n+        listener = when {\n+            targetFragment is Listener -> {\n+                targetFragment as Listener\n+            }\n+            parentFragment is Listener -> {\n+                parentFragment as Listener\n+            }\n+            context is Listener -> {\n+                context\n+            }\n+            else -> {\n+                throw IllegalStateException(\"Parent of ${javaClass.simpleName} \" +\n+                    \"should implement ${Listener::class.java.simpleName}\")\n+            }\n+        }\n+    }\n+\n+    override fun onDetach() {\n+        listener = null\n+        super.onDetach()\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+\n+        val image = view.findViewById<ImageView>(R.id.px_dialog_generic_image)\n+        item.imageUrl?.let { url -> PicassoLoader.getPicasso().load(url).into(image) }\n+            ?: image.apply { visibility = View.GONE }\n+\n+        loadButton(view.findViewById(R.id.px_dialog_generic_button_main), item.mainAction)\n+        view.findViewById<Button>(R.id.px_dialog_generic_button_secondary).apply {\n+            loadButton(this, item.secondaryAction)\n+            background = ContextCompat.getDrawable(context, R.drawable.px_quiet_button_selector)\n+        }\n+\n+        context?.let {\n+            ViewUtils.loadOrGone(item.title.get(it), view.findViewById(R.id.px_dialog_generic_text_title))\n+            ViewUtils.loadOrGone(item.description.get(it), view.findViewById(R.id.px_dialog_generic_text_description))\n+        } ?: dismiss()\n+    }\n+\n+    private fun loadButton(button: Button, actionable: Actionable?) {\n+        actionable?.let {\n+            button.text = it.label\n+            button.setOnClickListener(object : OnSingleClickListener() {\n+                override fun onSingleClick(v: View?) {\n+                    dismiss()\n+                    listener?.apply {\n+                        val action = if (it.deepLink.isNotNullNorEmpty()) {\n+                            Action.DeepLinkAction(it.deepLink!!)\n+                        } else {\n+                            Action.CustomAction(it.action!!)\n+                        }\n+                        onAction(action)\n+                    }\n+                }\n+            })\n+        } ?: button.apply { visibility = View.GONE }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e505311992409661102a94b37d57695bd31dfe5a"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgzMjk0OQ==", "bodyText": "De una, ahi los creo", "url": "https://github.com/mercadopago/px-android/pull/2083#discussion_r397832949", "createdAt": "2020-03-25T12:59:00Z", "author": {"login": "cgaggino"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/generic_modal/GenericDialog.kt", "diffHunk": "@@ -0,0 +1,125 @@\n+package com.mercadopago.android.px.internal.features.generic_modal\n+\n+import android.content.Context\n+import android.os.Bundle\n+import android.support.annotation.StringDef\n+import android.support.v4.app.FragmentManager\n+import android.support.v4.content.ContextCompat\n+import android.view.View\n+import android.widget.Button\n+import android.widget.ImageView\n+import com.mercadolibre.android.ui.widgets.MeliDialog\n+import com.mercadopago.android.px.R\n+import com.mercadopago.android.px.internal.extensions.isNotNullNorEmpty\n+import com.mercadopago.android.px.internal.util.PicassoLoader\n+import com.mercadopago.android.px.internal.util.ViewUtils\n+import com.mercadopago.android.px.internal.view.OnSingleClickListener\n+\n+class GenericDialog : MeliDialog() {\n+\n+    private lateinit var item: GenericDialogItem\n+    private var listener: Listener? = null\n+\n+    override fun onAttach(context: Context) {\n+        super.onAttach(context)\n+\n+        this.item = arguments?.getParcelable(ARG_GENERIC_DIALOG_ITEM)!!\n+\n+        listener = when {\n+            targetFragment is Listener -> {\n+                targetFragment as Listener\n+            }\n+            parentFragment is Listener -> {\n+                parentFragment as Listener\n+            }\n+            context is Listener -> {\n+                context\n+            }\n+            else -> {\n+                throw IllegalStateException(\"Parent of ${javaClass.simpleName} \" +\n+                    \"should implement ${Listener::class.java.simpleName}\")\n+            }\n+        }\n+    }\n+\n+    override fun onDetach() {\n+        listener = null\n+        super.onDetach()\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+\n+        val image = view.findViewById<ImageView>(R.id.px_dialog_generic_image)\n+        item.imageUrl?.let { url -> PicassoLoader.getPicasso().load(url).into(image) }\n+            ?: image.apply { visibility = View.GONE }\n+\n+        loadButton(view.findViewById(R.id.px_dialog_generic_button_main), item.mainAction)\n+        view.findViewById<Button>(R.id.px_dialog_generic_button_secondary).apply {\n+            loadButton(this, item.secondaryAction)\n+            background = ContextCompat.getDrawable(context, R.drawable.px_quiet_button_selector)\n+        }\n+\n+        context?.let {\n+            ViewUtils.loadOrGone(item.title.get(it), view.findViewById(R.id.px_dialog_generic_text_title))\n+            ViewUtils.loadOrGone(item.description.get(it), view.findViewById(R.id.px_dialog_generic_text_description))\n+        } ?: dismiss()\n+    }\n+\n+    private fun loadButton(button: Button, actionable: Actionable?) {\n+        actionable?.let {\n+            button.text = it.label\n+            button.setOnClickListener(object : OnSingleClickListener() {\n+                override fun onSingleClick(v: View?) {\n+                    dismiss()\n+                    listener?.apply {\n+                        val action = if (it.deepLink.isNotNullNorEmpty()) {\n+                            Action.DeepLinkAction(it.deepLink!!)\n+                        } else {\n+                            Action.CustomAction(it.action!!)\n+                        }\n+                        onAction(action)\n+                    }\n+                }\n+            })\n+        } ?: button.apply { visibility = View.GONE }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc5NTY0OQ=="}, "originalCommit": {"oid": "e505311992409661102a94b37d57695bd31dfe5a"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NjAzMTI2OnYy", "diffSide": "RIGHT", "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/viewmodel/TextLocalized.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMTo1Mzo1MFrOF7XoRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMjo1Nzo1OVrOF7ZwPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc5NzQ0NA==", "bodyText": "En otros data class estas usando simplemente KParcelable. No podemos usarlo ac\u00e1 tmb?", "url": "https://github.com/mercadopago/px-android/pull/2083#discussion_r397797444", "createdAt": "2020-03-25T11:53:50Z", "author": {"login": "jorGonzalez291292"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/viewmodel/TextLocalized.kt", "diffHunk": "@@ -0,0 +1,45 @@\n+package com.mercadopago.android.px.internal.viewmodel\n+\n+import android.content.Context\n+import android.os.Parcel\n+import android.os.Parcelable\n+import android.support.annotation.StringRes\n+import com.mercadopago.android.px.internal.extensions.isNotNullNorEmpty\n+import com.mercadopago.android.px.internal.util.textformatter.SpannableFormatter\n+import com.mercadopago.android.px.model.internal.Text\n+\n+data class TextLocalized(private val text: Text?, @StringRes private val stringRes: Int) : ILocalizedCharSequence, Parcelable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e505311992409661102a94b37d57695bd31dfe5a"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgzMjI1NQ==", "bodyText": "Totalmente, fue algo que hice en el medio del desarrollo y me colgue de pasarlo en algunos casos, como este.\nTe pareci\u00f3 bien el ParcelableUtils?", "url": "https://github.com/mercadopago/px-android/pull/2083#discussion_r397832255", "createdAt": "2020-03-25T12:57:59Z", "author": {"login": "cgaggino"}, "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/viewmodel/TextLocalized.kt", "diffHunk": "@@ -0,0 +1,45 @@\n+package com.mercadopago.android.px.internal.viewmodel\n+\n+import android.content.Context\n+import android.os.Parcel\n+import android.os.Parcelable\n+import android.support.annotation.StringRes\n+import com.mercadopago.android.px.internal.extensions.isNotNullNorEmpty\n+import com.mercadopago.android.px.internal.util.textformatter.SpannableFormatter\n+import com.mercadopago.android.px.model.internal.Text\n+\n+data class TextLocalized(private val text: Text?, @StringRes private val stringRes: Int) : ILocalizedCharSequence, Parcelable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc5NzQ0NA=="}, "originalCommit": {"oid": "e505311992409661102a94b37d57695bd31dfe5a"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1666, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}