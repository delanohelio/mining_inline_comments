{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2MDc2OTQ5", "number": 1930, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNjozOTowNFrOE2nzAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNjo1Njo1OVrOE2oBdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzEwNTkyOnYy", "diffSide": "RIGHT", "path": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/MySqlDefaultValueConverter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNjozOTowNFrOHvgl9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODo1NzozNFrOHvknRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU3OTEyNQ==", "bodyText": "Could this part be consturcted with a single String.format for all compoents?", "url": "https://github.com/debezium/debezium/pull/1930#discussion_r519579125", "createdAt": "2020-11-09T06:39:04Z", "author": {"login": "jpechane"}, "path": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/MySqlDefaultValueConverter.java", "diffHunk": "@@ -259,6 +260,125 @@ private DateTimeFormatter timestampFormat(int length) {\n         return dtf.toFormatter();\n     }\n \n+    /**\n+     * Clean input timestamp to yyyy-mm-dd hh:mm:ss[.fffffffff] format\n+     *\n+     * @param s input timestamp\n+     * @return cleaned timestamp\n+     */\n+    private String cleanTimestamp(String s) {\n+        if (s == null) {\n+            throw new java.lang.IllegalArgumentException(\"null string\");\n+        }\n+\n+        s = s.trim();\n+\n+        final int MAX_MONTH = 12;\n+        final int MAX_DAY = 31;\n+\n+        // Parse the date\n+        int firstDash = s.indexOf('-');\n+        int secondDash = s.indexOf('-', firstDash + 1);\n+\n+        int dividingStart = -1;\n+        int dividingEnd = -1;\n+        boolean hasDividing = false;\n+        for (int i = secondDash + 1; i < s.length(); i++) {\n+            if (!Character.isDigit(s.charAt(i))) {\n+                dividingStart = i;\n+                hasDividing = true;\n+                break;\n+            }\n+        }\n+        if (hasDividing) {\n+            for (int i = dividingStart; i < s.length(); i++) {\n+                if (Character.isDigit(s.charAt(i))) {\n+                    break;\n+                }\n+                dividingEnd = i;\n+            }\n+        }\n+\n+        // Parse the time\n+        int firstColon = s.indexOf(':', dividingEnd + 1);\n+        int secondColon = s.indexOf(':', firstColon + 1);\n+        int period = s.indexOf('.', secondColon + 1);\n+\n+        int year = 0;\n+        int month = 0;\n+        int day = 0;\n+        int hour = 0;\n+        int minute = 0;\n+        int second = 0;\n+\n+        // Get the date\n+        int len = s.length();\n+        boolean parsedDate = false;\n+        if (firstDash > 0 && secondDash > firstDash) {\n+            year = Integer.parseInt(s.substring(0, firstDash));\n+            month = Integer.parseInt(s.substring(firstDash + 1, secondDash));\n+            if (hasDividing) {\n+                day = Integer.parseInt(s.substring(secondDash + 1, dividingStart));\n+            }\n+            else {\n+                day = Integer.parseInt(s.substring(secondDash + 1, len));\n+            }\n+\n+            if ((month >= 1 && month <= MAX_MONTH) && (day >= 1 && day <= MAX_DAY)) {\n+                parsedDate = true;\n+            }\n+        }\n+        if (!parsedDate) {\n+            throw new java.lang.IllegalArgumentException(\"Cannot parse the date from \" + s);\n+        }\n+\n+        // Get the time. Hour, minute, second and colons are all optional\n+        if (hasDividing && dividingEnd < len - 1) {\n+            if (firstColon == -1) {\n+                hour = Integer.parseInt(s.substring(dividingEnd + 1, len));\n+            }\n+            else {\n+                hour = Integer.parseInt(s.substring(dividingEnd + 1, firstColon));\n+                if (firstColon < len - 1) {\n+                    if (secondColon == -1) {\n+                        minute = Integer.parseInt(s.substring(firstColon + 1, len));\n+                    }\n+                    else {\n+                        minute = Integer.parseInt(s.substring(firstColon + 1, secondColon));\n+                        if (secondColon < len - 1) {\n+                            if (period == -1) {\n+                                second = Integer.parseInt(s.substring(secondColon + 1, len));\n+                            }\n+                            else {\n+                                second = Integer.parseInt(s.substring(secondColon + 1, period));\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        StringBuilder cleanedTimestamp = new StringBuilder();\n+        cleanedTimestamp = cleanedTimestamp", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0NDk5Ng==", "bodyText": "Absolutely! Addressed.", "url": "https://github.com/debezium/debezium/pull/1930#discussion_r519644996", "createdAt": "2020-11-09T08:57:34Z", "author": {"login": "keweishang"}, "path": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/MySqlDefaultValueConverter.java", "diffHunk": "@@ -259,6 +260,125 @@ private DateTimeFormatter timestampFormat(int length) {\n         return dtf.toFormatter();\n     }\n \n+    /**\n+     * Clean input timestamp to yyyy-mm-dd hh:mm:ss[.fffffffff] format\n+     *\n+     * @param s input timestamp\n+     * @return cleaned timestamp\n+     */\n+    private String cleanTimestamp(String s) {\n+        if (s == null) {\n+            throw new java.lang.IllegalArgumentException(\"null string\");\n+        }\n+\n+        s = s.trim();\n+\n+        final int MAX_MONTH = 12;\n+        final int MAX_DAY = 31;\n+\n+        // Parse the date\n+        int firstDash = s.indexOf('-');\n+        int secondDash = s.indexOf('-', firstDash + 1);\n+\n+        int dividingStart = -1;\n+        int dividingEnd = -1;\n+        boolean hasDividing = false;\n+        for (int i = secondDash + 1; i < s.length(); i++) {\n+            if (!Character.isDigit(s.charAt(i))) {\n+                dividingStart = i;\n+                hasDividing = true;\n+                break;\n+            }\n+        }\n+        if (hasDividing) {\n+            for (int i = dividingStart; i < s.length(); i++) {\n+                if (Character.isDigit(s.charAt(i))) {\n+                    break;\n+                }\n+                dividingEnd = i;\n+            }\n+        }\n+\n+        // Parse the time\n+        int firstColon = s.indexOf(':', dividingEnd + 1);\n+        int secondColon = s.indexOf(':', firstColon + 1);\n+        int period = s.indexOf('.', secondColon + 1);\n+\n+        int year = 0;\n+        int month = 0;\n+        int day = 0;\n+        int hour = 0;\n+        int minute = 0;\n+        int second = 0;\n+\n+        // Get the date\n+        int len = s.length();\n+        boolean parsedDate = false;\n+        if (firstDash > 0 && secondDash > firstDash) {\n+            year = Integer.parseInt(s.substring(0, firstDash));\n+            month = Integer.parseInt(s.substring(firstDash + 1, secondDash));\n+            if (hasDividing) {\n+                day = Integer.parseInt(s.substring(secondDash + 1, dividingStart));\n+            }\n+            else {\n+                day = Integer.parseInt(s.substring(secondDash + 1, len));\n+            }\n+\n+            if ((month >= 1 && month <= MAX_MONTH) && (day >= 1 && day <= MAX_DAY)) {\n+                parsedDate = true;\n+            }\n+        }\n+        if (!parsedDate) {\n+            throw new java.lang.IllegalArgumentException(\"Cannot parse the date from \" + s);\n+        }\n+\n+        // Get the time. Hour, minute, second and colons are all optional\n+        if (hasDividing && dividingEnd < len - 1) {\n+            if (firstColon == -1) {\n+                hour = Integer.parseInt(s.substring(dividingEnd + 1, len));\n+            }\n+            else {\n+                hour = Integer.parseInt(s.substring(dividingEnd + 1, firstColon));\n+                if (firstColon < len - 1) {\n+                    if (secondColon == -1) {\n+                        minute = Integer.parseInt(s.substring(firstColon + 1, len));\n+                    }\n+                    else {\n+                        minute = Integer.parseInt(s.substring(firstColon + 1, secondColon));\n+                        if (secondColon < len - 1) {\n+                            if (period == -1) {\n+                                second = Integer.parseInt(s.substring(secondColon + 1, len));\n+                            }\n+                            else {\n+                                second = Integer.parseInt(s.substring(secondColon + 1, period));\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        StringBuilder cleanedTimestamp = new StringBuilder();\n+        cleanedTimestamp = cleanedTimestamp", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU3OTEyNQ=="}, "originalCommit": null, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzE0Mjk0OnYy", "diffSide": "RIGHT", "path": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/MySqlAntlrDdlParserTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNjo1Njo1OVrOHvg7KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODo1MzozNFrOHvkeMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU4NDU1Mw==", "bodyText": "Is also acceptable case when there is the period but no following numbers?", "url": "https://github.com/debezium/debezium/pull/1930#discussion_r519584553", "createdAt": "2020-11-09T06:56:59Z", "author": {"login": "jpechane"}, "path": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/MySqlAntlrDdlParserTest.java", "diffHunk": "@@ -2542,6 +2544,87 @@ public void shouldNotNullPositionBeforeOrAfterDefaultValue() {\n         assertThat(table.columnWithName(\"ts_col5\").defaultValue()).isEqualTo(isoEpoch);\n     }\n \n+    @Test\n+    @FixFor(\"DBZ-2726\")\n+    public void shouldParseTimestampDefaultValue() {\n+        // All the following default values for TIMESTAMP can be successfully applied to MySQL\n+        String ddl = \"CREATE TABLE my_table (\" +\n+                \"ts_col01 TIMESTAMP DEFAULT '2020-01-02',\" +\n+                \"ts_col02 TIMESTAMP DEFAULT '2020-01-02 ',\" +\n+                \"ts_col03 TIMESTAMP DEFAULT '2020-01-02:',\" +\n+                \"ts_col04 TIMESTAMP DEFAULT '2020-01-02--',\" +\n+                \"ts_col05 TIMESTAMP DEFAULT '2020-01-02 03',\" +\n+                \"ts_col06 TIMESTAMP DEFAULT '2020-01-02 003',\" +\n+                \"ts_col07 TIMESTAMP DEFAULT '2020-01-02 03:',\" +\n+                \"ts_col08 TIMESTAMP DEFAULT '2020-01-02 03:04',\" +\n+                \"ts_col09 TIMESTAMP DEFAULT '2020-01-02 03:004',\" +\n+                \"ts_col10 TIMESTAMP DEFAULT '2020-01-02 03:04:05',\" +\n+                \"ts_col11 TIMESTAMP DEFAULT '2020-01-02 03:04:05.6',\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0MjY3NA==", "bodyText": "It is an acceptable case both in MySQL and in Debezium when no numbers follow the period. I just added a test case for it.", "url": "https://github.com/debezium/debezium/pull/1930#discussion_r519642674", "createdAt": "2020-11-09T08:53:34Z", "author": {"login": "keweishang"}, "path": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/MySqlAntlrDdlParserTest.java", "diffHunk": "@@ -2542,6 +2544,87 @@ public void shouldNotNullPositionBeforeOrAfterDefaultValue() {\n         assertThat(table.columnWithName(\"ts_col5\").defaultValue()).isEqualTo(isoEpoch);\n     }\n \n+    @Test\n+    @FixFor(\"DBZ-2726\")\n+    public void shouldParseTimestampDefaultValue() {\n+        // All the following default values for TIMESTAMP can be successfully applied to MySQL\n+        String ddl = \"CREATE TABLE my_table (\" +\n+                \"ts_col01 TIMESTAMP DEFAULT '2020-01-02',\" +\n+                \"ts_col02 TIMESTAMP DEFAULT '2020-01-02 ',\" +\n+                \"ts_col03 TIMESTAMP DEFAULT '2020-01-02:',\" +\n+                \"ts_col04 TIMESTAMP DEFAULT '2020-01-02--',\" +\n+                \"ts_col05 TIMESTAMP DEFAULT '2020-01-02 03',\" +\n+                \"ts_col06 TIMESTAMP DEFAULT '2020-01-02 003',\" +\n+                \"ts_col07 TIMESTAMP DEFAULT '2020-01-02 03:',\" +\n+                \"ts_col08 TIMESTAMP DEFAULT '2020-01-02 03:04',\" +\n+                \"ts_col09 TIMESTAMP DEFAULT '2020-01-02 03:004',\" +\n+                \"ts_col10 TIMESTAMP DEFAULT '2020-01-02 03:04:05',\" +\n+                \"ts_col11 TIMESTAMP DEFAULT '2020-01-02 03:04:05.6',\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU4NDU1Mw=="}, "originalCommit": null, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4157, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}