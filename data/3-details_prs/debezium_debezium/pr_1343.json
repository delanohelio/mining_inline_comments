{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4MDU5MzU3", "number": 1343, "title": "DBZ-1531 added headers for primary key update events", "bodyText": "DBZ-1531 added headers for primary key update events to reference the original key\nCurrent state:\n\nimplementation for the \"new\" relational* architecture (postgres and sqlserver) is done and unit tests added, but sqlserver is not capable\nMySQL server is done and tested\nMongoDB uses the default new Relational* architecture imlpementation, if it sends an UPDATE event that DBZ can recognize as PK update, then it should send the header. but I doubt that (based on the code) and also had no time to test this, so I expect it doesn't set the header.\nunit tests updated\nunit tests for postgres are green\nsqlserver doesn't support primary key upate recognition by debezium (it sends separate DELETE and INSERT events for a PK update and it looks like it doesn't carry the previous key in any field, correct me when I'm wrong)", "createdAt": "2020-03-13T23:31:04Z", "url": "https://github.com/debezium/debezium/pull/1343", "merged": true, "mergeCommit": {"oid": "89bb6eba6c0cd94dd85a84616fe9ff17d64b0ce6"}, "closed": true, "closedAt": "2020-03-25T11:33:39Z", "author": {"login": "rk3rn3r"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcOKimgAH2gAyMzg4MDU5MzU3OjcxNzUxNGNkMjdjMmJmZGEyZDFjMmUyYzM4NWViOWZiZTQ0YTkzOTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRF366AFqTM4MTA0NDk5Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "717514cd27c2bfda2d1c2e2c385eb9fbe44a9392", "author": {"user": {"login": "rk3rn3r", "name": "Ren\u00e9 Kerner"}}, "url": "https://github.com/debezium/debezium/commit/717514cd27c2bfda2d1c2e2c385eb9fbe44a9392", "committedDate": "2020-03-16T09:17:52Z", "message": "DBZ-1531 added headers for primary key update events to reference the original key"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "717514cd27c2bfda2d1c2e2c385eb9fbe44a9392", "author": {"user": {"login": "rk3rn3r", "name": "Ren\u00e9 Kerner"}}, "url": "https://github.com/debezium/debezium/commit/717514cd27c2bfda2d1c2e2c385eb9fbe44a9392", "committedDate": "2020-03-16T09:17:52Z", "message": "DBZ-1531 added headers for primary key update events to reference the original key"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86d6494aedda966c379b8e00a495050c93e233d0", "author": {"user": {"login": "rk3rn3r", "name": "Ren\u00e9 Kerner"}}, "url": "https://github.com/debezium/debezium/commit/86d6494aedda966c379b8e00a495050c93e233d0", "committedDate": "2020-03-16T16:52:00Z", "message": "DBZ-1531 added headers for primary key update events to reference the original key"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "86d6494aedda966c379b8e00a495050c93e233d0", "author": {"user": {"login": "rk3rn3r", "name": "Ren\u00e9 Kerner"}}, "url": "https://github.com/debezium/debezium/commit/86d6494aedda966c379b8e00a495050c93e233d0", "committedDate": "2020-03-16T16:52:00Z", "message": "DBZ-1531 added headers for primary key update events to reference the original key"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1Nzk4NjUx", "url": "https://github.com/debezium/debezium/pull/1343#pullrequestreview-375798651", "createdAt": "2020-03-17T07:44:03Z", "commit": {"oid": "86d6494aedda966c379b8e00a495050c93e233d0"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwNzo0NDowM1rOF3Q1bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwNzo0NzozNlrOF3Q6uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ5MTgyMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void shouldEmitOldkeyHeaderOnPrimaryKeyUpdate() throws Exception {\n          \n          \n            \n                public void shouldEmitOldKeyHeaderOnPrimaryKeyUpdate() throws Exception {", "url": "https://github.com/debezium/debezium/pull/1343#discussion_r393491820", "createdAt": "2020-03-17T07:44:03Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/MySqlConnectorIT.java", "diffHunk": "@@ -1983,4 +2014,57 @@ private void waitForStreamingRunning(String serverName) throws InterruptedExcept\n         final List<SourceRecord> uc = records.recordsForTopic(RO_DATABASE.topicForTable(\"Products\"));\n         return uc != null ? uc : records.recordsForTopic(RO_DATABASE.topicForTable(\"products\"));\n     }\n+\n+    @Test\n+    @FixFor(\"DBZ-1531\")\n+    public void shouldEmitOldkeyHeaderOnPrimaryKeyUpdate() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d6494aedda966c379b8e00a495050c93e233d0"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ5MjM4Mg==", "bodyText": "Ok, so that's still WIP, right :)\nBtw. IIRC you mentioned via DM that it couldn't be done for MySQL because it would send DELETE + UPDATE by itself. If true indeed, it seems there should be no test for MySQL to begin with?", "url": "https://github.com/debezium/debezium/pull/1343#discussion_r393492382", "createdAt": "2020-03-17T07:45:31Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/MySqlConnectorIT.java", "diffHunk": "@@ -1983,4 +2014,57 @@ private void waitForStreamingRunning(String serverName) throws InterruptedExcept\n         final List<SourceRecord> uc = records.recordsForTopic(RO_DATABASE.topicForTable(\"Products\"));\n         return uc != null ? uc : records.recordsForTopic(RO_DATABASE.topicForTable(\"products\"));\n     }\n+\n+    @Test\n+    @FixFor(\"DBZ-1531\")\n+    public void shouldEmitOldkeyHeaderOnPrimaryKeyUpdate() throws Exception {\n+        config = DATABASE.defaultConfig()\n+                .with(MySqlConnectorConfig.SNAPSHOT_MODE, MySqlConnectorConfig.SnapshotMode.NEVER)\n+                .build();\n+\n+        // Start the connector ...\n+        start(MySqlConnector.class, config);\n+\n+        // ---------------------------------------------------------------------------------------------------------------\n+        // Consume all of the events due to startup and initialization of the database\n+        // ---------------------------------------------------------------------------------------------------------------\n+        SourceRecords records = consumeRecordsByTopic(INITIAL_EVENT_COUNT); // 6 DDL changes\n+        assertThat(records.recordsForTopic(DATABASE.topicForTable(\"orders\")).size()).isEqualTo(5);\n+\n+        try (MySQLConnection db = MySQLConnection.forTestDatabase(DATABASE.getDatabaseName());) {\n+            try (JdbcConnection connection = db.connect()) {\n+                connection.execute(\"UPDATE orders SET order_number=10303 WHERE order_number=10003\");\n+            }\n+        }\n+        // Consume the update of the PK, which is one insert followed by a delete followed by a tombstone ...\n+        records = consumeRecordsByTopic(3);\n+        List<SourceRecord> updates = records.recordsForTopic(DATABASE.topicForTable(\"orders\"));\n+\n+        assertThat(updates.size()).isEqualTo(3);\n+\n+        SourceRecord deleteRecord = updates.get(0);\n+        assertEquals(1, deleteRecord.headers().size()); // to be removed/updated once we set additional headers\n+        Header keyPKUpdateHeader = getPKUpdateNewKeyHeader(deleteRecord);\n+        assertEquals(Integer.valueOf(10303), ((Struct) keyPKUpdateHeader.value()).getInt32(\"order_number\"));\n+\n+        SourceRecord insertRecord = updates.get(2);\n+        assertEquals(1, insertRecord.headers().size()); // to be removed/updated once we set additional headers\n+        keyPKUpdateHeader = getPKUpdateOldKeyHeader(insertRecord);\n+        assertEquals(Integer.valueOf(10003), ((Struct) keyPKUpdateHeader.value()).getInt32(\"order_number\"));\n+\n+        try (MySQLConnection db = MySQLConnection.forTestDatabase(DATABASE.getDatabaseName());) {\n+            try (JdbcConnection connection = db.connect()) {\n+                connection.execute(\"UPDATE orders SET quantity=5 WHERE order_number=10004\");\n+            }\n+        }\n+        records = consumeRecordsByTopic(5);\n+        updates = records.recordsForTopic(DATABASE.topicForTable(\"orders\"));\n+        assertThat(updates.size()).isEqualTo(1);\n+\n+        SourceRecord updateRecord = updates.get(0);\n+        assertEquals(0, updateRecord.headers().size()); // to be removed/updated once we set additional headers", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d6494aedda966c379b8e00a495050c93e233d0"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ5MjkzOQ==", "bodyText": "I'm a bit confused by these. Are these TODO markers for later (after this PR), or are you planning to address them as part of this PR?", "url": "https://github.com/debezium/debezium/pull/1343#discussion_r393492939", "createdAt": "2020-03-17T07:47:00Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/RecordsStreamProducerIT.java", "diffHunk": "@@ -693,6 +710,11 @@ public void shouldReceiveChangesForUpdatesWithPKChanges() throws Exception {\n         assertEquals(topicName, deleteRecord.topic());\n         VerifyRecord.isValidDelete(deleteRecord, PK_FIELD, 1);\n \n+        assertEquals(1, deleteRecord.headers().size()); // to be removed/updated once we set additional headers", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d6494aedda966c379b8e00a495050c93e233d0"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ5MzE3Ng==", "bodyText": "Is this going to be addressed as part of this PR?", "url": "https://github.com/debezium/debezium/pull/1343#discussion_r393493176", "createdAt": "2020-03-17T07:47:36Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/pipeline/spi/ChangeRecordEmitter.java", "diffHunk": "@@ -30,6 +31,20 @@\n     OffsetContext getOffset();\n \n     public interface Receiver {\n-        void changeRecord(DataCollectionSchema schema, Operation operation, Object key, Struct value, OffsetContext offset) throws InterruptedException;\n+        void changeRecord(DataCollectionSchema schema,\n+                          Operation operation,\n+                          Object key, Struct value,\n+                          OffsetContext offset)\n+                throws InterruptedException;\n+\n+        default void changeRecord(DataCollectionSchema schema,\n+                                  Operation operation,\n+                                  Object key, Struct value,\n+                                  OffsetContext offset,\n+                                  ConnectHeaders headers)\n+                throws InterruptedException {\n+            throw new RuntimeException(\"Not implemented yet in \" + this.getClass().getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d6494aedda966c379b8e00a495050c93e233d0"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61bd7f850f8cb8d749bb577af0dcc55217e734a4", "author": {"user": {"login": "gunnarmorling", "name": "Gunnar Morling"}}, "url": "https://github.com/debezium/debezium/commit/61bd7f850f8cb8d749bb577af0dcc55217e734a4", "committedDate": "2020-03-17T09:06:06Z", "message": "DBZ-1531 Typo fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1ODU1NDA1", "url": "https://github.com/debezium/debezium/pull/1343#pullrequestreview-375855405", "createdAt": "2020-03-17T09:15:35Z", "commit": {"oid": "61bd7f850f8cb8d749bb577af0dcc55217e734a4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOToxNTozNVrOF3TmpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOToxNTozNVrOF3TmpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUzNzE4OA==", "bodyText": "what do you think about the const name and the header field name?\nI was also thinking about pk-update-ref-oldkey and  pk-update-ref-oldkey or similar, or namespacing it somehow with debezium?\n(applies also to next line)", "url": "https://github.com/debezium/debezium/pull/1343#discussion_r393537188", "createdAt": "2020-03-17T09:15:35Z", "author": {"login": "rk3rn3r"}, "path": "debezium-core/src/main/java/io/debezium/relational/RelationalChangeRecordEmitter.java", "diffHunk": "@@ -25,6 +26,9 @@\n  */\n public abstract class RelationalChangeRecordEmitter extends AbstractChangeRecordEmitter<TableSchema> {\n \n+    public static final String PK_UPDATE_OLDKEY_FIELD = \"oldkey\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61bd7f850f8cb8d749bb577af0dcc55217e734a4"}, "originalPosition": 12}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc1dfa1f94685b87562c174adfbc4b1c9418aff8", "author": {"user": {"login": "rk3rn3r", "name": "Ren\u00e9 Kerner"}}, "url": "https://github.com/debezium/debezium/commit/fc1dfa1f94685b87562c174adfbc4b1c9418aff8", "committedDate": "2020-03-23T15:38:42Z", "message": "DBZ-1531 added headers for primary key update events to reference the original key"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "fc1dfa1f94685b87562c174adfbc4b1c9418aff8", "author": {"user": {"login": "rk3rn3r", "name": "Ren\u00e9 Kerner"}}, "url": "https://github.com/debezium/debezium/commit/fc1dfa1f94685b87562c174adfbc4b1c9418aff8", "committedDate": "2020-03-23T15:38:42Z", "message": "DBZ-1531 added headers for primary key update events to reference the original key"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "a07473f20405a53cb2d83e19d5c92a6b129737db", "author": {"user": {"login": "rk3rn3r", "name": "Ren\u00e9 Kerner"}}, "url": "https://github.com/debezium/debezium/commit/a07473f20405a53cb2d83e19d5c92a6b129737db", "committedDate": "2020-03-23T18:40:27Z", "message": "DBZ-1531 added headers for primary key update events to reference the original key\n* added docs for new Kafka message headers in MySQL and Postgres connectors for primary key update events"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "a07473f20405a53cb2d83e19d5c92a6b129737db", "author": {"user": {"login": "rk3rn3r", "name": "Ren\u00e9 Kerner"}}, "url": "https://github.com/debezium/debezium/commit/a07473f20405a53cb2d83e19d5c92a6b129737db", "committedDate": "2020-03-23T18:40:27Z", "message": "DBZ-1531 added headers for primary key update events to reference the original key\n* added docs for new Kafka message headers in MySQL and Postgres connectors for primary key update events"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba9b98dd7585e01e382765ca8639e2ea8180cc6b", "author": {"user": {"login": "gunnarmorling", "name": "Gunnar Morling"}}, "url": "https://github.com/debezium/debezium/commit/ba9b98dd7585e01e382765ca8639e2ea8180cc6b", "committedDate": "2020-03-25T11:31:26Z", "message": "DBZ-1531 Misc. clean-up;\n\n* Removing obsolete default impl\n* Completing test\n* Documention fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxMDQ0OTk3", "url": "https://github.com/debezium/debezium/pull/1343#pullrequestreview-381044997", "createdAt": "2020-03-25T11:01:59Z", "commit": {"oid": "a07473f20405a53cb2d83e19d5c92a6b129737db"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMTowMjowMFrOF7V6Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMToyODoyNlrOF7WyhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc2OTMxOQ==", "bodyText": "The formatting (line wrapping) changes mixed with actual code changes make it a bit harder to grasp than needed. Better to keep these things separate.", "url": "https://github.com/debezium/debezium/pull/1343#discussion_r397769319", "createdAt": "2020-03-25T11:02:00Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/pipeline/EventDispatcher.java", "diffHunk": "@@ -255,17 +262,27 @@ public void dispatchTransactionMessage(SourceRecord record) throws InterruptedEx\n     private final class StreamingChangeRecordReceiver implements ChangeRecordEmitter.Receiver {\n \n         @Override\n-        public void changeRecord(DataCollectionSchema dataCollectionSchema, Operation operation, Object key, Struct value, OffsetContext offsetContext)\n+        public void changeRecord(DataCollectionSchema dataCollectionSchema,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a07473f20405a53cb2d83e19d5c92a6b129737db"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc4MzY4NA==", "bodyText": "That's unused. I'll expand a bit to assert the header isn't present for this record.", "url": "https://github.com/debezium/debezium/pull/1343#discussion_r397783684", "createdAt": "2020-03-25T11:28:26Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/MySqlConnectorIT.java", "diffHunk": "@@ -1983,4 +2012,54 @@ private void waitForStreamingRunning(String serverName) throws InterruptedExcept\n         final List<SourceRecord> uc = records.recordsForTopic(RO_DATABASE.topicForTable(\"Products\"));\n         return uc != null ? uc : records.recordsForTopic(RO_DATABASE.topicForTable(\"products\"));\n     }\n+\n+    @Test\n+    @FixFor(\"DBZ-1531\")\n+    public void shouldEmitHeadersOnPrimaryKeyUpdate() throws Exception {\n+        config = DATABASE.defaultConfig()\n+                .with(MySqlConnectorConfig.SNAPSHOT_MODE, MySqlConnectorConfig.SnapshotMode.NEVER)\n+                .build();\n+\n+        // Start the connector ...\n+        start(MySqlConnector.class, config);\n+\n+        // ---------------------------------------------------------------------------------------------------------------\n+        // Consume all of the events due to startup and initialization of the database\n+        // ---------------------------------------------------------------------------------------------------------------\n+        SourceRecords records = consumeRecordsByTopic(INITIAL_EVENT_COUNT); // 6 DDL changes\n+        assertThat(records.recordsForTopic(DATABASE.topicForTable(\"orders\")).size()).isEqualTo(5);\n+\n+        try (MySQLConnection db = MySQLConnection.forTestDatabase(DATABASE.getDatabaseName());) {\n+            try (JdbcConnection connection = db.connect()) {\n+                connection.execute(\"UPDATE orders SET order_number=10303 WHERE order_number=10003\");\n+            }\n+        }\n+        // Consume the update of the PK, which is one insert followed by a delete followed by a tombstone ...\n+        records = consumeRecordsByTopic(3);\n+        List<SourceRecord> updates = records.recordsForTopic(DATABASE.topicForTable(\"orders\"));\n+\n+        assertThat(updates.size()).isEqualTo(3);\n+\n+        SourceRecord deleteRecord = updates.get(0);\n+        Header keyPKUpdateHeader = getPKUpdateNewKeyHeader(deleteRecord);\n+        assertEquals(Integer.valueOf(10303), ((Struct) keyPKUpdateHeader.value()).getInt32(\"order_number\"));\n+\n+        SourceRecord insertRecord = updates.get(2);\n+        keyPKUpdateHeader = getPKUpdateOldKeyHeader(insertRecord);\n+        assertEquals(Integer.valueOf(10003), ((Struct) keyPKUpdateHeader.value()).getInt32(\"order_number\"));\n+\n+        try (MySQLConnection db = MySQLConnection.forTestDatabase(DATABASE.getDatabaseName());) {\n+            try (JdbcConnection connection = db.connect()) {\n+                connection.execute(\"UPDATE orders SET quantity=5 WHERE order_number=10004\");\n+            }\n+        }\n+        records = consumeRecordsByTopic(5);\n+        updates = records.recordsForTopic(DATABASE.topicForTable(\"orders\"));\n+        assertThat(updates.size()).isEqualTo(1);\n+\n+        SourceRecord updateRecord = updates.get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a07473f20405a53cb2d83e19d5c92a6b129737db"}, "originalPosition": 122}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2140, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}