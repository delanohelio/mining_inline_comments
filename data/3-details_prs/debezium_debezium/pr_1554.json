{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3MTg5NDA1", "number": 1554, "title": "DBZ-2118 Close TX after type query", "bodyText": "https://issues.redhat.com/browse/DBZ-2144", "createdAt": "2020-06-03T13:06:26Z", "url": "https://github.com/debezium/debezium/pull/1554", "merged": true, "mergeCommit": {"oid": "13419ae74aff536af97d5f4e717cb623b2141454"}, "closed": true, "closedAt": "2020-06-08T07:22:06Z", "author": {"login": "jpechane"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcnrMZLgFqTQyMzY3MTA1OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcpLOrfAFqTQyNTk2OTk3MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzNjcxMDU4", "url": "https://github.com/debezium/debezium/pull/1554#pullrequestreview-423671058", "createdAt": "2020-06-03T15:28:16Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNToyODoxN1rOGehQKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNToyODoxN1rOGehQKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY1NTI3NA==", "bodyText": "Why does it commit here, in particular for each iteration in the result set?", "url": "https://github.com/debezium/debezium/pull/1554#discussion_r434655274", "createdAt": "2020-06-03T15:28:17Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/TypeRegistry.java", "diffHunk": "@@ -405,6 +405,9 @@ private PostgresType loadType(Connection connection, PreparedStatement statement\n             while (rs.next()) {\n                 PostgresType result = createTypeBuilderFromResultSet(connection, rs, typeInfo, sqlTypeMapper).build();\n                 addType(result);\n+                if (!connection.getAutoCommit() ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzOTE3NzE0", "url": "https://github.com/debezium/debezium/pull/1554#pullrequestreview-423917714", "createdAt": "2020-06-03T20:48:31Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDo0ODozMVrOGesy2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDo0ODozMVrOGesy2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg0NDM3Ng==", "bodyText": "So where is this transaction started? For the sake of symmetry, I  think BEGIN/COMMIT should be in one and the same method.", "url": "https://github.com/debezium/debezium/pull/1554#discussion_r434844376", "createdAt": "2020-06-03T20:48:31Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/TypeRegistry.java", "diffHunk": "@@ -405,6 +405,9 @@ private PostgresType loadType(Connection connection, PreparedStatement statement\n             while (rs.next()) {\n                 PostgresType result = createTypeBuilderFromResultSet(connection, rs, typeInfo, sqlTypeMapper).build();\n                 addType(result);\n+                if (!connection.getAutoCommit()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "df57008446bcdd2049c8169c2ce42c422852d818", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/df57008446bcdd2049c8169c2ce42c422852d818", "committedDate": "2020-06-04T06:52:29Z", "message": "DBZ-2118 Close TX after type query"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "df57008446bcdd2049c8169c2ce42c422852d818", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/df57008446bcdd2049c8169c2ce42c422852d818", "committedDate": "2020-06-04T06:52:29Z", "message": "DBZ-2118 Close TX after type query"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MzMwNzcx", "url": "https://github.com/debezium/debezium/pull/1554#pullrequestreview-424330771", "createdAt": "2020-06-04T11:01:01Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMTowMTowMVrOGfApSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMTowNDowN1rOGfAvfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE2OTYxMQ==", "bodyText": "This assertion is failing for me locally with PG 10. There are two transactions:\nSELECT        result.TABLE_CAT,        result.TABLE_SCHEM,        result.TABLE_NAME,        result.COLUMN_NAME,        result.KEY_SEQ,        result.PK_NAME FROM      (SELECT NULL AS TABLE_CAT, n.nspname AS TABLE_SCHEM,   ct.relname AS TABLE_NAME, a.attname AS COLUMN_NAME,   (information_schema._pg_expandarray(i.indkey)).n AS KEY_SEQ, ci.relname AS PK_NAME,   information_schema._pg_expandarray(i.indkey) AS KEYS, a.attnum AS A_ATTNUM FROM pg_catalog.pg_class ct   JOIN pg_catalog.pg_attribute a ON (ct.oid = a.attrelid)   JOIN pg_catalog.pg_namespace n ON (ct.relnamespace = n.oid)   JOIN pg_catalog.pg_index i ON ( a.attrelid = i.indrelid)   JOIN pg_catalog.pg_class ci ON (ci.oid = i.indexrelid) WHERE true  AND n.nspname = 's1' AND ct.relname = 'b' AND i.indisprimary  ) result where  result.A_ATTNUM = (result.KEYS).x  ORDER BY result.table_name, result.pk_name, result.key_seq\n\nSELECT query FROM pg_stat_activity WHERE backend_xmin IS NOT NULL ORDER BY age(backend_xmin) DESC", "url": "https://github.com/debezium/debezium/pull/1554#discussion_r435169611", "createdAt": "2020-06-04T11:01:01Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresConnectorIT.java", "diffHunk": "@@ -826,6 +826,43 @@ public void shouldRemoveWhiteSpaceChars() throws Exception {\n         assertThat(sourceTable).isEqualTo(\"b\");\n     }\n \n+    @Test\n+    @FixFor(\"DBZ-2118\")\n+    public void shouldCloseTxAfterTypeQuery() throws Exception {\n+        String setupStmt = SETUP_TABLES_STMT;\n+\n+        TestHelper.execute(setupStmt);\n+        Configuration.Builder configBuilder = TestHelper.defaultConfig()\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.INITIAL.getValue())\n+                .with(PostgresConnectorConfig.DROP_SLOT_ON_STOP, Boolean.TRUE)\n+                .with(PostgresConnectorConfig.SCHEMA_WHITELIST, \"s1\")\n+                .with(PostgresConnectorConfig.TABLE_WHITELIST, \"s1.b\");\n+\n+        start(PostgresConnector.class, configBuilder.build());\n+        assertConnectorIsRunning();\n+        waitForSnapshotToBeCompleted();\n+\n+        TestHelper.execute(\"CREATE TABLE s1.b (pk SERIAL, aa isbn, PRIMARY KEY(pk));\", \"INSERT INTO s1.b (aa) VALUES ('978-0-393-04002-9')\");\n+        SourceRecords actualRecords = consumeRecordsByTopic(1);\n+\n+        List<SourceRecord> records = actualRecords.recordsForTopic(topicName(\"s1.b\"));\n+        assertThat(records.size()).isEqualTo(1);\n+\n+        SourceRecord record = records.get(0);\n+        VerifyRecord.isValidInsert(record, PK_FIELD, 1);\n+\n+        try (final PostgresConnection connection = TestHelper.create()) {\n+            try {\n+                Awaitility.await()\n+                        .atMost(TestHelper.waitTimeForRecords(), TimeUnit.SECONDS)\n+                        .until(() -> getActiveTransactions(connection).size() == 1);\n+            }\n+            catch (ConditionTimeoutException e) {\n+            }\n+            assertThat(getActiveTransactions(connection)).hasSize(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE2OTc5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Objects.requireNonNull(typeRegistry, \"Conection does not provide type registry\");\n          \n          \n            \n                    Objects.requireNonNull(typeRegistry, \"Connection does not provide type registry\");", "url": "https://github.com/debezium/debezium/pull/1554#discussion_r435169799", "createdAt": "2020-06-04T11:01:26Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/connection/PostgresConnection.java", "diffHunk": "@@ -483,6 +494,7 @@ protected int resolveJdbcType(int metadataJdbcType, int nativeType) {\n     }\n \n     public TypeRegistry getTypeRegistry() {\n+        Objects.requireNonNull(typeRegistry, \"Conection does not provide type registry\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE3MDcxNA==", "bodyText": "Shouldn't it rather be true by default?", "url": "https://github.com/debezium/debezium/pull/1554#discussion_r435170714", "createdAt": "2020-06-04T11:03:05Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/connection/PostgresConnection.java", "diffHunk": "@@ -66,13 +67,23 @@\n      * Creates a Postgres connection using the supplied configuration.\n      *\n      * @param config {@link Configuration} instance, may not be null.\n+     * @param provideTypeRegistry {@code true} if type registry should be created\n      */\n-    public PostgresConnection(Configuration config) {\n+    public PostgresConnection(Configuration config, boolean provideTypeRegistry) {\n         super(config, FACTORY, PostgresConnection::validateServerVersion, PostgresConnection::defaultSettings);\n-        this.typeRegistry = new TypeRegistry(this);\n+        this.typeRegistry = provideTypeRegistry ? new TypeRegistry(this) : null;\n         databaseCharset = determineDatabaseCharset();\n     }\n \n+    /**\n+     * Creates a Postgres connection using the supplied configuration.\n+     *\n+     * @param config {@link Configuration} instance, may not be null.\n+     */\n+    public PostgresConnection(Configuration config) {\n+        this(config, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE3MTE5Nw==", "bodyText": "That said, I don't quite get how it's meant to work to begin with. Could you comment in the test? Thx!", "url": "https://github.com/debezium/debezium/pull/1554#discussion_r435171197", "createdAt": "2020-06-04T11:04:07Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/connection/PostgresConnection.java", "diffHunk": "@@ -66,13 +67,23 @@\n      * Creates a Postgres connection using the supplied configuration.\n      *\n      * @param config {@link Configuration} instance, may not be null.\n+     * @param provideTypeRegistry {@code true} if type registry should be created\n      */\n-    public PostgresConnection(Configuration config) {\n+    public PostgresConnection(Configuration config, boolean provideTypeRegistry) {\n         super(config, FACTORY, PostgresConnection::validateServerVersion, PostgresConnection::defaultSettings);\n-        this.typeRegistry = new TypeRegistry(this);\n+        this.typeRegistry = provideTypeRegistry ? new TypeRegistry(this) : null;\n         databaseCharset = determineDatabaseCharset();\n     }\n \n+    /**\n+     * Creates a Postgres connection using the supplied configuration.\n+     *\n+     * @param config {@link Configuration} instance, may not be null.\n+     */\n+    public PostgresConnection(Configuration config) {\n+        this(config, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE3MDcxNA=="}, "originalCommit": null, "originalPosition": 28}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "db382e3b716fe93d085e9da62b59a27afb8a8829", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/db382e3b716fe93d085e9da62b59a27afb8a8829", "committedDate": "2020-06-04T11:16:08Z", "message": "DBZ-2118 Type registry provided only for dedicated connections"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "db382e3b716fe93d085e9da62b59a27afb8a8829", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/db382e3b716fe93d085e9da62b59a27afb8a8829", "committedDate": "2020-06-04T11:16:08Z", "message": "DBZ-2118 Type registry provided only for dedicated connections"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NDA5Mzkx", "url": "https://github.com/debezium/debezium/pull/1554#pullrequestreview-424409391", "createdAt": "2020-06-04T12:53:46Z", "commit": {"oid": "db382e3b716fe93d085e9da62b59a27afb8a8829"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjo1Mzo0NlrOGfESuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjo1Mzo0NlrOGfESuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIyOTM2OA==", "bodyText": "This looks like it could be race condition. Relying on the 5 ms poll in consumeRecordsByTopic to ensure that the connector picked up the records seems flaky. A specific case where this would be problematic is if a developer wanted to use a debugger on the connecter during this test. What about polling on the JMX field totalNumberOfEventsSeen to wait till we are sure the connector pushed the record?", "url": "https://github.com/debezium/debezium/pull/1554#discussion_r435229368", "createdAt": "2020-06-04T12:53:46Z", "author": {"login": "grantcooksey"}, "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresConnectorIT.java", "diffHunk": "@@ -826,6 +826,43 @@ public void shouldRemoveWhiteSpaceChars() throws Exception {\n         assertThat(sourceTable).isEqualTo(\"b\");\n     }\n \n+    @Test\n+    @FixFor(\"DBZ-2118\")\n+    public void shouldCloseTxAfterTypeQuery() throws Exception {\n+        String setupStmt = SETUP_TABLES_STMT;\n+\n+        TestHelper.execute(setupStmt);\n+        Configuration.Builder configBuilder = TestHelper.defaultConfig()\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.INITIAL.getValue())\n+                .with(PostgresConnectorConfig.DROP_SLOT_ON_STOP, Boolean.TRUE)\n+                .with(PostgresConnectorConfig.SCHEMA_WHITELIST, \"s1\")\n+                .with(PostgresConnectorConfig.TABLE_WHITELIST, \"s1.b\");\n+\n+        start(PostgresConnector.class, configBuilder.build());\n+        assertConnectorIsRunning();\n+        waitForSnapshotToBeCompleted();\n+\n+        TestHelper.execute(\"CREATE TABLE s1.b (pk SERIAL, aa isbn, PRIMARY KEY(pk));\", \"INSERT INTO s1.b (aa) VALUES ('978-0-393-04002-9')\");\n+        SourceRecords actualRecords = consumeRecordsByTopic(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db382e3b716fe93d085e9da62b59a27afb8a8829"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bf9d11a168df3613574ba656731115bc62b9b09", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/0bf9d11a168df3613574ba656731115bc62b9b09", "committedDate": "2020-06-04T13:31:58Z", "message": "DBZ-2118 Switch to manual tx management"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5cce8624248edb17adc32291b5980a18380e9b3", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/f5cce8624248edb17adc32291b5980a18380e9b3", "committedDate": "2020-06-04T13:54:35Z", "message": "DBZ-2118 Slot dropping more resilient to race"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4767abac1bc17144f2a49da04f70ad9b73e8495", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/c4767abac1bc17144f2a49da04f70ad9b73e8495", "committedDate": "2020-06-05T04:17:14Z", "message": "DBZ-2118 Document type registry connection capability"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1OTY5OTcx", "url": "https://github.com/debezium/debezium/pull/1554#pullrequestreview-425969971", "createdAt": "2020-06-08T07:21:58Z", "commit": {"oid": "c4767abac1bc17144f2a49da04f70ad9b73e8495"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2566, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}