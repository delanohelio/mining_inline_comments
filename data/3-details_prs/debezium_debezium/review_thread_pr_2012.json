{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwMDE2ODE0", "number": 2012, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzowMjo1M1rOFFk5Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOTozNTo1MlrOFHuW_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzkxNjg3OnYy", "diffSide": "RIGHT", "path": "debezium-testing/debezium-testing-testcontainers/src/test/java/io/debezium/testing/testcontainers/ApicurioRegistryTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzowMjo1M1rOIGJzZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwOToyMToxMFrOIG7hGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMyMjk4MQ==", "bodyText": "@ani-sha Could you please extend the scope of this PR and sove it also for other container like apicurio here or connect below? Ideally all images used in all tests should be defined in a single place.", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r543322981", "createdAt": "2020-12-15T13:02:53Z", "author": {"login": "jpechane"}, "path": "debezium-testing/debezium-testing-testcontainers/src/test/java/io/debezium/testing/testcontainers/ApicurioRegistryTest.java", "diffHunk": "@@ -55,11 +55,10 @@\n     private static final String DEBEZIUM_VERSION = \"1.3.0.Final\";\n     private static final String APICURIO_VERSION = \"1.3.2.Final\";\n \n-    private static final DockerImageName POSTGRES_DOCKER_IMAGE_NAME = DockerImageName.parse(\"debezium/postgres:11\")\n-            .asCompatibleSubstituteFor(\"postgres\");\n-\n     private static Network network = Network.newNetwork();\n \n+    private static final PostgresInfrastructure POSTGRES_INFRASTRUCTURE = PostgresInfrastructure.getDebeziumPostgresDefaultInfrastructure(network);\n+\n     private static GenericContainer<?> apicurioContainer = new GenericContainer<>(\"apicurio/apicurio-registry-mem:\" + APICURIO_VERSION)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM3NTgwNA==", "bodyText": "@jpechane ok sure, on it.", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r543375804", "createdAt": "2020-12-15T14:13:15Z", "author": {"login": "ani-sha"}, "path": "debezium-testing/debezium-testing-testcontainers/src/test/java/io/debezium/testing/testcontainers/ApicurioRegistryTest.java", "diffHunk": "@@ -55,11 +55,10 @@\n     private static final String DEBEZIUM_VERSION = \"1.3.0.Final\";\n     private static final String APICURIO_VERSION = \"1.3.2.Final\";\n \n-    private static final DockerImageName POSTGRES_DOCKER_IMAGE_NAME = DockerImageName.parse(\"debezium/postgres:11\")\n-            .asCompatibleSubstituteFor(\"postgres\");\n-\n     private static Network network = Network.newNetwork();\n \n+    private static final PostgresInfrastructure POSTGRES_INFRASTRUCTURE = PostgresInfrastructure.getDebeziumPostgresDefaultInfrastructure(network);\n+\n     private static GenericContainer<?> apicurioContainer = new GenericContainer<>(\"apicurio/apicurio-registry-mem:\" + APICURIO_VERSION)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMyMjk4MQ=="}, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEzNzQ5Nw==", "bodyText": "Do I sense scope creep here ;) But agreed, it's a reasonable expansion.", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r544137497", "createdAt": "2020-12-16T09:21:10Z", "author": {"login": "gunnarmorling"}, "path": "debezium-testing/debezium-testing-testcontainers/src/test/java/io/debezium/testing/testcontainers/ApicurioRegistryTest.java", "diffHunk": "@@ -55,11 +55,10 @@\n     private static final String DEBEZIUM_VERSION = \"1.3.0.Final\";\n     private static final String APICURIO_VERSION = \"1.3.2.Final\";\n \n-    private static final DockerImageName POSTGRES_DOCKER_IMAGE_NAME = DockerImageName.parse(\"debezium/postgres:11\")\n-            .asCompatibleSubstituteFor(\"postgres\");\n-\n     private static Network network = Network.newNetwork();\n \n+    private static final PostgresInfrastructure POSTGRES_INFRASTRUCTURE = PostgresInfrastructure.getDebeziumPostgresDefaultInfrastructure(network);\n+\n     private static GenericContainer<?> apicurioContainer = new GenericContainer<>(\"apicurio/apicurio-registry-mem:\" + APICURIO_VERSION)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMyMjk4MQ=="}, "originalCommit": null, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDcyMjExOnYy", "diffSide": "RIGHT", "path": "debezium-testing/debezium-testing-testcontainers/src/test/java/io/debezium/testing/testcontainers/DebeziumContainerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNToyNzoyNlrOIGRMUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNToyNzoyNlrOIGRMUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ0NDA1MQ==", "bodyText": "@jpechane I have added one for Apicurio. How you want to add for Connect image? I guess we have simply passed the image name into DebeziumContainer.", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r543444051", "createdAt": "2020-12-15T15:27:26Z", "author": {"login": "ani-sha"}, "path": "debezium-testing/debezium-testing-testcontainers/src/test/java/io/debezium/testing/testcontainers/DebeziumContainerTest.java", "diffHunk": "@@ -48,17 +48,14 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(DebeziumContainerTest.class);\n \n-    private static final DockerImageName POSTGRES_DOCKER_IMAGE_NAME = DockerImageName.parse(\"debezium/postgres:11\")\n-            .asCompatibleSubstituteFor(\"postgres\");\n-\n     private static final Network network = Network.newNetwork();\n \n+    private static final PostgresInfrastructure POSTGRES_INFRASTRUCTURE = PostgresInfrastructure.getDebeziumPostgresDefaultInfrastructure(network);\n+\n     private static final KafkaContainer kafkaContainer = new KafkaContainer()\n             .withNetwork(network);\n \n-    public static PostgreSQLContainer<?> postgresContainer = new PostgreSQLContainer<>(POSTGRES_DOCKER_IMAGE_NAME)\n-            .withNetwork(network)\n-            .withNetworkAliases(\"postgres\");\n+    public static PostgreSQLContainer<?> postgresContainer = POSTGRES_INFRASTRUCTURE.getPostgresContainer();\n \n     public static DebeziumContainer debeziumContainer = new DebeziumContainer(\"debezium/connect:1.1.1.Final\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDkxODI5OnYy", "diffSide": "RIGHT", "path": "debezium-quarkus-outbox/integration-tests/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjowMzo1MFrOIGTCRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwOToyMTo1OFrOIG7jQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ3NDI0NQ==", "bodyText": "The dependency version should imo be moved to the parent pom, shouldn't it @jpechane ?", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r543474245", "createdAt": "2020-12-15T16:03:50Z", "author": {"login": "rk3rn3r"}, "path": "debezium-quarkus-outbox/integration-tests/pom.xml", "diffHunk": "@@ -35,6 +35,13 @@\n                 <version>${project.version}</version>\n                 <scope>test</scope>\n             </dependency>\n+\n+            <dependency>\n+                <groupId>io.debezium</groupId>\n+                <artifactId>debezium-testing-testcontainers</artifactId>\n+                <version>${project.version}</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEzODA0OQ==", "bodyText": "Yes, this should go into dependencyManagement of the parent POM.", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r544138049", "createdAt": "2020-12-16T09:21:58Z", "author": {"login": "gunnarmorling"}, "path": "debezium-quarkus-outbox/integration-tests/pom.xml", "diffHunk": "@@ -35,6 +35,13 @@\n                 <version>${project.version}</version>\n                 <scope>test</scope>\n             </dependency>\n+\n+            <dependency>\n+                <groupId>io.debezium</groupId>\n+                <artifactId>debezium-testing-testcontainers</artifactId>\n+                <version>${project.version}</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ3NDI0NQ=="}, "originalCommit": null, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDkyNTA3OnYy", "diffSide": "RIGHT", "path": "debezium-quarkus-outbox/integration-tests/src/test/java/io/debezium/outbox/quarkus/it/DatabaseTestResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjowNTowMFrOIGTGRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjowNTowMFrOIGTGRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ3NTI2OQ==", "bodyText": "This can be moved to the static member initialization and then the static member can be final.", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r543475269", "createdAt": "2020-12-15T16:05:00Z", "author": {"login": "rk3rn3r"}, "path": "debezium-quarkus-outbox/integration-tests/src/test/java/io/debezium/outbox/quarkus/it/DatabaseTestResource.java", "diffHunk": "@@ -20,29 +20,26 @@\n  */\n public class DatabaseTestResource implements QuarkusTestResourceLifecycleManager {\n \n-    private static final String POSTGRES_USER = \"postgres\";\n-    private static final String POSTGRES_PASSWORD = \"postgres\";\n-    private static final String POSTGRES_DBNAME = \"postgres\";\n-    private static final String POSTGRES_IMAGE = \"debezium/postgres:9.6\";\n-    private static final DockerImageName POSTGRES_DOCKER_IMAGE_NAME = DockerImageName.parse(POSTGRES_IMAGE)\n-            .asCompatibleSubstituteFor(\"postgres\");\n+    private static PostgresInfrastructure POSTGRES_INFRASTRUCTURE;\n \n-    private static PostgreSQLContainer<?> container;\n+    private static PostgreSQLContainer<?> postgresContainer;\n+\n+    public static void setPostgresInfrastructure() {\n+        POSTGRES_INFRASTRUCTURE = PostgresInfrastructure.getDebeziumPostgresDefaultInfrastructure();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDkyOTQ5OnYy", "diffSide": "RIGHT", "path": "debezium-quarkus-outbox/integration-tests/src/test/java/io/debezium/outbox/quarkus/it/DatabaseTestResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjowNTo1MFrOIGTI6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjowNTo1MFrOIGTI6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ3NTk0Ng==", "bodyText": "see above", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r543475946", "createdAt": "2020-12-15T16:05:50Z", "author": {"login": "rk3rn3r"}, "path": "debezium-quarkus-outbox/integration-tests/src/test/java/io/debezium/outbox/quarkus/it/DatabaseTestResource.java", "diffHunk": "@@ -20,29 +20,26 @@\n  */\n public class DatabaseTestResource implements QuarkusTestResourceLifecycleManager {\n \n-    private static final String POSTGRES_USER = \"postgres\";\n-    private static final String POSTGRES_PASSWORD = \"postgres\";\n-    private static final String POSTGRES_DBNAME = \"postgres\";\n-    private static final String POSTGRES_IMAGE = \"debezium/postgres:9.6\";\n-    private static final DockerImageName POSTGRES_DOCKER_IMAGE_NAME = DockerImageName.parse(POSTGRES_IMAGE)\n-            .asCompatibleSubstituteFor(\"postgres\");\n+    private static PostgresInfrastructure POSTGRES_INFRASTRUCTURE;\n \n-    private static PostgreSQLContainer<?> container;\n+    private static PostgreSQLContainer<?> postgresContainer;\n+\n+    public static void setPostgresInfrastructure() {\n+        POSTGRES_INFRASTRUCTURE = PostgresInfrastructure.getDebeziumPostgresDefaultInfrastructure();\n+    }\n \n     @Override\n     public Map<String, String> start() {\n         try {\n-            container = new PostgreSQLContainer<>(POSTGRES_DOCKER_IMAGE_NAME)\n+            setPostgresInfrastructure();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDk0NjAzOnYy", "diffSide": "RIGHT", "path": "debezium-quarkus-outbox/integration-tests/src/test/java/io/debezium/outbox/quarkus/it/DatabaseTestResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjowOTowN1rOIGTTFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwOToyMzozNVrOIG7nfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ3ODU0OA==", "bodyText": "Starting and stopping the same container instance might slow tests down. I think this can be replaced with a reset hook like we do in the connector test cases. Or is there a reason @jpechane ?\n(This is related to the previous comments).", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r543478548", "createdAt": "2020-12-15T16:09:07Z", "author": {"login": "rk3rn3r"}, "path": "debezium-quarkus-outbox/integration-tests/src/test/java/io/debezium/outbox/quarkus/it/DatabaseTestResource.java", "diffHunk": "@@ -20,29 +20,26 @@\n  */\n public class DatabaseTestResource implements QuarkusTestResourceLifecycleManager {\n \n-    private static final String POSTGRES_USER = \"postgres\";\n-    private static final String POSTGRES_PASSWORD = \"postgres\";\n-    private static final String POSTGRES_DBNAME = \"postgres\";\n-    private static final String POSTGRES_IMAGE = \"debezium/postgres:9.6\";\n-    private static final DockerImageName POSTGRES_DOCKER_IMAGE_NAME = DockerImageName.parse(POSTGRES_IMAGE)\n-            .asCompatibleSubstituteFor(\"postgres\");\n+    private static PostgresInfrastructure POSTGRES_INFRASTRUCTURE;\n \n-    private static PostgreSQLContainer<?> container;\n+    private static PostgreSQLContainer<?> postgresContainer;\n+\n+    public static void setPostgresInfrastructure() {\n+        POSTGRES_INFRASTRUCTURE = PostgresInfrastructure.getDebeziumPostgresDefaultInfrastructure();\n+    }\n \n     @Override\n     public Map<String, String> start() {\n         try {\n-            container = new PostgreSQLContainer<>(POSTGRES_DOCKER_IMAGE_NAME)\n+            setPostgresInfrastructure();\n+            postgresContainer = POSTGRES_INFRASTRUCTURE.getPostgresContainer()\n                     .waitingFor(Wait.forLogMessage(\".*database system is ready to accept connections.*\", 2))\n-                    .withUsername(POSTGRES_USER)\n-                    .withPassword(POSTGRES_PASSWORD)\n-                    .withDatabaseName(POSTGRES_DBNAME)\n                     .withEnv(\"POSTGRES_INITDB_ARGS\", \"-E UTF8\")\n                     .withEnv(\"LANG\", \"en_US.utf8\")\n                     .withStartupTimeout(Duration.ofSeconds(30));\n \n-            container.start();\n-            return Collections.singletonMap(\"quarkus.datasource.jdbc.url\", container.getJdbcUrl());\n+            postgresContainer.start();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEzOTEzNA==", "bodyText": "A Quarkus test resource is started/stopped once for the entire suite run. Does this address your concern, @rk3rn3r?", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r544139134", "createdAt": "2020-12-16T09:23:35Z", "author": {"login": "gunnarmorling"}, "path": "debezium-quarkus-outbox/integration-tests/src/test/java/io/debezium/outbox/quarkus/it/DatabaseTestResource.java", "diffHunk": "@@ -20,29 +20,26 @@\n  */\n public class DatabaseTestResource implements QuarkusTestResourceLifecycleManager {\n \n-    private static final String POSTGRES_USER = \"postgres\";\n-    private static final String POSTGRES_PASSWORD = \"postgres\";\n-    private static final String POSTGRES_DBNAME = \"postgres\";\n-    private static final String POSTGRES_IMAGE = \"debezium/postgres:9.6\";\n-    private static final DockerImageName POSTGRES_DOCKER_IMAGE_NAME = DockerImageName.parse(POSTGRES_IMAGE)\n-            .asCompatibleSubstituteFor(\"postgres\");\n+    private static PostgresInfrastructure POSTGRES_INFRASTRUCTURE;\n \n-    private static PostgreSQLContainer<?> container;\n+    private static PostgreSQLContainer<?> postgresContainer;\n+\n+    public static void setPostgresInfrastructure() {\n+        POSTGRES_INFRASTRUCTURE = PostgresInfrastructure.getDebeziumPostgresDefaultInfrastructure();\n+    }\n \n     @Override\n     public Map<String, String> start() {\n         try {\n-            container = new PostgreSQLContainer<>(POSTGRES_DOCKER_IMAGE_NAME)\n+            setPostgresInfrastructure();\n+            postgresContainer = POSTGRES_INFRASTRUCTURE.getPostgresContainer()\n                     .waitingFor(Wait.forLogMessage(\".*database system is ready to accept connections.*\", 2))\n-                    .withUsername(POSTGRES_USER)\n-                    .withPassword(POSTGRES_PASSWORD)\n-                    .withDatabaseName(POSTGRES_DBNAME)\n                     .withEnv(\"POSTGRES_INITDB_ARGS\", \"-E UTF8\")\n                     .withEnv(\"LANG\", \"en_US.utf8\")\n                     .withStartupTimeout(Duration.ofSeconds(30));\n \n-            container.start();\n-            return Collections.singletonMap(\"quarkus.datasource.jdbc.url\", container.getJdbcUrl());\n+            postgresContainer.start();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ3ODU0OA=="}, "originalCommit": null, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNTAwMDQwOnYy", "diffSide": "RIGHT", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/PostgresInfrastructure.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjoxOToyOFrOIGTzvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNjowMToxNlrOIGzOqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ4NjkwOQ==", "bodyText": "The network doesn't have to be injected. The Infrastructure classes should imo just return a blueprint for a container.\nTests that use that containers can still configure the network with the withNetwork() method (see below code change suggestion).\nIt think we can remove this method and the new getters that come with the network parameter.", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r543486909", "createdAt": "2020-12-15T16:19:28Z", "author": {"login": "rk3rn3r"}, "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/PostgresInfrastructure.java", "diffHunk": "@@ -47,10 +48,28 @@ private PostgresInfrastructure(String postgresImageName) {\n                 .withNetworkAliases(\"postgres\");\n     }\n \n-    public static PostgresInfrastructure getDebeziumPostgresInfrastructure() {\n+    private PostgresInfrastructure(String postgresImageName, Network network) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDAwMTcwNQ==", "bodyText": "Yes agreed. It can be passed with the container itself.", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r544001705", "createdAt": "2020-12-16T06:01:16Z", "author": {"login": "ani-sha"}, "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/PostgresInfrastructure.java", "diffHunk": "@@ -47,10 +48,28 @@ private PostgresInfrastructure(String postgresImageName) {\n                 .withNetworkAliases(\"postgres\");\n     }\n \n-    public static PostgresInfrastructure getDebeziumPostgresInfrastructure() {\n+    private PostgresInfrastructure(String postgresImageName, Network network) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ4NjkwOQ=="}, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNTAwMTY5OnYy", "diffSide": "RIGHT", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/PostgresInfrastructure.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjoxOTo0NFrOIGT0gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjoxOTo0NFrOIGT0gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ4NzEwNg==", "bodyText": "can be removed. see above", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r543487106", "createdAt": "2020-12-15T16:19:44Z", "author": {"login": "rk3rn3r"}, "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/PostgresInfrastructure.java", "diffHunk": "@@ -47,10 +48,28 @@ private PostgresInfrastructure(String postgresImageName) {\n                 .withNetworkAliases(\"postgres\");\n     }\n \n-    public static PostgresInfrastructure getDebeziumPostgresInfrastructure() {\n+    private PostgresInfrastructure(String postgresImageName, Network network) {\n+        DockerImageName postgresDockerImageName = DockerImageName.parse(postgresImageName)\n+                .asCompatibleSubstituteFor(\"postgres\");\n+\n+        this.postgresImageName = postgresImageName;\n+        postgresContainer = new PostgreSQLContainer<>(postgresDockerImageName)\n+                .withNetwork(network)\n+                .withNetworkAliases(\"postgres\");\n+    }\n+\n+    public static PostgresInfrastructure getDebeziumPostgresDefaultInfrastructure(Network network) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNTAwOTE2OnYy", "diffSide": "RIGHT", "path": "debezium-testing/debezium-testing-testcontainers/src/test/java/io/debezium/testing/testcontainers/DebeziumContainerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjoyMToxNVrOIGT5EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjoyMjozNFrOIGT9bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ4ODI3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final PostgresInfrastructure POSTGRES_INFRASTRUCTURE = PostgresInfrastructure.getDebeziumPostgresDefaultInfrastructure(network);\n          \n          \n            \n                private static final PostgresInfrastructure POSTGRES_INFRASTRUCTURE = PostgresInfrastructure.getDebeziumPostgresDefaultInfrastructure().withNetwork(network);", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r543488272", "createdAt": "2020-12-15T16:21:15Z", "author": {"login": "rk3rn3r"}, "path": "debezium-testing/debezium-testing-testcontainers/src/test/java/io/debezium/testing/testcontainers/DebeziumContainerTest.java", "diffHunk": "@@ -48,17 +48,14 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(DebeziumContainerTest.class);\n \n-    private static final DockerImageName POSTGRES_DOCKER_IMAGE_NAME = DockerImageName.parse(\"debezium/postgres:11\")\n-            .asCompatibleSubstituteFor(\"postgres\");\n-\n     private static final Network network = Network.newNetwork();\n \n+    private static final PostgresInfrastructure POSTGRES_INFRASTRUCTURE = PostgresInfrastructure.getDebeziumPostgresDefaultInfrastructure(network);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ4OTM4OQ==", "bodyText": "related to the above comment on that we won't need the network parameter on the getter / factory method and the additional constructor.", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r543489389", "createdAt": "2020-12-15T16:22:34Z", "author": {"login": "rk3rn3r"}, "path": "debezium-testing/debezium-testing-testcontainers/src/test/java/io/debezium/testing/testcontainers/DebeziumContainerTest.java", "diffHunk": "@@ -48,17 +48,14 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(DebeziumContainerTest.class);\n \n-    private static final DockerImageName POSTGRES_DOCKER_IMAGE_NAME = DockerImageName.parse(\"debezium/postgres:11\")\n-            .asCompatibleSubstituteFor(\"postgres\");\n-\n     private static final Network network = Network.newNetwork();\n \n+    private static final PostgresInfrastructure POSTGRES_INFRASTRUCTURE = PostgresInfrastructure.getDebeziumPostgresDefaultInfrastructure(network);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ4ODI3Mg=="}, "originalCommit": null, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxOTMwOTE2OnYy", "diffSide": "RIGHT", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/ApicurioInfrastructure.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwOToyNTozN1rOIG7tFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwOToyNTozN1rOIG7tFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE0MDU2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final ImageFromDockerfile apicurioDockerImage;\n          \n          \n            \n                private final ImageFromDockerfile apicurioContainerImage;\n          \n      \n    \n    \n  \n\nWe should generally use \"container image\" instead of \"Docker image\" (here, and elsewhere). Docker is just one particular implementation used for creating OCI-compliant container images.", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r544140567", "createdAt": "2020-12-16T09:25:37Z", "author": {"login": "gunnarmorling"}, "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/ApicurioInfrastructure.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package io.debezium.testing.testcontainers;\n+\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+import org.testcontainers.lifecycle.Startables;\n+\n+import java.util.stream.Stream;\n+\n+/**\n+ * Apicurio Testcontainers infrastructure handling.\n+ */\n+\n+public class ApicurioInfrastructure extends GenericContainer<ApicurioInfrastructure> {\n+\n+    protected static final String DEBEZIUM_VERSION = \"1.3.0.Final\";\n+    protected static final String APICURIO_VERSION = \"1.3.2.Final\";\n+    private final GenericContainer<?> apicurioContainer;\n+    private final ImageFromDockerfile apicurioDockerImage;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDk3MTkyOnYy", "diffSide": "RIGHT", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/ApicurioInfrastructure.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNToyNTowN1rOIHK0ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNToyNTowN1rOIHK0ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM4ODIzNA==", "bodyText": "This can be removed. Responsibility of Infrastructure classes is only providing the infrastructure (pre-configured containers) the lifecycle is handled outside (in test classes etc).", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r544388234", "createdAt": "2020-12-16T15:25:07Z", "author": {"login": "rk3rn3r"}, "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/ApicurioInfrastructure.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package io.debezium.testing.testcontainers;\n+\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+import org.testcontainers.lifecycle.Startables;\n+\n+import java.util.stream.Stream;\n+\n+/**\n+ * Apicurio Testcontainers infrastructure handling.\n+ */\n+\n+public class ApicurioInfrastructure extends GenericContainer<ApicurioInfrastructure> {\n+\n+    protected static final String DEBEZIUM_VERSION = \"1.3.0.Final\";\n+    protected static final String APICURIO_VERSION = \"1.3.2.Final\";\n+    private final GenericContainer<?> apicurioContainer;\n+    private final ImageFromDockerfile apicurioContainerImage;\n+\n+    private ApicurioInfrastructure() {\n+        apicurioContainerImage = new ImageFromDockerfile()\n+                .withDockerfileFromBuilder(builder -> builder\n+                        .from(\"debezium/connect:\" + DEBEZIUM_VERSION)\n+                        .env(\"KAFKA_CONNECT_DEBEZIUM_DIR\", \"$KAFKA_CONNECT_PLUGINS_DIR/debezium-connector-postgres\")\n+                        .env(\"APICURIO_VERSION\", APICURIO_VERSION)\n+                        .run(\"cd $KAFKA_CONNECT_DEBEZIUM_DIR && curl https://repo1.maven.org/maven2/io/apicurio/apicurio-registry-distro-connect-converter/$APICURIO_VERSION/apicurio-registry-distro-connect-converter-$APICURIO_VERSION-converter.tar.gz | tar xzv\")\n+                        .build());\n+\n+        apicurioContainer = new GenericContainer<>(\"apicurio/apicurio-registry-mem:\" + APICURIO_VERSION)\n+                .withExposedPorts(8080)\n+                .waitingFor(new LogMessageWaitStrategy().withRegEx(\".*apicurio-registry-app.*started in.*\"));\n+\n+    }\n+\n+    public static ApicurioInfrastructure getDebeziumApicurioDefaultInfrastructure() {\n+        return new ApicurioInfrastructure();\n+    }\n+\n+    public GenericContainer<?> getApicurioContainer() {\n+        return apicurioContainer;\n+    }\n+\n+    public ImageFromDockerfile getApicurioContainerImage() {\n+        return apicurioContainerImage;\n+    }\n+\n+    public void startContainer() {\n+        Startables.deepStart(Stream.of(apicurioContainer)).join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDk4ODk0OnYy", "diffSide": "RIGHT", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/ApicurioInfrastructure.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNToyODoxMFrOIHK-wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNToyODoxMFrOIHK-wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM5MDg0OQ==", "bodyText": "Return type should be GenericContainer or better, let's have a ApicurioDebeziumContainer class inherited from DebeziumContainer.", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r544390849", "createdAt": "2020-12-16T15:28:10Z", "author": {"login": "rk3rn3r"}, "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/ApicurioInfrastructure.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package io.debezium.testing.testcontainers;\n+\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+import org.testcontainers.lifecycle.Startables;\n+\n+import java.util.stream.Stream;\n+\n+/**\n+ * Apicurio Testcontainers infrastructure handling.\n+ */\n+\n+public class ApicurioInfrastructure extends GenericContainer<ApicurioInfrastructure> {\n+\n+    protected static final String DEBEZIUM_VERSION = \"1.3.0.Final\";\n+    protected static final String APICURIO_VERSION = \"1.3.2.Final\";\n+    private final GenericContainer<?> apicurioContainer;\n+    private final ImageFromDockerfile apicurioContainerImage;\n+\n+    private ApicurioInfrastructure() {\n+        apicurioContainerImage = new ImageFromDockerfile()\n+                .withDockerfileFromBuilder(builder -> builder\n+                        .from(\"debezium/connect:\" + DEBEZIUM_VERSION)\n+                        .env(\"KAFKA_CONNECT_DEBEZIUM_DIR\", \"$KAFKA_CONNECT_PLUGINS_DIR/debezium-connector-postgres\")\n+                        .env(\"APICURIO_VERSION\", APICURIO_VERSION)\n+                        .run(\"cd $KAFKA_CONNECT_DEBEZIUM_DIR && curl https://repo1.maven.org/maven2/io/apicurio/apicurio-registry-distro-connect-converter/$APICURIO_VERSION/apicurio-registry-distro-connect-converter-$APICURIO_VERSION-converter.tar.gz | tar xzv\")\n+                        .build());\n+\n+        apicurioContainer = new GenericContainer<>(\"apicurio/apicurio-registry-mem:\" + APICURIO_VERSION)\n+                .withExposedPorts(8080)\n+                .waitingFor(new LogMessageWaitStrategy().withRegEx(\".*apicurio-registry-app.*started in.*\"));\n+\n+    }\n+\n+    public static ApicurioInfrastructure getDebeziumApicurioDefaultInfrastructure() {\n+        return new ApicurioInfrastructure();\n+    }\n+\n+    public GenericContainer<?> getApicurioContainer() {\n+        return apicurioContainer;\n+    }\n+\n+    public ImageFromDockerfile getApicurioContainerImage() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDk5MTEzOnYy", "diffSide": "RIGHT", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/ApicurioInfrastructure.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNToyODozOFrOIHLAEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNToyODozOFrOIHLAEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM5MTE4NQ==", "bodyText": "Let's have a ApicurioDebeziumContainer class inherited from DebeziumContainer. (see also the last comment in this file)", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r544391185", "createdAt": "2020-12-16T15:28:38Z", "author": {"login": "rk3rn3r"}, "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/ApicurioInfrastructure.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package io.debezium.testing.testcontainers;\n+\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+import org.testcontainers.lifecycle.Startables;\n+\n+import java.util.stream.Stream;\n+\n+/**\n+ * Apicurio Testcontainers infrastructure handling.\n+ */\n+\n+public class ApicurioInfrastructure extends GenericContainer<ApicurioInfrastructure> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDk5NDUzOnYy", "diffSide": "RIGHT", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/ApicurioInfrastructure.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNToyOToxNlrOIHLCEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMToxMTozN1rOIII9tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM5MTY5OA==", "bodyText": "This should imo go to a special ApicurioRegistryContainer class file", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r544391698", "createdAt": "2020-12-16T15:29:16Z", "author": {"login": "rk3rn3r"}, "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/ApicurioInfrastructure.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package io.debezium.testing.testcontainers;\n+\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+import org.testcontainers.lifecycle.Startables;\n+\n+import java.util.stream.Stream;\n+\n+/**\n+ * Apicurio Testcontainers infrastructure handling.\n+ */\n+\n+public class ApicurioInfrastructure extends GenericContainer<ApicurioInfrastructure> {\n+\n+    protected static final String DEBEZIUM_VERSION = \"1.3.0.Final\";\n+    protected static final String APICURIO_VERSION = \"1.3.2.Final\";\n+    private final GenericContainer<?> apicurioContainer;\n+    private final ImageFromDockerfile apicurioContainerImage;\n+\n+    private ApicurioInfrastructure() {\n+        apicurioContainerImage = new ImageFromDockerfile()\n+                .withDockerfileFromBuilder(builder -> builder\n+                        .from(\"debezium/connect:\" + DEBEZIUM_VERSION)\n+                        .env(\"KAFKA_CONNECT_DEBEZIUM_DIR\", \"$KAFKA_CONNECT_PLUGINS_DIR/debezium-connector-postgres\")\n+                        .env(\"APICURIO_VERSION\", APICURIO_VERSION)\n+                        .run(\"cd $KAFKA_CONNECT_DEBEZIUM_DIR && curl https://repo1.maven.org/maven2/io/apicurio/apicurio-registry-distro-connect-converter/$APICURIO_VERSION/apicurio-registry-distro-connect-converter-$APICURIO_VERSION-converter.tar.gz | tar xzv\")\n+                        .build());\n+\n+        apicurioContainer = new GenericContainer<>(\"apicurio/apicurio-registry-mem:\" + APICURIO_VERSION)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwNjM4OQ==", "bodyText": "Agreed, but let's name it ApicurioRegistryContainer. By itself, it is unrelated to Debezium.", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r545406389", "createdAt": "2020-12-17T21:11:37Z", "author": {"login": "gunnarmorling"}, "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/ApicurioInfrastructure.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package io.debezium.testing.testcontainers;\n+\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+import org.testcontainers.lifecycle.Startables;\n+\n+import java.util.stream.Stream;\n+\n+/**\n+ * Apicurio Testcontainers infrastructure handling.\n+ */\n+\n+public class ApicurioInfrastructure extends GenericContainer<ApicurioInfrastructure> {\n+\n+    protected static final String DEBEZIUM_VERSION = \"1.3.0.Final\";\n+    protected static final String APICURIO_VERSION = \"1.3.2.Final\";\n+    private final GenericContainer<?> apicurioContainer;\n+    private final ImageFromDockerfile apicurioContainerImage;\n+\n+    private ApicurioInfrastructure() {\n+        apicurioContainerImage = new ImageFromDockerfile()\n+                .withDockerfileFromBuilder(builder -> builder\n+                        .from(\"debezium/connect:\" + DEBEZIUM_VERSION)\n+                        .env(\"KAFKA_CONNECT_DEBEZIUM_DIR\", \"$KAFKA_CONNECT_PLUGINS_DIR/debezium-connector-postgres\")\n+                        .env(\"APICURIO_VERSION\", APICURIO_VERSION)\n+                        .run(\"cd $KAFKA_CONNECT_DEBEZIUM_DIR && curl https://repo1.maven.org/maven2/io/apicurio/apicurio-registry-distro-connect-converter/$APICURIO_VERSION/apicurio-registry-distro-connect-converter-$APICURIO_VERSION-converter.tar.gz | tar xzv\")\n+                        .build());\n+\n+        apicurioContainer = new GenericContainer<>(\"apicurio/apicurio-registry-mem:\" + APICURIO_VERSION)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM5MTY5OA=="}, "originalCommit": null, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNDkyMTY1OnYy", "diffSide": "RIGHT", "path": "debezium-quarkus-outbox/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMDowNjowNFrOIHt8_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMDoxMDoxNFrOIHuHmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk2MzgzNg==", "bodyText": "I'm sorry, we meant the parent-parent-pom, in the root dir.", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r544963836", "createdAt": "2020-12-17T10:06:04Z", "author": {"login": "rk3rn3r"}, "path": "debezium-quarkus-outbox/pom.xml", "diffHunk": "@@ -23,6 +23,12 @@\n                 <type>pom</type>\n                 <scope>import</scope>\n             </dependency>\n+            <dependency>\n+                <groupId>io.debezium</groupId>\n+                <artifactId>debezium-testing-testcontainers</artifactId>\n+                <version>${project.version}</version>\n+                <scope>test</scope>\n+            </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk2NjU1NA==", "bodyText": "Uh my bad, will change it. \ud83d\ude05", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r544966554", "createdAt": "2020-12-17T10:10:14Z", "author": {"login": "ani-sha"}, "path": "debezium-quarkus-outbox/pom.xml", "diffHunk": "@@ -23,6 +23,12 @@\n                 <type>pom</type>\n                 <scope>import</scope>\n             </dependency>\n+            <dependency>\n+                <groupId>io.debezium</groupId>\n+                <artifactId>debezium-testing-testcontainers</artifactId>\n+                <version>${project.version}</version>\n+                <scope>test</scope>\n+            </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk2MzgzNg=="}, "originalCommit": null, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNDkzMzA3OnYy", "diffSide": "RIGHT", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/ConnectInfrastructure.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMDowODo0MVrOIHuDnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDoxNDoxMFrOIIkatg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk2NTUzNQ==", "bodyText": "I don't think we'll need this. As when someone wants to populate a Kafka Connect instance with the DebeziumContainer (which is a Kafka Connect container), the setup needs to be done outside anyway to inject related connector code etc.", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r544965535", "createdAt": "2020-12-17T10:08:41Z", "author": {"login": "rk3rn3r"}, "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/ConnectInfrastructure.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package io.debezium.testing.testcontainers;\n+\n+\n+/**\n+ * Connect Testcontainers infrastructure handling.\n+ */\n+\n+public class ConnectInfrastructure {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwNDU4OA==", "bodyText": "Taking it a step further, why do we need any of those *Infrastructure classes? They seem to add mostly complexity, for no real benefit. PostgresInfrastructure in particular has quite a few methods which don't seem to be used at all even. The Testcontainers API is simple and easy enough, tests can just interact with it, we don't need (and should not have) another abstraction on top of it.\nRe ApicurioConnectContainer, I don't think there's need for that either; we should just have a method enableApicurioConverters() on the existing DebeziumContainer which sets the right environment variable for enabling those converters (see description of the Debezium image in our docker-containers repo, and the Apicurio Compose file of the tutorial example).\nWe could have an ApicurioRegistryContainer though, which e.g. provides that waitingFor() logic OOTB.", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r545404588", "createdAt": "2020-12-17T21:08:11Z", "author": {"login": "gunnarmorling"}, "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/ConnectInfrastructure.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package io.debezium.testing.testcontainers;\n+\n+\n+/**\n+ * Connect Testcontainers infrastructure handling.\n+ */\n+\n+public class ConnectInfrastructure {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk2NTUzNQ=="}, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgyMjA4MQ==", "bodyText": "The *Interface class was meant for cases where we don't need any custom GenericContainer<?> extension (like the DebeziumContainer) and to avoid dependency to Testcontainers internal API. It just provided slightly customized default images using the external API and manages when we need concurrent Postgres versions in tests.\nBut it's valid we could also create a new *Container class instead. But then we are architecturally bound to Testcontainers' internal (GenericContainer) API changes.", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r545822081", "createdAt": "2020-12-18T13:12:34Z", "author": {"login": "rk3rn3r"}, "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/ConnectInfrastructure.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package io.debezium.testing.testcontainers;\n+\n+\n+/**\n+ * Connect Testcontainers infrastructure handling.\n+ */\n+\n+public class ConnectInfrastructure {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk2NTUzNQ=="}, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg1NjE4Mg==", "bodyText": "Yes, I'm not concerned about changes to the GenericContainer API.", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r545856182", "createdAt": "2020-12-18T14:14:10Z", "author": {"login": "gunnarmorling"}, "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/ConnectInfrastructure.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package io.debezium.testing.testcontainers;\n+\n+\n+/**\n+ * Connect Testcontainers infrastructure handling.\n+ */\n+\n+public class ConnectInfrastructure {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk2NTUzNQ=="}, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzg3MDEzOnYy", "diffSide": "RIGHT", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/ApicurioInfrastructure.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMToxMDozN1rOIII7tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMToxMDozN1rOIII7tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwNTg3OA==", "bodyText": "That's not needed actually (see my other comment below), current Debezium versions contain those converters already, it's only a matter of enabling them by means of an env var. I.e. this class here should not be needed, and instead a test wishing to use Connect/DBZ with the Apicurio converters would do it like so:\npublic static DebeziumContainer debeziumContainer = new DebeziumContainer()\n            .withNetwork(network)\n            .withKafka(kafkaContainer)\n            .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n            .enableApicurioConverters() // <----\n            .dependsOn(kafkaContainer);", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r545405878", "createdAt": "2020-12-17T21:10:37Z", "author": {"login": "gunnarmorling"}, "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/ApicurioInfrastructure.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package io.debezium.testing.testcontainers;\n+\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+\n+/**\n+ * Apicurio Testcontainers infrastructure handling.\n+ */\n+\n+public class ApicurioInfrastructure extends GenericContainer<ApicurioInfrastructure> {\n+\n+    protected static final String DEBEZIUM_VERSION = \"1.3.0.Final\";\n+    protected static final String APICURIO_VERSION = \"1.3.2.Final\";\n+    private final GenericContainer<?> apicurioContainer;\n+    private final ImageFromDockerfile apicurioContainerImage;\n+\n+    public static ConnectInfrastructure CONNECT_INFRASTRUCTURE = ConnectInfrastructure.getDefaultConnectInfrastructure();\n+\n+    private final String connectContainer;\n+\n+    private ApicurioInfrastructure() {\n+        connectContainer = CONNECT_INFRASTRUCTURE.getConnectContainer();\n+        apicurioContainerImage = new ImageFromDockerfile()\n+                .withDockerfileFromBuilder(builder -> builder\n+                        .from(connectContainer)\n+                        .env(\"KAFKA_CONNECT_DEBEZIUM_DIR\", \"$KAFKA_CONNECT_PLUGINS_DIR/debezium-connector-postgres\")\n+                        .env(\"APICURIO_VERSION\", APICURIO_VERSION)\n+                        .run(\"cd $KAFKA_CONNECT_DEBEZIUM_DIR && curl https://repo1.maven.org/maven2/io/apicurio/apicurio-registry-distro-connect-converter/$APICURIO_VERSION/apicurio-registry-distro-connect-converter-$APICURIO_VERSION-converter.tar.gz | tar xzv\")\n+                        .build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzg3NzMzOnYy", "diffSide": "RIGHT", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/PostgresInfrastructure.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMToxMjoyNVrOIII_jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNToxOTozOFrOIInS5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwNjg2Mg==", "bodyText": "I'd suggest to get rid of this class completely. There are many unused methods anyways, and the PostgresContainer is easy enough to use as-is.", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r545406862", "createdAt": "2020-12-17T21:12:25Z", "author": {"login": "gunnarmorling"}, "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/PostgresInfrastructure.java", "diffHunk": "@@ -20,17 +20,17 @@\n /**\n  * Postgres Testcontainers infrastructure handling.\n  */\n-public class PostgresInfrastructure {\n+public class PostgresInfrastructure extends GenericContainer<PostgresInfrastructure> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgyNjk3OQ==", "bodyText": "Like I said above, we can create a DebeziumPostgreSQLContainer extends PostgreSQLContainer<> from this infrastructure class. It avoids lots of duplicate code that setups PostgreSQLContainer in the default way which is the same all the time. WDYT?", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r545826979", "createdAt": "2020-12-18T13:21:59Z", "author": {"login": "rk3rn3r"}, "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/PostgresInfrastructure.java", "diffHunk": "@@ -20,17 +20,17 @@\n /**\n  * Postgres Testcontainers infrastructure handling.\n  */\n-public class PostgresInfrastructure {\n+public class PostgresInfrastructure extends GenericContainer<PostgresInfrastructure> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwNjg2Mg=="}, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg1NTQ0OQ==", "bodyText": "What is this duplicated code exactly? Keep in mind sometimes some duplication can be worthwhile if it aids to understandability of the code. If I look at four lines of TC set-up code I instantly know what this is about, whereas some custom *Infrastructure class forces me to learn about its concepts and abstractions. We can do the DebeziumPostgreSQLContainer perhaps, but I'm curious to see what it actually would encapsulate, apart from the container image name.", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r545855449", "createdAt": "2020-12-18T14:12:55Z", "author": {"login": "gunnarmorling"}, "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/PostgresInfrastructure.java", "diffHunk": "@@ -20,17 +20,17 @@\n /**\n  * Postgres Testcontainers infrastructure handling.\n  */\n-public class PostgresInfrastructure {\n+public class PostgresInfrastructure extends GenericContainer<PostgresInfrastructure> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwNjg2Mg=="}, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg2NTQ2OA==", "bodyText": "Basically what is now in that class and what we have in all these different Abstact*Test and TestHelper classes. Like I said before it can easily become our own DebeziumPostgreSQLContainer extends PostgreSQLContainer<> to encapsulate that frequently used code, quite exactly like in the DebeziumContainer now which has all this interaction with KafkaConnect.", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r545865468", "createdAt": "2020-12-18T14:29:31Z", "author": {"login": "rk3rn3r"}, "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/PostgresInfrastructure.java", "diffHunk": "@@ -20,17 +20,17 @@\n /**\n  * Postgres Testcontainers infrastructure handling.\n  */\n-public class PostgresInfrastructure {\n+public class PostgresInfrastructure extends GenericContainer<PostgresInfrastructure> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwNjg2Mg=="}, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg2OTU4NQ==", "bodyText": "See my comment elsewhere; unless I'm missing something, there's quite a few unused methods in this class. And usage like this in specific tests is absolutely fine and shouldn't require any more abstraction:\npublic static PostgreSQLContainer<?> postgresContainer = new PostgreSQLContainer<>(POSTGRES_DOCKER_IMAGE_NAME)\n            .withNetwork(network)\n            .withNetworkAliases(\"postgres\");", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r545869585", "createdAt": "2020-12-18T14:36:14Z", "author": {"login": "gunnarmorling"}, "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/PostgresInfrastructure.java", "diffHunk": "@@ -20,17 +20,17 @@\n /**\n  * Postgres Testcontainers infrastructure handling.\n  */\n-public class PostgresInfrastructure {\n+public class PostgresInfrastructure extends GenericContainer<PostgresInfrastructure> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwNjg2Mg=="}, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg3NzQ1Mw==", "bodyText": "Might be used elsewhere, like the UI PoC, where this originates from.", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r545877453", "createdAt": "2020-12-18T14:46:59Z", "author": {"login": "rk3rn3r"}, "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/PostgresInfrastructure.java", "diffHunk": "@@ -20,17 +20,17 @@\n /**\n  * Postgres Testcontainers infrastructure handling.\n  */\n-public class PostgresInfrastructure {\n+public class PostgresInfrastructure extends GenericContainer<PostgresInfrastructure> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwNjg2Mg=="}, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg5NTcwMg==", "bodyText": "Ok, that's a problem. We shouldn't do this.", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r545895702", "createdAt": "2020-12-18T15:06:55Z", "author": {"login": "gunnarmorling"}, "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/PostgresInfrastructure.java", "diffHunk": "@@ -20,17 +20,17 @@\n /**\n  * Postgres Testcontainers infrastructure handling.\n  */\n-public class PostgresInfrastructure {\n+public class PostgresInfrastructure extends GenericContainer<PostgresInfrastructure> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwNjg2Mg=="}, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg5ODEzMw==", "bodyText": "That's not a problem. What is this here?\nI suggested making PostgresInfrastructure a DebeziumPostgreSQLContainer extends PostgreSQLContainer<>. Is that okay?  I think over time we can migrate Abstract*Test and  TestHelper code her. WDYT?", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r545898133", "createdAt": "2020-12-18T15:10:55Z", "author": {"login": "rk3rn3r"}, "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/PostgresInfrastructure.java", "diffHunk": "@@ -20,17 +20,17 @@\n /**\n  * Postgres Testcontainers infrastructure handling.\n  */\n-public class PostgresInfrastructure {\n+public class PostgresInfrastructure extends GenericContainer<PostgresInfrastructure> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwNjg2Mg=="}, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkwMzMzNQ==", "bodyText": "What is this here?\n\nThe re-use of this code across repo boundaries, due to the maintenance burden and lifecycle questions associated to it. Again, abstraction is not a means to an end, I'm all for duplication if it is conceptually simpler. We already spent more time and mental energy discussing this then this will ever pay off.\n\nI suggested making PostgresInfrastructure a DebeziumPostgreSQLContainer extends PostgreSQLContainer<>. Is that okay?\n\nIf it solely does encapsulate this code:\npublic static PostgreSQLContainer<?> postgresContainer = new PostgreSQLContainer<>(POSTGRES_DOCKER_IMAGE_NAME)\n            .withNetwork(network)\n            .withNetworkAliases(\"postgres\");\n\nThen, no, I don't think we should do it. It's not worth any abstraction and interaction with the plain TC API is more idiomatic and comprehensible.", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r545903335", "createdAt": "2020-12-18T15:19:38Z", "author": {"login": "gunnarmorling"}, "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/PostgresInfrastructure.java", "diffHunk": "@@ -20,17 +20,17 @@\n /**\n  * Postgres Testcontainers infrastructure handling.\n  */\n-public class PostgresInfrastructure {\n+public class PostgresInfrastructure extends GenericContainer<PostgresInfrastructure> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwNjg2Mg=="}, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjQzOTAyOnYy", "diffSide": "RIGHT", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOTozNTo1MlrOIJR7HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOTozNTo1MlrOIJR7HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYwMTc1Nw==", "bodyText": "@gunnarmorling I have added the implementation for the stable debezium version here.", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r546601757", "createdAt": "2020-12-21T09:35:52Z", "author": {"login": "ani-sha"}, "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java", "diffHunk": "@@ -280,4 +293,40 @@ public void ensureConnectorTaskState(String connectorName, int taskNumber, Conne\n                 .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n+\n+    public static String getDebeziumStableVersion() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73206ee6aa07bea8e36d3de30b9d49e0b07faf56"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4099, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}