{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0MjEwNTE5", "number": 1366, "title": "DBZ-1782 Groovy based filtering SMT", "bodyText": "https://issues.redhat.com/browse/DBZ-1782\nDocumentation will be added when the code interface is approved.", "createdAt": "2020-03-26T14:37:36Z", "url": "https://github.com/debezium/debezium/pull/1366", "merged": true, "mergeCommit": {"oid": "680f1f73af5d57aeebc3f1a388e9d3b51464e3ca"}, "closed": true, "closedAt": "2020-04-09T16:09:57Z", "author": {"login": "jpechane"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRdF7ZgH2gAyMzk0MjEwNTE5OjZjYmMzMjIxYzQ4MjI3YTczNjQzNWNiYjkyM2RjMDZlODg4ZDRlNzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcV-qRtgH2gAyMzk0MjEwNTE5OmJmOWFjOTNiMTM3NDM1ODNkZDI3YjE2NzA2YThiY2FmYTNkYzAzZDA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6cbc3221c48227a736435cbb923dc06e888d4e74", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/6cbc3221c48227a736435cbb923dc06e888d4e74", "committedDate": "2020-03-26T14:36:31Z", "message": "DBZ-1782 Groovy based filtering SMT"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNjIyNTA4", "url": "https://github.com/debezium/debezium/pull/1366#pullrequestreview-382622508", "createdAt": "2020-03-27T07:14:49Z", "commit": {"oid": "6cbc3221c48227a736435cbb923dc06e888d4e74"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNzoxNDo0OVrOF8leoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNzoyMDozOVrOF8lm3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA3MjkyOA==", "bodyText": "What is its license? And do you happen to know whether this has been productized before?", "url": "https://github.com/debezium/debezium/pull/1366#discussion_r399072928", "createdAt": "2020-03-27T07:14:49Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/pom.xml", "diffHunk": "@@ -47,6 +47,11 @@\n             <groupId>com.fasterxml.jackson.datatype</groupId>\n             <artifactId>jackson-datatype-jsr310</artifactId>\n         </dependency>\n+        <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cbc3221c48227a736435cbb923dc06e888d4e74"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA3NDQ3MQ==", "bodyText": "Very nice! What I didn't get yet: how does evaluation happen? I saw you bind key, value etc. into the Groovy execution context. But how is the before.id part evaluated?", "url": "https://github.com/debezium/debezium/pull/1366#discussion_r399074471", "createdAt": "2020-03-27T07:19:09Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/test/java/io/debezium/transforms/FilterTest.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.transforms;\n+\n+import java.time.Instant;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.kafka.connect.data.Schema;\n+import org.apache.kafka.connect.data.SchemaBuilder;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.connect.source.SourceRecord;\n+import org.fest.assertions.Assertions;\n+import org.junit.Test;\n+\n+import io.debezium.DebeziumException;\n+import io.debezium.data.Envelope;\n+\n+/**\n+ * @author Jiri Pechanec\n+ */\n+public class FilterTest {\n+\n+    private static final String LANGUAGE = \"language\";\n+    private static final String EXPRESSION = \"condition\";\n+    private static final String NULL_HANDLING = \"null.handling.mode\";\n+\n+    final Schema recordSchema = SchemaBuilder.struct()\n+            .field(\"id\", SchemaBuilder.int8())\n+            .field(\"name\", SchemaBuilder.string())\n+            .build();\n+\n+    final Schema sourceSchema = SchemaBuilder.struct()\n+            .field(\"lsn\", SchemaBuilder.int32())\n+            .build();\n+\n+    final Envelope envelope = Envelope.defineSchema()\n+            .withName(\"dummy.Envelope\")\n+            .withRecord(recordSchema)\n+            .withSource(sourceSchema)\n+            .build();\n+\n+    @Test(expected = DebeziumException.class)\n+    public void testLanguageRequired() {\n+        try (final Filter<SourceRecord> transform = new Filter<>()) {\n+            final Map<String, String> props = new HashMap<>();\n+            props.put(EXPRESSION, \"operation == 'd'\");\n+            transform.configure(props);\n+        }\n+    }\n+\n+    @Test(expected = DebeziumException.class)\n+    public void testExpressionRequired() {\n+        try (final Filter<SourceRecord> transform = new Filter<>()) {\n+            final Map<String, String> props = new HashMap<>();\n+            props.put(LANGUAGE, \"groovy\");\n+            transform.configure(props);\n+        }\n+    }\n+\n+    @Test(expected = DebeziumException.class)\n+    public void shouldFailOnUnkownLanguage() {\n+        try (final Filter<SourceRecord> transform = new Filter<>()) {\n+            final Map<String, String> props = new HashMap<>();\n+            props.put(EXPRESSION, \"operation == 'd'\");\n+            props.put(LANGUAGE, \"jython\");\n+            transform.configure(props);\n+        }\n+    }\n+\n+    @Test(expected = DebeziumException.class)\n+    public void shouldFailToParseCondition() {\n+        try (final Filter<SourceRecord> transform = new Filter<>()) {\n+            final Map<String, String> props = new HashMap<>();\n+            props.put(EXPRESSION, \"operation == 'd\");\n+            props.put(LANGUAGE, \"groovy\");\n+            transform.configure(props);\n+        }\n+    }\n+\n+    @Test\n+    public void shouldProcessCondition() {\n+        try (final Filter<SourceRecord> transform = new Filter<>()) {\n+            final Map<String, String> props = new HashMap<>();\n+            props.put(EXPRESSION, \"value.op == 'd' && value.before.id == 2\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cbc3221c48227a736435cbb923dc06e888d4e74"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA3NDU5Ng==", "bodyText": "We mostly do these as static imports.", "url": "https://github.com/debezium/debezium/pull/1366#discussion_r399074596", "createdAt": "2020-03-27T07:19:28Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/test/java/io/debezium/transforms/FilterTest.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.transforms;\n+\n+import java.time.Instant;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.kafka.connect.data.Schema;\n+import org.apache.kafka.connect.data.SchemaBuilder;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.connect.source.SourceRecord;\n+import org.fest.assertions.Assertions;\n+import org.junit.Test;\n+\n+import io.debezium.DebeziumException;\n+import io.debezium.data.Envelope;\n+\n+/**\n+ * @author Jiri Pechanec\n+ */\n+public class FilterTest {\n+\n+    private static final String LANGUAGE = \"language\";\n+    private static final String EXPRESSION = \"condition\";\n+    private static final String NULL_HANDLING = \"null.handling.mode\";\n+\n+    final Schema recordSchema = SchemaBuilder.struct()\n+            .field(\"id\", SchemaBuilder.int8())\n+            .field(\"name\", SchemaBuilder.string())\n+            .build();\n+\n+    final Schema sourceSchema = SchemaBuilder.struct()\n+            .field(\"lsn\", SchemaBuilder.int32())\n+            .build();\n+\n+    final Envelope envelope = Envelope.defineSchema()\n+            .withName(\"dummy.Envelope\")\n+            .withRecord(recordSchema)\n+            .withSource(sourceSchema)\n+            .build();\n+\n+    @Test(expected = DebeziumException.class)\n+    public void testLanguageRequired() {\n+        try (final Filter<SourceRecord> transform = new Filter<>()) {\n+            final Map<String, String> props = new HashMap<>();\n+            props.put(EXPRESSION, \"operation == 'd'\");\n+            transform.configure(props);\n+        }\n+    }\n+\n+    @Test(expected = DebeziumException.class)\n+    public void testExpressionRequired() {\n+        try (final Filter<SourceRecord> transform = new Filter<>()) {\n+            final Map<String, String> props = new HashMap<>();\n+            props.put(LANGUAGE, \"groovy\");\n+            transform.configure(props);\n+        }\n+    }\n+\n+    @Test(expected = DebeziumException.class)\n+    public void shouldFailOnUnkownLanguage() {\n+        try (final Filter<SourceRecord> transform = new Filter<>()) {\n+            final Map<String, String> props = new HashMap<>();\n+            props.put(EXPRESSION, \"operation == 'd'\");\n+            props.put(LANGUAGE, \"jython\");\n+            transform.configure(props);\n+        }\n+    }\n+\n+    @Test(expected = DebeziumException.class)\n+    public void shouldFailToParseCondition() {\n+        try (final Filter<SourceRecord> transform = new Filter<>()) {\n+            final Map<String, String> props = new HashMap<>();\n+            props.put(EXPRESSION, \"operation == 'd\");\n+            props.put(LANGUAGE, \"groovy\");\n+            transform.configure(props);\n+        }\n+    }\n+\n+    @Test\n+    public void shouldProcessCondition() {\n+        try (final Filter<SourceRecord> transform = new Filter<>()) {\n+            final Map<String, String> props = new HashMap<>();\n+            props.put(EXPRESSION, \"value.op == 'd' && value.before.id == 2\");\n+            props.put(LANGUAGE, \"groovy\");\n+            transform.configure(props);\n+            final SourceRecord record = createDeleteRecord(1);\n+            Assertions.assertThat(transform.apply(createDeleteRecord(2))).isNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cbc3221c48227a736435cbb923dc06e888d4e74"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA3NTAzNg==", "bodyText": "This reminds me a little bit of JSR 223. How about making this our primary entry point? That'd have the advantage that people could use any compatible scripting language.", "url": "https://github.com/debezium/debezium/pull/1366#discussion_r399075036", "createdAt": "2020-03-27T07:20:39Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/transforms/filter/Engine.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.transforms.filter;\n+\n+import org.apache.kafka.connect.connector.ConnectRecord;\n+\n+/**\n+ * The interface serves as an abstraction of expression language engine.\n+ *\n+ * @author Jiri Pechanec\n+ */\n+public interface Engine {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cbc3221c48227a736435cbb923dc06e888d4e74"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf09558b285d10893540f015e7dbb6cc62c78639", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/cf09558b285d10893540f015e7dbb6cc62c78639", "committedDate": "2020-03-31T08:36:30Z", "message": "DBZ-1782 Use JSR223 API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c72546c436259cf24a52c904c27033b47030e94f", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/c72546c436259cf24a52c904c27033b47030e94f", "committedDate": "2020-03-31T10:53:48Z", "message": "DBZ-1782 Support for Graal JS"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03f7a08cb9745c84ccd1d574cc1f09d02f946438", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/03f7a08cb9745c84ccd1d574cc1f09d02f946438", "committedDate": "2020-04-08T11:25:22Z", "message": "DBZ-1782 Microbenchmark of the filter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "03f7a08cb9745c84ccd1d574cc1f09d02f946438", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/03f7a08cb9745c84ccd1d574cc1f09d02f946438", "committedDate": "2020-04-08T11:25:22Z", "message": "DBZ-1782 Microbenchmark of the filter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf9ac93b13743583dd27b16706a8bcafa3dc03d0", "author": {"user": {"login": "gunnarmorling", "name": "Gunnar Morling"}}, "url": "https://github.com/debezium/debezium/commit/bf9ac93b13743583dd27b16706a8bcafa3dc03d0", "committedDate": "2020-04-09T15:58:47Z", "message": "DBZ-1782 Misc. fixes"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1958, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}