{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MDk4NTE0", "number": 1271, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMToyOToxNFrODhfVhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMTozMzo0NVrODhfaVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NDQzMDE1OnYy", "diffSide": "RIGHT", "path": "debezium-core/src/main/java/io/debezium/config/CommonConnectorConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMToyOToxNFrOFsP4_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMToyOToxNFrOFsP4_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk0MjAxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * Problematic event and will be logged and the events will be skipped.\n          \n          \n            \n                     * Problematic events will be logged and skipped.", "url": "https://github.com/debezium/debezium/pull/1271#discussion_r381942015", "createdAt": "2020-02-20T11:29:14Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/config/CommonConnectorConfig.java", "diffHunk": "@@ -79,6 +79,60 @@ public static Version parse(String value, String defaultValue) {\n         }\n     }\n \n+    /**\n+     * The set of predefined modes for dealing with failures during event processing.\n+     */\n+    public static enum EventProcessingFailureHandlingMode implements EnumeratedValue {\n+\n+        /**\n+         * Problematic events will be skipped.\n+         */\n+        IGNORE(\"ignore\"),\n+\n+        /**\n+         * Problematic event and will be logged and the events will be skipped.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "995f1d39f619be53e80bcf497133f83bc04e757c"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NDQzMzMwOnYy", "diffSide": "RIGHT", "path": "debezium-connector-sqlserver/src/test/java/io/debezium/connector/sqlserver/EventProcessingFailureHandlingIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMTozMDoyNFrOFsP7AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMTozMDoyNFrOFsP7AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk0MjUyOA==", "bodyText": "Something more specific would be nice.", "url": "https://github.com/debezium/debezium/pull/1271#discussion_r381942528", "createdAt": "2020-02-20T11:30:24Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-sqlserver/src/test/java/io/debezium/connector/sqlserver/EventProcessingFailureHandlingIT.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.connector.sqlserver;\n+\n+import static org.fest.assertions.Assertions.assertThat;\n+\n+import java.sql.SQLException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.awaitility.Awaitility;\n+import org.fest.assertions.Assertions;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import io.debezium.config.CommonConnectorConfig.EventProcessingFailureHandlingMode;\n+import io.debezium.config.Configuration;\n+import io.debezium.connector.sqlserver.SqlServerConnectorConfig.SnapshotMode;\n+import io.debezium.connector.sqlserver.util.TestHelper;\n+import io.debezium.embedded.AbstractConnectorTest;\n+import io.debezium.junit.logging.LogInterceptor;\n+import io.debezium.util.Testing;\n+\n+/**\n+ * Integration test for the Debezium SQL Server connector.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "995f1d39f619be53e80bcf497133f83bc04e757c"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NDQzNDE1OnYy", "diffSide": "RIGHT", "path": "debezium-core/src/main/java/io/debezium/config/CommonConnectorConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMTozMDo0NlrOFsP7hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMTozMDo0NlrOFsP7hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk0MjY2MQ==", "bodyText": "Perhaps SKIP is more expressive.", "url": "https://github.com/debezium/debezium/pull/1271#discussion_r381942661", "createdAt": "2020-02-20T11:30:46Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/config/CommonConnectorConfig.java", "diffHunk": "@@ -79,6 +79,60 @@ public static Version parse(String value, String defaultValue) {\n         }\n     }\n \n+    /**\n+     * The set of predefined modes for dealing with failures during event processing.\n+     */\n+    public static enum EventProcessingFailureHandlingMode implements EnumeratedValue {\n+\n+        /**\n+         * Problematic events will be skipped.\n+         */\n+        IGNORE(\"ignore\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "995f1d39f619be53e80bcf497133f83bc04e757c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NDQzODU4OnYy", "diffSide": "RIGHT", "path": "debezium-core/src/main/java/io/debezium/pipeline/EventDispatcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMTozMjoyMlrOFsP-Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMTozMjoyMlrOFsP-Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk0MzM3MA==", "bodyText": "Either log or throw, not both.", "url": "https://github.com/debezium/debezium/pull/1271#discussion_r381943370", "createdAt": "2020-02-20T11:32:22Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/pipeline/EventDispatcher.java", "diffHunk": "@@ -130,43 +132,65 @@ public SnapshotReceiver getSnapshotChangeEventReceiver() {\n      * @return {@code true} if an event was dispatched (i.e. sent to the message broker), {@code false} otherwise.\n      */\n     public boolean dispatchDataChangeEvent(T dataCollectionId, ChangeRecordEmitter changeRecordEmitter) throws InterruptedException {\n-        boolean handled = false;\n-        if (!filter.isIncluded(dataCollectionId)) {\n-            LOGGER.trace(\"Filtered data change event for {}\", dataCollectionId);\n-            eventListener.onFilteredEvent(\"source = \" + dataCollectionId);\n-        }\n-        else {\n-            DataCollectionSchema dataCollectionSchema = schema.schemaFor(dataCollectionId);\n-\n-            // TODO handle as per inconsistent schema info option\n-            if (dataCollectionSchema == null) {\n-                final Optional<DataCollectionSchema> replacementSchema = inconsistentSchemaHandler.handle(dataCollectionId, changeRecordEmitter);\n-                if (!replacementSchema.isPresent()) {\n-                    return false;\n-                }\n-                dataCollectionSchema = replacementSchema.get();\n+        try {\n+            boolean handled = false;\n+            if (!filter.isIncluded(dataCollectionId)) {\n+                LOGGER.trace(\"Filtered data change event for {}\", dataCollectionId);\n+                eventListener.onFilteredEvent(\"source = \" + dataCollectionId);\n             }\n+            else {\n+                DataCollectionSchema dataCollectionSchema = schema.schemaFor(dataCollectionId);\n+\n+                // TODO handle as per inconsistent schema info option\n+                if (dataCollectionSchema == null) {\n+                    final Optional<DataCollectionSchema> replacementSchema = inconsistentSchemaHandler.handle(dataCollectionId, changeRecordEmitter);\n+                    if (!replacementSchema.isPresent()) {\n+                        return false;\n+                    }\n+                    dataCollectionSchema = replacementSchema.get();\n+                }\n \n-            changeRecordEmitter.emitChangeRecords(dataCollectionSchema, new Receiver() {\n+                changeRecordEmitter.emitChangeRecords(dataCollectionSchema, new Receiver() {\n \n-                @Override\n-                public void changeRecord(DataCollectionSchema schema, Operation operation, Object key, Struct value,\n-                                         OffsetContext offset)\n-                        throws InterruptedException {\n-                    transactionMonitor.dataEvent(dataCollectionId, offset, key, value);\n-                    eventListener.onEvent(dataCollectionId, offset, key, value);\n-                    streamingReceiver.changeRecord(schema, operation, key, value, offset);\n-                }\n-            });\n-            handled = true;\n-        }\n+                    @Override\n+                    public void changeRecord(DataCollectionSchema schema, Operation operation, Object key, Struct value,\n+                                             OffsetContext offset)\n+                            throws InterruptedException {\n+                        transactionMonitor.dataEvent(dataCollectionId, offset, key, value);\n+                        eventListener.onEvent(dataCollectionId, offset, key, value);\n+                        streamingReceiver.changeRecord(schema, operation, key, value, offset);\n+                    }\n+                });\n+                handled = true;\n+            }\n \n-        heartbeat.heartbeat(\n-                changeRecordEmitter.getOffset().getPartition(),\n-                changeRecordEmitter.getOffset().getOffset(),\n-                this::enqueueHeartbeat);\n+            heartbeat.heartbeat(\n+                    changeRecordEmitter.getOffset().getPartition(),\n+                    changeRecordEmitter.getOffset().getOffset(),\n+                    this::enqueueHeartbeat);\n \n-        return handled;\n+            return handled;\n+        }\n+        catch (Exception e) {\n+            switch (connectorConfig.getEventProcessingFailureHandlingMode()) {\n+                case FAIL:\n+                    LOGGER.error(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "995f1d39f619be53e80bcf497133f83bc04e757c"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NDQ0MjQ3OnYy", "diffSide": "RIGHT", "path": "documentation/modules/ROOT/pages/connectors/db2.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMTozMzo0NVrOFsQAhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMTozMzo0NVrOFsQAhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk0Mzk0MA==", "bodyText": "indicating the problematic event and its offset\n\nActually only the offset is revealed, which I think is good. So the comment should be adjusted. Same for the enum JavaDoc.", "url": "https://github.com/debezium/debezium/pull/1271#discussion_r381943940", "createdAt": "2020-02-20T11:33:45Z", "author": {"login": "gunnarmorling"}, "path": "documentation/modules/ROOT/pages/connectors/db2.adoc", "diffHunk": "@@ -1446,6 +1446,13 @@ twice - once in initial snapshot and once in streaming phase. Nonetheless, that\n data mirroring.\n For `read_uncommitted` there are no data consistency guarantees at all (some data might be lost or corrupted).\n \n+|`event.processing{zwsp}.failure.handling.mode`\n+|`fail`\n+| Specifies how the connector should react to exceptions during processing of events.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "995f1d39f619be53e80bcf497133f83bc04e757c"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4410, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}