{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwMTM5MjYz", "number": 1876, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMzo1ODoxM1rOEtxGXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNDoxODozOVrOEtxRxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDI1ODIyOnYy", "diffSide": "RIGHT", "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConnection.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMzo1ODoxM1rOHhv6YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNTo1OToxNVrOHjGnYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1MDA0OA==", "bodyText": "This is potentially unsafe operation. If a RuntimeException or Error is thrown then this will emit CCE which would be difficult to diagnostic.", "url": "https://github.com/debezium/debezium/pull/1876#discussion_r505150048", "createdAt": "2020-10-15T03:58:13Z", "author": {"login": "jpechane"}, "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConnection.java", "diffHunk": "@@ -910,14 +916,36 @@ public synchronized void close() throws SQLException {\n                 statementCache.values().forEach(this::cleanupPreparedStatement);\n                 statementCache.clear();\n                 LOGGER.trace(\"Closing database connection\");\n-                conn.close();\n+                doClose();\n             }\n             finally {\n                 conn = null;\n             }\n         }\n     }\n \n+    private void doClose() throws SQLException {\n+        ExecutorService executor = Executors.newSingleThreadExecutor();\n+        // attempting to close the connection gracefully\n+        Future<Object> futureClose = executor.submit(() -> {\n+            conn.close();\n+            return null;\n+        });\n+        try {\n+            futureClose.get(10, TimeUnit.SECONDS);\n+        }\n+        catch (ExecutionException e) {\n+            throw (SQLException) e.getCause();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU3MDU5NQ==", "bodyText": "That's very true. I'll fix that.", "url": "https://github.com/debezium/debezium/pull/1876#discussion_r506570595", "createdAt": "2020-10-16T15:59:15Z", "author": {"login": "okayrunner"}, "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConnection.java", "diffHunk": "@@ -910,14 +916,36 @@ public synchronized void close() throws SQLException {\n                 statementCache.values().forEach(this::cleanupPreparedStatement);\n                 statementCache.clear();\n                 LOGGER.trace(\"Closing database connection\");\n-                conn.close();\n+                doClose();\n             }\n             finally {\n                 conn = null;\n             }\n         }\n     }\n \n+    private void doClose() throws SQLException {\n+        ExecutorService executor = Executors.newSingleThreadExecutor();\n+        // attempting to close the connection gracefully\n+        Future<Object> futureClose = executor.submit(() -> {\n+            conn.close();\n+            return null;\n+        });\n+        try {\n+            futureClose.get(10, TimeUnit.SECONDS);\n+        }\n+        catch (ExecutionException e) {\n+            throw (SQLException) e.getCause();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1MDA0OA=="}, "originalCommit": null, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDI2MTcwOnYy", "diffSide": "RIGHT", "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConnection.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNDowMDoyNVrOHhv8Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNTo1OTo0MFrOHjGoYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1MDUzMQ==", "bodyText": "This should be more then INFO level, please make it WARN", "url": "https://github.com/debezium/debezium/pull/1876#discussion_r505150531", "createdAt": "2020-10-15T04:00:25Z", "author": {"login": "jpechane"}, "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConnection.java", "diffHunk": "@@ -910,14 +916,36 @@ public synchronized void close() throws SQLException {\n                 statementCache.values().forEach(this::cleanupPreparedStatement);\n                 statementCache.clear();\n                 LOGGER.trace(\"Closing database connection\");\n-                conn.close();\n+                doClose();\n             }\n             finally {\n                 conn = null;\n             }\n         }\n     }\n \n+    private void doClose() throws SQLException {\n+        ExecutorService executor = Executors.newSingleThreadExecutor();\n+        // attempting to close the connection gracefully\n+        Future<Object> futureClose = executor.submit(() -> {\n+            conn.close();\n+            return null;\n+        });\n+        try {\n+            futureClose.get(10, TimeUnit.SECONDS);\n+        }\n+        catch (ExecutionException e) {\n+            throw (SQLException) e.getCause();\n+        }\n+        catch (TimeoutException | InterruptedException e) {\n+            LOGGER.info(\"Failed to close database connection by calling close(), attempting abort()\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU3MDg1MA==", "bodyText": "Yea, that's fair.", "url": "https://github.com/debezium/debezium/pull/1876#discussion_r506570850", "createdAt": "2020-10-16T15:59:40Z", "author": {"login": "okayrunner"}, "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConnection.java", "diffHunk": "@@ -910,14 +916,36 @@ public synchronized void close() throws SQLException {\n                 statementCache.values().forEach(this::cleanupPreparedStatement);\n                 statementCache.clear();\n                 LOGGER.trace(\"Closing database connection\");\n-                conn.close();\n+                doClose();\n             }\n             finally {\n                 conn = null;\n             }\n         }\n     }\n \n+    private void doClose() throws SQLException {\n+        ExecutorService executor = Executors.newSingleThreadExecutor();\n+        // attempting to close the connection gracefully\n+        Future<Object> futureClose = executor.submit(() -> {\n+            conn.close();\n+            return null;\n+        });\n+        try {\n+            futureClose.get(10, TimeUnit.SECONDS);\n+        }\n+        catch (ExecutionException e) {\n+            throw (SQLException) e.getCause();\n+        }\n+        catch (TimeoutException | InterruptedException e) {\n+            LOGGER.info(\"Failed to close database connection by calling close(), attempting abort()\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1MDUzMQ=="}, "originalCommit": null, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDI4NzQyOnYy", "diffSide": "RIGHT", "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConnection.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNDoxODozOVrOHhwLdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNDo1NToyOVrOHkS5MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1NDQyMA==", "bodyText": "Would it be better to use shutdownNow()?", "url": "https://github.com/debezium/debezium/pull/1876#discussion_r505154420", "createdAt": "2020-10-15T04:18:39Z", "author": {"login": "jpechane"}, "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConnection.java", "diffHunk": "@@ -910,14 +916,36 @@ public synchronized void close() throws SQLException {\n                 statementCache.values().forEach(this::cleanupPreparedStatement);\n                 statementCache.clear();\n                 LOGGER.trace(\"Closing database connection\");\n-                conn.close();\n+                doClose();\n             }\n             finally {\n                 conn = null;\n             }\n         }\n     }\n \n+    private void doClose() throws SQLException {\n+        ExecutorService executor = Executors.newSingleThreadExecutor();\n+        // attempting to close the connection gracefully\n+        Future<Object> futureClose = executor.submit(() -> {\n+            conn.close();\n+            return null;\n+        });\n+        try {\n+            futureClose.get(10, TimeUnit.SECONDS);\n+        }\n+        catch (ExecutionException e) {\n+            throw (SQLException) e.getCause();\n+        }\n+        catch (TimeoutException | InterruptedException e) {\n+            LOGGER.info(\"Failed to close database connection by calling close(), attempting abort()\");\n+            conn.abort(Runnable::run);\n+        }\n+        finally {\n+            executor.shutdown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyMDMzNg==", "bodyText": "Agreed", "url": "https://github.com/debezium/debezium/pull/1876#discussion_r507820336", "createdAt": "2020-10-19T14:55:29Z", "author": {"login": "okayrunner"}, "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConnection.java", "diffHunk": "@@ -910,14 +916,36 @@ public synchronized void close() throws SQLException {\n                 statementCache.values().forEach(this::cleanupPreparedStatement);\n                 statementCache.clear();\n                 LOGGER.trace(\"Closing database connection\");\n-                conn.close();\n+                doClose();\n             }\n             finally {\n                 conn = null;\n             }\n         }\n     }\n \n+    private void doClose() throws SQLException {\n+        ExecutorService executor = Executors.newSingleThreadExecutor();\n+        // attempting to close the connection gracefully\n+        Future<Object> futureClose = executor.submit(() -> {\n+            conn.close();\n+            return null;\n+        });\n+        try {\n+            futureClose.get(10, TimeUnit.SECONDS);\n+        }\n+        catch (ExecutionException e) {\n+            throw (SQLException) e.getCause();\n+        }\n+        catch (TimeoutException | InterruptedException e) {\n+            LOGGER.info(\"Failed to close database connection by calling close(), attempting abort()\");\n+            conn.abort(Runnable::run);\n+        }\n+        finally {\n+            executor.shutdown();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1NDQyMA=="}, "originalCommit": null, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4127, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}