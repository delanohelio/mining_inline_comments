{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MTMyNjEx", "number": 1390, "title": "DBZ-1905 Validate database history topic", "bodyText": "https://issues.redhat.com/browse/DBZ-1905", "createdAt": "2020-04-03T12:00:51Z", "url": "https://github.com/debezium/debezium/pull/1390", "merged": true, "mergeCommit": {"oid": "384f62463cdb3551392cf65e02047d26d989d3ff"}, "closed": true, "closedAt": "2020-04-08T10:18:33Z", "author": {"login": "jpechane"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcU5H4hAFqTM4Nzk3NDAxMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVi_sVAFqTM4OTcyNjk4NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3OTc0MDEy", "url": "https://github.com/debezium/debezium/pull/1390#pullrequestreview-387974012", "createdAt": "2020-04-06T06:54:27Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNjo1NDoyN1rOGBJ-ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNjo1NzozM1rOGBKD3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg2NTE4OQ==", "bodyText": "Could you use ExecutorService instead? It should be the preferred way for async task execution.", "url": "https://github.com/debezium/debezium/pull/1390#discussion_r403865189", "createdAt": "2020-04-06T06:54:27Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/relational/history/KafkaDatabaseHistory.java", "diffHunk": "@@ -314,6 +327,71 @@ public boolean exists() {\n         return exists;\n     }\n \n+    private void checkTopicSettings(String topicName) {\n+        final Thread t = new Thread((Runnable) () -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg2NTg0MQ==", "bodyText": "Can you change it to static LOGGER while at it?", "url": "https://github.com/debezium/debezium/pull/1390#discussion_r403865841", "createdAt": "2020-04-06T06:55:50Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/relational/history/KafkaDatabaseHistory.java", "diffHunk": "@@ -314,6 +327,71 @@ public boolean exists() {\n         return exists;\n     }\n \n+    private void checkTopicSettings(String topicName) {\n+        final Thread t = new Thread((Runnable) () -> {\n+            try (AdminClient admin = AdminClient.create(this.producerConfig.asProperties())) {\n+\n+                Set<ConfigResource> resources = Collections.singleton(new ConfigResource(ConfigResource.Type.TOPIC, topicName));\n+                final Map<ConfigResource, Config> configs = admin.describeConfigs(resources).all().get(\n+                        KAFKA_QUERY_TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+                if (configs.size() != 1) {\n+                    logger.info(\"Expected one topic '{}' to match the query but got {}\", topicName, configs.values().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg2NjU5MQ==", "bodyText": "Let's use Duration.of(5 , ChronoUnit.YEARS), as per the general preference for using the semantical temporal types of Java 8.", "url": "https://github.com/debezium/debezium/pull/1390#discussion_r403866591", "createdAt": "2020-04-06T06:57:33Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/relational/history/KafkaDatabaseHistory.java", "diffHunk": "@@ -56,6 +58,16 @@\n @NotThreadSafe\n public class KafkaDatabaseHistory extends AbstractDatabaseHistory {\n \n+    private static final String CLEANUP_POLICY_NAME = \"cleanup.policy\";\n+    private static final String CLEANUP_POLICY_VALUE = \"delete\";\n+    private static final String RETENTION_MS_NAME = \"retention.ms\";\n+    private static final long RETENTION_MS_MAX = Long.MAX_VALUE;\n+    private static final long RETENTION_MS_MIN = 157_680_000_000L; // 5 years", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MDM3NDQz", "url": "https://github.com/debezium/debezium/pull/1390#pullrequestreview-388037443", "createdAt": "2020-04-06T08:34:03Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwODozNDowM1rOGBNKZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwODozNDo0NVrOGBNL6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkxNzQxMw==", "bodyText": "Days, not years?", "url": "https://github.com/debezium/debezium/pull/1390#discussion_r403917413", "createdAt": "2020-04-06T08:34:03Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/relational/history/KafkaDatabaseHistory.java", "diffHunk": "@@ -56,6 +63,18 @@\n @NotThreadSafe\n public class KafkaDatabaseHistory extends AbstractDatabaseHistory {\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(KafkaDatabaseHistory.class);\n+\n+    private static final String CLEANUP_POLICY_NAME = \"cleanup.policy\";\n+    private static final String CLEANUP_POLICY_VALUE = \"delete\";\n+    private static final String RETENTION_MS_NAME = \"retention.ms\";\n+    private static final long RETENTION_MS_MAX = Long.MAX_VALUE;\n+    private static final long RETENTION_MS_MIN = Duration.of(5, ChronoUnit.DAYS).toMillis();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkxNzgwMw==", "bodyText": "Why not using our own Threads factory? It takes care of the naming and should be the one facility for spawning new threads.", "url": "https://github.com/debezium/debezium/pull/1390#discussion_r403917803", "createdAt": "2020-04-06T08:34:45Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/relational/history/KafkaDatabaseHistory.java", "diffHunk": "@@ -128,11 +147,21 @@\n     private volatile KafkaProducer<String, String> producer;\n     private int maxRecoveryAttempts;\n     private Duration pollInterval;\n+    private final ExecutorService checkTopicSettingsExecutor;\n+\n+    public KafkaDatabaseHistory() {\n+        checkTopicSettingsExecutor = Executors.newSingleThreadExecutor((r) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 60}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "318d7be5195f359ae41016bc7c92e5342ad8826f", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/318d7be5195f359ae41016bc7c92e5342ad8826f", "committedDate": "2020-04-06T10:51:04Z", "message": "DBZ-1905 Validate database history topic"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "318d7be5195f359ae41016bc7c92e5342ad8826f", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/318d7be5195f359ae41016bc7c92e5342ad8826f", "committedDate": "2020-04-06T10:51:04Z", "message": "DBZ-1905 Validate database history topic"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4ODIwNDk4", "url": "https://github.com/debezium/debezium/pull/1390#pullrequestreview-388820498", "createdAt": "2020-04-07T06:35:36Z", "commit": {"oid": "318d7be5195f359ae41016bc7c92e5342ad8826f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNjozNTozNlrOGB016g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNjozNTozNlrOGB016g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU2NzUzMA==", "bodyText": "Why are these two Fields now? Wouldn't it suffice to pass in the values when constructing the history object? I.e. when is there a need to configure this differently than for the connector itself?", "url": "https://github.com/debezium/debezium/pull/1390#discussion_r404567530", "createdAt": "2020-04-07T06:35:36Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/relational/history/KafkaDatabaseHistory.java", "diffHunk": "@@ -108,8 +129,24 @@\n             .withDefault(100)\n             .withValidation(Field::isInteger);\n \n+    public static final Field CONNECTOR_CLASS = Field.create(CONFIGURATION_FIELD_PREFIX_STRING + \"connector.class\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "318d7be5195f359ae41016bc7c92e5342ad8826f"}, "originalPosition": 66}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9c7d1166804297fe9b2a8ea37fe8293a5e223e3", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/f9c7d1166804297fe9b2a8ea37fe8293a5e223e3", "committedDate": "2020-04-07T09:58:00Z", "message": "DBZ-1905 Make thread-naming params internal and optional"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5Mzg4ODA4", "url": "https://github.com/debezium/debezium/pull/1390#pullrequestreview-389388808", "createdAt": "2020-04-07T18:38:11Z", "commit": {"oid": "f9c7d1166804297fe9b2a8ea37fe8293a5e223e3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODozODoxMVrOGCRBjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODozODoxMVrOGCRBjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyOTI2MA==", "bodyText": "Ok, last comment on this PR, promised :) Can we move the shutdown right to the topic check (with awaitTermination()), so we don't keep it running for all the time.", "url": "https://github.com/debezium/debezium/pull/1390#discussion_r405029260", "createdAt": "2020-04-07T18:38:11Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/relational/history/KafkaDatabaseHistory.java", "diffHunk": "@@ -314,8 +364,76 @@ public boolean exists() {\n         return exists;\n     }\n \n+    private void checkTopicSettings(String topicName) {\n+        if (checkTopicSettingsExecutor == null) {\n+            return;\n+        }\n+        checkTopicSettingsExecutor.execute(() -> {\n+            try (AdminClient admin = AdminClient.create(this.producerConfig.asProperties())) {\n+\n+                Set<ConfigResource> resources = Collections.singleton(new ConfigResource(ConfigResource.Type.TOPIC, topicName));\n+                final Map<ConfigResource, Config> configs = admin.describeConfigs(resources).all().get(\n+                        KAFKA_QUERY_TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+                if (configs.size() != 1) {\n+                    LOGGER.info(\"Expected one topic '{}' to match the query but got {}\", topicName, configs.values().size());\n+                    return;\n+                }\n+                final Config topic = configs.values().iterator().next();\n+                if (topic == null) {\n+                    LOGGER.info(\"Could not get config for topic '{}'\", topic);\n+                    return;\n+                }\n+\n+                final String cleanupPolicy = topic.get(CLEANUP_POLICY_NAME).value();\n+                if (!CLEANUP_POLICY_VALUE.equals(cleanupPolicy)) {\n+                    LOGGER.warn(\"Database history topic '{}' option '{}' should be '{}' but is '{}'\", topicName, CLEANUP_POLICY_NAME, CLEANUP_POLICY_VALUE,\n+                            cleanupPolicy);\n+                    return;\n+                }\n+\n+                final String retentionBytes = topic.get(RETENTION_BYTES_NAME).value();\n+                if (retentionBytes != null && Long.parseLong(retentionBytes) != UNLIMITED_VALUE) {\n+                    LOGGER.warn(\"Database history topic '{}' option '{}' should be '{}' but is '{}'\", topicName, RETENTION_BYTES_NAME, UNLIMITED_VALUE, retentionBytes);\n+                    return;\n+                }\n+\n+                final String retentionMs = topic.get(RETENTION_MS_NAME).value();\n+                if (retentionMs != null && (Long.parseLong(retentionMs) != UNLIMITED_VALUE && Long.parseLong(retentionMs) < RETENTION_MS_MIN)) {\n+                    LOGGER.warn(\"Database history topic '{}' option '{}' should be '{}' or greater than '{}' (5 years) but is '{}'\", topicName, RETENTION_MS_NAME,\n+                            UNLIMITED_VALUE, RETENTION_MS_MIN, retentionMs);\n+                    return;\n+                }\n+\n+                final DescribeTopicsResult result = admin.describeTopics(Collections.singleton(topicName));\n+                if (result.values().size() != 1) {\n+                    LOGGER.info(\"Expected one topic '{}' to match the query but got {}\", topicName, result.values().size());\n+                    return;\n+                }\n+                final TopicDescription topicDesc = result.values().values().iterator().next().get();\n+                if (topicDesc == null) {\n+                    LOGGER.info(\"Could not get description for topic '{}'\", topicName);\n+                    return;\n+                }\n+\n+                final int partitions = topicDesc.partitions().size();\n+                if (partitions != PARTITION_COUNT) {\n+                    LOGGER.warn(\"Database history topic '{}' should have one partiton but has '{}'\", topicName, partitions);\n+                    return;\n+                }\n+\n+                LOGGER.info(\"Database history topic '{}' has correct settings\", topicName);\n+            }\n+            catch (Throwable e) {\n+                LOGGER.info(\"Attempted to validate database history topic but failed\", e);\n+            }\n+        });\n+    }\n+\n     @Override\n     public synchronized void stop() {\n+        if (checkTopicSettingsExecutor != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9c7d1166804297fe9b2a8ea37fe8293a5e223e3"}, "originalPosition": 301}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c8a6042176e94b09a4b502b3f7410a4c61db373", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/8c8a6042176e94b09a4b502b3f7410a4c61db373", "committedDate": "2020-04-08T07:22:22Z", "message": "DBZ-1905 Stop checking thread upong completion"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NzI2OTg0", "url": "https://github.com/debezium/debezium/pull/1390#pullrequestreview-389726984", "createdAt": "2020-04-08T07:44:51Z", "commit": {"oid": "8c8a6042176e94b09a4b502b3f7410a4c61db373"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1984, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}