{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0MjkxOTI0", "number": 1803, "title": "DBZ-2460 Prepare filter SMT doc", "bodyText": "", "createdAt": "2020-09-10T20:20:33Z", "url": "https://github.com/debezium/debezium/pull/1803", "merged": true, "mergeCommit": {"oid": "7521390de0d6a6fe6baea1cb7dc18b5513f87f2e"}, "closed": true, "closedAt": "2020-09-15T13:35:31Z", "author": {"login": "roldanbob"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdFH0PPgH2gAyNDg0MjkxOTI0OjRmZTVmYWUxYjI1ZTBjZDkxZTM0ZDcxN2QzYzcyNjY3OTVkODkxODk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJH4rmAFqTQ4ODY4NzMyMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4fe5fae1b25e0cd91e34d717d3c7266795d89189", "author": {"user": {"login": "roldanbob", "name": null}}, "url": "https://github.com/debezium/debezium/commit/4fe5fae1b25e0cd91e34d717d3c7266795d89189", "committedDate": "2020-09-03T03:13:15Z", "message": "DBZ-2460 first edit pass"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcd18f275de2d0bc3d0a4da68e7e430861f95fd5", "author": {"user": {"login": "roldanbob", "name": null}}, "url": "https://github.com/debezium/debezium/commit/bcd18f275de2d0bc3d0a4da68e7e430861f95fd5", "committedDate": "2020-09-05T02:27:42Z", "message": "DBZ-2460 further editorial updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "795d5b01494cb1db27f66dd443a3745e7f7de576", "author": {"user": {"login": "roldanbob", "name": null}}, "url": "https://github.com/debezium/debezium/commit/795d5b01494cb1db27f66dd443a3745e7f7de576", "committedDate": "2020-09-10T16:12:17Z", "message": "DBZ-2460 Enhance JSR223 note; convert bulleted list to table, etc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b97c12aae6d0feb009290b7d60361a76f3e34106", "author": {"user": {"login": "roldanbob", "name": null}}, "url": "https://github.com/debezium/debezium/commit/b97c12aae6d0feb009290b7d60361a76f3e34106", "committedDate": "2020-09-10T20:13:31Z", "message": "DBZ-2460 Update info on evaluating Booleans. Convert var list to table"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "478cc482b2af2e0df067224e64258edacb969076", "author": {"user": {"login": "roldanbob", "name": null}}, "url": "https://github.com/debezium/debezium/commit/478cc482b2af2e0df067224e64258edacb969076", "committedDate": "2020-09-10T20:27:06Z", "message": "DBZ-2460 Minor rewording"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2OTM1NDE1", "url": "https://github.com/debezium/debezium/pull/1803#pullrequestreview-486935415", "createdAt": "2020-09-11T16:04:22Z", "commit": {"oid": "478cc482b2af2e0df067224e64258edacb969076"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNjowNDoyMlrOHQk2ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNjowODoxMVrOHQk--w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE0MzAxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To enable you to process only the records that are relevant to you, {prodname} provides the _filter_ simple message transform (SMT).\n          \n          \n            \n            To enable you to process only the records that are relevant to you, {prodname} provides the `Filter` simple message transform (SMT).", "url": "https://github.com/debezium/debezium/pull/1803#discussion_r487143012", "createdAt": "2020-09-11T16:04:22Z", "author": {"login": "Naros"}, "path": "documentation/modules/ROOT/pages/configuration/filtering.adoc", "diffHunk": "@@ -9,26 +9,33 @@\n \n toc::[]\n \n-[NOTE]\n-====\n-This SMT is currently in incubating state, i.e. exact semantics, configuration options etc. may change in future revisions, based on the feedback we receive. Please let us know if you encounter any problems while using this filter transformation.\n-====\n+By default, {prodname} delivers every data change event that it receives to the Kafka broker.\n+However, in many cases, you might be interested in only a subset of the events emitted by the producer. \n+To enable you to process only the records that are relevant to you, {prodname} provides the _filter_ simple message transform (SMT).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "478cc482b2af2e0df067224e64258edacb969076"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE0NDA4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For example, you might add the following configuration in a `.properties` file:name: value\n          \n          \n            \n            For example, you might add the following in your connector configuration", "url": "https://github.com/debezium/debezium/pull/1803#discussion_r487144082", "createdAt": "2020-09-11T16:06:16Z", "author": {"login": "Naros"}, "path": "documentation/modules/ROOT/pages/configuration/filtering.adoc", "diffHunk": "@@ -9,26 +9,33 @@\n \n toc::[]\n \n-[NOTE]\n-====\n-This SMT is currently in incubating state, i.e. exact semantics, configuration options etc. may change in future revisions, based on the feedback we receive. Please let us know if you encounter any problems while using this filter transformation.\n-====\n+By default, {prodname} delivers every data change event that it receives to the Kafka broker.\n+However, in many cases, you might be interested in only a subset of the events emitted by the producer. \n+To enable you to process only the records that are relevant to you, {prodname} provides the _filter_ simple message transform (SMT).\n+\n+You configure the filter transformation in the {prodname} connector's Kafka Connect configuration.\n+In the configuration, you specify the events that you are interested in by defining filter conditions that are based on business rules.\n+As the filter SMT processes the event stream, it evaluates each event against the configured filter conditions.\n+Only events that meet the criteria of the filter conditions are passed to the broker.\n \n-With real-life applications, it is often necessary to deliver only a subset of events into the Kafka broker.\n-The user might need to filter the events according to different business rules.\n-Kafka Connect provides a generic mechanism to do the filtering in the form of link:https://cwiki.apache.org/confluence/display/KAFKA/KIP-66%3A+Single+Message+Transforms+for+Kafka+Connect[Simple Message Transforms] (SMT).\n+The filter SMT supports scripting languages that integrate with https://jcp.org/en/jsr/detail?id=223[JSR 223] (Scripting for the Java(TM) Platform).\n \n-The SMT is a Java class that encodes the filtering logic.\n-This is a very powerful mechanism but has two drawbacks:\n+Kafka Connect provides its own link:https://cwiki.apache.org/confluence/display/KAFKA/KIP-66%3A+Single+Message+Transforms+for+Kafka+Connect[Simple Message Transforms] (SMT) to encode filtering logic.\n+However, the following drawbacks apply to using the generic SMT:\n \n-* It is necessary to compile the transformation upfront and deploy it to Kafka Connect.\n+* It is necessary to compile the transformation up front and deploy it to Kafka Connect.\n * Every change needs code recompilation and redeployment, leading to inflexible operations.\n \n-To solve this problem, {prodname} comes with the Filtering SMT.\n-This SMT allows the operator to write an expression that is evaluated for each event and according to the result, it is either filtered out or passed on for further processing.\n-The current implementation supports any scripting language which integrates with https://jcp.org/en/jsr/detail?id=223[JSR 223] (Scripting for the Java(TM) Platform).\n \n-The Filtering SMT can be used like so:\n+// Type: concept\n+// ModuleID: example-of-configuring-filter-conditions\n+// Title: Example of configuring filter conditions \n+== Example\n+\n+To filter change event records, configure the filter transformation in the Kafka Connect configuration for the {prodname} connector.\n+Configuration of the filter SMT requires you to specify a regular expression that defines the filtering criteria. \n+\n+For example, you might add the following configuration in a `.properties` file:name: value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "478cc482b2af2e0df067224e64258edacb969076"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE0NDY2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            By binding variables , {prodname} enables the SMT to look up and interpret their values as it evaluates the conditions in an expression. \n          \n          \n            \n            By binding variables, {prodname} enables the SMT to look up and interpret their values as it evaluates the conditions in an expression.", "url": "https://github.com/debezium/debezium/pull/1803#discussion_r487144669", "createdAt": "2020-09-11T16:07:17Z", "author": {"login": "Naros"}, "path": "documentation/modules/ROOT/pages/configuration/filtering.adoc", "diffHunk": "@@ -40,62 +47,108 @@ transforms.filter.condition=value.op == 'u' && value.before.id == 2\n ...\n ----\n \n-In this example we are using `Groovy` as expression language, and we're filtering out all update records with `id` field equal to `2`.\n+The preceding example specifies the use of the `Groovy` expression language.\n+The regular expression `value.op == 'u' && value.before.id == 2` removes all messages, except those that represent update (`u`) records with `id` values that are equal to `2`.\n \n [IMPORTANT]\n ====\n-{prodname} does not come with the language implementations in its installation packages.\n-It is the user's responsibility to provide an implementation, such as link:https://groovy-lang.org/[Groovy 3] or link:https://github.com/graalvm/graaljs[GraalVM JavaScript], on the classpath.\n-Bootstrapping is done exclusively via the JSR 223 API currently, so the engine's support for this API must be provided as well.\n+Although the {prodname} package includes the JSR 223 API, which provides support for scripting languages that integrate with JSR 223, by default {prodname} cannot interpret scripts from these languages.\n+To use an expression language, you must download the JSR-223 script engine JAR for the language, and add the JAR to your classpath, along any other JAR files used by the language implementation.\n+For Groovy 3, you can download the JAR from https://groovy-lang.org/. For GraalVM JavaScript, the JAR is available at https://github.com/graalvm/graaljs.   \n+\n+Typically, you add the language JAR to the directory that contains the {prodname} connector JAR files, which is the directory that is referenced in the `plugin.path` configuration property that is set for the Kafka Connect plugin. \n+If you install the script engine JAR to a different directory, you must add that directory to the list in the `plugin.path` property. \n+\n ====\n \n-{prodname} binds four variables into the evaluation context:\n+// Type: concept\n+// ModuleID: variables-for-use-in-filter-expressions\n+== Variables for use in filter expressions\n+\n+When you create expressions to specify filter conditions, you can use the variables that {prodname} binds into the evaluation context.\n+Certain variables are bound into the evaluation context for the SMT.\n+By binding variables , {prodname} enables the SMT to look up and interpret their values as it evaluates the conditions in an expression. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "478cc482b2af2e0df067224e64258edacb969076"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE0NTIxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Whenthe filter condition evaluates to `false`, the message is removed.\n          \n          \n            \n            When the filter condition evaluates to `false`, the message is removed.", "url": "https://github.com/debezium/debezium/pull/1803#discussion_r487145211", "createdAt": "2020-09-11T16:08:11Z", "author": {"login": "Naros"}, "path": "documentation/modules/ROOT/pages/configuration/filtering.adoc", "diffHunk": "@@ -40,62 +47,108 @@ transforms.filter.condition=value.op == 'u' && value.before.id == 2\n ...\n ----\n \n-In this example we are using `Groovy` as expression language, and we're filtering out all update records with `id` field equal to `2`.\n+The preceding example specifies the use of the `Groovy` expression language.\n+The regular expression `value.op == 'u' && value.before.id == 2` removes all messages, except those that represent update (`u`) records with `id` values that are equal to `2`.\n \n [IMPORTANT]\n ====\n-{prodname} does not come with the language implementations in its installation packages.\n-It is the user's responsibility to provide an implementation, such as link:https://groovy-lang.org/[Groovy 3] or link:https://github.com/graalvm/graaljs[GraalVM JavaScript], on the classpath.\n-Bootstrapping is done exclusively via the JSR 223 API currently, so the engine's support for this API must be provided as well.\n+Although the {prodname} package includes the JSR 223 API, which provides support for scripting languages that integrate with JSR 223, by default {prodname} cannot interpret scripts from these languages.\n+To use an expression language, you must download the JSR-223 script engine JAR for the language, and add the JAR to your classpath, along any other JAR files used by the language implementation.\n+For Groovy 3, you can download the JAR from https://groovy-lang.org/. For GraalVM JavaScript, the JAR is available at https://github.com/graalvm/graaljs.   \n+\n+Typically, you add the language JAR to the directory that contains the {prodname} connector JAR files, which is the directory that is referenced in the `plugin.path` configuration property that is set for the Kafka Connect plugin. \n+If you install the script engine JAR to a different directory, you must add that directory to the list in the `plugin.path` property. \n+\n ====\n \n-{prodname} binds four variables into the evaluation context:\n+// Type: concept\n+// ModuleID: variables-for-use-in-filter-expressions\n+== Variables for use in filter expressions\n+\n+When you create expressions to specify filter conditions, you can use the variables that {prodname} binds into the evaluation context.\n+Certain variables are bound into the evaluation context for the SMT.\n+By binding variables , {prodname} enables the SMT to look up and interpret their values as it evaluates the conditions in an expression. \n+\n+The following table lists the variables that {prodname} binds into the evaluation context for the filter SMT:\n \n-* `key` - a key of the message\n-* `value` - a value of the message\n-* `keySchema` - the schema of the message key\n-* `valueSchema` - the schema of the message value\n-* `topic` - the name of the target topic\n-* `headers` - the map of message headers keyed with header name and value composed of `schema` and `value` variables\n+.Filter expression variables\n+[options=\"header\"]\n+|=======================\n+|Name |Description |Type\n+|`key`   |A key of the message. |`org.apache.kafka.connect.data.Struct`\n+|`value` |A value of the message. |`org.apache.kafka.connect.data.Struct`\n+|`keySchema` |Schema of the message key.|`org.apache.kafka.connect.data.Schema`\n+|`valueSchema`|Schema of the message value.| `org.apache.kafka.connect.data.Schema`\n+|`topic`|Name of the target topic.| String\n+|`headers`\n+a|A Java map of message headers. The key field is the header name. \n+The `headers` variable exposes the following properties:\n \n-The `key` and `value` are of type `org.apache.kafka.connect.data.Struct` and `keySchema` and `valueSchema` are variables of type `org.apache.kafka.connect.data.Schema`.\n-The expression can invoke arbitrary methods on the variables and should evaluate into a boolean value that decides whether the message is removed `true` or kept.\n-Expressions should be side-effect free, i.e. they should *not* modify the passed variables in any way.\n+* `value` (of type `Object`) \n \n+* `schema` (of type `org.apache.kafka.connect.data.Schema`)\n+\n+| `java.util.Map<String, io.debezium.transforms.scripting.RecordHeader>`\n+|=======================\n+\n+An expression can invoke arbitrary methods on its variables. \n+Expressions should resolve to a Boolean value that determines how the SMT dispositions the message.\n+When the filter condition in an expression evaluates to `true`, the message is retained. \n+Whenthe filter condition evaluates to `false`, the message is removed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "478cc482b2af2e0df067224e64258edacb969076"}, "originalPosition": 113}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55019b8484ec5835fd7eb3feee91dbb79863ff4b", "author": {"user": {"login": "roldanbob", "name": null}}, "url": "https://github.com/debezium/debezium/commit/55019b8484ec5835fd7eb3feee91dbb79863ff4b", "committedDate": "2020-09-14T20:25:21Z", "message": "DBZ-2460 Incorporate Engineering comments on PR."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4Njg3MzIy", "url": "https://github.com/debezium/debezium/pull/1803#pullrequestreview-488687322", "createdAt": "2020-09-15T13:33:48Z", "commit": {"oid": "55019b8484ec5835fd7eb3feee91dbb79863ff4b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2415, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}