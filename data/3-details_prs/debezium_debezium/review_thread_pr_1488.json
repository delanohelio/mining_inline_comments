{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1OTU2NzM4", "number": 1488, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjo1MDozMlrOD7g1mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNzowOTozM1rOD8WXIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzMwNTg2OnYy", "diffSide": "RIGHT", "path": "debezium-standalone-quarkus/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjo1MDozMlrOGT4Ymw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjo1MDozMlrOGT4Ymw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5OTkzMQ==", "bodyText": "Quarkus is just an implementation detail, it shouldn't be exposed on the surface. I'd suggest to name this simply debezium-server, also avoiding \"standalone\" which some might associate with reduced functionality.", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r423499931", "createdAt": "2020-05-12T06:50:32Z", "author": {"login": "gunnarmorling"}, "path": "debezium-standalone-quarkus/pom.xml", "diffHunk": "@@ -0,0 +1,178 @@\n+<?xml version=\"1.0\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <groupId>io.debezium</groupId>\n+        <artifactId>debezium-parent</artifactId>\n+        <version>1.2.0-SNAPSHOT</version>\n+        <relativePath>../pom.xml</relativePath>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+    <artifactId>debezium-standalone-quarkus</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25df123d702a72a669bdfef5eb5a6e85fea002c3"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzMwOTA5OnYy", "diffSide": "RIGHT", "path": "debezium-standalone-quarkus/src/main/java/io/debezium/standalone/quarkus/Server.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjo1MTo0NlrOGT4arg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjo1MTo0NlrOGT4arg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMDQ2Mg==", "bodyText": "As above: io.debezium.server.", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r423500462", "createdAt": "2020-05-12T06:51:46Z", "author": {"login": "gunnarmorling"}, "path": "debezium-standalone-quarkus/src/main/java/io/debezium/standalone/quarkus/Server.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.standalone.quarkus;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25df123d702a72a669bdfef5eb5a6e85fea002c3"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzMxMDYxOnYy", "diffSide": "RIGHT", "path": "debezium-standalone-quarkus/src/main/resources/META-INF/beans.xml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjo1MjoyMFrOGT4bpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzo0MDoyMlrOGT59Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMDcxMQ==", "bodyText": "I don't think that's needed with Quarkus, is it?", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r423500711", "createdAt": "2020-05-12T06:52:20Z", "author": {"login": "gunnarmorling"}, "path": "debezium-standalone-quarkus/src/main/resources/META-INF/beans.xml", "diffHunk": "@@ -0,0 +1,6 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25df123d702a72a669bdfef5eb5a6e85fea002c3"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyMjE3Mw==", "bodyText": "From docs\n\nThe bean archive is synthesized from:\n\nthe application classes,\ndependencies that contain a beans.xml descriptor (content is ignored),", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r423522173", "createdAt": "2020-05-12T07:33:53Z", "author": {"login": "jpechane"}, "path": "debezium-standalone-quarkus/src/main/resources/META-INF/beans.xml", "diffHunk": "@@ -0,0 +1,6 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMDcxMQ=="}, "originalCommit": {"oid": "25df123d702a72a669bdfef5eb5a6e85fea002c3"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyMzY3Ng==", "bodyText": "Yes, but Quarkus lifts many requirements; i've never needed beans.xml so far.", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r423523676", "createdAt": "2020-05-12T07:36:40Z", "author": {"login": "gunnarmorling"}, "path": "debezium-standalone-quarkus/src/main/resources/META-INF/beans.xml", "diffHunk": "@@ -0,0 +1,6 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMDcxMQ=="}, "originalCommit": {"oid": "25df123d702a72a669bdfef5eb5a6e85fea002c3"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNTY5OA==", "bodyText": "Tahts from Quarkus docs https://quarkus.io/guides/cdi-reference#bean_discovery\nBut I'll try to drop it", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r423525698", "createdAt": "2020-05-12T07:40:22Z", "author": {"login": "jpechane"}, "path": "debezium-standalone-quarkus/src/main/resources/META-INF/beans.xml", "diffHunk": "@@ -0,0 +1,6 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMDcxMQ=="}, "originalCommit": {"oid": "25df123d702a72a669bdfef5eb5a6e85fea002c3"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzMyOTQyOnYy", "diffSide": "RIGHT", "path": "debezium-standalone-quarkus/src/main/java/io/debezium/standalone/quarkus/kinesis/ChangeConsumer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjo1ODozOVrOGT4nbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjo1ODozOVrOGT4nbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMzcyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class ChangeConsumer implements DebeziumEngine.ChangeConsumer<ChangeEvent<Object, Object>> {\n          \n          \n            \n            public class KinesisChangeConsumer implements DebeziumEngine.ChangeConsumer<ChangeEvent<Object, Object>> {", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r423503727", "createdAt": "2020-05-12T06:58:39Z", "author": {"login": "gunnarmorling"}, "path": "debezium-standalone-quarkus/src/main/java/io/debezium/standalone/quarkus/kinesis/ChangeConsumer.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.standalone.quarkus.kinesis;\n+\n+import java.util.List;\n+\n+import javax.annotation.PostConstruct;\n+import javax.annotation.PreDestroy;\n+import javax.enterprise.context.Dependent;\n+import javax.enterprise.inject.Instance;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import org.eclipse.microprofile.config.Config;\n+import org.eclipse.microprofile.config.ConfigProvider;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.debezium.DebeziumException;\n+import io.debezium.engine.ChangeEvent;\n+import io.debezium.engine.DebeziumEngine;\n+import io.debezium.engine.DebeziumEngine.RecordCommitter;\n+import io.debezium.standalone.quarkus.CustomConsumerBuilder;\n+\n+import software.amazon.awssdk.auth.credentials.ProfileCredentialsProvider;\n+import software.amazon.awssdk.core.SdkBytes;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.kinesis.KinesisClient;\n+import software.amazon.awssdk.services.kinesis.model.PutRecordRequest;\n+\n+/**\n+ * Implementation of the consumer that delivers the messages into Amazon Kinesis destination.\n+ *\n+ * @author Jiri Pechanec\n+ *\n+ */\n+@Named(\"kinesis\")\n+@Dependent\n+public class ChangeConsumer implements DebeziumEngine.ChangeConsumer<ChangeEvent<Object, Object>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25df123d702a72a669bdfef5eb5a6e85fea002c3"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzMzMTI2OnYy", "diffSide": "RIGHT", "path": "debezium-standalone-quarkus/src/main/java/io/debezium/standalone/quarkus/pubsub/ChangeConsumer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjo1OToxN1rOGT4oqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjo1OToxN1rOGT4oqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwNDA0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class ChangeConsumer implements DebeziumEngine.ChangeConsumer<ChangeEvent<?, ?>> {\n          \n          \n            \n            public class GooglePubSubChangeConsumer implements DebeziumEngine.ChangeConsumer<ChangeEvent<?, ?>> {", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r423504041", "createdAt": "2020-05-12T06:59:17Z", "author": {"login": "gunnarmorling"}, "path": "debezium-standalone-quarkus/src/main/java/io/debezium/standalone/quarkus/pubsub/ChangeConsumer.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.standalone.quarkus.pubsub;\n+\n+import java.util.List;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Named;\n+\n+import io.debezium.engine.ChangeEvent;\n+import io.debezium.engine.DebeziumEngine;\n+import io.debezium.engine.DebeziumEngine.RecordCommitter;\n+\n+/**\n+ * Implementation of the consumer that delivers the messages into Google Pub/Sub destination.\n+ *\n+ * @author Jiri Pechanec\n+ *\n+ */\n+@Named(\"pub-sub\")\n+@Dependent\n+public class ChangeConsumer implements DebeziumEngine.ChangeConsumer<ChangeEvent<?, ?>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25df123d702a72a669bdfef5eb5a6e85fea002c3"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzMzNjEwOnYy", "diffSide": "RIGHT", "path": "debezium-standalone-quarkus/src/test/java/io/debezium/standalone/quarkus/ServerIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzowMDo0OFrOGT4rqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzowMDo0OFrOGT4rqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwNDgxMQ==", "bodyText": "Could you add a test that runs against Kinesis? It can (and should) be disabled by default, but would be interesting to see the required config and be easily able to run it against one own's account.", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r423504811", "createdAt": "2020-05-12T07:00:48Z", "author": {"login": "gunnarmorling"}, "path": "debezium-standalone-quarkus/src/test/java/io/debezium/standalone/quarkus/ServerIT.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.standalone.quarkus;\n+\n+import java.time.Duration;\n+\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import org.awaitility.Awaitility;\n+import org.fest.assertions.Assertions;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Test;\n+\n+import io.debezium.standalone.quarkus.events.ConnectorCompletedEvent;\n+import io.debezium.standalone.quarkus.events.ConnectorStartedEvent;\n+import io.debezium.util.Testing;\n+import io.quarkus.test.junit.QuarkusTest;\n+\n+/**\n+ * Integration test that verifies basic reading from PostgreSQL database.\n+ *\n+ * @author Jiri Pechanec\n+ */\n+@QuarkusTest\n+public class ServerIT {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25df123d702a72a669bdfef5eb5a6e85fea002c3"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODE1MjQzOnYy", "diffSide": "RIGHT", "path": "debezium-api/src/main/java/io/debezium/engine/ChangeEvent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMDo0MzozNlrOGUAw-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNjoxNzo1MFrOGUi39Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYzNzI0MQ==", "bodyText": "What is this about? Can you add JavaDoc, please?", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r423637241", "createdAt": "2020-05-12T10:43:36Z", "author": {"login": "gunnarmorling"}, "path": "debezium-api/src/main/java/io/debezium/engine/ChangeEvent.java", "diffHunk": "@@ -19,4 +19,6 @@\n     public K key();\n \n     public V value();\n+\n+    public String destination();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ded13a5605ce162659e7462456379c0f81217bc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE5NjA4NQ==", "bodyText": "It is the topic name as created by Debezium - we forgot about exposing it. We should not call it topic name but I describe it as a logical destination string.", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r424196085", "createdAt": "2020-05-13T06:17:50Z", "author": {"login": "jpechane"}, "path": "debezium-api/src/main/java/io/debezium/engine/ChangeEvent.java", "diffHunk": "@@ -19,4 +19,6 @@\n     public K key();\n \n     public V value();\n+\n+    public String destination();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYzNzI0MQ=="}, "originalCommit": {"oid": "2ded13a5605ce162659e7462456379c0f81217bc"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODE5MTM0OnYy", "diffSide": "RIGHT", "path": "debezium-server/src/main/java/io/debezium/server/Server.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMDo1NTozOVrOGUBJiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNjoxNzowM1rOGUi29w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY0MzUyOQ==", "bodyText": "How about DebeziumServer?", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r423643529", "createdAt": "2020-05-12T10:55:39Z", "author": {"login": "gunnarmorling"}, "path": "debezium-server/src/main/java/io/debezium/server/Server.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.server;\n+\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.spi.CreationalContext;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.spi.Bean;\n+import javax.enterprise.inject.spi.BeanManager;\n+import javax.inject.Inject;\n+\n+import org.eclipse.microprofile.config.Config;\n+import org.eclipse.microprofile.config.ConfigProvider;\n+import org.eclipse.microprofile.health.Liveness;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.debezium.DebeziumException;\n+import io.debezium.engine.ChangeEvent;\n+import io.debezium.engine.DebeziumEngine;\n+import io.debezium.engine.DebeziumEngine.ChangeConsumer;\n+import io.debezium.engine.format.Avro;\n+import io.debezium.engine.format.Json;\n+import io.debezium.engine.format.SerializationFormat;\n+import io.quarkus.runtime.ShutdownEvent;\n+import io.quarkus.runtime.Startup;\n+\n+/**\n+ * <p>The entry point of the Quarkus-based standalone server. The server is configured via Quarkus/Microprofile Configuration sources\n+ * and provides few out-of-the-box target implementations.</p>\n+ * <p>The implementation uses CDI to find all classes that implements {@link DebeziumEngine.ChangeConsumer} interface.\n+ * The candidate classes should be annotated with {@code @Named} annotation and should be {@code Dependent}.</p>\n+ * <p>The configuration option {@code debezium.consumer} provides a name of the consumer that should be used and the value\n+ * must match to exactly one of the implementation classes.</p>\n+ *\n+ * @author Jiri Pechanec\n+ *\n+ */\n+@ApplicationScoped\n+@Startup\n+public class Server {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ded13a5605ce162659e7462456379c0f81217bc"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE5NTgzMQ==", "bodyText": "Done", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r424195831", "createdAt": "2020-05-13T06:17:03Z", "author": {"login": "jpechane"}, "path": "debezium-server/src/main/java/io/debezium/server/Server.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.server;\n+\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.spi.CreationalContext;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.spi.Bean;\n+import javax.enterprise.inject.spi.BeanManager;\n+import javax.inject.Inject;\n+\n+import org.eclipse.microprofile.config.Config;\n+import org.eclipse.microprofile.config.ConfigProvider;\n+import org.eclipse.microprofile.health.Liveness;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.debezium.DebeziumException;\n+import io.debezium.engine.ChangeEvent;\n+import io.debezium.engine.DebeziumEngine;\n+import io.debezium.engine.DebeziumEngine.ChangeConsumer;\n+import io.debezium.engine.format.Avro;\n+import io.debezium.engine.format.Json;\n+import io.debezium.engine.format.SerializationFormat;\n+import io.quarkus.runtime.ShutdownEvent;\n+import io.quarkus.runtime.Startup;\n+\n+/**\n+ * <p>The entry point of the Quarkus-based standalone server. The server is configured via Quarkus/Microprofile Configuration sources\n+ * and provides few out-of-the-box target implementations.</p>\n+ * <p>The implementation uses CDI to find all classes that implements {@link DebeziumEngine.ChangeConsumer} interface.\n+ * The candidate classes should be annotated with {@code @Named} annotation and should be {@code Dependent}.</p>\n+ * <p>The configuration option {@code debezium.consumer} provides a name of the consumer that should be used and the value\n+ * must match to exactly one of the implementation classes.</p>\n+ *\n+ * @author Jiri Pechanec\n+ *\n+ */\n+@ApplicationScoped\n+@Startup\n+public class Server {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY0MzUyOQ=="}, "originalCommit": {"oid": "2ded13a5605ce162659e7462456379c0f81217bc"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODIyNTkxOnYy", "diffSide": "RIGHT", "path": "debezium-server/src/test/java/io/debezium/server/TestConfigSource.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMTowNjo0OFrOGUBftQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNzowNToyOFrOGVOs2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY0OTIwNQ==", "bodyText": "How about putting all properties into two namespaces:\ndebezium.sink.type=kinesis\ndebezium.sink.user=...\ndebezium.source.connector.class=...", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r423649205", "createdAt": "2020-05-12T11:06:48Z", "author": {"login": "gunnarmorling"}, "path": "debezium-server/src/test/java/io/debezium/server/TestConfigSource.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.server;\n+\n+import java.nio.file.Path;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.kafka.connect.runtime.standalone.StandaloneConfig;\n+import org.eclipse.microprofile.config.spi.ConfigSource;\n+\n+import io.debezium.util.Testing;\n+\n+public class TestConfigSource implements ConfigSource {\n+\n+    public static final String KINESIS_REGION = \"eu-central-1\";\n+    public static final Path OFFSET_STORE_PATH = Testing.Files.createTestingPath(\"file-connector-offsets.txt\").toAbsolutePath();\n+    public static final Path TEST_FILE_PATH = Testing.Files.createTestingPath(\"file-connector-input.txt\").toAbsolutePath();\n+\n+    final Map<String, String> integrationTest = new HashMap<>();\n+    final Map<String, String> e2eTest = new HashMap<>();\n+    final Map<String, String> unitTest = new HashMap<>();\n+    final Map<String, String> config;\n+\n+    public TestConfigSource() {\n+        e2eTest.put(\"debezium.consumer\", \"kinesis\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ded13a5605ce162659e7462456379c0f81217bc"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY5Mzk2MA==", "bodyText": "Or more precisely, how about those four: debezium.source. ..., debezium.format. ..., debezium.transforms. ..., and debezium.sink. ...?", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r423693960", "createdAt": "2020-05-12T12:30:22Z", "author": {"login": "gunnarmorling"}, "path": "debezium-server/src/test/java/io/debezium/server/TestConfigSource.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.server;\n+\n+import java.nio.file.Path;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.kafka.connect.runtime.standalone.StandaloneConfig;\n+import org.eclipse.microprofile.config.spi.ConfigSource;\n+\n+import io.debezium.util.Testing;\n+\n+public class TestConfigSource implements ConfigSource {\n+\n+    public static final String KINESIS_REGION = \"eu-central-1\";\n+    public static final Path OFFSET_STORE_PATH = Testing.Files.createTestingPath(\"file-connector-offsets.txt\").toAbsolutePath();\n+    public static final Path TEST_FILE_PATH = Testing.Files.createTestingPath(\"file-connector-input.txt\").toAbsolutePath();\n+\n+    final Map<String, String> integrationTest = new HashMap<>();\n+    final Map<String, String> e2eTest = new HashMap<>();\n+    final Map<String, String> unitTest = new HashMap<>();\n+    final Map<String, String> config;\n+\n+    public TestConfigSource() {\n+        e2eTest.put(\"debezium.consumer\", \"kinesis\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY0OTIwNQ=="}, "originalCommit": {"oid": "2ded13a5605ce162659e7462456379c0f81217bc"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE5NzMwNg==", "bodyText": "Done\ndebezium.format is common for both key and value converters and can be specialized with debezium.format.key and debezium.format.value", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r424197306", "createdAt": "2020-05-13T06:21:06Z", "author": {"login": "jpechane"}, "path": "debezium-server/src/test/java/io/debezium/server/TestConfigSource.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.server;\n+\n+import java.nio.file.Path;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.kafka.connect.runtime.standalone.StandaloneConfig;\n+import org.eclipse.microprofile.config.spi.ConfigSource;\n+\n+import io.debezium.util.Testing;\n+\n+public class TestConfigSource implements ConfigSource {\n+\n+    public static final String KINESIS_REGION = \"eu-central-1\";\n+    public static final Path OFFSET_STORE_PATH = Testing.Files.createTestingPath(\"file-connector-offsets.txt\").toAbsolutePath();\n+    public static final Path TEST_FILE_PATH = Testing.Files.createTestingPath(\"file-connector-input.txt\").toAbsolutePath();\n+\n+    final Map<String, String> integrationTest = new HashMap<>();\n+    final Map<String, String> e2eTest = new HashMap<>();\n+    final Map<String, String> unitTest = new HashMap<>();\n+    final Map<String, String> config;\n+\n+    public TestConfigSource() {\n+        e2eTest.put(\"debezium.consumer\", \"kinesis\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY0OTIwNQ=="}, "originalCommit": {"oid": "2ded13a5605ce162659e7462456379c0f81217bc"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkxNDEzOQ==", "bodyText": "Sweet!", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r424914139", "createdAt": "2020-05-14T07:05:28Z", "author": {"login": "gunnarmorling"}, "path": "debezium-server/src/test/java/io/debezium/server/TestConfigSource.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.server;\n+\n+import java.nio.file.Path;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.kafka.connect.runtime.standalone.StandaloneConfig;\n+import org.eclipse.microprofile.config.spi.ConfigSource;\n+\n+import io.debezium.util.Testing;\n+\n+public class TestConfigSource implements ConfigSource {\n+\n+    public static final String KINESIS_REGION = \"eu-central-1\";\n+    public static final Path OFFSET_STORE_PATH = Testing.Files.createTestingPath(\"file-connector-offsets.txt\").toAbsolutePath();\n+    public static final Path TEST_FILE_PATH = Testing.Files.createTestingPath(\"file-connector-input.txt\").toAbsolutePath();\n+\n+    final Map<String, String> integrationTest = new HashMap<>();\n+    final Map<String, String> e2eTest = new HashMap<>();\n+    final Map<String, String> unitTest = new HashMap<>();\n+    final Map<String, String> config;\n+\n+    public TestConfigSource() {\n+        e2eTest.put(\"debezium.consumer\", \"kinesis\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY0OTIwNQ=="}, "originalCommit": {"oid": "2ded13a5605ce162659e7462456379c0f81217bc"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODQ0MzYxOnYy", "diffSide": "RIGHT", "path": "debezium-server/src/test/java/io/debezium/server/TestConfigSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMjoxMzoyMlrOGUDndw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMjoxMzoyMlrOGUDndw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY4Mzk1OQ==", "bodyText": "debezium.sink.kinesis.region?", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r423683959", "createdAt": "2020-05-12T12:13:22Z", "author": {"login": "gunnarmorling"}, "path": "debezium-server/src/test/java/io/debezium/server/TestConfigSource.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.server;\n+\n+import java.nio.file.Path;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.kafka.connect.runtime.standalone.StandaloneConfig;\n+import org.eclipse.microprofile.config.spi.ConfigSource;\n+\n+import io.debezium.util.Testing;\n+\n+public class TestConfigSource implements ConfigSource {\n+\n+    public static final String KINESIS_REGION = \"eu-central-1\";\n+    public static final Path OFFSET_STORE_PATH = Testing.Files.createTestingPath(\"file-connector-offsets.txt\").toAbsolutePath();\n+    public static final Path TEST_FILE_PATH = Testing.Files.createTestingPath(\"file-connector-input.txt\").toAbsolutePath();\n+\n+    final Map<String, String> integrationTest = new HashMap<>();\n+    final Map<String, String> e2eTest = new HashMap<>();\n+    final Map<String, String> unitTest = new HashMap<>();\n+    final Map<String, String> config;\n+\n+    public TestConfigSource() {\n+        e2eTest.put(\"debezium.consumer\", \"kinesis\");\n+        e2eTest.put(\"kinesis.region\", KINESIS_REGION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ded13a5605ce162659e7462456379c0f81217bc"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODQ5Njg2OnYy", "diffSide": "RIGHT", "path": "debezium-server/src/test/java/io/debezium/server/KinesisIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMjoyODoxNVrOGUEJkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNDozNjowOFrOGUhIXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY5MjY5MA==", "bodyText": "Where is the serialization format configured here?", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r423692690", "createdAt": "2020-05-12T12:28:15Z", "author": {"login": "gunnarmorling"}, "path": "debezium-server/src/test/java/io/debezium/server/KinesisIT.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.server;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import org.awaitility.Awaitility;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Test;\n+\n+import io.debezium.server.events.ConnectorCompletedEvent;\n+import io.debezium.server.events.ConnectorStartedEvent;\n+import io.debezium.util.Testing;\n+import io.quarkus.test.junit.QuarkusTest;\n+\n+import software.amazon.awssdk.auth.credentials.ProfileCredentialsProvider;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.kinesis.KinesisClient;\n+import software.amazon.awssdk.services.kinesis.model.GetRecordsRequest;\n+import software.amazon.awssdk.services.kinesis.model.GetRecordsResponse;\n+import software.amazon.awssdk.services.kinesis.model.GetShardIteratorRequest;\n+import software.amazon.awssdk.services.kinesis.model.GetShardIteratorResponse;\n+import software.amazon.awssdk.services.kinesis.model.Record;\n+import software.amazon.awssdk.services.kinesis.model.ShardIteratorType;\n+\n+/**\n+ * Integration test that verifies basic reading from PostgreSQL database and writing to Kinesis stream.\n+ *\n+ * @author Jiri Pechanec\n+ */\n+@QuarkusTest\n+public class KinesisIT {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ded13a5605ce162659e7462456379c0f81217bc"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2NzUxOQ==", "bodyText": "It uses default JSON serializer if not configured", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r424167519", "createdAt": "2020-05-13T04:36:08Z", "author": {"login": "jpechane"}, "path": "debezium-server/src/test/java/io/debezium/server/KinesisIT.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.server;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import org.awaitility.Awaitility;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Test;\n+\n+import io.debezium.server.events.ConnectorCompletedEvent;\n+import io.debezium.server.events.ConnectorStartedEvent;\n+import io.debezium.util.Testing;\n+import io.quarkus.test.junit.QuarkusTest;\n+\n+import software.amazon.awssdk.auth.credentials.ProfileCredentialsProvider;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.kinesis.KinesisClient;\n+import software.amazon.awssdk.services.kinesis.model.GetRecordsRequest;\n+import software.amazon.awssdk.services.kinesis.model.GetRecordsResponse;\n+import software.amazon.awssdk.services.kinesis.model.GetShardIteratorRequest;\n+import software.amazon.awssdk.services.kinesis.model.GetShardIteratorResponse;\n+import software.amazon.awssdk.services.kinesis.model.Record;\n+import software.amazon.awssdk.services.kinesis.model.ShardIteratorType;\n+\n+/**\n+ * Integration test that verifies basic reading from PostgreSQL database and writing to Kinesis stream.\n+ *\n+ * @author Jiri Pechanec\n+ */\n+@QuarkusTest\n+public class KinesisIT {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY5MjY5MA=="}, "originalCommit": {"oid": "2ded13a5605ce162659e7462456379c0f81217bc"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODUxNDMxOnYy", "diffSide": "RIGHT", "path": "debezium-server/src/main/java/io/debezium/server/Server.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMjozMzoxMFrOGUEU9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNjoyMDowN1rOGUi7TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY5NTYwNw==", "bodyText": "We really need to get other types enabled (like Integer for keys), but that can be done separately.", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r423695607", "createdAt": "2020-05-12T12:33:10Z", "author": {"login": "gunnarmorling"}, "path": "debezium-server/src/main/java/io/debezium/server/Server.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.server;\n+\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.spi.CreationalContext;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.spi.Bean;\n+import javax.enterprise.inject.spi.BeanManager;\n+import javax.inject.Inject;\n+\n+import org.eclipse.microprofile.config.Config;\n+import org.eclipse.microprofile.config.ConfigProvider;\n+import org.eclipse.microprofile.health.Liveness;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.debezium.DebeziumException;\n+import io.debezium.engine.ChangeEvent;\n+import io.debezium.engine.DebeziumEngine;\n+import io.debezium.engine.DebeziumEngine.ChangeConsumer;\n+import io.debezium.engine.format.Avro;\n+import io.debezium.engine.format.Json;\n+import io.debezium.engine.format.SerializationFormat;\n+import io.quarkus.runtime.ShutdownEvent;\n+import io.quarkus.runtime.Startup;\n+\n+/**\n+ * <p>The entry point of the Quarkus-based standalone server. The server is configured via Quarkus/Microprofile Configuration sources\n+ * and provides few out-of-the-box target implementations.</p>\n+ * <p>The implementation uses CDI to find all classes that implements {@link DebeziumEngine.ChangeConsumer} interface.\n+ * The candidate classes should be annotated with {@code @Named} annotation and should be {@code Dependent}.</p>\n+ * <p>The configuration option {@code debezium.consumer} provides a name of the consumer that should be used and the value\n+ * must match to exactly one of the implementation classes.</p>\n+ *\n+ * @author Jiri Pechanec\n+ *\n+ */\n+@ApplicationScoped\n+@Startup\n+public class Server {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Server.class);\n+\n+    private static final String PROP_PREFIX = \"debezium.\";\n+    private static final String PROP_CONSUMER_NAME = PROP_PREFIX + \"consumer\";\n+    private static final String PROP_KEY_FORMAT = PROP_PREFIX + \"format.key\";\n+    private static final String PROP_VALUE_FORMAT = PROP_PREFIX + \"format.value\";\n+    private static final String PROP_TERMINATION_WAIT = PROP_PREFIX + \"termination.wait\";\n+\n+    private static final String FORMAT_JSON = Json.class.getSimpleName().toLowerCase();\n+    private static final String FORMAT_AVRO = Avro.class.getSimpleName().toLowerCase();\n+\n+    private ExecutorService executor = Executors.newSingleThreadExecutor();\n+\n+    @Inject\n+    BeanManager beanManager;\n+\n+    @Inject\n+    @Liveness\n+    ConnectorLifecycle health;\n+\n+    private Bean<DebeziumEngine.ChangeConsumer<ChangeEvent<?, ?>>> consumerBean;\n+    private CreationalContext<ChangeConsumer<ChangeEvent<?, ?>>> consumerBeanCreationalContext;\n+    private DebeziumEngine.ChangeConsumer<ChangeEvent<?, ?>> consumer;\n+    private DebeziumEngine<?> engine;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @PostConstruct\n+    public void start() {\n+        final Config config = ConfigProvider.getConfig();\n+        final String name = config.getValue(PROP_CONSUMER_NAME, String.class);\n+\n+        final Set<Bean<?>> beans = beanManager.getBeans(name).stream()\n+                .filter(x -> DebeziumEngine.ChangeConsumer.class.isAssignableFrom(x.getBeanClass()))\n+                .collect(Collectors.toSet());\n+        LOGGER.debug(\"Found {} candidate consumer(s)\", beans.size());\n+\n+        if (beans.size() == 0) {\n+            throw new DebeziumException(\"No Debezium consumer named '\" + name + \"' is available\");\n+        }\n+        else if (beans.size() > 1) {\n+            throw new DebeziumException(\"Multiple Debezium consumers named '\" + name + \"' were found\");\n+        }\n+\n+        consumerBean = (Bean<DebeziumEngine.ChangeConsumer<ChangeEvent<?, ?>>>) beans.iterator().next();\n+        consumerBeanCreationalContext = beanManager.createCreationalContext(consumerBean);\n+        consumer = consumerBean.create(consumerBeanCreationalContext);\n+        LOGGER.info(\"Consumer '{}' instantiated\", consumer.getClass().getName());\n+\n+        final Class<? extends SerializationFormat<?>> keyFormat = getFormat(config, PROP_KEY_FORMAT);\n+        final Class<? extends SerializationFormat<?>> valueFormat = getFormat(config, PROP_VALUE_FORMAT);\n+        final Properties props = configToProperties(config);\n+        props.setProperty(\"name\", name);\n+\n+        DebeziumEngine.Builder<?> builder = null;\n+        // TODO - apply variance and covariance rules on Debezium API to\n+        // support direct assignment to DebeziumEngine.Builder<ChangeEvent<?, ?>>\n+        if (keyFormat == Json.class && valueFormat == Json.class) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ded13a5605ce162659e7462456379c0f81217bc"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE5Njk0MA==", "bodyText": "Yes, but for that we need first to solve to generification of Debezium API using covariance and contravariance", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r424196940", "createdAt": "2020-05-13T06:20:07Z", "author": {"login": "jpechane"}, "path": "debezium-server/src/main/java/io/debezium/server/Server.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.server;\n+\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.spi.CreationalContext;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.spi.Bean;\n+import javax.enterprise.inject.spi.BeanManager;\n+import javax.inject.Inject;\n+\n+import org.eclipse.microprofile.config.Config;\n+import org.eclipse.microprofile.config.ConfigProvider;\n+import org.eclipse.microprofile.health.Liveness;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.debezium.DebeziumException;\n+import io.debezium.engine.ChangeEvent;\n+import io.debezium.engine.DebeziumEngine;\n+import io.debezium.engine.DebeziumEngine.ChangeConsumer;\n+import io.debezium.engine.format.Avro;\n+import io.debezium.engine.format.Json;\n+import io.debezium.engine.format.SerializationFormat;\n+import io.quarkus.runtime.ShutdownEvent;\n+import io.quarkus.runtime.Startup;\n+\n+/**\n+ * <p>The entry point of the Quarkus-based standalone server. The server is configured via Quarkus/Microprofile Configuration sources\n+ * and provides few out-of-the-box target implementations.</p>\n+ * <p>The implementation uses CDI to find all classes that implements {@link DebeziumEngine.ChangeConsumer} interface.\n+ * The candidate classes should be annotated with {@code @Named} annotation and should be {@code Dependent}.</p>\n+ * <p>The configuration option {@code debezium.consumer} provides a name of the consumer that should be used and the value\n+ * must match to exactly one of the implementation classes.</p>\n+ *\n+ * @author Jiri Pechanec\n+ *\n+ */\n+@ApplicationScoped\n+@Startup\n+public class Server {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Server.class);\n+\n+    private static final String PROP_PREFIX = \"debezium.\";\n+    private static final String PROP_CONSUMER_NAME = PROP_PREFIX + \"consumer\";\n+    private static final String PROP_KEY_FORMAT = PROP_PREFIX + \"format.key\";\n+    private static final String PROP_VALUE_FORMAT = PROP_PREFIX + \"format.value\";\n+    private static final String PROP_TERMINATION_WAIT = PROP_PREFIX + \"termination.wait\";\n+\n+    private static final String FORMAT_JSON = Json.class.getSimpleName().toLowerCase();\n+    private static final String FORMAT_AVRO = Avro.class.getSimpleName().toLowerCase();\n+\n+    private ExecutorService executor = Executors.newSingleThreadExecutor();\n+\n+    @Inject\n+    BeanManager beanManager;\n+\n+    @Inject\n+    @Liveness\n+    ConnectorLifecycle health;\n+\n+    private Bean<DebeziumEngine.ChangeConsumer<ChangeEvent<?, ?>>> consumerBean;\n+    private CreationalContext<ChangeConsumer<ChangeEvent<?, ?>>> consumerBeanCreationalContext;\n+    private DebeziumEngine.ChangeConsumer<ChangeEvent<?, ?>> consumer;\n+    private DebeziumEngine<?> engine;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @PostConstruct\n+    public void start() {\n+        final Config config = ConfigProvider.getConfig();\n+        final String name = config.getValue(PROP_CONSUMER_NAME, String.class);\n+\n+        final Set<Bean<?>> beans = beanManager.getBeans(name).stream()\n+                .filter(x -> DebeziumEngine.ChangeConsumer.class.isAssignableFrom(x.getBeanClass()))\n+                .collect(Collectors.toSet());\n+        LOGGER.debug(\"Found {} candidate consumer(s)\", beans.size());\n+\n+        if (beans.size() == 0) {\n+            throw new DebeziumException(\"No Debezium consumer named '\" + name + \"' is available\");\n+        }\n+        else if (beans.size() > 1) {\n+            throw new DebeziumException(\"Multiple Debezium consumers named '\" + name + \"' were found\");\n+        }\n+\n+        consumerBean = (Bean<DebeziumEngine.ChangeConsumer<ChangeEvent<?, ?>>>) beans.iterator().next();\n+        consumerBeanCreationalContext = beanManager.createCreationalContext(consumerBean);\n+        consumer = consumerBean.create(consumerBeanCreationalContext);\n+        LOGGER.info(\"Consumer '{}' instantiated\", consumer.getClass().getName());\n+\n+        final Class<? extends SerializationFormat<?>> keyFormat = getFormat(config, PROP_KEY_FORMAT);\n+        final Class<? extends SerializationFormat<?>> valueFormat = getFormat(config, PROP_VALUE_FORMAT);\n+        final Properties props = configToProperties(config);\n+        props.setProperty(\"name\", name);\n+\n+        DebeziumEngine.Builder<?> builder = null;\n+        // TODO - apply variance and covariance rules on Debezium API to\n+        // support direct assignment to DebeziumEngine.Builder<ChangeEvent<?, ?>>\n+        if (keyFormat == Json.class && valueFormat == Json.class) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY5NTYwNw=="}, "originalCommit": {"oid": "2ded13a5605ce162659e7462456379c0f81217bc"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODUyMjUyOnYy", "diffSide": "RIGHT", "path": "debezium-server/src/main/java/io/debezium/server/pubsub/PubSubChangeConsumer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMjozNToyMVrOGUEaPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMjozNToyMVrOGUEaPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY5Njk1Nw==", "bodyText": "Might make sense to move them into separate modules, but can be done as a follow-up.", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r423696957", "createdAt": "2020-05-12T12:35:21Z", "author": {"login": "gunnarmorling"}, "path": "debezium-server/src/main/java/io/debezium/server/pubsub/PubSubChangeConsumer.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.server.pubsub;\n+\n+import java.util.List;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Named;\n+\n+import io.debezium.engine.ChangeEvent;\n+import io.debezium.engine.DebeziumEngine;\n+import io.debezium.engine.DebeziumEngine.RecordCommitter;\n+\n+/**\n+ * Implementation of the consumer that delivers the messages into Google Pub/Sub destination.\n+ *\n+ * @author Jiri Pechanec\n+ *\n+ */\n+@Named(\"pub-sub\")\n+@Dependent\n+public class PubSubChangeConsumer implements DebeziumEngine.ChangeConsumer<ChangeEvent<?, ?>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ded13a5605ce162659e7462456379c0f81217bc"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjA2MDk1OnYy", "diffSide": "RIGHT", "path": "debezium-server/src/test/java/io/debezium/server/TestConfigSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNzowNDozMFrOGVOrHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNzowNDozMFrOGVOrHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkxMzY5Mw==", "bodyText": "Ok, very nice now with the more consistent properties structure. I think we should add \"debezium.source.type\"=\"postgres\" as a simplified alias, too (can be done separately).", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r424913693", "createdAt": "2020-05-14T07:04:30Z", "author": {"login": "gunnarmorling"}, "path": "debezium-server/src/test/java/io/debezium/server/TestConfigSource.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.server;\n+\n+import java.nio.file.Path;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.kafka.connect.runtime.standalone.StandaloneConfig;\n+import org.eclipse.microprofile.config.spi.ConfigSource;\n+\n+import io.debezium.util.Testing;\n+\n+public class TestConfigSource implements ConfigSource {\n+\n+    public static final String KINESIS_REGION = \"eu-central-1\";\n+    public static final Path OFFSET_STORE_PATH = Testing.Files.createTestingPath(\"file-connector-offsets.txt\").toAbsolutePath();\n+    public static final Path TEST_FILE_PATH = Testing.Files.createTestingPath(\"file-connector-input.txt\").toAbsolutePath();\n+\n+    final Map<String, String> integrationTest = new HashMap<>();\n+    final Map<String, String> e2eTest = new HashMap<>();\n+    final Map<String, String> unitTest = new HashMap<>();\n+    final Map<String, String> config;\n+\n+    public TestConfigSource() {\n+        e2eTest.put(\"debezium.sink.type\", \"kinesis\");\n+        e2eTest.put(\"debezium.sink.kinesis.region\", KINESIS_REGION);\n+        e2eTest.put(\"debezium.source.connector.class\", \"io.debezium.connector.postgresql.PostgresConnector\");\n+        e2eTest.put(\"debezium.source.\" + StandaloneConfig.OFFSET_STORAGE_FILE_FILENAME_CONFIG, OFFSET_STORE_PATH.toAbsolutePath().toString());\n+        e2eTest.put(\"debezium.source.offset.flush.interval.ms\", \"0\");\n+        e2eTest.put(\"debezium.source.database.hostname\", TestDatabase.POSTGRES_HOST);\n+        e2eTest.put(\"debezium.source.database.port\", Integer.toString(TestDatabase.POSTGRES_PORT));\n+        e2eTest.put(\"debezium.source.database.user\", TestDatabase.POSTGRES_USER);\n+        e2eTest.put(\"debezium.source.database.password\", TestDatabase.POSTGRES_PASSWORD);\n+        e2eTest.put(\"debezium.source.database.dbname\", TestDatabase.POSTGRES_DBNAME);\n+        e2eTest.put(\"debezium.source.database.server.name\", \"testc\");\n+        e2eTest.put(\"debezium.source.schema.whitelist\", \"inventory\");\n+        e2eTest.put(\"debezium.source.table.whitelist\", \"inventory.customers\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bcce6f8882d3397957f3272e0df70d5de71119b"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjA3MTcwOnYy", "diffSide": "RIGHT", "path": "debezium-api/src/main/java/io/debezium/engine/ChangeEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNzowODowOVrOGVOx7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNzowODowOVrOGVOx7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkxNTQzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return - a name of the logical destination for which the event is intended\n          \n          \n            \n                 * @return A name of the logical destination for which the event is intended", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r424915436", "createdAt": "2020-05-14T07:08:09Z", "author": {"login": "gunnarmorling"}, "path": "debezium-api/src/main/java/io/debezium/engine/ChangeEvent.java", "diffHunk": "@@ -19,4 +19,9 @@\n     public K key();\n \n     public V value();\n+\n+    /**\n+     * @return - a name of the logical destination for which the event is intended", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bcce6f8882d3397957f3272e0df70d5de71119b"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjA3MzcyOnYy", "diffSide": "RIGHT", "path": "debezium-assembly-descriptors/src/main/resources/assemblies/server-distribution.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNzowODo1NlrOGVOzRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNzoyNzoyOVrOGVPW2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkxNTc4MQ==", "bodyText": "Could you share the tree output of the contents of the archive here?", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r424915781", "createdAt": "2020-05-14T07:08:56Z", "author": {"login": "gunnarmorling"}, "path": "debezium-assembly-descriptors/src/main/resources/assemblies/server-distribution.xml", "diffHunk": "@@ -0,0 +1,48 @@\n+<?xml version=\"1.0\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bcce6f8882d3397957f3272e0df70d5de71119b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkyNDg4OA==", "bodyText": "debezium-server/\n\u251c\u2500\u2500 CHANGELOG.md\n\u251c\u2500\u2500 conf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 application.properties\n\u251c\u2500\u2500 CONTRIBUTE.md\n\u251c\u2500\u2500 COPYRIGHT.txt\n\u251c\u2500\u2500 debezium-server-1.2.0-SNAPSHOT-runner.jar\n\u251c\u2500\u2500 lib\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 activation-1.1.1.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 annotations-2.13.13.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 antlr4-runtime-4.7.2.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 aopalliance-repackaged-2.5.0.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 apache-client-2.10.70.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 arc-1.4.1.Final.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 argparse4j-0.7.0.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 auth-2.13.13.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 aws-cbor-protocol-2.13.13.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 aws-core-2.13.13.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 aws-json-protocol-2.13.13.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 bson-3.12.3.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 commons-codec-1.13.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 commons-lang3-3.9.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 commons-logging-1.2.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 connect-api-2.5.0.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 connect-file-2.5.0.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 connect-json-2.5.0.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 connect-runtime-2.5.0.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 connect-transforms-2.5.0.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 debezium-api-1.2.0-SNAPSHOT.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 debezium-connector-mongodb-1.2.0-SNAPSHOT.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 debezium-connector-mysql-1.2.0-SNAPSHOT.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 debezium-connector-postgres-1.2.0-SNAPSHOT.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 debezium-connector-sqlserver-1.2.0-SNAPSHOT.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 debezium-core-1.2.0-SNAPSHOT.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 debezium-ddl-parser-1.2.0-SNAPSHOT.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 debezium-embedded-1.2.0-SNAPSHOT.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 eventstream-1.0.1.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 graal-sdk-19.3.1.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 hk2-api-2.5.0.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 hk2-locator-2.5.0.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 hk2-utils-2.5.0.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 httpclient-4.5.12.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 http-client-spi-2.13.13.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 httpcore-4.4.13.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jackson-annotations-2.10.3.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jackson-core-2.10.0.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jackson-databind-2.10.0.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jackson-dataformat-cbor-2.10.3.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jackson-datatype-jdk8-2.10.3.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jackson-datatype-jsr310-2.10.0.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jackson-jaxrs-base-2.10.3.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jackson-jaxrs-json-provider-2.10.3.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jackson-module-jaxb-annotations-2.10.3.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jakarta.activation-1.2.1.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jakarta.activation-api-1.2.1.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jakarta.annotation-api-1.3.5.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jakarta.el-api-3.0.3.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jakarta.enterprise.cdi-api-2.0.2.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jakarta.inject-2.5.0.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jakarta.inject-api-1.0.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jakarta.interceptor-api-1.2.5.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jakarta.json-1.1.6.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jakarta.transaction-api-1.3.3.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jakarta.validation-api-2.0.2.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jakarta.ws.rs-api-2.1.5.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jakarta.xml.bind-api-2.3.2.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 javassist-3.26.0-GA.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 javax.activation-api-1.2.0.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 javax.servlet-api-3.1.0.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 javax.ws.rs-api-2.1.1.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jaxb-api-2.3.1.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jboss-jaxb-api_2.3_spec-2.0.0.Final.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jboss-jaxrs-api_2.1_spec-2.0.1.Final.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jboss-logging-3.3.2.Final.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jboss-logging-annotations-2.1.0.Final.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jboss-logmanager-embedded-1.0.4.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jboss-threads-3.1.1.Final.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jersey-client-2.28.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jersey-common-2.28.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jersey-container-servlet-2.28.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jersey-container-servlet-core-2.28.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jersey-hk2-2.28.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jersey-media-jaxb-2.28.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jersey-server-2.28.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jetty-client-9.4.24.v20191120.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jetty-continuation-9.4.24.v20191120.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jetty-http-9.4.24.v20191120.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jetty-io-9.4.24.v20191120.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jetty-security-9.4.24.v20191120.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jetty-server-9.4.24.v20191120.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jetty-servlet-9.4.24.v20191120.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jetty-servlets-9.4.24.v20191120.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jetty-util-9.4.24.v20191120.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 kafka-clients-2.5.0.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 kafka-log4j-appender-2.5.0.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 kafka-tools-2.5.0.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 kinesis-2.13.13.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 lz4-java-1.7.1.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 maven-artifact-3.6.3.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 microprofile-config-api-1.4.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 microprofile-context-propagation-api-1.0.1.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 microprofile-health-api-2.2.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mongodb-driver-3.12.3.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mongodb-driver-core-3.12.3.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mssql-jdbc-7.2.2.jre8.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mutiny-0.4.4.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mysql-binlog-connector-java-0.19.1.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mysql-connector-java-8.0.16.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 netty-buffer-4.1.45.Final.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 netty-codec-4.1.45.Final.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 netty-codec-dns-4.1.45.Final.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 netty-codec-http2-4.1.45.Final.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 netty-codec-http-4.1.45.Final.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 netty-codec-socks-4.1.45.Final.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 netty-common-4.1.45.Final.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 netty-handler-4.1.45.Final.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 netty-handler-proxy-4.1.45.Final.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 netty-nio-client-2.10.70.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 netty-reactive-streams-2.0.4.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 netty-reactive-streams-http-2.0.4.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 netty-resolver-4.1.45.Final.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 netty-resolver-dns-4.1.45.Final.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 netty-transport-4.1.45.Final.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 netty-transport-native-epoll-4.1.45.Final-linux-x86_64.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 netty-transport-native-unix-common-4.1.45.Final.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 osgi-resource-locator-1.0.1.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 plexus-utils-3.2.1.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 postgresql-42.2.12.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 profiles-2.13.13.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 protobuf-java-3.8.0.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 protocol-core-2.13.13.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 quarkus-arc-1.4.1.Final.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 quarkus-core-1.4.1.Final.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 quarkus-development-mode-spi-1.4.1.Final.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 quarkus-ide-launcher-1.4.1.Final.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 quarkus-jsonp-1.4.1.Final.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 quarkus-netty-1.4.1.Final.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 quarkus-resteasy-1.4.1.Final.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 quarkus-resteasy-common-1.4.1.Final.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 quarkus-resteasy-server-common-1.4.1.Final.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 quarkus-security-1.1.0.Final.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 quarkus-smallrye-health-1.4.1.Final.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 quarkus-vertx-core-1.4.1.Final.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 quarkus-vertx-http-1.4.1.Final.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 reactive-streams-1.0.3.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 reflections-0.9.12.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 regions-2.13.13.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 resteasy-core-4.5.3.Final.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 resteasy-core-spi-4.5.3.Final.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 sdk-core-2.13.13.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 slf4j-api-1.7.28.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 slf4j-jboss-logging-1.2.0.Final.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 smallrye-config-1.7.0.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 smallrye-config-common-1.7.0.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 smallrye-health-2.2.0.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 smallrye-health-extension-api-2.2.0.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 snappy-java-1.1.7.3.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 utils-2.13.13.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 validation-api-2.0.1.Final.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 vertx-auth-common-3.8.5.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 vertx-bridge-common-3.8.5.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 vertx-core-3.8.5.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 vertx-web-3.8.5.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 vertx-web-common-3.8.5.jar\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 wildfly-common-1.5.4.Final-format-001.jar\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 zstd-jni-1.4.4-7.jar\n\u251c\u2500\u2500 LICENSE-3rd-PARTIES.txt\n\u251c\u2500\u2500 LICENSE.txt\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 run.sh", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r424924888", "createdAt": "2020-05-14T07:27:29Z", "author": {"login": "jpechane"}, "path": "debezium-assembly-descriptors/src/main/resources/assemblies/server-distribution.xml", "diffHunk": "@@ -0,0 +1,48 @@\n+<?xml version=\"1.0\"?>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkxNTc4MQ=="}, "originalCommit": {"oid": "2bcce6f8882d3397957f3272e0df70d5de71119b"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjA3NTIyOnYy", "diffSide": "RIGHT", "path": "debezium-server/pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNzowOTozM1rOGVO0Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNzoyNToyMFrOGVPSgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkxNjA0Ng==", "bodyText": "What's the license? Can we package this?", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r424916046", "createdAt": "2020-05-14T07:09:33Z", "author": {"login": "gunnarmorling"}, "path": "debezium-server/pom.xml", "diffHunk": "@@ -0,0 +1,228 @@\n+<?xml version=\"1.0\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <groupId>io.debezium</groupId>\n+        <artifactId>debezium-parent</artifactId>\n+        <version>1.2.0-SNAPSHOT</version>\n+        <relativePath>../pom.xml</relativePath>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+    <artifactId>debezium-server</artifactId>\n+    <name>Debezium Standalone Quarkus Server</name>\n+    <packaging>jar</packaging>\n+\n+    <properties>\n+        <version.kinesis>2.13.13</version.kinesis>\n+\n+        <!-- Assembly configuration -->\n+        <assembly.descriptor>server-distribution</assembly.descriptor>\n+    </properties>\n+\n+    <dependencyManagement>\n+        <dependencies>\n+            <dependency>\n+                <groupId>io.quarkus</groupId>\n+                <artifactId>quarkus-bom-deployment</artifactId>\n+                <version>${quarkus.version}</version>\n+                <type>pom</type>\n+                <scope>import</scope>\n+            </dependency>\n+\n+            <!-- Target systems -->\n+            <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bcce6f8882d3397957f3272e0df70d5de71119b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkyMzc3Nw==", "bodyText": "@gunnarmorling It is ASL so we should be good to go.", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r424923777", "createdAt": "2020-05-14T07:25:20Z", "author": {"login": "jpechane"}, "path": "debezium-server/pom.xml", "diffHunk": "@@ -0,0 +1,228 @@\n+<?xml version=\"1.0\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <groupId>io.debezium</groupId>\n+        <artifactId>debezium-parent</artifactId>\n+        <version>1.2.0-SNAPSHOT</version>\n+        <relativePath>../pom.xml</relativePath>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+    <artifactId>debezium-server</artifactId>\n+    <name>Debezium Standalone Quarkus Server</name>\n+    <packaging>jar</packaging>\n+\n+    <properties>\n+        <version.kinesis>2.13.13</version.kinesis>\n+\n+        <!-- Assembly configuration -->\n+        <assembly.descriptor>server-distribution</assembly.descriptor>\n+    </properties>\n+\n+    <dependencyManagement>\n+        <dependencies>\n+            <dependency>\n+                <groupId>io.quarkus</groupId>\n+                <artifactId>quarkus-bom-deployment</artifactId>\n+                <version>${quarkus.version}</version>\n+                <type>pom</type>\n+                <scope>import</scope>\n+            </dependency>\n+\n+            <!-- Target systems -->\n+            <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkxNjA0Ng=="}, "originalCommit": {"oid": "2bcce6f8882d3397957f3272e0df70d5de71119b"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4321, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}