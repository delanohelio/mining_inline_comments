{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2MDc2OTQ5", "number": 1930, "title": "DBZ-2726 Clean MySQL TIMESTAMP default value", "bodyText": "https://issues.redhat.com/browse/DBZ-2726\nAlthough MySQL can do some basic validation of the default value of the TIMESTAMP column, all the following default values can be applied successfully to MySQL, because MySQL can automatically fix them when applying the DDL. However, the raw DDL is sent to Debezium and many of the values will make the MySQL Connector task fail when updating the internal schema:\nCREATE TABLE my_table (\n    ts_col01 TIMESTAMP DEFAULT '2020-01-02',\n    ts_col02 TIMESTAMP DEFAULT '2020-01-02 ',\n    ts_col03 TIMESTAMP DEFAULT '2020-01-02:',\n    ts_col04 TIMESTAMP DEFAULT '2020-01-02--',\n    ts_col05 TIMESTAMP DEFAULT '2020-01-02 03',\n    ts_col06 TIMESTAMP DEFAULT '2020-01-02 003',\n    ts_col07 TIMESTAMP DEFAULT '2020-01-02 03:',\n    ts_col08 TIMESTAMP DEFAULT '2020-01-02 03:04',\n    ts_col09 TIMESTAMP DEFAULT '2020-01-02 03:004',\n    ts_col10 TIMESTAMP DEFAULT '2020-01-02 03:04:05',\n    ts_col11 TIMESTAMP DEFAULT '2020-01-02 03:04:05.6',\n    ts_col12 TIMESTAMP DEFAULT '2020-01-02:03:04:05',\n    ts_col13 TIMESTAMP DEFAULT '2020-01-02-03:04:05',\n    ts_col14 TIMESTAMP DEFAULT '2020-01-02--03:04:05',\n    ts_col15 TIMESTAMP DEFAULT '2020-01-02--03:004:0005',\n    ts_col16 TIMESTAMP DEFAULT '02020-0001-00002--03:004:0005',\n    ts_col17 TIMESTAMP DEFAULT '1970-01-01:00:00:001'\n);\nProposed solution:\nClean the TIMESTAMP default value passed from the DDL.", "createdAt": "2020-11-05T13:54:37Z", "url": "https://github.com/debezium/debezium/pull/1930", "merged": true, "mergeCommit": {"oid": "78c061a86d4eff0097e13a6b37ca5d47be89fc00"}, "closed": true, "closedAt": "2020-11-10T09:01:34Z", "author": {"login": "keweishang"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZi81tABqjM5NjI1NzEzOTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABda3n97ABqjM5NzQ3NDM4MzI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1OTU2NzI2", "url": "https://github.com/debezium/debezium/pull/1930#pullrequestreview-525956726", "createdAt": "2020-11-09T06:39:04Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNjozOTowNFrOHvgl9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNjozOTowNFrOHvgl9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU3OTEyNQ==", "bodyText": "Could this part be consturcted with a single String.format for all compoents?", "url": "https://github.com/debezium/debezium/pull/1930#discussion_r519579125", "createdAt": "2020-11-09T06:39:04Z", "author": {"login": "jpechane"}, "path": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/MySqlDefaultValueConverter.java", "diffHunk": "@@ -259,6 +260,125 @@ private DateTimeFormatter timestampFormat(int length) {\n         return dtf.toFormatter();\n     }\n \n+    /**\n+     * Clean input timestamp to yyyy-mm-dd hh:mm:ss[.fffffffff] format\n+     *\n+     * @param s input timestamp\n+     * @return cleaned timestamp\n+     */\n+    private String cleanTimestamp(String s) {\n+        if (s == null) {\n+            throw new java.lang.IllegalArgumentException(\"null string\");\n+        }\n+\n+        s = s.trim();\n+\n+        final int MAX_MONTH = 12;\n+        final int MAX_DAY = 31;\n+\n+        // Parse the date\n+        int firstDash = s.indexOf('-');\n+        int secondDash = s.indexOf('-', firstDash + 1);\n+\n+        int dividingStart = -1;\n+        int dividingEnd = -1;\n+        boolean hasDividing = false;\n+        for (int i = secondDash + 1; i < s.length(); i++) {\n+            if (!Character.isDigit(s.charAt(i))) {\n+                dividingStart = i;\n+                hasDividing = true;\n+                break;\n+            }\n+        }\n+        if (hasDividing) {\n+            for (int i = dividingStart; i < s.length(); i++) {\n+                if (Character.isDigit(s.charAt(i))) {\n+                    break;\n+                }\n+                dividingEnd = i;\n+            }\n+        }\n+\n+        // Parse the time\n+        int firstColon = s.indexOf(':', dividingEnd + 1);\n+        int secondColon = s.indexOf(':', firstColon + 1);\n+        int period = s.indexOf('.', secondColon + 1);\n+\n+        int year = 0;\n+        int month = 0;\n+        int day = 0;\n+        int hour = 0;\n+        int minute = 0;\n+        int second = 0;\n+\n+        // Get the date\n+        int len = s.length();\n+        boolean parsedDate = false;\n+        if (firstDash > 0 && secondDash > firstDash) {\n+            year = Integer.parseInt(s.substring(0, firstDash));\n+            month = Integer.parseInt(s.substring(firstDash + 1, secondDash));\n+            if (hasDividing) {\n+                day = Integer.parseInt(s.substring(secondDash + 1, dividingStart));\n+            }\n+            else {\n+                day = Integer.parseInt(s.substring(secondDash + 1, len));\n+            }\n+\n+            if ((month >= 1 && month <= MAX_MONTH) && (day >= 1 && day <= MAX_DAY)) {\n+                parsedDate = true;\n+            }\n+        }\n+        if (!parsedDate) {\n+            throw new java.lang.IllegalArgumentException(\"Cannot parse the date from \" + s);\n+        }\n+\n+        // Get the time. Hour, minute, second and colons are all optional\n+        if (hasDividing && dividingEnd < len - 1) {\n+            if (firstColon == -1) {\n+                hour = Integer.parseInt(s.substring(dividingEnd + 1, len));\n+            }\n+            else {\n+                hour = Integer.parseInt(s.substring(dividingEnd + 1, firstColon));\n+                if (firstColon < len - 1) {\n+                    if (secondColon == -1) {\n+                        minute = Integer.parseInt(s.substring(firstColon + 1, len));\n+                    }\n+                    else {\n+                        minute = Integer.parseInt(s.substring(firstColon + 1, secondColon));\n+                        if (secondColon < len - 1) {\n+                            if (period == -1) {\n+                                second = Integer.parseInt(s.substring(secondColon + 1, len));\n+                            }\n+                            else {\n+                                second = Integer.parseInt(s.substring(secondColon + 1, period));\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        StringBuilder cleanedTimestamp = new StringBuilder();\n+        cleanedTimestamp = cleanedTimestamp", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 111}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1OTYzNzc1", "url": "https://github.com/debezium/debezium/pull/1930#pullrequestreview-525963775", "createdAt": "2020-11-09T06:56:59Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNjo1Njo1OVrOHvg7KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNjo1Njo1OVrOHvg7KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU4NDU1Mw==", "bodyText": "Is also acceptable case when there is the period but no following numbers?", "url": "https://github.com/debezium/debezium/pull/1930#discussion_r519584553", "createdAt": "2020-11-09T06:56:59Z", "author": {"login": "jpechane"}, "path": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/MySqlAntlrDdlParserTest.java", "diffHunk": "@@ -2542,6 +2544,87 @@ public void shouldNotNullPositionBeforeOrAfterDefaultValue() {\n         assertThat(table.columnWithName(\"ts_col5\").defaultValue()).isEqualTo(isoEpoch);\n     }\n \n+    @Test\n+    @FixFor(\"DBZ-2726\")\n+    public void shouldParseTimestampDefaultValue() {\n+        // All the following default values for TIMESTAMP can be successfully applied to MySQL\n+        String ddl = \"CREATE TABLE my_table (\" +\n+                \"ts_col01 TIMESTAMP DEFAULT '2020-01-02',\" +\n+                \"ts_col02 TIMESTAMP DEFAULT '2020-01-02 ',\" +\n+                \"ts_col03 TIMESTAMP DEFAULT '2020-01-02:',\" +\n+                \"ts_col04 TIMESTAMP DEFAULT '2020-01-02--',\" +\n+                \"ts_col05 TIMESTAMP DEFAULT '2020-01-02 03',\" +\n+                \"ts_col06 TIMESTAMP DEFAULT '2020-01-02 003',\" +\n+                \"ts_col07 TIMESTAMP DEFAULT '2020-01-02 03:',\" +\n+                \"ts_col08 TIMESTAMP DEFAULT '2020-01-02 03:04',\" +\n+                \"ts_col09 TIMESTAMP DEFAULT '2020-01-02 03:004',\" +\n+                \"ts_col10 TIMESTAMP DEFAULT '2020-01-02 03:04:05',\" +\n+                \"ts_col11 TIMESTAMP DEFAULT '2020-01-02 03:04:05.6',\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9ca1031f14226998adfc9d9f557794a630dfc1f", "author": {"user": {"login": "keweishang", "name": "Kewei Shang"}}, "url": "https://github.com/debezium/debezium/commit/f9ca1031f14226998adfc9d9f557794a630dfc1f", "committedDate": "2020-11-09T08:57:20Z", "message": "DBZ-2726 Clean MySQL TIMESTAMP default value"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "f9ca1031f14226998adfc9d9f557794a630dfc1f", "author": {"user": {"login": "keweishang", "name": "Kewei Shang"}}, "url": "https://github.com/debezium/debezium/commit/f9ca1031f14226998adfc9d9f557794a630dfc1f", "committedDate": "2020-11-09T08:57:20Z", "message": "DBZ-2726 Clean MySQL TIMESTAMP default value"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "9dd4331356f1619fd4586eac78395247d46d5388", "author": {"user": {"login": "keweishang", "name": "Kewei Shang"}}, "url": "https://github.com/debezium/debezium/commit/9dd4331356f1619fd4586eac78395247d46d5388", "committedDate": "2020-11-09T16:47:32Z", "message": "DBZ-2726 extend data separator and time separator"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "9dd4331356f1619fd4586eac78395247d46d5388", "author": {"user": {"login": "keweishang", "name": "Kewei Shang"}}, "url": "https://github.com/debezium/debezium/commit/9dd4331356f1619fd4586eac78395247d46d5388", "committedDate": "2020-11-09T16:47:32Z", "message": "DBZ-2726 extend data separator and time separator"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2361, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}