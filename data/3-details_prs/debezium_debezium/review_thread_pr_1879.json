{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNDg0NjM4", "number": 1879, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQxNDoxMTowMVrOFa6HWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQxNDoxMTowMVrOFa6HWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYzNzU5NDQ5OnYy", "diffSide": "RIGHT", "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/AbstractRecordsProducerTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQxNDoxMTowMVrOImIMvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOVQwOTo0MjozM1rOIoOoZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njg1MTEzNQ==", "bodyText": "Lots of good explanation, but one key part is missing: what's the approach for dealing with this? I.e. does the assertion have some leniency built in?", "url": "https://github.com/debezium/debezium/pull/1879#discussion_r576851135", "createdAt": "2021-02-16T14:11:01Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/AbstractRecordsProducerTest.java", "diffHunk": "@@ -597,6 +603,34 @@ private long asEpochMicros(String timestamp) {\n \n         String expectedTzLarge = \"+21016-11-04T06:51:30.123456Z\";\n \n+        // The assertion for minimimum timestamps is problematic as it seems that Java and PostgreSQL handles conversion from large negative date\n+        // to microseconds in different way\n+        // written to database: 4713-12-31T23:59:59.999999 BC\n+        // arrived from decoding plugin: -210831897600000001\n+        // value from decoding plugin converted to Instant: -4712-12-31T23:59:59.999999Z - 1 year difference\n+        // JDBC driver delivers Timestamp B.C.E. 4713-12-31T23:59:59.000+0100 that internally contains -210835184391000001 and translates to Instant -4712-11-23T22:59:59.999999Z\n+        // The result is that JDBC driver and logical decoding plugin provides different values which moreover\n+        // do not map to Java conversions\n+        // It seems that JDBC driver always uses Gregorian calendar while Java Time API uses Julian\n+        // Also it seems that further distortions could be introduced by timezone used so instead of matching\n+        // against exact value the requested date should be smaller than -4712-11-01\n+        final SchemaAndValueField.Condition largeNegativeTimestamp = (String fieldName, Object expectedValue, Object actualValue) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48583730063aa8ab5ddcfc7efa067672550bc958"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODIyOTcyMg==", "bodyText": "@gunnarmorling Already rebased. The leniency is described at exactly tha last too lines of the comment", "url": "https://github.com/debezium/debezium/pull/1879#discussion_r578229722", "createdAt": "2021-02-18T08:43:59Z", "author": {"login": "jpechane"}, "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/AbstractRecordsProducerTest.java", "diffHunk": "@@ -597,6 +603,34 @@ private long asEpochMicros(String timestamp) {\n \n         String expectedTzLarge = \"+21016-11-04T06:51:30.123456Z\";\n \n+        // The assertion for minimimum timestamps is problematic as it seems that Java and PostgreSQL handles conversion from large negative date\n+        // to microseconds in different way\n+        // written to database: 4713-12-31T23:59:59.999999 BC\n+        // arrived from decoding plugin: -210831897600000001\n+        // value from decoding plugin converted to Instant: -4712-12-31T23:59:59.999999Z - 1 year difference\n+        // JDBC driver delivers Timestamp B.C.E. 4713-12-31T23:59:59.000+0100 that internally contains -210835184391000001 and translates to Instant -4712-11-23T22:59:59.999999Z\n+        // The result is that JDBC driver and logical decoding plugin provides different values which moreover\n+        // do not map to Java conversions\n+        // It seems that JDBC driver always uses Gregorian calendar while Java Time API uses Julian\n+        // Also it seems that further distortions could be introduced by timezone used so instead of matching\n+        // against exact value the requested date should be smaller than -4712-11-01\n+        final SchemaAndValueField.Condition largeNegativeTimestamp = (String fieldName, Object expectedValue, Object actualValue) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njg1MTEzNQ=="}, "originalCommit": {"oid": "48583730063aa8ab5ddcfc7efa067672550bc958"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTA1MzY3MA==", "bodyText": "Thx!", "url": "https://github.com/debezium/debezium/pull/1879#discussion_r579053670", "createdAt": "2021-02-19T09:42:33Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/AbstractRecordsProducerTest.java", "diffHunk": "@@ -597,6 +603,34 @@ private long asEpochMicros(String timestamp) {\n \n         String expectedTzLarge = \"+21016-11-04T06:51:30.123456Z\";\n \n+        // The assertion for minimimum timestamps is problematic as it seems that Java and PostgreSQL handles conversion from large negative date\n+        // to microseconds in different way\n+        // written to database: 4713-12-31T23:59:59.999999 BC\n+        // arrived from decoding plugin: -210831897600000001\n+        // value from decoding plugin converted to Instant: -4712-12-31T23:59:59.999999Z - 1 year difference\n+        // JDBC driver delivers Timestamp B.C.E. 4713-12-31T23:59:59.000+0100 that internally contains -210835184391000001 and translates to Instant -4712-11-23T22:59:59.999999Z\n+        // The result is that JDBC driver and logical decoding plugin provides different values which moreover\n+        // do not map to Java conversions\n+        // It seems that JDBC driver always uses Gregorian calendar while Java Time API uses Julian\n+        // Also it seems that further distortions could be introduced by timezone used so instead of matching\n+        // against exact value the requested date should be smaller than -4712-11-01\n+        final SchemaAndValueField.Condition largeNegativeTimestamp = (String fieldName, Object expectedValue, Object actualValue) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njg1MTEzNQ=="}, "originalCommit": {"oid": "48583730063aa8ab5ddcfc7efa067672550bc958"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4129, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}