{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1Mjg3NDMz", "number": 1709, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODo0MDo0N1rOERLBNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDowNjo1NlrOEjDepw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDQxNzgzOnYy", "diffSide": "RIGHT", "path": "debezium-connector-sqlserver/src/main/java/io/debezium/connector/sqlserver/SqlServerConnection.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODo0MDo0N1rOG1vazg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTowNTo1MFrOHRKnKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwNDYyMg==", "bodyText": "We should probably consider extracting incremental.fetch.size up and using this across multiple connectors?", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r459004622", "createdAt": "2020-07-22T18:40:47Z", "author": {"login": "Naros"}, "path": "debezium-connector-sqlserver/src/main/java/io/debezium/connector/sqlserver/SqlServerConnection.java", "diffHunk": "@@ -181,6 +195,10 @@ public void getChangesForTables(SqlServerChangeTable[] changeTables, Lsn interva\n             final Lsn fromLsn = getFromLsn(changeTable, intervalFromLsn);\n             LOGGER.trace(\"Getting changes for table {} in range[{}, {}]\", changeTable, fromLsn, intervalToLsn);\n             preparers[idx] = statement -> {\n+                String fetchSizeStr = config().asProperties().getProperty(\"incremental.fetch.size\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3ODQ5MA==", "bodyText": "What is its meaning? In any case it should be a Field, be documented etc., both when being specific to SQL Server or being more general.", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r459878490", "createdAt": "2020-07-24T06:46:41Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-sqlserver/src/main/java/io/debezium/connector/sqlserver/SqlServerConnection.java", "diffHunk": "@@ -181,6 +195,10 @@ public void getChangesForTables(SqlServerChangeTable[] changeTables, Lsn interva\n             final Lsn fromLsn = getFromLsn(changeTable, intervalFromLsn);\n             LOGGER.trace(\"Getting changes for table {} in range[{}, {}]\", changeTable, fromLsn, intervalToLsn);\n             preparers[idx] = statement -> {\n+                String fetchSizeStr = config().asProperties().getProperty(\"incremental.fetch.size\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwNDYyMg=="}, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU1Nzc0Mg==", "bodyText": "While conducting performance tests on SQL server connector, we realized it's going with default JDBC ResultSet fetch size for incremental reading but we should give option to user configurable.  Parameterized the fetch size, thought of keeping generic but there is already snapshot.fetch.size Field exists hence introduced new Field", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r462557742", "createdAt": "2020-07-29T20:08:23Z", "author": {"login": "mallikankati"}, "path": "debezium-connector-sqlserver/src/main/java/io/debezium/connector/sqlserver/SqlServerConnection.java", "diffHunk": "@@ -181,6 +195,10 @@ public void getChangesForTables(SqlServerChangeTable[] changeTables, Lsn interva\n             final Lsn fromLsn = getFromLsn(changeTable, intervalFromLsn);\n             LOGGER.trace(\"Getting changes for table {} in range[{}, {}]\", changeTable, fromLsn, intervalToLsn);\n             preparers[idx] = statement -> {\n+                String fetchSizeStr = config().asProperties().getProperty(\"incremental.fetch.size\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwNDYyMg=="}, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYxMDQ3OA==", "bodyText": "I have moved this to a field specific to SQL Server called streaming.fetch.size to be consistent with snapshot.fetch.size.  We can look at moving this to common connector configurations in https://issues.redhat.com/browse/DBZ-2448.", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r476610478", "createdAt": "2020-08-25T17:18:26Z", "author": {"login": "Naros"}, "path": "debezium-connector-sqlserver/src/main/java/io/debezium/connector/sqlserver/SqlServerConnection.java", "diffHunk": "@@ -181,6 +195,10 @@ public void getChangesForTables(SqlServerChangeTable[] changeTables, Lsn interva\n             final Lsn fromLsn = getFromLsn(changeTable, intervalFromLsn);\n             LOGGER.trace(\"Getting changes for table {} in range[{}, {}]\", changeTable, fromLsn, intervalToLsn);\n             preparers[idx] = statement -> {\n+                String fetchSizeStr = config().asProperties().getProperty(\"incremental.fetch.size\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwNDYyMg=="}, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc2MTcwNA==", "bodyText": "Thanks!", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r487761704", "createdAt": "2020-09-14T09:05:50Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-sqlserver/src/main/java/io/debezium/connector/sqlserver/SqlServerConnection.java", "diffHunk": "@@ -181,6 +195,10 @@ public void getChangesForTables(SqlServerChangeTable[] changeTables, Lsn interva\n             final Lsn fromLsn = getFromLsn(changeTable, intervalFromLsn);\n             LOGGER.trace(\"Getting changes for table {} in range[{}, {}]\", changeTable, fromLsn, intervalToLsn);\n             preparers[idx] = statement -> {\n+                String fetchSizeStr = config().asProperties().getProperty(\"incremental.fetch.size\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwNDYyMg=="}, "originalCommit": null, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDQyMDcyOnYy", "diffSide": "RIGHT", "path": "debezium-connector-sqlserver/src/main/java/io/debezium/connector/sqlserver/SqlServerConnectorConfig.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODo0MTozOFrOG1vcsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzozOTo0NFrOHGi7jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwNTEwNg==", "bodyText": "I'm not sure I necessarily agree with this configuration option.  What do others think?", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r459005106", "createdAt": "2020-07-22T18:41:38Z", "author": {"login": "Naros"}, "path": "debezium-connector-sqlserver/src/main/java/io/debezium/connector/sqlserver/SqlServerConnectorConfig.java", "diffHunk": "@@ -313,6 +313,16 @@ public static SnapshotIsolationMode parse(String value, String defaultValue) {\n                     + \"In '\" + SnapshotIsolationMode.READ_UNCOMMITTED.getValue()\n                     + \"' mode neither table nor row-level locks are acquired, but connector does not guarantee snapshot consistency.\");\n \n+    public static final Field SNAPSHOT_SKIP_LOCKS = Field.create(\"snapshot.skip.locks\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg4MDYzMg==", "bodyText": "Yeah, seems like a great way to shoot into your own's foot. Also in other connectors we have \"snapshot lock modes\" instead of a plain boolean. So this would be good to compare and align with how things are handled there.", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r459880632", "createdAt": "2020-07-24T06:53:44Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-sqlserver/src/main/java/io/debezium/connector/sqlserver/SqlServerConnectorConfig.java", "diffHunk": "@@ -313,6 +313,16 @@ public static SnapshotIsolationMode parse(String value, String defaultValue) {\n                     + \"In '\" + SnapshotIsolationMode.READ_UNCOMMITTED.getValue()\n                     + \"' mode neither table nor row-level locks are acquired, but connector does not guarantee snapshot consistency.\");\n \n+    public static final Field SNAPSHOT_SKIP_LOCKS = Field.create(\"snapshot.skip.locks\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwNTEwNg=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU1OTAyMQ==", "bodyText": "But I how can we take metadata locks on production DB. If table has 5M records and it will take it's own sweet time to snapshot but real TX failed because we are taking locks on it.  We introduced this as a configurable parameter", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r462559021", "createdAt": "2020-07-29T20:10:52Z", "author": {"login": "mallikankati"}, "path": "debezium-connector-sqlserver/src/main/java/io/debezium/connector/sqlserver/SqlServerConnectorConfig.java", "diffHunk": "@@ -313,6 +313,16 @@ public static SnapshotIsolationMode parse(String value, String defaultValue) {\n                     + \"In '\" + SnapshotIsolationMode.READ_UNCOMMITTED.getValue()\n                     + \"' mode neither table nor row-level locks are acquired, but connector does not guarantee snapshot consistency.\");\n \n+    public static final Field SNAPSHOT_SKIP_LOCKS = Field.create(\"snapshot.skip.locks\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwNTEwNg=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYxMzE2NA==", "bodyText": "@mallikankati I believe what Gunnar is asking is that we align this with the already existing SnapshotIsolationMode used by SQL Server now.  In fact, SqlServerSnapshotChangeEventSource#lockTablesForSchemaSnapshot already applies the appropriate isolation so I think this option can be completely removed.", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r476613164", "createdAt": "2020-08-25T17:22:45Z", "author": {"login": "Naros"}, "path": "debezium-connector-sqlserver/src/main/java/io/debezium/connector/sqlserver/SqlServerConnectorConfig.java", "diffHunk": "@@ -313,6 +313,16 @@ public static SnapshotIsolationMode parse(String value, String defaultValue) {\n                     + \"In '\" + SnapshotIsolationMode.READ_UNCOMMITTED.getValue()\n                     + \"' mode neither table nor row-level locks are acquired, but connector does not guarantee snapshot consistency.\");\n \n+    public static final Field SNAPSHOT_SKIP_LOCKS = Field.create(\"snapshot.skip.locks\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwNTEwNg=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYyNTgwNg==", "bodyText": "That make sense", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r476625806", "createdAt": "2020-08-25T17:39:44Z", "author": {"login": "mallikankati"}, "path": "debezium-connector-sqlserver/src/main/java/io/debezium/connector/sqlserver/SqlServerConnectorConfig.java", "diffHunk": "@@ -313,6 +313,16 @@ public static SnapshotIsolationMode parse(String value, String defaultValue) {\n                     + \"In '\" + SnapshotIsolationMode.READ_UNCOMMITTED.getValue()\n                     + \"' mode neither table nor row-level locks are acquired, but connector does not guarantee snapshot consistency.\");\n \n+    public static final Field SNAPSHOT_SKIP_LOCKS = Field.create(\"snapshot.skip.locks\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwNTEwNg=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDEwNjc5OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjo0ODo0N1rOG2kyoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzozNzowM1rOHGi1lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3OTA3Mg==", "bodyText": "Yes, please :)", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r459879072", "createdAt": "2020-07-24T06:48:47Z", "author": {"login": "gunnarmorling"}, "path": "pom.xml", "diffHunk": "@@ -74,7 +74,8 @@\n         <version.mongo.server>3.6</version.mongo.server>\n         <version.mongo.driver>3.12.3</version.mongo.driver>\n         <version.sqlserver.driver>7.2.2.jre8</version.sqlserver.driver>\n-\n+        <!-- todo: DBZ-137 this should likely be moved to incubator repository? -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYyNDI3OA==", "bodyText": "Moved", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r476624278", "createdAt": "2020-08-25T17:37:03Z", "author": {"login": "Naros"}, "path": "pom.xml", "diffHunk": "@@ -74,7 +74,8 @@\n         <version.mongo.server>3.6</version.mongo.server>\n         <version.mongo.driver>3.12.3</version.mongo.driver>\n         <version.sqlserver.driver>7.2.2.jre8</version.sqlserver.driver>\n-\n+        <!-- todo: DBZ-137 this should likely be moved to incubator repository? -->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3OTA3Mg=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDEwODcwOnYy", "diffSide": "RIGHT", "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjo0OTozM1rOG2kzng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjo0OTozM1rOG2kzng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3OTMyNg==", "bodyText": "Should be Duration, here and elsewhere.", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r459879326", "createdAt": "2020-07-24T06:49:33Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConfiguration.java", "diffHunk": "@@ -321,4 +372,31 @@ default String getUser() {\n     default String getPassword() {\n         return getString(PASSWORD);\n     }\n+\n+    /**\n+     * Get the datasource factory property from the configuration.\n+     *\n+     * @return the specified value, or null if there is none.\n+     */\n+    default String getConnectionFactoryClassName() {\n+        return getString(CONNECTION_FACTORY_CLASS);\n+    }\n+\n+    /**\n+     * Get the connection timeout from the configuration.\n+     *\n+     * @return the specified value, or null if there is none.\n+     */\n+    default int getConnectionTimeoutMs() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDExMDAzOnYy", "diffSide": "RIGHT", "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConfiguration.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjo1MDowN1rOG2k0Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjowMTo0NlrOHPEA8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3OTUyMw==", "bodyText": "What is \"instance\"?", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r459879523", "createdAt": "2020-07-24T06:50:07Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConfiguration.java", "diffHunk": "@@ -44,6 +46,11 @@\n      */\n     public static final Field HOSTNAME = Field.create(\"hostname\", \"IP address of the database\");\n \n+    /**\n+     * A field for the instance name if any. This field has no default value.\n+     */\n+    public static final Field INSTANCE = Field.create(\"instance\", \"Instance name\").withValidation(Field::isOptional);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU2MzQ2OA==", "bodyText": "In SQL server JDBC URL looks like this jdbc:sqlserver://dbhostname:port/instanceName=<it's instance of DB>;databaseName=\nHere are the more details on SQL server instance name\nhttps://qualysguard.qualys.com/qwebhelp/fo_portal/authentication/ms_sql/ms_sql_server_instance_name.htm#:~:text=This%20is%20the%20instance%20name,MS%20SQL%20Server%20instance%20name.&text=Go%20to%20Start%20%3E%20Programs%20%3E%20Microsoft,(circled%20below%20in%20red).", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r462563468", "createdAt": "2020-07-29T20:19:07Z", "author": {"login": "mallikankati"}, "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConfiguration.java", "diffHunk": "@@ -44,6 +46,11 @@\n      */\n     public static final Field HOSTNAME = Field.create(\"hostname\", \"IP address of the database\");\n \n+    /**\n+     * A field for the instance name if any. This field has no default value.\n+     */\n+    public static final Field INSTANCE = Field.create(\"instance\", \"Instance name\").withValidation(Field::isOptional);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3OTUyMw=="}, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU1NjQ2NA==", "bodyText": "Ok; should this not rather go into the SQL Server specific sub-class?", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r485556464", "createdAt": "2020-09-09T12:01:46Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConfiguration.java", "diffHunk": "@@ -44,6 +46,11 @@\n      */\n     public static final Field HOSTNAME = Field.create(\"hostname\", \"IP address of the database\");\n \n+    /**\n+     * A field for the instance name if any. This field has no default value.\n+     */\n+    public static final Field INSTANCE = Field.create(\"instance\", \"Instance name\").withValidation(Field::isOptional);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3OTUyMw=="}, "originalCommit": null, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDExNDIzOnYy", "diffSide": "RIGHT", "path": "debezium-connector-sqlserver/src/main/java/io/debezium/connector/sqlserver/SqlServerSnapshotChangeEventSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjo1MjoxMVrOG2k25Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjo1MjoxMVrOG2k25Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg4MDE2NQ==", "bodyText": "There is https://issues.redhat.com/browse/DBZ-2283 for this very nice improvement. It should be applied at the level of RelationalSnapshotChangeEventSource. Could you extract this one into its own PR, attributed to this issue? There should also be a test, at least for one of the RDBMS connectors.", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r459880165", "createdAt": "2020-07-24T06:52:11Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-sqlserver/src/main/java/io/debezium/connector/sqlserver/SqlServerSnapshotChangeEventSource.java", "diffHunk": "@@ -219,9 +223,43 @@ protected void complete(SnapshotContext snapshotContext) {\n      */\n     @Override\n     protected Optional<String> getSnapshotSelect(SnapshotContext snapshotContext, TableId tableId) {\n+        String modifiedColumns = checkBlacklistedColumns(tableId);\n+        if (modifiedColumns != null) {\n+            return Optional.of(String.format(\"SELECT %s FROM [%s].[%s]\", modifiedColumns, tableId.schema(), tableId.table()));\n+        }\n         return Optional.of(String.format(\"SELECT * FROM [%s].[%s]\", tableId.schema(), tableId.table()));\n     }\n \n+    @Override\n+    protected String enhanceOverriddenSelect(SnapshotContext snapshotContext, String overriddenSelect, TableId tableId) {\n+        String modifiedColumns = checkBlacklistedColumns(tableId);\n+        if (modifiedColumns != null) {\n+            overriddenSelect = overriddenSelect.replaceAll(\"\\\\*\", modifiedColumns);\n+        }\n+        return overriddenSelect;\n+    }\n+\n+    private String checkBlacklistedColumns(TableId tableId) {\n+        String modifiedColumns = null;\n+        String blackListColumnStr = connectorConfig.getConfig().getString(connectorConfig.COLUMN_BLACKLIST);\n+        if (blackListColumnStr != null && blackListColumnStr.trim().length() > 0\n+                && blackListColumnStr.contains(tableId.table())) {\n+            Table table = sqlServerDatabaseSchema.tableFor(tableId);\n+            modifiedColumns = table.retrieveColumnNames().stream()\n+                    .map(s -> {\n+                        StringBuilder sb = new StringBuilder();\n+                        if (!s.contains(tableId.table())) {\n+                            sb.append(tableId.table()).append(\".\").append(s);\n+                        }\n+                        else {\n+                            sb.append(s);\n+                        }\n+                        return sb.toString();\n+                    }).collect(Collectors.joining(\",\"));\n+        }\n+        return modifiedColumns;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDEyMjgyOnYy", "diffSide": "RIGHT", "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjo1NjowMFrOG2k7nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDoyODozN1rOG5I8ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg4MTM3Mg==", "bodyText": "Interesting, where/how is that used? The name of the interface to be implemented should be specified in the description.", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r459881372", "createdAt": "2020-07-24T06:56:00Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConfiguration.java", "diffHunk": "@@ -55,11 +62,25 @@\n      */\n     public static final Field ON_CONNECT_STATEMENTS = Field.create(\"initial.statements\", \"A semicolon separated list of statements to be executed on connection\");\n \n+    /**\n+     * An optional field for datasource factory class that will be used to build the datasource connection pool.\n+     */\n+    public static final Field CONNECTION_FACTORY_CLASS = Field.create(\"connection.factory.class\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU2ODU1NA==", "bodyText": "We introduced how to plugin your own ConnnectorFactory class when you have different PooledDataSources. Ex: We introduced a HikariDataSource pool.\nIf user specify any connection.factory.class it will honor it otherwise it will use default JdbConnection.ConnectionFactory.\nExample implementation of ConnectionFactory\npublic class HikariConnectionFactory implements JdbcConnection.ConnectionFactory {\n\n/**\n     * Create connection pool if not yet done and return a connection from pool\n     * @param inConfig jdbc configuration\n     * @return connection object from pool\n     * @throws SQLException if any sql exception\n     */\n    @Override\n    public Connection connect(JdbcConfiguration inConfig) throws SQLException {\n\n        String vendor = inConfig.asProperties().getProperty(\"vendor\");\n        if (_dataSource == null) {\n            String url;\n            Properties props = inConfig.asProperties();\n            HikariConfig hikariConfig = new HikariConfig();\n            if (\"oracle\".equalsIgnoreCase(vendor)) {\n                url = findAndReplace(ORACLE_URL_PATTERN, props);\n                hikariConfig.setConnectionTestQuery(\"select 1 from dual\");\n            } else {\n                if (inConfig.getInstance() != null &&\n                        inConfig.getInstance().trim().length() > 0){\n                    url = findAndReplace(SQLSERVER_INSTANCE_URL_PATTERN, props);\n                } else {\n                    url = findAndReplace(SQLSERVER_URL_PATTERN, props);\n                }\n            }\n            LOGGER.info(\"jdbc connection url:\" + url);\n            hikariConfig.setJdbcUrl(url);\n            hikariConfig.setUsername(inConfig.getUser());\n            hikariConfig.setPassword(inConfig.getPassword());\n            String maxPoolStr = inConfig.asProperties().getProperty(\"connection.max.poolsize\");\n            hikariConfig.setMaximumPoolSize(Integer.parseInt(maxPoolStr));\n            hikariConfig.setConnectionTimeout(inConfig.getConnectionTimeoutMs());\n            hikariConfig.setAutoCommit(false);\n            hikariConfig.setPoolName(\"Debezium Hikari CP\");\n            hikariConfig.setRegisterMbeans(true);\n            hikariConfig.addDataSourceProperty(\"cachePrepStmts\",  true);\n            hikariConfig.addDataSourceProperty(\"prepStmtCacheSize\", 5);\n            hikariConfig.addDataSourceProperty(\"prepStmtCacheSqlLimit\", 50);\n            hikariConfig.addDataSourceProperty(\"useServerPrepStmts\", true);\n            _dataSource = new HikariDataSource(hikariConfig);\n        }\n        return _dataSource.getConnection();\n    }\n}", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r462568554", "createdAt": "2020-07-29T20:28:37Z", "author": {"login": "mallikankati"}, "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConfiguration.java", "diffHunk": "@@ -55,11 +62,25 @@\n      */\n     public static final Field ON_CONNECT_STATEMENTS = Field.create(\"initial.statements\", \"A semicolon separated list of statements to be executed on connection\");\n \n+    /**\n+     * An optional field for datasource factory class that will be used to build the datasource connection pool.\n+     */\n+    public static final Field CONNECTION_FACTORY_CLASS = Field.create(\"connection.factory.class\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg4MTM3Mg=="}, "originalCommit": null, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDEyNTk3OnYy", "diffSide": "RIGHT", "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConnection.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjo1NzozMFrOG2k9aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMjoxMzoyOFrOG5MG4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg4MTgzNQ==", "bodyText": "Why \"close\"?", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r459881835", "createdAt": "2020-07-24T06:57:30Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConnection.java", "diffHunk": "@@ -360,14 +409,45 @@ public JdbcConnection execute(String... sqlStatements) throws SQLException {\n      * @throws SQLException if there is an error connecting to the database or executing the statements\n      */\n     public JdbcConnection execute(Operations operations) throws SQLException {\n+        return closeOnExecute((conn) -> {\n+            try (Statement statement = conn.createStatement();) {\n+                operations.apply(statement);\n+                if (!conn.getAutoCommit()) {\n+                    conn.commit();\n+                }\n+            }\n+        });\n+    }\n+\n+    private JdbcConnection closeOnExecute(IExecutable executable) throws SQLException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYyMDM4NQ==", "bodyText": "When you have ConnectionPool, after using connection we need to close it otherwise how do you return connection to pool.\nThis will not really close the connection underneath instead it will return to pool and reuse it for next requests.", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r462620385", "createdAt": "2020-07-29T22:13:28Z", "author": {"login": "mallikankati"}, "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConnection.java", "diffHunk": "@@ -360,14 +409,45 @@ public JdbcConnection execute(String... sqlStatements) throws SQLException {\n      * @throws SQLException if there is an error connecting to the database or executing the statements\n      */\n     public JdbcConnection execute(Operations operations) throws SQLException {\n+        return closeOnExecute((conn) -> {\n+            try (Statement statement = conn.createStatement();) {\n+                operations.apply(statement);\n+                if (!conn.getAutoCommit()) {\n+                    conn.commit();\n+                }\n+            }\n+        });\n+    }\n+\n+    private JdbcConnection closeOnExecute(IExecutable executable) throws SQLException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg4MTgzNQ=="}, "originalCommit": null, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDEyNzY0OnYy", "diffSide": "RIGHT", "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConnection.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjo1ODoxNFrOG2k-ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMjoxNToxNFrOG5MJyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg4MjA4NQ==", "bodyText": "I don't quite understand the motivation for this one?", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r459882085", "createdAt": "2020-07-24T06:58:14Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConnection.java", "diffHunk": "@@ -438,17 +518,18 @@ public JdbcConnection query(String query, ResultSetConsumer resultConsumer) thro\n      * @throws SQLException if anything unexpected fails\n      */\n     public JdbcConnection call(String sql, CallPreparer callPreparer, ResultSetConsumer resultSetConsumer) throws SQLException {\n-        Connection conn = connection();\n-        try (CallableStatement callableStatement = conn.prepareCall(sql)) {\n-            if (callPreparer != null) {\n-                callPreparer.accept(callableStatement);\n-            }\n-            try (ResultSet rs = callableStatement.executeQuery()) {\n-                if (resultSetConsumer != null) {\n-                    resultSetConsumer.accept(rs);\n+        closeOnExecute((conn) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0NzQ4Mw==", "bodyText": "I noticed quite a few of these in the code changes and neither did I.  @AndreyIg can you or perhaps Mallik shed some insight on the reasoning behind these?", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r460147483", "createdAt": "2020-07-24T16:05:40Z", "author": {"login": "Naros"}, "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConnection.java", "diffHunk": "@@ -438,17 +518,18 @@ public JdbcConnection query(String query, ResultSetConsumer resultConsumer) thro\n      * @throws SQLException if anything unexpected fails\n      */\n     public JdbcConnection call(String sql, CallPreparer callPreparer, ResultSetConsumer resultSetConsumer) throws SQLException {\n-        Connection conn = connection();\n-        try (CallableStatement callableStatement = conn.prepareCall(sql)) {\n-            if (callPreparer != null) {\n-                callPreparer.accept(callableStatement);\n-            }\n-            try (ResultSet rs = callableStatement.executeQuery()) {\n-                if (resultSetConsumer != null) {\n-                    resultSetConsumer.accept(rs);\n+        closeOnExecute((conn) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg4MjA4NQ=="}, "originalCommit": null, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYyMTEzMA==", "bodyText": "Please look at my previous comments", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r462621130", "createdAt": "2020-07-29T22:15:14Z", "author": {"login": "mallikankati"}, "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConnection.java", "diffHunk": "@@ -438,17 +518,18 @@ public JdbcConnection query(String query, ResultSetConsumer resultConsumer) thro\n      * @throws SQLException if anything unexpected fails\n      */\n     public JdbcConnection call(String sql, CallPreparer callPreparer, ResultSetConsumer resultSetConsumer) throws SQLException {\n-        Connection conn = connection();\n-        try (CallableStatement callableStatement = conn.prepareCall(sql)) {\n-            if (callPreparer != null) {\n-                callPreparer.accept(callableStatement);\n-            }\n-            try (ResultSet rs = callableStatement.executeQuery()) {\n-                if (resultSetConsumer != null) {\n-                    resultSetConsumer.accept(rs);\n+        closeOnExecute((conn) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg4MjA4NQ=="}, "originalCommit": null, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDEzMTc1OnYy", "diffSide": "RIGHT", "path": "debezium-core/src/main/java/io/debezium/relational/RelationalChangeRecordEmitter.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjo1OTozNlrOG2lAgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjozNzoxN1rOHPFO6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg4MjYyNw==", "bodyText": "This looks suspicious. We must not mix up ts_ms and source.ts_ms.", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r459882627", "createdAt": "2020-07-24T06:59:36Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/relational/RelationalChangeRecordEmitter.java", "diffHunk": "@@ -134,7 +139,8 @@ protected void emitDeleteRecord(Receiver receiver, TableSchema tableSchema) thro\n             return;\n         }\n \n-        Struct envelope = tableSchema.getEnvelopeSchema().delete(oldValue, getOffset().getSourceInfo(), getClock().currentTimeAsInstant());\n+        Instant instant = getInstantFrom(getOffset());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0ODQ4MA==", "bodyText": "I'm not entirely sure the relational behind this change either, @AndreyIg can you or Mallik share your reasonings?", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r460148480", "createdAt": "2020-07-24T16:07:20Z", "author": {"login": "Naros"}, "path": "debezium-core/src/main/java/io/debezium/relational/RelationalChangeRecordEmitter.java", "diffHunk": "@@ -134,7 +139,8 @@ protected void emitDeleteRecord(Receiver receiver, TableSchema tableSchema) thro\n             return;\n         }\n \n-        Struct envelope = tableSchema.getEnvelopeSchema().delete(oldValue, getOffset().getSourceInfo(), getClock().currentTimeAsInstant());\n+        Instant instant = getInstantFrom(getOffset());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg4MjYyNw=="}, "originalCommit": null, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYyNjY4Mw==", "bodyText": "This could be suspicious but I couldn't find the place where to add real CDC event time. There are three time measures in SQL server world\n\nRecord created in DB (which will go part of source record payload and need not worried about it)\nWhat time it arrived to CDC  tables (few millis off from real source record created time)\nWhen connector read this event (when connector retrieved this event to process. Usually always System.currentTimeMillis())\n\nBut I want to measure second one meaning when connector is down for 30min and restarted, we can get 1 & 3 but not 2. I realized instead of System.currentTimeMillis() better to measure based on CDC created time.", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r462626683", "createdAt": "2020-07-29T22:29:03Z", "author": {"login": "mallikankati"}, "path": "debezium-core/src/main/java/io/debezium/relational/RelationalChangeRecordEmitter.java", "diffHunk": "@@ -134,7 +139,8 @@ protected void emitDeleteRecord(Receiver receiver, TableSchema tableSchema) thro\n             return;\n         }\n \n-        Struct envelope = tableSchema.getEnvelopeSchema().delete(oldValue, getOffset().getSourceInfo(), getClock().currentTimeAsInstant());\n+        Instant instant = getInstantFrom(getOffset());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg4MjYyNw=="}, "originalCommit": null, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3NjQyNQ==", "bodyText": "Ok, I see. As you say:\n\nis the top-level ts_ms in change events. That why that change above should be reverted.\nis source.ts_ms\n\nThere could be a new field for 2. under source for SQL Server? How can that info be obtained, though?", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r485576425", "createdAt": "2020-09-09T12:37:17Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/relational/RelationalChangeRecordEmitter.java", "diffHunk": "@@ -134,7 +139,8 @@ protected void emitDeleteRecord(Receiver receiver, TableSchema tableSchema) thro\n             return;\n         }\n \n-        Struct envelope = tableSchema.getEnvelopeSchema().delete(oldValue, getOffset().getSourceInfo(), getClock().currentTimeAsInstant());\n+        Instant instant = getInstantFrom(getOffset());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg4MjYyNw=="}, "originalCommit": null, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzA2ODUyOnYy", "diffSide": "RIGHT", "path": "debezium-connector-sqlserver/src/main/java/io/debezium/connector/sqlserver/SqlServerConnection.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMTo1NjoyN1rOHPDxCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMTo1NjoyN1rOHPDxCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU1MjM5Mg==", "bodyText": "Can we extract this into an instance field populated in the constructor? Seems a bit wasteful to do this upon every invocation.", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r485552392", "createdAt": "2020-09-09T11:56:27Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-sqlserver/src/main/java/io/debezium/connector/sqlserver/SqlServerConnection.java", "diffHunk": "@@ -185,6 +198,10 @@ public void getChangesForTables(SqlServerChangeTable[] changeTables, Lsn interva\n             final Lsn fromLsn = getFromLsn(changeTable, intervalFromLsn);\n             LOGGER.trace(\"Getting changes for table {} in range[{}, {}]\", changeTable, fromLsn, intervalToLsn);\n             preparers[idx] = statement -> {\n+                String fetchSizeStr = config().asProperties().getProperty(SqlServerConnectorConfig.STREAMING_FETCH_SIZE.name());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzA3NzY2OnYy", "diffSide": "RIGHT", "path": "debezium-connector-sqlserver/src/main/java/io/debezium/connector/sqlserver/SqlServerSnapshotChangeEventSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMTo1ODozNlrOHPD2Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMTo1ODozNlrOHPD2Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU1Mzc1OA==", "bodyText": "There's a dedicated Jira issue for this nice optimization; can you reference it in the commit message and put it into the 1.3-next bucket?", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r485553758", "createdAt": "2020-09-09T11:58:36Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-sqlserver/src/main/java/io/debezium/connector/sqlserver/SqlServerSnapshotChangeEventSource.java", "diffHunk": "@@ -218,10 +221,52 @@ protected void complete(SnapshotContext snapshotContext) {\n      * @return a valid query string\n      */\n     @Override\n-    protected Optional<String> getSnapshotSelect(SnapshotContext snapshotContext, TableId tableId) {\n+    protected Optional<String> getSnapshotSelect(RelationalSnapshotContext snapshotContext, TableId tableId) {\n+        String modifiedColumns = checkExcludedColumns(tableId);\n+        if (modifiedColumns != null) {\n+            return Optional.of(String.format(\"SELECT %s FROM [%s].[%s]\", modifiedColumns, tableId.schema(), tableId.table()));\n+        }\n         return Optional.of(String.format(\"SELECT * FROM [%s].[%s]\", tableId.schema(), tableId.table()));\n     }\n \n+    @Override\n+    protected String enhanceOverriddenSelect(RelationalSnapshotContext snapshotContext, String overriddenSelect, TableId tableId) {\n+        String modifiedColumns = checkExcludedColumns(tableId);\n+        if (modifiedColumns != null) {\n+            overriddenSelect = overriddenSelect.replaceAll(\"\\\\*\", modifiedColumns);\n+        }\n+        return overriddenSelect;\n+    }\n+\n+    private String checkExcludedColumns(TableId tableId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzA4MTIzOnYy", "diffSide": "RIGHT", "path": "debezium-connector-sqlserver/src/main/java/io/debezium/connector/sqlserver/SqlServerSnapshotChangeEventSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMTo1OToxOFrOHPD4pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMTo1OToxOFrOHPD4pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU1NDM0Mw==", "bodyText": "This should be exposed via TableFilters preferably. If that's to much of a stretch for now, let's at least add a dedicated getter on SqlServerConnectorConfig.", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r485554343", "createdAt": "2020-09-09T11:59:18Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-sqlserver/src/main/java/io/debezium/connector/sqlserver/SqlServerSnapshotChangeEventSource.java", "diffHunk": "@@ -218,10 +221,52 @@ protected void complete(SnapshotContext snapshotContext) {\n      * @return a valid query string\n      */\n     @Override\n-    protected Optional<String> getSnapshotSelect(SnapshotContext snapshotContext, TableId tableId) {\n+    protected Optional<String> getSnapshotSelect(RelationalSnapshotContext snapshotContext, TableId tableId) {\n+        String modifiedColumns = checkExcludedColumns(tableId);\n+        if (modifiedColumns != null) {\n+            return Optional.of(String.format(\"SELECT %s FROM [%s].[%s]\", modifiedColumns, tableId.schema(), tableId.table()));\n+        }\n         return Optional.of(String.format(\"SELECT * FROM [%s].[%s]\", tableId.schema(), tableId.table()));\n     }\n \n+    @Override\n+    protected String enhanceOverriddenSelect(RelationalSnapshotContext snapshotContext, String overriddenSelect, TableId tableId) {\n+        String modifiedColumns = checkExcludedColumns(tableId);\n+        if (modifiedColumns != null) {\n+            overriddenSelect = overriddenSelect.replaceAll(\"\\\\*\", modifiedColumns);\n+        }\n+        return overriddenSelect;\n+    }\n+\n+    private String checkExcludedColumns(TableId tableId) {\n+        String modifiedColumns = null;\n+        String excludedColumnStr = getExcludedColumnStr();\n+        if (Objects.nonNull(excludedColumnStr)\n+                && excludedColumnStr.trim().length() > 0\n+                && excludedColumnStr.contains(tableId.table())) {\n+            Table table = sqlServerDatabaseSchema.tableFor(tableId);\n+            modifiedColumns = table.retrieveColumnNames().stream()\n+                    .map(s -> {\n+                        StringBuilder sb = new StringBuilder();\n+                        if (!s.contains(tableId.table())) {\n+                            sb.append(tableId.table()).append(\".\").append(s);\n+                        }\n+                        else {\n+                            sb.append(s);\n+                        }\n+                        return sb.toString();\n+                    }).collect(Collectors.joining(\",\"));\n+        }\n+        return modifiedColumns;\n+    }\n+\n+    private String getExcludedColumnStr() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzE5NDk5OnYy", "diffSide": "RIGHT", "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjozMDo0NFrOHPE_Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjozMDo0NFrOHPE_Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3MjQwMw==", "bodyText": "withConnectionFactoryClass?", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r485572403", "createdAt": "2020-09-09T12:30:44Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConfiguration.java", "diffHunk": "@@ -145,6 +177,26 @@ default Builder withDatabase(String databaseName) {\n         default Builder withPort(int port) {\n             return with(PORT, port);\n         }\n+\n+        /**\n+         * Use the given datasource factory class in the resulting configuration.\n+         *\n+         * @param datasourceFactoryClassName the datasource factory class name\n+         * @return this builder object so methods can be chained together; never null\n+         */\n+        default Builder withDatasourceClass(String datasourceFactoryClassName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzE5NjA0OnYy", "diffSide": "RIGHT", "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjozMTowMlrOHPE_1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjozMTowMlrOHPE_1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3MjU2NA==", "bodyText": "Ms can be removed here.", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r485572564", "createdAt": "2020-09-09T12:31:02Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConfiguration.java", "diffHunk": "@@ -321,4 +373,31 @@ default String getUser() {\n     default String getPassword() {\n         return getString(PASSWORD);\n     }\n+\n+    /**\n+     * Get the datasource factory property from the configuration.\n+     *\n+     * @return the specified value, or null if there is none.\n+     */\n+    default String getConnectionFactoryClassName() {\n+        return getString(CONNECTION_FACTORY_CLASS);\n+    }\n+\n+    /**\n+     * Get the connection timeout from the configuration.\n+     *\n+     * @return the specified value, or null if there is none.\n+     */\n+    default Duration getConnectionTimeoutMs() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzE5NjM2OnYy", "diffSide": "RIGHT", "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjozMTowOVrOHPFAFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjozMTowOVrOHPFAFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3MjYyOA==", "bodyText": "Should go to SQL Server.", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r485572628", "createdAt": "2020-09-09T12:31:09Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConfiguration.java", "diffHunk": "@@ -321,4 +373,31 @@ default String getUser() {\n     default String getPassword() {\n         return getString(PASSWORD);\n     }\n+\n+    /**\n+     * Get the datasource factory property from the configuration.\n+     *\n+     * @return the specified value, or null if there is none.\n+     */\n+    default String getConnectionFactoryClassName() {\n+        return getString(CONNECTION_FACTORY_CLASS);\n+    }\n+\n+    /**\n+     * Get the connection timeout from the configuration.\n+     *\n+     * @return the specified value, or null if there is none.\n+     */\n+    default Duration getConnectionTimeoutMs() {\n+        return Duration.ofMillis(getInteger(CONNECTION_TIMEOUT_MS));\n+    }\n+\n+    /**\n+     * Get the instance from the configuration.\n+     *\n+     * @return the specified value, or null if there is none.\n+     */\n+    default String getInstance() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzE5ODQzOnYy", "diffSide": "RIGHT", "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConnection.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjozMTozN1rOHPFBWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjozMTozN1rOHPFBWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3Mjk1NQ==", "bodyText": "Fields can be made final?", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r485572955", "createdAt": "2020-09-09T12:31:37Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConnection.java", "diffHunk": "@@ -90,6 +91,29 @@ public void onEntryChosenForEviction(PreparedStatement statement) {\n         Connection connect(JdbcConfiguration config) throws SQLException;\n     }\n \n+    private class ConnectionFactoryDecorator implements ConnectionFactory {\n+        private ConnectionFactory defaultConnectionFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzIxMjEwOnYy", "diffSide": "RIGHT", "path": "debezium-core/src/main/java/io/debezium/relational/RelationalChangeRecordEmitter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjozNDo1OFrOHPFJMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMzoyNDo0NFrOHPHKyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3NDk2MQ==", "bodyText": "That seems not right? The envelope ts_ms is the time of processing in Debezium, not the time of the change in the soure database.", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r485574961", "createdAt": "2020-09-09T12:34:58Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/relational/RelationalChangeRecordEmitter.java", "diffHunk": "@@ -64,7 +66,8 @@ protected void emitCreateRecord(Receiver receiver, TableSchema tableSchema)\n         Object[] newColumnValues = getNewColumnValues();\n         Object newKey = tableSchema.keyFromColumnData(newColumnValues);\n         Struct newValue = tableSchema.valueFromColumnData(newColumnValues);\n-        Struct envelope = tableSchema.getEnvelopeSchema().create(newValue, getOffset().getSourceInfo(), getClock().currentTimeAsInstant());\n+        Instant instant = getInstantFrom(getOffset());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYwODEzNg==", "bodyText": "I also think this could be what is causing the problems with the PostgreSQL connector.  There is one test in particular that seems to hang indefinitely on Travis CI.  I'm going to revert this locally & check if that fixes PostgreSQL.", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r485608136", "createdAt": "2020-09-09T13:24:44Z", "author": {"login": "Naros"}, "path": "debezium-core/src/main/java/io/debezium/relational/RelationalChangeRecordEmitter.java", "diffHunk": "@@ -64,7 +66,8 @@ protected void emitCreateRecord(Receiver receiver, TableSchema tableSchema)\n         Object[] newColumnValues = getNewColumnValues();\n         Object newKey = tableSchema.keyFromColumnData(newColumnValues);\n         Struct newValue = tableSchema.valueFromColumnData(newColumnValues);\n-        Struct envelope = tableSchema.getEnvelopeSchema().create(newValue, getOffset().getSourceInfo(), getClock().currentTimeAsInstant());\n+        Instant instant = getInstantFrom(getOffset());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3NDk2MQ=="}, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTcwOTAxOnYy", "diffSide": "RIGHT", "path": "debezium-connector-sqlserver/src/main/java/io/debezium/connector/sqlserver/SqlServerConnectorConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOToxMDo1NVrOHRKzKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOToxMDo1NVrOHRKzKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc2NDc3OQ==", "bodyText": "I'm still struggling with this; where is this used? Only in your custom connection factory, @mallikankati?", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r487764779", "createdAt": "2020-09-14T09:10:55Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-sqlserver/src/main/java/io/debezium/connector/sqlserver/SqlServerConnectorConfig.java", "diffHunk": "@@ -391,6 +401,10 @@ public String getDatabaseName() {\n         return databaseName;\n     }\n \n+    public String getInstanceName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "929349ea46d44e4d04549288b5625883982ae695"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTg2MTU0OnYy", "diffSide": "RIGHT", "path": "debezium-connector-sqlserver/src/main/java/io/debezium/connector/sqlserver/SqlServerSnapshotChangeEventSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo1MDo0MVrOHRMPAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo1MDo0MVrOHRMPAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4ODI5MA==", "bodyText": "Ok, I think it's a bit unfortunate that this was done only for SQL Server. I've logged https://issues.redhat.com/browse/DBZ-2525 for pulling this up so that all relational connectors benefit from this.", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r487788290", "createdAt": "2020-09-14T09:50:41Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-sqlserver/src/main/java/io/debezium/connector/sqlserver/SqlServerSnapshotChangeEventSource.java", "diffHunk": "@@ -218,10 +221,45 @@ protected void complete(SnapshotContext snapshotContext) {\n      * @return a valid query string\n      */\n     @Override\n-    protected Optional<String> getSnapshotSelect(SnapshotContext snapshotContext, TableId tableId) {\n+    protected Optional<String> getSnapshotSelect(RelationalSnapshotContext snapshotContext, TableId tableId) {\n+        String modifiedColumns = checkExcludedColumns(tableId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "929349ea46d44e4d04549288b5625883982ae695"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTkyNjE1OnYy", "diffSide": "RIGHT", "path": "debezium-connector-sqlserver/src/main/java/io/debezium/connector/sqlserver/SqlServerSnapshotChangeEventSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDowNjo1NlrOHRM1Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDowNjo1NlrOHRM1Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5ODA4Mw==", "bodyText": "I don't understand how this method is supposed to work. The excluded columns are not removed from the statement anywhere. Also note that the exclusion expression doesn't necessarily contain the table name (e.g. could be .*mycolumn). This entire method seems flawed to me.\nThat said, it doesn't seem to to harm either, so I'll for now simply move https://issues.redhat.com/browse/DBZ-2283 onwards to the next iteration.", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r487798083", "createdAt": "2020-09-14T10:06:56Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-sqlserver/src/main/java/io/debezium/connector/sqlserver/SqlServerSnapshotChangeEventSource.java", "diffHunk": "@@ -218,10 +221,45 @@ protected void complete(SnapshotContext snapshotContext) {\n      * @return a valid query string\n      */\n     @Override\n-    protected Optional<String> getSnapshotSelect(SnapshotContext snapshotContext, TableId tableId) {\n+    protected Optional<String> getSnapshotSelect(RelationalSnapshotContext snapshotContext, TableId tableId) {\n+        String modifiedColumns = checkExcludedColumns(tableId);\n+        if (modifiedColumns != null) {\n+            return Optional.of(String.format(\"SELECT %s FROM [%s].[%s]\", modifiedColumns, tableId.schema(), tableId.table()));\n+        }\n         return Optional.of(String.format(\"SELECT * FROM [%s].[%s]\", tableId.schema(), tableId.table()));\n     }\n \n+    @Override\n+    protected String enhanceOverriddenSelect(RelationalSnapshotContext snapshotContext, String overriddenSelect, TableId tableId) {\n+        String modifiedColumns = checkExcludedColumns(tableId);\n+        if (modifiedColumns != null) {\n+            overriddenSelect = overriddenSelect.replaceAll(\"\\\\*\", modifiedColumns);\n+        }\n+        return overriddenSelect;\n+    }\n+\n+    private String checkExcludedColumns(TableId tableId) {\n+        String modifiedColumns = null;\n+        String excludedColumnStr = connectorConfig.getTableFilters().getExcludeColumns();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "929349ea46d44e4d04549288b5625883982ae695"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4245, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}