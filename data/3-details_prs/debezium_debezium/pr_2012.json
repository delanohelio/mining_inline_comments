{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwMDE2ODE0", "number": 2012, "title": "DBZ-2764 Centralize Postgres image for Testcontainers", "bodyText": "https://issues.redhat.com/browse/DBZ-2764\ncc: @jpechane", "createdAt": "2020-12-15T06:39:25Z", "url": "https://github.com/debezium/debezium/pull/2012", "merged": true, "mergeCommit": {"oid": "b5b8ef358b3cd03ea4dcf5a59b78fcbfaf63e2ab"}, "closed": true, "closedAt": "2021-01-08T12:19:58Z", "author": {"login": "ani-sha"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmZ_GDAFqTU1MjQyNjE5NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABduHsAMgH2gAyNTQwMDE2ODE0OjY0NjcwMjk3ZmE5YjZlN2NjYmJkYTIwNDkwZmY0MzA4NmZmYWVkY2I=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNDI2MTk0", "url": "https://github.com/debezium/debezium/pull/2012#pullrequestreview-552426194", "createdAt": "2020-12-15T13:02:53Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzowMjo1M1rOIGJzZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzowMjo1M1rOIGJzZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMyMjk4MQ==", "bodyText": "@ani-sha Could you please extend the scope of this PR and sove it also for other container like apicurio here or connect below? Ideally all images used in all tests should be defined in a single place.", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r543322981", "createdAt": "2020-12-15T13:02:53Z", "author": {"login": "jpechane"}, "path": "debezium-testing/debezium-testing-testcontainers/src/test/java/io/debezium/testing/testcontainers/ApicurioRegistryTest.java", "diffHunk": "@@ -55,11 +55,10 @@\n     private static final String DEBEZIUM_VERSION = \"1.3.0.Final\";\n     private static final String APICURIO_VERSION = \"1.3.2.Final\";\n \n-    private static final DockerImageName POSTGRES_DOCKER_IMAGE_NAME = DockerImageName.parse(\"debezium/postgres:11\")\n-            .asCompatibleSubstituteFor(\"postgres\");\n-\n     private static Network network = Network.newNetwork();\n \n+    private static final PostgresInfrastructure POSTGRES_INFRASTRUCTURE = PostgresInfrastructure.getDebeziumPostgresDefaultInfrastructure(network);\n+\n     private static GenericContainer<?> apicurioContainer = new GenericContainer<>(\"apicurio/apicurio-registry-mem:\" + APICURIO_VERSION)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNTc3Mzcx", "url": "https://github.com/debezium/debezium/pull/2012#pullrequestreview-552577371", "createdAt": "2020-12-15T15:27:25Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNToyNzoyNlrOIGRMUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNToyNzoyNlrOIGRMUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ0NDA1MQ==", "bodyText": "@jpechane I have added one for Apicurio. How you want to add for Connect image? I guess we have simply passed the image name into DebeziumContainer.", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r543444051", "createdAt": "2020-12-15T15:27:26Z", "author": {"login": "ani-sha"}, "path": "debezium-testing/debezium-testing-testcontainers/src/test/java/io/debezium/testing/testcontainers/DebeziumContainerTest.java", "diffHunk": "@@ -48,17 +48,14 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(DebeziumContainerTest.class);\n \n-    private static final DockerImageName POSTGRES_DOCKER_IMAGE_NAME = DockerImageName.parse(\"debezium/postgres:11\")\n-            .asCompatibleSubstituteFor(\"postgres\");\n-\n     private static final Network network = Network.newNetwork();\n \n+    private static final PostgresInfrastructure POSTGRES_INFRASTRUCTURE = PostgresInfrastructure.getDebeziumPostgresDefaultInfrastructure(network);\n+\n     private static final KafkaContainer kafkaContainer = new KafkaContainer()\n             .withNetwork(network);\n \n-    public static PostgreSQLContainer<?> postgresContainer = new PostgreSQLContainer<>(POSTGRES_DOCKER_IMAGE_NAME)\n-            .withNetwork(network)\n-            .withNetworkAliases(\"postgres\");\n+    public static PostgreSQLContainer<?> postgresContainer = POSTGRES_INFRASTRUCTURE.getPostgresContainer();\n \n     public static DebeziumContainer debeziumContainer = new DebeziumContainer(\"debezium/connect:1.1.1.Final\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNjE1MzUw", "url": "https://github.com/debezium/debezium/pull/2012#pullrequestreview-552615350", "createdAt": "2020-12-15T16:03:49Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjowMzo1MFrOIGTCRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjowMzo1MFrOIGTCRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ3NDI0NQ==", "bodyText": "The dependency version should imo be moved to the parent pom, shouldn't it @jpechane ?", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r543474245", "createdAt": "2020-12-15T16:03:50Z", "author": {"login": "rk3rn3r"}, "path": "debezium-quarkus-outbox/integration-tests/pom.xml", "diffHunk": "@@ -35,6 +35,13 @@\n                 <version>${project.version}</version>\n                 <scope>test</scope>\n             </dependency>\n+\n+            <dependency>\n+                <groupId>io.debezium</groupId>\n+                <artifactId>debezium-testing-testcontainers</artifactId>\n+                <version>${project.version}</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNjE2NTE1", "url": "https://github.com/debezium/debezium/pull/2012#pullrequestreview-552616515", "createdAt": "2020-12-15T16:04:59Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjowNTowMFrOIGTGRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjowNTowMFrOIGTGRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ3NTI2OQ==", "bodyText": "This can be moved to the static member initialization and then the static member can be final.", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r543475269", "createdAt": "2020-12-15T16:05:00Z", "author": {"login": "rk3rn3r"}, "path": "debezium-quarkus-outbox/integration-tests/src/test/java/io/debezium/outbox/quarkus/it/DatabaseTestResource.java", "diffHunk": "@@ -20,29 +20,26 @@\n  */\n public class DatabaseTestResource implements QuarkusTestResourceLifecycleManager {\n \n-    private static final String POSTGRES_USER = \"postgres\";\n-    private static final String POSTGRES_PASSWORD = \"postgres\";\n-    private static final String POSTGRES_DBNAME = \"postgres\";\n-    private static final String POSTGRES_IMAGE = \"debezium/postgres:9.6\";\n-    private static final DockerImageName POSTGRES_DOCKER_IMAGE_NAME = DockerImageName.parse(POSTGRES_IMAGE)\n-            .asCompatibleSubstituteFor(\"postgres\");\n+    private static PostgresInfrastructure POSTGRES_INFRASTRUCTURE;\n \n-    private static PostgreSQLContainer<?> container;\n+    private static PostgreSQLContainer<?> postgresContainer;\n+\n+    public static void setPostgresInfrastructure() {\n+        POSTGRES_INFRASTRUCTURE = PostgresInfrastructure.getDebeziumPostgresDefaultInfrastructure();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNjE3MzYw", "url": "https://github.com/debezium/debezium/pull/2012#pullrequestreview-552617360", "createdAt": "2020-12-15T16:05:49Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjowNTo1MFrOIGTI6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjowNTo1MFrOIGTI6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ3NTk0Ng==", "bodyText": "see above", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r543475946", "createdAt": "2020-12-15T16:05:50Z", "author": {"login": "rk3rn3r"}, "path": "debezium-quarkus-outbox/integration-tests/src/test/java/io/debezium/outbox/quarkus/it/DatabaseTestResource.java", "diffHunk": "@@ -20,29 +20,26 @@\n  */\n public class DatabaseTestResource implements QuarkusTestResourceLifecycleManager {\n \n-    private static final String POSTGRES_USER = \"postgres\";\n-    private static final String POSTGRES_PASSWORD = \"postgres\";\n-    private static final String POSTGRES_DBNAME = \"postgres\";\n-    private static final String POSTGRES_IMAGE = \"debezium/postgres:9.6\";\n-    private static final DockerImageName POSTGRES_DOCKER_IMAGE_NAME = DockerImageName.parse(POSTGRES_IMAGE)\n-            .asCompatibleSubstituteFor(\"postgres\");\n+    private static PostgresInfrastructure POSTGRES_INFRASTRUCTURE;\n \n-    private static PostgreSQLContainer<?> container;\n+    private static PostgreSQLContainer<?> postgresContainer;\n+\n+    public static void setPostgresInfrastructure() {\n+        POSTGRES_INFRASTRUCTURE = PostgresInfrastructure.getDebeziumPostgresDefaultInfrastructure();\n+    }\n \n     @Override\n     public Map<String, String> start() {\n         try {\n-            container = new PostgreSQLContainer<>(POSTGRES_DOCKER_IMAGE_NAME)\n+            setPostgresInfrastructure();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNjIwNjM1", "url": "https://github.com/debezium/debezium/pull/2012#pullrequestreview-552620635", "createdAt": "2020-12-15T16:09:07Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjowOTowN1rOIGTTFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjowOTowN1rOIGTTFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ3ODU0OA==", "bodyText": "Starting and stopping the same container instance might slow tests down. I think this can be replaced with a reset hook like we do in the connector test cases. Or is there a reason @jpechane ?\n(This is related to the previous comments).", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r543478548", "createdAt": "2020-12-15T16:09:07Z", "author": {"login": "rk3rn3r"}, "path": "debezium-quarkus-outbox/integration-tests/src/test/java/io/debezium/outbox/quarkus/it/DatabaseTestResource.java", "diffHunk": "@@ -20,29 +20,26 @@\n  */\n public class DatabaseTestResource implements QuarkusTestResourceLifecycleManager {\n \n-    private static final String POSTGRES_USER = \"postgres\";\n-    private static final String POSTGRES_PASSWORD = \"postgres\";\n-    private static final String POSTGRES_DBNAME = \"postgres\";\n-    private static final String POSTGRES_IMAGE = \"debezium/postgres:9.6\";\n-    private static final DockerImageName POSTGRES_DOCKER_IMAGE_NAME = DockerImageName.parse(POSTGRES_IMAGE)\n-            .asCompatibleSubstituteFor(\"postgres\");\n+    private static PostgresInfrastructure POSTGRES_INFRASTRUCTURE;\n \n-    private static PostgreSQLContainer<?> container;\n+    private static PostgreSQLContainer<?> postgresContainer;\n+\n+    public static void setPostgresInfrastructure() {\n+        POSTGRES_INFRASTRUCTURE = PostgresInfrastructure.getDebeziumPostgresDefaultInfrastructure();\n+    }\n \n     @Override\n     public Map<String, String> start() {\n         try {\n-            container = new PostgreSQLContainer<>(POSTGRES_DOCKER_IMAGE_NAME)\n+            setPostgresInfrastructure();\n+            postgresContainer = POSTGRES_INFRASTRUCTURE.getPostgresContainer()\n                     .waitingFor(Wait.forLogMessage(\".*database system is ready to accept connections.*\", 2))\n-                    .withUsername(POSTGRES_USER)\n-                    .withPassword(POSTGRES_PASSWORD)\n-                    .withDatabaseName(POSTGRES_DBNAME)\n                     .withEnv(\"POSTGRES_INITDB_ARGS\", \"-E UTF8\")\n                     .withEnv(\"LANG\", \"en_US.utf8\")\n                     .withStartupTimeout(Duration.ofSeconds(30));\n \n-            container.start();\n-            return Collections.singletonMap(\"quarkus.datasource.jdbc.url\", container.getJdbcUrl());\n+            postgresContainer.start();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNjMxMzI3", "url": "https://github.com/debezium/debezium/pull/2012#pullrequestreview-552631327", "createdAt": "2020-12-15T16:19:28Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjoxOToyOFrOIGTzvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjoxOToyOFrOIGTzvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ4NjkwOQ==", "bodyText": "The network doesn't have to be injected. The Infrastructure classes should imo just return a blueprint for a container.\nTests that use that containers can still configure the network with the withNetwork() method (see below code change suggestion).\nIt think we can remove this method and the new getters that come with the network parameter.", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r543486909", "createdAt": "2020-12-15T16:19:28Z", "author": {"login": "rk3rn3r"}, "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/PostgresInfrastructure.java", "diffHunk": "@@ -47,10 +48,28 @@ private PostgresInfrastructure(String postgresImageName) {\n                 .withNetworkAliases(\"postgres\");\n     }\n \n-    public static PostgresInfrastructure getDebeziumPostgresInfrastructure() {\n+    private PostgresInfrastructure(String postgresImageName, Network network) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNjMxNTkw", "url": "https://github.com/debezium/debezium/pull/2012#pullrequestreview-552631590", "createdAt": "2020-12-15T16:19:44Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjoxOTo0NFrOIGT0gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjoxOTo0NFrOIGT0gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ4NzEwNg==", "bodyText": "can be removed. see above", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r543487106", "createdAt": "2020-12-15T16:19:44Z", "author": {"login": "rk3rn3r"}, "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/PostgresInfrastructure.java", "diffHunk": "@@ -47,10 +48,28 @@ private PostgresInfrastructure(String postgresImageName) {\n                 .withNetworkAliases(\"postgres\");\n     }\n \n-    public static PostgresInfrastructure getDebeziumPostgresInfrastructure() {\n+    private PostgresInfrastructure(String postgresImageName, Network network) {\n+        DockerImageName postgresDockerImageName = DockerImageName.parse(postgresImageName)\n+                .asCompatibleSubstituteFor(\"postgres\");\n+\n+        this.postgresImageName = postgresImageName;\n+        postgresContainer = new PostgreSQLContainer<>(postgresDockerImageName)\n+                .withNetwork(network)\n+                .withNetworkAliases(\"postgres\");\n+    }\n+\n+    public static PostgresInfrastructure getDebeziumPostgresDefaultInfrastructure(Network network) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNjMzMTM1", "url": "https://github.com/debezium/debezium/pull/2012#pullrequestreview-552633135", "createdAt": "2020-12-15T16:21:15Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjoyMToxNVrOIGT5EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjoyMToxNVrOIGT5EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ4ODI3Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final PostgresInfrastructure POSTGRES_INFRASTRUCTURE = PostgresInfrastructure.getDebeziumPostgresDefaultInfrastructure(network);\n          \n          \n            \n                private static final PostgresInfrastructure POSTGRES_INFRASTRUCTURE = PostgresInfrastructure.getDebeziumPostgresDefaultInfrastructure().withNetwork(network);", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r543488272", "createdAt": "2020-12-15T16:21:15Z", "author": {"login": "rk3rn3r"}, "path": "debezium-testing/debezium-testing-testcontainers/src/test/java/io/debezium/testing/testcontainers/DebeziumContainerTest.java", "diffHunk": "@@ -48,17 +48,14 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(DebeziumContainerTest.class);\n \n-    private static final DockerImageName POSTGRES_DOCKER_IMAGE_NAME = DockerImageName.parse(\"debezium/postgres:11\")\n-            .asCompatibleSubstituteFor(\"postgres\");\n-\n     private static final Network network = Network.newNetwork();\n \n+    private static final PostgresInfrastructure POSTGRES_INFRASTRUCTURE = PostgresInfrastructure.getDebeziumPostgresDefaultInfrastructure(network);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDk3NjI1", "url": "https://github.com/debezium/debezium/pull/2012#pullrequestreview-553497625", "createdAt": "2020-12-16T09:25:36Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwOToyNTozN1rOIG7tFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwOToyNTozN1rOIG7tFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE0MDU2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final ImageFromDockerfile apicurioDockerImage;\n          \n          \n            \n                private final ImageFromDockerfile apicurioContainerImage;\n          \n      \n    \n    \n  \n\nWe should generally use \"container image\" instead of \"Docker image\" (here, and elsewhere). Docker is just one particular implementation used for creating OCI-compliant container images.", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r544140567", "createdAt": "2020-12-16T09:25:37Z", "author": {"login": "gunnarmorling"}, "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/ApicurioInfrastructure.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package io.debezium.testing.testcontainers;\n+\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+import org.testcontainers.lifecycle.Startables;\n+\n+import java.util.stream.Stream;\n+\n+/**\n+ * Apicurio Testcontainers infrastructure handling.\n+ */\n+\n+public class ApicurioInfrastructure extends GenericContainer<ApicurioInfrastructure> {\n+\n+    protected static final String DEBEZIUM_VERSION = \"1.3.0.Final\";\n+    protected static final String APICURIO_VERSION = \"1.3.2.Final\";\n+    private final GenericContainer<?> apicurioContainer;\n+    private final ImageFromDockerfile apicurioDockerImage;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNzk3NjYy", "url": "https://github.com/debezium/debezium/pull/2012#pullrequestreview-553797662", "createdAt": "2020-12-16T15:25:06Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNToyNTowN1rOIHK0ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNToyNTowN1rOIHK0ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM4ODIzNA==", "bodyText": "This can be removed. Responsibility of Infrastructure classes is only providing the infrastructure (pre-configured containers) the lifecycle is handled outside (in test classes etc).", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r544388234", "createdAt": "2020-12-16T15:25:07Z", "author": {"login": "rk3rn3r"}, "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/ApicurioInfrastructure.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package io.debezium.testing.testcontainers;\n+\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+import org.testcontainers.lifecycle.Startables;\n+\n+import java.util.stream.Stream;\n+\n+/**\n+ * Apicurio Testcontainers infrastructure handling.\n+ */\n+\n+public class ApicurioInfrastructure extends GenericContainer<ApicurioInfrastructure> {\n+\n+    protected static final String DEBEZIUM_VERSION = \"1.3.0.Final\";\n+    protected static final String APICURIO_VERSION = \"1.3.2.Final\";\n+    private final GenericContainer<?> apicurioContainer;\n+    private final ImageFromDockerfile apicurioContainerImage;\n+\n+    private ApicurioInfrastructure() {\n+        apicurioContainerImage = new ImageFromDockerfile()\n+                .withDockerfileFromBuilder(builder -> builder\n+                        .from(\"debezium/connect:\" + DEBEZIUM_VERSION)\n+                        .env(\"KAFKA_CONNECT_DEBEZIUM_DIR\", \"$KAFKA_CONNECT_PLUGINS_DIR/debezium-connector-postgres\")\n+                        .env(\"APICURIO_VERSION\", APICURIO_VERSION)\n+                        .run(\"cd $KAFKA_CONNECT_DEBEZIUM_DIR && curl https://repo1.maven.org/maven2/io/apicurio/apicurio-registry-distro-connect-converter/$APICURIO_VERSION/apicurio-registry-distro-connect-converter-$APICURIO_VERSION-converter.tar.gz | tar xzv\")\n+                        .build());\n+\n+        apicurioContainer = new GenericContainer<>(\"apicurio/apicurio-registry-mem:\" + APICURIO_VERSION)\n+                .withExposedPorts(8080)\n+                .waitingFor(new LogMessageWaitStrategy().withRegEx(\".*apicurio-registry-app.*started in.*\"));\n+\n+    }\n+\n+    public static ApicurioInfrastructure getDebeziumApicurioDefaultInfrastructure() {\n+        return new ApicurioInfrastructure();\n+    }\n+\n+    public GenericContainer<?> getApicurioContainer() {\n+        return apicurioContainer;\n+    }\n+\n+    public ImageFromDockerfile getApicurioContainerImage() {\n+        return apicurioContainerImage;\n+    }\n+\n+    public void startContainer() {\n+        Startables.deepStart(Stream.of(apicurioContainer)).join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzODAxMDY4", "url": "https://github.com/debezium/debezium/pull/2012#pullrequestreview-553801068", "createdAt": "2020-12-16T15:28:10Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNToyODoxMFrOIHK-wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNToyODoxMFrOIHK-wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM5MDg0OQ==", "bodyText": "Return type should be GenericContainer or better, let's have a ApicurioDebeziumContainer class inherited from DebeziumContainer.", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r544390849", "createdAt": "2020-12-16T15:28:10Z", "author": {"login": "rk3rn3r"}, "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/ApicurioInfrastructure.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package io.debezium.testing.testcontainers;\n+\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+import org.testcontainers.lifecycle.Startables;\n+\n+import java.util.stream.Stream;\n+\n+/**\n+ * Apicurio Testcontainers infrastructure handling.\n+ */\n+\n+public class ApicurioInfrastructure extends GenericContainer<ApicurioInfrastructure> {\n+\n+    protected static final String DEBEZIUM_VERSION = \"1.3.0.Final\";\n+    protected static final String APICURIO_VERSION = \"1.3.2.Final\";\n+    private final GenericContainer<?> apicurioContainer;\n+    private final ImageFromDockerfile apicurioContainerImage;\n+\n+    private ApicurioInfrastructure() {\n+        apicurioContainerImage = new ImageFromDockerfile()\n+                .withDockerfileFromBuilder(builder -> builder\n+                        .from(\"debezium/connect:\" + DEBEZIUM_VERSION)\n+                        .env(\"KAFKA_CONNECT_DEBEZIUM_DIR\", \"$KAFKA_CONNECT_PLUGINS_DIR/debezium-connector-postgres\")\n+                        .env(\"APICURIO_VERSION\", APICURIO_VERSION)\n+                        .run(\"cd $KAFKA_CONNECT_DEBEZIUM_DIR && curl https://repo1.maven.org/maven2/io/apicurio/apicurio-registry-distro-connect-converter/$APICURIO_VERSION/apicurio-registry-distro-connect-converter-$APICURIO_VERSION-converter.tar.gz | tar xzv\")\n+                        .build());\n+\n+        apicurioContainer = new GenericContainer<>(\"apicurio/apicurio-registry-mem:\" + APICURIO_VERSION)\n+                .withExposedPorts(8080)\n+                .waitingFor(new LogMessageWaitStrategy().withRegEx(\".*apicurio-registry-app.*started in.*\"));\n+\n+    }\n+\n+    public static ApicurioInfrastructure getDebeziumApicurioDefaultInfrastructure() {\n+        return new ApicurioInfrastructure();\n+    }\n+\n+    public GenericContainer<?> getApicurioContainer() {\n+        return apicurioContainer;\n+    }\n+\n+    public ImageFromDockerfile getApicurioContainerImage() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzODAxNTUx", "url": "https://github.com/debezium/debezium/pull/2012#pullrequestreview-553801551", "createdAt": "2020-12-16T15:28:38Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNToyODozOFrOIHLAEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNToyODozOFrOIHLAEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM5MTE4NQ==", "bodyText": "Let's have a ApicurioDebeziumContainer class inherited from DebeziumContainer. (see also the last comment in this file)", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r544391185", "createdAt": "2020-12-16T15:28:38Z", "author": {"login": "rk3rn3r"}, "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/ApicurioInfrastructure.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package io.debezium.testing.testcontainers;\n+\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+import org.testcontainers.lifecycle.Startables;\n+\n+import java.util.stream.Stream;\n+\n+/**\n+ * Apicurio Testcontainers infrastructure handling.\n+ */\n+\n+public class ApicurioInfrastructure extends GenericContainer<ApicurioInfrastructure> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzODAyMjE5", "url": "https://github.com/debezium/debezium/pull/2012#pullrequestreview-553802219", "createdAt": "2020-12-16T15:29:16Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNToyOToxNlrOIHLCEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNToyOToxNlrOIHLCEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM5MTY5OA==", "bodyText": "This should imo go to a special ApicurioRegistryContainer class file", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r544391698", "createdAt": "2020-12-16T15:29:16Z", "author": {"login": "rk3rn3r"}, "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/ApicurioInfrastructure.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package io.debezium.testing.testcontainers;\n+\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+import org.testcontainers.lifecycle.Startables;\n+\n+import java.util.stream.Stream;\n+\n+/**\n+ * Apicurio Testcontainers infrastructure handling.\n+ */\n+\n+public class ApicurioInfrastructure extends GenericContainer<ApicurioInfrastructure> {\n+\n+    protected static final String DEBEZIUM_VERSION = \"1.3.0.Final\";\n+    protected static final String APICURIO_VERSION = \"1.3.2.Final\";\n+    private final GenericContainer<?> apicurioContainer;\n+    private final ImageFromDockerfile apicurioContainerImage;\n+\n+    private ApicurioInfrastructure() {\n+        apicurioContainerImage = new ImageFromDockerfile()\n+                .withDockerfileFromBuilder(builder -> builder\n+                        .from(\"debezium/connect:\" + DEBEZIUM_VERSION)\n+                        .env(\"KAFKA_CONNECT_DEBEZIUM_DIR\", \"$KAFKA_CONNECT_PLUGINS_DIR/debezium-connector-postgres\")\n+                        .env(\"APICURIO_VERSION\", APICURIO_VERSION)\n+                        .run(\"cd $KAFKA_CONNECT_DEBEZIUM_DIR && curl https://repo1.maven.org/maven2/io/apicurio/apicurio-registry-distro-connect-converter/$APICURIO_VERSION/apicurio-registry-distro-connect-converter-$APICURIO_VERSION-converter.tar.gz | tar xzv\")\n+                        .build());\n+\n+        apicurioContainer = new GenericContainer<>(\"apicurio/apicurio-registry-mem:\" + APICURIO_VERSION)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0NDUxMzQz", "url": "https://github.com/debezium/debezium/pull/2012#pullrequestreview-554451343", "createdAt": "2020-12-17T10:06:04Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMDowNjowNFrOIHt8_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMDowNjowNFrOIHt8_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk2MzgzNg==", "bodyText": "I'm sorry, we meant the parent-parent-pom, in the root dir.", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r544963836", "createdAt": "2020-12-17T10:06:04Z", "author": {"login": "rk3rn3r"}, "path": "debezium-quarkus-outbox/pom.xml", "diffHunk": "@@ -23,6 +23,12 @@\n                 <type>pom</type>\n                 <scope>import</scope>\n             </dependency>\n+            <dependency>\n+                <groupId>io.debezium</groupId>\n+                <artifactId>debezium-testing-testcontainers</artifactId>\n+                <version>${project.version}</version>\n+                <scope>test</scope>\n+            </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0NDUzMzY2", "url": "https://github.com/debezium/debezium/pull/2012#pullrequestreview-554453366", "createdAt": "2020-12-17T10:08:40Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMDowODo0MVrOIHuDnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMDowODo0MVrOIHuDnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk2NTUzNQ==", "bodyText": "I don't think we'll need this. As when someone wants to populate a Kafka Connect instance with the DebeziumContainer (which is a Kafka Connect container), the setup needs to be done outside anyway to inject related connector code etc.", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r544965535", "createdAt": "2020-12-17T10:08:41Z", "author": {"login": "rk3rn3r"}, "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/ConnectInfrastructure.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package io.debezium.testing.testcontainers;\n+\n+\n+/**\n+ * Connect Testcontainers infrastructure handling.\n+ */\n+\n+public class ConnectInfrastructure {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0OTkwNDQ5", "url": "https://github.com/debezium/debezium/pull/2012#pullrequestreview-554990449", "createdAt": "2020-12-17T21:10:37Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMToxMDozN1rOIII7tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMToxMDozN1rOIII7tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwNTg3OA==", "bodyText": "That's not needed actually (see my other comment below), current Debezium versions contain those converters already, it's only a matter of enabling them by means of an env var. I.e. this class here should not be needed, and instead a test wishing to use Connect/DBZ with the Apicurio converters would do it like so:\npublic static DebeziumContainer debeziumContainer = new DebeziumContainer()\n            .withNetwork(network)\n            .withKafka(kafkaContainer)\n            .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n            .enableApicurioConverters() // <----\n            .dependsOn(kafkaContainer);", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r545405878", "createdAt": "2020-12-17T21:10:37Z", "author": {"login": "gunnarmorling"}, "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/ApicurioInfrastructure.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package io.debezium.testing.testcontainers;\n+\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+\n+/**\n+ * Apicurio Testcontainers infrastructure handling.\n+ */\n+\n+public class ApicurioInfrastructure extends GenericContainer<ApicurioInfrastructure> {\n+\n+    protected static final String DEBEZIUM_VERSION = \"1.3.0.Final\";\n+    protected static final String APICURIO_VERSION = \"1.3.2.Final\";\n+    private final GenericContainer<?> apicurioContainer;\n+    private final ImageFromDockerfile apicurioContainerImage;\n+\n+    public static ConnectInfrastructure CONNECT_INFRASTRUCTURE = ConnectInfrastructure.getDefaultConnectInfrastructure();\n+\n+    private final String connectContainer;\n+\n+    private ApicurioInfrastructure() {\n+        connectContainer = CONNECT_INFRASTRUCTURE.getConnectContainer();\n+        apicurioContainerImage = new ImageFromDockerfile()\n+                .withDockerfileFromBuilder(builder -> builder\n+                        .from(connectContainer)\n+                        .env(\"KAFKA_CONNECT_DEBEZIUM_DIR\", \"$KAFKA_CONNECT_PLUGINS_DIR/debezium-connector-postgres\")\n+                        .env(\"APICURIO_VERSION\", APICURIO_VERSION)\n+                        .run(\"cd $KAFKA_CONNECT_DEBEZIUM_DIR && curl https://repo1.maven.org/maven2/io/apicurio/apicurio-registry-distro-connect-converter/$APICURIO_VERSION/apicurio-registry-distro-connect-converter-$APICURIO_VERSION-converter.tar.gz | tar xzv\")\n+                        .build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0OTkxNTc3", "url": "https://github.com/debezium/debezium/pull/2012#pullrequestreview-554991577", "createdAt": "2020-12-17T21:12:25Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMToxMjoyNVrOIII_jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMToxMjoyNVrOIII_jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwNjg2Mg==", "bodyText": "I'd suggest to get rid of this class completely. There are many unused methods anyways, and the PostgresContainer is easy enough to use as-is.", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r545406862", "createdAt": "2020-12-17T21:12:25Z", "author": {"login": "gunnarmorling"}, "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/PostgresInfrastructure.java", "diffHunk": "@@ -20,17 +20,17 @@\n /**\n  * Postgres Testcontainers infrastructure handling.\n  */\n-public class PostgresInfrastructure {\n+public class PostgresInfrastructure extends GenericContainer<PostgresInfrastructure> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0OTkyMDAw", "url": "https://github.com/debezium/debezium/pull/2012#pullrequestreview-554992000", "createdAt": "2020-12-17T21:13:03Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "a216e3b5026b59674545317b04d34550e7bc1e50", "author": {"user": {"login": "ani-sha", "name": "Anisha Mohanty"}}, "url": "https://github.com/debezium/debezium/commit/a216e3b5026b59674545317b04d34550e7bc1e50", "committedDate": "2020-12-21T09:14:51Z", "message": "DBZ-2764 Centralize Postgres image for Testcontainers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "234915443d82e2c57cc678e45d42a259fe8bfb5e", "author": {"user": {"login": "ani-sha", "name": "Anisha Mohanty"}}, "url": "https://github.com/debezium/debezium/commit/234915443d82e2c57cc678e45d42a259fe8bfb5e", "committedDate": "2020-12-21T09:14:51Z", "message": "DBZ-2764 Centralize Apicurio image for Testcontainers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73206ee6aa07bea8e36d3de30b9d49e0b07faf56", "author": {"user": {"login": "ani-sha", "name": "Anisha Mohanty"}}, "url": "https://github.com/debezium/debezium/commit/73206ee6aa07bea8e36d3de30b9d49e0b07faf56", "committedDate": "2020-12-21T09:14:51Z", "message": "DBZ-2764 Fetch stable Debezium version for Testcontainers"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "73206ee6aa07bea8e36d3de30b9d49e0b07faf56", "author": {"user": {"login": "ani-sha", "name": "Anisha Mohanty"}}, "url": "https://github.com/debezium/debezium/commit/73206ee6aa07bea8e36d3de30b9d49e0b07faf56", "committedDate": "2020-12-21T09:14:51Z", "message": "DBZ-2764 Fetch stable Debezium version for Testcontainers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MjQ1ODAw", "url": "https://github.com/debezium/debezium/pull/2012#pullrequestreview-556245800", "createdAt": "2020-12-21T09:35:51Z", "commit": {"oid": "73206ee6aa07bea8e36d3de30b9d49e0b07faf56"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOTozNTo1MlrOIJR7HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOTozNTo1MlrOIJR7HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYwMTc1Nw==", "bodyText": "@gunnarmorling I have added the implementation for the stable debezium version here.", "url": "https://github.com/debezium/debezium/pull/2012#discussion_r546601757", "createdAt": "2020-12-21T09:35:52Z", "author": {"login": "ani-sha"}, "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java", "diffHunk": "@@ -280,4 +293,40 @@ public void ensureConnectorTaskState(String connectorName, int taskNumber, Conne\n                 .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n+\n+    public static String getDebeziumStableVersion() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73206ee6aa07bea8e36d3de30b9d49e0b07faf56"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64670297fa9b6e7ccbbda20490ff43086ffaedcb", "author": {"user": {"login": "gunnarmorling", "name": "Gunnar Morling"}}, "url": "https://github.com/debezium/debezium/commit/64670297fa9b6e7ccbbda20490ff43086ffaedcb", "committedDate": "2021-01-08T12:15:09Z", "message": "DBZ-2764 Misc. clean-up"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2255, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}