{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0ODU5MDU4", "number": 1262, "title": "DBZ-1773 Process TINYINT(1) as number", "bodyText": "https://issues.redhat.com/browse/DBZ-1773", "createdAt": "2020-02-13T13:09:37Z", "url": "https://github.com/debezium/debezium/pull/1262", "merged": true, "mergeCommit": {"oid": "f0cc055833cb1a5cf03acf6533253452e0ffd51b"}, "closed": true, "closedAt": "2020-02-17T15:40:53Z", "author": {"login": "jpechane"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcD6qzVAH2gAyMzc0ODU5MDU4OmM0OTE3NjlhMGI5ZjY3MDM5NWQ3YjZhN2JlM2RkMDFlMjY5NmNlOGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcFMTA8ABqjMwNDM0OTEyODU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c491769a0b9f670395d7b6a7be3dd01e2696ce8a", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/c491769a0b9f670395d7b6a7be3dd01e2696ce8a", "committedDate": "2020-02-13T13:09:06Z", "message": "DBZ-1773 Process TINYINT(1) as number"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4Nzk2Mjgw", "url": "https://github.com/debezium/debezium/pull/1262#pullrequestreview-358796280", "createdAt": "2020-02-14T09:06:23Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwOTowNjoyM1rOFpvt1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwOTowNzo1OFrOFpvwbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMxNzcxNw==", "bodyText": "Ok, read up a bit more on this. Seems we could achieve the same without any real code change by setting tinyInt1isBit to false (it's true by default). Both should work, leaving it to you what you prefer. In any case it should be a workaround for the issue reporter until the fix has been shipped.", "url": "https://github.com/debezium/debezium/pull/1262#discussion_r379317717", "createdAt": "2020-02-14T09:06:23Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/SnapshotReader.java", "diffHunk": "@@ -160,6 +160,14 @@ else if (actualColumn.jdbcType() == Types.DATE) {\n         else if (actualColumn.jdbcType() == Types.TIMESTAMP) {\n             return readTimestampField(rs, fieldNo, actualColumn, actualTable);\n         }\n+        // JDBC's rs.GetObject() will return a Boolean for all TINYINT(1) columns.\n+        // TINYINT columns are reprtoed as SMALLINT by JDBC driver\n+        else if (actualColumn.jdbcType() == Types.TINYINT || actualColumn.jdbcType() == Types.SMALLINT) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMxODM4Mg==", "bodyText": "How comes the expected type differs between short and byte? As per the docs, it should always be int8? The N in TINYINT(N) is only the display width, it doesn't impact the value range AFAIU.", "url": "https://github.com/debezium/debezium/pull/1262#discussion_r379318382", "createdAt": "2020-02-14T09:07:58Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/MySqlTinyIntIT.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.connector.mysql;\n+\n+import java.nio.file.Path;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.connect.source.SourceRecord;\n+import org.fest.assertions.Assertions;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import io.debezium.config.Configuration;\n+import io.debezium.doc.FixFor;\n+import io.debezium.embedded.AbstractConnectorTest;\n+import io.debezium.util.Testing;\n+\n+/**\n+ * Verify correct range of TINYINT.\n+ *\n+ * @author Jiri Pechanec\n+ */\n+public class MySqlTinyIntIT extends AbstractConnectorTest {\n+\n+    private static final Path DB_HISTORY_PATH = Testing.Files.createTestingPath(\"file-db-history-year.txt\")\n+            .toAbsolutePath();\n+    private final UniqueDatabase DATABASE = new UniqueDatabase(\"tinyintit\", \"tinyint_test\")\n+            .withDbHistoryPath(DB_HISTORY_PATH);\n+\n+    private Configuration config;\n+\n+    @Before\n+    public void beforeEach() {\n+        stopConnector();\n+        DATABASE.createAndInitialize();\n+        initializeConnectorTestFramework();\n+        Testing.Files.delete(DB_HISTORY_PATH);\n+    }\n+\n+    @After\n+    public void afterEach() {\n+        try {\n+            stopConnector();\n+        }\n+        finally {\n+            Testing.Files.delete(DB_HISTORY_PATH);\n+        }\n+    }\n+\n+    @Test\n+    @FixFor(\"DBZ-1773\")\n+    public void shouldHandleTinyIntAsNumber() throws SQLException, InterruptedException {\n+        // Use the DB configuration to define the connector's configuration ...\n+        config = DATABASE.defaultConfig()\n+                .with(MySqlConnectorConfig.SNAPSHOT_MODE, MySqlConnectorConfig.SnapshotMode.INITIAL)\n+                .build();\n+\n+        // Start the connector ...\n+        start(MySqlConnector.class, config);\n+\n+        // ---------------------------------------------------------------------------------------------------------------\n+        // Consume all of the events due to startup and initialization of the database\n+        // ---------------------------------------------------------------------------------------------------------------\n+        final int numDatabase = 2;\n+        final int numTables = 2;\n+        final int numOthers = 2;\n+        consumeRecords(numDatabase + numTables + numOthers);\n+\n+        assertChangeRecord();\n+\n+        try (final Connection conn = MySQLConnection.forTestDatabase(DATABASE.getDatabaseName()).connection()) {\n+            conn.createStatement().execute(\"INSERT INTO DBZ1773 VALUES (DEFAULT, 100, 5, 50)\");\n+        }\n+        assertChangeRecord();\n+\n+        stopConnector();\n+    }\n+\n+    private void assertChangeRecord() throws InterruptedException {\n+        final SourceRecord record = consumeRecord();\n+        Assertions.assertThat(record).isNotNull();\n+        final Struct change = ((Struct) record.value()).getStruct(\"after\");\n+\n+        Assertions.assertThat(change.getInt16(\"ti\")).isEqualTo((short) 100);\n+        Assertions.assertThat(change.getInt16(\"ti1\")).isEqualTo((short) 5);\n+        Assertions.assertThat(change.getInt16(\"ti2\")).isEqualTo((byte) 50);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 92}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd40d102b51d781987a826fac93a0d7bc1c389be", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/fd40d102b51d781987a826fac93a0d7bc1c389be", "committedDate": "2020-02-17T12:15:09Z", "message": "DBZ-1773 Change test for null value"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "fd40d102b51d781987a826fac93a0d7bc1c389be", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/fd40d102b51d781987a826fac93a0d7bc1c389be", "committedDate": "2020-02-17T12:15:09Z", "message": "DBZ-1773 Change test for null value"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2058, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}