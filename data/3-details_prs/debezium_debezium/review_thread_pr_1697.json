{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4Nzk4ODk2", "number": 1697, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwODowOTowNlrOEOkyLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNjozMjo1MlrOEO-1rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzE4MTg4OnYy", "diffSide": "RIGHT", "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/connection/PostgresReplicationConnection.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwODowOTowNlrOGxzD_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwODowOTowNlrOGxzD_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3MDAxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param exportSnapshot            whether the connector is doing snapshot\n          \n          \n            \n                 * @param doSnapshot            whether the connector is doing snapshot", "url": "https://github.com/debezium/debezium/pull/1697#discussion_r454870013", "createdAt": "2020-07-15T08:09:06Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/connection/PostgresReplicationConnection.java", "diffHunk": "@@ -88,6 +88,7 @@\n      * @param dropSlotOnClose           whether the replication slot should be dropped once the connection is closed\n      * @param statusUpdateInterval      the interval at which the replication connection should periodically send status\n      * @param exportSnapshot            whether the replication should export a snapshot when created\n+     * @param exportSnapshot            whether the connector is doing snapshot", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6379ff5cb42828bd9951531c5ac0c09b1447c8b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzE4NDM1OnYy", "diffSide": "RIGHT", "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/connection/ReplicationConnection.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwODowOTo0NVrOGxzFfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwODowOTo0NVrOGxzFfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3MDM5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * @param doSnapshot true if a snapshot should is going to be executed, false if otherwise\n          \n          \n            \n                     * @param doSnapshot true if a snapshot is going to be executed, false if otherwise", "url": "https://github.com/debezium/debezium/pull/1697#discussion_r454870397", "createdAt": "2020-07-15T08:09:45Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/connection/ReplicationConnection.java", "diffHunk": "@@ -206,6 +206,14 @@ static String format(long lsn) {\n          */\n         Builder exportSnapshotOnCreate(final boolean exportSnapshot);\n \n+        /**\n+         * Whether or not the snapshot is executed\n+         * @param doSnapshot true if a snapshot should is going to be executed, false if otherwise", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6379ff5cb42828bd9951531c5ac0c09b1447c8b"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzIxNjQ2OnYy", "diffSide": "RIGHT", "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/connection/AbstractMessageDecoder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwODoxODoyMVrOGxzZMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwODoxODoyMVrOGxzZMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3NTQ0MA==", "bodyText": "But are you skipping it in this case?", "url": "https://github.com/debezium/debezium/pull/1697#discussion_r454875440", "createdAt": "2020-07-15T08:18:21Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/connection/AbstractMessageDecoder.java", "diffHunk": "@@ -42,8 +51,13 @@ public boolean shouldMessageBeSkipped(ByteBuffer buffer, Long lastReceivedLsn, L\n         // the lsn we started from is inclusive, so we need to avoid sending back the same message twice\n         // but for the first record seen ever it is possible we received the same LSN as the one obtained from replication slot\n         if (startLsn.compareTo(lastReceivedLsn) > 0 || (startLsn.equals(lastReceivedLsn) && skipFirstFlushRecord)) {\n-            LOGGER.info(\"Streaming requested from LSN {} but received LSN {} that is same or smaller so skipping the message\", startLsn, lastReceivedLsn);\n-            return true;\n+            if (filterBasedOnLsn) {\n+                LOGGER.info(\"Streaming requested from LSN {} but received LSN {} that is same or smaller so skipping the message\", startLsn, lastReceivedLsn);\n+                return true;\n+            }\n+            else {\n+                LOGGER.trace(\"Streaming requested from LSN {} but received LSN {} that is same or smaller so skipping the message\", startLsn, lastReceivedLsn);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6379ff5cb42828bd9951531c5ac0c09b1447c8b"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzIyMjE5OnYy", "diffSide": "RIGHT", "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresConnectorIT.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwODoxOTo0N1rOGxzcnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMTo1NzowMVrOGx6wTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3NjMxOQ==", "bodyText": "Couldn't you just create the publication always, and it only would be used when running the test for pgoutput? That way we'd keep a single test.", "url": "https://github.com/debezium/debezium/pull/1697#discussion_r454876319", "createdAt": "2020-07-15T08:19:47Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresConnectorIT.java", "diffHunk": "@@ -1118,6 +1119,110 @@ public void shouldAllowForExportedSnapshot() throws Exception {\n         VerifyRecord.isValidInsert(s2recs.get(0), PK_FIELD, 3);\n     }\n \n+    @Test\n+    @FixFor(\"DBZ-2288\")\n+    @SkipWhenDecoderPluginNameIs(value = SkipWhenDecoderPluginNameIs.DecoderPluginName.PGOUTPUT, reason = \"PgOutput needs publication for manually created slot\")\n+    public void exportedSnapshotShouldNotSkipRecordOfParallelTx() throws Exception {\n+        TestHelper.dropDefaultReplicationSlot();\n+        TestHelper.createDefaultReplicationSlot();\n+\n+        // Testing.Print.enable();\n+        TestHelper.execute(SETUP_TABLES_STMT);\n+        TestHelper.execute(INSERT_STMT);\n+\n+        Configuration config = TestHelper.defaultConfig()\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.EXPORTED.getValue())\n+                .with(PostgresConnectorConfig.DROP_SLOT_ON_STOP, Boolean.FALSE)\n+                .with(PostgresConnectorConfig.MAX_QUEUE_SIZE, 2)\n+                .with(PostgresConnectorConfig.MAX_BATCH_SIZE, 1)\n+                .build();\n+        final PostgresConnection pgConnection = TestHelper.create();\n+        pgConnection.setAutoCommit(false);\n+        pgConnection.executeWithoutCommitting(INSERT_STMT);\n+        final AtomicBoolean inserted = new AtomicBoolean();\n+        start(PostgresConnector.class, config, loggingCompletion(), x -> false, x -> {\n+            if (!inserted.get()) {\n+                TestHelper.execute(INSERT_STMT);\n+                try {\n+                    pgConnection.commit();\n+                }\n+                catch (Exception e) {\n+                    e.printStackTrace();\n+                }\n+                inserted.set(true);\n+            }\n+        });\n+        assertConnectorIsRunning();\n+\n+        // Consume records from the snapshot\n+        SourceRecords actualRecords = consumeRecordsByTopic(4);\n+\n+        // Consume records from concurrent transactions\n+        actualRecords = consumeRecordsByTopic(4);\n+\n+        List<SourceRecord> s1recs = actualRecords.recordsForTopic(topicName(\"s1.a\"));\n+        List<SourceRecord> s2recs = actualRecords.recordsForTopic(topicName(\"s1.a\"));\n+        s2recs = actualRecords.recordsForTopic(topicName(\"s2.a\"));\n+        assertThat(s1recs.size()).isEqualTo(2);\n+        assertThat(s2recs.size()).isEqualTo(2);\n+\n+        stopConnector();\n+        TestHelper.dropDefaultReplicationSlot();\n+    }\n+\n+    @Test\n+    @FixFor(\"DBZ-2288\")\n+    @SkipWhenDecoderPluginNameIsNot(value = SkipWhenDecoderPluginNameIsNot.DecoderPluginName.PGOUTPUT, reason = \"Publication not supported\")\n+    public void exportedSnapshotShouldNotSkipRecordOfParallelTxPgoutput() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6379ff5cb42828bd9951531c5ac0c09b1447c8b"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg4ODgwNA==", "bodyText": "No, as postgres 9 dows not support publications. So it is either based on postgres version or plugin used.", "url": "https://github.com/debezium/debezium/pull/1697#discussion_r454888804", "createdAt": "2020-07-15T08:40:41Z", "author": {"login": "jpechane"}, "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresConnectorIT.java", "diffHunk": "@@ -1118,6 +1119,110 @@ public void shouldAllowForExportedSnapshot() throws Exception {\n         VerifyRecord.isValidInsert(s2recs.get(0), PK_FIELD, 3);\n     }\n \n+    @Test\n+    @FixFor(\"DBZ-2288\")\n+    @SkipWhenDecoderPluginNameIs(value = SkipWhenDecoderPluginNameIs.DecoderPluginName.PGOUTPUT, reason = \"PgOutput needs publication for manually created slot\")\n+    public void exportedSnapshotShouldNotSkipRecordOfParallelTx() throws Exception {\n+        TestHelper.dropDefaultReplicationSlot();\n+        TestHelper.createDefaultReplicationSlot();\n+\n+        // Testing.Print.enable();\n+        TestHelper.execute(SETUP_TABLES_STMT);\n+        TestHelper.execute(INSERT_STMT);\n+\n+        Configuration config = TestHelper.defaultConfig()\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.EXPORTED.getValue())\n+                .with(PostgresConnectorConfig.DROP_SLOT_ON_STOP, Boolean.FALSE)\n+                .with(PostgresConnectorConfig.MAX_QUEUE_SIZE, 2)\n+                .with(PostgresConnectorConfig.MAX_BATCH_SIZE, 1)\n+                .build();\n+        final PostgresConnection pgConnection = TestHelper.create();\n+        pgConnection.setAutoCommit(false);\n+        pgConnection.executeWithoutCommitting(INSERT_STMT);\n+        final AtomicBoolean inserted = new AtomicBoolean();\n+        start(PostgresConnector.class, config, loggingCompletion(), x -> false, x -> {\n+            if (!inserted.get()) {\n+                TestHelper.execute(INSERT_STMT);\n+                try {\n+                    pgConnection.commit();\n+                }\n+                catch (Exception e) {\n+                    e.printStackTrace();\n+                }\n+                inserted.set(true);\n+            }\n+        });\n+        assertConnectorIsRunning();\n+\n+        // Consume records from the snapshot\n+        SourceRecords actualRecords = consumeRecordsByTopic(4);\n+\n+        // Consume records from concurrent transactions\n+        actualRecords = consumeRecordsByTopic(4);\n+\n+        List<SourceRecord> s1recs = actualRecords.recordsForTopic(topicName(\"s1.a\"));\n+        List<SourceRecord> s2recs = actualRecords.recordsForTopic(topicName(\"s1.a\"));\n+        s2recs = actualRecords.recordsForTopic(topicName(\"s2.a\"));\n+        assertThat(s1recs.size()).isEqualTo(2);\n+        assertThat(s2recs.size()).isEqualTo(2);\n+\n+        stopConnector();\n+        TestHelper.dropDefaultReplicationSlot();\n+    }\n+\n+    @Test\n+    @FixFor(\"DBZ-2288\")\n+    @SkipWhenDecoderPluginNameIsNot(value = SkipWhenDecoderPluginNameIsNot.DecoderPluginName.PGOUTPUT, reason = \"Publication not supported\")\n+    public void exportedSnapshotShouldNotSkipRecordOfParallelTxPgoutput() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3NjMxOQ=="}, "originalCommit": {"oid": "e6379ff5cb42828bd9951531c5ac0c09b1447c8b"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5NjA0NQ==", "bodyText": "Gotcha, makes sense.", "url": "https://github.com/debezium/debezium/pull/1697#discussion_r454996045", "createdAt": "2020-07-15T11:57:01Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresConnectorIT.java", "diffHunk": "@@ -1118,6 +1119,110 @@ public void shouldAllowForExportedSnapshot() throws Exception {\n         VerifyRecord.isValidInsert(s2recs.get(0), PK_FIELD, 3);\n     }\n \n+    @Test\n+    @FixFor(\"DBZ-2288\")\n+    @SkipWhenDecoderPluginNameIs(value = SkipWhenDecoderPluginNameIs.DecoderPluginName.PGOUTPUT, reason = \"PgOutput needs publication for manually created slot\")\n+    public void exportedSnapshotShouldNotSkipRecordOfParallelTx() throws Exception {\n+        TestHelper.dropDefaultReplicationSlot();\n+        TestHelper.createDefaultReplicationSlot();\n+\n+        // Testing.Print.enable();\n+        TestHelper.execute(SETUP_TABLES_STMT);\n+        TestHelper.execute(INSERT_STMT);\n+\n+        Configuration config = TestHelper.defaultConfig()\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.EXPORTED.getValue())\n+                .with(PostgresConnectorConfig.DROP_SLOT_ON_STOP, Boolean.FALSE)\n+                .with(PostgresConnectorConfig.MAX_QUEUE_SIZE, 2)\n+                .with(PostgresConnectorConfig.MAX_BATCH_SIZE, 1)\n+                .build();\n+        final PostgresConnection pgConnection = TestHelper.create();\n+        pgConnection.setAutoCommit(false);\n+        pgConnection.executeWithoutCommitting(INSERT_STMT);\n+        final AtomicBoolean inserted = new AtomicBoolean();\n+        start(PostgresConnector.class, config, loggingCompletion(), x -> false, x -> {\n+            if (!inserted.get()) {\n+                TestHelper.execute(INSERT_STMT);\n+                try {\n+                    pgConnection.commit();\n+                }\n+                catch (Exception e) {\n+                    e.printStackTrace();\n+                }\n+                inserted.set(true);\n+            }\n+        });\n+        assertConnectorIsRunning();\n+\n+        // Consume records from the snapshot\n+        SourceRecords actualRecords = consumeRecordsByTopic(4);\n+\n+        // Consume records from concurrent transactions\n+        actualRecords = consumeRecordsByTopic(4);\n+\n+        List<SourceRecord> s1recs = actualRecords.recordsForTopic(topicName(\"s1.a\"));\n+        List<SourceRecord> s2recs = actualRecords.recordsForTopic(topicName(\"s1.a\"));\n+        s2recs = actualRecords.recordsForTopic(topicName(\"s2.a\"));\n+        assertThat(s1recs.size()).isEqualTo(2);\n+        assertThat(s2recs.size()).isEqualTo(2);\n+\n+        stopConnector();\n+        TestHelper.dropDefaultReplicationSlot();\n+    }\n+\n+    @Test\n+    @FixFor(\"DBZ-2288\")\n+    @SkipWhenDecoderPluginNameIsNot(value = SkipWhenDecoderPluginNameIsNot.DecoderPluginName.PGOUTPUT, reason = \"Publication not supported\")\n+    public void exportedSnapshotShouldNotSkipRecordOfParallelTxPgoutput() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3NjMxOQ=="}, "originalCommit": {"oid": "e6379ff5cb42828bd9951531c5ac0c09b1447c8b"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzI3MjI1OnYy", "diffSide": "RIGHT", "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/connection/ReplicationConnection.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwODozMzowMFrOGxz7aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwODozMzowMFrOGxz7aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg4NDIwMw==", "bodyText": "This shouldn't apply here?", "url": "https://github.com/debezium/debezium/pull/1697#discussion_r454884203", "createdAt": "2020-07-15T08:33:00Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/connection/ReplicationConnection.java", "diffHunk": "@@ -206,6 +206,14 @@ static String format(long lsn) {\n          */\n         Builder exportSnapshotOnCreate(final boolean exportSnapshot);\n \n+        /**\n+         * Whether or not the snapshot is executed\n+         * @param doSnapshot true if a snapshot should is going to be executed, false if otherwise\n+         * @return this instance\n+         * @see #DEFAULT_EXPORT_SNAPSHOT", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6379ff5cb42828bd9951531c5ac0c09b1447c8b"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTQ1MDM0OnYy", "diffSide": "RIGHT", "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresConnectorIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNjozMjo0MlrOGyb8vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNjozMjo0MlrOGyb8vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUzOTkwMQ==", "bodyText": "Rather rethrow it?", "url": "https://github.com/debezium/debezium/pull/1697#discussion_r455539901", "createdAt": "2020-07-16T06:32:42Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresConnectorIT.java", "diffHunk": "@@ -1118,6 +1119,110 @@ public void shouldAllowForExportedSnapshot() throws Exception {\n         VerifyRecord.isValidInsert(s2recs.get(0), PK_FIELD, 3);\n     }\n \n+    @Test\n+    @FixFor(\"DBZ-2288\")\n+    @SkipWhenDecoderPluginNameIs(value = SkipWhenDecoderPluginNameIs.DecoderPluginName.PGOUTPUT, reason = \"PgOutput needs publication for manually created slot\")\n+    public void exportedSnapshotShouldNotSkipRecordOfParallelTx() throws Exception {\n+        TestHelper.dropDefaultReplicationSlot();\n+        TestHelper.createDefaultReplicationSlot();\n+\n+        // Testing.Print.enable();\n+        TestHelper.execute(SETUP_TABLES_STMT);\n+        TestHelper.execute(INSERT_STMT);\n+\n+        Configuration config = TestHelper.defaultConfig()\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.EXPORTED.getValue())\n+                .with(PostgresConnectorConfig.DROP_SLOT_ON_STOP, Boolean.FALSE)\n+                .with(PostgresConnectorConfig.MAX_QUEUE_SIZE, 2)\n+                .with(PostgresConnectorConfig.MAX_BATCH_SIZE, 1)\n+                .build();\n+        final PostgresConnection pgConnection = TestHelper.create();\n+        pgConnection.setAutoCommit(false);\n+        pgConnection.executeWithoutCommitting(INSERT_STMT);\n+        final AtomicBoolean inserted = new AtomicBoolean();\n+        start(PostgresConnector.class, config, loggingCompletion(), x -> false, x -> {\n+            if (!inserted.get()) {\n+                TestHelper.execute(INSERT_STMT);\n+                try {\n+                    pgConnection.commit();\n+                }\n+                catch (Exception e) {\n+                    e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2fc4a6558f7771ccb2074f2e78ac7003bfccefb"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTQ1MDY4OnYy", "diffSide": "RIGHT", "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresConnectorIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNjozMjo1MlrOGyb88g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNjozMjo1MlrOGyb88g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUzOTk1NA==", "bodyText": "As above.", "url": "https://github.com/debezium/debezium/pull/1697#discussion_r455539954", "createdAt": "2020-07-16T06:32:52Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresConnectorIT.java", "diffHunk": "@@ -1118,6 +1119,110 @@ public void shouldAllowForExportedSnapshot() throws Exception {\n         VerifyRecord.isValidInsert(s2recs.get(0), PK_FIELD, 3);\n     }\n \n+    @Test\n+    @FixFor(\"DBZ-2288\")\n+    @SkipWhenDecoderPluginNameIs(value = SkipWhenDecoderPluginNameIs.DecoderPluginName.PGOUTPUT, reason = \"PgOutput needs publication for manually created slot\")\n+    public void exportedSnapshotShouldNotSkipRecordOfParallelTx() throws Exception {\n+        TestHelper.dropDefaultReplicationSlot();\n+        TestHelper.createDefaultReplicationSlot();\n+\n+        // Testing.Print.enable();\n+        TestHelper.execute(SETUP_TABLES_STMT);\n+        TestHelper.execute(INSERT_STMT);\n+\n+        Configuration config = TestHelper.defaultConfig()\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.EXPORTED.getValue())\n+                .with(PostgresConnectorConfig.DROP_SLOT_ON_STOP, Boolean.FALSE)\n+                .with(PostgresConnectorConfig.MAX_QUEUE_SIZE, 2)\n+                .with(PostgresConnectorConfig.MAX_BATCH_SIZE, 1)\n+                .build();\n+        final PostgresConnection pgConnection = TestHelper.create();\n+        pgConnection.setAutoCommit(false);\n+        pgConnection.executeWithoutCommitting(INSERT_STMT);\n+        final AtomicBoolean inserted = new AtomicBoolean();\n+        start(PostgresConnector.class, config, loggingCompletion(), x -> false, x -> {\n+            if (!inserted.get()) {\n+                TestHelper.execute(INSERT_STMT);\n+                try {\n+                    pgConnection.commit();\n+                }\n+                catch (Exception e) {\n+                    e.printStackTrace();\n+                }\n+                inserted.set(true);\n+            }\n+        });\n+        assertConnectorIsRunning();\n+\n+        // Consume records from the snapshot\n+        SourceRecords actualRecords = consumeRecordsByTopic(4);\n+\n+        // Consume records from concurrent transactions\n+        actualRecords = consumeRecordsByTopic(4);\n+\n+        List<SourceRecord> s1recs = actualRecords.recordsForTopic(topicName(\"s1.a\"));\n+        List<SourceRecord> s2recs = actualRecords.recordsForTopic(topicName(\"s1.a\"));\n+        s2recs = actualRecords.recordsForTopic(topicName(\"s2.a\"));\n+        assertThat(s1recs.size()).isEqualTo(2);\n+        assertThat(s2recs.size()).isEqualTo(2);\n+\n+        stopConnector();\n+        TestHelper.dropDefaultReplicationSlot();\n+    }\n+\n+    @Test\n+    @FixFor(\"DBZ-2288\")\n+    @SkipWhenDecoderPluginNameIsNot(value = SkipWhenDecoderPluginNameIsNot.DecoderPluginName.PGOUTPUT, reason = \"Publication not supported\")\n+    public void exportedSnapshotShouldNotSkipRecordOfParallelTxPgoutput() throws Exception {\n+        TestHelper.dropDefaultReplicationSlot();\n+        TestHelper.createDefaultReplicationSlot();\n+        TestHelper.execute(\"CREATE PUBLICATION dbz_publication FOR ALL TABLES;\");\n+\n+        // Testing.Print.enable();\n+        TestHelper.execute(SETUP_TABLES_STMT);\n+        TestHelper.execute(INSERT_STMT);\n+\n+        Configuration config = TestHelper.defaultConfig()\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.EXPORTED.getValue())\n+                .with(PostgresConnectorConfig.DROP_SLOT_ON_STOP, Boolean.FALSE)\n+                .with(PostgresConnectorConfig.MAX_QUEUE_SIZE, 2)\n+                .with(PostgresConnectorConfig.MAX_BATCH_SIZE, 1)\n+                .build();\n+        final PostgresConnection pgConnection = TestHelper.create();\n+        pgConnection.setAutoCommit(false);\n+        pgConnection.executeWithoutCommitting(INSERT_STMT);\n+        final AtomicBoolean inserted = new AtomicBoolean();\n+        start(PostgresConnector.class, config, loggingCompletion(), x -> false, x -> {\n+            if (!inserted.get()) {\n+                TestHelper.execute(INSERT_STMT);\n+                try {\n+                    pgConnection.commit();\n+                }\n+                catch (Exception e) {\n+                    e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2fc4a6558f7771ccb2074f2e78ac7003bfccefb"}, "originalPosition": 92}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4237, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}