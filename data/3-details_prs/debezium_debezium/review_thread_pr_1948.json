{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwMDQ4Njg1", "number": 1948, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNzo0Mjo0M1rOE4RnkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMzowMDozM1rOE4qAVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NDQ0MzY4OnYy", "diffSide": "RIGHT", "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/PostgresConnectorConfig.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNzo0Mjo0M1rOHyGW7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMzozNjo1MVrOHyuk8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI5NTAyMA==", "bodyText": "Unrelated cleanup in separate commit. Is it okay to show all possible values?", "url": "https://github.com/debezium/debezium/pull/1948#discussion_r522295020", "createdAt": "2020-11-12T17:42:43Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/PostgresConnectorConfig.java", "diffHunk": "@@ -561,7 +561,13 @@ public static SchemaRefreshMode parse(String value) {\n             .withWidth(Width.MEDIUM)\n             .withImportance(Importance.MEDIUM)\n             .withDescription(\"The name of the Postgres logical decoding plugin installed on the server. \" +\n-                    \"Supported values are '\" + LogicalDecoder.DECODERBUFS.getValue() + \"' and '\" + LogicalDecoder.WAL2JSON.getValue() + \"'. \" +\n+                    \"Supported values are '\" + LogicalDecoder.DECODERBUFS.getValue()\n+                    + \"', '\" + LogicalDecoder.WAL2JSON.getValue()\n+                    + \"', '\" + LogicalDecoder.PGOUTPUT.getValue()\n+                    + \"', '\" + LogicalDecoder.WAL2JSON_STREAMING.getValue()\n+                    + \"', '\" + LogicalDecoder.WAL2JSON_RDS.getValue()\n+                    + \"' and '\" + LogicalDecoder.WAL2JSON_RDS_STREAMING.getValue()\n+                    + \"'. \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17c4cb1cacafe48e8bda07336df234c03025700c"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkyNjU0OQ==", "bodyText": "This is fine. I wonder if you could create a utility method that would format the allow values for any enum.", "url": "https://github.com/debezium/debezium/pull/1948#discussion_r522926549", "createdAt": "2020-11-13T12:43:17Z", "author": {"login": "jpechane"}, "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/PostgresConnectorConfig.java", "diffHunk": "@@ -561,7 +561,13 @@ public static SchemaRefreshMode parse(String value) {\n             .withWidth(Width.MEDIUM)\n             .withImportance(Importance.MEDIUM)\n             .withDescription(\"The name of the Postgres logical decoding plugin installed on the server. \" +\n-                    \"Supported values are '\" + LogicalDecoder.DECODERBUFS.getValue() + \"' and '\" + LogicalDecoder.WAL2JSON.getValue() + \"'. \" +\n+                    \"Supported values are '\" + LogicalDecoder.DECODERBUFS.getValue()\n+                    + \"', '\" + LogicalDecoder.WAL2JSON.getValue()\n+                    + \"', '\" + LogicalDecoder.PGOUTPUT.getValue()\n+                    + \"', '\" + LogicalDecoder.WAL2JSON_STREAMING.getValue()\n+                    + \"', '\" + LogicalDecoder.WAL2JSON_RDS.getValue()\n+                    + \"' and '\" + LogicalDecoder.WAL2JSON_RDS_STREAMING.getValue()\n+                    + \"'. \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI5NTAyMA=="}, "originalCommit": {"oid": "17c4cb1cacafe48e8bda07336df234c03025700c"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk1Mzk2OA==", "bodyText": "I can, but after holidays.", "url": "https://github.com/debezium/debezium/pull/1948#discussion_r522953968", "createdAt": "2020-11-13T13:36:51Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/PostgresConnectorConfig.java", "diffHunk": "@@ -561,7 +561,13 @@ public static SchemaRefreshMode parse(String value) {\n             .withWidth(Width.MEDIUM)\n             .withImportance(Importance.MEDIUM)\n             .withDescription(\"The name of the Postgres logical decoding plugin installed on the server. \" +\n-                    \"Supported values are '\" + LogicalDecoder.DECODERBUFS.getValue() + \"' and '\" + LogicalDecoder.WAL2JSON.getValue() + \"'. \" +\n+                    \"Supported values are '\" + LogicalDecoder.DECODERBUFS.getValue()\n+                    + \"', '\" + LogicalDecoder.WAL2JSON.getValue()\n+                    + \"', '\" + LogicalDecoder.PGOUTPUT.getValue()\n+                    + \"', '\" + LogicalDecoder.WAL2JSON_STREAMING.getValue()\n+                    + \"', '\" + LogicalDecoder.WAL2JSON_RDS.getValue()\n+                    + \"' and '\" + LogicalDecoder.WAL2JSON_RDS_STREAMING.getValue()\n+                    + \"'. \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI5NTAyMA=="}, "originalCommit": {"oid": "17c4cb1cacafe48e8bda07336df234c03025700c"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3ODQzOTI2OnYy", "diffSide": "RIGHT", "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/connection/PostgresReplicationConnection.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMzowMDozM1rOHytbUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMzozMzoyOFrOHyudnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkzNTEyMQ==", "bodyText": "The database is really named PostgreSQL :-)", "url": "https://github.com/debezium/debezium/pull/1948#discussion_r522935121", "createdAt": "2020-11-13T13:00:33Z", "author": {"login": "jpechane"}, "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/connection/PostgresReplicationConnection.java", "diffHunk": "@@ -321,15 +321,15 @@ public void initConnection() throws SQLException, InterruptedException {\n \n     @Override\n     public Optional<SlotCreationResult> createReplicationSlot() throws SQLException {\n-        // note that some of these options are only supported in pg94+, additionally\n-        // the options are not yet exported by the jdbc api wrapper, therefore, we just do this ourselves\n-        // but eventually this should be moved back to the jdbc API\n+        // note that some of these options are only supported in Postgres 9.4+, additionally\n+        // the options are not yet exported by the jdbc api wrapper, therefore, we just do\n+        // this ourselves but eventually this should be moved back to the jdbc API\n         // see https://github.com/pgjdbc/pgjdbc/issues/1305\n \n         LOGGER.debug(\"Creating new replication slot '{}' for plugin '{}'\", slotName, plugin);\n         String tempPart = \"\";\n-        // Exported snapshots are supported in PostgreSQL 9.4+\n-        Boolean canExportSnapshot = pgConnection().haveMinimumServerVersion(ServerVersion.v9_4);\n+        // Exported snapshots are supported in Postgres 9.4+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d5f95ae60914b410e676ce03ff7560e1a378e2d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk1MjA5Mg==", "bodyText": "I know. A PostgreSQL committer was my professor at university. Still, we tend to use Postgres in most places.", "url": "https://github.com/debezium/debezium/pull/1948#discussion_r522952092", "createdAt": "2020-11-13T13:33:28Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/connection/PostgresReplicationConnection.java", "diffHunk": "@@ -321,15 +321,15 @@ public void initConnection() throws SQLException, InterruptedException {\n \n     @Override\n     public Optional<SlotCreationResult> createReplicationSlot() throws SQLException {\n-        // note that some of these options are only supported in pg94+, additionally\n-        // the options are not yet exported by the jdbc api wrapper, therefore, we just do this ourselves\n-        // but eventually this should be moved back to the jdbc API\n+        // note that some of these options are only supported in Postgres 9.4+, additionally\n+        // the options are not yet exported by the jdbc api wrapper, therefore, we just do\n+        // this ourselves but eventually this should be moved back to the jdbc API\n         // see https://github.com/pgjdbc/pgjdbc/issues/1305\n \n         LOGGER.debug(\"Creating new replication slot '{}' for plugin '{}'\", slotName, plugin);\n         String tempPart = \"\";\n-        // Exported snapshots are supported in PostgreSQL 9.4+\n-        Boolean canExportSnapshot = pgConnection().haveMinimumServerVersion(ServerVersion.v9_4);\n+        // Exported snapshots are supported in Postgres 9.4+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkzNTEyMQ=="}, "originalCommit": {"oid": "9d5f95ae60914b410e676ce03ff7560e1a378e2d"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4166, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}