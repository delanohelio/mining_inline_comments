{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2MTc4NTg1", "number": 1750, "reviewThreads": {"totalCount": 51, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjoyODo1M1rOEXSgVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjo0ODo1OVrOEaELUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODU1ODk0OnYy", "diffSide": "RIGHT", "path": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/SourceInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjoyODo1M1rOG-_zJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwOTowMDoxM1rOG_YVpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxMDE4MA==", "bodyText": "I added braces here for the ORs after the && to fix the logic and avoid NPEs", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r468710180", "createdAt": "2020-08-11T16:28:53Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/SourceInfo.java", "diffHunk": "@@ -501,19 +505,42 @@ public void setOffset(Map<String, ?> sourceOffset) {\n             this.restartEventsToSkip = longOffsetValue(sourceOffset, EVENTS_TO_SKIP_OFFSET_KEY);\n             nextSnapshot = booleanOffsetValue(sourceOffset, SNAPSHOT_KEY);\n             lastSnapshot = nextSnapshot;\n-            this.databaseWhitelist = (String) sourceOffset.get(DATABASE_WHITELIST_KEY);\n-            this.databaseBlacklist = (String) sourceOffset.get(DATABASE_BLACKLIST_KEY);\n-            this.tableWhitelist = (String) sourceOffset.get(TABLE_WHITELIST_KEY);\n-            this.tableBlacklist = (String) sourceOffset.get(TABLE_BLACKLIST_KEY);\n+            if (sourceOffset.containsKey(DATABASE_INCLUDE_LIST_KEY)) {\n+                this.databaseIncludeList = (String) sourceOffset.get(DATABASE_INCLUDE_LIST_KEY);\n+            }\n+            else {\n+                this.databaseIncludeList = (String) sourceOffset.get(DATABASE_WHITELIST_KEY);\n+            }\n+            if (sourceOffset.containsKey(DATABASE_EXCLUDE_LIST_KEY)) {\n+                this.databaseExcludeList = (String) sourceOffset.get(DATABASE_EXCLUDE_LIST_KEY);\n+            }\n+            else {\n+                this.databaseExcludeList = (String) sourceOffset.get(DATABASE_BLACKLIST_KEY);\n+            }\n+            if (sourceOffset.containsKey(TABLE_INCLUDE_LIST_KEY)) {\n+                this.tableIncludeList = (String) sourceOffset.get(TABLE_INCLUDE_LIST_KEY);\n+            }\n+            else {\n+                this.tableIncludeList = (String) sourceOffset.get(TABLE_WHITELIST_KEY);\n+            }\n+            if (sourceOffset.containsKey(TABLE_EXCLUDE_LIST_KEY)) {\n+                this.tableExcludeList = (String) sourceOffset.get(TABLE_EXCLUDE_LIST_KEY);\n+            }\n+            else {\n+                this.tableExcludeList = (String) sourceOffset.get(TABLE_BLACKLIST_KEY);\n+            }\n         }\n     }\n \n     public static boolean offsetsHaveFilterInfo(Map<String, ?> sourceOffset) {\n-        return sourceOffset != null &&\n-                sourceOffset.containsKey(DATABASE_BLACKLIST_KEY) ||\n+        return sourceOffset != null && (sourceOffset.containsKey(DATABASE_BLACKLIST_KEY) ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTExMjIzMQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469112231", "createdAt": "2020-08-12T09:00:13Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/SourceInfo.java", "diffHunk": "@@ -501,19 +505,42 @@ public void setOffset(Map<String, ?> sourceOffset) {\n             this.restartEventsToSkip = longOffsetValue(sourceOffset, EVENTS_TO_SKIP_OFFSET_KEY);\n             nextSnapshot = booleanOffsetValue(sourceOffset, SNAPSHOT_KEY);\n             lastSnapshot = nextSnapshot;\n-            this.databaseWhitelist = (String) sourceOffset.get(DATABASE_WHITELIST_KEY);\n-            this.databaseBlacklist = (String) sourceOffset.get(DATABASE_BLACKLIST_KEY);\n-            this.tableWhitelist = (String) sourceOffset.get(TABLE_WHITELIST_KEY);\n-            this.tableBlacklist = (String) sourceOffset.get(TABLE_BLACKLIST_KEY);\n+            if (sourceOffset.containsKey(DATABASE_INCLUDE_LIST_KEY)) {\n+                this.databaseIncludeList = (String) sourceOffset.get(DATABASE_INCLUDE_LIST_KEY);\n+            }\n+            else {\n+                this.databaseIncludeList = (String) sourceOffset.get(DATABASE_WHITELIST_KEY);\n+            }\n+            if (sourceOffset.containsKey(DATABASE_EXCLUDE_LIST_KEY)) {\n+                this.databaseExcludeList = (String) sourceOffset.get(DATABASE_EXCLUDE_LIST_KEY);\n+            }\n+            else {\n+                this.databaseExcludeList = (String) sourceOffset.get(DATABASE_BLACKLIST_KEY);\n+            }\n+            if (sourceOffset.containsKey(TABLE_INCLUDE_LIST_KEY)) {\n+                this.tableIncludeList = (String) sourceOffset.get(TABLE_INCLUDE_LIST_KEY);\n+            }\n+            else {\n+                this.tableIncludeList = (String) sourceOffset.get(TABLE_WHITELIST_KEY);\n+            }\n+            if (sourceOffset.containsKey(TABLE_EXCLUDE_LIST_KEY)) {\n+                this.tableExcludeList = (String) sourceOffset.get(TABLE_EXCLUDE_LIST_KEY);\n+            }\n+            else {\n+                this.tableExcludeList = (String) sourceOffset.get(TABLE_BLACKLIST_KEY);\n+            }\n         }\n     }\n \n     public static boolean offsetsHaveFilterInfo(Map<String, ?> sourceOffset) {\n-        return sourceOffset != null &&\n-                sourceOffset.containsKey(DATABASE_BLACKLIST_KEY) ||\n+        return sourceOffset != null && (sourceOffset.containsKey(DATABASE_BLACKLIST_KEY) ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxMDE4MA=="}, "originalCommit": null, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODU2NTMwOnYy", "diffSide": "RIGHT", "path": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/Configurator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjozMDoxNlrOG-_23g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMDo0MTo0MlrOG_bwxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxMTEzNA==", "bodyText": "instead of duplicating tests and extending runtimes I decided to randomly choose from the different options. not super nice but will serve the needs imo.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r468711134", "createdAt": "2020-08-11T16:30:16Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/Configurator.java", "diffHunk": "@@ -35,23 +35,38 @@\n     }\n \n     /* package local */ Configurator includeDatabases(String regexList) {\n-        return with(MySqlConnectorConfig.DATABASE_WHITELIST, regexList);\n+        if (Math.random() >= 0.5) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTExMjg3MA==", "bodyText": "Yes, see my other comment elsewhere. We can do this, but it should be logged which one has been chosen.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469112870", "createdAt": "2020-08-12T09:01:18Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/Configurator.java", "diffHunk": "@@ -35,23 +35,38 @@\n     }\n \n     /* package local */ Configurator includeDatabases(String regexList) {\n-        return with(MySqlConnectorConfig.DATABASE_WHITELIST, regexList);\n+        if (Math.random() >= 0.5) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxMTEzNA=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2ODMyNw==", "bodyText": "Done", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469168327", "createdAt": "2020-08-12T10:41:42Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/Configurator.java", "diffHunk": "@@ -35,23 +35,38 @@\n     }\n \n     /* package local */ Configurator includeDatabases(String regexList) {\n-        return with(MySqlConnectorConfig.DATABASE_WHITELIST, regexList);\n+        if (Math.random() >= 0.5) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxMTEzNA=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODU3MTA3OnYy", "diffSide": "RIGHT", "path": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/MySqlConnectorIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjozMTozN1rOG-_6Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjozMTozN1rOG-_6Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxMjAxOA==", "bodyText": "instead of duplicating the big test case I decided to parametrize the original test and call it with the 2 different parameters", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r468712018", "createdAt": "2020-08-11T16:31:37Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/MySqlConnectorIT.java", "diffHunk": "@@ -309,6 +326,15 @@ public void shouldValidateLockingModeNoneWithValidSnapshotModeConfiguration() {\n \n     @Test\n     public void shouldConsumeAllEventsFromDatabaseUsingSnapshot() throws SQLException, InterruptedException {\n+        shouldConsumeAllEventsFromDatabaseUsingSnapshotByField(MySqlConnectorConfig.DATABASE_INCLUDE_LIST, 18765);\n+    }\n+\n+    @Test\n+    public void shouldConsumeAllEventsFromDatabaseUsingSnapshotOld() throws SQLException, InterruptedException {\n+        shouldConsumeAllEventsFromDatabaseUsingSnapshotByField(MySqlConnectorConfig.DATABASE_WHITELIST, 18775);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODU3ODI1OnYy", "diffSide": "RIGHT", "path": "debezium-connector-mysql/src/test/resources/ddl/connector_test.sql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjozMzozMFrOG-_-5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwOTowNDoyNFrOG_Yerg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxMzE5MQ==", "bodyText": "sometimes, not always, tests were failing for me with \"Unknown database emptydb\". that fixed it for me.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r468713191", "createdAt": "2020-08-11T16:33:30Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-mysql/src/test/resources/ddl/connector_test.sql", "diffHunk": "@@ -70,4 +70,6 @@ VALUES (default, '2016-01-16', 1001, 1, 102),\n        (default, '2016-01-17', 1002, 2, 105),\n        (default, '2016-02-18', 1004, 3, 109),\n        (default, '2016-02-19', 1002, 2, 106),\n-       (default, '16-02-21', 1003, 1, 107);\n\\ No newline at end of file\n+       (default, '16-02-21', 1003, 1, 107);\n+\n+CREATE DATABASE IF NOT EXISTS emptydb;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTExNDU0Mg==", "bodyText": "Ok \ud83d\udc4d", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469114542", "createdAt": "2020-08-12T09:04:24Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-mysql/src/test/resources/ddl/connector_test.sql", "diffHunk": "@@ -70,4 +70,6 @@ VALUES (default, '2016-01-16', 1001, 1, 102),\n        (default, '2016-01-17', 1002, 2, 105),\n        (default, '2016-02-18', 1004, 3, 109),\n        (default, '2016-02-19', 1002, 2, 106),\n-       (default, '16-02-21', 1003, 1, 107);\n\\ No newline at end of file\n+       (default, '16-02-21', 1003, 1, 107);\n+\n+CREATE DATABASE IF NOT EXISTS emptydb;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxMzE5MQ=="}, "originalCommit": null, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODU4MjQ2OnYy", "diffSide": "RIGHT", "path": "debezium-connector-postgres/RDS.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjozNDo0MlrOG_ABgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwOTowNDo0N1rOG_YfXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxMzg1OQ==", "bodyText": "AWS calls it RDS Master Password so I handled it like a name. we need to monitor if AWS updates the name to avoid divisive language too and then we can update to the new name", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r468713859", "createdAt": "2020-08-11T16:34:42Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-postgres/RDS.md", "diffHunk": "@@ -66,7 +66,7 @@ This is where all the _magic_ happens where we put tie together all the pieces o\n Remember this version should match the version of database parameters you cloned in the prior steps.\n 3. Select the **Template** of interest, I typically picked **Free tier** because it's free ;)\n 4. Provide your database with a **DB Instance Identifier**.\n-5. Under **Credentials Settings**, manually assign a **Master Password** and confirm it.\n+5. Under **Credentials Settings**, manually assign a **RDS Master Password** and confirm it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTExNDcxOA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469114718", "createdAt": "2020-08-12T09:04:47Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-postgres/RDS.md", "diffHunk": "@@ -66,7 +66,7 @@ This is where all the _magic_ happens where we put tie together all the pieces o\n Remember this version should match the version of database parameters you cloned in the prior steps.\n 3. Select the **Template** of interest, I typically picked **Free tier** because it's free ;)\n 4. Provide your database with a **DB Instance Identifier**.\n-5. Under **Credentials Settings**, manually assign a **Master Password** and confirm it.\n+5. Under **Credentials Settings**, manually assign a **RDS Master Password** and confirm it.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxMzg1OQ=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODU4NjU3OnYy", "diffSide": "RIGHT", "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/Filters.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjozNTo0NlrOG_AEDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMTozMzozMFrOG_dO_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNDUxMA==", "bodyText": "this logic is imo a bit weird and maybe should be fixed. I didn't change the logic now to avoid too many unrelated changes.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r468714510", "createdAt": "2020-08-11T16:35:46Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/Filters.java", "diffHunk": "@@ -39,37 +39,37 @@\n     public Filters(PostgresConnectorConfig config) {\n \n         // we always want to exclude PG system schemas as they are never part of logical decoding events\n-        String schemaBlacklist = config.schemaBlacklist();\n-        if (schemaBlacklist != null) {\n-            schemaBlacklist = schemaBlacklist + \",\" + SYSTEM_SCHEMA_BLACKLIST;\n+        String schemaExcludeList = config.schemaExcludeList();\n+        if (schemaExcludeList != null) {\n+            schemaExcludeList = schemaExcludeList + \",\" + SYSTEM_SCHEMA_EXCLUDE_LIST;\n         }\n         else {\n-            schemaBlacklist = SYSTEM_SCHEMA_BLACKLIST;\n+            schemaExcludeList = SYSTEM_SCHEMA_EXCLUDE_LIST;\n         }\n \n-        String tableBlacklist = config.tableBlacklist();\n-        if (tableBlacklist != null) {\n-            tableBlacklist = tableBlacklist + \",\" + TEMP_TABLE_BLACKLIST;\n+        String tableExcludeList = config.tableExcludeList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTExNTcwMA==", "bodyText": "Can you capture this in a Jira issue? There already might be one actually for unifying the include/exclude filter handling. If you find it, can you please add a comment there. There only should be a single Filters class (at least for all the relational connectors) to begin with.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469115700", "createdAt": "2020-08-12T09:06:26Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/Filters.java", "diffHunk": "@@ -39,37 +39,37 @@\n     public Filters(PostgresConnectorConfig config) {\n \n         // we always want to exclude PG system schemas as they are never part of logical decoding events\n-        String schemaBlacklist = config.schemaBlacklist();\n-        if (schemaBlacklist != null) {\n-            schemaBlacklist = schemaBlacklist + \",\" + SYSTEM_SCHEMA_BLACKLIST;\n+        String schemaExcludeList = config.schemaExcludeList();\n+        if (schemaExcludeList != null) {\n+            schemaExcludeList = schemaExcludeList + \",\" + SYSTEM_SCHEMA_EXCLUDE_LIST;\n         }\n         else {\n-            schemaBlacklist = SYSTEM_SCHEMA_BLACKLIST;\n+            schemaExcludeList = SYSTEM_SCHEMA_EXCLUDE_LIST;\n         }\n \n-        String tableBlacklist = config.tableBlacklist();\n-        if (tableBlacklist != null) {\n-            tableBlacklist = tableBlacklist + \",\" + TEMP_TABLE_BLACKLIST;\n+        String tableExcludeList = config.tableExcludeList();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNDUxMA=="}, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2Mjk5OQ==", "bodyText": "https://issues.redhat.com/browse/DBZ-2426", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469162999", "createdAt": "2020-08-12T10:30:36Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/Filters.java", "diffHunk": "@@ -39,37 +39,37 @@\n     public Filters(PostgresConnectorConfig config) {\n \n         // we always want to exclude PG system schemas as they are never part of logical decoding events\n-        String schemaBlacklist = config.schemaBlacklist();\n-        if (schemaBlacklist != null) {\n-            schemaBlacklist = schemaBlacklist + \",\" + SYSTEM_SCHEMA_BLACKLIST;\n+        String schemaExcludeList = config.schemaExcludeList();\n+        if (schemaExcludeList != null) {\n+            schemaExcludeList = schemaExcludeList + \",\" + SYSTEM_SCHEMA_EXCLUDE_LIST;\n         }\n         else {\n-            schemaBlacklist = SYSTEM_SCHEMA_BLACKLIST;\n+            schemaExcludeList = SYSTEM_SCHEMA_EXCLUDE_LIST;\n         }\n \n-        String tableBlacklist = config.tableBlacklist();\n-        if (tableBlacklist != null) {\n-            tableBlacklist = tableBlacklist + \",\" + TEMP_TABLE_BLACKLIST;\n+        String tableExcludeList = config.tableExcludeList();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNDUxMA=="}, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2Mzk0Mg==", "bodyText": "the global class might be io.debezium.relational.RelationalTableFilters ?", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469163942", "createdAt": "2020-08-12T10:32:34Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/Filters.java", "diffHunk": "@@ -39,37 +39,37 @@\n     public Filters(PostgresConnectorConfig config) {\n \n         // we always want to exclude PG system schemas as they are never part of logical decoding events\n-        String schemaBlacklist = config.schemaBlacklist();\n-        if (schemaBlacklist != null) {\n-            schemaBlacklist = schemaBlacklist + \",\" + SYSTEM_SCHEMA_BLACKLIST;\n+        String schemaExcludeList = config.schemaExcludeList();\n+        if (schemaExcludeList != null) {\n+            schemaExcludeList = schemaExcludeList + \",\" + SYSTEM_SCHEMA_EXCLUDE_LIST;\n         }\n         else {\n-            schemaBlacklist = SYSTEM_SCHEMA_BLACKLIST;\n+            schemaExcludeList = SYSTEM_SCHEMA_EXCLUDE_LIST;\n         }\n \n-        String tableBlacklist = config.tableBlacklist();\n-        if (tableBlacklist != null) {\n-            tableBlacklist = tableBlacklist + \",\" + TEMP_TABLE_BLACKLIST;\n+        String tableExcludeList = config.tableExcludeList();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNDUxMA=="}, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE5MjQ0NA==", "bodyText": "Yes, exactly. This one should eventually be the only entry point for logic interested in filtering logic. The biggest obstacle there is the pending refactoring by @jpechane to move MySQL to the common framework. Once that's done, this can be tackled.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469192444", "createdAt": "2020-08-12T11:33:30Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/Filters.java", "diffHunk": "@@ -39,37 +39,37 @@\n     public Filters(PostgresConnectorConfig config) {\n \n         // we always want to exclude PG system schemas as they are never part of logical decoding events\n-        String schemaBlacklist = config.schemaBlacklist();\n-        if (schemaBlacklist != null) {\n-            schemaBlacklist = schemaBlacklist + \",\" + SYSTEM_SCHEMA_BLACKLIST;\n+        String schemaExcludeList = config.schemaExcludeList();\n+        if (schemaExcludeList != null) {\n+            schemaExcludeList = schemaExcludeList + \",\" + SYSTEM_SCHEMA_EXCLUDE_LIST;\n         }\n         else {\n-            schemaBlacklist = SYSTEM_SCHEMA_BLACKLIST;\n+            schemaExcludeList = SYSTEM_SCHEMA_EXCLUDE_LIST;\n         }\n \n-        String tableBlacklist = config.tableBlacklist();\n-        if (tableBlacklist != null) {\n-            tableBlacklist = tableBlacklist + \",\" + TEMP_TABLE_BLACKLIST;\n+        String tableExcludeList = config.tableExcludeList();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNDUxMA=="}, "originalCommit": null, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODYwMTk1OnYy", "diffSide": "RIGHT", "path": "debezium-core/src/main/java/io/debezium/config/CommonConnectorConfig.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjozOTo1NFrOG_ANyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMTozMzozN1rOG_dPKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNzAwMg==", "bodyText": "I added a TODO here and a deprecation annotation. We recently discussed that there should be no direct access to Confdiguration but all encapsulated with methods (PostgresConnectorConfig, MongoDBConnectorConfig, MysqlConnectorConfig, ...). I think it was just convenient in the past to just pass the Configuration instance instead of encapsulating it?\nWDYT?", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r468717002", "createdAt": "2020-08-11T16:39:54Z", "author": {"login": "rk3rn3r"}, "path": "debezium-core/src/main/java/io/debezium/config/CommonConnectorConfig.java", "diffHunk": "@@ -428,7 +428,9 @@ protected CommonConnectorConfig(Configuration config, String logicalName, int de\n     /**\n      * Provides access to the \"raw\" config instance. In most cases, access via typed getters for individual properties\n      * on the connector config class should be preferred.\n+     * TODO this should be protected in the future to force proper facade methods based access / encapsulation\n      */\n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEyMTA5Mg==", "bodyText": "Yes, exactly, eventually there should be no need for this method. Right now the code is in a somewhat transitioning state and no new code should make access of the raw config. When working on something it's also a good idea to update related usages; so far we haven't done a general refactoring, though.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469121092", "createdAt": "2020-08-12T09:15:32Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/config/CommonConnectorConfig.java", "diffHunk": "@@ -428,7 +428,9 @@ protected CommonConnectorConfig(Configuration config, String logicalName, int de\n     /**\n      * Provides access to the \"raw\" config instance. In most cases, access via typed getters for individual properties\n      * on the connector config class should be preferred.\n+     * TODO this should be protected in the future to force proper facade methods based access / encapsulation\n      */\n+    @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNzAwMg=="}, "originalCommit": null, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NDMzNg==", "bodyText": "great, so we can keep the annotation?", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469164336", "createdAt": "2020-08-12T10:33:19Z", "author": {"login": "rk3rn3r"}, "path": "debezium-core/src/main/java/io/debezium/config/CommonConnectorConfig.java", "diffHunk": "@@ -428,7 +428,9 @@ protected CommonConnectorConfig(Configuration config, String logicalName, int de\n     /**\n      * Provides access to the \"raw\" config instance. In most cases, access via typed getters for individual properties\n      * on the connector config class should be preferred.\n+     * TODO this should be protected in the future to force proper facade methods based access / encapsulation\n      */\n+    @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNzAwMg=="}, "originalCommit": null, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE5MjQ5MA==", "bodyText": "Yes.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469192490", "createdAt": "2020-08-12T11:33:37Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/config/CommonConnectorConfig.java", "diffHunk": "@@ -428,7 +428,9 @@ protected CommonConnectorConfig(Configuration config, String logicalName, int de\n     /**\n      * Provides access to the \"raw\" config instance. In most cases, access via typed getters for individual properties\n      * on the connector config class should be preferred.\n+     * TODO this should be protected in the future to force proper facade methods based access / encapsulation\n      */\n+    @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNzAwMg=="}, "originalCommit": null, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODYwNzA4OnYy", "diffSide": "RIGHT", "path": "debezium-core/src/main/java/io/debezium/relational/RelationalDatabaseSchema.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjo0MTowOFrOG_AQ9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNDowMDoyOVrOHAM5Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNzgxMw==", "bodyText": "Was moved here to avoid duplicate/copied strings in different connectors and their tests.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r468717813", "createdAt": "2020-08-11T16:41:08Z", "author": {"login": "rk3rn3r"}, "path": "debezium-core/src/main/java/io/debezium/relational/RelationalDatabaseSchema.java", "diffHunk": "@@ -29,6 +29,7 @@\n  */\n public abstract class RelationalDatabaseSchema implements DatabaseSchema<TableId> {\n     private final static Logger LOG = LoggerFactory.getLogger(RelationalDatabaseSchema.class);\n+    public static final String NO_MONITORED_TABLES_WARNING = \"After applying include/exclude list filters there are no tables to monitor, please check your configuration\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcyMjI4NQ==", "bodyText": "As commented elsewhere, needs to go to the super-class probably.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469722285", "createdAt": "2020-08-13T06:22:24Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/relational/RelationalDatabaseSchema.java", "diffHunk": "@@ -29,6 +29,7 @@\n  */\n public abstract class RelationalDatabaseSchema implements DatabaseSchema<TableId> {\n     private final static Logger LOG = LoggerFactory.getLogger(RelationalDatabaseSchema.class);\n+    public static final String NO_MONITORED_TABLES_WARNING = \"After applying include/exclude list filters there are no tables to monitor, please check your configuration\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNzgxMw=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk3MzM1MA==", "bodyText": "will do", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469973350", "createdAt": "2020-08-13T14:00:29Z", "author": {"login": "rk3rn3r"}, "path": "debezium-core/src/main/java/io/debezium/relational/RelationalDatabaseSchema.java", "diffHunk": "@@ -29,6 +29,7 @@\n  */\n public abstract class RelationalDatabaseSchema implements DatabaseSchema<TableId> {\n     private final static Logger LOG = LoggerFactory.getLogger(RelationalDatabaseSchema.class);\n+    public static final String NO_MONITORED_TABLES_WARNING = \"After applying include/exclude list filters there are no tables to monitor, please check your configuration\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNzgxMw=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODYxMjc4OnYy", "diffSide": "RIGHT", "path": "documentation/modules/ROOT/pages/connectors/mongodb.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjo0MjozOVrOG_AUmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwOToyMDoxNVrOG_ZDKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxODc0NA==", "bodyText": "I always kept the old anchor links so that if there are links in external blog posts leading to the old anchor they are still working but pointing to the new property.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r468718744", "createdAt": "2020-08-11T16:42:39Z", "author": {"login": "rk3rn3r"}, "path": "documentation/modules/ROOT/pages/connectors/mongodb.adoc", "diffHunk": "@@ -803,28 +803,31 @@ Only alphanumeric characters and underscores should be used.\n |`false`\n |When SSL is enabled this setting controls whether strict hostname checking is disabled during connection phase. If `true` the connection will not prevent man-in-the-middle attacks.\n \n-|[[mongodb-property-database-whitelist]]<<mongodb-property-database-whitelist, `database.whitelist`>>\n+|[[mongodb-property-database-whitelist]]<<mongodb-property-database-whitelist [[mongodb-property-database-include-list]]<<mongodb-property-database-include-list , `database.include.list`>>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEyMzg4MA==", "bodyText": "+1", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469123880", "createdAt": "2020-08-12T09:20:15Z", "author": {"login": "gunnarmorling"}, "path": "documentation/modules/ROOT/pages/connectors/mongodb.adoc", "diffHunk": "@@ -803,28 +803,31 @@ Only alphanumeric characters and underscores should be used.\n |`false`\n |When SSL is enabled this setting controls whether strict hostname checking is disabled during connection phase. If `true` the connection will not prevent man-in-the-middle attacks.\n \n-|[[mongodb-property-database-whitelist]]<<mongodb-property-database-whitelist, `database.whitelist`>>\n+|[[mongodb-property-database-whitelist]]<<mongodb-property-database-whitelist [[mongodb-property-database-include-list]]<<mongodb-property-database-include-list , `database.include.list`>>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxODc0NA=="}, "originalCommit": null, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTEwMDQ1OnYy", "diffSide": "RIGHT", "path": "CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODo0NToyMlrOG_Xyaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMDo0MjoxM1rOG_bxyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwMzIxMQ==", "bodyText": "Let's revert that, as changing descriptions of issues closed long time ago adds more to the confusion than anything else.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469103211", "createdAt": "2020-08-12T08:45:22Z", "author": {"login": "gunnarmorling"}, "path": "CHANGELOG.md", "diffHunk": "@@ -2469,7 +2469,7 @@ November 9, 2016 - [Detailed release notes](https://issues.jboss.org/secure/Rele\n \n This release includes the following feature:\n \n-* MySQL connector now supports failover to MySQL masters that are slaves of multiple other MySQL servers/clusters. [DBZ-143](https://issues.jboss.org/projects/DBZ/issues/DBZ-143)\n+* MySQL connector now supports failover to MySQL primaries that are replicas of multiple other MySQL servers/clusters. [DBZ-143](https://issues.jboss.org/projects/DBZ/issues/DBZ-143)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0NDIwMw==", "bodyText": "LOL, that's right. at that point I think I was not screening the context.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469144203", "createdAt": "2020-08-12T09:54:27Z", "author": {"login": "rk3rn3r"}, "path": "CHANGELOG.md", "diffHunk": "@@ -2469,7 +2469,7 @@ November 9, 2016 - [Detailed release notes](https://issues.jboss.org/secure/Rele\n \n This release includes the following feature:\n \n-* MySQL connector now supports failover to MySQL masters that are slaves of multiple other MySQL servers/clusters. [DBZ-143](https://issues.jboss.org/projects/DBZ/issues/DBZ-143)\n+* MySQL connector now supports failover to MySQL primaries that are replicas of multiple other MySQL servers/clusters. [DBZ-143](https://issues.jboss.org/projects/DBZ/issues/DBZ-143)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwMzIxMQ=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2ODU4NA==", "bodyText": "Done", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469168584", "createdAt": "2020-08-12T10:42:13Z", "author": {"login": "rk3rn3r"}, "path": "CHANGELOG.md", "diffHunk": "@@ -2469,7 +2469,7 @@ November 9, 2016 - [Detailed release notes](https://issues.jboss.org/secure/Rele\n \n This release includes the following feature:\n \n-* MySQL connector now supports failover to MySQL masters that are slaves of multiple other MySQL servers/clusters. [DBZ-143](https://issues.jboss.org/projects/DBZ/issues/DBZ-143)\n+* MySQL connector now supports failover to MySQL primaries that are replicas of multiple other MySQL servers/clusters. [DBZ-143](https://issues.jboss.org/projects/DBZ/issues/DBZ-143)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwMzIxMQ=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTExMDk3OnYy", "diffSide": "RIGHT", "path": "debezium-connector-mongodb/src/main/java/io/debezium/connector/mongodb/MongoDbConnectorConfig.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODo0ODowNVrOG_X4yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMTozOTozOFrOG_daag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwNDg0Mg==", "bodyText": "Var names should be includeList and excludeList?", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469104842", "createdAt": "2020-08-12T08:48:05Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-mongodb/src/main/java/io/debezium/connector/mongodb/MongoDbConnectorConfig.java", "diffHunk": "@@ -413,19 +473,21 @@ private static int validateHosts(Configuration config, Field field, ValidationOu\n         return count;\n     }\n \n-    private static int validateCollectionBlacklist(Configuration config, Field field, ValidationOutput problems) {\n-        return validateBlacklistField(config, problems, COLLECTION_WHITELIST, COLLECTION_BLACKLIST);\n-    }\n-\n-    private static int validateDatabaseBlacklist(Configuration config, Field field, ValidationOutput problems) {\n-        return validateBlacklistField(config, problems, DATABASE_WHITELIST, DATABASE_BLACKLIST);\n+    private static int validateCollectionExcludeList(Configuration config, Field field, ValidationOutput problems) {\n+        String whitelist = config.getFallbackStringProperty(COLLECTION_INCLUDE_LIST, COLLECTION_WHITELIST);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0NTIyNQ==", "bodyText": "we were talking about not changing not-userfacing parts. I only did for vars in a more complex context, but I'll change it now.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469145225", "createdAt": "2020-08-12T09:56:07Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-mongodb/src/main/java/io/debezium/connector/mongodb/MongoDbConnectorConfig.java", "diffHunk": "@@ -413,19 +473,21 @@ private static int validateHosts(Configuration config, Field field, ValidationOu\n         return count;\n     }\n \n-    private static int validateCollectionBlacklist(Configuration config, Field field, ValidationOutput problems) {\n-        return validateBlacklistField(config, problems, COLLECTION_WHITELIST, COLLECTION_BLACKLIST);\n-    }\n-\n-    private static int validateDatabaseBlacklist(Configuration config, Field field, ValidationOutput problems) {\n-        return validateBlacklistField(config, problems, DATABASE_WHITELIST, DATABASE_BLACKLIST);\n+    private static int validateCollectionExcludeList(Configuration config, Field field, ValidationOutput problems) {\n+        String whitelist = config.getFallbackStringProperty(COLLECTION_INCLUDE_LIST, COLLECTION_WHITELIST);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwNDg0Mg=="}, "originalCommit": null, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2ODY2NQ==", "bodyText": "Done", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469168665", "createdAt": "2020-08-12T10:42:24Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-mongodb/src/main/java/io/debezium/connector/mongodb/MongoDbConnectorConfig.java", "diffHunk": "@@ -413,19 +473,21 @@ private static int validateHosts(Configuration config, Field field, ValidationOu\n         return count;\n     }\n \n-    private static int validateCollectionBlacklist(Configuration config, Field field, ValidationOutput problems) {\n-        return validateBlacklistField(config, problems, COLLECTION_WHITELIST, COLLECTION_BLACKLIST);\n-    }\n-\n-    private static int validateDatabaseBlacklist(Configuration config, Field field, ValidationOutput problems) {\n-        return validateBlacklistField(config, problems, DATABASE_WHITELIST, DATABASE_BLACKLIST);\n+    private static int validateCollectionExcludeList(Configuration config, Field field, ValidationOutput problems) {\n+        String whitelist = config.getFallbackStringProperty(COLLECTION_INCLUDE_LIST, COLLECTION_WHITELIST);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwNDg0Mg=="}, "originalCommit": null, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE5NTM3MA==", "bodyText": "Ok.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469195370", "createdAt": "2020-08-12T11:39:38Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-mongodb/src/main/java/io/debezium/connector/mongodb/MongoDbConnectorConfig.java", "diffHunk": "@@ -413,19 +473,21 @@ private static int validateHosts(Configuration config, Field field, ValidationOu\n         return count;\n     }\n \n-    private static int validateCollectionBlacklist(Configuration config, Field field, ValidationOutput problems) {\n-        return validateBlacklistField(config, problems, COLLECTION_WHITELIST, COLLECTION_BLACKLIST);\n-    }\n-\n-    private static int validateDatabaseBlacklist(Configuration config, Field field, ValidationOutput problems) {\n-        return validateBlacklistField(config, problems, DATABASE_WHITELIST, DATABASE_BLACKLIST);\n+    private static int validateCollectionExcludeList(Configuration config, Field field, ValidationOutput problems) {\n+        String whitelist = config.getFallbackStringProperty(COLLECTION_INCLUDE_LIST, COLLECTION_WHITELIST);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwNDg0Mg=="}, "originalCommit": null, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTExMTUyOnYy", "diffSide": "RIGHT", "path": "debezium-connector-mongodb/src/main/java/io/debezium/connector/mongodb/MongoDbConnectorConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODo0ODoxNlrOG_X5Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMDo0MjozMVrOG_byUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwNDkzNQ==", "bodyText": "Same as above.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469104935", "createdAt": "2020-08-12T08:48:16Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-mongodb/src/main/java/io/debezium/connector/mongodb/MongoDbConnectorConfig.java", "diffHunk": "@@ -413,19 +473,21 @@ private static int validateHosts(Configuration config, Field field, ValidationOu\n         return count;\n     }\n \n-    private static int validateCollectionBlacklist(Configuration config, Field field, ValidationOutput problems) {\n-        return validateBlacklistField(config, problems, COLLECTION_WHITELIST, COLLECTION_BLACKLIST);\n-    }\n-\n-    private static int validateDatabaseBlacklist(Configuration config, Field field, ValidationOutput problems) {\n-        return validateBlacklistField(config, problems, DATABASE_WHITELIST, DATABASE_BLACKLIST);\n+    private static int validateCollectionExcludeList(Configuration config, Field field, ValidationOutput problems) {\n+        String whitelist = config.getFallbackStringProperty(COLLECTION_INCLUDE_LIST, COLLECTION_WHITELIST);\n+        String blacklist = config.getFallbackStringProperty(COLLECTION_EXCLUDE_LIST, COLLECTION_BLACKLIST);\n+        if (whitelist != null && blacklist != null) {\n+            problems.accept(COLLECTION_EXCLUDE_LIST, blacklist, COLLECTION_INCLUDE_LIST_ALREADY_SPECIFIED_ERROR_MSG);\n+            return 1;\n+        }\n+        return 0;\n     }\n \n-    private static int validateBlacklistField(Configuration config, ValidationOutput problems, Field fieldWhitelist, Field fieldBlacklist) {\n-        String whitelist = config.getString(fieldWhitelist);\n-        String blacklist = config.getString(fieldBlacklist);\n+    private static int validateDatabaseExcludeList(Configuration config, Field field, ValidationOutput problems) {\n+        String whitelist = config.getFallbackStringProperty(DATABASE_INCLUDE_LIST, DATABASE_WHITELIST);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2ODcyMA==", "bodyText": "Done", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469168720", "createdAt": "2020-08-12T10:42:31Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-mongodb/src/main/java/io/debezium/connector/mongodb/MongoDbConnectorConfig.java", "diffHunk": "@@ -413,19 +473,21 @@ private static int validateHosts(Configuration config, Field field, ValidationOu\n         return count;\n     }\n \n-    private static int validateCollectionBlacklist(Configuration config, Field field, ValidationOutput problems) {\n-        return validateBlacklistField(config, problems, COLLECTION_WHITELIST, COLLECTION_BLACKLIST);\n-    }\n-\n-    private static int validateDatabaseBlacklist(Configuration config, Field field, ValidationOutput problems) {\n-        return validateBlacklistField(config, problems, DATABASE_WHITELIST, DATABASE_BLACKLIST);\n+    private static int validateCollectionExcludeList(Configuration config, Field field, ValidationOutput problems) {\n+        String whitelist = config.getFallbackStringProperty(COLLECTION_INCLUDE_LIST, COLLECTION_WHITELIST);\n+        String blacklist = config.getFallbackStringProperty(COLLECTION_EXCLUDE_LIST, COLLECTION_BLACKLIST);\n+        if (whitelist != null && blacklist != null) {\n+            problems.accept(COLLECTION_EXCLUDE_LIST, blacklist, COLLECTION_INCLUDE_LIST_ALREADY_SPECIFIED_ERROR_MSG);\n+            return 1;\n+        }\n+        return 0;\n     }\n \n-    private static int validateBlacklistField(Configuration config, ValidationOutput problems, Field fieldWhitelist, Field fieldBlacklist) {\n-        String whitelist = config.getString(fieldWhitelist);\n-        String blacklist = config.getString(fieldBlacklist);\n+    private static int validateDatabaseExcludeList(Configuration config, Field field, ValidationOutput problems) {\n+        String whitelist = config.getFallbackStringProperty(DATABASE_INCLUDE_LIST, DATABASE_WHITELIST);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwNDkzNQ=="}, "originalCommit": null, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTExNTY5OnYy", "diffSide": "RIGHT", "path": "debezium-connector-mongodb/src/main/java/io/debezium/connector/mongodb/MongoDbSchema.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODo0OToxN1rOG_X7lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMDo0NToxM1rOG_b3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwNTU1Nw==", "bodyText": "So changes like these add to the huge size of the single commit. Let's try and keep them in separate commits next time, so one can focus on the actual change vs. refactorings/clean-up when reviewing.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469105557", "createdAt": "2020-08-12T08:49:17Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-mongodb/src/main/java/io/debezium/connector/mongodb/MongoDbSchema.java", "diffHunk": "@@ -113,7 +114,7 @@ public boolean tableInformationComplete() {\n     @Override\n     public void assureNonEmptySchema() {\n         if (collections.isEmpty()) {\n-            LOGGER.warn(\"After applying blacklist/whitelist filters there are no tables to monitor, please check your configuration\");\n+            LOGGER.warn(RelationalDatabaseSchema.NO_MONITORED_TABLES_WARNING);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2OTk3Mg==", "bodyText": "good idea. will do housekeeping commits for such things in the future", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469169972", "createdAt": "2020-08-12T10:45:13Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-mongodb/src/main/java/io/debezium/connector/mongodb/MongoDbSchema.java", "diffHunk": "@@ -113,7 +114,7 @@ public boolean tableInformationComplete() {\n     @Override\n     public void assureNonEmptySchema() {\n         if (collections.isEmpty()) {\n-            LOGGER.warn(\"After applying blacklist/whitelist filters there are no tables to monitor, please check your configuration\");\n+            LOGGER.warn(RelationalDatabaseSchema.NO_MONITORED_TABLES_WARNING);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwNTU1Nw=="}, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTEyMTk0OnYy", "diffSide": "RIGHT", "path": "debezium-connector-mongodb/src/test/java/io/debezium/connector/mongodb/Configurator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODo1MDo1MVrOG_X_cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMDo0Mjo0OFrOG_by2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwNjU0NQ==", "bodyText": "Creative :) In general tests should be really 100% reproduceable, but I can get behind the deviation in this case.\nProbably good though to add a log message which one has been chosen, so to aid analyzing test failures.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469106545", "createdAt": "2020-08-12T08:50:51Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-mongodb/src/test/java/io/debezium/connector/mongodb/Configurator.java", "diffHunk": "@@ -45,23 +45,38 @@ public Configurator maxBatchSize(int maxBatchSize) {\n     }\n \n     public Configurator includeDatabases(String regexList) {\n-        return with(MongoDbConnectorConfig.DATABASE_WHITELIST, regexList);\n+        if (Math.random() >= 0.5) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0NTY5OQ==", "bodyText": "+1, will add log messages", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469145699", "createdAt": "2020-08-12T09:57:04Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-mongodb/src/test/java/io/debezium/connector/mongodb/Configurator.java", "diffHunk": "@@ -45,23 +45,38 @@ public Configurator maxBatchSize(int maxBatchSize) {\n     }\n \n     public Configurator includeDatabases(String regexList) {\n-        return with(MongoDbConnectorConfig.DATABASE_WHITELIST, regexList);\n+        if (Math.random() >= 0.5) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwNjU0NQ=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2ODg1OA==", "bodyText": "Done", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469168858", "createdAt": "2020-08-12T10:42:48Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-mongodb/src/test/java/io/debezium/connector/mongodb/Configurator.java", "diffHunk": "@@ -45,23 +45,38 @@ public Configurator maxBatchSize(int maxBatchSize) {\n     }\n \n     public Configurator includeDatabases(String regexList) {\n-        return with(MongoDbConnectorConfig.DATABASE_WHITELIST, regexList);\n+        if (Math.random() >= 0.5) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwNjU0NQ=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTEyNjk1OnYy", "diffSide": "RIGHT", "path": "debezium-connector-mongodb/src/test/java/io/debezium/connector/mongodb/FieldExcludeListIT.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODo1MjoxMFrOG_YCeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMTozNDo0OVrOG_dRJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwNzMyMg==", "bodyText": "So is this one actually new? If not, then it'd have been nice to do the file rename in a separate commit.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469107322", "createdAt": "2020-08-12T08:52:10Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-mongodb/src/test/java/io/debezium/connector/mongodb/FieldExcludeListIT.java", "diffHunk": "@@ -0,0 +1,1274 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE3MDgwMw==", "bodyText": "It's not new. It's a copy of FieldBlacklistIT.java with the global config using the new field.exlude.list property instead of field.blacklist in order to test the old and the new property.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469170803", "createdAt": "2020-08-12T10:47:03Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-mongodb/src/test/java/io/debezium/connector/mongodb/FieldExcludeListIT.java", "diffHunk": "@@ -0,0 +1,1274 @@\n+/*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwNzMyMg=="}, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE5Mjk5Ng==", "bodyText": "Ok; would also have been a great thing to leave for a separate commit. Makes it much easier to skim over it. Next time :)", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469192996", "createdAt": "2020-08-12T11:34:49Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-mongodb/src/test/java/io/debezium/connector/mongodb/FieldExcludeListIT.java", "diffHunk": "@@ -0,0 +1,1274 @@\n+/*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwNzMyMg=="}, "originalCommit": null, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTEzMjk5OnYy", "diffSide": "RIGHT", "path": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/Filters.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODo1Mzo0MVrOG_YGOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMTozNjowMFrOG_dTkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwODI4MA==", "bodyText": "Ah, I didn't think of that usage within the offsets. Go figure.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469108280", "createdAt": "2020-08-12T08:53:41Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/Filters.java", "diffHunk": "@@ -125,26 +127,41 @@ public Builder(Configuration config) {\n          * @return this\n          */\n         public Builder setFiltersFromOffsets(Map<String, ?> offsets) {\n-            setFiltersFromStrings((String) offsets.get(SourceInfo.DATABASE_WHITELIST_KEY), (String) offsets.get(SourceInfo.DATABASE_BLACKLIST_KEY),\n-                    (String) offsets.get(SourceInfo.TABLE_WHITELIST_KEY), (String) offsets.get(SourceInfo.TABLE_BLACKLIST_KEY));\n+            String dbIncludeList = (String) offsets.get(SourceInfo.DATABASE_INCLUDE_LIST_KEY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE4MjA1Nw==", "bodyText": "I implemented with a fallback here too so old configs are still working the new version, but we only write new keys. BTW, I couldn't find any implementation like that for the other connectors. I think we are using the Relational handling and they are serialized in a different/common way?", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469182057", "createdAt": "2020-08-12T11:10:47Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/Filters.java", "diffHunk": "@@ -125,26 +127,41 @@ public Builder(Configuration config) {\n          * @return this\n          */\n         public Builder setFiltersFromOffsets(Map<String, ?> offsets) {\n-            setFiltersFromStrings((String) offsets.get(SourceInfo.DATABASE_WHITELIST_KEY), (String) offsets.get(SourceInfo.DATABASE_BLACKLIST_KEY),\n-                    (String) offsets.get(SourceInfo.TABLE_WHITELIST_KEY), (String) offsets.get(SourceInfo.TABLE_BLACKLIST_KEY));\n+            String dbIncludeList = (String) offsets.get(SourceInfo.DATABASE_INCLUDE_LIST_KEY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwODI4MA=="}, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE5MzYxNg==", "bodyText": "Yes, this there only for MySQL. It relates to the incubating support for filter config changes which currently only exist for MySQL. Unfortunately, it has some conceptual flaws as we found out, so the current plan is to have a new implementation as part of the framework and MySQL will eventually be able to benefit from that, too.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469193616", "createdAt": "2020-08-12T11:36:00Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/Filters.java", "diffHunk": "@@ -125,26 +127,41 @@ public Builder(Configuration config) {\n          * @return this\n          */\n         public Builder setFiltersFromOffsets(Map<String, ?> offsets) {\n-            setFiltersFromStrings((String) offsets.get(SourceInfo.DATABASE_WHITELIST_KEY), (String) offsets.get(SourceInfo.DATABASE_BLACKLIST_KEY),\n-                    (String) offsets.get(SourceInfo.TABLE_WHITELIST_KEY), (String) offsets.get(SourceInfo.TABLE_BLACKLIST_KEY));\n+            String dbIncludeList = (String) offsets.get(SourceInfo.DATABASE_INCLUDE_LIST_KEY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwODI4MA=="}, "originalCommit": null, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTE0MDQxOnYy", "diffSide": "RIGHT", "path": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/MySqlConnectorConfig.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODo1NToyN1rOG_YKkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMTozNjoxMlrOG_dT-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwOTM5NA==", "bodyText": "Woul have been a tad nicer to leave the existing field as is, again reducing the size of the change.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469109394", "createdAt": "2020-08-12T08:55:27Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/MySqlConnectorConfig.java", "diffHunk": "@@ -616,50 +619,74 @@ public static GtidNewChannelPosition parse(String value, String defaultValue) {\n             .withImportance(Importance.LOW)\n             .withValidation(Field::isClassName)\n             .withDescription(\"JDBC Driver class name used to connect to the MySQL database server.\");\n+\n     /**\n      * A comma-separated list of regular expressions that match database names to be monitored.\n-     * May not be used with {@link #DATABASE_BLACKLIST}.\n+     * Must not be used with {@link #DATABASE_BLACKLIST}.\n      */\n-    public static final Field DATABASE_WHITELIST = Field.create(DATABASE_WHITELIST_NAME)\n+    public static final Field DATABASE_INCLUDE_LIST = Field.create(DATABASE_INCLUDE_LIST_NAME)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE4Mjg1OA==", "bodyText": "they are still there (mostly unchanged). I think just the diff comparison doesn't recognize what belongs together.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469182858", "createdAt": "2020-08-12T11:12:37Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/MySqlConnectorConfig.java", "diffHunk": "@@ -616,50 +619,74 @@ public static GtidNewChannelPosition parse(String value, String defaultValue) {\n             .withImportance(Importance.LOW)\n             .withValidation(Field::isClassName)\n             .withDescription(\"JDBC Driver class name used to connect to the MySQL database server.\");\n+\n     /**\n      * A comma-separated list of regular expressions that match database names to be monitored.\n-     * May not be used with {@link #DATABASE_BLACKLIST}.\n+     * Must not be used with {@link #DATABASE_BLACKLIST}.\n      */\n-    public static final Field DATABASE_WHITELIST = Field.create(DATABASE_WHITELIST_NAME)\n+    public static final Field DATABASE_INCLUDE_LIST = Field.create(DATABASE_INCLUDE_LIST_NAME)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwOTM5NA=="}, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE5MzcyMQ==", "bodyText": "Ok!", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469193721", "createdAt": "2020-08-12T11:36:12Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/MySqlConnectorConfig.java", "diffHunk": "@@ -616,50 +619,74 @@ public static GtidNewChannelPosition parse(String value, String defaultValue) {\n             .withImportance(Importance.LOW)\n             .withValidation(Field::isClassName)\n             .withDescription(\"JDBC Driver class name used to connect to the MySQL database server.\");\n+\n     /**\n      * A comma-separated list of regular expressions that match database names to be monitored.\n-     * May not be used with {@link #DATABASE_BLACKLIST}.\n+     * Must not be used with {@link #DATABASE_BLACKLIST}.\n      */\n-    public static final Field DATABASE_WHITELIST = Field.create(DATABASE_WHITELIST_NAME)\n+    public static final Field DATABASE_INCLUDE_LIST = Field.create(DATABASE_INCLUDE_LIST_NAME)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwOTM5NA=="}, "originalCommit": null, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTE0MjkzOnYy", "diffSide": "RIGHT", "path": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/MySqlConnectorConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODo1NjowOFrOG_YMOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMToyNjoxMVrOG_dBfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwOTgxNg==", "bodyText": "Can you add \"Please use 'database.include.list' instead.\" (here and elsewhere)?", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469109816", "createdAt": "2020-08-12T08:56:08Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/MySqlConnectorConfig.java", "diffHunk": "@@ -616,50 +619,74 @@ public static GtidNewChannelPosition parse(String value, String defaultValue) {\n             .withImportance(Importance.LOW)\n             .withValidation(Field::isClassName)\n             .withDescription(\"JDBC Driver class name used to connect to the MySQL database server.\");\n+\n     /**\n      * A comma-separated list of regular expressions that match database names to be monitored.\n-     * May not be used with {@link #DATABASE_BLACKLIST}.\n+     * Must not be used with {@link #DATABASE_BLACKLIST}.\n      */\n-    public static final Field DATABASE_WHITELIST = Field.create(DATABASE_WHITELIST_NAME)\n+    public static final Field DATABASE_INCLUDE_LIST = Field.create(DATABASE_INCLUDE_LIST_NAME)\n             .withDisplayName(\"Databases\")\n             .withType(Type.LIST)\n             .withWidth(Width.LONG)\n             .withImportance(Importance.HIGH)\n-            .withDependents(TABLE_WHITELIST_NAME)\n+            .withDependents(TABLE_INCLUDE_LIST_NAME, TABLE_WHITELIST_NAME)\n             .withDescription(\"The databases for which changes are to be captured\");\n \n+    /**\n+     * Old, backwards-compatible \"whitelist\" property.\n+     */\n+    public static final Field DATABASE_WHITELIST = Field.create(DATABASE_WHITELIST_NAME)\n+            .withDisplayName(\"Databases\")\n+            .withType(Type.LIST)\n+            .withWidth(Width.LONG)\n+            .withImportance(Importance.HIGH)\n+            .withDependents(TABLE_INCLUDE_LIST_NAME, TABLE_WHITELIST_NAME)\n+            .withDescription(\"The databases for which changes are to be captured (deprecated)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE4ODk5MQ==", "bodyText": "updated (hopefully) everywhere. Done.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469188991", "createdAt": "2020-08-12T11:26:11Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/MySqlConnectorConfig.java", "diffHunk": "@@ -616,50 +619,74 @@ public static GtidNewChannelPosition parse(String value, String defaultValue) {\n             .withImportance(Importance.LOW)\n             .withValidation(Field::isClassName)\n             .withDescription(\"JDBC Driver class name used to connect to the MySQL database server.\");\n+\n     /**\n      * A comma-separated list of regular expressions that match database names to be monitored.\n-     * May not be used with {@link #DATABASE_BLACKLIST}.\n+     * Must not be used with {@link #DATABASE_BLACKLIST}.\n      */\n-    public static final Field DATABASE_WHITELIST = Field.create(DATABASE_WHITELIST_NAME)\n+    public static final Field DATABASE_INCLUDE_LIST = Field.create(DATABASE_INCLUDE_LIST_NAME)\n             .withDisplayName(\"Databases\")\n             .withType(Type.LIST)\n             .withWidth(Width.LONG)\n             .withImportance(Importance.HIGH)\n-            .withDependents(TABLE_WHITELIST_NAME)\n+            .withDependents(TABLE_INCLUDE_LIST_NAME, TABLE_WHITELIST_NAME)\n             .withDescription(\"The databases for which changes are to be captured\");\n \n+    /**\n+     * Old, backwards-compatible \"whitelist\" property.\n+     */\n+    public static final Field DATABASE_WHITELIST = Field.create(DATABASE_WHITELIST_NAME)\n+            .withDisplayName(\"Databases\")\n+            .withType(Type.LIST)\n+            .withWidth(Width.LONG)\n+            .withImportance(Importance.HIGH)\n+            .withDependents(TABLE_INCLUDE_LIST_NAME, TABLE_WHITELIST_NAME)\n+            .withDescription(\"The databases for which changes are to be captured (deprecated)\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwOTgxNg=="}, "originalCommit": null, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTE0NTE1OnYy", "diffSide": "RIGHT", "path": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/MySqlConnectorConfig.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODo1Njo0NFrOG_YNng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNjowMjo1MlrOG_9Kdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTExMDE3NA==", "bodyText": "As you're writing this comment now, it should say \"exclude\" property.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469110174", "createdAt": "2020-08-12T08:56:44Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/MySqlConnectorConfig.java", "diffHunk": "@@ -616,50 +619,74 @@ public static GtidNewChannelPosition parse(String value, String defaultValue) {\n             .withImportance(Importance.LOW)\n             .withValidation(Field::isClassName)\n             .withDescription(\"JDBC Driver class name used to connect to the MySQL database server.\");\n+\n     /**\n      * A comma-separated list of regular expressions that match database names to be monitored.\n-     * May not be used with {@link #DATABASE_BLACKLIST}.\n+     * Must not be used with {@link #DATABASE_BLACKLIST}.\n      */\n-    public static final Field DATABASE_WHITELIST = Field.create(DATABASE_WHITELIST_NAME)\n+    public static final Field DATABASE_INCLUDE_LIST = Field.create(DATABASE_INCLUDE_LIST_NAME)\n             .withDisplayName(\"Databases\")\n             .withType(Type.LIST)\n             .withWidth(Width.LONG)\n             .withImportance(Importance.HIGH)\n-            .withDependents(TABLE_WHITELIST_NAME)\n+            .withDependents(TABLE_INCLUDE_LIST_NAME, TABLE_WHITELIST_NAME)\n             .withDescription(\"The databases for which changes are to be captured\");\n \n+    /**\n+     * Old, backwards-compatible \"whitelist\" property.\n+     */\n+    public static final Field DATABASE_WHITELIST = Field.create(DATABASE_WHITELIST_NAME)\n+            .withDisplayName(\"Databases\")\n+            .withType(Type.LIST)\n+            .withWidth(Width.LONG)\n+            .withImportance(Importance.HIGH)\n+            .withDependents(TABLE_INCLUDE_LIST_NAME, TABLE_WHITELIST_NAME)\n+            .withDescription(\"The databases for which changes are to be captured (deprecated)\");\n+\n     /**\n      * A comma-separated list of regular expressions that match database names to be excluded from monitoring.\n-     * May not be used with {@link #DATABASE_WHITELIST}.\n+     * Must not be used with {@link #DATABASE_INCLUDE_LIST}.\n      */\n-    public static final Field DATABASE_BLACKLIST = Field.create(DATABASE_BLACKLIST_NAME)\n+    public static final Field DATABASE_EXCLUDE_LIST = Field.create(DATABASE_EXCLUDE_LIST_NAME)\n             .withDisplayName(\"Exclude Databases\")\n             .withType(Type.STRING)\n             .withWidth(Width.LONG)\n             .withImportance(Importance.MEDIUM)\n-            .withValidation(MySqlConnectorConfig::validateDatabaseBlacklist)\n+            .withValidation(MySqlConnectorConfig::validateDatabaseExcludeList)\n+            .withInvisibleRecommender()\n+            .withDescription(\"A comma-separated list of regular expressions that match database names to be excluded from monitoring\");\n+\n+    /**\n+     * Old, backwards-compatible \"blacklist\" property.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE5MDM1Nw==", "bodyText": "this is the blacklist property field. it's just thought from the other side. can I leave it instead of replacing all these comments?", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469190357", "createdAt": "2020-08-12T11:29:05Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/MySqlConnectorConfig.java", "diffHunk": "@@ -616,50 +619,74 @@ public static GtidNewChannelPosition parse(String value, String defaultValue) {\n             .withImportance(Importance.LOW)\n             .withValidation(Field::isClassName)\n             .withDescription(\"JDBC Driver class name used to connect to the MySQL database server.\");\n+\n     /**\n      * A comma-separated list of regular expressions that match database names to be monitored.\n-     * May not be used with {@link #DATABASE_BLACKLIST}.\n+     * Must not be used with {@link #DATABASE_BLACKLIST}.\n      */\n-    public static final Field DATABASE_WHITELIST = Field.create(DATABASE_WHITELIST_NAME)\n+    public static final Field DATABASE_INCLUDE_LIST = Field.create(DATABASE_INCLUDE_LIST_NAME)\n             .withDisplayName(\"Databases\")\n             .withType(Type.LIST)\n             .withWidth(Width.LONG)\n             .withImportance(Importance.HIGH)\n-            .withDependents(TABLE_WHITELIST_NAME)\n+            .withDependents(TABLE_INCLUDE_LIST_NAME, TABLE_WHITELIST_NAME)\n             .withDescription(\"The databases for which changes are to be captured\");\n \n+    /**\n+     * Old, backwards-compatible \"whitelist\" property.\n+     */\n+    public static final Field DATABASE_WHITELIST = Field.create(DATABASE_WHITELIST_NAME)\n+            .withDisplayName(\"Databases\")\n+            .withType(Type.LIST)\n+            .withWidth(Width.LONG)\n+            .withImportance(Importance.HIGH)\n+            .withDependents(TABLE_INCLUDE_LIST_NAME, TABLE_WHITELIST_NAME)\n+            .withDescription(\"The databases for which changes are to be captured (deprecated)\");\n+\n     /**\n      * A comma-separated list of regular expressions that match database names to be excluded from monitoring.\n-     * May not be used with {@link #DATABASE_WHITELIST}.\n+     * Must not be used with {@link #DATABASE_INCLUDE_LIST}.\n      */\n-    public static final Field DATABASE_BLACKLIST = Field.create(DATABASE_BLACKLIST_NAME)\n+    public static final Field DATABASE_EXCLUDE_LIST = Field.create(DATABASE_EXCLUDE_LIST_NAME)\n             .withDisplayName(\"Exclude Databases\")\n             .withType(Type.STRING)\n             .withWidth(Width.LONG)\n             .withImportance(Importance.MEDIUM)\n-            .withValidation(MySqlConnectorConfig::validateDatabaseBlacklist)\n+            .withValidation(MySqlConnectorConfig::validateDatabaseExcludeList)\n+            .withInvisibleRecommender()\n+            .withDescription(\"A comma-separated list of regular expressions that match database names to be excluded from monitoring\");\n+\n+    /**\n+     * Old, backwards-compatible \"blacklist\" property.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTExMDE3NA=="}, "originalCommit": null, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcxNTU3NA==", "bodyText": "You can leave it as is, but I find it a bit inconsistent. We also want to get away from the legacy terms within the code base, so in a descriptive comment like this, the new terminology would make more sense IMHO.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469715574", "createdAt": "2020-08-13T06:02:52Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/MySqlConnectorConfig.java", "diffHunk": "@@ -616,50 +619,74 @@ public static GtidNewChannelPosition parse(String value, String defaultValue) {\n             .withImportance(Importance.LOW)\n             .withValidation(Field::isClassName)\n             .withDescription(\"JDBC Driver class name used to connect to the MySQL database server.\");\n+\n     /**\n      * A comma-separated list of regular expressions that match database names to be monitored.\n-     * May not be used with {@link #DATABASE_BLACKLIST}.\n+     * Must not be used with {@link #DATABASE_BLACKLIST}.\n      */\n-    public static final Field DATABASE_WHITELIST = Field.create(DATABASE_WHITELIST_NAME)\n+    public static final Field DATABASE_INCLUDE_LIST = Field.create(DATABASE_INCLUDE_LIST_NAME)\n             .withDisplayName(\"Databases\")\n             .withType(Type.LIST)\n             .withWidth(Width.LONG)\n             .withImportance(Importance.HIGH)\n-            .withDependents(TABLE_WHITELIST_NAME)\n+            .withDependents(TABLE_INCLUDE_LIST_NAME, TABLE_WHITELIST_NAME)\n             .withDescription(\"The databases for which changes are to be captured\");\n \n+    /**\n+     * Old, backwards-compatible \"whitelist\" property.\n+     */\n+    public static final Field DATABASE_WHITELIST = Field.create(DATABASE_WHITELIST_NAME)\n+            .withDisplayName(\"Databases\")\n+            .withType(Type.LIST)\n+            .withWidth(Width.LONG)\n+            .withImportance(Importance.HIGH)\n+            .withDependents(TABLE_INCLUDE_LIST_NAME, TABLE_WHITELIST_NAME)\n+            .withDescription(\"The databases for which changes are to be captured (deprecated)\");\n+\n     /**\n      * A comma-separated list of regular expressions that match database names to be excluded from monitoring.\n-     * May not be used with {@link #DATABASE_WHITELIST}.\n+     * Must not be used with {@link #DATABASE_INCLUDE_LIST}.\n      */\n-    public static final Field DATABASE_BLACKLIST = Field.create(DATABASE_BLACKLIST_NAME)\n+    public static final Field DATABASE_EXCLUDE_LIST = Field.create(DATABASE_EXCLUDE_LIST_NAME)\n             .withDisplayName(\"Exclude Databases\")\n             .withType(Type.STRING)\n             .withWidth(Width.LONG)\n             .withImportance(Importance.MEDIUM)\n-            .withValidation(MySqlConnectorConfig::validateDatabaseBlacklist)\n+            .withValidation(MySqlConnectorConfig::validateDatabaseExcludeList)\n+            .withInvisibleRecommender()\n+            .withDescription(\"A comma-separated list of regular expressions that match database names to be excluded from monitoring\");\n+\n+    /**\n+     * Old, backwards-compatible \"blacklist\" property.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTExMDE3NA=="}, "originalCommit": null, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTE0ODQ1OnYy", "diffSide": "RIGHT", "path": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/MySqlConnectorConfig.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODo1NzozMlrOG_YPiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMTozNjozNVrOG_dUiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTExMDY2NQ==", "bodyText": "Seems validateTableExcludeList went missing?", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469110665", "createdAt": "2020-08-12T08:57:32Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/MySqlConnectorConfig.java", "diffHunk": "@@ -1020,21 +1049,11 @@ private static int validateInconsistentSchemaHandlingModeNotIgnore(Configuration\n         return 0;\n     }\n \n-    private static int validateDatabaseBlacklist(Configuration config, Field field, ValidationOutput problems) {\n-        String whitelist = config.getString(DATABASE_WHITELIST);\n-        String blacklist = config.getString(DATABASE_BLACKLIST);\n-        if (whitelist != null && blacklist != null) {\n-            problems.accept(DATABASE_BLACKLIST, blacklist, \"Whitelist is already specified\");\n-            return 1;\n-        }\n-        return 0;\n-    }\n-\n-    private static int validateTableBlacklist(Configuration config, Field field, ValidationOutput problems) {\n-        String whitelist = config.getString(TABLE_WHITELIST);\n-        String blacklist = config.getString(TABLE_BLACKLIST);\n+    private static int validateDatabaseExcludeList(Configuration config, Field field, ValidationOutput problems) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE3NjM4OQ==", "bodyText": "field TABLE_EXCLUDE_LIST is inherited from io.debezium.relational.RelationalDatabaseConnectorConfig#TABLE_EXCLUDE_LIST where the validation is taking place as well.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469176389", "createdAt": "2020-08-12T10:58:28Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/MySqlConnectorConfig.java", "diffHunk": "@@ -1020,21 +1049,11 @@ private static int validateInconsistentSchemaHandlingModeNotIgnore(Configuration\n         return 0;\n     }\n \n-    private static int validateDatabaseBlacklist(Configuration config, Field field, ValidationOutput problems) {\n-        String whitelist = config.getString(DATABASE_WHITELIST);\n-        String blacklist = config.getString(DATABASE_BLACKLIST);\n-        if (whitelist != null && blacklist != null) {\n-            problems.accept(DATABASE_BLACKLIST, blacklist, \"Whitelist is already specified\");\n-            return 1;\n-        }\n-        return 0;\n-    }\n-\n-    private static int validateTableBlacklist(Configuration config, Field field, ValidationOutput problems) {\n-        String whitelist = config.getString(TABLE_WHITELIST);\n-        String blacklist = config.getString(TABLE_BLACKLIST);\n+    private static int validateDatabaseExcludeList(Configuration config, Field field, ValidationOutput problems) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTExMDY2NQ=="}, "originalCommit": null, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE5Mzg2Nw==", "bodyText": "Ah, that's nice!", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469193867", "createdAt": "2020-08-12T11:36:35Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/MySqlConnectorConfig.java", "diffHunk": "@@ -1020,21 +1049,11 @@ private static int validateInconsistentSchemaHandlingModeNotIgnore(Configuration\n         return 0;\n     }\n \n-    private static int validateDatabaseBlacklist(Configuration config, Field field, ValidationOutput problems) {\n-        String whitelist = config.getString(DATABASE_WHITELIST);\n-        String blacklist = config.getString(DATABASE_BLACKLIST);\n-        if (whitelist != null && blacklist != null) {\n-            problems.accept(DATABASE_BLACKLIST, blacklist, \"Whitelist is already specified\");\n-            return 1;\n-        }\n-        return 0;\n-    }\n-\n-    private static int validateTableBlacklist(Configuration config, Field field, ValidationOutput problems) {\n-        String whitelist = config.getString(TABLE_WHITELIST);\n-        String blacklist = config.getString(TABLE_BLACKLIST);\n+    private static int validateDatabaseExcludeList(Configuration config, Field field, ValidationOutput problems) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTExMDY2NQ=="}, "originalCommit": null, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTE3MTA5OnYy", "diffSide": "RIGHT", "path": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/SnapshotReaderIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwOTowNDowM1rOG_Yd-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwOTowNDowM1rOG_Yd-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTExNDM2Mw==", "bodyText": "Better to leave these kinds of changes for a separate clean-up commit. You can do git add --patch in order to isolate them.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469114363", "createdAt": "2020-08-12T09:04:03Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/SnapshotReaderIT.java", "diffHunk": "@@ -557,14 +586,10 @@ public void shouldSnapshotTablesInLexicographicalOrder() throws Exception {\n         assertArrayEquals(tablesInOrder.toArray(), tablesInOrderExpected.toArray());\n     }\n \n-    private Function<SourceRecord, String> getTableNameFromSourceRecord = sourceRecord -> ((Struct) sourceRecord.value()).getStruct(\"source\").getString(\"table\");\n+    private final Function<SourceRecord, String> getTableNameFromSourceRecord = sourceRecord -> ((Struct) sourceRecord.value()).getStruct(\"source\").getString(\"table\");\n \n     private LinkedHashSet<String> getTableNamesInSpecifiedOrder(String... tables) {\n-        LinkedHashSet<String> tablesInOrderExpected = new LinkedHashSet<>();\n-        for (String table : tables) {\n-            tablesInOrderExpected.add(table);\n-        }\n-        return tablesInOrderExpected;\n+        return new LinkedHashSet<>(Arrays.asList(tables));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTE4NjUwOnYy", "diffSide": "RIGHT", "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/TablesWithoutPrimaryKeyIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwOTowODoxNFrOG_YnQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMDo1OToxMVrOG_cRkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTExNjczNg==", "bodyText": "We usually import assertThat statically.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469116736", "createdAt": "2020-08-12T09:08:14Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/TablesWithoutPrimaryKeyIT.java", "diffHunk": "@@ -42,6 +42,28 @@ public void before() throws SQLException {\n     public void shouldProcessFromSnapshot() throws Exception {\n         TestHelper.execute(STATEMENTS);\n \n+        start(PostgresConnector.class, TestHelper.defaultConfig()\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.INITIAL_ONLY)\n+                .with(PostgresConnectorConfig.SCHEMA_INCLUDE_LIST, \"nopk\")\n+                .build());\n+        assertConnectorIsRunning();\n+\n+        final int expectedRecordsCount = 1 + 1 + 1;\n+\n+        TestConsumer consumer = testConsumer(expectedRecordsCount, \"nopk\");\n+        consumer.await(TestHelper.waitTimeForRecords(), TimeUnit.SECONDS);\n+        final Map<String, List<SourceRecord>> recordsByTopic = recordsByTopic(expectedRecordsCount, consumer);\n+        Assertions.assertThat(recordsByTopic.get(\"test_server.nopk.t1\").get(0).keySchema().field(\"pk\")).isNotNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE3NjcyMQ==", "bodyText": "Makes sense. I just copied code here.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469176721", "createdAt": "2020-08-12T10:59:11Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/TablesWithoutPrimaryKeyIT.java", "diffHunk": "@@ -42,6 +42,28 @@ public void before() throws SQLException {\n     public void shouldProcessFromSnapshot() throws Exception {\n         TestHelper.execute(STATEMENTS);\n \n+        start(PostgresConnector.class, TestHelper.defaultConfig()\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.INITIAL_ONLY)\n+                .with(PostgresConnectorConfig.SCHEMA_INCLUDE_LIST, \"nopk\")\n+                .build());\n+        assertConnectorIsRunning();\n+\n+        final int expectedRecordsCount = 1 + 1 + 1;\n+\n+        TestConsumer consumer = testConsumer(expectedRecordsCount, \"nopk\");\n+        consumer.await(TestHelper.waitTimeForRecords(), TimeUnit.SECONDS);\n+        final Map<String, List<SourceRecord>> recordsByTopic = recordsByTopic(expectedRecordsCount, consumer);\n+        Assertions.assertThat(recordsByTopic.get(\"test_server.nopk.t1\").get(0).keySchema().field(\"pk\")).isNotNull();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTExNjczNg=="}, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTE5MDM2OnYy", "diffSide": "RIGHT", "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/TablesWithoutPrimaryKeyIT.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwOTowOToxMVrOG_YphA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNjoxODoyMVrOG_9eZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTExNzMxNg==", "bodyText": "Do you see a big gain by making local vars final? I know @jpechane and I disagree on that, personally I think it's just noise and doesn't help really. Can you please come in my camp so we can outnumber @jpechane ;)", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469117316", "createdAt": "2020-08-12T09:09:11Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/TablesWithoutPrimaryKeyIT.java", "diffHunk": "@@ -42,6 +42,28 @@ public void before() throws SQLException {\n     public void shouldProcessFromSnapshot() throws Exception {\n         TestHelper.execute(STATEMENTS);\n \n+        start(PostgresConnector.class, TestHelper.defaultConfig()\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.INITIAL_ONLY)\n+                .with(PostgresConnectorConfig.SCHEMA_INCLUDE_LIST, \"nopk\")\n+                .build());\n+        assertConnectorIsRunning();\n+\n+        final int expectedRecordsCount = 1 + 1 + 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE3NzYwNw==", "bodyText": "immutability for the win! like this they can be for example directly been used inside lambda context.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469177607", "createdAt": "2020-08-12T11:00:58Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/TablesWithoutPrimaryKeyIT.java", "diffHunk": "@@ -42,6 +42,28 @@ public void before() throws SQLException {\n     public void shouldProcessFromSnapshot() throws Exception {\n         TestHelper.execute(STATEMENTS);\n \n+        start(PostgresConnector.class, TestHelper.defaultConfig()\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.INITIAL_ONLY)\n+                .with(PostgresConnectorConfig.SCHEMA_INCLUDE_LIST, \"nopk\")\n+                .build());\n+        assertConnectorIsRunning();\n+\n+        final int expectedRecordsCount = 1 + 1 + 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTExNzMxNg=="}, "originalCommit": null, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcyMDY3OQ==", "bodyText": "Which you don't do here, though :)", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469720679", "createdAt": "2020-08-13T06:18:21Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/TablesWithoutPrimaryKeyIT.java", "diffHunk": "@@ -42,6 +42,28 @@ public void before() throws SQLException {\n     public void shouldProcessFromSnapshot() throws Exception {\n         TestHelper.execute(STATEMENTS);\n \n+        start(PostgresConnector.class, TestHelper.defaultConfig()\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.INITIAL_ONLY)\n+                .with(PostgresConnectorConfig.SCHEMA_INCLUDE_LIST, \"nopk\")\n+                .build());\n+        assertConnectorIsRunning();\n+\n+        final int expectedRecordsCount = 1 + 1 + 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTExNzMxNg=="}, "originalCommit": null, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTE5NjU3OnYy", "diffSide": "RIGHT", "path": "debezium-connector-sqlserver/src/test/java/io/debezium/connector/sqlserver/SnapshotIT.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwOToxMDo0OVrOG_YtPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMTozNzoyMlrOG_dV_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTExODI3MA==", "bodyText": "Why did you change the name? We don't add the \"test\" really (although it's handled a bit incosistently; my personal preference is something like \"blacklistedColumnShouldNotShowUpInChangeEvent\", i.e. describing the expectation/intention behind the test.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469118270", "createdAt": "2020-08-12T09:10:49Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-sqlserver/src/test/java/io/debezium/connector/sqlserver/SnapshotIT.java", "diffHunk": "@@ -311,7 +311,7 @@ public void takeSchemaOnlySnapshotAndSendHeartbeat() throws Exception {\n \n     @Test\n     @FixFor(\"DBZ-1067\")\n-    public void blacklistColumn() throws Exception {\n+    public void testBlacklistColumn() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE3OTcxNA==", "bodyText": "we always have \"should\" everywhere, LOL. just personally I find it's easier to see if something is actually a test (when my brain fades out the \"@test\" annotation) when it starts with test/should prefix. and I think there are prefixes everywhere for actual test cases and no prefix for helper methods. just thought it is off (personal OCD mind)", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469179714", "createdAt": "2020-08-12T11:05:48Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-sqlserver/src/test/java/io/debezium/connector/sqlserver/SnapshotIT.java", "diffHunk": "@@ -311,7 +311,7 @@ public void takeSchemaOnlySnapshotAndSendHeartbeat() throws Exception {\n \n     @Test\n     @FixFor(\"DBZ-1067\")\n-    public void blacklistColumn() throws Exception {\n+    public void testBlacklistColumn() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTExODI3MA=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE5NDIzOA==", "bodyText": "Well, the annotation really is the hint that something is a test method. No need to duplicate that information into the name.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469194238", "createdAt": "2020-08-12T11:37:22Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-sqlserver/src/test/java/io/debezium/connector/sqlserver/SnapshotIT.java", "diffHunk": "@@ -311,7 +311,7 @@ public void takeSchemaOnlySnapshotAndSendHeartbeat() throws Exception {\n \n     @Test\n     @FixFor(\"DBZ-1067\")\n-    public void blacklistColumn() throws Exception {\n+    public void testBlacklistColumn() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTExODI3MA=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTIwMDM1OnYy", "diffSide": "RIGHT", "path": "debezium-core/src/main/java/io/debezium/config/CommonConnectorConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwOToxMTo1MlrOG_YviQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwOTo1Nzo0NFrOG_aZrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTExODg1Nw==", "bodyText": "Same comment as above: all those should rather go into a separate housekeeping commit (mentioning it for next time, no need to change now).", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469118857", "createdAt": "2020-08-12T09:11:52Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/config/CommonConnectorConfig.java", "diffHunk": "@@ -166,17 +166,17 @@ public static EventProcessingFailureHandlingMode parse(String value) {\n         /**\n          * Represent binary values as byte array\n          */\n-        BYTES(\"bytes\", () -> SchemaBuilder.bytes()),\n+        BYTES(\"bytes\", SchemaBuilder::bytes),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0NjAzMQ==", "bodyText": "okay. will do next time", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469146031", "createdAt": "2020-08-12T09:57:44Z", "author": {"login": "rk3rn3r"}, "path": "debezium-core/src/main/java/io/debezium/config/CommonConnectorConfig.java", "diffHunk": "@@ -166,17 +166,17 @@ public static EventProcessingFailureHandlingMode parse(String value) {\n         /**\n          * Represent binary values as byte array\n          */\n-        BYTES(\"bytes\", () -> SchemaBuilder.bytes()),\n+        BYTES(\"bytes\", SchemaBuilder::bytes),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTExODg1Nw=="}, "originalCommit": null, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTIyMjUxOnYy", "diffSide": "RIGHT", "path": "debezium-core/src/main/java/io/debezium/relational/RelationalDatabaseConnectorConfig.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwOToxNzozMVrOG_Y8_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMjo0NzozNlrOHAJ8HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEyMjMwMA==", "bodyText": "Do we indeed need to expose all of them? Ideally, access only would be via getFilters().", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469122300", "createdAt": "2020-08-12T09:17:31Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/relational/RelationalDatabaseConnectorConfig.java", "diffHunk": "@@ -383,11 +464,36 @@ public Duration snapshotLockTimeout() {\n         return Duration.ofMillis(getConfig().getLong(SNAPSHOT_LOCK_TIMEOUT_MS));\n     }\n \n-    private static int validateColumnBlacklist(Configuration config, Field field, Field.ValidationOutput problems) {\n-        String whitelist = config.getString(COLUMN_WHITELIST);\n-        String blacklist = config.getString(COLUMN_BLACKLIST);\n-        if (whitelist != null && blacklist != null) {\n-            problems.accept(COLUMN_BLACKLIST, blacklist, \"Column whitelist is already specified\");\n+    public String schemaExcludeList() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 227}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0Njg5Nw==", "bodyText": "see the comment on the PostgresConnectorConfig. I moved and renamed them from there. I think it's architecture-wise the best way to have getters here and avoiding access to properties by config.getString(....) etc.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469146897", "createdAt": "2020-08-12T09:59:14Z", "author": {"login": "rk3rn3r"}, "path": "debezium-core/src/main/java/io/debezium/relational/RelationalDatabaseConnectorConfig.java", "diffHunk": "@@ -383,11 +464,36 @@ public Duration snapshotLockTimeout() {\n         return Duration.ofMillis(getConfig().getLong(SNAPSHOT_LOCK_TIMEOUT_MS));\n     }\n \n-    private static int validateColumnBlacklist(Configuration config, Field field, Field.ValidationOutput problems) {\n-        String whitelist = config.getString(COLUMN_WHITELIST);\n-        String blacklist = config.getString(COLUMN_BLACKLIST);\n-        if (whitelist != null && blacklist != null) {\n-            problems.accept(COLUMN_BLACKLIST, blacklist, \"Column whitelist is already specified\");\n+    public String schemaExcludeList() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEyMjMwMA=="}, "originalCommit": null, "originalPosition": 227}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE5NDczMg==", "bodyText": "Yes, that's better. But eventually, the raw filter properties shouldn't be exposed at all, rather only the Filters class should provide the access. But it seems you're saying that right now we still need to do this?", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469194732", "createdAt": "2020-08-12T11:38:26Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/relational/RelationalDatabaseConnectorConfig.java", "diffHunk": "@@ -383,11 +464,36 @@ public Duration snapshotLockTimeout() {\n         return Duration.ofMillis(getConfig().getLong(SNAPSHOT_LOCK_TIMEOUT_MS));\n     }\n \n-    private static int validateColumnBlacklist(Configuration config, Field field, Field.ValidationOutput problems) {\n-        String whitelist = config.getString(COLUMN_WHITELIST);\n-        String blacklist = config.getString(COLUMN_BLACKLIST);\n-        if (whitelist != null && blacklist != null) {\n-            problems.accept(COLUMN_BLACKLIST, blacklist, \"Column whitelist is already specified\");\n+    public String schemaExcludeList() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEyMjMwMA=="}, "originalCommit": null, "originalPosition": 227}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcyMjA4Nw==", "bodyText": "That's still pending?", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469722087", "createdAt": "2020-08-13T06:22:05Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/relational/RelationalDatabaseConnectorConfig.java", "diffHunk": "@@ -383,11 +464,36 @@ public Duration snapshotLockTimeout() {\n         return Duration.ofMillis(getConfig().getLong(SNAPSHOT_LOCK_TIMEOUT_MS));\n     }\n \n-    private static int validateColumnBlacklist(Configuration config, Field field, Field.ValidationOutput problems) {\n-        String whitelist = config.getString(COLUMN_WHITELIST);\n-        String blacklist = config.getString(COLUMN_BLACKLIST);\n-        if (whitelist != null && blacklist != null) {\n-            problems.accept(COLUMN_BLACKLIST, blacklist, \"Column whitelist is already specified\");\n+    public String schemaExcludeList() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEyMjMwMA=="}, "originalCommit": null, "originalPosition": 227}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3ODQ3Mw==", "bodyText": "I think we should do this in a future refactoring. maybe introduce a FiltersConfig in the relational namespace?\nWhat do you mean with \"pending\"? Is it okay like this or what do you think needs to be done? @gunnarmorling\nI logged https://issues.redhat.com/browse/DBZ-2431 for the refactoring", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469878473", "createdAt": "2020-08-13T11:18:09Z", "author": {"login": "rk3rn3r"}, "path": "debezium-core/src/main/java/io/debezium/relational/RelationalDatabaseConnectorConfig.java", "diffHunk": "@@ -383,11 +464,36 @@ public Duration snapshotLockTimeout() {\n         return Duration.ofMillis(getConfig().getLong(SNAPSHOT_LOCK_TIMEOUT_MS));\n     }\n \n-    private static int validateColumnBlacklist(Configuration config, Field field, Field.ValidationOutput problems) {\n-        String whitelist = config.getString(COLUMN_WHITELIST);\n-        String blacklist = config.getString(COLUMN_BLACKLIST);\n-        if (whitelist != null && blacklist != null) {\n-            problems.accept(COLUMN_BLACKLIST, blacklist, \"Column whitelist is already specified\");\n+    public String schemaExcludeList() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEyMjMwMA=="}, "originalCommit": null, "originalPosition": 227}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkyNDg5Mw==", "bodyText": "Thanks for logging that one. We can discuss this over there.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469924893", "createdAt": "2020-08-13T12:47:36Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/relational/RelationalDatabaseConnectorConfig.java", "diffHunk": "@@ -383,11 +464,36 @@ public Duration snapshotLockTimeout() {\n         return Duration.ofMillis(getConfig().getLong(SNAPSHOT_LOCK_TIMEOUT_MS));\n     }\n \n-    private static int validateColumnBlacklist(Configuration config, Field field, Field.ValidationOutput problems) {\n-        String whitelist = config.getString(COLUMN_WHITELIST);\n-        String blacklist = config.getString(COLUMN_BLACKLIST);\n-        if (whitelist != null && blacklist != null) {\n-            problems.accept(COLUMN_BLACKLIST, blacklist, \"Column whitelist is already specified\");\n+    public String schemaExcludeList() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEyMjMwMA=="}, "originalCommit": null, "originalPosition": 227}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTIzMTg5OnYy", "diffSide": "LEFT", "path": "documentation/modules/ROOT/pages/connectors/db2.adoc", "isResolved": true, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwOToyMDowNlrOG_ZCtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNDowMzo1NFrOHANCJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEyMzc2Ng==", "bodyText": "No mention of the actual properties for Db2?", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469123766", "createdAt": "2020-08-12T09:20:06Z", "author": {"login": "gunnarmorling"}, "path": "documentation/modules/ROOT/pages/connectors/db2.adoc", "diffHunk": "@@ -22,10 +22,10 @@ SQL based polling model of tables put into \"capture mode\". This uses the ASN lib\n In order to use ASN and hence this connector, you need to have a license for the IBM InfoSphere Data Replication (IIDR) product.\n It is not required that IIDR itself is installed.\n \n-The first time it connects to a Db2 database, it reads a consistent snapshot of all of the tables that are whitelisted (or not blacklisted depending on the mode of operation).", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEyNTM1Nw==", "bodyText": "If so indeed, can you please log an issue and assign it to @TovaCohen? Thx!", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469125357", "createdAt": "2020-08-12T09:22:47Z", "author": {"login": "gunnarmorling"}, "path": "documentation/modules/ROOT/pages/connectors/db2.adoc", "diffHunk": "@@ -22,10 +22,10 @@ SQL based polling model of tables put into \"capture mode\". This uses the ASN lib\n In order to use ASN and hence this connector, you need to have a license for the IBM InfoSphere Data Replication (IIDR) product.\n It is not required that IIDR itself is installed.\n \n-The first time it connects to a Db2 database, it reads a consistent snapshot of all of the tables that are whitelisted (or not blacklisted depending on the mode of operation).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEyMzc2Ng=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0OTQ4NQ==", "bodyText": "DB2 is in the incubator repo. I will need to update incubator connectors in another PR. What should in general happen to incubator connectors are they always pointing to the recent DBZ version or frozen to a specific (maybe older) version until such changes on core are applied in the incubator repo as well?", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469149485", "createdAt": "2020-08-12T10:04:18Z", "author": {"login": "rk3rn3r"}, "path": "documentation/modules/ROOT/pages/connectors/db2.adoc", "diffHunk": "@@ -22,10 +22,10 @@ SQL based polling model of tables put into \"capture mode\". This uses the ASN lib\n In order to use ASN and hence this connector, you need to have a license for the IBM InfoSphere Data Replication (IIDR) product.\n It is not required that IIDR itself is installed.\n \n-The first time it connects to a Db2 database, it reads a consistent snapshot of all of the tables that are whitelisted (or not blacklisted depending on the mode of operation).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEyMzc2Ng=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE1MDIzNQ==", "bodyText": "maybe we should reason about moving incubator to a directory in this repo and have it mono-repo-ed? would make such changes easier.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469150235", "createdAt": "2020-08-12T10:05:42Z", "author": {"login": "rk3rn3r"}, "path": "documentation/modules/ROOT/pages/connectors/db2.adoc", "diffHunk": "@@ -22,10 +22,10 @@ SQL based polling model of tables put into \"capture mode\". This uses the ASN lib\n In order to use ASN and hence this connector, you need to have a license for the IBM InfoSphere Data Replication (IIDR) product.\n It is not required that IIDR itself is installed.\n \n-The first time it connects to a Db2 database, it reads a consistent snapshot of all of the tables that are whitelisted (or not blacklisted depending on the mode of operation).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEyMzc2Ng=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE5NTA0OQ==", "bodyText": "Usually we send two PRs, stating on the incubator one that it requires the core PR xzy.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469195049", "createdAt": "2020-08-12T11:39:01Z", "author": {"login": "gunnarmorling"}, "path": "documentation/modules/ROOT/pages/connectors/db2.adoc", "diffHunk": "@@ -22,10 +22,10 @@ SQL based polling model of tables put into \"capture mode\". This uses the ASN lib\n In order to use ASN and hence this connector, you need to have a license for the IBM InfoSphere Data Replication (IIDR) product.\n It is not required that IIDR itself is installed.\n \n-The first time it connects to a Db2 database, it reads a consistent snapshot of all of the tables that are whitelisted (or not blacklisted depending on the mode of operation).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEyMzc2Ng=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcyMjk2MQ==", "bodyText": "Note my question was about those props apparently being undocumented for Db2. If you can confirm this, can you please log an issue? Thx!", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469722961", "createdAt": "2020-08-13T06:24:08Z", "author": {"login": "gunnarmorling"}, "path": "documentation/modules/ROOT/pages/connectors/db2.adoc", "diffHunk": "@@ -22,10 +22,10 @@ SQL based polling model of tables put into \"capture mode\". This uses the ASN lib\n In order to use ASN and hence this connector, you need to have a license for the IBM InfoSphere Data Replication (IIDR) product.\n It is not required that IIDR itself is installed.\n \n-The first time it connects to a Db2 database, it reads a consistent snapshot of all of the tables that are whitelisted (or not blacklisted depending on the mode of operation).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEyMzc2Ng=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg4MzIwOA==", "bodyText": "misunderstanding, sorry! with my comment I meant that they are documented, but I didn't update the config yet because I wasn't sure on how we handle incubator connectors.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469883208", "createdAt": "2020-08-13T11:28:13Z", "author": {"login": "rk3rn3r"}, "path": "documentation/modules/ROOT/pages/connectors/db2.adoc", "diffHunk": "@@ -22,10 +22,10 @@ SQL based polling model of tables put into \"capture mode\". This uses the ASN lib\n In order to use ASN and hence this connector, you need to have a license for the IBM InfoSphere Data Replication (IIDR) product.\n It is not required that IIDR itself is installed.\n \n-The first time it connects to a Db2 database, it reads a consistent snapshot of all of the tables that are whitelisted (or not blacklisted depending on the mode of operation).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEyMzc2Ng=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkyNDA5Nw==", "bodyText": "Ah, gotcha now. Your call whether you'd do the doc update for the incubator connectors as part of this PR, or send another PR for that alongside the incubator PR for the actual code changes.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469924097", "createdAt": "2020-08-13T12:46:16Z", "author": {"login": "gunnarmorling"}, "path": "documentation/modules/ROOT/pages/connectors/db2.adoc", "diffHunk": "@@ -22,10 +22,10 @@ SQL based polling model of tables put into \"capture mode\". This uses the ASN lib\n In order to use ASN and hence this connector, you need to have a license for the IBM InfoSphere Data Replication (IIDR) product.\n It is not required that IIDR itself is installed.\n \n-The first time it connects to a Db2 database, it reads a consistent snapshot of all of the tables that are whitelisted (or not blacklisted depending on the mode of operation).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEyMzc2Ng=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk1MDg5Nw==", "bodyText": "I am currently working through the Db2 connector doc. I completely rewrote the sentence that this comment thread is about. The sentence is now: \"When the connector starts, it performs a consistent snapshot] of the Db2 database tables that the connector is configured to capture changes for. \"  So you don't need to update the Db2 doc. Okay?", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469950897", "createdAt": "2020-08-13T13:29:00Z", "author": {"login": "TovaCohen"}, "path": "documentation/modules/ROOT/pages/connectors/db2.adoc", "diffHunk": "@@ -22,10 +22,10 @@ SQL based polling model of tables put into \"capture mode\". This uses the ASN lib\n In order to use ASN and hence this connector, you need to have a license for the IBM InfoSphere Data Replication (IIDR) product.\n It is not required that IIDR itself is installed.\n \n-The first time it connects to a Db2 database, it reads a consistent snapshot of all of the tables that are whitelisted (or not blacklisted depending on the mode of operation).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEyMzc2Ng=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk3NTU4OA==", "bodyText": "Thank you @TovaCohen!\n@gunnarmorling I decided to do the incubator connector changes first because the old properties will still be supported and I can't estimate how much time I will need to do the incubator connectors. It would be bad if I change the docs now and it will take >1 week to get the incubator changes out of the door and people read docs that are not up to date with code changes.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469975588", "createdAt": "2020-08-13T14:03:54Z", "author": {"login": "rk3rn3r"}, "path": "documentation/modules/ROOT/pages/connectors/db2.adoc", "diffHunk": "@@ -22,10 +22,10 @@ SQL based polling model of tables put into \"capture mode\". This uses the ASN lib\n In order to use ASN and hence this connector, you need to have a license for the IBM InfoSphere Data Replication (IIDR) product.\n It is not required that IIDR itself is installed.\n \n-The first time it connects to a Db2 database, it reads a consistent snapshot of all of the tables that are whitelisted (or not blacklisted depending on the mode of operation).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEyMzc2Ng=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNTAyOTg3OnYy", "diffSide": "RIGHT", "path": "debezium-connector-mongodb/src/test/java/io/debezium/connector/mongodb/MongoDbConnectorIT.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNTo1ODowOVrOG_9EiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNDo1NDoxNFrOHAPUXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcxNDA1Nw==", "bodyText": "\"Relational...\" shouldn't be referenced from any MongoDB related code. Move the constant to DatabaseSchema then, and rename it into NO_CAPTURED_DATA_COLLECTIONS_WARNING (we want to move away from \"monitor\" when it comes to describing capturing changes, and we use \"data collection\" as common term for tables, MongoDB collections etc.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469714057", "createdAt": "2020-08-13T05:58:09Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-mongodb/src/test/java/io/debezium/connector/mongodb/MongoDbConnectorIT.java", "diffHunk": "@@ -656,7 +665,7 @@ public void shouldConsumeEventsFromCollectionWithReplacedTopicName() throws Inte\n         // ---------------------------------------------------------------------------------------------------------------\n         // Stop the connector\n         // ---------------------------------------------------------------------------------------------------------------\n-        stopConnector(value -> assertThat(logInterceptor.containsWarnMessage(NO_MONITORED_TABLES_WARNING)).isFalse());\n+        stopConnector(value -> assertThat(logInterceptor.containsWarnMessage(RelationalDatabaseSchema.NO_MONITORED_TABLES_WARNING)).isFalse());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg4Mzc0OQ==", "bodyText": "good point! will do", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469883749", "createdAt": "2020-08-13T11:29:26Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-mongodb/src/test/java/io/debezium/connector/mongodb/MongoDbConnectorIT.java", "diffHunk": "@@ -656,7 +665,7 @@ public void shouldConsumeEventsFromCollectionWithReplacedTopicName() throws Inte\n         // ---------------------------------------------------------------------------------------------------------------\n         // Stop the connector\n         // ---------------------------------------------------------------------------------------------------------------\n-        stopConnector(value -> assertThat(logInterceptor.containsWarnMessage(NO_MONITORED_TABLES_WARNING)).isFalse());\n+        stopConnector(value -> assertThat(logInterceptor.containsWarnMessage(RelationalDatabaseSchema.NO_MONITORED_TABLES_WARNING)).isFalse());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcxNDA1Nw=="}, "originalCommit": null, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAxMzAyMw==", "bodyText": "Done", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r470013023", "createdAt": "2020-08-13T14:54:14Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-mongodb/src/test/java/io/debezium/connector/mongodb/MongoDbConnectorIT.java", "diffHunk": "@@ -656,7 +665,7 @@ public void shouldConsumeEventsFromCollectionWithReplacedTopicName() throws Inte\n         // ---------------------------------------------------------------------------------------------------------------\n         // Stop the connector\n         // ---------------------------------------------------------------------------------------------------------------\n-        stopConnector(value -> assertThat(logInterceptor.containsWarnMessage(NO_MONITORED_TABLES_WARNING)).isFalse());\n+        stopConnector(value -> assertThat(logInterceptor.containsWarnMessage(RelationalDatabaseSchema.NO_MONITORED_TABLES_WARNING)).isFalse());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcxNDA1Nw=="}, "originalCommit": null, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNTA0NzI4OnYy", "diffSide": "RIGHT", "path": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/LegacyV1SourceInfoTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNjowNjozMFrOG_9O-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTowMjoxMlrOHAPswA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcxNjczMA==", "bodyText": "Should use new names?", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469716730", "createdAt": "2020-08-13T06:06:30Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/LegacyV1SourceInfoTest.java", "diffHunk": "@@ -158,6 +158,23 @@ public void shouldRecoverSourceInfoFromOffsetWithNonZeroBinlogCoordinatesAndNonZ\n \n     @Test\n     public void shouldRecoverSourceInfoFromOffsetWithFilterData() {\n+        final String databaseWhitelist = \"a,b\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg4NDE0MQ==", "bodyText": "not in tests, like we agreed in the discussion on what we are going to change. that will blow up the PR a lot!", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469884141", "createdAt": "2020-08-13T11:30:18Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/LegacyV1SourceInfoTest.java", "diffHunk": "@@ -158,6 +158,23 @@ public void shouldRecoverSourceInfoFromOffsetWithNonZeroBinlogCoordinatesAndNonZ\n \n     @Test\n     public void shouldRecoverSourceInfoFromOffsetWithFilterData() {\n+        final String databaseWhitelist = \"a,b\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcxNjczMA=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkyMjg1OQ==", "bodyText": "Hum, ok. Can you create a follow-up Jira issue for this then. Thx.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469922859", "createdAt": "2020-08-13T12:44:14Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/LegacyV1SourceInfoTest.java", "diffHunk": "@@ -158,6 +158,23 @@ public void shouldRecoverSourceInfoFromOffsetWithNonZeroBinlogCoordinatesAndNonZ\n \n     @Test\n     public void shouldRecoverSourceInfoFromOffsetWithFilterData() {\n+        final String databaseWhitelist = \"a,b\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcxNjczMA=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAxOTI2NA==", "bodyText": "I logged https://issues.redhat.com/browse/DBZ-2433 for this", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r470019264", "createdAt": "2020-08-13T15:02:12Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/LegacyV1SourceInfoTest.java", "diffHunk": "@@ -158,6 +158,23 @@ public void shouldRecoverSourceInfoFromOffsetWithNonZeroBinlogCoordinatesAndNonZ\n \n     @Test\n     public void shouldRecoverSourceInfoFromOffsetWithFilterData() {\n+        final String databaseWhitelist = \"a,b\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcxNjczMA=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNTA1NjU1OnYy", "diffSide": "RIGHT", "path": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/LegacyV1SourceInfoTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNjoxMToyM1rOG_9Usw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMTozMDozMlrOHAHdYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcxODE5NQ==", "bodyText": "Same here?", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469718195", "createdAt": "2020-08-13T06:11:23Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/LegacyV1SourceInfoTest.java", "diffHunk": "@@ -158,6 +158,23 @@ public void shouldRecoverSourceInfoFromOffsetWithNonZeroBinlogCoordinatesAndNonZ\n \n     @Test\n     public void shouldRecoverSourceInfoFromOffsetWithFilterData() {\n+        final String databaseWhitelist = \"a,b\";\n+        final String tableWhitelist = \"c.foo,d.bar,d.baz\";\n+        Map<String, String> offset = offset(10, 10);\n+        offset.put(SourceInfo.DATABASE_INCLUDE_LIST_KEY, databaseWhitelist);\n+        offset.put(SourceInfo.TABLE_INCLUDE_LIST_KEY, tableWhitelist);\n+\n+        sourceWith(offset);\n+        assertThat(source.hasFilterInfo()).isTrue();\n+        assertEquals(databaseWhitelist, source.getDatabaseIncludeList());\n+        assertEquals(tableWhitelist, source.getTableIncludeList());\n+        // confirm other filter info is null\n+        assertThat(source.getDatabaseExcludeList()).isNull();\n+        assertThat(source.getTableExcludeList()).isNull();\n+    }\n+\n+    @Test\n+    public void shouldRecoverSourceInfoFromOffsetWithFilterDataOld() {\n         final String databaseWhitelist = \"a,b\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg4NDI1Ng==", "bodyText": "yep. same here^^", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469884256", "createdAt": "2020-08-13T11:30:32Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/LegacyV1SourceInfoTest.java", "diffHunk": "@@ -158,6 +158,23 @@ public void shouldRecoverSourceInfoFromOffsetWithNonZeroBinlogCoordinatesAndNonZ\n \n     @Test\n     public void shouldRecoverSourceInfoFromOffsetWithFilterData() {\n+        final String databaseWhitelist = \"a,b\";\n+        final String tableWhitelist = \"c.foo,d.bar,d.baz\";\n+        Map<String, String> offset = offset(10, 10);\n+        offset.put(SourceInfo.DATABASE_INCLUDE_LIST_KEY, databaseWhitelist);\n+        offset.put(SourceInfo.TABLE_INCLUDE_LIST_KEY, tableWhitelist);\n+\n+        sourceWith(offset);\n+        assertThat(source.hasFilterInfo()).isTrue();\n+        assertEquals(databaseWhitelist, source.getDatabaseIncludeList());\n+        assertEquals(tableWhitelist, source.getTableIncludeList());\n+        // confirm other filter info is null\n+        assertThat(source.getDatabaseExcludeList()).isNull();\n+        assertThat(source.getTableExcludeList()).isNull();\n+    }\n+\n+    @Test\n+    public void shouldRecoverSourceInfoFromOffsetWithFilterDataOld() {\n         final String databaseWhitelist = \"a,b\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcxODE5NQ=="}, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNTA1ODU2OnYy", "diffSide": "RIGHT", "path": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/LegacyV1SourceInfoTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNjoxMjoxMFrOG_9V6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNjoxMjoxMFrOG_9V6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcxODUwNg==", "bodyText": "Same here?", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469718506", "createdAt": "2020-08-13T06:12:10Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/LegacyV1SourceInfoTest.java", "diffHunk": "@@ -182,15 +199,35 @@ public void setOffsetFilterFromFilter() {\n         sourceWith(offset);\n         assertThat(!source.hasFilterInfo());\n \n+        final Configuration configuration = Configuration.create()\n+                .with(MySqlConnectorConfig.DATABASE_EXCLUDE_LIST, databaseBlacklist)\n+                .with(MySqlConnectorConfig.TABLE_EXCLUDE_LIST, tableBlacklist)\n+                .build();\n+        source.setFilterDataFromConfig(configuration);\n+\n+        assertThat(source.hasFilterInfo()).isTrue();\n+        assertEquals(databaseBlacklist, source.getDatabaseExcludeList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNTA2MzcwOnYy", "diffSide": "RIGHT", "path": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/SourceInfoTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNjoxNDoyMFrOG_9Y5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTowMzozNVrOHAPwRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcxOTI3MQ==", "bodyText": "Should use new names? The only time a var should use the old names is when it actually refers to the old property/key in some backwards compat test.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469719271", "createdAt": "2020-08-13T06:14:20Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/SourceInfoTest.java", "diffHunk": "@@ -165,15 +165,32 @@ public void shouldRecoverSourceInfoFromOffsetWithFilterData() {\n \n         sourceWith(offset);\n         assertThat(source.hasFilterInfo()).isTrue();\n-        assertEquals(databaseWhitelist, source.getDatabaseWhitelist());\n-        assertEquals(tableWhitelist, source.getTableWhitelist());\n+        assertEquals(databaseWhitelist, source.getDatabaseIncludeList());\n+        assertEquals(tableWhitelist, source.getTableIncludeList());\n         // confirm other filter info is null\n-        assertThat(source.getDatabaseBlacklist()).isNull();\n-        assertThat(source.getTableBlacklist()).isNull();\n+        assertThat(source.getDatabaseExcludeList()).isNull();\n+        assertThat(source.getTableExcludeList()).isNull();\n     }\n \n     @Test\n-    public void setOffsetFilterFromFilter() {\n+    public void shouldRecoverSourceInfoFromOffsetWithFilterData() {\n+        final String databaseWhitelist = \"a,b\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAxOTYyMQ==", "bodyText": "same here as well!", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r470019621", "createdAt": "2020-08-13T15:02:45Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/SourceInfoTest.java", "diffHunk": "@@ -165,15 +165,32 @@ public void shouldRecoverSourceInfoFromOffsetWithFilterData() {\n \n         sourceWith(offset);\n         assertThat(source.hasFilterInfo()).isTrue();\n-        assertEquals(databaseWhitelist, source.getDatabaseWhitelist());\n-        assertEquals(tableWhitelist, source.getTableWhitelist());\n+        assertEquals(databaseWhitelist, source.getDatabaseIncludeList());\n+        assertEquals(tableWhitelist, source.getTableIncludeList());\n         // confirm other filter info is null\n-        assertThat(source.getDatabaseBlacklist()).isNull();\n-        assertThat(source.getTableBlacklist()).isNull();\n+        assertThat(source.getDatabaseExcludeList()).isNull();\n+        assertThat(source.getTableExcludeList()).isNull();\n     }\n \n     @Test\n-    public void setOffsetFilterFromFilter() {\n+    public void shouldRecoverSourceInfoFromOffsetWithFilterData() {\n+        final String databaseWhitelist = \"a,b\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcxOTI3MQ=="}, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAyMDE2NA==", "bodyText": "in https://issues.redhat.com/browse/DBZ-2433 I described it like old property tests can have old names, but we always prefer new / non-divisive names.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r470020164", "createdAt": "2020-08-13T15:03:35Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/SourceInfoTest.java", "diffHunk": "@@ -165,15 +165,32 @@ public void shouldRecoverSourceInfoFromOffsetWithFilterData() {\n \n         sourceWith(offset);\n         assertThat(source.hasFilterInfo()).isTrue();\n-        assertEquals(databaseWhitelist, source.getDatabaseWhitelist());\n-        assertEquals(tableWhitelist, source.getTableWhitelist());\n+        assertEquals(databaseWhitelist, source.getDatabaseIncludeList());\n+        assertEquals(tableWhitelist, source.getTableIncludeList());\n         // confirm other filter info is null\n-        assertThat(source.getDatabaseBlacklist()).isNull();\n-        assertThat(source.getTableBlacklist()).isNull();\n+        assertThat(source.getDatabaseExcludeList()).isNull();\n+        assertThat(source.getTableExcludeList()).isNull();\n     }\n \n     @Test\n-    public void setOffsetFilterFromFilter() {\n+    public void shouldRecoverSourceInfoFromOffsetWithFilterData() {\n+        final String databaseWhitelist = \"a,b\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcxOTI3MQ=="}, "originalCommit": null, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNTA2NDEzOnYy", "diffSide": "RIGHT", "path": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/SourceInfoTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNjoxNDozMVrOG_9ZJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNjoxNDozMVrOG_9ZJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcxOTMzNQ==", "bodyText": "Same here.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469719335", "createdAt": "2020-08-13T06:14:31Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/SourceInfoTest.java", "diffHunk": "@@ -188,8 +205,28 @@ public void setOffsetFilterFromFilter() {\n         source.setFilterDataFromConfig(configuration);\n \n         assertThat(source.hasFilterInfo()).isTrue();\n-        assertEquals(databaseBlacklist, source.getDatabaseBlacklist());\n-        assertEquals(tableBlacklist, source.getTableBlacklist());\n+        assertEquals(databaseBlacklist, source.getDatabaseExcludeList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNTA2NDQ0OnYy", "diffSide": "RIGHT", "path": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/SourceInfoTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNjoxNDo0MFrOG_9ZWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNjoxNDo0MFrOG_9ZWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcxOTM4NA==", "bodyText": "Same here.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469719384", "createdAt": "2020-08-13T06:14:40Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/SourceInfoTest.java", "diffHunk": "@@ -188,8 +205,28 @@ public void setOffsetFilterFromFilter() {\n         source.setFilterDataFromConfig(configuration);\n \n         assertThat(source.hasFilterInfo()).isTrue();\n-        assertEquals(databaseBlacklist, source.getDatabaseBlacklist());\n-        assertEquals(tableBlacklist, source.getTableBlacklist());\n+        assertEquals(databaseBlacklist, source.getDatabaseExcludeList());\n+        assertEquals(tableBlacklist, source.getTableExcludeList());\n+    }\n+\n+    @Test\n+    public void setOffsetFilterFromFilter() {\n+        final String databaseBlacklist = \"a,b\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNTA2ODc4OnYy", "diffSide": "RIGHT", "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/PostgresSchema.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNjoxNjozMVrOG_9b4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTowNDowOFrOHAPx1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcyMDAzNA==", "bodyText": "The orginal closing brace position made more sense actually. This will be rendered as a link labeled \"specified\".", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469720034", "createdAt": "2020-08-13T06:16:31Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/PostgresSchema.java", "diffHunk": "@@ -35,7 +35,7 @@\n /**\n  * Component that records the schema information for the {@link PostgresConnector}. The schema information contains\n  * the {@link Tables table definitions} and the Kafka Connect {@link #schemaFor(TableId) Schema}s for each table, where the\n- * {@link Schema} excludes any columns that have been {@link PostgresConnectorConfig#COLUMN_BLACKLIST specified} in the\n+ * {@link Schema} excludes any columns that have been {@link PostgresConnectorConfig#COLUMN_EXCLUDE_LIST} specified in the", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk5NTQ0MA==", "bodyText": "ok. will do", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469995440", "createdAt": "2020-08-13T14:30:02Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/PostgresSchema.java", "diffHunk": "@@ -35,7 +35,7 @@\n /**\n  * Component that records the schema information for the {@link PostgresConnector}. The schema information contains\n  * the {@link Tables table definitions} and the Kafka Connect {@link #schemaFor(TableId) Schema}s for each table, where the\n- * {@link Schema} excludes any columns that have been {@link PostgresConnectorConfig#COLUMN_BLACKLIST specified} in the\n+ * {@link Schema} excludes any columns that have been {@link PostgresConnectorConfig#COLUMN_EXCLUDE_LIST} specified in the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcyMDAzNA=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAyMDU2Ng==", "bodyText": "Done", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r470020566", "createdAt": "2020-08-13T15:04:08Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/PostgresSchema.java", "diffHunk": "@@ -35,7 +35,7 @@\n /**\n  * Component that records the schema information for the {@link PostgresConnector}. The schema information contains\n  * the {@link Tables table definitions} and the Kafka Connect {@link #schemaFor(TableId) Schema}s for each table, where the\n- * {@link Schema} excludes any columns that have been {@link PostgresConnectorConfig#COLUMN_BLACKLIST specified} in the\n+ * {@link Schema} excludes any columns that have been {@link PostgresConnectorConfig#COLUMN_EXCLUDE_LIST} specified in the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcyMDAzNA=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNTA3NDc2OnYy", "diffSide": "RIGHT", "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/TablesWithoutPrimaryKeyIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNjoxODo1M1rOG_9fMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNDozNjoxN1rOHAOh3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcyMDg4MQ==", "bodyText": "Would still prefer the static import.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469720881", "createdAt": "2020-08-13T06:18:53Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/TablesWithoutPrimaryKeyIT.java", "diffHunk": "@@ -62,6 +84,29 @@ public void shouldProcessFromSnapshot() throws Exception {\n \n     @Test\n     public void shouldProcessFromStreaming() throws Exception {\n+        start(PostgresConnector.class, TestHelper.defaultConfig()\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.NEVER)\n+                .with(PostgresConnectorConfig.SCHEMA_INCLUDE_LIST, \"nopk\")\n+                .build());\n+        assertConnectorIsRunning();\n+        waitForStreamingToStart();\n+\n+        TestHelper.execute(STATEMENTS);\n+\n+        final int expectedRecordsCount = 1 + 1 + 1;\n+\n+        TestConsumer consumer = testConsumer(expectedRecordsCount, \"nopk\");\n+        consumer.await(TestHelper.waitTimeForRecords(), TimeUnit.SECONDS);\n+        final Map<String, List<SourceRecord>> recordsByTopic = recordsByTopic(expectedRecordsCount, consumer);\n+        Assertions.assertThat(recordsByTopic.get(\"test_server.nopk.t1\").get(0).keySchema().field(\"pk\")).isNotNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAwMDA5NA==", "bodyText": "There are many occurences everywhere. I logged https://issues.redhat.com/browse/DBZ-2432 to change it everywhere, + not covering it in this PR", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r470000094", "createdAt": "2020-08-13T14:36:17Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/TablesWithoutPrimaryKeyIT.java", "diffHunk": "@@ -62,6 +84,29 @@ public void shouldProcessFromSnapshot() throws Exception {\n \n     @Test\n     public void shouldProcessFromStreaming() throws Exception {\n+        start(PostgresConnector.class, TestHelper.defaultConfig()\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.NEVER)\n+                .with(PostgresConnectorConfig.SCHEMA_INCLUDE_LIST, \"nopk\")\n+                .build());\n+        assertConnectorIsRunning();\n+        waitForStreamingToStart();\n+\n+        TestHelper.execute(STATEMENTS);\n+\n+        final int expectedRecordsCount = 1 + 1 + 1;\n+\n+        TestConsumer consumer = testConsumer(expectedRecordsCount, \"nopk\");\n+        consumer.await(TestHelper.waitTimeForRecords(), TimeUnit.SECONDS);\n+        final Map<String, List<SourceRecord>> recordsByTopic = recordsByTopic(expectedRecordsCount, consumer);\n+        Assertions.assertThat(recordsByTopic.get(\"test_server.nopk.t1\").get(0).keySchema().field(\"pk\")).isNotNull();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcyMDg4MQ=="}, "originalCommit": null, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNTA3OTY1OnYy", "diffSide": "RIGHT", "path": "debezium-core/src/main/java/io/debezium/config/Configuration.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNjoyMDo1MFrOG_9h_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTowNDoyNFrOHAPyqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcyMTU5OQ==", "bodyText": "I didn't check, do we log a warning somewhere when using the old names?", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r469721599", "createdAt": "2020-08-13T06:20:50Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/config/Configuration.java", "diffHunk": "@@ -2097,4 +2097,33 @@ default void forEachMatchingFieldName(Pattern regex, BiConsumer<String, String>\n     default <T> void forEach(BiConsumer<String, String> function) {\n         this.asMap().forEach(function);\n     }\n+\n+    /**\n+     * Returns the string config value from newProperty config field if it's set or its default value when it's not\n+     * set/null.If both are null it returns the value of the oldProperty config field, or its default value when it's\n+     * null.\n+     * This fallback only works for newProperty fields that have a null / not-set default value!\n+     *\n+     * @param newProperty the new property config field\n+     * @param oldProperty the old / fallback property config field\n+     * @return the evaluated value\n+     */\n+    default String getFallbackStringProperty(Field newProperty, Field oldProperty) {\n+        return getString(newProperty, () -> getString(oldProperty));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAwMTI5MA==", "bodyText": "no, I will add logging to the lambda.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r470001290", "createdAt": "2020-08-13T14:37:56Z", "author": {"login": "rk3rn3r"}, "path": "debezium-core/src/main/java/io/debezium/config/Configuration.java", "diffHunk": "@@ -2097,4 +2097,33 @@ default void forEachMatchingFieldName(Pattern regex, BiConsumer<String, String>\n     default <T> void forEach(BiConsumer<String, String> function) {\n         this.asMap().forEach(function);\n     }\n+\n+    /**\n+     * Returns the string config value from newProperty config field if it's set or its default value when it's not\n+     * set/null.If both are null it returns the value of the oldProperty config field, or its default value when it's\n+     * null.\n+     * This fallback only works for newProperty fields that have a null / not-set default value!\n+     *\n+     * @param newProperty the new property config field\n+     * @param oldProperty the old / fallback property config field\n+     * @return the evaluated value\n+     */\n+    default String getFallbackStringProperty(Field newProperty, Field oldProperty) {\n+        return getString(newProperty, () -> getString(oldProperty));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcyMTU5OQ=="}, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAyMDc3Nw==", "bodyText": "Done", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r470020777", "createdAt": "2020-08-13T15:04:24Z", "author": {"login": "rk3rn3r"}, "path": "debezium-core/src/main/java/io/debezium/config/Configuration.java", "diffHunk": "@@ -2097,4 +2097,33 @@ default void forEachMatchingFieldName(Pattern regex, BiConsumer<String, String>\n     default <T> void forEach(BiConsumer<String, String> function) {\n         this.asMap().forEach(function);\n     }\n+\n+    /**\n+     * Returns the string config value from newProperty config field if it's set or its default value when it's not\n+     * set/null.If both are null it returns the value of the oldProperty config field, or its default value when it's\n+     * null.\n+     * This fallback only works for newProperty fields that have a null / not-set default value!\n+     *\n+     * @param newProperty the new property config field\n+     * @param oldProperty the old / fallback property config field\n+     * @return the evaluated value\n+     */\n+    default String getFallbackStringProperty(Field newProperty, Field oldProperty) {\n+        return getString(newProperty, () -> getString(oldProperty));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcyMTU5OQ=="}, "originalCommit": null, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTczMDMzOnYy", "diffSide": "RIGHT", "path": "debezium-core/src/main/java/io/debezium/config/Configuration.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNjozOTo1NFrOHApR4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTo1MToxN1rOHDNwKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQzODM3MA==", "bodyText": "Let's better avoid getting a new logger instance for each call and put it into a static field as done elsewhere.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r470438370", "createdAt": "2020-08-14T06:39:54Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/config/Configuration.java", "diffHunk": "@@ -2097,4 +2097,47 @@ default void forEachMatchingFieldName(Pattern regex, BiConsumer<String, String>\n     default <T> void forEach(BiConsumer<String, String> function) {\n         this.asMap().forEach(function);\n     }\n+\n+    /**\n+     * Returns the string config value from newProperty config field if it's set or its default value when it's not\n+     * set/null.If both are null it returns the value of the oldProperty config field, or its default value when it's\n+     * null.\n+     * This fallback only works for newProperty fields that have a null / not-set default value!\n+     *\n+     * @param newProperty the new property config field\n+     * @param oldProperty the old / fallback property config field\n+     * @return the evaluated value\n+     */\n+    default String getFallbackStringProperty(Field newProperty, Field oldProperty) {\n+        return getString(\n+                newProperty,\n+                () -> {\n+                    LoggerFactory.getLogger(Configuration.class).warn(\"Using configuration property \\\"\" + oldProperty.name()\n+                            + \"\\\" is deprecated and will be removed in future versions. Please use \\\"\" + newProperty.name()\n+                            + \"\\\" instead.\");\n+                    return getString(oldProperty);\n+                });\n+    }\n+\n+    /**\n+     * Returns the string config value of the provided Configuration from newProperty config field if it's set or its\n+     * default value when it's not set/null.If both are null it returns the value of the oldProperty config field, or\n+     * its default value when it's null.\n+     * This fallback only works for newProperty fields that have a null / not-set default value!\n+     *\n+     * @param newProperty the new property config field\n+     * @param oldProperty the old / fallback property config field\n+     * @return the evaluated value\n+     */\n+    static String getFallbackStringProperty(Configuration config, Field newProperty, Field oldProperty) {\n+        return config.getString(\n+                newProperty,\n+                () -> {\n+                    LoggerFactory.getLogger(Configuration.class).warn(\"Using configuration property \\\"\" + oldProperty.name()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ0MTgxMg==", "bodyText": "Same in the other method.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r470441812", "createdAt": "2020-08-14T06:49:56Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/config/Configuration.java", "diffHunk": "@@ -2097,4 +2097,47 @@ default void forEachMatchingFieldName(Pattern regex, BiConsumer<String, String>\n     default <T> void forEach(BiConsumer<String, String> function) {\n         this.asMap().forEach(function);\n     }\n+\n+    /**\n+     * Returns the string config value from newProperty config field if it's set or its default value when it's not\n+     * set/null.If both are null it returns the value of the oldProperty config field, or its default value when it's\n+     * null.\n+     * This fallback only works for newProperty fields that have a null / not-set default value!\n+     *\n+     * @param newProperty the new property config field\n+     * @param oldProperty the old / fallback property config field\n+     * @return the evaluated value\n+     */\n+    default String getFallbackStringProperty(Field newProperty, Field oldProperty) {\n+        return getString(\n+                newProperty,\n+                () -> {\n+                    LoggerFactory.getLogger(Configuration.class).warn(\"Using configuration property \\\"\" + oldProperty.name()\n+                            + \"\\\" is deprecated and will be removed in future versions. Please use \\\"\" + newProperty.name()\n+                            + \"\\\" instead.\");\n+                    return getString(oldProperty);\n+                });\n+    }\n+\n+    /**\n+     * Returns the string config value of the provided Configuration from newProperty config field if it's set or its\n+     * default value when it's not set/null.If both are null it returns the value of the oldProperty config field, or\n+     * its default value when it's null.\n+     * This fallback only works for newProperty fields that have a null / not-set default value!\n+     *\n+     * @param newProperty the new property config field\n+     * @param oldProperty the old / fallback property config field\n+     * @return the evaluated value\n+     */\n+    static String getFallbackStringProperty(Configuration config, Field newProperty, Field oldProperty) {\n+        return config.getString(\n+                newProperty,\n+                () -> {\n+                    LoggerFactory.getLogger(Configuration.class).warn(\"Using configuration property \\\"\" + oldProperty.name()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQzODM3MA=="}, "originalCommit": null, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU0NDQ4OA==", "bodyText": "Where to get the logger from? I put it there and it's in prod only called when loading config.\nThis is an interface. The only other option would be a public CONFIGURATION_LOGGER accessible from everywhere. Are you fine with that?", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r470544488", "createdAt": "2020-08-14T10:28:50Z", "author": {"login": "rk3rn3r"}, "path": "debezium-core/src/main/java/io/debezium/config/Configuration.java", "diffHunk": "@@ -2097,4 +2097,47 @@ default void forEachMatchingFieldName(Pattern regex, BiConsumer<String, String>\n     default <T> void forEach(BiConsumer<String, String> function) {\n         this.asMap().forEach(function);\n     }\n+\n+    /**\n+     * Returns the string config value from newProperty config field if it's set or its default value when it's not\n+     * set/null.If both are null it returns the value of the oldProperty config field, or its default value when it's\n+     * null.\n+     * This fallback only works for newProperty fields that have a null / not-set default value!\n+     *\n+     * @param newProperty the new property config field\n+     * @param oldProperty the old / fallback property config field\n+     * @return the evaluated value\n+     */\n+    default String getFallbackStringProperty(Field newProperty, Field oldProperty) {\n+        return getString(\n+                newProperty,\n+                () -> {\n+                    LoggerFactory.getLogger(Configuration.class).warn(\"Using configuration property \\\"\" + oldProperty.name()\n+                            + \"\\\" is deprecated and will be removed in future versions. Please use \\\"\" + newProperty.name()\n+                            + \"\\\" instead.\");\n+                    return getString(oldProperty);\n+                });\n+    }\n+\n+    /**\n+     * Returns the string config value of the provided Configuration from newProperty config field if it's set or its\n+     * default value when it's not set/null.If both are null it returns the value of the oldProperty config field, or\n+     * its default value when it's null.\n+     * This fallback only works for newProperty fields that have a null / not-set default value!\n+     *\n+     * @param newProperty the new property config field\n+     * @param oldProperty the old / fallback property config field\n+     * @return the evaluated value\n+     */\n+    static String getFallbackStringProperty(Configuration config, Field newProperty, Field oldProperty) {\n+        return config.getString(\n+                newProperty,\n+                () -> {\n+                    LoggerFactory.getLogger(Configuration.class).warn(\"Using configuration property \\\"\" + oldProperty.name()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQzODM3MA=="}, "originalCommit": null, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcyMDYwMw==", "bodyText": "@rk3rn3r  The best approach would probably be an auxilliary io.debezium.config.Loggers with package protected members but I feel it would be a little bit of overengineering. I think public static attribute is acceptable in this case.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r472720603", "createdAt": "2020-08-19T05:38:05Z", "author": {"login": "jpechane"}, "path": "debezium-core/src/main/java/io/debezium/config/Configuration.java", "diffHunk": "@@ -2097,4 +2097,47 @@ default void forEachMatchingFieldName(Pattern regex, BiConsumer<String, String>\n     default <T> void forEach(BiConsumer<String, String> function) {\n         this.asMap().forEach(function);\n     }\n+\n+    /**\n+     * Returns the string config value from newProperty config field if it's set or its default value when it's not\n+     * set/null.If both are null it returns the value of the oldProperty config field, or its default value when it's\n+     * null.\n+     * This fallback only works for newProperty fields that have a null / not-set default value!\n+     *\n+     * @param newProperty the new property config field\n+     * @param oldProperty the old / fallback property config field\n+     * @return the evaluated value\n+     */\n+    default String getFallbackStringProperty(Field newProperty, Field oldProperty) {\n+        return getString(\n+                newProperty,\n+                () -> {\n+                    LoggerFactory.getLogger(Configuration.class).warn(\"Using configuration property \\\"\" + oldProperty.name()\n+                            + \"\\\" is deprecated and will be removed in future versions. Please use \\\"\" + newProperty.name()\n+                            + \"\\\" instead.\");\n+                    return getString(oldProperty);\n+                });\n+    }\n+\n+    /**\n+     * Returns the string config value of the provided Configuration from newProperty config field if it's set or its\n+     * default value when it's not set/null.If both are null it returns the value of the oldProperty config field, or\n+     * its default value when it's null.\n+     * This fallback only works for newProperty fields that have a null / not-set default value!\n+     *\n+     * @param newProperty the new property config field\n+     * @param oldProperty the old / fallback property config field\n+     * @return the evaluated value\n+     */\n+    static String getFallbackStringProperty(Configuration config, Field newProperty, Field oldProperty) {\n+        return config.getString(\n+                newProperty,\n+                () -> {\n+                    LoggerFactory.getLogger(Configuration.class).warn(\"Using configuration property \\\"\" + oldProperty.name()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQzODM3MA=="}, "originalCommit": null, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAwNTM0Mg==", "bodyText": "Oh yes, interesting solution. But I agree, then I will revert to my previous version with the public member. thanks for the feedback @jpechane", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r473005342", "createdAt": "2020-08-19T12:53:34Z", "author": {"login": "rk3rn3r"}, "path": "debezium-core/src/main/java/io/debezium/config/Configuration.java", "diffHunk": "@@ -2097,4 +2097,47 @@ default void forEachMatchingFieldName(Pattern regex, BiConsumer<String, String>\n     default <T> void forEach(BiConsumer<String, String> function) {\n         this.asMap().forEach(function);\n     }\n+\n+    /**\n+     * Returns the string config value from newProperty config field if it's set or its default value when it's not\n+     * set/null.If both are null it returns the value of the oldProperty config field, or its default value when it's\n+     * null.\n+     * This fallback only works for newProperty fields that have a null / not-set default value!\n+     *\n+     * @param newProperty the new property config field\n+     * @param oldProperty the old / fallback property config field\n+     * @return the evaluated value\n+     */\n+    default String getFallbackStringProperty(Field newProperty, Field oldProperty) {\n+        return getString(\n+                newProperty,\n+                () -> {\n+                    LoggerFactory.getLogger(Configuration.class).warn(\"Using configuration property \\\"\" + oldProperty.name()\n+                            + \"\\\" is deprecated and will be removed in future versions. Please use \\\"\" + newProperty.name()\n+                            + \"\\\" instead.\");\n+                    return getString(oldProperty);\n+                });\n+    }\n+\n+    /**\n+     * Returns the string config value of the provided Configuration from newProperty config field if it's set or its\n+     * default value when it's not set/null.If both are null it returns the value of the oldProperty config field, or\n+     * its default value when it's null.\n+     * This fallback only works for newProperty fields that have a null / not-set default value!\n+     *\n+     * @param newProperty the new property config field\n+     * @param oldProperty the old / fallback property config field\n+     * @return the evaluated value\n+     */\n+    static String getFallbackStringProperty(Configuration config, Field newProperty, Field oldProperty) {\n+        return config.getString(\n+                newProperty,\n+                () -> {\n+                    LoggerFactory.getLogger(Configuration.class).warn(\"Using configuration property \\\"\" + oldProperty.name()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQzODM3MA=="}, "originalCommit": null, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEzMzA5Ng==", "bodyText": "Done", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r473133096", "createdAt": "2020-08-19T15:51:17Z", "author": {"login": "rk3rn3r"}, "path": "debezium-core/src/main/java/io/debezium/config/Configuration.java", "diffHunk": "@@ -2097,4 +2097,47 @@ default void forEachMatchingFieldName(Pattern regex, BiConsumer<String, String>\n     default <T> void forEach(BiConsumer<String, String> function) {\n         this.asMap().forEach(function);\n     }\n+\n+    /**\n+     * Returns the string config value from newProperty config field if it's set or its default value when it's not\n+     * set/null.If both are null it returns the value of the oldProperty config field, or its default value when it's\n+     * null.\n+     * This fallback only works for newProperty fields that have a null / not-set default value!\n+     *\n+     * @param newProperty the new property config field\n+     * @param oldProperty the old / fallback property config field\n+     * @return the evaluated value\n+     */\n+    default String getFallbackStringProperty(Field newProperty, Field oldProperty) {\n+        return getString(\n+                newProperty,\n+                () -> {\n+                    LoggerFactory.getLogger(Configuration.class).warn(\"Using configuration property \\\"\" + oldProperty.name()\n+                            + \"\\\" is deprecated and will be removed in future versions. Please use \\\"\" + newProperty.name()\n+                            + \"\\\" instead.\");\n+                    return getString(oldProperty);\n+                });\n+    }\n+\n+    /**\n+     * Returns the string config value of the provided Configuration from newProperty config field if it's set or its\n+     * default value when it's not set/null.If both are null it returns the value of the oldProperty config field, or\n+     * its default value when it's null.\n+     * This fallback only works for newProperty fields that have a null / not-set default value!\n+     *\n+     * @param newProperty the new property config field\n+     * @param oldProperty the old / fallback property config field\n+     * @return the evaluated value\n+     */\n+    static String getFallbackStringProperty(Configuration config, Field newProperty, Field oldProperty) {\n+        return config.getString(\n+                newProperty,\n+                () -> {\n+                    LoggerFactory.getLogger(Configuration.class).warn(\"Using configuration property \\\"\" + oldProperty.name()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQzODM3MA=="}, "originalCommit": null, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTczNDk4OnYy", "diffSide": "RIGHT", "path": "debezium-core/src/main/java/io/debezium/schema/DatabaseSchema.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNjo0MTo1NVrOHApUrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMTo0MTozNVrOHAxjgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQzOTA4NQ==", "bodyText": "For MongoDB we shouldn't talk about tables. Perhaps \"table/collections\"? and please replace \"monitor\" with \"to capture changes from\". We want to get away from \"monitor\" in this context, and keep that for, well, monitoring the connectors via JMX etc.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r470439085", "createdAt": "2020-08-14T06:41:55Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/schema/DatabaseSchema.java", "diffHunk": "@@ -15,6 +15,8 @@\n  */\n public interface DatabaseSchema<I extends DataCollectionId> {\n \n+    String NO_CAPTURED_DATA_COLLECTIONS_WARNING = \"After applying include/exclude list filters there are no tables to monitor, please check your configuration\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU3MzU1Nw==", "bodyText": "will do String NO_CAPTURED_DATA_COLLECTIONS_WARNING = \"After applying include/exclude list filters there's nothing selected to capture changes from, please check your configuration\";", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r470573557", "createdAt": "2020-08-14T11:40:43Z", "author": {"login": "rk3rn3r"}, "path": "debezium-core/src/main/java/io/debezium/schema/DatabaseSchema.java", "diffHunk": "@@ -15,6 +15,8 @@\n  */\n public interface DatabaseSchema<I extends DataCollectionId> {\n \n+    String NO_CAPTURED_DATA_COLLECTIONS_WARNING = \"After applying include/exclude list filters there are no tables to monitor, please check your configuration\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQzOTA4NQ=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU3Mzk1NA==", "bodyText": "Done", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r470573954", "createdAt": "2020-08-14T11:41:35Z", "author": {"login": "rk3rn3r"}, "path": "debezium-core/src/main/java/io/debezium/schema/DatabaseSchema.java", "diffHunk": "@@ -15,6 +15,8 @@\n  */\n public interface DatabaseSchema<I extends DataCollectionId> {\n \n+    String NO_CAPTURED_DATA_COLLECTIONS_WARNING = \"After applying include/exclude list filters there are no tables to monitor, please check your configuration\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQzOTA4NQ=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTczODAwOnYy", "diffSide": "LEFT", "path": "debezium-testing/debezium-testing-openshift/src/test/java/io/debezium/testing/openshift/resources/ConnectorFactories.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNjo0MzowOFrOHApWZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjo1MjoyN1rOHDQhrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQzOTUyNQ==", "bodyText": "@jcechace, can you check out this one. This could actually be a problem when using the current test suite with older versions as I think you do?", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r470439525", "createdAt": "2020-08-14T06:43:08Z", "author": {"login": "gunnarmorling"}, "path": "debezium-testing/debezium-testing-openshift/src/test/java/io/debezium/testing/openshift/resources/ConnectorFactories.java", "diffHunk": "@@ -29,7 +29,7 @@ public ConnectorConfigBuilder mysql() {\n                 .put(\"database.user\", ConfigProperties.DATABASE_MYSQL_DBZ_USERNAME)\n                 .put(\"database.password\", ConfigProperties.DATABASE_MYSQL_DBZ_PASSWORD)\n                 .put(\"database.server.name\", \"mysqldb\") // this should be overwritten with unique name\n-                .put(\"database.whitelist\", \"inventory\") // might want to change", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMxMjEzOQ==", "bodyText": "Removing it certainly is not a good idea :). I'd say replace it with the new property and I will fix backward compatibility in separate PR.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r471312139", "createdAt": "2020-08-17T08:09:57Z", "author": {"login": "jcechace"}, "path": "debezium-testing/debezium-testing-openshift/src/test/java/io/debezium/testing/openshift/resources/ConnectorFactories.java", "diffHunk": "@@ -29,7 +29,7 @@ public ConnectorConfigBuilder mysql() {\n                 .put(\"database.user\", ConfigProperties.DATABASE_MYSQL_DBZ_USERNAME)\n                 .put(\"database.password\", ConfigProperties.DATABASE_MYSQL_DBZ_PASSWORD)\n                 .put(\"database.server.name\", \"mysqldb\") // this should be overwritten with unique name\n-                .put(\"database.whitelist\", \"inventory\") // might want to change", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQzOTUyNQ=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMxMzU4OQ==", "bodyText": "it's not removed @jcechace. Look at the full diff. Just Github diff here shows it in a bad way", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r471313589", "createdAt": "2020-08-17T08:12:38Z", "author": {"login": "rk3rn3r"}, "path": "debezium-testing/debezium-testing-openshift/src/test/java/io/debezium/testing/openshift/resources/ConnectorFactories.java", "diffHunk": "@@ -29,7 +29,7 @@ public ConnectorConfigBuilder mysql() {\n                 .put(\"database.user\", ConfigProperties.DATABASE_MYSQL_DBZ_USERNAME)\n                 .put(\"database.password\", ConfigProperties.DATABASE_MYSQL_DBZ_PASSWORD)\n                 .put(\"database.server.name\", \"mysqldb\") // this should be overwritten with unique name\n-                .put(\"database.whitelist\", \"inventory\") // might want to change", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQzOTUyNQ=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMxNzM4Nw==", "bodyText": "Ah, I see. It should be all right then. Tis should be OK then. The question is whether are we going to backport it to downstream? If yes then I certainly do need to update the compatibility earlier. Anyway I'd solve this in separate PR", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r471317387", "createdAt": "2020-08-17T08:19:15Z", "author": {"login": "jcechace"}, "path": "debezium-testing/debezium-testing-openshift/src/test/java/io/debezium/testing/openshift/resources/ConnectorFactories.java", "diffHunk": "@@ -29,7 +29,7 @@ public ConnectorConfigBuilder mysql() {\n                 .put(\"database.user\", ConfigProperties.DATABASE_MYSQL_DBZ_USERNAME)\n                 .put(\"database.password\", ConfigProperties.DATABASE_MYSQL_DBZ_PASSWORD)\n                 .put(\"database.server.name\", \"mysqldb\") // this should be overwritten with unique name\n-                .put(\"database.whitelist\", \"inventory\") // might want to change", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQzOTUyNQ=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMyMDU2OA==", "bodyText": "@jpechane do you happen to know if this will be backported?", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r471320568", "createdAt": "2020-08-17T08:25:28Z", "author": {"login": "rk3rn3r"}, "path": "debezium-testing/debezium-testing-openshift/src/test/java/io/debezium/testing/openshift/resources/ConnectorFactories.java", "diffHunk": "@@ -29,7 +29,7 @@ public ConnectorConfigBuilder mysql() {\n                 .put(\"database.user\", ConfigProperties.DATABASE_MYSQL_DBZ_USERNAME)\n                 .put(\"database.password\", ConfigProperties.DATABASE_MYSQL_DBZ_PASSWORD)\n                 .put(\"database.server.name\", \"mysqldb\") // this should be overwritten with unique name\n-                .put(\"database.whitelist\", \"inventory\") // might want to change", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQzOTUyNQ=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyMjU2OQ==", "bodyText": "@jpechane \ud83d\udc46", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r473122569", "createdAt": "2020-08-19T15:36:03Z", "author": {"login": "rk3rn3r"}, "path": "debezium-testing/debezium-testing-openshift/src/test/java/io/debezium/testing/openshift/resources/ConnectorFactories.java", "diffHunk": "@@ -29,7 +29,7 @@ public ConnectorConfigBuilder mysql() {\n                 .put(\"database.user\", ConfigProperties.DATABASE_MYSQL_DBZ_USERNAME)\n                 .put(\"database.password\", ConfigProperties.DATABASE_MYSQL_DBZ_PASSWORD)\n                 .put(\"database.server.name\", \"mysqldb\") // this should be overwritten with unique name\n-                .put(\"database.whitelist\", \"inventory\") // might want to change", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQzOTUyNQ=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE3ODU0MQ==", "bodyText": "@rk3rn3r, I don't think this is something we're going to back-port.  It's meant to be a part of 1.3+ afaik.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r473178541", "createdAt": "2020-08-19T16:52:27Z", "author": {"login": "Naros"}, "path": "debezium-testing/debezium-testing-openshift/src/test/java/io/debezium/testing/openshift/resources/ConnectorFactories.java", "diffHunk": "@@ -29,7 +29,7 @@ public ConnectorConfigBuilder mysql() {\n                 .put(\"database.user\", ConfigProperties.DATABASE_MYSQL_DBZ_USERNAME)\n                 .put(\"database.password\", ConfigProperties.DATABASE_MYSQL_DBZ_PASSWORD)\n                 .put(\"database.server.name\", \"mysqldb\") // this should be overwritten with unique name\n-                .put(\"database.whitelist\", \"inventory\") // might want to change", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQzOTUyNQ=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTc1MjQxOnYy", "diffSide": "RIGHT", "path": "debezium-core/src/main/java/io/debezium/config/Configuration.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNjo0OTozOVrOHApe8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNToyODo1M1rOHDM0Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ0MTcxMw==", "bodyText": "Why is this not static final any longer? It really should be.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r470441713", "createdAt": "2020-08-14T06:49:39Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/config/Configuration.java", "diffHunk": "@@ -60,7 +60,7 @@\n @Immutable\n public interface Configuration {\n \n-    public static final Pattern PASSWORD_PATTERN = Pattern.compile(\".*password$|.*sasl\\\\.jaas\\\\.config$\", Pattern.CASE_INSENSITIVE);\n+    Pattern PASSWORD_PATTERN = Pattern.compile(\".*password$|.*sasl\\\\.jaas\\\\.config$\", Pattern.CASE_INSENSITIVE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU0NTA0Ng==", "bodyText": "It's an interface. every member is public static final anyway.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r470545046", "createdAt": "2020-08-14T10:30:08Z", "author": {"login": "rk3rn3r"}, "path": "debezium-core/src/main/java/io/debezium/config/Configuration.java", "diffHunk": "@@ -60,7 +60,7 @@\n @Immutable\n public interface Configuration {\n \n-    public static final Pattern PASSWORD_PATTERN = Pattern.compile(\".*password$|.*sasl\\\\.jaas\\\\.config$\", Pattern.CASE_INSENSITIVE);\n+    Pattern PASSWORD_PATTERN = Pattern.compile(\".*password$|.*sasl\\\\.jaas\\\\.config$\", Pattern.CASE_INSENSITIVE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ0MTcxMw=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcxODMyMQ==", "bodyText": "@rk3rn3r  Please remove this change as in other intefaces we follow the same convention.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r472718321", "createdAt": "2020-08-19T05:34:14Z", "author": {"login": "jpechane"}, "path": "debezium-core/src/main/java/io/debezium/config/Configuration.java", "diffHunk": "@@ -60,7 +60,7 @@\n @Immutable\n public interface Configuration {\n \n-    public static final Pattern PASSWORD_PATTERN = Pattern.compile(\".*password$|.*sasl\\\\.jaas\\\\.config$\", Pattern.CASE_INSENSITIVE);\n+    Pattern PASSWORD_PATTERN = Pattern.compile(\".*password$|.*sasl\\\\.jaas\\\\.config$\", Pattern.CASE_INSENSITIVE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ0MTcxMw=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk5MzkwOQ==", "bodyText": "@jpechane what do you mean? this code doesn't change anything? every member var already is public static final\nShouldn't we instead create a task to clean the other code as well?", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r472993909", "createdAt": "2020-08-19T12:34:36Z", "author": {"login": "rk3rn3r"}, "path": "debezium-core/src/main/java/io/debezium/config/Configuration.java", "diffHunk": "@@ -60,7 +60,7 @@\n @Immutable\n public interface Configuration {\n \n-    public static final Pattern PASSWORD_PATTERN = Pattern.compile(\".*password$|.*sasl\\\\.jaas\\\\.config$\", Pattern.CASE_INSENSITIVE);\n+    Pattern PASSWORD_PATTERN = Pattern.compile(\".*password$|.*sasl\\\\.jaas\\\\.config$\", Pattern.CASE_INSENSITIVE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ0MTcxMw=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAwNTMwMw==", "bodyText": "@rk3rn3r ok, my proposal then is to keep the line as is and create a task with proposal of removing those modifiers globally. If agreed upon we can add formatter rule to enforce it.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r473005303", "createdAt": "2020-08-19T12:53:30Z", "author": {"login": "jpechane"}, "path": "debezium-core/src/main/java/io/debezium/config/Configuration.java", "diffHunk": "@@ -60,7 +60,7 @@\n @Immutable\n public interface Configuration {\n \n-    public static final Pattern PASSWORD_PATTERN = Pattern.compile(\".*password$|.*sasl\\\\.jaas\\\\.config$\", Pattern.CASE_INSENSITIVE);\n+    Pattern PASSWORD_PATTERN = Pattern.compile(\".*password$|.*sasl\\\\.jaas\\\\.config$\", Pattern.CASE_INSENSITIVE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ0MTcxMw=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzExNzcwMg==", "bodyText": "I filed https://issues.redhat.com/browse/DBZ-2439 for this \u2764\ufe0f", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r473117702", "createdAt": "2020-08-19T15:28:53Z", "author": {"login": "rk3rn3r"}, "path": "debezium-core/src/main/java/io/debezium/config/Configuration.java", "diffHunk": "@@ -60,7 +60,7 @@\n @Immutable\n public interface Configuration {\n \n-    public static final Pattern PASSWORD_PATTERN = Pattern.compile(\".*password$|.*sasl\\\\.jaas\\\\.config$\", Pattern.CASE_INSENSITIVE);\n+    Pattern PASSWORD_PATTERN = Pattern.compile(\".*password$|.*sasl\\\\.jaas\\\\.config$\", Pattern.CASE_INSENSITIVE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ0MTcxMw=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NTg5OTkxOnYy", "diffSide": "RIGHT", "path": "debezium-testing/debezium-testing-openshift/src/test/java/io/debezium/testing/openshift/resources/ConnectorFactories.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwODoxNDoxMFrOHBev5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwODoxNDoxMFrOHBev5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMxNDQwNA==", "bodyText": "watch this! @jcechace", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r471314404", "createdAt": "2020-08-17T08:14:10Z", "author": {"login": "rk3rn3r"}, "path": "debezium-testing/debezium-testing-openshift/src/test/java/io/debezium/testing/openshift/resources/ConnectorFactories.java", "diffHunk": "@@ -29,7 +29,7 @@ public ConnectorConfigBuilder mysql() {\n                 .put(\"database.user\", ConfigProperties.DATABASE_MYSQL_DBZ_USERNAME)\n                 .put(\"database.password\", ConfigProperties.DATABASE_MYSQL_DBZ_PASSWORD)\n                 .put(\"database.server.name\", \"mysqldb\") // this should be overwritten with unique name\n-                .put(\"database.whitelist\", \"inventory\") // might want to change\n+                .put(\"database.include.list\", \"inventory\") // might want to change", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDg2MjAxOnYy", "diffSide": "RIGHT", "path": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/MySqlConnectorConfig.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNTo0NTozMlrOHC04KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTo1NDoyMlrOHDN4HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcyNTU0NA==", "bodyText": "@rk3rn3r Shouldn't be the importance of oboslete fields reduced to LOW? It might have an impact on UI side.\nAlso I recommend to\n\nUse withInvisibleRecommender\nPrefix DisplayName with Deprecated:  prefix", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r472725544", "createdAt": "2020-08-19T05:45:32Z", "author": {"login": "jpechane"}, "path": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/MySqlConnectorConfig.java", "diffHunk": "@@ -616,50 +619,75 @@ public static GtidNewChannelPosition parse(String value, String defaultValue) {\n             .withImportance(Importance.LOW)\n             .withValidation(Field::isClassName)\n             .withDescription(\"JDBC Driver class name used to connect to the MySQL database server.\");\n+\n     /**\n      * A comma-separated list of regular expressions that match database names to be monitored.\n-     * May not be used with {@link #DATABASE_BLACKLIST}.\n+     * Must not be used with {@link #DATABASE_BLACKLIST}.\n      */\n-    public static final Field DATABASE_WHITELIST = Field.create(DATABASE_WHITELIST_NAME)\n+    public static final Field DATABASE_INCLUDE_LIST = Field.create(DATABASE_INCLUDE_LIST_NAME)\n             .withDisplayName(\"Databases\")\n             .withType(Type.LIST)\n             .withWidth(Width.LONG)\n             .withImportance(Importance.HIGH)\n-            .withDependents(TABLE_WHITELIST_NAME)\n+            .withDependents(TABLE_INCLUDE_LIST_NAME, TABLE_WHITELIST_NAME)\n             .withDescription(\"The databases for which changes are to be captured\");\n \n+    /**\n+     * Old, backwards-compatible \"whitelist\" property.\n+     */\n+    public static final Field DATABASE_WHITELIST = Field.create(DATABASE_WHITELIST_NAME)\n+            .withDisplayName(\"Databases\")\n+            .withType(Type.LIST)\n+            .withWidth(Width.LONG)\n+            .withImportance(Importance.HIGH)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk5ODg3MQ==", "bodyText": "Yep, I missed that change. Will do!\nAdding the InvisibleRecommender is a good idea!", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r472998871", "createdAt": "2020-08-19T12:42:53Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/MySqlConnectorConfig.java", "diffHunk": "@@ -616,50 +619,75 @@ public static GtidNewChannelPosition parse(String value, String defaultValue) {\n             .withImportance(Importance.LOW)\n             .withValidation(Field::isClassName)\n             .withDescription(\"JDBC Driver class name used to connect to the MySQL database server.\");\n+\n     /**\n      * A comma-separated list of regular expressions that match database names to be monitored.\n-     * May not be used with {@link #DATABASE_BLACKLIST}.\n+     * Must not be used with {@link #DATABASE_BLACKLIST}.\n      */\n-    public static final Field DATABASE_WHITELIST = Field.create(DATABASE_WHITELIST_NAME)\n+    public static final Field DATABASE_INCLUDE_LIST = Field.create(DATABASE_INCLUDE_LIST_NAME)\n             .withDisplayName(\"Databases\")\n             .withType(Type.LIST)\n             .withWidth(Width.LONG)\n             .withImportance(Importance.HIGH)\n-            .withDependents(TABLE_WHITELIST_NAME)\n+            .withDependents(TABLE_INCLUDE_LIST_NAME, TABLE_WHITELIST_NAME)\n             .withDescription(\"The databases for which changes are to be captured\");\n \n+    /**\n+     * Old, backwards-compatible \"whitelist\" property.\n+     */\n+    public static final Field DATABASE_WHITELIST = Field.create(DATABASE_WHITELIST_NAME)\n+            .withDisplayName(\"Databases\")\n+            .withType(Type.LIST)\n+            .withWidth(Width.LONG)\n+            .withImportance(Importance.HIGH)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcyNTU0NA=="}, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEzNTEzMg==", "bodyText": "Done: applied the prefix and InvisibleRecommender everywhere", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r473135132", "createdAt": "2020-08-19T15:54:22Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/MySqlConnectorConfig.java", "diffHunk": "@@ -616,50 +619,75 @@ public static GtidNewChannelPosition parse(String value, String defaultValue) {\n             .withImportance(Importance.LOW)\n             .withValidation(Field::isClassName)\n             .withDescription(\"JDBC Driver class name used to connect to the MySQL database server.\");\n+\n     /**\n      * A comma-separated list of regular expressions that match database names to be monitored.\n-     * May not be used with {@link #DATABASE_BLACKLIST}.\n+     * Must not be used with {@link #DATABASE_BLACKLIST}.\n      */\n-    public static final Field DATABASE_WHITELIST = Field.create(DATABASE_WHITELIST_NAME)\n+    public static final Field DATABASE_INCLUDE_LIST = Field.create(DATABASE_INCLUDE_LIST_NAME)\n             .withDisplayName(\"Databases\")\n             .withType(Type.LIST)\n             .withWidth(Width.LONG)\n             .withImportance(Importance.HIGH)\n-            .withDependents(TABLE_WHITELIST_NAME)\n+            .withDependents(TABLE_INCLUDE_LIST_NAME, TABLE_WHITELIST_NAME)\n             .withDescription(\"The databases for which changes are to be captured\");\n \n+    /**\n+     * Old, backwards-compatible \"whitelist\" property.\n+     */\n+    public static final Field DATABASE_WHITELIST = Field.create(DATABASE_WHITELIST_NAME)\n+            .withDisplayName(\"Databases\")\n+            .withType(Type.LIST)\n+            .withWidth(Width.LONG)\n+            .withImportance(Importance.HIGH)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcyNTU0NA=="}, "originalCommit": null, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDg5MjczOnYy", "diffSide": "RIGHT", "path": "debezium-connector-mongodb/src/main/java/io/debezium/connector/mongodb/MongoDbConnectorConfig.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNTo1MzowM1rOHC1L8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwOTo0Njo0MFrOHD4DlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjczMDYxMA==", "bodyText": "@rk3rn3r Should not be invisible blacklist, not exclude?", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r472730610", "createdAt": "2020-08-19T05:53:03Z", "author": {"login": "jpechane"}, "path": "debezium-connector-mongodb/src/main/java/io/debezium/connector/mongodb/MongoDbConnectorConfig.java", "diffHunk": "@@ -236,47 +239,89 @@ public static SnapshotMode parse(String value, String defaultValue) {\n \n     /**\n      * A comma-separated list of regular expressions that match the databases to be monitored.\n-     * May not be used with {@link #DATABASE_BLACKLIST}.\n+     * Must not be used with {@link #DATABASE_EXCLUDE_LIST}.\n      */\n-    public static final Field DATABASE_WHITELIST = Field.create(\"database.whitelist\")\n-            .withDisplayName(\"DB Whitelist\")\n+    public static final Field DATABASE_INCLUDE_LIST = Field.create(\"database.include.list\")\n+            .withDisplayName(\"Database Include List\")\n             .withType(Type.LIST)\n             .withWidth(Width.LONG)\n             .withImportance(Importance.HIGH)\n             .withValidation(Field::isListOfRegex,\n-                    MongoDbConnectorConfig::validateDatabaseBlacklist)\n+                    MongoDbConnectorConfig::validateDatabaseExcludeList)\n             .withDescription(\"The databases for which changes are to be captured\");\n \n+    /**\n+     * Old, backwards-compatible \"whitelist\" property.\n+     */\n+    public static final Field DATABASE_WHITELIST = Field.create(\"database.whitelist\")\n+            .withDisplayName(\"Database Whitelist\")\n+            .withType(Type.LIST)\n+            .withWidth(Width.LONG)\n+            .withImportance(Importance.LOW)\n+            .withValidation(Field::isListOfRegex,\n+                    MongoDbConnectorConfig::validateDatabaseExcludeList)\n+            .withDescription(\"The databases for which changes are to be captured (deprecated, use \\\"\" + DATABASE_INCLUDE_LIST.name() + \"\\\" instead)\");\n+\n     /**\n      * A comma-separated list of regular expressions that match the databases to be excluded.\n-     * May not be used with {@link #DATABASE_WHITELIST}.\n+     * Must not be used with {@link #DATABASE_INCLUDE_LIST}.\n      */\n-    public static final Field DATABASE_BLACKLIST = Field.create(\"database.blacklist\")\n-            .withDisplayName(\"DB Blacklist\")\n+    public static final Field DATABASE_EXCLUDE_LIST = Field.create(\"database.exclude.list\")\n+            .withDisplayName(\"Database Exclude List\")\n             .withType(Type.LIST)\n             .withWidth(Width.LONG)\n             .withImportance(Importance.HIGH)\n             .withValidation(Field::isListOfRegex)\n             .withDescription(\"The databases for which changes are to be excluded\");\n \n+    /**\n+     * Old, backwards-compatible \"blacklist\" property.\n+     */\n+    public static final Field DATABASE_BLACKLIST = Field.create(\"database.blacklist\")\n+            .withDisplayName(\"DB Blacklist\")\n+            .withType(Type.LIST)\n+            .withWidth(Width.LONG)\n+            .withImportance(Importance.LOW)\n+            .withValidation(Field::isListOfRegex)\n+            .withDescription(\"The databases for which changes are to be excluded (deprecated, use \\\"\" + DATABASE_EXCLUDE_LIST.name() + \"\\\" instead)\");\n+\n     /**\n      * A comma-separated list of regular expressions that match the fully-qualified namespaces of collections to be monitored.\n      * Fully-qualified namespaces for collections are of the form {@code <databaseName>.<collectionName>}.\n-     * May not be used with {@link #COLLECTION_BLACKLIST}.\n+     * Must not be used with {@link #COLLECTION_EXCLUDE_LIST}.\n      */\n-    public static final Field COLLECTION_WHITELIST = Field.create(\"collection.whitelist\")\n-            .withDisplayName(\"Collections\")\n+    public static final Field COLLECTION_INCLUDE_LIST = Field.create(\"collection.include.list\")\n+            .withDisplayName(\"Collections Include List\")\n             .withType(Type.LIST)\n             .withWidth(Width.LONG)\n             .withImportance(Importance.HIGH)\n             .withValidation(Field::isListOfRegex,\n-                    MongoDbConnectorConfig::validateCollectionBlacklist)\n+                    MongoDbConnectorConfig::validateCollectionExcludeList)\n             .withDescription(\"The collections for which changes are to be captured\");\n \n+    /**\n+     * Old, backwards-compatible \"whitelist\" property.\n+     */\n+    public static final Field COLLECTION_WHITELIST = Field.create(\"collection.whitelist\")\n+            .withDisplayName(\"Collections Whitelist\")\n+            .withType(Type.LIST)\n+            .withWidth(Width.LONG)\n+            .withImportance(Importance.LOW)\n+            .withValidation(Field::isListOfRegex,\n+                    MongoDbConnectorConfig::validateCollectionExcludeList)\n+            .withDescription(\"The collections for which changes are to be captured (deprecated, use \\\"\" + COLLECTION_INCLUDE_LIST.name() + \"\\\" instead)\");\n+\n     /**\n      * A comma-separated list of regular expressions that match the fully-qualified namespaces of collections to be excluded from\n      * monitoring. Fully-qualified namespaces for collections are of the form {@code <databaseName>.<collectionName>}.\n-     * May not be used with {@link #COLLECTION_WHITELIST}.\n+     * Must not be used with {@link #COLLECTION_INCLUDE_LIST}.\n+     */\n+    public static final Field COLLECTION_EXCLUDE_LIST = Field.create(\"collection.exclude.list\")\n+            .withValidation(Field::isListOfRegex)\n+            .withInvisibleRecommender();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk5NjE1Nw==", "bodyText": "both are invisible. see the next few lines", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r472996157", "createdAt": "2020-08-19T12:38:22Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-mongodb/src/main/java/io/debezium/connector/mongodb/MongoDbConnectorConfig.java", "diffHunk": "@@ -236,47 +239,89 @@ public static SnapshotMode parse(String value, String defaultValue) {\n \n     /**\n      * A comma-separated list of regular expressions that match the databases to be monitored.\n-     * May not be used with {@link #DATABASE_BLACKLIST}.\n+     * Must not be used with {@link #DATABASE_EXCLUDE_LIST}.\n      */\n-    public static final Field DATABASE_WHITELIST = Field.create(\"database.whitelist\")\n-            .withDisplayName(\"DB Whitelist\")\n+    public static final Field DATABASE_INCLUDE_LIST = Field.create(\"database.include.list\")\n+            .withDisplayName(\"Database Include List\")\n             .withType(Type.LIST)\n             .withWidth(Width.LONG)\n             .withImportance(Importance.HIGH)\n             .withValidation(Field::isListOfRegex,\n-                    MongoDbConnectorConfig::validateDatabaseBlacklist)\n+                    MongoDbConnectorConfig::validateDatabaseExcludeList)\n             .withDescription(\"The databases for which changes are to be captured\");\n \n+    /**\n+     * Old, backwards-compatible \"whitelist\" property.\n+     */\n+    public static final Field DATABASE_WHITELIST = Field.create(\"database.whitelist\")\n+            .withDisplayName(\"Database Whitelist\")\n+            .withType(Type.LIST)\n+            .withWidth(Width.LONG)\n+            .withImportance(Importance.LOW)\n+            .withValidation(Field::isListOfRegex,\n+                    MongoDbConnectorConfig::validateDatabaseExcludeList)\n+            .withDescription(\"The databases for which changes are to be captured (deprecated, use \\\"\" + DATABASE_INCLUDE_LIST.name() + \"\\\" instead)\");\n+\n     /**\n      * A comma-separated list of regular expressions that match the databases to be excluded.\n-     * May not be used with {@link #DATABASE_WHITELIST}.\n+     * Must not be used with {@link #DATABASE_INCLUDE_LIST}.\n      */\n-    public static final Field DATABASE_BLACKLIST = Field.create(\"database.blacklist\")\n-            .withDisplayName(\"DB Blacklist\")\n+    public static final Field DATABASE_EXCLUDE_LIST = Field.create(\"database.exclude.list\")\n+            .withDisplayName(\"Database Exclude List\")\n             .withType(Type.LIST)\n             .withWidth(Width.LONG)\n             .withImportance(Importance.HIGH)\n             .withValidation(Field::isListOfRegex)\n             .withDescription(\"The databases for which changes are to be excluded\");\n \n+    /**\n+     * Old, backwards-compatible \"blacklist\" property.\n+     */\n+    public static final Field DATABASE_BLACKLIST = Field.create(\"database.blacklist\")\n+            .withDisplayName(\"DB Blacklist\")\n+            .withType(Type.LIST)\n+            .withWidth(Width.LONG)\n+            .withImportance(Importance.LOW)\n+            .withValidation(Field::isListOfRegex)\n+            .withDescription(\"The databases for which changes are to be excluded (deprecated, use \\\"\" + DATABASE_EXCLUDE_LIST.name() + \"\\\" instead)\");\n+\n     /**\n      * A comma-separated list of regular expressions that match the fully-qualified namespaces of collections to be monitored.\n      * Fully-qualified namespaces for collections are of the form {@code <databaseName>.<collectionName>}.\n-     * May not be used with {@link #COLLECTION_BLACKLIST}.\n+     * Must not be used with {@link #COLLECTION_EXCLUDE_LIST}.\n      */\n-    public static final Field COLLECTION_WHITELIST = Field.create(\"collection.whitelist\")\n-            .withDisplayName(\"Collections\")\n+    public static final Field COLLECTION_INCLUDE_LIST = Field.create(\"collection.include.list\")\n+            .withDisplayName(\"Collections Include List\")\n             .withType(Type.LIST)\n             .withWidth(Width.LONG)\n             .withImportance(Importance.HIGH)\n             .withValidation(Field::isListOfRegex,\n-                    MongoDbConnectorConfig::validateCollectionBlacklist)\n+                    MongoDbConnectorConfig::validateCollectionExcludeList)\n             .withDescription(\"The collections for which changes are to be captured\");\n \n+    /**\n+     * Old, backwards-compatible \"whitelist\" property.\n+     */\n+    public static final Field COLLECTION_WHITELIST = Field.create(\"collection.whitelist\")\n+            .withDisplayName(\"Collections Whitelist\")\n+            .withType(Type.LIST)\n+            .withWidth(Width.LONG)\n+            .withImportance(Importance.LOW)\n+            .withValidation(Field::isListOfRegex,\n+                    MongoDbConnectorConfig::validateCollectionExcludeList)\n+            .withDescription(\"The collections for which changes are to be captured (deprecated, use \\\"\" + COLLECTION_INCLUDE_LIST.name() + \"\\\" instead)\");\n+\n     /**\n      * A comma-separated list of regular expressions that match the fully-qualified namespaces of collections to be excluded from\n      * monitoring. Fully-qualified namespaces for collections are of the form {@code <databaseName>.<collectionName>}.\n-     * May not be used with {@link #COLLECTION_WHITELIST}.\n+     * Must not be used with {@link #COLLECTION_INCLUDE_LIST}.\n+     */\n+    public static final Field COLLECTION_EXCLUDE_LIST = Field.create(\"collection.exclude.list\")\n+            .withValidation(Field::isListOfRegex)\n+            .withInvisibleRecommender();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjczMDYxMA=="}, "originalCommit": null, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzcwMDI3OA==", "bodyText": "I really wonder what was the rationale behind having blacklist invisible. But let's keep it as is now.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r473700278", "createdAt": "2020-08-20T07:35:34Z", "author": {"login": "jpechane"}, "path": "debezium-connector-mongodb/src/main/java/io/debezium/connector/mongodb/MongoDbConnectorConfig.java", "diffHunk": "@@ -236,47 +239,89 @@ public static SnapshotMode parse(String value, String defaultValue) {\n \n     /**\n      * A comma-separated list of regular expressions that match the databases to be monitored.\n-     * May not be used with {@link #DATABASE_BLACKLIST}.\n+     * Must not be used with {@link #DATABASE_EXCLUDE_LIST}.\n      */\n-    public static final Field DATABASE_WHITELIST = Field.create(\"database.whitelist\")\n-            .withDisplayName(\"DB Whitelist\")\n+    public static final Field DATABASE_INCLUDE_LIST = Field.create(\"database.include.list\")\n+            .withDisplayName(\"Database Include List\")\n             .withType(Type.LIST)\n             .withWidth(Width.LONG)\n             .withImportance(Importance.HIGH)\n             .withValidation(Field::isListOfRegex,\n-                    MongoDbConnectorConfig::validateDatabaseBlacklist)\n+                    MongoDbConnectorConfig::validateDatabaseExcludeList)\n             .withDescription(\"The databases for which changes are to be captured\");\n \n+    /**\n+     * Old, backwards-compatible \"whitelist\" property.\n+     */\n+    public static final Field DATABASE_WHITELIST = Field.create(\"database.whitelist\")\n+            .withDisplayName(\"Database Whitelist\")\n+            .withType(Type.LIST)\n+            .withWidth(Width.LONG)\n+            .withImportance(Importance.LOW)\n+            .withValidation(Field::isListOfRegex,\n+                    MongoDbConnectorConfig::validateDatabaseExcludeList)\n+            .withDescription(\"The databases for which changes are to be captured (deprecated, use \\\"\" + DATABASE_INCLUDE_LIST.name() + \"\\\" instead)\");\n+\n     /**\n      * A comma-separated list of regular expressions that match the databases to be excluded.\n-     * May not be used with {@link #DATABASE_WHITELIST}.\n+     * Must not be used with {@link #DATABASE_INCLUDE_LIST}.\n      */\n-    public static final Field DATABASE_BLACKLIST = Field.create(\"database.blacklist\")\n-            .withDisplayName(\"DB Blacklist\")\n+    public static final Field DATABASE_EXCLUDE_LIST = Field.create(\"database.exclude.list\")\n+            .withDisplayName(\"Database Exclude List\")\n             .withType(Type.LIST)\n             .withWidth(Width.LONG)\n             .withImportance(Importance.HIGH)\n             .withValidation(Field::isListOfRegex)\n             .withDescription(\"The databases for which changes are to be excluded\");\n \n+    /**\n+     * Old, backwards-compatible \"blacklist\" property.\n+     */\n+    public static final Field DATABASE_BLACKLIST = Field.create(\"database.blacklist\")\n+            .withDisplayName(\"DB Blacklist\")\n+            .withType(Type.LIST)\n+            .withWidth(Width.LONG)\n+            .withImportance(Importance.LOW)\n+            .withValidation(Field::isListOfRegex)\n+            .withDescription(\"The databases for which changes are to be excluded (deprecated, use \\\"\" + DATABASE_EXCLUDE_LIST.name() + \"\\\" instead)\");\n+\n     /**\n      * A comma-separated list of regular expressions that match the fully-qualified namespaces of collections to be monitored.\n      * Fully-qualified namespaces for collections are of the form {@code <databaseName>.<collectionName>}.\n-     * May not be used with {@link #COLLECTION_BLACKLIST}.\n+     * Must not be used with {@link #COLLECTION_EXCLUDE_LIST}.\n      */\n-    public static final Field COLLECTION_WHITELIST = Field.create(\"collection.whitelist\")\n-            .withDisplayName(\"Collections\")\n+    public static final Field COLLECTION_INCLUDE_LIST = Field.create(\"collection.include.list\")\n+            .withDisplayName(\"Collections Include List\")\n             .withType(Type.LIST)\n             .withWidth(Width.LONG)\n             .withImportance(Importance.HIGH)\n             .withValidation(Field::isListOfRegex,\n-                    MongoDbConnectorConfig::validateCollectionBlacklist)\n+                    MongoDbConnectorConfig::validateCollectionExcludeList)\n             .withDescription(\"The collections for which changes are to be captured\");\n \n+    /**\n+     * Old, backwards-compatible \"whitelist\" property.\n+     */\n+    public static final Field COLLECTION_WHITELIST = Field.create(\"collection.whitelist\")\n+            .withDisplayName(\"Collections Whitelist\")\n+            .withType(Type.LIST)\n+            .withWidth(Width.LONG)\n+            .withImportance(Importance.LOW)\n+            .withValidation(Field::isListOfRegex,\n+                    MongoDbConnectorConfig::validateCollectionExcludeList)\n+            .withDescription(\"The collections for which changes are to be captured (deprecated, use \\\"\" + COLLECTION_INCLUDE_LIST.name() + \"\\\" instead)\");\n+\n     /**\n      * A comma-separated list of regular expressions that match the fully-qualified namespaces of collections to be excluded from\n      * monitoring. Fully-qualified namespaces for collections are of the form {@code <databaseName>.<collectionName>}.\n-     * May not be used with {@link #COLLECTION_WHITELIST}.\n+     * Must not be used with {@link #COLLECTION_INCLUDE_LIST}.\n+     */\n+    public static final Field COLLECTION_EXCLUDE_LIST = Field.create(\"collection.exclude.list\")\n+            .withValidation(Field::isListOfRegex)\n+            .withInvisibleRecommender();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjczMDYxMA=="}, "originalCommit": null, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgyNjE5Ng==", "bodyText": "The reason was that it is not shown/recommended because it can be invalid to set a blacklist when a whitelist is already defined (at least according to the docs of InvisivbleRecommender). I think there should be a DependentRecommender that automatically shows or hides based on predicates that works with the provided config?", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r473826196", "createdAt": "2020-08-20T09:46:40Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-mongodb/src/main/java/io/debezium/connector/mongodb/MongoDbConnectorConfig.java", "diffHunk": "@@ -236,47 +239,89 @@ public static SnapshotMode parse(String value, String defaultValue) {\n \n     /**\n      * A comma-separated list of regular expressions that match the databases to be monitored.\n-     * May not be used with {@link #DATABASE_BLACKLIST}.\n+     * Must not be used with {@link #DATABASE_EXCLUDE_LIST}.\n      */\n-    public static final Field DATABASE_WHITELIST = Field.create(\"database.whitelist\")\n-            .withDisplayName(\"DB Whitelist\")\n+    public static final Field DATABASE_INCLUDE_LIST = Field.create(\"database.include.list\")\n+            .withDisplayName(\"Database Include List\")\n             .withType(Type.LIST)\n             .withWidth(Width.LONG)\n             .withImportance(Importance.HIGH)\n             .withValidation(Field::isListOfRegex,\n-                    MongoDbConnectorConfig::validateDatabaseBlacklist)\n+                    MongoDbConnectorConfig::validateDatabaseExcludeList)\n             .withDescription(\"The databases for which changes are to be captured\");\n \n+    /**\n+     * Old, backwards-compatible \"whitelist\" property.\n+     */\n+    public static final Field DATABASE_WHITELIST = Field.create(\"database.whitelist\")\n+            .withDisplayName(\"Database Whitelist\")\n+            .withType(Type.LIST)\n+            .withWidth(Width.LONG)\n+            .withImportance(Importance.LOW)\n+            .withValidation(Field::isListOfRegex,\n+                    MongoDbConnectorConfig::validateDatabaseExcludeList)\n+            .withDescription(\"The databases for which changes are to be captured (deprecated, use \\\"\" + DATABASE_INCLUDE_LIST.name() + \"\\\" instead)\");\n+\n     /**\n      * A comma-separated list of regular expressions that match the databases to be excluded.\n-     * May not be used with {@link #DATABASE_WHITELIST}.\n+     * Must not be used with {@link #DATABASE_INCLUDE_LIST}.\n      */\n-    public static final Field DATABASE_BLACKLIST = Field.create(\"database.blacklist\")\n-            .withDisplayName(\"DB Blacklist\")\n+    public static final Field DATABASE_EXCLUDE_LIST = Field.create(\"database.exclude.list\")\n+            .withDisplayName(\"Database Exclude List\")\n             .withType(Type.LIST)\n             .withWidth(Width.LONG)\n             .withImportance(Importance.HIGH)\n             .withValidation(Field::isListOfRegex)\n             .withDescription(\"The databases for which changes are to be excluded\");\n \n+    /**\n+     * Old, backwards-compatible \"blacklist\" property.\n+     */\n+    public static final Field DATABASE_BLACKLIST = Field.create(\"database.blacklist\")\n+            .withDisplayName(\"DB Blacklist\")\n+            .withType(Type.LIST)\n+            .withWidth(Width.LONG)\n+            .withImportance(Importance.LOW)\n+            .withValidation(Field::isListOfRegex)\n+            .withDescription(\"The databases for which changes are to be excluded (deprecated, use \\\"\" + DATABASE_EXCLUDE_LIST.name() + \"\\\" instead)\");\n+\n     /**\n      * A comma-separated list of regular expressions that match the fully-qualified namespaces of collections to be monitored.\n      * Fully-qualified namespaces for collections are of the form {@code <databaseName>.<collectionName>}.\n-     * May not be used with {@link #COLLECTION_BLACKLIST}.\n+     * Must not be used with {@link #COLLECTION_EXCLUDE_LIST}.\n      */\n-    public static final Field COLLECTION_WHITELIST = Field.create(\"collection.whitelist\")\n-            .withDisplayName(\"Collections\")\n+    public static final Field COLLECTION_INCLUDE_LIST = Field.create(\"collection.include.list\")\n+            .withDisplayName(\"Collections Include List\")\n             .withType(Type.LIST)\n             .withWidth(Width.LONG)\n             .withImportance(Importance.HIGH)\n             .withValidation(Field::isListOfRegex,\n-                    MongoDbConnectorConfig::validateCollectionBlacklist)\n+                    MongoDbConnectorConfig::validateCollectionExcludeList)\n             .withDescription(\"The collections for which changes are to be captured\");\n \n+    /**\n+     * Old, backwards-compatible \"whitelist\" property.\n+     */\n+    public static final Field COLLECTION_WHITELIST = Field.create(\"collection.whitelist\")\n+            .withDisplayName(\"Collections Whitelist\")\n+            .withType(Type.LIST)\n+            .withWidth(Width.LONG)\n+            .withImportance(Importance.LOW)\n+            .withValidation(Field::isListOfRegex,\n+                    MongoDbConnectorConfig::validateCollectionExcludeList)\n+            .withDescription(\"The collections for which changes are to be captured (deprecated, use \\\"\" + COLLECTION_INCLUDE_LIST.name() + \"\\\" instead)\");\n+\n     /**\n      * A comma-separated list of regular expressions that match the fully-qualified namespaces of collections to be excluded from\n      * monitoring. Fully-qualified namespaces for collections are of the form {@code <databaseName>.<collectionName>}.\n-     * May not be used with {@link #COLLECTION_WHITELIST}.\n+     * Must not be used with {@link #COLLECTION_INCLUDE_LIST}.\n+     */\n+    public static final Field COLLECTION_EXCLUDE_LIST = Field.create(\"collection.exclude.list\")\n+            .withValidation(Field::isListOfRegex)\n+            .withInvisibleRecommender();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjczMDYxMA=="}, "originalCommit": null, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDkwNjgzOnYy", "diffSide": "RIGHT", "path": "debezium-connector-mongodb/src/test/java/io/debezium/connector/mongodb/ConnectionIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNTo1NjozMVrOHC1VhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMjo0MDowOVrOHDFdcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjczMzA2MA==", "bodyText": "Should it use Configurator.withXXX method?", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r472733060", "createdAt": "2020-08-19T05:56:31Z", "author": {"login": "jpechane"}, "path": "debezium-connector-mongodb/src/test/java/io/debezium/connector/mongodb/ConnectionIT.java", "diffHunk": "@@ -40,8 +40,8 @@ public void setUp() {\n     @Test\n     public void shouldCreateMovieDatabase() {\n         useConfiguration(config.edit()\n-                .with(MongoDbConnectorConfig.DATABASE_WHITELIST, \"dbA,dbB\")\n-                .with(MongoDbConnectorConfig.COLLECTION_BLACKLIST, \"dbB.moviesB\")\n+                .with(MongoDbConnectorConfig.DATABASE_INCLUDE_LIST, \"dbA,dbB\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk5NzIzNA==", "bodyText": "I didn't change the code, just updated the const name. Maybe log an easy-starter issue to change this everywhere? Do we want to get rid of the \"Config-Editor\"?", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r472997234", "createdAt": "2020-08-19T12:40:09Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-mongodb/src/test/java/io/debezium/connector/mongodb/ConnectionIT.java", "diffHunk": "@@ -40,8 +40,8 @@ public void setUp() {\n     @Test\n     public void shouldCreateMovieDatabase() {\n         useConfiguration(config.edit()\n-                .with(MongoDbConnectorConfig.DATABASE_WHITELIST, \"dbA,dbB\")\n-                .with(MongoDbConnectorConfig.COLLECTION_BLACKLIST, \"dbB.moviesB\")\n+                .with(MongoDbConnectorConfig.DATABASE_INCLUDE_LIST, \"dbA,dbB\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjczMzA2MA=="}, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDk2MDMzOnYy", "diffSide": "RIGHT", "path": "debezium-core/src/main/java/io/debezium/config/Configuration.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjowOTozOFrOHC14oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDoyMToxNFrOHD5z8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0MjA0OQ==", "bodyText": "As I think about that should not the warning be emitted when either old name or both new and old names are present?", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r472742049", "createdAt": "2020-08-19T06:09:38Z", "author": {"login": "jpechane"}, "path": "debezium-core/src/main/java/io/debezium/config/Configuration.java", "diffHunk": "@@ -2097,4 +2097,47 @@ default void forEachMatchingFieldName(Pattern regex, BiConsumer<String, String>\n     default <T> void forEach(BiConsumer<String, String> function) {\n         this.asMap().forEach(function);\n     }\n+\n+    /**\n+     * Returns the string config value from newProperty config field if it's set or its default value when it's not\n+     * set/null.If both are null it returns the value of the oldProperty config field, or its default value when it's\n+     * null.\n+     * This fallback only works for newProperty fields that have a null / not-set default value!\n+     *\n+     * @param newProperty the new property config field\n+     * @param oldProperty the old / fallback property config field\n+     * @return the evaluated value\n+     */\n+    default String getFallbackStringProperty(Field newProperty, Field oldProperty) {\n+        return getString(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAwNzkxMg==", "bodyText": "Not just silently using the documented (newer) version when both are there? I could add a warning but might be quite irrelevant, wdyt?\nI would personally leave it for a future Debezium version that removes the legacy (blacklist/whitelist) properties completely and then fail on configs that still have both properties.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r473007912", "createdAt": "2020-08-19T12:57:24Z", "author": {"login": "rk3rn3r"}, "path": "debezium-core/src/main/java/io/debezium/config/Configuration.java", "diffHunk": "@@ -2097,4 +2097,47 @@ default void forEachMatchingFieldName(Pattern regex, BiConsumer<String, String>\n     default <T> void forEach(BiConsumer<String, String> function) {\n         this.asMap().forEach(function);\n     }\n+\n+    /**\n+     * Returns the string config value from newProperty config field if it's set or its default value when it's not\n+     * set/null.If both are null it returns the value of the oldProperty config field, or its default value when it's\n+     * null.\n+     * This fallback only works for newProperty fields that have a null / not-set default value!\n+     *\n+     * @param newProperty the new property config field\n+     * @param oldProperty the old / fallback property config field\n+     * @return the evaluated value\n+     */\n+    default String getFallbackStringProperty(Field newProperty, Field oldProperty) {\n+        return getString(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0MjA0OQ=="}, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY5ODM2Mg==", "bodyText": "I'd rather have a warning - just in case there are two persons working with connector config and each updates different param. In this case it is one more safety to avoid config inconsistency", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r473698362", "createdAt": "2020-08-20T07:34:12Z", "author": {"login": "jpechane"}, "path": "debezium-core/src/main/java/io/debezium/config/Configuration.java", "diffHunk": "@@ -2097,4 +2097,47 @@ default void forEachMatchingFieldName(Pattern regex, BiConsumer<String, String>\n     default <T> void forEach(BiConsumer<String, String> function) {\n         this.asMap().forEach(function);\n     }\n+\n+    /**\n+     * Returns the string config value from newProperty config field if it's set or its default value when it's not\n+     * set/null.If both are null it returns the value of the oldProperty config field, or its default value when it's\n+     * null.\n+     * This fallback only works for newProperty fields that have a null / not-set default value!\n+     *\n+     * @param newProperty the new property config field\n+     * @param oldProperty the old / fallback property config field\n+     * @return the evaluated value\n+     */\n+    default String getFallbackStringProperty(Field newProperty, Field oldProperty) {\n+        return getString(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0MjA0OQ=="}, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg0NTg1Ng==", "bodyText": "yep. will do that", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r473845856", "createdAt": "2020-08-20T10:10:01Z", "author": {"login": "rk3rn3r"}, "path": "debezium-core/src/main/java/io/debezium/config/Configuration.java", "diffHunk": "@@ -2097,4 +2097,47 @@ default void forEachMatchingFieldName(Pattern regex, BiConsumer<String, String>\n     default <T> void forEach(BiConsumer<String, String> function) {\n         this.asMap().forEach(function);\n     }\n+\n+    /**\n+     * Returns the string config value from newProperty config field if it's set or its default value when it's not\n+     * set/null.If both are null it returns the value of the oldProperty config field, or its default value when it's\n+     * null.\n+     * This fallback only works for newProperty fields that have a null / not-set default value!\n+     *\n+     * @param newProperty the new property config field\n+     * @param oldProperty the old / fallback property config field\n+     * @return the evaluated value\n+     */\n+    default String getFallbackStringProperty(Field newProperty, Field oldProperty) {\n+        return getString(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0MjA0OQ=="}, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg1NDk2MA==", "bodyText": "Done. And also changed the code to call the static method instead of the duplicated code.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r473854960", "createdAt": "2020-08-20T10:21:14Z", "author": {"login": "rk3rn3r"}, "path": "debezium-core/src/main/java/io/debezium/config/Configuration.java", "diffHunk": "@@ -2097,4 +2097,47 @@ default void forEachMatchingFieldName(Pattern regex, BiConsumer<String, String>\n     default <T> void forEach(BiConsumer<String, String> function) {\n         this.asMap().forEach(function);\n     }\n+\n+    /**\n+     * Returns the string config value from newProperty config field if it's set or its default value when it's not\n+     * set/null.If both are null it returns the value of the oldProperty config field, or its default value when it's\n+     * null.\n+     * This fallback only works for newProperty fields that have a null / not-set default value!\n+     *\n+     * @param newProperty the new property config field\n+     * @param oldProperty the old / fallback property config field\n+     * @return the evaluated value\n+     */\n+    default String getFallbackStringProperty(Field newProperty, Field oldProperty) {\n+        return getString(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0MjA0OQ=="}, "originalCommit": null, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDk4NDIwOnYy", "diffSide": "RIGHT", "path": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/SourceInfo.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjoxNTozMFrOHC2IhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNzozNjowNlrOHDwaQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0NjExNg==", "bodyText": "How about using getOrDefault method to simplify the code?", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r472746116", "createdAt": "2020-08-19T06:15:30Z", "author": {"login": "jpechane"}, "path": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/SourceInfo.java", "diffHunk": "@@ -501,19 +505,42 @@ public void setOffset(Map<String, ?> sourceOffset) {\n             this.restartEventsToSkip = longOffsetValue(sourceOffset, EVENTS_TO_SKIP_OFFSET_KEY);\n             nextSnapshot = booleanOffsetValue(sourceOffset, SNAPSHOT_KEY);\n             lastSnapshot = nextSnapshot;\n-            this.databaseWhitelist = (String) sourceOffset.get(DATABASE_WHITELIST_KEY);\n-            this.databaseBlacklist = (String) sourceOffset.get(DATABASE_BLACKLIST_KEY);\n-            this.tableWhitelist = (String) sourceOffset.get(TABLE_WHITELIST_KEY);\n-            this.tableBlacklist = (String) sourceOffset.get(TABLE_BLACKLIST_KEY);\n+            if (sourceOffset.containsKey(DATABASE_INCLUDE_LIST_KEY)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAwMjI1NA==", "bodyText": "I think this code is slightly faster or equal than the getOrDefault version. I would have used getOrDefault if I could've been able to pass a lambda as default but in the getOrDefault version I would need to do 2 complete value lookups. here it's a key existence check and fetching 1 entry from the map. it might be the same performance if both keys are in the same bucket but worse when in 2 different buckets.\nAnd from readablity I would say that getOrDefault might be harder to understand than this longer if-contains-then-else clause.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r473002254", "createdAt": "2020-08-19T12:48:41Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/SourceInfo.java", "diffHunk": "@@ -501,19 +505,42 @@ public void setOffset(Map<String, ?> sourceOffset) {\n             this.restartEventsToSkip = longOffsetValue(sourceOffset, EVENTS_TO_SKIP_OFFSET_KEY);\n             nextSnapshot = booleanOffsetValue(sourceOffset, SNAPSHOT_KEY);\n             lastSnapshot = nextSnapshot;\n-            this.databaseWhitelist = (String) sourceOffset.get(DATABASE_WHITELIST_KEY);\n-            this.databaseBlacklist = (String) sourceOffset.get(DATABASE_BLACKLIST_KEY);\n-            this.tableWhitelist = (String) sourceOffset.get(TABLE_WHITELIST_KEY);\n-            this.tableBlacklist = (String) sourceOffset.get(TABLE_BLACKLIST_KEY);\n+            if (sourceOffset.containsKey(DATABASE_INCLUDE_LIST_KEY)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0NjExNg=="}, "originalCommit": null, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzcwMDkyOA==", "bodyText": "ok", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r473700928", "createdAt": "2020-08-20T07:36:06Z", "author": {"login": "jpechane"}, "path": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/SourceInfo.java", "diffHunk": "@@ -501,19 +505,42 @@ public void setOffset(Map<String, ?> sourceOffset) {\n             this.restartEventsToSkip = longOffsetValue(sourceOffset, EVENTS_TO_SKIP_OFFSET_KEY);\n             nextSnapshot = booleanOffsetValue(sourceOffset, SNAPSHOT_KEY);\n             lastSnapshot = nextSnapshot;\n-            this.databaseWhitelist = (String) sourceOffset.get(DATABASE_WHITELIST_KEY);\n-            this.databaseBlacklist = (String) sourceOffset.get(DATABASE_BLACKLIST_KEY);\n-            this.tableWhitelist = (String) sourceOffset.get(TABLE_WHITELIST_KEY);\n-            this.tableBlacklist = (String) sourceOffset.get(TABLE_BLACKLIST_KEY);\n+            if (sourceOffset.containsKey(DATABASE_INCLUDE_LIST_KEY)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0NjExNg=="}, "originalCommit": null, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzM5MTA5OnYy", "diffSide": "RIGHT", "path": "debezium-core/src/main/java/io/debezium/schema/DatabaseSchema.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTo0Nzo0OVrOHDNm2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDoyMTo1NVrOHD52Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEzMDcxNA==", "bodyText": "@Naros is the wording okay?", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r473130714", "createdAt": "2020-08-19T15:47:49Z", "author": {"login": "rk3rn3r"}, "path": "debezium-core/src/main/java/io/debezium/schema/DatabaseSchema.java", "diffHunk": "@@ -15,6 +15,8 @@\n  */\n public interface DatabaseSchema<I extends DataCollectionId> {\n \n+    String NO_CAPTURED_DATA_COLLECTIONS_WARNING = \"After applying include/exclude list filters there's nothing selected to capture changes from, please check your configuration\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE3NTIxNw==", "bodyText": "I think the following sounds more appropriate.  Wdyt?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String NO_CAPTURED_DATA_COLLECTIONS_WARNING = \"After applying include/exclude list filters there's nothing selected to capture changes from, please check your configuration\";\n          \n          \n            \n                String NO_CAPTURED_DATA_COLLECTIONS_WARNING = \"After applying the include/exclude list filters, no changes will be captured.  Please check your configuration.\";", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r473175217", "createdAt": "2020-08-19T16:46:37Z", "author": {"login": "Naros"}, "path": "debezium-core/src/main/java/io/debezium/schema/DatabaseSchema.java", "diffHunk": "@@ -15,6 +15,8 @@\n  */\n public interface DatabaseSchema<I extends DataCollectionId> {\n \n+    String NO_CAPTURED_DATA_COLLECTIONS_WARNING = \"After applying include/exclude list filters there's nothing selected to capture changes from, please check your configuration\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEzMDcxNA=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg0NjY0NQ==", "bodyText": "\ud83e\udd37\u200d\u2642\ufe0f you are the pro!\nWill do it with the other commit", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r473846645", "createdAt": "2020-08-20T10:11:00Z", "author": {"login": "rk3rn3r"}, "path": "debezium-core/src/main/java/io/debezium/schema/DatabaseSchema.java", "diffHunk": "@@ -15,6 +15,8 @@\n  */\n public interface DatabaseSchema<I extends DataCollectionId> {\n \n+    String NO_CAPTURED_DATA_COLLECTIONS_WARNING = \"After applying include/exclude list filters there's nothing selected to capture changes from, please check your configuration\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEzMDcxNA=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg1NTU1OQ==", "bodyText": "Done", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r473855559", "createdAt": "2020-08-20T10:21:55Z", "author": {"login": "rk3rn3r"}, "path": "debezium-core/src/main/java/io/debezium/schema/DatabaseSchema.java", "diffHunk": "@@ -15,6 +15,8 @@\n  */\n public interface DatabaseSchema<I extends DataCollectionId> {\n \n+    String NO_CAPTURED_DATA_COLLECTIONS_WARNING = \"After applying include/exclude list filters there's nothing selected to capture changes from, please check your configuration\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEzMDcxNA=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzQxNzQxOnYy", "diffSide": "RIGHT", "path": "debezium-connector-mongodb/src/main/java/io/debezium/connector/mongodb/MongoDbConnectorConfig.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTo1NDowN1rOHDN3hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDoyMjo0MVrOHD54uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEzNDk4Mw==", "bodyText": "I would prefer to see this and any other \"backwards-compatible\" fields annotated with @Deprecated too.  I don't intend to mark all occurrences in my review as this should suffice as a marker for all.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r473134983", "createdAt": "2020-08-19T15:54:07Z", "author": {"login": "Naros"}, "path": "debezium-connector-mongodb/src/main/java/io/debezium/connector/mongodb/MongoDbConnectorConfig.java", "diffHunk": "@@ -236,47 +239,89 @@ public static SnapshotMode parse(String value, String defaultValue) {\n \n     /**\n      * A comma-separated list of regular expressions that match the databases to be monitored.\n-     * May not be used with {@link #DATABASE_BLACKLIST}.\n+     * Must not be used with {@link #DATABASE_EXCLUDE_LIST}.\n      */\n-    public static final Field DATABASE_WHITELIST = Field.create(\"database.whitelist\")\n-            .withDisplayName(\"DB Whitelist\")\n+    public static final Field DATABASE_INCLUDE_LIST = Field.create(\"database.include.list\")\n+            .withDisplayName(\"Include Databases\")\n             .withType(Type.LIST)\n             .withWidth(Width.LONG)\n             .withImportance(Importance.HIGH)\n-            .withValidation(Field::isListOfRegex,\n-                    MongoDbConnectorConfig::validateDatabaseBlacklist)\n+            .withValidation(Field::isListOfRegex, MongoDbConnectorConfig::validateDatabaseExcludeList)\n             .withDescription(\"The databases for which changes are to be captured\");\n \n+    /**\n+     * Old, backwards-compatible \"whitelist\" property.\n+     */\n+    public static final Field DATABASE_WHITELIST = Field.create(\"database.whitelist\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgyMTI5NQ==", "bodyText": "good point! will do that", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r473821295", "createdAt": "2020-08-20T09:40:43Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-mongodb/src/main/java/io/debezium/connector/mongodb/MongoDbConnectorConfig.java", "diffHunk": "@@ -236,47 +239,89 @@ public static SnapshotMode parse(String value, String defaultValue) {\n \n     /**\n      * A comma-separated list of regular expressions that match the databases to be monitored.\n-     * May not be used with {@link #DATABASE_BLACKLIST}.\n+     * Must not be used with {@link #DATABASE_EXCLUDE_LIST}.\n      */\n-    public static final Field DATABASE_WHITELIST = Field.create(\"database.whitelist\")\n-            .withDisplayName(\"DB Whitelist\")\n+    public static final Field DATABASE_INCLUDE_LIST = Field.create(\"database.include.list\")\n+            .withDisplayName(\"Include Databases\")\n             .withType(Type.LIST)\n             .withWidth(Width.LONG)\n             .withImportance(Importance.HIGH)\n-            .withValidation(Field::isListOfRegex,\n-                    MongoDbConnectorConfig::validateDatabaseBlacklist)\n+            .withValidation(Field::isListOfRegex, MongoDbConnectorConfig::validateDatabaseExcludeList)\n             .withDescription(\"The databases for which changes are to be captured\");\n \n+    /**\n+     * Old, backwards-compatible \"whitelist\" property.\n+     */\n+    public static final Field DATABASE_WHITELIST = Field.create(\"database.whitelist\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEzNDk4Mw=="}, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg1NjE4Nw==", "bodyText": "Done. All old fields are now annotated.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r473856187", "createdAt": "2020-08-20T10:22:41Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-mongodb/src/main/java/io/debezium/connector/mongodb/MongoDbConnectorConfig.java", "diffHunk": "@@ -236,47 +239,89 @@ public static SnapshotMode parse(String value, String defaultValue) {\n \n     /**\n      * A comma-separated list of regular expressions that match the databases to be monitored.\n-     * May not be used with {@link #DATABASE_BLACKLIST}.\n+     * Must not be used with {@link #DATABASE_EXCLUDE_LIST}.\n      */\n-    public static final Field DATABASE_WHITELIST = Field.create(\"database.whitelist\")\n-            .withDisplayName(\"DB Whitelist\")\n+    public static final Field DATABASE_INCLUDE_LIST = Field.create(\"database.include.list\")\n+            .withDisplayName(\"Include Databases\")\n             .withType(Type.LIST)\n             .withWidth(Width.LONG)\n             .withImportance(Importance.HIGH)\n-            .withValidation(Field::isListOfRegex,\n-                    MongoDbConnectorConfig::validateDatabaseBlacklist)\n+            .withValidation(Field::isListOfRegex, MongoDbConnectorConfig::validateDatabaseExcludeList)\n             .withDescription(\"The databases for which changes are to be captured\");\n \n+    /**\n+     * Old, backwards-compatible \"whitelist\" property.\n+     */\n+    public static final Field DATABASE_WHITELIST = Field.create(\"database.whitelist\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEzNDk4Mw=="}, "originalCommit": null, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzU0NDAxOnYy", "diffSide": "RIGHT", "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/PostgresStreamingChangeEventSource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjoyMzoyNFrOHDPIUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDoyMzowNlrOHD56XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE1NTY2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * (e.g. in a blacklisted database), but none of them is in table.include.list.\n          \n          \n            \n                 * (e.g. in a excluded database), but none of them is in table.include.list.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r473155664", "createdAt": "2020-08-19T16:23:24Z", "author": {"login": "Naros"}, "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/PostgresStreamingChangeEventSource.java", "diffHunk": "@@ -232,7 +232,7 @@ private void skipMessage(final Long lsn) throws SQLException, InterruptedExcepti\n      * acknowledged with the replication slot, causing any ever growing WAL backlog.\n      * <p>\n      * This situation typically occurs if there are changes on the database server,\n-     * (e.g. in a blacklisted database), but none of them is in a whitelisted table.\n+     * (e.g. in a blacklisted database), but none of them is in table.include.list.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgzMTkwNg==", "bodyText": "very good, I missed that one. have to do another commit anyway so I will add it there", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r473831906", "createdAt": "2020-08-20T09:52:58Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/PostgresStreamingChangeEventSource.java", "diffHunk": "@@ -232,7 +232,7 @@ private void skipMessage(final Long lsn) throws SQLException, InterruptedExcepti\n      * acknowledged with the replication slot, causing any ever growing WAL backlog.\n      * <p>\n      * This situation typically occurs if there are changes on the database server,\n-     * (e.g. in a blacklisted database), but none of them is in a whitelisted table.\n+     * (e.g. in a blacklisted database), but none of them is in table.include.list.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE1NTY2NA=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg1NjYwNQ==", "bodyText": "Done", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r473856605", "createdAt": "2020-08-20T10:23:06Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/PostgresStreamingChangeEventSource.java", "diffHunk": "@@ -232,7 +232,7 @@ private void skipMessage(final Long lsn) throws SQLException, InterruptedExcepti\n      * acknowledged with the replication slot, causing any ever growing WAL backlog.\n      * <p>\n      * This situation typically occurs if there are changes on the database server,\n-     * (e.g. in a blacklisted database), but none of them is in a whitelisted table.\n+     * (e.g. in a blacklisted database), but none of them is in table.include.list.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE1NTY2NA=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzY2ODY1OnYy", "diffSide": "RIGHT", "path": "debezium-embedded/README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjo0ODo1OVrOHDQZ_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDoxNDozM1rOHD5e7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE3NjU3Mg==", "bodyText": "We introduced the {mysql-version} variable in this paragraph but the prior explicitly specifies 5.7.  I'd suggest this change be omitted and instead logged & applied as a separate task where we apply this to all references.", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r473176572", "createdAt": "2020-08-19T16:48:59Z", "author": {"login": "Naros"}, "path": "debezium-embedded/README.md", "diffHunk": "@@ -94,7 +94,7 @@ The next few lines define the fields that are specific to the connector, which i\n \n Here, we set the name of the host machine and port number where the MySQL database server is running, and we define the username and password that will be used to connect to the MySQL database. Note that for MySQL the username and password should correspond to a MySQL database user that has been granted the [`REPLICATION SLAVE` privilege](http://dev.mysql.com/doc/refman/5.7/en/replication-howto-repuser.html), allowing the database to read the server's binlog that is normally used for MySQL replication.\n \n-The configuration also includes a numeric identifier for the `server.id`. Since MySQL's binlog is part of the MySQL replication mechanism, in order to read the binlog the `MySqlConnector` instance must join the MySQL server group, and that means this server ID must be [unique within all processes that make up the MySQL server group](http://dev.mysql.com/doc/refman/5.7/en/replication-howto-masterbaseconfig.html) and is any integer between 1 and (2^32)\u22121. In our code we set it to a fairly large but somewhat random value we'll use only for our application.\n+The configuration also includes a numeric identifier for the `server.id`. Since MySQL's binlog is part of the MySQL replication mechanism, in order to read the binlog the `MySqlConnector` instance must join the MySQL server group, and that means this server ID must be [unique within all processes that make up the MySQL server group](http://dev.mysql.com/doc/refman/{mysql-version}/en/replication-howto-masterbaseconfig.html) and is any integer between 1 and (2^32)\u22121. In our code we set it to a fairly large but somewhat random value we'll use only for our application.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg0OTU4MQ==", "bodyText": "I checked the link and fixed it everywhere/all references. yes, this is housekeeping, but imo it will make more work for me now to revert than to leave it like it is now?", "url": "https://github.com/debezium/debezium/pull/1750#discussion_r473849581", "createdAt": "2020-08-20T10:14:33Z", "author": {"login": "rk3rn3r"}, "path": "debezium-embedded/README.md", "diffHunk": "@@ -94,7 +94,7 @@ The next few lines define the fields that are specific to the connector, which i\n \n Here, we set the name of the host machine and port number where the MySQL database server is running, and we define the username and password that will be used to connect to the MySQL database. Note that for MySQL the username and password should correspond to a MySQL database user that has been granted the [`REPLICATION SLAVE` privilege](http://dev.mysql.com/doc/refman/5.7/en/replication-howto-repuser.html), allowing the database to read the server's binlog that is normally used for MySQL replication.\n \n-The configuration also includes a numeric identifier for the `server.id`. Since MySQL's binlog is part of the MySQL replication mechanism, in order to read the binlog the `MySqlConnector` instance must join the MySQL server group, and that means this server ID must be [unique within all processes that make up the MySQL server group](http://dev.mysql.com/doc/refman/5.7/en/replication-howto-masterbaseconfig.html) and is any integer between 1 and (2^32)\u22121. In our code we set it to a fairly large but somewhat random value we'll use only for our application.\n+The configuration also includes a numeric identifier for the `server.id`. Since MySQL's binlog is part of the MySQL replication mechanism, in order to read the binlog the `MySqlConnector` instance must join the MySQL server group, and that means this server ID must be [unique within all processes that make up the MySQL server group](http://dev.mysql.com/doc/refman/{mysql-version}/en/replication-howto-masterbaseconfig.html) and is any integer between 1 and (2^32)\u22121. In our code we set it to a fairly large but somewhat random value we'll use only for our application.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE3NjU3Mg=="}, "originalCommit": null, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4279, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}