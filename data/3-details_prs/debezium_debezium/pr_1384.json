{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3MjQwMjAz", "number": 1384, "title": "DBZ-1919 Restore create, update, delete event structure examples in doc", "bodyText": "This content was originally in 0.1, but got dropped from subsequent versions. This commit should be applied to 1.0 and later versions of the doc.", "createdAt": "2020-04-01T21:24:53Z", "url": "https://github.com/debezium/debezium/pull/1384", "merged": true, "mergeCommit": {"oid": "6fb77d83618a593c81a9619f6f38564c002f2fd3"}, "closed": true, "closedAt": "2020-04-02T16:59:43Z", "author": {"login": "bhardesty"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTmSkVgFqTM4NjEzNDU3Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTvKl2gBqjMxOTMwODAxNTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MTM0NTc3", "url": "https://github.com/debezium/debezium/pull/1384#pullrequestreview-386134577", "createdAt": "2020-04-02T06:22:17Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjoyMjoxN1rOF_cyUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjoyNzowOFrOF_c50g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3NjI0MA==", "bodyText": "Could you use the attribute for the Kafka docs base URL?", "url": "https://github.com/debezium/debezium/pull/1384#discussion_r402076240", "createdAt": "2020-04-02T06:22:17Z", "author": {"login": "gunnarmorling"}, "path": "documentation/modules/ROOT/pages/modules/cdc-mysql-connector/c_mysql-connector-events.adoc", "diffHunk": "@@ -388,12 +436,30 @@ CREATE TABLE customers (\n       \"thread\": 7,\n       \"query\": \"DELETE FROM customers WHERE id=1004\"\n     },\n-    \"op\": \"d\", <2>\n+    \"op\": \"d\",\n     \"ts_ms\": 1465581902461\n   }\n }\n ----\n \n+Comparing the `payload` portion to the payloads in the _create_ and _update_ events, you can see some differences:\n+\n+* The `op` field value is now `d`, signifying that this row was deleted.\n+\n+* The `before` field now has the state of the row that was deleted with the database commit.\n+\n+* The `after` field is `null`, signifying that the row no longer exists.\n+\n+* The `source` field structure has many of the same values as before, except the `ts_sec` and `pos` fields have changed (and the file might have changed in other scenarios).\n+\n+* The `ts_ms` shows the timestamp when {prodname} processed this event.\n+\n+This event provides a consumer with the information that it needs to process the removal of this row. The old values are included because some consumers might require them in order to properly handle the removal.\n+\n+The MySQL connector\u2019s events are designed to work with link:https://kafka.apache.org/documentation.html#compaction[Kafka log compaction], which allows for the removal of some older messages as long as at least the most recent message for every key is kept. This allows Kafka to reclaim storage space while ensuring the topic contains a complete data set and can be used for reloading key-based state.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3NjUzNw==", "bodyText": "Could you use the attribute (see the JIRA issue for the name) instead of the hard-coded version (here and in the other listings).", "url": "https://github.com/debezium/debezium/pull/1384#discussion_r402076537", "createdAt": "2020-04-02T06:23:01Z", "author": {"login": "gunnarmorling"}, "path": "documentation/modules/ROOT/pages/modules/cdc-mysql-connector/c_mysql-connector-events.adoc", "diffHunk": "@@ -351,32 +374,57 @@ CREATE TABLE customers (\n       \"thread\": 7,\n       \"query\": \"UPDATE customers SET first_name='Anne Marie' WHERE id=1004\"\n     },\n-    \"op\": \"u\", <2>\n+    \"op\": \"u\",\n     \"ts_ms\": 1465581029523\n   }\n }\n ----\n \n+Comparing this to the value in the _insert_ event, you can see a couple of differences in the `payload` section:\n+\n+* The `op` field value is now `u`, signifying that this row changed because of an update.\n+\n+* The `before` field now has the state of the row with the values before the database commit.\n+\n+* The `after` field now has the updated state of the row, and the `first_name` value is now `Anne Marie`.\n+\n+* The `source` field structure has the same fields as before, but the values are different (this event is from a different position in the binlog).\n+\n+* The `ts_ms` field shows the timestamp when {prodname} processed this event.\n+\n+There are a couple things you can learn just by looking at the `payload` section:\n+\n+* You can compare the `before` and `after` structures to determine what actually changed in this row because of the commit.\n+\n+* The `source` structure shows information about MySQL\u2019s record of this change (providing traceability). It also has information you can use to compare to other events in this and other topics to know whether this event occurred before, after, or as part of the same MySQL commit as other events.\n+\n+[NOTE]\n+====\n+When the columns for a row\u2019s primary or unique key are updated, the value of the row\u2019s key is changed and {prodname} outputs three events: a _DELETE_ event and tombstone event with the old key for the row, followed by an _INSERT_ event with the new key for the row.\n+====\n \n === Delete change event value\n \n+The value of a _delete_ change event on the `customers` table has the exact same schema as _create_ and _update_ events. The payload is structured the same, but holds different values. Here is an example (formatted for readability):\n+\n+\n [source,json]\n ----\n {\n   \"schema\": { ... },\n   \"payload\": {\n-    \"before\": { <3>\n+    \"before\": {\n       \"id\": 1004,\n       \"first_name\": \"Anne Marie\",\n       \"last_name\": \"Kretchmar\",\n       \"email\": \"annek@noanswer.org\"\n     },\n-    \"after\": null, <4>\n-    \"source\": { <5>\n+    \"after\": null,\n+    \"source\": {\n       \"version\": \"0.10.0.Beta4\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3NzU4MA==", "bodyText": "I like the callouts + table structure there is for the first example. Perhaps nice to use it consistently for all the event examples? Also can be done separately if you prefer to get this one done quickly.", "url": "https://github.com/debezium/debezium/pull/1384#discussion_r402077580", "createdAt": "2020-04-02T06:25:42Z", "author": {"login": "gunnarmorling"}, "path": "documentation/modules/ROOT/pages/modules/cdc-mysql-connector/c_mysql-connector-events.adoc", "diffHunk": "@@ -351,32 +374,57 @@ CREATE TABLE customers (\n       \"thread\": 7,\n       \"query\": \"UPDATE customers SET first_name='Anne Marie' WHERE id=1004\"\n     },\n-    \"op\": \"u\", <2>\n+    \"op\": \"u\",\n     \"ts_ms\": 1465581029523\n   }\n }\n ----\n \n+Comparing this to the value in the _insert_ event, you can see a couple of differences in the `payload` section:", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3ODE2Mg==", "bodyText": "Without the note on Avro the tip reads a bit awkward, IMHO. As it describes a shortcoming, but no mitigation. Maybe skip it altogether downstream for the time being?", "url": "https://github.com/debezium/debezium/pull/1384#discussion_r402078162", "createdAt": "2020-04-02T06:27:08Z", "author": {"login": "gunnarmorling"}, "path": "documentation/modules/ROOT/pages/modules/cdc-mysql-connector/c_mysql-connector-events.adoc", "diffHunk": "@@ -314,32 +316,53 @@ CREATE TABLE customers (\n }\n ----\n \n+The schema portion of this event\u2019s _value_ shows the schema for the envelope, the schema for the source structure (which is specific to the MySQL connector and reused across all events), and the table-specific schemas for the `before` and `after` fields.\n+\n+[TIP]\n+====\n+The names of the schemas for the `before` and `after` fields are of the form `<logicalName>.<tableName>.Value`, and thus are entirely independent from all other schemas for all other tables.\n+ifndef::cdc-product[]\n+This means that when using the {link-prefix}:{link-avro-serialization}[Avro Converter], the resulting Avro schemas for each table in each logical source have their own evolution and history.\n+endif::cdc-product[]\n+====\n+\n+The `payload` portion of this event\u2019s _value_ shows the information in the event, namely that it is describing that the row was created (because `op=c`), and that the `after` field value contains the values of the new inserted row's `id`, `first_name`, `last_name`, and `email` columns.\n+\n+[TIP]\n+====\n+It may appear that the JSON representations of the events are much larger than the rows they describe. This is because the JSON representation must include the schema and the payload portions of the message.\n+ifndef::cdc-product[]\n+However, by using the {link-prefix}:{link-avro-serialization}[Avro Converter], you can dramatically decrease the size of the actual messages written to the Kafka topics.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 59}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8594eae8b316adfe5fd318159101385c416f3b24", "author": {"user": {"login": "bhardesty", "name": "Ben Hardesty"}}, "url": "https://github.com/debezium/debezium/commit/8594eae8b316adfe5fd318159101385c416f3b24", "committedDate": "2020-04-02T16:47:25Z", "message": "DBZ-1919 Restore create, update, delete event structure examples in doc"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "8594eae8b316adfe5fd318159101385c416f3b24", "author": {"user": {"login": "bhardesty", "name": "Ben Hardesty"}}, "url": "https://github.com/debezium/debezium/commit/8594eae8b316adfe5fd318159101385c416f3b24", "committedDate": "2020-04-02T16:47:25Z", "message": "DBZ-1919 Restore create, update, delete event structure examples in doc"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1972, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}