{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NzQzMTcx", "number": 1560, "title": "DBZ-2033 Making integration test more resilient", "bodyText": "https://issues.redhat.com/browse/DBZ-2033", "createdAt": "2020-06-04T10:34:55Z", "url": "https://github.com/debezium/debezium/pull/1560", "merged": true, "mergeCommit": {"oid": "fa74e55a2b6d86a7732c136b2e87c13f4ac7115a"}, "closed": true, "closedAt": "2020-06-04T15:08:09Z", "author": {"login": "gunnarmorling"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcn79aCAFqTQyNDMzMDQ3Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcn9IIQgBqjM0MDY1ODY0OTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MzMwNDcz", "url": "https://github.com/debezium/debezium/pull/1560#pullrequestreview-424330473", "createdAt": "2020-06-04T11:00:36Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMTowMDozNlrOGfAoQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMTowMDozNlrOGfAoQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE2OTM0Nw==", "bodyText": "@gunnarmorling I recommend to use org.awaitility.core.ConditionFactory.ignoreException(Class<? extends Throwable>)", "url": "https://github.com/debezium/debezium/pull/1560#discussion_r435169347", "createdAt": "2020-06-04T11:00:36Z", "author": {"login": "jpechane"}, "path": "debezium-testing/debezium-testing-testcontainers/src/test/java/io/debezium/testing/testcontainers/DebeziumContainerTest.java", "diffHunk": "@@ -71,11 +73,26 @@ public static void startContainers() {\n     public void canRegisterConnector() throws Exception {\n         debeziumContainer.registerConnector(\"my-connector-1\", getConfiguration(1));\n \n-        String status = executeHttpRequest(debeziumContainer.getConnectorStatus(\"my-connector-1\"));\n-\n-        assertThat(JsonPath.<String> read(status, \"$.name\")).isEqualTo(\"my-connector-1\");\n-        assertThat(JsonPath.<String> read(status, \"$.connector.state\")).isEqualTo(\"RUNNING\");\n-        assertThat(JsonPath.<String> read(status, \"$.tasks[0].state\")).isEqualTo(\"RUNNING\");\n+        // task initialization happens asynchronously, so we might have to retry until the task is RUNNING\n+        Awaitility.await()\n+                .pollInterval(Duration.ofMillis(250))\n+                .atMost(Duration.ofSeconds(5))\n+                .until(\n+                        () -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0Mzc4NDQy", "url": "https://github.com/debezium/debezium/pull/1560#pullrequestreview-424378442", "createdAt": "2020-06-04T12:12:52Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjoxMjo1MlrOGfC2Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjoxMjo1MlrOGfC2Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIwNTY4Mw==", "bodyText": "If there is a chance the path will exist but contain incorrect/outdated value for a period of time, this will fail with the first failed assertion. The correct method here is untilAsserted which is specifically designed to wait for correct assertions...", "url": "https://github.com/debezium/debezium/pull/1560#discussion_r435205683", "createdAt": "2020-06-04T12:12:52Z", "author": {"login": "jcechace"}, "path": "debezium-testing/debezium-testing-testcontainers/src/test/java/io/debezium/testing/testcontainers/DebeziumContainerTest.java", "diffHunk": "@@ -71,11 +73,21 @@ public static void startContainers() {\n     public void canRegisterConnector() throws Exception {\n         debeziumContainer.registerConnector(\"my-connector-1\", getConfiguration(1));\n \n-        String status = executeHttpRequest(debeziumContainer.getConnectorStatus(\"my-connector-1\"));\n-\n-        assertThat(JsonPath.<String> read(status, \"$.name\")).isEqualTo(\"my-connector-1\");\n-        assertThat(JsonPath.<String> read(status, \"$.connector.state\")).isEqualTo(\"RUNNING\");\n-        assertThat(JsonPath.<String> read(status, \"$.tasks[0].state\")).isEqualTo(\"RUNNING\");\n+        // task initialization happens asynchronously, so we might have to retry until the task is RUNNING\n+        Awaitility.await()\n+                .pollInterval(Duration.ofMillis(250))\n+                .atMost(Duration.ofSeconds(30))\n+                .ignoreException(PathNotFoundException.class)\n+                .until(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6a63b09074a1700e78536f2ff6cf396ebde6e5a", "author": {"user": {"login": "gunnarmorling", "name": "Gunnar Morling"}}, "url": "https://github.com/debezium/debezium/commit/f6a63b09074a1700e78536f2ff6cf396ebde6e5a", "committedDate": "2020-06-04T12:22:04Z", "message": "DBZ-2033 Making integration test more resilient"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "f6a63b09074a1700e78536f2ff6cf396ebde6e5a", "author": {"user": {"login": "gunnarmorling", "name": "Gunnar Morling"}}, "url": "https://github.com/debezium/debezium/commit/f6a63b09074a1700e78536f2ff6cf396ebde6e5a", "committedDate": "2020-06-04T12:22:04Z", "message": "DBZ-2033 Making integration test more resilient"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2572, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}