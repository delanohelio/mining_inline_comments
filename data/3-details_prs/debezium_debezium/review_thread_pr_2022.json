{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxODg2MjMw", "number": 2022, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo0MjowMFrOFHDcHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDozMTowOFrOFHvdmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyOTQwNzAyOnYy", "diffSide": "RIGHT", "path": "debezium-core/src/test/java/io/debezium/util/parser/TokenStream.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo0MjowMFrOIIWRlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo1Mzo0NFrOIIWjzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYyNDQ3MA==", "bodyText": "Ugh :) Why again do we need TokenStream in main? And if it's truly needed over there (and not test-only), can't we extend?", "url": "https://github.com/debezium/debezium/pull/2022#discussion_r545624470", "createdAt": "2020-12-18T07:42:00Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/test/java/io/debezium/util/parser/TokenStream.java", "diffHunk": "@@ -0,0 +1,2592 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.util.parser;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+import java.util.function.IntConsumer;\n+import java.util.function.LongConsumer;\n+\n+import io.debezium.annotation.Immutable;\n+import io.debezium.annotation.NotThreadSafe;\n+import io.debezium.function.BooleanConsumer;\n+import io.debezium.text.ParsingException;\n+import io.debezium.text.Position;\n+import io.debezium.text.XmlCharacters;\n+import io.debezium.util.Strings;\n+\n+/**\n+ * A copy of {@link io.debezium.text.TokenStream} class that provides additional methods necessary for test parser.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64bdb03d74055a7ebb9f0d849aff9cc18f5130c4"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYyOTEzNQ==", "bodyText": "It is used in TableIdParser and in Strings.\nI was attemptin to do the extension first but that would need not insignificant changes including even generfication of the class which I thought is unnecessary complication. Hence I followed the path of the least resistence and made the copy so the original tokenizer is not polluted with SQL specific stuff.", "url": "https://github.com/debezium/debezium/pull/2022#discussion_r545629135", "createdAt": "2020-12-18T07:53:44Z", "author": {"login": "jpechane"}, "path": "debezium-core/src/test/java/io/debezium/util/parser/TokenStream.java", "diffHunk": "@@ -0,0 +1,2592 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.util.parser;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+import java.util.function.IntConsumer;\n+import java.util.function.LongConsumer;\n+\n+import io.debezium.annotation.Immutable;\n+import io.debezium.annotation.NotThreadSafe;\n+import io.debezium.function.BooleanConsumer;\n+import io.debezium.text.ParsingException;\n+import io.debezium.text.Position;\n+import io.debezium.text.XmlCharacters;\n+import io.debezium.util.Strings;\n+\n+/**\n+ * A copy of {@link io.debezium.text.TokenStream} class that provides additional methods necessary for test parser.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYyNDQ3MA=="}, "originalCommit": {"oid": "64bdb03d74055a7ebb9f0d849aff9cc18f5130c4"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjE0NzM3OnYy", "diffSide": "RIGHT", "path": "debezium-core/src/test/java/io/debezium/relational/history/KafkaDatabaseHistoryTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNzo1NjoyOFrOIJPQeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDozMjozOFrOIJTnPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU1ODA3Mg==", "bodyText": "How about moving the affected tests to the MySQL connector module then, so we could get rid of the Legacy parser impl altogether?", "url": "https://github.com/debezium/debezium/pull/2022#discussion_r546558072", "createdAt": "2020-12-21T07:56:28Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/test/java/io/debezium/relational/history/KafkaDatabaseHistoryTest.java", "diffHunk": "@@ -29,11 +29,11 @@\n import io.debezium.doc.FixFor;\n import io.debezium.kafka.KafkaCluster;\n import io.debezium.relational.Tables;\n-import io.debezium.relational.ddl.DdlParserSql2003;\n-import io.debezium.relational.ddl.LegacyDdlParser;\n import io.debezium.text.ParsingException;\n import io.debezium.util.Collect;\n import io.debezium.util.Testing;\n+import io.debezium.util.parser.DdlParserSql2003;\n+import io.debezium.util.parser.LegacyDdlParser;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64bdb03d74055a7ebb9f0d849aff9cc18f5130c4"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYxOTk5Nw==", "bodyText": "@gunnarmorling Done. I am not sure if it is structurally clean but as a pragmatic solution it works.", "url": "https://github.com/debezium/debezium/pull/2022#discussion_r546619997", "createdAt": "2020-12-21T10:13:28Z", "author": {"login": "jpechane"}, "path": "debezium-core/src/test/java/io/debezium/relational/history/KafkaDatabaseHistoryTest.java", "diffHunk": "@@ -29,11 +29,11 @@\n import io.debezium.doc.FixFor;\n import io.debezium.kafka.KafkaCluster;\n import io.debezium.relational.Tables;\n-import io.debezium.relational.ddl.DdlParserSql2003;\n-import io.debezium.relational.ddl.LegacyDdlParser;\n import io.debezium.text.ParsingException;\n import io.debezium.util.Collect;\n import io.debezium.util.Testing;\n+import io.debezium.util.parser.DdlParserSql2003;\n+import io.debezium.util.parser.LegacyDdlParser;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU1ODA3Mg=="}, "originalCommit": {"oid": "64bdb03d74055a7ebb9f0d849aff9cc18f5130c4"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYyOTQzNg==", "bodyText": "Yes, it's a bit of a blurry line. But maintaining a whole parser impl only for testing seems like too much of an overhead to me. I think it's the better approach now.", "url": "https://github.com/debezium/debezium/pull/2022#discussion_r546629436", "createdAt": "2020-12-21T10:32:38Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/test/java/io/debezium/relational/history/KafkaDatabaseHistoryTest.java", "diffHunk": "@@ -29,11 +29,11 @@\n import io.debezium.doc.FixFor;\n import io.debezium.kafka.KafkaCluster;\n import io.debezium.relational.Tables;\n-import io.debezium.relational.ddl.DdlParserSql2003;\n-import io.debezium.relational.ddl.LegacyDdlParser;\n import io.debezium.text.ParsingException;\n import io.debezium.util.Collect;\n import io.debezium.util.Testing;\n+import io.debezium.util.parser.DdlParserSql2003;\n+import io.debezium.util.parser.LegacyDdlParser;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU1ODA3Mg=="}, "originalCommit": {"oid": "64bdb03d74055a7ebb9f0d849aff9cc18f5130c4"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjYxOTc2OnYy", "diffSide": "RIGHT", "path": "debezium-connector-mysql/src/test/java/io/debezium/relational/history/AbstractDatabaseHistoryTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDozMTowOFrOIJTkuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDo0Nzo0NVrOIJUDNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYyODc5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    record(23, 1, \"CREATE TABLE\\nnperson ( name VARCHAR(22) NOT NULL );\", all, t3, t2, t1);\n          \n          \n            \n                    record(23, 1, \"CREATE TABLE\\nperson ( name VARCHAR(22) NOT NULL );\", all, t3, t2, t1);\n          \n      \n    \n    \n  \n\nOne \"n\" too much?", "url": "https://github.com/debezium/debezium/pull/2022#discussion_r546628793", "createdAt": "2020-12-21T10:31:08Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-mysql/src/test/java/io/debezium/relational/history/AbstractDatabaseHistoryTest.java", "diffHunk": "@@ -94,8 +94,8 @@ protected Tables recover(long pos, int entry) {\n     @Test\n     public void shouldRecordChangesAndRecoverToVariousPoints() {\n         record(01, 0, \"CREATE TABLE foo ( first VARCHAR(22) NOT NULL );\", all, t3, t2, t1, t0);\n-        record(23, 1, \"CREATE TABLE\\\\nperson ( name VARCHAR(22) NOT NULL );\", all, t3, t2, t1);\n-        record(30, 2, \"CREATE TABLE address\\\\n( street VARCHAR(22) NOT NULL );\", all, t3, t2);\n+        record(23, 1, \"CREATE TABLE\\nnperson ( name VARCHAR(22) NOT NULL );\", all, t3, t2, t1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e59fa6f7071621d24f35a5b3b5dac9da3270dfa0"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYzMzU5OA==", "bodyText": "ns are for free so I probably wanted to be generous with them before Christmas ;-)", "url": "https://github.com/debezium/debezium/pull/2022#discussion_r546633598", "createdAt": "2020-12-21T10:41:29Z", "author": {"login": "jpechane"}, "path": "debezium-connector-mysql/src/test/java/io/debezium/relational/history/AbstractDatabaseHistoryTest.java", "diffHunk": "@@ -94,8 +94,8 @@ protected Tables recover(long pos, int entry) {\n     @Test\n     public void shouldRecordChangesAndRecoverToVariousPoints() {\n         record(01, 0, \"CREATE TABLE foo ( first VARCHAR(22) NOT NULL );\", all, t3, t2, t1, t0);\n-        record(23, 1, \"CREATE TABLE\\\\nperson ( name VARCHAR(22) NOT NULL );\", all, t3, t2, t1);\n-        record(30, 2, \"CREATE TABLE address\\\\n( street VARCHAR(22) NOT NULL );\", all, t3, t2);\n+        record(23, 1, \"CREATE TABLE\\nnperson ( name VARCHAR(22) NOT NULL );\", all, t3, t2, t1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYyODc5Mw=="}, "originalCommit": {"oid": "e59fa6f7071621d24f35a5b3b5dac9da3270dfa0"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYzNjU5Ng==", "bodyText": "LOL :)", "url": "https://github.com/debezium/debezium/pull/2022#discussion_r546636596", "createdAt": "2020-12-21T10:47:45Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-mysql/src/test/java/io/debezium/relational/history/AbstractDatabaseHistoryTest.java", "diffHunk": "@@ -94,8 +94,8 @@ protected Tables recover(long pos, int entry) {\n     @Test\n     public void shouldRecordChangesAndRecoverToVariousPoints() {\n         record(01, 0, \"CREATE TABLE foo ( first VARCHAR(22) NOT NULL );\", all, t3, t2, t1, t0);\n-        record(23, 1, \"CREATE TABLE\\\\nperson ( name VARCHAR(22) NOT NULL );\", all, t3, t2, t1);\n-        record(30, 2, \"CREATE TABLE address\\\\n( street VARCHAR(22) NOT NULL );\", all, t3, t2);\n+        record(23, 1, \"CREATE TABLE\\nnperson ( name VARCHAR(22) NOT NULL );\", all, t3, t2, t1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYyODc5Mw=="}, "originalCommit": {"oid": "e59fa6f7071621d24f35a5b3b5dac9da3270dfa0"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4111, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}