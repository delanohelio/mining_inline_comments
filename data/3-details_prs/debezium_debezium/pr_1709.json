{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1Mjg3NDMz", "number": 1709, "title": "DBZ-137 contribution to the core, Oracle related", "bodyText": "This PR replaces PR #1689 for https://issues.redhat.com/browse/DBZ-137\nNOTE: There is a supplemental PR in the incubator repository that is based on these changes.", "createdAt": "2020-07-22T18:38:03Z", "url": "https://github.com/debezium/debezium/pull/1709", "merged": true, "mergeCommit": {"oid": "73ba6d42a07b39183102bb332ee34be496314ec6"}, "closed": true, "closedAt": "2020-09-14T10:33:44Z", "author": {"login": "Naros"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3fWpxgFqTQ1MzU4NjQ0OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdIwpMYABqjM3NjI2MTM4OTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNTg2NDQ4", "url": "https://github.com/debezium/debezium/pull/1709#pullrequestreview-453586448", "createdAt": "2020-07-22T18:40:47Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODo0MDo0N1rOG1vazg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODo0MTozOFrOG1vcsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwNDYyMg==", "bodyText": "We should probably consider extracting incremental.fetch.size up and using this across multiple connectors?", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r459004622", "createdAt": "2020-07-22T18:40:47Z", "author": {"login": "Naros"}, "path": "debezium-connector-sqlserver/src/main/java/io/debezium/connector/sqlserver/SqlServerConnection.java", "diffHunk": "@@ -181,6 +195,10 @@ public void getChangesForTables(SqlServerChangeTable[] changeTables, Lsn interva\n             final Lsn fromLsn = getFromLsn(changeTable, intervalFromLsn);\n             LOGGER.trace(\"Getting changes for table {} in range[{}, {}]\", changeTable, fromLsn, intervalToLsn);\n             preparers[idx] = statement -> {\n+                String fetchSizeStr = config().asProperties().getProperty(\"incremental.fetch.size\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwNTEwNg==", "bodyText": "I'm not sure I necessarily agree with this configuration option.  What do others think?", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r459005106", "createdAt": "2020-07-22T18:41:38Z", "author": {"login": "Naros"}, "path": "debezium-connector-sqlserver/src/main/java/io/debezium/connector/sqlserver/SqlServerConnectorConfig.java", "diffHunk": "@@ -313,6 +313,16 @@ public static SnapshotIsolationMode parse(String value, String defaultValue) {\n                     + \"In '\" + SnapshotIsolationMode.READ_UNCOMMITTED.getValue()\n                     + \"' mode neither table nor row-level locks are acquired, but connector does not guarantee snapshot consistency.\");\n \n+    public static final Field SNAPSHOT_SKIP_LOCKS = Field.create(\"snapshot.skip.locks\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NjY0MDU0", "url": "https://github.com/debezium/debezium/pull/1709#pullrequestreview-454664054", "createdAt": "2020-07-24T06:46:41Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjo0Njo0MVrOG2kwWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjo1OTozNlrOG2lAgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3ODQ5MA==", "bodyText": "What is its meaning? In any case it should be a Field, be documented etc., both when being specific to SQL Server or being more general.", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r459878490", "createdAt": "2020-07-24T06:46:41Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-sqlserver/src/main/java/io/debezium/connector/sqlserver/SqlServerConnection.java", "diffHunk": "@@ -181,6 +195,10 @@ public void getChangesForTables(SqlServerChangeTable[] changeTables, Lsn interva\n             final Lsn fromLsn = getFromLsn(changeTable, intervalFromLsn);\n             LOGGER.trace(\"Getting changes for table {} in range[{}, {}]\", changeTable, fromLsn, intervalToLsn);\n             preparers[idx] = statement -> {\n+                String fetchSizeStr = config().asProperties().getProperty(\"incremental.fetch.size\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwNDYyMg=="}, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3OTA3Mg==", "bodyText": "Yes, please :)", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r459879072", "createdAt": "2020-07-24T06:48:47Z", "author": {"login": "gunnarmorling"}, "path": "pom.xml", "diffHunk": "@@ -74,7 +74,8 @@\n         <version.mongo.server>3.6</version.mongo.server>\n         <version.mongo.driver>3.12.3</version.mongo.driver>\n         <version.sqlserver.driver>7.2.2.jre8</version.sqlserver.driver>\n-\n+        <!-- todo: DBZ-137 this should likely be moved to incubator repository? -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3OTMyNg==", "bodyText": "Should be Duration, here and elsewhere.", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r459879326", "createdAt": "2020-07-24T06:49:33Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConfiguration.java", "diffHunk": "@@ -321,4 +372,31 @@ default String getUser() {\n     default String getPassword() {\n         return getString(PASSWORD);\n     }\n+\n+    /**\n+     * Get the datasource factory property from the configuration.\n+     *\n+     * @return the specified value, or null if there is none.\n+     */\n+    default String getConnectionFactoryClassName() {\n+        return getString(CONNECTION_FACTORY_CLASS);\n+    }\n+\n+    /**\n+     * Get the connection timeout from the configuration.\n+     *\n+     * @return the specified value, or null if there is none.\n+     */\n+    default int getConnectionTimeoutMs() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3OTUyMw==", "bodyText": "What is \"instance\"?", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r459879523", "createdAt": "2020-07-24T06:50:07Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConfiguration.java", "diffHunk": "@@ -44,6 +46,11 @@\n      */\n     public static final Field HOSTNAME = Field.create(\"hostname\", \"IP address of the database\");\n \n+    /**\n+     * A field for the instance name if any. This field has no default value.\n+     */\n+    public static final Field INSTANCE = Field.create(\"instance\", \"Instance name\").withValidation(Field::isOptional);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg4MDE2NQ==", "bodyText": "There is https://issues.redhat.com/browse/DBZ-2283 for this very nice improvement. It should be applied at the level of RelationalSnapshotChangeEventSource. Could you extract this one into its own PR, attributed to this issue? There should also be a test, at least for one of the RDBMS connectors.", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r459880165", "createdAt": "2020-07-24T06:52:11Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-sqlserver/src/main/java/io/debezium/connector/sqlserver/SqlServerSnapshotChangeEventSource.java", "diffHunk": "@@ -219,9 +223,43 @@ protected void complete(SnapshotContext snapshotContext) {\n      */\n     @Override\n     protected Optional<String> getSnapshotSelect(SnapshotContext snapshotContext, TableId tableId) {\n+        String modifiedColumns = checkBlacklistedColumns(tableId);\n+        if (modifiedColumns != null) {\n+            return Optional.of(String.format(\"SELECT %s FROM [%s].[%s]\", modifiedColumns, tableId.schema(), tableId.table()));\n+        }\n         return Optional.of(String.format(\"SELECT * FROM [%s].[%s]\", tableId.schema(), tableId.table()));\n     }\n \n+    @Override\n+    protected String enhanceOverriddenSelect(SnapshotContext snapshotContext, String overriddenSelect, TableId tableId) {\n+        String modifiedColumns = checkBlacklistedColumns(tableId);\n+        if (modifiedColumns != null) {\n+            overriddenSelect = overriddenSelect.replaceAll(\"\\\\*\", modifiedColumns);\n+        }\n+        return overriddenSelect;\n+    }\n+\n+    private String checkBlacklistedColumns(TableId tableId) {\n+        String modifiedColumns = null;\n+        String blackListColumnStr = connectorConfig.getConfig().getString(connectorConfig.COLUMN_BLACKLIST);\n+        if (blackListColumnStr != null && blackListColumnStr.trim().length() > 0\n+                && blackListColumnStr.contains(tableId.table())) {\n+            Table table = sqlServerDatabaseSchema.tableFor(tableId);\n+            modifiedColumns = table.retrieveColumnNames().stream()\n+                    .map(s -> {\n+                        StringBuilder sb = new StringBuilder();\n+                        if (!s.contains(tableId.table())) {\n+                            sb.append(tableId.table()).append(\".\").append(s);\n+                        }\n+                        else {\n+                            sb.append(s);\n+                        }\n+                        return sb.toString();\n+                    }).collect(Collectors.joining(\",\"));\n+        }\n+        return modifiedColumns;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg4MDYzMg==", "bodyText": "Yeah, seems like a great way to shoot into your own's foot. Also in other connectors we have \"snapshot lock modes\" instead of a plain boolean. So this would be good to compare and align with how things are handled there.", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r459880632", "createdAt": "2020-07-24T06:53:44Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-sqlserver/src/main/java/io/debezium/connector/sqlserver/SqlServerConnectorConfig.java", "diffHunk": "@@ -313,6 +313,16 @@ public static SnapshotIsolationMode parse(String value, String defaultValue) {\n                     + \"In '\" + SnapshotIsolationMode.READ_UNCOMMITTED.getValue()\n                     + \"' mode neither table nor row-level locks are acquired, but connector does not guarantee snapshot consistency.\");\n \n+    public static final Field SNAPSHOT_SKIP_LOCKS = Field.create(\"snapshot.skip.locks\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwNTEwNg=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg4MTM3Mg==", "bodyText": "Interesting, where/how is that used? The name of the interface to be implemented should be specified in the description.", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r459881372", "createdAt": "2020-07-24T06:56:00Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConfiguration.java", "diffHunk": "@@ -55,11 +62,25 @@\n      */\n     public static final Field ON_CONNECT_STATEMENTS = Field.create(\"initial.statements\", \"A semicolon separated list of statements to be executed on connection\");\n \n+    /**\n+     * An optional field for datasource factory class that will be used to build the datasource connection pool.\n+     */\n+    public static final Field CONNECTION_FACTORY_CLASS = Field.create(\"connection.factory.class\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg4MTgzNQ==", "bodyText": "Why \"close\"?", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r459881835", "createdAt": "2020-07-24T06:57:30Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConnection.java", "diffHunk": "@@ -360,14 +409,45 @@ public JdbcConnection execute(String... sqlStatements) throws SQLException {\n      * @throws SQLException if there is an error connecting to the database or executing the statements\n      */\n     public JdbcConnection execute(Operations operations) throws SQLException {\n+        return closeOnExecute((conn) -> {\n+            try (Statement statement = conn.createStatement();) {\n+                operations.apply(statement);\n+                if (!conn.getAutoCommit()) {\n+                    conn.commit();\n+                }\n+            }\n+        });\n+    }\n+\n+    private JdbcConnection closeOnExecute(IExecutable executable) throws SQLException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg4MjA4NQ==", "bodyText": "I don't quite understand the motivation for this one?", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r459882085", "createdAt": "2020-07-24T06:58:14Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConnection.java", "diffHunk": "@@ -438,17 +518,18 @@ public JdbcConnection query(String query, ResultSetConsumer resultConsumer) thro\n      * @throws SQLException if anything unexpected fails\n      */\n     public JdbcConnection call(String sql, CallPreparer callPreparer, ResultSetConsumer resultSetConsumer) throws SQLException {\n-        Connection conn = connection();\n-        try (CallableStatement callableStatement = conn.prepareCall(sql)) {\n-            if (callPreparer != null) {\n-                callPreparer.accept(callableStatement);\n-            }\n-            try (ResultSet rs = callableStatement.executeQuery()) {\n-                if (resultSetConsumer != null) {\n-                    resultSetConsumer.accept(rs);\n+        closeOnExecute((conn) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg4MjYyNw==", "bodyText": "This looks suspicious. We must not mix up ts_ms and source.ts_ms.", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r459882627", "createdAt": "2020-07-24T06:59:36Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/relational/RelationalChangeRecordEmitter.java", "diffHunk": "@@ -134,7 +139,8 @@ protected void emitDeleteRecord(Receiver receiver, TableSchema tableSchema) thro\n             return;\n         }\n \n-        Struct envelope = tableSchema.getEnvelopeSchema().delete(oldValue, getOffset().getSourceInfo(), getClock().currentTimeAsInstant());\n+        Instant instant = getInstantFrom(getOffset());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 74}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0OTMwODgx", "url": "https://github.com/debezium/debezium/pull/1709#pullrequestreview-484930881", "createdAt": "2020-09-09T11:56:27Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMTo1NjoyN1rOHPDxCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjozNzoxN1rOHPFO6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU1MjM5Mg==", "bodyText": "Can we extract this into an instance field populated in the constructor? Seems a bit wasteful to do this upon every invocation.", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r485552392", "createdAt": "2020-09-09T11:56:27Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-sqlserver/src/main/java/io/debezium/connector/sqlserver/SqlServerConnection.java", "diffHunk": "@@ -185,6 +198,10 @@ public void getChangesForTables(SqlServerChangeTable[] changeTables, Lsn interva\n             final Lsn fromLsn = getFromLsn(changeTable, intervalFromLsn);\n             LOGGER.trace(\"Getting changes for table {} in range[{}, {}]\", changeTable, fromLsn, intervalToLsn);\n             preparers[idx] = statement -> {\n+                String fetchSizeStr = config().asProperties().getProperty(SqlServerConnectorConfig.STREAMING_FETCH_SIZE.name());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU1Mzc1OA==", "bodyText": "There's a dedicated Jira issue for this nice optimization; can you reference it in the commit message and put it into the 1.3-next bucket?", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r485553758", "createdAt": "2020-09-09T11:58:36Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-sqlserver/src/main/java/io/debezium/connector/sqlserver/SqlServerSnapshotChangeEventSource.java", "diffHunk": "@@ -218,10 +221,52 @@ protected void complete(SnapshotContext snapshotContext) {\n      * @return a valid query string\n      */\n     @Override\n-    protected Optional<String> getSnapshotSelect(SnapshotContext snapshotContext, TableId tableId) {\n+    protected Optional<String> getSnapshotSelect(RelationalSnapshotContext snapshotContext, TableId tableId) {\n+        String modifiedColumns = checkExcludedColumns(tableId);\n+        if (modifiedColumns != null) {\n+            return Optional.of(String.format(\"SELECT %s FROM [%s].[%s]\", modifiedColumns, tableId.schema(), tableId.table()));\n+        }\n         return Optional.of(String.format(\"SELECT * FROM [%s].[%s]\", tableId.schema(), tableId.table()));\n     }\n \n+    @Override\n+    protected String enhanceOverriddenSelect(RelationalSnapshotContext snapshotContext, String overriddenSelect, TableId tableId) {\n+        String modifiedColumns = checkExcludedColumns(tableId);\n+        if (modifiedColumns != null) {\n+            overriddenSelect = overriddenSelect.replaceAll(\"\\\\*\", modifiedColumns);\n+        }\n+        return overriddenSelect;\n+    }\n+\n+    private String checkExcludedColumns(TableId tableId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU1NDM0Mw==", "bodyText": "This should be exposed via TableFilters preferably. If that's to much of a stretch for now, let's at least add a dedicated getter on SqlServerConnectorConfig.", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r485554343", "createdAt": "2020-09-09T11:59:18Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-sqlserver/src/main/java/io/debezium/connector/sqlserver/SqlServerSnapshotChangeEventSource.java", "diffHunk": "@@ -218,10 +221,52 @@ protected void complete(SnapshotContext snapshotContext) {\n      * @return a valid query string\n      */\n     @Override\n-    protected Optional<String> getSnapshotSelect(SnapshotContext snapshotContext, TableId tableId) {\n+    protected Optional<String> getSnapshotSelect(RelationalSnapshotContext snapshotContext, TableId tableId) {\n+        String modifiedColumns = checkExcludedColumns(tableId);\n+        if (modifiedColumns != null) {\n+            return Optional.of(String.format(\"SELECT %s FROM [%s].[%s]\", modifiedColumns, tableId.schema(), tableId.table()));\n+        }\n         return Optional.of(String.format(\"SELECT * FROM [%s].[%s]\", tableId.schema(), tableId.table()));\n     }\n \n+    @Override\n+    protected String enhanceOverriddenSelect(RelationalSnapshotContext snapshotContext, String overriddenSelect, TableId tableId) {\n+        String modifiedColumns = checkExcludedColumns(tableId);\n+        if (modifiedColumns != null) {\n+            overriddenSelect = overriddenSelect.replaceAll(\"\\\\*\", modifiedColumns);\n+        }\n+        return overriddenSelect;\n+    }\n+\n+    private String checkExcludedColumns(TableId tableId) {\n+        String modifiedColumns = null;\n+        String excludedColumnStr = getExcludedColumnStr();\n+        if (Objects.nonNull(excludedColumnStr)\n+                && excludedColumnStr.trim().length() > 0\n+                && excludedColumnStr.contains(tableId.table())) {\n+            Table table = sqlServerDatabaseSchema.tableFor(tableId);\n+            modifiedColumns = table.retrieveColumnNames().stream()\n+                    .map(s -> {\n+                        StringBuilder sb = new StringBuilder();\n+                        if (!s.contains(tableId.table())) {\n+                            sb.append(tableId.table()).append(\".\").append(s);\n+                        }\n+                        else {\n+                            sb.append(s);\n+                        }\n+                        return sb.toString();\n+                    }).collect(Collectors.joining(\",\"));\n+        }\n+        return modifiedColumns;\n+    }\n+\n+    private String getExcludedColumnStr() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU1NjQ2NA==", "bodyText": "Ok; should this not rather go into the SQL Server specific sub-class?", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r485556464", "createdAt": "2020-09-09T12:01:46Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConfiguration.java", "diffHunk": "@@ -44,6 +46,11 @@\n      */\n     public static final Field HOSTNAME = Field.create(\"hostname\", \"IP address of the database\");\n \n+    /**\n+     * A field for the instance name if any. This field has no default value.\n+     */\n+    public static final Field INSTANCE = Field.create(\"instance\", \"Instance name\").withValidation(Field::isOptional);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3OTUyMw=="}, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3MjQwMw==", "bodyText": "withConnectionFactoryClass?", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r485572403", "createdAt": "2020-09-09T12:30:44Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConfiguration.java", "diffHunk": "@@ -145,6 +177,26 @@ default Builder withDatabase(String databaseName) {\n         default Builder withPort(int port) {\n             return with(PORT, port);\n         }\n+\n+        /**\n+         * Use the given datasource factory class in the resulting configuration.\n+         *\n+         * @param datasourceFactoryClassName the datasource factory class name\n+         * @return this builder object so methods can be chained together; never null\n+         */\n+        default Builder withDatasourceClass(String datasourceFactoryClassName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3MjU2NA==", "bodyText": "Ms can be removed here.", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r485572564", "createdAt": "2020-09-09T12:31:02Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConfiguration.java", "diffHunk": "@@ -321,4 +373,31 @@ default String getUser() {\n     default String getPassword() {\n         return getString(PASSWORD);\n     }\n+\n+    /**\n+     * Get the datasource factory property from the configuration.\n+     *\n+     * @return the specified value, or null if there is none.\n+     */\n+    default String getConnectionFactoryClassName() {\n+        return getString(CONNECTION_FACTORY_CLASS);\n+    }\n+\n+    /**\n+     * Get the connection timeout from the configuration.\n+     *\n+     * @return the specified value, or null if there is none.\n+     */\n+    default Duration getConnectionTimeoutMs() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3MjYyOA==", "bodyText": "Should go to SQL Server.", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r485572628", "createdAt": "2020-09-09T12:31:09Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConfiguration.java", "diffHunk": "@@ -321,4 +373,31 @@ default String getUser() {\n     default String getPassword() {\n         return getString(PASSWORD);\n     }\n+\n+    /**\n+     * Get the datasource factory property from the configuration.\n+     *\n+     * @return the specified value, or null if there is none.\n+     */\n+    default String getConnectionFactoryClassName() {\n+        return getString(CONNECTION_FACTORY_CLASS);\n+    }\n+\n+    /**\n+     * Get the connection timeout from the configuration.\n+     *\n+     * @return the specified value, or null if there is none.\n+     */\n+    default Duration getConnectionTimeoutMs() {\n+        return Duration.ofMillis(getInteger(CONNECTION_TIMEOUT_MS));\n+    }\n+\n+    /**\n+     * Get the instance from the configuration.\n+     *\n+     * @return the specified value, or null if there is none.\n+     */\n+    default String getInstance() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3Mjk1NQ==", "bodyText": "Fields can be made final?", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r485572955", "createdAt": "2020-09-09T12:31:37Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/jdbc/JdbcConnection.java", "diffHunk": "@@ -90,6 +91,29 @@ public void onEntryChosenForEviction(PreparedStatement statement) {\n         Connection connect(JdbcConfiguration config) throws SQLException;\n     }\n \n+    private class ConnectionFactoryDecorator implements ConnectionFactory {\n+        private ConnectionFactory defaultConnectionFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3NDk2MQ==", "bodyText": "That seems not right? The envelope ts_ms is the time of processing in Debezium, not the time of the change in the soure database.", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r485574961", "createdAt": "2020-09-09T12:34:58Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/relational/RelationalChangeRecordEmitter.java", "diffHunk": "@@ -64,7 +66,8 @@ protected void emitCreateRecord(Receiver receiver, TableSchema tableSchema)\n         Object[] newColumnValues = getNewColumnValues();\n         Object newKey = tableSchema.keyFromColumnData(newColumnValues);\n         Struct newValue = tableSchema.valueFromColumnData(newColumnValues);\n-        Struct envelope = tableSchema.getEnvelopeSchema().create(newValue, getOffset().getSourceInfo(), getClock().currentTimeAsInstant());\n+        Instant instant = getInstantFrom(getOffset());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3NjQyNQ==", "bodyText": "Ok, I see. As you say:\n\nis the top-level ts_ms in change events. That why that change above should be reverted.\nis source.ts_ms\n\nThere could be a new field for 2. under source for SQL Server? How can that info be obtained, though?", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r485576425", "createdAt": "2020-09-09T12:37:17Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/relational/RelationalChangeRecordEmitter.java", "diffHunk": "@@ -134,7 +139,8 @@ protected void emitDeleteRecord(Receiver receiver, TableSchema tableSchema) thro\n             return;\n         }\n \n-        Struct envelope = tableSchema.getEnvelopeSchema().delete(oldValue, getOffset().getSourceInfo(), getClock().currentTimeAsInstant());\n+        Instant instant = getInstantFrom(getOffset());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg4MjYyNw=="}, "originalCommit": null, "originalPosition": 74}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "12fcb7e3fe4d801112235d9cc2bcaf6339a90a91", "author": {"user": {"login": "AndreyIg", "name": "Andrey Ignatenko"}}, "url": "https://github.com/debezium/debezium/commit/12fcb7e3fe4d801112235d9cc2bcaf6339a90a91", "committedDate": "2020-09-10T18:29:26Z", "message": "DBZ-137 contribution to the core, Oracle related"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e87cee130fe2e632ab511ed0aaacb5c064643ee2", "author": {"user": {"login": "Naros", "name": "Chris Cranford"}}, "url": "https://github.com/debezium/debezium/commit/e87cee130fe2e632ab511ed0aaacb5c064643ee2", "committedDate": "2020-09-10T18:29:26Z", "message": "DBZ-137 Fix rebase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce62c7417db2c240b382f7301c294139e79b31a1", "author": {"user": {"login": "Naros", "name": "Chris Cranford"}}, "url": "https://github.com/debezium/debezium/commit/ce62c7417db2c240b382f7301c294139e79b31a1", "committedDate": "2020-09-10T18:29:27Z", "message": "DBZ-137 Introduce streaming.fetch.size for SQL Server."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9017d8b28304c8f211a5c44ba238706c071db5e0", "author": {"user": {"login": "Naros", "name": "Chris Cranford"}}, "url": "https://github.com/debezium/debezium/commit/9017d8b28304c8f211a5c44ba238706c071db5e0", "committedDate": "2020-09-10T18:29:27Z", "message": "DBZ-137 Remove snapshot.skip.locks for SQL Server"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d59ebacc51e9b03e15dfdfe43ffa56875b70c0d7", "author": {"user": {"login": "Naros", "name": "Chris Cranford"}}, "url": "https://github.com/debezium/debezium/commit/d59ebacc51e9b03e15dfdfe43ffa56875b70c0d7", "committedDate": "2020-09-10T18:29:27Z", "message": "DBZ-137 Removed POM property version.oracle.driver"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "faa083d3b1985fe574950f1796e79d44c159710c", "author": {"user": {"login": "Naros", "name": "Chris Cranford"}}, "url": "https://github.com/debezium/debezium/commit/faa083d3b1985fe574950f1796e79d44c159710c", "committedDate": "2020-09-10T18:29:27Z", "message": "DBZ-137 Use Duration for CONNECTION_TIMEOUT_MS"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f61d32e19324f4ee38ac8efbbd0c6583cc3df0e", "author": {"user": {"login": "Naros", "name": "Chris Cranford"}}, "url": "https://github.com/debezium/debezium/commit/5f61d32e19324f4ee38ac8efbbd0c6583cc3df0e", "committedDate": "2020-09-10T18:29:27Z", "message": "DBZ-137 Fix compilation problems"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ea5de8a264abe805af112787a984deba297b6f4", "author": {"user": {"login": "Naros", "name": "Chris Cranford"}}, "url": "https://github.com/debezium/debezium/commit/5ea5de8a264abe805af112787a984deba297b6f4", "committedDate": "2020-09-10T18:29:27Z", "message": "DBZ-137 Fix SQL Server test failures"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff90eb0f84233135add6bf5fb33cef5e90aa7b0e", "author": {"user": {"login": "Naros", "name": "Chris Cranford"}}, "url": "https://github.com/debezium/debezium/commit/ff90eb0f84233135add6bf5fb33cef5e90aa7b0e", "committedDate": "2020-09-10T18:29:27Z", "message": "DBZ-137 Reimagine stream.fetch.size as query.fetch.size"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "38436f5dc35465f002f95206ede6d74674955ce9", "author": {"user": {"login": "Naros", "name": "Chris Cranford"}}, "url": "https://github.com/debezium/debezium/commit/38436f5dc35465f002f95206ede6d74674955ce9", "committedDate": "2020-09-11T20:03:36Z", "message": "DBZ-137 Suggested changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30479d0d497543e96164e8915edd30ff8ef81e14", "author": {"user": {"login": "Naros", "name": "Chris Cranford"}}, "url": "https://github.com/debezium/debezium/commit/30479d0d497543e96164e8915edd30ff8ef81e14", "committedDate": "2020-09-11T20:03:40Z", "message": "DBZ-137 DBZ-2283 Exclude filtered columns in SQL Server snapshot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "929349ea46d44e4d04549288b5625883982ae695", "author": {"user": {"login": "Naros", "name": "Chris Cranford"}}, "url": "https://github.com/debezium/debezium/commit/929349ea46d44e4d04549288b5625883982ae695", "committedDate": "2020-09-11T20:03:40Z", "message": "DBZ-137 Documentation update"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "929349ea46d44e4d04549288b5625883982ae695", "author": {"user": {"login": "Naros", "name": "Chris Cranford"}}, "url": "https://github.com/debezium/debezium/commit/929349ea46d44e4d04549288b5625883982ae695", "committedDate": "2020-09-11T20:03:40Z", "message": "DBZ-137 Documentation update"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NTYzMzg3", "url": "https://github.com/debezium/debezium/pull/1709#pullrequestreview-487563387", "createdAt": "2020-09-14T09:10:55Z", "commit": {"oid": "929349ea46d44e4d04549288b5625883982ae695"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOToxMDo1NVrOHRKzKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOToxMDo1NVrOHRKzKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc2NDc3OQ==", "bodyText": "I'm still struggling with this; where is this used? Only in your custom connection factory, @mallikankati?", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r487764779", "createdAt": "2020-09-14T09:10:55Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-sqlserver/src/main/java/io/debezium/connector/sqlserver/SqlServerConnectorConfig.java", "diffHunk": "@@ -391,6 +401,10 @@ public String getDatabaseName() {\n         return databaseName;\n     }\n \n+    public String getInstanceName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "929349ea46d44e4d04549288b5625883982ae695"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NTkzNTg1", "url": "https://github.com/debezium/debezium/pull/1709#pullrequestreview-487593585", "createdAt": "2020-09-14T09:50:41Z", "commit": {"oid": "929349ea46d44e4d04549288b5625883982ae695"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo1MDo0MVrOHRMPAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo1MDo0MVrOHRMPAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4ODI5MA==", "bodyText": "Ok, I think it's a bit unfortunate that this was done only for SQL Server. I've logged https://issues.redhat.com/browse/DBZ-2525 for pulling this up so that all relational connectors benefit from this.", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r487788290", "createdAt": "2020-09-14T09:50:41Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-sqlserver/src/main/java/io/debezium/connector/sqlserver/SqlServerSnapshotChangeEventSource.java", "diffHunk": "@@ -218,10 +221,45 @@ protected void complete(SnapshotContext snapshotContext) {\n      * @return a valid query string\n      */\n     @Override\n-    protected Optional<String> getSnapshotSelect(SnapshotContext snapshotContext, TableId tableId) {\n+    protected Optional<String> getSnapshotSelect(RelationalSnapshotContext snapshotContext, TableId tableId) {\n+        String modifiedColumns = checkExcludedColumns(tableId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "929349ea46d44e4d04549288b5625883982ae695"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NjA2MjU0", "url": "https://github.com/debezium/debezium/pull/1709#pullrequestreview-487606254", "createdAt": "2020-09-14T10:06:55Z", "commit": {"oid": "929349ea46d44e4d04549288b5625883982ae695"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDowNjo1NlrOHRM1Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDowNjo1NlrOHRM1Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5ODA4Mw==", "bodyText": "I don't understand how this method is supposed to work. The excluded columns are not removed from the statement anywhere. Also note that the exclusion expression doesn't necessarily contain the table name (e.g. could be .*mycolumn). This entire method seems flawed to me.\nThat said, it doesn't seem to to harm either, so I'll for now simply move https://issues.redhat.com/browse/DBZ-2283 onwards to the next iteration.", "url": "https://github.com/debezium/debezium/pull/1709#discussion_r487798083", "createdAt": "2020-09-14T10:06:56Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-sqlserver/src/main/java/io/debezium/connector/sqlserver/SqlServerSnapshotChangeEventSource.java", "diffHunk": "@@ -218,10 +221,45 @@ protected void complete(SnapshotContext snapshotContext) {\n      * @return a valid query string\n      */\n     @Override\n-    protected Optional<String> getSnapshotSelect(SnapshotContext snapshotContext, TableId tableId) {\n+    protected Optional<String> getSnapshotSelect(RelationalSnapshotContext snapshotContext, TableId tableId) {\n+        String modifiedColumns = checkExcludedColumns(tableId);\n+        if (modifiedColumns != null) {\n+            return Optional.of(String.format(\"SELECT %s FROM [%s].[%s]\", modifiedColumns, tableId.schema(), tableId.table()));\n+        }\n         return Optional.of(String.format(\"SELECT * FROM [%s].[%s]\", tableId.schema(), tableId.table()));\n     }\n \n+    @Override\n+    protected String enhanceOverriddenSelect(RelationalSnapshotContext snapshotContext, String overriddenSelect, TableId tableId) {\n+        String modifiedColumns = checkExcludedColumns(tableId);\n+        if (modifiedColumns != null) {\n+            overriddenSelect = overriddenSelect.replaceAll(\"\\\\*\", modifiedColumns);\n+        }\n+        return overriddenSelect;\n+    }\n+\n+    private String checkExcludedColumns(TableId tableId) {\n+        String modifiedColumns = null;\n+        String excludedColumnStr = connectorConfig.getTableFilters().getExcludeColumns();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "929349ea46d44e4d04549288b5625883982ae695"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53b88e6f47189a69d385aac42ced4455ce573fc7", "author": {"user": {"login": "gunnarmorling", "name": "Gunnar Morling"}}, "url": "https://github.com/debezium/debezium/commit/53b88e6f47189a69d385aac42ced4455ce573fc7", "committedDate": "2020-09-14T10:28:50Z", "message": "DBZ-137 Docs update"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "53b88e6f47189a69d385aac42ced4455ce573fc7", "author": {"user": {"login": "gunnarmorling", "name": "Gunnar Morling"}}, "url": "https://github.com/debezium/debezium/commit/53b88e6f47189a69d385aac42ced4455ce573fc7", "committedDate": "2020-09-14T10:28:50Z", "message": "DBZ-137 Docs update"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2514, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}