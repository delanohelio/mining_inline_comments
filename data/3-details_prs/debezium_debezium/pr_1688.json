{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3MDA1MTIz", "number": 1688, "title": "DBZ-2324 Fix test failure - TablesWithoutPrimaryKeyIT#shouldProcessFromStreaming", "bodyText": "https://issues.redhat.com/browse/DBZ-2324\nI went ahead in this PR and created a utility method in TestHelper to allow us to validate the existence of the CDC records prior to allowing the test to proceed and validate the expected connector observations as I think this is going to become a more prominent problem in our SQL Server tests are we uncover more timing-related issues.  If there are better ways to structure that check, I'm welcome to any suggestions.", "createdAt": "2020-07-09T17:47:43Z", "url": "https://github.com/debezium/debezium/pull/1688", "merged": true, "mergeCommit": {"oid": "95f3562857463f70b74ae4f37a280e2d3703c61d"}, "closed": true, "closedAt": "2020-07-10T15:30:12Z", "author": {"login": "Naros"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABczS5h-gH2gAyNDQ3MDA1MTIzOjhiOGVlZGI0MThiYmQ0YWI2YTE3ZDIzZjFkYTEyMWJlMzNjOTE2MWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABczj64ugH2gAyNDQ3MDA1MTIzOjk0YjEwYzM3MzJiOWRiOGI4MWRmODdmNDE1MDRlYzIwM2VlMDY4ZDE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8b8eedb418bbd4ab6a17d23f1da121be33c9161e", "author": {"user": {"login": "Naros", "name": "Chris Cranford"}}, "url": "https://github.com/debezium/debezium/commit/8b8eedb418bbd4ab6a17d23f1da121be33c9161e", "committedDate": "2020-07-09T17:57:21Z", "message": "DBZ-2324 Fix test failure - TablesWithoutPrimaryKeyIT#shouldProcessFromStreaming"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "8b8eedb418bbd4ab6a17d23f1da121be33c9161e", "author": {"user": {"login": "Naros", "name": "Chris Cranford"}}, "url": "https://github.com/debezium/debezium/commit/8b8eedb418bbd4ab6a17d23f1da121be33c9161e", "committedDate": "2020-07-09T17:57:21Z", "message": "DBZ-2324 Fix test failure - TablesWithoutPrimaryKeyIT#shouldProcessFromStreaming"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1OTM5Nzgw", "url": "https://github.com/debezium/debezium/pull/1688#pullrequestreview-445939780", "createdAt": "2020-07-09T20:20:06Z", "commit": {"oid": "8b8eedb418bbd4ab6a17d23f1da121be33c9161e"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMDoyMDowNlrOGvgZfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMDoyNjozNFrOGvgmLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ2NzA2OQ==", "bodyText": "I think we did 100ms elsewhere for shorter turn-around.", "url": "https://github.com/debezium/debezium/pull/1688#discussion_r452467069", "createdAt": "2020-07-09T20:20:06Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-sqlserver/src/test/java/io/debezium/connector/sqlserver/util/TestHelper.java", "diffHunk": "@@ -345,4 +350,66 @@ private static ObjectName getObjectName(String context, String serverName) throw\n     public static int waitTimeForRecords() {\n         return Integer.parseInt(System.getProperty(TEST_PROPERTY_PREFIX + \"records.waittime\", \"5\"));\n     }\n+\n+    /**\n+     * Utility method that will poll the CDC change tables and provide the record handler with the changes detected.\n+     * The record handler can then make a determination as to whether to return {@code true} if the expected outcome\n+     * exists or {@code false} to indicate it did not find what it expected.  This method will block until either\n+     * the handler returns {@code true} or if the polling fails to complete within the allocated poll window.\n+     *\n+     * @param connection the SQL Server connection to be used\n+     * @param tableName the main table name to be checked\n+     * @param handler the handler method to be called if changes are found in the capture table instance\n+     */\n+    public static void waitForCdcRecord(SqlServerConnection connection, String tableName, CdcRecordHandler handler) {\n+        try {\n+            Awaitility.await(\"Checking for expected record in CDC table for \" + tableName)\n+                    .atMost(30, TimeUnit.SECONDS)\n+                    .pollDelay(Duration.ofSeconds(0))\n+                    .pollInterval(Duration.ofSeconds(1)).until(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b8eedb418bbd4ab6a17d23f1da121be33c9161e"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ2OTYyNw==", "bodyText": "Can the original exception be passed?", "url": "https://github.com/debezium/debezium/pull/1688#discussion_r452469627", "createdAt": "2020-07-09T20:25:14Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-sqlserver/src/test/java/io/debezium/connector/sqlserver/util/TestHelper.java", "diffHunk": "@@ -345,4 +350,66 @@ private static ObjectName getObjectName(String context, String serverName) throw\n     public static int waitTimeForRecords() {\n         return Integer.parseInt(System.getProperty(TEST_PROPERTY_PREFIX + \"records.waittime\", \"5\"));\n     }\n+\n+    /**\n+     * Utility method that will poll the CDC change tables and provide the record handler with the changes detected.\n+     * The record handler can then make a determination as to whether to return {@code true} if the expected outcome\n+     * exists or {@code false} to indicate it did not find what it expected.  This method will block until either\n+     * the handler returns {@code true} or if the polling fails to complete within the allocated poll window.\n+     *\n+     * @param connection the SQL Server connection to be used\n+     * @param tableName the main table name to be checked\n+     * @param handler the handler method to be called if changes are found in the capture table instance\n+     */\n+    public static void waitForCdcRecord(SqlServerConnection connection, String tableName, CdcRecordHandler handler) {\n+        try {\n+            Awaitility.await(\"Checking for expected record in CDC table for \" + tableName)\n+                    .atMost(30, TimeUnit.SECONDS)\n+                    .pollDelay(Duration.ofSeconds(0))\n+                    .pollInterval(Duration.ofSeconds(1)).until(() -> {\n+                        if (!connection.getMaxLsn().isAvailable()) {\n+                            return false;\n+                        }\n+\n+                        for (SqlServerChangeTable ct : connection.listOfChangeTables()) {\n+                            final String ctTableName = ct.getChangeTableId().table();\n+                            if (ctTableName.endsWith(\"dbo_\" + connection.getNameOfChangeTable(tableName))) {\n+                                try {\n+                                    final Lsn minLsn = connection.getMinLsn(ctTableName);\n+                                    final Lsn maxLsn = connection.getMaxLsn();\n+                                    final AtomicReference<Boolean> found = new AtomicReference(false);\n+                                    SqlServerChangeTable[] tables = Collections.singletonList(ct).toArray(new SqlServerChangeTable[]{});\n+                                    connection.getChangesForTables(tables, minLsn, maxLsn, resultsets -> {\n+                                        final ResultSet rs = resultsets[0];\n+                                        while (rs.next()) {\n+                                            if (handler.apply(rs)) {\n+                                                found.set(true);\n+                                                break;\n+                                            }\n+                                        }\n+                                    });\n+                                    return found.get();\n+                                }\n+                                catch (Exception e) {\n+                                    if (e.getMessage().contains(\"An insufficient number of arguments were supplied\")) {\n+                                        // This can happen if the request to get changes for tables happens too quickly.\n+                                        // In this case, we're going to ignore it.\n+                                        return false;\n+                                    }\n+                                    org.junit.Assert.fail(\"Failed to fetch changes for \" + tableName + \": \" + e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b8eedb418bbd4ab6a17d23f1da121be33c9161e"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ3MDMxNg==", "bodyText": "Extracting a method might help to avoid having to modify the atomic reference as a side-effect. We do that elsewhere too and I generally don't really like it.", "url": "https://github.com/debezium/debezium/pull/1688#discussion_r452470316", "createdAt": "2020-07-09T20:26:34Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-sqlserver/src/test/java/io/debezium/connector/sqlserver/util/TestHelper.java", "diffHunk": "@@ -345,4 +350,66 @@ private static ObjectName getObjectName(String context, String serverName) throw\n     public static int waitTimeForRecords() {\n         return Integer.parseInt(System.getProperty(TEST_PROPERTY_PREFIX + \"records.waittime\", \"5\"));\n     }\n+\n+    /**\n+     * Utility method that will poll the CDC change tables and provide the record handler with the changes detected.\n+     * The record handler can then make a determination as to whether to return {@code true} if the expected outcome\n+     * exists or {@code false} to indicate it did not find what it expected.  This method will block until either\n+     * the handler returns {@code true} or if the polling fails to complete within the allocated poll window.\n+     *\n+     * @param connection the SQL Server connection to be used\n+     * @param tableName the main table name to be checked\n+     * @param handler the handler method to be called if changes are found in the capture table instance\n+     */\n+    public static void waitForCdcRecord(SqlServerConnection connection, String tableName, CdcRecordHandler handler) {\n+        try {\n+            Awaitility.await(\"Checking for expected record in CDC table for \" + tableName)\n+                    .atMost(30, TimeUnit.SECONDS)\n+                    .pollDelay(Duration.ofSeconds(0))\n+                    .pollInterval(Duration.ofSeconds(1)).until(() -> {\n+                        if (!connection.getMaxLsn().isAvailable()) {\n+                            return false;\n+                        }\n+\n+                        for (SqlServerChangeTable ct : connection.listOfChangeTables()) {\n+                            final String ctTableName = ct.getChangeTableId().table();\n+                            if (ctTableName.endsWith(\"dbo_\" + connection.getNameOfChangeTable(tableName))) {\n+                                try {\n+                                    final Lsn minLsn = connection.getMinLsn(ctTableName);\n+                                    final Lsn maxLsn = connection.getMaxLsn();\n+                                    final AtomicReference<Boolean> found = new AtomicReference(false);\n+                                    SqlServerChangeTable[] tables = Collections.singletonList(ct).toArray(new SqlServerChangeTable[]{});\n+                                    connection.getChangesForTables(tables, minLsn, maxLsn, resultsets -> {\n+                                        final ResultSet rs = resultsets[0];\n+                                        while (rs.next()) {\n+                                            if (handler.apply(rs)) {\n+                                                found.set(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b8eedb418bbd4ab6a17d23f1da121be33c9161e"}, "originalPosition": 61}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94b10c3732b9db8b81df87f41504ec203ee068d1", "author": {"user": {"login": "Naros", "name": "Chris Cranford"}}, "url": "https://github.com/debezium/debezium/commit/94b10c3732b9db8b81df87f41504ec203ee068d1", "committedDate": "2020-07-10T13:47:13Z", "message": "DBZ-2324 Suggested changes"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2487, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}