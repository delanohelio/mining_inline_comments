{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3MTE0MjEx", "number": 1275, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNToyNzowNlrODjHwpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNTozNzowN1rODjIBow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTUzODk1OnYy", "diffSide": "RIGHT", "path": "debezium-api/src/main/java/io/debezium/spi/converter/RelationalColumn.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNToyNzowNlrOFuwERQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNToyNzowNlrOFuwERQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU2NjM0MQ==", "bodyText": "OptionalInt?", "url": "https://github.com/debezium/debezium/pull/1275#discussion_r384566341", "createdAt": "2020-02-26T15:27:06Z", "author": {"login": "gunnarmorling"}, "path": "debezium-api/src/main/java/io/debezium/spi/converter/RelationalColumn.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.spi.converter;\n+\n+import java.sql.Types;\n+import java.util.Optional;\n+\n+import io.debezium.common.annotation.Incubating;\n+\n+/**\n+ * A definition of a converted relational column.\n+ *\n+ * @author Randall Hauch\n+\n+ */\n+@Incubating\n+public interface RelationalColumn extends ConvertedField {\n+\n+    /**\n+     * Get the {@link Types JDBC type} for this column\n+     *\n+     * @return the type constant\n+     */\n+    int jdbcType();\n+\n+    /**\n+     * Get the database native type for this column\n+     *\n+     * @return a type constant for the specific database\n+     */\n+    int nativeType();\n+\n+    /**\n+     * Get the database-specific name of the column's data type.\n+     *\n+     * @return the name of the type\n+     */\n+    String typeName();\n+\n+    /**\n+     * Get the database-specific complete expression defining the column's data type, including dimensions, length, precision,\n+     * character sets, constraints, etc.\n+     *\n+     * @return the complete type expression\n+     */\n+    String typeExpression();\n+\n+    /**\n+     * Get the maximum length of this column's values. For numeric columns, this represents the precision.\n+     *\n+     * @return the length of the column\n+     */\n+    int length();\n+\n+    /**\n+     * Get the scale of the column.\n+     *\n+     * @return the scale if it applies to this type\n+     */\n+    Optional<Integer> scale();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aef8ea4618894861c109544b700ab00cbdaa335"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTUzOTU1OnYy", "diffSide": "RIGHT", "path": "debezium-api/src/main/java/io/debezium/spi/converter/RelationalColumn.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNToyNzoxNFrOFuwEqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNToyNzoxNFrOFuwEqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU2NjQ0MA==", "bodyText": "OptionalInt?", "url": "https://github.com/debezium/debezium/pull/1275#discussion_r384566440", "createdAt": "2020-02-26T15:27:14Z", "author": {"login": "gunnarmorling"}, "path": "debezium-api/src/main/java/io/debezium/spi/converter/RelationalColumn.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.spi.converter;\n+\n+import java.sql.Types;\n+import java.util.Optional;\n+\n+import io.debezium.common.annotation.Incubating;\n+\n+/**\n+ * A definition of a converted relational column.\n+ *\n+ * @author Randall Hauch\n+\n+ */\n+@Incubating\n+public interface RelationalColumn extends ConvertedField {\n+\n+    /**\n+     * Get the {@link Types JDBC type} for this column\n+     *\n+     * @return the type constant\n+     */\n+    int jdbcType();\n+\n+    /**\n+     * Get the database native type for this column\n+     *\n+     * @return a type constant for the specific database\n+     */\n+    int nativeType();\n+\n+    /**\n+     * Get the database-specific name of the column's data type.\n+     *\n+     * @return the name of the type\n+     */\n+    String typeName();\n+\n+    /**\n+     * Get the database-specific complete expression defining the column's data type, including dimensions, length, precision,\n+     * character sets, constraints, etc.\n+     *\n+     * @return the complete type expression\n+     */\n+    String typeExpression();\n+\n+    /**\n+     * Get the maximum length of this column's values. For numeric columns, this represents the precision.\n+     *\n+     * @return the length of the column\n+     */\n+    int length();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aef8ea4618894861c109544b700ab00cbdaa335"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTU0MTU5OnYy", "diffSide": "RIGHT", "path": "debezium-api/src/main/java/io/debezium/spi/converter/RelationalColumn.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNToyNzozOVrOFuwGAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNzoyMzo1NVrOFu04_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU2Njc4NA==", "bodyText": "Optional<String>?", "url": "https://github.com/debezium/debezium/pull/1275#discussion_r384566784", "createdAt": "2020-02-26T15:27:39Z", "author": {"login": "gunnarmorling"}, "path": "debezium-api/src/main/java/io/debezium/spi/converter/RelationalColumn.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.spi.converter;\n+\n+import java.sql.Types;\n+import java.util.Optional;\n+\n+import io.debezium.common.annotation.Incubating;\n+\n+/**\n+ * A definition of a converted relational column.\n+ *\n+ * @author Randall Hauch\n+\n+ */\n+@Incubating\n+public interface RelationalColumn extends ConvertedField {\n+\n+    /**\n+     * Get the {@link Types JDBC type} for this column\n+     *\n+     * @return the type constant\n+     */\n+    int jdbcType();\n+\n+    /**\n+     * Get the database native type for this column\n+     *\n+     * @return a type constant for the specific database\n+     */\n+    int nativeType();\n+\n+    /**\n+     * Get the database-specific name of the column's data type.\n+     *\n+     * @return the name of the type\n+     */\n+    String typeName();\n+\n+    /**\n+     * Get the database-specific complete expression defining the column's data type, including dimensions, length, precision,\n+     * character sets, constraints, etc.\n+     *\n+     * @return the complete type expression\n+     */\n+    String typeExpression();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aef8ea4618894861c109544b700ab00cbdaa335"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwOTgyOA==", "bodyText": "I don't think so - the type expression is always at least the type name", "url": "https://github.com/debezium/debezium/pull/1275#discussion_r384609828", "createdAt": "2020-02-26T16:28:02Z", "author": {"login": "jpechane"}, "path": "debezium-api/src/main/java/io/debezium/spi/converter/RelationalColumn.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.spi.converter;\n+\n+import java.sql.Types;\n+import java.util.Optional;\n+\n+import io.debezium.common.annotation.Incubating;\n+\n+/**\n+ * A definition of a converted relational column.\n+ *\n+ * @author Randall Hauch\n+\n+ */\n+@Incubating\n+public interface RelationalColumn extends ConvertedField {\n+\n+    /**\n+     * Get the {@link Types JDBC type} for this column\n+     *\n+     * @return the type constant\n+     */\n+    int jdbcType();\n+\n+    /**\n+     * Get the database native type for this column\n+     *\n+     * @return a type constant for the specific database\n+     */\n+    int nativeType();\n+\n+    /**\n+     * Get the database-specific name of the column's data type.\n+     *\n+     * @return the name of the type\n+     */\n+    String typeName();\n+\n+    /**\n+     * Get the database-specific complete expression defining the column's data type, including dimensions, length, precision,\n+     * character sets, constraints, etc.\n+     *\n+     * @return the complete type expression\n+     */\n+    String typeExpression();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU2Njc4NA=="}, "originalCommit": {"oid": "3aef8ea4618894861c109544b700ab00cbdaa335"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY0NTM3Mg==", "bodyText": "Ok, I was kinda wondering whether it should be empty for a plain name. But works that way.", "url": "https://github.com/debezium/debezium/pull/1275#discussion_r384645372", "createdAt": "2020-02-26T17:23:55Z", "author": {"login": "gunnarmorling"}, "path": "debezium-api/src/main/java/io/debezium/spi/converter/RelationalColumn.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.spi.converter;\n+\n+import java.sql.Types;\n+import java.util.Optional;\n+\n+import io.debezium.common.annotation.Incubating;\n+\n+/**\n+ * A definition of a converted relational column.\n+ *\n+ * @author Randall Hauch\n+\n+ */\n+@Incubating\n+public interface RelationalColumn extends ConvertedField {\n+\n+    /**\n+     * Get the {@link Types JDBC type} for this column\n+     *\n+     * @return the type constant\n+     */\n+    int jdbcType();\n+\n+    /**\n+     * Get the database native type for this column\n+     *\n+     * @return a type constant for the specific database\n+     */\n+    int nativeType();\n+\n+    /**\n+     * Get the database-specific name of the column's data type.\n+     *\n+     * @return the name of the type\n+     */\n+    String typeName();\n+\n+    /**\n+     * Get the database-specific complete expression defining the column's data type, including dimensions, length, precision,\n+     * character sets, constraints, etc.\n+     *\n+     * @return the complete type expression\n+     */\n+    String typeExpression();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU2Njc4NA=="}, "originalCommit": {"oid": "3aef8ea4618894861c109544b700ab00cbdaa335"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTU0MzA0OnYy", "diffSide": "RIGHT", "path": "debezium-api/src/main/java/io/debezium/spi/converter/RelationalColumn.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNToyNzo1OVrOFuwG8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNzoyNDozOVrOFu06oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU2NzAyNg==", "bodyText": "Optional<Object>?", "url": "https://github.com/debezium/debezium/pull/1275#discussion_r384567026", "createdAt": "2020-02-26T15:27:59Z", "author": {"login": "gunnarmorling"}, "path": "debezium-api/src/main/java/io/debezium/spi/converter/RelationalColumn.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.spi.converter;\n+\n+import java.sql.Types;\n+import java.util.Optional;\n+\n+import io.debezium.common.annotation.Incubating;\n+\n+/**\n+ * A definition of a converted relational column.\n+ *\n+ * @author Randall Hauch\n+\n+ */\n+@Incubating\n+public interface RelationalColumn extends ConvertedField {\n+\n+    /**\n+     * Get the {@link Types JDBC type} for this column\n+     *\n+     * @return the type constant\n+     */\n+    int jdbcType();\n+\n+    /**\n+     * Get the database native type for this column\n+     *\n+     * @return a type constant for the specific database\n+     */\n+    int nativeType();\n+\n+    /**\n+     * Get the database-specific name of the column's data type.\n+     *\n+     * @return the name of the type\n+     */\n+    String typeName();\n+\n+    /**\n+     * Get the database-specific complete expression defining the column's data type, including dimensions, length, precision,\n+     * character sets, constraints, etc.\n+     *\n+     * @return the complete type expression\n+     */\n+    String typeExpression();\n+\n+    /**\n+     * Get the maximum length of this column's values. For numeric columns, this represents the precision.\n+     *\n+     * @return the length of the column\n+     */\n+    int length();\n+\n+    /**\n+     * Get the scale of the column.\n+     *\n+     * @return the scale if it applies to this type\n+     */\n+    Optional<Integer> scale();\n+\n+    /**\n+     * Determine whether this column is optional.\n+     *\n+     * @return {@code true} if it is optional, or {@code false} otherwise\n+     */\n+    boolean isOptional();\n+\n+    /**\n+     * Get the default value of the column\n+     *\n+     * @return the default value\n+     */\n+    Object defaultValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aef8ea4618894861c109544b700ab00cbdaa335"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYxMzk0OQ==", "bodyText": "This is a little bit tricky as there is three-state value\n\nno default value\ndefault value set to null\ndefalt value\n\nThe problem is that it is a little bit cunterintuitive to use Optional to express it.\nWe could use logic\n\nnull - no default value\nOptional.empty() - NULL default value\nOptional.of - default value\n\nThe problem is that the usual convention is that Optional methods does not return null. So that's why we opted for defaultValue/hasDefaultValue combo.\nThe most clean solution migt be to use <Optional<Optional<Object>> but that onle looks little bit ugly.", "url": "https://github.com/debezium/debezium/pull/1275#discussion_r384613949", "createdAt": "2020-02-26T16:34:12Z", "author": {"login": "jpechane"}, "path": "debezium-api/src/main/java/io/debezium/spi/converter/RelationalColumn.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.spi.converter;\n+\n+import java.sql.Types;\n+import java.util.Optional;\n+\n+import io.debezium.common.annotation.Incubating;\n+\n+/**\n+ * A definition of a converted relational column.\n+ *\n+ * @author Randall Hauch\n+\n+ */\n+@Incubating\n+public interface RelationalColumn extends ConvertedField {\n+\n+    /**\n+     * Get the {@link Types JDBC type} for this column\n+     *\n+     * @return the type constant\n+     */\n+    int jdbcType();\n+\n+    /**\n+     * Get the database native type for this column\n+     *\n+     * @return a type constant for the specific database\n+     */\n+    int nativeType();\n+\n+    /**\n+     * Get the database-specific name of the column's data type.\n+     *\n+     * @return the name of the type\n+     */\n+    String typeName();\n+\n+    /**\n+     * Get the database-specific complete expression defining the column's data type, including dimensions, length, precision,\n+     * character sets, constraints, etc.\n+     *\n+     * @return the complete type expression\n+     */\n+    String typeExpression();\n+\n+    /**\n+     * Get the maximum length of this column's values. For numeric columns, this represents the precision.\n+     *\n+     * @return the length of the column\n+     */\n+    int length();\n+\n+    /**\n+     * Get the scale of the column.\n+     *\n+     * @return the scale if it applies to this type\n+     */\n+    Optional<Integer> scale();\n+\n+    /**\n+     * Determine whether this column is optional.\n+     *\n+     * @return {@code true} if it is optional, or {@code false} otherwise\n+     */\n+    boolean isOptional();\n+\n+    /**\n+     * Get the default value of the column\n+     *\n+     * @return the default value\n+     */\n+    Object defaultValue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU2NzAyNg=="}, "originalCommit": {"oid": "3aef8ea4618894861c109544b700ab00cbdaa335"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY0NTc5Mw==", "bodyText": "Ah yes, I remember that discussion now. The current design seems most reasonable in that light.", "url": "https://github.com/debezium/debezium/pull/1275#discussion_r384645793", "createdAt": "2020-02-26T17:24:39Z", "author": {"login": "gunnarmorling"}, "path": "debezium-api/src/main/java/io/debezium/spi/converter/RelationalColumn.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.spi.converter;\n+\n+import java.sql.Types;\n+import java.util.Optional;\n+\n+import io.debezium.common.annotation.Incubating;\n+\n+/**\n+ * A definition of a converted relational column.\n+ *\n+ * @author Randall Hauch\n+\n+ */\n+@Incubating\n+public interface RelationalColumn extends ConvertedField {\n+\n+    /**\n+     * Get the {@link Types JDBC type} for this column\n+     *\n+     * @return the type constant\n+     */\n+    int jdbcType();\n+\n+    /**\n+     * Get the database native type for this column\n+     *\n+     * @return a type constant for the specific database\n+     */\n+    int nativeType();\n+\n+    /**\n+     * Get the database-specific name of the column's data type.\n+     *\n+     * @return the name of the type\n+     */\n+    String typeName();\n+\n+    /**\n+     * Get the database-specific complete expression defining the column's data type, including dimensions, length, precision,\n+     * character sets, constraints, etc.\n+     *\n+     * @return the complete type expression\n+     */\n+    String typeExpression();\n+\n+    /**\n+     * Get the maximum length of this column's values. For numeric columns, this represents the precision.\n+     *\n+     * @return the length of the column\n+     */\n+    int length();\n+\n+    /**\n+     * Get the scale of the column.\n+     *\n+     * @return the scale if it applies to this type\n+     */\n+    Optional<Integer> scale();\n+\n+    /**\n+     * Determine whether this column is optional.\n+     *\n+     * @return {@code true} if it is optional, or {@code false} otherwise\n+     */\n+    boolean isOptional();\n+\n+    /**\n+     * Get the default value of the column\n+     *\n+     * @return the default value\n+     */\n+    Object defaultValue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU2NzAyNg=="}, "originalCommit": {"oid": "3aef8ea4618894861c109544b700ab00cbdaa335"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTU0NDI4OnYy", "diffSide": "RIGHT", "path": "debezium-api/src/main/java/io/debezium/spi/converter/RelationalColumn.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNToyODoxNVrOFuwHyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNToyODoxNVrOFuwHyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU2NzI0MQ==", "bodyText": "Obsolete as per above?", "url": "https://github.com/debezium/debezium/pull/1275#discussion_r384567241", "createdAt": "2020-02-26T15:28:15Z", "author": {"login": "gunnarmorling"}, "path": "debezium-api/src/main/java/io/debezium/spi/converter/RelationalColumn.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.spi.converter;\n+\n+import java.sql.Types;\n+import java.util.Optional;\n+\n+import io.debezium.common.annotation.Incubating;\n+\n+/**\n+ * A definition of a converted relational column.\n+ *\n+ * @author Randall Hauch\n+\n+ */\n+@Incubating\n+public interface RelationalColumn extends ConvertedField {\n+\n+    /**\n+     * Get the {@link Types JDBC type} for this column\n+     *\n+     * @return the type constant\n+     */\n+    int jdbcType();\n+\n+    /**\n+     * Get the database native type for this column\n+     *\n+     * @return a type constant for the specific database\n+     */\n+    int nativeType();\n+\n+    /**\n+     * Get the database-specific name of the column's data type.\n+     *\n+     * @return the name of the type\n+     */\n+    String typeName();\n+\n+    /**\n+     * Get the database-specific complete expression defining the column's data type, including dimensions, length, precision,\n+     * character sets, constraints, etc.\n+     *\n+     * @return the complete type expression\n+     */\n+    String typeExpression();\n+\n+    /**\n+     * Get the maximum length of this column's values. For numeric columns, this represents the precision.\n+     *\n+     * @return the length of the column\n+     */\n+    int length();\n+\n+    /**\n+     * Get the scale of the column.\n+     *\n+     * @return the scale if it applies to this type\n+     */\n+    Optional<Integer> scale();\n+\n+    /**\n+     * Determine whether this column is optional.\n+     *\n+     * @return {@code true} if it is optional, or {@code false} otherwise\n+     */\n+    boolean isOptional();\n+\n+    /**\n+     * Get the default value of the column\n+     *\n+     * @return the default value\n+     */\n+    Object defaultValue();\n+\n+    /**\n+     * Determine whether this column's has a default value\n+     *\n+     * @return {@code true} if the default value was provided, or {@code false} otherwise\n+     */\n+    boolean hasDefaultValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aef8ea4618894861c109544b700ab00cbdaa335"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTU4MjQzOnYy", "diffSide": "RIGHT", "path": "debezium-api/src/main/java/io/debezium/spi/converter/CustomConverter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNTozNzowN1rOFuwgBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjoxOToyNFrOFuyWig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU3MzQ0Nw==", "bodyText": "Did you consider a pair of boolean appliesTo(Field field) and ConverterDefinition converterFor(Field field), too? Might make it more explicit, but not sure. Thoughts?", "url": "https://github.com/debezium/debezium/pull/1275#discussion_r384573447", "createdAt": "2020-02-26T15:37:07Z", "author": {"login": "gunnarmorling"}, "path": "debezium-api/src/main/java/io/debezium/spi/converter/CustomConverter.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.spi.converter;\n+\n+import java.util.Optional;\n+import java.util.Properties;\n+\n+import io.debezium.common.annotation.Incubating;\n+\n+/**\n+ * An interface that allows the user to customize how a value will be converted for a given field.\n+ *\n+ * @author Jiri Pechanec\n+ */\n+@Incubating\n+public interface CustomConverter<S, F extends ConvertedField> {\n+\n+    /**\n+     * An Actual conversion converting data from one type to another.\n+     *\n+     */\n+    @FunctionalInterface\n+    interface Converter {\n+        Object convert(Object input);\n+    }\n+\n+    /**\n+     * Class binding together the schema of the conversion result and the converter code.\n+     *\n+     * @param <S> schema describing the output type, usually {@link org.apache.kafka.connect.data.SchemaBuilder}\n+     */\n+    public class ConverterDefinition<S> {\n+        public final S fieldSchema;\n+        public final Converter converter;\n+\n+        public ConverterDefinition(S fieldSchema, Converter converter) {\n+            super();\n+            this.fieldSchema = fieldSchema;\n+            this.converter = converter;\n+        }\n+    }\n+\n+    void configure(Properties props);\n+\n+    /**\n+     * A custom converter injected by the Debezium user.\n+     *\n+     * @param field - converted field metadata\n+     * @return empty if the converter is not applicable for this field\n+     */\n+    Optional<ConverterDefinition<S>> converterFor(F field);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aef8ea4618894861c109544b700ab00cbdaa335"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU4NTI4OQ==", "bodyText": "Or maybe even:\ninterface CustomConverter<S, F extends ConvertedField> {\n    boolean appliesTo(Field field);\n    S schemaFor(Field field);\n    Object convert(Field field, Object value);\n}\n\nAvoiding a concrete class in the SPI definition at all.", "url": "https://github.com/debezium/debezium/pull/1275#discussion_r384585289", "createdAt": "2020-02-26T15:53:40Z", "author": {"login": "gunnarmorling"}, "path": "debezium-api/src/main/java/io/debezium/spi/converter/CustomConverter.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.spi.converter;\n+\n+import java.util.Optional;\n+import java.util.Properties;\n+\n+import io.debezium.common.annotation.Incubating;\n+\n+/**\n+ * An interface that allows the user to customize how a value will be converted for a given field.\n+ *\n+ * @author Jiri Pechanec\n+ */\n+@Incubating\n+public interface CustomConverter<S, F extends ConvertedField> {\n+\n+    /**\n+     * An Actual conversion converting data from one type to another.\n+     *\n+     */\n+    @FunctionalInterface\n+    interface Converter {\n+        Object convert(Object input);\n+    }\n+\n+    /**\n+     * Class binding together the schema of the conversion result and the converter code.\n+     *\n+     * @param <S> schema describing the output type, usually {@link org.apache.kafka.connect.data.SchemaBuilder}\n+     */\n+    public class ConverterDefinition<S> {\n+        public final S fieldSchema;\n+        public final Converter converter;\n+\n+        public ConverterDefinition(S fieldSchema, Converter converter) {\n+            super();\n+            this.fieldSchema = fieldSchema;\n+            this.converter = converter;\n+        }\n+    }\n+\n+    void configure(Properties props);\n+\n+    /**\n+     * A custom converter injected by the Debezium user.\n+     *\n+     * @param field - converted field metadata\n+     * @return empty if the converter is not applicable for this field\n+     */\n+    Optional<ConverterDefinition<S>> converterFor(F field);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU3MzQ0Nw=="}, "originalCommit": {"oid": "3aef8ea4618894861c109544b700ab00cbdaa335"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwMzc4Ng==", "bodyText": "@gunnarmorling Yes I was considering that but then I decided against it - the reason was that if you want to apply more complex rules then you'd need to do the rule evaluation in each method.\nSo I decided it might be more conveninet to do it in a single step.", "url": "https://github.com/debezium/debezium/pull/1275#discussion_r384603786", "createdAt": "2020-02-26T16:19:24Z", "author": {"login": "jpechane"}, "path": "debezium-api/src/main/java/io/debezium/spi/converter/CustomConverter.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.spi.converter;\n+\n+import java.util.Optional;\n+import java.util.Properties;\n+\n+import io.debezium.common.annotation.Incubating;\n+\n+/**\n+ * An interface that allows the user to customize how a value will be converted for a given field.\n+ *\n+ * @author Jiri Pechanec\n+ */\n+@Incubating\n+public interface CustomConverter<S, F extends ConvertedField> {\n+\n+    /**\n+     * An Actual conversion converting data from one type to another.\n+     *\n+     */\n+    @FunctionalInterface\n+    interface Converter {\n+        Object convert(Object input);\n+    }\n+\n+    /**\n+     * Class binding together the schema of the conversion result and the converter code.\n+     *\n+     * @param <S> schema describing the output type, usually {@link org.apache.kafka.connect.data.SchemaBuilder}\n+     */\n+    public class ConverterDefinition<S> {\n+        public final S fieldSchema;\n+        public final Converter converter;\n+\n+        public ConverterDefinition(S fieldSchema, Converter converter) {\n+            super();\n+            this.fieldSchema = fieldSchema;\n+            this.converter = converter;\n+        }\n+    }\n+\n+    void configure(Properties props);\n+\n+    /**\n+     * A custom converter injected by the Debezium user.\n+     *\n+     * @param field - converted field metadata\n+     * @return empty if the converter is not applicable for this field\n+     */\n+    Optional<ConverterDefinition<S>> converterFor(F field);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU3MzQ0Nw=="}, "originalCommit": {"oid": "3aef8ea4618894861c109544b700ab00cbdaa335"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4412, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}