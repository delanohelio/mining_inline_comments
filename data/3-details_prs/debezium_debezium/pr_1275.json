{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3MTE0MjEx", "number": 1275, "title": "DBZ-1134 Support for user provided converters", "bodyText": "https://issues.redhat.com/browse/DBZ-1134", "createdAt": "2020-02-19T11:25:50Z", "url": "https://github.com/debezium/debezium/pull/1275", "merged": true, "mergeCommit": {"oid": "bb8ab308b65d2057ed82a01c92f91d199167b728"}, "closed": true, "closedAt": "2020-02-28T20:58:40Z", "author": {"login": "jpechane"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcF1D6qgBqjMwNTEzOTk3NjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcI2Xg5AH2gAyMzc3MTE0MjExOmU4M2RlMTg2M2IyMmIwM2NhN2M3NjcyYmY2OGQzNTg3ZTk4ZDFjYjE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "46b563c58af5122f23e7694518df6b30100cc4d8", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/46b563c58af5122f23e7694518df6b30100cc4d8", "committedDate": "2020-02-26T11:38:33Z", "message": "DBZ-1134 Support for user provided converters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "069ef53618444d1e1cb11efee93003087b6359e9", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/069ef53618444d1e1cb11efee93003087b6359e9", "committedDate": "2020-02-26T11:38:35Z", "message": "DBZ-1134 Make converted field type parametrized"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "069ef53618444d1e1cb11efee93003087b6359e9", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/069ef53618444d1e1cb11efee93003087b6359e9", "committedDate": "2020-02-26T11:38:35Z", "message": "DBZ-1134 Make converted field type parametrized"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3aef8ea4618894861c109544b700ab00cbdaa335", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/3aef8ea4618894861c109544b700ab00cbdaa335", "committedDate": "2020-02-26T11:44:58Z", "message": "DBZ-1134 Fix annotation name"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0OTkzODU1", "url": "https://github.com/debezium/debezium/pull/1275#pullrequestreview-364993855", "createdAt": "2020-02-26T15:27:06Z", "commit": {"oid": "3aef8ea4618894861c109544b700ab00cbdaa335"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNToyNzowNlrOFuwERQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNTo1Mzo0MFrOFuxOSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU2NjM0MQ==", "bodyText": "OptionalInt?", "url": "https://github.com/debezium/debezium/pull/1275#discussion_r384566341", "createdAt": "2020-02-26T15:27:06Z", "author": {"login": "gunnarmorling"}, "path": "debezium-api/src/main/java/io/debezium/spi/converter/RelationalColumn.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.spi.converter;\n+\n+import java.sql.Types;\n+import java.util.Optional;\n+\n+import io.debezium.common.annotation.Incubating;\n+\n+/**\n+ * A definition of a converted relational column.\n+ *\n+ * @author Randall Hauch\n+\n+ */\n+@Incubating\n+public interface RelationalColumn extends ConvertedField {\n+\n+    /**\n+     * Get the {@link Types JDBC type} for this column\n+     *\n+     * @return the type constant\n+     */\n+    int jdbcType();\n+\n+    /**\n+     * Get the database native type for this column\n+     *\n+     * @return a type constant for the specific database\n+     */\n+    int nativeType();\n+\n+    /**\n+     * Get the database-specific name of the column's data type.\n+     *\n+     * @return the name of the type\n+     */\n+    String typeName();\n+\n+    /**\n+     * Get the database-specific complete expression defining the column's data type, including dimensions, length, precision,\n+     * character sets, constraints, etc.\n+     *\n+     * @return the complete type expression\n+     */\n+    String typeExpression();\n+\n+    /**\n+     * Get the maximum length of this column's values. For numeric columns, this represents the precision.\n+     *\n+     * @return the length of the column\n+     */\n+    int length();\n+\n+    /**\n+     * Get the scale of the column.\n+     *\n+     * @return the scale if it applies to this type\n+     */\n+    Optional<Integer> scale();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aef8ea4618894861c109544b700ab00cbdaa335"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU2NjQ0MA==", "bodyText": "OptionalInt?", "url": "https://github.com/debezium/debezium/pull/1275#discussion_r384566440", "createdAt": "2020-02-26T15:27:14Z", "author": {"login": "gunnarmorling"}, "path": "debezium-api/src/main/java/io/debezium/spi/converter/RelationalColumn.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.spi.converter;\n+\n+import java.sql.Types;\n+import java.util.Optional;\n+\n+import io.debezium.common.annotation.Incubating;\n+\n+/**\n+ * A definition of a converted relational column.\n+ *\n+ * @author Randall Hauch\n+\n+ */\n+@Incubating\n+public interface RelationalColumn extends ConvertedField {\n+\n+    /**\n+     * Get the {@link Types JDBC type} for this column\n+     *\n+     * @return the type constant\n+     */\n+    int jdbcType();\n+\n+    /**\n+     * Get the database native type for this column\n+     *\n+     * @return a type constant for the specific database\n+     */\n+    int nativeType();\n+\n+    /**\n+     * Get the database-specific name of the column's data type.\n+     *\n+     * @return the name of the type\n+     */\n+    String typeName();\n+\n+    /**\n+     * Get the database-specific complete expression defining the column's data type, including dimensions, length, precision,\n+     * character sets, constraints, etc.\n+     *\n+     * @return the complete type expression\n+     */\n+    String typeExpression();\n+\n+    /**\n+     * Get the maximum length of this column's values. For numeric columns, this represents the precision.\n+     *\n+     * @return the length of the column\n+     */\n+    int length();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aef8ea4618894861c109544b700ab00cbdaa335"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU2Njc4NA==", "bodyText": "Optional<String>?", "url": "https://github.com/debezium/debezium/pull/1275#discussion_r384566784", "createdAt": "2020-02-26T15:27:39Z", "author": {"login": "gunnarmorling"}, "path": "debezium-api/src/main/java/io/debezium/spi/converter/RelationalColumn.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.spi.converter;\n+\n+import java.sql.Types;\n+import java.util.Optional;\n+\n+import io.debezium.common.annotation.Incubating;\n+\n+/**\n+ * A definition of a converted relational column.\n+ *\n+ * @author Randall Hauch\n+\n+ */\n+@Incubating\n+public interface RelationalColumn extends ConvertedField {\n+\n+    /**\n+     * Get the {@link Types JDBC type} for this column\n+     *\n+     * @return the type constant\n+     */\n+    int jdbcType();\n+\n+    /**\n+     * Get the database native type for this column\n+     *\n+     * @return a type constant for the specific database\n+     */\n+    int nativeType();\n+\n+    /**\n+     * Get the database-specific name of the column's data type.\n+     *\n+     * @return the name of the type\n+     */\n+    String typeName();\n+\n+    /**\n+     * Get the database-specific complete expression defining the column's data type, including dimensions, length, precision,\n+     * character sets, constraints, etc.\n+     *\n+     * @return the complete type expression\n+     */\n+    String typeExpression();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aef8ea4618894861c109544b700ab00cbdaa335"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU2NzAyNg==", "bodyText": "Optional<Object>?", "url": "https://github.com/debezium/debezium/pull/1275#discussion_r384567026", "createdAt": "2020-02-26T15:27:59Z", "author": {"login": "gunnarmorling"}, "path": "debezium-api/src/main/java/io/debezium/spi/converter/RelationalColumn.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.spi.converter;\n+\n+import java.sql.Types;\n+import java.util.Optional;\n+\n+import io.debezium.common.annotation.Incubating;\n+\n+/**\n+ * A definition of a converted relational column.\n+ *\n+ * @author Randall Hauch\n+\n+ */\n+@Incubating\n+public interface RelationalColumn extends ConvertedField {\n+\n+    /**\n+     * Get the {@link Types JDBC type} for this column\n+     *\n+     * @return the type constant\n+     */\n+    int jdbcType();\n+\n+    /**\n+     * Get the database native type for this column\n+     *\n+     * @return a type constant for the specific database\n+     */\n+    int nativeType();\n+\n+    /**\n+     * Get the database-specific name of the column's data type.\n+     *\n+     * @return the name of the type\n+     */\n+    String typeName();\n+\n+    /**\n+     * Get the database-specific complete expression defining the column's data type, including dimensions, length, precision,\n+     * character sets, constraints, etc.\n+     *\n+     * @return the complete type expression\n+     */\n+    String typeExpression();\n+\n+    /**\n+     * Get the maximum length of this column's values. For numeric columns, this represents the precision.\n+     *\n+     * @return the length of the column\n+     */\n+    int length();\n+\n+    /**\n+     * Get the scale of the column.\n+     *\n+     * @return the scale if it applies to this type\n+     */\n+    Optional<Integer> scale();\n+\n+    /**\n+     * Determine whether this column is optional.\n+     *\n+     * @return {@code true} if it is optional, or {@code false} otherwise\n+     */\n+    boolean isOptional();\n+\n+    /**\n+     * Get the default value of the column\n+     *\n+     * @return the default value\n+     */\n+    Object defaultValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aef8ea4618894861c109544b700ab00cbdaa335"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU2NzI0MQ==", "bodyText": "Obsolete as per above?", "url": "https://github.com/debezium/debezium/pull/1275#discussion_r384567241", "createdAt": "2020-02-26T15:28:15Z", "author": {"login": "gunnarmorling"}, "path": "debezium-api/src/main/java/io/debezium/spi/converter/RelationalColumn.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.spi.converter;\n+\n+import java.sql.Types;\n+import java.util.Optional;\n+\n+import io.debezium.common.annotation.Incubating;\n+\n+/**\n+ * A definition of a converted relational column.\n+ *\n+ * @author Randall Hauch\n+\n+ */\n+@Incubating\n+public interface RelationalColumn extends ConvertedField {\n+\n+    /**\n+     * Get the {@link Types JDBC type} for this column\n+     *\n+     * @return the type constant\n+     */\n+    int jdbcType();\n+\n+    /**\n+     * Get the database native type for this column\n+     *\n+     * @return a type constant for the specific database\n+     */\n+    int nativeType();\n+\n+    /**\n+     * Get the database-specific name of the column's data type.\n+     *\n+     * @return the name of the type\n+     */\n+    String typeName();\n+\n+    /**\n+     * Get the database-specific complete expression defining the column's data type, including dimensions, length, precision,\n+     * character sets, constraints, etc.\n+     *\n+     * @return the complete type expression\n+     */\n+    String typeExpression();\n+\n+    /**\n+     * Get the maximum length of this column's values. For numeric columns, this represents the precision.\n+     *\n+     * @return the length of the column\n+     */\n+    int length();\n+\n+    /**\n+     * Get the scale of the column.\n+     *\n+     * @return the scale if it applies to this type\n+     */\n+    Optional<Integer> scale();\n+\n+    /**\n+     * Determine whether this column is optional.\n+     *\n+     * @return {@code true} if it is optional, or {@code false} otherwise\n+     */\n+    boolean isOptional();\n+\n+    /**\n+     * Get the default value of the column\n+     *\n+     * @return the default value\n+     */\n+    Object defaultValue();\n+\n+    /**\n+     * Determine whether this column's has a default value\n+     *\n+     * @return {@code true} if the default value was provided, or {@code false} otherwise\n+     */\n+    boolean hasDefaultValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aef8ea4618894861c109544b700ab00cbdaa335"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU3MzQ0Nw==", "bodyText": "Did you consider a pair of boolean appliesTo(Field field) and ConverterDefinition converterFor(Field field), too? Might make it more explicit, but not sure. Thoughts?", "url": "https://github.com/debezium/debezium/pull/1275#discussion_r384573447", "createdAt": "2020-02-26T15:37:07Z", "author": {"login": "gunnarmorling"}, "path": "debezium-api/src/main/java/io/debezium/spi/converter/CustomConverter.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.spi.converter;\n+\n+import java.util.Optional;\n+import java.util.Properties;\n+\n+import io.debezium.common.annotation.Incubating;\n+\n+/**\n+ * An interface that allows the user to customize how a value will be converted for a given field.\n+ *\n+ * @author Jiri Pechanec\n+ */\n+@Incubating\n+public interface CustomConverter<S, F extends ConvertedField> {\n+\n+    /**\n+     * An Actual conversion converting data from one type to another.\n+     *\n+     */\n+    @FunctionalInterface\n+    interface Converter {\n+        Object convert(Object input);\n+    }\n+\n+    /**\n+     * Class binding together the schema of the conversion result and the converter code.\n+     *\n+     * @param <S> schema describing the output type, usually {@link org.apache.kafka.connect.data.SchemaBuilder}\n+     */\n+    public class ConverterDefinition<S> {\n+        public final S fieldSchema;\n+        public final Converter converter;\n+\n+        public ConverterDefinition(S fieldSchema, Converter converter) {\n+            super();\n+            this.fieldSchema = fieldSchema;\n+            this.converter = converter;\n+        }\n+    }\n+\n+    void configure(Properties props);\n+\n+    /**\n+     * A custom converter injected by the Debezium user.\n+     *\n+     * @param field - converted field metadata\n+     * @return empty if the converter is not applicable for this field\n+     */\n+    Optional<ConverterDefinition<S>> converterFor(F field);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aef8ea4618894861c109544b700ab00cbdaa335"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU4NTI4OQ==", "bodyText": "Or maybe even:\ninterface CustomConverter<S, F extends ConvertedField> {\n    boolean appliesTo(Field field);\n    S schemaFor(Field field);\n    Object convert(Field field, Object value);\n}\n\nAvoiding a concrete class in the SPI definition at all.", "url": "https://github.com/debezium/debezium/pull/1275#discussion_r384585289", "createdAt": "2020-02-26T15:53:40Z", "author": {"login": "gunnarmorling"}, "path": "debezium-api/src/main/java/io/debezium/spi/converter/CustomConverter.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.spi.converter;\n+\n+import java.util.Optional;\n+import java.util.Properties;\n+\n+import io.debezium.common.annotation.Incubating;\n+\n+/**\n+ * An interface that allows the user to customize how a value will be converted for a given field.\n+ *\n+ * @author Jiri Pechanec\n+ */\n+@Incubating\n+public interface CustomConverter<S, F extends ConvertedField> {\n+\n+    /**\n+     * An Actual conversion converting data from one type to another.\n+     *\n+     */\n+    @FunctionalInterface\n+    interface Converter {\n+        Object convert(Object input);\n+    }\n+\n+    /**\n+     * Class binding together the schema of the conversion result and the converter code.\n+     *\n+     * @param <S> schema describing the output type, usually {@link org.apache.kafka.connect.data.SchemaBuilder}\n+     */\n+    public class ConverterDefinition<S> {\n+        public final S fieldSchema;\n+        public final Converter converter;\n+\n+        public ConverterDefinition(S fieldSchema, Converter converter) {\n+            super();\n+            this.fieldSchema = fieldSchema;\n+            this.converter = converter;\n+        }\n+    }\n+\n+    void configure(Properties props);\n+\n+    /**\n+     * A custom converter injected by the Debezium user.\n+     *\n+     * @param field - converted field metadata\n+     * @return empty if the converter is not applicable for this field\n+     */\n+    Optional<ConverterDefinition<S>> converterFor(F field);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU3MzQ0Nw=="}, "originalCommit": {"oid": "3aef8ea4618894861c109544b700ab00cbdaa335"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b068d5685fc4181825b03352deba5cad9fb06338", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/b068d5685fc4181825b03352deba5cad9fb06338", "committedDate": "2020-02-26T16:41:48Z", "message": "DBZ-1134 Use OptionalInts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4dc220c76d0e31c7ac4b35c38fbabee249f4a96f", "author": {"user": {"login": "gunnarmorling", "name": "Gunnar Morling"}}, "url": "https://github.com/debezium/debezium/commit/4dc220c76d0e31c7ac4b35c38fbabee249f4a96f", "committedDate": "2020-02-27T11:37:25Z", "message": "DBZ-1134 Making converter registry thread-safe; misc. clean-up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "496e4f43452058a6a625a98b435b3332bcb9738e", "author": {"user": {"login": "gunnarmorling", "name": "Gunnar Morling"}}, "url": "https://github.com/debezium/debezium/commit/496e4f43452058a6a625a98b435b3332bcb9738e", "committedDate": "2020-02-27T12:10:54Z", "message": "DBZ-1134 Avoiding concrete class in SPI by introducing receiver parameter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd74b6ab78a1df3d00318f48abf5ea68430328ee", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/bd74b6ab78a1df3d00318f48abf5ea68430328ee", "committedDate": "2020-02-28T10:40:53Z", "message": "DBZ-1134 Fix tests for new API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e83de1863b22b03ca7c7672bf68d3587e98d1cb1", "author": {"user": {"login": "gunnarmorling", "name": "Gunnar Morling"}}, "url": "https://github.com/debezium/debezium/commit/e83de1863b22b03ca7c7672bf68d3587e98d1cb1", "committedDate": "2020-02-28T20:58:02Z", "message": "DBZ-1134 JavaDoc"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2070, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}