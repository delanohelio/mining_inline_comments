{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1OTU2NzM4", "number": 1488, "title": "DBZ-651 Quarkus-based implementation of standalone Debezium server", "bodyText": "", "createdAt": "2020-05-11T08:47:11Z", "url": "https://github.com/debezium/debezium/pull/1488", "merged": true, "mergeCommit": {"oid": "994e59988c839fa4b5d107c51327b5d4517fbdbb"}, "closed": true, "closedAt": "2020-05-14T11:48:10Z", "author": {"login": "jpechane"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcgL5AkgBqjMzMjE5ODY5NjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABchISSgAH2gAyNDE1OTU2NzM4OjkwYWYyNjZhMzBiMzM4Y2Y3ZmY2MjA1NWUyYzkyOGM0MGEzNmQxNjc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "7598963087e8032abea3cfde4fc6f5022ac1d7f5", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/7598963087e8032abea3cfde4fc6f5022ac1d7f5", "committedDate": "2020-05-11T13:04:59Z", "message": "DBZ-651 Quarkus-based implementation of standalone Debezium server"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "7598963087e8032abea3cfde4fc6f5022ac1d7f5", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/7598963087e8032abea3cfde4fc6f5022ac1d7f5", "committedDate": "2020-05-11T13:04:59Z", "message": "DBZ-651 Quarkus-based implementation of standalone Debezium server"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53ae8bf966283568f0deb1610844ea21af1de370", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/53ae8bf966283568f0deb1610844ea21af1de370", "committedDate": "2020-05-11T13:56:44Z", "message": "DBZ-651 Added logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5598d909aa1d10578c66b8f286519986ba1fb128", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/5598d909aa1d10578c66b8f286519986ba1fb128", "committedDate": "2020-05-11T13:59:34Z", "message": "DBZ-651 Support for JSON key and Avro value"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25df123d702a72a669bdfef5eb5a6e85fea002c3", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/25df123d702a72a669bdfef5eb5a6e85fea002c3", "committedDate": "2020-05-12T06:24:04Z", "message": "DBZ-651 Misc improvements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NzQ0Nzk5", "url": "https://github.com/debezium/debezium/pull/1488#pullrequestreview-409744799", "createdAt": "2020-05-12T06:50:32Z", "commit": {"oid": "25df123d702a72a669bdfef5eb5a6e85fea002c3"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjo1MDozMlrOGT4Ymw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjo1MjoyMFrOGT4bpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5OTkzMQ==", "bodyText": "Quarkus is just an implementation detail, it shouldn't be exposed on the surface. I'd suggest to name this simply debezium-server, also avoiding \"standalone\" which some might associate with reduced functionality.", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r423499931", "createdAt": "2020-05-12T06:50:32Z", "author": {"login": "gunnarmorling"}, "path": "debezium-standalone-quarkus/pom.xml", "diffHunk": "@@ -0,0 +1,178 @@\n+<?xml version=\"1.0\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <groupId>io.debezium</groupId>\n+        <artifactId>debezium-parent</artifactId>\n+        <version>1.2.0-SNAPSHOT</version>\n+        <relativePath>../pom.xml</relativePath>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+    <artifactId>debezium-standalone-quarkus</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25df123d702a72a669bdfef5eb5a6e85fea002c3"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMDQ2Mg==", "bodyText": "As above: io.debezium.server.", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r423500462", "createdAt": "2020-05-12T06:51:46Z", "author": {"login": "gunnarmorling"}, "path": "debezium-standalone-quarkus/src/main/java/io/debezium/standalone/quarkus/Server.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.standalone.quarkus;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25df123d702a72a669bdfef5eb5a6e85fea002c3"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMDcxMQ==", "bodyText": "I don't think that's needed with Quarkus, is it?", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r423500711", "createdAt": "2020-05-12T06:52:20Z", "author": {"login": "gunnarmorling"}, "path": "debezium-standalone-quarkus/src/main/resources/META-INF/beans.xml", "diffHunk": "@@ -0,0 +1,6 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25df123d702a72a669bdfef5eb5a6e85fea002c3"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NzQ5NTE3", "url": "https://github.com/debezium/debezium/pull/1488#pullrequestreview-409749517", "createdAt": "2020-05-12T06:58:38Z", "commit": {"oid": "25df123d702a72a669bdfef5eb5a6e85fea002c3"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjo1ODozOVrOGT4nbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzowMDo0OFrOGT4rqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMzcyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class ChangeConsumer implements DebeziumEngine.ChangeConsumer<ChangeEvent<Object, Object>> {\n          \n          \n            \n            public class KinesisChangeConsumer implements DebeziumEngine.ChangeConsumer<ChangeEvent<Object, Object>> {", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r423503727", "createdAt": "2020-05-12T06:58:39Z", "author": {"login": "gunnarmorling"}, "path": "debezium-standalone-quarkus/src/main/java/io/debezium/standalone/quarkus/kinesis/ChangeConsumer.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.standalone.quarkus.kinesis;\n+\n+import java.util.List;\n+\n+import javax.annotation.PostConstruct;\n+import javax.annotation.PreDestroy;\n+import javax.enterprise.context.Dependent;\n+import javax.enterprise.inject.Instance;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import org.eclipse.microprofile.config.Config;\n+import org.eclipse.microprofile.config.ConfigProvider;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.debezium.DebeziumException;\n+import io.debezium.engine.ChangeEvent;\n+import io.debezium.engine.DebeziumEngine;\n+import io.debezium.engine.DebeziumEngine.RecordCommitter;\n+import io.debezium.standalone.quarkus.CustomConsumerBuilder;\n+\n+import software.amazon.awssdk.auth.credentials.ProfileCredentialsProvider;\n+import software.amazon.awssdk.core.SdkBytes;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.kinesis.KinesisClient;\n+import software.amazon.awssdk.services.kinesis.model.PutRecordRequest;\n+\n+/**\n+ * Implementation of the consumer that delivers the messages into Amazon Kinesis destination.\n+ *\n+ * @author Jiri Pechanec\n+ *\n+ */\n+@Named(\"kinesis\")\n+@Dependent\n+public class ChangeConsumer implements DebeziumEngine.ChangeConsumer<ChangeEvent<Object, Object>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25df123d702a72a669bdfef5eb5a6e85fea002c3"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwNDA0MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class ChangeConsumer implements DebeziumEngine.ChangeConsumer<ChangeEvent<?, ?>> {\n          \n          \n            \n            public class GooglePubSubChangeConsumer implements DebeziumEngine.ChangeConsumer<ChangeEvent<?, ?>> {", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r423504041", "createdAt": "2020-05-12T06:59:17Z", "author": {"login": "gunnarmorling"}, "path": "debezium-standalone-quarkus/src/main/java/io/debezium/standalone/quarkus/pubsub/ChangeConsumer.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.standalone.quarkus.pubsub;\n+\n+import java.util.List;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Named;\n+\n+import io.debezium.engine.ChangeEvent;\n+import io.debezium.engine.DebeziumEngine;\n+import io.debezium.engine.DebeziumEngine.RecordCommitter;\n+\n+/**\n+ * Implementation of the consumer that delivers the messages into Google Pub/Sub destination.\n+ *\n+ * @author Jiri Pechanec\n+ *\n+ */\n+@Named(\"pub-sub\")\n+@Dependent\n+public class ChangeConsumer implements DebeziumEngine.ChangeConsumer<ChangeEvent<?, ?>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25df123d702a72a669bdfef5eb5a6e85fea002c3"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwNDgxMQ==", "bodyText": "Could you add a test that runs against Kinesis? It can (and should) be disabled by default, but would be interesting to see the required config and be easily able to run it against one own's account.", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r423504811", "createdAt": "2020-05-12T07:00:48Z", "author": {"login": "gunnarmorling"}, "path": "debezium-standalone-quarkus/src/test/java/io/debezium/standalone/quarkus/ServerIT.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.standalone.quarkus;\n+\n+import java.time.Duration;\n+\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import org.awaitility.Awaitility;\n+import org.fest.assertions.Assertions;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Test;\n+\n+import io.debezium.standalone.quarkus.events.ConnectorCompletedEvent;\n+import io.debezium.standalone.quarkus.events.ConnectorStartedEvent;\n+import io.debezium.util.Testing;\n+import io.quarkus.test.junit.QuarkusTest;\n+\n+/**\n+ * Integration test that verifies basic reading from PostgreSQL database.\n+ *\n+ * @author Jiri Pechanec\n+ */\n+@QuarkusTest\n+public class ServerIT {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25df123d702a72a669bdfef5eb5a6e85fea002c3"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ded13a5605ce162659e7462456379c0f81217bc", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/2ded13a5605ce162659e7462456379c0f81217bc", "committedDate": "2020-05-12T08:36:55Z", "message": "DBZ-651 Rename of module and classes; Kinesis test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5OTE3Nzcy", "url": "https://github.com/debezium/debezium/pull/1488#pullrequestreview-409917772", "createdAt": "2020-05-12T10:43:36Z", "commit": {"oid": "2ded13a5605ce162659e7462456379c0f81217bc"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMDo0MzozNlrOGUAw-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMjozNToyMVrOGUEaPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYzNzI0MQ==", "bodyText": "What is this about? Can you add JavaDoc, please?", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r423637241", "createdAt": "2020-05-12T10:43:36Z", "author": {"login": "gunnarmorling"}, "path": "debezium-api/src/main/java/io/debezium/engine/ChangeEvent.java", "diffHunk": "@@ -19,4 +19,6 @@\n     public K key();\n \n     public V value();\n+\n+    public String destination();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ded13a5605ce162659e7462456379c0f81217bc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY0MzUyOQ==", "bodyText": "How about DebeziumServer?", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r423643529", "createdAt": "2020-05-12T10:55:39Z", "author": {"login": "gunnarmorling"}, "path": "debezium-server/src/main/java/io/debezium/server/Server.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.server;\n+\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.spi.CreationalContext;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.spi.Bean;\n+import javax.enterprise.inject.spi.BeanManager;\n+import javax.inject.Inject;\n+\n+import org.eclipse.microprofile.config.Config;\n+import org.eclipse.microprofile.config.ConfigProvider;\n+import org.eclipse.microprofile.health.Liveness;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.debezium.DebeziumException;\n+import io.debezium.engine.ChangeEvent;\n+import io.debezium.engine.DebeziumEngine;\n+import io.debezium.engine.DebeziumEngine.ChangeConsumer;\n+import io.debezium.engine.format.Avro;\n+import io.debezium.engine.format.Json;\n+import io.debezium.engine.format.SerializationFormat;\n+import io.quarkus.runtime.ShutdownEvent;\n+import io.quarkus.runtime.Startup;\n+\n+/**\n+ * <p>The entry point of the Quarkus-based standalone server. The server is configured via Quarkus/Microprofile Configuration sources\n+ * and provides few out-of-the-box target implementations.</p>\n+ * <p>The implementation uses CDI to find all classes that implements {@link DebeziumEngine.ChangeConsumer} interface.\n+ * The candidate classes should be annotated with {@code @Named} annotation and should be {@code Dependent}.</p>\n+ * <p>The configuration option {@code debezium.consumer} provides a name of the consumer that should be used and the value\n+ * must match to exactly one of the implementation classes.</p>\n+ *\n+ * @author Jiri Pechanec\n+ *\n+ */\n+@ApplicationScoped\n+@Startup\n+public class Server {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ded13a5605ce162659e7462456379c0f81217bc"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY0OTIwNQ==", "bodyText": "How about putting all properties into two namespaces:\ndebezium.sink.type=kinesis\ndebezium.sink.user=...\ndebezium.source.connector.class=...", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r423649205", "createdAt": "2020-05-12T11:06:48Z", "author": {"login": "gunnarmorling"}, "path": "debezium-server/src/test/java/io/debezium/server/TestConfigSource.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.server;\n+\n+import java.nio.file.Path;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.kafka.connect.runtime.standalone.StandaloneConfig;\n+import org.eclipse.microprofile.config.spi.ConfigSource;\n+\n+import io.debezium.util.Testing;\n+\n+public class TestConfigSource implements ConfigSource {\n+\n+    public static final String KINESIS_REGION = \"eu-central-1\";\n+    public static final Path OFFSET_STORE_PATH = Testing.Files.createTestingPath(\"file-connector-offsets.txt\").toAbsolutePath();\n+    public static final Path TEST_FILE_PATH = Testing.Files.createTestingPath(\"file-connector-input.txt\").toAbsolutePath();\n+\n+    final Map<String, String> integrationTest = new HashMap<>();\n+    final Map<String, String> e2eTest = new HashMap<>();\n+    final Map<String, String> unitTest = new HashMap<>();\n+    final Map<String, String> config;\n+\n+    public TestConfigSource() {\n+        e2eTest.put(\"debezium.consumer\", \"kinesis\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ded13a5605ce162659e7462456379c0f81217bc"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY4Mzk1OQ==", "bodyText": "debezium.sink.kinesis.region?", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r423683959", "createdAt": "2020-05-12T12:13:22Z", "author": {"login": "gunnarmorling"}, "path": "debezium-server/src/test/java/io/debezium/server/TestConfigSource.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.server;\n+\n+import java.nio.file.Path;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.kafka.connect.runtime.standalone.StandaloneConfig;\n+import org.eclipse.microprofile.config.spi.ConfigSource;\n+\n+import io.debezium.util.Testing;\n+\n+public class TestConfigSource implements ConfigSource {\n+\n+    public static final String KINESIS_REGION = \"eu-central-1\";\n+    public static final Path OFFSET_STORE_PATH = Testing.Files.createTestingPath(\"file-connector-offsets.txt\").toAbsolutePath();\n+    public static final Path TEST_FILE_PATH = Testing.Files.createTestingPath(\"file-connector-input.txt\").toAbsolutePath();\n+\n+    final Map<String, String> integrationTest = new HashMap<>();\n+    final Map<String, String> e2eTest = new HashMap<>();\n+    final Map<String, String> unitTest = new HashMap<>();\n+    final Map<String, String> config;\n+\n+    public TestConfigSource() {\n+        e2eTest.put(\"debezium.consumer\", \"kinesis\");\n+        e2eTest.put(\"kinesis.region\", KINESIS_REGION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ded13a5605ce162659e7462456379c0f81217bc"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY5MjY5MA==", "bodyText": "Where is the serialization format configured here?", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r423692690", "createdAt": "2020-05-12T12:28:15Z", "author": {"login": "gunnarmorling"}, "path": "debezium-server/src/test/java/io/debezium/server/KinesisIT.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.server;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import org.awaitility.Awaitility;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Test;\n+\n+import io.debezium.server.events.ConnectorCompletedEvent;\n+import io.debezium.server.events.ConnectorStartedEvent;\n+import io.debezium.util.Testing;\n+import io.quarkus.test.junit.QuarkusTest;\n+\n+import software.amazon.awssdk.auth.credentials.ProfileCredentialsProvider;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.kinesis.KinesisClient;\n+import software.amazon.awssdk.services.kinesis.model.GetRecordsRequest;\n+import software.amazon.awssdk.services.kinesis.model.GetRecordsResponse;\n+import software.amazon.awssdk.services.kinesis.model.GetShardIteratorRequest;\n+import software.amazon.awssdk.services.kinesis.model.GetShardIteratorResponse;\n+import software.amazon.awssdk.services.kinesis.model.Record;\n+import software.amazon.awssdk.services.kinesis.model.ShardIteratorType;\n+\n+/**\n+ * Integration test that verifies basic reading from PostgreSQL database and writing to Kinesis stream.\n+ *\n+ * @author Jiri Pechanec\n+ */\n+@QuarkusTest\n+public class KinesisIT {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ded13a5605ce162659e7462456379c0f81217bc"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY5Mzk2MA==", "bodyText": "Or more precisely, how about those four: debezium.source. ..., debezium.format. ..., debezium.transforms. ..., and debezium.sink. ...?", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r423693960", "createdAt": "2020-05-12T12:30:22Z", "author": {"login": "gunnarmorling"}, "path": "debezium-server/src/test/java/io/debezium/server/TestConfigSource.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.server;\n+\n+import java.nio.file.Path;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.kafka.connect.runtime.standalone.StandaloneConfig;\n+import org.eclipse.microprofile.config.spi.ConfigSource;\n+\n+import io.debezium.util.Testing;\n+\n+public class TestConfigSource implements ConfigSource {\n+\n+    public static final String KINESIS_REGION = \"eu-central-1\";\n+    public static final Path OFFSET_STORE_PATH = Testing.Files.createTestingPath(\"file-connector-offsets.txt\").toAbsolutePath();\n+    public static final Path TEST_FILE_PATH = Testing.Files.createTestingPath(\"file-connector-input.txt\").toAbsolutePath();\n+\n+    final Map<String, String> integrationTest = new HashMap<>();\n+    final Map<String, String> e2eTest = new HashMap<>();\n+    final Map<String, String> unitTest = new HashMap<>();\n+    final Map<String, String> config;\n+\n+    public TestConfigSource() {\n+        e2eTest.put(\"debezium.consumer\", \"kinesis\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY0OTIwNQ=="}, "originalCommit": {"oid": "2ded13a5605ce162659e7462456379c0f81217bc"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY5NTYwNw==", "bodyText": "We really need to get other types enabled (like Integer for keys), but that can be done separately.", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r423695607", "createdAt": "2020-05-12T12:33:10Z", "author": {"login": "gunnarmorling"}, "path": "debezium-server/src/main/java/io/debezium/server/Server.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.server;\n+\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.spi.CreationalContext;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.spi.Bean;\n+import javax.enterprise.inject.spi.BeanManager;\n+import javax.inject.Inject;\n+\n+import org.eclipse.microprofile.config.Config;\n+import org.eclipse.microprofile.config.ConfigProvider;\n+import org.eclipse.microprofile.health.Liveness;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.debezium.DebeziumException;\n+import io.debezium.engine.ChangeEvent;\n+import io.debezium.engine.DebeziumEngine;\n+import io.debezium.engine.DebeziumEngine.ChangeConsumer;\n+import io.debezium.engine.format.Avro;\n+import io.debezium.engine.format.Json;\n+import io.debezium.engine.format.SerializationFormat;\n+import io.quarkus.runtime.ShutdownEvent;\n+import io.quarkus.runtime.Startup;\n+\n+/**\n+ * <p>The entry point of the Quarkus-based standalone server. The server is configured via Quarkus/Microprofile Configuration sources\n+ * and provides few out-of-the-box target implementations.</p>\n+ * <p>The implementation uses CDI to find all classes that implements {@link DebeziumEngine.ChangeConsumer} interface.\n+ * The candidate classes should be annotated with {@code @Named} annotation and should be {@code Dependent}.</p>\n+ * <p>The configuration option {@code debezium.consumer} provides a name of the consumer that should be used and the value\n+ * must match to exactly one of the implementation classes.</p>\n+ *\n+ * @author Jiri Pechanec\n+ *\n+ */\n+@ApplicationScoped\n+@Startup\n+public class Server {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Server.class);\n+\n+    private static final String PROP_PREFIX = \"debezium.\";\n+    private static final String PROP_CONSUMER_NAME = PROP_PREFIX + \"consumer\";\n+    private static final String PROP_KEY_FORMAT = PROP_PREFIX + \"format.key\";\n+    private static final String PROP_VALUE_FORMAT = PROP_PREFIX + \"format.value\";\n+    private static final String PROP_TERMINATION_WAIT = PROP_PREFIX + \"termination.wait\";\n+\n+    private static final String FORMAT_JSON = Json.class.getSimpleName().toLowerCase();\n+    private static final String FORMAT_AVRO = Avro.class.getSimpleName().toLowerCase();\n+\n+    private ExecutorService executor = Executors.newSingleThreadExecutor();\n+\n+    @Inject\n+    BeanManager beanManager;\n+\n+    @Inject\n+    @Liveness\n+    ConnectorLifecycle health;\n+\n+    private Bean<DebeziumEngine.ChangeConsumer<ChangeEvent<?, ?>>> consumerBean;\n+    private CreationalContext<ChangeConsumer<ChangeEvent<?, ?>>> consumerBeanCreationalContext;\n+    private DebeziumEngine.ChangeConsumer<ChangeEvent<?, ?>> consumer;\n+    private DebeziumEngine<?> engine;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @PostConstruct\n+    public void start() {\n+        final Config config = ConfigProvider.getConfig();\n+        final String name = config.getValue(PROP_CONSUMER_NAME, String.class);\n+\n+        final Set<Bean<?>> beans = beanManager.getBeans(name).stream()\n+                .filter(x -> DebeziumEngine.ChangeConsumer.class.isAssignableFrom(x.getBeanClass()))\n+                .collect(Collectors.toSet());\n+        LOGGER.debug(\"Found {} candidate consumer(s)\", beans.size());\n+\n+        if (beans.size() == 0) {\n+            throw new DebeziumException(\"No Debezium consumer named '\" + name + \"' is available\");\n+        }\n+        else if (beans.size() > 1) {\n+            throw new DebeziumException(\"Multiple Debezium consumers named '\" + name + \"' were found\");\n+        }\n+\n+        consumerBean = (Bean<DebeziumEngine.ChangeConsumer<ChangeEvent<?, ?>>>) beans.iterator().next();\n+        consumerBeanCreationalContext = beanManager.createCreationalContext(consumerBean);\n+        consumer = consumerBean.create(consumerBeanCreationalContext);\n+        LOGGER.info(\"Consumer '{}' instantiated\", consumer.getClass().getName());\n+\n+        final Class<? extends SerializationFormat<?>> keyFormat = getFormat(config, PROP_KEY_FORMAT);\n+        final Class<? extends SerializationFormat<?>> valueFormat = getFormat(config, PROP_VALUE_FORMAT);\n+        final Properties props = configToProperties(config);\n+        props.setProperty(\"name\", name);\n+\n+        DebeziumEngine.Builder<?> builder = null;\n+        // TODO - apply variance and covariance rules on Debezium API to\n+        // support direct assignment to DebeziumEngine.Builder<ChangeEvent<?, ?>>\n+        if (keyFormat == Json.class && valueFormat == Json.class) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ded13a5605ce162659e7462456379c0f81217bc"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY5Njk1Nw==", "bodyText": "Might make sense to move them into separate modules, but can be done as a follow-up.", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r423696957", "createdAt": "2020-05-12T12:35:21Z", "author": {"login": "gunnarmorling"}, "path": "debezium-server/src/main/java/io/debezium/server/pubsub/PubSubChangeConsumer.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.server.pubsub;\n+\n+import java.util.List;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Named;\n+\n+import io.debezium.engine.ChangeEvent;\n+import io.debezium.engine.DebeziumEngine;\n+import io.debezium.engine.DebeziumEngine.RecordCommitter;\n+\n+/**\n+ * Implementation of the consumer that delivers the messages into Google Pub/Sub destination.\n+ *\n+ * @author Jiri Pechanec\n+ *\n+ */\n+@Named(\"pub-sub\")\n+@Dependent\n+public class PubSubChangeConsumer implements DebeziumEngine.ChangeConsumer<ChangeEvent<?, ?>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ded13a5605ce162659e7462456379c0f81217bc"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "694ff6db41bca6bf4b44d7d963f313ed2a471b24", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/694ff6db41bca6bf4b44d7d963f313ed2a471b24", "committedDate": "2020-05-13T06:16:38Z", "message": "DBZ-651 Renamed server class; config namespace split"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bcce6f8882d3397957f3272e0df70d5de71119b", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/2bcce6f8882d3397957f3272e0df70d5de71119b", "committedDate": "2020-05-13T14:26:00Z", "message": "DBZ-651 Add server distribution"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "2bcce6f8882d3397957f3272e0df70d5de71119b", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/2bcce6f8882d3397957f3272e0df70d5de71119b", "committedDate": "2020-05-13T14:26:00Z", "message": "DBZ-651 Add server distribution"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNTE3MzQ4", "url": "https://github.com/debezium/debezium/pull/1488#pullrequestreview-411517348", "createdAt": "2020-05-14T07:04:30Z", "commit": {"oid": "2bcce6f8882d3397957f3272e0df70d5de71119b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNzowNDozMFrOGVOrHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNzowNDozMFrOGVOrHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkxMzY5Mw==", "bodyText": "Ok, very nice now with the more consistent properties structure. I think we should add \"debezium.source.type\"=\"postgres\" as a simplified alias, too (can be done separately).", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r424913693", "createdAt": "2020-05-14T07:04:30Z", "author": {"login": "gunnarmorling"}, "path": "debezium-server/src/test/java/io/debezium/server/TestConfigSource.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.server;\n+\n+import java.nio.file.Path;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.kafka.connect.runtime.standalone.StandaloneConfig;\n+import org.eclipse.microprofile.config.spi.ConfigSource;\n+\n+import io.debezium.util.Testing;\n+\n+public class TestConfigSource implements ConfigSource {\n+\n+    public static final String KINESIS_REGION = \"eu-central-1\";\n+    public static final Path OFFSET_STORE_PATH = Testing.Files.createTestingPath(\"file-connector-offsets.txt\").toAbsolutePath();\n+    public static final Path TEST_FILE_PATH = Testing.Files.createTestingPath(\"file-connector-input.txt\").toAbsolutePath();\n+\n+    final Map<String, String> integrationTest = new HashMap<>();\n+    final Map<String, String> e2eTest = new HashMap<>();\n+    final Map<String, String> unitTest = new HashMap<>();\n+    final Map<String, String> config;\n+\n+    public TestConfigSource() {\n+        e2eTest.put(\"debezium.sink.type\", \"kinesis\");\n+        e2eTest.put(\"debezium.sink.kinesis.region\", KINESIS_REGION);\n+        e2eTest.put(\"debezium.source.connector.class\", \"io.debezium.connector.postgresql.PostgresConnector\");\n+        e2eTest.put(\"debezium.source.\" + StandaloneConfig.OFFSET_STORAGE_FILE_FILENAME_CONFIG, OFFSET_STORE_PATH.toAbsolutePath().toString());\n+        e2eTest.put(\"debezium.source.offset.flush.interval.ms\", \"0\");\n+        e2eTest.put(\"debezium.source.database.hostname\", TestDatabase.POSTGRES_HOST);\n+        e2eTest.put(\"debezium.source.database.port\", Integer.toString(TestDatabase.POSTGRES_PORT));\n+        e2eTest.put(\"debezium.source.database.user\", TestDatabase.POSTGRES_USER);\n+        e2eTest.put(\"debezium.source.database.password\", TestDatabase.POSTGRES_PASSWORD);\n+        e2eTest.put(\"debezium.source.database.dbname\", TestDatabase.POSTGRES_DBNAME);\n+        e2eTest.put(\"debezium.source.database.server.name\", \"testc\");\n+        e2eTest.put(\"debezium.source.schema.whitelist\", \"inventory\");\n+        e2eTest.put(\"debezium.source.table.whitelist\", \"inventory.customers\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bcce6f8882d3397957f3272e0df70d5de71119b"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNTE5NTkx", "url": "https://github.com/debezium/debezium/pull/1488#pullrequestreview-411519591", "createdAt": "2020-05-14T07:08:09Z", "commit": {"oid": "2bcce6f8882d3397957f3272e0df70d5de71119b"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNzowODowOVrOGVOx7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNzowOTozM1rOGVO0Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkxNTQzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return - a name of the logical destination for which the event is intended\n          \n          \n            \n                 * @return A name of the logical destination for which the event is intended", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r424915436", "createdAt": "2020-05-14T07:08:09Z", "author": {"login": "gunnarmorling"}, "path": "debezium-api/src/main/java/io/debezium/engine/ChangeEvent.java", "diffHunk": "@@ -19,4 +19,9 @@\n     public K key();\n \n     public V value();\n+\n+    /**\n+     * @return - a name of the logical destination for which the event is intended", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bcce6f8882d3397957f3272e0df70d5de71119b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkxNTc4MQ==", "bodyText": "Could you share the tree output of the contents of the archive here?", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r424915781", "createdAt": "2020-05-14T07:08:56Z", "author": {"login": "gunnarmorling"}, "path": "debezium-assembly-descriptors/src/main/resources/assemblies/server-distribution.xml", "diffHunk": "@@ -0,0 +1,48 @@\n+<?xml version=\"1.0\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bcce6f8882d3397957f3272e0df70d5de71119b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkxNjA0Ng==", "bodyText": "What's the license? Can we package this?", "url": "https://github.com/debezium/debezium/pull/1488#discussion_r424916046", "createdAt": "2020-05-14T07:09:33Z", "author": {"login": "gunnarmorling"}, "path": "debezium-server/pom.xml", "diffHunk": "@@ -0,0 +1,228 @@\n+<?xml version=\"1.0\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <groupId>io.debezium</groupId>\n+        <artifactId>debezium-parent</artifactId>\n+        <version>1.2.0-SNAPSHOT</version>\n+        <relativePath>../pom.xml</relativePath>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+    <artifactId>debezium-server</artifactId>\n+    <name>Debezium Standalone Quarkus Server</name>\n+    <packaging>jar</packaging>\n+\n+    <properties>\n+        <version.kinesis>2.13.13</version.kinesis>\n+\n+        <!-- Assembly configuration -->\n+        <assembly.descriptor>server-distribution</assembly.descriptor>\n+    </properties>\n+\n+    <dependencyManagement>\n+        <dependencies>\n+            <dependency>\n+                <groupId>io.quarkus</groupId>\n+                <artifactId>quarkus-bom-deployment</artifactId>\n+                <version>${quarkus.version}</version>\n+                <type>pom</type>\n+                <scope>import</scope>\n+            </dependency>\n+\n+            <!-- Target systems -->\n+            <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bcce6f8882d3397957f3272e0df70d5de71119b"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90af266a30b338cf7ff62055e2c928c40a36d167", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/90af266a30b338cf7ff62055e2c928c40a36d167", "committedDate": "2020-05-14T07:24:48Z", "message": "DBZ-651 Change JavaDoc\n\nCo-authored-by: Gunnar Morling <gunnar.morling@googlemail.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2648, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}