{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3MzQwODYw", "number": 1779, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOTowNDoxNlrOEfma1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOTowNToyOFrOEfmdeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNTcwNzc0OnYy", "diffSide": "RIGHT", "path": "documentation/modules/ROOT/pages/connectors/sqlserver.adoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOTowNDoxNlrOHL-NQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjowMjowMFrOHMKjsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMxNTU4NA==", "bodyText": "Is this part correct?  If yes, then we need to change the descriptions of type in the logical representation. That is, does CREATE indicate that CDC has been enabled for a table?  The way it is documented now, there is a message emitted to the schema change topic when you create a table. The doc does not indicate any relationship to tables for which the connector is capturing changes. Likewise, does DROP mean that CDC was disabled for a table or that the table was deleted?", "url": "https://github.com/debezium/debezium/pull/1779#discussion_r482315584", "createdAt": "2020-09-02T19:04:16Z", "author": {"login": "TovaCohen"}, "path": "documentation/modules/ROOT/pages/connectors/sqlserver.adoc", "diffHunk": "@@ -167,23 +167,22 @@ For example, consider a SQL Server installation with an `inventory` database tha\n * `fulfillment.dbo.customers`\n * `fulfillment.dbo.orders`\n \n-ifdef::community[]\n === Schema change topic\n \n+For a table for which CDC is enabled, the {prodname} SQL Server connector stores the history of schema changes to that table in a database history topic. This topic reflects an internal connector state and you should not use it. If your application needs to track schema changes, there is a public schema change topic. The name of the schema change topic is the same as the logical server name specified in the connector configuration.\n+\n [WARNING]\n ====\n-The format of the schema change topic messages is in incubating state and it can change without further notice.\n+The format of messages that a connector emits to its schema change topic is in an incubating state and can change without notice.\n ====\n \n-SQL Server connector stores the historic schema structure of database tables in a database history topic.\n-This topic should be considered as an internal state of the connector and should not be used by the user.\n-If the application needs to track changes in the source database there is the public-facing schema change topic.\n-The topic name is the same as the logical server name configured in connector configuration.\n+{prodname} emits a message to the schema change topic when:\n \n-{prodname} emits a new message to this topic whenever a new table is streamed from or when the structure of the table is altered ({link-prefix}:{link-sqlserver-connector}#sqlserver-schema-evolution[schema evolution procedure must be followed]).\n-The message contains a logical representation of the table schema.\n+* You enable CDC for a table. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUxNzkzNg==", "bodyText": "If I understand what you're asking, whether the table is CDC enabled or not is implicit.\nDuring streaming, we fetch a list of all tables that are CDC enabled and from there we filter that list based on include and exclude configuration filters.  This list is then used when schema changes are detected to avoid emitting events to the schema history topic for tables that shouldn't be there, e.g. a table that isn't monitored.\nSo for CREATE, the table would have already had to have had CDC enabled.  For a DROP, that raises a question which I don't have an answer for without testing is whether that explicitly drops CDC functionality.  For an ALTER, the table is already CDC enabled and is being modified.", "url": "https://github.com/debezium/debezium/pull/1779#discussion_r482517936", "createdAt": "2020-09-02T22:02:00Z", "author": {"login": "Naros"}, "path": "documentation/modules/ROOT/pages/connectors/sqlserver.adoc", "diffHunk": "@@ -167,23 +167,22 @@ For example, consider a SQL Server installation with an `inventory` database tha\n * `fulfillment.dbo.customers`\n * `fulfillment.dbo.orders`\n \n-ifdef::community[]\n === Schema change topic\n \n+For a table for which CDC is enabled, the {prodname} SQL Server connector stores the history of schema changes to that table in a database history topic. This topic reflects an internal connector state and you should not use it. If your application needs to track schema changes, there is a public schema change topic. The name of the schema change topic is the same as the logical server name specified in the connector configuration.\n+\n [WARNING]\n ====\n-The format of the schema change topic messages is in incubating state and it can change without further notice.\n+The format of messages that a connector emits to its schema change topic is in an incubating state and can change without notice.\n ====\n \n-SQL Server connector stores the historic schema structure of database tables in a database history topic.\n-This topic should be considered as an internal state of the connector and should not be used by the user.\n-If the application needs to track changes in the source database there is the public-facing schema change topic.\n-The topic name is the same as the logical server name configured in connector configuration.\n+{prodname} emits a message to the schema change topic when:\n \n-{prodname} emits a new message to this topic whenever a new table is streamed from or when the structure of the table is altered ({link-prefix}:{link-sqlserver-connector}#sqlserver-schema-evolution[schema evolution procedure must be followed]).\n-The message contains a logical representation of the table schema.\n+* You enable CDC for a table. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMxNTU4NA=="}, "originalCommit": null, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNTcxNDQ4OnYy", "diffSide": "RIGHT", "path": "documentation/modules/ROOT/pages/connectors/sqlserver.adoc", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOTowNToyOFrOHL-RXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjowODo1MVrOHMK37Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMxNjYzOQ==", "bodyText": "@gunnarmorling  Should the doc for the Db2 connector also have this property?", "url": "https://github.com/debezium/debezium/pull/1779#discussion_r482316639", "createdAt": "2020-09-02T19:05:28Z", "author": {"login": "TovaCohen"}, "path": "documentation/modules/ROOT/pages/connectors/sqlserver.adoc", "diffHunk": "@@ -1432,6 +1432,10 @@ Note: Depending on the `_hashAlgorithm_` used, the `_salt_` selected and the act\n |`adaptive`\n | Time, date, and timestamps can be represented with different kinds of precision, including: `adaptive` (the default) captures the time and timestamp values exactly as in the database using either millisecond, microsecond, or nanosecond precision values based on the database column's type; or `connect` always represents time and timestamp values using Kafka Connect's built-in representations for Time, Date, and Timestamp, which uses millisecond precision regardless of the database columns' precision. See {link-prefix}:{link-sqlserver-connector}#sqlserver-temporal-values[temporal values].\n \n+|[[sqlserver-property-include-schema-changes]]<<sqlserver-property-include-schema-changes, `include.schema.changes`>>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUwNzg5Nw==", "bodyText": "Yes it should.", "url": "https://github.com/debezium/debezium/pull/1779#discussion_r482507897", "createdAt": "2020-09-02T21:49:27Z", "author": {"login": "Naros"}, "path": "documentation/modules/ROOT/pages/connectors/sqlserver.adoc", "diffHunk": "@@ -1432,6 +1432,10 @@ Note: Depending on the `_hashAlgorithm_` used, the `_salt_` selected and the act\n |`adaptive`\n | Time, date, and timestamps can be represented with different kinds of precision, including: `adaptive` (the default) captures the time and timestamp values exactly as in the database using either millisecond, microsecond, or nanosecond precision values based on the database column's type; or `connect` always represents time and timestamp values using Kafka Connect's built-in representations for Time, Date, and Timestamp, which uses millisecond precision regardless of the database columns' precision. See {link-prefix}:{link-sqlserver-connector}#sqlserver-temporal-values[temporal values].\n \n+|[[sqlserver-property-include-schema-changes]]<<sqlserver-property-include-schema-changes, `include.schema.changes`>>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMxNjYzOQ=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUyMzExNw==", "bodyText": "I just added that with the latest commit.", "url": "https://github.com/debezium/debezium/pull/1779#discussion_r482523117", "createdAt": "2020-09-02T22:08:51Z", "author": {"login": "TovaCohen"}, "path": "documentation/modules/ROOT/pages/connectors/sqlserver.adoc", "diffHunk": "@@ -1432,6 +1432,10 @@ Note: Depending on the `_hashAlgorithm_` used, the `_salt_` selected and the act\n |`adaptive`\n | Time, date, and timestamps can be represented with different kinds of precision, including: `adaptive` (the default) captures the time and timestamp values exactly as in the database using either millisecond, microsecond, or nanosecond precision values based on the database column's type; or `connect` always represents time and timestamp values using Kafka Connect's built-in representations for Time, Date, and Timestamp, which uses millisecond precision regardless of the database columns' precision. See {link-prefix}:{link-sqlserver-connector}#sqlserver-temporal-values[temporal values].\n \n+|[[sqlserver-property-include-schema-changes]]<<sqlserver-property-include-schema-changes, `include.schema.changes`>>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMxNjYzOQ=="}, "originalCommit": null, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4179, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}