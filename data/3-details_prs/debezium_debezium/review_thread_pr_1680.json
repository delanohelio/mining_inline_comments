{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2Mzc3MzMw", "number": 1680, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNjoxNTozN1rOEMwW6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNjoxNTozN1rOEMwW6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODEwNjY0OnYy", "diffSide": "RIGHT", "path": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/MySqlSourceTypeInSchemaIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNjoxNTozN1rOGvDE2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzo0NToyNlrOGvR2eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk4NjY1MA==", "bodyText": "I think this should be removed", "url": "https://github.com/debezium/debezium/pull/1680#discussion_r451986650", "createdAt": "2020-07-09T06:15:37Z", "author": {"login": "jpechane"}, "path": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/MySqlSourceTypeInSchemaIT.java", "diffHunk": "@@ -252,4 +252,30 @@ public void shouldPropagateSourceTypeByDatatype() throws SQLException, Interrupt\n         assertThat(f2SchemaParameters).includes(\n                 entry(TYPE_NAME_PARAMETER_KEY, \"FLOAT\"), entry(TYPE_LENGTH_PARAMETER_KEY, \"8\"), entry(TYPE_SCALE_PARAMETER_KEY, \"4\"));\n     }\n+\n+    /**\n+     * The MySQL database is constructed using random database names and sometimes those names may actually\n+     * align so that the column source filters match the database name rather than the actual columns.\n+     * This method is to help preface the desired columns with the qualified table name to avoid this collision.\n+     *\n+     * @param tableName the unqualified table name\n+     * @param columns the individual regexs for columns that propagate source type information\n+     * @return the configuration value string\n+     */\n+    private String getColumnPropagateSourceType(String tableName, String... columns) {\n+        if (columns.length == 0) {\n+            return null;\n+        }\n+\n+        final StringBuilder result = new StringBuilder();\n+        for (int i = 0; i < columns.length; ++i) {\n+            final String column = columns[i];\n+            result.append(DATABASE.qualifiedTableName(tableName) + \".\" + column);\n+            if ((i + 1) < columns.length) {\n+                result.append(\",\");\n+            }\n+        }\n+        System.out.println(result.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIyODcyOQ==", "bodyText": "Oh, I thought I had removed that before pushing.  Great catch.", "url": "https://github.com/debezium/debezium/pull/1680#discussion_r452228729", "createdAt": "2020-07-09T13:45:26Z", "author": {"login": "Naros"}, "path": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/MySqlSourceTypeInSchemaIT.java", "diffHunk": "@@ -252,4 +252,30 @@ public void shouldPropagateSourceTypeByDatatype() throws SQLException, Interrupt\n         assertThat(f2SchemaParameters).includes(\n                 entry(TYPE_NAME_PARAMETER_KEY, \"FLOAT\"), entry(TYPE_LENGTH_PARAMETER_KEY, \"8\"), entry(TYPE_SCALE_PARAMETER_KEY, \"4\"));\n     }\n+\n+    /**\n+     * The MySQL database is constructed using random database names and sometimes those names may actually\n+     * align so that the column source filters match the database name rather than the actual columns.\n+     * This method is to help preface the desired columns with the qualified table name to avoid this collision.\n+     *\n+     * @param tableName the unqualified table name\n+     * @param columns the individual regexs for columns that propagate source type information\n+     * @return the configuration value string\n+     */\n+    private String getColumnPropagateSourceType(String tableName, String... columns) {\n+        if (columns.length == 0) {\n+            return null;\n+        }\n+\n+        final StringBuilder result = new StringBuilder();\n+        for (int i = 0; i < columns.length; ++i) {\n+            final String column = columns[i];\n+            result.append(DATABASE.qualifiedTableName(tableName) + \".\" + column);\n+            if ((i + 1) < columns.length) {\n+                result.append(\",\");\n+            }\n+        }\n+        System.out.println(result.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk4NjY1MA=="}, "originalCommit": null, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4226, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}