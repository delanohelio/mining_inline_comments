{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyNTQzMTMy", "number": 1922, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMzo1NjoyM1rOEznejA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNzoyMTozNlrOE3F3Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNTU5NjI4OnYy", "diffSide": "RIGHT", "path": "debezium-core/src/main/java/io/debezium/connector/base/ChangeEventQueue.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMzo1NjoyM1rOHq9Ocw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDo1NToxN1rOHtbxRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDgwNTM2Mw==", "bodyText": "I did 2 tests: the average time that the method used for the records\n\n\nof 1.6MB is about 679718 nanoseconds\n\n\nof 16KB is about 126651 nanoseconds", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r514805363", "createdAt": "2020-10-30T03:56:23Z", "author": {"login": "vanhoale"}, "path": "debezium-core/src/main/java/io/debezium/connector/base/ChangeEventQueue.java", "diffHunk": "@@ -126,9 +139,13 @@ public void enqueue(T record) throws InterruptedException {\n         if (LOGGER.isDebugEnabled()) {\n             LOGGER.debug(\"Enqueuing source record '{}'\", record);\n         }\n-\n+        // Waiting for queue to add more record.\n+        while (currentQueueSizeInBytes.get() > maxQueueSizeInBytes) {\n+            Thread.sleep(5000);\n+        }\n         // this will also raise an InterruptedException if the thread is interrupted while waiting for space in the queue\n         queue.put(record);\n+        currentQueueSizeInBytes.addAndGet(ObjectSizeCalculator.getObjectSize(record));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY0NDMwOA==", "bodyText": "I got a snapshot of performance calculation for the method getObjectSize", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r516644308", "createdAt": "2020-11-03T12:53:50Z", "author": {"login": "vanhoale"}, "path": "debezium-core/src/main/java/io/debezium/connector/base/ChangeEventQueue.java", "diffHunk": "@@ -126,9 +139,13 @@ public void enqueue(T record) throws InterruptedException {\n         if (LOGGER.isDebugEnabled()) {\n             LOGGER.debug(\"Enqueuing source record '{}'\", record);\n         }\n-\n+        // Waiting for queue to add more record.\n+        while (currentQueueSizeInBytes.get() > maxQueueSizeInBytes) {\n+            Thread.sleep(5000);\n+        }\n         // this will also raise an InterruptedException if the thread is interrupted while waiting for space in the queue\n         queue.put(record);\n+        currentQueueSizeInBytes.addAndGet(ObjectSizeCalculator.getObjectSize(record));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDgwNTM2Mw=="}, "originalCommit": null, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY0Nzc3MA==", "bodyText": "In the first few minutes, it may take around 600000 ns for an average processing time of 1.6MB, but when it's stable it decreases in half.\nI set -Xmx to 2GB, maxQueueSizeInBytes=500MB, and it ran without OOM.", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r516647770", "createdAt": "2020-11-03T12:59:44Z", "author": {"login": "vanhoale"}, "path": "debezium-core/src/main/java/io/debezium/connector/base/ChangeEventQueue.java", "diffHunk": "@@ -126,9 +139,13 @@ public void enqueue(T record) throws InterruptedException {\n         if (LOGGER.isDebugEnabled()) {\n             LOGGER.debug(\"Enqueuing source record '{}'\", record);\n         }\n-\n+        // Waiting for queue to add more record.\n+        while (currentQueueSizeInBytes.get() > maxQueueSizeInBytes) {\n+            Thread.sleep(5000);\n+        }\n         // this will also raise an InterruptedException if the thread is interrupted while waiting for space in the queue\n         queue.put(record);\n+        currentQueueSizeInBytes.addAndGet(ObjectSizeCalculator.getObjectSize(record));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDgwNTM2Mw=="}, "originalCommit": null, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQwMjk1MA==", "bodyText": "here is the random message size from ~1KB to ~1.6MB, maxQueueSizeInBytes=256MB:\n\npgbench -c 2 -j 4 -T 1000 -P 30 -n -f big_text_external_insert.sql\nINSERT INTO pgbench_ext (val) SELECT repeat(md5(random()::TEXT), random_between(32,50000) + ceil(random() * 25)::INT) ;", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r517402950", "createdAt": "2020-11-04T14:55:17Z", "author": {"login": "vanhoale"}, "path": "debezium-core/src/main/java/io/debezium/connector/base/ChangeEventQueue.java", "diffHunk": "@@ -126,9 +139,13 @@ public void enqueue(T record) throws InterruptedException {\n         if (LOGGER.isDebugEnabled()) {\n             LOGGER.debug(\"Enqueuing source record '{}'\", record);\n         }\n-\n+        // Waiting for queue to add more record.\n+        while (currentQueueSizeInBytes.get() > maxQueueSizeInBytes) {\n+            Thread.sleep(5000);\n+        }\n         // this will also raise an InterruptedException if the thread is interrupted while waiting for space in the queue\n         queue.put(record);\n+        currentQueueSizeInBytes.addAndGet(ObjectSizeCalculator.getObjectSize(record));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDgwNTM2Mw=="}, "originalCommit": null, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNTYwMDE5OnYy", "diffSide": "RIGHT", "path": "debezium-core/src/main/java/io/debezium/connector/base/ChangeEventQueue.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMzo1NzoxMlrOHq9RJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMzo1NzoxMlrOHq9RJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDgwNjA1NQ==", "bodyText": "Not sure if we should variable the sleep time", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r514806055", "createdAt": "2020-10-30T03:57:12Z", "author": {"login": "vanhoale"}, "path": "debezium-core/src/main/java/io/debezium/connector/base/ChangeEventQueue.java", "diffHunk": "@@ -126,9 +139,13 @@ public void enqueue(T record) throws InterruptedException {\n         if (LOGGER.isDebugEnabled()) {\n             LOGGER.debug(\"Enqueuing source record '{}'\", record);\n         }\n-\n+        // Waiting for queue to add more record.\n+        while (currentQueueSizeInBytes.get() > maxQueueSizeInBytes) {\n+            Thread.sleep(5000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjgyMDM1OnYy", "diffSide": "RIGHT", "path": "debezium-core/pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMDozMzozMlrOHrJURg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMzozNTowMFrOHtYRdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAwMzQ2Mg==", "bodyText": "I think a newer version of the ObjectSizeCalculator is available here: https://github.com/twitter/util/blob/develop/util-core/src/test/java/com/twitter/util/ObjectSizeCalculator.java but it's not available on maven central and twitter only uses it for unit tests.", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r515003462", "createdAt": "2020-10-30T10:33:32Z", "author": {"login": "rk3rn3r"}, "path": "debezium-core/pom.xml", "diffHunk": "@@ -101,6 +101,12 @@\n             <artifactId>kafka-connect-avro-converter</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <!-- open libraries -->\n+        <dependency>\n+            <groupId>com.twitter.common</groupId>\n+            <artifactId>objectsize</artifactId>\n+            <version>0.0.12</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM0NTY1Mg==", "bodyText": "@rk3rn3r should we use the code at the link or the latest maven?", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r517345652", "createdAt": "2020-11-04T13:35:00Z", "author": {"login": "vanhoale"}, "path": "debezium-core/pom.xml", "diffHunk": "@@ -101,6 +101,12 @@\n             <artifactId>kafka-connect-avro-converter</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <!-- open libraries -->\n+        <dependency>\n+            <groupId>com.twitter.common</groupId>\n+            <artifactId>objectsize</artifactId>\n+            <version>0.0.12</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAwMzQ2Mg=="}, "originalCommit": null, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjgzNjU4OnYy", "diffSide": "RIGHT", "path": "debezium-core/src/main/java/io/debezium/connector/base/ChangeEventQueue.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOTo1OTowM1rOHr9fOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMjoyNjowNVrOHuA-EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg1ODIzNQ==", "bodyText": "@vanhoale Would it be possible to handle queue size set to zero as a special value that disables the rate limitng and calculation of the  object size?", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r515858235", "createdAt": "2020-11-02T09:59:03Z", "author": {"login": "jpechane"}, "path": "debezium-core/src/main/java/io/debezium/connector/base/ChangeEventQueue.java", "diffHunk": "@@ -154,6 +171,7 @@ public void enqueue(T record) throws InterruptedException {\n                 metronome.pause();\n                 LOGGER.debug(\"checking for more records...\");\n             }\n+            currentQueueSizeInBytes.addAndGet(-ObjectSizeCalculator.getObjectSize(records));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTk3OTAxMQ==", "bodyText": "Could you elaborate on the idea? As I know this line of code is called after a batch is processed completely and it doesn't call frequently.", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r515979011", "createdAt": "2020-11-02T13:43:16Z", "author": {"login": "vanhoale"}, "path": "debezium-core/src/main/java/io/debezium/connector/base/ChangeEventQueue.java", "diffHunk": "@@ -154,6 +171,7 @@ public void enqueue(T record) throws InterruptedException {\n                 metronome.pause();\n                 LOGGER.debug(\"checking for more records...\");\n             }\n+            currentQueueSizeInBytes.addAndGet(-ObjectSizeCalculator.getObjectSize(records));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg1ODIzNQ=="}, "originalCommit": null, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk0NDA4MQ==", "bodyText": "@vanhoale\nField::isPositiveLong would become Field::isNonNegativeLong and description will be updated, default value will be 0\nthis line will be encapusalted in If (maxQueueSizeInBytes > 0)\nSo if the config value is not set or is set to zero the calculation will not be triggered. The waiting loop above will wait only for non zero maxQueueSizeInBytes", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r517944081", "createdAt": "2020-11-05T10:26:32Z", "author": {"login": "jpechane"}, "path": "debezium-core/src/main/java/io/debezium/connector/base/ChangeEventQueue.java", "diffHunk": "@@ -154,6 +171,7 @@ public void enqueue(T record) throws InterruptedException {\n                 metronome.pause();\n                 LOGGER.debug(\"checking for more records...\");\n             }\n+            currentQueueSizeInBytes.addAndGet(-ObjectSizeCalculator.getObjectSize(records));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg1ODIzNQ=="}, "originalCommit": null, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk4NjQwMA==", "bodyText": "is it returned DEFAULT_MAX_QUEUE_SIZE_IN_BYTES if I don't pass the max.queue.size.in.bytes variable?", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r517986400", "createdAt": "2020-11-05T11:39:07Z", "author": {"login": "vanhoale"}, "path": "debezium-core/src/main/java/io/debezium/connector/base/ChangeEventQueue.java", "diffHunk": "@@ -154,6 +171,7 @@ public void enqueue(T record) throws InterruptedException {\n                 metronome.pause();\n                 LOGGER.debug(\"checking for more records...\");\n             }\n+            currentQueueSizeInBytes.addAndGet(-ObjectSizeCalculator.getObjectSize(records));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg1ODIzNQ=="}, "originalCommit": null, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5ODQ0MA==", "bodyText": "Yes and we want to disable queue size limitng by default, hence choosign the 0.", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r517998440", "createdAt": "2020-11-05T12:00:06Z", "author": {"login": "jpechane"}, "path": "debezium-core/src/main/java/io/debezium/connector/base/ChangeEventQueue.java", "diffHunk": "@@ -154,6 +171,7 @@ public void enqueue(T record) throws InterruptedException {\n                 metronome.pause();\n                 LOGGER.debug(\"checking for more records...\");\n             }\n+            currentQueueSizeInBytes.addAndGet(-ObjectSizeCalculator.getObjectSize(records));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg1ODIzNQ=="}, "originalCommit": null, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODAwMjIwNA==", "bodyText": "ah, got your point, so you want a logic like: if we don't pass the maxQueueSizeInBytes then we shouldn't use ObjectSizeCalculator.getObjectSize() method?", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r518002204", "createdAt": "2020-11-05T12:06:57Z", "author": {"login": "vanhoale"}, "path": "debezium-core/src/main/java/io/debezium/connector/base/ChangeEventQueue.java", "diffHunk": "@@ -154,6 +171,7 @@ public void enqueue(T record) throws InterruptedException {\n                 metronome.pause();\n                 LOGGER.debug(\"checking for more records...\");\n             }\n+            currentQueueSizeInBytes.addAndGet(-ObjectSizeCalculator.getObjectSize(records));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg1ODIzNQ=="}, "originalCommit": null, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODAxMDg5Ng==", "bodyText": "Exactly!", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r518010896", "createdAt": "2020-11-05T12:23:19Z", "author": {"login": "jpechane"}, "path": "debezium-core/src/main/java/io/debezium/connector/base/ChangeEventQueue.java", "diffHunk": "@@ -154,6 +171,7 @@ public void enqueue(T record) throws InterruptedException {\n                 metronome.pause();\n                 LOGGER.debug(\"checking for more records...\");\n             }\n+            currentQueueSizeInBytes.addAndGet(-ObjectSizeCalculator.getObjectSize(records));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg1ODIzNQ=="}, "originalCommit": null, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODAxMjQzMg==", "bodyText": "I like it, will update it", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r518012432", "createdAt": "2020-11-05T12:26:05Z", "author": {"login": "vanhoale"}, "path": "debezium-core/src/main/java/io/debezium/connector/base/ChangeEventQueue.java", "diffHunk": "@@ -154,6 +171,7 @@ public void enqueue(T record) throws InterruptedException {\n                 metronome.pause();\n                 LOGGER.debug(\"checking for more records...\");\n             }\n+            currentQueueSizeInBytes.addAndGet(-ObjectSizeCalculator.getObjectSize(records));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg1ODIzNQ=="}, "originalCommit": null, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjMxMTI2OnYy", "diffSide": "RIGHT", "path": "debezium-core/src/main/java/io/debezium/connector/base/ChangeEventQueue.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMDoyNjo1NVrOHt80Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMTozNjozNFrOHt_TPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk0NDM0Mg==", "bodyText": "Instead of hardoced value I recommend to reuse pollInterval", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r517944342", "createdAt": "2020-11-05T10:26:55Z", "author": {"login": "jpechane"}, "path": "debezium-core/src/main/java/io/debezium/connector/base/ChangeEventQueue.java", "diffHunk": "@@ -126,9 +139,13 @@ public void enqueue(T record) throws InterruptedException {\n         if (LOGGER.isDebugEnabled()) {\n             LOGGER.debug(\"Enqueuing source record '{}'\", record);\n         }\n-\n+        // Waiting for queue to add more record.\n+        while (currentQueueSizeInBytes.get() > maxQueueSizeInBytes) {\n+            Thread.sleep(5000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk4NTA4NQ==", "bodyText": "Thanks! I will update it", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r517985085", "createdAt": "2020-11-05T11:36:34Z", "author": {"login": "vanhoale"}, "path": "debezium-core/src/main/java/io/debezium/connector/base/ChangeEventQueue.java", "diffHunk": "@@ -126,9 +139,13 @@ public void enqueue(T record) throws InterruptedException {\n         if (LOGGER.isDebugEnabled()) {\n             LOGGER.debug(\"Enqueuing source record '{}'\", record);\n         }\n-\n+        // Waiting for queue to add more record.\n+        while (currentQueueSizeInBytes.get() > maxQueueSizeInBytes) {\n+            Thread.sleep(5000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk0NDM0Mg=="}, "originalCommit": null, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0Njc4MDYyOnYy", "diffSide": "RIGHT", "path": "debezium-core/src/main/java/io/debezium/config/CommonConnectorConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMjozNjowNlrOHuBT1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMjozNjowNlrOHuBT1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODAxODAwNg==", "bodyText": "@jpechane should I set the default value to 0/nagative value, so I can check it to calculate the object size or not?", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r518018006", "createdAt": "2020-11-05T12:36:06Z", "author": {"login": "vanhoale"}, "path": "debezium-core/src/main/java/io/debezium/config/CommonConnectorConfig.java", "diffHunk": "@@ -242,6 +242,7 @@ public static BinaryHandlingMode parse(String value, String defaultValue) {\n     public static final String DATABASE_CONFIG_PREFIX = \"database.\";\n     private static final String CONVERTER_TYPE_SUFFIX = \".type\";\n     public static final long DEFAULT_RETRIABLE_RESTART_WAIT = 10000L;\n+    public static final long DEFAULT_MAX_QUEUE_SIZE_IN_BYTES = 500 * 1000 * 1024L; // 500MB;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzAxMzI3OnYy", "diffSide": "RIGHT", "path": "debezium-core/src/main/java/io/debezium/config/CommonConnectorConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzozNTo0MVrOHuDh-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNDoxNjozM1rOHuFSHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1NDM5Mw==", "bodyText": "Why -1 and not 0?", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r518054393", "createdAt": "2020-11-05T13:35:41Z", "author": {"login": "jpechane"}, "path": "debezium-core/src/main/java/io/debezium/config/CommonConnectorConfig.java", "diffHunk": "@@ -242,6 +242,7 @@ public static BinaryHandlingMode parse(String value, String defaultValue) {\n     public static final String DATABASE_CONFIG_PREFIX = \"database.\";\n     private static final String CONVERTER_TYPE_SUFFIX = \".type\";\n     public static final long DEFAULT_RETRIABLE_RESTART_WAIT = 10000L;\n+    public static final long DEFAULT_MAX_QUEUE_SIZE_IN_BYTES = -1; // In case we don't want to pass max.queue.size.in.bytes;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA4MzEwMg==", "bodyText": "I can update it to 0", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r518083102", "createdAt": "2020-11-05T14:16:33Z", "author": {"login": "vanhoale"}, "path": "debezium-core/src/main/java/io/debezium/config/CommonConnectorConfig.java", "diffHunk": "@@ -242,6 +242,7 @@ public static BinaryHandlingMode parse(String value, String defaultValue) {\n     public static final String DATABASE_CONFIG_PREFIX = \"database.\";\n     private static final String CONVERTER_TYPE_SUFFIX = \".type\";\n     public static final long DEFAULT_RETRIABLE_RESTART_WAIT = 10000L;\n+    public static final long DEFAULT_MAX_QUEUE_SIZE_IN_BYTES = -1; // In case we don't want to pass max.queue.size.in.bytes;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1NDM5Mw=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzAyNjQxOnYy", "diffSide": "RIGHT", "path": "debezium-core/src/main/java/io/debezium/connector/base/ChangeEventQueue.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzozOTowMlrOHuDqYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNDoxNTo0OVrOHuFP8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1NjU0NA==", "bodyText": "I don't think this is correct. IMHO sum of the object sizes does not equal the size of array of the same objects.\nAlso using this approach you are effectively doubling the price of the object calcaulation - once on the input and once on the removal.", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r518056544", "createdAt": "2020-11-05T13:39:02Z", "author": {"login": "jpechane"}, "path": "debezium-core/src/main/java/io/debezium/connector/base/ChangeEventQueue.java", "diffHunk": "@@ -154,6 +174,9 @@ public void enqueue(T record) throws InterruptedException {\n                 metronome.pause();\n                 LOGGER.debug(\"checking for more records...\");\n             }\n+            if (maxQueueSizeInBytes > 0) {\n+                currentQueueSizeInBytes.addAndGet(-ObjectSizeCalculator.getObjectSize(records));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA4MjU0NQ==", "bodyText": "@jpechane Confirmed! it's not equal, should I wrap the record in a key-pair object so I can get the key that can be referred to the object size later?", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r518082545", "createdAt": "2020-11-05T14:15:49Z", "author": {"login": "vanhoale"}, "path": "debezium-core/src/main/java/io/debezium/connector/base/ChangeEventQueue.java", "diffHunk": "@@ -154,6 +174,9 @@ public void enqueue(T record) throws InterruptedException {\n                 metronome.pause();\n                 LOGGER.debug(\"checking for more records...\");\n             }\n+            if (maxQueueSizeInBytes > 0) {\n+                currentQueueSizeInBytes.addAndGet(-ObjectSizeCalculator.getObjectSize(records));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1NjU0NA=="}, "originalCommit": null, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MjAyODgyOnYy", "diffSide": "RIGHT", "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresMetricsIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNzoyMDo0MFrOHwPEtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNzoyMDo0MFrOHwPEtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM0MDY2MA==", "bodyText": "Test looks good but this is a brittle approach. PLease check io.debezium.embedded.AbstractConnectorTest.waitForStreamingRunning(String, String, String) code how to use Awaitility lib and use until to wait for CurrentQueueSizeInBytes > 0 and QueueRemainingCapacity == 9\nPlease follow the same approach in other tests.\nThe timeout should be based upon io.debezium.connector.postgresql.TestHelper.waitTimeForRecords()", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r520340660", "createdAt": "2020-11-10T07:20:40Z", "author": {"login": "jpechane"}, "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresMetricsIT.java", "diffHunk": "@@ -190,6 +191,66 @@ private void assertStreamingMetrics() throws Exception {\n         // Assertions.assertThat(mBeanServer.getAttribute(getStreamingMetricsObjectName(), \"MonitoredTables\")).isEqualTo(new String[] {\"public.simple\"});\n     }\n \n+    @Test\n+    public void twoRecordsInQueue() throws Exception {\n+        final MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();\n+        TestHelper.execute(INIT_STATEMENTS, INSERT_STATEMENTS);\n+        final int recordCount = 2;\n+\n+        Configuration.Builder configBuilder = TestHelper.defaultConfig()\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.NEVER)\n+                .with(PostgresConnectorConfig.DROP_SLOT_ON_STOP, Boolean.TRUE)\n+                .with(PostgresConnectorConfig.MAX_QUEUE_SIZE, 10)\n+                .with(PostgresConnectorConfig.MAX_BATCH_SIZE, 1)\n+                .with(PostgresConnectorConfig.POLL_INTERVAL_MS, 5000L)\n+                .with(PostgresConnectorConfig.MAX_QUEUE_SIZE_IN_BYTES, 10000L);\n+        start(PostgresConnector.class, configBuilder.build());\n+\n+        waitForStreamingToStart();\n+        for (int i = 0; i < recordCount - 1; i++) {\n+            TestHelper.execute(INSERT_STATEMENTS);\n+        }\n+        Thread.sleep(1000);\n+        Assertions.assertThat(mBeanServer.getAttribute(getStreamingMetricsObjectName(), \"CurrentQueueSizeInBytes\")).isNotEqualTo(0L);\n+        Thread.sleep(500);\n+        Assertions.assertThat(mBeanServer.getAttribute(getStreamingMetricsObjectName(), \"QueueRemainingCapacity\")).isEqualTo(8);\n+\n+        SourceRecords records = consumeRecordsByTopic(recordCount);\n+        Thread.sleep(1000);\n+        Assertions.assertThat(mBeanServer.getAttribute(getStreamingMetricsObjectName(), \"CurrentQueueSizeInBytes\")).isEqualTo(0L);\n+        stopConnector();\n+    }\n+\n+    @Test\n+    public void oneRecordInQueue() throws Exception {\n+        final MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();\n+        TestHelper.execute(INIT_STATEMENTS, INSERT_STATEMENTS);\n+        final int recordCount = 2;\n+\n+        Configuration.Builder configBuilder = TestHelper.defaultConfig()\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.NEVER)\n+                .with(PostgresConnectorConfig.DROP_SLOT_ON_STOP, Boolean.TRUE)\n+                .with(PostgresConnectorConfig.MAX_QUEUE_SIZE, 10)\n+                .with(PostgresConnectorConfig.MAX_BATCH_SIZE, 1)\n+                .with(PostgresConnectorConfig.POLL_INTERVAL_MS, 5000L)\n+                .with(PostgresConnectorConfig.MAX_QUEUE_SIZE_IN_BYTES, 10L);\n+        start(PostgresConnector.class, configBuilder.build());\n+\n+        waitForStreamingToStart();\n+        for (int i = 0; i < recordCount - 1; i++) {\n+            TestHelper.execute(INSERT_STATEMENTS);\n+        }\n+        Thread.sleep(1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MjAzMTM4OnYy", "diffSide": "RIGHT", "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresMetricsIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNzoyMTozNlrOHwPGPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNzoyMTozNlrOHwPGPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM0MTA1Mw==", "bodyText": "This should be unnecessary, the queue should already be of size 0 at time of all records being consumed", "url": "https://github.com/debezium/debezium/pull/1922#discussion_r520341053", "createdAt": "2020-11-10T07:21:36Z", "author": {"login": "jpechane"}, "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresMetricsIT.java", "diffHunk": "@@ -190,6 +191,66 @@ private void assertStreamingMetrics() throws Exception {\n         // Assertions.assertThat(mBeanServer.getAttribute(getStreamingMetricsObjectName(), \"MonitoredTables\")).isEqualTo(new String[] {\"public.simple\"});\n     }\n \n+    @Test\n+    public void twoRecordsInQueue() throws Exception {\n+        final MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();\n+        TestHelper.execute(INIT_STATEMENTS, INSERT_STATEMENTS);\n+        final int recordCount = 2;\n+\n+        Configuration.Builder configBuilder = TestHelper.defaultConfig()\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.NEVER)\n+                .with(PostgresConnectorConfig.DROP_SLOT_ON_STOP, Boolean.TRUE)\n+                .with(PostgresConnectorConfig.MAX_QUEUE_SIZE, 10)\n+                .with(PostgresConnectorConfig.MAX_BATCH_SIZE, 1)\n+                .with(PostgresConnectorConfig.POLL_INTERVAL_MS, 5000L)\n+                .with(PostgresConnectorConfig.MAX_QUEUE_SIZE_IN_BYTES, 10000L);\n+        start(PostgresConnector.class, configBuilder.build());\n+\n+        waitForStreamingToStart();\n+        for (int i = 0; i < recordCount - 1; i++) {\n+            TestHelper.execute(INSERT_STATEMENTS);\n+        }\n+        Thread.sleep(1000);\n+        Assertions.assertThat(mBeanServer.getAttribute(getStreamingMetricsObjectName(), \"CurrentQueueSizeInBytes\")).isNotEqualTo(0L);\n+        Thread.sleep(500);\n+        Assertions.assertThat(mBeanServer.getAttribute(getStreamingMetricsObjectName(), \"QueueRemainingCapacity\")).isEqualTo(8);\n+\n+        SourceRecords records = consumeRecordsByTopic(recordCount);\n+        Thread.sleep(1000);\n+        Assertions.assertThat(mBeanServer.getAttribute(getStreamingMetricsObjectName(), \"CurrentQueueSizeInBytes\")).isEqualTo(0L);\n+        stopConnector();\n+    }\n+\n+    @Test\n+    public void oneRecordInQueue() throws Exception {\n+        final MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();\n+        TestHelper.execute(INIT_STATEMENTS, INSERT_STATEMENTS);\n+        final int recordCount = 2;\n+\n+        Configuration.Builder configBuilder = TestHelper.defaultConfig()\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.NEVER)\n+                .with(PostgresConnectorConfig.DROP_SLOT_ON_STOP, Boolean.TRUE)\n+                .with(PostgresConnectorConfig.MAX_QUEUE_SIZE, 10)\n+                .with(PostgresConnectorConfig.MAX_BATCH_SIZE, 1)\n+                .with(PostgresConnectorConfig.POLL_INTERVAL_MS, 5000L)\n+                .with(PostgresConnectorConfig.MAX_QUEUE_SIZE_IN_BYTES, 10L);\n+        start(PostgresConnector.class, configBuilder.build());\n+\n+        waitForStreamingToStart();\n+        for (int i = 0; i < recordCount - 1; i++) {\n+            TestHelper.execute(INSERT_STATEMENTS);\n+        }\n+        Thread.sleep(1000);\n+        Assertions.assertThat(mBeanServer.getAttribute(getStreamingMetricsObjectName(), \"CurrentQueueSizeInBytes\")).isNotEqualTo(0L);\n+        Thread.sleep(500);\n+        Assertions.assertThat(mBeanServer.getAttribute(getStreamingMetricsObjectName(), \"QueueRemainingCapacity\")).isEqualTo(9);\n+\n+        SourceRecords records = consumeRecordsByTopic(recordCount);\n+        Thread.sleep(1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4152, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}