{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3NjM5Mzc5", "number": 1338, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDozNzo1OFrODnyUtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDozNzo1OFrODnyUtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDQ1NTU5OnYy", "diffSide": "RIGHT", "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresMetricsIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDozNzo1OFrOF1-7wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDozNzo1OFrOF1-7wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0OTk1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Awaitility.await(\"Waiting for snapshot metrics to apppear\").atMost(TestHelper.waitTimeForRecords(), TimeUnit.SECONDS).until(() -> {\n          \n          \n            \n                    Awaitility.await(\"Waiting for snapshot metrics to appear\").atMost(TestHelper.waitTimeForRecords(), TimeUnit.SECONDS).until(() -> {", "url": "https://github.com/debezium/debezium/pull/1338#discussion_r392149954", "createdAt": "2020-03-13T10:37:58Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresMetricsIT.java", "diffHunk": "@@ -154,6 +147,29 @@ private void assertSnapshotMetrics() throws Exception {\n         Assertions.assertThat(mBeanServer.getAttribute(getSnapshotMetricsObjectName(), \"SnapshotCompleted\")).isEqualTo(true);\n     }\n \n+    private void assertSnapshotNotExecutedMetrics() throws Exception {\n+        final MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();\n+\n+        Awaitility.await(\"Waiting for snapshot metrics to apppear\").atMost(TestHelper.waitTimeForRecords(), TimeUnit.SECONDS).until(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1650c00dc94ee07825352d961960f0c3528eac8"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4454, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}