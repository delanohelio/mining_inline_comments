{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NzQzMTcx", "number": 1560, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMTowMDozNlrOECgpbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjoxMjo1MlrOECiB2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDY3NTAwOnYy", "diffSide": "RIGHT", "path": "debezium-testing/debezium-testing-testcontainers/src/test/java/io/debezium/testing/testcontainers/DebeziumContainerTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMTowMDozNlrOGfAoQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjoyMjoyNFrOGfDJ3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE2OTM0Nw==", "bodyText": "@gunnarmorling I recommend to use org.awaitility.core.ConditionFactory.ignoreException(Class<? extends Throwable>)", "url": "https://github.com/debezium/debezium/pull/1560#discussion_r435169347", "createdAt": "2020-06-04T11:00:36Z", "author": {"login": "jpechane"}, "path": "debezium-testing/debezium-testing-testcontainers/src/test/java/io/debezium/testing/testcontainers/DebeziumContainerTest.java", "diffHunk": "@@ -71,11 +73,26 @@ public static void startContainers() {\n     public void canRegisterConnector() throws Exception {\n         debeziumContainer.registerConnector(\"my-connector-1\", getConfiguration(1));\n \n-        String status = executeHttpRequest(debeziumContainer.getConnectorStatus(\"my-connector-1\"));\n-\n-        assertThat(JsonPath.<String> read(status, \"$.name\")).isEqualTo(\"my-connector-1\");\n-        assertThat(JsonPath.<String> read(status, \"$.connector.state\")).isEqualTo(\"RUNNING\");\n-        assertThat(JsonPath.<String> read(status, \"$.tasks[0].state\")).isEqualTo(\"RUNNING\");\n+        // task initialization happens asynchronously, so we might have to retry until the task is RUNNING\n+        Awaitility.await()\n+                .pollInterval(Duration.ofMillis(250))\n+                .atMost(Duration.ofSeconds(5))\n+                .until(\n+                        () -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE5ODE5OA==", "bodyText": "Good idea, updated.", "url": "https://github.com/debezium/debezium/pull/1560#discussion_r435198198", "createdAt": "2020-06-04T11:58:40Z", "author": {"login": "gunnarmorling"}, "path": "debezium-testing/debezium-testing-testcontainers/src/test/java/io/debezium/testing/testcontainers/DebeziumContainerTest.java", "diffHunk": "@@ -71,11 +73,26 @@ public static void startContainers() {\n     public void canRegisterConnector() throws Exception {\n         debeziumContainer.registerConnector(\"my-connector-1\", getConfiguration(1));\n \n-        String status = executeHttpRequest(debeziumContainer.getConnectorStatus(\"my-connector-1\"));\n-\n-        assertThat(JsonPath.<String> read(status, \"$.name\")).isEqualTo(\"my-connector-1\");\n-        assertThat(JsonPath.<String> read(status, \"$.connector.state\")).isEqualTo(\"RUNNING\");\n-        assertThat(JsonPath.<String> read(status, \"$.tasks[0].state\")).isEqualTo(\"RUNNING\");\n+        // task initialization happens asynchronously, so we might have to retry until the task is RUNNING\n+        Awaitility.await()\n+                .pollInterval(Duration.ofMillis(250))\n+                .atMost(Duration.ofSeconds(5))\n+                .until(\n+                        () -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE2OTM0Nw=="}, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIwNjI0Mg==", "bodyText": "Or use the correct wait method (see my other comment)  ;)", "url": "https://github.com/debezium/debezium/pull/1560#discussion_r435206242", "createdAt": "2020-06-04T12:13:54Z", "author": {"login": "jcechace"}, "path": "debezium-testing/debezium-testing-testcontainers/src/test/java/io/debezium/testing/testcontainers/DebeziumContainerTest.java", "diffHunk": "@@ -71,11 +73,26 @@ public static void startContainers() {\n     public void canRegisterConnector() throws Exception {\n         debeziumContainer.registerConnector(\"my-connector-1\", getConfiguration(1));\n \n-        String status = executeHttpRequest(debeziumContainer.getConnectorStatus(\"my-connector-1\"));\n-\n-        assertThat(JsonPath.<String> read(status, \"$.name\")).isEqualTo(\"my-connector-1\");\n-        assertThat(JsonPath.<String> read(status, \"$.connector.state\")).isEqualTo(\"RUNNING\");\n-        assertThat(JsonPath.<String> read(status, \"$.tasks[0].state\")).isEqualTo(\"RUNNING\");\n+        // task initialization happens asynchronously, so we might have to retry until the task is RUNNING\n+        Awaitility.await()\n+                .pollInterval(Duration.ofMillis(250))\n+                .atMost(Duration.ofSeconds(5))\n+                .until(\n+                        () -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE2OTM0Nw=="}, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIxMDcxOQ==", "bodyText": "Nice one, didn't know that. Thanks!", "url": "https://github.com/debezium/debezium/pull/1560#discussion_r435210719", "createdAt": "2020-06-04T12:22:24Z", "author": {"login": "gunnarmorling"}, "path": "debezium-testing/debezium-testing-testcontainers/src/test/java/io/debezium/testing/testcontainers/DebeziumContainerTest.java", "diffHunk": "@@ -71,11 +73,26 @@ public static void startContainers() {\n     public void canRegisterConnector() throws Exception {\n         debeziumContainer.registerConnector(\"my-connector-1\", getConfiguration(1));\n \n-        String status = executeHttpRequest(debeziumContainer.getConnectorStatus(\"my-connector-1\"));\n-\n-        assertThat(JsonPath.<String> read(status, \"$.name\")).isEqualTo(\"my-connector-1\");\n-        assertThat(JsonPath.<String> read(status, \"$.connector.state\")).isEqualTo(\"RUNNING\");\n-        assertThat(JsonPath.<String> read(status, \"$.tasks[0].state\")).isEqualTo(\"RUNNING\");\n+        // task initialization happens asynchronously, so we might have to retry until the task is RUNNING\n+        Awaitility.await()\n+                .pollInterval(Duration.ofMillis(250))\n+                .atMost(Duration.ofSeconds(5))\n+                .until(\n+                        () -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE2OTM0Nw=="}, "originalCommit": null, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDkwMTM4OnYy", "diffSide": "RIGHT", "path": "debezium-testing/debezium-testing-testcontainers/src/test/java/io/debezium/testing/testcontainers/DebeziumContainerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjoxMjo1MlrOGfC2Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjoyMjo1NlrOGfDLPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIwNTY4Mw==", "bodyText": "If there is a chance the path will exist but contain incorrect/outdated value for a period of time, this will fail with the first failed assertion. The correct method here is untilAsserted which is specifically designed to wait for correct assertions...", "url": "https://github.com/debezium/debezium/pull/1560#discussion_r435205683", "createdAt": "2020-06-04T12:12:52Z", "author": {"login": "jcechace"}, "path": "debezium-testing/debezium-testing-testcontainers/src/test/java/io/debezium/testing/testcontainers/DebeziumContainerTest.java", "diffHunk": "@@ -71,11 +73,21 @@ public static void startContainers() {\n     public void canRegisterConnector() throws Exception {\n         debeziumContainer.registerConnector(\"my-connector-1\", getConfiguration(1));\n \n-        String status = executeHttpRequest(debeziumContainer.getConnectorStatus(\"my-connector-1\"));\n-\n-        assertThat(JsonPath.<String> read(status, \"$.name\")).isEqualTo(\"my-connector-1\");\n-        assertThat(JsonPath.<String> read(status, \"$.connector.state\")).isEqualTo(\"RUNNING\");\n-        assertThat(JsonPath.<String> read(status, \"$.tasks[0].state\")).isEqualTo(\"RUNNING\");\n+        // task initialization happens asynchronously, so we might have to retry until the task is RUNNING\n+        Awaitility.await()\n+                .pollInterval(Duration.ofMillis(250))\n+                .atMost(Duration.ofSeconds(30))\n+                .ignoreException(PathNotFoundException.class)\n+                .until(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIxMTA3MA==", "bodyText": "Adjusted accordingly.", "url": "https://github.com/debezium/debezium/pull/1560#discussion_r435211070", "createdAt": "2020-06-04T12:22:56Z", "author": {"login": "gunnarmorling"}, "path": "debezium-testing/debezium-testing-testcontainers/src/test/java/io/debezium/testing/testcontainers/DebeziumContainerTest.java", "diffHunk": "@@ -71,11 +73,21 @@ public static void startContainers() {\n     public void canRegisterConnector() throws Exception {\n         debeziumContainer.registerConnector(\"my-connector-1\", getConfiguration(1));\n \n-        String status = executeHttpRequest(debeziumContainer.getConnectorStatus(\"my-connector-1\"));\n-\n-        assertThat(JsonPath.<String> read(status, \"$.name\")).isEqualTo(\"my-connector-1\");\n-        assertThat(JsonPath.<String> read(status, \"$.connector.state\")).isEqualTo(\"RUNNING\");\n-        assertThat(JsonPath.<String> read(status, \"$.tasks[0].state\")).isEqualTo(\"RUNNING\");\n+        // task initialization happens asynchronously, so we might have to retry until the task is RUNNING\n+        Awaitility.await()\n+                .pollInterval(Duration.ofMillis(250))\n+                .atMost(Duration.ofSeconds(30))\n+                .ignoreException(PathNotFoundException.class)\n+                .until(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIwNTY4Mw=="}, "originalCommit": null, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4285, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}