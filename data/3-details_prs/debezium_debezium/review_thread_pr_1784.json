{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4NTIwODgw", "number": 1784, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMDozMzo1NlrOEf7efA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMDozMzo1NlrOEf7efA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxOTE1NzcyOnYy", "diffSide": "RIGHT", "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/DebeziumEngineIT.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMDozMzo1NlrOHMghaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODo0OTo1MlrOHR3fPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg3NzgwMw==", "bodyText": "Can we avoid this via Awaitility?", "url": "https://github.com/debezium/debezium/pull/1784#discussion_r482877803", "createdAt": "2020-09-03T10:33:56Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/DebeziumEngineIT.java", "diffHunk": "@@ -197,4 +198,61 @@ public void shouldSerializeToCloudEvents() throws Exception {\n         }\n     }\n \n+    @Test\n+    @FixFor(\"DBZ-2461\")\n+    public void testOffsetsCommitAfterStop() throws Exception {\n+        final AtomicReference<Throwable> exception = new AtomicReference<>();\n+        DebeziumEngine<ChangeEvent<String, String>> engine;\n+\n+        TestHelper.execute(\"DROP TABLE IF EXISTS tests;\", \"CREATE TABLE tests (id SERIAL PRIMARY KEY);\");\n+\n+        final Properties props = new Properties();\n+        props.putAll(TestHelper.defaultConfig().build().asMap());\n+        props.setProperty(\"name\", \"debezium-engine\");\n+        props.setProperty(\"connector.class\", \"io.debezium.connector.postgresql.PostgresConnector\");\n+        props.setProperty(StandaloneConfig.OFFSET_STORAGE_FILE_FILENAME_CONFIG,\n+                OFFSET_STORE_PATH.toAbsolutePath().toString());\n+        props.setProperty(\"offset.flush.interval.ms\", \"3000\");\n+        props.setProperty(\"converter.schemas.enable\", \"false\");\n+\n+        engine = DebeziumEngine.create(Json.class).using(props).using(new DebeziumEngine.ConnectorCallback() {\n+            @Override\n+            public void connectorStarted() {\n+            }\n+\n+            @Override\n+            public void connectorStopped() {\n+            }\n+        }).using((success, message, error) -> {\n+            exception.compareAndSet(null, error);\n+        }).notifying((records, committer) -> {\n+            try {\n+\n+                for (ChangeEvent<String, String> record : records) {\n+                    committer.markProcessed(record);\n+                }\n+                committer.markBatchFinished();\n+            }\n+            catch (Exception e) {\n+                Testing.printError(e);\n+            }\n+        }).build();\n+\n+        ExecutorService executor = Executors.newSingleThreadExecutor();\n+        executor.execute(engine);\n+\n+        for (int i = 0; i < 100; i++) {\n+            TestHelper.execute(\"INSERT INTO tests VALUES(default)\");\n+        }\n+        Thread.sleep(5000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "835ec75feae0b26eca4533e154ff9801cd9d7029"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkwNjAyOQ==", "bodyText": "Probably yes but I am not sure if it is worth the effort. This is just a way how to increase the probaility that the bug is visible, not for the test stability. TO use awaitility we would need to monitor offset store and validate if there are offsets of some condition.", "url": "https://github.com/debezium/debezium/pull/1784#discussion_r482906029", "createdAt": "2020-09-03T11:27:25Z", "author": {"login": "jpechane"}, "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/DebeziumEngineIT.java", "diffHunk": "@@ -197,4 +198,61 @@ public void shouldSerializeToCloudEvents() throws Exception {\n         }\n     }\n \n+    @Test\n+    @FixFor(\"DBZ-2461\")\n+    public void testOffsetsCommitAfterStop() throws Exception {\n+        final AtomicReference<Throwable> exception = new AtomicReference<>();\n+        DebeziumEngine<ChangeEvent<String, String>> engine;\n+\n+        TestHelper.execute(\"DROP TABLE IF EXISTS tests;\", \"CREATE TABLE tests (id SERIAL PRIMARY KEY);\");\n+\n+        final Properties props = new Properties();\n+        props.putAll(TestHelper.defaultConfig().build().asMap());\n+        props.setProperty(\"name\", \"debezium-engine\");\n+        props.setProperty(\"connector.class\", \"io.debezium.connector.postgresql.PostgresConnector\");\n+        props.setProperty(StandaloneConfig.OFFSET_STORAGE_FILE_FILENAME_CONFIG,\n+                OFFSET_STORE_PATH.toAbsolutePath().toString());\n+        props.setProperty(\"offset.flush.interval.ms\", \"3000\");\n+        props.setProperty(\"converter.schemas.enable\", \"false\");\n+\n+        engine = DebeziumEngine.create(Json.class).using(props).using(new DebeziumEngine.ConnectorCallback() {\n+            @Override\n+            public void connectorStarted() {\n+            }\n+\n+            @Override\n+            public void connectorStopped() {\n+            }\n+        }).using((success, message, error) -> {\n+            exception.compareAndSet(null, error);\n+        }).notifying((records, committer) -> {\n+            try {\n+\n+                for (ChangeEvent<String, String> record : records) {\n+                    committer.markProcessed(record);\n+                }\n+                committer.markBatchFinished();\n+            }\n+            catch (Exception e) {\n+                Testing.printError(e);\n+            }\n+        }).build();\n+\n+        ExecutorService executor = Executors.newSingleThreadExecutor();\n+        executor.execute(engine);\n+\n+        for (int i = 0; i < 100; i++) {\n+            TestHelper.execute(\"INSERT INTO tests VALUES(default)\");\n+        }\n+        Thread.sleep(5000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg3NzgwMw=="}, "originalCommit": {"oid": "835ec75feae0b26eca4533e154ff9801cd9d7029"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkxODQyNA==", "bodyText": "I'm not so much concerned about stability, but about overall execution time of the test suite.", "url": "https://github.com/debezium/debezium/pull/1784#discussion_r482918424", "createdAt": "2020-09-03T11:51:09Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/DebeziumEngineIT.java", "diffHunk": "@@ -197,4 +198,61 @@ public void shouldSerializeToCloudEvents() throws Exception {\n         }\n     }\n \n+    @Test\n+    @FixFor(\"DBZ-2461\")\n+    public void testOffsetsCommitAfterStop() throws Exception {\n+        final AtomicReference<Throwable> exception = new AtomicReference<>();\n+        DebeziumEngine<ChangeEvent<String, String>> engine;\n+\n+        TestHelper.execute(\"DROP TABLE IF EXISTS tests;\", \"CREATE TABLE tests (id SERIAL PRIMARY KEY);\");\n+\n+        final Properties props = new Properties();\n+        props.putAll(TestHelper.defaultConfig().build().asMap());\n+        props.setProperty(\"name\", \"debezium-engine\");\n+        props.setProperty(\"connector.class\", \"io.debezium.connector.postgresql.PostgresConnector\");\n+        props.setProperty(StandaloneConfig.OFFSET_STORAGE_FILE_FILENAME_CONFIG,\n+                OFFSET_STORE_PATH.toAbsolutePath().toString());\n+        props.setProperty(\"offset.flush.interval.ms\", \"3000\");\n+        props.setProperty(\"converter.schemas.enable\", \"false\");\n+\n+        engine = DebeziumEngine.create(Json.class).using(props).using(new DebeziumEngine.ConnectorCallback() {\n+            @Override\n+            public void connectorStarted() {\n+            }\n+\n+            @Override\n+            public void connectorStopped() {\n+            }\n+        }).using((success, message, error) -> {\n+            exception.compareAndSet(null, error);\n+        }).notifying((records, committer) -> {\n+            try {\n+\n+                for (ChangeEvent<String, String> record : records) {\n+                    committer.markProcessed(record);\n+                }\n+                committer.markBatchFinished();\n+            }\n+            catch (Exception e) {\n+                Testing.printError(e);\n+            }\n+        }).build();\n+\n+        ExecutorService executor = Executors.newSingleThreadExecutor();\n+        executor.execute(engine);\n+\n+        for (int i = 0; i < 100; i++) {\n+            TestHelper.execute(\"INSERT INTO tests VALUES(default)\");\n+        }\n+        Thread.sleep(5000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg3NzgwMw=="}, "originalCommit": {"oid": "835ec75feae0b26eca4533e154ff9801cd9d7029"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgzNjUzMg==", "bodyText": "We are not going to short it down much anyway. We need to wait for 3 secs at least to make sure the offset committer commits offsets. I don't want to reduce that interval too much as with loer values the issue tended to disappear.", "url": "https://github.com/debezium/debezium/pull/1784#discussion_r486836532", "createdAt": "2020-09-11T07:48:34Z", "author": {"login": "jpechane"}, "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/DebeziumEngineIT.java", "diffHunk": "@@ -197,4 +198,61 @@ public void shouldSerializeToCloudEvents() throws Exception {\n         }\n     }\n \n+    @Test\n+    @FixFor(\"DBZ-2461\")\n+    public void testOffsetsCommitAfterStop() throws Exception {\n+        final AtomicReference<Throwable> exception = new AtomicReference<>();\n+        DebeziumEngine<ChangeEvent<String, String>> engine;\n+\n+        TestHelper.execute(\"DROP TABLE IF EXISTS tests;\", \"CREATE TABLE tests (id SERIAL PRIMARY KEY);\");\n+\n+        final Properties props = new Properties();\n+        props.putAll(TestHelper.defaultConfig().build().asMap());\n+        props.setProperty(\"name\", \"debezium-engine\");\n+        props.setProperty(\"connector.class\", \"io.debezium.connector.postgresql.PostgresConnector\");\n+        props.setProperty(StandaloneConfig.OFFSET_STORAGE_FILE_FILENAME_CONFIG,\n+                OFFSET_STORE_PATH.toAbsolutePath().toString());\n+        props.setProperty(\"offset.flush.interval.ms\", \"3000\");\n+        props.setProperty(\"converter.schemas.enable\", \"false\");\n+\n+        engine = DebeziumEngine.create(Json.class).using(props).using(new DebeziumEngine.ConnectorCallback() {\n+            @Override\n+            public void connectorStarted() {\n+            }\n+\n+            @Override\n+            public void connectorStopped() {\n+            }\n+        }).using((success, message, error) -> {\n+            exception.compareAndSet(null, error);\n+        }).notifying((records, committer) -> {\n+            try {\n+\n+                for (ChangeEvent<String, String> record : records) {\n+                    committer.markProcessed(record);\n+                }\n+                committer.markBatchFinished();\n+            }\n+            catch (Exception e) {\n+                Testing.printError(e);\n+            }\n+        }).build();\n+\n+        ExecutorService executor = Executors.newSingleThreadExecutor();\n+        executor.execute(engine);\n+\n+        for (int i = 0; i < 100; i++) {\n+            TestHelper.execute(\"INSERT INTO tests VALUES(default)\");\n+        }\n+        Thread.sleep(5000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg3NzgwMw=="}, "originalCommit": {"oid": "835ec75feae0b26eca4533e154ff9801cd9d7029"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg2NDg1Nw==", "bodyText": "Ok, not super-excited, but so be it.", "url": "https://github.com/debezium/debezium/pull/1784#discussion_r486864857", "createdAt": "2020-09-11T08:41:29Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/DebeziumEngineIT.java", "diffHunk": "@@ -197,4 +198,61 @@ public void shouldSerializeToCloudEvents() throws Exception {\n         }\n     }\n \n+    @Test\n+    @FixFor(\"DBZ-2461\")\n+    public void testOffsetsCommitAfterStop() throws Exception {\n+        final AtomicReference<Throwable> exception = new AtomicReference<>();\n+        DebeziumEngine<ChangeEvent<String, String>> engine;\n+\n+        TestHelper.execute(\"DROP TABLE IF EXISTS tests;\", \"CREATE TABLE tests (id SERIAL PRIMARY KEY);\");\n+\n+        final Properties props = new Properties();\n+        props.putAll(TestHelper.defaultConfig().build().asMap());\n+        props.setProperty(\"name\", \"debezium-engine\");\n+        props.setProperty(\"connector.class\", \"io.debezium.connector.postgresql.PostgresConnector\");\n+        props.setProperty(StandaloneConfig.OFFSET_STORAGE_FILE_FILENAME_CONFIG,\n+                OFFSET_STORE_PATH.toAbsolutePath().toString());\n+        props.setProperty(\"offset.flush.interval.ms\", \"3000\");\n+        props.setProperty(\"converter.schemas.enable\", \"false\");\n+\n+        engine = DebeziumEngine.create(Json.class).using(props).using(new DebeziumEngine.ConnectorCallback() {\n+            @Override\n+            public void connectorStarted() {\n+            }\n+\n+            @Override\n+            public void connectorStopped() {\n+            }\n+        }).using((success, message, error) -> {\n+            exception.compareAndSet(null, error);\n+        }).notifying((records, committer) -> {\n+            try {\n+\n+                for (ChangeEvent<String, String> record : records) {\n+                    committer.markProcessed(record);\n+                }\n+                committer.markBatchFinished();\n+            }\n+            catch (Exception e) {\n+                Testing.printError(e);\n+            }\n+        }).build();\n+\n+        ExecutorService executor = Executors.newSingleThreadExecutor();\n+        executor.execute(engine);\n+\n+        for (int i = 0; i < 100; i++) {\n+            TestHelper.execute(\"INSERT INTO tests VALUES(default)\");\n+        }\n+        Thread.sleep(5000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg3NzgwMw=="}, "originalCommit": {"oid": "835ec75feae0b26eca4533e154ff9801cd9d7029"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ5Njk1OA==", "bodyText": "Removed as by-product of fixing block issue", "url": "https://github.com/debezium/debezium/pull/1784#discussion_r488496958", "createdAt": "2020-09-15T08:49:52Z", "author": {"login": "jpechane"}, "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/DebeziumEngineIT.java", "diffHunk": "@@ -197,4 +198,61 @@ public void shouldSerializeToCloudEvents() throws Exception {\n         }\n     }\n \n+    @Test\n+    @FixFor(\"DBZ-2461\")\n+    public void testOffsetsCommitAfterStop() throws Exception {\n+        final AtomicReference<Throwable> exception = new AtomicReference<>();\n+        DebeziumEngine<ChangeEvent<String, String>> engine;\n+\n+        TestHelper.execute(\"DROP TABLE IF EXISTS tests;\", \"CREATE TABLE tests (id SERIAL PRIMARY KEY);\");\n+\n+        final Properties props = new Properties();\n+        props.putAll(TestHelper.defaultConfig().build().asMap());\n+        props.setProperty(\"name\", \"debezium-engine\");\n+        props.setProperty(\"connector.class\", \"io.debezium.connector.postgresql.PostgresConnector\");\n+        props.setProperty(StandaloneConfig.OFFSET_STORAGE_FILE_FILENAME_CONFIG,\n+                OFFSET_STORE_PATH.toAbsolutePath().toString());\n+        props.setProperty(\"offset.flush.interval.ms\", \"3000\");\n+        props.setProperty(\"converter.schemas.enable\", \"false\");\n+\n+        engine = DebeziumEngine.create(Json.class).using(props).using(new DebeziumEngine.ConnectorCallback() {\n+            @Override\n+            public void connectorStarted() {\n+            }\n+\n+            @Override\n+            public void connectorStopped() {\n+            }\n+        }).using((success, message, error) -> {\n+            exception.compareAndSet(null, error);\n+        }).notifying((records, committer) -> {\n+            try {\n+\n+                for (ChangeEvent<String, String> record : records) {\n+                    committer.markProcessed(record);\n+                }\n+                committer.markBatchFinished();\n+            }\n+            catch (Exception e) {\n+                Testing.printError(e);\n+            }\n+        }).build();\n+\n+        ExecutorService executor = Executors.newSingleThreadExecutor();\n+        executor.execute(engine);\n+\n+        for (int i = 0; i < 100; i++) {\n+            TestHelper.execute(\"INSERT INTO tests VALUES(default)\");\n+        }\n+        Thread.sleep(5000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg3NzgwMw=="}, "originalCommit": {"oid": "835ec75feae0b26eca4533e154ff9801cd9d7029"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4183, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}