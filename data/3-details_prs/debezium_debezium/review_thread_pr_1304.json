{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMDUwMzMy", "number": 1304, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzo1MzoyNFrODk8QfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNTowMzozOVrODmVebA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDYyNTg4OnYy", "diffSide": "RIGHT", "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/PostgresErrorHandler.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzo1MzoyNFrOFxi9FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMToyMDo0MlrOFyPxqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5NzIzNg==", "bodyText": "Wouldn't it be better to match against the Throwables that the JDBC driver exposes? I'm assuming that connection failures can happen with different root causes?", "url": "https://github.com/debezium/debezium/pull/1304#discussion_r387497236", "createdAt": "2020-03-04T07:53:24Z", "author": {"login": "hashhar"}, "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/PostgresErrorHandler.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.connector.postgresql;\n+\n+import java.net.SocketException;\n+\n+import io.debezium.connector.base.ChangeEventQueue;\n+import io.debezium.pipeline.ErrorHandler;\n+import io.debezium.util.Throwables;\n+\n+/**\n+ * Error handler for Postgres.\n+ *\n+ * @author Gunnar Morling\n+ */\n+public class PostgresErrorHandler extends ErrorHandler {\n+\n+    public PostgresErrorHandler(String logicalName, ChangeEventQueue<?> queue, Runnable onThrowable) {\n+        super(PostgresConnector.class, logicalName, queue, onThrowable);\n+    }\n+\n+    @Override\n+    protected boolean isRetriable(Throwable throwable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUxNDQxMg==", "bodyText": "I'm not quite sure I'm following. This connector-specific handler receives the raised exception and can act on it as required, by examining the root exception or the one raised. Could you elaborate what you have in mind?", "url": "https://github.com/debezium/debezium/pull/1304#discussion_r387514412", "createdAt": "2020-03-04T08:34:26Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/PostgresErrorHandler.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.connector.postgresql;\n+\n+import java.net.SocketException;\n+\n+import io.debezium.connector.base.ChangeEventQueue;\n+import io.debezium.pipeline.ErrorHandler;\n+import io.debezium.util.Throwables;\n+\n+/**\n+ * Error handler for Postgres.\n+ *\n+ * @author Gunnar Morling\n+ */\n+public class PostgresErrorHandler extends ErrorHandler {\n+\n+    public PostgresErrorHandler(String logicalName, ChangeEventQueue<?> queue, Runnable onThrowable) {\n+        super(PostgresConnector.class, logicalName, queue, onThrowable);\n+    }\n+\n+    @Override\n+    protected boolean isRetriable(Throwable throwable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5NzIzNg=="}, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU1MDMyMQ==", "bodyText": "@gunnarmorling I think @hashhar want sot restart on any SqlException", "url": "https://github.com/debezium/debezium/pull/1304#discussion_r387550321", "createdAt": "2020-03-04T09:42:39Z", "author": {"login": "jpechane"}, "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/PostgresErrorHandler.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.connector.postgresql;\n+\n+import java.net.SocketException;\n+\n+import io.debezium.connector.base.ChangeEventQueue;\n+import io.debezium.pipeline.ErrorHandler;\n+import io.debezium.util.Throwables;\n+\n+/**\n+ * Error handler for Postgres.\n+ *\n+ * @author Gunnar Morling\n+ */\n+public class PostgresErrorHandler extends ErrorHandler {\n+\n+    public PostgresErrorHandler(String logicalName, ChangeEventQueue<?> queue, Runnable onThrowable) {\n+        super(PostgresConnector.class, logicalName, queue, onThrowable);\n+    }\n+\n+    @Override\n+    protected boolean isRetriable(Throwable throwable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5NzIzNg=="}, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU4MDU1MA==", "bodyText": "Ah, I see. I'm not so sure, I'd rather start with a specific set, we always can expand. Let's say there's an authorization failure (wrong password etc.), restarting doesn't make sense.", "url": "https://github.com/debezium/debezium/pull/1304#discussion_r387580550", "createdAt": "2020-03-04T10:35:59Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/PostgresErrorHandler.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.connector.postgresql;\n+\n+import java.net.SocketException;\n+\n+import io.debezium.connector.base.ChangeEventQueue;\n+import io.debezium.pipeline.ErrorHandler;\n+import io.debezium.util.Throwables;\n+\n+/**\n+ * Error handler for Postgres.\n+ *\n+ * @author Gunnar Morling\n+ */\n+public class PostgresErrorHandler extends ErrorHandler {\n+\n+    public PostgresErrorHandler(String logicalName, ChangeEventQueue<?> queue, Runnable onThrowable) {\n+        super(PostgresConnector.class, logicalName, queue, onThrowable);\n+    }\n+\n+    @Override\n+    protected boolean isRetriable(Throwable throwable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5NzIzNg=="}, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYwMzkxOA==", "bodyText": "Any SqlException is too extreme. But I'm thinking something like org.postgresql.util.PSQLException: Database connection failed when writing to copy. If PostgreSQL exposes specific exceptions for specific errors then that'll be useful. Not sure if the JDBC driver exposes those.", "url": "https://github.com/debezium/debezium/pull/1304#discussion_r387603918", "createdAt": "2020-03-04T11:21:54Z", "author": {"login": "hashhar"}, "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/PostgresErrorHandler.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.connector.postgresql;\n+\n+import java.net.SocketException;\n+\n+import io.debezium.connector.base.ChangeEventQueue;\n+import io.debezium.pipeline.ErrorHandler;\n+import io.debezium.util.Throwables;\n+\n+/**\n+ * Error handler for Postgres.\n+ *\n+ * @author Gunnar Morling\n+ */\n+public class PostgresErrorHandler extends ErrorHandler {\n+\n+    public PostgresErrorHandler(String logicalName, ChangeEventQueue<?> queue, Runnable onThrowable) {\n+        super(PostgresConnector.class, logicalName, queue, onThrowable);\n+    }\n+\n+    @Override\n+    protected boolean isRetriable(Throwable throwable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5NzIzNg=="}, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYwNDM4MA==", "bodyText": "But I agree with your point too. Start with specific ones and if in future a common parent is found then adjust accordingly.", "url": "https://github.com/debezium/debezium/pull/1304#discussion_r387604380", "createdAt": "2020-03-04T11:22:54Z", "author": {"login": "hashhar"}, "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/PostgresErrorHandler.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.connector.postgresql;\n+\n+import java.net.SocketException;\n+\n+import io.debezium.connector.base.ChangeEventQueue;\n+import io.debezium.pipeline.ErrorHandler;\n+import io.debezium.util.Throwables;\n+\n+/**\n+ * Error handler for Postgres.\n+ *\n+ * @author Gunnar Morling\n+ */\n+public class PostgresErrorHandler extends ErrorHandler {\n+\n+    public PostgresErrorHandler(String logicalName, ChangeEventQueue<?> queue, Runnable onThrowable) {\n+        super(PostgresConnector.class, logicalName, queue, onThrowable);\n+    }\n+\n+    @Override\n+    protected boolean isRetriable(Throwable throwable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5NzIzNg=="}, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzMTU5NQ==", "bodyText": "Looking for the PSQLException with that message as suggested now.", "url": "https://github.com/debezium/debezium/pull/1304#discussion_r388231595", "createdAt": "2020-03-05T11:20:42Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/PostgresErrorHandler.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.connector.postgresql;\n+\n+import java.net.SocketException;\n+\n+import io.debezium.connector.base.ChangeEventQueue;\n+import io.debezium.pipeline.ErrorHandler;\n+import io.debezium.util.Throwables;\n+\n+/**\n+ * Error handler for Postgres.\n+ *\n+ * @author Gunnar Morling\n+ */\n+public class PostgresErrorHandler extends ErrorHandler {\n+\n+    public PostgresErrorHandler(String logicalName, ChangeEventQueue<?> queue, Runnable onThrowable) {\n+        super(PostgresConnector.class, logicalName, queue, onThrowable);\n+    }\n+\n+    @Override\n+    protected boolean isRetriable(Throwable throwable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5NzIzNg=="}, "originalCommit": null, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDkyMDk4OnYy", "diffSide": "RIGHT", "path": "debezium-core/src/main/java/io/debezium/connector/common/BaseSourceTask.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwOToyOTo1OFrOFxlwWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMTozMDowMFrOFyQC7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU0MzEyOQ==", "bodyText": "commit and commitRecord are called asynchrnously by Connect worker. Should not we introduce a barrier that would skip those two methods in case of stop()/start() sequence being in progress?", "url": "https://github.com/debezium/debezium/pull/1304#discussion_r387543129", "createdAt": "2020-03-04T09:29:58Z", "author": {"login": "jpechane"}, "path": "debezium-core/src/main/java/io/debezium/connector/common/BaseSourceTask.java", "diffHunk": "@@ -86,6 +90,23 @@ public final void start(Map<String, String> props) {\n      */\n     protected abstract ChangeEventSourceCoordinator start(Configuration config);\n \n+    @Override\n+    public final List<SourceRecord> poll() throws InterruptedException {\n+        try {\n+            return doPoll();\n+        }\n+        catch (RetriableException e) {\n+            stop();\n+            start(config);\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * Returns the next batch of source records, if any are available.\n+     */\n+    public abstract List<SourceRecord> doPoll() throws InterruptedException;\n+\n     @Override\n     public void commitRecord(SourceRecord record) throws InterruptedException {\n         Map<String, ?> currentOffset = record.sourceOffset();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU4MDk2Mg==", "bodyText": "Are you sure, is this not happening from within the polling loop?", "url": "https://github.com/debezium/debezium/pull/1304#discussion_r387580962", "createdAt": "2020-03-04T10:36:40Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/connector/common/BaseSourceTask.java", "diffHunk": "@@ -86,6 +90,23 @@ public final void start(Map<String, String> props) {\n      */\n     protected abstract ChangeEventSourceCoordinator start(Configuration config);\n \n+    @Override\n+    public final List<SourceRecord> poll() throws InterruptedException {\n+        try {\n+            return doPoll();\n+        }\n+        catch (RetriableException e) {\n+            stop();\n+            start(config);\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * Returns the next batch of source records, if any are available.\n+     */\n+    public abstract List<SourceRecord> doPoll() throws InterruptedException;\n+\n     @Override\n     public void commitRecord(SourceRecord record) throws InterruptedException {\n         Map<String, ?> currentOffset = record.sourceOffset();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU0MzEyOQ=="}, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU4Mzc0MA==", "bodyText": "@gunnarmorling It is also indirectly called from org.apache.kafka.connect.runtime.SourceTaskOffsetCommitter which runs in its own executor thread", "url": "https://github.com/debezium/debezium/pull/1304#discussion_r387583740", "createdAt": "2020-03-04T10:41:32Z", "author": {"login": "jpechane"}, "path": "debezium-core/src/main/java/io/debezium/connector/common/BaseSourceTask.java", "diffHunk": "@@ -86,6 +90,23 @@ public final void start(Map<String, String> props) {\n      */\n     protected abstract ChangeEventSourceCoordinator start(Configuration config);\n \n+    @Override\n+    public final List<SourceRecord> poll() throws InterruptedException {\n+        try {\n+            return doPoll();\n+        }\n+        catch (RetriableException e) {\n+            stop();\n+            start(config);\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * Returns the next batch of source records, if any are available.\n+     */\n+    public abstract List<SourceRecord> doPoll() throws InterruptedException;\n+\n     @Override\n     public void commitRecord(SourceRecord record) throws InterruptedException {\n         Map<String, ?> currentOffset = record.sourceOffset();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU0MzEyOQ=="}, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzNjAxMw==", "bodyText": "Changed to use a reentrant read write lock to ensure exclusivity of critical sections now:\n\nstart / stop / commit are all exclusive\npoll obtains a readlock to check whether we already restarted after a retry", "url": "https://github.com/debezium/debezium/pull/1304#discussion_r388236013", "createdAt": "2020-03-05T11:30:00Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/connector/common/BaseSourceTask.java", "diffHunk": "@@ -86,6 +90,23 @@ public final void start(Map<String, String> props) {\n      */\n     protected abstract ChangeEventSourceCoordinator start(Configuration config);\n \n+    @Override\n+    public final List<SourceRecord> poll() throws InterruptedException {\n+        try {\n+            return doPoll();\n+        }\n+        catch (RetriableException e) {\n+            stop();\n+            start(config);\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * Returns the next batch of source records, if any are available.\n+     */\n+    public abstract List<SourceRecord> doPoll() throws InterruptedException;\n+\n     @Override\n     public void commitRecord(SourceRecord record) throws InterruptedException {\n         Map<String, ?> currentOffset = record.sourceOffset();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU0MzEyOQ=="}, "originalCommit": null, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDk3NzU0OnYy", "diffSide": "RIGHT", "path": "debezium-core/src/main/java/io/debezium/connector/common/BaseSourceTask.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwOTo0NTozNVrOFxmTHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMToyODo1NVrOFyQA1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU1MjAyOA==", "bodyText": "Is this a robust solution? Let's suppose a temorary spike in postgres dropping the connectio. In this case the reconnect may fail (and I'd expect it to fail) and then we are back in the square one.", "url": "https://github.com/debezium/debezium/pull/1304#discussion_r387552028", "createdAt": "2020-03-04T09:45:35Z", "author": {"login": "jpechane"}, "path": "debezium-core/src/main/java/io/debezium/connector/common/BaseSourceTask.java", "diffHunk": "@@ -86,6 +90,23 @@ public final void start(Map<String, String> props) {\n      */\n     protected abstract ChangeEventSourceCoordinator start(Configuration config);\n \n+    @Override\n+    public final List<SourceRecord> poll() throws InterruptedException {\n+        try {\n+            return doPoll();\n+        }\n+        catch (RetriableException e) {\n+            stop();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU4MTU5NQ==", "bodyText": "Kafka Connect keeps retrying (for a configurable number of times, with back-off), so I'd expect it to work. At some point when connecting succeeds after retrying, things will be back to working state. What scenario are you envisioning specifically?", "url": "https://github.com/debezium/debezium/pull/1304#discussion_r387581595", "createdAt": "2020-03-04T10:37:50Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/connector/common/BaseSourceTask.java", "diffHunk": "@@ -86,6 +90,23 @@ public final void start(Map<String, String> props) {\n      */\n     protected abstract ChangeEventSourceCoordinator start(Configuration config);\n \n+    @Override\n+    public final List<SourceRecord> poll() throws InterruptedException {\n+        try {\n+            return doPoll();\n+        }\n+        catch (RetriableException e) {\n+            stop();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU1MjAyOA=="}, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU4NzAzOQ==", "bodyText": "@gunnarmorling Are you really sure that for tasks this is configurable with number and backoff? To me the connect code looks like - if the exception is RetriableException then retry indefinitely and as fast as possible - see org.apache.kafka.connect.runtime.WorkerSourceTask.poll().\nAlso do not forget then when eithr stop or start genertaes the eception it might be non-retryeable. As in case of spike the first excepttion can be Borken Pipe and the attempt to re-establish connection will be for example SocketTimeoutException.", "url": "https://github.com/debezium/debezium/pull/1304#discussion_r387587039", "createdAt": "2020-03-04T10:47:47Z", "author": {"login": "jpechane"}, "path": "debezium-core/src/main/java/io/debezium/connector/common/BaseSourceTask.java", "diffHunk": "@@ -86,6 +90,23 @@ public final void start(Map<String, String> props) {\n      */\n     protected abstract ChangeEventSourceCoordinator start(Configuration config);\n \n+    @Override\n+    public final List<SourceRecord> poll() throws InterruptedException {\n+        try {\n+            return doPoll();\n+        }\n+        catch (RetriableException e) {\n+            stop();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU1MjAyOA=="}, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0MDcwMg==", "bodyText": "I had been looking at this: https://cwiki.apache.org/confluence/display/KAFKA/KIP-298%3A+Error+Handling+in+Connect\nIt discusses two options:\n\nerrors.retry.timeout\nerrors.retry.delay.max.ms\n\nBut indeed it seems they're not applied to retrying the polling loop, but only for conversion and sending errors :(\nSo it seems the retry \"feature\" of KC is pretty much useless four our purposes.", "url": "https://github.com/debezium/debezium/pull/1304#discussion_r388140702", "createdAt": "2020-03-05T08:29:41Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/connector/common/BaseSourceTask.java", "diffHunk": "@@ -86,6 +90,23 @@ public final void start(Map<String, String> props) {\n      */\n     protected abstract ChangeEventSourceCoordinator start(Configuration config);\n \n+    @Override\n+    public final List<SourceRecord> poll() throws InterruptedException {\n+        try {\n+            return doPoll();\n+        }\n+        catch (RetriableException e) {\n+            stop();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU1MjAyOA=="}, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzNTQ3OA==", "bodyText": "Ok, backoff implemented internally now via ElapsedTimeStrategy (still need to make the values configurable).", "url": "https://github.com/debezium/debezium/pull/1304#discussion_r388235478", "createdAt": "2020-03-05T11:28:55Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/connector/common/BaseSourceTask.java", "diffHunk": "@@ -86,6 +90,23 @@ public final void start(Map<String, String> props) {\n      */\n     protected abstract ChangeEventSourceCoordinator start(Configuration config);\n \n+    @Override\n+    public final List<SourceRecord> poll() throws InterruptedException {\n+        try {\n+            return doPoll();\n+        }\n+        catch (RetriableException e) {\n+            stop();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU1MjAyOA=="}, "originalCommit": null, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTE3ODg0OnYy", "diffSide": "RIGHT", "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/PostgresErrorHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMDo0MjozM1rOFxoRCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMToxOTo0NFrOFyPwAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU4NDI2NA==", "bodyText": "I think there are more exceptions that can be retriable.\nE.g. the exception mentioned in the comments on https://issues.redhat.com/browse/DBZ-1325 does not contain \"Broken pipe\" as cause.", "url": "https://github.com/debezium/debezium/pull/1304#discussion_r387584264", "createdAt": "2020-03-04T10:42:33Z", "author": {"login": "WouterBancken"}, "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/PostgresErrorHandler.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.connector.postgresql;\n+\n+import java.net.SocketException;\n+\n+import io.debezium.connector.base.ChangeEventQueue;\n+import io.debezium.pipeline.ErrorHandler;\n+import io.debezium.util.Throwables;\n+\n+/**\n+ * Error handler for Postgres.\n+ *\n+ * @author Gunnar Morling\n+ */\n+public class PostgresErrorHandler extends ErrorHandler {\n+\n+    public PostgresErrorHandler(String logicalName, ChangeEventQueue<?> queue, Runnable onThrowable) {\n+        super(PostgresConnector.class, logicalName, queue, onThrowable);\n+    }\n+\n+    @Override\n+    protected boolean isRetriable(Throwable throwable) {\n+        Throwable rootCause = Throwables.getRootCause(throwable);\n+\n+        if (rootCause instanceof SocketException && rootCause.getMessage().contains(\"Broken pipe\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU4NDcyMg==", "bodyText": "Yes, good point. I'll add this one. I'd like to stay on the conservative end initially (we always can expand), but this one should be there.", "url": "https://github.com/debezium/debezium/pull/1304#discussion_r387584722", "createdAt": "2020-03-04T10:43:26Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/PostgresErrorHandler.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.connector.postgresql;\n+\n+import java.net.SocketException;\n+\n+import io.debezium.connector.base.ChangeEventQueue;\n+import io.debezium.pipeline.ErrorHandler;\n+import io.debezium.util.Throwables;\n+\n+/**\n+ * Error handler for Postgres.\n+ *\n+ * @author Gunnar Morling\n+ */\n+public class PostgresErrorHandler extends ErrorHandler {\n+\n+    public PostgresErrorHandler(String logicalName, ChangeEventQueue<?> queue, Runnable onThrowable) {\n+        super(PostgresConnector.class, logicalName, queue, onThrowable);\n+    }\n+\n+    @Override\n+    protected boolean isRetriable(Throwable throwable) {\n+        Throwable rootCause = Throwables.getRootCause(throwable);\n+\n+        if (rootCause instanceof SocketException && rootCause.getMessage().contains(\"Broken pipe\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU4NDI2NA=="}, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU4ODY2NQ==", "bodyText": "@gunnarmorling Maybe going to the root cause is too specific?\nCaused by: org.postgresql.util.PSQLException: Database connection failed when writing to copy looks like a pretty safe default", "url": "https://github.com/debezium/debezium/pull/1304#discussion_r387588665", "createdAt": "2020-03-04T10:50:52Z", "author": {"login": "jpechane"}, "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/PostgresErrorHandler.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.connector.postgresql;\n+\n+import java.net.SocketException;\n+\n+import io.debezium.connector.base.ChangeEventQueue;\n+import io.debezium.pipeline.ErrorHandler;\n+import io.debezium.util.Throwables;\n+\n+/**\n+ * Error handler for Postgres.\n+ *\n+ * @author Gunnar Morling\n+ */\n+public class PostgresErrorHandler extends ErrorHandler {\n+\n+    public PostgresErrorHandler(String logicalName, ChangeEventQueue<?> queue, Runnable onThrowable) {\n+        super(PostgresConnector.class, logicalName, queue, onThrowable);\n+    }\n+\n+    @Override\n+    protected boolean isRetriable(Throwable throwable) {\n+        Throwable rootCause = Throwables.getRootCause(throwable);\n+\n+        if (rootCause instanceof SocketException && rootCause.getMessage().contains(\"Broken pipe\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU4NDI2NA=="}, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzMTE3MA==", "bodyText": "Reworked as per the suggestion.", "url": "https://github.com/debezium/debezium/pull/1304#discussion_r388231170", "createdAt": "2020-03-05T11:19:44Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/PostgresErrorHandler.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.connector.postgresql;\n+\n+import java.net.SocketException;\n+\n+import io.debezium.connector.base.ChangeEventQueue;\n+import io.debezium.pipeline.ErrorHandler;\n+import io.debezium.util.Throwables;\n+\n+/**\n+ * Error handler for Postgres.\n+ *\n+ * @author Gunnar Morling\n+ */\n+public class PostgresErrorHandler extends ErrorHandler {\n+\n+    public PostgresErrorHandler(String logicalName, ChangeEventQueue<?> queue, Runnable onThrowable) {\n+        super(PostgresConnector.class, logicalName, queue, onThrowable);\n+    }\n+\n+    @Override\n+    protected boolean isRetriable(Throwable throwable) {\n+        Throwable rootCause = Throwables.getRootCause(throwable);\n+\n+        if (rootCause instanceof SocketException && rootCause.getMessage().contains(\"Broken pipe\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU4NDI2NA=="}, "originalCommit": null, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjk2MTU1OnYy", "diffSide": "RIGHT", "path": "debezium-core/src/main/java/io/debezium/connector/base/ChangeEventQueue.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxOTo0OTo1MFrOFzXD1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDoyMzoxNVrOFzquFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM5OTUxMA==", "bodyText": "Boolean param usually is a code smell. In my PR I kept handling logic in error handler - in here it looks like it leaked out if it in here.", "url": "https://github.com/debezium/debezium/pull/1304#discussion_r389399510", "createdAt": "2020-03-08T19:49:50Z", "author": {"login": "tomek0021"}, "path": "debezium-core/src/main/java/io/debezium/connector/base/ChangeEventQueue.java", "diffHunk": "@@ -162,13 +163,18 @@ public void enqueue(T record) throws InterruptedException {\n         }\n     }\n \n-    public void producerFailure(final Throwable producerFailure) {\n-        this.producerFailure = producerFailure;\n+    public void producerFailure(final Throwable producerFailure, boolean retriable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcyMTYyMg==", "bodyText": "That's a great point. Moved this logic to the error handler class.", "url": "https://github.com/debezium/debezium/pull/1304#discussion_r389721622", "createdAt": "2020-03-09T14:23:15Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/connector/base/ChangeEventQueue.java", "diffHunk": "@@ -162,13 +163,18 @@ public void enqueue(T record) throws InterruptedException {\n         }\n     }\n \n-    public void producerFailure(final Throwable producerFailure) {\n-        this.producerFailure = producerFailure;\n+    public void producerFailure(final Throwable producerFailure, boolean retriable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM5OTUxMA=="}, "originalCommit": null, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDU4NzUyOnYy", "diffSide": "RIGHT", "path": "debezium-core/src/main/java/io/debezium/connector/base/ChangeEventQueue.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMjo1ODoxOFrOFzl7RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMzo1MTo0M1rOFzoysw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY0MzA3Ng==", "bodyText": "Should not e start using DebeziumException?", "url": "https://github.com/debezium/debezium/pull/1304#discussion_r389643076", "createdAt": "2020-03-09T12:58:18Z", "author": {"login": "jpechane"}, "path": "debezium-core/src/main/java/io/debezium/connector/base/ChangeEventQueue.java", "diffHunk": "@@ -62,7 +63,7 @@\n     private final Metronome metronome;\n     private final Supplier<PreviousContext> loggingContextSupplier;\n \n-    private volatile Throwable producerFailure;\n+    private volatile ConnectException producerFailure;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY5MDAzNQ==", "bodyText": "We'd still have to throw it as KC's RetriableException in the end, so I don't think there's much point in changing this atm.", "url": "https://github.com/debezium/debezium/pull/1304#discussion_r389690035", "createdAt": "2020-03-09T13:51:43Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/connector/base/ChangeEventQueue.java", "diffHunk": "@@ -62,7 +63,7 @@\n     private final Metronome metronome;\n     private final Supplier<PreviousContext> loggingContextSupplier;\n \n-    private volatile Throwable producerFailure;\n+    private volatile ConnectException producerFailure;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY0MzA3Ng=="}, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTIyODgyOnYy", "diffSide": "RIGHT", "path": "debezium-core/src/main/java/io/debezium/connector/common/BaseSourceTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNTowMDoxN1rOFzsSew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNTowOToyMFrOFzsqdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0NzMyMw==", "bodyText": "Does this mean that during stopping a Connect Worker without stopping the connector first will mean that all queued records will not get flushed and will be retried when the connector restarts?", "url": "https://github.com/debezium/debezium/pull/1304#discussion_r389747323", "createdAt": "2020-03-09T15:00:17Z", "author": {"login": "hashhar"}, "path": "debezium-core/src/main/java/io/debezium/connector/common/BaseSourceTask.java", "diffHunk": "@@ -107,8 +139,20 @@ public void commitRecord(SourceRecord record) throws InterruptedException {\n \n     @Override\n     public void commit() throws InterruptedException {\n-        if (coordinator != null && lastOffset != null) {\n-            coordinator.commitOffset(lastOffset);\n+        boolean locked = stateLock.tryLock();\n+\n+        if (locked) {\n+            try {\n+                if (coordinator != null && lastOffset != null) {\n+                    coordinator.commitOffset(lastOffset);\n+                }\n+            }\n+            finally {\n+                stateLock.unlock();\n+            }\n+        }\n+        else {\n+            LOGGER.warn(\"Couldn't commit processed log positions with the source database due to a concurrent connector shutdown or restart\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc1MzQ2Mg==", "bodyText": "Nevermind, got it. You reload the offsets from the in-memory state at restart to avoid repeated flushes.", "url": "https://github.com/debezium/debezium/pull/1304#discussion_r389753462", "createdAt": "2020-03-09T15:09:20Z", "author": {"login": "hashhar"}, "path": "debezium-core/src/main/java/io/debezium/connector/common/BaseSourceTask.java", "diffHunk": "@@ -107,8 +139,20 @@ public void commitRecord(SourceRecord record) throws InterruptedException {\n \n     @Override\n     public void commit() throws InterruptedException {\n-        if (coordinator != null && lastOffset != null) {\n-            coordinator.commitOffset(lastOffset);\n+        boolean locked = stateLock.tryLock();\n+\n+        if (locked) {\n+            try {\n+                if (coordinator != null && lastOffset != null) {\n+                    coordinator.commitOffset(lastOffset);\n+                }\n+            }\n+            finally {\n+                stateLock.unlock();\n+            }\n+        }\n+        else {\n+            LOGGER.warn(\"Couldn't commit processed log positions with the source database due to a concurrent connector shutdown or restart\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0NzMyMw=="}, "originalCommit": null, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTI0MzMyOnYy", "diffSide": "RIGHT", "path": "debezium-core/src/main/java/io/debezium/connector/common/BaseSourceTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNTowMzozOVrOFzsbig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjozODo0MFrOF0XWPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0OTY0Mg==", "bodyText": "Am I missing something here since the doPoll() method below throws InterruptedException but not RetriableException?", "url": "https://github.com/debezium/debezium/pull/1304#discussion_r389749642", "createdAt": "2020-03-09T15:03:39Z", "author": {"login": "hashhar"}, "path": "debezium-core/src/main/java/io/debezium/connector/common/BaseSourceTask.java", "diffHunk": "@@ -102,16 +113,58 @@ public final void start(Map<String, String> props) {\n \n     @Override\n     public final List<SourceRecord> poll() throws InterruptedException {\n-        return doPoll();\n+        boolean started = startIfNeededAndPossible();\n+\n+        // in backoff period after a retriable exception\n+        if (!started) {\n+            return Collections.emptyList();\n+        }\n+\n+        try {\n+            return doPoll();\n+        }\n+        catch (RetriableException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1Mjc5Ng==", "bodyText": "RetriableException is a runtime exception, so it doesn't have to be declared explicitly in method sigs.", "url": "https://github.com/debezium/debezium/pull/1304#discussion_r390452796", "createdAt": "2020-03-10T16:38:40Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/connector/common/BaseSourceTask.java", "diffHunk": "@@ -102,16 +113,58 @@ public final void start(Map<String, String> props) {\n \n     @Override\n     public final List<SourceRecord> poll() throws InterruptedException {\n-        return doPoll();\n+        boolean started = startIfNeededAndPossible();\n+\n+        // in backoff period after a retriable exception\n+        if (!started) {\n+            return Collections.emptyList();\n+        }\n+\n+        try {\n+            return doPoll();\n+        }\n+        catch (RetriableException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0OTY0Mg=="}, "originalCommit": null, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4435, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}