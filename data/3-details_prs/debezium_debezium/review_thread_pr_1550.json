{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3MDA0MDgw", "number": 1550, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNzozMDo1NVrOECCNgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNzozMDo1NVrOECCNgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTY4ODMzOnYy", "diffSide": "RIGHT", "path": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/MySqlAntlrDdlParserTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNzozMDo1NVrOGePfCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNzozMDo1NVrOGePfCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2NDE2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void shouldUpdateSchemaForChangeDefaultValue() {\n          \n          \n            \n                public void shouldUpdateSchemaForChangedDefaultValue() {", "url": "https://github.com/debezium/debezium/pull/1550#discussion_r434364168", "createdAt": "2020-06-03T07:30:55Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/MySqlAntlrDdlParserTest.java", "diffHunk": "@@ -77,6 +77,56 @@ public void shouldParseCharacterDatatype() {\n         assertThat(table.columnWithName(\"val2\").length()).isEqualTo(5);\n     }\n \n+    @Test\n+    @FixFor(\"DBZ-2140\")\n+    public void shouldUpdateSchemaForRemovedDefaultValue() {\n+        String ddl = \"CREATE TABLE mytable (id INT PRIMARY KEY, val1 INT);\"\n+                + \"ALTER TABLE mytable ADD COLUMN last_val INT DEFAULT 5;\";\n+        parser.parse(ddl, tables);\n+        assertThat(((MySqlAntlrDdlParser) parser).getParsingExceptionsFromWalker().size()).isEqualTo(0);\n+        assertThat(tables.size()).isEqualTo(1);\n+\n+        parser.parse(\"ALTER TABLE mytable ALTER COLUMN last_val DROP DEFAULT;\", tables);\n+        assertThat(((MySqlAntlrDdlParser) parser).getParsingExceptionsFromWalker().size()).isEqualTo(0);\n+        assertThat(tables.size()).isEqualTo(1);\n+\n+        Table table = tables.forTable(null, null, \"mytable\");\n+        assertThat(table.columns()).hasSize(3);\n+        assertThat(table.columnWithName(\"id\")).isNotNull();\n+        assertThat(table.columnWithName(\"val1\")).isNotNull();\n+        assertThat(table.columnWithName(\"last_val\")).isNotNull();\n+        assertThat(table.columnWithName(\"last_val\").defaultValue()).isNull();\n+\n+        parser.parse(\"ALTER TABLE mytable CHANGE COLUMN last_val last_val INT NOT NULL;\", tables);\n+        assertThat(((MySqlAntlrDdlParser) parser).getParsingExceptionsFromWalker().size()).isEqualTo(0);\n+        assertThat(tables.size()).isEqualTo(1);\n+\n+        table = tables.forTable(null, null, \"mytable\");\n+        assertThat(table.columnWithName(\"last_val\")).isNotNull();\n+        assertThat(table.columnWithName(\"last_val\").hasDefaultValue()).isFalse();\n+    }\n+\n+    @Test\n+    @FixFor(\"DBZ-2061\")\n+    public void shouldUpdateSchemaForChangeDefaultValue() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e726d5223d0d89d1287198b8a8452c9ceef0067d"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4349, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}