{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyMjczNjgz", "number": 1920, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwOTo1OTo1MlrOFC1jGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMFQwOTo0NTo0MFrOFkCSJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NTE4ODA4OnYy", "diffSide": "RIGHT", "path": ".github/workflows/testing-workflow.yml", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwOTo1OTo1MlrOICMOWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNjowMDoxM1rOIIUMVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE2ODM0Ng==", "bodyText": "I added both dependencies as it looked like sometimes the package for debezium-assembly-descriptors was missing and the build terminated. And later it looked like a cached version of debezium-core (without the applied changes) was used and the changes were not active and tests were failing. I had no time to dig deeper into that but maybe @jpechane have a better idea. It might be maven cache / cache-key related.", "url": "https://github.com/debezium/debezium/pull/1920#discussion_r539168346", "createdAt": "2020-12-09T09:59:52Z", "author": {"login": "rk3rn3r"}, "path": ".github/workflows/testing-workflow.yml", "diffHunk": "@@ -41,4 +41,4 @@ jobs:\n           restore-keys: |\n             ${{ runner.os }}-maven-\n       - name: Check changes in Debezium Testing\n-        run: mvn clean install -B -pl debezium-testing -am -amd -Passembly -Dcheckstyle.skip=true -Dformat.skip=true -Drevapi.skip -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn\n+        run: mvn clean install -B -pl debezium-assembly-descriptors,debezium-core,debezium-testing -am -amd -Passembly -Dcheckstyle.skip=true -Dformat.skip=true -Drevapi.skip -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTMwMzU2Mw==", "bodyText": "That was exactly the problem, it has not build/published the core module (and it is hard to guess why) and deps and either were taken from Internet or from cache with result that the code was not aligned.", "url": "https://github.com/debezium/debezium/pull/1920#discussion_r539303563", "createdAt": "2020-12-09T13:26:07Z", "author": {"login": "jpechane"}, "path": ".github/workflows/testing-workflow.yml", "diffHunk": "@@ -41,4 +41,4 @@ jobs:\n           restore-keys: |\n             ${{ runner.os }}-maven-\n       - name: Check changes in Debezium Testing\n-        run: mvn clean install -B -pl debezium-testing -am -amd -Passembly -Dcheckstyle.skip=true -Dformat.skip=true -Drevapi.skip -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn\n+        run: mvn clean install -B -pl debezium-assembly-descriptors,debezium-core,debezium-testing -am -amd -Passembly -Dcheckstyle.skip=true -Dformat.skip=true -Drevapi.skip -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE2ODM0Ng=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTMyMjU2Ng==", "bodyText": "Don't you think we need to change the cache key then in order to not fetch a cache that has assets for, for example,  debezium-core and use outdated code?\n(I don't think there are -SNAPSHOT packages on the Internet ;) )", "url": "https://github.com/debezium/debezium/pull/1920#discussion_r539322566", "createdAt": "2020-12-09T13:52:05Z", "author": {"login": "rk3rn3r"}, "path": ".github/workflows/testing-workflow.yml", "diffHunk": "@@ -41,4 +41,4 @@ jobs:\n           restore-keys: |\n             ${{ runner.os }}-maven-\n       - name: Check changes in Debezium Testing\n-        run: mvn clean install -B -pl debezium-testing -am -amd -Passembly -Dcheckstyle.skip=true -Dformat.skip=true -Drevapi.skip -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn\n+        run: mvn clean install -B -pl debezium-assembly-descriptors,debezium-core,debezium-testing -am -amd -Passembly -Dcheckstyle.skip=true -Dformat.skip=true -Drevapi.skip -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE2ODM0Ng=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTMyNjIwNg==", "bodyText": "Well, you are right, we can exclude io/debezium dir from caching. There was originally plan that there will be a single job that will build the artifacts and then the connector jobs will not do the build but testing but it seems such implementation is not necessary with selective connector building.", "url": "https://github.com/debezium/debezium/pull/1920#discussion_r539326206", "createdAt": "2020-12-09T13:56:50Z", "author": {"login": "jpechane"}, "path": ".github/workflows/testing-workflow.yml", "diffHunk": "@@ -41,4 +41,4 @@ jobs:\n           restore-keys: |\n             ${{ runner.os }}-maven-\n       - name: Check changes in Debezium Testing\n-        run: mvn clean install -B -pl debezium-testing -am -amd -Passembly -Dcheckstyle.skip=true -Dformat.skip=true -Drevapi.skip -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn\n+        run: mvn clean install -B -pl debezium-assembly-descriptors,debezium-core,debezium-testing -am -amd -Passembly -Dcheckstyle.skip=true -Dformat.skip=true -Drevapi.skip -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE2ODM0Ng=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ3MDk4Nw==", "bodyText": "Guys, can you tell me what is the problem? :))", "url": "https://github.com/debezium/debezium/pull/1920#discussion_r545470987", "createdAt": "2020-12-17T23:25:00Z", "author": {"login": "blcksrx"}, "path": ".github/workflows/testing-workflow.yml", "diffHunk": "@@ -41,4 +41,4 @@ jobs:\n           restore-keys: |\n             ${{ runner.os }}-maven-\n       - name: Check changes in Debezium Testing\n-        run: mvn clean install -B -pl debezium-testing -am -amd -Passembly -Dcheckstyle.skip=true -Dformat.skip=true -Drevapi.skip -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn\n+        run: mvn clean install -B -pl debezium-assembly-descriptors,debezium-core,debezium-testing -am -amd -Passembly -Dcheckstyle.skip=true -Dformat.skip=true -Drevapi.skip -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE2ODM0Ng=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU5MDM1OA==", "bodyText": "Sorry, the discussion is a litlle bit spread #2018 (comment) :-)", "url": "https://github.com/debezium/debezium/pull/1920#discussion_r545590358", "createdAt": "2020-12-18T06:00:13Z", "author": {"login": "jpechane"}, "path": ".github/workflows/testing-workflow.yml", "diffHunk": "@@ -41,4 +41,4 @@ jobs:\n           restore-keys: |\n             ${{ runner.os }}-maven-\n       - name: Check changes in Debezium Testing\n-        run: mvn clean install -B -pl debezium-testing -am -amd -Passembly -Dcheckstyle.skip=true -Dformat.skip=true -Drevapi.skip -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn\n+        run: mvn clean install -B -pl debezium-assembly-descriptors,debezium-core,debezium-testing -am -amd -Passembly -Dcheckstyle.skip=true -Dformat.skip=true -Drevapi.skip -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE2ODM0Ng=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYzODA0NDU3OnYy", "diffSide": "RIGHT", "path": "debezium-connector-sqlserver/src/test/java/io/debezium/connector/sqlserver/SqlServerConnectorIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQxNTo0MToxM1rOImMe6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQxNTo0MToxM1rOImMe6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjkyMTMyMQ==", "bodyText": "Is something missing in this test?", "url": "https://github.com/debezium/debezium/pull/1920#discussion_r576921321", "createdAt": "2021-02-16T15:41:13Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-sqlserver/src/test/java/io/debezium/connector/sqlserver/SqlServerConnectorIT.java", "diffHunk": "@@ -2452,6 +2452,22 @@ public void testMaxLsnSelectStatementWithFalse() throws Exception {\n         stopConnector();\n     }\n \n+    @Test\n+    @FixFor(\"DBZ-2699\")\n+    public void shouldEmitNoEventsForSkippedUpdateAndDeleteOperations() throws Exception {\n+        final Configuration config = TestHelper.defaultConfig()\n+                .with(SqlServerConnectorConfig.SNAPSHOT_MODE, SnapshotMode.INITIAL)\n+                .with(SqlServerConnectorConfig.SKIPPED_OPERATIONS, \"u,d\")\n+                .build();\n+\n+        start(SqlServerConnector.class, config);\n+        assertConnectorIsRunning();\n+        // Wait for snapshot completion\n+        TestHelper.waitForSnapshotToBeCompleted();\n+        consumeRecordsByTopic(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzczMzE5ODY4OnYy", "diffSide": "LEFT", "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresConnectorIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMFQwOTozMDoxMVrOIz4Hpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMFQwOTozNjozOVrOIz4hFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTI2Nzc1MQ==", "bodyText": "How is this test removal related?", "url": "https://github.com/debezium/debezium/pull/1920#discussion_r591267751", "createdAt": "2021-03-10T09:30:11Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresConnectorIT.java", "diffHunk": "@@ -2467,26 +2467,6 @@ public void shouldProduceMessagesOnlyForConfiguredTables() throws Exception {\n     }\n \n     @Test\n-    @FixFor(\"DBZ-2885\")\n-    @SkipWhenDecoderPluginNameIsNot(value = SkipWhenDecoderPluginNameIsNot.DecoderPluginName.PGOUTPUT, reason = \"Publication configuration only valid for PGOUTPUT decoder\")\n-    public void shouldThrowWhenTableFiltersIsEmpty() throws Exception {\n-        final LogInterceptor logInterceptor = new LogInterceptor();\n-\n-        TestHelper.dropAllSchemas();\n-        TestHelper.dropPublication(\"cdc\");\n-        TestHelper.executeDDL(\"postgres_create_tables.ddl\");\n-        TestHelper.execute(SETUP_TABLES_STMT);\n-\n-        Configuration.Builder configBuilder = TestHelper.defaultConfig()\n-                .with(PostgresConnectorConfig.PUBLICATION_NAME, \"cdc\")\n-                .with(PostgresConnectorConfig.PUBLICATION_AUTOCREATE_MODE, PostgresConnectorConfig.AutoCreateMode.FILTERED.getValue())\n-                .with(PostgresConnectorConfig.TABLE_INCLUDE_LIST, \"nonexistent.table\");\n-\n-        start(PostgresConnector.class, configBuilder.build());\n-        assertConnectorNotRunning();\n-        assertTrue(logInterceptor.containsStacktraceElement(\"No table filters found for filtered publication cdc\"));\n-    }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTI3NDI2Mg==", "bodyText": "I think it's related to some merge conflicts that I have. I will fix it.", "url": "https://github.com/debezium/debezium/pull/1920#discussion_r591274262", "createdAt": "2021-03-10T09:36:39Z", "author": {"login": "blcksrx"}, "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresConnectorIT.java", "diffHunk": "@@ -2467,26 +2467,6 @@ public void shouldProduceMessagesOnlyForConfiguredTables() throws Exception {\n     }\n \n     @Test\n-    @FixFor(\"DBZ-2885\")\n-    @SkipWhenDecoderPluginNameIsNot(value = SkipWhenDecoderPluginNameIsNot.DecoderPluginName.PGOUTPUT, reason = \"Publication configuration only valid for PGOUTPUT decoder\")\n-    public void shouldThrowWhenTableFiltersIsEmpty() throws Exception {\n-        final LogInterceptor logInterceptor = new LogInterceptor();\n-\n-        TestHelper.dropAllSchemas();\n-        TestHelper.dropPublication(\"cdc\");\n-        TestHelper.executeDDL(\"postgres_create_tables.ddl\");\n-        TestHelper.execute(SETUP_TABLES_STMT);\n-\n-        Configuration.Builder configBuilder = TestHelper.defaultConfig()\n-                .with(PostgresConnectorConfig.PUBLICATION_NAME, \"cdc\")\n-                .with(PostgresConnectorConfig.PUBLICATION_AUTOCREATE_MODE, PostgresConnectorConfig.AutoCreateMode.FILTERED.getValue())\n-                .with(PostgresConnectorConfig.TABLE_INCLUDE_LIST, \"nonexistent.table\");\n-\n-        start(PostgresConnector.class, configBuilder.build());\n-        assertConnectorNotRunning();\n-        assertTrue(logInterceptor.containsStacktraceElement(\"No table filters found for filtered publication cdc\"));\n-    }\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTI2Nzc1MQ=="}, "originalCommit": null, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzczMzIyNjY4OnYy", "diffSide": "RIGHT", "path": "debezium-connector-sqlserver/src/test/java/io/debezium/connector/sqlserver/SqlServerConnectorIT.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMFQwOTozNDozN1rOIz4Ygw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMFQxMDo0NzowN1rOIz878A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTI3MjA2Nw==", "bodyText": "Would it be possible to add a test (that then will be executed for all connectors \"auto-magically\") in debezium-core? No is a valid answer, but it would be nice if that would be somehow possible.\nI am not sure if it's possible to have a test case there or it always needs coupling to a connector implementation?", "url": "https://github.com/debezium/debezium/pull/1920#discussion_r591272067", "createdAt": "2021-03-10T09:34:37Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-sqlserver/src/test/java/io/debezium/connector/sqlserver/SqlServerConnectorIT.java", "diffHunk": "@@ -2452,6 +2452,42 @@ public void testMaxLsnSelectStatementWithFalse() throws Exception {\n         stopConnector();\n     }\n \n+    @Test\n+    @FixFor(\"DBZ-2699\")\n+    public void shouldEmitNoEventsForSkippedUpdateAndDeleteOperations() throws Exception {\n+        final Configuration config = TestHelper.defaultConfig()\n+                .with(SqlServerConnectorConfig.SNAPSHOT_MODE, SnapshotMode.INITIAL)\n+                .with(SqlServerConnectorConfig.SKIPPED_OPERATIONS, \"u,d\")\n+                .build();\n+\n+        start(SqlServerConnector.class, config);\n+        assertConnectorIsRunning();\n+        // Wait for snapshot completion\n+        TestHelper.waitForSnapshotToBeCompleted();\n+        consumeRecordsByTopic(1);\n+\n+        connection.execute(\"INSERT INTO tablea VALUES(201, 'insert201')\");\n+        connection.execute(\"UPDATE tablea SET cola='insert201-update' WHERE id=201\");\n+        connection.execute(\"INSERT INTO tablea VALUES(202, 'insert202')\");\n+        connection.execute(\"DELETE FROM tablea WHERE id=202\");\n+        connection.execute(\"INSERT INTO tablea VALUES(203, 'insert203')\");\n+\n+        final SourceRecords records = consumeRecordsByTopic(3);\n+        final List<SourceRecord> tableA = records.recordsForTopic(\"server1.dbo.tablea\");\n+        Assertions.assertThat(tableA).hasSize(3);\n+        tableA.forEach((SourceRecord record) -> {\n+            Struct value = (Struct) record.value();\n+            assertThat(value.get(\"op\")).isEqualTo(Envelope.Operation.CREATE.code());\n+            assertThat(value.get(\"op\")).isNotEqualTo(Envelope.Operation.UPDATE.code());\n+            assertThat(value.get(\"op\")).isNotEqualTo(Envelope.Operation.DELETE.code());\n+        });\n+\n+        assertInsert(tableA.get(0), \"id\", 201);\n+        assertInsert(tableA.get(1), \"id\", 202);\n+        assertInsert(tableA.get(2), \"id\", 203);\n+\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTI3NTI2NA==", "bodyText": "I will think about it to find a proper way", "url": "https://github.com/debezium/debezium/pull/1920#discussion_r591275264", "createdAt": "2021-03-10T09:37:29Z", "author": {"login": "blcksrx"}, "path": "debezium-connector-sqlserver/src/test/java/io/debezium/connector/sqlserver/SqlServerConnectorIT.java", "diffHunk": "@@ -2452,6 +2452,42 @@ public void testMaxLsnSelectStatementWithFalse() throws Exception {\n         stopConnector();\n     }\n \n+    @Test\n+    @FixFor(\"DBZ-2699\")\n+    public void shouldEmitNoEventsForSkippedUpdateAndDeleteOperations() throws Exception {\n+        final Configuration config = TestHelper.defaultConfig()\n+                .with(SqlServerConnectorConfig.SNAPSHOT_MODE, SnapshotMode.INITIAL)\n+                .with(SqlServerConnectorConfig.SKIPPED_OPERATIONS, \"u,d\")\n+                .build();\n+\n+        start(SqlServerConnector.class, config);\n+        assertConnectorIsRunning();\n+        // Wait for snapshot completion\n+        TestHelper.waitForSnapshotToBeCompleted();\n+        consumeRecordsByTopic(1);\n+\n+        connection.execute(\"INSERT INTO tablea VALUES(201, 'insert201')\");\n+        connection.execute(\"UPDATE tablea SET cola='insert201-update' WHERE id=201\");\n+        connection.execute(\"INSERT INTO tablea VALUES(202, 'insert202')\");\n+        connection.execute(\"DELETE FROM tablea WHERE id=202\");\n+        connection.execute(\"INSERT INTO tablea VALUES(203, 'insert203')\");\n+\n+        final SourceRecords records = consumeRecordsByTopic(3);\n+        final List<SourceRecord> tableA = records.recordsForTopic(\"server1.dbo.tablea\");\n+        Assertions.assertThat(tableA).hasSize(3);\n+        tableA.forEach((SourceRecord record) -> {\n+            Struct value = (Struct) record.value();\n+            assertThat(value.get(\"op\")).isEqualTo(Envelope.Operation.CREATE.code());\n+            assertThat(value.get(\"op\")).isNotEqualTo(Envelope.Operation.UPDATE.code());\n+            assertThat(value.get(\"op\")).isNotEqualTo(Envelope.Operation.DELETE.code());\n+        });\n+\n+        assertInsert(tableA.get(0), \"id\", 201);\n+        assertInsert(tableA.get(1), \"id\", 202);\n+        assertInsert(tableA.get(2), \"id\", 203);\n+\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTI3MjA2Nw=="}, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTM0NjY3Mg==", "bodyText": "Don't waste endless time on it. But at least unit test/s would be great. I don't know if it's possible to come up with a functional test here at all. But great you take this final challenge!", "url": "https://github.com/debezium/debezium/pull/1920#discussion_r591346672", "createdAt": "2021-03-10T10:47:07Z", "author": {"login": "rk3rn3r"}, "path": "debezium-connector-sqlserver/src/test/java/io/debezium/connector/sqlserver/SqlServerConnectorIT.java", "diffHunk": "@@ -2452,6 +2452,42 @@ public void testMaxLsnSelectStatementWithFalse() throws Exception {\n         stopConnector();\n     }\n \n+    @Test\n+    @FixFor(\"DBZ-2699\")\n+    public void shouldEmitNoEventsForSkippedUpdateAndDeleteOperations() throws Exception {\n+        final Configuration config = TestHelper.defaultConfig()\n+                .with(SqlServerConnectorConfig.SNAPSHOT_MODE, SnapshotMode.INITIAL)\n+                .with(SqlServerConnectorConfig.SKIPPED_OPERATIONS, \"u,d\")\n+                .build();\n+\n+        start(SqlServerConnector.class, config);\n+        assertConnectorIsRunning();\n+        // Wait for snapshot completion\n+        TestHelper.waitForSnapshotToBeCompleted();\n+        consumeRecordsByTopic(1);\n+\n+        connection.execute(\"INSERT INTO tablea VALUES(201, 'insert201')\");\n+        connection.execute(\"UPDATE tablea SET cola='insert201-update' WHERE id=201\");\n+        connection.execute(\"INSERT INTO tablea VALUES(202, 'insert202')\");\n+        connection.execute(\"DELETE FROM tablea WHERE id=202\");\n+        connection.execute(\"INSERT INTO tablea VALUES(203, 'insert203')\");\n+\n+        final SourceRecords records = consumeRecordsByTopic(3);\n+        final List<SourceRecord> tableA = records.recordsForTopic(\"server1.dbo.tablea\");\n+        Assertions.assertThat(tableA).hasSize(3);\n+        tableA.forEach((SourceRecord record) -> {\n+            Struct value = (Struct) record.value();\n+            assertThat(value.get(\"op\")).isEqualTo(Envelope.Operation.CREATE.code());\n+            assertThat(value.get(\"op\")).isNotEqualTo(Envelope.Operation.UPDATE.code());\n+            assertThat(value.get(\"op\")).isNotEqualTo(Envelope.Operation.DELETE.code());\n+        });\n+\n+        assertInsert(tableA.get(0), \"id\", 201);\n+        assertInsert(tableA.get(1), \"id\", 202);\n+        assertInsert(tableA.get(2), \"id\", 203);\n+\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTI3MjA2Nw=="}, "originalCommit": null, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzczMzMwNDcwOnYy", "diffSide": "RIGHT", "path": "debezium-core/src/main/java/io/debezium/pipeline/EventDispatcher.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMFQwOTo0NTo0MFrOIz5GDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wMVQwOTo1MTozNlrOJBeTpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTI4MzcyNQ==", "bodyText": "@blcksrx Am I right you said we can solve filtering more performant with db internal tools for some databases (like SQL Server for example)?\n@jpechane you suggested a design that for such cases we can use the more performant solution of the datastore instead. what was your idea about we make this possible inside debezium? (like: how to deactivate this global behavior here in core in favor of the more performant implementation in a connector implementation?", "url": "https://github.com/debezium/debezium/pull/1920#discussion_r591283725", "createdAt": "2021-03-10T09:45:40Z", "author": {"login": "rk3rn3r"}, "path": "debezium-core/src/main/java/io/debezium/pipeline/EventDispatcher.java", "diffHunk": "@@ -205,9 +208,11 @@ public void changeRecord(DataCollectionSchema schema,\n                                              OffsetContext offset,\n                                              ConnectHeaders headers)\n                             throws InterruptedException {\n-                        transactionMonitor.dataEvent(dataCollectionId, offset, key, value);\n-                        eventListener.onEvent(dataCollectionId, offset, key, value);\n-                        streamingReceiver.changeRecord(schema, operation, key, value, offset, headers);\n+                        if (!skippedOperations.contains(operation)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTMzNDA4NQ==", "bodyText": "Yes, you are right @jpechane suggest first implement it on the core, so this feature will be available for all the connector. after that we can design it for each connector with a better performance.", "url": "https://github.com/debezium/debezium/pull/1920#discussion_r591334085", "createdAt": "2021-03-10T10:34:12Z", "author": {"login": "blcksrx"}, "path": "debezium-core/src/main/java/io/debezium/pipeline/EventDispatcher.java", "diffHunk": "@@ -205,9 +208,11 @@ public void changeRecord(DataCollectionSchema schema,\n                                              OffsetContext offset,\n                                              ConnectHeaders headers)\n                             throws InterruptedException {\n-                        transactionMonitor.dataEvent(dataCollectionId, offset, key, value);\n-                        eventListener.onEvent(dataCollectionId, offset, key, value);\n-                        streamingReceiver.changeRecord(schema, operation, key, value, offset, headers);\n+                        if (!skippedOperations.contains(operation)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTI4MzcyNQ=="}, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTM0NDc2Mg==", "bodyText": "I see!\n@jpechane do we need to do anything in this PR to address that flexibility now or do we do this as bigger refactoring with the first connector specific implementation?", "url": "https://github.com/debezium/debezium/pull/1920#discussion_r591344762", "createdAt": "2021-03-10T10:45:16Z", "author": {"login": "rk3rn3r"}, "path": "debezium-core/src/main/java/io/debezium/pipeline/EventDispatcher.java", "diffHunk": "@@ -205,9 +208,11 @@ public void changeRecord(DataCollectionSchema schema,\n                                              OffsetContext offset,\n                                              ConnectHeaders headers)\n                             throws InterruptedException {\n-                        transactionMonitor.dataEvent(dataCollectionId, offset, key, value);\n-                        eventListener.onEvent(dataCollectionId, offset, key, value);\n-                        streamingReceiver.changeRecord(schema, operation, key, value, offset, headers);\n+                        if (!skippedOperations.contains(operation)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTI4MzcyNQ=="}, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNDc4NTM2OA==", "bodyText": "@rk3rn3r Nothing specific needed right now. MySQL is already rewritten to use the new framework and IIRC the skipped ops are already implemente dthere so it might be a good starting point. @blcksrx Could you please raise a follow-up Jira for that?\n@blcksrx Also I've one more tip for micro-optimization.  There should be a boolean flag attribute neverSkip that is set at the start depending on whether the map is empty or not.\nThe condition would then look like\nif (neverSkip ||  !skippedOperations.contains(operation))\n\nThis would be more performant in case skipped ops are not set.", "url": "https://github.com/debezium/debezium/pull/1920#discussion_r604785368", "createdAt": "2021-03-31T10:36:34Z", "author": {"login": "jpechane"}, "path": "debezium-core/src/main/java/io/debezium/pipeline/EventDispatcher.java", "diffHunk": "@@ -205,9 +208,11 @@ public void changeRecord(DataCollectionSchema schema,\n                                              OffsetContext offset,\n                                              ConnectHeaders headers)\n                             throws InterruptedException {\n-                        transactionMonitor.dataEvent(dataCollectionId, offset, key, value);\n-                        eventListener.onEvent(dataCollectionId, offset, key, value);\n-                        streamingReceiver.changeRecord(schema, operation, key, value, offset, headers);\n+                        if (!skippedOperations.contains(operation)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTI4MzcyNQ=="}, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTUyNDkwMQ==", "bodyText": "@jpechane thanks for answering. I will do the optimization tonight and about another issue, currently, the MongoDB connectors try to filter that on the OpLog side. I can create tickets for other connectors", "url": "https://github.com/debezium/debezium/pull/1920#discussion_r605524901", "createdAt": "2021-04-01T09:51:36Z", "author": {"login": "blcksrx"}, "path": "debezium-core/src/main/java/io/debezium/pipeline/EventDispatcher.java", "diffHunk": "@@ -205,9 +208,11 @@ public void changeRecord(DataCollectionSchema schema,\n                                              OffsetContext offset,\n                                              ConnectHeaders headers)\n                             throws InterruptedException {\n-                        transactionMonitor.dataEvent(dataCollectionId, offset, key, value);\n-                        eventListener.onEvent(dataCollectionId, offset, key, value);\n-                        streamingReceiver.changeRecord(schema, operation, key, value, offset, headers);\n+                        if (!skippedOperations.contains(operation)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTI4MzcyNQ=="}, "originalCommit": null, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4145, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}