{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3NjkzNTcw", "number": 1387, "title": "DBZ-1930 Support for SMTs in embedded engine", "bodyText": "", "createdAt": "2020-04-02T16:45:30Z", "url": "https://github.com/debezium/debezium/pull/1387", "merged": true, "mergeCommit": {"oid": "98236eba89e3dae8501b0171ae4b6666384e7199"}, "closed": true, "closedAt": "2020-04-07T08:48:30Z", "author": {"login": "jpechane"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTvKdEABqjMxOTMwNzk1OTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVOC-qgFqTM4ODg0MDc5Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab960020de6197736e3d559e8feac8dcab12b8f9", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/ab960020de6197736e3d559e8feac8dcab12b8f9", "committedDate": "2020-04-02T16:50:11Z", "message": "DBZ-1930 Support for SMTs in embedded engine"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "ab960020de6197736e3d559e8feac8dcab12b8f9", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/ab960020de6197736e3d559e8feac8dcab12b8f9", "committedDate": "2020-04-02T16:50:11Z", "message": "DBZ-1930 Support for SMTs in embedded engine"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NTQ5NjU4", "url": "https://github.com/debezium/debezium/pull/1387#pullrequestreview-387549658", "createdAt": "2020-04-03T20:10:25Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMDoxMDoyNVrOGAnOnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMDoxNTowMFrOGAnbFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI5NTkwMw==", "bodyText": "Could you please move the stream operators (filter, map, collect) to a new line each? Otherwise it's a nightmare to debug.", "url": "https://github.com/debezium/debezium/pull/1387#discussion_r403295903", "createdAt": "2020-04-03T20:10:25Z", "author": {"login": "gunnarmorling"}, "path": "debezium-embedded/src/main/java/io/debezium/embedded/EmbeddedEngine.java", "diffHunk": "@@ -763,6 +781,11 @@ public OffsetStorageReader offsetStorageReader() {\n                             try {\n                                 if (changeRecords != null && !changeRecords.isEmpty()) {\n                                     logger.debug(\"Received {} records from the task\", changeRecords.size());\n+                                    changeRecords = changeRecords.stream().map(transformations::transform).filter(x -> x != null).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI5NjA4OQ==", "bodyText": "logger -> static LOGGER", "url": "https://github.com/debezium/debezium/pull/1387#discussion_r403296089", "createdAt": "2020-04-03T20:10:42Z", "author": {"login": "gunnarmorling"}, "path": "debezium-embedded/src/main/java/io/debezium/embedded/EmbeddedEngine.java", "diffHunk": "@@ -763,6 +781,11 @@ public OffsetStorageReader offsetStorageReader() {\n                             try {\n                                 if (changeRecords != null && !changeRecords.isEmpty()) {\n                                     logger.debug(\"Received {} records from the task\", changeRecords.size());\n+                                    changeRecords = changeRecords.stream().map(transformations::transform).filter(x -> x != null).collect(Collectors.toList());\n+                                }\n+\n+                                if (changeRecords != null && !changeRecords.isEmpty()) {\n+                                    logger.debug(\"Received {} transformed records from the task\", changeRecords.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI5NzAyNg==", "bodyText": "New line missing.", "url": "https://github.com/debezium/debezium/pull/1387#discussion_r403297026", "createdAt": "2020-04-03T20:12:07Z", "author": {"login": "gunnarmorling"}, "path": "debezium-embedded/src/main/java/io/debezium/embedded/Transformations.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.embedded;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.kafka.connect.source.SourceRecord;\n+import org.apache.kafka.connect.transforms.Transformation;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.debezium.DebeziumException;\n+import io.debezium.config.Configuration;\n+\n+/**\n+ * Composite class representing transformation chain.\n+ *\n+ * @author Jiri Pechanec\n+ *\n+ */\n+public class Transformations implements Closeable {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Transformations.class);\n+\n+    private static final String TYPE_SUFFIX = \".type\";\n+\n+    private final Configuration config;\n+    private final List<Transformation<SourceRecord>> transforms = new ArrayList<>();\n+\n+    public Transformations(Configuration config) {\n+        this.config = config;\n+        final String transformationList = config.getString(EmbeddedEngine.TRANSFORMS);\n+        if (transformationList == null) {\n+            return;\n+        }\n+        for (String transfName : transformationList.split(\",\")) {\n+            transfName = transfName.trim();\n+            final Transformation<SourceRecord> transformation = getTransformation(transfName);\n+            transformation.configure(config.subset(transformationConfigNamespace(transfName), true).asMap());\n+            transforms.add(transformation);\n+        }\n+    }\n+\n+    private String transformationConfigNamespace(final String name) {\n+        return EmbeddedEngine.TRANSFORMS.name() + \".\" + name;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private Transformation<SourceRecord> getTransformation(String name) {\n+        try {\n+            final Transformation<SourceRecord> transformation = config.getInstance(EmbeddedEngine.TRANSFORMS.name() + \".\" + name + TYPE_SUFFIX, Transformation.class);\n+            if (transformation == null) {\n+                throw new DebeziumException(\"Cannot instatiate transformation '\" + name + \"'\");\n+            }\n+            return transformation;\n+        }\n+        catch (Exception e) {\n+            throw new DebeziumException(\"Error while instantiating transformation '\" + name + \"'\");\n+        }\n+    }\n+\n+    public SourceRecord transform(SourceRecord record) {\n+        for (Transformation<SourceRecord> t : transforms) {\n+            record = t.apply(record);\n+            if (record == null) {\n+                break;\n+            }\n+        }\n+        return record;\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+        for (Transformation<SourceRecord> t : transforms) {\n+            try {\n+                t.close();\n+            }\n+            catch (Exception e) {\n+                LOGGER.warn(\"Error while closing transformation\", e);\n+            }\n+        }\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI5OTA5Mg==", "bodyText": "You might end up with a wrapped DebeziumException here.", "url": "https://github.com/debezium/debezium/pull/1387#discussion_r403299092", "createdAt": "2020-04-03T20:15:00Z", "author": {"login": "gunnarmorling"}, "path": "debezium-embedded/src/main/java/io/debezium/embedded/Transformations.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.embedded;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.kafka.connect.source.SourceRecord;\n+import org.apache.kafka.connect.transforms.Transformation;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.debezium.DebeziumException;\n+import io.debezium.config.Configuration;\n+\n+/**\n+ * Composite class representing transformation chain.\n+ *\n+ * @author Jiri Pechanec\n+ *\n+ */\n+public class Transformations implements Closeable {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Transformations.class);\n+\n+    private static final String TYPE_SUFFIX = \".type\";\n+\n+    private final Configuration config;\n+    private final List<Transformation<SourceRecord>> transforms = new ArrayList<>();\n+\n+    public Transformations(Configuration config) {\n+        this.config = config;\n+        final String transformationList = config.getString(EmbeddedEngine.TRANSFORMS);\n+        if (transformationList == null) {\n+            return;\n+        }\n+        for (String transfName : transformationList.split(\",\")) {\n+            transfName = transfName.trim();\n+            final Transformation<SourceRecord> transformation = getTransformation(transfName);\n+            transformation.configure(config.subset(transformationConfigNamespace(transfName), true).asMap());\n+            transforms.add(transformation);\n+        }\n+    }\n+\n+    private String transformationConfigNamespace(final String name) {\n+        return EmbeddedEngine.TRANSFORMS.name() + \".\" + name;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private Transformation<SourceRecord> getTransformation(String name) {\n+        try {\n+            final Transformation<SourceRecord> transformation = config.getInstance(EmbeddedEngine.TRANSFORMS.name() + \".\" + name + TYPE_SUFFIX, Transformation.class);\n+            if (transformation == null) {\n+                throw new DebeziumException(\"Cannot instatiate transformation '\" + name + \"'\");\n+            }\n+            return transformation;\n+        }\n+        catch (Exception e) {\n+            throw new DebeziumException(\"Error while instantiating transformation '\" + name + \"'\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28a5ad669de504bae0efb66daa92f2ca99f3472f", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/28a5ad669de504bae0efb66daa92f2ca99f3472f", "committedDate": "2020-04-06T05:05:39Z", "message": "DBZ-1930 Test invalid config and filtering"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aba899b180cc654f530d462695f73f305fb47024", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/aba899b180cc654f530d462695f73f305fb47024", "committedDate": "2020-04-06T05:07:28Z", "message": "DBZ-1930 Change logger to static"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "aba899b180cc654f530d462695f73f305fb47024", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/aba899b180cc654f530d462695f73f305fb47024", "committedDate": "2020-04-06T05:07:28Z", "message": "DBZ-1930 Change logger to static"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eef01322f0d9f122902b5de631d8f88f9e2aa420", "author": {"user": {"login": "gunnarmorling", "name": "Gunnar Morling"}}, "url": "https://github.com/debezium/debezium/commit/eef01322f0d9f122902b5de631d8f88f9e2aa420", "committedDate": "2020-04-07T07:19:24Z", "message": "DBZ-1930 Misc. clean-up"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4ODQwNzky", "url": "https://github.com/debezium/debezium/pull/1387#pullrequestreview-388840792", "createdAt": "2020-04-07T07:12:32Z", "commit": {"oid": "aba899b180cc654f530d462695f73f305fb47024"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzoxMjozMlrOGB14uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzoxMjozMlrOGB14uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU4NDYzMg==", "bodyText": "The source exception should be propagated.", "url": "https://github.com/debezium/debezium/pull/1387#discussion_r404584632", "createdAt": "2020-04-07T07:12:32Z", "author": {"login": "gunnarmorling"}, "path": "debezium-embedded/src/main/java/io/debezium/embedded/Transformations.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.embedded;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.kafka.connect.source.SourceRecord;\n+import org.apache.kafka.connect.transforms.Transformation;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.debezium.DebeziumException;\n+import io.debezium.config.Configuration;\n+\n+/**\n+ * Composite class representing transformation chain.\n+ *\n+ * @author Jiri Pechanec\n+ *\n+ */\n+public class Transformations implements Closeable {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Transformations.class);\n+\n+    private static final String TYPE_SUFFIX = \".type\";\n+\n+    private final Configuration config;\n+    private final List<Transformation<SourceRecord>> transforms = new ArrayList<>();\n+\n+    public Transformations(Configuration config) {\n+        this.config = config;\n+        final String transformationList = config.getString(EmbeddedEngine.TRANSFORMS);\n+        if (transformationList == null) {\n+            return;\n+        }\n+        for (String transfName : transformationList.split(\",\")) {\n+            transfName = transfName.trim();\n+            final Transformation<SourceRecord> transformation = getTransformation(transfName);\n+            transformation.configure(config.subset(transformationConfigNamespace(transfName), true).asMap());\n+            transforms.add(transformation);\n+        }\n+    }\n+\n+    private String transformationConfigNamespace(final String name) {\n+        return EmbeddedEngine.TRANSFORMS.name() + \".\" + name;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private Transformation<SourceRecord> getTransformation(String name) {\n+        try {\n+            final Transformation<SourceRecord> transformation = config.getInstance(EmbeddedEngine.TRANSFORMS.name() + \".\" + name + TYPE_SUFFIX, Transformation.class);\n+            if (transformation == null) {\n+                throw new DebeziumException(\"Cannot instatiate transformation '\" + name + \"'\");\n+            }\n+            return transformation;\n+        }\n+        catch (DebeziumException e) {\n+            throw e;\n+        }\n+        catch (Exception e) {\n+            throw new DebeziumException(\"Error while instantiating transformation '\" + name + \"'\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aba899b180cc654f530d462695f73f305fb47024"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1978, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}