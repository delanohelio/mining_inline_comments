{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5NzA0OTYy", "number": 1454, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMTo1MjoxOFrOD3ZTiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMDowMToyNFrOD3jt_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDEyODczOnYy", "diffSide": "RIGHT", "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/RecordsStreamProducerIT.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMTo1MjoxOFrOGNoYTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNjowMTozM1rOGNwwZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0NjI1NQ==", "bodyText": "This test isn't working for some reason. After adding a bunch of logging, it looks like my type registry is getting cleared out or something. I see the enum array type get added to the type registry, but at some point it is no longer in my type registry. Any ideas here?", "url": "https://github.com/debezium/debezium/pull/1454#discussion_r416946255", "createdAt": "2020-04-28T21:52:18Z", "author": {"login": "bradengroom"}, "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/RecordsStreamProducerIT.java", "diffHunk": "@@ -2088,6 +2088,100 @@ public void shouldStreamEnumAsKnownType() throws Exception {\n         assertThat(consumer.isEmpty()).isTrue();\n     }\n \n+    // @Test\n+    // public void shouldStreamEnumArrayAsKnownType() throws Exception {\n+    // // Specifically enable `column.propagate.source.type` here to validate later that the actual\n+    // // type, length, and scale values are resolved correctly when paired with Enum types.\n+    // TestHelper.execute(\"CREATE TABLE enum_array_table (pk SERIAL, PRIMARY KEY (pk));\");\n+    // startConnector(config -> config\n+    // .with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES, true)\n+    // .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.NEVER)\n+    // .with(\"column.propagate.source.type\", \"public.enum_array_table.value\")\n+    // .with(PostgresConnectorConfig.TABLE_WHITELIST, \"public.enum_array_table\"), false);\n+\n+    // waitForStreamingToStart();\n+\n+    // // We create the enum type after streaming started to simulate some future schema change\n+\n+    // TestHelper.execute(\"CREATE TYPE test_type AS ENUM ('V1','V2');\");\n+    // TestHelper.execute(\"ALTER TABLE enum_array_table ADD COLUMN value test_type[] NOT NULL\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA0MjkyMg==", "bodyText": "Things seem to work fine if I create the type before the table for some reason. Creating the table and then adding the type later results in:\norg.junit.ComparisonFailure: [field name: value] expected:<'{\"type\" : \"[ARRAY\", \"optional\" : \"false\", \"value\" : {\"name\" : \"io.debezium.data.Enum\", \"type\" : \"STRING\", \"optional\" : \"false\", \"version\" : \"1\"}]}'> but was:<'{\"type\" : \"[BYTES\", \"optional\" : \"false\"]}'>", "url": "https://github.com/debezium/debezium/pull/1454#discussion_r417042922", "createdAt": "2020-04-29T03:08:26Z", "author": {"login": "bradengroom"}, "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/RecordsStreamProducerIT.java", "diffHunk": "@@ -2088,6 +2088,100 @@ public void shouldStreamEnumAsKnownType() throws Exception {\n         assertThat(consumer.isEmpty()).isTrue();\n     }\n \n+    // @Test\n+    // public void shouldStreamEnumArrayAsKnownType() throws Exception {\n+    // // Specifically enable `column.propagate.source.type` here to validate later that the actual\n+    // // type, length, and scale values are resolved correctly when paired with Enum types.\n+    // TestHelper.execute(\"CREATE TABLE enum_array_table (pk SERIAL, PRIMARY KEY (pk));\");\n+    // startConnector(config -> config\n+    // .with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES, true)\n+    // .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.NEVER)\n+    // .with(\"column.propagate.source.type\", \"public.enum_array_table.value\")\n+    // .with(PostgresConnectorConfig.TABLE_WHITELIST, \"public.enum_array_table\"), false);\n+\n+    // waitForStreamingToStart();\n+\n+    // // We create the enum type after streaming started to simulate some future schema change\n+\n+    // TestHelper.execute(\"CREATE TYPE test_type AS ENUM ('V1','V2');\");\n+    // TestHelper.execute(\"ALTER TABLE enum_array_table ADD COLUMN value test_type[] NOT NULL\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0NjI1NQ=="}, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA1MjMwMw==", "bodyText": "Aaaaah. I think I know why this doesn't work when altering the table. There's a mechanism for resolving unknown types in the type registry. It looks like it's only hooked up to work with non array types. I think that's my issue.", "url": "https://github.com/debezium/debezium/pull/1454#discussion_r417052303", "createdAt": "2020-04-29T03:51:56Z", "author": {"login": "bradengroom"}, "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/RecordsStreamProducerIT.java", "diffHunk": "@@ -2088,6 +2088,100 @@ public void shouldStreamEnumAsKnownType() throws Exception {\n         assertThat(consumer.isEmpty()).isTrue();\n     }\n \n+    // @Test\n+    // public void shouldStreamEnumArrayAsKnownType() throws Exception {\n+    // // Specifically enable `column.propagate.source.type` here to validate later that the actual\n+    // // type, length, and scale values are resolved correctly when paired with Enum types.\n+    // TestHelper.execute(\"CREATE TABLE enum_array_table (pk SERIAL, PRIMARY KEY (pk));\");\n+    // startConnector(config -> config\n+    // .with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES, true)\n+    // .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.NEVER)\n+    // .with(\"column.propagate.source.type\", \"public.enum_array_table.value\")\n+    // .with(PostgresConnectorConfig.TABLE_WHITELIST, \"public.enum_array_table\"), false);\n+\n+    // waitForStreamingToStart();\n+\n+    // // We create the enum type after streaming started to simulate some future schema change\n+\n+    // TestHelper.execute(\"CREATE TYPE test_type AS ENUM ('V1','V2');\");\n+    // TestHelper.execute(\"ALTER TABLE enum_array_table ADD COLUMN value test_type[] NOT NULL\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0NjI1NQ=="}, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA4MzQ5Mg==", "bodyText": "Yup, that did it \ud83d\ude00\n9cf96c3", "url": "https://github.com/debezium/debezium/pull/1454#discussion_r417083492", "createdAt": "2020-04-29T06:01:33Z", "author": {"login": "bradengroom"}, "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/RecordsStreamProducerIT.java", "diffHunk": "@@ -2088,6 +2088,100 @@ public void shouldStreamEnumAsKnownType() throws Exception {\n         assertThat(consumer.isEmpty()).isTrue();\n     }\n \n+    // @Test\n+    // public void shouldStreamEnumArrayAsKnownType() throws Exception {\n+    // // Specifically enable `column.propagate.source.type` here to validate later that the actual\n+    // // type, length, and scale values are resolved correctly when paired with Enum types.\n+    // TestHelper.execute(\"CREATE TABLE enum_array_table (pk SERIAL, PRIMARY KEY (pk));\");\n+    // startConnector(config -> config\n+    // .with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES, true)\n+    // .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.NEVER)\n+    // .with(\"column.propagate.source.type\", \"public.enum_array_table.value\")\n+    // .with(PostgresConnectorConfig.TABLE_WHITELIST, \"public.enum_array_table\"), false);\n+\n+    // waitForStreamingToStart();\n+\n+    // // We create the enum type after streaming started to simulate some future schema change\n+\n+    // TestHelper.execute(\"CREATE TYPE test_type AS ENUM ('V1','V2');\");\n+    // TestHelper.execute(\"ALTER TABLE enum_array_table ADD COLUMN value test_type[] NOT NULL\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0NjI1NQ=="}, "originalCommit": null, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDEzMjk0OnYy", "diffSide": "RIGHT", "path": "debezium-core/src/test/java/io/debezium/data/VerifyRecord.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMTo1Mzo1MlrOGNoa_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMDowMjo0MVrOGN394Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0Njk0Mw==", "bodyText": "This is returning false for some reason, but I'm not sure why. The values appear to be the same when I print them:\nvalueSchemasEqual: false\nSCHEMA 1: {\"name\" : \"io.debezium.data.Enum\", \"type\" : \"STRING\", \"optional\" : \"false\", \"version\" : \"1\"}\nSCHEMA 2: {\"name\" : \"io.debezium.data.Enum\", \"type\" : \"STRING\", \"optional\" : \"false\", \"version\" : \"1\"}\n\nAny ideas?", "url": "https://github.com/debezium/debezium/pull/1454#discussion_r416946943", "createdAt": "2020-04-28T21:53:52Z", "author": {"login": "bradengroom"}, "path": "debezium-core/src/test/java/io/debezium/data/VerifyRecord.java", "diffHunk": "@@ -1090,7 +1090,11 @@ private static boolean areConnectSchemasEqual(Schema schema1, Schema schema2) {\n             valueSchemasEqual = Objects.equals(schema1.valueSchema(), schema2.valueSchema());\n         }\n         else if (schema1.type() == Type.ARRAY && schema2.type() == Type.ARRAY) {\n-            valueSchemasEqual = Objects.equals(schema1.valueSchema(), schema2.valueSchema());\n+            // TODO:\n+            // valueSchemasEqual = Objects.equals(schema1.valueSchema(), schema2.valueSchema());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA1NzQzMg==", "bodyText": "Correct me if I'm wrong, but I think the issue here is that this testing code assumes the objects for schema1 and schema2 will be the same. We're comparing by reference instead of value. I think this has been okay so far because other tests that hit this branch use a shared constant like SchemaBuilder.array(Schema.OPTIONAL_STRING_SCHEMA). This isn't true for my case, so this falls apart. I think I just have to make this comparison logic compare by value rather than reference.", "url": "https://github.com/debezium/debezium/pull/1454#discussion_r417057432", "createdAt": "2020-04-29T04:15:05Z", "author": {"login": "bradengroom"}, "path": "debezium-core/src/test/java/io/debezium/data/VerifyRecord.java", "diffHunk": "@@ -1090,7 +1090,11 @@ private static boolean areConnectSchemasEqual(Schema schema1, Schema schema2) {\n             valueSchemasEqual = Objects.equals(schema1.valueSchema(), schema2.valueSchema());\n         }\n         else if (schema1.type() == Type.ARRAY && schema2.type() == Type.ARRAY) {\n-            valueSchemasEqual = Objects.equals(schema1.valueSchema(), schema2.valueSchema());\n+            // TODO:\n+            // valueSchemasEqual = Objects.equals(schema1.valueSchema(), schema2.valueSchema());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0Njk0Mw=="}, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA1ODQxMw==", "bodyText": "I imagine there might be a better way of doing this, but I'll start with this and see what suggestions others might have.\nc9c8b0a", "url": "https://github.com/debezium/debezium/pull/1454#discussion_r417058413", "createdAt": "2020-04-29T04:19:58Z", "author": {"login": "bradengroom"}, "path": "debezium-core/src/test/java/io/debezium/data/VerifyRecord.java", "diffHunk": "@@ -1090,7 +1090,11 @@ private static boolean areConnectSchemasEqual(Schema schema1, Schema schema2) {\n             valueSchemasEqual = Objects.equals(schema1.valueSchema(), schema2.valueSchema());\n         }\n         else if (schema1.type() == Type.ARRAY && schema2.type() == Type.ARRAY) {\n-            valueSchemasEqual = Objects.equals(schema1.valueSchema(), schema2.valueSchema());\n+            // TODO:\n+            // valueSchemasEqual = Objects.equals(schema1.valueSchema(), schema2.valueSchema());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0Njk0Mw=="}, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIwMTYzMw==", "bodyText": "I think it failed because the expected value for the UPDATE case was not correct: the schema parameters should still be V1,V2, also after the UPDATE, as it only affects the actual column value, but not the allowed enum constants. I've pushed a commit for adjusting this.", "url": "https://github.com/debezium/debezium/pull/1454#discussion_r417201633", "createdAt": "2020-04-29T10:02:41Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/test/java/io/debezium/data/VerifyRecord.java", "diffHunk": "@@ -1090,7 +1090,11 @@ private static boolean areConnectSchemasEqual(Schema schema1, Schema schema2) {\n             valueSchemasEqual = Objects.equals(schema1.valueSchema(), schema2.valueSchema());\n         }\n         else if (schema1.type() == Type.ARRAY && schema2.type() == Type.ARRAY) {\n-            valueSchemasEqual = Objects.equals(schema1.valueSchema(), schema2.valueSchema());\n+            // TODO:\n+            // valueSchemasEqual = Objects.equals(schema1.valueSchema(), schema2.valueSchema());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0Njk0Mw=="}, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDEzNzczOnYy", "diffSide": "RIGHT", "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/connection/pgproto/PgProtoColumnValue.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMTo1NTozNFrOGNod4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwOTo0MzoyMVrOGN3VCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0NzY4Mw==", "bodyText": "I had to add this or else my test would just get an array of bytes. It looks like this file is responsible for the protobuf decoder? Do I need to do anything to make sure things work with native logical replication & wal2json?", "url": "https://github.com/debezium/debezium/pull/1454#discussion_r416947683", "createdAt": "2020-04-28T21:55:34Z", "author": {"login": "bradengroom"}, "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/connection/pgproto/PgProtoColumnValue.java", "diffHunk": "@@ -325,6 +325,9 @@ public Object asDefault(TypeRegistry typeRegistry, int columnType, String column\n                 type.getOid() == typeRegistry.hstoreArrayOid()) {\n             return asArray(columnName, type, fullType, connection);\n         }\n+        if (type.isArrayType() && type.getElementType().isEnumType()) {\n+            return asArray(columnName, type, fullType, connection);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE5MTE3Ng==", "bodyText": "That's a good catch, call flow shouldn't get here for an array type in the first place. I've pushed a commit for rectifying this, fixing the isArray() method which didn't handle these types correctly.", "url": "https://github.com/debezium/debezium/pull/1454#discussion_r417191176", "createdAt": "2020-04-29T09:43:21Z", "author": {"login": "gunnarmorling"}, "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/connection/pgproto/PgProtoColumnValue.java", "diffHunk": "@@ -325,6 +325,9 @@ public Object asDefault(TypeRegistry typeRegistry, int columnType, String column\n                 type.getOid() == typeRegistry.hstoreArrayOid()) {\n             return asArray(columnName, type, fullType, connection);\n         }\n+        if (type.isArrayType() && type.getElementType().isEnumType()) {\n+            return asArray(columnName, type, fullType, connection);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0NzY4Mw=="}, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTgzNDg0OnYy", "diffSide": "RIGHT", "path": "debezium-core/src/test/java/io/debezium/data/VerifyRecord.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMDowMToyNFrOGN37WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNDoyOToyMFrOGOBpHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIwMDk4NA==", "bodyText": "I've pushed a commit for changing the previous string-based comparison to calling this method again for the value schema. It revealed one glitch in the expected schema for the UPDATE case. Could you double-check that last commit I've added? Thanks!", "url": "https://github.com/debezium/debezium/pull/1454#discussion_r417200984", "createdAt": "2020-04-29T10:01:24Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/test/java/io/debezium/data/VerifyRecord.java", "diffHunk": "@@ -1090,7 +1090,7 @@ private static boolean areConnectSchemasEqual(Schema schema1, Schema schema2) {\n             valueSchemasEqual = Objects.equals(schema1.valueSchema(), schema2.valueSchema());\n         }\n         else if (schema1.type() == Type.ARRAY && schema2.type() == Type.ARRAY) {\n-            valueSchemasEqual = Objects.equals(schema1.valueSchema(), schema2.valueSchema());\n+            valueSchemasEqual = areConnectSchemasEqual(schema1.valueSchema(), schema2.valueSchema());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM2MDE1OA==", "bodyText": "Ah, I don't know why I didn't think to just recurse on this method. This seems like the way to go. Thanks!", "url": "https://github.com/debezium/debezium/pull/1454#discussion_r417360158", "createdAt": "2020-04-29T14:29:20Z", "author": {"login": "bradengroom"}, "path": "debezium-core/src/test/java/io/debezium/data/VerifyRecord.java", "diffHunk": "@@ -1090,7 +1090,7 @@ private static boolean areConnectSchemasEqual(Schema schema1, Schema schema2) {\n             valueSchemasEqual = Objects.equals(schema1.valueSchema(), schema2.valueSchema());\n         }\n         else if (schema1.type() == Type.ARRAY && schema2.type() == Type.ARRAY) {\n-            valueSchemasEqual = Objects.equals(schema1.valueSchema(), schema2.valueSchema());\n+            valueSchemasEqual = areConnectSchemasEqual(schema1.valueSchema(), schema2.valueSchema());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIwMDk4NA=="}, "originalCommit": null, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4402, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}