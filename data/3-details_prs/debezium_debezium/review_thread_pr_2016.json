{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxMTc0ODEw", "number": 2016, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo0NDozNFrOFHDexA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo1Mzo1OVrOFHDo6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyOTQxMzgwOnYy", "diffSide": "RIGHT", "path": "documentation/modules/ROOT/pages/integrations/tracing.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo0NDozNFrOIIWVbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo0NDozNFrOIIWVbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYyNTQ1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            One of the key ingeredients for observability is https://microservices.io/patterns/observability/distributed-tracing.html[distributed tracing].\n          \n          \n            \n            One of the key ingredients for observability is https://microservices.io/patterns/observability/distributed-tracing.html[distributed tracing].", "url": "https://github.com/debezium/debezium/pull/2016#discussion_r545625455", "createdAt": "2020-12-18T07:44:34Z", "author": {"login": "gunnarmorling"}, "path": "documentation/modules/ROOT/pages/integrations/tracing.adoc", "diffHunk": "@@ -0,0 +1,101 @@\n+[id=\"distributed-tracing\"]\n+= Distributed Tracing\n+\n+:toc:\n+:toc-placement: macro\n+:linkattrs:\n+:icons: font\n+:source-highlighter: highlight.js\n+\n+toc::[]\n+\n+== Overview\n+\n+Observability is an important aspect of microservice-oriented applications.\n+One of the key ingeredients for observability is https://microservices.io/patterns/observability/distributed-tracing.html[distributed tracing].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe54ef31d684ae822ee56aaee7c050593dd5fcfd"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyOTQxNDUyOnYy", "diffSide": "RIGHT", "path": "documentation/modules/ROOT/pages/integrations/tracing.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo0NDo1M1rOIIWV7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo0NDo1M1rOIIWV7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYyNTU4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The tracing support is added to Debezium through https://opentracing.io/[OpenTracing] specification.\n          \n          \n            \n            The tracing support is added to Debezium through the https://opentracing.io/[OpenTracing] specification.", "url": "https://github.com/debezium/debezium/pull/2016#discussion_r545625583", "createdAt": "2020-12-18T07:44:53Z", "author": {"login": "gunnarmorling"}, "path": "documentation/modules/ROOT/pages/integrations/tracing.adoc", "diffHunk": "@@ -0,0 +1,101 @@\n+[id=\"distributed-tracing\"]\n+= Distributed Tracing\n+\n+:toc:\n+:toc-placement: macro\n+:linkattrs:\n+:icons: font\n+:source-highlighter: highlight.js\n+\n+toc::[]\n+\n+== Overview\n+\n+Observability is an important aspect of microservice-oriented applications.\n+One of the key ingeredients for observability is https://microservices.io/patterns/observability/distributed-tracing.html[distributed tracing].\n+\n+It is necessary to provide additional precautions when an application writes a record to a database that is later processed by Debezium.\n+The active trace is effectively demarcated by the write to the database.\n+If we want Debezium to join the larger scope application tracer we need to pass the trace metadata to Debezium.\n+\n+The tracing support is added to Debezium through https://opentracing.io/[OpenTracing] specification.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe54ef31d684ae822ee56aaee7c050593dd5fcfd"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyOTQxNTcyOnYy", "diffSide": "RIGHT", "path": "documentation/modules/ROOT/pages/integrations/tracing.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo0NToxOVrOIIWWkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo0NToxOVrOIIWWkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYyNTc0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Neither specification JAR files nor Jaeger client are part of the Debezium Connect image.\n          \n          \n            \n            Neither the specification JAR files nor the Jaeger client are part of the Debezium Kafka Connect container image.", "url": "https://github.com/debezium/debezium/pull/2016#discussion_r545625746", "createdAt": "2020-12-18T07:45:19Z", "author": {"login": "gunnarmorling"}, "path": "documentation/modules/ROOT/pages/integrations/tracing.adoc", "diffHunk": "@@ -0,0 +1,101 @@\n+[id=\"distributed-tracing\"]\n+= Distributed Tracing\n+\n+:toc:\n+:toc-placement: macro\n+:linkattrs:\n+:icons: font\n+:source-highlighter: highlight.js\n+\n+toc::[]\n+\n+== Overview\n+\n+Observability is an important aspect of microservice-oriented applications.\n+One of the key ingeredients for observability is https://microservices.io/patterns/observability/distributed-tracing.html[distributed tracing].\n+\n+It is necessary to provide additional precautions when an application writes a record to a database that is later processed by Debezium.\n+The active trace is effectively demarcated by the write to the database.\n+If we want Debezium to join the larger scope application tracer we need to pass the trace metadata to Debezium.\n+\n+The tracing support is added to Debezium through https://opentracing.io/[OpenTracing] specification.\n+It is also necessary to provide a client implementing the specification.\n+Debezium was tested with https://www.jaegertracing.io/[Jaeger] implementation.\n+\n+[WARNING]\n+====\n+Neither specification JAR files nor Jaeger client are part of the Debezium Connect image.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe54ef31d684ae822ee56aaee7c050593dd5fcfd"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyOTQyNTY4OnYy", "diffSide": "RIGHT", "path": "documentation/modules/ROOT/pages/integrations/tracing.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo0ODo0OVrOIIWcRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo0ODo0OVrOIIWcRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYyNzIwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In this case, the application writing to a database is responsible for providing tracing span context.\n          \n          \n            \n            In this case, the application writing to a database is responsible for providing the tracing span context.", "url": "https://github.com/debezium/debezium/pull/2016#discussion_r545627207", "createdAt": "2020-12-18T07:48:49Z", "author": {"login": "gunnarmorling"}, "path": "documentation/modules/ROOT/pages/integrations/tracing.adoc", "diffHunk": "@@ -0,0 +1,101 @@\n+[id=\"distributed-tracing\"]\n+= Distributed Tracing\n+\n+:toc:\n+:toc-placement: macro\n+:linkattrs:\n+:icons: font\n+:source-highlighter: highlight.js\n+\n+toc::[]\n+\n+== Overview\n+\n+Observability is an important aspect of microservice-oriented applications.\n+One of the key ingeredients for observability is https://microservices.io/patterns/observability/distributed-tracing.html[distributed tracing].\n+\n+It is necessary to provide additional precautions when an application writes a record to a database that is later processed by Debezium.\n+The active trace is effectively demarcated by the write to the database.\n+If we want Debezium to join the larger scope application tracer we need to pass the trace metadata to Debezium.\n+\n+The tracing support is added to Debezium through https://opentracing.io/[OpenTracing] specification.\n+It is also necessary to provide a client implementing the specification.\n+Debezium was tested with https://www.jaegertracing.io/[Jaeger] implementation.\n+\n+[WARNING]\n+====\n+Neither specification JAR files nor Jaeger client are part of the Debezium Connect image.\n+The user either needs to extend the image with them or can use the https://strimzi.io/[Strimzi] Kafka image.\n+In that case, the tracing of Kafka producer and consumer is also available.\n+\n+See compose file of https://github.com/debezium/debezium-examples/tree/master/outbox[Outbox example].\n+====\n+\n+== ActivateTracingSpan SMT\n+\n+The main implementation point of tracing in Debezium is `ActivateTracingSpan` SMT.\n+In this case, the application writing to a database is responsible for providing tracing span context.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe54ef31d684ae822ee56aaee7c050593dd5fcfd"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyOTQyNzMyOnYy", "diffSide": "RIGHT", "path": "documentation/modules/ROOT/pages/integrations/tracing.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo0OToyMVrOIIWdJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMDo0NjoyMlrOIId-pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYyNzQzMA==", "bodyText": "I don't understand this one.", "url": "https://github.com/debezium/debezium/pull/2016#discussion_r545627430", "createdAt": "2020-12-18T07:49:21Z", "author": {"login": "gunnarmorling"}, "path": "documentation/modules/ROOT/pages/integrations/tracing.adoc", "diffHunk": "@@ -0,0 +1,101 @@\n+[id=\"distributed-tracing\"]\n+= Distributed Tracing\n+\n+:toc:\n+:toc-placement: macro\n+:linkattrs:\n+:icons: font\n+:source-highlighter: highlight.js\n+\n+toc::[]\n+\n+== Overview\n+\n+Observability is an important aspect of microservice-oriented applications.\n+One of the key ingeredients for observability is https://microservices.io/patterns/observability/distributed-tracing.html[distributed tracing].\n+\n+It is necessary to provide additional precautions when an application writes a record to a database that is later processed by Debezium.\n+The active trace is effectively demarcated by the write to the database.\n+If we want Debezium to join the larger scope application tracer we need to pass the trace metadata to Debezium.\n+\n+The tracing support is added to Debezium through https://opentracing.io/[OpenTracing] specification.\n+It is also necessary to provide a client implementing the specification.\n+Debezium was tested with https://www.jaegertracing.io/[Jaeger] implementation.\n+\n+[WARNING]\n+====\n+Neither specification JAR files nor Jaeger client are part of the Debezium Connect image.\n+The user either needs to extend the image with them or can use the https://strimzi.io/[Strimzi] Kafka image.\n+In that case, the tracing of Kafka producer and consumer is also available.\n+\n+See compose file of https://github.com/debezium/debezium-examples/tree/master/outbox[Outbox example].\n+====\n+\n+== ActivateTracingSpan SMT\n+\n+The main implementation point of tracing in Debezium is `ActivateTracingSpan` SMT.\n+In this case, the application writing to a database is responsible for providing tracing span context.\n+The writer should have span context inject into `java.util.Properties` instance that is serialized then serialized and written to the database as a distinct field of the table.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe54ef31d684ae822ee56aaee7c050593dd5fcfd"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc1MDY5NA==", "bodyText": "@gunnarmorling Rewritten and ready for review", "url": "https://github.com/debezium/debezium/pull/2016#discussion_r545750694", "createdAt": "2020-12-18T10:46:22Z", "author": {"login": "jpechane"}, "path": "documentation/modules/ROOT/pages/integrations/tracing.adoc", "diffHunk": "@@ -0,0 +1,101 @@\n+[id=\"distributed-tracing\"]\n+= Distributed Tracing\n+\n+:toc:\n+:toc-placement: macro\n+:linkattrs:\n+:icons: font\n+:source-highlighter: highlight.js\n+\n+toc::[]\n+\n+== Overview\n+\n+Observability is an important aspect of microservice-oriented applications.\n+One of the key ingeredients for observability is https://microservices.io/patterns/observability/distributed-tracing.html[distributed tracing].\n+\n+It is necessary to provide additional precautions when an application writes a record to a database that is later processed by Debezium.\n+The active trace is effectively demarcated by the write to the database.\n+If we want Debezium to join the larger scope application tracer we need to pass the trace metadata to Debezium.\n+\n+The tracing support is added to Debezium through https://opentracing.io/[OpenTracing] specification.\n+It is also necessary to provide a client implementing the specification.\n+Debezium was tested with https://www.jaegertracing.io/[Jaeger] implementation.\n+\n+[WARNING]\n+====\n+Neither specification JAR files nor Jaeger client are part of the Debezium Connect image.\n+The user either needs to extend the image with them or can use the https://strimzi.io/[Strimzi] Kafka image.\n+In that case, the tracing of Kafka producer and consumer is also available.\n+\n+See compose file of https://github.com/debezium/debezium-examples/tree/master/outbox[Outbox example].\n+====\n+\n+== ActivateTracingSpan SMT\n+\n+The main implementation point of tracing in Debezium is `ActivateTracingSpan` SMT.\n+In this case, the application writing to a database is responsible for providing tracing span context.\n+The writer should have span context inject into `java.util.Properties` instance that is serialized then serialized and written to the database as a distinct field of the table.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYyNzQzMA=="}, "originalCommit": {"oid": "fe54ef31d684ae822ee56aaee7c050593dd5fcfd"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyOTQyNzgyOnYy", "diffSide": "RIGHT", "path": "documentation/modules/ROOT/pages/integrations/tracing.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo0OTozNFrOIIWdcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo0OTozNFrOIIWdcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYyNzUwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In this case, Debezium operations together with metadata will be traced but will not be connected to business transaction traces to enable end-to-end testing.\n          \n          \n            \n            In this case, Debezium operations together with metadata will be traced but will not be connected to business transaction traces to enable end-to-end tracing.", "url": "https://github.com/debezium/debezium/pull/2016#discussion_r545627506", "createdAt": "2020-12-18T07:49:34Z", "author": {"login": "gunnarmorling"}, "path": "documentation/modules/ROOT/pages/integrations/tracing.adoc", "diffHunk": "@@ -0,0 +1,101 @@\n+[id=\"distributed-tracing\"]\n+= Distributed Tracing\n+\n+:toc:\n+:toc-placement: macro\n+:linkattrs:\n+:icons: font\n+:source-highlighter: highlight.js\n+\n+toc::[]\n+\n+== Overview\n+\n+Observability is an important aspect of microservice-oriented applications.\n+One of the key ingeredients for observability is https://microservices.io/patterns/observability/distributed-tracing.html[distributed tracing].\n+\n+It is necessary to provide additional precautions when an application writes a record to a database that is later processed by Debezium.\n+The active trace is effectively demarcated by the write to the database.\n+If we want Debezium to join the larger scope application tracer we need to pass the trace metadata to Debezium.\n+\n+The tracing support is added to Debezium through https://opentracing.io/[OpenTracing] specification.\n+It is also necessary to provide a client implementing the specification.\n+Debezium was tested with https://www.jaegertracing.io/[Jaeger] implementation.\n+\n+[WARNING]\n+====\n+Neither specification JAR files nor Jaeger client are part of the Debezium Connect image.\n+The user either needs to extend the image with them or can use the https://strimzi.io/[Strimzi] Kafka image.\n+In that case, the tracing of Kafka producer and consumer is also available.\n+\n+See compose file of https://github.com/debezium/debezium-examples/tree/master/outbox[Outbox example].\n+====\n+\n+== ActivateTracingSpan SMT\n+\n+The main implementation point of tracing in Debezium is `ActivateTracingSpan` SMT.\n+In this case, the application writing to a database is responsible for providing tracing span context.\n+The writer should have span context inject into `java.util.Properties` instance that is serialized then serialized and written to the database as a distinct field of the table.\n+\n+If the span context is not provided then the SMT will create a new span.\n+In this case, Debezium operations together with metadata will be traced but will not be connected to business transaction traces to enable end-to-end testing.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe54ef31d684ae822ee56aaee7c050593dd5fcfd"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyOTQyOTM2OnYy", "diffSide": "RIGHT", "path": "documentation/modules/ROOT/pages/integrations/tracing.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo1MDoxMFrOIIWeUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo1MDoxMFrOIIWeUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYyNzcyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * create event `db-log-write` span context with the start timestamp set to the database log write timestamp\n          \n          \n            \n            * create the event `db-log-write` span context with the start timestamp set to the database log write timestamp", "url": "https://github.com/debezium/debezium/pull/2016#discussion_r545627728", "createdAt": "2020-12-18T07:50:10Z", "author": {"login": "gunnarmorling"}, "path": "documentation/modules/ROOT/pages/integrations/tracing.adoc", "diffHunk": "@@ -0,0 +1,101 @@\n+[id=\"distributed-tracing\"]\n+= Distributed Tracing\n+\n+:toc:\n+:toc-placement: macro\n+:linkattrs:\n+:icons: font\n+:source-highlighter: highlight.js\n+\n+toc::[]\n+\n+== Overview\n+\n+Observability is an important aspect of microservice-oriented applications.\n+One of the key ingeredients for observability is https://microservices.io/patterns/observability/distributed-tracing.html[distributed tracing].\n+\n+It is necessary to provide additional precautions when an application writes a record to a database that is later processed by Debezium.\n+The active trace is effectively demarcated by the write to the database.\n+If we want Debezium to join the larger scope application tracer we need to pass the trace metadata to Debezium.\n+\n+The tracing support is added to Debezium through https://opentracing.io/[OpenTracing] specification.\n+It is also necessary to provide a client implementing the specification.\n+Debezium was tested with https://www.jaegertracing.io/[Jaeger] implementation.\n+\n+[WARNING]\n+====\n+Neither specification JAR files nor Jaeger client are part of the Debezium Connect image.\n+The user either needs to extend the image with them or can use the https://strimzi.io/[Strimzi] Kafka image.\n+In that case, the tracing of Kafka producer and consumer is also available.\n+\n+See compose file of https://github.com/debezium/debezium-examples/tree/master/outbox[Outbox example].\n+====\n+\n+== ActivateTracingSpan SMT\n+\n+The main implementation point of tracing in Debezium is `ActivateTracingSpan` SMT.\n+In this case, the application writing to a database is responsible for providing tracing span context.\n+The writer should have span context inject into `java.util.Properties` instance that is serialized then serialized and written to the database as a distinct field of the table.\n+\n+If the span context is not provided then the SMT will create a new span.\n+In this case, Debezium operations together with metadata will be traced but will not be connected to business transaction traces to enable end-to-end testing.\n+\n+When this SMT is invoked with a message then it will:\n+\n+* extract parent span context if present in the message\n+* create event `db-log-write` span context with the start timestamp set to the database log write timestamp", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe54ef31d684ae822ee56aaee7c050593dd5fcfd"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyOTQyOTY2OnYy", "diffSide": "RIGHT", "path": "documentation/modules/ROOT/pages/integrations/tracing.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo1MDoxN1rOIIWeeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo1MDoxN1rOIIWeeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYyNzc3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * extract parent span context if present in the message\n          \n          \n            \n            * extract the parent span context if present in the message", "url": "https://github.com/debezium/debezium/pull/2016#discussion_r545627770", "createdAt": "2020-12-18T07:50:17Z", "author": {"login": "gunnarmorling"}, "path": "documentation/modules/ROOT/pages/integrations/tracing.adoc", "diffHunk": "@@ -0,0 +1,101 @@\n+[id=\"distributed-tracing\"]\n+= Distributed Tracing\n+\n+:toc:\n+:toc-placement: macro\n+:linkattrs:\n+:icons: font\n+:source-highlighter: highlight.js\n+\n+toc::[]\n+\n+== Overview\n+\n+Observability is an important aspect of microservice-oriented applications.\n+One of the key ingeredients for observability is https://microservices.io/patterns/observability/distributed-tracing.html[distributed tracing].\n+\n+It is necessary to provide additional precautions when an application writes a record to a database that is later processed by Debezium.\n+The active trace is effectively demarcated by the write to the database.\n+If we want Debezium to join the larger scope application tracer we need to pass the trace metadata to Debezium.\n+\n+The tracing support is added to Debezium through https://opentracing.io/[OpenTracing] specification.\n+It is also necessary to provide a client implementing the specification.\n+Debezium was tested with https://www.jaegertracing.io/[Jaeger] implementation.\n+\n+[WARNING]\n+====\n+Neither specification JAR files nor Jaeger client are part of the Debezium Connect image.\n+The user either needs to extend the image with them or can use the https://strimzi.io/[Strimzi] Kafka image.\n+In that case, the tracing of Kafka producer and consumer is also available.\n+\n+See compose file of https://github.com/debezium/debezium-examples/tree/master/outbox[Outbox example].\n+====\n+\n+== ActivateTracingSpan SMT\n+\n+The main implementation point of tracing in Debezium is `ActivateTracingSpan` SMT.\n+In this case, the application writing to a database is responsible for providing tracing span context.\n+The writer should have span context inject into `java.util.Properties` instance that is serialized then serialized and written to the database as a distinct field of the table.\n+\n+If the span context is not provided then the SMT will create a new span.\n+In this case, Debezium operations together with metadata will be traced but will not be connected to business transaction traces to enable end-to-end testing.\n+\n+When this SMT is invoked with a message then it will:\n+\n+* extract parent span context if present in the message", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe54ef31d684ae822ee56aaee7c050593dd5fcfd"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyOTQzMTM5OnYy", "diffSide": "RIGHT", "path": "documentation/modules/ROOT/pages/integrations/tracing.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo1MDo1MFrOIIWfbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo1MDo1MFrOIIWfbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYyODAxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * create processing `debezium-read` span as a child of `db-log-write` span with the start timestamp set to the processing time of the even\n          \n          \n            \n            * create the processing `debezium-read` span as a child of `db-log-write` span with the start timestamp set to the processing time of the even", "url": "https://github.com/debezium/debezium/pull/2016#discussion_r545628013", "createdAt": "2020-12-18T07:50:50Z", "author": {"login": "gunnarmorling"}, "path": "documentation/modules/ROOT/pages/integrations/tracing.adoc", "diffHunk": "@@ -0,0 +1,101 @@\n+[id=\"distributed-tracing\"]\n+= Distributed Tracing\n+\n+:toc:\n+:toc-placement: macro\n+:linkattrs:\n+:icons: font\n+:source-highlighter: highlight.js\n+\n+toc::[]\n+\n+== Overview\n+\n+Observability is an important aspect of microservice-oriented applications.\n+One of the key ingeredients for observability is https://microservices.io/patterns/observability/distributed-tracing.html[distributed tracing].\n+\n+It is necessary to provide additional precautions when an application writes a record to a database that is later processed by Debezium.\n+The active trace is effectively demarcated by the write to the database.\n+If we want Debezium to join the larger scope application tracer we need to pass the trace metadata to Debezium.\n+\n+The tracing support is added to Debezium through https://opentracing.io/[OpenTracing] specification.\n+It is also necessary to provide a client implementing the specification.\n+Debezium was tested with https://www.jaegertracing.io/[Jaeger] implementation.\n+\n+[WARNING]\n+====\n+Neither specification JAR files nor Jaeger client are part of the Debezium Connect image.\n+The user either needs to extend the image with them or can use the https://strimzi.io/[Strimzi] Kafka image.\n+In that case, the tracing of Kafka producer and consumer is also available.\n+\n+See compose file of https://github.com/debezium/debezium-examples/tree/master/outbox[Outbox example].\n+====\n+\n+== ActivateTracingSpan SMT\n+\n+The main implementation point of tracing in Debezium is `ActivateTracingSpan` SMT.\n+In this case, the application writing to a database is responsible for providing tracing span context.\n+The writer should have span context inject into `java.util.Properties` instance that is serialized then serialized and written to the database as a distinct field of the table.\n+\n+If the span context is not provided then the SMT will create a new span.\n+In this case, Debezium operations together with metadata will be traced but will not be connected to business transaction traces to enable end-to-end testing.\n+\n+When this SMT is invoked with a message then it will:\n+\n+* extract parent span context if present in the message\n+* create event `db-log-write` span context with the start timestamp set to the database log write timestamp\n+* insert fields from `source` block into the span as *tags*\n+* create processing `debezium-read` span as a child of `db-log-write` span with the start timestamp set to the processing time of the even", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe54ef31d684ae822ee56aaee7c050593dd5fcfd"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyOTQzNDc1OnYy", "diffSide": "RIGHT", "path": "documentation/modules/ROOT/pages/integrations/tracing.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo1MjowOFrOIIWhUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo1MjowOFrOIIWhUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYyODQ5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Outbox extension provides the additional operations necessary for tracing context propagation out-of-the-box.\n          \n          \n            \n            The outbox extension provides the additional operations necessary for tracing context propagation out-of-the-box.", "url": "https://github.com/debezium/debezium/pull/2016#discussion_r545628497", "createdAt": "2020-12-18T07:52:08Z", "author": {"login": "gunnarmorling"}, "path": "documentation/modules/ROOT/pages/integrations/tracing.adoc", "diffHunk": "@@ -0,0 +1,101 @@\n+[id=\"distributed-tracing\"]\n+= Distributed Tracing\n+\n+:toc:\n+:toc-placement: macro\n+:linkattrs:\n+:icons: font\n+:source-highlighter: highlight.js\n+\n+toc::[]\n+\n+== Overview\n+\n+Observability is an important aspect of microservice-oriented applications.\n+One of the key ingeredients for observability is https://microservices.io/patterns/observability/distributed-tracing.html[distributed tracing].\n+\n+It is necessary to provide additional precautions when an application writes a record to a database that is later processed by Debezium.\n+The active trace is effectively demarcated by the write to the database.\n+If we want Debezium to join the larger scope application tracer we need to pass the trace metadata to Debezium.\n+\n+The tracing support is added to Debezium through https://opentracing.io/[OpenTracing] specification.\n+It is also necessary to provide a client implementing the specification.\n+Debezium was tested with https://www.jaegertracing.io/[Jaeger] implementation.\n+\n+[WARNING]\n+====\n+Neither specification JAR files nor Jaeger client are part of the Debezium Connect image.\n+The user either needs to extend the image with them or can use the https://strimzi.io/[Strimzi] Kafka image.\n+In that case, the tracing of Kafka producer and consumer is also available.\n+\n+See compose file of https://github.com/debezium/debezium-examples/tree/master/outbox[Outbox example].\n+====\n+\n+== ActivateTracingSpan SMT\n+\n+The main implementation point of tracing in Debezium is `ActivateTracingSpan` SMT.\n+In this case, the application writing to a database is responsible for providing tracing span context.\n+The writer should have span context inject into `java.util.Properties` instance that is serialized then serialized and written to the database as a distinct field of the table.\n+\n+If the span context is not provided then the SMT will create a new span.\n+In this case, Debezium operations together with metadata will be traced but will not be connected to business transaction traces to enable end-to-end testing.\n+\n+When this SMT is invoked with a message then it will:\n+\n+* extract parent span context if present in the message\n+* create event `db-log-write` span context with the start timestamp set to the database log write timestamp\n+* insert fields from `source` block into the span as *tags*\n+* create processing `debezium-read` span as a child of `db-log-write` span with the start timestamp set to the processing time of the even\n+* insert fields from envelope such as `op` into the processing span as *tags*\n+* injects the processing span context into message headers\n+\n+=== Kafka Producer tracing\n+\n+Optionally it is possible to enable tracing at the Kafka producer level.\n+If enabled then when the message is being written to the Kafka broker the producer will extract Debezium's processing span context from the Kafka message headers, create a new child span and record information about the write to the broker.\n+Then it injects the new span into the message headers so a consumer of the message can restore the trace and resume end-to-end tracing.\n+\n+=== Configuration options\n+\n+[cols=\"65%a,>15%a,>20%\"]\n+|===\n+|Configuration property\n+|Type\n+|Default\n+\n+|`tracing.span.context.field`::\n+The name of the field containing span context. +\n++\n+_The sender must write the span context into the database column as a serialized instance of `java.util.Properties` with injected span context._\n+|string\n+|tracingspancontext\n+\n+|`tracing.operation.name`::\n+The operation name representing the Debezium processing span. +\n+|string\n+|debezium-read\n+\n+|`tracing.with.context.field.only`::\n+Only events that have serialized context field should be traced.\n++\n+_If set to `true` then tracing span will be created only for events with associated tracing span context field.\n+If set to `false` then the tracing span is created for all incoming events regardless of having associated span context._\n+|boolean\n+|false\n+\n+|===\n+\n+== Outbox Extension\n+\n+Outbox extension provides the additional operations necessary for tracing context propagation out-of-the-box.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe54ef31d684ae822ee56aaee7c050593dd5fcfd"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyOTQzNTA1OnYy", "diffSide": "RIGHT", "path": "documentation/modules/ROOT/pages/integrations/tracing.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo1MjoxNlrOIIWheg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo1MjoxNlrOIIWheg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYyODUzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            It provides `tracingspancontext` field in an outbox table that is used as the vehicle to pass span context from service using the outbox extension to a Debezium connector.\n          \n          \n            \n            It provides the `tracingspancontext` field in an outbox table that is used as the vehicle to pass span context from service using the outbox extension to a Debezium connector.", "url": "https://github.com/debezium/debezium/pull/2016#discussion_r545628538", "createdAt": "2020-12-18T07:52:16Z", "author": {"login": "gunnarmorling"}, "path": "documentation/modules/ROOT/pages/integrations/tracing.adoc", "diffHunk": "@@ -0,0 +1,101 @@\n+[id=\"distributed-tracing\"]\n+= Distributed Tracing\n+\n+:toc:\n+:toc-placement: macro\n+:linkattrs:\n+:icons: font\n+:source-highlighter: highlight.js\n+\n+toc::[]\n+\n+== Overview\n+\n+Observability is an important aspect of microservice-oriented applications.\n+One of the key ingeredients for observability is https://microservices.io/patterns/observability/distributed-tracing.html[distributed tracing].\n+\n+It is necessary to provide additional precautions when an application writes a record to a database that is later processed by Debezium.\n+The active trace is effectively demarcated by the write to the database.\n+If we want Debezium to join the larger scope application tracer we need to pass the trace metadata to Debezium.\n+\n+The tracing support is added to Debezium through https://opentracing.io/[OpenTracing] specification.\n+It is also necessary to provide a client implementing the specification.\n+Debezium was tested with https://www.jaegertracing.io/[Jaeger] implementation.\n+\n+[WARNING]\n+====\n+Neither specification JAR files nor Jaeger client are part of the Debezium Connect image.\n+The user either needs to extend the image with them or can use the https://strimzi.io/[Strimzi] Kafka image.\n+In that case, the tracing of Kafka producer and consumer is also available.\n+\n+See compose file of https://github.com/debezium/debezium-examples/tree/master/outbox[Outbox example].\n+====\n+\n+== ActivateTracingSpan SMT\n+\n+The main implementation point of tracing in Debezium is `ActivateTracingSpan` SMT.\n+In this case, the application writing to a database is responsible for providing tracing span context.\n+The writer should have span context inject into `java.util.Properties` instance that is serialized then serialized and written to the database as a distinct field of the table.\n+\n+If the span context is not provided then the SMT will create a new span.\n+In this case, Debezium operations together with metadata will be traced but will not be connected to business transaction traces to enable end-to-end testing.\n+\n+When this SMT is invoked with a message then it will:\n+\n+* extract parent span context if present in the message\n+* create event `db-log-write` span context with the start timestamp set to the database log write timestamp\n+* insert fields from `source` block into the span as *tags*\n+* create processing `debezium-read` span as a child of `db-log-write` span with the start timestamp set to the processing time of the even\n+* insert fields from envelope such as `op` into the processing span as *tags*\n+* injects the processing span context into message headers\n+\n+=== Kafka Producer tracing\n+\n+Optionally it is possible to enable tracing at the Kafka producer level.\n+If enabled then when the message is being written to the Kafka broker the producer will extract Debezium's processing span context from the Kafka message headers, create a new child span and record information about the write to the broker.\n+Then it injects the new span into the message headers so a consumer of the message can restore the trace and resume end-to-end tracing.\n+\n+=== Configuration options\n+\n+[cols=\"65%a,>15%a,>20%\"]\n+|===\n+|Configuration property\n+|Type\n+|Default\n+\n+|`tracing.span.context.field`::\n+The name of the field containing span context. +\n++\n+_The sender must write the span context into the database column as a serialized instance of `java.util.Properties` with injected span context._\n+|string\n+|tracingspancontext\n+\n+|`tracing.operation.name`::\n+The operation name representing the Debezium processing span. +\n+|string\n+|debezium-read\n+\n+|`tracing.with.context.field.only`::\n+Only events that have serialized context field should be traced.\n++\n+_If set to `true` then tracing span will be created only for events with associated tracing span context field.\n+If set to `false` then the tracing span is created for all incoming events regardless of having associated span context._\n+|boolean\n+|false\n+\n+|===\n+\n+== Outbox Extension\n+\n+Outbox extension provides the additional operations necessary for tracing context propagation out-of-the-box.\n+It provides `tracingspancontext` field in an outbox table that is used as the vehicle to pass span context from service using the outbox extension to a Debezium connector.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe54ef31d684ae822ee56aaee7c050593dd5fcfd"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyOTQzNjE3OnYy", "diffSide": "RIGHT", "path": "documentation/modules/ROOT/pages/integrations/tracing.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo1Mjo0MFrOIIWiGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo1Mjo0MFrOIIWiGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYyODY5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * writes the record into the database\n          \n          \n            \n            * write the record into the database", "url": "https://github.com/debezium/debezium/pull/2016#discussion_r545628699", "createdAt": "2020-12-18T07:52:40Z", "author": {"login": "gunnarmorling"}, "path": "documentation/modules/ROOT/pages/integrations/tracing.adoc", "diffHunk": "@@ -0,0 +1,101 @@\n+[id=\"distributed-tracing\"]\n+= Distributed Tracing\n+\n+:toc:\n+:toc-placement: macro\n+:linkattrs:\n+:icons: font\n+:source-highlighter: highlight.js\n+\n+toc::[]\n+\n+== Overview\n+\n+Observability is an important aspect of microservice-oriented applications.\n+One of the key ingeredients for observability is https://microservices.io/patterns/observability/distributed-tracing.html[distributed tracing].\n+\n+It is necessary to provide additional precautions when an application writes a record to a database that is later processed by Debezium.\n+The active trace is effectively demarcated by the write to the database.\n+If we want Debezium to join the larger scope application tracer we need to pass the trace metadata to Debezium.\n+\n+The tracing support is added to Debezium through https://opentracing.io/[OpenTracing] specification.\n+It is also necessary to provide a client implementing the specification.\n+Debezium was tested with https://www.jaegertracing.io/[Jaeger] implementation.\n+\n+[WARNING]\n+====\n+Neither specification JAR files nor Jaeger client are part of the Debezium Connect image.\n+The user either needs to extend the image with them or can use the https://strimzi.io/[Strimzi] Kafka image.\n+In that case, the tracing of Kafka producer and consumer is also available.\n+\n+See compose file of https://github.com/debezium/debezium-examples/tree/master/outbox[Outbox example].\n+====\n+\n+== ActivateTracingSpan SMT\n+\n+The main implementation point of tracing in Debezium is `ActivateTracingSpan` SMT.\n+In this case, the application writing to a database is responsible for providing tracing span context.\n+The writer should have span context inject into `java.util.Properties` instance that is serialized then serialized and written to the database as a distinct field of the table.\n+\n+If the span context is not provided then the SMT will create a new span.\n+In this case, Debezium operations together with metadata will be traced but will not be connected to business transaction traces to enable end-to-end testing.\n+\n+When this SMT is invoked with a message then it will:\n+\n+* extract parent span context if present in the message\n+* create event `db-log-write` span context with the start timestamp set to the database log write timestamp\n+* insert fields from `source` block into the span as *tags*\n+* create processing `debezium-read` span as a child of `db-log-write` span with the start timestamp set to the processing time of the even\n+* insert fields from envelope such as `op` into the processing span as *tags*\n+* injects the processing span context into message headers\n+\n+=== Kafka Producer tracing\n+\n+Optionally it is possible to enable tracing at the Kafka producer level.\n+If enabled then when the message is being written to the Kafka broker the producer will extract Debezium's processing span context from the Kafka message headers, create a new child span and record information about the write to the broker.\n+Then it injects the new span into the message headers so a consumer of the message can restore the trace and resume end-to-end tracing.\n+\n+=== Configuration options\n+\n+[cols=\"65%a,>15%a,>20%\"]\n+|===\n+|Configuration property\n+|Type\n+|Default\n+\n+|`tracing.span.context.field`::\n+The name of the field containing span context. +\n++\n+_The sender must write the span context into the database column as a serialized instance of `java.util.Properties` with injected span context._\n+|string\n+|tracingspancontext\n+\n+|`tracing.operation.name`::\n+The operation name representing the Debezium processing span. +\n+|string\n+|debezium-read\n+\n+|`tracing.with.context.field.only`::\n+Only events that have serialized context field should be traced.\n++\n+_If set to `true` then tracing span will be created only for events with associated tracing span context field.\n+If set to `false` then the tracing span is created for all incoming events regardless of having associated span context._\n+|boolean\n+|false\n+\n+|===\n+\n+== Outbox Extension\n+\n+Outbox extension provides the additional operations necessary for tracing context propagation out-of-the-box.\n+It provides `tracingspancontext` field in an outbox table that is used as the vehicle to pass span context from service using the outbox extension to a Debezium connector.\n+\n+When an outbox even is emitted the extension will:\n+\n+* creates a new `outbox-write` span as a child of current active span\n+* injects the span context into that `java.util.Properties` instance that is serialized into the `tracingspancontext` column\n+* writes the record into the database", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe54ef31d684ae822ee56aaee7c050593dd5fcfd"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyOTQzNjQ2OnYy", "diffSide": "RIGHT", "path": "documentation/modules/ROOT/pages/integrations/tracing.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo1Mjo0NlrOIIWiQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo1Mjo0NlrOIIWiQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYyODczOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * injects the span context into that `java.util.Properties` instance that is serialized into the `tracingspancontext` column\n          \n          \n            \n            * inject the span context into that `java.util.Properties` instance that is serialized into the `tracingspancontext` column", "url": "https://github.com/debezium/debezium/pull/2016#discussion_r545628739", "createdAt": "2020-12-18T07:52:46Z", "author": {"login": "gunnarmorling"}, "path": "documentation/modules/ROOT/pages/integrations/tracing.adoc", "diffHunk": "@@ -0,0 +1,101 @@\n+[id=\"distributed-tracing\"]\n+= Distributed Tracing\n+\n+:toc:\n+:toc-placement: macro\n+:linkattrs:\n+:icons: font\n+:source-highlighter: highlight.js\n+\n+toc::[]\n+\n+== Overview\n+\n+Observability is an important aspect of microservice-oriented applications.\n+One of the key ingeredients for observability is https://microservices.io/patterns/observability/distributed-tracing.html[distributed tracing].\n+\n+It is necessary to provide additional precautions when an application writes a record to a database that is later processed by Debezium.\n+The active trace is effectively demarcated by the write to the database.\n+If we want Debezium to join the larger scope application tracer we need to pass the trace metadata to Debezium.\n+\n+The tracing support is added to Debezium through https://opentracing.io/[OpenTracing] specification.\n+It is also necessary to provide a client implementing the specification.\n+Debezium was tested with https://www.jaegertracing.io/[Jaeger] implementation.\n+\n+[WARNING]\n+====\n+Neither specification JAR files nor Jaeger client are part of the Debezium Connect image.\n+The user either needs to extend the image with them or can use the https://strimzi.io/[Strimzi] Kafka image.\n+In that case, the tracing of Kafka producer and consumer is also available.\n+\n+See compose file of https://github.com/debezium/debezium-examples/tree/master/outbox[Outbox example].\n+====\n+\n+== ActivateTracingSpan SMT\n+\n+The main implementation point of tracing in Debezium is `ActivateTracingSpan` SMT.\n+In this case, the application writing to a database is responsible for providing tracing span context.\n+The writer should have span context inject into `java.util.Properties` instance that is serialized then serialized and written to the database as a distinct field of the table.\n+\n+If the span context is not provided then the SMT will create a new span.\n+In this case, Debezium operations together with metadata will be traced but will not be connected to business transaction traces to enable end-to-end testing.\n+\n+When this SMT is invoked with a message then it will:\n+\n+* extract parent span context if present in the message\n+* create event `db-log-write` span context with the start timestamp set to the database log write timestamp\n+* insert fields from `source` block into the span as *tags*\n+* create processing `debezium-read` span as a child of `db-log-write` span with the start timestamp set to the processing time of the even\n+* insert fields from envelope such as `op` into the processing span as *tags*\n+* injects the processing span context into message headers\n+\n+=== Kafka Producer tracing\n+\n+Optionally it is possible to enable tracing at the Kafka producer level.\n+If enabled then when the message is being written to the Kafka broker the producer will extract Debezium's processing span context from the Kafka message headers, create a new child span and record information about the write to the broker.\n+Then it injects the new span into the message headers so a consumer of the message can restore the trace and resume end-to-end tracing.\n+\n+=== Configuration options\n+\n+[cols=\"65%a,>15%a,>20%\"]\n+|===\n+|Configuration property\n+|Type\n+|Default\n+\n+|`tracing.span.context.field`::\n+The name of the field containing span context. +\n++\n+_The sender must write the span context into the database column as a serialized instance of `java.util.Properties` with injected span context._\n+|string\n+|tracingspancontext\n+\n+|`tracing.operation.name`::\n+The operation name representing the Debezium processing span. +\n+|string\n+|debezium-read\n+\n+|`tracing.with.context.field.only`::\n+Only events that have serialized context field should be traced.\n++\n+_If set to `true` then tracing span will be created only for events with associated tracing span context field.\n+If set to `false` then the tracing span is created for all incoming events regardless of having associated span context._\n+|boolean\n+|false\n+\n+|===\n+\n+== Outbox Extension\n+\n+Outbox extension provides the additional operations necessary for tracing context propagation out-of-the-box.\n+It provides `tracingspancontext` field in an outbox table that is used as the vehicle to pass span context from service using the outbox extension to a Debezium connector.\n+\n+When an outbox even is emitted the extension will:\n+\n+* creates a new `outbox-write` span as a child of current active span\n+* injects the span context into that `java.util.Properties` instance that is serialized into the `tracingspancontext` column", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe54ef31d684ae822ee56aaee7c050593dd5fcfd"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyOTQzNjc1OnYy", "diffSide": "RIGHT", "path": "documentation/modules/ROOT/pages/integrations/tracing.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo1Mjo1M1rOIIWicQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo1Mjo1M1rOIIWicQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYyODc4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * creates a new `outbox-write` span as a child of current active span\n          \n          \n            \n            * create a new `outbox-write` span as a child of current active span", "url": "https://github.com/debezium/debezium/pull/2016#discussion_r545628785", "createdAt": "2020-12-18T07:52:53Z", "author": {"login": "gunnarmorling"}, "path": "documentation/modules/ROOT/pages/integrations/tracing.adoc", "diffHunk": "@@ -0,0 +1,101 @@\n+[id=\"distributed-tracing\"]\n+= Distributed Tracing\n+\n+:toc:\n+:toc-placement: macro\n+:linkattrs:\n+:icons: font\n+:source-highlighter: highlight.js\n+\n+toc::[]\n+\n+== Overview\n+\n+Observability is an important aspect of microservice-oriented applications.\n+One of the key ingeredients for observability is https://microservices.io/patterns/observability/distributed-tracing.html[distributed tracing].\n+\n+It is necessary to provide additional precautions when an application writes a record to a database that is later processed by Debezium.\n+The active trace is effectively demarcated by the write to the database.\n+If we want Debezium to join the larger scope application tracer we need to pass the trace metadata to Debezium.\n+\n+The tracing support is added to Debezium through https://opentracing.io/[OpenTracing] specification.\n+It is also necessary to provide a client implementing the specification.\n+Debezium was tested with https://www.jaegertracing.io/[Jaeger] implementation.\n+\n+[WARNING]\n+====\n+Neither specification JAR files nor Jaeger client are part of the Debezium Connect image.\n+The user either needs to extend the image with them or can use the https://strimzi.io/[Strimzi] Kafka image.\n+In that case, the tracing of Kafka producer and consumer is also available.\n+\n+See compose file of https://github.com/debezium/debezium-examples/tree/master/outbox[Outbox example].\n+====\n+\n+== ActivateTracingSpan SMT\n+\n+The main implementation point of tracing in Debezium is `ActivateTracingSpan` SMT.\n+In this case, the application writing to a database is responsible for providing tracing span context.\n+The writer should have span context inject into `java.util.Properties` instance that is serialized then serialized and written to the database as a distinct field of the table.\n+\n+If the span context is not provided then the SMT will create a new span.\n+In this case, Debezium operations together with metadata will be traced but will not be connected to business transaction traces to enable end-to-end testing.\n+\n+When this SMT is invoked with a message then it will:\n+\n+* extract parent span context if present in the message\n+* create event `db-log-write` span context with the start timestamp set to the database log write timestamp\n+* insert fields from `source` block into the span as *tags*\n+* create processing `debezium-read` span as a child of `db-log-write` span with the start timestamp set to the processing time of the even\n+* insert fields from envelope such as `op` into the processing span as *tags*\n+* injects the processing span context into message headers\n+\n+=== Kafka Producer tracing\n+\n+Optionally it is possible to enable tracing at the Kafka producer level.\n+If enabled then when the message is being written to the Kafka broker the producer will extract Debezium's processing span context from the Kafka message headers, create a new child span and record information about the write to the broker.\n+Then it injects the new span into the message headers so a consumer of the message can restore the trace and resume end-to-end tracing.\n+\n+=== Configuration options\n+\n+[cols=\"65%a,>15%a,>20%\"]\n+|===\n+|Configuration property\n+|Type\n+|Default\n+\n+|`tracing.span.context.field`::\n+The name of the field containing span context. +\n++\n+_The sender must write the span context into the database column as a serialized instance of `java.util.Properties` with injected span context._\n+|string\n+|tracingspancontext\n+\n+|`tracing.operation.name`::\n+The operation name representing the Debezium processing span. +\n+|string\n+|debezium-read\n+\n+|`tracing.with.context.field.only`::\n+Only events that have serialized context field should be traced.\n++\n+_If set to `true` then tracing span will be created only for events with associated tracing span context field.\n+If set to `false` then the tracing span is created for all incoming events regardless of having associated span context._\n+|boolean\n+|false\n+\n+|===\n+\n+== Outbox Extension\n+\n+Outbox extension provides the additional operations necessary for tracing context propagation out-of-the-box.\n+It provides `tracingspancontext` field in an outbox table that is used as the vehicle to pass span context from service using the outbox extension to a Debezium connector.\n+\n+When an outbox even is emitted the extension will:\n+\n+* creates a new `outbox-write` span as a child of current active span", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe54ef31d684ae822ee56aaee7c050593dd5fcfd"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyOTQzODYyOnYy", "diffSide": "RIGHT", "path": "documentation/modules/ROOT/pages/integrations/tracing.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo1MzozN1rOIIWjmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo1MzozN1rOIIWjmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYyOTA4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Event Router acts as an Outbox Extension counterpart, executes the same steps as `ActivateTracingSpan` SMT, and is used instead of it.\n          \n          \n            \n            The Event Router SMT acts as an Outbox Extension counterpart, it executes the same steps as the `ActivateTracingSpan` SMT, and is used instead of it.", "url": "https://github.com/debezium/debezium/pull/2016#discussion_r545629080", "createdAt": "2020-12-18T07:53:37Z", "author": {"login": "gunnarmorling"}, "path": "documentation/modules/ROOT/pages/integrations/tracing.adoc", "diffHunk": "@@ -0,0 +1,101 @@\n+[id=\"distributed-tracing\"]\n+= Distributed Tracing\n+\n+:toc:\n+:toc-placement: macro\n+:linkattrs:\n+:icons: font\n+:source-highlighter: highlight.js\n+\n+toc::[]\n+\n+== Overview\n+\n+Observability is an important aspect of microservice-oriented applications.\n+One of the key ingeredients for observability is https://microservices.io/patterns/observability/distributed-tracing.html[distributed tracing].\n+\n+It is necessary to provide additional precautions when an application writes a record to a database that is later processed by Debezium.\n+The active trace is effectively demarcated by the write to the database.\n+If we want Debezium to join the larger scope application tracer we need to pass the trace metadata to Debezium.\n+\n+The tracing support is added to Debezium through https://opentracing.io/[OpenTracing] specification.\n+It is also necessary to provide a client implementing the specification.\n+Debezium was tested with https://www.jaegertracing.io/[Jaeger] implementation.\n+\n+[WARNING]\n+====\n+Neither specification JAR files nor Jaeger client are part of the Debezium Connect image.\n+The user either needs to extend the image with them or can use the https://strimzi.io/[Strimzi] Kafka image.\n+In that case, the tracing of Kafka producer and consumer is also available.\n+\n+See compose file of https://github.com/debezium/debezium-examples/tree/master/outbox[Outbox example].\n+====\n+\n+== ActivateTracingSpan SMT\n+\n+The main implementation point of tracing in Debezium is `ActivateTracingSpan` SMT.\n+In this case, the application writing to a database is responsible for providing tracing span context.\n+The writer should have span context inject into `java.util.Properties` instance that is serialized then serialized and written to the database as a distinct field of the table.\n+\n+If the span context is not provided then the SMT will create a new span.\n+In this case, Debezium operations together with metadata will be traced but will not be connected to business transaction traces to enable end-to-end testing.\n+\n+When this SMT is invoked with a message then it will:\n+\n+* extract parent span context if present in the message\n+* create event `db-log-write` span context with the start timestamp set to the database log write timestamp\n+* insert fields from `source` block into the span as *tags*\n+* create processing `debezium-read` span as a child of `db-log-write` span with the start timestamp set to the processing time of the even\n+* insert fields from envelope such as `op` into the processing span as *tags*\n+* injects the processing span context into message headers\n+\n+=== Kafka Producer tracing\n+\n+Optionally it is possible to enable tracing at the Kafka producer level.\n+If enabled then when the message is being written to the Kafka broker the producer will extract Debezium's processing span context from the Kafka message headers, create a new child span and record information about the write to the broker.\n+Then it injects the new span into the message headers so a consumer of the message can restore the trace and resume end-to-end tracing.\n+\n+=== Configuration options\n+\n+[cols=\"65%a,>15%a,>20%\"]\n+|===\n+|Configuration property\n+|Type\n+|Default\n+\n+|`tracing.span.context.field`::\n+The name of the field containing span context. +\n++\n+_The sender must write the span context into the database column as a serialized instance of `java.util.Properties` with injected span context._\n+|string\n+|tracingspancontext\n+\n+|`tracing.operation.name`::\n+The operation name representing the Debezium processing span. +\n+|string\n+|debezium-read\n+\n+|`tracing.with.context.field.only`::\n+Only events that have serialized context field should be traced.\n++\n+_If set to `true` then tracing span will be created only for events with associated tracing span context field.\n+If set to `false` then the tracing span is created for all incoming events regardless of having associated span context._\n+|boolean\n+|false\n+\n+|===\n+\n+== Outbox Extension\n+\n+Outbox extension provides the additional operations necessary for tracing context propagation out-of-the-box.\n+It provides `tracingspancontext` field in an outbox table that is used as the vehicle to pass span context from service using the outbox extension to a Debezium connector.\n+\n+When an outbox even is emitted the extension will:\n+\n+* creates a new `outbox-write` span as a child of current active span\n+* injects the span context into that `java.util.Properties` instance that is serialized into the `tracingspancontext` column\n+* writes the record into the database\n+\n+== Event Router SMT\n+\n+Event Router acts as an Outbox Extension counterpart, executes the same steps as `ActivateTracingSpan` SMT, and is used instead of it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe54ef31d684ae822ee56aaee7c050593dd5fcfd"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyOTQzOTc5OnYy", "diffSide": "RIGHT", "path": "documentation/modules/ROOT/pages/integrations/tracing.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo1Mzo1OVrOIIWkQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo1Mzo1OVrOIIWkQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYyOTI0OA==", "bodyText": "Can you add a link to its doc page here (same for the next section).", "url": "https://github.com/debezium/debezium/pull/2016#discussion_r545629248", "createdAt": "2020-12-18T07:53:59Z", "author": {"login": "gunnarmorling"}, "path": "documentation/modules/ROOT/pages/integrations/tracing.adoc", "diffHunk": "@@ -0,0 +1,101 @@\n+[id=\"distributed-tracing\"]\n+= Distributed Tracing\n+\n+:toc:\n+:toc-placement: macro\n+:linkattrs:\n+:icons: font\n+:source-highlighter: highlight.js\n+\n+toc::[]\n+\n+== Overview\n+\n+Observability is an important aspect of microservice-oriented applications.\n+One of the key ingeredients for observability is https://microservices.io/patterns/observability/distributed-tracing.html[distributed tracing].\n+\n+It is necessary to provide additional precautions when an application writes a record to a database that is later processed by Debezium.\n+The active trace is effectively demarcated by the write to the database.\n+If we want Debezium to join the larger scope application tracer we need to pass the trace metadata to Debezium.\n+\n+The tracing support is added to Debezium through https://opentracing.io/[OpenTracing] specification.\n+It is also necessary to provide a client implementing the specification.\n+Debezium was tested with https://www.jaegertracing.io/[Jaeger] implementation.\n+\n+[WARNING]\n+====\n+Neither specification JAR files nor Jaeger client are part of the Debezium Connect image.\n+The user either needs to extend the image with them or can use the https://strimzi.io/[Strimzi] Kafka image.\n+In that case, the tracing of Kafka producer and consumer is also available.\n+\n+See compose file of https://github.com/debezium/debezium-examples/tree/master/outbox[Outbox example].\n+====\n+\n+== ActivateTracingSpan SMT\n+\n+The main implementation point of tracing in Debezium is `ActivateTracingSpan` SMT.\n+In this case, the application writing to a database is responsible for providing tracing span context.\n+The writer should have span context inject into `java.util.Properties` instance that is serialized then serialized and written to the database as a distinct field of the table.\n+\n+If the span context is not provided then the SMT will create a new span.\n+In this case, Debezium operations together with metadata will be traced but will not be connected to business transaction traces to enable end-to-end testing.\n+\n+When this SMT is invoked with a message then it will:\n+\n+* extract parent span context if present in the message\n+* create event `db-log-write` span context with the start timestamp set to the database log write timestamp\n+* insert fields from `source` block into the span as *tags*\n+* create processing `debezium-read` span as a child of `db-log-write` span with the start timestamp set to the processing time of the even\n+* insert fields from envelope such as `op` into the processing span as *tags*\n+* injects the processing span context into message headers\n+\n+=== Kafka Producer tracing\n+\n+Optionally it is possible to enable tracing at the Kafka producer level.\n+If enabled then when the message is being written to the Kafka broker the producer will extract Debezium's processing span context from the Kafka message headers, create a new child span and record information about the write to the broker.\n+Then it injects the new span into the message headers so a consumer of the message can restore the trace and resume end-to-end tracing.\n+\n+=== Configuration options\n+\n+[cols=\"65%a,>15%a,>20%\"]\n+|===\n+|Configuration property\n+|Type\n+|Default\n+\n+|`tracing.span.context.field`::\n+The name of the field containing span context. +\n++\n+_The sender must write the span context into the database column as a serialized instance of `java.util.Properties` with injected span context._\n+|string\n+|tracingspancontext\n+\n+|`tracing.operation.name`::\n+The operation name representing the Debezium processing span. +\n+|string\n+|debezium-read\n+\n+|`tracing.with.context.field.only`::\n+Only events that have serialized context field should be traced.\n++\n+_If set to `true` then tracing span will be created only for events with associated tracing span context field.\n+If set to `false` then the tracing span is created for all incoming events regardless of having associated span context._\n+|boolean\n+|false\n+\n+|===\n+\n+== Outbox Extension", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe54ef31d684ae822ee56aaee7c050593dd5fcfd"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4105, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}