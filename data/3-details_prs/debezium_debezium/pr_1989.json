{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxNzU5MDQ1", "number": 1989, "title": "DBZ-1818 DBZ-559 Integration with OpenTracing", "bodyText": "https://issues.redhat.com/browse/DBZ-1818\nhttps://issues.redhat.com/browse/DBZ-559\nDemoable with debezium/debezium-examples#138\nHigh-level description\n\na new SMT ActivateOpenTracingSpan is introduced. This SMT creates a new span and adds Debezium message meatadat as tags to it. Then it is recorded into Connect headers from where it can be picked up by subsequent actions like KafkaProducerInterceptor for adding new spans.\nthe SMT is also able to obtain a parent span from a field in an after fiield if present\nOutbox extension was modified to provide such a field in the outbox table", "createdAt": "2020-12-03T12:57:07Z", "url": "https://github.com/debezium/debezium/pull/1989", "merged": true, "mergeCommit": {"oid": "8e333d9b1d284cec801eebd23f30afdce4783ce7"}, "closed": true, "closedAt": "2020-12-08T15:09:10Z", "author": {"login": "jpechane"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdiisSCAH2gAyNTMxNzU5MDQ1OjlkYzQyZTM0OGZlZDQ3YjZjYmJhZWI3ZDAxYTg4ZWFmZWNlOTAwZmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkKAimgFqTU0NzIyNDIwMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9dc42e348fed47b6cbbaeb7d01a88eafece900fa", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/9dc42e348fed47b6cbbaeb7d01a88eafece900fa", "committedDate": "2020-12-03T12:55:48Z", "message": "DBZ-1818 DBZ-559 Integration with OpenTracing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1MDA0MDU3", "url": "https://github.com/debezium/debezium/pull/1989#pullrequestreview-545004057", "createdAt": "2020-12-04T14:26:53Z", "commit": {"oid": "9dc42e348fed47b6cbbaeb7d01a88eafece900fa"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNDoyNjo1M1rOH_TM9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNDo0NTozMFrOH_T_3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEzNjk1MQ==", "bodyText": "I'd suggest just tracingSpan. Decouples from any changes by moving to OpenTelemetry later on.", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r536136951", "createdAt": "2020-12-04T14:26:53Z", "author": {"login": "gunnarmorling"}, "path": "debezium-quarkus-outbox/integration-tests/src/test/java/io/debezium/outbox/quarkus/it/OutboxTest.java", "diffHunk": "@@ -63,7 +63,7 @@ public void testOutboxEntityMetamodelExists() throws Exception {\n     public void firedEventGetsPersistedInOutboxTable() {\n         myService.doSomething();\n \n-        Query q = entityManager.createNativeQuery(\"SELECT CAST(id as varchar), aggregateId, aggregateType, type, timestamp, payload FROM OutboxEvent\");\n+        Query q = entityManager.createNativeQuery(\"SELECT CAST(id as varchar), aggregateId, aggregateType, type, timestamp, payload, openTracingSpan FROM OutboxEvent\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dc42e348fed47b6cbbaeb7d01a88eafece900fa"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE0Nzg4NA==", "bodyText": "I still wished this was an optional feature. It add a (small) overhead after all, and someone without the tracing infrastructure in place might not be willing to pay that overhead.", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r536147884", "createdAt": "2020-12-04T14:42:36Z", "author": {"login": "gunnarmorling"}, "path": "debezium-quarkus-outbox/runtime/pom.xml", "diffHunk": "@@ -23,6 +23,10 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-jackson</artifactId>\n         </dependency>\n+        <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dc42e348fed47b6cbbaeb7d01a88eafece900fa"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE0OTk4MA==", "bodyText": "I don't quite understand the advantage of that separate SMT yet, when not using the outbox pattern. Won't the producer interceptor effecitively do the same?\nThat said, assuming for a second the separate SMT is useful, I'd still prefer this to be more unified experience for the user of the outbox routing SMT. I.e. they should have only to use a single SMT (the router) and be done. It may imply some duplication/complexity for ourselves, but it's easier for the user.", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r536149980", "createdAt": "2020-12-04T14:45:30Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/transforms/tracing/ActivateOpenTracingSpan.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.transforms.tracing;\n+\n+import java.util.Map;\n+\n+import org.apache.kafka.common.config.ConfigDef;\n+import org.apache.kafka.connect.connector.ConnectRecord;\n+import org.apache.kafka.connect.data.Schema;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.connect.errors.ConnectException;\n+import org.apache.kafka.connect.transforms.Transformation;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.debezium.config.Configuration;\n+import io.debezium.config.Field;\n+import io.debezium.data.Envelope;\n+import io.debezium.transforms.SmtManager;\n+import io.opentracing.Scope;\n+import io.opentracing.Span;\n+import io.opentracing.Tracer;\n+import io.opentracing.Tracer.SpanBuilder;\n+import io.opentracing.propagation.Format;\n+import io.opentracing.util.GlobalTracer;\n+\n+/**\n+ * This SMT enables integration with an OpenTracing system.\n+ * The SMT creates a OpenTracing span and enriches it with metadata from envelope and source info block.<br/>\n+ * It is possible to connect the span to a parent span created by a business application.\n+ * The application then needs to export its OpenTracing active span into a database field.\n+ * The SMT looks for a predefined field name in the {@code after} block\n+ * and when found it extracts the parent span from it.<br>\n+ * \n+ * See {@link EventDispatcher} for example of such implementation.\n+ * \n+ *\n+ * @param <R> the subtype of {@link ConnectRecord} on which this transformation will operate\n+ * @author Jiri Pechanec\n+ */\n+public class ActivateOpenTracingSpan<R extends ConnectRecord<R>> implements Transformation<R> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dc42e348fed47b6cbbaeb7d01a88eafece900fa"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1MTI2NTIz", "url": "https://github.com/debezium/debezium/pull/1989#pullrequestreview-545126523", "createdAt": "2020-12-04T16:48:29Z", "commit": {"oid": "9dc42e348fed47b6cbbaeb7d01a88eafece900fa"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjo0ODoyOVrOH_ZNrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjo1MToyMFrOH_ZVPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzNTQzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .withDescription(\"The name of the field notaining java.util.Properties representation of OpenTracing span.\");\n          \n          \n            \n                        .withDescription(\"The name of the field containing java.util.Properties representation of OpenTracing span.\");\n          \n      \n    \n    \n  \n\n\"notaining\" should be a word though, meaning \"not containing\" ;)", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r536235436", "createdAt": "2020-12-04T16:48:29Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/transforms/tracing/ActivateOpenTracingSpan.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.transforms.tracing;\n+\n+import java.util.Map;\n+\n+import org.apache.kafka.common.config.ConfigDef;\n+import org.apache.kafka.connect.connector.ConnectRecord;\n+import org.apache.kafka.connect.data.Schema;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.connect.errors.ConnectException;\n+import org.apache.kafka.connect.transforms.Transformation;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.debezium.config.Configuration;\n+import io.debezium.config.Field;\n+import io.debezium.data.Envelope;\n+import io.debezium.transforms.SmtManager;\n+import io.opentracing.Scope;\n+import io.opentracing.Span;\n+import io.opentracing.Tracer;\n+import io.opentracing.Tracer.SpanBuilder;\n+import io.opentracing.propagation.Format;\n+import io.opentracing.util.GlobalTracer;\n+\n+/**\n+ * This SMT enables integration with an OpenTracing system.\n+ * The SMT creates a OpenTracing span and enriches it with metadata from envelope and source info block.<br/>\n+ * It is possible to connect the span to a parent span created by a business application.\n+ * The application then needs to export its OpenTracing active span into a database field.\n+ * The SMT looks for a predefined field name in the {@code after} block\n+ * and when found it extracts the parent span from it.<br>\n+ * \n+ * See {@link EventDispatcher} for example of such implementation.\n+ * \n+ *\n+ * @param <R> the subtype of {@link ConnectRecord} on which this transformation will operate\n+ * @author Jiri Pechanec\n+ */\n+public class ActivateOpenTracingSpan<R extends ConnectRecord<R>> implements Transformation<R> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ActivateOpenTracingSpan.class);\n+\n+    private static final String DEFAULT_OPENTRACING_SPAN_VALUE = \"opentracingspan\";\n+    private static final String DEFAULT_OPENTRACING_OPERATION_NAME = \"debezium\";\n+\n+    private static final String TAG_PREFIX = \"debezium.\";\n+\n+    private static final Field OPENTRACING_SPAN_FIELD = Field.create(\"opentracing.span.field\")\n+            .withDisplayName(\"OpenTracing Span Field\")\n+            .withType(ConfigDef.Type.STRING)\n+            .withWidth(ConfigDef.Width.MEDIUM)\n+            .withImportance(ConfigDef.Importance.HIGH)\n+            .withDefault(DEFAULT_OPENTRACING_SPAN_VALUE)\n+            .withDescription(\"The name of the field notaining java.util.Properties representation of OpenTracing span.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dc42e348fed47b6cbbaeb7d01a88eafece900fa"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzNTUzNg==", "bodyText": "Wrong description.", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r536235536", "createdAt": "2020-12-04T16:48:40Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/transforms/tracing/ActivateOpenTracingSpan.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.transforms.tracing;\n+\n+import java.util.Map;\n+\n+import org.apache.kafka.common.config.ConfigDef;\n+import org.apache.kafka.connect.connector.ConnectRecord;\n+import org.apache.kafka.connect.data.Schema;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.connect.errors.ConnectException;\n+import org.apache.kafka.connect.transforms.Transformation;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.debezium.config.Configuration;\n+import io.debezium.config.Field;\n+import io.debezium.data.Envelope;\n+import io.debezium.transforms.SmtManager;\n+import io.opentracing.Scope;\n+import io.opentracing.Span;\n+import io.opentracing.Tracer;\n+import io.opentracing.Tracer.SpanBuilder;\n+import io.opentracing.propagation.Format;\n+import io.opentracing.util.GlobalTracer;\n+\n+/**\n+ * This SMT enables integration with an OpenTracing system.\n+ * The SMT creates a OpenTracing span and enriches it with metadata from envelope and source info block.<br/>\n+ * It is possible to connect the span to a parent span created by a business application.\n+ * The application then needs to export its OpenTracing active span into a database field.\n+ * The SMT looks for a predefined field name in the {@code after} block\n+ * and when found it extracts the parent span from it.<br>\n+ * \n+ * See {@link EventDispatcher} for example of such implementation.\n+ * \n+ *\n+ * @param <R> the subtype of {@link ConnectRecord} on which this transformation will operate\n+ * @author Jiri Pechanec\n+ */\n+public class ActivateOpenTracingSpan<R extends ConnectRecord<R>> implements Transformation<R> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ActivateOpenTracingSpan.class);\n+\n+    private static final String DEFAULT_OPENTRACING_SPAN_VALUE = \"opentracingspan\";\n+    private static final String DEFAULT_OPENTRACING_OPERATION_NAME = \"debezium\";\n+\n+    private static final String TAG_PREFIX = \"debezium.\";\n+\n+    private static final Field OPENTRACING_SPAN_FIELD = Field.create(\"opentracing.span.field\")\n+            .withDisplayName(\"OpenTracing Span Field\")\n+            .withType(ConfigDef.Type.STRING)\n+            .withWidth(ConfigDef.Width.MEDIUM)\n+            .withImportance(ConfigDef.Importance.HIGH)\n+            .withDefault(DEFAULT_OPENTRACING_SPAN_VALUE)\n+            .withDescription(\"The name of the field notaining java.util.Properties representation of OpenTracing span.\");\n+\n+    private static final Field OPENTRACING_OOPERATION_NAME = Field.create(\"opentracing.operation.name\")\n+            .withDisplayName(\"OpenTracing Operation Name\")\n+            .withType(ConfigDef.Type.STRING)\n+            .withWidth(ConfigDef.Width.MEDIUM)\n+            .withImportance(ConfigDef.Importance.HIGH)\n+            .withDefault(DEFAULT_OPENTRACING_OPERATION_NAME)\n+            .withDescription(\"The name of the field notaining java.util.Properties representation of OpenTracing span.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dc42e348fed47b6cbbaeb7d01a88eafece900fa"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzNjY2NA==", "bodyText": "So is this what's expected by those Kafka producer/consumer interceptors by default?", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r536236664", "createdAt": "2020-12-04T16:50:13Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/transforms/tracing/ActivateOpenTracingSpan.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.transforms.tracing;\n+\n+import java.util.Map;\n+\n+import org.apache.kafka.common.config.ConfigDef;\n+import org.apache.kafka.connect.connector.ConnectRecord;\n+import org.apache.kafka.connect.data.Schema;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.connect.errors.ConnectException;\n+import org.apache.kafka.connect.transforms.Transformation;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.debezium.config.Configuration;\n+import io.debezium.config.Field;\n+import io.debezium.data.Envelope;\n+import io.debezium.transforms.SmtManager;\n+import io.opentracing.Scope;\n+import io.opentracing.Span;\n+import io.opentracing.Tracer;\n+import io.opentracing.Tracer.SpanBuilder;\n+import io.opentracing.propagation.Format;\n+import io.opentracing.util.GlobalTracer;\n+\n+/**\n+ * This SMT enables integration with an OpenTracing system.\n+ * The SMT creates a OpenTracing span and enriches it with metadata from envelope and source info block.<br/>\n+ * It is possible to connect the span to a parent span created by a business application.\n+ * The application then needs to export its OpenTracing active span into a database field.\n+ * The SMT looks for a predefined field name in the {@code after} block\n+ * and when found it extracts the parent span from it.<br>\n+ * \n+ * See {@link EventDispatcher} for example of such implementation.\n+ * \n+ *\n+ * @param <R> the subtype of {@link ConnectRecord} on which this transformation will operate\n+ * @author Jiri Pechanec\n+ */\n+public class ActivateOpenTracingSpan<R extends ConnectRecord<R>> implements Transformation<R> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ActivateOpenTracingSpan.class);\n+\n+    private static final String DEFAULT_OPENTRACING_SPAN_VALUE = \"opentracingspan\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dc42e348fed47b6cbbaeb7d01a88eafece900fa"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzNjgyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Field OPENTRACING_OOPERATION_NAME = Field.create(\"opentracing.operation.name\")\n          \n          \n            \n                private static final Field OPENTRACING_OPERATION_NAME = Field.create(\"opentracing.operation.name\")", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r536236825", "createdAt": "2020-12-04T16:50:27Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/transforms/tracing/ActivateOpenTracingSpan.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.transforms.tracing;\n+\n+import java.util.Map;\n+\n+import org.apache.kafka.common.config.ConfigDef;\n+import org.apache.kafka.connect.connector.ConnectRecord;\n+import org.apache.kafka.connect.data.Schema;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.connect.errors.ConnectException;\n+import org.apache.kafka.connect.transforms.Transformation;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.debezium.config.Configuration;\n+import io.debezium.config.Field;\n+import io.debezium.data.Envelope;\n+import io.debezium.transforms.SmtManager;\n+import io.opentracing.Scope;\n+import io.opentracing.Span;\n+import io.opentracing.Tracer;\n+import io.opentracing.Tracer.SpanBuilder;\n+import io.opentracing.propagation.Format;\n+import io.opentracing.util.GlobalTracer;\n+\n+/**\n+ * This SMT enables integration with an OpenTracing system.\n+ * The SMT creates a OpenTracing span and enriches it with metadata from envelope and source info block.<br/>\n+ * It is possible to connect the span to a parent span created by a business application.\n+ * The application then needs to export its OpenTracing active span into a database field.\n+ * The SMT looks for a predefined field name in the {@code after} block\n+ * and when found it extracts the parent span from it.<br>\n+ * \n+ * See {@link EventDispatcher} for example of such implementation.\n+ * \n+ *\n+ * @param <R> the subtype of {@link ConnectRecord} on which this transformation will operate\n+ * @author Jiri Pechanec\n+ */\n+public class ActivateOpenTracingSpan<R extends ConnectRecord<R>> implements Transformation<R> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ActivateOpenTracingSpan.class);\n+\n+    private static final String DEFAULT_OPENTRACING_SPAN_VALUE = \"opentracingspan\";\n+    private static final String DEFAULT_OPENTRACING_OPERATION_NAME = \"debezium\";\n+\n+    private static final String TAG_PREFIX = \"debezium.\";\n+\n+    private static final Field OPENTRACING_SPAN_FIELD = Field.create(\"opentracing.span.field\")\n+            .withDisplayName(\"OpenTracing Span Field\")\n+            .withType(ConfigDef.Type.STRING)\n+            .withWidth(ConfigDef.Width.MEDIUM)\n+            .withImportance(ConfigDef.Importance.HIGH)\n+            .withDefault(DEFAULT_OPENTRACING_SPAN_VALUE)\n+            .withDescription(\"The name of the field notaining java.util.Properties representation of OpenTracing span.\");\n+\n+    private static final Field OPENTRACING_OOPERATION_NAME = Field.create(\"opentracing.operation.name\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dc42e348fed47b6cbbaeb7d01a88eafece900fa"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzNzM3Mg==", "bodyText": "I'd also avoid mentioning the Java type; rather \"map\" in OT terms?", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r536237372", "createdAt": "2020-12-04T16:51:20Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/transforms/tracing/ActivateOpenTracingSpan.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.transforms.tracing;\n+\n+import java.util.Map;\n+\n+import org.apache.kafka.common.config.ConfigDef;\n+import org.apache.kafka.connect.connector.ConnectRecord;\n+import org.apache.kafka.connect.data.Schema;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.connect.errors.ConnectException;\n+import org.apache.kafka.connect.transforms.Transformation;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.debezium.config.Configuration;\n+import io.debezium.config.Field;\n+import io.debezium.data.Envelope;\n+import io.debezium.transforms.SmtManager;\n+import io.opentracing.Scope;\n+import io.opentracing.Span;\n+import io.opentracing.Tracer;\n+import io.opentracing.Tracer.SpanBuilder;\n+import io.opentracing.propagation.Format;\n+import io.opentracing.util.GlobalTracer;\n+\n+/**\n+ * This SMT enables integration with an OpenTracing system.\n+ * The SMT creates a OpenTracing span and enriches it with metadata from envelope and source info block.<br/>\n+ * It is possible to connect the span to a parent span created by a business application.\n+ * The application then needs to export its OpenTracing active span into a database field.\n+ * The SMT looks for a predefined field name in the {@code after} block\n+ * and when found it extracts the parent span from it.<br>\n+ * \n+ * See {@link EventDispatcher} for example of such implementation.\n+ * \n+ *\n+ * @param <R> the subtype of {@link ConnectRecord} on which this transformation will operate\n+ * @author Jiri Pechanec\n+ */\n+public class ActivateOpenTracingSpan<R extends ConnectRecord<R>> implements Transformation<R> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ActivateOpenTracingSpan.class);\n+\n+    private static final String DEFAULT_OPENTRACING_SPAN_VALUE = \"opentracingspan\";\n+    private static final String DEFAULT_OPENTRACING_OPERATION_NAME = \"debezium\";\n+\n+    private static final String TAG_PREFIX = \"debezium.\";\n+\n+    private static final Field OPENTRACING_SPAN_FIELD = Field.create(\"opentracing.span.field\")\n+            .withDisplayName(\"OpenTracing Span Field\")\n+            .withType(ConfigDef.Type.STRING)\n+            .withWidth(ConfigDef.Width.MEDIUM)\n+            .withImportance(ConfigDef.Importance.HIGH)\n+            .withDefault(DEFAULT_OPENTRACING_SPAN_VALUE)\n+            .withDescription(\"The name of the field notaining java.util.Properties representation of OpenTracing span.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzNTQzNg=="}, "originalCommit": {"oid": "9dc42e348fed47b6cbbaeb7d01a88eafece900fa"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MDIwOTA4", "url": "https://github.com/debezium/debezium/pull/1989#pullrequestreview-546020908", "createdAt": "2020-12-07T10:36:27Z", "commit": {"oid": "9dc42e348fed47b6cbbaeb7d01a88eafece900fa"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMDozNjoyN1rOIAgR6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMDo1OTo1NVrOIAhOEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM5OTc4Nw==", "bodyText": "Did you mean \"span context\" here when you mentioned \"active span\" ?", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r537399787", "createdAt": "2020-12-07T10:36:27Z", "author": {"login": "jpkrohling"}, "path": "debezium-core/src/main/java/io/debezium/transforms/tracing/ActivateOpenTracingSpan.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.transforms.tracing;\n+\n+import java.util.Map;\n+\n+import org.apache.kafka.common.config.ConfigDef;\n+import org.apache.kafka.connect.connector.ConnectRecord;\n+import org.apache.kafka.connect.data.Schema;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.connect.errors.ConnectException;\n+import org.apache.kafka.connect.transforms.Transformation;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.debezium.config.Configuration;\n+import io.debezium.config.Field;\n+import io.debezium.data.Envelope;\n+import io.debezium.transforms.SmtManager;\n+import io.opentracing.Scope;\n+import io.opentracing.Span;\n+import io.opentracing.Tracer;\n+import io.opentracing.Tracer.SpanBuilder;\n+import io.opentracing.propagation.Format;\n+import io.opentracing.util.GlobalTracer;\n+\n+/**\n+ * This SMT enables integration with an OpenTracing system.\n+ * The SMT creates a OpenTracing span and enriches it with metadata from envelope and source info block.<br/>\n+ * It is possible to connect the span to a parent span created by a business application.\n+ * The application then needs to export its OpenTracing active span into a database field.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dc42e348fed47b6cbbaeb7d01a88eafece900fa"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQwMTY1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String DEFAULT_OPENTRACING_SPAN_VALUE = \"opentracingspan\";\n          \n          \n            \n                private static final String DEFAULT_TRACING_SPAN_VALUE = \"tracingspan\";\n          \n      \n    \n    \n  \n\nThis way, you can reuse the same fields in the future when using a different instrumentation (OpenTelemetry). The same comment applies to other changes in this file (and potentially elsewhere).", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r537401652", "createdAt": "2020-12-07T10:39:14Z", "author": {"login": "jpkrohling"}, "path": "debezium-core/src/main/java/io/debezium/transforms/tracing/ActivateOpenTracingSpan.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.transforms.tracing;\n+\n+import java.util.Map;\n+\n+import org.apache.kafka.common.config.ConfigDef;\n+import org.apache.kafka.connect.connector.ConnectRecord;\n+import org.apache.kafka.connect.data.Schema;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.connect.errors.ConnectException;\n+import org.apache.kafka.connect.transforms.Transformation;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.debezium.config.Configuration;\n+import io.debezium.config.Field;\n+import io.debezium.data.Envelope;\n+import io.debezium.transforms.SmtManager;\n+import io.opentracing.Scope;\n+import io.opentracing.Span;\n+import io.opentracing.Tracer;\n+import io.opentracing.Tracer.SpanBuilder;\n+import io.opentracing.propagation.Format;\n+import io.opentracing.util.GlobalTracer;\n+\n+/**\n+ * This SMT enables integration with an OpenTracing system.\n+ * The SMT creates a OpenTracing span and enriches it with metadata from envelope and source info block.<br/>\n+ * It is possible to connect the span to a parent span created by a business application.\n+ * The application then needs to export its OpenTracing active span into a database field.\n+ * The SMT looks for a predefined field name in the {@code after} block\n+ * and when found it extracts the parent span from it.<br>\n+ * \n+ * See {@link EventDispatcher} for example of such implementation.\n+ * \n+ *\n+ * @param <R> the subtype of {@link ConnectRecord} on which this transformation will operate\n+ * @author Jiri Pechanec\n+ */\n+public class ActivateOpenTracingSpan<R extends ConnectRecord<R>> implements Transformation<R> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ActivateOpenTracingSpan.class);\n+\n+    private static final String DEFAULT_OPENTRACING_SPAN_VALUE = \"opentracingspan\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dc42e348fed47b6cbbaeb7d01a88eafece900fa"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQwMjg2OA==", "bodyText": "Not sure I get this part. What's this map? Is it the serialized span context?", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r537402868", "createdAt": "2020-12-07T10:41:07Z", "author": {"login": "jpkrohling"}, "path": "debezium-core/src/main/java/io/debezium/transforms/tracing/ActivateOpenTracingSpan.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.transforms.tracing;\n+\n+import java.util.Map;\n+\n+import org.apache.kafka.common.config.ConfigDef;\n+import org.apache.kafka.connect.connector.ConnectRecord;\n+import org.apache.kafka.connect.data.Schema;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.connect.errors.ConnectException;\n+import org.apache.kafka.connect.transforms.Transformation;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.debezium.config.Configuration;\n+import io.debezium.config.Field;\n+import io.debezium.data.Envelope;\n+import io.debezium.transforms.SmtManager;\n+import io.opentracing.Scope;\n+import io.opentracing.Span;\n+import io.opentracing.Tracer;\n+import io.opentracing.Tracer.SpanBuilder;\n+import io.opentracing.propagation.Format;\n+import io.opentracing.util.GlobalTracer;\n+\n+/**\n+ * This SMT enables integration with an OpenTracing system.\n+ * The SMT creates a OpenTracing span and enriches it with metadata from envelope and source info block.<br/>\n+ * It is possible to connect the span to a parent span created by a business application.\n+ * The application then needs to export its OpenTracing active span into a database field.\n+ * The SMT looks for a predefined field name in the {@code after} block\n+ * and when found it extracts the parent span from it.<br>\n+ * \n+ * See {@link EventDispatcher} for example of such implementation.\n+ * \n+ *\n+ * @param <R> the subtype of {@link ConnectRecord} on which this transformation will operate\n+ * @author Jiri Pechanec\n+ */\n+public class ActivateOpenTracingSpan<R extends ConnectRecord<R>> implements Transformation<R> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ActivateOpenTracingSpan.class);\n+\n+    private static final String DEFAULT_OPENTRACING_SPAN_VALUE = \"opentracingspan\";\n+    private static final String DEFAULT_OPENTRACING_OPERATION_NAME = \"debezium\";\n+\n+    private static final String TAG_PREFIX = \"debezium.\";\n+\n+    private static final Field OPENTRACING_SPAN_FIELD = Field.create(\"opentracing.span.field\")\n+            .withDisplayName(\"OpenTracing Span Field\")\n+            .withType(ConfigDef.Type.STRING)\n+            .withWidth(ConfigDef.Width.MEDIUM)\n+            .withImportance(ConfigDef.Importance.HIGH)\n+            .withDefault(DEFAULT_OPENTRACING_SPAN_VALUE)\n+            .withDescription(\"The name of the field notaining java.util.Properties representation of OpenTracing span.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzNTQzNg=="}, "originalCommit": {"oid": "9dc42e348fed47b6cbbaeb7d01a88eafece900fa"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQwNTQzMw==", "bodyText": "Heads up: IIRC, the GlobalTracer assumes that there's only one tracer instance per JVM. Check that this is a valid assumption.", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r537405433", "createdAt": "2020-12-07T10:44:51Z", "author": {"login": "jpkrohling"}, "path": "debezium-core/src/main/java/io/debezium/transforms/tracing/ActivateOpenTracingSpan.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.transforms.tracing;\n+\n+import java.util.Map;\n+\n+import org.apache.kafka.common.config.ConfigDef;\n+import org.apache.kafka.connect.connector.ConnectRecord;\n+import org.apache.kafka.connect.data.Schema;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.connect.errors.ConnectException;\n+import org.apache.kafka.connect.transforms.Transformation;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.debezium.config.Configuration;\n+import io.debezium.config.Field;\n+import io.debezium.data.Envelope;\n+import io.debezium.transforms.SmtManager;\n+import io.opentracing.Scope;\n+import io.opentracing.Span;\n+import io.opentracing.Tracer;\n+import io.opentracing.Tracer.SpanBuilder;\n+import io.opentracing.propagation.Format;\n+import io.opentracing.util.GlobalTracer;\n+\n+/**\n+ * This SMT enables integration with an OpenTracing system.\n+ * The SMT creates a OpenTracing span and enriches it with metadata from envelope and source info block.<br/>\n+ * It is possible to connect the span to a parent span created by a business application.\n+ * The application then needs to export its OpenTracing active span into a database field.\n+ * The SMT looks for a predefined field name in the {@code after} block\n+ * and when found it extracts the parent span from it.<br>\n+ * \n+ * See {@link EventDispatcher} for example of such implementation.\n+ * \n+ *\n+ * @param <R> the subtype of {@link ConnectRecord} on which this transformation will operate\n+ * @author Jiri Pechanec\n+ */\n+public class ActivateOpenTracingSpan<R extends ConnectRecord<R>> implements Transformation<R> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ActivateOpenTracingSpan.class);\n+\n+    private static final String DEFAULT_OPENTRACING_SPAN_VALUE = \"opentracingspan\";\n+    private static final String DEFAULT_OPENTRACING_OPERATION_NAME = \"debezium\";\n+\n+    private static final String TAG_PREFIX = \"debezium.\";\n+\n+    private static final Field OPENTRACING_SPAN_FIELD = Field.create(\"opentracing.span.field\")\n+            .withDisplayName(\"OpenTracing Span Field\")\n+            .withType(ConfigDef.Type.STRING)\n+            .withWidth(ConfigDef.Width.MEDIUM)\n+            .withImportance(ConfigDef.Importance.HIGH)\n+            .withDefault(DEFAULT_OPENTRACING_SPAN_VALUE)\n+            .withDescription(\"The name of the field notaining java.util.Properties representation of OpenTracing span.\");\n+\n+    private static final Field OPENTRACING_OOPERATION_NAME = Field.create(\"opentracing.operation.name\")\n+            .withDisplayName(\"OpenTracing Operation Name\")\n+            .withType(ConfigDef.Type.STRING)\n+            .withWidth(ConfigDef.Width.MEDIUM)\n+            .withImportance(ConfigDef.Importance.HIGH)\n+            .withDefault(DEFAULT_OPENTRACING_OPERATION_NAME)\n+            .withDescription(\"The name of the field notaining java.util.Properties representation of OpenTracing span.\");\n+\n+    private String spanField;\n+    private String operationName;\n+\n+    private SmtManager<R> smtManager;\n+\n+    @Override\n+    public void configure(Map<String, ?> props) {\n+        Configuration config = Configuration.from(props);\n+        final Field.Set configFields = Field.setOf(OPENTRACING_SPAN_FIELD, OPENTRACING_OOPERATION_NAME);\n+\n+        if (!config.validateAndRecord(configFields, LOGGER::error)) {\n+            throw new ConnectException(\"Unable to validate config.\");\n+        }\n+\n+        spanField = config.getString(OPENTRACING_SPAN_FIELD);\n+        operationName = config.getString(OPENTRACING_OOPERATION_NAME);\n+\n+        smtManager = new SmtManager<>(config);\n+    }\n+\n+    @Override\n+    public R apply(R record) {\n+        final Tracer tracer = GlobalTracer.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dc42e348fed47b6cbbaeb7d01a88eafece900fa"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQwODY0Nw==", "bodyText": "Instead of using this as a prefix, you can use this as the component name (component=debezium) and leave the other tag names simpler.\nThis reminds me that there's a semantic conventions doc that you might want to take a look: https://github.com/opentracing/specification/blob/master/semantic_conventions.md#span-tags-table", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r537408647", "createdAt": "2020-12-07T10:49:46Z", "author": {"login": "jpkrohling"}, "path": "debezium-core/src/main/java/io/debezium/transforms/tracing/ActivateOpenTracingSpan.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.transforms.tracing;\n+\n+import java.util.Map;\n+\n+import org.apache.kafka.common.config.ConfigDef;\n+import org.apache.kafka.connect.connector.ConnectRecord;\n+import org.apache.kafka.connect.data.Schema;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.connect.errors.ConnectException;\n+import org.apache.kafka.connect.transforms.Transformation;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.debezium.config.Configuration;\n+import io.debezium.config.Field;\n+import io.debezium.data.Envelope;\n+import io.debezium.transforms.SmtManager;\n+import io.opentracing.Scope;\n+import io.opentracing.Span;\n+import io.opentracing.Tracer;\n+import io.opentracing.Tracer.SpanBuilder;\n+import io.opentracing.propagation.Format;\n+import io.opentracing.util.GlobalTracer;\n+\n+/**\n+ * This SMT enables integration with an OpenTracing system.\n+ * The SMT creates a OpenTracing span and enriches it with metadata from envelope and source info block.<br/>\n+ * It is possible to connect the span to a parent span created by a business application.\n+ * The application then needs to export its OpenTracing active span into a database field.\n+ * The SMT looks for a predefined field name in the {@code after} block\n+ * and when found it extracts the parent span from it.<br>\n+ * \n+ * See {@link EventDispatcher} for example of such implementation.\n+ * \n+ *\n+ * @param <R> the subtype of {@link ConnectRecord} on which this transformation will operate\n+ * @author Jiri Pechanec\n+ */\n+public class ActivateOpenTracingSpan<R extends ConnectRecord<R>> implements Transformation<R> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ActivateOpenTracingSpan.class);\n+\n+    private static final String DEFAULT_OPENTRACING_SPAN_VALUE = \"opentracingspan\";\n+    private static final String DEFAULT_OPENTRACING_OPERATION_NAME = \"debezium\";\n+\n+    private static final String TAG_PREFIX = \"debezium.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dc42e348fed47b6cbbaeb7d01a88eafece900fa"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQxMDU1OA==", "bodyText": "What's source in this context? Is this the party that generated the message? There might be a more appropriate tag for this as part of the conventions.", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r537410558", "createdAt": "2020-12-07T10:52:45Z", "author": {"login": "jpkrohling"}, "path": "debezium-core/src/main/java/io/debezium/transforms/tracing/ActivateOpenTracingSpan.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.transforms.tracing;\n+\n+import java.util.Map;\n+\n+import org.apache.kafka.common.config.ConfigDef;\n+import org.apache.kafka.connect.connector.ConnectRecord;\n+import org.apache.kafka.connect.data.Schema;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.connect.errors.ConnectException;\n+import org.apache.kafka.connect.transforms.Transformation;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.debezium.config.Configuration;\n+import io.debezium.config.Field;\n+import io.debezium.data.Envelope;\n+import io.debezium.transforms.SmtManager;\n+import io.opentracing.Scope;\n+import io.opentracing.Span;\n+import io.opentracing.Tracer;\n+import io.opentracing.Tracer.SpanBuilder;\n+import io.opentracing.propagation.Format;\n+import io.opentracing.util.GlobalTracer;\n+\n+/**\n+ * This SMT enables integration with an OpenTracing system.\n+ * The SMT creates a OpenTracing span and enriches it with metadata from envelope and source info block.<br/>\n+ * It is possible to connect the span to a parent span created by a business application.\n+ * The application then needs to export its OpenTracing active span into a database field.\n+ * The SMT looks for a predefined field name in the {@code after} block\n+ * and when found it extracts the parent span from it.<br>\n+ * \n+ * See {@link EventDispatcher} for example of such implementation.\n+ * \n+ *\n+ * @param <R> the subtype of {@link ConnectRecord} on which this transformation will operate\n+ * @author Jiri Pechanec\n+ */\n+public class ActivateOpenTracingSpan<R extends ConnectRecord<R>> implements Transformation<R> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ActivateOpenTracingSpan.class);\n+\n+    private static final String DEFAULT_OPENTRACING_SPAN_VALUE = \"opentracingspan\";\n+    private static final String DEFAULT_OPENTRACING_OPERATION_NAME = \"debezium\";\n+\n+    private static final String TAG_PREFIX = \"debezium.\";\n+\n+    private static final Field OPENTRACING_SPAN_FIELD = Field.create(\"opentracing.span.field\")\n+            .withDisplayName(\"OpenTracing Span Field\")\n+            .withType(ConfigDef.Type.STRING)\n+            .withWidth(ConfigDef.Width.MEDIUM)\n+            .withImportance(ConfigDef.Importance.HIGH)\n+            .withDefault(DEFAULT_OPENTRACING_SPAN_VALUE)\n+            .withDescription(\"The name of the field notaining java.util.Properties representation of OpenTracing span.\");\n+\n+    private static final Field OPENTRACING_OOPERATION_NAME = Field.create(\"opentracing.operation.name\")\n+            .withDisplayName(\"OpenTracing Operation Name\")\n+            .withType(ConfigDef.Type.STRING)\n+            .withWidth(ConfigDef.Width.MEDIUM)\n+            .withImportance(ConfigDef.Importance.HIGH)\n+            .withDefault(DEFAULT_OPENTRACING_OPERATION_NAME)\n+            .withDescription(\"The name of the field notaining java.util.Properties representation of OpenTracing span.\");\n+\n+    private String spanField;\n+    private String operationName;\n+\n+    private SmtManager<R> smtManager;\n+\n+    @Override\n+    public void configure(Map<String, ?> props) {\n+        Configuration config = Configuration.from(props);\n+        final Field.Set configFields = Field.setOf(OPENTRACING_SPAN_FIELD, OPENTRACING_OOPERATION_NAME);\n+\n+        if (!config.validateAndRecord(configFields, LOGGER::error)) {\n+            throw new ConnectException(\"Unable to validate config.\");\n+        }\n+\n+        spanField = config.getString(OPENTRACING_SPAN_FIELD);\n+        operationName = config.getString(OPENTRACING_OOPERATION_NAME);\n+\n+        smtManager = new SmtManager<>(config);\n+    }\n+\n+    @Override\n+    public R apply(R record) {\n+        final Tracer tracer = GlobalTracer.get();\n+        if (tracer == null) {\n+            return record;\n+        }\n+\n+        // In case of tombstones or non-CDC events (heartbeats, schema change events),\n+        // leave the value as-is\n+        if (record.value() == null || !smtManager.isValidEnvelope(record)) {\n+            return record;\n+        }\n+\n+        final Struct envelope = (Struct) record.value();\n+        final Struct after = envelope.getStruct(Envelope.FieldName.AFTER);\n+        final Struct source = envelope.getStruct(Envelope.FieldName.SOURCE);\n+\n+        final SpanBuilder spanBuilder = tracer.buildSpan(operationName);\n+        addFieldToSpan(spanBuilder, envelope, Envelope.FieldName.OPERATION, TAG_PREFIX);\n+        addFieldToSpan(spanBuilder, envelope, Envelope.FieldName.TIMESTAMP, TAG_PREFIX);\n+\n+        if (source != null) {\n+            final String sourcePrefix = TAG_PREFIX + \"source.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dc42e348fed47b6cbbaeb7d01a88eafece900fa"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQxMzM1NQ==", "bodyText": "In general, I agree with the sentiment: if you can plug the instrumentation as part of another library instead of having it as part of your main API, that's preferable as it reduces the surface of your API and keeps the tracing aspect outside of the contract. But overhead shouldn't be a concern: it really is minimal, and modern JVMs should inline the calls when the instrumentation isn't on.", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r537413355", "createdAt": "2020-12-07T10:57:07Z", "author": {"login": "jpkrohling"}, "path": "debezium-quarkus-outbox/runtime/pom.xml", "diffHunk": "@@ -23,6 +23,10 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-jackson</artifactId>\n         </dependency>\n+        <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE0Nzg4NA=="}, "originalCommit": {"oid": "9dc42e348fed47b6cbbaeb7d01a88eafece900fa"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQxNTE4Ng==", "bodyText": "Unless you configured it differently, activeSpan will use a ThreadLocal scope manager to keep track of the active span, which is fine for typical servlet-based applications (thread per request), but not really suitable for reactive/async applications.", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r537415186", "createdAt": "2020-12-07T10:59:55Z", "author": {"login": "jpkrohling"}, "path": "debezium-quarkus-outbox/runtime/src/main/java/io/debezium/outbox/quarkus/internal/EventDispatcher.java", "diffHunk": "@@ -41,29 +57,53 @@\n     @Inject\n     DebeziumOutboxRuntimeConfig config;\n \n+    @Inject\n+    Tracer tracer;\n+\n     /**\n-     * An event handler for {@link ExportedEvent} events and will be called when the event fires.\n+     * An event handler for {@link ExportedEvent} events and will be called when\n+     * the event fires.\n      *\n-     * @param event the exported event\n+     * @param event\n+     *            the exported event\n      */\n     public void onExportedEvent(@Observes ExportedEvent<?, ?> event) {\n         LOGGER.debug(\"An exported event was found for type {}\", event.getType());\n \n-        // Define the entity map-mode object using property names and values\n-        final HashMap<String, Object> dataMap = new HashMap<>();\n-        dataMap.put(\"aggregateType\", event.getAggregateType());\n-        dataMap.put(\"aggregateId\", event.getAggregateId());\n-        dataMap.put(\"type\", event.getType());\n-        dataMap.put(\"payload\", event.getPayload());\n-        dataMap.put(\"timestamp\", event.getTimestamp());\n-\n-        // Unwrap to Hibernate session and save\n-        Session session = entityManager.unwrap(Session.class);\n-        session.save(OUTBOX_ENTITY_FULLNAME, dataMap);\n-\n-        // Remove entity if the configuration deems doing so, leaving useful for debugging\n-        if (config.removeAfterInsert) {\n-            session.delete(OUTBOX_ENTITY_FULLNAME, dataMap);\n+        final SpanBuilder spanBuilder = tracer.buildSpan(OPENTRACING_OPERATION_NAME);\n+        final DebeziumTextMap exportedSpanData = new DebeziumTextMap();\n+\n+        final Span parentSpan = tracer.activeSpan();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dc42e348fed47b6cbbaeb7d01a88eafece900fa"}, "originalPosition": 74}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3MTYyMjM4", "url": "https://github.com/debezium/debezium/pull/1989#pullrequestreview-547162238", "createdAt": "2020-12-08T11:52:47Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMTo1Mjo0N1rOIBWD4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMjowMTozNlrOIBWhVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI4MDkyOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!configMap.containsKey(ActivateTracingSpan.TRACING_CONEXT_FIELD_REQUIRED.name())) {\n          \n          \n            \n                    if (!configMap.containsKey(ActivateTracingSpan.TRACING_CONTEXT_FIELD_REQUIRED.name())) {", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r538280929", "createdAt": "2020-12-08T11:52:47Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/transforms/outbox/EventRouter.java", "diffHunk": "@@ -257,10 +261,15 @@ public ConfigDef config() {\n \n     @Override\n     public void close() {\n+        tracingSmt.close();\n     }\n \n     @Override\n     public void configure(Map<String, ?> configMap) {\n+        tracingSmt.configure(configMap);\n+        if (!configMap.containsKey(ActivateTracingSpan.TRACING_CONEXT_FIELD_REQUIRED.name())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI4MzQyNA==", "bodyText": "Should only be done if tracing libs are present?", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r538283424", "createdAt": "2020-12-08T11:55:44Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/transforms/outbox/EventRouter.java", "diffHunk": "@@ -50,6 +51,7 @@\n     private final ExtractField<R> afterExtractor = new ExtractField.Value<>();\n     private final RegexRouter<R> regexRouter = new RegexRouter<>();\n     private EventRouterConfigDefinition.InvalidOperationBehavior invalidOperationBehavior;\n+    private final ActivateTracingSpan<R> tracingSmt = new ActivateTracingSpan<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI4NjI4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (DB_FILEDS_PREFIX.equals(prefix)) {\n          \n          \n            \n                        if (DB_FIELDS_PREFIX.equals(prefix)) {", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r538286283", "createdAt": "2020-12-08T11:59:02Z", "author": {"login": "gunnarmorling"}, "path": "debezium-core/src/main/java/io/debezium/transforms/tracing/ActivateTracingSpan.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.transforms.tracing;\n+\n+import java.util.Map;\n+\n+import org.apache.kafka.common.config.ConfigDef;\n+import org.apache.kafka.connect.connector.ConnectRecord;\n+import org.apache.kafka.connect.data.Schema;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.connect.errors.ConnectException;\n+import org.apache.kafka.connect.transforms.Transformation;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.debezium.DebeziumException;\n+import io.debezium.config.Configuration;\n+import io.debezium.config.Field;\n+import io.debezium.connector.AbstractSourceInfo;\n+import io.debezium.data.Envelope;\n+import io.debezium.pipeline.EventDispatcher;\n+import io.debezium.transforms.SmtManager;\n+import io.opentracing.Scope;\n+import io.opentracing.Span;\n+import io.opentracing.SpanContext;\n+import io.opentracing.Tracer;\n+import io.opentracing.Tracer.SpanBuilder;\n+import io.opentracing.propagation.Format;\n+import io.opentracing.tag.Tags;\n+import io.opentracing.util.GlobalTracer;\n+\n+/**\n+ * This SMT enables integration with a tracing system.\n+ * The SMT creates a tracing span and enriches it with metadata from envelope and source info block.<br/>\n+ * It is possible to connect the span to a parent span created by a business application.\n+ * The application then needs to export its tracing active span context into a database field.\n+ * The SMT looks for a predefined field name in the {@code after} block\n+ * and when found it extracts the parent span from it.\n+ * \n+ * @see {@link EventDispatcher} for example of such implementation\n+ * \n+ *\n+ * @param <R> the subtype of {@link ConnectRecord} on which this transformation will operate\n+ * @author Jiri Pechanec\n+ */\n+public class ActivateTracingSpan<R extends ConnectRecord<R>> implements Transformation<R> {\n+\n+    private static final String DB_FILEDS_PREFIX = \"db.\";\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ActivateTracingSpan.class);\n+\n+    private static final String DEFAULT_TRACING_SPAN_CONTEXT_FIELD = \"tracingspancontext\";\n+    private static final String DEFAULT_TRACING_OPERATION_NAME = \"debezium-read\";\n+\n+    private static final String TRACING_COMPONENT = \"debezium\";\n+    private static final String TX_LOG_WRITE_OPERATION_NAME = \"db-log-write\";\n+\n+    public static final Field TRACING_SPAN_CONTEXT_FIELD = Field.create(\"tracing.span.context.field\")\n+            .withDisplayName(\"Serialized tracing span context field\")\n+            .withType(ConfigDef.Type.STRING)\n+            .withWidth(ConfigDef.Width.MEDIUM)\n+            .withImportance(ConfigDef.Importance.HIGH)\n+            .withDefault(DEFAULT_TRACING_SPAN_CONTEXT_FIELD)\n+            .withDescription(\"The name of the field containing java.util.Properties representation of serialized span context. Defaults to '\"\n+                    + DEFAULT_TRACING_SPAN_CONTEXT_FIELD + \"'\");\n+\n+    public static final Field TRACING_OPERATION_NAME = Field.create(\"tracing.operation.name\")\n+            .withDisplayName(\"Tracing operation name\")\n+            .withType(ConfigDef.Type.STRING)\n+            .withWidth(ConfigDef.Width.MEDIUM)\n+            .withImportance(ConfigDef.Importance.HIGH)\n+            .withDefault(DEFAULT_TRACING_OPERATION_NAME)\n+            .withDescription(\"The operation name representing Debezium processing span. Default is '\" + DEFAULT_TRACING_OPERATION_NAME + \"'\");\n+\n+    public static final Field TRACING_CONEXT_FIELD_REQUIRED = Field.create(\"tracing.with.context.field.only\")\n+            .withDisplayName(\"Trace only events with context field present\")\n+            .withType(ConfigDef.Type.BOOLEAN)\n+            .withWidth(ConfigDef.Width.MEDIUM)\n+            .withImportance(ConfigDef.Importance.HIGH)\n+            .withDefault(false)\n+            .withDescription(\"Set to `true` when only events that have serialized context field should be traced.\");\n+\n+    private String spanContextField;\n+    private String operationName;\n+    private boolean requireContextField;\n+\n+    private SmtManager<R> smtManager;\n+\n+    @Override\n+    public void configure(Map<String, ?> props) {\n+        Configuration config = Configuration.from(props);\n+        final Field.Set configFields = Field.setOf(TRACING_SPAN_CONTEXT_FIELD, TRACING_OPERATION_NAME);\n+\n+        if (!config.validateAndRecord(configFields, LOGGER::error)) {\n+            throw new ConnectException(\"Unable to validate config.\");\n+        }\n+\n+        spanContextField = config.getString(TRACING_SPAN_CONTEXT_FIELD);\n+        operationName = config.getString(TRACING_OPERATION_NAME);\n+        requireContextField = config.getBoolean(TRACING_CONEXT_FIELD_REQUIRED);\n+\n+        smtManager = new SmtManager<>(config);\n+    }\n+\n+    public void setRequireContextField(boolean requireContextField) {\n+        this.requireContextField = requireContextField;\n+    }\n+\n+    @Override\n+    public R apply(R record) {\n+        // In case of tombstones or non-CDC events (heartbeats, schema change events),\n+        // leave the value as-is\n+        if (record.value() == null || !smtManager.isValidEnvelope(record)) {\n+            return record;\n+        }\n+\n+        final Struct envelope = (Struct) record.value();\n+\n+        final Struct after = (envelope.schema().field(Envelope.FieldName.AFTER) != null) ? envelope.getStruct(Envelope.FieldName.AFTER) : null;\n+        final Struct source = (envelope.schema().field(Envelope.FieldName.SOURCE) != null) ? envelope.getStruct(Envelope.FieldName.SOURCE) : null;\n+        String propagatedSpanContext = null;\n+\n+        if (after != null) {\n+            if (after.schema().field(spanContextField) != null) {\n+                propagatedSpanContext = after.getString(spanContextField);\n+            }\n+        }\n+\n+        if (propagatedSpanContext == null && requireContextField) {\n+            return record;\n+        }\n+\n+        try {\n+            return traceRecord(record, envelope, source, after, propagatedSpanContext);\n+        }\n+        catch (NoClassDefFoundError e) {\n+            throw new DebeziumException(\"Failed to record tracing information, tracing libraries not available\", e);\n+        }\n+    }\n+\n+    private R traceRecord(R record, Struct envelope, Struct source, Struct after, String propagatedSpanContext) {\n+        final Tracer tracer = GlobalTracer.get();\n+        if (tracer == null) {\n+            return record;\n+        }\n+\n+        final SpanBuilder txLogSpanBuilder = tracer.buildSpan(TX_LOG_WRITE_OPERATION_NAME);\n+\n+        final SpanBuilder debeziumSpanBuilder = tracer.buildSpan(operationName);\n+        addFieldToSpan(debeziumSpanBuilder, envelope, Envelope.FieldName.OPERATION, \"\");\n+        addFieldToSpan(debeziumSpanBuilder, envelope, Envelope.FieldName.TIMESTAMP, \"\");\n+\n+        final Long processingTimestamp = envelope.getInt64(Envelope.FieldName.TIMESTAMP);\n+        if (processingTimestamp != null) {\n+            debeziumSpanBuilder.withStartTimestamp(processingTimestamp * 1_000);\n+        }\n+\n+        Long eventTimestamp = null;\n+        if (source != null) {\n+            for (org.apache.kafka.connect.data.Field field : source.schema().fields()) {\n+                addFieldToSpan(txLogSpanBuilder, source, field.name(), DB_FILEDS_PREFIX);\n+            }\n+            eventTimestamp = source.getInt64(AbstractSourceInfo.TIMESTAMP_KEY);\n+            if (eventTimestamp != null) {\n+                txLogSpanBuilder.withStartTimestamp(eventTimestamp * 1_000);\n+            }\n+        }\n+\n+        if (propagatedSpanContext != null) {\n+            final DebeziumTextMap parentSpanContextMap = new DebeziumTextMap(propagatedSpanContext);\n+            final SpanContext parentSpanContext = tracer.extract(Format.Builtin.TEXT_MAP, parentSpanContextMap);\n+            txLogSpanBuilder.asChildOf(parentSpanContext);\n+        }\n+\n+        final Span txLogSpan = txLogSpanBuilder.start();\n+        debeziumSpanBuilder.asChildOf(txLogSpan);\n+        final Span debeziumSpan = debeziumSpanBuilder.start();\n+        try (final Scope debeziumScope = tracer.scopeManager().activate(debeziumSpan)) {\n+            Tags.COMPONENT.set(txLogSpan, TRACING_COMPONENT);\n+            Tags.COMPONENT.set(debeziumSpan, TRACING_COMPONENT);\n+            if (eventTimestamp != null) {\n+                txLogSpan.finish(eventTimestamp * 1_000);\n+            }\n+            else {\n+                txLogSpan.finish();\n+            }\n+            debeziumSpan.finish();\n+            final DebeziumTextMap activeTextMap = new DebeziumTextMap();\n+            tracer.inject(debeziumSpan.context(), Format.Builtin.TEXT_MAP, activeTextMap);\n+            activeTextMap.forEach(e -> record.headers().add(e.getKey(), e.getValue(), Schema.STRING_SCHEMA));\n+        }\n+\n+        return record;\n+    }\n+\n+    @Override\n+    public void close() {\n+    }\n+\n+    @Override\n+    public ConfigDef config() {\n+        ConfigDef config = new ConfigDef();\n+        Field.group(\n+                config,\n+                null,\n+                TRACING_SPAN_CONTEXT_FIELD,\n+                TRACING_OPERATION_NAME);\n+        return config;\n+    }\n+\n+    private void addFieldToSpan(SpanBuilder span, Struct struct, String field, String prefix) {\n+        final Object fieldValue = struct.get(field);\n+        if (fieldValue != null) {\n+            String targetFieldName = prefix + field;\n+            if (DB_FILEDS_PREFIX.equals(prefix)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 218}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI4ODQ3MQ==", "bodyText": "Ok, I think we can track this separately, if needed. @jpechane, could you log an issue for it? It's ok to require it for the time being in the Quarkus extension, but it should not be needed for the routing SMT (as the update would be rather disruptive then).", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r538288471", "createdAt": "2020-12-08T12:01:36Z", "author": {"login": "gunnarmorling"}, "path": "debezium-quarkus-outbox/runtime/pom.xml", "diffHunk": "@@ -23,6 +23,10 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-jackson</artifactId>\n         </dependency>\n+        <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE0Nzg4NA=="}, "originalCommit": {"oid": "9dc42e348fed47b6cbbaeb7d01a88eafece900fa"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "18e9375d0ff7511acfa35a389c573a41d3968b7f", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/18e9375d0ff7511acfa35a389c573a41d3968b7f", "committedDate": "2020-12-08T12:36:08Z", "message": "DBZ-1818 DBZ-559 Changes after review\n\nOpenTracing not used in names\nSpan for event time\nSpan SMT embedded in outbox\nHandling of missing tracing libs in Connect runtime\nAligned tracing tag names with the standard ones"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "18e9375d0ff7511acfa35a389c573a41d3968b7f", "author": {"user": {"login": "jpechane", "name": "Jiri Pechanec"}}, "url": "https://github.com/debezium/debezium/commit/18e9375d0ff7511acfa35a389c573a41d3968b7f", "committedDate": "2020-12-08T12:36:08Z", "message": "DBZ-1818 DBZ-559 Changes after review\n\nOpenTracing not used in names\nSpan for event time\nSpan SMT embedded in outbox\nHandling of missing tracing libs in Connect runtime\nAligned tracing tag names with the standard ones"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3MjI0MjAx", "url": "https://github.com/debezium/debezium/pull/1989#pullrequestreview-547224201", "createdAt": "2020-12-08T13:18:09Z", "commit": {"oid": "18e9375d0ff7511acfa35a389c573a41d3968b7f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2248, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}