{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxNDIwODUx", "number": 2216, "reviewThreads": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNjowOTowNlrOEazhMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNjowMTozOVrOEb6h2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTQyNTEyOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__mocks__/FacetSelector.mock.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNjowOTowNlrOHEcxrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNjowOTowNlrOHEcxrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQyNzgyMA==", "bodyText": "It's probably worth having a really long name in one of these to show the wrapping.", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r474427820", "createdAt": "2020-08-21T06:09:06Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/__mocks__/FacetSelector.mock.ts", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import { SearchPageClassification } from \"../tsrc/search/SearchPage\";\n+\n+export const classifications: SearchPageClassification[] = [\n+  {\n+    name: \"Language\",\n+    categories: [\n+      {\n+        term: \"scala\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5694fd201ce1d6747e3613fa3fb65ee20d711d1"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTQyNzQyOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/components/FacetSelector.test.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNjoxMDowNVrOHEcy-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNjoxMDowNVrOHEcy-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQyODE1NA==", "bodyText": "nit: comments don't need full stops", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r474428154", "createdAt": "2020-08-21T06:10:05Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/components/FacetSelector.test.tsx", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import {\n+  render,\n+  queryByText,\n+  getByText,\n+  fireEvent,\n+  RenderResult,\n+  getAllByRole,\n+} from \"@testing-library/react\";\n+import { FacetSelector } from \"../../../../tsrc/search/components/FacetSelector\";\n+import * as FacetSelectorMock from \"../../../../__mocks__/FacetSelector.mock\";\n+import \"@testing-library/jest-dom/extend-expect\";\n+\n+describe(\"<FacetSelector />\", () => {\n+  // Mocked callbacks.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "247f74f191fa905770c92958decfb1f72e8fa29a"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTQzMTE2OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNjoxMTo1OFrOHEc1UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNjoxMTo1OFrOHEc1UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQyODc1Mg==", "bodyText": "For single styles, didn't we decide to just add a style prop inline?", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r474428752", "createdAt": "2020-08-21T06:11:58Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import {\n+  Button,\n+  Checkbox,\n+  FormControlLabel,\n+  Grid,\n+  List,\n+  ListItem,\n+  Typography,\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/core/styles\";\n+import * as React from \"react\";\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import { SearchPageClassification } from \"../SearchPage\";\n+\n+const useStyles = makeStyles({\n+  classificationList: {\n+    maxHeight: 500,\n+    overflow: \"auto\",\n+  },\n+  facetListItem: {\n+    padding: 0,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "247f74f191fa905770c92958decfb1f72e8fa29a"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTQzNDExOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNjoxMzo0MFrOHEc3GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNjoxMzo0MFrOHEc3GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQyOTIwOQ==", "bodyText": "Language string missing here.", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r474429209", "createdAt": "2020-08-21T06:13:40Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import {\n+  Button,\n+  Checkbox,\n+  FormControlLabel,\n+  Grid,\n+  List,\n+  ListItem,\n+  Typography,\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/core/styles\";\n+import * as React from \"react\";\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import { SearchPageClassification } from \"../SearchPage\";\n+\n+const useStyles = makeStyles({\n+  classificationList: {\n+    maxHeight: 500,\n+    overflow: \"auto\",\n+  },\n+  facetListItem: {\n+    padding: 0,\n+  },\n+});\n+\n+interface FacetSelectorProps {\n+  /**\n+   * A list of Classifications.\n+   */\n+  classifications: SearchPageClassification[];\n+  /**\n+   * A list of selected facets.\n+   */\n+  selectedTerms?: string[];\n+  /**\n+   * Handler for selecting/deselecting Classification terms.\n+   * @param terms A list of currently selected terms.\n+   */\n+  onSelectTermsChange: (terms: string[]) => void;\n+  /**\n+   * Handler for clicking a 'SHOW MORE' button.\n+   * @param classificationName The name of a Classification.\n+   */\n+  onShowMore: (classificationName: string) => void;\n+}\n+\n+export const FacetSelector = ({\n+  classifications,\n+  selectedTerms,\n+  onSelectTermsChange,\n+  onShowMore,\n+}: FacetSelectorProps) => {\n+  const classes = useStyles();\n+\n+  /**\n+   * Updates the list of selected Classification terms. If the term exists then remove it\n+   * from the list. Add it to the list otherwise.\n+   *\n+   * @param term The selected or unselected term.\n+   */\n+  const handleSelectTerms = (term: string) => {\n+    const copiedSelectedTerms = selectedTerms ? [...selectedTerms] : [];\n+    const termIndex = copiedSelectedTerms.indexOf(term);\n+    if (termIndex === -1) {\n+      copiedSelectedTerms.push(term);\n+    } else {\n+      copiedSelectedTerms.splice(termIndex, 1);\n+    }\n+    onSelectTermsChange(copiedSelectedTerms);\n+  };\n+\n+  /**\n+   * Render a 'SHOW MORE' button for each Classification.\n+   * @param classificationName The name of a Classification.\n+   */\n+  const showMoreButton = (classificationName: string) => (\n+    <ListItem>\n+      <Grid container justify=\"center\">\n+        <Grid item>\n+          <Button\n+            id={`${classificationName}_show_more`}\n+            variant=\"text\"\n+            onClick={() => onShowMore(classificationName)}\n+          >\n+            Show more", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "247f74f191fa905770c92958decfb1f72e8fa29a"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTQzNzkzOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNjoxNToyNVrOHEc5YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNjoxNToyNVrOHEc5YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQyOTc5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // The number of displayed facets Depends on whether to show more\n          \n          \n            \n                // The number of displayed facets depends on whether to show more", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r474429793", "createdAt": "2020-08-21T06:15:25Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import {\n+  Button,\n+  Checkbox,\n+  FormControlLabel,\n+  Grid,\n+  List,\n+  ListItem,\n+  Typography,\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/core/styles\";\n+import * as React from \"react\";\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import { SearchPageClassification } from \"../SearchPage\";\n+\n+const useStyles = makeStyles({\n+  classificationList: {\n+    maxHeight: 500,\n+    overflow: \"auto\",\n+  },\n+  facetListItem: {\n+    padding: 0,\n+  },\n+});\n+\n+interface FacetSelectorProps {\n+  /**\n+   * A list of Classifications.\n+   */\n+  classifications: SearchPageClassification[];\n+  /**\n+   * A list of selected facets.\n+   */\n+  selectedTerms?: string[];\n+  /**\n+   * Handler for selecting/deselecting Classification terms.\n+   * @param terms A list of currently selected terms.\n+   */\n+  onSelectTermsChange: (terms: string[]) => void;\n+  /**\n+   * Handler for clicking a 'SHOW MORE' button.\n+   * @param classificationName The name of a Classification.\n+   */\n+  onShowMore: (classificationName: string) => void;\n+}\n+\n+export const FacetSelector = ({\n+  classifications,\n+  selectedTerms,\n+  onSelectTermsChange,\n+  onShowMore,\n+}: FacetSelectorProps) => {\n+  const classes = useStyles();\n+\n+  /**\n+   * Updates the list of selected Classification terms. If the term exists then remove it\n+   * from the list. Add it to the list otherwise.\n+   *\n+   * @param term The selected or unselected term.\n+   */\n+  const handleSelectTerms = (term: string) => {\n+    const copiedSelectedTerms = selectedTerms ? [...selectedTerms] : [];\n+    const termIndex = copiedSelectedTerms.indexOf(term);\n+    if (termIndex === -1) {\n+      copiedSelectedTerms.push(term);\n+    } else {\n+      copiedSelectedTerms.splice(termIndex, 1);\n+    }\n+    onSelectTermsChange(copiedSelectedTerms);\n+  };\n+\n+  /**\n+   * Render a 'SHOW MORE' button for each Classification.\n+   * @param classificationName The name of a Classification.\n+   */\n+  const showMoreButton = (classificationName: string) => (\n+    <ListItem>\n+      <Grid container justify=\"center\">\n+        <Grid item>\n+          <Button\n+            id={`${classificationName}_show_more`}\n+            variant=\"text\"\n+            onClick={() => onShowMore(classificationName)}\n+          >\n+            Show more\n+          </Button>\n+        </Grid>\n+      </Grid>\n+    </ListItem>\n+  );\n+\n+  /**\n+   * Generate texts in the format of 'term (count)' for displaying a facet.\n+   * @param facet A facet\n+   */\n+  const facetLabel = (facet: OEQ.SearchFacets.Facet) => (\n+    <Grid container spacing={1}>\n+      <Grid item>\n+        <Typography>{facet.term}</Typography>\n+      </Grid>\n+      <Grid item>\n+        <Typography color=\"textSecondary\">{`(${facet.count})`}</Typography>\n+      </Grid>\n+    </Grid>\n+  );\n+\n+  /**\n+   * Render a MUI Checkbox and a Label for a facet.\n+   * @param facet A facet.\n+   */\n+  const renderFacet = (facet: OEQ.SearchFacets.Facet) => (\n+    <ListItem\n+      className={classes.facetListItem}\n+      key={`${facet.term} ${facet.count}`}\n+    >\n+      <FormControlLabel\n+        control={\n+          <Checkbox\n+            checked={\n+              selectedTerms ? selectedTerms.indexOf(facet.term) !== -1 : false\n+            }\n+            onChange={() => handleSelectTerms(facet.term)}\n+          />\n+        }\n+        label={facetLabel(facet)}\n+      />\n+    </ListItem>\n+  );\n+\n+  /**\n+   * Render a list for a Classification's categories. Some categories\n+   * may have facets not displayed due to the configured maximum display number.\n+   * @param classification A Classification..\n+   */\n+  const renderCategories = (classification: SearchPageClassification) => {\n+    const { categories, maxDisplay, showMore } = classification;\n+    const facets = categories.map((facet) => renderFacet(facet));\n+    // The number of displayed facets Depends on whether to show more", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "247f74f191fa905770c92958decfb1f72e8fa29a"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTQ0MDU5OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNjoxNjo0NVrOHEc67g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNzoxMTozNlrOHEecfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQzMDE5MA==", "bodyText": "I'd avoid these single character parameter names - it would improve readability to have a meaningful identifier.", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r474430190", "createdAt": "2020-08-21T06:16:45Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import {\n+  Button,\n+  Checkbox,\n+  FormControlLabel,\n+  Grid,\n+  List,\n+  ListItem,\n+  Typography,\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/core/styles\";\n+import * as React from \"react\";\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import { SearchPageClassification } from \"../SearchPage\";\n+\n+const useStyles = makeStyles({\n+  classificationList: {\n+    maxHeight: 500,\n+    overflow: \"auto\",\n+  },\n+  facetListItem: {\n+    padding: 0,\n+  },\n+});\n+\n+interface FacetSelectorProps {\n+  /**\n+   * A list of Classifications.\n+   */\n+  classifications: SearchPageClassification[];\n+  /**\n+   * A list of selected facets.\n+   */\n+  selectedTerms?: string[];\n+  /**\n+   * Handler for selecting/deselecting Classification terms.\n+   * @param terms A list of currently selected terms.\n+   */\n+  onSelectTermsChange: (terms: string[]) => void;\n+  /**\n+   * Handler for clicking a 'SHOW MORE' button.\n+   * @param classificationName The name of a Classification.\n+   */\n+  onShowMore: (classificationName: string) => void;\n+}\n+\n+export const FacetSelector = ({\n+  classifications,\n+  selectedTerms,\n+  onSelectTermsChange,\n+  onShowMore,\n+}: FacetSelectorProps) => {\n+  const classes = useStyles();\n+\n+  /**\n+   * Updates the list of selected Classification terms. If the term exists then remove it\n+   * from the list. Add it to the list otherwise.\n+   *\n+   * @param term The selected or unselected term.\n+   */\n+  const handleSelectTerms = (term: string) => {\n+    const copiedSelectedTerms = selectedTerms ? [...selectedTerms] : [];\n+    const termIndex = copiedSelectedTerms.indexOf(term);\n+    if (termIndex === -1) {\n+      copiedSelectedTerms.push(term);\n+    } else {\n+      copiedSelectedTerms.splice(termIndex, 1);\n+    }\n+    onSelectTermsChange(copiedSelectedTerms);\n+  };\n+\n+  /**\n+   * Render a 'SHOW MORE' button for each Classification.\n+   * @param classificationName The name of a Classification.\n+   */\n+  const showMoreButton = (classificationName: string) => (\n+    <ListItem>\n+      <Grid container justify=\"center\">\n+        <Grid item>\n+          <Button\n+            id={`${classificationName}_show_more`}\n+            variant=\"text\"\n+            onClick={() => onShowMore(classificationName)}\n+          >\n+            Show more\n+          </Button>\n+        </Grid>\n+      </Grid>\n+    </ListItem>\n+  );\n+\n+  /**\n+   * Generate texts in the format of 'term (count)' for displaying a facet.\n+   * @param facet A facet\n+   */\n+  const facetLabel = (facet: OEQ.SearchFacets.Facet) => (\n+    <Grid container spacing={1}>\n+      <Grid item>\n+        <Typography>{facet.term}</Typography>\n+      </Grid>\n+      <Grid item>\n+        <Typography color=\"textSecondary\">{`(${facet.count})`}</Typography>\n+      </Grid>\n+    </Grid>\n+  );\n+\n+  /**\n+   * Render a MUI Checkbox and a Label for a facet.\n+   * @param facet A facet.\n+   */\n+  const renderFacet = (facet: OEQ.SearchFacets.Facet) => (\n+    <ListItem\n+      className={classes.facetListItem}\n+      key={`${facet.term} ${facet.count}`}\n+    >\n+      <FormControlLabel\n+        control={\n+          <Checkbox\n+            checked={\n+              selectedTerms ? selectedTerms.indexOf(facet.term) !== -1 : false\n+            }\n+            onChange={() => handleSelectTerms(facet.term)}\n+          />\n+        }\n+        label={facetLabel(facet)}\n+      />\n+    </ListItem>\n+  );\n+\n+  /**\n+   * Render a list for a Classification's categories. Some categories\n+   * may have facets not displayed due to the configured maximum display number.\n+   * @param classification A Classification..\n+   */\n+  const renderCategories = (classification: SearchPageClassification) => {\n+    const { categories, maxDisplay, showMore } = classification;\n+    const facets = categories.map((facet) => renderFacet(facet));\n+    // The number of displayed facets Depends on whether to show more\n+    // and the maximum display number.\n+    return facets.slice(0, showMore ? maxDisplay : undefined);\n+  };\n+\n+  /**\n+   * Sort and render Classifications that have categories.\n+   * For each Classification, a scroll bar and a 'Show more' button may or may not\n+   * be added, depending on whether a classification has more categories to show or not.\n+   */\n+  const renderClassifications = classifications\n+    .filter((c) => c.categories.length > 0)\n+    .sort((c1, c2) => c1.orderIndex - c2.orderIndex)\n+    .map((c) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "247f74f191fa905770c92958decfb1f72e8fa29a"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ1NTE2NA==", "bodyText": "Thanks @SammyIsConfused . All addressed!", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r474455164", "createdAt": "2020-08-21T07:11:36Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import {\n+  Button,\n+  Checkbox,\n+  FormControlLabel,\n+  Grid,\n+  List,\n+  ListItem,\n+  Typography,\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/core/styles\";\n+import * as React from \"react\";\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import { SearchPageClassification } from \"../SearchPage\";\n+\n+const useStyles = makeStyles({\n+  classificationList: {\n+    maxHeight: 500,\n+    overflow: \"auto\",\n+  },\n+  facetListItem: {\n+    padding: 0,\n+  },\n+});\n+\n+interface FacetSelectorProps {\n+  /**\n+   * A list of Classifications.\n+   */\n+  classifications: SearchPageClassification[];\n+  /**\n+   * A list of selected facets.\n+   */\n+  selectedTerms?: string[];\n+  /**\n+   * Handler for selecting/deselecting Classification terms.\n+   * @param terms A list of currently selected terms.\n+   */\n+  onSelectTermsChange: (terms: string[]) => void;\n+  /**\n+   * Handler for clicking a 'SHOW MORE' button.\n+   * @param classificationName The name of a Classification.\n+   */\n+  onShowMore: (classificationName: string) => void;\n+}\n+\n+export const FacetSelector = ({\n+  classifications,\n+  selectedTerms,\n+  onSelectTermsChange,\n+  onShowMore,\n+}: FacetSelectorProps) => {\n+  const classes = useStyles();\n+\n+  /**\n+   * Updates the list of selected Classification terms. If the term exists then remove it\n+   * from the list. Add it to the list otherwise.\n+   *\n+   * @param term The selected or unselected term.\n+   */\n+  const handleSelectTerms = (term: string) => {\n+    const copiedSelectedTerms = selectedTerms ? [...selectedTerms] : [];\n+    const termIndex = copiedSelectedTerms.indexOf(term);\n+    if (termIndex === -1) {\n+      copiedSelectedTerms.push(term);\n+    } else {\n+      copiedSelectedTerms.splice(termIndex, 1);\n+    }\n+    onSelectTermsChange(copiedSelectedTerms);\n+  };\n+\n+  /**\n+   * Render a 'SHOW MORE' button for each Classification.\n+   * @param classificationName The name of a Classification.\n+   */\n+  const showMoreButton = (classificationName: string) => (\n+    <ListItem>\n+      <Grid container justify=\"center\">\n+        <Grid item>\n+          <Button\n+            id={`${classificationName}_show_more`}\n+            variant=\"text\"\n+            onClick={() => onShowMore(classificationName)}\n+          >\n+            Show more\n+          </Button>\n+        </Grid>\n+      </Grid>\n+    </ListItem>\n+  );\n+\n+  /**\n+   * Generate texts in the format of 'term (count)' for displaying a facet.\n+   * @param facet A facet\n+   */\n+  const facetLabel = (facet: OEQ.SearchFacets.Facet) => (\n+    <Grid container spacing={1}>\n+      <Grid item>\n+        <Typography>{facet.term}</Typography>\n+      </Grid>\n+      <Grid item>\n+        <Typography color=\"textSecondary\">{`(${facet.count})`}</Typography>\n+      </Grid>\n+    </Grid>\n+  );\n+\n+  /**\n+   * Render a MUI Checkbox and a Label for a facet.\n+   * @param facet A facet.\n+   */\n+  const renderFacet = (facet: OEQ.SearchFacets.Facet) => (\n+    <ListItem\n+      className={classes.facetListItem}\n+      key={`${facet.term} ${facet.count}`}\n+    >\n+      <FormControlLabel\n+        control={\n+          <Checkbox\n+            checked={\n+              selectedTerms ? selectedTerms.indexOf(facet.term) !== -1 : false\n+            }\n+            onChange={() => handleSelectTerms(facet.term)}\n+          />\n+        }\n+        label={facetLabel(facet)}\n+      />\n+    </ListItem>\n+  );\n+\n+  /**\n+   * Render a list for a Classification's categories. Some categories\n+   * may have facets not displayed due to the configured maximum display number.\n+   * @param classification A Classification..\n+   */\n+  const renderCategories = (classification: SearchPageClassification) => {\n+    const { categories, maxDisplay, showMore } = classification;\n+    const facets = categories.map((facet) => renderFacet(facet));\n+    // The number of displayed facets Depends on whether to show more\n+    // and the maximum display number.\n+    return facets.slice(0, showMore ? maxDisplay : undefined);\n+  };\n+\n+  /**\n+   * Sort and render Classifications that have categories.\n+   * For each Classification, a scroll bar and a 'Show more' button may or may not\n+   * be added, depending on whether a classification has more categories to show or not.\n+   */\n+  const renderClassifications = classifications\n+    .filter((c) => c.categories.length > 0)\n+    .sort((c1, c2) => c1.orderIndex - c2.orderIndex)\n+    .map((c) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQzMDE5MA=="}, "originalCommit": {"oid": "247f74f191fa905770c92958decfb1f72e8fa29a"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzUzMjU0OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__mocks__/FacetSelector.mock.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNToxMzo1MFrOHExJaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNToxMzo1MFrOHExJaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc2MTU3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import { SearchPageClassification } from \"../tsrc/search/SearchPage\";\n          \n          \n            \n            import type { SearchPageClassification } from \"../tsrc/search/SearchPage\";", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r474761577", "createdAt": "2020-08-21T15:13:50Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.core/js/__mocks__/FacetSelector.mock.ts", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import { SearchPageClassification } from \"../tsrc/search/SearchPage\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66a1568916d608082be25fa736ad23274aec6ec9"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzUzOTk5OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNToxNTozOVrOHExN0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNToxNTozOVrOHExN0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc2MjcwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import { SearchPageClassification } from \"../SearchPage\";\n          \n          \n            \n            import type { SearchPageClassification } from \"../SearchPage\";", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r474762706", "createdAt": "2020-08-21T15:15:39Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import {\n+  Button,\n+  Checkbox,\n+  FormControlLabel,\n+  Grid,\n+  List,\n+  ListItem,\n+  Typography,\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/core/styles\";\n+import * as React from \"react\";\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import { SearchPageClassification } from \"../SearchPage\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66a1568916d608082be25fa736ad23274aec6ec9"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzU1NTIwOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNToxOTozMlrOHExXCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNToxOTozMlrOHExXCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc2NTA2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          selectedTerms ? selectedTerms.indexOf(facet.term) !== -1 : false\n          \n          \n            \n                          selectedTerms ? selectedTerms.includes(facet.term) : false\n          \n      \n    \n    \n  \n\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r474765065", "createdAt": "2020-08-21T15:19:32Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import {\n+  Button,\n+  Checkbox,\n+  FormControlLabel,\n+  Grid,\n+  List,\n+  ListItem,\n+  Typography,\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/core/styles\";\n+import * as React from \"react\";\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import { SearchPageClassification } from \"../SearchPage\";\n+\n+const useStyles = makeStyles({\n+  classificationList: {\n+    maxHeight: 500,\n+    overflow: \"auto\",\n+  },\n+});\n+\n+interface FacetSelectorProps {\n+  /**\n+   * A list of Classifications.\n+   */\n+  classifications: SearchPageClassification[];\n+  /**\n+   * A list of selected facets.\n+   */\n+  selectedTerms?: string[];\n+  /**\n+   * Handler for selecting/deselecting Classification terms.\n+   * @param terms A list of currently selected terms.\n+   */\n+  onSelectTermsChange: (terms: string[]) => void;\n+  /**\n+   * Handler for clicking a 'SHOW MORE' button.\n+   * @param classificationName The name of a Classification.\n+   */\n+  onShowMore: (classificationName: string) => void;\n+}\n+\n+export const FacetSelector = ({\n+  classifications,\n+  selectedTerms,\n+  onSelectTermsChange,\n+  onShowMore,\n+}: FacetSelectorProps) => {\n+  const classes = useStyles();\n+\n+  /**\n+   * Updates the list of selected Classification terms. If the term exists then remove it\n+   * from the list. Add it to the list otherwise.\n+   *\n+   * @param term The selected or unselected term.\n+   */\n+  const handleSelectTerms = (term: string) => {\n+    const copiedSelectedTerms = selectedTerms ? [...selectedTerms] : [];\n+    const termIndex = copiedSelectedTerms.indexOf(term);\n+    if (termIndex === -1) {\n+      copiedSelectedTerms.push(term);\n+    } else {\n+      copiedSelectedTerms.splice(termIndex, 1);\n+    }\n+    onSelectTermsChange(copiedSelectedTerms);\n+  };\n+\n+  /**\n+   * Render a 'SHOW MORE' button for each Classification.\n+   * @param classificationName The name of a Classification.\n+   */\n+  const showMoreButton = (classificationName: string) => (\n+    <ListItem>\n+      <Grid container justify=\"center\">\n+        <Grid item>\n+          <Button\n+            id={`${classificationName}_show_more`}\n+            variant=\"text\"\n+            onClick={() => onShowMore(classificationName)}\n+          >\n+            {languageStrings.searchpage.facetSelector.showMoreButton}\n+          </Button>\n+        </Grid>\n+      </Grid>\n+    </ListItem>\n+  );\n+\n+  /**\n+   * Generate texts in the format of 'term (count)' for displaying a facet.\n+   * @param facet A facet\n+   */\n+  const facetLabel = (facet: OEQ.SearchFacets.Facet) => (\n+    <Grid container spacing={1}>\n+      <Grid item>\n+        <Typography>{facet.term}</Typography>\n+      </Grid>\n+      <Grid item>\n+        <Typography color=\"textSecondary\">{`(${facet.count})`}</Typography>\n+      </Grid>\n+    </Grid>\n+  );\n+\n+  /**\n+   * Render a MUI Checkbox and a Label for a facet.\n+   * @param facet A facet.\n+   */\n+  const renderFacet = (facet: OEQ.SearchFacets.Facet) => (\n+    <ListItem key={`${facet.term} ${facet.count}`} style={{ padding: 0 }}>\n+      <FormControlLabel\n+        control={\n+          <Checkbox\n+            checked={\n+              selectedTerms ? selectedTerms.indexOf(facet.term) !== -1 : false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66a1568916d608082be25fa736ad23274aec6ec9"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTQyNDY3OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__stories__/search/FacetSelector.stories.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMTozMjoxMVrOHFR7mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMTozMjoxMVrOHFR7mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI5ODcxMw==", "bodyText": "Could you please check in with @mrblippy on this so that we can start using the new Args and Controls approach?\nObviously we also have @ChristianMurphy 's #2182 coming on develop too, but let's do all the new ones with that in mind.\nAlso, I know you have mock data that has showMore as true and false, however it could be worthwhile to have two a stories which demonstrates this explicitly. That is, have a single Classification, and render once with it having showMore as true, and then another with it as false. Then you can click between the two stories and see the effect.", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r475298713", "createdAt": "2020-08-24T01:32:11Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__stories__/search/FacetSelector.stories.tsx", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import { action } from \"@storybook/addon-actions\";\n+import * as React from \"react\";\n+import { FacetSelector } from \"../../tsrc/search/components/FacetSelector\";\n+import * as FacetSelectorMock from \"../../__mocks__/FacetSelector.mock\";\n+\n+export default {\n+  title: \"Search/FacetSelector\",\n+  component: FacetSelector,\n+};\n+const commonProps = {\n+  classifications: FacetSelectorMock.classifications,\n+  onSelectTermsChange: action(\"on select terms\"),\n+  onShowMore: action(\"on Show more\"),\n+};\n+export const termsSelected = () => (\n+  <FacetSelector selectedTerms={[\"scala\", \"QLD\"]} {...commonProps} />\n+);\n+\n+export const noTermsSelected = () => <FacetSelector {...commonProps} />;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66a1568916d608082be25fa736ad23274aec6ec9"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTQzMDg4OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/components/FacetSelector.test.tsx", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMTozNjo0N1rOHFR_LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNTo1MTo1OVrOHFVe3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI5OTYyOA==", "bodyText": "I've got a feeling that if you change the function signature to specify the return type:\n  const getClassificationByName = (container: HTMLElement, name: string): HTMLElement => {\nThen you wont need the as coercion.", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r475299628", "createdAt": "2020-08-24T01:36:47Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/components/FacetSelector.test.tsx", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import {\n+  render,\n+  queryByText,\n+  getByText,\n+  fireEvent,\n+  RenderResult,\n+  getAllByRole,\n+} from \"@testing-library/react\";\n+import { FacetSelector } from \"../../../../tsrc/search/components/FacetSelector\";\n+import * as FacetSelectorMock from \"../../../../__mocks__/FacetSelector.mock\";\n+import \"@testing-library/jest-dom/extend-expect\";\n+\n+describe(\"<FacetSelector />\", () => {\n+  // Mocked callbacks\n+  const onSelectTermsChange = jest.fn();\n+  const onShowMore = jest.fn();\n+\n+  // Mocked Classifications\n+  const CITY = \"City\";\n+  const LANGUAGE = \"Language\";\n+  const COLOR = \"Color\";\n+  // Mocked facet\n+  const HOBART = \"Hobart\";\n+  // The text of 'SHOW MORE' button\n+  const SHOW_MORE = \"Show more\";\n+\n+  const renderFacetSelector = () =>\n+    render(\n+      <FacetSelector\n+        classifications={FacetSelectorMock.classifications}\n+        onSelectTermsChange={onSelectTermsChange}\n+        onShowMore={onShowMore}\n+      />\n+    );\n+\n+  // Return a 'li' that represents a Classification.\n+  const getClassificationByName = (container: HTMLElement, name: string) => {\n+    const id = `#classification_${name}`;\n+    const classification = container.querySelector(id);\n+    if (!classification) {\n+      throw new Error(`Unable to find Classification ${name}`);\n+    }\n+    return classification as HTMLElement;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66a1568916d608082be25fa736ad23274aec6ec9"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMzODI4Nw==", "bodyText": "This is not working on my machine. Does it work on yours ?", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r475338287", "createdAt": "2020-08-24T04:38:52Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/components/FacetSelector.test.tsx", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import {\n+  render,\n+  queryByText,\n+  getByText,\n+  fireEvent,\n+  RenderResult,\n+  getAllByRole,\n+} from \"@testing-library/react\";\n+import { FacetSelector } from \"../../../../tsrc/search/components/FacetSelector\";\n+import * as FacetSelectorMock from \"../../../../__mocks__/FacetSelector.mock\";\n+import \"@testing-library/jest-dom/extend-expect\";\n+\n+describe(\"<FacetSelector />\", () => {\n+  // Mocked callbacks\n+  const onSelectTermsChange = jest.fn();\n+  const onShowMore = jest.fn();\n+\n+  // Mocked Classifications\n+  const CITY = \"City\";\n+  const LANGUAGE = \"Language\";\n+  const COLOR = \"Color\";\n+  // Mocked facet\n+  const HOBART = \"Hobart\";\n+  // The text of 'SHOW MORE' button\n+  const SHOW_MORE = \"Show more\";\n+\n+  const renderFacetSelector = () =>\n+    render(\n+      <FacetSelector\n+        classifications={FacetSelectorMock.classifications}\n+        onSelectTermsChange={onSelectTermsChange}\n+        onShowMore={onShowMore}\n+      />\n+    );\n+\n+  // Return a 'li' that represents a Classification.\n+  const getClassificationByName = (container: HTMLElement, name: string) => {\n+    const id = `#classification_${name}`;\n+    const classification = container.querySelector(id);\n+    if (!classification) {\n+      throw new Error(`Unable to find Classification ${name}`);\n+    }\n+    return classification as HTMLElement;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI5OTYyOA=="}, "originalCommit": {"oid": "66a1568916d608082be25fa736ad23274aec6ec9"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMzOTczMA==", "bodyText": "hmmm, I thought it did on one of my new functions in the SearchPage.test.tsx refactor.\nThis it's this one (snipped off comments for readability here):\nconst queryRefineSearchComponent = (\n  container: Element,\n  componentSuffix: string\n): HTMLElement | null => {\n  const id = `#RefineSearchPanel-${componentSuffix}`;\n  return container.querySelector(id);\n};\n\nconst getRefineSearchComponent = (\n  container: Element,\n  componentSuffix: string\n): HTMLElement => {\n  const e = queryRefineSearchComponent(container, componentSuffix);\n  if (!e) {\n    throw new Error(`Failed to find ${componentSuffix}`);\n  }\n\n  return e;\n};\ngetRefineSearchComponent used to do the coercion. (Probably still does on this branch if you want to take a look/have a play.)", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r475339730", "createdAt": "2020-08-24T04:45:10Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/components/FacetSelector.test.tsx", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import {\n+  render,\n+  queryByText,\n+  getByText,\n+  fireEvent,\n+  RenderResult,\n+  getAllByRole,\n+} from \"@testing-library/react\";\n+import { FacetSelector } from \"../../../../tsrc/search/components/FacetSelector\";\n+import * as FacetSelectorMock from \"../../../../__mocks__/FacetSelector.mock\";\n+import \"@testing-library/jest-dom/extend-expect\";\n+\n+describe(\"<FacetSelector />\", () => {\n+  // Mocked callbacks\n+  const onSelectTermsChange = jest.fn();\n+  const onShowMore = jest.fn();\n+\n+  // Mocked Classifications\n+  const CITY = \"City\";\n+  const LANGUAGE = \"Language\";\n+  const COLOR = \"Color\";\n+  // Mocked facet\n+  const HOBART = \"Hobart\";\n+  // The text of 'SHOW MORE' button\n+  const SHOW_MORE = \"Show more\";\n+\n+  const renderFacetSelector = () =>\n+    render(\n+      <FacetSelector\n+        classifications={FacetSelectorMock.classifications}\n+        onSelectTermsChange={onSelectTermsChange}\n+        onShowMore={onShowMore}\n+      />\n+    );\n+\n+  // Return a 'li' that represents a Classification.\n+  const getClassificationByName = (container: HTMLElement, name: string) => {\n+    const id = `#classification_${name}`;\n+    const classification = container.querySelector(id);\n+    if (!classification) {\n+      throw new Error(`Unable to find Classification ${name}`);\n+    }\n+    return classification as HTMLElement;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI5OTYyOA=="}, "originalCommit": {"oid": "66a1568916d608082be25fa736ad23274aec6ec9"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM1Njg5Mw==", "bodyText": "I think if you assign container.querySelector(id) to a new variable in queryRefineSearchComponent, you would see the error. But, if we do container.querySelector<HtmlElement>(id) or specify the type of the variable, then the error is gone.", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r475356893", "createdAt": "2020-08-24T05:51:59Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/components/FacetSelector.test.tsx", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import {\n+  render,\n+  queryByText,\n+  getByText,\n+  fireEvent,\n+  RenderResult,\n+  getAllByRole,\n+} from \"@testing-library/react\";\n+import { FacetSelector } from \"../../../../tsrc/search/components/FacetSelector\";\n+import * as FacetSelectorMock from \"../../../../__mocks__/FacetSelector.mock\";\n+import \"@testing-library/jest-dom/extend-expect\";\n+\n+describe(\"<FacetSelector />\", () => {\n+  // Mocked callbacks\n+  const onSelectTermsChange = jest.fn();\n+  const onShowMore = jest.fn();\n+\n+  // Mocked Classifications\n+  const CITY = \"City\";\n+  const LANGUAGE = \"Language\";\n+  const COLOR = \"Color\";\n+  // Mocked facet\n+  const HOBART = \"Hobart\";\n+  // The text of 'SHOW MORE' button\n+  const SHOW_MORE = \"Show more\";\n+\n+  const renderFacetSelector = () =>\n+    render(\n+      <FacetSelector\n+        classifications={FacetSelectorMock.classifications}\n+        onSelectTermsChange={onSelectTermsChange}\n+        onShowMore={onShowMore}\n+      />\n+    );\n+\n+  // Return a 'li' that represents a Classification.\n+  const getClassificationByName = (container: HTMLElement, name: string) => {\n+    const id = `#classification_${name}`;\n+    const classification = container.querySelector(id);\n+    if (!classification) {\n+      throw new Error(`Unable to find Classification ${name}`);\n+    }\n+    return classification as HTMLElement;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI5OTYyOA=="}, "originalCommit": {"oid": "66a1568916d608082be25fa736ad23274aec6ec9"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTQzMTYyOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/components/FacetSelector.test.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMTozNzoxNFrOHFR_kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMTozNzoxNFrOHFR_kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI5OTczMQ==", "bodyText": "Be good to pull that from the matching language string.", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r475299731", "createdAt": "2020-08-24T01:37:14Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/components/FacetSelector.test.tsx", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import {\n+  render,\n+  queryByText,\n+  getByText,\n+  fireEvent,\n+  RenderResult,\n+  getAllByRole,\n+} from \"@testing-library/react\";\n+import { FacetSelector } from \"../../../../tsrc/search/components/FacetSelector\";\n+import * as FacetSelectorMock from \"../../../../__mocks__/FacetSelector.mock\";\n+import \"@testing-library/jest-dom/extend-expect\";\n+\n+describe(\"<FacetSelector />\", () => {\n+  // Mocked callbacks\n+  const onSelectTermsChange = jest.fn();\n+  const onShowMore = jest.fn();\n+\n+  // Mocked Classifications\n+  const CITY = \"City\";\n+  const LANGUAGE = \"Language\";\n+  const COLOR = \"Color\";\n+  // Mocked facet\n+  const HOBART = \"Hobart\";\n+  // The text of 'SHOW MORE' button\n+  const SHOW_MORE = \"Show more\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66a1568916d608082be25fa736ad23274aec6ec9"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTQzMjM5OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/components/FacetSelector.test.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMTozNzo1NVrOHFSAFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMTozNzo1NVrOHFSAFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI5OTg2Mg==", "bodyText": "Is that needed?", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r475299862", "createdAt": "2020-08-24T01:37:55Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/components/FacetSelector.test.tsx", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import {\n+  render,\n+  queryByText,\n+  getByText,\n+  fireEvent,\n+  RenderResult,\n+  getAllByRole,\n+} from \"@testing-library/react\";\n+import { FacetSelector } from \"../../../../tsrc/search/components/FacetSelector\";\n+import * as FacetSelectorMock from \"../../../../__mocks__/FacetSelector.mock\";\n+import \"@testing-library/jest-dom/extend-expect\";\n+\n+describe(\"<FacetSelector />\", () => {\n+  // Mocked callbacks\n+  const onSelectTermsChange = jest.fn();\n+  const onShowMore = jest.fn();\n+\n+  // Mocked Classifications\n+  const CITY = \"City\";\n+  const LANGUAGE = \"Language\";\n+  const COLOR = \"Color\";\n+  // Mocked facet\n+  const HOBART = \"Hobart\";\n+  // The text of 'SHOW MORE' button\n+  const SHOW_MORE = \"Show more\";\n+\n+  const renderFacetSelector = () =>\n+    render(\n+      <FacetSelector\n+        classifications={FacetSelectorMock.classifications}\n+        onSelectTermsChange={onSelectTermsChange}\n+        onShowMore={onShowMore}\n+      />\n+    );\n+\n+  // Return a 'li' that represents a Classification.\n+  const getClassificationByName = (container: HTMLElement, name: string) => {\n+    const id = `#classification_${name}`;\n+    const classification = container.querySelector(id);\n+    if (!classification) {\n+      throw new Error(`Unable to find Classification ${name}`);\n+    }\n+    return classification as HTMLElement;\n+  };\n+\n+  // Return a Classification's 'SHOW MORE' button.\n+  const getShowMoreButton = (\n+    container: HTMLElement,\n+    classificationName: string\n+  ) => {\n+    const classification = getClassificationByName(\n+      container,\n+      classificationName\n+    );\n+    return queryByText(classification, SHOW_MORE);\n+  };\n+\n+  let page: RenderResult;\n+  beforeEach(() => {\n+    page = renderFacetSelector();\n+  });\n+\n+  afterEach(() => {\n+    jest.clearAllMocks();\n+  });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483c380b6ed795f819cf5a2caf28dfdde1c12ba4"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTQzMzk0OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/components/FacetSelector.test.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMTozOToxN1rOHFSBDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMTozOToxN1rOHFSBDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMwMDExMQ==", "bodyText": "There's no real need to be putting this into a variable.", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r475300111", "createdAt": "2020-08-24T01:39:17Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/components/FacetSelector.test.tsx", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import {\n+  render,\n+  queryByText,\n+  getByText,\n+  fireEvent,\n+  RenderResult,\n+  getAllByRole,\n+} from \"@testing-library/react\";\n+import { FacetSelector } from \"../../../../tsrc/search/components/FacetSelector\";\n+import * as FacetSelectorMock from \"../../../../__mocks__/FacetSelector.mock\";\n+import \"@testing-library/jest-dom/extend-expect\";\n+\n+describe(\"<FacetSelector />\", () => {\n+  // Mocked callbacks\n+  const onSelectTermsChange = jest.fn();\n+  const onShowMore = jest.fn();\n+\n+  // Mocked Classifications\n+  const CITY = \"City\";\n+  const LANGUAGE = \"Language\";\n+  const COLOR = \"Color\";\n+  // Mocked facet\n+  const HOBART = \"Hobart\";\n+  // The text of 'SHOW MORE' button\n+  const SHOW_MORE = \"Show more\";\n+\n+  const renderFacetSelector = () =>\n+    render(\n+      <FacetSelector\n+        classifications={FacetSelectorMock.classifications}\n+        onSelectTermsChange={onSelectTermsChange}\n+        onShowMore={onShowMore}\n+      />\n+    );\n+\n+  // Return a 'li' that represents a Classification.\n+  const getClassificationByName = (container: HTMLElement, name: string) => {\n+    const id = `#classification_${name}`;\n+    const classification = container.querySelector(id);\n+    if (!classification) {\n+      throw new Error(`Unable to find Classification ${name}`);\n+    }\n+    return classification as HTMLElement;\n+  };\n+\n+  // Return a Classification's 'SHOW MORE' button.\n+  const getShowMoreButton = (\n+    container: HTMLElement,\n+    classificationName: string\n+  ) => {\n+    const classification = getClassificationByName(\n+      container,\n+      classificationName\n+    );\n+    return queryByText(classification, SHOW_MORE);\n+  };\n+\n+  let page: RenderResult;\n+  beforeEach(() => {\n+    page = renderFacetSelector();\n+  });\n+\n+  afterEach(() => {\n+    jest.clearAllMocks();\n+  });\n+\n+  it(\"should display a list of classifications that have categories\", () => {\n+    // Language and City should be displayed.\n+    [CITY, LANGUAGE].forEach((name) => {\n+      expect(getByText(page.container, name)).toBeInTheDocument();\n+    });\n+    // Color should not be displayed because it does not have categories.\n+    expect(queryByText(page.container, COLOR)).not.toBeInTheDocument();\n+  });\n+\n+  it(\"should display the 'SHOW MORE' button when 'showMore' is true\", () => {\n+    let showMoreButton;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483c380b6ed795f819cf5a2caf28dfdde1c12ba4"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTQzNjY1OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/components/FacetSelector.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMTo0MToyMVrOHFSCtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNDo0MToxMFrOHFUYTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMwMDUzNA==", "bodyText": "We should try and matching the React Testing Library function signatures. So this function should be:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              const getShowMoreButton = (\n          \n          \n            \n              const queryShowMoreButton = (", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r475300534", "createdAt": "2020-08-24T01:41:21Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/components/FacetSelector.test.tsx", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import {\n+  render,\n+  queryByText,\n+  getByText,\n+  fireEvent,\n+  RenderResult,\n+  getAllByRole,\n+} from \"@testing-library/react\";\n+import { FacetSelector } from \"../../../../tsrc/search/components/FacetSelector\";\n+import * as FacetSelectorMock from \"../../../../__mocks__/FacetSelector.mock\";\n+import \"@testing-library/jest-dom/extend-expect\";\n+\n+describe(\"<FacetSelector />\", () => {\n+  // Mocked callbacks\n+  const onSelectTermsChange = jest.fn();\n+  const onShowMore = jest.fn();\n+\n+  // Mocked Classifications\n+  const CITY = \"City\";\n+  const LANGUAGE = \"Language\";\n+  const COLOR = \"Color\";\n+  // Mocked facet\n+  const HOBART = \"Hobart\";\n+  // The text of 'SHOW MORE' button\n+  const SHOW_MORE = \"Show more\";\n+\n+  const renderFacetSelector = () =>\n+    render(\n+      <FacetSelector\n+        classifications={FacetSelectorMock.classifications}\n+        onSelectTermsChange={onSelectTermsChange}\n+        onShowMore={onShowMore}\n+      />\n+    );\n+\n+  // Return a 'li' that represents a Classification.\n+  const getClassificationByName = (container: HTMLElement, name: string) => {\n+    const id = `#classification_${name}`;\n+    const classification = container.querySelector(id);\n+    if (!classification) {\n+      throw new Error(`Unable to find Classification ${name}`);\n+    }\n+    return classification as HTMLElement;\n+  };\n+\n+  // Return a Classification's 'SHOW MORE' button.\n+  const getShowMoreButton = (", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483c380b6ed795f819cf5a2caf28dfdde1c12ba4"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMzODgyOA==", "bodyText": "Good idea. If the functions throws an error then it's name should be getByxxx.", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r475338828", "createdAt": "2020-08-24T04:41:10Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/components/FacetSelector.test.tsx", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import {\n+  render,\n+  queryByText,\n+  getByText,\n+  fireEvent,\n+  RenderResult,\n+  getAllByRole,\n+} from \"@testing-library/react\";\n+import { FacetSelector } from \"../../../../tsrc/search/components/FacetSelector\";\n+import * as FacetSelectorMock from \"../../../../__mocks__/FacetSelector.mock\";\n+import \"@testing-library/jest-dom/extend-expect\";\n+\n+describe(\"<FacetSelector />\", () => {\n+  // Mocked callbacks\n+  const onSelectTermsChange = jest.fn();\n+  const onShowMore = jest.fn();\n+\n+  // Mocked Classifications\n+  const CITY = \"City\";\n+  const LANGUAGE = \"Language\";\n+  const COLOR = \"Color\";\n+  // Mocked facet\n+  const HOBART = \"Hobart\";\n+  // The text of 'SHOW MORE' button\n+  const SHOW_MORE = \"Show more\";\n+\n+  const renderFacetSelector = () =>\n+    render(\n+      <FacetSelector\n+        classifications={FacetSelectorMock.classifications}\n+        onSelectTermsChange={onSelectTermsChange}\n+        onShowMore={onShowMore}\n+      />\n+    );\n+\n+  // Return a 'li' that represents a Classification.\n+  const getClassificationByName = (container: HTMLElement, name: string) => {\n+    const id = `#classification_${name}`;\n+    const classification = container.querySelector(id);\n+    if (!classification) {\n+      throw new Error(`Unable to find Classification ${name}`);\n+    }\n+    return classification as HTMLElement;\n+  };\n+\n+  // Return a Classification's 'SHOW MORE' button.\n+  const getShowMoreButton = (", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMwMDUzNA=="}, "originalCommit": {"oid": "483c380b6ed795f819cf5a2caf28dfdde1c12ba4"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTQ0MDc5OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/SearchPage.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMTo0NDoxN1rOHFSFFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMTo0NDoxN1rOHFSFFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMwMTE0Mw==", "bodyText": "It feels to me that this actually belongs over in FacetSelector.tsx. This really sticks out, as it's not even needed here yet, but most certainly is over in FacetSelector.", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r475301143", "createdAt": "2020-08-24T01:44:17Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/SearchPage.tsx", "diffHunk": "@@ -61,6 +62,16 @@ export interface SearchPageOptions extends SearchOptions {\n   dateRangeQuickModeEnabled: boolean;\n }\n \n+/**\n+ * Represents a Classification that is specific to Search page.\n+ */\n+export interface SearchPageClassification extends Classification {\n+  /**\n+   * A boolean indicating if a classification has hidden categories to show.\n+   */\n+  showMore: boolean;\n+}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483c380b6ed795f819cf5a2caf28dfdde1c12ba4"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTQ0MzkzOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMTo0NjoxNFrOHFSGxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMjoxMjo1NlrOHFScFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMwMTU3Mw==", "bodyText": "Is string[] specific enough. What if I have the same term in multiple Classifications? Sure the search will work the same, but the UI will not look correct.", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r475301573", "createdAt": "2020-08-24T01:46:14Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import {\n+  Button,\n+  Checkbox,\n+  FormControlLabel,\n+  Grid,\n+  List,\n+  ListItem,\n+  Typography,\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/core/styles\";\n+import * as React from \"react\";\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import type { SearchPageClassification } from \"../SearchPage\";\n+\n+const useStyles = makeStyles({\n+  classificationList: {\n+    maxHeight: 500,\n+    overflow: \"auto\",\n+  },\n+});\n+\n+interface FacetSelectorProps {\n+  /**\n+   * A list of Classifications.\n+   */\n+  classifications: SearchPageClassification[];\n+  /**\n+   * A list of selected facets.\n+   */\n+  selectedTerms?: string[];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483c380b6ed795f819cf5a2caf28dfdde1c12ba4"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMwNzAzMA==", "bodyText": "No enough \ud83d\ude04 .\nI did not commit another type for this field which is a Map<string, string[]>. I will bring that in this PR.", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r475307030", "createdAt": "2020-08-24T02:12:56Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import {\n+  Button,\n+  Checkbox,\n+  FormControlLabel,\n+  Grid,\n+  List,\n+  ListItem,\n+  Typography,\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/core/styles\";\n+import * as React from \"react\";\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import type { SearchPageClassification } from \"../SearchPage\";\n+\n+const useStyles = makeStyles({\n+  classificationList: {\n+    maxHeight: 500,\n+    overflow: \"auto\",\n+  },\n+});\n+\n+interface FacetSelectorProps {\n+  /**\n+   * A list of Classifications.\n+   */\n+  classifications: SearchPageClassification[];\n+  /**\n+   * A list of selected facets.\n+   */\n+  selectedTerms?: string[];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMwMTU3Mw=="}, "originalCommit": {"oid": "483c380b6ed795f819cf5a2caf28dfdde1c12ba4"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTQ0Njc4OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMTo0ODozMlrOHFSIfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNTozOToyNFrOHFVQ4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMwMjAxNQ==", "bodyText": "What if classificationName has spaces?", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r475302015", "createdAt": "2020-08-24T01:48:32Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import {\n+  Button,\n+  Checkbox,\n+  FormControlLabel,\n+  Grid,\n+  List,\n+  ListItem,\n+  Typography,\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/core/styles\";\n+import * as React from \"react\";\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import type { SearchPageClassification } from \"../SearchPage\";\n+\n+const useStyles = makeStyles({\n+  classificationList: {\n+    maxHeight: 500,\n+    overflow: \"auto\",\n+  },\n+});\n+\n+interface FacetSelectorProps {\n+  /**\n+   * A list of Classifications.\n+   */\n+  classifications: SearchPageClassification[];\n+  /**\n+   * A list of selected facets.\n+   */\n+  selectedTerms?: string[];\n+  /**\n+   * Handler for selecting/deselecting Classification terms.\n+   * @param terms A list of currently selected terms.\n+   */\n+  onSelectTermsChange: (terms: string[]) => void;\n+  /**\n+   * Handler for clicking a 'SHOW MORE' button.\n+   * @param classificationName The name of a Classification.\n+   */\n+  onShowMore: (classificationName: string) => void;\n+}\n+\n+export const FacetSelector = ({\n+  classifications,\n+  selectedTerms,\n+  onSelectTermsChange,\n+  onShowMore,\n+}: FacetSelectorProps) => {\n+  const classes = useStyles();\n+\n+  /**\n+   * Updates the list of selected Classification terms. If the term exists then remove it\n+   * from the list. Add it to the list otherwise.\n+   *\n+   * @param term The selected or unselected term.\n+   */\n+  const handleSelectTerms = (term: string) => {\n+    const copiedSelectedTerms = selectedTerms ? [...selectedTerms] : [];\n+    const termIndex = copiedSelectedTerms.indexOf(term);\n+    if (termIndex === -1) {\n+      copiedSelectedTerms.push(term);\n+    } else {\n+      copiedSelectedTerms.splice(termIndex, 1);\n+    }\n+    onSelectTermsChange(copiedSelectedTerms);\n+  };\n+\n+  /**\n+   * Render a 'SHOW MORE' button for each Classification.\n+   * @param classificationName The name of a Classification.\n+   */\n+  const showMoreButton = (classificationName: string) => (\n+    <ListItem>\n+      <Grid container justify=\"center\">\n+        <Grid item>\n+          <Button\n+            id={`${classificationName}_show_more`}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483c380b6ed795f819cf5a2caf28dfdde1c12ba4"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM1MzMxNQ==", "bodyText": "hmmm, it turns out we don't need IDs for these buttons. So I will remove them.", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r475353315", "createdAt": "2020-08-24T05:39:24Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import {\n+  Button,\n+  Checkbox,\n+  FormControlLabel,\n+  Grid,\n+  List,\n+  ListItem,\n+  Typography,\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/core/styles\";\n+import * as React from \"react\";\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import type { SearchPageClassification } from \"../SearchPage\";\n+\n+const useStyles = makeStyles({\n+  classificationList: {\n+    maxHeight: 500,\n+    overflow: \"auto\",\n+  },\n+});\n+\n+interface FacetSelectorProps {\n+  /**\n+   * A list of Classifications.\n+   */\n+  classifications: SearchPageClassification[];\n+  /**\n+   * A list of selected facets.\n+   */\n+  selectedTerms?: string[];\n+  /**\n+   * Handler for selecting/deselecting Classification terms.\n+   * @param terms A list of currently selected terms.\n+   */\n+  onSelectTermsChange: (terms: string[]) => void;\n+  /**\n+   * Handler for clicking a 'SHOW MORE' button.\n+   * @param classificationName The name of a Classification.\n+   */\n+  onShowMore: (classificationName: string) => void;\n+}\n+\n+export const FacetSelector = ({\n+  classifications,\n+  selectedTerms,\n+  onSelectTermsChange,\n+  onShowMore,\n+}: FacetSelectorProps) => {\n+  const classes = useStyles();\n+\n+  /**\n+   * Updates the list of selected Classification terms. If the term exists then remove it\n+   * from the list. Add it to the list otherwise.\n+   *\n+   * @param term The selected or unselected term.\n+   */\n+  const handleSelectTerms = (term: string) => {\n+    const copiedSelectedTerms = selectedTerms ? [...selectedTerms] : [];\n+    const termIndex = copiedSelectedTerms.indexOf(term);\n+    if (termIndex === -1) {\n+      copiedSelectedTerms.push(term);\n+    } else {\n+      copiedSelectedTerms.splice(termIndex, 1);\n+    }\n+    onSelectTermsChange(copiedSelectedTerms);\n+  };\n+\n+  /**\n+   * Render a 'SHOW MORE' button for each Classification.\n+   * @param classificationName The name of a Classification.\n+   */\n+  const showMoreButton = (classificationName: string) => (\n+    <ListItem>\n+      <Grid container justify=\"center\">\n+        <Grid item>\n+          <Button\n+            id={`${classificationName}_show_more`}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMwMjAxNQ=="}, "originalCommit": {"oid": "483c380b6ed795f819cf5a2caf28dfdde1c12ba4"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTQ0OTA1OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMTo1MDowMVrOHFSJtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMTo1MDowMVrOHFSJtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMwMjMyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              const renderFacet = (facet: OEQ.SearchFacets.Facet) => (\n          \n          \n            \n              const facetListItem = (facet: OEQ.SearchFacets.Facet) => (", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r475302326", "createdAt": "2020-08-24T01:50:01Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import {\n+  Button,\n+  Checkbox,\n+  FormControlLabel,\n+  Grid,\n+  List,\n+  ListItem,\n+  Typography,\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/core/styles\";\n+import * as React from \"react\";\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import type { SearchPageClassification } from \"../SearchPage\";\n+\n+const useStyles = makeStyles({\n+  classificationList: {\n+    maxHeight: 500,\n+    overflow: \"auto\",\n+  },\n+});\n+\n+interface FacetSelectorProps {\n+  /**\n+   * A list of Classifications.\n+   */\n+  classifications: SearchPageClassification[];\n+  /**\n+   * A list of selected facets.\n+   */\n+  selectedTerms?: string[];\n+  /**\n+   * Handler for selecting/deselecting Classification terms.\n+   * @param terms A list of currently selected terms.\n+   */\n+  onSelectTermsChange: (terms: string[]) => void;\n+  /**\n+   * Handler for clicking a 'SHOW MORE' button.\n+   * @param classificationName The name of a Classification.\n+   */\n+  onShowMore: (classificationName: string) => void;\n+}\n+\n+export const FacetSelector = ({\n+  classifications,\n+  selectedTerms,\n+  onSelectTermsChange,\n+  onShowMore,\n+}: FacetSelectorProps) => {\n+  const classes = useStyles();\n+\n+  /**\n+   * Updates the list of selected Classification terms. If the term exists then remove it\n+   * from the list. Add it to the list otherwise.\n+   *\n+   * @param term The selected or unselected term.\n+   */\n+  const handleSelectTerms = (term: string) => {\n+    const copiedSelectedTerms = selectedTerms ? [...selectedTerms] : [];\n+    const termIndex = copiedSelectedTerms.indexOf(term);\n+    if (termIndex === -1) {\n+      copiedSelectedTerms.push(term);\n+    } else {\n+      copiedSelectedTerms.splice(termIndex, 1);\n+    }\n+    onSelectTermsChange(copiedSelectedTerms);\n+  };\n+\n+  /**\n+   * Render a 'SHOW MORE' button for each Classification.\n+   * @param classificationName The name of a Classification.\n+   */\n+  const showMoreButton = (classificationName: string) => (\n+    <ListItem>\n+      <Grid container justify=\"center\">\n+        <Grid item>\n+          <Button\n+            id={`${classificationName}_show_more`}\n+            variant=\"text\"\n+            onClick={() => onShowMore(classificationName)}\n+          >\n+            {languageStrings.searchpage.facetSelector.showMoreButton}\n+          </Button>\n+        </Grid>\n+      </Grid>\n+    </ListItem>\n+  );\n+\n+  /**\n+   * Generate texts in the format of 'term (count)' for displaying a facet.\n+   * @param facet A facet\n+   */\n+  const facetLabel = (facet: OEQ.SearchFacets.Facet) => (\n+    <Grid container spacing={1}>\n+      <Grid item>\n+        <Typography>{facet.term}</Typography>\n+      </Grid>\n+      <Grid item>\n+        <Typography color=\"textSecondary\">{`(${facet.count})`}</Typography>\n+      </Grid>\n+    </Grid>\n+  );\n+\n+  /**\n+   * Render a MUI Checkbox and a Label for a facet.\n+   * @param facet A facet.\n+   */\n+  const renderFacet = (facet: OEQ.SearchFacets.Facet) => (", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483c380b6ed795f819cf5a2caf28dfdde1c12ba4"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTQ1MDA4OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMTo1MDo1NFrOHFSKZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMTo1MDo1NFrOHFSKZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMwMjUwMA==", "bodyText": "This is not rendering, just building.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Render a MUI Checkbox and a Label for a facet.\n          \n          \n            \n               * Build a ListItem consisting of a MUI Checkbox and a Label for a facet.", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r475302500", "createdAt": "2020-08-24T01:50:54Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import {\n+  Button,\n+  Checkbox,\n+  FormControlLabel,\n+  Grid,\n+  List,\n+  ListItem,\n+  Typography,\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/core/styles\";\n+import * as React from \"react\";\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import type { SearchPageClassification } from \"../SearchPage\";\n+\n+const useStyles = makeStyles({\n+  classificationList: {\n+    maxHeight: 500,\n+    overflow: \"auto\",\n+  },\n+});\n+\n+interface FacetSelectorProps {\n+  /**\n+   * A list of Classifications.\n+   */\n+  classifications: SearchPageClassification[];\n+  /**\n+   * A list of selected facets.\n+   */\n+  selectedTerms?: string[];\n+  /**\n+   * Handler for selecting/deselecting Classification terms.\n+   * @param terms A list of currently selected terms.\n+   */\n+  onSelectTermsChange: (terms: string[]) => void;\n+  /**\n+   * Handler for clicking a 'SHOW MORE' button.\n+   * @param classificationName The name of a Classification.\n+   */\n+  onShowMore: (classificationName: string) => void;\n+}\n+\n+export const FacetSelector = ({\n+  classifications,\n+  selectedTerms,\n+  onSelectTermsChange,\n+  onShowMore,\n+}: FacetSelectorProps) => {\n+  const classes = useStyles();\n+\n+  /**\n+   * Updates the list of selected Classification terms. If the term exists then remove it\n+   * from the list. Add it to the list otherwise.\n+   *\n+   * @param term The selected or unselected term.\n+   */\n+  const handleSelectTerms = (term: string) => {\n+    const copiedSelectedTerms = selectedTerms ? [...selectedTerms] : [];\n+    const termIndex = copiedSelectedTerms.indexOf(term);\n+    if (termIndex === -1) {\n+      copiedSelectedTerms.push(term);\n+    } else {\n+      copiedSelectedTerms.splice(termIndex, 1);\n+    }\n+    onSelectTermsChange(copiedSelectedTerms);\n+  };\n+\n+  /**\n+   * Render a 'SHOW MORE' button for each Classification.\n+   * @param classificationName The name of a Classification.\n+   */\n+  const showMoreButton = (classificationName: string) => (\n+    <ListItem>\n+      <Grid container justify=\"center\">\n+        <Grid item>\n+          <Button\n+            id={`${classificationName}_show_more`}\n+            variant=\"text\"\n+            onClick={() => onShowMore(classificationName)}\n+          >\n+            {languageStrings.searchpage.facetSelector.showMoreButton}\n+          </Button>\n+        </Grid>\n+      </Grid>\n+    </ListItem>\n+  );\n+\n+  /**\n+   * Generate texts in the format of 'term (count)' for displaying a facet.\n+   * @param facet A facet\n+   */\n+  const facetLabel = (facet: OEQ.SearchFacets.Facet) => (\n+    <Grid container spacing={1}>\n+      <Grid item>\n+        <Typography>{facet.term}</Typography>\n+      </Grid>\n+      <Grid item>\n+        <Typography color=\"textSecondary\">{`(${facet.count})`}</Typography>\n+      </Grid>\n+    </Grid>\n+  );\n+\n+  /**\n+   * Render a MUI Checkbox and a Label for a facet.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483c380b6ed795f819cf5a2caf28dfdde1c12ba4"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTQ1MDk1OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMTo1MTozOVrOHFSK7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNDo1NTo1NFrOHFUmDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMwMjYzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              const renderCategories = (classification: SearchPageClassification) => {\n          \n          \n            \n              const listCategories = (classification: SearchPageClassification): ListItem[] => {", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r475302636", "createdAt": "2020-08-24T01:51:39Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import {\n+  Button,\n+  Checkbox,\n+  FormControlLabel,\n+  Grid,\n+  List,\n+  ListItem,\n+  Typography,\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/core/styles\";\n+import * as React from \"react\";\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import type { SearchPageClassification } from \"../SearchPage\";\n+\n+const useStyles = makeStyles({\n+  classificationList: {\n+    maxHeight: 500,\n+    overflow: \"auto\",\n+  },\n+});\n+\n+interface FacetSelectorProps {\n+  /**\n+   * A list of Classifications.\n+   */\n+  classifications: SearchPageClassification[];\n+  /**\n+   * A list of selected facets.\n+   */\n+  selectedTerms?: string[];\n+  /**\n+   * Handler for selecting/deselecting Classification terms.\n+   * @param terms A list of currently selected terms.\n+   */\n+  onSelectTermsChange: (terms: string[]) => void;\n+  /**\n+   * Handler for clicking a 'SHOW MORE' button.\n+   * @param classificationName The name of a Classification.\n+   */\n+  onShowMore: (classificationName: string) => void;\n+}\n+\n+export const FacetSelector = ({\n+  classifications,\n+  selectedTerms,\n+  onSelectTermsChange,\n+  onShowMore,\n+}: FacetSelectorProps) => {\n+  const classes = useStyles();\n+\n+  /**\n+   * Updates the list of selected Classification terms. If the term exists then remove it\n+   * from the list. Add it to the list otherwise.\n+   *\n+   * @param term The selected or unselected term.\n+   */\n+  const handleSelectTerms = (term: string) => {\n+    const copiedSelectedTerms = selectedTerms ? [...selectedTerms] : [];\n+    const termIndex = copiedSelectedTerms.indexOf(term);\n+    if (termIndex === -1) {\n+      copiedSelectedTerms.push(term);\n+    } else {\n+      copiedSelectedTerms.splice(termIndex, 1);\n+    }\n+    onSelectTermsChange(copiedSelectedTerms);\n+  };\n+\n+  /**\n+   * Render a 'SHOW MORE' button for each Classification.\n+   * @param classificationName The name of a Classification.\n+   */\n+  const showMoreButton = (classificationName: string) => (\n+    <ListItem>\n+      <Grid container justify=\"center\">\n+        <Grid item>\n+          <Button\n+            id={`${classificationName}_show_more`}\n+            variant=\"text\"\n+            onClick={() => onShowMore(classificationName)}\n+          >\n+            {languageStrings.searchpage.facetSelector.showMoreButton}\n+          </Button>\n+        </Grid>\n+      </Grid>\n+    </ListItem>\n+  );\n+\n+  /**\n+   * Generate texts in the format of 'term (count)' for displaying a facet.\n+   * @param facet A facet\n+   */\n+  const facetLabel = (facet: OEQ.SearchFacets.Facet) => (\n+    <Grid container spacing={1}>\n+      <Grid item>\n+        <Typography>{facet.term}</Typography>\n+      </Grid>\n+      <Grid item>\n+        <Typography color=\"textSecondary\">{`(${facet.count})`}</Typography>\n+      </Grid>\n+    </Grid>\n+  );\n+\n+  /**\n+   * Render a MUI Checkbox and a Label for a facet.\n+   * @param facet A facet.\n+   */\n+  const renderFacet = (facet: OEQ.SearchFacets.Facet) => (\n+    <ListItem key={`${facet.term} ${facet.count}`} style={{ padding: 0 }}>\n+      <FormControlLabel\n+        control={\n+          <Checkbox\n+            checked={\n+              selectedTerms ? selectedTerms.includes(facet.term) : false\n+            }\n+            onChange={() => handleSelectTerms(facet.term)}\n+          />\n+        }\n+        label={facetLabel(facet)}\n+      />\n+    </ListItem>\n+  );\n+\n+  /**\n+   * Render a list for a Classification's categories. Some categories\n+   * may have facets not displayed due to the configured maximum display number.\n+   * @param classification A Classification..\n+   */\n+  const renderCategories = (classification: SearchPageClassification) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483c380b6ed795f819cf5a2caf28dfdde1c12ba4"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM0MjM0OA==", "bodyText": "ListItem is not a type so do you like ReactElement[] instead ?", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r475342348", "createdAt": "2020-08-24T04:55:54Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import {\n+  Button,\n+  Checkbox,\n+  FormControlLabel,\n+  Grid,\n+  List,\n+  ListItem,\n+  Typography,\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/core/styles\";\n+import * as React from \"react\";\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import type { SearchPageClassification } from \"../SearchPage\";\n+\n+const useStyles = makeStyles({\n+  classificationList: {\n+    maxHeight: 500,\n+    overflow: \"auto\",\n+  },\n+});\n+\n+interface FacetSelectorProps {\n+  /**\n+   * A list of Classifications.\n+   */\n+  classifications: SearchPageClassification[];\n+  /**\n+   * A list of selected facets.\n+   */\n+  selectedTerms?: string[];\n+  /**\n+   * Handler for selecting/deselecting Classification terms.\n+   * @param terms A list of currently selected terms.\n+   */\n+  onSelectTermsChange: (terms: string[]) => void;\n+  /**\n+   * Handler for clicking a 'SHOW MORE' button.\n+   * @param classificationName The name of a Classification.\n+   */\n+  onShowMore: (classificationName: string) => void;\n+}\n+\n+export const FacetSelector = ({\n+  classifications,\n+  selectedTerms,\n+  onSelectTermsChange,\n+  onShowMore,\n+}: FacetSelectorProps) => {\n+  const classes = useStyles();\n+\n+  /**\n+   * Updates the list of selected Classification terms. If the term exists then remove it\n+   * from the list. Add it to the list otherwise.\n+   *\n+   * @param term The selected or unselected term.\n+   */\n+  const handleSelectTerms = (term: string) => {\n+    const copiedSelectedTerms = selectedTerms ? [...selectedTerms] : [];\n+    const termIndex = copiedSelectedTerms.indexOf(term);\n+    if (termIndex === -1) {\n+      copiedSelectedTerms.push(term);\n+    } else {\n+      copiedSelectedTerms.splice(termIndex, 1);\n+    }\n+    onSelectTermsChange(copiedSelectedTerms);\n+  };\n+\n+  /**\n+   * Render a 'SHOW MORE' button for each Classification.\n+   * @param classificationName The name of a Classification.\n+   */\n+  const showMoreButton = (classificationName: string) => (\n+    <ListItem>\n+      <Grid container justify=\"center\">\n+        <Grid item>\n+          <Button\n+            id={`${classificationName}_show_more`}\n+            variant=\"text\"\n+            onClick={() => onShowMore(classificationName)}\n+          >\n+            {languageStrings.searchpage.facetSelector.showMoreButton}\n+          </Button>\n+        </Grid>\n+      </Grid>\n+    </ListItem>\n+  );\n+\n+  /**\n+   * Generate texts in the format of 'term (count)' for displaying a facet.\n+   * @param facet A facet\n+   */\n+  const facetLabel = (facet: OEQ.SearchFacets.Facet) => (\n+    <Grid container spacing={1}>\n+      <Grid item>\n+        <Typography>{facet.term}</Typography>\n+      </Grid>\n+      <Grid item>\n+        <Typography color=\"textSecondary\">{`(${facet.count})`}</Typography>\n+      </Grid>\n+    </Grid>\n+  );\n+\n+  /**\n+   * Render a MUI Checkbox and a Label for a facet.\n+   * @param facet A facet.\n+   */\n+  const renderFacet = (facet: OEQ.SearchFacets.Facet) => (\n+    <ListItem key={`${facet.term} ${facet.count}`} style={{ padding: 0 }}>\n+      <FormControlLabel\n+        control={\n+          <Checkbox\n+            checked={\n+              selectedTerms ? selectedTerms.includes(facet.term) : false\n+            }\n+            onChange={() => handleSelectTerms(facet.term)}\n+          />\n+        }\n+        label={facetLabel(facet)}\n+      />\n+    </ListItem>\n+  );\n+\n+  /**\n+   * Render a list for a Classification's categories. Some categories\n+   * may have facets not displayed due to the configured maximum display number.\n+   * @param classification A Classification..\n+   */\n+  const renderCategories = (classification: SearchPageClassification) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMwMjYzNg=="}, "originalCommit": {"oid": "483c380b6ed795f819cf5a2caf28dfdde1c12ba4"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTQ1MTk5OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMTo1MjoyMVrOHFSLgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMTo1MjoyMVrOHFSLgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMwMjc4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Render a list for a Classification's categories. Some categories\n          \n          \n            \n               * Build a list for a Classification's categories. Some categories", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r475302784", "createdAt": "2020-08-24T01:52:21Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import {\n+  Button,\n+  Checkbox,\n+  FormControlLabel,\n+  Grid,\n+  List,\n+  ListItem,\n+  Typography,\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/core/styles\";\n+import * as React from \"react\";\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import type { SearchPageClassification } from \"../SearchPage\";\n+\n+const useStyles = makeStyles({\n+  classificationList: {\n+    maxHeight: 500,\n+    overflow: \"auto\",\n+  },\n+});\n+\n+interface FacetSelectorProps {\n+  /**\n+   * A list of Classifications.\n+   */\n+  classifications: SearchPageClassification[];\n+  /**\n+   * A list of selected facets.\n+   */\n+  selectedTerms?: string[];\n+  /**\n+   * Handler for selecting/deselecting Classification terms.\n+   * @param terms A list of currently selected terms.\n+   */\n+  onSelectTermsChange: (terms: string[]) => void;\n+  /**\n+   * Handler for clicking a 'SHOW MORE' button.\n+   * @param classificationName The name of a Classification.\n+   */\n+  onShowMore: (classificationName: string) => void;\n+}\n+\n+export const FacetSelector = ({\n+  classifications,\n+  selectedTerms,\n+  onSelectTermsChange,\n+  onShowMore,\n+}: FacetSelectorProps) => {\n+  const classes = useStyles();\n+\n+  /**\n+   * Updates the list of selected Classification terms. If the term exists then remove it\n+   * from the list. Add it to the list otherwise.\n+   *\n+   * @param term The selected or unselected term.\n+   */\n+  const handleSelectTerms = (term: string) => {\n+    const copiedSelectedTerms = selectedTerms ? [...selectedTerms] : [];\n+    const termIndex = copiedSelectedTerms.indexOf(term);\n+    if (termIndex === -1) {\n+      copiedSelectedTerms.push(term);\n+    } else {\n+      copiedSelectedTerms.splice(termIndex, 1);\n+    }\n+    onSelectTermsChange(copiedSelectedTerms);\n+  };\n+\n+  /**\n+   * Render a 'SHOW MORE' button for each Classification.\n+   * @param classificationName The name of a Classification.\n+   */\n+  const showMoreButton = (classificationName: string) => (\n+    <ListItem>\n+      <Grid container justify=\"center\">\n+        <Grid item>\n+          <Button\n+            id={`${classificationName}_show_more`}\n+            variant=\"text\"\n+            onClick={() => onShowMore(classificationName)}\n+          >\n+            {languageStrings.searchpage.facetSelector.showMoreButton}\n+          </Button>\n+        </Grid>\n+      </Grid>\n+    </ListItem>\n+  );\n+\n+  /**\n+   * Generate texts in the format of 'term (count)' for displaying a facet.\n+   * @param facet A facet\n+   */\n+  const facetLabel = (facet: OEQ.SearchFacets.Facet) => (\n+    <Grid container spacing={1}>\n+      <Grid item>\n+        <Typography>{facet.term}</Typography>\n+      </Grid>\n+      <Grid item>\n+        <Typography color=\"textSecondary\">{`(${facet.count})`}</Typography>\n+      </Grid>\n+    </Grid>\n+  );\n+\n+  /**\n+   * Render a MUI Checkbox and a Label for a facet.\n+   * @param facet A facet.\n+   */\n+  const renderFacet = (facet: OEQ.SearchFacets.Facet) => (\n+    <ListItem key={`${facet.term} ${facet.count}`} style={{ padding: 0 }}>\n+      <FormControlLabel\n+        control={\n+          <Checkbox\n+            checked={\n+              selectedTerms ? selectedTerms.includes(facet.term) : false\n+            }\n+            onChange={() => handleSelectTerms(facet.term)}\n+          />\n+        }\n+        label={facetLabel(facet)}\n+      />\n+    </ListItem>\n+  );\n+\n+  /**\n+   * Render a list for a Classification's categories. Some categories", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483c380b6ed795f819cf5a2caf28dfdde1c12ba4"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTQ1MzkyOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMTo1Mzo1MVrOHFSMsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMTo1Mzo1MVrOHFSMsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMwMzA5MA==", "bodyText": "Bit redundant, maybe we flesh it out a bit.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param classification A Classification..\n          \n          \n            \n               * @param classification A fully defined Classification with a list of terms to build into a list - including metadata detailing how many to include.", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r475303090", "createdAt": "2020-08-24T01:53:51Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import {\n+  Button,\n+  Checkbox,\n+  FormControlLabel,\n+  Grid,\n+  List,\n+  ListItem,\n+  Typography,\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/core/styles\";\n+import * as React from \"react\";\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import type { SearchPageClassification } from \"../SearchPage\";\n+\n+const useStyles = makeStyles({\n+  classificationList: {\n+    maxHeight: 500,\n+    overflow: \"auto\",\n+  },\n+});\n+\n+interface FacetSelectorProps {\n+  /**\n+   * A list of Classifications.\n+   */\n+  classifications: SearchPageClassification[];\n+  /**\n+   * A list of selected facets.\n+   */\n+  selectedTerms?: string[];\n+  /**\n+   * Handler for selecting/deselecting Classification terms.\n+   * @param terms A list of currently selected terms.\n+   */\n+  onSelectTermsChange: (terms: string[]) => void;\n+  /**\n+   * Handler for clicking a 'SHOW MORE' button.\n+   * @param classificationName The name of a Classification.\n+   */\n+  onShowMore: (classificationName: string) => void;\n+}\n+\n+export const FacetSelector = ({\n+  classifications,\n+  selectedTerms,\n+  onSelectTermsChange,\n+  onShowMore,\n+}: FacetSelectorProps) => {\n+  const classes = useStyles();\n+\n+  /**\n+   * Updates the list of selected Classification terms. If the term exists then remove it\n+   * from the list. Add it to the list otherwise.\n+   *\n+   * @param term The selected or unselected term.\n+   */\n+  const handleSelectTerms = (term: string) => {\n+    const copiedSelectedTerms = selectedTerms ? [...selectedTerms] : [];\n+    const termIndex = copiedSelectedTerms.indexOf(term);\n+    if (termIndex === -1) {\n+      copiedSelectedTerms.push(term);\n+    } else {\n+      copiedSelectedTerms.splice(termIndex, 1);\n+    }\n+    onSelectTermsChange(copiedSelectedTerms);\n+  };\n+\n+  /**\n+   * Render a 'SHOW MORE' button for each Classification.\n+   * @param classificationName The name of a Classification.\n+   */\n+  const showMoreButton = (classificationName: string) => (\n+    <ListItem>\n+      <Grid container justify=\"center\">\n+        <Grid item>\n+          <Button\n+            id={`${classificationName}_show_more`}\n+            variant=\"text\"\n+            onClick={() => onShowMore(classificationName)}\n+          >\n+            {languageStrings.searchpage.facetSelector.showMoreButton}\n+          </Button>\n+        </Grid>\n+      </Grid>\n+    </ListItem>\n+  );\n+\n+  /**\n+   * Generate texts in the format of 'term (count)' for displaying a facet.\n+   * @param facet A facet\n+   */\n+  const facetLabel = (facet: OEQ.SearchFacets.Facet) => (\n+    <Grid container spacing={1}>\n+      <Grid item>\n+        <Typography>{facet.term}</Typography>\n+      </Grid>\n+      <Grid item>\n+        <Typography color=\"textSecondary\">{`(${facet.count})`}</Typography>\n+      </Grid>\n+    </Grid>\n+  );\n+\n+  /**\n+   * Render a MUI Checkbox and a Label for a facet.\n+   * @param facet A facet.\n+   */\n+  const renderFacet = (facet: OEQ.SearchFacets.Facet) => (\n+    <ListItem key={`${facet.term} ${facet.count}`} style={{ padding: 0 }}>\n+      <FormControlLabel\n+        control={\n+          <Checkbox\n+            checked={\n+              selectedTerms ? selectedTerms.includes(facet.term) : false\n+            }\n+            onChange={() => handleSelectTerms(facet.term)}\n+          />\n+        }\n+        label={facetLabel(facet)}\n+      />\n+    </ListItem>\n+  );\n+\n+  /**\n+   * Render a list for a Classification's categories. Some categories\n+   * may have facets not displayed due to the configured maximum display number.\n+   * @param classification A Classification..", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483c380b6ed795f819cf5a2caf28dfdde1c12ba4"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTQ2MDk4OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMTo1ODo0OVrOHFSQpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMTo1ODo0OVrOHFSQpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMwNDEwMg==", "bodyText": "You don't need to bother building for items you're then just going to throw away:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                const facets = categories.map((facet) => renderFacet(facet));\n          \n          \n            \n                // The number of displayed facets depends on whether to show more\n          \n          \n            \n                // and the maximum display number.\n          \n          \n            \n                return facets.slice(0, showMore ? maxDisplay : undefined);\n          \n          \n            \n                return categories.slice( 0, showMore ? maxDisplay : undefined)\n          \n          \n            \n                  .map(facet) => renderFacet(facet));\n          \n      \n    \n    \n  \n\nWhen you do that though, then the return is redundant:\nconst listCategories = ({categories, maxDisplay, showMore}: SearchPageClassification): ListItem[] =>\n  categories.slice( 0, showMore ? maxDisplay : undefined)\n      .map(facet) => renderFacet(facet));", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r475304102", "createdAt": "2020-08-24T01:58:49Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import {\n+  Button,\n+  Checkbox,\n+  FormControlLabel,\n+  Grid,\n+  List,\n+  ListItem,\n+  Typography,\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/core/styles\";\n+import * as React from \"react\";\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import type { SearchPageClassification } from \"../SearchPage\";\n+\n+const useStyles = makeStyles({\n+  classificationList: {\n+    maxHeight: 500,\n+    overflow: \"auto\",\n+  },\n+});\n+\n+interface FacetSelectorProps {\n+  /**\n+   * A list of Classifications.\n+   */\n+  classifications: SearchPageClassification[];\n+  /**\n+   * A list of selected facets.\n+   */\n+  selectedTerms?: string[];\n+  /**\n+   * Handler for selecting/deselecting Classification terms.\n+   * @param terms A list of currently selected terms.\n+   */\n+  onSelectTermsChange: (terms: string[]) => void;\n+  /**\n+   * Handler for clicking a 'SHOW MORE' button.\n+   * @param classificationName The name of a Classification.\n+   */\n+  onShowMore: (classificationName: string) => void;\n+}\n+\n+export const FacetSelector = ({\n+  classifications,\n+  selectedTerms,\n+  onSelectTermsChange,\n+  onShowMore,\n+}: FacetSelectorProps) => {\n+  const classes = useStyles();\n+\n+  /**\n+   * Updates the list of selected Classification terms. If the term exists then remove it\n+   * from the list. Add it to the list otherwise.\n+   *\n+   * @param term The selected or unselected term.\n+   */\n+  const handleSelectTerms = (term: string) => {\n+    const copiedSelectedTerms = selectedTerms ? [...selectedTerms] : [];\n+    const termIndex = copiedSelectedTerms.indexOf(term);\n+    if (termIndex === -1) {\n+      copiedSelectedTerms.push(term);\n+    } else {\n+      copiedSelectedTerms.splice(termIndex, 1);\n+    }\n+    onSelectTermsChange(copiedSelectedTerms);\n+  };\n+\n+  /**\n+   * Render a 'SHOW MORE' button for each Classification.\n+   * @param classificationName The name of a Classification.\n+   */\n+  const showMoreButton = (classificationName: string) => (\n+    <ListItem>\n+      <Grid container justify=\"center\">\n+        <Grid item>\n+          <Button\n+            id={`${classificationName}_show_more`}\n+            variant=\"text\"\n+            onClick={() => onShowMore(classificationName)}\n+          >\n+            {languageStrings.searchpage.facetSelector.showMoreButton}\n+          </Button>\n+        </Grid>\n+      </Grid>\n+    </ListItem>\n+  );\n+\n+  /**\n+   * Generate texts in the format of 'term (count)' for displaying a facet.\n+   * @param facet A facet\n+   */\n+  const facetLabel = (facet: OEQ.SearchFacets.Facet) => (\n+    <Grid container spacing={1}>\n+      <Grid item>\n+        <Typography>{facet.term}</Typography>\n+      </Grid>\n+      <Grid item>\n+        <Typography color=\"textSecondary\">{`(${facet.count})`}</Typography>\n+      </Grid>\n+    </Grid>\n+  );\n+\n+  /**\n+   * Render a MUI Checkbox and a Label for a facet.\n+   * @param facet A facet.\n+   */\n+  const renderFacet = (facet: OEQ.SearchFacets.Facet) => (\n+    <ListItem key={`${facet.term} ${facet.count}`} style={{ padding: 0 }}>\n+      <FormControlLabel\n+        control={\n+          <Checkbox\n+            checked={\n+              selectedTerms ? selectedTerms.includes(facet.term) : false\n+            }\n+            onChange={() => handleSelectTerms(facet.term)}\n+          />\n+        }\n+        label={facetLabel(facet)}\n+      />\n+    </ListItem>\n+  );\n+\n+  /**\n+   * Render a list for a Classification's categories. Some categories\n+   * may have facets not displayed due to the configured maximum display number.\n+   * @param classification A Classification..\n+   */\n+  const renderCategories = (classification: SearchPageClassification) => {\n+    const { categories, maxDisplay, showMore } = classification;\n+    const facets = categories.map((facet) => renderFacet(facet));\n+    // The number of displayed facets depends on whether to show more\n+    // and the maximum display number.\n+    return facets.slice(0, showMore ? maxDisplay : undefined);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483c380b6ed795f819cf5a2caf28dfdde1c12ba4"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTQ2MjE1OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMTo1OToyNlrOHFSRPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMTo1OToyNlrOHFSRPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMwNDI1Mw==", "bodyText": "Blank line to make this final bit stand out.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              return <List>{renderClassifications}</List>;\n          \n          \n            \n            \n          \n          \n            \n              return <List>{renderClassifications}</List>;", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r475304253", "createdAt": "2020-08-24T01:59:26Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import {\n+  Button,\n+  Checkbox,\n+  FormControlLabel,\n+  Grid,\n+  List,\n+  ListItem,\n+  Typography,\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/core/styles\";\n+import * as React from \"react\";\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import type { SearchPageClassification } from \"../SearchPage\";\n+\n+const useStyles = makeStyles({\n+  classificationList: {\n+    maxHeight: 500,\n+    overflow: \"auto\",\n+  },\n+});\n+\n+interface FacetSelectorProps {\n+  /**\n+   * A list of Classifications.\n+   */\n+  classifications: SearchPageClassification[];\n+  /**\n+   * A list of selected facets.\n+   */\n+  selectedTerms?: string[];\n+  /**\n+   * Handler for selecting/deselecting Classification terms.\n+   * @param terms A list of currently selected terms.\n+   */\n+  onSelectTermsChange: (terms: string[]) => void;\n+  /**\n+   * Handler for clicking a 'SHOW MORE' button.\n+   * @param classificationName The name of a Classification.\n+   */\n+  onShowMore: (classificationName: string) => void;\n+}\n+\n+export const FacetSelector = ({\n+  classifications,\n+  selectedTerms,\n+  onSelectTermsChange,\n+  onShowMore,\n+}: FacetSelectorProps) => {\n+  const classes = useStyles();\n+\n+  /**\n+   * Updates the list of selected Classification terms. If the term exists then remove it\n+   * from the list. Add it to the list otherwise.\n+   *\n+   * @param term The selected or unselected term.\n+   */\n+  const handleSelectTerms = (term: string) => {\n+    const copiedSelectedTerms = selectedTerms ? [...selectedTerms] : [];\n+    const termIndex = copiedSelectedTerms.indexOf(term);\n+    if (termIndex === -1) {\n+      copiedSelectedTerms.push(term);\n+    } else {\n+      copiedSelectedTerms.splice(termIndex, 1);\n+    }\n+    onSelectTermsChange(copiedSelectedTerms);\n+  };\n+\n+  /**\n+   * Render a 'SHOW MORE' button for each Classification.\n+   * @param classificationName The name of a Classification.\n+   */\n+  const showMoreButton = (classificationName: string) => (\n+    <ListItem>\n+      <Grid container justify=\"center\">\n+        <Grid item>\n+          <Button\n+            id={`${classificationName}_show_more`}\n+            variant=\"text\"\n+            onClick={() => onShowMore(classificationName)}\n+          >\n+            {languageStrings.searchpage.facetSelector.showMoreButton}\n+          </Button>\n+        </Grid>\n+      </Grid>\n+    </ListItem>\n+  );\n+\n+  /**\n+   * Generate texts in the format of 'term (count)' for displaying a facet.\n+   * @param facet A facet\n+   */\n+  const facetLabel = (facet: OEQ.SearchFacets.Facet) => (\n+    <Grid container spacing={1}>\n+      <Grid item>\n+        <Typography>{facet.term}</Typography>\n+      </Grid>\n+      <Grid item>\n+        <Typography color=\"textSecondary\">{`(${facet.count})`}</Typography>\n+      </Grid>\n+    </Grid>\n+  );\n+\n+  /**\n+   * Render a MUI Checkbox and a Label for a facet.\n+   * @param facet A facet.\n+   */\n+  const renderFacet = (facet: OEQ.SearchFacets.Facet) => (\n+    <ListItem key={`${facet.term} ${facet.count}`} style={{ padding: 0 }}>\n+      <FormControlLabel\n+        control={\n+          <Checkbox\n+            checked={\n+              selectedTerms ? selectedTerms.includes(facet.term) : false\n+            }\n+            onChange={() => handleSelectTerms(facet.term)}\n+          />\n+        }\n+        label={facetLabel(facet)}\n+      />\n+    </ListItem>\n+  );\n+\n+  /**\n+   * Render a list for a Classification's categories. Some categories\n+   * may have facets not displayed due to the configured maximum display number.\n+   * @param classification A Classification..\n+   */\n+  const renderCategories = (classification: SearchPageClassification) => {\n+    const { categories, maxDisplay, showMore } = classification;\n+    const facets = categories.map((facet) => renderFacet(facet));\n+    // The number of displayed facets depends on whether to show more\n+    // and the maximum display number.\n+    return facets.slice(0, showMore ? maxDisplay : undefined);\n+  };\n+\n+  /**\n+   * Sort and render Classifications that have categories.\n+   * For each Classification, a scroll bar and a 'Show more' button may or may not\n+   * be added, depending on whether a classification has more categories to show or not.\n+   */\n+  const renderClassifications = classifications\n+    .filter((classification) => classification.categories.length > 0)\n+    .sort(\n+      (prevClassification, nextClassification) =>\n+        prevClassification.orderIndex - nextClassification.orderIndex\n+    )\n+    .map((classification) => {\n+      const { name, showMore } = classification;\n+      return (\n+        <ListItem divider key={name} id={`classification_${name}`}>\n+          <Grid container direction=\"column\">\n+            <Grid item>\n+              <Typography variant=\"subtitle1\">{name}</Typography>\n+            </Grid>\n+            <Grid item>\n+              <List\n+                dense\n+                className={!showMore ? classes.classificationList : \"\"}\n+              >\n+                {renderCategories(classification)}\n+                {showMore && showMoreButton(name)}\n+              </List>\n+            </Grid>\n+          </Grid>\n+        </ListItem>\n+      );\n+    });\n+  return <List>{renderClassifications}</List>;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483c380b6ed795f819cf5a2caf28dfdde1c12ba4"}, "originalPosition": 186}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTQ2NDU2OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMjowMToxM1rOHFSSnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMjowMToxM1rOHFSSnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMwNDYwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Sort and render Classifications that have categories.\n          \n          \n            \n               * Sort and build Classifications that have categories.", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r475304604", "createdAt": "2020-08-24T02:01:13Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import {\n+  Button,\n+  Checkbox,\n+  FormControlLabel,\n+  Grid,\n+  List,\n+  ListItem,\n+  Typography,\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/core/styles\";\n+import * as React from \"react\";\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import type { SearchPageClassification } from \"../SearchPage\";\n+\n+const useStyles = makeStyles({\n+  classificationList: {\n+    maxHeight: 500,\n+    overflow: \"auto\",\n+  },\n+});\n+\n+interface FacetSelectorProps {\n+  /**\n+   * A list of Classifications.\n+   */\n+  classifications: SearchPageClassification[];\n+  /**\n+   * A list of selected facets.\n+   */\n+  selectedTerms?: string[];\n+  /**\n+   * Handler for selecting/deselecting Classification terms.\n+   * @param terms A list of currently selected terms.\n+   */\n+  onSelectTermsChange: (terms: string[]) => void;\n+  /**\n+   * Handler for clicking a 'SHOW MORE' button.\n+   * @param classificationName The name of a Classification.\n+   */\n+  onShowMore: (classificationName: string) => void;\n+}\n+\n+export const FacetSelector = ({\n+  classifications,\n+  selectedTerms,\n+  onSelectTermsChange,\n+  onShowMore,\n+}: FacetSelectorProps) => {\n+  const classes = useStyles();\n+\n+  /**\n+   * Updates the list of selected Classification terms. If the term exists then remove it\n+   * from the list. Add it to the list otherwise.\n+   *\n+   * @param term The selected or unselected term.\n+   */\n+  const handleSelectTerms = (term: string) => {\n+    const copiedSelectedTerms = selectedTerms ? [...selectedTerms] : [];\n+    const termIndex = copiedSelectedTerms.indexOf(term);\n+    if (termIndex === -1) {\n+      copiedSelectedTerms.push(term);\n+    } else {\n+      copiedSelectedTerms.splice(termIndex, 1);\n+    }\n+    onSelectTermsChange(copiedSelectedTerms);\n+  };\n+\n+  /**\n+   * Render a 'SHOW MORE' button for each Classification.\n+   * @param classificationName The name of a Classification.\n+   */\n+  const showMoreButton = (classificationName: string) => (\n+    <ListItem>\n+      <Grid container justify=\"center\">\n+        <Grid item>\n+          <Button\n+            id={`${classificationName}_show_more`}\n+            variant=\"text\"\n+            onClick={() => onShowMore(classificationName)}\n+          >\n+            {languageStrings.searchpage.facetSelector.showMoreButton}\n+          </Button>\n+        </Grid>\n+      </Grid>\n+    </ListItem>\n+  );\n+\n+  /**\n+   * Generate texts in the format of 'term (count)' for displaying a facet.\n+   * @param facet A facet\n+   */\n+  const facetLabel = (facet: OEQ.SearchFacets.Facet) => (\n+    <Grid container spacing={1}>\n+      <Grid item>\n+        <Typography>{facet.term}</Typography>\n+      </Grid>\n+      <Grid item>\n+        <Typography color=\"textSecondary\">{`(${facet.count})`}</Typography>\n+      </Grid>\n+    </Grid>\n+  );\n+\n+  /**\n+   * Render a MUI Checkbox and a Label for a facet.\n+   * @param facet A facet.\n+   */\n+  const renderFacet = (facet: OEQ.SearchFacets.Facet) => (\n+    <ListItem key={`${facet.term} ${facet.count}`} style={{ padding: 0 }}>\n+      <FormControlLabel\n+        control={\n+          <Checkbox\n+            checked={selectedTerms?.includes(facet.term) ?? false}\n+            onChange={() => handleSelectTerms(facet.term)}\n+          />\n+        }\n+        label={facetLabel(facet)}\n+      />\n+    </ListItem>\n+  );\n+\n+  /**\n+   * Render a list for a Classification's categories. Some categories\n+   * may have facets not displayed due to the configured maximum display number.\n+   * @param classification A Classification..\n+   */\n+  const renderCategories = (classification: SearchPageClassification) => {\n+    const { categories, maxDisplay, showMore } = classification;\n+    const facets = categories.map((facet) => renderFacet(facet));\n+    // The number of displayed facets depends on whether to show more\n+    // and the maximum display number.\n+    return facets.slice(0, showMore ? maxDisplay : undefined);\n+  };\n+\n+  /**\n+   * Sort and render Classifications that have categories.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4d2a74d5bc4f4c733b2c856f15ae144954240f8"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTQ2NTAwOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMjowMToyNlrOHFSS2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMjowMToyNlrOHFSS2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMwNDY2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              const renderClassifications = classifications\n          \n          \n            \n              const buildClassifications = classifications", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r475304664", "createdAt": "2020-08-24T02:01:26Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import {\n+  Button,\n+  Checkbox,\n+  FormControlLabel,\n+  Grid,\n+  List,\n+  ListItem,\n+  Typography,\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/core/styles\";\n+import * as React from \"react\";\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import type { SearchPageClassification } from \"../SearchPage\";\n+\n+const useStyles = makeStyles({\n+  classificationList: {\n+    maxHeight: 500,\n+    overflow: \"auto\",\n+  },\n+});\n+\n+interface FacetSelectorProps {\n+  /**\n+   * A list of Classifications.\n+   */\n+  classifications: SearchPageClassification[];\n+  /**\n+   * A list of selected facets.\n+   */\n+  selectedTerms?: string[];\n+  /**\n+   * Handler for selecting/deselecting Classification terms.\n+   * @param terms A list of currently selected terms.\n+   */\n+  onSelectTermsChange: (terms: string[]) => void;\n+  /**\n+   * Handler for clicking a 'SHOW MORE' button.\n+   * @param classificationName The name of a Classification.\n+   */\n+  onShowMore: (classificationName: string) => void;\n+}\n+\n+export const FacetSelector = ({\n+  classifications,\n+  selectedTerms,\n+  onSelectTermsChange,\n+  onShowMore,\n+}: FacetSelectorProps) => {\n+  const classes = useStyles();\n+\n+  /**\n+   * Updates the list of selected Classification terms. If the term exists then remove it\n+   * from the list. Add it to the list otherwise.\n+   *\n+   * @param term The selected or unselected term.\n+   */\n+  const handleSelectTerms = (term: string) => {\n+    const copiedSelectedTerms = selectedTerms ? [...selectedTerms] : [];\n+    const termIndex = copiedSelectedTerms.indexOf(term);\n+    if (termIndex === -1) {\n+      copiedSelectedTerms.push(term);\n+    } else {\n+      copiedSelectedTerms.splice(termIndex, 1);\n+    }\n+    onSelectTermsChange(copiedSelectedTerms);\n+  };\n+\n+  /**\n+   * Render a 'SHOW MORE' button for each Classification.\n+   * @param classificationName The name of a Classification.\n+   */\n+  const showMoreButton = (classificationName: string) => (\n+    <ListItem>\n+      <Grid container justify=\"center\">\n+        <Grid item>\n+          <Button\n+            id={`${classificationName}_show_more`}\n+            variant=\"text\"\n+            onClick={() => onShowMore(classificationName)}\n+          >\n+            {languageStrings.searchpage.facetSelector.showMoreButton}\n+          </Button>\n+        </Grid>\n+      </Grid>\n+    </ListItem>\n+  );\n+\n+  /**\n+   * Generate texts in the format of 'term (count)' for displaying a facet.\n+   * @param facet A facet\n+   */\n+  const facetLabel = (facet: OEQ.SearchFacets.Facet) => (\n+    <Grid container spacing={1}>\n+      <Grid item>\n+        <Typography>{facet.term}</Typography>\n+      </Grid>\n+      <Grid item>\n+        <Typography color=\"textSecondary\">{`(${facet.count})`}</Typography>\n+      </Grid>\n+    </Grid>\n+  );\n+\n+  /**\n+   * Render a MUI Checkbox and a Label for a facet.\n+   * @param facet A facet.\n+   */\n+  const renderFacet = (facet: OEQ.SearchFacets.Facet) => (\n+    <ListItem key={`${facet.term} ${facet.count}`} style={{ padding: 0 }}>\n+      <FormControlLabel\n+        control={\n+          <Checkbox\n+            checked={selectedTerms?.includes(facet.term) ?? false}\n+            onChange={() => handleSelectTerms(facet.term)}\n+          />\n+        }\n+        label={facetLabel(facet)}\n+      />\n+    </ListItem>\n+  );\n+\n+  /**\n+   * Render a list for a Classification's categories. Some categories\n+   * may have facets not displayed due to the configured maximum display number.\n+   * @param classification A Classification..\n+   */\n+  const renderCategories = (classification: SearchPageClassification) => {\n+    const { categories, maxDisplay, showMore } = classification;\n+    const facets = categories.map((facet) => renderFacet(facet));\n+    // The number of displayed facets depends on whether to show more\n+    // and the maximum display number.\n+    return facets.slice(0, showMore ? maxDisplay : undefined);\n+  };\n+\n+  /**\n+   * Sort and render Classifications that have categories.\n+   * For each Classification, a scroll bar and a 'Show more' button may or may not\n+   * be added, depending on whether a classification has more categories to show or not.\n+   */\n+  const renderClassifications = classifications", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4d2a74d5bc4f4c733b2c856f15ae144954240f8"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTQ2NzQ2OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMjowMzowOFrOHFSUPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNTowNjowN1rOHFUv3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMwNTAyMw==", "bodyText": "Why not combine these two lines?", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r475305023", "createdAt": "2020-08-24T02:03:08Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import {\n+  Button,\n+  Checkbox,\n+  FormControlLabel,\n+  Grid,\n+  List,\n+  ListItem,\n+  Typography,\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/core/styles\";\n+import * as React from \"react\";\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import type { SearchPageClassification } from \"../SearchPage\";\n+\n+const useStyles = makeStyles({\n+  classificationList: {\n+    maxHeight: 500,\n+    overflow: \"auto\",\n+  },\n+});\n+\n+interface FacetSelectorProps {\n+  /**\n+   * A list of Classifications.\n+   */\n+  classifications: SearchPageClassification[];\n+  /**\n+   * A list of selected facets.\n+   */\n+  selectedTerms?: string[];\n+  /**\n+   * Handler for selecting/deselecting Classification terms.\n+   * @param terms A list of currently selected terms.\n+   */\n+  onSelectTermsChange: (terms: string[]) => void;\n+  /**\n+   * Handler for clicking a 'SHOW MORE' button.\n+   * @param classificationName The name of a Classification.\n+   */\n+  onShowMore: (classificationName: string) => void;\n+}\n+\n+export const FacetSelector = ({\n+  classifications,\n+  selectedTerms,\n+  onSelectTermsChange,\n+  onShowMore,\n+}: FacetSelectorProps) => {\n+  const classes = useStyles();\n+\n+  /**\n+   * Updates the list of selected Classification terms. If the term exists then remove it\n+   * from the list. Add it to the list otherwise.\n+   *\n+   * @param term The selected or unselected term.\n+   */\n+  const handleSelectTerms = (term: string) => {\n+    const copiedSelectedTerms = selectedTerms ? [...selectedTerms] : [];\n+    const termIndex = copiedSelectedTerms.indexOf(term);\n+    if (termIndex === -1) {\n+      copiedSelectedTerms.push(term);\n+    } else {\n+      copiedSelectedTerms.splice(termIndex, 1);\n+    }\n+    onSelectTermsChange(copiedSelectedTerms);\n+  };\n+\n+  /**\n+   * Render a 'SHOW MORE' button for each Classification.\n+   * @param classificationName The name of a Classification.\n+   */\n+  const showMoreButton = (classificationName: string) => (\n+    <ListItem>\n+      <Grid container justify=\"center\">\n+        <Grid item>\n+          <Button\n+            id={`${classificationName}_show_more`}\n+            variant=\"text\"\n+            onClick={() => onShowMore(classificationName)}\n+          >\n+            {languageStrings.searchpage.facetSelector.showMoreButton}\n+          </Button>\n+        </Grid>\n+      </Grid>\n+    </ListItem>\n+  );\n+\n+  /**\n+   * Generate texts in the format of 'term (count)' for displaying a facet.\n+   * @param facet A facet\n+   */\n+  const facetLabel = (facet: OEQ.SearchFacets.Facet) => (\n+    <Grid container spacing={1}>\n+      <Grid item>\n+        <Typography>{facet.term}</Typography>\n+      </Grid>\n+      <Grid item>\n+        <Typography color=\"textSecondary\">{`(${facet.count})`}</Typography>\n+      </Grid>\n+    </Grid>\n+  );\n+\n+  /**\n+   * Render a MUI Checkbox and a Label for a facet.\n+   * @param facet A facet.\n+   */\n+  const renderFacet = (facet: OEQ.SearchFacets.Facet) => (\n+    <ListItem key={`${facet.term} ${facet.count}`} style={{ padding: 0 }}>\n+      <FormControlLabel\n+        control={\n+          <Checkbox\n+            checked={selectedTerms?.includes(facet.term) ?? false}\n+            onChange={() => handleSelectTerms(facet.term)}\n+          />\n+        }\n+        label={facetLabel(facet)}\n+      />\n+    </ListItem>\n+  );\n+\n+  /**\n+   * Render a list for a Classification's categories. Some categories\n+   * may have facets not displayed due to the configured maximum display number.\n+   * @param classification A Classification..\n+   */\n+  const renderCategories = (classification: SearchPageClassification) => {\n+    const { categories, maxDisplay, showMore } = classification;\n+    const facets = categories.map((facet) => renderFacet(facet));\n+    // The number of displayed facets depends on whether to show more\n+    // and the maximum display number.\n+    return facets.slice(0, showMore ? maxDisplay : undefined);\n+  };\n+\n+  /**\n+   * Sort and render Classifications that have categories.\n+   * For each Classification, a scroll bar and a 'Show more' button may or may not\n+   * be added, depending on whether a classification has more categories to show or not.\n+   */\n+  const renderClassifications = classifications\n+    .filter((classification) => classification.categories.length > 0)\n+    .sort(\n+      (prevClassification, nextClassification) =>\n+        prevClassification.orderIndex - nextClassification.orderIndex\n+    )\n+    .map((classification) => {\n+      const { name, showMore } = classification;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4d2a74d5bc4f4c733b2c856f15ae144954240f8"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM0NDg2Mg==", "bodyText": "Because function listCategories, which is called inside this map,  takes a classification as its parameter. But I can change its signature.", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r475344862", "createdAt": "2020-08-24T05:06:07Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import {\n+  Button,\n+  Checkbox,\n+  FormControlLabel,\n+  Grid,\n+  List,\n+  ListItem,\n+  Typography,\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/core/styles\";\n+import * as React from \"react\";\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import type { SearchPageClassification } from \"../SearchPage\";\n+\n+const useStyles = makeStyles({\n+  classificationList: {\n+    maxHeight: 500,\n+    overflow: \"auto\",\n+  },\n+});\n+\n+interface FacetSelectorProps {\n+  /**\n+   * A list of Classifications.\n+   */\n+  classifications: SearchPageClassification[];\n+  /**\n+   * A list of selected facets.\n+   */\n+  selectedTerms?: string[];\n+  /**\n+   * Handler for selecting/deselecting Classification terms.\n+   * @param terms A list of currently selected terms.\n+   */\n+  onSelectTermsChange: (terms: string[]) => void;\n+  /**\n+   * Handler for clicking a 'SHOW MORE' button.\n+   * @param classificationName The name of a Classification.\n+   */\n+  onShowMore: (classificationName: string) => void;\n+}\n+\n+export const FacetSelector = ({\n+  classifications,\n+  selectedTerms,\n+  onSelectTermsChange,\n+  onShowMore,\n+}: FacetSelectorProps) => {\n+  const classes = useStyles();\n+\n+  /**\n+   * Updates the list of selected Classification terms. If the term exists then remove it\n+   * from the list. Add it to the list otherwise.\n+   *\n+   * @param term The selected or unselected term.\n+   */\n+  const handleSelectTerms = (term: string) => {\n+    const copiedSelectedTerms = selectedTerms ? [...selectedTerms] : [];\n+    const termIndex = copiedSelectedTerms.indexOf(term);\n+    if (termIndex === -1) {\n+      copiedSelectedTerms.push(term);\n+    } else {\n+      copiedSelectedTerms.splice(termIndex, 1);\n+    }\n+    onSelectTermsChange(copiedSelectedTerms);\n+  };\n+\n+  /**\n+   * Render a 'SHOW MORE' button for each Classification.\n+   * @param classificationName The name of a Classification.\n+   */\n+  const showMoreButton = (classificationName: string) => (\n+    <ListItem>\n+      <Grid container justify=\"center\">\n+        <Grid item>\n+          <Button\n+            id={`${classificationName}_show_more`}\n+            variant=\"text\"\n+            onClick={() => onShowMore(classificationName)}\n+          >\n+            {languageStrings.searchpage.facetSelector.showMoreButton}\n+          </Button>\n+        </Grid>\n+      </Grid>\n+    </ListItem>\n+  );\n+\n+  /**\n+   * Generate texts in the format of 'term (count)' for displaying a facet.\n+   * @param facet A facet\n+   */\n+  const facetLabel = (facet: OEQ.SearchFacets.Facet) => (\n+    <Grid container spacing={1}>\n+      <Grid item>\n+        <Typography>{facet.term}</Typography>\n+      </Grid>\n+      <Grid item>\n+        <Typography color=\"textSecondary\">{`(${facet.count})`}</Typography>\n+      </Grid>\n+    </Grid>\n+  );\n+\n+  /**\n+   * Render a MUI Checkbox and a Label for a facet.\n+   * @param facet A facet.\n+   */\n+  const renderFacet = (facet: OEQ.SearchFacets.Facet) => (\n+    <ListItem key={`${facet.term} ${facet.count}`} style={{ padding: 0 }}>\n+      <FormControlLabel\n+        control={\n+          <Checkbox\n+            checked={selectedTerms?.includes(facet.term) ?? false}\n+            onChange={() => handleSelectTerms(facet.term)}\n+          />\n+        }\n+        label={facetLabel(facet)}\n+      />\n+    </ListItem>\n+  );\n+\n+  /**\n+   * Render a list for a Classification's categories. Some categories\n+   * may have facets not displayed due to the configured maximum display number.\n+   * @param classification A Classification..\n+   */\n+  const renderCategories = (classification: SearchPageClassification) => {\n+    const { categories, maxDisplay, showMore } = classification;\n+    const facets = categories.map((facet) => renderFacet(facet));\n+    // The number of displayed facets depends on whether to show more\n+    // and the maximum display number.\n+    return facets.slice(0, showMore ? maxDisplay : undefined);\n+  };\n+\n+  /**\n+   * Sort and render Classifications that have categories.\n+   * For each Classification, a scroll bar and a 'Show more' button may or may not\n+   * be added, depending on whether a classification has more categories to show or not.\n+   */\n+  const renderClassifications = classifications\n+    .filter((classification) => classification.categories.length > 0)\n+    .sort(\n+      (prevClassification, nextClassification) =>\n+        prevClassification.orderIndex - nextClassification.orderIndex\n+    )\n+    .map((classification) => {\n+      const { name, showMore } = classification;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMwNTAyMw=="}, "originalCommit": {"oid": "c4d2a74d5bc4f4c733b2c856f15ae144954240f8"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTQ2ODE4OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMjowMzozNlrOHFSUqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNjoyNToyNlrOHFWIUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMwNTEyOQ==", "bodyText": "What happens if name has spaces?", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r475305129", "createdAt": "2020-08-24T02:03:36Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import {\n+  Button,\n+  Checkbox,\n+  FormControlLabel,\n+  Grid,\n+  List,\n+  ListItem,\n+  Typography,\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/core/styles\";\n+import * as React from \"react\";\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import type { SearchPageClassification } from \"../SearchPage\";\n+\n+const useStyles = makeStyles({\n+  classificationList: {\n+    maxHeight: 500,\n+    overflow: \"auto\",\n+  },\n+});\n+\n+interface FacetSelectorProps {\n+  /**\n+   * A list of Classifications.\n+   */\n+  classifications: SearchPageClassification[];\n+  /**\n+   * A list of selected facets.\n+   */\n+  selectedTerms?: string[];\n+  /**\n+   * Handler for selecting/deselecting Classification terms.\n+   * @param terms A list of currently selected terms.\n+   */\n+  onSelectTermsChange: (terms: string[]) => void;\n+  /**\n+   * Handler for clicking a 'SHOW MORE' button.\n+   * @param classificationName The name of a Classification.\n+   */\n+  onShowMore: (classificationName: string) => void;\n+}\n+\n+export const FacetSelector = ({\n+  classifications,\n+  selectedTerms,\n+  onSelectTermsChange,\n+  onShowMore,\n+}: FacetSelectorProps) => {\n+  const classes = useStyles();\n+\n+  /**\n+   * Updates the list of selected Classification terms. If the term exists then remove it\n+   * from the list. Add it to the list otherwise.\n+   *\n+   * @param term The selected or unselected term.\n+   */\n+  const handleSelectTerms = (term: string) => {\n+    const copiedSelectedTerms = selectedTerms ? [...selectedTerms] : [];\n+    const termIndex = copiedSelectedTerms.indexOf(term);\n+    if (termIndex === -1) {\n+      copiedSelectedTerms.push(term);\n+    } else {\n+      copiedSelectedTerms.splice(termIndex, 1);\n+    }\n+    onSelectTermsChange(copiedSelectedTerms);\n+  };\n+\n+  /**\n+   * Render a 'SHOW MORE' button for each Classification.\n+   * @param classificationName The name of a Classification.\n+   */\n+  const showMoreButton = (classificationName: string) => (\n+    <ListItem>\n+      <Grid container justify=\"center\">\n+        <Grid item>\n+          <Button\n+            id={`${classificationName}_show_more`}\n+            variant=\"text\"\n+            onClick={() => onShowMore(classificationName)}\n+          >\n+            {languageStrings.searchpage.facetSelector.showMoreButton}\n+          </Button>\n+        </Grid>\n+      </Grid>\n+    </ListItem>\n+  );\n+\n+  /**\n+   * Generate texts in the format of 'term (count)' for displaying a facet.\n+   * @param facet A facet\n+   */\n+  const facetLabel = (facet: OEQ.SearchFacets.Facet) => (\n+    <Grid container spacing={1}>\n+      <Grid item>\n+        <Typography>{facet.term}</Typography>\n+      </Grid>\n+      <Grid item>\n+        <Typography color=\"textSecondary\">{`(${facet.count})`}</Typography>\n+      </Grid>\n+    </Grid>\n+  );\n+\n+  /**\n+   * Render a MUI Checkbox and a Label for a facet.\n+   * @param facet A facet.\n+   */\n+  const renderFacet = (facet: OEQ.SearchFacets.Facet) => (\n+    <ListItem key={`${facet.term} ${facet.count}`} style={{ padding: 0 }}>\n+      <FormControlLabel\n+        control={\n+          <Checkbox\n+            checked={selectedTerms?.includes(facet.term) ?? false}\n+            onChange={() => handleSelectTerms(facet.term)}\n+          />\n+        }\n+        label={facetLabel(facet)}\n+      />\n+    </ListItem>\n+  );\n+\n+  /**\n+   * Render a list for a Classification's categories. Some categories\n+   * may have facets not displayed due to the configured maximum display number.\n+   * @param classification A Classification..\n+   */\n+  const renderCategories = (classification: SearchPageClassification) => {\n+    const { categories, maxDisplay, showMore } = classification;\n+    const facets = categories.map((facet) => renderFacet(facet));\n+    // The number of displayed facets depends on whether to show more\n+    // and the maximum display number.\n+    return facets.slice(0, showMore ? maxDisplay : undefined);\n+  };\n+\n+  /**\n+   * Sort and render Classifications that have categories.\n+   * For each Classification, a scroll bar and a 'Show more' button may or may not\n+   * be added, depending on whether a classification has more categories to show or not.\n+   */\n+  const renderClassifications = classifications\n+    .filter((classification) => classification.categories.length > 0)\n+    .sort(\n+      (prevClassification, nextClassification) =>\n+        prevClassification.orderIndex - nextClassification.orderIndex\n+    )\n+    .map((classification) => {\n+      const { name, showMore } = classification;\n+      return (\n+        <ListItem divider key={name} id={`classification_${name}`}>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4d2a74d5bc4f4c733b2c856f15ae144954240f8"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2MTAwNg==", "bodyText": "Can we replace spaces with _ ? Actually if there are another approach that can help me find a ListItem(a li in DOM) then I don't need these IDs.", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r475361006", "createdAt": "2020-08-24T06:05:43Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import {\n+  Button,\n+  Checkbox,\n+  FormControlLabel,\n+  Grid,\n+  List,\n+  ListItem,\n+  Typography,\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/core/styles\";\n+import * as React from \"react\";\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import type { SearchPageClassification } from \"../SearchPage\";\n+\n+const useStyles = makeStyles({\n+  classificationList: {\n+    maxHeight: 500,\n+    overflow: \"auto\",\n+  },\n+});\n+\n+interface FacetSelectorProps {\n+  /**\n+   * A list of Classifications.\n+   */\n+  classifications: SearchPageClassification[];\n+  /**\n+   * A list of selected facets.\n+   */\n+  selectedTerms?: string[];\n+  /**\n+   * Handler for selecting/deselecting Classification terms.\n+   * @param terms A list of currently selected terms.\n+   */\n+  onSelectTermsChange: (terms: string[]) => void;\n+  /**\n+   * Handler for clicking a 'SHOW MORE' button.\n+   * @param classificationName The name of a Classification.\n+   */\n+  onShowMore: (classificationName: string) => void;\n+}\n+\n+export const FacetSelector = ({\n+  classifications,\n+  selectedTerms,\n+  onSelectTermsChange,\n+  onShowMore,\n+}: FacetSelectorProps) => {\n+  const classes = useStyles();\n+\n+  /**\n+   * Updates the list of selected Classification terms. If the term exists then remove it\n+   * from the list. Add it to the list otherwise.\n+   *\n+   * @param term The selected or unselected term.\n+   */\n+  const handleSelectTerms = (term: string) => {\n+    const copiedSelectedTerms = selectedTerms ? [...selectedTerms] : [];\n+    const termIndex = copiedSelectedTerms.indexOf(term);\n+    if (termIndex === -1) {\n+      copiedSelectedTerms.push(term);\n+    } else {\n+      copiedSelectedTerms.splice(termIndex, 1);\n+    }\n+    onSelectTermsChange(copiedSelectedTerms);\n+  };\n+\n+  /**\n+   * Render a 'SHOW MORE' button for each Classification.\n+   * @param classificationName The name of a Classification.\n+   */\n+  const showMoreButton = (classificationName: string) => (\n+    <ListItem>\n+      <Grid container justify=\"center\">\n+        <Grid item>\n+          <Button\n+            id={`${classificationName}_show_more`}\n+            variant=\"text\"\n+            onClick={() => onShowMore(classificationName)}\n+          >\n+            {languageStrings.searchpage.facetSelector.showMoreButton}\n+          </Button>\n+        </Grid>\n+      </Grid>\n+    </ListItem>\n+  );\n+\n+  /**\n+   * Generate texts in the format of 'term (count)' for displaying a facet.\n+   * @param facet A facet\n+   */\n+  const facetLabel = (facet: OEQ.SearchFacets.Facet) => (\n+    <Grid container spacing={1}>\n+      <Grid item>\n+        <Typography>{facet.term}</Typography>\n+      </Grid>\n+      <Grid item>\n+        <Typography color=\"textSecondary\">{`(${facet.count})`}</Typography>\n+      </Grid>\n+    </Grid>\n+  );\n+\n+  /**\n+   * Render a MUI Checkbox and a Label for a facet.\n+   * @param facet A facet.\n+   */\n+  const renderFacet = (facet: OEQ.SearchFacets.Facet) => (\n+    <ListItem key={`${facet.term} ${facet.count}`} style={{ padding: 0 }}>\n+      <FormControlLabel\n+        control={\n+          <Checkbox\n+            checked={selectedTerms?.includes(facet.term) ?? false}\n+            onChange={() => handleSelectTerms(facet.term)}\n+          />\n+        }\n+        label={facetLabel(facet)}\n+      />\n+    </ListItem>\n+  );\n+\n+  /**\n+   * Render a list for a Classification's categories. Some categories\n+   * may have facets not displayed due to the configured maximum display number.\n+   * @param classification A Classification..\n+   */\n+  const renderCategories = (classification: SearchPageClassification) => {\n+    const { categories, maxDisplay, showMore } = classification;\n+    const facets = categories.map((facet) => renderFacet(facet));\n+    // The number of displayed facets depends on whether to show more\n+    // and the maximum display number.\n+    return facets.slice(0, showMore ? maxDisplay : undefined);\n+  };\n+\n+  /**\n+   * Sort and render Classifications that have categories.\n+   * For each Classification, a scroll bar and a 'Show more' button may or may not\n+   * be added, depending on whether a classification has more categories to show or not.\n+   */\n+  const renderClassifications = classifications\n+    .filter((classification) => classification.categories.length > 0)\n+    .sort(\n+      (prevClassification, nextClassification) =>\n+        prevClassification.orderIndex - nextClassification.orderIndex\n+    )\n+    .map((classification) => {\n+      const { name, showMore } = classification;\n+      return (\n+        <ListItem divider key={name} id={`classification_${name}`}>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMwNTEyOQ=="}, "originalCommit": {"oid": "c4d2a74d5bc4f4c733b2c856f15ae144954240f8"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2MjA3Nw==", "bodyText": "Ah I can use .closest(\"li\") !!!", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r475362077", "createdAt": "2020-08-24T06:09:18Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import {\n+  Button,\n+  Checkbox,\n+  FormControlLabel,\n+  Grid,\n+  List,\n+  ListItem,\n+  Typography,\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/core/styles\";\n+import * as React from \"react\";\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import type { SearchPageClassification } from \"../SearchPage\";\n+\n+const useStyles = makeStyles({\n+  classificationList: {\n+    maxHeight: 500,\n+    overflow: \"auto\",\n+  },\n+});\n+\n+interface FacetSelectorProps {\n+  /**\n+   * A list of Classifications.\n+   */\n+  classifications: SearchPageClassification[];\n+  /**\n+   * A list of selected facets.\n+   */\n+  selectedTerms?: string[];\n+  /**\n+   * Handler for selecting/deselecting Classification terms.\n+   * @param terms A list of currently selected terms.\n+   */\n+  onSelectTermsChange: (terms: string[]) => void;\n+  /**\n+   * Handler for clicking a 'SHOW MORE' button.\n+   * @param classificationName The name of a Classification.\n+   */\n+  onShowMore: (classificationName: string) => void;\n+}\n+\n+export const FacetSelector = ({\n+  classifications,\n+  selectedTerms,\n+  onSelectTermsChange,\n+  onShowMore,\n+}: FacetSelectorProps) => {\n+  const classes = useStyles();\n+\n+  /**\n+   * Updates the list of selected Classification terms. If the term exists then remove it\n+   * from the list. Add it to the list otherwise.\n+   *\n+   * @param term The selected or unselected term.\n+   */\n+  const handleSelectTerms = (term: string) => {\n+    const copiedSelectedTerms = selectedTerms ? [...selectedTerms] : [];\n+    const termIndex = copiedSelectedTerms.indexOf(term);\n+    if (termIndex === -1) {\n+      copiedSelectedTerms.push(term);\n+    } else {\n+      copiedSelectedTerms.splice(termIndex, 1);\n+    }\n+    onSelectTermsChange(copiedSelectedTerms);\n+  };\n+\n+  /**\n+   * Render a 'SHOW MORE' button for each Classification.\n+   * @param classificationName The name of a Classification.\n+   */\n+  const showMoreButton = (classificationName: string) => (\n+    <ListItem>\n+      <Grid container justify=\"center\">\n+        <Grid item>\n+          <Button\n+            id={`${classificationName}_show_more`}\n+            variant=\"text\"\n+            onClick={() => onShowMore(classificationName)}\n+          >\n+            {languageStrings.searchpage.facetSelector.showMoreButton}\n+          </Button>\n+        </Grid>\n+      </Grid>\n+    </ListItem>\n+  );\n+\n+  /**\n+   * Generate texts in the format of 'term (count)' for displaying a facet.\n+   * @param facet A facet\n+   */\n+  const facetLabel = (facet: OEQ.SearchFacets.Facet) => (\n+    <Grid container spacing={1}>\n+      <Grid item>\n+        <Typography>{facet.term}</Typography>\n+      </Grid>\n+      <Grid item>\n+        <Typography color=\"textSecondary\">{`(${facet.count})`}</Typography>\n+      </Grid>\n+    </Grid>\n+  );\n+\n+  /**\n+   * Render a MUI Checkbox and a Label for a facet.\n+   * @param facet A facet.\n+   */\n+  const renderFacet = (facet: OEQ.SearchFacets.Facet) => (\n+    <ListItem key={`${facet.term} ${facet.count}`} style={{ padding: 0 }}>\n+      <FormControlLabel\n+        control={\n+          <Checkbox\n+            checked={selectedTerms?.includes(facet.term) ?? false}\n+            onChange={() => handleSelectTerms(facet.term)}\n+          />\n+        }\n+        label={facetLabel(facet)}\n+      />\n+    </ListItem>\n+  );\n+\n+  /**\n+   * Render a list for a Classification's categories. Some categories\n+   * may have facets not displayed due to the configured maximum display number.\n+   * @param classification A Classification..\n+   */\n+  const renderCategories = (classification: SearchPageClassification) => {\n+    const { categories, maxDisplay, showMore } = classification;\n+    const facets = categories.map((facet) => renderFacet(facet));\n+    // The number of displayed facets depends on whether to show more\n+    // and the maximum display number.\n+    return facets.slice(0, showMore ? maxDisplay : undefined);\n+  };\n+\n+  /**\n+   * Sort and render Classifications that have categories.\n+   * For each Classification, a scroll bar and a 'Show more' button may or may not\n+   * be added, depending on whether a classification has more categories to show or not.\n+   */\n+  const renderClassifications = classifications\n+    .filter((classification) => classification.categories.length > 0)\n+    .sort(\n+      (prevClassification, nextClassification) =>\n+        prevClassification.orderIndex - nextClassification.orderIndex\n+    )\n+    .map((classification) => {\n+      const { name, showMore } = classification;\n+      return (\n+        <ListItem divider key={name} id={`classification_${name}`}>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMwNTEyOQ=="}, "originalCommit": {"oid": "c4d2a74d5bc4f4c733b2c856f15ae144954240f8"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2NzUwNg==", "bodyText": "That'd be okay, and we can do similar in Selenium. At least we've got an ID at the top level of the selector, so we narrow in anyway and don't search the whole DOM.", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r475367506", "createdAt": "2020-08-24T06:25:26Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import {\n+  Button,\n+  Checkbox,\n+  FormControlLabel,\n+  Grid,\n+  List,\n+  ListItem,\n+  Typography,\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/core/styles\";\n+import * as React from \"react\";\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import type { SearchPageClassification } from \"../SearchPage\";\n+\n+const useStyles = makeStyles({\n+  classificationList: {\n+    maxHeight: 500,\n+    overflow: \"auto\",\n+  },\n+});\n+\n+interface FacetSelectorProps {\n+  /**\n+   * A list of Classifications.\n+   */\n+  classifications: SearchPageClassification[];\n+  /**\n+   * A list of selected facets.\n+   */\n+  selectedTerms?: string[];\n+  /**\n+   * Handler for selecting/deselecting Classification terms.\n+   * @param terms A list of currently selected terms.\n+   */\n+  onSelectTermsChange: (terms: string[]) => void;\n+  /**\n+   * Handler for clicking a 'SHOW MORE' button.\n+   * @param classificationName The name of a Classification.\n+   */\n+  onShowMore: (classificationName: string) => void;\n+}\n+\n+export const FacetSelector = ({\n+  classifications,\n+  selectedTerms,\n+  onSelectTermsChange,\n+  onShowMore,\n+}: FacetSelectorProps) => {\n+  const classes = useStyles();\n+\n+  /**\n+   * Updates the list of selected Classification terms. If the term exists then remove it\n+   * from the list. Add it to the list otherwise.\n+   *\n+   * @param term The selected or unselected term.\n+   */\n+  const handleSelectTerms = (term: string) => {\n+    const copiedSelectedTerms = selectedTerms ? [...selectedTerms] : [];\n+    const termIndex = copiedSelectedTerms.indexOf(term);\n+    if (termIndex === -1) {\n+      copiedSelectedTerms.push(term);\n+    } else {\n+      copiedSelectedTerms.splice(termIndex, 1);\n+    }\n+    onSelectTermsChange(copiedSelectedTerms);\n+  };\n+\n+  /**\n+   * Render a 'SHOW MORE' button for each Classification.\n+   * @param classificationName The name of a Classification.\n+   */\n+  const showMoreButton = (classificationName: string) => (\n+    <ListItem>\n+      <Grid container justify=\"center\">\n+        <Grid item>\n+          <Button\n+            id={`${classificationName}_show_more`}\n+            variant=\"text\"\n+            onClick={() => onShowMore(classificationName)}\n+          >\n+            {languageStrings.searchpage.facetSelector.showMoreButton}\n+          </Button>\n+        </Grid>\n+      </Grid>\n+    </ListItem>\n+  );\n+\n+  /**\n+   * Generate texts in the format of 'term (count)' for displaying a facet.\n+   * @param facet A facet\n+   */\n+  const facetLabel = (facet: OEQ.SearchFacets.Facet) => (\n+    <Grid container spacing={1}>\n+      <Grid item>\n+        <Typography>{facet.term}</Typography>\n+      </Grid>\n+      <Grid item>\n+        <Typography color=\"textSecondary\">{`(${facet.count})`}</Typography>\n+      </Grid>\n+    </Grid>\n+  );\n+\n+  /**\n+   * Render a MUI Checkbox and a Label for a facet.\n+   * @param facet A facet.\n+   */\n+  const renderFacet = (facet: OEQ.SearchFacets.Facet) => (\n+    <ListItem key={`${facet.term} ${facet.count}`} style={{ padding: 0 }}>\n+      <FormControlLabel\n+        control={\n+          <Checkbox\n+            checked={selectedTerms?.includes(facet.term) ?? false}\n+            onChange={() => handleSelectTerms(facet.term)}\n+          />\n+        }\n+        label={facetLabel(facet)}\n+      />\n+    </ListItem>\n+  );\n+\n+  /**\n+   * Render a list for a Classification's categories. Some categories\n+   * may have facets not displayed due to the configured maximum display number.\n+   * @param classification A Classification..\n+   */\n+  const renderCategories = (classification: SearchPageClassification) => {\n+    const { categories, maxDisplay, showMore } = classification;\n+    const facets = categories.map((facet) => renderFacet(facet));\n+    // The number of displayed facets depends on whether to show more\n+    // and the maximum display number.\n+    return facets.slice(0, showMore ? maxDisplay : undefined);\n+  };\n+\n+  /**\n+   * Sort and render Classifications that have categories.\n+   * For each Classification, a scroll bar and a 'Show more' button may or may not\n+   * be added, depending on whether a classification has more categories to show or not.\n+   */\n+  const renderClassifications = classifications\n+    .filter((classification) => classification.categories.length > 0)\n+    .sort(\n+      (prevClassification, nextClassification) =>\n+        prevClassification.orderIndex - nextClassification.orderIndex\n+    )\n+    .map((classification) => {\n+      const { name, showMore } = classification;\n+      return (\n+        <ListItem divider key={name} id={`classification_${name}`}>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMwNTEyOQ=="}, "originalCommit": {"oid": "c4d2a74d5bc4f4c733b2c856f15ae144954240f8"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTYzNzUzOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__stories__/search/FacetSelector.stories.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMzoyNTowMFrOHF6BaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMzoyNTowMFrOHF6BaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk1NTU2MQ==", "bodyText": "I am repeating this pattern to create stories:  creating a story and configuring its args. I probably can create a template to reduce duplication\n.", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r475955561", "createdAt": "2020-08-24T23:25:00Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__stories__/search/FacetSelector.stories.tsx", "diffHunk": "@@ -15,22 +15,52 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-import { action } from \"@storybook/addon-actions\";\n import * as React from \"react\";\n-import { FacetSelector } from \"../../tsrc/search/components/FacetSelector\";\n+import {\n+  FacetSelector,\n+  FacetSelectorProps,\n+} from \"../../tsrc/search/components/FacetSelector\";\n import * as FacetSelectorMock from \"../../__mocks__/FacetSelector.mock\";\n+import type { Meta, Story } from \"@storybook/react\";\n \n export default {\n   title: \"Search/FacetSelector\",\n   component: FacetSelector,\n+  argType: {\n+    onSelectTermsChange: { action: \"on select terms\" },\n+    onShowMore: { action: \"on Show more\" },\n+  },\n+} as Meta<FacetSelectorProps>;\n+\n+export const termsSelected: Story<FacetSelectorProps> = (args) => (\n+  <FacetSelector {...args} />\n+);\n+termsSelected.args = {\n+  classifications: FacetSelectorMock.classifications,\n+  selectedTerms: [\"scala\", \"QLD\"],\n };\n-const commonProps = {\n+\n+export const noTermsSelected: Story<FacetSelectorProps> = (args) => (\n+  <FacetSelector {...args} />\n+);\n+noTermsSelected.args = {\n   classifications: FacetSelectorMock.classifications,\n-  onSelectTermsChange: action(\"on select terms\"),\n-  onShowMore: action(\"on Show more\"),\n };\n-export const termsSelected = () => (\n-  <FacetSelector selectedTerms={[\"scala\", \"QLD\"]} {...commonProps} />\n+\n+export const showMore: Story<FacetSelectorProps> = (args) => (\n+  <FacetSelector {...args} />\n );\n+showMore.args = {\n+  classifications: [\n+    { ...FacetSelectorMock.classifications[0], showMore: true },\n+  ],\n+};\n \n-export const noTermsSelected = () => <FacetSelector {...commonProps} />;\n+export const notShowMore: Story<FacetSelectorProps> = (args) => (", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ff924bea801c74a942695cf6b465d5e427926f2"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Njc4MTY5OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNDoyMTo0NVrOHGF_Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNDoyMTo0NVrOHGF_Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE1MTU5NA==", "bodyText": "Hmmm, I'm reluctant to mention this - as this is so close. But... I wonder if in SearchFacetsModule.Classification we should be bringing in the UUID from the server. \ud83e\udd14 (I'm not sure why I didn't in the first place.)\nThen we'd use the UUID rather than the name for the key here, but also when doing the handlers etc. That way if someone does decide to have two Classifications/Facets with the same name, we'll be safe.\nWhat do you think?", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r476151594", "createdAt": "2020-08-25T04:21:45Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import {\n+  Button,\n+  Checkbox,\n+  FormControlLabel,\n+  Grid,\n+  List,\n+  ListItem,\n+  Typography,\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/core/styles\";\n+import { ReactElement } from \"react\";\n+import * as React from \"react\";\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import { Classification } from \"../../modules/SearchFacetsModule\";\n+import { languageStrings } from \"../../util/langstrings\";\n+\n+const useStyles = makeStyles({\n+  classificationList: {\n+    maxHeight: 500,\n+    overflow: \"auto\",\n+  },\n+});\n+\n+/**\n+ * Represents a Classification that is specific to Search page.\n+ */\n+export interface SearchPageClassification extends Classification {\n+  /**\n+   * A boolean indicating if a classification has hidden categories to show.\n+   */\n+  showMore: boolean;\n+}\n+\n+export interface FacetSelectorProps {\n+  /**\n+   * A list of Classifications.\n+   */\n+  classifications: SearchPageClassification[];\n+  /**\n+   * A map where the key is a Classification's name and value is\n+   * a list of terms.\n+   */\n+  selectedClassificationTerms?: Map<string, string[]>;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab7a8469f7613ae70996b6c1f8cce4a132499274"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Njc5MzAzOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNDoyNDozMVrOHGGG8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNToxMTo1NVrOHGH0Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE1MzU4NA==", "bodyText": "Interesting. Did realise you could have spaces in the key, but I guess at the end of the day internally React is probably just using the string.\nI assume this all works, so no need to change anything. Just observing.", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r476153584", "createdAt": "2020-08-25T04:24:31Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import {\n+  Button,\n+  Checkbox,\n+  FormControlLabel,\n+  Grid,\n+  List,\n+  ListItem,\n+  Typography,\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/core/styles\";\n+import { ReactElement } from \"react\";\n+import * as React from \"react\";\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import { Classification } from \"../../modules/SearchFacetsModule\";\n+import { languageStrings } from \"../../util/langstrings\";\n+\n+const useStyles = makeStyles({\n+  classificationList: {\n+    maxHeight: 500,\n+    overflow: \"auto\",\n+  },\n+});\n+\n+/**\n+ * Represents a Classification that is specific to Search page.\n+ */\n+export interface SearchPageClassification extends Classification {\n+  /**\n+   * A boolean indicating if a classification has hidden categories to show.\n+   */\n+  showMore: boolean;\n+}\n+\n+export interface FacetSelectorProps {\n+  /**\n+   * A list of Classifications.\n+   */\n+  classifications: SearchPageClassification[];\n+  /**\n+   * A map where the key is a Classification's name and value is\n+   * a list of terms.\n+   */\n+  selectedClassificationTerms?: Map<string, string[]>;\n+  /**\n+   * Handler for selecting/deselecting Classification terms.\n+   * @param terms A list of currently selected terms.\n+   */\n+  onSelectTermsChange: (terms: Map<string, string[]>) => void;\n+  /**\n+   * Handler for clicking a 'SHOW MORE' button.\n+   * @param classificationName The name of a Classification.\n+   */\n+  onShowMore: (classificationName: string) => void;\n+}\n+\n+export const FacetSelector = ({\n+  classifications,\n+  selectedClassificationTerms,\n+  onSelectTermsChange,\n+  onShowMore,\n+}: FacetSelectorProps) => {\n+  const classes = useStyles();\n+\n+  /**\n+   * Updates the list of selected Classification terms. If the term exists then remove it\n+   * from the list. Add it to the list otherwise.\n+   * A copy of the map and a copy of the array of terms are created internally\n+   * to avoid mutating parent component's state.\n+   *\n+   * @param classificationName The name of a Classification\n+   * @param term The selected or unselected term\n+   */\n+  const handleSelectTerms = (classificationName: string, term: string) => {\n+    const terms = selectedClassificationTerms?.get(classificationName);\n+    const copiedTerms = terms ? [...terms] : [];\n+    const termIndex = copiedTerms.indexOf(term);\n+    if (termIndex === -1) {\n+      copiedTerms.push(term);\n+    } else {\n+      copiedTerms.splice(termIndex, 1);\n+    }\n+    const copiedMap = new Map(selectedClassificationTerms ?? []);\n+    copiedMap.set(classificationName, copiedTerms);\n+    onSelectTermsChange(copiedMap);\n+  };\n+\n+  /**\n+   * Render a 'SHOW MORE' button for each Classification.\n+   * @param classificationName The name of a Classification.\n+   */\n+  const showMoreButton = (classificationName: string): ReactElement => (\n+    <ListItem>\n+      <Grid container justify=\"center\">\n+        <Grid item>\n+          <Button variant=\"text\" onClick={() => onShowMore(classificationName)}>\n+            {languageStrings.searchpage.facetSelector.showMoreButton}\n+          </Button>\n+        </Grid>\n+      </Grid>\n+    </ListItem>\n+  );\n+\n+  /**\n+   * Generate texts in the format of 'term (count)' for displaying a facet.\n+   * @param term The term of a facet\n+   * @param count The count of a facet\n+   */\n+  const facetLabel = ({\n+    term,\n+    count,\n+  }: OEQ.SearchFacets.Facet): ReactElement => (\n+    <Grid container spacing={1}>\n+      <Grid item>\n+        <Typography>{term}</Typography>\n+      </Grid>\n+      <Grid item>\n+        <Typography color=\"textSecondary\">{`(${count})`}</Typography>\n+      </Grid>\n+    </Grid>\n+  );\n+\n+  /**\n+   * Build a ListItem consisting of a MUI Checkbox and a Label for a facet.\n+   * @param classificationName The name of a Classification\n+   * @param facet A facet\n+   */\n+  const facetListItem = (\n+    classificationName: string,\n+    facet: OEQ.SearchFacets.Facet\n+  ): ReactElement => {\n+    const { term, count } = facet;\n+    return (\n+      <ListItem key={`${term} ${count}`} style={{ padding: 0 }}>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab7a8469f7613ae70996b6c1f8cce4a132499274"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE3ODQ2NA==", "bodyText": "\ud83e\udd14  I would like to avoid any potential errors. What about adding a - between term and count.", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r476178464", "createdAt": "2020-08-25T05:00:35Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import {\n+  Button,\n+  Checkbox,\n+  FormControlLabel,\n+  Grid,\n+  List,\n+  ListItem,\n+  Typography,\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/core/styles\";\n+import { ReactElement } from \"react\";\n+import * as React from \"react\";\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import { Classification } from \"../../modules/SearchFacetsModule\";\n+import { languageStrings } from \"../../util/langstrings\";\n+\n+const useStyles = makeStyles({\n+  classificationList: {\n+    maxHeight: 500,\n+    overflow: \"auto\",\n+  },\n+});\n+\n+/**\n+ * Represents a Classification that is specific to Search page.\n+ */\n+export interface SearchPageClassification extends Classification {\n+  /**\n+   * A boolean indicating if a classification has hidden categories to show.\n+   */\n+  showMore: boolean;\n+}\n+\n+export interface FacetSelectorProps {\n+  /**\n+   * A list of Classifications.\n+   */\n+  classifications: SearchPageClassification[];\n+  /**\n+   * A map where the key is a Classification's name and value is\n+   * a list of terms.\n+   */\n+  selectedClassificationTerms?: Map<string, string[]>;\n+  /**\n+   * Handler for selecting/deselecting Classification terms.\n+   * @param terms A list of currently selected terms.\n+   */\n+  onSelectTermsChange: (terms: Map<string, string[]>) => void;\n+  /**\n+   * Handler for clicking a 'SHOW MORE' button.\n+   * @param classificationName The name of a Classification.\n+   */\n+  onShowMore: (classificationName: string) => void;\n+}\n+\n+export const FacetSelector = ({\n+  classifications,\n+  selectedClassificationTerms,\n+  onSelectTermsChange,\n+  onShowMore,\n+}: FacetSelectorProps) => {\n+  const classes = useStyles();\n+\n+  /**\n+   * Updates the list of selected Classification terms. If the term exists then remove it\n+   * from the list. Add it to the list otherwise.\n+   * A copy of the map and a copy of the array of terms are created internally\n+   * to avoid mutating parent component's state.\n+   *\n+   * @param classificationName The name of a Classification\n+   * @param term The selected or unselected term\n+   */\n+  const handleSelectTerms = (classificationName: string, term: string) => {\n+    const terms = selectedClassificationTerms?.get(classificationName);\n+    const copiedTerms = terms ? [...terms] : [];\n+    const termIndex = copiedTerms.indexOf(term);\n+    if (termIndex === -1) {\n+      copiedTerms.push(term);\n+    } else {\n+      copiedTerms.splice(termIndex, 1);\n+    }\n+    const copiedMap = new Map(selectedClassificationTerms ?? []);\n+    copiedMap.set(classificationName, copiedTerms);\n+    onSelectTermsChange(copiedMap);\n+  };\n+\n+  /**\n+   * Render a 'SHOW MORE' button for each Classification.\n+   * @param classificationName The name of a Classification.\n+   */\n+  const showMoreButton = (classificationName: string): ReactElement => (\n+    <ListItem>\n+      <Grid container justify=\"center\">\n+        <Grid item>\n+          <Button variant=\"text\" onClick={() => onShowMore(classificationName)}>\n+            {languageStrings.searchpage.facetSelector.showMoreButton}\n+          </Button>\n+        </Grid>\n+      </Grid>\n+    </ListItem>\n+  );\n+\n+  /**\n+   * Generate texts in the format of 'term (count)' for displaying a facet.\n+   * @param term The term of a facet\n+   * @param count The count of a facet\n+   */\n+  const facetLabel = ({\n+    term,\n+    count,\n+  }: OEQ.SearchFacets.Facet): ReactElement => (\n+    <Grid container spacing={1}>\n+      <Grid item>\n+        <Typography>{term}</Typography>\n+      </Grid>\n+      <Grid item>\n+        <Typography color=\"textSecondary\">{`(${count})`}</Typography>\n+      </Grid>\n+    </Grid>\n+  );\n+\n+  /**\n+   * Build a ListItem consisting of a MUI Checkbox and a Label for a facet.\n+   * @param classificationName The name of a Classification\n+   * @param facet A facet\n+   */\n+  const facetListItem = (\n+    classificationName: string,\n+    facet: OEQ.SearchFacets.Facet\n+  ): ReactElement => {\n+    const { term, count } = facet;\n+    return (\n+      <ListItem key={`${term} ${count}`} style={{ padding: 0 }}>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE1MzU4NA=="}, "originalCommit": {"oid": "ab7a8469f7613ae70996b6c1f8cce4a132499274"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE3OTEwMA==", "bodyText": "Up to you. I don't know for 100% sure if terms are always devoid of spaces (and/or punctuation).", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r476179100", "createdAt": "2020-08-25T05:03:05Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import {\n+  Button,\n+  Checkbox,\n+  FormControlLabel,\n+  Grid,\n+  List,\n+  ListItem,\n+  Typography,\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/core/styles\";\n+import { ReactElement } from \"react\";\n+import * as React from \"react\";\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import { Classification } from \"../../modules/SearchFacetsModule\";\n+import { languageStrings } from \"../../util/langstrings\";\n+\n+const useStyles = makeStyles({\n+  classificationList: {\n+    maxHeight: 500,\n+    overflow: \"auto\",\n+  },\n+});\n+\n+/**\n+ * Represents a Classification that is specific to Search page.\n+ */\n+export interface SearchPageClassification extends Classification {\n+  /**\n+   * A boolean indicating if a classification has hidden categories to show.\n+   */\n+  showMore: boolean;\n+}\n+\n+export interface FacetSelectorProps {\n+  /**\n+   * A list of Classifications.\n+   */\n+  classifications: SearchPageClassification[];\n+  /**\n+   * A map where the key is a Classification's name and value is\n+   * a list of terms.\n+   */\n+  selectedClassificationTerms?: Map<string, string[]>;\n+  /**\n+   * Handler for selecting/deselecting Classification terms.\n+   * @param terms A list of currently selected terms.\n+   */\n+  onSelectTermsChange: (terms: Map<string, string[]>) => void;\n+  /**\n+   * Handler for clicking a 'SHOW MORE' button.\n+   * @param classificationName The name of a Classification.\n+   */\n+  onShowMore: (classificationName: string) => void;\n+}\n+\n+export const FacetSelector = ({\n+  classifications,\n+  selectedClassificationTerms,\n+  onSelectTermsChange,\n+  onShowMore,\n+}: FacetSelectorProps) => {\n+  const classes = useStyles();\n+\n+  /**\n+   * Updates the list of selected Classification terms. If the term exists then remove it\n+   * from the list. Add it to the list otherwise.\n+   * A copy of the map and a copy of the array of terms are created internally\n+   * to avoid mutating parent component's state.\n+   *\n+   * @param classificationName The name of a Classification\n+   * @param term The selected or unselected term\n+   */\n+  const handleSelectTerms = (classificationName: string, term: string) => {\n+    const terms = selectedClassificationTerms?.get(classificationName);\n+    const copiedTerms = terms ? [...terms] : [];\n+    const termIndex = copiedTerms.indexOf(term);\n+    if (termIndex === -1) {\n+      copiedTerms.push(term);\n+    } else {\n+      copiedTerms.splice(termIndex, 1);\n+    }\n+    const copiedMap = new Map(selectedClassificationTerms ?? []);\n+    copiedMap.set(classificationName, copiedTerms);\n+    onSelectTermsChange(copiedMap);\n+  };\n+\n+  /**\n+   * Render a 'SHOW MORE' button for each Classification.\n+   * @param classificationName The name of a Classification.\n+   */\n+  const showMoreButton = (classificationName: string): ReactElement => (\n+    <ListItem>\n+      <Grid container justify=\"center\">\n+        <Grid item>\n+          <Button variant=\"text\" onClick={() => onShowMore(classificationName)}>\n+            {languageStrings.searchpage.facetSelector.showMoreButton}\n+          </Button>\n+        </Grid>\n+      </Grid>\n+    </ListItem>\n+  );\n+\n+  /**\n+   * Generate texts in the format of 'term (count)' for displaying a facet.\n+   * @param term The term of a facet\n+   * @param count The count of a facet\n+   */\n+  const facetLabel = ({\n+    term,\n+    count,\n+  }: OEQ.SearchFacets.Facet): ReactElement => (\n+    <Grid container spacing={1}>\n+      <Grid item>\n+        <Typography>{term}</Typography>\n+      </Grid>\n+      <Grid item>\n+        <Typography color=\"textSecondary\">{`(${count})`}</Typography>\n+      </Grid>\n+    </Grid>\n+  );\n+\n+  /**\n+   * Build a ListItem consisting of a MUI Checkbox and a Label for a facet.\n+   * @param classificationName The name of a Classification\n+   * @param facet A facet\n+   */\n+  const facetListItem = (\n+    classificationName: string,\n+    facet: OEQ.SearchFacets.Facet\n+  ): ReactElement => {\n+    const { term, count } = facet;\n+    return (\n+      <ListItem key={`${term} ${count}`} style={{ padding: 0 }}>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE1MzU4NA=="}, "originalCommit": {"oid": "ab7a8469f7613ae70996b6c1f8cce4a132499274"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE4MDYyOQ==", "bodyText": "Just had a conversation with Tom regarding this. As we can't guarantee ${term} ${count} is unique, in this case maybe we have to use index . What do you think @edalex-ian ?", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r476180629", "createdAt": "2020-08-25T05:08:39Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import {\n+  Button,\n+  Checkbox,\n+  FormControlLabel,\n+  Grid,\n+  List,\n+  ListItem,\n+  Typography,\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/core/styles\";\n+import { ReactElement } from \"react\";\n+import * as React from \"react\";\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import { Classification } from \"../../modules/SearchFacetsModule\";\n+import { languageStrings } from \"../../util/langstrings\";\n+\n+const useStyles = makeStyles({\n+  classificationList: {\n+    maxHeight: 500,\n+    overflow: \"auto\",\n+  },\n+});\n+\n+/**\n+ * Represents a Classification that is specific to Search page.\n+ */\n+export interface SearchPageClassification extends Classification {\n+  /**\n+   * A boolean indicating if a classification has hidden categories to show.\n+   */\n+  showMore: boolean;\n+}\n+\n+export interface FacetSelectorProps {\n+  /**\n+   * A list of Classifications.\n+   */\n+  classifications: SearchPageClassification[];\n+  /**\n+   * A map where the key is a Classification's name and value is\n+   * a list of terms.\n+   */\n+  selectedClassificationTerms?: Map<string, string[]>;\n+  /**\n+   * Handler for selecting/deselecting Classification terms.\n+   * @param terms A list of currently selected terms.\n+   */\n+  onSelectTermsChange: (terms: Map<string, string[]>) => void;\n+  /**\n+   * Handler for clicking a 'SHOW MORE' button.\n+   * @param classificationName The name of a Classification.\n+   */\n+  onShowMore: (classificationName: string) => void;\n+}\n+\n+export const FacetSelector = ({\n+  classifications,\n+  selectedClassificationTerms,\n+  onSelectTermsChange,\n+  onShowMore,\n+}: FacetSelectorProps) => {\n+  const classes = useStyles();\n+\n+  /**\n+   * Updates the list of selected Classification terms. If the term exists then remove it\n+   * from the list. Add it to the list otherwise.\n+   * A copy of the map and a copy of the array of terms are created internally\n+   * to avoid mutating parent component's state.\n+   *\n+   * @param classificationName The name of a Classification\n+   * @param term The selected or unselected term\n+   */\n+  const handleSelectTerms = (classificationName: string, term: string) => {\n+    const terms = selectedClassificationTerms?.get(classificationName);\n+    const copiedTerms = terms ? [...terms] : [];\n+    const termIndex = copiedTerms.indexOf(term);\n+    if (termIndex === -1) {\n+      copiedTerms.push(term);\n+    } else {\n+      copiedTerms.splice(termIndex, 1);\n+    }\n+    const copiedMap = new Map(selectedClassificationTerms ?? []);\n+    copiedMap.set(classificationName, copiedTerms);\n+    onSelectTermsChange(copiedMap);\n+  };\n+\n+  /**\n+   * Render a 'SHOW MORE' button for each Classification.\n+   * @param classificationName The name of a Classification.\n+   */\n+  const showMoreButton = (classificationName: string): ReactElement => (\n+    <ListItem>\n+      <Grid container justify=\"center\">\n+        <Grid item>\n+          <Button variant=\"text\" onClick={() => onShowMore(classificationName)}>\n+            {languageStrings.searchpage.facetSelector.showMoreButton}\n+          </Button>\n+        </Grid>\n+      </Grid>\n+    </ListItem>\n+  );\n+\n+  /**\n+   * Generate texts in the format of 'term (count)' for displaying a facet.\n+   * @param term The term of a facet\n+   * @param count The count of a facet\n+   */\n+  const facetLabel = ({\n+    term,\n+    count,\n+  }: OEQ.SearchFacets.Facet): ReactElement => (\n+    <Grid container spacing={1}>\n+      <Grid item>\n+        <Typography>{term}</Typography>\n+      </Grid>\n+      <Grid item>\n+        <Typography color=\"textSecondary\">{`(${count})`}</Typography>\n+      </Grid>\n+    </Grid>\n+  );\n+\n+  /**\n+   * Build a ListItem consisting of a MUI Checkbox and a Label for a facet.\n+   * @param classificationName The name of a Classification\n+   * @param facet A facet\n+   */\n+  const facetListItem = (\n+    classificationName: string,\n+    facet: OEQ.SearchFacets.Facet\n+  ): ReactElement => {\n+    const { term, count } = facet;\n+    return (\n+      <ListItem key={`${term} ${count}`} style={{ padding: 0 }}>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE1MzU4NA=="}, "originalCommit": {"oid": "ab7a8469f7613ae70996b6c1f8cce4a132499274"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE4MTUzMQ==", "bodyText": "Well, now that you have id from Classification in, how about ${id}:${term}?", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r476181531", "createdAt": "2020-08-25T05:11:55Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/FacetSelector.tsx", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import {\n+  Button,\n+  Checkbox,\n+  FormControlLabel,\n+  Grid,\n+  List,\n+  ListItem,\n+  Typography,\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/core/styles\";\n+import { ReactElement } from \"react\";\n+import * as React from \"react\";\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import { Classification } from \"../../modules/SearchFacetsModule\";\n+import { languageStrings } from \"../../util/langstrings\";\n+\n+const useStyles = makeStyles({\n+  classificationList: {\n+    maxHeight: 500,\n+    overflow: \"auto\",\n+  },\n+});\n+\n+/**\n+ * Represents a Classification that is specific to Search page.\n+ */\n+export interface SearchPageClassification extends Classification {\n+  /**\n+   * A boolean indicating if a classification has hidden categories to show.\n+   */\n+  showMore: boolean;\n+}\n+\n+export interface FacetSelectorProps {\n+  /**\n+   * A list of Classifications.\n+   */\n+  classifications: SearchPageClassification[];\n+  /**\n+   * A map where the key is a Classification's name and value is\n+   * a list of terms.\n+   */\n+  selectedClassificationTerms?: Map<string, string[]>;\n+  /**\n+   * Handler for selecting/deselecting Classification terms.\n+   * @param terms A list of currently selected terms.\n+   */\n+  onSelectTermsChange: (terms: Map<string, string[]>) => void;\n+  /**\n+   * Handler for clicking a 'SHOW MORE' button.\n+   * @param classificationName The name of a Classification.\n+   */\n+  onShowMore: (classificationName: string) => void;\n+}\n+\n+export const FacetSelector = ({\n+  classifications,\n+  selectedClassificationTerms,\n+  onSelectTermsChange,\n+  onShowMore,\n+}: FacetSelectorProps) => {\n+  const classes = useStyles();\n+\n+  /**\n+   * Updates the list of selected Classification terms. If the term exists then remove it\n+   * from the list. Add it to the list otherwise.\n+   * A copy of the map and a copy of the array of terms are created internally\n+   * to avoid mutating parent component's state.\n+   *\n+   * @param classificationName The name of a Classification\n+   * @param term The selected or unselected term\n+   */\n+  const handleSelectTerms = (classificationName: string, term: string) => {\n+    const terms = selectedClassificationTerms?.get(classificationName);\n+    const copiedTerms = terms ? [...terms] : [];\n+    const termIndex = copiedTerms.indexOf(term);\n+    if (termIndex === -1) {\n+      copiedTerms.push(term);\n+    } else {\n+      copiedTerms.splice(termIndex, 1);\n+    }\n+    const copiedMap = new Map(selectedClassificationTerms ?? []);\n+    copiedMap.set(classificationName, copiedTerms);\n+    onSelectTermsChange(copiedMap);\n+  };\n+\n+  /**\n+   * Render a 'SHOW MORE' button for each Classification.\n+   * @param classificationName The name of a Classification.\n+   */\n+  const showMoreButton = (classificationName: string): ReactElement => (\n+    <ListItem>\n+      <Grid container justify=\"center\">\n+        <Grid item>\n+          <Button variant=\"text\" onClick={() => onShowMore(classificationName)}>\n+            {languageStrings.searchpage.facetSelector.showMoreButton}\n+          </Button>\n+        </Grid>\n+      </Grid>\n+    </ListItem>\n+  );\n+\n+  /**\n+   * Generate texts in the format of 'term (count)' for displaying a facet.\n+   * @param term The term of a facet\n+   * @param count The count of a facet\n+   */\n+  const facetLabel = ({\n+    term,\n+    count,\n+  }: OEQ.SearchFacets.Facet): ReactElement => (\n+    <Grid container spacing={1}>\n+      <Grid item>\n+        <Typography>{term}</Typography>\n+      </Grid>\n+      <Grid item>\n+        <Typography color=\"textSecondary\">{`(${count})`}</Typography>\n+      </Grid>\n+    </Grid>\n+  );\n+\n+  /**\n+   * Build a ListItem consisting of a MUI Checkbox and a Label for a facet.\n+   * @param classificationName The name of a Classification\n+   * @param facet A facet\n+   */\n+  const facetListItem = (\n+    classificationName: string,\n+    facet: OEQ.SearchFacets.Facet\n+  ): ReactElement => {\n+    const { term, count } = facet;\n+    return (\n+      <ListItem key={`${term} ${count}`} style={{ padding: 0 }}>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE1MzU4NA=="}, "originalCommit": {"oid": "ab7a8469f7613ae70996b6c1f8cce4a132499274"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzA1OTQ0OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchFacetsModule.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNjowMTozOVrOHGIvnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNzowOTo0NlrOHGKdjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE5Njc2Nw==", "bodyText": "Hmmm, so it's only undefined if it's dirty. We should not have any 'dirty' entries here, so perhaps we should throw an error. If we leave like this it will probably be fine, but if we ever get corrupt data this could compound the situation.\nUp to you.", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r476196767", "createdAt": "2020-08-25T06:01:39Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchFacetsModule.ts", "diffHunk": "@@ -94,7 +98,10 @@ export const listClassifications = async (\n ): Promise<Classification[]> =>\n   Promise.all(\n     (await getFacetsFromServer()).map<Promise<Classification>>(\n-      async (settings) => ({\n+      async (settings, index) => ({\n+        // We know IDs won't be undefined here, but due to its type being number | undefined,\n+        // we have to do a nullish coalescing\n+        id: settings.id ?? index,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21fe1630bb11ee4739adb15d072cb9cafffc1259"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIyNDkwOQ==", "bodyText": "I prefer leave it like this for now \ud83d\ude04 .", "url": "https://github.com/openequella/openEQUELLA/pull/2216#discussion_r476224909", "createdAt": "2020-08-25T07:09:46Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchFacetsModule.ts", "diffHunk": "@@ -94,7 +98,10 @@ export const listClassifications = async (\n ): Promise<Classification[]> =>\n   Promise.all(\n     (await getFacetsFromServer()).map<Promise<Classification>>(\n-      async (settings) => ({\n+      async (settings, index) => ({\n+        // We know IDs won't be undefined here, but due to its type being number | undefined,\n+        // we have to do a nullish coalescing\n+        id: settings.id ?? index,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE5Njc2Nw=="}, "originalCommit": {"oid": "21fe1630bb11ee4739adb15d072cb9cafffc1259"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1866, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}