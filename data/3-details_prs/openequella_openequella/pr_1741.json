{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4OTIwNzgx", "number": 1741, "title": "Add schema retrieval to SchemaModule.ts", "bodyText": "Checklist\n\n\n the contributor license agreement is signed\n commit message follows commit guidelines\n tests are included\n screenshots are included showing significant UI changes - NA\n documentation is changed or added\n\nDescription of change\nThis adds a method to retrieve a specific schema (based on UUID) and generate a basic tree structure. It also provides a method to build the node path for a specified node.\nThe generated structure currently doesn't include the extra fields for leaf nodes (_type, _indexed, _field) as we wont yet be using them. But we can easily come back and add them when/if we need them.\nI've included tests with the REST calls mocked out - including for the previous function rushed through to retrieve a list of schemas. They're basic, but at least give us some coverage for now.\nI believe this completes the work needed for SchemaModule, (including related schema work in the REST client). So everything should be in place for @SammyIsConfused to finish off the schema browser.\n#1337", "createdAt": "2020-05-16T05:56:17Z", "url": "https://github.com/openequella/openEQUELLA/pull/1741", "merged": true, "mergeCommit": {"oid": "d0505e9795473a77e479aa030dd29891d27cc026"}, "closed": true, "closedAt": "2020-05-18T03:06:06Z", "author": {"login": "edalex-ian"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchg20GgH2gAyNDE4OTIwNzgxOjg2NTA2MTFjZDQ0NDE5OWE1NjE3Y2JjMTZiNTU5N2NkZTAxZTMxMjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABciW2kEgFqTQxMzI0MzU0Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8650611cd444199a5617cbc16b5597cde01e3129", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/8650611cd444199a5617cbc16b5597cde01e3129", "committedDate": "2020-05-15T12:02:25Z", "message": "SchemaModule.ts: Add function to get a schema\n\nEnsuring it's into a processed structure that is better suited for\nsimple usage of display the structure of a schema."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0eac41cde8657c09dbab9457502ddd5d0e695da0", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/0eac41cde8657c09dbab9457502ddd5d0e695da0", "committedDate": "2020-05-16T04:55:12Z", "message": "Add tests for SchemaModule.ts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cab540514ecbfd6cf3719cd1c1397e866b167ceb", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/cab540514ecbfd6cf3719cd1c1397e866b167ceb", "committedDate": "2020-05-16T05:45:44Z", "message": "Add function to generate node paths from SchemaNodes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMjQyMDc5", "url": "https://github.com/openequella/openEQUELLA/pull/1741#pullrequestreview-413242079", "createdAt": "2020-05-18T02:48:18Z", "commit": {"oid": "cab540514ecbfd6cf3719cd1c1397e866b167ceb"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMjo0ODoxOVrOGWmCmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMjo1MTozMlrOGWmFJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM0NTExNA==", "bodyText": "Oh nice, they're doubly connected. I thought it would just be name, potentially an ID, and the children array. Neat.", "url": "https://github.com/openequella/openEQUELLA/pull/1741#discussion_r426345114", "createdAt": "2020-05-18T02:48:19Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/schema/SchemaModule.ts", "diffHunk": "@@ -20,6 +20,22 @@ import { Config } from \"../config\";\n \n const API_BASE_URL = `${Config.baseUrl}api`;\n \n+/**\n+ * A minimal representation of a node within an oEQ schema.\n+ *\n+ * If a node has no/undefined 'parent' then it is the root. If a node has no/undefined\n+ * children then it is a leaf node.\n+ *\n+ * Technically leaf nodes typically have a type (e.g. text) however that information\n+ * (along with some other bits) are not retained in this representation. However it can be\n+ * retrieved via the REST API.\n+ */\n+export interface SchemaNode {\n+  name: string;\n+  parent?: SchemaNode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cab540514ecbfd6cf3719cd1c1397e866b167ceb"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM0NTc2NQ==", "bodyText": "When I was trying to do something along these lines, I assumed that parent wouldn't be part of this which made it much more confusing to traverse recursively. I needed to pass through the root XML as well as the node we are getting the path for. This makes it so much easier.", "url": "https://github.com/openequella/openEQUELLA/pull/1741#discussion_r426345765", "createdAt": "2020-05-18T02:51:32Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/schema/SchemaModule.ts", "diffHunk": "@@ -39,3 +55,71 @@ export const schemaListSummary = (): Promise<Map<string, string>> =>\n       new Map<string, string>()\n     )\n   );\n+\n+/**\n+ * Recursive helper function to build a simple outline of the structure of an oEQ schema.\n+ *\n+ * @param definition Typically something like a Record<string,any> returned via the REST API\n+ * @param name The name to be used for the next new node.\n+ * @param parent Mainly for recursive calls to provide back linking to the parents.\n+ */\n+export const buildSchemaTree = (\n+  definition: any,\n+  name: string,\n+  parent?: SchemaNode\n+): SchemaNode => {\n+  const node: SchemaNode = { name: name, parent: parent };\n+  node.children = Object.keys(definition)\n+    .filter((childName: string) => typeof definition[childName] === \"object\")\n+    .map((childName: string) =>\n+      buildSchemaTree(definition[childName], childName, node)\n+    );\n+\n+  return node;\n+};\n+\n+/**\n+ * A function to provide a structural outline of a schema. On success returns an oEQ schema\n+ * rooted with the standard <xml> root - which oEQ typically drops when capturing schema\n+ * paths.\n+ *\n+ * Any request type errors will result in ApiError. If it is found that the root is not the\n+ * standard singular <xml> then a basic Error will be thrown.\n+ *\n+ * @param uuid The UUID of the schema to retrieve from the server via REST API.\n+ */\n+export const schemaTree = (uuid: string): Promise<SchemaNode> =>\n+  OEQ.Schema.getSchema(API_BASE_URL, uuid).then(\n+    (schema: OEQ.Schema.EquellaSchema) => {\n+      const elements = Object.keys(schema.definition);\n+      const standardRoot = \"xml\";\n+      if (elements.length !== 1 && elements[0] !== standardRoot) {\n+        throw new Error(\n+          \"Received schema does not start with the standard <xml> root element.\"\n+        );\n+      }\n+      return buildSchemaTree(schema.definition[standardRoot], standardRoot);\n+    }\n+  );\n+\n+/**\n+ * Helper function to generate node path string from a node.\n+ *\n+ * @param node The node to generate a path for.\n+ * @param stripXml Whether to include the leading /xml - although returned in schemas, not typically used in paths.\n+ */\n+export const pathForNode = (node: SchemaNode, stripXml = true): string => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cab540514ecbfd6cf3719cd1c1397e866b167ceb"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMjQzNTQ2", "url": "https://github.com/openequella/openEQUELLA/pull/1741#pullrequestreview-413243546", "createdAt": "2020-05-18T02:54:24Z", "commit": {"oid": "cab540514ecbfd6cf3719cd1c1397e866b167ceb"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMjo1NDoyNFrOGWmHPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMjo1NDoyNFrOGWmHPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM0NjMwMA==", "bodyText": "I am happy with how to mock functions here.\nI am thinking an alternative way for mocking these two functions could be\njest.mock(\"@openequella/rest-api-client\", () => (\n{\nlistSchemas: jest.fn().mockImplementationOnce(() :\nPromise<OEQ.Common.PagedResult<OEQ.Common.BaseEntity>> => {\nreturn Promise.resolve(getSchemasResp)\n})\n}\n));\nNever mind, just a thought.", "url": "https://github.com/openequella/openEQUELLA/pull/1741#discussion_r426346300", "createdAt": "2020-05-18T02:54:24Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/schema/SchemaModule.test.ts", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as SchemaModule from \"../../../tsrc/schema/SchemaModule\";\n+import { getSchemasResp } from \"../../../__mocks__/getSchemasResp\";\n+import { getSchemaUuidResp } from \"../../../__mocks__/getSchemaUuidResp\";\n+import * as OEQ from \"@openequella/rest-api-client\";\n+\n+jest.mock(\"@openequella/rest-api-client\");\n+(OEQ.Schema.listSchemas as jest.Mock<\n+  Promise<OEQ.Common.PagedResult<OEQ.Common.BaseEntity>>\n+>).mockResolvedValue(getSchemasResp);\n+(OEQ.Schema.getSchema as jest.Mock<\n+  Promise<OEQ.Schema.EquellaSchema>\n+>).mockResolvedValue(getSchemaUuidResp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cab540514ecbfd6cf3719cd1c1397e866b167ceb"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 126, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}