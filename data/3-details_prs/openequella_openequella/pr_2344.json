{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0NTEwNDYw", "number": 2344, "title": "Spring 5 / Hib 5 Initial Efforts", "bodyText": "Checklist\n\n the [contributor license agreement][] is signed\n commit message follows [commit guidelines][]\n\nDescription of change\nUpgraded to Spring 5, Hibernate 5, and supporting libraries.\nVarious testing efforts included:\n\nOracle, SQL Server, Postgres databases on a variety of upgrade paths.\nlocal autotests\nConfirmed pre and post upgrade database DDLs\nKaltura integration\nCanvas integration\nBIRT\nEBI\nClustering\nMime type conversion of .doc\nParsing PDFs for search", "createdAt": "2020-09-29T02:56:53Z", "url": "https://github.com/openequella/openEQUELLA/pull/2344", "merged": true, "mergeCommit": {"oid": "1e38e96a5122010ddf136e8004e63c17e12a03a4"}, "closed": true, "closedAt": "2020-11-18T17:42:56Z", "author": {"login": "cbeach47"}, "timelineItems": {"totalCount": 53, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdP9jLeABqjM4NDcyMDcyMzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABddc3kygH2gAyNDk0NTEwNDYwOjNkNjY0MmQwMjc5ZjlkOWRiMmFlZWM2OWI1NDVhOTJmOTA3OTBlYmE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c237a0e8ba296da84a001768d59ad83420303fb0", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/c237a0e8ba296da84a001768d59ad83420303fb0", "committedDate": "2020-10-05T19:23:39Z", "message": "Temporarily removed links due to plugins.jetbrains.com not responding"}, "afterCommit": {"oid": "f09481826fb5db56a05133852e80bc684744f6b4", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/f09481826fb5db56a05133852e80bc684744f6b4", "committedDate": "2020-10-06T18:40:02Z", "message": "Temporarily removed links due to plugins.jetbrains.com not responding"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b8442bce66a077e92519da2c2730c7d2c546a75f", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/b8442bce66a077e92519da2c2730c7d2c546a75f", "committedDate": "2020-10-30T20:34:48Z", "message": "Changes due to autotest issue resolutions"}, "afterCommit": {"oid": "d05f0913b79d3265a877939fb6bac2946d973e62", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/d05f0913b79d3265a877939fb6bac2946d973e62", "committedDate": "2020-10-30T20:54:05Z", "message": "Changes due to autotest issue resolutions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "035cb08748e38019ee9f837919217bc05e575873", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/035cb08748e38019ee9f837919217bc05e575873", "committedDate": "2020-11-05T18:48:58Z", "message": "#1214 initial Spring 3 version bump"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "995bc2c58d5388e041fc8ec138ec252b5a8196a9", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/995bc2c58d5388e041fc8ec138ec252b5a8196a9", "committedDate": "2020-11-05T18:48:58Z", "message": "Rollback transactional testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73221d504161d2b9bc5f47c40c0c1486b9e35b8b", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/73221d504161d2b9bc5f47c40c0c1486b9e35b8b", "committedDate": "2020-11-05T18:48:58Z", "message": "WIP - spring 5 upgrade"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ded9d4d5c9c36279a243af6ae41437bc90c97324", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/ded9d4d5c9c36279a243af6ae41437bc90c97324", "committedDate": "2020-11-05T18:48:58Z", "message": "fix: hib fix for Spring 3+"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aec7b5d0335d64f450440d49b28e393eeed73a0e", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/aec7b5d0335d64f450440d49b28e393eeed73a0e", "committedDate": "2020-11-05T18:48:58Z", "message": "WIP:  Leveraging Spring 3 efforts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90edf1c73cdf35865d7a9cd8d3ef94e9a9ca1c6b", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/90edf1c73cdf35865d7a9cd8d3ef94e9a9ca1c6b", "committedDate": "2020-11-05T18:48:58Z", "message": "WIP:  Continue to leverage Spring 3 efforts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6146fd6716b3f3a92831ddce2a2a613de2ac5be0", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/6146fd6716b3f3a92831ddce2a2a613de2ac5be0", "committedDate": "2020-11-05T18:48:58Z", "message": "chore: rollback some changes that in fact did not affect the build with the deps upgrade"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7a86858de74894b1cfed122a32079edd637f092", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/c7a86858de74894b1cfed122a32079edd637f092", "committedDate": "2020-11-05T18:48:58Z", "message": "spring3-upgrade:  More build.sbt tweaks, and fixing a leftover generics issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2aefa81a044af2788fc5f3ea5ca7964bb098642d", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/2aefa81a044af2788fc5f3ea5ca7964bb098642d", "committedDate": "2020-11-05T18:48:58Z", "message": "Merging in WIP efforts to make hib5 / Spring5  play nice with oEQ"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60ae66618a75cda2af71af5f5df6b0c0207cce3b", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/60ae66618a75cda2af71af5f5df6b0c0207cce3b", "committedDate": "2020-11-05T18:48:58Z", "message": "WIP Spring5: More hibernate changes - execute / sql exception"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed593bd8538a605e3945c8a830739ee9d5d1ed67", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/ed593bd8538a605e3945c8a830739ee9d5d1ed67", "committedDate": "2020-11-05T18:48:58Z", "message": "WIP hibernate changes to support Spring / Hib 5"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fecb026d84edeaeb66c30b791c38eb475bfac9f0", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/fecb026d84edeaeb66c30b791c38eb475bfac9f0", "committedDate": "2020-11-05T18:48:58Z", "message": "WIP:  Fixed remoting errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74d822b3a5abf8b55c47e29751df5e6947c80da1", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/74d822b3a5abf8b55c47e29751df5e6947c80da1", "committedDate": "2020-11-05T18:48:58Z", "message": "WIP: fixed dedup error with logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a81bbac5d8822e83240b9cca47bb2bfbd52c6878", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/a81bbac5d8822e83240b9cca47bb2bfbd52c6878", "committedDate": "2020-11-05T18:48:59Z", "message": "WIP:  updated more deps, hib5 updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6dd838e0b03df583bc1e146b5cb47c4e55798e86", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/6dd838e0b03df583bc1e146b5cb47c4e55798e86", "committedDate": "2020-11-05T18:48:59Z", "message": "WIP:  More hib5 updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9cf976e285e30acfcc4daaf7578f8d8bd6492d9", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/b9cf976e285e30acfcc4daaf7578f8d8bd6492d9", "committedDate": "2020-11-05T18:48:59Z", "message": "WIP: exploratory changes to get hib5 to compile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47a1c2f0afa3298d12c149c6b89c7bd42135ae4f", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/47a1c2f0afa3298d12c149c6b89c7bd42135ae4f", "committedDate": "2020-11-05T18:48:59Z", "message": "WIP - source compiles!"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "944659f8f9a7db2aed3f4f655457e00f60e7c593", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/944659f8f9a7db2aed3f4f655457e00f60e7c593", "committedDate": "2020-11-05T18:48:59Z", "message": "WIP:  working through the startup issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5857c9a7310469cb74ac10c3d147835a26e383eb", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/5857c9a7310469cb74ac10c3d147835a26e383eb", "committedDate": "2020-11-05T18:48:59Z", "message": "WIP:  fixed the el startup issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00e937dc3b9638d08be83927f86c496432e3ba95", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/00e937dc3b9638d08be83927f86c496432e3ba95", "committedDate": "2020-11-05T18:48:59Z", "message": "oEQ more or less runs on SpringHib5 now"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ee2cc3d37411f23f0592fbdbc8dea7549865872", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/9ee2cc3d37411f23f0592fbdbc8dea7549865872", "committedDate": "2020-11-05T18:48:59Z", "message": "Added license header"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58957ac35956c586552566f70315ba8a89e1bdfd", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/58957ac35956c586552566f70315ba8a89e1bdfd", "committedDate": "2020-11-05T18:48:59Z", "message": "Fixed hierarchies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed30e3277024aca7ddf0fb8d8aa9bb01d85fbcd3", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/ed30e3277024aca7ddf0fb8d8aa9bb01d85fbcd3", "committedDate": "2020-11-05T18:48:59Z", "message": "Various hib5 fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a4c89126f91ab0f95ebe04fa2cb8c4503a65f16", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/0a4c89126f91ab0f95ebe04fa2cb8c4503a65f16", "committedDate": "2020-11-05T18:48:59Z", "message": "fixed minor regression"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4eeac0a4dcd421d3b027529ec52b0772d5ee74d7", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/4eeac0a4dcd421d3b027529ec52b0772d5ee74d7", "committedDate": "2020-11-05T18:48:59Z", "message": "Fixed a lazy load on a detached entity"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3048a408c2b7730bfc8a3c88d767a5f14f795f30", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/3048a408c2b7730bfc8a3c88d767a5f14f795f30", "committedDate": "2020-11-05T18:49:00Z", "message": "Upgrade CXF / Tika - CXF was needed for Spring 5"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0d3518c18512525f4ff416b2aca6e1030273922", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/a0d3518c18512525f4ff416b2aca6e1030273922", "committedDate": "2020-11-05T18:49:00Z", "message": "Back to known working (kindof) CXF / Tika versions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd911728235fe0b43d83003ef0c386a80570ce43", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/dd911728235fe0b43d83003ef0c386a80570ce43", "committedDate": "2020-11-05T18:49:00Z", "message": "CXF 3.4.0 and Tika 1.24.1 is now working locally"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "def14492f685b327a13d208556f67d653ae1f127", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/def14492f685b327a13d208556f67d653ae1f127", "committedDate": "2020-11-05T18:49:00Z", "message": "Temporarily removed links due to plugins.jetbrains.com not responding"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a356c624fe6f01a5ba4ac8daf99f5e719552e349", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/a356c624fe6f01a5ba4ac8daf99f5e719552e349", "committedDate": "2020-11-05T18:49:00Z", "message": "Revert the temp change of link removal"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d43e7ea3d2ad98ec45831fd2f45fb7f7c5ddd107", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/d43e7ea3d2ad98ec45831fd2f45fb7f7c5ddd107", "committedDate": "2020-11-05T18:49:00Z", "message": "Merge bus-extensions.txt instead of keeping just the first"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d98f3159569655d220e983ccfceb6ef648f90e7c", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/d98f3159569655d220e983ccfceb6ef648f90e7c", "committedDate": "2020-11-05T18:49:00Z", "message": "Better handling of AOP deps, and checking for null objs prior to eviction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f64b80ef7f0b64766ea7eca73c94907015f0957", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/4f64b80ef7f0b64766ea7eca73c94907015f0957", "committedDate": "2020-11-05T18:49:00Z", "message": "SpringHib5 - Rewire Kaltura build branch and add hib5 config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0ed1f2e0f87ea1c7d613582861ea09ad679175c", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/c0ed1f2e0f87ea1c7d613582861ea09ad679175c", "committedDate": "2020-11-05T18:49:00Z", "message": "Revisions due to Oracle DB testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b4ef3dec619de8ce9c8e05fda6d2bf97641633a", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/4b4ef3dec619de8ce9c8e05fda6d2bf97641633a", "committedDate": "2020-11-05T18:49:00Z", "message": "Changes due to autotest issue resolutions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bc098778fe3e326f75bf0b1fd08934c4922e27a", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/0bc098778fe3e326f75bf0b1fd08934c4922e27a", "committedDate": "2020-11-05T18:49:00Z", "message": "Adjusting comments due to lessons learned"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/f68476ba268e987d099639fe3866696a27dba73f", "committedDate": "2020-11-05T18:49:01Z", "message": "Added missing header to new file"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "47c04f36afa74c5b681904173121a8583c7938a7", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/47c04f36afa74c5b681904173121a8583c7938a7", "committedDate": "2020-10-30T23:02:40Z", "message": "Added missing header to new file"}, "afterCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/f68476ba268e987d099639fe3866696a27dba73f", "committedDate": "2020-11-05T18:49:01Z", "message": "Added missing header to new file"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NzEzNTU4", "url": "https://github.com/openequella/openEQUELLA/pull/2344#pullrequestreview-524713558", "createdAt": "2020-11-05T22:12:31Z", "commit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "state": "COMMENTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMjoxMjozMVrOHuYtHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMjoyNDoxMVrOHuZB3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMTMwOQ==", "bodyText": "Is this an error you anticipate people will run into?\nIs including the error in the source a good way to guide adopters/future developers on how to work with this?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518401309", "createdAt": "2020-11-05T22:12:31Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Admin/com.tle.web.adminconsole/build.sbt", "diffHunk": "@@ -6,3 +6,20 @@ resourceGenerators in Compile += Def.task {\n   (jarSigner.value).apply(jarFile, outJar)\n   Seq(outJar)\n }.taskValue\n+\n+assemblyMergeStrategy in assembly := {\n+  // Post SpringHib5 upgrade, the following error was thrown on build:\n+  // deduplicate: different file contents found in the following:\n+  // [error] .../com.fasterxml/classmate/bundles/classmate-1.5.1.jar:module-info.class\n+  // [error] .../com.sun.istack/istack-commons-runtime/jars/istack-commons-runtime-3.0.7.jar:module-info.class\n+  // [error] .../com.sun.xml.fastinfoset/FastInfoset/jars/FastInfoset-1.2.15.jar:module-info.class\n+  // [error] .../javax.xml.bind/jaxb-api/jars/jaxb-api-2.3.1.jar:module-info.class\n+  // [error] .../org.glassfish.jaxb/jaxb-runtime/jars/jaxb-runtime-2.3.1.jar:module-info.class\n+  // [error] .../org.glassfish.jaxb/txw2/jars/txw2-2.3.1.jar:module-info.class\n+  // [error] .../org.jvnet.staxex/stax-ex/jars/stax-ex-1.8.jar:module-info.class\n+  // As per https://stackoverflow.com/questions/54834125/sbt-assembly-deduplicate-module-info-class , discarding is OK for Java 8", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMTUwMg==", "bodyText": "Is this an error you anticipate people will run into?\nIs including the error in the source a good way to guide adopters/future developers on how to work with this?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518401502", "createdAt": "2020-11-05T22:12:59Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Admin/com.tle.web.adminconsole/jarsrc/build.sbt", "diffHunk": "@@ -1,20 +1,48 @@\n+val springVersion = \"5.2.9.RELEASE\"\n+\n libraryDependencies ++= Seq(\n   \"com.github.equella.jpf\" % \"jpf\"             % \"1.0.7\",\n   \"com.google.guava\"       % \"guava\"           % \"18.0\",\n   \"org.slf4j\"              % \"jcl-over-slf4j\"  % \"1.7.30\",\n   \"org.slf4j\"              % \"slf4j-simple\"    % \"1.7.30\",\n-  \"org.springframework\"    % \"spring-web\"      % \"2.5.6\",\n-  \"org.springframework\"    % \"spring-aop\"      % \"2.5.6\",\n+  \"org.springframework\"    % \"spring-web\"      % springVersion,\n+  \"org.springframework\"    % \"spring-aop\"      % springVersion,\n+  \"org.springframework\"    % \"spring-context\"  % springVersion,\n   \"com.fifesoft\"           % \"rsyntaxtextarea\" % \"1.5.2\",\n   \"com.miglayout\"          % \"miglayout-swing\" % \"4.2\",\n   xstreamDep\n )\n \n-excludeDependencies += \"commons-logging\" % \"commons-logging\"\n+excludeDependencies ++= Seq(\n+  \"commons-logging\" % \"commons-logging\",\n+  // Spring 5 added a default logging bridge.  In oEQ, this results in\n+  // a [deduplicate: different file contents found in the following] error\n+  // ...org.slf4j/jcl-over-slf4j/jars/jcl-over-slf4j-1.7.30.jar:org/apache/commons/logging/Log.class\n+  // ...org.springframework/spring-jcl/jars/spring-jcl-5.2.9.RELEASE.jar:org/apache/commons/logging/Log.class\n+  // As per https://github.com/spring-projects/spring-framework/issues/20611 ,\n+  // since we already have logging in place, we can safely exclude the dep from spring.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMTU3OQ==", "bodyText": "Is this an error you anticipate people will run into?\nIs including the error in the source a good way to guide adopters/future developers on how to work with this?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518401579", "createdAt": "2020-11-05T22:13:09Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Admin/com.tle.web.adminconsole/jarsrc/build.sbt", "diffHunk": "@@ -1,20 +1,48 @@\n+val springVersion = \"5.2.9.RELEASE\"\n+\n libraryDependencies ++= Seq(\n   \"com.github.equella.jpf\" % \"jpf\"             % \"1.0.7\",\n   \"com.google.guava\"       % \"guava\"           % \"18.0\",\n   \"org.slf4j\"              % \"jcl-over-slf4j\"  % \"1.7.30\",\n   \"org.slf4j\"              % \"slf4j-simple\"    % \"1.7.30\",\n-  \"org.springframework\"    % \"spring-web\"      % \"2.5.6\",\n-  \"org.springframework\"    % \"spring-aop\"      % \"2.5.6\",\n+  \"org.springframework\"    % \"spring-web\"      % springVersion,\n+  \"org.springframework\"    % \"spring-aop\"      % springVersion,\n+  \"org.springframework\"    % \"spring-context\"  % springVersion,\n   \"com.fifesoft\"           % \"rsyntaxtextarea\" % \"1.5.2\",\n   \"com.miglayout\"          % \"miglayout-swing\" % \"4.2\",\n   xstreamDep\n )\n \n-excludeDependencies += \"commons-logging\" % \"commons-logging\"\n+excludeDependencies ++= Seq(\n+  \"commons-logging\" % \"commons-logging\",\n+  // Spring 5 added a default logging bridge.  In oEQ, this results in\n+  // a [deduplicate: different file contents found in the following] error\n+  // ...org.slf4j/jcl-over-slf4j/jars/jcl-over-slf4j-1.7.30.jar:org/apache/commons/logging/Log.class\n+  // ...org.springframework/spring-jcl/jars/spring-jcl-5.2.9.RELEASE.jar:org/apache/commons/logging/Log.class\n+  // As per https://github.com/spring-projects/spring-framework/issues/20611 ,\n+  // since we already have logging in place, we can safely exclude the dep from spring.\n+  \"org.springframework\" % \"spring-jcl\"\n+)\n+\n packageOptions in assembly += Package.ManifestAttributes(\"Permissions\" -> \"all-permissions\")\n assemblyOption in assembly := (assemblyOption in assembly).value\n assemblyMergeStrategy in assembly := {\n   case PathList(\"org\", \"xmlpull\", \"v1\", _*) => MergeStrategy.first\n+  // Added due to a [deduplicate: different file contents found in the following] error against:\n+  // org.springframework/spring-context/jars/spring-context-3.2.18.RELEASE.jar:overview.html\n+  // org.springframework/spring-web/jars/spring-web-3.2.18.RELEASE.jar:overview.html\n+  case x if x.contains(\"overview.html\") => MergeStrategy.first\n+  // Post SpringHib5 upgrade, the following error was thrown on build:\n+  // deduplicate: different file contents found in the following:\n+  // [error] .../com.fasterxml/classmate/bundles/classmate-1.5.1.jar:module-info.class\n+  // [error] .../com.sun.istack/istack-commons-runtime/jars/istack-commons-runtime-3.0.7.jar:module-info.class\n+  // [error] .../com.sun.xml.fastinfoset/FastInfoset/jars/FastInfoset-1.2.15.jar:module-info.class\n+  // [error] .../javax.xml.bind/jaxb-api/jars/jaxb-api-2.3.1.jar:module-info.class\n+  // [error] .../org.glassfish.jaxb/jaxb-runtime/jars/jaxb-runtime-2.3.1.jar:module-info.class\n+  // [error] .../org.glassfish.jaxb/txw2/jars/txw2-2.3.1.jar:module-info.class\n+  // [error] .../org.jvnet.staxex/stax-ex/jars/stax-ex-1.8.jar:module-info.class\n+  // As per https://stackoverflow.com/questions/54834125/sbt-assembly-deduplicate-module-info-class , discarding is OK for Java 8", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMTY1NQ==", "bodyText": "Is this an error you anticipate people will run into?\nIs including the error in the source a good way to guide adopters/future developers on how to work with this?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518401655", "createdAt": "2020-11-05T22:13:21Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Applet/com.tle.web.filemanager.applet/appletsrc/build.sbt", "diffHunk": "@@ -17,3 +19,24 @@ packageOptions in assembly += Package.ManifestAttributes(\n )\n \n assemblyOption in assembly := (assemblyOption in assembly).value.copy(includeScala = false)\n+\n+assemblyMergeStrategy in assembly := {\n+  // Added due to a [deduplicate: different file contents found in the following] error against:\n+  // org.springframework/spring-context/jars/spring-context-3.2.18.RELEASE.jar:overview.html\n+  // org.springframework/spring-web/jars/spring-web-3.2.18.RELEASE.jar:overview.html\n+  case x if x.contains(\"overview.html\") => MergeStrategy.first\n+  // Post SpringHib5 upgrade, the following error was thrown on build:\n+  // deduplicate: different file contents found in the following:\n+  // [error] .../com.fasterxml/classmate/bundles/classmate-1.5.1.jar:module-info.class\n+  // [error] .../com.sun.istack/istack-commons-runtime/jars/istack-commons-runtime-3.0.7.jar:module-info.class\n+  // [error] .../com.sun.xml.fastinfoset/FastInfoset/jars/FastInfoset-1.2.15.jar:module-info.class\n+  // [error] .../javax.xml.bind/jaxb-api/jars/jaxb-api-2.3.1.jar:module-info.class\n+  // [error] .../org.glassfish.jaxb/jaxb-runtime/jars/jaxb-runtime-2.3.1.jar:module-info.class\n+  // [error] .../org.glassfish.jaxb/txw2/jars/txw2-2.3.1.jar:module-info.class\n+  // [error] .../org.jvnet.staxex/stax-ex/jars/stax-ex-1.8.jar:module-info.class\n+  // As per https://stackoverflow.com/questions/54834125/sbt-assembly-deduplicate-module-info-class , discarding is OK for Java 8", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMTc0Mg==", "bodyText": "Is this an error you anticipate people will run into?\nIs including the error in the source a good way to guide adopters/future developers on how to work with this?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518401742", "createdAt": "2020-11-05T22:13:31Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.core/jarsrc/build.sbt", "diffHunk": "@@ -15,6 +17,27 @@ packageOptions in assembly += Package.ManifestAttributes(\n )\n assemblyOption in assembly := (assemblyOption in assembly).value.copy(includeScala = false)\n \n+assemblyMergeStrategy in assembly := {\n+  // Added due to a [deduplicate: different file contents found in the following] error against:\n+  // org.springframework/spring-context/jars/spring-context-3.2.18.RELEASE.jar:overview.html\n+  // org.springframework/spring-web/jars/spring-web-3.2.18.RELEASE.jar:overview.html\n+  case x if x.contains(\"overview.html\") => MergeStrategy.first\n+  // Post SpringHib5 upgrade, the following error was thrown on build:\n+  // deduplicate: different file contents found in the following:\n+  // [error] .../com.fasterxml/classmate/bundles/classmate-1.5.1.jar:module-info.class\n+  // [error] .../com.sun.istack/istack-commons-runtime/jars/istack-commons-runtime-3.0.7.jar:module-info.class\n+  // [error] .../com.sun.xml.fastinfoset/FastInfoset/jars/FastInfoset-1.2.15.jar:module-info.class\n+  // [error] .../javax.xml.bind/jaxb-api/jars/jaxb-api-2.3.1.jar:module-info.class\n+  // [error] .../org.glassfish.jaxb/jaxb-runtime/jars/jaxb-runtime-2.3.1.jar:module-info.class\n+  // [error] .../org.glassfish.jaxb/txw2/jars/txw2-2.3.1.jar:module-info.class\n+  // [error] .../org.jvnet.staxex/stax-ex/jars/stax-ex-1.8.jar:module-info.class\n+  // As per https://stackoverflow.com/questions/54834125/sbt-assembly-deduplicate-module-info-class , discarding is OK for Java 8", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMjUxNA==", "bodyText": "is this still pending review?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518402514", "createdAt": "2020-11-05T22:14:59Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/dao/AbstractHibernateDao.java", "diffHunk": "@@ -42,21 +42,25 @@ protected synchronized HibernateTemplate getHibernateTemplate() {\n       lastFactory = newFactory;\n       template =\n           new HibernateTemplate(newFactory) {\n+            // Removed the method param, since it no longer exists in hib5:  boolean\n+            // enforceNewSession\n+            // TODO need to understand the impact of the removal\n             @Override\n-            protected Object doExecute(\n-                HibernateCallback action, boolean enforceNewSession, boolean enforceNativeSession)\n+            protected Object doExecute(HibernateCallback action, boolean enforceNativeSession)\n                 throws DataAccessException {\n               Thread currentThread = Thread.currentThread();\n               ClassLoader origLoader = currentThread.getContextClassLoader();\n               try {\n                 currentThread.setContextClassLoader(Session.class.getClassLoader());\n-                return super.doExecute(action, enforceNewSession, enforceNativeSession);\n+                return super.doExecute(action, enforceNativeSession);\n               } finally {\n                 currentThread.setContextClassLoader(origLoader);\n               }\n             }\n           };\n-      template.setAllowCreate(false);\n+      // TODO - no longer exists in hib5.  Need to review\n+      // template.setAllowCreate(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMjU5NQ==", "bodyText": "is this still pending review?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518402595", "createdAt": "2020-11-05T22:15:11Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/dao/AbstractHibernateDao.java", "diffHunk": "@@ -42,21 +42,25 @@ protected synchronized HibernateTemplate getHibernateTemplate() {\n       lastFactory = newFactory;\n       template =\n           new HibernateTemplate(newFactory) {\n+            // Removed the method param, since it no longer exists in hib5:  boolean\n+            // enforceNewSession\n+            // TODO need to understand the impact of the removal", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMzM2OA==", "bodyText": "would it be possible/make sense to filter the objects for valid ones?\nOr is swallowing the error the only/most effective way to handle this?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518403368", "createdAt": "2020-11-05T22:16:56Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/equella/service/impl/InitialiserServiceImpl.java", "diffHunk": "@@ -99,7 +102,27 @@ public void entitySimplified(Object old, Object newObj) {\n    */\n   private void evictFromSession(Set<Object> os) {\n     for (Object o : os) {\n-      getHibernateTemplate().evict(o);\n+      try {\n+        getHibernateTemplate().evict(o);\n+      } catch (IllegalArgumentException iae) {\n+        if (iae.getMessage().startsWith(\"Non-entity object instance passed to evict\")) {\n+          // This is being thrown in DefaultEvictEventListener.java:94\n+          // Does not appear to be a problem in this case, so trapping\n+          // and ignoring this specific case\n+          LOGGER.debug(\n+              \"Ignoring error with type [\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwNDA4NA==", "bodyText": "How large would this change be?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518404084", "createdAt": "2020-11-05T22:18:28Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java", "diffHunk": "@@ -36,19 +36,23 @@\n import java.util.Set;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-import org.hibernate.classic.Session;\n+import org.apache.curator.shaded.com.google.common.collect.Lists;\n+import org.hibernate.Session;\n+import org.hibernate.boot.model.relational.AuxiliaryDatabaseObject;\n import org.hibernate.dialect.Dialect;\n-import org.hibernate.engine.Mapping;\n+import org.hibernate.engine.spi.Mapping;\n import org.hibernate.id.PersistentIdentifierGenerator;\n-import org.hibernate.impl.SessionFactoryImpl;\n+import org.hibernate.internal.SessionFactoryImpl;\n import org.hibernate.jdbc.Work;\n-import org.hibernate.mapping.AuxiliaryDatabaseObject;\n import org.hibernate.mapping.Column;\n import org.hibernate.mapping.ForeignKey;\n import org.hibernate.mapping.Index;\n import org.hibernate.mapping.Table;\n import org.hibernate.mapping.UniqueKey;\n \n+// TECH_DEBT - found in SpringHib5, SessionFactoryImpl is now internal and should not be used\n+// directly.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwNDM2MA==", "bodyText": "is this still a pending change?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518404360", "createdAt": "2020-11-05T22:19:07Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateServiceImpl.java", "diffHunk": "@@ -71,7 +72,11 @@ protected HibernateFactory getHibernateFactory(String name, boolean system) {\n     }\n     HibernateFactory factory = hibernateService.createConfiguration(dataSource, clazzes);\n     factory.setClassLoader(getClass().getClassLoader());\n-    factory.setProperty(Environment.TRANSACTION_STRATEGY, SpringTransactionFactory.class.getName());\n+    // TODO - likely need to reconfigure this.  SpringTransactionFactory doesn't exist in\n+    // Spring 5 / Hib5.   -\n+    // https://stackoverflow.com/questions/43057858/where-did-the-class-org-hibernate-transaction-jdbctransactionfactory-go-in-hiber\n+    //    factory.setProperty(Environment.TRANSACTION_STRATEGY,\n+    //     SpringTransactionFactory.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwNTgzMw==", "bodyText": "Is Java 5 in the support matrix?\nI thought it was already set to 7 or 8", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518405833", "createdAt": "2020-11-05T22:22:17Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Security/com.tle.core.security/src/com/tle/core/security/impl/SecurityAttributeSource.java", "diffHunk": "@@ -65,8 +65,8 @@\n       ImmutableSet.of(\n           BaseEntity.class, EntityPack.class, Item.class, ItemPack.class, ActivateRequest.class);\n \n-  final Map<CacheKey, SecurityAttribute> attributeCache =\n-      CollectionFactory.createConcurrentMapIfPossible(16);\n+  // TODO - this assumes Java 5+ is required for oEQ.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwNjExNA==", "bodyText": "Is this an error you anticipate people will run into?\nIs including the error in the source a good way to guide adopters/future developers on how to work with this?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518406114", "createdAt": "2020-11-05T22:22:59Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Server/equellaserver/build.sbt", "diffHunk": "@@ -310,6 +381,55 @@ assemblyMergeStrategy in assembly := {\n   case PathList(\"junit\", _*)                                => MergeStrategy.discard\n   case PathList(\"org\", \"apache\", \"axis2\", \"transport\", \"http\", \"util\", \"ComplexPart.class\") =>\n     MergeStrategy.first\n+\n+  // Due to the error: deduplicate: different file contents found in the following:\n+  // ...\n+  //  .../org.apache.cxf/cxf-rt-frontend-jaxws/bundles/cxf-rt-frontend-jaxws-3.4.0.jar:META-INF/cxf/bus-extensions.txt\n+  //  .../org.apache.cxf/cxf-rt-transports-http/bundles/cxf-rt-transports-http-3.4.0.jar:META-INF/cxf/bus-extensions.txt\n+  // ...\n+  // As per https://github.com/johnrengelman/shadow/issues/309 , combining the files.\n+  case PathList(\"META-INF\", \"cxf\", \"bus-extensions.txt\") => MergeStrategy.filterDistinctLines\n+\n+  // Due to the error: deduplicate: different file contents found in the following:\n+  // ...\n+  //  .../org.apache.cxf/cxf-rt-frontend-jaxrs/bundles/cxf-rt-frontend-jaxrs-3.3.6.jar:META-INF/blueprint.handlers\n+  //  .../org.apache.cxf/cxf-rt-frontend-jaxws/bundles/cxf-rt-frontend-jaxws-3.4.0.jar:META-INF/blueprint.handlers\n+  // ...\n+  // Different blueprint.handlers may specify different classes.  Using the first one allows testing to pass.\n+  case PathList(\"META-INF\", \"blueprint.handlers\") => MergeStrategy.first\n+\n+  // OK to do in Java 8 - interesting that the global case for module-info.class didn't pick up the bouncy castle files\n+  // deduplicate: different file contents found in the following:\n+  //  .../io.github.classgraph/classgraph/jars/classgraph-4.8.87.jar:META-INF/versions/9/module-info.class\n+  //  .../org.bouncycastle/bcmail-jdk15on/jars/bcmail-jdk15on-1.65.jar:META-INF/versions/9/module-info.class\n+  //  .../org.bouncycastle/bcpkix-jdk15on/jars/bcpkix-jdk15on-1.65.jar:META-INF/versions/9/module-info.class\n+  //  .../org.bouncycastle/bcprov-jdk15on/jars/bcprov-jdk15on-1.65.jar:META-INF/versions/9/module-info.class", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 346}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwNjE4OQ==", "bodyText": "Is this an error you anticipate people will run into?\nIs including the error in the source a good way to guide adopters/future developers on how to work with this?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518406189", "createdAt": "2020-11-05T22:23:10Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Server/equellaserver/build.sbt", "diffHunk": "@@ -310,6 +381,55 @@ assemblyMergeStrategy in assembly := {\n   case PathList(\"junit\", _*)                                => MergeStrategy.discard\n   case PathList(\"org\", \"apache\", \"axis2\", \"transport\", \"http\", \"util\", \"ComplexPart.class\") =>\n     MergeStrategy.first\n+\n+  // Due to the error: deduplicate: different file contents found in the following:\n+  // ...\n+  //  .../org.apache.cxf/cxf-rt-frontend-jaxws/bundles/cxf-rt-frontend-jaxws-3.4.0.jar:META-INF/cxf/bus-extensions.txt\n+  //  .../org.apache.cxf/cxf-rt-transports-http/bundles/cxf-rt-transports-http-3.4.0.jar:META-INF/cxf/bus-extensions.txt\n+  // ...\n+  // As per https://github.com/johnrengelman/shadow/issues/309 , combining the files.\n+  case PathList(\"META-INF\", \"cxf\", \"bus-extensions.txt\") => MergeStrategy.filterDistinctLines\n+\n+  // Due to the error: deduplicate: different file contents found in the following:\n+  // ...\n+  //  .../org.apache.cxf/cxf-rt-frontend-jaxrs/bundles/cxf-rt-frontend-jaxrs-3.3.6.jar:META-INF/blueprint.handlers\n+  //  .../org.apache.cxf/cxf-rt-frontend-jaxws/bundles/cxf-rt-frontend-jaxws-3.4.0.jar:META-INF/blueprint.handlers\n+  // ...\n+  // Different blueprint.handlers may specify different classes.  Using the first one allows testing to pass.\n+  case PathList(\"META-INF\", \"blueprint.handlers\") => MergeStrategy.first\n+\n+  // OK to do in Java 8 - interesting that the global case for module-info.class didn't pick up the bouncy castle files\n+  // deduplicate: different file contents found in the following:\n+  //  .../io.github.classgraph/classgraph/jars/classgraph-4.8.87.jar:META-INF/versions/9/module-info.class\n+  //  .../org.bouncycastle/bcmail-jdk15on/jars/bcmail-jdk15on-1.65.jar:META-INF/versions/9/module-info.class\n+  //  .../org.bouncycastle/bcpkix-jdk15on/jars/bcpkix-jdk15on-1.65.jar:META-INF/versions/9/module-info.class\n+  //  .../org.bouncycastle/bcprov-jdk15on/jars/bcprov-jdk15on-1.65.jar:META-INF/versions/9/module-info.class\n+  case PathList(\"META-INF\", \"versions\", \"9\", \"module-info.class\") => MergeStrategy.first\n+\n+  // Curious that it's xml vs soap.  testing passes using the first one.\n+  // Due to the error: deduplicate: different file contents found in the following:\n+  // ...\n+  //  .../org.apache.cxf/cxf-rt-bindings-soap/bundles/cxf-rt-bindings-soap-3.4.0.jar:META-INF/wsdl.plugin.xml\n+  //  .../org.apache.cxf/cxf-rt-bindings-xml/bundles/cxf-rt-bindings-xml-3.4.0.jar:META-INF/wsdl.plugin.xml\n+  // ...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 354}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwNjQ4Ng==", "bodyText": "Is this an error you anticipate people will run into?\nIs including the error in the source a good way to guide adopters/future developers on how to work with this?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518406486", "createdAt": "2020-11-05T22:23:50Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Server/equellaserver/build.sbt", "diffHunk": "@@ -310,6 +381,55 @@ assemblyMergeStrategy in assembly := {\n   case PathList(\"junit\", _*)                                => MergeStrategy.discard\n   case PathList(\"org\", \"apache\", \"axis2\", \"transport\", \"http\", \"util\", \"ComplexPart.class\") =>\n     MergeStrategy.first\n+\n+  // Due to the error: deduplicate: different file contents found in the following:\n+  // ...\n+  //  .../org.apache.cxf/cxf-rt-frontend-jaxws/bundles/cxf-rt-frontend-jaxws-3.4.0.jar:META-INF/cxf/bus-extensions.txt\n+  //  .../org.apache.cxf/cxf-rt-transports-http/bundles/cxf-rt-transports-http-3.4.0.jar:META-INF/cxf/bus-extensions.txt\n+  // ...\n+  // As per https://github.com/johnrengelman/shadow/issues/309 , combining the files.\n+  case PathList(\"META-INF\", \"cxf\", \"bus-extensions.txt\") => MergeStrategy.filterDistinctLines\n+\n+  // Due to the error: deduplicate: different file contents found in the following:\n+  // ...\n+  //  .../org.apache.cxf/cxf-rt-frontend-jaxrs/bundles/cxf-rt-frontend-jaxrs-3.3.6.jar:META-INF/blueprint.handlers\n+  //  .../org.apache.cxf/cxf-rt-frontend-jaxws/bundles/cxf-rt-frontend-jaxws-3.4.0.jar:META-INF/blueprint.handlers\n+  // ...\n+  // Different blueprint.handlers may specify different classes.  Using the first one allows testing to pass.\n+  case PathList(\"META-INF\", \"blueprint.handlers\") => MergeStrategy.first\n+\n+  // OK to do in Java 8 - interesting that the global case for module-info.class didn't pick up the bouncy castle files\n+  // deduplicate: different file contents found in the following:\n+  //  .../io.github.classgraph/classgraph/jars/classgraph-4.8.87.jar:META-INF/versions/9/module-info.class\n+  //  .../org.bouncycastle/bcmail-jdk15on/jars/bcmail-jdk15on-1.65.jar:META-INF/versions/9/module-info.class\n+  //  .../org.bouncycastle/bcpkix-jdk15on/jars/bcpkix-jdk15on-1.65.jar:META-INF/versions/9/module-info.class\n+  //  .../org.bouncycastle/bcprov-jdk15on/jars/bcprov-jdk15on-1.65.jar:META-INF/versions/9/module-info.class\n+  case PathList(\"META-INF\", \"versions\", \"9\", \"module-info.class\") => MergeStrategy.first\n+\n+  // Curious that it's xml vs soap.  testing passes using the first one.\n+  // Due to the error: deduplicate: different file contents found in the following:\n+  // ...\n+  //  .../org.apache.cxf/cxf-rt-bindings-soap/bundles/cxf-rt-bindings-soap-3.4.0.jar:META-INF/wsdl.plugin.xml\n+  //  .../org.apache.cxf/cxf-rt-bindings-xml/bundles/cxf-rt-bindings-xml-3.4.0.jar:META-INF/wsdl.plugin.xml\n+  // ...\n+  case PathList(\"META-INF\", \"wsdl.plugin.xml\") => MergeStrategy.first\n+\n+  // The idea is to keep the later suffix list.\n+  // Due to the error: deduplicate: different file contents found in the following:\n+  // ...\n+  //  .../org.apache.cxf/cxf-rt-transports-http/bundles/cxf-rt-transports-http-3.3.6.jar:mozilla/public-suffix-list.txt\n+  //  .../org.apache.httpcomponents/httpclient/jars/httpclient-4.5.12.jar:mozilla/public-suffix-list.txt\n+  // ...\n+  case PathList(\"mozilla\", \"public-suffix-list.txt\") => MergeStrategy.last\n+\n+  // java2wsbeans.xml have different contents, and both look important.  Keeping the first one works with testing.\n+  // Due to the error: deduplicate: different file contents found in the following:\n+  // ...\n+  //  .../org.apache.cxf/cxf-rt-databinding-aegis/bundles/cxf-rt-databinding-aegis-3.4.0.jar:META-INF/cxf/java2wsbeans.xml\n+  //  .../org.apache.cxf/cxf-rt-databinding-jaxb/bundles/cxf-rt-databinding-jaxb-3.4.0.jar:META-INF/cxf/java2wsbeans.xml\n+  // ...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 370}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwNjYyMA==", "bodyText": "is this still todo?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518406620", "createdAt": "2020-11-05T22:24:11Z", "author": {"login": "ChristianMurphy"}, "path": "buildspec.yml", "diffHunk": "@@ -2,7 +2,8 @@ version: 0.2\n \n env:\n   variables:\n-    KALTURA_BRANCH: master\n+    # TODO [SpringHib5] keep this in sync with the appropriate oEQ-Kaltura branch before merging into `develop`, and eventually into `master`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/2410c2dac146040663d0da063e8479aa4b6e887c", "committedDate": "2020-11-06T05:23:59Z", "message": "New configs for Hib and Log4j are now defaults for installs and upgrades"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2ODMxMTQ3", "url": "https://github.com/openequella/openEQUELLA/pull/2344#pullrequestreview-526831147", "createdAt": "2020-11-10T03:44:55Z", "commit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 39, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwMzo0NDo1NVrOHwKnIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNjo0MDowM1rOHwOKPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI2NzU1NA==", "bodyText": "I guess once these are merged in we should have a tech debt issue to map against. Ideally we'd reference that ticket here, but hen we have a bit of chicken and egg.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520267554", "createdAt": "2020-11-10T03:44:55Z", "author": {"login": "edalex-ian"}, "path": "Dev/learningedge-config/defaults/learningedge-log4j.properties.default", "diffHunk": "@@ -10,3 +10,13 @@ log4j.appender.CONSOLE.Target=System.out\n log4j.appender.CONSOLE.Threshold=DEBUG\n log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout\n log4j.appender.CONSOLE.layout.ConversionPattern=%d{ABSOLUTE} %-5p [%c{1}] %m%n\n+\n+# Criteria deprecation warning suppression\n+log4j.appender.CONSOLE.filter.1=org.apache.log4j.varia.StringMatchFilter\n+log4j.appender.CONSOLE.filter.1.StringToMatch=HHH90000022\n+log4j.appender.CONSOLE.filter.1.AcceptOnMatch=false\n+\n+# Generator warning suppression", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI2ODUzNQ==", "bodyText": "I think it's fine. If we wanted to optimise I'd keep the first and last lines. (I.e. Concisely state the issue, and then any reference on approach taken.)", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520268535", "createdAt": "2020-11-10T03:48:30Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Admin/com.tle.web.adminconsole/build.sbt", "diffHunk": "@@ -6,3 +6,20 @@ resourceGenerators in Compile += Def.task {\n   (jarSigner.value).apply(jarFile, outJar)\n   Seq(outJar)\n }.taskValue\n+\n+assemblyMergeStrategy in assembly := {\n+  // Post SpringHib5 upgrade, the following error was thrown on build:\n+  // deduplicate: different file contents found in the following:\n+  // [error] .../com.fasterxml/classmate/bundles/classmate-1.5.1.jar:module-info.class\n+  // [error] .../com.sun.istack/istack-commons-runtime/jars/istack-commons-runtime-3.0.7.jar:module-info.class\n+  // [error] .../com.sun.xml.fastinfoset/FastInfoset/jars/FastInfoset-1.2.15.jar:module-info.class\n+  // [error] .../javax.xml.bind/jaxb-api/jars/jaxb-api-2.3.1.jar:module-info.class\n+  // [error] .../org.glassfish.jaxb/jaxb-runtime/jars/jaxb-runtime-2.3.1.jar:module-info.class\n+  // [error] .../org.glassfish.jaxb/txw2/jars/txw2-2.3.1.jar:module-info.class\n+  // [error] .../org.jvnet.staxex/stax-ex/jars/stax-ex-1.8.jar:module-info.class\n+  // As per https://stackoverflow.com/questions/54834125/sbt-assembly-deduplicate-module-info-class , discarding is OK for Java 8", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMTMwOQ=="}, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI2OTk2MA==", "bodyText": "Not sure I'm following this new comment. I guess I'm confused that these aren't going through JPA / Hibernate (how are they used), but also that no other changes are below so is this comment still needed?\nFeels like the comment might be a bit of a fragment of a bigger situation. \ud83e\udd14\nThere's several instances of this comment, so I'm rather interested to understand.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520269960", "createdAt": "2020-11-10T03:53:55Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.base/src/com/tle/beans/usermanagement/standard/ReplicatedConfiguration.java", "diffHunk": "@@ -27,6 +27,8 @@\n \n @SuppressWarnings(\"nls\")\n public class ReplicatedConfiguration extends UserManagementSettings {\n+  // [SpringHib5] Note - these queries with '?' in them do not need to be\n+  // ordinal since they aren't piped through JPA / Hibernate logic.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI3Mjg5MA==", "bodyText": "FYI - As we update code where it has the old NLS check comments, we've been removing them seeing it's now cruft with the absence any checking. Feel free to do the same.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520272890", "createdAt": "2020-11-10T04:05:11Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/copyright/dao/AbstractCopyrightDao.java", "diffHunk": "@@ -187,8 +190,9 @@ public H getHoldingForItem(Item item) {\n       return holding;\n     }\n     List<H> holdings =\n-        getHibernateTemplate()\n-            .find(query(\"select p.holding from %p p where p.item = ?\"), item); // $NON-NLS-1$\n+        (List<H>)\n+            getHibernateTemplate()\n+                .find(query(\"select p.holding from %p p where p.item = ?0\"), item); // $NON-NLS-1$", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4MzA2OQ==", "bodyText": "Would it be better to keep things simple (even if not enhanced for readability) by simply using i here? If we just want to enhance readability, I would't be opposed to a comment saying: generating ordinal parameter strings of ?0, ?1 .. ?n", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520283069", "createdAt": "2020-11-10T04:44:58Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/i18n/dao/impl/LanguageDaoImpl.java", "diffHunk": "@@ -167,12 +167,13 @@ private void populateNameMap(\n   @Override\n   public void deleteBundles(Collection<Long> bundles) {\n     if (!bundles.isEmpty()) {\n+      int paramCounter = 0;\n       StringBuilder query = new StringBuilder(\"(\"); // $NON-NLS-1$\n       for (int i = 0; i < bundles.size(); i++) {\n         if (i > 0) {\n           query.append(',');\n         }\n-        query.append('?');\n+        query.append('?').append(paramCounter++);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4NDA5Mg==", "bodyText": "As before, maybe just use i.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520284092", "createdAt": "2020-11-10T04:49:04Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/item/dao/impl/ItemDaoImpl.java", "diffHunk": "@@ -430,21 +442,26 @@ public ItemIdKey getItemIdKey(Long id) {\n     hql.append(\" FROM Item i WHERE \");\n \n     int i = 0;\n+    int paramCounter = 0;\n     hql.append('(');\n     for (ItemKey key : keys) {\n       if (i > 0) {\n         hql.append(\" OR \");\n       }\n       keyArray[i++] = key.getUuid();\n       keyArray[i++] = key.getVersion();\n-      hql.append(\"(i.uuid = ? and i.version = ?)\");\n+      hql.append(\"(i.uuid = ?\")\n+          .append(paramCounter++)\n+          .append(\" and i.version = ?\")\n+          .append(paramCounter++)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 294}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4NTI2Ng==", "bodyText": "Couple of considerations:\n\nIs this still needed - or was it just while you were working through things? (This can be see just be turning on Hibernate logging.)\nIf still needed, maybe the log message can be improved and maybe change \" sql:\" to \" HQL:\"\nAlso consider placing in block of if(LOGGER.isTraceEnabled())", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520285266", "createdAt": "2020-11-10T04:53:22Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/item/dao/impl/ItemDaoImpl.java", "diffHunk": "@@ -430,21 +442,26 @@ public ItemIdKey getItemIdKey(Long id) {\n     hql.append(\" FROM Item i WHERE \");\n \n     int i = 0;\n+    int paramCounter = 0;\n     hql.append('(');\n     for (ItemKey key : keys) {\n       if (i > 0) {\n         hql.append(\" OR \");\n       }\n       keyArray[i++] = key.getUuid();\n       keyArray[i++] = key.getVersion();\n-      hql.append(\"(i.uuid = ? and i.version = ?)\");\n+      hql.append(\"(i.uuid = ?\")\n+          .append(paramCounter++)\n+          .append(\" and i.version = ?\")\n+          .append(paramCounter++)\n+          .append(\") \");\n     }\n     hql.append(\") \");\n \n     keyArray[i] = CurrentInstitution.get();\n-    hql.append(\" and i.institution = ?\");\n-\n-    List<Object[]> results = getHibernateTemplate().find(hql.toString(), keyArray);\n+    hql.append(\" and i.institution = ?\").append(paramCounter++);\n+    LOGGER.trace(\"selectForIds sql: \" + hql);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 304}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4NjQzMA==", "bodyText": "Gah!\nWell, even the GitHub diff broken down on this one. But from what I can tell it looks like you were careful. Are you giving some extra special testing to this?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520286430", "createdAt": "2020-11-10T04:57:26Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/item/standard/dao/impl/ItemCommentDaoImpl.java", "diffHunk": "@@ -92,112 +92,113 @@ public Object doInHibernate(Session session) {\n   }\n \n   @Override\n-  @SuppressWarnings(\"unchecked\")\n   public List<Comment> getComments(\n       final Item item,\n       final EnumSet<CommentFilter> filter,\n       final CommentOrder order,\n       final int limit) {\n-    return getHibernateTemplate()\n-        .executeFind(\n-            new HibernateCallback() {\n-              @Override\n-              public Object doInHibernate(Session session) {\n-                // SQL QUERY EXPLANATION!\n-                //\n-                // The following is a native SQL query, but Hibernate still\n-                // gives us some love to avoid nastiness. It needs to be a\n-                // native SQL query because HQL doesn't allow for joining onto a\n-                // selected set of result, eg, ...FROM (SELECT ...)...\n-                //\n-                // Tread very carefully.\n-\n-                StringBuilder sb = new StringBuilder(\"SELECT {c.*} FROM comments c\");\n-\n-                if (filter.contains(CommentFilter.ONLY_MOST_RECENT_PER_USER)) {\n-                  sb.append(\" JOIN (\");\n-                  sb.append(\"   SELECT owner, max(date_created) as date_created\");\n-                  sb.append(\"   FROM comments\");\n-                  sb.append(\"   WHERE item_id = :itemdbid\");\n-                  sb.append(\"   AND owner IS NOT NULL\");\n-\n-                  if (filter.contains(CommentFilter.NOT_ANONYMOUS_OR_GUEST)) {\n-                    // We already filter out blank guest rows when we do the\n-                    // group by, so only filter out anonymous comments here.\n-                    sb.append(\"   AND anonymous = :false\");\n-                  }\n-\n-                  if (filter.contains(CommentFilter.MUST_HAVE_COMMENT)) {\n-                    sb.append(\" AND \\\"comment\\\" IS NOT NULL\");\n-                  }\n-\n-                  if (filter.contains(CommentFilter.MUST_HAVE_RATING)) {\n-                    sb.append(\" AND rating > 0\");\n-                  }\n+    return (List<Comment>)\n+        getHibernateTemplate()\n+            .execute(\n+                new HibernateCallback() {\n+                  @Override\n+                  public Object doInHibernate(Session session) {\n+                    // SQL QUERY EXPLANATION!\n+                    //\n+                    // The following is a native SQL query, but Hibernate still\n+                    // gives us some love to avoid nastiness. It needs to be a\n+                    // native SQL query because HQL doesn't allow for joining onto a\n+                    // selected set of result, eg, ...FROM (SELECT ...)...\n+                    //\n+                    // Tread very carefully.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4NjcyMw==", "bodyText": "Wow, I see this class was using a mixture of these annotations. Well, at least that's now tidied up. \ud83d\udc4d", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520286723", "createdAt": "2020-11-10T04:58:47Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/legacy/migration/RemoveAssemblerAndActivityWizard.java", "diffHunk": "@@ -312,7 +311,7 @@ private void removeAllNodesWithName(PropBagEx xml, String name) {\n   @AccessType(\"field\")\n   @Entity(name = \"ActivityWizard\")\n   public static class FakeActivityWizard extends FakeBaseEntity {\n-    @CollectionOfElements(fetch = FetchType.LAZY)\n+    @ElementCollection(fetch = FetchType.LAZY)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4ODU4Ng==", "bodyText": "In this case I see the value of paramCounter. \ud83d\udc4d\n(Just thought I'd mention to avoid an ambiguity.)", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520288586", "createdAt": "2020-11-10T05:05:21Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/settings/dao/impl/ConfigurationDaoImpl.java", "diffHunk": "@@ -56,17 +56,18 @@ public synchronized void deletePropertiesLike(Collection<String> select) {\n     final StringBuilder buffer = new StringBuilder();\n     buffer.append(\"from ConfigurationProperty where (\");\n     int length = select.size();\n+    int paramCounter = 0;\n     Object[] values = select.toArray(new Object[length + 1]);\n     for (int i = 0; i < length; i++) {\n       if (i > 0) {\n         buffer.append(\" or \");\n       }\n       values[i] = values[i].toString() + '%';\n-      buffer.append(\"key.property like ?\");\n+      buffer.append(\"key.property like ?\").append(paramCounter++);\n     }\n     buffer.append(\")\");\n \n-    buffer.append(\" and key.institutionId = ?\");\n+    buffer.append(\" and key.institutionId = ?\").append(paramCounter++);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MTMwNw==", "bodyText": "Is this TODO still to be done?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520291307", "createdAt": "2020-11-10T05:15:34Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/web/core/filter/HibernateFilter.java", "diffHunk": "@@ -55,7 +56,10 @@ public FilterResult filterRequest(HttpServletRequest request, HttpServletRespons\n \n       if (!TransactionSynchronizationManager.hasResource(sessionFactory)) {\n         LOGGER.debug(\"Opening single Hibernate Session in OpenSessionInViewFilter\"); // $NON-NLS-1$\n-        Session session = SessionFactoryUtils.getSession(sessionFactory, true);\n+        // TODO - previous code with SessionFactoryUtils:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MTkyMQ==", "bodyText": "Oh! Is that right? Seems like a significant change and I don't see it in the old code. \ud83e\udd14 \ud83d\ude15", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520291921", "createdAt": "2020-11-10T05:17:50Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/web/core/filter/HibernateFilter.java", "diffHunk": "@@ -74,4 +78,10 @@ public void afterServlet(HttpServletRequest request, HttpServletResponse respons\n     }\n     return result;\n   }\n+\n+  private Session openSession(SessionFactory sessionFactory) {\n+    Session session = sessionFactory.openSession();\n+    session.setHibernateFlushMode(FlushMode.MANUAL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MzgyOA==", "bodyText": "@PenghaiZhang do you have any thoughts on how this can be re-worked with a lambda/anonymous function and the Work API mentions at the SO post?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520293828", "createdAt": "2020-11-10T05:24:36Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/scalasrc/com/tle/core/db/RunWithDB.scala", "diffHunk": "@@ -46,7 +48,9 @@ object RunWithDB {\n     if (sessionHolder == null) {\n       sys.error(\"There is no hibernate session - make sure it's inside @Transactional\")\n     }\n-    val con = sessionHolder.getSession().connection()\n+    // TODO this is not the ideal solution.  Need to consider options, such as Work API.\n+    // https://stackoverflow.com/questions/3526556/session-connection-deprecated-on-hibernate\n+    val con = sessionHolder.getSession().asInstanceOf[SessionImpl].connection()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5NTQxMg==", "bodyText": "I'd normally comment about moving away from the iterator... However in the context and size of this PR, minimal change is good. \ud83d\ude04", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520295412", "createdAt": "2020-11-10T05:28:34Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/ExtendedAnnotationConfiguration.java", "diffHunk": "@@ -18,54 +18,117 @@\n \n package com.tle.core.hibernate;\n \n+import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n+import java.util.Properties;\n import java.util.TreeMap;\n+import org.apache.log4j.Logger;\n+import org.hibernate.boot.Metadata;\n+import org.hibernate.boot.model.relational.AuxiliaryDatabaseObject;\n+import org.hibernate.boot.registry.BootstrapServiceRegistryBuilder;\n import org.hibernate.cfg.Configuration;\n import org.hibernate.dialect.Dialect;\n+import org.hibernate.engine.spi.Mapping;\n+import org.hibernate.engine.spi.SessionFactoryImplementor;\n import org.hibernate.id.IdentifierGenerator;\n import org.hibernate.id.PersistentIdentifierGenerator;\n-import org.hibernate.mapping.AuxiliaryDatabaseObject;\n+import org.hibernate.integrator.spi.Integrator;\n import org.hibernate.mapping.Collection;\n import org.hibernate.mapping.IdentifierCollection;\n import org.hibernate.mapping.PersistentClass;\n import org.hibernate.mapping.RootClass;\n import org.hibernate.mapping.Table;\n+import org.hibernate.service.spi.SessionFactoryServiceRegistry;\n import org.hibernate.type.BasicType;\n \n public class ExtendedAnnotationConfiguration extends Configuration {\n   private static final long serialVersionUID = 1L;\n \n+  private static final Logger LOGGER = Logger.getLogger(ExtendedAnnotationConfiguration.class);\n+\n+  private static class MetadataCapture implements Integrator {\n+    private Metadata metadata;\n+\n+    public Metadata getMetadata() {\n+      return metadata;\n+    }\n+\n+    @Override\n+    public void integrate(\n+        Metadata metadata,\n+        SessionFactoryImplementor sessionFactory,\n+        SessionFactoryServiceRegistry serviceRegistry) {\n+      LOGGER.trace(\"integrating metadata\");\n+      this.metadata = metadata;\n+    }\n+\n+    @Override\n+    public void disintegrate(\n+        SessionFactoryImplementor sessionFactory, SessionFactoryServiceRegistry serviceRegistry) {\n+      LOGGER.trace(\"disintegrating metadata\");\n+      this.metadata = null;\n+    }\n+  }\n+\n+  private static final MetadataCapture METADATA_CAPTURE = new MetadataCapture();\n+\n   public ExtendedAnnotationConfiguration(ExtendedDialect dialect) {\n+    super(new BootstrapServiceRegistryBuilder().applyIntegrator(METADATA_CAPTURE).build());\n+    LOGGER.trace(\"Starting up a new configuration\");\n     Iterable<? extends BasicType> types = dialect.getExtraTypeOverrides();\n     for (BasicType basicType : types) {\n+      if (LOGGER.isTraceEnabled()) {\n+        LOGGER.trace(\"Registering basic type [\" + basicType.getName() + \"]\");\n+      }\n       registerTypeOverride(basicType);\n     }\n+    logProps(super.getProperties(), \"Hibernate properties after building config object\");\n   }\n \n   public Map<String, Table> getTableMap() {\n+    if (METADATA_CAPTURE.getMetadata() == null) {\n+      throw new IllegalStateException(\n+          \"Cannot access Hibernate Metadata before a SessionFactory has been created\");\n+    }\n+    Map<String, Table> tables = new HashMap<>();\n+    for (Table t : METADATA_CAPTURE.getMetadata().collectTableMappings()) {\n+      tables.put(t.getName(), t);\n+    }\n     return tables;\n   }\n \n   public List<AuxiliaryDatabaseObject> getAuxiliaryDatabaseObjects() {\n-    return auxiliaryDatabaseObjects;\n+    if (METADATA_CAPTURE.getMetadata() == null) {\n+      throw new IllegalStateException(\n+          \"Cannot access Hibernate Metadata before a SessionFactory has been created\");\n+    }\n+    List<AuxiliaryDatabaseObject> ados = new ArrayList<>();\n+    ados.addAll(METADATA_CAPTURE.getMetadata().getDatabase().getAuxiliaryDatabaseObjects());\n+    return ados;\n   }\n \n   public java.util.Collection<PersistentIdentifierGenerator> getGenerators(\n       Dialect dialect, String defaultCatalog, String defaultSchema) {\n+    if (METADATA_CAPTURE.getMetadata() == null) {\n+      throw new IllegalStateException(\n+          \"Cannot access Hibernate Metadata before a SessionFactory has been created\");\n+    }\n+\n     TreeMap<Object, PersistentIdentifierGenerator> generators =\n         new TreeMap<Object, PersistentIdentifierGenerator>();\n \n-    Iterator<PersistentClass> iter = classes.values().iterator();\n+    Iterator<PersistentClass> iter = METADATA_CAPTURE.getMetadata().getEntityBindings().iterator();\n     while (iter.hasNext()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5NzMwNw==", "bodyText": "I'm concerned this could impact start-up times and load - even if only minor. Could this be wrapped in a isTraceEnabled() check please?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520297307", "createdAt": "2020-11-10T05:31:26Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/HibernateFactory.java", "diffHunk": "@@ -57,14 +65,20 @@ public synchronized ExtendedAnnotationConfiguration getConfiguration() {\n         setContextLoader(classLoader);\n         ExtendedDialect dialect = dataSourceHolder.getDialect();\n         this.config = new ExtendedAnnotationConfiguration(dialect);\n-        config.setProperties(properties);\n         config.setProperty(Environment.CONNECTION_PROVIDER, DataSourceProvider.class.getName());\n-        properties.put(KEY_DATASOURCE, dataSourceHolder.getDataSource());\n+        properties.put(Environment.DATASOURCE, dataSourceHolder.getDataSource());\n+        config.addProperties(properties);\n         config.setProperty(Environment.DIALECT, dialect.getClass().getName());\n         config.setProperty(Environment.USE_SECOND_LEVEL_CACHE, \"false\");\n-        config.setProperty(\"javax.persistence.validation.mode\", \"DDL\");\n-        config.setNamingStrategy(new LowercaseImprovedNamingScheme());\n+        config.setProperty(Environment.JPA_VALIDATION_MODE, \"DDL\");\n+        // Due to https://hibernate.atlassian.net/browse/HHH-12665 with SpringHib5,\n+        // certain operations, like importing a institution would fail with a\n+        // `javax.persistence.TransactionRequiredException: no transaction is in progress`\n+        config.setProperty(Environment.ALLOW_UPDATE_OUTSIDE_TRANSACTION, \"true\");\n+        config.setImplicitNamingStrategy(new OeqImplicitNamingStrategy());\n+        config.setPhysicalNamingStrategy(new OeqPhysicalNamingStrategy());\n         for (Class<?> class1 : clazzes) {\n+          LOGGER.trace(\"Adding annotated class: \" + class1.getCanonicalName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5NzczMw==", "bodyText": "What @ChristianMurphy said. \ud83d\ude09", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520297733", "createdAt": "2020-11-10T05:33:10Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/dao/AbstractHibernateDao.java", "diffHunk": "@@ -42,21 +42,25 @@ protected synchronized HibernateTemplate getHibernateTemplate() {\n       lastFactory = newFactory;\n       template =\n           new HibernateTemplate(newFactory) {\n+            // Removed the method param, since it no longer exists in hib5:  boolean\n+            // enforceNewSession\n+            // TODO need to understand the impact of the removal", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMjU5NQ=="}, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5ODMxMQ==", "bodyText": "That could be for good reason, as it possibly implies we're in an unexpected state - but would depend on how oEQ is written.\nTo match your new if block I wonder if there is value having an else to log a warning. (Of it it's super prevalent, maybe at a lower log level.)", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520298311", "createdAt": "2020-11-10T05:35:17Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/dao/GenericDaoImpl.java", "diffHunk": "@@ -136,7 +136,10 @@ public void delete(T entity) {\n   @Override\n   @Transactional(propagation = Propagation.MANDATORY)\n   public void unlinkFromSession(Object obj) {\n-    getHibernateTemplate().evict(obj);\n+    // Hibernate now throws an NullPointerException if we try evicting a null object", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5OTM1NA==", "bodyText": "This could be brittle. Are we better to have a look at the cause and/or stack trace and check the class, method or file?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520299354", "createdAt": "2020-11-10T05:39:07Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/equella/service/impl/InitialiserServiceImpl.java", "diffHunk": "@@ -99,7 +102,27 @@ public void entitySimplified(Object old, Object newObj) {\n    */\n   private void evictFromSession(Set<Object> os) {\n     for (Object o : os) {\n-      getHibernateTemplate().evict(o);\n+      try {\n+        getHibernateTemplate().evict(o);\n+      } catch (IllegalArgumentException iae) {\n+        if (iae.getMessage().startsWith(\"Non-entity object instance passed to evict\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMwMDAxMg==", "bodyText": "Should raise a matching GitHub issue and reference here.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520300012", "createdAt": "2020-11-10T05:41:17Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java", "diffHunk": "@@ -36,19 +36,23 @@\n import java.util.Set;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-import org.hibernate.classic.Session;\n+import org.apache.curator.shaded.com.google.common.collect.Lists;\n+import org.hibernate.Session;\n+import org.hibernate.boot.model.relational.AuxiliaryDatabaseObject;\n import org.hibernate.dialect.Dialect;\n-import org.hibernate.engine.Mapping;\n+import org.hibernate.engine.spi.Mapping;\n import org.hibernate.id.PersistentIdentifierGenerator;\n-import org.hibernate.impl.SessionFactoryImpl;\n+import org.hibernate.internal.SessionFactoryImpl;\n import org.hibernate.jdbc.Work;\n-import org.hibernate.mapping.AuxiliaryDatabaseObject;\n import org.hibernate.mapping.Column;\n import org.hibernate.mapping.ForeignKey;\n import org.hibernate.mapping.Index;\n import org.hibernate.mapping.Table;\n import org.hibernate.mapping.UniqueKey;\n \n+// TECH_DEBT - found in SpringHib5, SessionFactoryImpl is now internal and should not be used", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMwMTYwNQ==", "bodyText": "All the additional logging has made this method now rather long and cumbersome - especially when combined with all the branching and nesting. I think now it needs to be split into it's core parts as part of this.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520301605", "createdAt": "2020-11-10T05:46:33Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java", "diffHunk": "@@ -102,38 +108,93 @@ public HibernateMigrationHelper(HibernateFactory factory, String defaultSchema)\n         Iterator<Index> subIter = table.getIndexIterator();\n         while (subIter.hasNext()) {\n           Index index = subIter.next();\n-          if (filter.includeIndex(table, index)\n-              && (!extDialect.supportsAutoIndexForUniqueColumn()\n-                  || !hasUniqueIndex(index, table))) {\n-            sqlStrings.add(index.sqlCreateString(dialect, mapping, defaultCatalog, defaultSchema));\n+          final boolean addIndex =\n+              filter.includeIndex(table, index)\n+                  && (!extDialect.supportsAutoIndexForUniqueColumn()\n+                      || !hasUniqueIndex(index, table));\n+          if (LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"Index to review: \" + index.toString());\n+            LOGGER.debug(\"Filter.includeIndex? \" + filter.includeIndex(table, index));\n+            LOGGER.debug(\n+                \"Dialect [\"\n+                    + extDialect.getClass().getName()\n+                    + \"] - supportsAutoIndexForUniqueColumn? \"\n+                    + extDialect.supportsAutoIndexForUniqueColumn());\n+            LOGGER.debug(\"HasUniqueIndex? \" + hasUniqueIndex(index, table));\n+            LOGGER.debug(\"Should index be added? \" + addIndex);\n+          }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMwMzI3MQ==", "bodyText": "Eeck! Am I reading this wrong? To me it seems sqlStrings should have ... SQL. It would seem this should have been another LOGGER.debug() followed by sqlStrings.add(sql)?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520303271", "createdAt": "2020-11-10T05:52:00Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java", "diffHunk": "@@ -576,12 +687,16 @@ private void processIndex(\n     String existingIndex = revIndexMap.get(indexCols);\n     if (existingIndex != null) {\n       if (existingIndex.equalsIgnoreCase(index.getName())) {\n+        LOGGER.debug(\"Index [\" + index.getName() + \"] exists.  returning.\");\n         return;\n       } else {\n-        sqlStrings.add(extDialect.getDropIndexSql(table.getName(), '`' + existingIndex + '`'));\n+        final String sql = extDialect.getDropIndexSql(table.getName(), '`' + existingIndex + '`');\n+        LOGGER.debug(\"Index does not exist.  Dropping index [\" + index.getName() + \"]\");\n+        sqlStrings.add(sql);\n       }\n     }\n-    sqlStrings.add(index.sqlCreateString(dialect, mapping, defaultCatalog, defaultSchema));\n+    final String sql = index.sqlCreateString(dialect, mapping, defaultCatalog, defaultSchema);\n+    sqlStrings.add(\"Existing index is null.  Creating index SQL: \" + sql);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 288}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMwMzU0MA==", "bodyText": "This combined with the TODO below makes it look like this file is still a WIP?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520303540", "createdAt": "2020-11-10T05:52:50Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateServiceImpl.java", "diffHunk": "@@ -31,8 +31,9 @@\n import javax.inject.Singleton;\n import org.hibernate.SessionFactory;\n import org.hibernate.cfg.Environment;\n-import org.springframework.orm.hibernate3.SpringSessionContext;\n-import org.springframework.orm.hibernate3.SpringTransactionFactory;\n+import org.springframework.orm.hibernate5.SpringSessionContext;\n+\n+// import org.springframework.orm.hibernate5.SpringTransactionFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMwMzgwMw==", "bodyText": "Needs a GitHub Issue and reference.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520303803", "createdAt": "2020-11-10T05:53:46Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/type/HibernateCsvType.java", "diffHunk": "@@ -29,9 +29,12 @@\n import java.util.StringTokenizer;\n import org.apache.log4j.Logger;\n import org.hibernate.HibernateException;\n+import org.hibernate.engine.spi.SharedSessionContractImplementor;\n+import org.hibernate.internal.util.SerializationHelper;\n import org.hibernate.type.SerializationException;\n import org.hibernate.usertype.UserType;\n-import org.hibernate.util.SerializationHelper;\n+\n+// TECH_DEBT - found in SpringHib5, StringHelper is now internal and should not be used directly.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMwNTE4Ng==", "bodyText": "Might as well do as proper bit of JavaDoc.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520305186", "createdAt": "2020-11-10T05:58:18Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/InPlaceUniqueDelegate.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.hibernate.dialect;\n+\n+import java.util.Iterator;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.hibernate.dialect.Dialect;\n+import org.hibernate.dialect.unique.DefaultUniqueDelegate;\n+import org.hibernate.mapping.Table;\n+import org.hibernate.mapping.UniqueKey;\n+\n+// Standard Hib 5.3+ does not include the unique constraints\n+//  in the create table logic, so we need to add our own.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMwOTU5OA==", "bodyText": "Could void the iterator and go with:\n    StringBuilder sb = new StringBuilder();\n    table.getUniqueKeyIterator()\n      .forEachRemaining(uniqueKey ->\n        sb\n          .append(\", \")\n          .append(uniqueConstraintSql(uniqueKey)));\nBe nice to take it to a stream so you could simply reduce, but.... You're starting from an Iterator. \ud83d\ude1e", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520309598", "createdAt": "2020-11-10T06:09:18Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/InPlaceUniqueDelegate.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.hibernate.dialect;\n+\n+import java.util.Iterator;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.hibernate.dialect.Dialect;\n+import org.hibernate.dialect.unique.DefaultUniqueDelegate;\n+import org.hibernate.mapping.Table;\n+import org.hibernate.mapping.UniqueKey;\n+\n+// Standard Hib 5.3+ does not include the unique constraints\n+//  in the create table logic, so we need to add our own.\n+public class InPlaceUniqueDelegate extends DefaultUniqueDelegate {\n+  private static final Log LOGGER = LogFactory.getLog(InPlaceUniqueDelegate.class);\n+\n+  public InPlaceUniqueDelegate(Dialect dialect) {\n+    super(dialect);\n+  }\n+\n+  @Override\n+  public String getTableCreationUniqueConstraintsFragment(Table table) {\n+    Iterator<UniqueKey> iter = table.getUniqueKeyIterator();\n+    StringBuilder sb = new StringBuilder();\n+    while (iter.hasNext()) {\n+      sb.append(\", \").append(uniqueConstraintSql(iter.next()));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMxMDQ1Mg==", "bodyText": "That is interesting. Wonder if it still even works, or if it should be removed. Wonder if it'd be worth raising a GitHub ticket for someone to check. \ud83e\udd37", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520310452", "createdAt": "2020-11-10T06:10:29Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/MySQL5DialectEQUELLA.java", "diffHunk": "@@ -22,9 +22,12 @@\n \n public class MySQL5DialectEQUELLA extends org.hibernate.dialect.MySQL5Dialect {\n   @Override\n-  protected void registerColumnType(int code, int capacity, String name) {\n+  protected void registerColumnType(int code, String name) {\n+    // Note, due to using SpringHib5, had to remove the capacity parameter.\n+    // Interesting this dialect is even in here, since MySQL is not one of\n+    //  the supported oEQ DBs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMxMTEwMg==", "bodyText": "Could you please add a JavaDoc description.\nI gather it is only handling Join table bits, and the rest is all for logging. If so, two things:\n\nThe JavaDoc should capture that, and I wonder if we should have a more explicit class name - on the assumption that if we needed more we add them;\nIf we only have all the other methods for logging, do we need them? Or if one wanted to see what was happening should they just turn the logging on for ImplicitNamingStrategyJpaCompliantImpl?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520311102", "createdAt": "2020-11-10T06:11:28Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqImplicitNamingStrategy.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.hibernate.dialect;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.log4j.Logger;\n+import org.hibernate.boot.model.naming.Identifier;\n+import org.hibernate.boot.model.naming.ImplicitAnyDiscriminatorColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitAnyKeyColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitBasicColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitCollectionTableNameSource;\n+import org.hibernate.boot.model.naming.ImplicitDiscriminatorColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitEntityNameSource;\n+import org.hibernate.boot.model.naming.ImplicitForeignKeyNameSource;\n+import org.hibernate.boot.model.naming.ImplicitIdentifierColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitIndexColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitIndexNameSource;\n+import org.hibernate.boot.model.naming.ImplicitJoinColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitJoinTableNameSource;\n+import org.hibernate.boot.model.naming.ImplicitMapKeyColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl;\n+import org.hibernate.boot.model.naming.ImplicitPrimaryKeyJoinColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitTenantIdColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitUniqueKeyNameSource;\n+\n+public class OeqImplicitNamingStrategy extends ImplicitNamingStrategyJpaCompliantImpl {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMxMTYzMQ==", "bodyText": "Be nice if this had a isTraceEnabled() guard. And to save excessive messages - same with all the below trace messages where strings are being dynamically constructed.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520311631", "createdAt": "2020-11-10T06:12:17Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqImplicitNamingStrategy.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.hibernate.dialect;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.log4j.Logger;\n+import org.hibernate.boot.model.naming.Identifier;\n+import org.hibernate.boot.model.naming.ImplicitAnyDiscriminatorColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitAnyKeyColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitBasicColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitCollectionTableNameSource;\n+import org.hibernate.boot.model.naming.ImplicitDiscriminatorColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitEntityNameSource;\n+import org.hibernate.boot.model.naming.ImplicitForeignKeyNameSource;\n+import org.hibernate.boot.model.naming.ImplicitIdentifierColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitIndexColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitIndexNameSource;\n+import org.hibernate.boot.model.naming.ImplicitJoinColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitJoinTableNameSource;\n+import org.hibernate.boot.model.naming.ImplicitMapKeyColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl;\n+import org.hibernate.boot.model.naming.ImplicitPrimaryKeyJoinColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitTenantIdColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitUniqueKeyNameSource;\n+\n+public class OeqImplicitNamingStrategy extends ImplicitNamingStrategyJpaCompliantImpl {\n+  private static final Logger LOGGER = Logger.getLogger(OeqImplicitNamingStrategy.class);\n+\n+  private final Map<String, String> joinTableOverrides = new HashMap<>();\n+\n+  public OeqImplicitNamingStrategy() {\n+    // The default strategies for join tables are not sufficient for all cases in oEQ.\n+    // There doesn't appear to be a pattern for the discrepancies, so this override\n+    // map contains all the special cases.\n+    joinTableOverrides.put(\"PortletRecentContrib.ItemDefinition\", \"portlet_recent_contrib_collect\");\n+    joinTableOverrides.put(\"Item.HistoryEvent\", \"item_history\");\n+    joinTableOverrides.put(\"Item.ReferencedURL\", \"item_referenced_urls\");\n+    joinTableOverrides.put(\"HierarchyTopic.Item\", \"hierarchy_topic_key_resources\");\n+    joinTableOverrides.put(\"TLEGroup.TLEGroup\", \"tlegroup_all_parents\");\n+    joinTableOverrides.put(\"HierarchyTopic.HierarchyTopic\", \"hierarchy_topic_all_parents\");\n+    joinTableOverrides.put(\"PowerSearch.ItemDefinition\", \"power_search_itemdefs\");\n+  }\n+\n+  @Override\n+  public Identifier determinePrimaryTableName(ImplicitEntityNameSource source) {\n+    LOGGER.trace(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMxNTU2Mw==", "bodyText": "Need GitHub Issue and ref.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520315563", "createdAt": "2020-11-10T06:18:37Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqPhysicalNamingStrategy.java", "diffHunk": "@@ -18,25 +18,43 @@\n \n package com.tle.hibernate.dialect;\n \n+import java.io.Serializable;\n import java.util.HashMap;\n import java.util.Map;\n-import org.hibernate.AssertionFailure;\n+import org.apache.log4j.Logger;\n+import org.hibernate.boot.model.naming.Identifier;\n+import org.hibernate.boot.model.naming.PhysicalNamingStrategy;\n import org.hibernate.cfg.ImprovedNamingStrategy;\n-import org.hibernate.util.StringHelper;\n+import org.hibernate.engine.jdbc.env.spi.JdbcEnvironment;\n+import org.hibernate.internal.util.StringHelper;\n+\n+// TECH_DEBT - found in SpringHib5, StringHelper is now internal and should not be used directly.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMxNjAwMg==", "bodyText": "If it is still limited to lowercase naming of tables, then really the name it had before should remain.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520316002", "createdAt": "2020-11-10T06:19:23Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqPhysicalNamingStrategy.java", "diffHunk": "@@ -18,25 +18,43 @@\n \n package com.tle.hibernate.dialect;\n \n+import java.io.Serializable;\n import java.util.HashMap;\n import java.util.Map;\n-import org.hibernate.AssertionFailure;\n+import org.apache.log4j.Logger;\n+import org.hibernate.boot.model.naming.Identifier;\n+import org.hibernate.boot.model.naming.PhysicalNamingStrategy;\n import org.hibernate.cfg.ImprovedNamingStrategy;\n-import org.hibernate.util.StringHelper;\n+import org.hibernate.engine.jdbc.env.spi.JdbcEnvironment;\n+import org.hibernate.internal.util.StringHelper;\n+\n+// TECH_DEBT - found in SpringHib5, StringHelper is now internal and should not be used directly.\n \n /**\n- * Extends the ImprovedNamingScheme to make sure that the resulting table name is all lowercase.\n- * This helps with Enums on Postgresql.\n- *\n- * @author Nicholas Read\n+ * Extends the PhysicalNamingStrategyStandardImpl to make sure that the resulting table name is all\n+ * lowercase. This helps with Enums on Postgresql.\n  */\n @SuppressWarnings(\"nls\")\n-public class LowercaseImprovedNamingScheme extends ImprovedNamingStrategy {\n+public class OeqPhysicalNamingStrategy extends ImprovedNamingStrategy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMxNjQyNw==", "bodyText": "isTraceEnabled() guard.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520316427", "createdAt": "2020-11-10T06:20:08Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqPhysicalNamingStrategy.java", "diffHunk": "@@ -126,4 +112,63 @@ private String postProcess(String tableName) {\n   private void registerOverride(String from, String to) {\n     overrides.put(from.toLowerCase(), to.toLowerCase());\n   }\n+\n+  @Override\n+  public Identifier toPhysicalCatalogName(Identifier name, JdbcEnvironment jdbcEnvironment) {\n+    return apply(name, Transform.OTHER);\n+  }\n+\n+  @Override\n+  public Identifier toPhysicalSchemaName(Identifier name, JdbcEnvironment jdbcEnvironment) {\n+    return apply(name, Transform.OTHER);\n+  }\n+\n+  @Override\n+  public Identifier toPhysicalTableName(Identifier name, JdbcEnvironment jdbcEnvironment) {\n+    return apply(name, Transform.TABLE);\n+  }\n+\n+  @Override\n+  public Identifier toPhysicalSequenceName(Identifier name, JdbcEnvironment jdbcEnvironment) {\n+    return apply(name, Transform.OTHER);\n+  }\n+\n+  @Override\n+  public Identifier toPhysicalColumnName(Identifier name, JdbcEnvironment jdbcEnvironment) {\n+    return apply(name, Transform.COLUMN);\n+  }\n+\n+  private Identifier apply(Identifier name, Transform transform) {\n+    if (name == null) {\n+      return null;\n+    }\n+\n+    String resultantName = null;\n+    switch (transform) {\n+      case COLUMN:\n+        {\n+          resultantName = super.propertyToColumnName(getColumnName(name.getText()));\n+          break;\n+        }\n+      case TABLE:\n+        {\n+          resultantName = postProcess(super.classToTableName(name.getText()));\n+          break;\n+        }\n+      case OTHER:\n+      default:\n+        {\n+          resultantName = name.getText();\n+          break;\n+        }\n+    }\n+    LOGGER.trace(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMxNzMxNA==", "bodyText": "As per elsewhere. I think this is the fourth or so, but if they all have the GitHub issue reference they'll be easy to fix when the time comes.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520317314", "createdAt": "2020-11-10T06:22:13Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/SQLServerDialect.java", "diffHunk": "@@ -36,16 +36,22 @@\n import java.util.List;\n import java.util.UUID;\n import java.util.regex.Matcher;\n-import org.hibernate.engine.Mapping;\n+import org.hibernate.dialect.unique.UniqueDelegate;\n+import org.hibernate.engine.spi.Mapping;\n+import org.hibernate.internal.util.StringHelper;\n import org.hibernate.mapping.Column;\n import org.hibernate.type.BasicType;\n import org.hibernate.type.CustomType;\n import org.hibernate.type.StandardBasicTypes;\n-import org.hibernate.util.StringHelper;\n+\n+// TECH_DEBT - found in SpringHib5, StringHelper is now internal and should not be used directly.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMxODg3MA==", "bodyText": "Interesting. Why didn't you keep this in the matching 5.4.x series to match core?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520318870", "createdAt": "2020-11-10T06:25:28Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Generic/org.hibernate/build.sbt", "diffHunk": "@@ -1,16 +1,15 @@\n lazy val Hibernate     = config(\"hibernate\")\n lazy val CustomCompile = config(\"compile\") extend Hibernate\n+val springVersion      = \"5.2.9.RELEASE\"\n \n libraryDependencies := Seq(\n-  \"org.hibernate\"    % \"hibernate-core\"      % \"3.6.8.Final\",\n-  \"org.hibernate\"    % \"hibernate-validator\" % \"4.2.0.Final\",\n-  \"javax.validation\" % \"validation-api\"      % \"1.0.0.GA\",\n-//  \"org.hibernate\" % \"hibernate-validator-annotation-processor\" % \"4.2.0.Final\",\n-  \"org.hibernate.javax.persistence\" % \"hibernate-jpa-2.0-api\" % \"1.0.1.Final\",\n-  \"com.thoughtworks.xstream\"        % \"xstream-hibernate\"     % \"1.4.11.1\" excludeAll (\n+  \"org.hibernate\"            % \"hibernate-core\"        % \"5.4.21.Final\",\n+  \"org.hibernate\"            % \"hibernate-validator\"   % \"6.1.5.Final\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMyMTE4Ng==", "bodyText": "You'll see in project/CommonSettings.scala that we build to target Java 8. So we should probably update the doco site, but also you're free to target 8 here. ;)", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520321186", "createdAt": "2020-11-10T06:30:05Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Security/com.tle.core.security/src/com/tle/core/security/impl/SecurityAttributeSource.java", "diffHunk": "@@ -65,8 +65,8 @@\n       ImmutableSet.of(\n           BaseEntity.class, EntityPack.class, Item.class, ItemPack.class, ActivateRequest.class);\n \n-  final Map<CacheKey, SecurityAttribute> attributeCache =\n-      CollectionFactory.createConcurrentMapIfPossible(16);\n+  // TODO - this assumes Java 5+ is required for oEQ.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwNTgzMw=="}, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMyMTUwNg==", "bodyText": "Yup, as per above I don't believe we will run with < 8.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520321506", "createdAt": "2020-11-10T06:30:49Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Security/com.tle.core.security/src/com/tle/core/security/impl/SecurityAttributeSource.java", "diffHunk": "@@ -91,9 +91,12 @@ private SecurityAttribute computeSecurityAttribute(Method method, Class<?> targe\n     // target class.\n     // If the target class is null, the method will be unchanged.\n     Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass);\n+\n     // If we are dealing with method with generic parameters, find the\n     // original method.\n-    if (JdkVersion.isAtLeastJava15()) {\n+    // TODO - consider just dropping the version conditional.  No one should be\n+    // running oEQ or the Admin Console lower than Java 8.\n+    if (SystemUtils.isJavaVersionAtLeast(5)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMyMzIzNg==", "bodyText": "Oh!! Hold on... That's a regression vs. the above.\nAnd unfortunately that was an easy one to pick up. Due to the formatting changes it's very onerous to review all these and make sure they're correct. But being your PR, could I please ask that you go back and check all these. (Not just this block, but the real big blocks above.)", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520323236", "createdAt": "2020-11-10T06:34:36Z", "author": {"login": "edalex-ian"}, "path": "Source/Server/equellaserver/build.sbt", "diffHunk": "@@ -228,13 +265,18 @@ libraryDependencies ++= Seq(\n     ExclusionRule(organization = \"ch.qos.logback\"),\n     ExclusionRule(organization = \"net.sf.saxon\")\n   ),\n-  \"xml-resolver\"           % \"xml-resolver\"              % \"1.2\",\n-  \"org.scala-sbt\"          %% \"io\"                       % \"1.4.0\",\n-  \"org.mozilla\"            % \"rhino\"                     % \"1.7.13\",\n-  \"io.lemonlabs\"           %% \"scala-uri\"                % \"1.5.1\",\n-  \"org.scala-lang.modules\" %% \"scala-parser-combinators\" % \"1.1.2\",\n-  \"io.bit3\"                % \"jsass\"                     % \"5.10.3\",\n-  \"io.github.classgraph\"   % \"classgraph\"                % \"4.8.90\"\n+  \"xml-resolver\"                  % \"xml-resolver\"              % \"1.2\",\n+  \"org.scala-sbt\"                 %% \"io\"                       % \"1.3.4\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMyNDEwNA==", "bodyText": "Heh, nice pick up. \ud83d\udc4d", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520324104", "createdAt": "2020-11-10T06:36:27Z", "author": {"login": "edalex-ian"}, "path": "Source/Tools/UpgradeInstallation/src/com/tle/upgrade/LineFileModifier.java", "diffHunk": "@@ -76,7 +76,7 @@ public void update() throws IOException {\n           outFile.write(addLine);\n           outFile.write(eol);\n           if (result != null) {\n-            result.addLogMessage(\"Added line '\" + line + \"'\");\n+            result.addLogMessage(\"Added line '\" + addLine + \"'\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMyNDU4OQ==", "bodyText": "Could be good value in adding a JavaDoc description here with a synopsis of what upgrade steps are needed/included.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520324589", "createdAt": "2020-11-10T06:37:30Z", "author": {"login": "edalex-ian"}, "path": "Source/Tools/UpgradeInstallation/src/com/tle/upgrade/upgraders/AddPostHib5UpgradeConfig.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.upgrade.upgraders;\n+\n+import com.dytech.edge.common.Constants;\n+import com.google.common.collect.Lists;\n+import com.tle.common.util.EquellaConfig;\n+import com.tle.upgrade.LineFileModifier;\n+import com.tle.upgrade.PropertyFileModifier;\n+import com.tle.upgrade.UpgradeResult;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+\n+@SuppressWarnings(\"nls\")\n+public class AddPostHib5UpgradeConfig extends AbstractUpgrader {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMyNTY5Mg==", "bodyText": "Hmmm, I wonder if you'll want to do the merges on your local machine, and then do an additional commit direct here to modify this, and then push both. \ud83e\udd14", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520325692", "createdAt": "2020-11-10T06:40:03Z", "author": {"login": "edalex-ian"}, "path": "buildspec.yml", "diffHunk": "@@ -2,7 +2,8 @@ version: 0.2\n \n env:\n   variables:\n-    KALTURA_BRANCH: master\n+    # TODO [SpringHib5] keep this in sync with the appropriate oEQ-Kaltura branch before merging into `develop`, and eventually into `master`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwNjYyMA=="}, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4a749a953bddb157b1662a5656fee17a41f1825", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/f4a749a953bddb157b1662a5656fee17a41f1825", "committedDate": "2020-11-12T01:09:14Z", "message": "springhib5:  remove java version comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9333b7a26e26b7ee0aef6c3d55d681b3c214d60", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/a9333b7a26e26b7ee0aef6c3d55d681b3c214d60", "committedDate": "2020-11-12T23:27:27Z", "message": "SpringHib5: Minor rRevisions from PR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f58ab704c8670c0d7292cd82158d62f5e2a66622", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/f58ab704c8670c0d7292cd82158d62f5e2a66622", "committedDate": "2020-11-13T00:43:42Z", "message": "Fixed a small regression and more minor revisions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10ccc802bdba1f18fcabd68c8cef422d0b229901", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/10ccc802bdba1f18fcabd68c8cef422d0b229901", "committedDate": "2020-11-13T01:20:45Z", "message": "Addressed FlushMode query"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0799310d25faffbb434075e04269759a5f58cc4", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/d0799310d25faffbb434075e04269759a5f58cc4", "committedDate": "2020-11-13T03:10:14Z", "message": "More minor revisions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e8e8215f0e873d19cb394b70b1d60be4db38850", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/9e8e8215f0e873d19cb394b70b1d60be4db38850", "committedDate": "2020-11-16T20:15:12Z", "message": "Rework long runner method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxNzc0MzIw", "url": "https://github.com/openequella/openEQUELLA/pull/2344#pullrequestreview-531774320", "createdAt": "2020-11-16T20:58:22Z", "commit": {"oid": "9e8e8215f0e873d19cb394b70b1d60be4db38850"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxOTQwMzEy", "url": "https://github.com/openequella/openEQUELLA/pull/2344#pullrequestreview-531940312", "createdAt": "2020-11-17T00:51:02Z", "commit": {"oid": "9e8e8215f0e873d19cb394b70b1d60be4db38850"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMDo1MTowMlrOH0gDNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMDo1MTowMlrOH0gDNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgxMzExMQ==", "bodyText": "Nice work @cbeach47 \ud83d\udc4d", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r524813111", "createdAt": "2020-11-17T00:51:02Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java", "diffHunk": "@@ -94,6 +92,21 @@ public HibernateMigrationHelper(HibernateFactory factory, String defaultSchema)\n     if (LOGGER.isDebugEnabled()) {\n       LOGGER.debug(\"Tables registered:\" + configuration.getTableMap().keySet());\n     }\n+\n+    sqlStrings.addAll(getCreationSqlForTables(filter));\n+\n+    sqlStrings.addAll(getCreationSqlForTableIndexAndFks(filter));\n+\n+    sqlStrings.addAll(getCreationSqlForIdGenerators(filter));\n+\n+    sqlStrings.addAll(getCreationSqlForAuxDbos(filter));\n+\n+    return sqlStrings;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e8e8215f0e873d19cb394b70b1d60be4db38850"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxOTQxNTIx", "url": "https://github.com/openequella/openEQUELLA/pull/2344#pullrequestreview-531941521", "createdAt": "2020-11-17T00:54:16Z", "commit": {"oid": "9e8e8215f0e873d19cb394b70b1d60be4db38850"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMDo1NDoxNlrOH0gHSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMTowMToxMVrOH0gQkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgxNDE1NQ==", "bodyText": "Hmmm, good to see this fixed, but.... Should the String output from index.sqlCreateString() be added to sqlStrings? As that looks like it just creates the string for logging purposes only. But ultimately this method is about processing the indices?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r524814155", "createdAt": "2020-11-17T00:54:16Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java", "diffHunk": "@@ -696,7 +728,7 @@ private void processIndex(\n       }\n     }\n     final String sql = index.sqlCreateString(dialect, mapping, defaultCatalog, defaultSchema);\n-    sqlStrings.add(\"Existing index is null.  Creating index SQL: \" + sql);\n+    LOGGER.debug(\"Existing index is null.  Creating index SQL: \" + sql);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e8e8215f0e873d19cb394b70b1d60be4db38850"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgxNjUyOA==", "bodyText": "So this then makes the assignment on line 91 redundant. Perhaps this line should merge with 91 to make\n    Method specificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod);", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r524816528", "createdAt": "2020-11-17T01:01:11Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Security/com.tle.core.security/src/com/tle/core/security/impl/SecurityAttributeSource.java", "diffHunk": "@@ -94,11 +92,7 @@ private SecurityAttribute computeSecurityAttribute(Method method, Class<?> targe\n \n     // If we are dealing with method with generic parameters, find the\n     // original method.\n-    // TODO - consider just dropping the version conditional.  No one should be\n-    // running oEQ or the Admin Console lower than Java 8.\n-    if (SystemUtils.isJavaVersionAtLeast(5)) {\n-      specificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod);\n-    }\n+    specificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e8e8215f0e873d19cb394b70b1d60be4db38850"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d6642d0279f9d9db2aeec69b545a92f90790eba", "author": {"user": {"login": "cbeach47", "name": "Chris Beach"}}, "url": "https://github.com/openequella/openEQUELLA/commit/3d6642d0279f9d9db2aeec69b545a92f90790eba", "committedDate": "2020-11-17T17:19:05Z", "message": "fix sql index regression.  minor revisions"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 383, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}