{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3OTM0NTE4", "number": 1734, "title": "Add support to the REST Client for retrieval of schemas", "bodyText": "Checklist\n\n\n the contributor license agreement is signed\n commit message follows commit guidelines\n tests are included\n screenshots are included showing significant UI changes - NA\n documentation is changed or added - NA\n\nDescription of change\nThis adds support to the REST Client to be able to simply:\n\nList available schemas (listSchemas); and\nGet a specific schema (getSchema(uuid)).\n\nIt also includes a slight improvement to the error handling to include the standard oEQ error response within ApiError.\nBut this was painful! First, what one sees in the Swagger/apidocs for the expected models returned is mostly wrong. And the same goes if you niavely look at the method signature in the code for an endpoint.\noEQ does a whole lot of customisation for its responses, so even though the method signature might say it will return a certain type, that can not be relied on - and in the case of listing schemas is mostly wrong (it says SchemaBean but you with really get either a stripped down BaseEntityBean or the more full fledged EquellaSchemaBean). Further, there are even some properties which are returned in the payload (e.g. links) which is purely synthetic and added dynamically via an internal Map - via AbstractExtendableBean.\nAll that means a few things:\n\nNot attempting to force the route of codegen based on an OpenAPI or Swagger spec was the right course - indeed even attempting to codegen off the method signatures would've been folly; and\nThe models you see in this PR have been excruciatingly hand rolled, and sometimes are loser in typing then we'd ideally like; and\nAlthough enforcing runtime types with typescript-is is hard, it does seem to be paying off and very much warranted with this module - and will pay dividends when we run the tests as part of the CI.\n\nOne last note: You'll see the NPM test script now calls Jest with --no-cache. This was due to finding inconsistent results, where sometimes IDEs (VS Code / IntelliJ) would show the tests as passing or failing, but the terminal would say the opposite. I guess that the codegen being done by typescript-is was being cached, and hence triggered the confusing results (the failures were always around the typechecking). Although this option is said to double the execution time, for now I'm willing to take the hit for sake of accuracy - it's hard enough divining the types as it is. (It still takes < 5sec to run the tests.)", "createdAt": "2020-05-14T11:31:37Z", "url": "https://github.com/openequella/openEQUELLA/pull/1734", "merged": true, "mergeCommit": {"oid": "68a4b43d527fb7b29e99285f52de6f7bb269eeba"}, "closed": true, "closedAt": "2020-05-15T01:40:22Z", "author": {"login": "edalex-ian"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchJDXIAH2gAyNDE3OTM0NTE4OjI2NTBmZWRmOGI0MGQ2MWNkZWVmM2Y0MjJhZWIzYWVlZDc3ODY1ZDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABchXYfagH2gAyNDE3OTM0NTE4OjliMWYzN2YyOTQwZGFlYzU1ODMwNDJjMzQ0Y2M0MmMzOTk0ZjBkMGQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2650fedf8b40d61cdeef3f422aeb3aeed77865d1", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/2650fedf8b40d61cdeef3f422aeb3aeed77865d1", "committedDate": "2020-05-14T08:18:24Z", "message": "oeq-ts-rest-api: Add support for getting schemas\n\nAdded --no-cache to Jest as was having spurious results - I think due to the typescript-is compilations."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6499f81f4ff395752bc6620cee2d5397b97a1f3b", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/6499f81f4ff395752bc6620cee2d5397b97a1f3b", "committedDate": "2020-05-14T10:35:48Z", "message": "oeq-ts-rest-api: Add jsDoc for getSchema"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cde893a3d18e257faa770a236e902f841c599ed7", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/cde893a3d18e257faa770a236e902f841c599ed7", "committedDate": "2020-05-14T10:42:34Z", "message": "oeq-ts-rest-api: Remove unused code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "261ff6f2e064c8d21a40bcdda313c8e5a60e10a6", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/261ff6f2e064c8d21a40bcdda313c8e5a60e10a6", "committedDate": "2020-05-14T11:08:19Z", "message": "oeq-ts-rest-api: Add test for schema not found, improve ApiError"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNzE0Nzgw", "url": "https://github.com/openequella/openEQUELLA/pull/1734#pullrequestreview-411714780", "createdAt": "2020-05-14T11:33:37Z", "commit": {"oid": "261ff6f2e064c8d21a40bcdda313c8e5a60e10a6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMTozMzozN1rOGVYG1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMTozMzozN1rOGVYG1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA2ODI0NA==", "bodyText": "These names (mostly) align with those in oEQ, and I figured they added reasonable documentation insight which seems to be the main justification for using type these days.", "url": "https://github.com/openequella/openEQUELLA/pull/1734#discussion_r425068244", "createdAt": "2020-05-14T11:33:37Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/src/Common.ts", "diffHunk": "@@ -0,0 +1,63 @@\n+import * as Security from './Security';\n+import { is } from 'typescript-is';\n+\n+export type i18nString = string;\n+\n+export type I18nStrings = Record<string, string>;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "261ff6f2e064c8d21a40bcdda313c8e5a60e10a6"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMjY0NjQ1", "url": "https://github.com/openequella/openEQUELLA/pull/1734#pullrequestreview-412264645", "createdAt": "2020-05-15T00:07:07Z", "commit": {"oid": "261ff6f2e064c8d21a40bcdda313c8e5a60e10a6"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMDowNzowN1rOGVyMMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMDowNzowN1rOGVyMMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5NTYwMw==", "bodyText": "I don't think I've seen these expect.assertions(int) calls before. Is that just to say that this block should have 2 expect calls, not including the expect.assertions call?", "url": "https://github.com/openequella/openEQUELLA/pull/1734#discussion_r425495603", "createdAt": "2020-05-15T00:07:07Z", "author": {"login": "SammyIsConfused"}, "path": "oeq-ts-rest-api/test/schema.test.ts", "diffHunk": "@@ -0,0 +1,62 @@\n+import * as OEQ from '../src';\n+import * as TC from './TestConfig';\n+import { EquellaSchema } from '../src/Schema';\n+\n+beforeAll(() => OEQ.Auth.login(TC.API_PATH, TC.USERNAME, TC.PASSWORD));\n+\n+afterAll(() => OEQ.Auth.logout(TC.API_PATH, true));\n+\n+describe('Retrieving schemas', () => {\n+  it('should be possible get schemas with no params', () => {\n+    expect.assertions(2);\n+\n+    return OEQ.Schema.listSchemas(TC.API_PATH, null).then(\n+      (pagedResult: OEQ.Common.PagedResult<OEQ.Common.BaseEntity>) => {\n+        expect(pagedResult.length).toBeGreaterThan(0);\n+        expect(pagedResult.length).toEqual(pagedResult.results.length);\n+      }\n+    );\n+  });\n+\n+  it('should be possible to get schemas customised with params', () => {\n+    expect.assertions(3);\n+    const howMany = 2;\n+\n+    return OEQ.Schema.listSchemas(TC.API_PATH, {\n+      length: howMany,\n+      full: true,\n+    }).then((pagedResult: OEQ.Common.PagedResult<OEQ.Common.BaseEntity>) => {\n+      const result = pagedResult as OEQ.Common.PagedResult<EquellaSchema>;\n+      expect(result.results.length).toBe(howMany);\n+      // confirm that `full` returned additional information\n+      expect(result.results[0].createdDate).toBeTruthy();\n+      expect(result.results[0].definition).toBeTruthy();\n+    });\n+  });\n+});\n+\n+describe('Retrieval of a specific schema', () => {\n+  it('Should be possible to retrieve a known schema', () => {\n+    expect.assertions(2);\n+    const targetUuid = '71a27a31-d6b0-4681-b124-6db410ed420b';\n+\n+    return OEQ.Schema.getSchema(TC.API_PATH, targetUuid).then(\n+      (result: EquellaSchema) => {\n+        expect(result.uuid).toBe(targetUuid);\n+        // Better make sure we got a schema\n+        expect(result.definition).toBeTruthy();\n+      }\n+    );\n+  });\n+\n+  it('Should result in a 404 when attempting to retrieve an unknown UUID', () => {\n+    expect.assertions(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "261ff6f2e064c8d21a40bcdda313c8e5a60e10a6"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMjY0MDEx", "url": "https://github.com/openequella/openEQUELLA/pull/1734#pullrequestreview-412264011", "createdAt": "2020-05-15T00:05:10Z", "commit": {"oid": "261ff6f2e064c8d21a40bcdda313c8e5a60e10a6"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMDowNToxMFrOGVyKFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMDoyNDo0NlrOGVye8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5NTA2Mw==", "bodyText": "Is there any particular reason for using null ? Can we do params?: ListSchemaParams ? If yes, then at line 93 can just put params there.", "url": "https://github.com/openequella/openEQUELLA/pull/1734#discussion_r425495063", "createdAt": "2020-05-15T00:05:10Z", "author": {"login": "PenghaiZhang"}, "path": "oeq-ts-rest-api/src/Schema.ts", "diffHunk": "@@ -0,0 +1,110 @@\n+import * as Common from './Common';\n+import { GET } from './AxiosInstance';\n+import { is } from 'typescript-is';\n+\n+export interface Citation {\n+  name: string;\n+  transformation: string;\n+}\n+\n+export interface Schema extends Common.BaseEntity {\n+  namePath: string;\n+  descriptionPath: string;\n+  /**\n+   * Typically a tree of objects representing an XML schema - so first entry is normally \"xml\".\n+   */\n+  definition: Record<string, unknown>;\n+}\n+\n+export interface EquellaSchema extends Schema {\n+  citations: Citation[];\n+  exportTransformsMap: Record<string, string>;\n+  importTransformsMap: Record<string, string>;\n+  ownerUuid: string;\n+  serializedDefinition: string;\n+}\n+\n+/**\n+ * Query params for listing of schemas. All are optional!\n+ */\n+export interface ListSchemaParams {\n+  /**\n+   * Search name and description\n+   */\n+  q?: string;\n+  /**\n+   * Privilege(s) to filter by\n+   */\n+  privilege?: string[];\n+  /**\n+   * Resumption token for paging\n+   */\n+  resumptionToken?: string;\n+  /**\n+   * Number of results\n+   */\n+  length?: number;\n+  /**\n+   * Return full entity (needs VIEW or EDIT privilege)\n+   */\n+  full?: boolean;\n+}\n+\n+/**\n+ * Helper function for a standard validator for EquellaSchema instances via typescript-is.\n+ *\n+ * @param instance An instance to validate.\n+ */\n+export const isEquellaSchema = (instance: unknown): boolean =>\n+  is<EquellaSchema>(instance);\n+\n+/**\n+ * Helper function for a standard validator for EquellaSchema instances wrapped in a PagedResult\n+ * via typescript-is.\n+ *\n+ * @param instance An instance to validate.\n+ */\n+export const isPagedEquellaSchema = (instance: unknown): boolean =>\n+  is<Common.PagedResult<EquellaSchema>>(instance);\n+\n+const SCHEMA_ROOT_PATH = '/schema';\n+\n+/**\n+ * List all available schemas which the currently authenticated user has access to. Results can\n+ * be customised based on params, and if the `full` param is specified then the return value is\n+ * actually EquellaSchema with all details.\n+ *\n+ * @param apiBasePath Base URI to the oEQ institution and API\n+ * @param params Query parameters to customize (and/or page) result\n+ */\n+export const listSchemas = (\n+  apiBasePath: string,\n+  params: ListSchemaParams | null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "261ff6f2e064c8d21a40bcdda313c8e5a60e10a6"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5NjYzMg==", "bodyText": "Just a personal preference. I might do import {BaseEntity, PagedResult, ...} from ./Common'.", "url": "https://github.com/openequella/openEQUELLA/pull/1734#discussion_r425496632", "createdAt": "2020-05-15T00:10:25Z", "author": {"login": "PenghaiZhang"}, "path": "oeq-ts-rest-api/src/Schema.ts", "diffHunk": "@@ -0,0 +1,110 @@\n+import * as Common from './Common';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "261ff6f2e064c8d21a40bcdda313c8e5a60e10a6"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5Nzg2MQ==", "bodyText": "Do we need return here?", "url": "https://github.com/openequella/openEQUELLA/pull/1734#discussion_r425497861", "createdAt": "2020-05-15T00:15:03Z", "author": {"login": "PenghaiZhang"}, "path": "oeq-ts-rest-api/test/schema.test.ts", "diffHunk": "@@ -0,0 +1,62 @@\n+import * as OEQ from '../src';\n+import * as TC from './TestConfig';\n+import { EquellaSchema } from '../src/Schema';\n+\n+beforeAll(() => OEQ.Auth.login(TC.API_PATH, TC.USERNAME, TC.PASSWORD));\n+\n+afterAll(() => OEQ.Auth.logout(TC.API_PATH, true));\n+\n+describe('Retrieving schemas', () => {\n+  it('should be possible get schemas with no params', () => {\n+    expect.assertions(2);\n+\n+    return OEQ.Schema.listSchemas(TC.API_PATH, null).then(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "261ff6f2e064c8d21a40bcdda313c8e5a60e10a6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUwMDQwMg==", "bodyText": "The validator here is isPagedEquellaSchema which ensures that type assertion is safe, or otherwise throws a mismatch error. Is my understanding right?", "url": "https://github.com/openequella/openEQUELLA/pull/1734#discussion_r425500402", "createdAt": "2020-05-15T00:24:46Z", "author": {"login": "PenghaiZhang"}, "path": "oeq-ts-rest-api/test/schema.test.ts", "diffHunk": "@@ -0,0 +1,62 @@\n+import * as OEQ from '../src';\n+import * as TC from './TestConfig';\n+import { EquellaSchema } from '../src/Schema';\n+\n+beforeAll(() => OEQ.Auth.login(TC.API_PATH, TC.USERNAME, TC.PASSWORD));\n+\n+afterAll(() => OEQ.Auth.logout(TC.API_PATH, true));\n+\n+describe('Retrieving schemas', () => {\n+  it('should be possible get schemas with no params', () => {\n+    expect.assertions(2);\n+\n+    return OEQ.Schema.listSchemas(TC.API_PATH, null).then(\n+      (pagedResult: OEQ.Common.PagedResult<OEQ.Common.BaseEntity>) => {\n+        expect(pagedResult.length).toBeGreaterThan(0);\n+        expect(pagedResult.length).toEqual(pagedResult.results.length);\n+      }\n+    );\n+  });\n+\n+  it('should be possible to get schemas customised with params', () => {\n+    expect.assertions(3);\n+    const howMany = 2;\n+\n+    return OEQ.Schema.listSchemas(TC.API_PATH, {\n+      length: howMany,\n+      full: true,\n+    }).then((pagedResult: OEQ.Common.PagedResult<OEQ.Common.BaseEntity>) => {\n+      const result = pagedResult as OEQ.Common.PagedResult<EquellaSchema>;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "261ff6f2e064c8d21a40bcdda313c8e5a60e10a6"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b1f37f2940daec5583042c344cc42c3994f0d0d", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/9b1f37f2940daec5583042c344cc42c3994f0d0d", "committedDate": "2020-05-15T01:00:09Z", "message": "oeq-ts-rest-api: Change params argument to optional on listSchemas"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 125, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}