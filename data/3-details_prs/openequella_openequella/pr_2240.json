{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0NDQ5MTMx", "number": 2240, "title": "Refactor SearchPage.test.tsx and fix DateModifiedSelector", "bodyText": "Checklist\n\n\n the contributor license agreement is signed\n commit message follows commit guidelines\n tests are included\n\nDescription of change\n\nFirst and foremost this was about refactoring SearchPage.test.tsx to use React Testing Library (RTL) rather than Enzyme. As part of doing this, there was a need to understand how to interact with MUI <Select> components. To build this understanding SearchPagination.test.tsx provided a good platform and so it was also refactored.\nFixing SearchPage.test.tsx highlighted that it was returning a false positive for selecting a quick date via the DateModifiedSelector component. This was broken recently due to the work done in #2202 . It feels this was a good example of the benefits of the move to RTL.\nWith the refactor I also brought in the user-events module, and then have attempted to use this in most places - there are more which later can be refactored to do the same.\nThere was one test I had to drop, and that was the checking for the display of the progress bar on loading results. This relied on the Enzyme way of component.update() to check before and after, but I think in RTL we more so need to do real-time and I couldn't quite unravel it. However we do have a Storybook story for it, and see it's non-critical I think this is fine.", "createdAt": "2020-08-27T05:05:35Z", "url": "https://github.com/openequella/openEQUELLA/pull/2240", "merged": true, "mergeCommit": {"oid": "388606ddc89dde7ad6393fb2bc7b31b62075339f"}, "closed": true, "closedAt": "2020-08-27T09:53:31Z", "author": {"login": "edalex-ian"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdC3tz5AH2gAyNDc0NDQ5MTMxOmI2NzA5NDdmNGU0NDBmYmMzMmQ5NWE1MTZkODk1ZTc4YjU3ZDMwNzI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdC7wR4gFqTQ3NjQ3ODM3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b670947f4e440fbc32d95a516d895e78b57d3072", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/b670947f4e440fbc32d95a516d895e78b57d3072", "committedDate": "2020-08-27T03:19:54Z", "message": "front-end: Use React Testing Library for SearchPagination.test.tsx\n\nThis is mainly a stepping stone to assist with SearchPage.test.tsx, but I needed to be able to interact properly with the search pagination controls. Hence, this also includes the big update in SearchPaginationTestHelper.ts."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c705abd8cd7e0125c314f3aeb8b0a6b35654016", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/2c705abd8cd7e0125c314f3aeb8b0a6b35654016", "committedDate": "2020-08-27T03:19:56Z", "message": "front-end: Improve accessibility and testability of SearchOrderSelect"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2727a156fe53a231b5d303c9dcb3135a554dc2f7", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/2727a156fe53a231b5d303c9dcb3135a554dc2f7", "committedDate": "2020-08-27T03:19:56Z", "message": "front-end: Fix issue with DateRangeSelector\n\nI'm concerned though, as I thought when @mrblippy did this it did not work with ESLint errors. Everything seems happy here."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "202fd83cfde95269f6f0f0754b0a9b879eb53945", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/202fd83cfde95269f6f0f0754b0a9b879eb53945", "committedDate": "2020-08-27T03:19:56Z", "message": "front-end: Refactor SearchPage.test.tsx to only use React Testing Library"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a414981ce6228256bec1f328109eded25669029d", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/a414981ce6228256bec1f328109eded25669029d", "committedDate": "2020-08-27T03:19:57Z", "message": "front-end: Minimise use of fireEvent.change()\n\nTo ensure that tests are closer to how the components are used by users in the browser."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2Mzg5Mjg2", "url": "https://github.com/openequella/openEQUELLA/pull/2240#pullrequestreview-476389286", "createdAt": "2020-08-27T05:10:17Z", "commit": {"oid": "a414981ce6228256bec1f328109eded25669029d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNToxMDoxOFrOHH-i-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNToxMDoxOFrOHH-i-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODEyNjg0MA==", "bodyText": "This is the one test I did not replicate.", "url": "https://github.com/openequella/openEQUELLA/pull/2240#discussion_r478126840", "createdAt": "2020-08-27T05:10:18Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -582,22 +561,11 @@ describe(\"<SearchPage/>\", () => {\n     });\n   });\n \n-  it(\"should display a spinner when search is in progress\", async () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a414981ce6228256bec1f328109eded25669029d"}, "originalPosition": 396}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2Mzg5NjIx", "url": "https://github.com/openequella/openEQUELLA/pull/2240#pullrequestreview-476389621", "createdAt": "2020-08-27T05:11:17Z", "commit": {"oid": "a414981ce6228256bec1f328109eded25669029d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNToxMToxN1rOHH-lag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNToxMToxN1rOHH-lag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODEyNzQ2Ng==", "bodyText": "Fix for issue from #2202", "url": "https://github.com/openequella/openEQUELLA/pull/2240#discussion_r478127466", "createdAt": "2020-08-27T05:11:17Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/components/DateRangeSelector.tsx", "diffHunk": "@@ -250,7 +250,7 @@ export const DateRangeSelector = ({\n         id=\"date_range_selector\"\n         labelId=\"date_range_selector_label\"\n         onChange={(event) =>\n-          handleQuickDateOptionChange(event.currentTarget.value as string)\n+          handleQuickDateOptionChange(event.target.value as string)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a414981ce6228256bec1f328109eded25669029d"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2MzkwMDYx", "url": "https://github.com/openequella/openEQUELLA/pull/2240#pullrequestreview-476390061", "createdAt": "2020-08-27T05:12:41Z", "commit": {"oid": "a414981ce6228256bec1f328109eded25669029d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNToxMjo0MVrOHH-o3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNToxMjo0MVrOHH-o3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODEyODM0OQ==", "bodyText": "To improve accessibility, but also testability. Follows MUI recommendations - as far as using InputLabel etc. However I put the display: none so as to ensure it looked no different to before.", "url": "https://github.com/openequella/openEQUELLA/pull/2240#discussion_r478128349", "createdAt": "2020-08-27T05:12:41Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/SearchOrderSelect.tsx", "diffHunk": "@@ -58,18 +58,28 @@ export const SearchOrderSelect = ({\n     [SortOrder.RATING, userRating],\n   ]);\n \n+  const baseId = \"sort-order-select\";\n+  const labelId = baseId + \"-label\";\n+\n   return (\n-    <Select\n-      // If sortOrder is undefined, pass an empty string to select nothing.\n-      value={value ?? \"\"}\n-      onChange={(event) => onChange(event.target.value as SortOrder)}\n-    >\n-      {Array.from(sortingOptionStrings).map(([value, text]) => (\n-        <MenuItem key={value} value={value}>\n-          {text}\n-        </MenuItem>\n-      ))}\n-    </Select>\n+    <>\n+      <InputLabel id={labelId} style={{ display: \"none\" }}>\n+        Search Order\n+      </InputLabel>\n+      <Select\n+        id={baseId}\n+        labelId={labelId}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a414981ce6228256bec1f328109eded25669029d"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NDA1MTgz", "url": "https://github.com/openequella/openEQUELLA/pull/2240#pullrequestreview-476405183", "createdAt": "2020-08-27T05:56:33Z", "commit": {"oid": "a414981ce6228256bec1f328109eded25669029d"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNTo1NjozNFrOHIAU9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNjo0MjoyM1rOHICWag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE1NjAyMw==", "bodyText": "Is there a plan for supporting MUI <Autocomplete> which kind of acts like a select ?", "url": "https://github.com/openequella/openEQUELLA/pull/2240#discussion_r478156023", "createdAt": "2020-08-27T05:56:34Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/MuiTestHelpers.ts", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import { screen } from \"@testing-library/react\";\n+import userEvent from \"@testing-library/user-event\";\n+\n+/**\n+ * Use to 'select' an option from a MUI `<Select>`. This is done through a series of\n+ * userEvent.click() calls.\n+ *\n+ * @param container The base container from which to start a search\n+ * @param selector A CSS selector to pass to `HTMLElement.querySelector()` to find the `<Select>`\n+ * @param optionText The text which represents the option you wish to select - user visible.\n+ */\n+export const selectOption = (", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a414981ce6228256bec1f328109eded25669029d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE1Nzg4Ng==", "bodyText": "Ah this is what you described yesterday.  userEvent.click consists of a few events such as keydown whereas fireEvent does not.  MUI Select might listens to keydown  rather than 'click'.", "url": "https://github.com/openequella/openEQUELLA/pull/2240#discussion_r478157886", "createdAt": "2020-08-27T05:59:25Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/MuiTestHelpers.ts", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import { screen } from \"@testing-library/react\";\n+import userEvent from \"@testing-library/user-event\";\n+\n+/**\n+ * Use to 'select' an option from a MUI `<Select>`. This is done through a series of\n+ * userEvent.click() calls.\n+ *\n+ * @param container The base container from which to start a search\n+ * @param selector A CSS selector to pass to `HTMLElement.querySelector()` to find the `<Select>`\n+ * @param optionText The text which represents the option you wish to select - user visible.\n+ */\n+export const selectOption = (\n+  container: HTMLElement,\n+  selector: string,\n+  optionText: string\n+) => {\n+  const muiSelect = container.querySelector(selector);\n+  if (!muiSelect) {\n+    throw Error(\"Unable to find MUI Select.\");\n+  }\n+\n+  // Click the <Select>\n+  userEvent.click(muiSelect);\n+  // .. then click the option in the list\n+  userEvent.click(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a414981ce6228256bec1f328109eded25669029d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE1OTc5MQ==", "bodyText": "The comment for this line seems wrong.  It's on page 2 of 3 because the second parameter is 1.", "url": "https://github.com/openequella/openEQUELLA/pull/2240#discussion_r478159791", "createdAt": "2020-08-27T06:02:12Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/components/SearchPagination.test.tsx", "diffHunk": "@@ -39,87 +41,103 @@ describe(\"<SearchPagination/>\", () => {\n     );\n \n   it(\"Goes back to the first page of results when First Page Button is clicked\", () => {\n-    //currently on page 3 of 3\n-    const lastPage = searchPagination(30, 1, 10);\n-    const { firstPageButton } = paginatorControls(lastPage);\n+    // currently on page 3 of 3\n+    const { container } = searchPagination(30, 1, 10);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a414981ce6228256bec1f328109eded25669029d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE2MzY2NA==", "bodyText": "It seems like we can do a parameterised test for above 4 test cases ? But that probably does not bring in many benefits.", "url": "https://github.com/openequella/openEQUELLA/pull/2240#discussion_r478163664", "createdAt": "2020-08-27T06:08:03Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/components/SearchPagination.test.tsx", "diffHunk": "@@ -39,87 +41,103 @@ describe(\"<SearchPagination/>\", () => {\n     );\n \n   it(\"Goes back to the first page of results when First Page Button is clicked\", () => {\n-    //currently on page 3 of 3\n-    const lastPage = searchPagination(30, 1, 10);\n-    const { firstPageButton } = paginatorControls(lastPage);\n+    // currently on page 3 of 3\n+    const { container } = searchPagination(30, 1, 10);\n+    const { getFirstPageButton } = queryPaginatorControls(container);\n \n-    firstPageButton.simulate(\"click\");\n+    userEvent.click(getFirstPageButton());\n     expect(mockOnPageChange).toHaveBeenCalledWith(0);\n   });\n \n   it(\"Goes back to the previous page of results when Previous Page Button is clicked\", () => {\n-    //currently on page 2 of 2\n-    const lastPage = searchPagination(20, 1, 10);\n-    const { previousPageButton } = paginatorControls(lastPage);\n+    // currently on page 2 of 2\n+    const { container } = searchPagination(20, 1, 10);\n+    const { getPreviousPageButton } = queryPaginatorControls(container);\n \n-    previousPageButton.simulate(\"click\");\n+    userEvent.click(getPreviousPageButton());\n     expect(mockOnPageChange).toHaveBeenCalledWith(0);\n   });\n \n   it(\"Goes to the next page of results when Next Page Button is clicked\", () => {\n-    //currently on page 1 of 2\n-    const firstPage = searchPagination(20, 0, 10);\n-    const { nextPageButton } = paginatorControls(firstPage);\n+    // currently on page 1 of 2\n+    const { container } = searchPagination(20, 0, 10);\n+    const { getNextPageButton } = queryPaginatorControls(container);\n \n-    nextPageButton.simulate(\"click\");\n+    userEvent.click(getNextPageButton());\n     expect(mockOnPageChange).toHaveBeenCalledWith(1);\n   });\n \n   it(\"Goes to the last page of results when Last Page Button is clicked\", () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a414981ce6228256bec1f328109eded25669029d"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE2OTk2NQ==", "bodyText": "Is there any reason why you want to have another interface extending the base one rather than put below getXXX in the base interface ?  And They have the same comment. Should they have different comments to let people know the get ones throw exceptions and the query ones don't ?", "url": "https://github.com/openequella/openEQUELLA/pull/2240#discussion_r478169965", "createdAt": "2020-08-27T06:16:46Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/components/SearchPaginationTestHelper.ts", "diffHunk": "@@ -15,29 +15,131 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-import { ReactWrapper } from \"enzyme\";\n-\n-interface PaginatorControls {\n-  firstPageButton: ReactWrapper;\n-  previousPageButton: ReactWrapper;\n-  nextPageButton: ReactWrapper;\n-  lastPageButton: ReactWrapper;\n-  pageCount: ReactWrapper;\n+import { screen } from \"@testing-library/react\";\n+\n+const createGetQuery = (\n+  elementName: string,\n+  fn: () => HTMLElement | null\n+): (() => HTMLElement) => () => {\n+  const e = fn();\n+  if (!e) {\n+    throw new Error(`Failed to get element: ${elementName}`);\n+  }\n+\n+  return e;\n+};\n+\n+interface PaginatorBaseQueries {\n+  /**\n+   * The text caption for the control (e.g. \"Items per page\"), which then also has an #id which\n+   * is the aria-labelledby to link to the pop up list for the MUI Select.\n+   */\n+  queryCaption: () => HTMLElement | null;\n+  queryFirstPageButton: () => HTMLElement | null;\n+  queryItemsPerPageOption: (pageItems: number) => HTMLElement | null;\n+  queryItemsPerPageSelect: () => HTMLElement | null;\n+  queryLastPageButton: () => HTMLElement | null;\n+  queryNextPageButton: () => HTMLElement | null;\n+  queryPageCount: () => HTMLElement | null;\n+  queryPreviousPageButton: () => HTMLElement | null;\n }\n \n-/**\n- * Provides a helper function for east access to pagination controls\n- * Takes a ReactWrapper, representing SearchPagination component\n- * @return {ReactWrapper} Wrappers for navigating to First, Previous, Next, and Last Page, and PageCount of pagination controls\n- */\n-export const paginatorControls = (\n-  component: ReactWrapper\n-): PaginatorControls => {\n+interface PaginatorQueries extends PaginatorBaseQueries {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a414981ce6228256bec1f328109eded25669029d"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE3NjUwNw==", "bodyText": "I actually feel  without display: none the UI looks better for me. This is because when the default sorting has not been configured, it is undefined. As a result, this control shows nothing. But if a lable is showed there, it helps me know this control is about sorting", "url": "https://github.com/openequella/openEQUELLA/pull/2240#discussion_r478176507", "createdAt": "2020-08-27T06:25:49Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/SearchOrderSelect.tsx", "diffHunk": "@@ -58,18 +58,28 @@ export const SearchOrderSelect = ({\n     [SortOrder.RATING, userRating],\n   ]);\n \n+  const baseId = \"sort-order-select\";\n+  const labelId = baseId + \"-label\";\n+\n   return (\n-    <Select\n-      // If sortOrder is undefined, pass an empty string to select nothing.\n-      value={value ?? \"\"}\n-      onChange={(event) => onChange(event.target.value as SortOrder)}\n-    >\n-      {Array.from(sortingOptionStrings).map(([value, text]) => (\n-        <MenuItem key={value} value={value}>\n-          {text}\n-        </MenuItem>\n-      ))}\n-    </Select>\n+    <>\n+      <InputLabel id={labelId} style={{ display: \"none\" }}>\n+        Search Order\n+      </InputLabel>\n+      <Select\n+        id={baseId}\n+        labelId={labelId}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODEyODM0OQ=="}, "originalCommit": {"oid": "a414981ce6228256bec1f328109eded25669029d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE4Mzk1NQ==", "bodyText": "Have you tried calling advanceTimersByTime(1000) after this await ?", "url": "https://github.com/openequella/openEQUELLA/pull/2240#discussion_r478183955", "createdAt": "2020-08-27T06:35:31Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -143,13 +141,48 @@ const queryRefineSearchComponent = (\n const getRefineSearchComponent = (\n   container: Element,\n   componentSuffix: string\n-) => {\n+): HTMLElement => {\n   const e = queryRefineSearchComponent(container, componentSuffix);\n   if (!e) {\n     throw new Error(`Failed to find ${componentSuffix}`);\n   }\n \n-  return e as HTMLElement;\n+  return e;\n+};\n+\n+const getQueryBar = (container: Element): HTMLElement => {\n+  const queryBar = container.querySelector<HTMLElement>(\"#searchBar\");\n+  if (!queryBar) {\n+    throw new Error(\"Failed to locate the search bar, unable to continue.\");\n+  }\n+\n+  return queryBar;\n+};\n+\n+const changeQuery = async (\n+  container: Element,\n+  query: string,\n+  rawMode?: boolean\n+) => {\n+  // We will change the debounced query so use fake timer here.\n+  jest.useFakeTimers(\"modern\");\n+  // Change search options now.\n+  if (rawMode) {\n+    const rawModeSwitch = container.querySelector(\"#rawSearch\");\n+    if (!rawModeSwitch) {\n+      throw new Error(\"Failed to find the raw mode switch!\");\n+    }\n+    userEvent.click(rawModeSwitch);\n+  }\n+  const _queryBar = () => getQueryBar(container);\n+  // Would be nice to replace this with a userEvent.type like:\n+  //   await act(async () => await userEvent.type(_queryBar(), query, {delay: 1}));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a414981ce6228256bec1f328109eded25669029d"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE4OTE2Mg==", "bodyText": "I was very struggling to do this with Enzyme!  So userEvent.click works for MUI <Autocomplete />!!", "url": "https://github.com/openequella/openEQUELLA/pull/2240#discussion_r478189162", "createdAt": "2020-08-27T06:42:23Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -611,44 +579,31 @@ describe(\"<SearchPage/>\", () => {\n     expect(SearchModule.searchItems).toHaveBeenCalledTimes(3);\n   });\n \n-  it(\"should filter search results by collections\", async () => {\n-    const selectedCollections = [\n-      {\n-        uuid: \"8e3caf16-f3cb-b3dd-d403-e5eb8d545fff\",\n-        name: \"DRM Test Collection\",\n-      },\n-      {\n-        uuid: \"8e3caf16-f3cb-b3dd-d403-e5eb8d545ffe\",\n-        name: \"Generic Testing Collection\",\n-      },\n-    ];\n-    component.update();\n-    const collectionSelector = component.find(CollectionSelector);\n-    const handleCollectionChange: (\n-      collections: CollectionsModule.Collection[]\n-    ) => void = collectionSelector.prop(\"onSelectionChange\");\n-    await awaitAct(() => handleCollectionChange(selectedCollections));\n-    expect(SearchModule.searchItems).toHaveBeenCalledTimes(2);\n-    expect(SearchModule.searchItems).toHaveBeenCalledWith({\n+  it(\"filters by date range derived from 'Quick Options'\", async () => {\n+    selectOption(page.container, \"#date_range_selector\", \"Today\");\n+    await waitForSearch();\n+\n+    expect(SearchModule.searchItems).toHaveBeenLastCalledWith({\n       ...defaultSearchPageOptions,\n-      collections: selectedCollections,\n+      lastModifiedDateRange: {\n+        start: new Date(), // i.e. Today as per the quick option\n+        end: undefined,\n+      },\n     });\n   });\n \n-  it(\"should support selecting a date range through Quick options\", async () => {\n-    component.update();\n-    const quickOptions = component.find(\"#date_range_selector input\");\n-    await awaitAct(() =>\n-      quickOptions.simulate(\"change\", { target: { value: \"Today\" } })\n+  it(\"filters by selected collection\", async () => {\n+    const targetCollection: Collection = getCollectionMap[0];\n+    userEvent.click(\n+      page.getByLabelText(languageStrings.searchpage.collectionSelector.title)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a414981ce6228256bec1f328109eded25669029d"}, "originalPosition": 464}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19f2c6baea50b655769129b0e574800a2f04220f", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/19f2c6baea50b655769129b0e574800a2f04220f", "committedDate": "2020-08-27T07:30:50Z", "message": "front-end: Correct comments in SearchPagination.test.tsx"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eec6883df6c8da4bd902c6b44f632a3428f43342", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/eec6883df6c8da4bd902c6b44f632a3428f43342", "committedDate": "2020-08-27T07:37:14Z", "message": "front-end: Further flesh out comments for PaginatorBaseQueries and PaginatorQueries"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NDc4Mzc0", "url": "https://github.com/openequella/openEQUELLA/pull/2240#pullrequestreview-476478374", "createdAt": "2020-08-27T08:02:13Z", "commit": {"oid": "eec6883df6c8da4bd902c6b44f632a3428f43342"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 423, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}