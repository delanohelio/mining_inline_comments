{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3MTQyNjA0", "number": 1728, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzo1MjowM1rOD780XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMDowNTowNVrOD8RyxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTg5MDIwOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsModule.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzo1MjowM1rOGUlnOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzo1MjowM1rOGUlnOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0MDk1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Remove the boolean flags and then save to the Server.\n          \n          \n            \n             * Remove the flags and then save to the server.", "url": "https://github.com/openequella/openEQUELLA/pull/1728#discussion_r424240955", "createdAt": "2020-05-13T07:52:03Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsModule.ts", "diffHunk": "@@ -60,12 +65,19 @@ export const getFacetsFromServer = (): Promise<Facet[]> =>\n /**\n  * Remove the boolean flags and then save to the Server.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "438e4d8fd5a112737f9980910272eca0d5895bb5"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTg5Nzg4OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/mainui/FacetedSearchSettingsPage.test.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzo1Mzo1NFrOGUlr2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzo1Mzo1NFrOGUlr2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0MjEzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                describe(\"when the Save button is enabled and click it\", () => {\n          \n          \n            \n                describe(\"when the Save button is enabled and clicked\", () => {", "url": "https://github.com/openequella/openEQUELLA/pull/1728#discussion_r424242139", "createdAt": "2020-05-13T07:53:54Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/mainui/FacetedSearchSettingsPage.test.tsx", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import { mount, ReactWrapper } from \"enzyme\";\n+import FacetedSearchSettingsPage from \"../../../tsrc/settings/Search/facetedsearch/FacetedSearchSettingsPage\";\n+import * as FacetedSearchSettingsModule from \"../../../tsrc/settings/Search/facetedsearch/FacetedSearchSettingsModule\";\n+import { NavigationGuardProps } from \"../../../tsrc/components/NavigationGuard\";\n+import { act } from \"react-dom/test-utils\";\n+import FacetDialog from \"../../../tsrc/settings/Search/facetedsearch/FacetDialog\";\n+import MessageInfo from \"../../../tsrc/components/MessageInfo\";\n+import MessageDialog from \"../../../tsrc/components/MessageDialog\";\n+\n+const mockFacets: FacetedSearchSettingsModule.Facet[] = [\n+  {\n+    id: 1,\n+    name: \"mocked facet1\",\n+    schemaNode: \"item/name\",\n+    maxResults: 1,\n+    orderIndex: 1,\n+  },\n+  {\n+    id: 2,\n+    name: \"mocked facet3\",\n+    schemaNode: \"item/age\",\n+    maxResults: 2,\n+    orderIndex: 2,\n+  },\n+];\n+\n+// This test does not need NavigationGuard which is part of the Setting page template.\n+jest.mock(\"../../../tsrc/components/NavigationGuard\", () => ({\n+  NavigationGuard: (props: NavigationGuardProps) => {\n+    return <div />;\n+  },\n+}));\n+\n+const mockGetFacetsFromServer = jest.spyOn(\n+  FacetedSearchSettingsModule,\n+  \"getFacetsFromServer\"\n+);\n+const mockBatchDelete = jest.spyOn(FacetedSearchSettingsModule, \"batchDelete\");\n+const mockBatchUpdateOrAdd = jest.spyOn(\n+  FacetedSearchSettingsModule,\n+  \"batchUpdateOrAdd\"\n+);\n+\n+describe(\"<FacetedSearchSettingsPage />\", () => {\n+  let component: ReactWrapper;\n+  beforeEach(async () => {\n+    const getFacetsPromise = mockGetFacetsFromServer.mockImplementation(() =>\n+      Promise.resolve(mockFacets)\n+    );\n+    component = mount(<FacetedSearchSettingsPage updateTemplate={jest.fn()} />);\n+    await act(async () => {\n+      await getFacetsPromise;\n+    });\n+    component.update();\n+  });\n+  afterEach(() => jest.clearAllMocks());\n+\n+  describe(\"when the page is mounted\", () => {\n+    const getListItems = () => component.find(\".MuiListItem-container\");\n+    const getSaveButton = () => component.find(\"#_saveButton\").hostNodes();\n+    const deleteFacet = () => {\n+      const deleteButton = getListItems().at(0).find(\"button\").at(1);\n+      deleteButton.simulate(\"click\");\n+    };\n+    const updateFacet = (addOrEdit: boolean) => {\n+      const fields = component.find(\"input\");\n+      fields.at(0).simulate(\"change\", {\n+        target: { value: addOrEdit ? \"new facet\" : \"updated facet\" },\n+      });\n+      fields.at(1).simulate(\"change\", { target: { value: \"item/name/first\" } });\n+      const okButton = component\n+        .findWhere(\n+          (node) =>\n+            node.text() === (addOrEdit ? \"Add\" : \"OK\") &&\n+            node.type() === \"button\"\n+        )\n+        .hostNodes();\n+      okButton.simulate(\"click\");\n+    };\n+    const openDialog = (addOrEdit: boolean) => {\n+      let button: ReactWrapper;\n+      if (addOrEdit) {\n+        button = component.find(\".MuiCardActions-root button\");\n+      } else {\n+        button = getListItems().at(0).find(\"button\").at(0);\n+      }\n+      button.simulate(\"click\");\n+    };\n+\n+    it(\"should fetch facets\", () => {\n+      expect(\n+        FacetedSearchSettingsModule.getFacetsFromServer\n+      ).toHaveBeenCalledTimes(1);\n+    });\n+\n+    it(\"should display a list of facets\", () => {\n+      expect(getListItems()).toHaveLength(2);\n+    });\n+\n+    describe(\"when click an Edit button\", () => {\n+      it(\"should show a dialog\", async () => {\n+        openDialog(false);\n+        expect(component.find(FacetDialog).prop(\"open\")).toBeTruthy();\n+      });\n+    });\n+\n+    describe(\"when click the Add button\", () => {\n+      it(\"should show a dialog\", async () => {\n+        openDialog(true);\n+        expect(component.find(FacetDialog).prop(\"open\")).toBeTruthy();\n+      });\n+    });\n+\n+    describe(\"when click a delete button\", () => {\n+      it(\"should remove a facet from the list and enable the Save button\", () => {\n+        deleteFacet();\n+        const items = getListItems();\n+        expect(items).toHaveLength(1);\n+        expect(getSaveButton().prop(\"disabled\")).toBeFalsy();\n+      });\n+    });\n+\n+    describe(\"when edit a facet through the dialog\", () => {\n+      it(\"should show the updated facet and enable the Save button\", () => {\n+        openDialog(false);\n+        updateFacet(false);\n+        const items = getListItems();\n+        expect(items).toHaveLength(2);\n+        expect(items.at(0).text()).toContain(\"updated facet\");\n+        expect(getSaveButton().prop(\"disabled\")).toBeFalsy();\n+      });\n+    });\n+\n+    describe(\"when add a new facet through the dialog\", () => {\n+      it(\"should add the facet to the list and enable the Save button\", () => {\n+        openDialog(true);\n+        updateFacet(true);\n+        const items = getListItems();\n+        expect(items).toHaveLength(3);\n+        expect(items.at(2).text()).toContain(\"new facet\");\n+        expect(getSaveButton().prop(\"disabled\")).toBeFalsy();\n+      });\n+    });\n+\n+    describe(\"when the Save button is enabled and click it\", () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "438e4d8fd5a112737f9980910272eca0d5895bb5"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTkwMDAyOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/mainui/FacetedSearchSettingsPage.test.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzo1NDoyOVrOGUltIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzo1NDoyOVrOGUltIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0MjQ2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                describe(\"when add a new facet through the dialog\", () => {\n          \n          \n            \n                describe(\"when a new facet is added through the dialog\", () => {", "url": "https://github.com/openequella/openEQUELLA/pull/1728#discussion_r424242467", "createdAt": "2020-05-13T07:54:29Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/mainui/FacetedSearchSettingsPage.test.tsx", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import { mount, ReactWrapper } from \"enzyme\";\n+import FacetedSearchSettingsPage from \"../../../tsrc/settings/Search/facetedsearch/FacetedSearchSettingsPage\";\n+import * as FacetedSearchSettingsModule from \"../../../tsrc/settings/Search/facetedsearch/FacetedSearchSettingsModule\";\n+import { NavigationGuardProps } from \"../../../tsrc/components/NavigationGuard\";\n+import { act } from \"react-dom/test-utils\";\n+import FacetDialog from \"../../../tsrc/settings/Search/facetedsearch/FacetDialog\";\n+import MessageInfo from \"../../../tsrc/components/MessageInfo\";\n+import MessageDialog from \"../../../tsrc/components/MessageDialog\";\n+\n+const mockFacets: FacetedSearchSettingsModule.Facet[] = [\n+  {\n+    id: 1,\n+    name: \"mocked facet1\",\n+    schemaNode: \"item/name\",\n+    maxResults: 1,\n+    orderIndex: 1,\n+  },\n+  {\n+    id: 2,\n+    name: \"mocked facet3\",\n+    schemaNode: \"item/age\",\n+    maxResults: 2,\n+    orderIndex: 2,\n+  },\n+];\n+\n+// This test does not need NavigationGuard which is part of the Setting page template.\n+jest.mock(\"../../../tsrc/components/NavigationGuard\", () => ({\n+  NavigationGuard: (props: NavigationGuardProps) => {\n+    return <div />;\n+  },\n+}));\n+\n+const mockGetFacetsFromServer = jest.spyOn(\n+  FacetedSearchSettingsModule,\n+  \"getFacetsFromServer\"\n+);\n+const mockBatchDelete = jest.spyOn(FacetedSearchSettingsModule, \"batchDelete\");\n+const mockBatchUpdateOrAdd = jest.spyOn(\n+  FacetedSearchSettingsModule,\n+  \"batchUpdateOrAdd\"\n+);\n+\n+describe(\"<FacetedSearchSettingsPage />\", () => {\n+  let component: ReactWrapper;\n+  beforeEach(async () => {\n+    const getFacetsPromise = mockGetFacetsFromServer.mockImplementation(() =>\n+      Promise.resolve(mockFacets)\n+    );\n+    component = mount(<FacetedSearchSettingsPage updateTemplate={jest.fn()} />);\n+    await act(async () => {\n+      await getFacetsPromise;\n+    });\n+    component.update();\n+  });\n+  afterEach(() => jest.clearAllMocks());\n+\n+  describe(\"when the page is mounted\", () => {\n+    const getListItems = () => component.find(\".MuiListItem-container\");\n+    const getSaveButton = () => component.find(\"#_saveButton\").hostNodes();\n+    const deleteFacet = () => {\n+      const deleteButton = getListItems().at(0).find(\"button\").at(1);\n+      deleteButton.simulate(\"click\");\n+    };\n+    const updateFacet = (addOrEdit: boolean) => {\n+      const fields = component.find(\"input\");\n+      fields.at(0).simulate(\"change\", {\n+        target: { value: addOrEdit ? \"new facet\" : \"updated facet\" },\n+      });\n+      fields.at(1).simulate(\"change\", { target: { value: \"item/name/first\" } });\n+      const okButton = component\n+        .findWhere(\n+          (node) =>\n+            node.text() === (addOrEdit ? \"Add\" : \"OK\") &&\n+            node.type() === \"button\"\n+        )\n+        .hostNodes();\n+      okButton.simulate(\"click\");\n+    };\n+    const openDialog = (addOrEdit: boolean) => {\n+      let button: ReactWrapper;\n+      if (addOrEdit) {\n+        button = component.find(\".MuiCardActions-root button\");\n+      } else {\n+        button = getListItems().at(0).find(\"button\").at(0);\n+      }\n+      button.simulate(\"click\");\n+    };\n+\n+    it(\"should fetch facets\", () => {\n+      expect(\n+        FacetedSearchSettingsModule.getFacetsFromServer\n+      ).toHaveBeenCalledTimes(1);\n+    });\n+\n+    it(\"should display a list of facets\", () => {\n+      expect(getListItems()).toHaveLength(2);\n+    });\n+\n+    describe(\"when click an Edit button\", () => {\n+      it(\"should show a dialog\", async () => {\n+        openDialog(false);\n+        expect(component.find(FacetDialog).prop(\"open\")).toBeTruthy();\n+      });\n+    });\n+\n+    describe(\"when click the Add button\", () => {\n+      it(\"should show a dialog\", async () => {\n+        openDialog(true);\n+        expect(component.find(FacetDialog).prop(\"open\")).toBeTruthy();\n+      });\n+    });\n+\n+    describe(\"when click a delete button\", () => {\n+      it(\"should remove a facet from the list and enable the Save button\", () => {\n+        deleteFacet();\n+        const items = getListItems();\n+        expect(items).toHaveLength(1);\n+        expect(getSaveButton().prop(\"disabled\")).toBeFalsy();\n+      });\n+    });\n+\n+    describe(\"when edit a facet through the dialog\", () => {\n+      it(\"should show the updated facet and enable the Save button\", () => {\n+        openDialog(false);\n+        updateFacet(false);\n+        const items = getListItems();\n+        expect(items).toHaveLength(2);\n+        expect(items.at(0).text()).toContain(\"updated facet\");\n+        expect(getSaveButton().prop(\"disabled\")).toBeFalsy();\n+      });\n+    });\n+\n+    describe(\"when add a new facet through the dialog\", () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "438e4d8fd5a112737f9980910272eca0d5895bb5"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTkwMjcyOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/mainui/FacetedSearchSettingsPage.test.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzo1NToxMFrOGUluvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzo1NToxMFrOGUluvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0Mjg3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                describe(\"when edit a facet through the dialog\", () => {\n          \n          \n            \n                describe(\"when a facet is edited through the dialog\", () => {", "url": "https://github.com/openequella/openEQUELLA/pull/1728#discussion_r424242879", "createdAt": "2020-05-13T07:55:10Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/mainui/FacetedSearchSettingsPage.test.tsx", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import { mount, ReactWrapper } from \"enzyme\";\n+import FacetedSearchSettingsPage from \"../../../tsrc/settings/Search/facetedsearch/FacetedSearchSettingsPage\";\n+import * as FacetedSearchSettingsModule from \"../../../tsrc/settings/Search/facetedsearch/FacetedSearchSettingsModule\";\n+import { NavigationGuardProps } from \"../../../tsrc/components/NavigationGuard\";\n+import { act } from \"react-dom/test-utils\";\n+import FacetDialog from \"../../../tsrc/settings/Search/facetedsearch/FacetDialog\";\n+import MessageInfo from \"../../../tsrc/components/MessageInfo\";\n+import MessageDialog from \"../../../tsrc/components/MessageDialog\";\n+\n+const mockFacets: FacetedSearchSettingsModule.Facet[] = [\n+  {\n+    id: 1,\n+    name: \"mocked facet1\",\n+    schemaNode: \"item/name\",\n+    maxResults: 1,\n+    orderIndex: 1,\n+  },\n+  {\n+    id: 2,\n+    name: \"mocked facet3\",\n+    schemaNode: \"item/age\",\n+    maxResults: 2,\n+    orderIndex: 2,\n+  },\n+];\n+\n+// This test does not need NavigationGuard which is part of the Setting page template.\n+jest.mock(\"../../../tsrc/components/NavigationGuard\", () => ({\n+  NavigationGuard: (props: NavigationGuardProps) => {\n+    return <div />;\n+  },\n+}));\n+\n+const mockGetFacetsFromServer = jest.spyOn(\n+  FacetedSearchSettingsModule,\n+  \"getFacetsFromServer\"\n+);\n+const mockBatchDelete = jest.spyOn(FacetedSearchSettingsModule, \"batchDelete\");\n+const mockBatchUpdateOrAdd = jest.spyOn(\n+  FacetedSearchSettingsModule,\n+  \"batchUpdateOrAdd\"\n+);\n+\n+describe(\"<FacetedSearchSettingsPage />\", () => {\n+  let component: ReactWrapper;\n+  beforeEach(async () => {\n+    const getFacetsPromise = mockGetFacetsFromServer.mockImplementation(() =>\n+      Promise.resolve(mockFacets)\n+    );\n+    component = mount(<FacetedSearchSettingsPage updateTemplate={jest.fn()} />);\n+    await act(async () => {\n+      await getFacetsPromise;\n+    });\n+    component.update();\n+  });\n+  afterEach(() => jest.clearAllMocks());\n+\n+  describe(\"when the page is mounted\", () => {\n+    const getListItems = () => component.find(\".MuiListItem-container\");\n+    const getSaveButton = () => component.find(\"#_saveButton\").hostNodes();\n+    const deleteFacet = () => {\n+      const deleteButton = getListItems().at(0).find(\"button\").at(1);\n+      deleteButton.simulate(\"click\");\n+    };\n+    const updateFacet = (addOrEdit: boolean) => {\n+      const fields = component.find(\"input\");\n+      fields.at(0).simulate(\"change\", {\n+        target: { value: addOrEdit ? \"new facet\" : \"updated facet\" },\n+      });\n+      fields.at(1).simulate(\"change\", { target: { value: \"item/name/first\" } });\n+      const okButton = component\n+        .findWhere(\n+          (node) =>\n+            node.text() === (addOrEdit ? \"Add\" : \"OK\") &&\n+            node.type() === \"button\"\n+        )\n+        .hostNodes();\n+      okButton.simulate(\"click\");\n+    };\n+    const openDialog = (addOrEdit: boolean) => {\n+      let button: ReactWrapper;\n+      if (addOrEdit) {\n+        button = component.find(\".MuiCardActions-root button\");\n+      } else {\n+        button = getListItems().at(0).find(\"button\").at(0);\n+      }\n+      button.simulate(\"click\");\n+    };\n+\n+    it(\"should fetch facets\", () => {\n+      expect(\n+        FacetedSearchSettingsModule.getFacetsFromServer\n+      ).toHaveBeenCalledTimes(1);\n+    });\n+\n+    it(\"should display a list of facets\", () => {\n+      expect(getListItems()).toHaveLength(2);\n+    });\n+\n+    describe(\"when click an Edit button\", () => {\n+      it(\"should show a dialog\", async () => {\n+        openDialog(false);\n+        expect(component.find(FacetDialog).prop(\"open\")).toBeTruthy();\n+      });\n+    });\n+\n+    describe(\"when click the Add button\", () => {\n+      it(\"should show a dialog\", async () => {\n+        openDialog(true);\n+        expect(component.find(FacetDialog).prop(\"open\")).toBeTruthy();\n+      });\n+    });\n+\n+    describe(\"when click a delete button\", () => {\n+      it(\"should remove a facet from the list and enable the Save button\", () => {\n+        deleteFacet();\n+        const items = getListItems();\n+        expect(items).toHaveLength(1);\n+        expect(getSaveButton().prop(\"disabled\")).toBeFalsy();\n+      });\n+    });\n+\n+    describe(\"when edit a facet through the dialog\", () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "438e4d8fd5a112737f9980910272eca0d5895bb5"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTkwNDE1OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/mainui/FacetedSearchSettingsPage.test.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzo1NTozNFrOGUlvsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzo1NTozNFrOGUlvsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0MzEyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                describe(\"when click a delete button\", () => {\n          \n          \n            \n                describe(\"when a delete button is clicked\", () => {", "url": "https://github.com/openequella/openEQUELLA/pull/1728#discussion_r424243121", "createdAt": "2020-05-13T07:55:34Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/mainui/FacetedSearchSettingsPage.test.tsx", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import { mount, ReactWrapper } from \"enzyme\";\n+import FacetedSearchSettingsPage from \"../../../tsrc/settings/Search/facetedsearch/FacetedSearchSettingsPage\";\n+import * as FacetedSearchSettingsModule from \"../../../tsrc/settings/Search/facetedsearch/FacetedSearchSettingsModule\";\n+import { NavigationGuardProps } from \"../../../tsrc/components/NavigationGuard\";\n+import { act } from \"react-dom/test-utils\";\n+import FacetDialog from \"../../../tsrc/settings/Search/facetedsearch/FacetDialog\";\n+import MessageInfo from \"../../../tsrc/components/MessageInfo\";\n+import MessageDialog from \"../../../tsrc/components/MessageDialog\";\n+\n+const mockFacets: FacetedSearchSettingsModule.Facet[] = [\n+  {\n+    id: 1,\n+    name: \"mocked facet1\",\n+    schemaNode: \"item/name\",\n+    maxResults: 1,\n+    orderIndex: 1,\n+  },\n+  {\n+    id: 2,\n+    name: \"mocked facet3\",\n+    schemaNode: \"item/age\",\n+    maxResults: 2,\n+    orderIndex: 2,\n+  },\n+];\n+\n+// This test does not need NavigationGuard which is part of the Setting page template.\n+jest.mock(\"../../../tsrc/components/NavigationGuard\", () => ({\n+  NavigationGuard: (props: NavigationGuardProps) => {\n+    return <div />;\n+  },\n+}));\n+\n+const mockGetFacetsFromServer = jest.spyOn(\n+  FacetedSearchSettingsModule,\n+  \"getFacetsFromServer\"\n+);\n+const mockBatchDelete = jest.spyOn(FacetedSearchSettingsModule, \"batchDelete\");\n+const mockBatchUpdateOrAdd = jest.spyOn(\n+  FacetedSearchSettingsModule,\n+  \"batchUpdateOrAdd\"\n+);\n+\n+describe(\"<FacetedSearchSettingsPage />\", () => {\n+  let component: ReactWrapper;\n+  beforeEach(async () => {\n+    const getFacetsPromise = mockGetFacetsFromServer.mockImplementation(() =>\n+      Promise.resolve(mockFacets)\n+    );\n+    component = mount(<FacetedSearchSettingsPage updateTemplate={jest.fn()} />);\n+    await act(async () => {\n+      await getFacetsPromise;\n+    });\n+    component.update();\n+  });\n+  afterEach(() => jest.clearAllMocks());\n+\n+  describe(\"when the page is mounted\", () => {\n+    const getListItems = () => component.find(\".MuiListItem-container\");\n+    const getSaveButton = () => component.find(\"#_saveButton\").hostNodes();\n+    const deleteFacet = () => {\n+      const deleteButton = getListItems().at(0).find(\"button\").at(1);\n+      deleteButton.simulate(\"click\");\n+    };\n+    const updateFacet = (addOrEdit: boolean) => {\n+      const fields = component.find(\"input\");\n+      fields.at(0).simulate(\"change\", {\n+        target: { value: addOrEdit ? \"new facet\" : \"updated facet\" },\n+      });\n+      fields.at(1).simulate(\"change\", { target: { value: \"item/name/first\" } });\n+      const okButton = component\n+        .findWhere(\n+          (node) =>\n+            node.text() === (addOrEdit ? \"Add\" : \"OK\") &&\n+            node.type() === \"button\"\n+        )\n+        .hostNodes();\n+      okButton.simulate(\"click\");\n+    };\n+    const openDialog = (addOrEdit: boolean) => {\n+      let button: ReactWrapper;\n+      if (addOrEdit) {\n+        button = component.find(\".MuiCardActions-root button\");\n+      } else {\n+        button = getListItems().at(0).find(\"button\").at(0);\n+      }\n+      button.simulate(\"click\");\n+    };\n+\n+    it(\"should fetch facets\", () => {\n+      expect(\n+        FacetedSearchSettingsModule.getFacetsFromServer\n+      ).toHaveBeenCalledTimes(1);\n+    });\n+\n+    it(\"should display a list of facets\", () => {\n+      expect(getListItems()).toHaveLength(2);\n+    });\n+\n+    describe(\"when click an Edit button\", () => {\n+      it(\"should show a dialog\", async () => {\n+        openDialog(false);\n+        expect(component.find(FacetDialog).prop(\"open\")).toBeTruthy();\n+      });\n+    });\n+\n+    describe(\"when click the Add button\", () => {\n+      it(\"should show a dialog\", async () => {\n+        openDialog(true);\n+        expect(component.find(FacetDialog).prop(\"open\")).toBeTruthy();\n+      });\n+    });\n+\n+    describe(\"when click a delete button\", () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "438e4d8fd5a112737f9980910272eca0d5895bb5"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTkwNTg0OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/mainui/FacetedSearchSettingsPage.test.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzo1NjowNlrOGUlw7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzo1NjowNlrOGUlw7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0MzQzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                describe(\"when click the Add button\", () => {\n          \n          \n            \n                describe(\"when the Add button is clicked\", () => {", "url": "https://github.com/openequella/openEQUELLA/pull/1728#discussion_r424243439", "createdAt": "2020-05-13T07:56:06Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/mainui/FacetedSearchSettingsPage.test.tsx", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import { mount, ReactWrapper } from \"enzyme\";\n+import FacetedSearchSettingsPage from \"../../../tsrc/settings/Search/facetedsearch/FacetedSearchSettingsPage\";\n+import * as FacetedSearchSettingsModule from \"../../../tsrc/settings/Search/facetedsearch/FacetedSearchSettingsModule\";\n+import { NavigationGuardProps } from \"../../../tsrc/components/NavigationGuard\";\n+import { act } from \"react-dom/test-utils\";\n+import FacetDialog from \"../../../tsrc/settings/Search/facetedsearch/FacetDialog\";\n+import MessageInfo from \"../../../tsrc/components/MessageInfo\";\n+import MessageDialog from \"../../../tsrc/components/MessageDialog\";\n+\n+const mockFacets: FacetedSearchSettingsModule.Facet[] = [\n+  {\n+    id: 1,\n+    name: \"mocked facet1\",\n+    schemaNode: \"item/name\",\n+    maxResults: 1,\n+    orderIndex: 1,\n+  },\n+  {\n+    id: 2,\n+    name: \"mocked facet3\",\n+    schemaNode: \"item/age\",\n+    maxResults: 2,\n+    orderIndex: 2,\n+  },\n+];\n+\n+// This test does not need NavigationGuard which is part of the Setting page template.\n+jest.mock(\"../../../tsrc/components/NavigationGuard\", () => ({\n+  NavigationGuard: (props: NavigationGuardProps) => {\n+    return <div />;\n+  },\n+}));\n+\n+const mockGetFacetsFromServer = jest.spyOn(\n+  FacetedSearchSettingsModule,\n+  \"getFacetsFromServer\"\n+);\n+const mockBatchDelete = jest.spyOn(FacetedSearchSettingsModule, \"batchDelete\");\n+const mockBatchUpdateOrAdd = jest.spyOn(\n+  FacetedSearchSettingsModule,\n+  \"batchUpdateOrAdd\"\n+);\n+\n+describe(\"<FacetedSearchSettingsPage />\", () => {\n+  let component: ReactWrapper;\n+  beforeEach(async () => {\n+    const getFacetsPromise = mockGetFacetsFromServer.mockImplementation(() =>\n+      Promise.resolve(mockFacets)\n+    );\n+    component = mount(<FacetedSearchSettingsPage updateTemplate={jest.fn()} />);\n+    await act(async () => {\n+      await getFacetsPromise;\n+    });\n+    component.update();\n+  });\n+  afterEach(() => jest.clearAllMocks());\n+\n+  describe(\"when the page is mounted\", () => {\n+    const getListItems = () => component.find(\".MuiListItem-container\");\n+    const getSaveButton = () => component.find(\"#_saveButton\").hostNodes();\n+    const deleteFacet = () => {\n+      const deleteButton = getListItems().at(0).find(\"button\").at(1);\n+      deleteButton.simulate(\"click\");\n+    };\n+    const updateFacet = (addOrEdit: boolean) => {\n+      const fields = component.find(\"input\");\n+      fields.at(0).simulate(\"change\", {\n+        target: { value: addOrEdit ? \"new facet\" : \"updated facet\" },\n+      });\n+      fields.at(1).simulate(\"change\", { target: { value: \"item/name/first\" } });\n+      const okButton = component\n+        .findWhere(\n+          (node) =>\n+            node.text() === (addOrEdit ? \"Add\" : \"OK\") &&\n+            node.type() === \"button\"\n+        )\n+        .hostNodes();\n+      okButton.simulate(\"click\");\n+    };\n+    const openDialog = (addOrEdit: boolean) => {\n+      let button: ReactWrapper;\n+      if (addOrEdit) {\n+        button = component.find(\".MuiCardActions-root button\");\n+      } else {\n+        button = getListItems().at(0).find(\"button\").at(0);\n+      }\n+      button.simulate(\"click\");\n+    };\n+\n+    it(\"should fetch facets\", () => {\n+      expect(\n+        FacetedSearchSettingsModule.getFacetsFromServer\n+      ).toHaveBeenCalledTimes(1);\n+    });\n+\n+    it(\"should display a list of facets\", () => {\n+      expect(getListItems()).toHaveLength(2);\n+    });\n+\n+    describe(\"when click an Edit button\", () => {\n+      it(\"should show a dialog\", async () => {\n+        openDialog(false);\n+        expect(component.find(FacetDialog).prop(\"open\")).toBeTruthy();\n+      });\n+    });\n+\n+    describe(\"when click the Add button\", () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "438e4d8fd5a112737f9980910272eca0d5895bb5"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTkwNzY4OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/mainui/FacetedSearchSettingsPage.test.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzo1NjozNFrOGUlyHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzo1NjozNFrOGUlyHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0Mzc0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                describe(\"when click an Edit button\", () => {\n          \n          \n            \n                describe(\"when an Edit button is clicked\", () => {", "url": "https://github.com/openequella/openEQUELLA/pull/1728#discussion_r424243742", "createdAt": "2020-05-13T07:56:34Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/mainui/FacetedSearchSettingsPage.test.tsx", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import { mount, ReactWrapper } from \"enzyme\";\n+import FacetedSearchSettingsPage from \"../../../tsrc/settings/Search/facetedsearch/FacetedSearchSettingsPage\";\n+import * as FacetedSearchSettingsModule from \"../../../tsrc/settings/Search/facetedsearch/FacetedSearchSettingsModule\";\n+import { NavigationGuardProps } from \"../../../tsrc/components/NavigationGuard\";\n+import { act } from \"react-dom/test-utils\";\n+import FacetDialog from \"../../../tsrc/settings/Search/facetedsearch/FacetDialog\";\n+import MessageInfo from \"../../../tsrc/components/MessageInfo\";\n+import MessageDialog from \"../../../tsrc/components/MessageDialog\";\n+\n+const mockFacets: FacetedSearchSettingsModule.Facet[] = [\n+  {\n+    id: 1,\n+    name: \"mocked facet1\",\n+    schemaNode: \"item/name\",\n+    maxResults: 1,\n+    orderIndex: 1,\n+  },\n+  {\n+    id: 2,\n+    name: \"mocked facet3\",\n+    schemaNode: \"item/age\",\n+    maxResults: 2,\n+    orderIndex: 2,\n+  },\n+];\n+\n+// This test does not need NavigationGuard which is part of the Setting page template.\n+jest.mock(\"../../../tsrc/components/NavigationGuard\", () => ({\n+  NavigationGuard: (props: NavigationGuardProps) => {\n+    return <div />;\n+  },\n+}));\n+\n+const mockGetFacetsFromServer = jest.spyOn(\n+  FacetedSearchSettingsModule,\n+  \"getFacetsFromServer\"\n+);\n+const mockBatchDelete = jest.spyOn(FacetedSearchSettingsModule, \"batchDelete\");\n+const mockBatchUpdateOrAdd = jest.spyOn(\n+  FacetedSearchSettingsModule,\n+  \"batchUpdateOrAdd\"\n+);\n+\n+describe(\"<FacetedSearchSettingsPage />\", () => {\n+  let component: ReactWrapper;\n+  beforeEach(async () => {\n+    const getFacetsPromise = mockGetFacetsFromServer.mockImplementation(() =>\n+      Promise.resolve(mockFacets)\n+    );\n+    component = mount(<FacetedSearchSettingsPage updateTemplate={jest.fn()} />);\n+    await act(async () => {\n+      await getFacetsPromise;\n+    });\n+    component.update();\n+  });\n+  afterEach(() => jest.clearAllMocks());\n+\n+  describe(\"when the page is mounted\", () => {\n+    const getListItems = () => component.find(\".MuiListItem-container\");\n+    const getSaveButton = () => component.find(\"#_saveButton\").hostNodes();\n+    const deleteFacet = () => {\n+      const deleteButton = getListItems().at(0).find(\"button\").at(1);\n+      deleteButton.simulate(\"click\");\n+    };\n+    const updateFacet = (addOrEdit: boolean) => {\n+      const fields = component.find(\"input\");\n+      fields.at(0).simulate(\"change\", {\n+        target: { value: addOrEdit ? \"new facet\" : \"updated facet\" },\n+      });\n+      fields.at(1).simulate(\"change\", { target: { value: \"item/name/first\" } });\n+      const okButton = component\n+        .findWhere(\n+          (node) =>\n+            node.text() === (addOrEdit ? \"Add\" : \"OK\") &&\n+            node.type() === \"button\"\n+        )\n+        .hostNodes();\n+      okButton.simulate(\"click\");\n+    };\n+    const openDialog = (addOrEdit: boolean) => {\n+      let button: ReactWrapper;\n+      if (addOrEdit) {\n+        button = component.find(\".MuiCardActions-root button\");\n+      } else {\n+        button = getListItems().at(0).find(\"button\").at(0);\n+      }\n+      button.simulate(\"click\");\n+    };\n+\n+    it(\"should fetch facets\", () => {\n+      expect(\n+        FacetedSearchSettingsModule.getFacetsFromServer\n+      ).toHaveBeenCalledTimes(1);\n+    });\n+\n+    it(\"should display a list of facets\", () => {\n+      expect(getListItems()).toHaveLength(2);\n+    });\n+\n+    describe(\"when click an Edit button\", () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "438e4d8fd5a112737f9980910272eca0d5895bb5"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTkyNzU1OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsModule.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODowMjoxM1rOGUl-3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODowMjoxM1rOGUl-3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0NzAwNg==", "bodyText": "Might be good to have a quick line about the definition of dirty in this scenario.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * ID of a facet; being undefined means this facet is dirty.\n          \n          \n            \n               * ID of a facet; being undefined means this facet is dirty. (i.e., not saved to the server)", "url": "https://github.com/openequella/openEQUELLA/pull/1728#discussion_r424247006", "createdAt": "2020-05-13T08:02:13Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsModule.ts", "diffHunk": "@@ -21,14 +21,19 @@ import {\n   BatchOperationResponse,\n   groupErrorMessages,\n } from \"../../../api/BatchOperationResponse\";\n+import { encodeQuery } from \"../../../util/encodequery\";\n \n export interface Facet {\n   /**\n-   * Name of a facet\n+   * ID of a facet; being undefined means this facet is dirty.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "438e4d8fd5a112737f9980910272eca0d5895bb5"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTkzNDAyOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsPage.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODowMzo1MlrOGUmCxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODowMzo1MlrOGUmCxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0ODAwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Get facets from the Server and add boolean flags on them.\n          \n          \n            \n               * Get facets from the server and add flags to them.", "url": "https://github.com/openequella/openEQUELLA/pull/1728#discussion_r424248004", "createdAt": "2020-05-13T08:03:52Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsPage.tsx", "diffHunk": "@@ -99,24 +109,40 @@ const FacetedSearchSettingsPage = ({ updateTemplate }: TemplateUpdateProps) => {\n    * Get facets from the Server and add boolean flags on them.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "438e4d8fd5a112737f9980910272eca0d5895bb5"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTkzODUzOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsPage.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODowNToxN1rOGUmFwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODowNToxN1rOGUmFwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0ODc2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Save updated/deleted facets to the Server.\n          \n          \n            \n               * Show the message dialog if any error message is received otherwise show snackbar.\n          \n          \n            \n               * Save updated/deleted facets to the server.\n          \n          \n            \n               * Show the message dialog if any error message is received. Otherwise, show snackbar.", "url": "https://github.com/openequella/openEQUELLA/pull/1728#discussion_r424248769", "createdAt": "2020-05-13T08:05:17Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsPage.tsx", "diffHunk": "@@ -99,24 +109,40 @@ const FacetedSearchSettingsPage = ({ updateTemplate }: TemplateUpdateProps) => {\n    * Get facets from the Server and add boolean flags on them.\n    */\n   const getFacets = () => {\n-    getFacetsFromServer().then((facets) => {\n-      setFacets(\n-        facets.map((facet) => {\n-          return { ...facet, updated: false, deleted: false };\n-        })\n-      );\n-    });\n+    getFacetsFromServer()\n+      .then((facets) =>\n+        setFacets(\n+          facets.map((facet) => {\n+            return { ...facet, updated: false, deleted: false };\n+          })\n+        )\n+      )\n+      .catch((error: Error) => handleError(error));\n   };\n \n   /**\n    * Save updated/deleted facets to the Server.\n    * Show the message dialog if any error message is received otherwise show snackbar.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "438e4d8fd5a112737f9980910272eca0d5895bb5"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTE2NzY2OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/mainui/FacetedSearchSettingsPage.test.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMjo0ODoxMVrOGVGKHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMjo0ODoxMVrOGVGKHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc3NDE3Mw==", "bodyText": "This describe seems redundant, because there are no subsequent describe blocks at this level.", "url": "https://github.com/openequella/openEQUELLA/pull/1728#discussion_r424774173", "createdAt": "2020-05-13T22:48:11Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/mainui/FacetedSearchSettingsPage.test.tsx", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import { mount, ReactWrapper } from \"enzyme\";\n+import FacetedSearchSettingsPage from \"../../../tsrc/settings/Search/facetedsearch/FacetedSearchSettingsPage\";\n+import * as FacetedSearchSettingsModule from \"../../../tsrc/settings/Search/facetedsearch/FacetedSearchSettingsModule\";\n+import { NavigationGuardProps } from \"../../../tsrc/components/NavigationGuard\";\n+import { act } from \"react-dom/test-utils\";\n+import FacetDialog from \"../../../tsrc/settings/Search/facetedsearch/FacetDialog\";\n+import MessageInfo from \"../../../tsrc/components/MessageInfo\";\n+import MessageDialog from \"../../../tsrc/components/MessageDialog\";\n+\n+const mockFacets: FacetedSearchSettingsModule.Facet[] = [\n+  {\n+    id: 1,\n+    name: \"mocked facet1\",\n+    schemaNode: \"item/name\",\n+    maxResults: 1,\n+    orderIndex: 1,\n+  },\n+  {\n+    id: 2,\n+    name: \"mocked facet3\",\n+    schemaNode: \"item/age\",\n+    maxResults: 2,\n+    orderIndex: 2,\n+  },\n+];\n+\n+// This test does not need NavigationGuard which is part of the Setting page template.\n+jest.mock(\"../../../tsrc/components/NavigationGuard\", () => ({\n+  NavigationGuard: (props: NavigationGuardProps) => {\n+    return <div />;\n+  },\n+}));\n+\n+const mockGetFacetsFromServer = jest.spyOn(\n+  FacetedSearchSettingsModule,\n+  \"getFacetsFromServer\"\n+);\n+const mockBatchDelete = jest.spyOn(FacetedSearchSettingsModule, \"batchDelete\");\n+const mockBatchUpdateOrAdd = jest.spyOn(\n+  FacetedSearchSettingsModule,\n+  \"batchUpdateOrAdd\"\n+);\n+\n+describe(\"<FacetedSearchSettingsPage />\", () => {\n+  let component: ReactWrapper;\n+  beforeEach(async () => {\n+    const getFacetsPromise = mockGetFacetsFromServer.mockImplementation(() =>\n+      Promise.resolve(mockFacets)\n+    );\n+    component = mount(<FacetedSearchSettingsPage updateTemplate={jest.fn()} />);\n+    await act(async () => {\n+      await getFacetsPromise;\n+    });\n+    component.update();\n+  });\n+  afterEach(() => jest.clearAllMocks());\n+\n+  describe(\"when the page is mounted\", () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "438e4d8fd5a112737f9980910272eca0d5895bb5"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTE3NTM5OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/mainui/FacetedSearchSettingsPage.test.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMjo1MToxOVrOGVGOtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMjo1MToxOVrOGVGOtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc3NTM1MQ==", "bodyText": "AFAIK, other than documentation there is no benefit to have a describe block that simply wraps a single it or test statement - only if there was also some other logic such as a before or after. That also extends to even if the describe only had multiple it/test blocks but no other blocks or statements in it.\nSo I'd suggest we remove all those type of describes here and below, and simply rework the it description to cover it.", "url": "https://github.com/openequella/openEQUELLA/pull/1728#discussion_r424775351", "createdAt": "2020-05-13T22:51:19Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/mainui/FacetedSearchSettingsPage.test.tsx", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import { mount, ReactWrapper } from \"enzyme\";\n+import FacetedSearchSettingsPage from \"../../../tsrc/settings/Search/facetedsearch/FacetedSearchSettingsPage\";\n+import * as FacetedSearchSettingsModule from \"../../../tsrc/settings/Search/facetedsearch/FacetedSearchSettingsModule\";\n+import { NavigationGuardProps } from \"../../../tsrc/components/NavigationGuard\";\n+import { act } from \"react-dom/test-utils\";\n+import FacetDialog from \"../../../tsrc/settings/Search/facetedsearch/FacetDialog\";\n+import MessageInfo from \"../../../tsrc/components/MessageInfo\";\n+import MessageDialog from \"../../../tsrc/components/MessageDialog\";\n+\n+const mockFacets: FacetedSearchSettingsModule.Facet[] = [\n+  {\n+    id: 1,\n+    name: \"mocked facet1\",\n+    schemaNode: \"item/name\",\n+    maxResults: 1,\n+    orderIndex: 1,\n+  },\n+  {\n+    id: 2,\n+    name: \"mocked facet3\",\n+    schemaNode: \"item/age\",\n+    maxResults: 2,\n+    orderIndex: 2,\n+  },\n+];\n+\n+// This test does not need NavigationGuard which is part of the Setting page template.\n+jest.mock(\"../../../tsrc/components/NavigationGuard\", () => ({\n+  NavigationGuard: (props: NavigationGuardProps) => {\n+    return <div />;\n+  },\n+}));\n+\n+const mockGetFacetsFromServer = jest.spyOn(\n+  FacetedSearchSettingsModule,\n+  \"getFacetsFromServer\"\n+);\n+const mockBatchDelete = jest.spyOn(FacetedSearchSettingsModule, \"batchDelete\");\n+const mockBatchUpdateOrAdd = jest.spyOn(\n+  FacetedSearchSettingsModule,\n+  \"batchUpdateOrAdd\"\n+);\n+\n+describe(\"<FacetedSearchSettingsPage />\", () => {\n+  let component: ReactWrapper;\n+  beforeEach(async () => {\n+    const getFacetsPromise = mockGetFacetsFromServer.mockImplementation(() =>\n+      Promise.resolve(mockFacets)\n+    );\n+    component = mount(<FacetedSearchSettingsPage updateTemplate={jest.fn()} />);\n+    await act(async () => {\n+      await getFacetsPromise;\n+    });\n+    component.update();\n+  });\n+  afterEach(() => jest.clearAllMocks());\n+\n+  describe(\"when the page is mounted\", () => {\n+    const getListItems = () => component.find(\".MuiListItem-container\");\n+    const getSaveButton = () => component.find(\"#_saveButton\").hostNodes();\n+    const deleteFacet = () => {\n+      const deleteButton = getListItems().at(0).find(\"button\").at(1);\n+      deleteButton.simulate(\"click\");\n+    };\n+    const updateFacet = (addOrEdit: boolean) => {\n+      const fields = component.find(\"input\");\n+      fields.at(0).simulate(\"change\", {\n+        target: { value: addOrEdit ? \"new facet\" : \"updated facet\" },\n+      });\n+      fields.at(1).simulate(\"change\", { target: { value: \"item/name/first\" } });\n+      const okButton = component\n+        .findWhere(\n+          (node) =>\n+            node.text() === (addOrEdit ? \"Add\" : \"OK\") &&\n+            node.type() === \"button\"\n+        )\n+        .hostNodes();\n+      okButton.simulate(\"click\");\n+    };\n+    const openDialog = (addOrEdit: boolean) => {\n+      let button: ReactWrapper;\n+      if (addOrEdit) {\n+        button = component.find(\".MuiCardActions-root button\");\n+      } else {\n+        button = getListItems().at(0).find(\"button\").at(0);\n+      }\n+      button.simulate(\"click\");\n+    };\n+\n+    it(\"should fetch facets\", () => {\n+      expect(\n+        FacetedSearchSettingsModule.getFacetsFromServer\n+      ).toHaveBeenCalledTimes(1);\n+    });\n+\n+    it(\"should display a list of facets\", () => {\n+      expect(getListItems()).toHaveLength(2);\n+    });\n+\n+    describe(\"when click an Edit button\", () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "438e4d8fd5a112737f9980910272eca0d5895bb5"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTE4MDY4OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/mainui/FacetedSearchSettingsPage.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMjo1Mzo0MVrOGVGSAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMzowMDoyNVrOGVGbUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc3NjE5Mg==", "bodyText": "I wonder if this is valid. \ud83e\udd14\nWhat if open is present, but has a text value of false. Will it be okay?\nAlso, this reads odd after the line above it of openDialog(false). That makes me think it's saying \"don't open the dialog\", and then we're testing to make sure it's open. \ud83e\udd2f", "url": "https://github.com/openequella/openEQUELLA/pull/1728#discussion_r424776192", "createdAt": "2020-05-13T22:53:41Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/mainui/FacetedSearchSettingsPage.test.tsx", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import { mount, ReactWrapper } from \"enzyme\";\n+import FacetedSearchSettingsPage from \"../../../tsrc/settings/Search/facetedsearch/FacetedSearchSettingsPage\";\n+import * as FacetedSearchSettingsModule from \"../../../tsrc/settings/Search/facetedsearch/FacetedSearchSettingsModule\";\n+import { NavigationGuardProps } from \"../../../tsrc/components/NavigationGuard\";\n+import { act } from \"react-dom/test-utils\";\n+import FacetDialog from \"../../../tsrc/settings/Search/facetedsearch/FacetDialog\";\n+import MessageInfo from \"../../../tsrc/components/MessageInfo\";\n+import MessageDialog from \"../../../tsrc/components/MessageDialog\";\n+\n+const mockFacets: FacetedSearchSettingsModule.Facet[] = [\n+  {\n+    id: 1,\n+    name: \"mocked facet1\",\n+    schemaNode: \"item/name\",\n+    maxResults: 1,\n+    orderIndex: 1,\n+  },\n+  {\n+    id: 2,\n+    name: \"mocked facet3\",\n+    schemaNode: \"item/age\",\n+    maxResults: 2,\n+    orderIndex: 2,\n+  },\n+];\n+\n+// This test does not need NavigationGuard which is part of the Setting page template.\n+jest.mock(\"../../../tsrc/components/NavigationGuard\", () => ({\n+  NavigationGuard: (props: NavigationGuardProps) => {\n+    return <div />;\n+  },\n+}));\n+\n+const mockGetFacetsFromServer = jest.spyOn(\n+  FacetedSearchSettingsModule,\n+  \"getFacetsFromServer\"\n+);\n+const mockBatchDelete = jest.spyOn(FacetedSearchSettingsModule, \"batchDelete\");\n+const mockBatchUpdateOrAdd = jest.spyOn(\n+  FacetedSearchSettingsModule,\n+  \"batchUpdateOrAdd\"\n+);\n+\n+describe(\"<FacetedSearchSettingsPage />\", () => {\n+  let component: ReactWrapper;\n+  beforeEach(async () => {\n+    const getFacetsPromise = mockGetFacetsFromServer.mockImplementation(() =>\n+      Promise.resolve(mockFacets)\n+    );\n+    component = mount(<FacetedSearchSettingsPage updateTemplate={jest.fn()} />);\n+    await act(async () => {\n+      await getFacetsPromise;\n+    });\n+    component.update();\n+  });\n+  afterEach(() => jest.clearAllMocks());\n+\n+  describe(\"when the page is mounted\", () => {\n+    const getListItems = () => component.find(\".MuiListItem-container\");\n+    const getSaveButton = () => component.find(\"#_saveButton\").hostNodes();\n+    const deleteFacet = () => {\n+      const deleteButton = getListItems().at(0).find(\"button\").at(1);\n+      deleteButton.simulate(\"click\");\n+    };\n+    const updateFacet = (addOrEdit: boolean) => {\n+      const fields = component.find(\"input\");\n+      fields.at(0).simulate(\"change\", {\n+        target: { value: addOrEdit ? \"new facet\" : \"updated facet\" },\n+      });\n+      fields.at(1).simulate(\"change\", { target: { value: \"item/name/first\" } });\n+      const okButton = component\n+        .findWhere(\n+          (node) =>\n+            node.text() === (addOrEdit ? \"Add\" : \"OK\") &&\n+            node.type() === \"button\"\n+        )\n+        .hostNodes();\n+      okButton.simulate(\"click\");\n+    };\n+    const openDialog = (addOrEdit: boolean) => {\n+      let button: ReactWrapper;\n+      if (addOrEdit) {\n+        button = component.find(\".MuiCardActions-root button\");\n+      } else {\n+        button = getListItems().at(0).find(\"button\").at(0);\n+      }\n+      button.simulate(\"click\");\n+    };\n+\n+    it(\"should fetch facets\", () => {\n+      expect(\n+        FacetedSearchSettingsModule.getFacetsFromServer\n+      ).toHaveBeenCalledTimes(1);\n+    });\n+\n+    it(\"should display a list of facets\", () => {\n+      expect(getListItems()).toHaveLength(2);\n+    });\n+\n+    describe(\"when click an Edit button\", () => {\n+      it(\"should show a dialog\", async () => {\n+        openDialog(false);\n+        expect(component.find(FacetDialog).prop(\"open\")).toBeTruthy();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "438e4d8fd5a112737f9980910272eca0d5895bb5"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc3ODU3OA==", "bodyText": "So aparently jest toBeTruthy relies on type conversion via !!. So if we look at the above in the node repl:\n$ node\nWelcome to Node.js v12.16.1.\nType \".help\" for more information.\n> !!\"false\"\ntrue\n\nWe see there is probably a problem - and this may extend to your below tests (incl. the toBeFalsey).", "url": "https://github.com/openequella/openEQUELLA/pull/1728#discussion_r424778578", "createdAt": "2020-05-13T23:00:25Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/mainui/FacetedSearchSettingsPage.test.tsx", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import { mount, ReactWrapper } from \"enzyme\";\n+import FacetedSearchSettingsPage from \"../../../tsrc/settings/Search/facetedsearch/FacetedSearchSettingsPage\";\n+import * as FacetedSearchSettingsModule from \"../../../tsrc/settings/Search/facetedsearch/FacetedSearchSettingsModule\";\n+import { NavigationGuardProps } from \"../../../tsrc/components/NavigationGuard\";\n+import { act } from \"react-dom/test-utils\";\n+import FacetDialog from \"../../../tsrc/settings/Search/facetedsearch/FacetDialog\";\n+import MessageInfo from \"../../../tsrc/components/MessageInfo\";\n+import MessageDialog from \"../../../tsrc/components/MessageDialog\";\n+\n+const mockFacets: FacetedSearchSettingsModule.Facet[] = [\n+  {\n+    id: 1,\n+    name: \"mocked facet1\",\n+    schemaNode: \"item/name\",\n+    maxResults: 1,\n+    orderIndex: 1,\n+  },\n+  {\n+    id: 2,\n+    name: \"mocked facet3\",\n+    schemaNode: \"item/age\",\n+    maxResults: 2,\n+    orderIndex: 2,\n+  },\n+];\n+\n+// This test does not need NavigationGuard which is part of the Setting page template.\n+jest.mock(\"../../../tsrc/components/NavigationGuard\", () => ({\n+  NavigationGuard: (props: NavigationGuardProps) => {\n+    return <div />;\n+  },\n+}));\n+\n+const mockGetFacetsFromServer = jest.spyOn(\n+  FacetedSearchSettingsModule,\n+  \"getFacetsFromServer\"\n+);\n+const mockBatchDelete = jest.spyOn(FacetedSearchSettingsModule, \"batchDelete\");\n+const mockBatchUpdateOrAdd = jest.spyOn(\n+  FacetedSearchSettingsModule,\n+  \"batchUpdateOrAdd\"\n+);\n+\n+describe(\"<FacetedSearchSettingsPage />\", () => {\n+  let component: ReactWrapper;\n+  beforeEach(async () => {\n+    const getFacetsPromise = mockGetFacetsFromServer.mockImplementation(() =>\n+      Promise.resolve(mockFacets)\n+    );\n+    component = mount(<FacetedSearchSettingsPage updateTemplate={jest.fn()} />);\n+    await act(async () => {\n+      await getFacetsPromise;\n+    });\n+    component.update();\n+  });\n+  afterEach(() => jest.clearAllMocks());\n+\n+  describe(\"when the page is mounted\", () => {\n+    const getListItems = () => component.find(\".MuiListItem-container\");\n+    const getSaveButton = () => component.find(\"#_saveButton\").hostNodes();\n+    const deleteFacet = () => {\n+      const deleteButton = getListItems().at(0).find(\"button\").at(1);\n+      deleteButton.simulate(\"click\");\n+    };\n+    const updateFacet = (addOrEdit: boolean) => {\n+      const fields = component.find(\"input\");\n+      fields.at(0).simulate(\"change\", {\n+        target: { value: addOrEdit ? \"new facet\" : \"updated facet\" },\n+      });\n+      fields.at(1).simulate(\"change\", { target: { value: \"item/name/first\" } });\n+      const okButton = component\n+        .findWhere(\n+          (node) =>\n+            node.text() === (addOrEdit ? \"Add\" : \"OK\") &&\n+            node.type() === \"button\"\n+        )\n+        .hostNodes();\n+      okButton.simulate(\"click\");\n+    };\n+    const openDialog = (addOrEdit: boolean) => {\n+      let button: ReactWrapper;\n+      if (addOrEdit) {\n+        button = component.find(\".MuiCardActions-root button\");\n+      } else {\n+        button = getListItems().at(0).find(\"button\").at(0);\n+      }\n+      button.simulate(\"click\");\n+    };\n+\n+    it(\"should fetch facets\", () => {\n+      expect(\n+        FacetedSearchSettingsModule.getFacetsFromServer\n+      ).toHaveBeenCalledTimes(1);\n+    });\n+\n+    it(\"should display a list of facets\", () => {\n+      expect(getListItems()).toHaveLength(2);\n+    });\n+\n+    describe(\"when click an Edit button\", () => {\n+      it(\"should show a dialog\", async () => {\n+        openDialog(false);\n+        expect(component.find(FacetDialog).prop(\"open\")).toBeTruthy();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc3NjE5Mg=="}, "originalCommit": {"oid": "438e4d8fd5a112737f9980910272eca0d5895bb5"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTE4MzcxOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/mainui/FacetedSearchSettingsPage.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMjo1NTowMlrOGVGT-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMDo0ODoyOVrOGVIXbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc3NjY5Nw==", "bodyText": "Okay, what now... This reads very close to the above test, but now we call openDialog with true (rather than false) and yet we're still expecting the same result. Huh!?", "url": "https://github.com/openequella/openEQUELLA/pull/1728#discussion_r424776697", "createdAt": "2020-05-13T22:55:02Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/mainui/FacetedSearchSettingsPage.test.tsx", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import { mount, ReactWrapper } from \"enzyme\";\n+import FacetedSearchSettingsPage from \"../../../tsrc/settings/Search/facetedsearch/FacetedSearchSettingsPage\";\n+import * as FacetedSearchSettingsModule from \"../../../tsrc/settings/Search/facetedsearch/FacetedSearchSettingsModule\";\n+import { NavigationGuardProps } from \"../../../tsrc/components/NavigationGuard\";\n+import { act } from \"react-dom/test-utils\";\n+import FacetDialog from \"../../../tsrc/settings/Search/facetedsearch/FacetDialog\";\n+import MessageInfo from \"../../../tsrc/components/MessageInfo\";\n+import MessageDialog from \"../../../tsrc/components/MessageDialog\";\n+\n+const mockFacets: FacetedSearchSettingsModule.Facet[] = [\n+  {\n+    id: 1,\n+    name: \"mocked facet1\",\n+    schemaNode: \"item/name\",\n+    maxResults: 1,\n+    orderIndex: 1,\n+  },\n+  {\n+    id: 2,\n+    name: \"mocked facet3\",\n+    schemaNode: \"item/age\",\n+    maxResults: 2,\n+    orderIndex: 2,\n+  },\n+];\n+\n+// This test does not need NavigationGuard which is part of the Setting page template.\n+jest.mock(\"../../../tsrc/components/NavigationGuard\", () => ({\n+  NavigationGuard: (props: NavigationGuardProps) => {\n+    return <div />;\n+  },\n+}));\n+\n+const mockGetFacetsFromServer = jest.spyOn(\n+  FacetedSearchSettingsModule,\n+  \"getFacetsFromServer\"\n+);\n+const mockBatchDelete = jest.spyOn(FacetedSearchSettingsModule, \"batchDelete\");\n+const mockBatchUpdateOrAdd = jest.spyOn(\n+  FacetedSearchSettingsModule,\n+  \"batchUpdateOrAdd\"\n+);\n+\n+describe(\"<FacetedSearchSettingsPage />\", () => {\n+  let component: ReactWrapper;\n+  beforeEach(async () => {\n+    const getFacetsPromise = mockGetFacetsFromServer.mockImplementation(() =>\n+      Promise.resolve(mockFacets)\n+    );\n+    component = mount(<FacetedSearchSettingsPage updateTemplate={jest.fn()} />);\n+    await act(async () => {\n+      await getFacetsPromise;\n+    });\n+    component.update();\n+  });\n+  afterEach(() => jest.clearAllMocks());\n+\n+  describe(\"when the page is mounted\", () => {\n+    const getListItems = () => component.find(\".MuiListItem-container\");\n+    const getSaveButton = () => component.find(\"#_saveButton\").hostNodes();\n+    const deleteFacet = () => {\n+      const deleteButton = getListItems().at(0).find(\"button\").at(1);\n+      deleteButton.simulate(\"click\");\n+    };\n+    const updateFacet = (addOrEdit: boolean) => {\n+      const fields = component.find(\"input\");\n+      fields.at(0).simulate(\"change\", {\n+        target: { value: addOrEdit ? \"new facet\" : \"updated facet\" },\n+      });\n+      fields.at(1).simulate(\"change\", { target: { value: \"item/name/first\" } });\n+      const okButton = component\n+        .findWhere(\n+          (node) =>\n+            node.text() === (addOrEdit ? \"Add\" : \"OK\") &&\n+            node.type() === \"button\"\n+        )\n+        .hostNodes();\n+      okButton.simulate(\"click\");\n+    };\n+    const openDialog = (addOrEdit: boolean) => {\n+      let button: ReactWrapper;\n+      if (addOrEdit) {\n+        button = component.find(\".MuiCardActions-root button\");\n+      } else {\n+        button = getListItems().at(0).find(\"button\").at(0);\n+      }\n+      button.simulate(\"click\");\n+    };\n+\n+    it(\"should fetch facets\", () => {\n+      expect(\n+        FacetedSearchSettingsModule.getFacetsFromServer\n+      ).toHaveBeenCalledTimes(1);\n+    });\n+\n+    it(\"should display a list of facets\", () => {\n+      expect(getListItems()).toHaveLength(2);\n+    });\n+\n+    describe(\"when click an Edit button\", () => {\n+      it(\"should show a dialog\", async () => {\n+        openDialog(false);\n+        expect(component.find(FacetDialog).prop(\"open\")).toBeTruthy();\n+      });\n+    });\n+\n+    describe(\"when click the Add button\", () => {\n+      it(\"should show a dialog\", async () => {\n+        openDialog(true);\n+        expect(component.find(FacetDialog).prop(\"open\")).toBeTruthy();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "438e4d8fd5a112737f9980910272eca0d5895bb5"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgxMDM1MA==", "bodyText": "Sorry for the confusion. True refers to updating a facet whereas false means adding. I will refactor this to remove confusion.", "url": "https://github.com/openequella/openEQUELLA/pull/1728#discussion_r424810350", "createdAt": "2020-05-14T00:48:29Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/mainui/FacetedSearchSettingsPage.test.tsx", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import { mount, ReactWrapper } from \"enzyme\";\n+import FacetedSearchSettingsPage from \"../../../tsrc/settings/Search/facetedsearch/FacetedSearchSettingsPage\";\n+import * as FacetedSearchSettingsModule from \"../../../tsrc/settings/Search/facetedsearch/FacetedSearchSettingsModule\";\n+import { NavigationGuardProps } from \"../../../tsrc/components/NavigationGuard\";\n+import { act } from \"react-dom/test-utils\";\n+import FacetDialog from \"../../../tsrc/settings/Search/facetedsearch/FacetDialog\";\n+import MessageInfo from \"../../../tsrc/components/MessageInfo\";\n+import MessageDialog from \"../../../tsrc/components/MessageDialog\";\n+\n+const mockFacets: FacetedSearchSettingsModule.Facet[] = [\n+  {\n+    id: 1,\n+    name: \"mocked facet1\",\n+    schemaNode: \"item/name\",\n+    maxResults: 1,\n+    orderIndex: 1,\n+  },\n+  {\n+    id: 2,\n+    name: \"mocked facet3\",\n+    schemaNode: \"item/age\",\n+    maxResults: 2,\n+    orderIndex: 2,\n+  },\n+];\n+\n+// This test does not need NavigationGuard which is part of the Setting page template.\n+jest.mock(\"../../../tsrc/components/NavigationGuard\", () => ({\n+  NavigationGuard: (props: NavigationGuardProps) => {\n+    return <div />;\n+  },\n+}));\n+\n+const mockGetFacetsFromServer = jest.spyOn(\n+  FacetedSearchSettingsModule,\n+  \"getFacetsFromServer\"\n+);\n+const mockBatchDelete = jest.spyOn(FacetedSearchSettingsModule, \"batchDelete\");\n+const mockBatchUpdateOrAdd = jest.spyOn(\n+  FacetedSearchSettingsModule,\n+  \"batchUpdateOrAdd\"\n+);\n+\n+describe(\"<FacetedSearchSettingsPage />\", () => {\n+  let component: ReactWrapper;\n+  beforeEach(async () => {\n+    const getFacetsPromise = mockGetFacetsFromServer.mockImplementation(() =>\n+      Promise.resolve(mockFacets)\n+    );\n+    component = mount(<FacetedSearchSettingsPage updateTemplate={jest.fn()} />);\n+    await act(async () => {\n+      await getFacetsPromise;\n+    });\n+    component.update();\n+  });\n+  afterEach(() => jest.clearAllMocks());\n+\n+  describe(\"when the page is mounted\", () => {\n+    const getListItems = () => component.find(\".MuiListItem-container\");\n+    const getSaveButton = () => component.find(\"#_saveButton\").hostNodes();\n+    const deleteFacet = () => {\n+      const deleteButton = getListItems().at(0).find(\"button\").at(1);\n+      deleteButton.simulate(\"click\");\n+    };\n+    const updateFacet = (addOrEdit: boolean) => {\n+      const fields = component.find(\"input\");\n+      fields.at(0).simulate(\"change\", {\n+        target: { value: addOrEdit ? \"new facet\" : \"updated facet\" },\n+      });\n+      fields.at(1).simulate(\"change\", { target: { value: \"item/name/first\" } });\n+      const okButton = component\n+        .findWhere(\n+          (node) =>\n+            node.text() === (addOrEdit ? \"Add\" : \"OK\") &&\n+            node.type() === \"button\"\n+        )\n+        .hostNodes();\n+      okButton.simulate(\"click\");\n+    };\n+    const openDialog = (addOrEdit: boolean) => {\n+      let button: ReactWrapper;\n+      if (addOrEdit) {\n+        button = component.find(\".MuiCardActions-root button\");\n+      } else {\n+        button = getListItems().at(0).find(\"button\").at(0);\n+      }\n+      button.simulate(\"click\");\n+    };\n+\n+    it(\"should fetch facets\", () => {\n+      expect(\n+        FacetedSearchSettingsModule.getFacetsFromServer\n+      ).toHaveBeenCalledTimes(1);\n+    });\n+\n+    it(\"should display a list of facets\", () => {\n+      expect(getListItems()).toHaveLength(2);\n+    });\n+\n+    describe(\"when click an Edit button\", () => {\n+      it(\"should show a dialog\", async () => {\n+        openDialog(false);\n+        expect(component.find(FacetDialog).prop(\"open\")).toBeTruthy();\n+      });\n+    });\n+\n+    describe(\"when click the Add button\", () => {\n+      it(\"should show a dialog\", async () => {\n+        openDialog(true);\n+        expect(component.find(FacetDialog).prop(\"open\")).toBeTruthy();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc3NjY5Nw=="}, "originalCommit": {"oid": "438e4d8fd5a112737f9980910272eca0d5895bb5"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTIwMDYxOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/mainui/FacetedSearchSettingsPage.test.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMzowMjozNFrOGVGeZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMzowMjozNFrOGVGeZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc3OTM2NA==", "bodyText": "This describe makes sense, as you're name spacing a few additional functions etc.", "url": "https://github.com/openequella/openEQUELLA/pull/1728#discussion_r424779364", "createdAt": "2020-05-13T23:02:34Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/mainui/FacetedSearchSettingsPage.test.tsx", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import { mount, ReactWrapper } from \"enzyme\";\n+import FacetedSearchSettingsPage from \"../../../tsrc/settings/Search/facetedsearch/FacetedSearchSettingsPage\";\n+import * as FacetedSearchSettingsModule from \"../../../tsrc/settings/Search/facetedsearch/FacetedSearchSettingsModule\";\n+import { NavigationGuardProps } from \"../../../tsrc/components/NavigationGuard\";\n+import { act } from \"react-dom/test-utils\";\n+import FacetDialog from \"../../../tsrc/settings/Search/facetedsearch/FacetDialog\";\n+import MessageInfo from \"../../../tsrc/components/MessageInfo\";\n+import MessageDialog from \"../../../tsrc/components/MessageDialog\";\n+\n+const mockFacets: FacetedSearchSettingsModule.Facet[] = [\n+  {\n+    id: 1,\n+    name: \"mocked facet1\",\n+    schemaNode: \"item/name\",\n+    maxResults: 1,\n+    orderIndex: 1,\n+  },\n+  {\n+    id: 2,\n+    name: \"mocked facet3\",\n+    schemaNode: \"item/age\",\n+    maxResults: 2,\n+    orderIndex: 2,\n+  },\n+];\n+\n+// This test does not need NavigationGuard which is part of the Setting page template.\n+jest.mock(\"../../../tsrc/components/NavigationGuard\", () => ({\n+  NavigationGuard: (props: NavigationGuardProps) => {\n+    return <div />;\n+  },\n+}));\n+\n+const mockGetFacetsFromServer = jest.spyOn(\n+  FacetedSearchSettingsModule,\n+  \"getFacetsFromServer\"\n+);\n+const mockBatchDelete = jest.spyOn(FacetedSearchSettingsModule, \"batchDelete\");\n+const mockBatchUpdateOrAdd = jest.spyOn(\n+  FacetedSearchSettingsModule,\n+  \"batchUpdateOrAdd\"\n+);\n+\n+describe(\"<FacetedSearchSettingsPage />\", () => {\n+  let component: ReactWrapper;\n+  beforeEach(async () => {\n+    const getFacetsPromise = mockGetFacetsFromServer.mockImplementation(() =>\n+      Promise.resolve(mockFacets)\n+    );\n+    component = mount(<FacetedSearchSettingsPage updateTemplate={jest.fn()} />);\n+    await act(async () => {\n+      await getFacetsPromise;\n+    });\n+    component.update();\n+  });\n+  afterEach(() => jest.clearAllMocks());\n+\n+  describe(\"when the page is mounted\", () => {\n+    const getListItems = () => component.find(\".MuiListItem-container\");\n+    const getSaveButton = () => component.find(\"#_saveButton\").hostNodes();\n+    const deleteFacet = () => {\n+      const deleteButton = getListItems().at(0).find(\"button\").at(1);\n+      deleteButton.simulate(\"click\");\n+    };\n+    const updateFacet = (addOrEdit: boolean) => {\n+      const fields = component.find(\"input\");\n+      fields.at(0).simulate(\"change\", {\n+        target: { value: addOrEdit ? \"new facet\" : \"updated facet\" },\n+      });\n+      fields.at(1).simulate(\"change\", { target: { value: \"item/name/first\" } });\n+      const okButton = component\n+        .findWhere(\n+          (node) =>\n+            node.text() === (addOrEdit ? \"Add\" : \"OK\") &&\n+            node.type() === \"button\"\n+        )\n+        .hostNodes();\n+      okButton.simulate(\"click\");\n+    };\n+    const openDialog = (addOrEdit: boolean) => {\n+      let button: ReactWrapper;\n+      if (addOrEdit) {\n+        button = component.find(\".MuiCardActions-root button\");\n+      } else {\n+        button = getListItems().at(0).find(\"button\").at(0);\n+      }\n+      button.simulate(\"click\");\n+    };\n+\n+    it(\"should fetch facets\", () => {\n+      expect(\n+        FacetedSearchSettingsModule.getFacetsFromServer\n+      ).toHaveBeenCalledTimes(1);\n+    });\n+\n+    it(\"should display a list of facets\", () => {\n+      expect(getListItems()).toHaveLength(2);\n+    });\n+\n+    describe(\"when click an Edit button\", () => {\n+      it(\"should show a dialog\", async () => {\n+        openDialog(false);\n+        expect(component.find(FacetDialog).prop(\"open\")).toBeTruthy();\n+      });\n+    });\n+\n+    describe(\"when click the Add button\", () => {\n+      it(\"should show a dialog\", async () => {\n+        openDialog(true);\n+        expect(component.find(FacetDialog).prop(\"open\")).toBeTruthy();\n+      });\n+    });\n+\n+    describe(\"when click a delete button\", () => {\n+      it(\"should remove a facet from the list and enable the Save button\", () => {\n+        deleteFacet();\n+        const items = getListItems();\n+        expect(items).toHaveLength(1);\n+        expect(getSaveButton().prop(\"disabled\")).toBeFalsy();\n+      });\n+    });\n+\n+    describe(\"when edit a facet through the dialog\", () => {\n+      it(\"should show the updated facet and enable the Save button\", () => {\n+        openDialog(false);\n+        updateFacet(false);\n+        const items = getListItems();\n+        expect(items).toHaveLength(2);\n+        expect(items.at(0).text()).toContain(\"updated facet\");\n+        expect(getSaveButton().prop(\"disabled\")).toBeFalsy();\n+      });\n+    });\n+\n+    describe(\"when add a new facet through the dialog\", () => {\n+      it(\"should add the facet to the list and enable the Save button\", () => {\n+        openDialog(true);\n+        updateFacet(true);\n+        const items = getListItems();\n+        expect(items).toHaveLength(3);\n+        expect(items.at(2).text()).toContain(\"new facet\");\n+        expect(getSaveButton().prop(\"disabled\")).toBeFalsy();\n+      });\n+    });\n+\n+    describe(\"when the Save button is enabled and click it\", () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "438e4d8fd5a112737f9980910272eca0d5895bb5"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTMxNTcxOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsPage.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMzo1ODo0M1rOGVHjBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMzo1ODo0M1rOGVHjBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc5NjkzMg==", "bodyText": "Rather than having this external variable errorMessages, why not simply return the messages from your updatePromise and deletePromise.\nRoughly:\nconst updatePromise : Promise<string[]> = listOfUpdates.length\n  ? batchUpdateOrAdd(listOfUpdates)\n  : Promise.resovle([]);\n\n// same for deletePromise\n\nPromise.all([updatePromise, deletePromise])\n  then((messages) => {\n    const allMessages = messages.flat();\n    if( allMessages.length > 0 ) {\n// etc. etc.", "url": "https://github.com/openequella/openEQUELLA/pull/1728#discussion_r424796932", "createdAt": "2020-05-13T23:58:43Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsPage.tsx", "diffHunk": "@@ -99,24 +109,40 @@ const FacetedSearchSettingsPage = ({ updateTemplate }: TemplateUpdateProps) => {\n    * Get facets from the Server and add boolean flags on them.\n    */\n   const getFacets = () => {\n-    getFacetsFromServer().then((facets) => {\n-      setFacets(\n-        facets.map((facet) => {\n-          return { ...facet, updated: false, deleted: false };\n-        })\n-      );\n-    });\n+    getFacetsFromServer()\n+      .then((facets) =>\n+        setFacets(\n+          facets.map((facet) => {\n+            return { ...facet, updated: false, deleted: false };\n+          })\n+        )\n+      )\n+      .catch((error: Error) => handleError(error));\n   };\n \n   /**\n    * Save updated/deleted facets to the Server.\n    * Show the message dialog if any error message is received otherwise show snackbar.\n    */\n   const save = () => {\n-    batchUpdateOrAdd(listOfUpdates)\n-      .then((messages) => {\n-        if (messages.length > 0) {\n-          setResultMessagesMessages(messages);\n+    const errorMessages: string[] = [];\n+\n+    const updatePromise: Promise<any> = listOfUpdates.length\n+      ? batchUpdateOrAdd(listOfUpdates).then((messages: string[]) =>\n+          errorMessages.push(...messages)\n+        )\n+      : Promise.resolve();\n+\n+    const deletePromise: Promise<any> = listOfDeleted.length\n+      ? batchDelete(\n+          listOfDeleted.map((facet) => facet.id!.toString())\n+        ).then((messages: string[]) => errorMessages.push(...messages))\n+      : Promise.resolve();\n+\n+    Promise.all([updatePromise, deletePromise])\n+      .then(() => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "438e4d8fd5a112737f9980910272eca0d5895bb5"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTMyNjc2OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsPage.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMDowNTowNVrOGVHqBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMDowNTowNVrOGVHqBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc5ODcyNQ==", "bodyText": "I don't believe this needs to be in state. (Also, if it does this name is getting shadowed in many functions below and is rather confusing.)\nIf I understand correctly, this is a new facet that is being created via the create facet dialog - and as a result could just be returned in the provided function for the onclick handler. Probably easier to discuss in chat/zoom.", "url": "https://github.com/openequella/openEQUELLA/pull/1728#discussion_r424798725", "createdAt": "2020-05-14T00:05:05Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsPage.tsx", "diffHunk": "@@ -78,11 +84,15 @@ const FacetedSearchSettingsPage = ({ updateTemplate }: TemplateUpdateProps) => {\n   const [resultMessages, setResultMessagesMessages] = useState<string[]>([]);\n   const [showEditingDialog, setShowEditingDialog] = useState<boolean>(false);\n   const [facets, setFacets] = useState<FacetWithFlags[]>([]);\n+  const [facet, setFacet] = useState<FacetWithFlags | undefined>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "438e4d8fd5a112737f9980910272eca0d5895bb5"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1446, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}