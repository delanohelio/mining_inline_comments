{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4MDY3OTc0", "number": 2040, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMDo1ODo1N1rOEODzRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNjoxMjo0NVrOEOHghw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTc3Nzk2OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMDo1ODo1N1rOGxAF4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMjoxMTo1OFrOGxBXQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAzNDkxMg==", "bodyText": "This seems to duplicate the above test.", "url": "https://github.com/openequella/openEQUELLA/pull/2040#discussion_r454034912", "createdAt": "2020-07-14T00:58:57Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -177,4 +177,43 @@ describe(\"<SearchPage/>\", () => {\n     component.update();\n     expect(component.find(CircularProgress)).toHaveLength(0);\n   });\n+\n+  it(\"should debounce and append an * when not in raw search mode\", async () => {\n+    await querySearch(\"new query\");\n+    expect(searchPromise).toHaveBeenLastCalledWith({\n+      ...defaultSearchOptions,\n+      query: \"new query*\",\n+    });\n+  });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0afd432e2e490bb7beec4ea32612e883a2f78cf5"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA1NTc0Nw==", "bodyText": "Yup, so it does. Removed.", "url": "https://github.com/openequella/openEQUELLA/pull/2040#discussion_r454055747", "createdAt": "2020-07-14T02:11:58Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -177,4 +177,43 @@ describe(\"<SearchPage/>\", () => {\n     component.update();\n     expect(component.find(CircularProgress)).toHaveLength(0);\n   });\n+\n+  it(\"should debounce and append an * when not in raw search mode\", async () => {\n+    await querySearch(\"new query\");\n+    expect(searchPromise).toHaveBeenLastCalledWith({\n+      ...defaultSearchOptions,\n+      query: \"new query*\",\n+    });\n+  });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAzNDkxMg=="}, "originalCommit": {"oid": "0afd432e2e490bb7beec4ea32612e883a2f78cf5"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTc4NzYwOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMTowMzo1OFrOGxALUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMjoxMjo0MlrOGxBYCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAzNjMwNg==", "bodyText": "I wonder if we should start putting IDs on these controls we wish to use in tests. We're doing this a bit, but it seems fragile. Further, we also have a repetitions now with with the string on line 190.\nCould you perhaps add an ID for the raw mode switch, and push the duplicate string into a constant?", "url": "https://github.com/openequella/openEQUELLA/pull/2040#discussion_r454036306", "createdAt": "2020-07-14T01:03:58Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -177,4 +177,43 @@ describe(\"<SearchPage/>\", () => {\n     component.update();\n     expect(component.find(CircularProgress)).toHaveLength(0);\n   });\n+\n+  it(\"should debounce and append an * when not in raw search mode\", async () => {\n+    await querySearch(\"new query\");\n+    expect(searchPromise).toHaveBeenLastCalledWith({\n+      ...defaultSearchOptions,\n+      query: \"new query*\",\n+    });\n+  });\n+\n+  it(\"should not debounce and send query as-is when in raw search mode\", async () => {\n+    const input = component.find(\"input.MuiInputBase-input\");\n+    const rawModeSwitch = component.find(\"input[type='checkbox']\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0afd432e2e490bb7beec4ea32612e883a2f78cf5"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA1NTk0NQ==", "bodyText": "Done. I still need to refer to the tagname too as adding an ID to a MUI control makes some of it's wrappers share the ID.", "url": "https://github.com/openequella/openEQUELLA/pull/2040#discussion_r454055945", "createdAt": "2020-07-14T02:12:42Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -177,4 +177,43 @@ describe(\"<SearchPage/>\", () => {\n     component.update();\n     expect(component.find(CircularProgress)).toHaveLength(0);\n   });\n+\n+  it(\"should debounce and append an * when not in raw search mode\", async () => {\n+    await querySearch(\"new query\");\n+    expect(searchPromise).toHaveBeenLastCalledWith({\n+      ...defaultSearchOptions,\n+      query: \"new query*\",\n+    });\n+  });\n+\n+  it(\"should not debounce and send query as-is when in raw search mode\", async () => {\n+    const input = component.find(\"input.MuiInputBase-input\");\n+    const rawModeSwitch = component.find(\"input[type='checkbox']\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAzNjMwNg=="}, "originalCommit": {"oid": "0afd432e2e490bb7beec4ea32612e883a2f78cf5"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTgwNTA3OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMToxMzoxMlrOGxAVaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMjoxMjo1MFrOGxBYLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAzODg5MQ==", "bodyText": "Again, good to put magic numbers into constants.", "url": "https://github.com/openequella/openEQUELLA/pull/2040#discussion_r454038891", "createdAt": "2020-07-14T01:13:12Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -177,4 +177,43 @@ describe(\"<SearchPage/>\", () => {\n     component.update();\n     expect(component.find(CircularProgress)).toHaveLength(0);\n   });\n+\n+  it(\"should debounce and append an * when not in raw search mode\", async () => {\n+    await querySearch(\"new query\");\n+    expect(searchPromise).toHaveBeenLastCalledWith({\n+      ...defaultSearchOptions,\n+      query: \"new query*\",\n+    });\n+  });\n+\n+  it(\"should not debounce and send query as-is when in raw search mode\", async () => {\n+    const input = component.find(\"input.MuiInputBase-input\");\n+    const rawModeSwitch = component.find(\"input[type='checkbox']\");\n+    await awaitAct(() => {\n+      //turn raw search mode on, add a search query and hit enter\n+      rawModeSwitch.simulate(\"change\", { target: { checked: true } });\n+      jest.advanceTimersByTime(1000);\n+      querySearch(\"raw search test\");\n+      input.simulate(\"keyDown\", {\n+        keyCode: 13,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0afd432e2e490bb7beec4ea32612e883a2f78cf5"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA1NTk4MQ==", "bodyText": "Fixed", "url": "https://github.com/openequella/openEQUELLA/pull/2040#discussion_r454055981", "createdAt": "2020-07-14T02:12:50Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -177,4 +177,43 @@ describe(\"<SearchPage/>\", () => {\n     component.update();\n     expect(component.find(CircularProgress)).toHaveLength(0);\n   });\n+\n+  it(\"should debounce and append an * when not in raw search mode\", async () => {\n+    await querySearch(\"new query\");\n+    expect(searchPromise).toHaveBeenLastCalledWith({\n+      ...defaultSearchOptions,\n+      query: \"new query*\",\n+    });\n+  });\n+\n+  it(\"should not debounce and send query as-is when in raw search mode\", async () => {\n+    const input = component.find(\"input.MuiInputBase-input\");\n+    const rawModeSwitch = component.find(\"input[type='checkbox']\");\n+    await awaitAct(() => {\n+      //turn raw search mode on, add a search query and hit enter\n+      rawModeSwitch.simulate(\"change\", { target: { checked: true } });\n+      jest.advanceTimersByTime(1000);\n+      querySearch(\"raw search test\");\n+      input.simulate(\"keyDown\", {\n+        keyCode: 13,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAzODg5MQ=="}, "originalCommit": {"oid": "0afd432e2e490bb7beec4ea32612e883a2f78cf5"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTgwNzY3OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMToxNDozNFrOGxAW8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMjoxMzozMFrOGxBY2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAzOTI4MA==", "bodyText": "Being that these are mutually exclusive, we only need one.", "url": "https://github.com/openequella/openEQUELLA/pull/2040#discussion_r454039280", "createdAt": "2020-07-14T01:14:34Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -177,4 +177,43 @@ describe(\"<SearchPage/>\", () => {\n     component.update();\n     expect(component.find(CircularProgress)).toHaveLength(0);\n   });\n+\n+  it(\"should debounce and append an * when not in raw search mode\", async () => {\n+    await querySearch(\"new query\");\n+    expect(searchPromise).toHaveBeenLastCalledWith({\n+      ...defaultSearchOptions,\n+      query: \"new query*\",\n+    });\n+  });\n+\n+  it(\"should not debounce and send query as-is when in raw search mode\", async () => {\n+    const input = component.find(\"input.MuiInputBase-input\");\n+    const rawModeSwitch = component.find(\"input[type='checkbox']\");\n+    await awaitAct(() => {\n+      //turn raw search mode on, add a search query and hit enter\n+      rawModeSwitch.simulate(\"change\", { target: { checked: true } });\n+      jest.advanceTimersByTime(1000);\n+      querySearch(\"raw search test\");\n+      input.simulate(\"keyDown\", {\n+        keyCode: 13,\n+      });\n+      jest.advanceTimersByTime(1000);\n+    });\n+\n+    //assert that the simple search wildcard was not appended\n+    expect(searchPromise).not.toHaveBeenLastCalledWith({\n+      ...defaultSearchOptions,\n+      query: \"raw search test*\",\n+    });\n+    //assert that the query was passed in as-is\n+    expect(searchPromise).toHaveBeenLastCalledWith({\n+      ...defaultSearchOptions,\n+      query: \"raw search test\",\n+    });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0afd432e2e490bb7beec4ea32612e883a2f78cf5"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA1NjE1Mw==", "bodyText": "Removed the .not call.", "url": "https://github.com/openequella/openEQUELLA/pull/2040#discussion_r454056153", "createdAt": "2020-07-14T02:13:30Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -177,4 +177,43 @@ describe(\"<SearchPage/>\", () => {\n     component.update();\n     expect(component.find(CircularProgress)).toHaveLength(0);\n   });\n+\n+  it(\"should debounce and append an * when not in raw search mode\", async () => {\n+    await querySearch(\"new query\");\n+    expect(searchPromise).toHaveBeenLastCalledWith({\n+      ...defaultSearchOptions,\n+      query: \"new query*\",\n+    });\n+  });\n+\n+  it(\"should not debounce and send query as-is when in raw search mode\", async () => {\n+    const input = component.find(\"input.MuiInputBase-input\");\n+    const rawModeSwitch = component.find(\"input[type='checkbox']\");\n+    await awaitAct(() => {\n+      //turn raw search mode on, add a search query and hit enter\n+      rawModeSwitch.simulate(\"change\", { target: { checked: true } });\n+      jest.advanceTimersByTime(1000);\n+      querySearch(\"raw search test\");\n+      input.simulate(\"keyDown\", {\n+        keyCode: 13,\n+      });\n+      jest.advanceTimersByTime(1000);\n+    });\n+\n+    //assert that the simple search wildcard was not appended\n+    expect(searchPromise).not.toHaveBeenLastCalledWith({\n+      ...defaultSearchOptions,\n+      query: \"raw search test*\",\n+    });\n+    //assert that the query was passed in as-is\n+    expect(searchPromise).toHaveBeenLastCalledWith({\n+      ...defaultSearchOptions,\n+      query: \"raw search test\",\n+    });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAzOTI4MA=="}, "originalCommit": {"oid": "0afd432e2e490bb7beec4ea32612e883a2f78cf5"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTgzNzM5OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/SearchBar.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMToyOToxNlrOGxAn5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMjoxMzo0NVrOGxBZGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA0MzYyMA==", "bodyText": "It'd be good to have this small bit of repeated logic centralised - seeing it's rather key to expected functionality. If there was a function like:\nconst callOnChange = (query: string) =>\n  onChange(query + (rawSearchMode ? \"\" : \"*\"));\n... then you could simply call that function in this case block, so:\ncase ENTER_KEY_CODE:\n   event.preventDefault();\n  callOnChange(query);\n... and obviously you'd use that same function up in your debounce call.", "url": "https://github.com/openequella/openEQUELLA/pull/2040#discussion_r454043620", "createdAt": "2020-07-14T01:29:16Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/SearchBar.tsx", "diffHunk": "@@ -37,30 +46,44 @@ interface SearchBarProps {\n  * This component does not handle the API query itself,\n  * that should be done in the parent component with the onChange callback.\n  */\n-export default function SearchBar({ onChange }: SearchBarProps) {\n+export default function SearchBar({ onChange, rawSearchMode }: SearchBarProps) {\n   const [query, setQuery] = React.useState<string>(\"\");\n-\n+  const strings = languageStrings.searchpage;\n   /**\n    * uses lodash to debounce the search query by half a second\n    */\n   const delayedQuery = useCallback(\n-    debounce((query: string) => onChange(query), 500),\n+    debounce((query: string) => onChange(query + \"*\"), 500),\n     [onChange]\n   );\n \n+  const handleKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n+    switch (event.keyCode) {\n+      case ESCAPE_KEY_CODE:\n+        event.preventDefault();\n+        handleQueryChange(\"\");\n+        break;\n+      case ENTER_KEY_CODE:\n+        event.preventDefault();\n+        if (rawSearchMode) {\n+          onChange(query);\n+        } else {\n+          onChange(query + \"*\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0afd432e2e490bb7beec4ea32612e883a2f78cf5"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA1NjIxNg==", "bodyText": "Fixed", "url": "https://github.com/openequella/openEQUELLA/pull/2040#discussion_r454056216", "createdAt": "2020-07-14T02:13:45Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/SearchBar.tsx", "diffHunk": "@@ -37,30 +46,44 @@ interface SearchBarProps {\n  * This component does not handle the API query itself,\n  * that should be done in the parent component with the onChange callback.\n  */\n-export default function SearchBar({ onChange }: SearchBarProps) {\n+export default function SearchBar({ onChange, rawSearchMode }: SearchBarProps) {\n   const [query, setQuery] = React.useState<string>(\"\");\n-\n+  const strings = languageStrings.searchpage;\n   /**\n    * uses lodash to debounce the search query by half a second\n    */\n   const delayedQuery = useCallback(\n-    debounce((query: string) => onChange(query), 500),\n+    debounce((query: string) => onChange(query + \"*\"), 500),\n     [onChange]\n   );\n \n+  const handleKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n+    switch (event.keyCode) {\n+      case ESCAPE_KEY_CODE:\n+        event.preventDefault();\n+        handleQueryChange(\"\");\n+        break;\n+      case ENTER_KEY_CODE:\n+        event.preventDefault();\n+        if (rawSearchMode) {\n+          onChange(query);\n+        } else {\n+          onChange(query + \"*\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA0MzYyMA=="}, "originalCommit": {"oid": "0afd432e2e490bb7beec4ea32612e883a2f78cf5"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTg0MzE4OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMTozMjoxN1rOGxArWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMTozMjoxN1rOGxArWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA0NDUwNQ==", "bodyText": "I feel this expect is not needed because the expect below can ensure the query does not get a * appended.", "url": "https://github.com/openequella/openEQUELLA/pull/2040#discussion_r454044505", "createdAt": "2020-07-14T01:32:17Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -177,4 +177,43 @@ describe(\"<SearchPage/>\", () => {\n     component.update();\n     expect(component.find(CircularProgress)).toHaveLength(0);\n   });\n+\n+  it(\"should debounce and append an * when not in raw search mode\", async () => {\n+    await querySearch(\"new query\");\n+    expect(searchPromise).toHaveBeenLastCalledWith({\n+      ...defaultSearchOptions,\n+      query: \"new query*\",\n+    });\n+  });\n+\n+  it(\"should not debounce and send query as-is when in raw search mode\", async () => {\n+    const input = component.find(\"input.MuiInputBase-input\");\n+    const rawModeSwitch = component.find(\"input[type='checkbox']\");\n+    await awaitAct(() => {\n+      //turn raw search mode on, add a search query and hit enter\n+      rawModeSwitch.simulate(\"change\", { target: { checked: true } });\n+      jest.advanceTimersByTime(1000);\n+      querySearch(\"raw search test\");\n+      input.simulate(\"keyDown\", {\n+        keyCode: 13,\n+      });\n+      jest.advanceTimersByTime(1000);\n+    });\n+\n+    //assert that the simple search wildcard was not appended\n+    expect(searchPromise).not.toHaveBeenLastCalledWith({", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0afd432e2e490bb7beec4ea32612e883a2f78cf5"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTg0NjU3OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMTozNDoyMFrOGxAtcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMTozNDoyMFrOGxAtcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA0NTA0Mg==", "bodyText": "I would expect function SearchModule.searchItems rather than mocked promise searchPromise to have been called here.", "url": "https://github.com/openequella/openEQUELLA/pull/2040#discussion_r454045042", "createdAt": "2020-07-14T01:34:20Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -177,4 +177,43 @@ describe(\"<SearchPage/>\", () => {\n     component.update();\n     expect(component.find(CircularProgress)).toHaveLength(0);\n   });\n+\n+  it(\"should debounce and append an * when not in raw search mode\", async () => {\n+    await querySearch(\"new query\");\n+    expect(searchPromise).toHaveBeenLastCalledWith({\n+      ...defaultSearchOptions,\n+      query: \"new query*\",\n+    });\n+  });\n+\n+  it(\"should not debounce and send query as-is when in raw search mode\", async () => {\n+    const input = component.find(\"input.MuiInputBase-input\");\n+    const rawModeSwitch = component.find(\"input[type='checkbox']\");\n+    await awaitAct(() => {\n+      //turn raw search mode on, add a search query and hit enter\n+      rawModeSwitch.simulate(\"change\", { target: { checked: true } });\n+      jest.advanceTimersByTime(1000);\n+      querySearch(\"raw search test\");\n+      input.simulate(\"keyDown\", {\n+        keyCode: 13,\n+      });\n+      jest.advanceTimersByTime(1000);\n+    });\n+\n+    //assert that the simple search wildcard was not appended\n+    expect(searchPromise).not.toHaveBeenLastCalledWith({\n+      ...defaultSearchOptions,\n+      query: \"raw search test*\",\n+    });\n+    //assert that the query was passed in as-is\n+    expect(searchPromise).toHaveBeenLastCalledWith({", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0afd432e2e490bb7beec4ea32612e883a2f78cf5"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTg1MzA0OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMTozNzozMlrOGxAxKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMTozNzozMlrOGxAxKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA0NTk5Mw==", "bodyText": "This test case seems to be duplicated because debounce and append an * when not in raw search mode is the default behaviour so the test above already covers this.", "url": "https://github.com/openequella/openEQUELLA/pull/2040#discussion_r454045993", "createdAt": "2020-07-14T01:37:32Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -177,4 +177,43 @@ describe(\"<SearchPage/>\", () => {\n     component.update();\n     expect(component.find(CircularProgress)).toHaveLength(0);\n   });\n+\n+  it(\"should debounce and append an * when not in raw search mode\", async () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0afd432e2e490bb7beec4ea32612e883a2f78cf5"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTg1NTM0OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMTozODo1NFrOGxAygw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNjozNTozM1rOGxGIsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA0NjMzOQ==", "bodyText": "Interestingly, this test can pass when I ran the whole test, but failed if I only ran it.\nAlso, because we are not using the fake timer for this test, I doubt if advanceTimersByTime really works.\nIf raw search disregards debounce, we probably do not worry about timer.", "url": "https://github.com/openequella/openEQUELLA/pull/2040#discussion_r454046339", "createdAt": "2020-07-14T01:38:54Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -177,4 +177,43 @@ describe(\"<SearchPage/>\", () => {\n     component.update();\n     expect(component.find(CircularProgress)).toHaveLength(0);\n   });\n+\n+  it(\"should debounce and append an * when not in raw search mode\", async () => {\n+    await querySearch(\"new query\");\n+    expect(searchPromise).toHaveBeenLastCalledWith({\n+      ...defaultSearchOptions,\n+      query: \"new query*\",\n+    });\n+  });\n+\n+  it(\"should not debounce and send query as-is when in raw search mode\", async () => {\n+    const input = component.find(\"input.MuiInputBase-input\");\n+    const rawModeSwitch = component.find(\"input[type='checkbox']\");\n+    await awaitAct(() => {\n+      //turn raw search mode on, add a search query and hit enter\n+      rawModeSwitch.simulate(\"change\", { target: { checked: true } });\n+      jest.advanceTimersByTime(1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0afd432e2e490bb7beec4ea32612e883a2f78cf5"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA2MzMwNA==", "bodyText": "It was because advanceTimersByTime had been called before useFakeTimers(\"modern\"). To fix this, I've simply put that line in the beforeEach and removed it from elsewhere in the test.", "url": "https://github.com/openequella/openEQUELLA/pull/2040#discussion_r454063304", "createdAt": "2020-07-14T02:39:09Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -177,4 +177,43 @@ describe(\"<SearchPage/>\", () => {\n     component.update();\n     expect(component.find(CircularProgress)).toHaveLength(0);\n   });\n+\n+  it(\"should debounce and append an * when not in raw search mode\", async () => {\n+    await querySearch(\"new query\");\n+    expect(searchPromise).toHaveBeenLastCalledWith({\n+      ...defaultSearchOptions,\n+      query: \"new query*\",\n+    });\n+  });\n+\n+  it(\"should not debounce and send query as-is when in raw search mode\", async () => {\n+    const input = component.find(\"input.MuiInputBase-input\");\n+    const rawModeSwitch = component.find(\"input[type='checkbox']\");\n+    await awaitAct(() => {\n+      //turn raw search mode on, add a search query and hit enter\n+      rawModeSwitch.simulate(\"change\", { target: { checked: true } });\n+      jest.advanceTimersByTime(1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA0NjMzOQ=="}, "originalCommit": {"oid": "0afd432e2e490bb7beec4ea32612e883a2f78cf5"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDExMTA1OQ==", "bodyText": "Sorry I still don't understand why we need fake timer for this one because debounce does not get involved in this use case. Once we turn on raw search, no search is triggered until enter is pressed.\nPlease correct me if I am wrong.\nWhat this test is supposed to do, in my mind, are:\n\nturn on the switch; and\nchange the query value; and\npress enter; and\nexpect.\n\nThe third point should be wrap inside a act because it updates Search page state.", "url": "https://github.com/openequella/openEQUELLA/pull/2040#discussion_r454111059", "createdAt": "2020-07-14T05:31:02Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -177,4 +177,43 @@ describe(\"<SearchPage/>\", () => {\n     component.update();\n     expect(component.find(CircularProgress)).toHaveLength(0);\n   });\n+\n+  it(\"should debounce and append an * when not in raw search mode\", async () => {\n+    await querySearch(\"new query\");\n+    expect(searchPromise).toHaveBeenLastCalledWith({\n+      ...defaultSearchOptions,\n+      query: \"new query*\",\n+    });\n+  });\n+\n+  it(\"should not debounce and send query as-is when in raw search mode\", async () => {\n+    const input = component.find(\"input.MuiInputBase-input\");\n+    const rawModeSwitch = component.find(\"input[type='checkbox']\");\n+    await awaitAct(() => {\n+      //turn raw search mode on, add a search query and hit enter\n+      rawModeSwitch.simulate(\"change\", { target: { checked: true } });\n+      jest.advanceTimersByTime(1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA0NjMzOQ=="}, "originalCommit": {"oid": "0afd432e2e490bb7beec4ea32612e883a2f78cf5"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDExMzQwNg==", "bodyText": "Without the waits the switch and change to the query value seem to be too close together - we still get the debounce call. We need the wait to ensure that state has been update and percolated through after turning on the switch.", "url": "https://github.com/openequella/openEQUELLA/pull/2040#discussion_r454113406", "createdAt": "2020-07-14T05:38:39Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -177,4 +177,43 @@ describe(\"<SearchPage/>\", () => {\n     component.update();\n     expect(component.find(CircularProgress)).toHaveLength(0);\n   });\n+\n+  it(\"should debounce and append an * when not in raw search mode\", async () => {\n+    await querySearch(\"new query\");\n+    expect(searchPromise).toHaveBeenLastCalledWith({\n+      ...defaultSearchOptions,\n+      query: \"new query*\",\n+    });\n+  });\n+\n+  it(\"should not debounce and send query as-is when in raw search mode\", async () => {\n+    const input = component.find(\"input.MuiInputBase-input\");\n+    const rawModeSwitch = component.find(\"input[type='checkbox']\");\n+    await awaitAct(() => {\n+      //turn raw search mode on, add a search query and hit enter\n+      rawModeSwitch.simulate(\"change\", { target: { checked: true } });\n+      jest.advanceTimersByTime(1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA0NjMzOQ=="}, "originalCommit": {"oid": "0afd432e2e490bb7beec4ea32612e883a2f78cf5"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEzMjA4Mg==", "bodyText": "I have played with Ian this test and we think we can refactor this test a bit.\nWe just need to wait for these three actions without the use of fake timer.\nawait awaitAct( () => rawModeSwitch.simulate(\"change\", { target: { checked: true } }) );\nawait awaitAct( () => input.simulate(\"change\", { target: { value: \"raw search test\" } }));\nawait awaitAct( () => input.simulate(\"keyDown\", {\n  keyCode: ENTER_KEYCODE,\n}));", "url": "https://github.com/openequella/openEQUELLA/pull/2040#discussion_r454132082", "createdAt": "2020-07-14T06:31:03Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -177,4 +177,43 @@ describe(\"<SearchPage/>\", () => {\n     component.update();\n     expect(component.find(CircularProgress)).toHaveLength(0);\n   });\n+\n+  it(\"should debounce and append an * when not in raw search mode\", async () => {\n+    await querySearch(\"new query\");\n+    expect(searchPromise).toHaveBeenLastCalledWith({\n+      ...defaultSearchOptions,\n+      query: \"new query*\",\n+    });\n+  });\n+\n+  it(\"should not debounce and send query as-is when in raw search mode\", async () => {\n+    const input = component.find(\"input.MuiInputBase-input\");\n+    const rawModeSwitch = component.find(\"input[type='checkbox']\");\n+    await awaitAct(() => {\n+      //turn raw search mode on, add a search query and hit enter\n+      rawModeSwitch.simulate(\"change\", { target: { checked: true } });\n+      jest.advanceTimersByTime(1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA0NjMzOQ=="}, "originalCommit": {"oid": "0afd432e2e490bb7beec4ea32612e883a2f78cf5"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEzMzkzNw==", "bodyText": "Oooh nice work that looks really good in comparison. I just tested it and it works great. Pushed.", "url": "https://github.com/openequella/openEQUELLA/pull/2040#discussion_r454133937", "createdAt": "2020-07-14T06:35:33Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -177,4 +177,43 @@ describe(\"<SearchPage/>\", () => {\n     component.update();\n     expect(component.find(CircularProgress)).toHaveLength(0);\n   });\n+\n+  it(\"should debounce and append an * when not in raw search mode\", async () => {\n+    await querySearch(\"new query\");\n+    expect(searchPromise).toHaveBeenLastCalledWith({\n+      ...defaultSearchOptions,\n+      query: \"new query*\",\n+    });\n+  });\n+\n+  it(\"should not debounce and send query as-is when in raw search mode\", async () => {\n+    const input = component.find(\"input.MuiInputBase-input\");\n+    const rawModeSwitch = component.find(\"input[type='checkbox']\");\n+    await awaitAct(() => {\n+      //turn raw search mode on, add a search query and hit enter\n+      rawModeSwitch.simulate(\"change\", { target: { checked: true } });\n+      jest.advanceTimersByTime(1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA0NjMzOQ=="}, "originalCommit": {"oid": "0afd432e2e490bb7beec4ea32612e883a2f78cf5"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTg4Mjc3OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/SearchBar.tsx", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMTo1MzoyM1rOGxBCmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNjoyNzoyMVrOGxF7zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA1MDQ1OQ==", "bodyText": "I wonder if onChange will be called twice. If I am not in raw search mode and I press enter, onChange is called, and then after 500ms the debounced one is triggered.", "url": "https://github.com/openequella/openEQUELLA/pull/2040#discussion_r454050459", "createdAt": "2020-07-14T01:53:23Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/SearchBar.tsx", "diffHunk": "@@ -37,30 +46,44 @@ interface SearchBarProps {\n  * This component does not handle the API query itself,\n  * that should be done in the parent component with the onChange callback.\n  */\n-export default function SearchBar({ onChange }: SearchBarProps) {\n+export default function SearchBar({ onChange, rawSearchMode }: SearchBarProps) {\n   const [query, setQuery] = React.useState<string>(\"\");\n-\n+  const strings = languageStrings.searchpage;\n   /**\n    * uses lodash to debounce the search query by half a second\n    */\n   const delayedQuery = useCallback(\n-    debounce((query: string) => onChange(query), 500),\n+    debounce((query: string) => onChange(query + \"*\"), 500),\n     [onChange]\n   );\n \n+  const handleKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n+    switch (event.keyCode) {\n+      case ESCAPE_KEY_CODE:\n+        event.preventDefault();\n+        handleQueryChange(\"\");\n+        break;\n+      case ENTER_KEY_CODE:\n+        event.preventDefault();\n+        if (rawSearchMode) {\n+          onChange(query);\n+        } else {\n+          onChange(query + \"*\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0afd432e2e490bb7beec4ea32612e883a2f78cf5"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA2NDI2Mw==", "bodyText": "In simple search mode, this is what happens.\nType a query, 500ms delay, onChange called\nPress enter, onChange called\nNo call after this.", "url": "https://github.com/openequella/openEQUELLA/pull/2040#discussion_r454064263", "createdAt": "2020-07-14T02:42:28Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/SearchBar.tsx", "diffHunk": "@@ -37,30 +46,44 @@ interface SearchBarProps {\n  * This component does not handle the API query itself,\n  * that should be done in the parent component with the onChange callback.\n  */\n-export default function SearchBar({ onChange }: SearchBarProps) {\n+export default function SearchBar({ onChange, rawSearchMode }: SearchBarProps) {\n   const [query, setQuery] = React.useState<string>(\"\");\n-\n+  const strings = languageStrings.searchpage;\n   /**\n    * uses lodash to debounce the search query by half a second\n    */\n   const delayedQuery = useCallback(\n-    debounce((query: string) => onChange(query), 500),\n+    debounce((query: string) => onChange(query + \"*\"), 500),\n     [onChange]\n   );\n \n+  const handleKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n+    switch (event.keyCode) {\n+      case ESCAPE_KEY_CODE:\n+        event.preventDefault();\n+        handleQueryChange(\"\");\n+        break;\n+      case ENTER_KEY_CODE:\n+        event.preventDefault();\n+        if (rawSearchMode) {\n+          onChange(query);\n+        } else {\n+          onChange(query + \"*\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA1MDQ1OQ=="}, "originalCommit": {"oid": "0afd432e2e490bb7beec4ea32612e883a2f78cf5"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA3OTkzOQ==", "bodyText": "Type a query, 500ms delay, onChange called  seems not working.", "url": "https://github.com/openequella/openEQUELLA/pull/2040#discussion_r454079939", "createdAt": "2020-07-14T03:40:13Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/SearchBar.tsx", "diffHunk": "@@ -37,30 +46,44 @@ interface SearchBarProps {\n  * This component does not handle the API query itself,\n  * that should be done in the parent component with the onChange callback.\n  */\n-export default function SearchBar({ onChange }: SearchBarProps) {\n+export default function SearchBar({ onChange, rawSearchMode }: SearchBarProps) {\n   const [query, setQuery] = React.useState<string>(\"\");\n-\n+  const strings = languageStrings.searchpage;\n   /**\n    * uses lodash to debounce the search query by half a second\n    */\n   const delayedQuery = useCallback(\n-    debounce((query: string) => onChange(query), 500),\n+    debounce((query: string) => onChange(query + \"*\"), 500),\n     [onChange]\n   );\n \n+  const handleKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n+    switch (event.keyCode) {\n+      case ESCAPE_KEY_CODE:\n+        event.preventDefault();\n+        handleQueryChange(\"\");\n+        break;\n+      case ENTER_KEY_CODE:\n+        event.preventDefault();\n+        if (rawSearchMode) {\n+          onChange(query);\n+        } else {\n+          onChange(query + \"*\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA1MDQ1OQ=="}, "originalCommit": {"oid": "0afd432e2e490bb7beec4ea32612e883a2f78cf5"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDExMjE3OA==", "bodyText": "It is? I just checked it.", "url": "https://github.com/openequella/openEQUELLA/pull/2040#discussion_r454112178", "createdAt": "2020-07-14T05:34:42Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/SearchBar.tsx", "diffHunk": "@@ -37,30 +46,44 @@ interface SearchBarProps {\n  * This component does not handle the API query itself,\n  * that should be done in the parent component with the onChange callback.\n  */\n-export default function SearchBar({ onChange }: SearchBarProps) {\n+export default function SearchBar({ onChange, rawSearchMode }: SearchBarProps) {\n   const [query, setQuery] = React.useState<string>(\"\");\n-\n+  const strings = languageStrings.searchpage;\n   /**\n    * uses lodash to debounce the search query by half a second\n    */\n   const delayedQuery = useCallback(\n-    debounce((query: string) => onChange(query), 500),\n+    debounce((query: string) => onChange(query + \"*\"), 500),\n     [onChange]\n   );\n \n+  const handleKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n+    switch (event.keyCode) {\n+      case ESCAPE_KEY_CODE:\n+        event.preventDefault();\n+        handleQueryChange(\"\");\n+        break;\n+      case ENTER_KEY_CODE:\n+        event.preventDefault();\n+        if (rawSearchMode) {\n+          onChange(query);\n+        } else {\n+          onChange(query + \"*\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA1MDQ1OQ=="}, "originalCommit": {"oid": "0afd432e2e490bb7beec4ea32612e883a2f78cf5"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEyNDg0Mg==", "bodyText": "No, I tried this when I thought simple search  = raw search.", "url": "https://github.com/openequella/openEQUELLA/pull/2040#discussion_r454124842", "createdAt": "2020-07-14T06:12:11Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/SearchBar.tsx", "diffHunk": "@@ -37,30 +46,44 @@ interface SearchBarProps {\n  * This component does not handle the API query itself,\n  * that should be done in the parent component with the onChange callback.\n  */\n-export default function SearchBar({ onChange }: SearchBarProps) {\n+export default function SearchBar({ onChange, rawSearchMode }: SearchBarProps) {\n   const [query, setQuery] = React.useState<string>(\"\");\n-\n+  const strings = languageStrings.searchpage;\n   /**\n    * uses lodash to debounce the search query by half a second\n    */\n   const delayedQuery = useCallback(\n-    debounce((query: string) => onChange(query), 500),\n+    debounce((query: string) => onChange(query + \"*\"), 500),\n     [onChange]\n   );\n \n+  const handleKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n+    switch (event.keyCode) {\n+      case ESCAPE_KEY_CODE:\n+        event.preventDefault();\n+        handleQueryChange(\"\");\n+        break;\n+      case ENTER_KEY_CODE:\n+        event.preventDefault();\n+        if (rawSearchMode) {\n+          onChange(query);\n+        } else {\n+          onChange(query + \"*\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA1MDQ1OQ=="}, "originalCommit": {"oid": "0afd432e2e490bb7beec4ea32612e883a2f78cf5"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEzMDYzOA==", "bodyText": "Ahh I getcha. Sorry for the confusion.\nRaw search on = raw search.\nRaw search off = simple search.", "url": "https://github.com/openequella/openEQUELLA/pull/2040#discussion_r454130638", "createdAt": "2020-07-14T06:27:21Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/SearchBar.tsx", "diffHunk": "@@ -37,30 +46,44 @@ interface SearchBarProps {\n  * This component does not handle the API query itself,\n  * that should be done in the parent component with the onChange callback.\n  */\n-export default function SearchBar({ onChange }: SearchBarProps) {\n+export default function SearchBar({ onChange, rawSearchMode }: SearchBarProps) {\n   const [query, setQuery] = React.useState<string>(\"\");\n-\n+  const strings = languageStrings.searchpage;\n   /**\n    * uses lodash to debounce the search query by half a second\n    */\n   const delayedQuery = useCallback(\n-    debounce((query: string) => onChange(query), 500),\n+    debounce((query: string) => onChange(query + \"*\"), 500),\n     [onChange]\n   );\n \n+  const handleKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n+    switch (event.keyCode) {\n+      case ESCAPE_KEY_CODE:\n+        event.preventDefault();\n+        handleQueryChange(\"\");\n+        break;\n+      case ENTER_KEY_CODE:\n+        event.preventDefault();\n+        if (rawSearchMode) {\n+          onChange(query);\n+        } else {\n+          onChange(query + \"*\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA1MDQ1OQ=="}, "originalCommit": {"oid": "0afd432e2e490bb7beec4ea32612e883a2f78cf5"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMjI4MzEyOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNToyNjozN1rOGxEpwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNjozODoyNlrOGxGM9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEwOTYzNA==", "bodyText": "We don't really need this for each test. Only tests in relation to debounce search need it,", "url": "https://github.com/openequella/openEQUELLA/pull/2040#discussion_r454109634", "createdAt": "2020-07-14T05:26:37Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -56,6 +56,7 @@ describe(\"<SearchPage/>\", () => {\n   let component: ReactWrapper<any, Readonly<{}>, React.Component<{}, {}, any>>;\n \n   beforeEach(async () => {\n+    jest.useFakeTimers(\"modern\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e28791b40cea86eab8152883389a4d219d8f3078"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDExMDc1Nw==", "bodyText": "Surely it makes sense to put it in just one place though?\nThere will be more tests in here later on and they will need this too. And just having this option set doesn't negatively affect anything. It just means its set up for async testing if it comes up.", "url": "https://github.com/openequella/openEQUELLA/pull/2040#discussion_r454110757", "createdAt": "2020-07-14T05:30:10Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -56,6 +56,7 @@ describe(\"<SearchPage/>\", () => {\n   let component: ReactWrapper<any, Readonly<{}>, React.Component<{}, {}, any>>;\n \n   beforeEach(async () => {\n+    jest.useFakeTimers(\"modern\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEwOTYzNA=="}, "originalCommit": {"oid": "e28791b40cea86eab8152883389a4d219d8f3078"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEzNDM0NQ==", "bodyText": "I am not sure if we would have more features requiring debounce. If no, I suggest we put jest.useFakeTimers(\"modern\") back to querySearch so the fake timer is available for tests that check the debounce query search.", "url": "https://github.com/openequella/openEQUELLA/pull/2040#discussion_r454134345", "createdAt": "2020-07-14T06:36:40Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -56,6 +56,7 @@ describe(\"<SearchPage/>\", () => {\n   let component: ReactWrapper<any, Readonly<{}>, React.Component<{}, {}, any>>;\n \n   beforeEach(async () => {\n+    jest.useFakeTimers(\"modern\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEwOTYzNA=="}, "originalCommit": {"oid": "e28791b40cea86eab8152883389a4d219d8f3078"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEzNTAyOA==", "bodyText": "Yep, I agree. My previous comment was based upon the assumption we needed them for non-debounce - like the test that was fixed in 99640bc.", "url": "https://github.com/openequella/openEQUELLA/pull/2040#discussion_r454135028", "createdAt": "2020-07-14T06:38:26Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -56,6 +56,7 @@ describe(\"<SearchPage/>\", () => {\n   let component: ReactWrapper<any, Readonly<{}>, React.Component<{}, {}, any>>;\n \n   beforeEach(async () => {\n+    jest.useFakeTimers(\"modern\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEwOTYzNA=="}, "originalCommit": {"oid": "e28791b40cea86eab8152883389a4d219d8f3078"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMjM4MzU1OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/SearchBar.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNjoxMjoxMlrOGxFlLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNjo1NzowM1rOGxGtWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEyNDg0NQ==", "bodyText": "Thanks for the tidy-up. Makes it nice and clear. \ud83d\udc4d\nBut I do now wonder if this should simply be calling delayedQuery() so as to avoid someone typing and then pressing enter resulting in two queries to the server. As each search results in an entry into the Audit Log in the DB, pressing enter could just spam the audit log.\nPlus if this is then done, things can be further changed, as the body of callOnChange could just be placed in delayedQuery.", "url": "https://github.com/openequella/openEQUELLA/pull/2040#discussion_r454124845", "createdAt": "2020-07-14T06:12:12Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/SearchBar.tsx", "diffHunk": "@@ -37,30 +46,40 @@ interface SearchBarProps {\n  * This component does not handle the API query itself,\n  * that should be done in the parent component with the onChange callback.\n  */\n-export default function SearchBar({ onChange }: SearchBarProps) {\n+export default function SearchBar({ onChange, rawSearchMode }: SearchBarProps) {\n   const [query, setQuery] = React.useState<string>(\"\");\n-\n+  const strings = languageStrings.searchpage;\n+  const callOnChange = (query: string) =>\n+    onChange(query + (rawSearchMode ? \"\" : \"*\"));\n   /**\n    * uses lodash to debounce the search query by half a second\n    */\n-  const delayedQuery = useCallback(\n-    debounce((query: string) => onChange(query), 500),\n-    [onChange]\n-  );\n+  const delayedQuery = useCallback(debounce(callOnChange, 500), [onChange]);\n \n+  const handleKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n+    switch (event.keyCode) {\n+      case ESCAPE_KEY_CODE:\n+        event.preventDefault();\n+        handleQueryChange(\"\");\n+        break;\n+      case ENTER_KEY_CODE:\n+        event.preventDefault();\n+        callOnChange(query);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e28791b40cea86eab8152883389a4d219d8f3078"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE0MzMyMQ==", "bodyText": "I like that idea, and it works too. I've fixed that up and updated the test.", "url": "https://github.com/openequella/openEQUELLA/pull/2040#discussion_r454143321", "createdAt": "2020-07-14T06:57:03Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/SearchBar.tsx", "diffHunk": "@@ -37,30 +46,40 @@ interface SearchBarProps {\n  * This component does not handle the API query itself,\n  * that should be done in the parent component with the onChange callback.\n  */\n-export default function SearchBar({ onChange }: SearchBarProps) {\n+export default function SearchBar({ onChange, rawSearchMode }: SearchBarProps) {\n   const [query, setQuery] = React.useState<string>(\"\");\n-\n+  const strings = languageStrings.searchpage;\n+  const callOnChange = (query: string) =>\n+    onChange(query + (rawSearchMode ? \"\" : \"*\"));\n   /**\n    * uses lodash to debounce the search query by half a second\n    */\n-  const delayedQuery = useCallback(\n-    debounce((query: string) => onChange(query), 500),\n-    [onChange]\n-  );\n+  const delayedQuery = useCallback(debounce(callOnChange, 500), [onChange]);\n \n+  const handleKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n+    switch (event.keyCode) {\n+      case ESCAPE_KEY_CODE:\n+        event.preventDefault();\n+        handleQueryChange(\"\");\n+        break;\n+      case ENTER_KEY_CODE:\n+        event.preventDefault();\n+        callOnChange(query);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEyNDg0NQ=="}, "originalCommit": {"oid": "e28791b40cea86eab8152883389a4d219d8f3078"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMjM4NTM1OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/SearchBar.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNjoxMjo0NVrOGxFmIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNjo1Njo0NFrOGxGsuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEyNTA5MA==", "bodyText": "As an aside, this name should probably be debouncedQuery. There is no delay.", "url": "https://github.com/openequella/openEQUELLA/pull/2040#discussion_r454125090", "createdAt": "2020-07-14T06:12:45Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/SearchBar.tsx", "diffHunk": "@@ -37,30 +46,40 @@ interface SearchBarProps {\n  * This component does not handle the API query itself,\n  * that should be done in the parent component with the onChange callback.\n  */\n-export default function SearchBar({ onChange }: SearchBarProps) {\n+export default function SearchBar({ onChange, rawSearchMode }: SearchBarProps) {\n   const [query, setQuery] = React.useState<string>(\"\");\n-\n+  const strings = languageStrings.searchpage;\n+  const callOnChange = (query: string) =>\n+    onChange(query + (rawSearchMode ? \"\" : \"*\"));\n   /**\n    * uses lodash to debounce the search query by half a second\n    */\n-  const delayedQuery = useCallback(\n-    debounce((query: string) => onChange(query), 500),\n-    [onChange]\n-  );\n+  const delayedQuery = useCallback(debounce(callOnChange, 500), [onChange]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e28791b40cea86eab8152883389a4d219d8f3078"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE0MzE2MA==", "bodyText": "Fixed", "url": "https://github.com/openequella/openEQUELLA/pull/2040#discussion_r454143160", "createdAt": "2020-07-14T06:56:44Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/SearchBar.tsx", "diffHunk": "@@ -37,30 +46,40 @@ interface SearchBarProps {\n  * This component does not handle the API query itself,\n  * that should be done in the parent component with the onChange callback.\n  */\n-export default function SearchBar({ onChange }: SearchBarProps) {\n+export default function SearchBar({ onChange, rawSearchMode }: SearchBarProps) {\n   const [query, setQuery] = React.useState<string>(\"\");\n-\n+  const strings = languageStrings.searchpage;\n+  const callOnChange = (query: string) =>\n+    onChange(query + (rawSearchMode ? \"\" : \"*\"));\n   /**\n    * uses lodash to debounce the search query by half a second\n    */\n-  const delayedQuery = useCallback(\n-    debounce((query: string) => onChange(query), 500),\n-    [onChange]\n-  );\n+  const delayedQuery = useCallback(debounce(callOnChange, 500), [onChange]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEyNTA5MA=="}, "originalCommit": {"oid": "e28791b40cea86eab8152883389a4d219d8f3078"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1272, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}