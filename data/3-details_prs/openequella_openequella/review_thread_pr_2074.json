{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUyODc4NTk2", "number": 2074, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjoyNjoxNVrOEP63IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjoyNzo1NVrOEP636Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTI4NDgwOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchModule.test.ts", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjoyNjoxNVrOGz00gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNDo0MzozOVrOGz3xSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5NTk3MQ==", "bodyText": "May I ask why not use toHaveBeenCalledWith({...defaultSearchOptions, query: \"\"}) ?", "url": "https://github.com/openequella/openEQUELLA/pull/2074#discussion_r456995971", "createdAt": "2020-07-20T02:26:15Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchModule.test.ts", "diffHunk": "@@ -32,4 +32,40 @@ describe(\"SearchModule\", () => {\n     expect(searchResult.available).toBe(12);\n     expect(searchResult.results).toHaveLength(12);\n   });\n+\n+  const validateSearchQuery = (expectedQuery: string) => {\n+    const calls = mockedSearch.mock.calls;\n+    const params = calls[0][1]; // Second parameter of the call is the 'params'\n+    expect(params.query).toEqual(expectedQuery);\n+  };\n+\n+  it(\"should not append a wildcard for a search which is empty when trimmed\", async () => {\n+    mockedSearch.mockReset();\n+    await SearchModule.searchItems({\n+      ...SearchModule.defaultSearchOptions,\n+      query: \"   \",\n+    });\n+    validateSearchQuery(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "774c7ea8db4c46180a81aefb375568302d841f84"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAyODY1OQ==", "bodyText": "You may. :)\nIt's because under the hood in the search module, we then go and add additional values to make up the search params. And so I'm actually validating against the search params which includes things like statuses.\nIndeed, I initially did the exact thing you mention there - and was confused where all these LIVE, REVIEW etc ones were coming from... And then it clicked. See statuses at https://github.com/openequella/openEQUELLA/blob/component/new-search-page/Source/Plugins/Core/com.equella.core/js/tsrc/search/SearchModule.ts#L54\n(As an aside, I do wonder if some point we'll want to support filtering on those. \ud83e\udd14 )", "url": "https://github.com/openequella/openEQUELLA/pull/2074#discussion_r457028659", "createdAt": "2020-07-20T04:05:32Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchModule.test.ts", "diffHunk": "@@ -32,4 +32,40 @@ describe(\"SearchModule\", () => {\n     expect(searchResult.available).toBe(12);\n     expect(searchResult.results).toHaveLength(12);\n   });\n+\n+  const validateSearchQuery = (expectedQuery: string) => {\n+    const calls = mockedSearch.mock.calls;\n+    const params = calls[0][1]; // Second parameter of the call is the 'params'\n+    expect(params.query).toEqual(expectedQuery);\n+  };\n+\n+  it(\"should not append a wildcard for a search which is empty when trimmed\", async () => {\n+    mockedSearch.mockReset();\n+    await SearchModule.searchItems({\n+      ...SearchModule.defaultSearchOptions,\n+      query: \"   \",\n+    });\n+    validateSearchQuery(\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5NTk3MQ=="}, "originalCommit": {"oid": "774c7ea8db4c46180a81aefb375568302d841f84"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA0NDI5Nw==", "bodyText": "Ah I see! Thanks for explaining!", "url": "https://github.com/openequella/openEQUELLA/pull/2074#discussion_r457044297", "createdAt": "2020-07-20T04:43:39Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchModule.test.ts", "diffHunk": "@@ -32,4 +32,40 @@ describe(\"SearchModule\", () => {\n     expect(searchResult.available).toBe(12);\n     expect(searchResult.results).toHaveLength(12);\n   });\n+\n+  const validateSearchQuery = (expectedQuery: string) => {\n+    const calls = mockedSearch.mock.calls;\n+    const params = calls[0][1]; // Second parameter of the call is the 'params'\n+    expect(params.query).toEqual(expectedQuery);\n+  };\n+\n+  it(\"should not append a wildcard for a search which is empty when trimmed\", async () => {\n+    mockedSearch.mockReset();\n+    await SearchModule.searchItems({\n+      ...SearchModule.defaultSearchOptions,\n+      query: \"   \",\n+    });\n+    validateSearchQuery(\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5NTk3MQ=="}, "originalCommit": {"oid": "774c7ea8db4c46180a81aefb375568302d841f84"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTI4NjgxOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchModule.test.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjoyNzo1NVrOGz01nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjo0MTo1OVrOGz1CAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5NjI1Mw==", "bodyText": "I am not familiar with mock.calls.  May I ask if 0 means this is the first call ? And what does 1 stand for ?", "url": "https://github.com/openequella/openEQUELLA/pull/2074#discussion_r456996253", "createdAt": "2020-07-20T02:27:55Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchModule.test.ts", "diffHunk": "@@ -32,4 +32,40 @@ describe(\"SearchModule\", () => {\n     expect(searchResult.available).toBe(12);\n     expect(searchResult.results).toHaveLength(12);\n   });\n+\n+  const validateSearchQuery = (expectedQuery: string) => {\n+    const calls = mockedSearch.mock.calls;\n+    const params = calls[0][1]; // Second parameter of the call is the 'params'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "774c7ea8db4c46180a81aefb375568302d841f84"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5OTQyNg==", "bodyText": "OK now I know calls[0][1] means The second arg of the first call", "url": "https://github.com/openequella/openEQUELLA/pull/2074#discussion_r456999426", "createdAt": "2020-07-20T02:41:59Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchModule.test.ts", "diffHunk": "@@ -32,4 +32,40 @@ describe(\"SearchModule\", () => {\n     expect(searchResult.available).toBe(12);\n     expect(searchResult.results).toHaveLength(12);\n   });\n+\n+  const validateSearchQuery = (expectedQuery: string) => {\n+    const calls = mockedSearch.mock.calls;\n+    const params = calls[0][1]; // Second parameter of the call is the 'params'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5NjI1Mw=="}, "originalCommit": {"oid": "774c7ea8db4c46180a81aefb375568302d841f84"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1302, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}