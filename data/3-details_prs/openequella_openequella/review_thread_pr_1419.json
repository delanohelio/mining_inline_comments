{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxOTEzNTk0", "number": 1419, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwNDoyMDo0MVrODXayKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwNjoyMzoxN1rODXviGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODgyNjY3OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/wizard/WizardApi.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwNDoyMDo0MVrOFctHlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwNDoyMDo0MVrOFctHlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY0MzY2OQ==", "bodyText": "These methods should be private", "url": "https://github.com/openequella/openEQUELLA/pull/1419#discussion_r365643669", "createdAt": "2020-01-13T04:20:41Z", "author": {"login": "nmkae"}, "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/wizard/WizardApi.scala", "diffHunk": "@@ -184,6 +184,22 @@ class WizardApi {\n \n   }\n \n+  def getStreamedBody(content: InputStream): Stream[IO, ByteBuffer] = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11acd802ededb2bebe34a73812a6a1b98333f5ec"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODgyODMzOnYy", "diffSide": "RIGHT", "path": "autotest/IntegTester/ps/www/control.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwNDoyMjo0N1rOFctIbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwNDoyMjo0N1rOFctIbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY0Mzg4NQ==", "bodyText": "This appears to be the same code as the POST (just with a PUT), the buttons could be consolidated into a simple component", "url": "https://github.com/openequella/openEQUELLA/pull/1419#discussion_r365643885", "createdAt": "2020-01-13T04:22:47Z", "author": {"login": "nmkae"}, "path": "autotest/IntegTester/ps/www/control.tsx", "diffHunk": "@@ -196,6 +196,22 @@ function TestControl(p: ControlApi<MyConfig>) {\n       >\n         Delete Test\n       </button>\n+\n+      <button\n+        onClick={_ => {\n+          const url = p.providerUrl(serviceId) + \"?\" + queryString;\n+          const req = axios.put(url, {\n+            data: serviceContent\n+          });\n+          return req\n+            .then(resp => setServiceResponse(resp.data))\n+            .catch((err: Error) => {\n+              setServiceResponse(err.message);\n+            });\n+        }}\n+      >\n+        Put Test\n+      </button>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11acd802ededb2bebe34a73812a6a1b98333f5ec"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODgyODkwOnYy", "diffSide": "RIGHT", "path": "autotest/IntegTester/src/main/scala/integtester/testprovider/TestingCloudProvider.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwNDoyMzozNlrOFctIuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwNDoyMzozNlrOFctIuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY0Mzk2MA==", "bodyText": "Would be nice to sanity check the headers here", "url": "https://github.com/openequella/openEQUELLA/pull/1419#discussion_r365643960", "createdAt": "2020-01-13T04:23:36Z", "author": {"login": "nmkae"}, "path": "autotest/IntegTester/src/main/scala/integtester/testprovider/TestingCloudProvider.scala", "diffHunk": "@@ -132,6 +132,11 @@ class TestingCloudProvider(implicit val cs: ContextShift[IO]) extends Http4sDsl[\n       req.decode[String] { serviceData =>\n         Ok(ServiceResponse(user, serviceData, req.queryString).asJson)\n       }\n+    case authReq @ PUT -> Root / \"myService\" as user =>\n+      val req = authReq.req\n+      req.decode[String] { serviceData =>\n+        Ok(ServiceResponse(user, serviceData, req.queryString).asJson)\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11acd802ededb2bebe34a73812a6a1b98333f5ec"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MjIyNjE2OnYy", "diffSide": "RIGHT", "path": "autotest/IntegTester/src/main/scala/integtester/testprovider/TestingCloudProvider.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwNjoyMzoxN1rOFdNI2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwNjoyMzoxN1rOFdNI2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE2ODI4Mw==", "bodyText": "Recommend the message states the unexpected cookie name (JSESSIONID) that was found, otherwise it would require tracking down this code to confirm what it really means", "url": "https://github.com/openequella/openEQUELLA/pull/1419#discussion_r366168283", "createdAt": "2020-01-14T06:23:17Z", "author": {"login": "nmkae"}, "path": "autotest/IntegTester/src/main/scala/integtester/testprovider/TestingCloudProvider.scala", "diffHunk": "@@ -127,16 +128,36 @@ class TestingCloudProvider(implicit val cs: ContextShift[IO]) extends Http4sDsl[\n     case req @ POST -> Root / \"itemNotification\" as user =>\n       System.err.println(req.req.queryString)\n       Ok()\n+\n     case authReq @ POST -> Root / \"myService\" as user =>\n-      val req = authReq.req\n+      createResponse(true, authReq.req, user)\n+\n+    case authReq @ PUT -> Root / \"myService\" as user =>\n+      createResponse(true, authReq.req, user)\n+\n+    case authReq @ GET -> Root / \"myService\" as user =>\n+      createResponse(false, authReq.req, user)\n+\n+    case authReq @ DELETE -> Root / \"myService\" as user =>\n+      createResponse(false, authReq.req, user)\n+  }\n+  def createResponse(decode: Boolean, req: Request[IO], user: TestUser): IO[Response[IO]] = {\n+    val cookies = req.headers.get(CaseInsensitiveString(\"cookie\"))\n+\n+    // If header includes cookies then check if JSESSIONID exists; if yes then respond with a bad request.\n+    if (cookies.isDefined) {\n+      val jSessionId = cookies.get.value.split(\";\").exists(value => value.startsWith(\"JSESSIONID\"))\n+      if (jSessionId) {\n+        return BadRequest(\"Unexpected cookie is found.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a8d5dd84b11d234942cc3854ea2988ebb81c5e9"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1557, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}