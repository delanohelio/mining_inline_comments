{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0NDQyMzE5", "number": 2414, "title": "Feature/legacy search params", "bodyText": "Checklist\n\n\n the contributor license agreement is signed\n commit message follows commit guidelines\n tests are included\n screenshots are included showing significant UI changes\n\nDescription of change\n\n#1306\nThis feature allows a Legacy /searching.do url and query parameters to be used on the new search page.\n\nSome bumps were experienced while writing an additional SearchPage test. From my commit message:\n\n\nI also had to add the esModuleInterop property to tsconfig. Otherwise, the rendering of a SearchPage with dateRangeQuickModeEnabled in jest will fail. The solution was found at mui-org/material-ui-pickers#805\nI had to modify how the imports work in the jest setup. This came about as a result of adding the esModuleInterop", "createdAt": "2020-10-15T23:07:47Z", "url": "https://github.com/openequella/openEQUELLA/pull/2414", "merged": true, "mergeCommit": {"oid": "5e8647fcd17481c8033348174ca6fb5ad1cd782d"}, "closed": true, "closedAt": "2020-10-27T21:58:52Z", "author": {"login": "mrblippy"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdSzFzRAH2gAyNTA0NDQyMzE5OjM4NGMwNWRiYzZhMjFiOGRjMmJiN2Y1MzZjNWYyMzI4MmQyNzkwMjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWpYPKgFqTUxNzY4MzcwMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "384c05dbc6a21b8dc2bb7f536c5f23282d279027", "author": {"user": {"login": "mrblippy", "name": "Nick Charles"}}, "url": "https://github.com/openequella/openEQUELLA/commit/384c05dbc6a21b8dc2bb7f536c5f23282d279027", "committedDate": "2020-10-15T14:59:22Z", "message": "Initial work to allow searching.do urls and parameters to be used on new ui SearchPage\n* Add resolveUsers function to UserModule, to allow for looking a user up by id.\n* Add new function to SearchModule, which handles all of the conversion of query string params to searchOptions object\n* Alter initial useEffect on SearchPage, so query string params are converted before initial search occurs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0fe8d988047b62a0c7da187cb27a038dc64c046", "author": {"user": {"login": "mrblippy", "name": "Nick Charles"}}, "url": "https://github.com/openequella/openEQUELLA/commit/d0fe8d988047b62a0c7da187cb27a038dc64c046", "committedDate": "2020-10-15T14:59:22Z", "message": "Remove null checks in DateModified and SearchBar components\n* This prevents both components from getting their states set to null\\undefined before the convertParamsToSearchOptions promise resolves\n* All of the relevant js tests still pass after this change. And i manually inspected the netwrok traffic, to make sure no double requests are happening after starting a new search (since i think that's the reason why the null checks were there in the first place)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d4d8150141704edc26cb660dca8b5e2ab78b546", "author": {"user": {"login": "mrblippy", "name": "Nick Charles"}}, "url": "https://github.com/openequella/openEQUELLA/commit/1d4d8150141704edc26cb660dca8b5e2ab78b546", "committedDate": "2020-10-15T14:59:22Z", "message": "Use Promise.all, so I could get the default sortOrder to work properly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "477f8cd711d5bbf07fa78f6788376358b60e6862", "author": {"user": {"login": "mrblippy", "name": "Nick Charles"}}, "url": "https://github.com/openequella/openEQUELLA/commit/477f8cd711d5bbf07fa78f6788376358b60e6862", "committedDate": "2020-10-15T15:03:06Z", "message": "Attempted to improve readability of convertParamsToSearchOptions, added some jsdoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01eede6cbb52e56c3567a26c8f701591aac188d9", "author": {"user": {"login": "mrblippy", "name": "Nick Charles"}}, "url": "https://github.com/openequella/openEQUELLA/commit/01eede6cbb52e56c3567a26c8f701591aac188d9", "committedDate": "2020-10-15T15:03:06Z", "message": "Added tests to  SearchModule and SearchPage.\n* I also had to add the esModuleInterop property to tsconfig. Otherwise the rendering of a SearchPage with dateRangeQuickModeEnabled in jest will fail. Solution was found at https://github.com/mui-org/material-ui-pickers/issues/805\n* I had to modify how the imports work in the jest setup. This came about as a result of adding the esModuleInterop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a0bf10f98054290a67963128a1224ae148a28b4", "author": {"user": {"login": "mrblippy", "name": "Nick Charles"}}, "url": "https://github.com/openequella/openEQUELLA/commit/4a0bf10f98054290a67963128a1224ae148a28b4", "committedDate": "2020-10-15T22:33:07Z", "message": "Put the mock back in a beforeEach, so it doesn't interfere with the other tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwMTQwMDgw", "url": "https://github.com/openequella/openEQUELLA/pull/2414#pullrequestreview-510140080", "createdAt": "2020-10-16T05:45:16Z", "commit": {"oid": "4a0bf10f98054290a67963128a1224ae148a28b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNTo0NToxNlrOHinv1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNTo0NToxNlrOHinv1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA2NDg1Mg==", "bodyText": "The change made here means we are no longer able to see the old search page in new UI mode. I think we still need the old search page at this stage.", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r506064852", "createdAt": "2020-10-16T05:45:16Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/mainui/routes.tsx", "diffHunk": "@@ -57,7 +57,7 @@ export const routes = {\n     component: SettingsPage,\n   },\n   Search: {\n-    path: \"/page/search\",\n+    path: \"(/page/search|/searching.do)\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a0bf10f98054290a67963128a1224ae148a28b4"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNTU3ODY3", "url": "https://github.com/openequella/openEQUELLA/pull/2414#pullrequestreview-510557867", "createdAt": "2020-10-16T15:05:09Z", "commit": {"oid": "4a0bf10f98054290a67963128a1224ae148a28b4"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNTowNTowOVrOHjDvuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNTowNjoyNVrOHjD1xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUyMzU3Ng==", "bodyText": "Would this be the same as\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import * as ReactSixteenAdapter from \"enzyme-adapter-react-16\";\n          \n          \n            \n            const adapter = ReactSixteenAdapter as any;\n          \n          \n            \n            configure({ adapter: new adapter.default() });\n          \n          \n            \n            import Adapter from \"enzyme-adapter-react-16\";\n          \n          \n            \n            configure({ adapter: new Adapter() });\n          \n      \n    \n    \n  \n\n?", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r506523576", "createdAt": "2020-10-16T15:05:09Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.core/js/jest.setup.ts", "diffHunk": "@@ -16,6 +16,6 @@\n  * limitations under the License.\n  */\n import { configure } from \"enzyme\";\n-import * as Adapter from \"enzyme-adapter-react-16\";\n-\n-configure({ adapter: new Adapter() });\n+import * as ReactSixteenAdapter from \"enzyme-adapter-react-16\";\n+const adapter = ReactSixteenAdapter as any;\n+configure({ adapter: new adapter.default() });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a0bf10f98054290a67963128a1224ae148a28b4"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUyNTEyNw==", "bodyText": "Are synthetic defaults needed?\nCould this polyfill be avoided by using import * as SomeName from 'some-package' instead of import SomeName from 'some-package'?", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r506525127", "createdAt": "2020-10-16T15:06:25Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.core/js/tsconfig.json", "diffHunk": "@@ -2,6 +2,8 @@\n   \"compilerOptions\": {\n     \"outDir\": \"target/ts\",\n     \"module\": \"CommonJS\",\n+    \"allowSyntheticDefaultImports\": true,\n+    \"esModuleInterop\": true,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a0bf10f98054290a67963128a1224ae148a28b4"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNjI1ODcx", "url": "https://github.com/openequella/openEQUELLA/pull/2414#pullrequestreview-510625871", "createdAt": "2020-10-16T16:29:09Z", "commit": {"oid": "4a0bf10f98054290a67963128a1224ae148a28b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNjoyOTowOVrOHjHq9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNjoyOTowOVrOHjHq9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU4Nzg5NA==", "bodyText": "Could range type be narrowed?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n              const getLastModifiedDateRange = (\n          \n          \n            \n                rangeType: string,\n          \n          \n            \n              type RangeType = \"between\" | \"after\" | \"before\" | \"on\";\n          \n          \n            \n            \n          \n          \n            \n              const getLastModifiedDateRange = (\n          \n          \n            \n                rangeType: RangeType,", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r506587894", "createdAt": "2020-10-16T16:29:09Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -202,3 +216,84 @@ export const searchItems = ({\n   };\n   return OEQ.Search.search(API_BASE_URL, searchParams);\n };\n+\n+/**\n+ * A function that takes query string params from a shared searching.do url and converts all applicable params to Search options\n+ * @param queryString query string params from a shared searching.do url\n+ * @return SearchOptions object\n+ */\n+export const convertParamsToSearchOptions = async (queryString: string) => {\n+  if (!queryString) return undefined;\n+\n+  const params = new URLSearchParams(queryString);\n+\n+  const getQueryParam = (paramName: string) => {\n+    return params.get(paramName) ?? undefined;\n+  };\n+\n+  const collection = getQueryParam(LegacySearchParams.IN)?.substring(1);\n+  const owner = getQueryParam(LegacySearchParams.OWNER);\n+  const dateRange = getQueryParam(LegacySearchParams.DATERANGE);\n+\n+  const getUserDetails = async (\n+    userId: string\n+  ): Promise<OEQ.UserQuery.UserDetails> => {\n+    const userDetails = await resolveUsers([userId]);\n+    return userDetails[0];\n+  };\n+\n+  const getCollectionDetails = async (\n+    collectionUuid: string\n+  ): Promise<Collection[]> => {\n+    const collectionList = await collectionListSummary([\"SEARCH_COLLECTION\"]);\n+    return collectionList.filter((c) => {\n+      return c.uuid === collectionUuid;\n+    });\n+  };\n+\n+  const getLastModifiedDateRange = (\n+    rangeType: string,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a0bf10f98054290a67963128a1224ae148a28b4"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86d3d5b14bc2cb8572b7846a17d77283d74151f8", "author": {"user": {"login": "mrblippy", "name": "Nick Charles"}}, "url": "https://github.com/openequella/openEQUELLA/commit/86d3d5b14bc2cb8572b7846a17d77283d74151f8", "committedDate": "2020-10-18T22:40:37Z", "message": "Make SearchQueryProperties test only run in old ui mode, as access to the old searching.do page has now been removed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExMjY5Mjkw", "url": "https://github.com/openequella/openEQUELLA/pull/2414#pullrequestreview-511269290", "createdAt": "2020-10-18T23:18:00Z", "commit": {"oid": "86d3d5b14bc2cb8572b7846a17d77283d74151f8"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQyMzoxODowMVrOHjv9Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQyMzo1MToyOVrOHjw03g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI0NzkzNA==", "bodyText": "This function can also return undefined.", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507247934", "createdAt": "2020-10-18T23:18:01Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -202,3 +216,84 @@ export const searchItems = ({\n   };\n   return OEQ.Search.search(API_BASE_URL, searchParams);\n };\n+\n+/**\n+ * A function that takes query string params from a shared searching.do url and converts all applicable params to Search options\n+ * @param queryString query string params from a shared searching.do url\n+ * @return SearchOptions object", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d3d5b14bc2cb8572b7846a17d77283d74151f8"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI1Mzk5Ng==", "bodyText": "Just a personal taste here: if you change the signature of resolveUsers to use rest parameters, than here you can simplify the function to\n const getUserDetails = async (\n    userId: string\n  ): Promise<OEQ.UserQuery.UserDetails> => await resolveUsers(userId)[0]", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507253996", "createdAt": "2020-10-18T23:32:41Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -202,3 +216,84 @@ export const searchItems = ({\n   };\n   return OEQ.Search.search(API_BASE_URL, searchParams);\n };\n+\n+/**\n+ * A function that takes query string params from a shared searching.do url and converts all applicable params to Search options\n+ * @param queryString query string params from a shared searching.do url\n+ * @return SearchOptions object\n+ */\n+export const convertParamsToSearchOptions = async (queryString: string) => {\n+  if (!queryString) return undefined;\n+\n+  const params = new URLSearchParams(queryString);\n+\n+  const getQueryParam = (paramName: string) => {\n+    return params.get(paramName) ?? undefined;\n+  };\n+\n+  const collection = getQueryParam(LegacySearchParams.IN)?.substring(1);\n+  const owner = getQueryParam(LegacySearchParams.OWNER);\n+  const dateRange = getQueryParam(LegacySearchParams.DATERANGE);\n+\n+  const getUserDetails = async (", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d3d5b14bc2cb8572b7846a17d77283d74151f8"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI1NjgxOA==", "bodyText": "Have you tested when getQueryParam(LegacySearchParams.SORT) returns undefined ? I feel casting undefined to SortOrder will cause error.", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507256818", "createdAt": "2020-10-18T23:39:31Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -202,3 +216,84 @@ export const searchItems = ({\n   };\n   return OEQ.Search.search(API_BASE_URL, searchParams);\n };\n+\n+/**\n+ * A function that takes query string params from a shared searching.do url and converts all applicable params to Search options\n+ * @param queryString query string params from a shared searching.do url\n+ * @return SearchOptions object\n+ */\n+export const convertParamsToSearchOptions = async (queryString: string) => {\n+  if (!queryString) return undefined;\n+\n+  const params = new URLSearchParams(queryString);\n+\n+  const getQueryParam = (paramName: string) => {\n+    return params.get(paramName) ?? undefined;\n+  };\n+\n+  const collection = getQueryParam(LegacySearchParams.IN)?.substring(1);\n+  const owner = getQueryParam(LegacySearchParams.OWNER);\n+  const dateRange = getQueryParam(LegacySearchParams.DATERANGE);\n+\n+  const getUserDetails = async (\n+    userId: string\n+  ): Promise<OEQ.UserQuery.UserDetails> => {\n+    const userDetails = await resolveUsers([userId]);\n+    return userDetails[0];\n+  };\n+\n+  const getCollectionDetails = async (\n+    collectionUuid: string\n+  ): Promise<Collection[]> => {\n+    const collectionList = await collectionListSummary([\"SEARCH_COLLECTION\"]);\n+    return collectionList.filter((c) => {\n+      return c.uuid === collectionUuid;\n+    });\n+  };\n+\n+  const getLastModifiedDateRange = (\n+    rangeType: string,\n+    primaryDate: Date,\n+    secondaryDate?: Date\n+  ): DateRange => {\n+    let dr: DateRange = {};\n+    switch (rangeType?.toLocaleLowerCase()) {\n+      case undefined:\n+        break;\n+      case \"between\":\n+        dr = { start: primaryDate, end: secondaryDate };\n+        break;\n+      case \"after\":\n+        dr = { start: primaryDate ?? undefined };\n+        break;\n+      case \"before\":\n+        dr = { end: primaryDate };\n+        break;\n+      case \"on\":\n+        dr = { start: primaryDate, end: primaryDate };\n+        break;\n+      default:\n+        throw new TypeError(\"Invalid range\");\n+        break;\n+    }\n+    return dr;\n+  };\n+\n+  const searchOptions: SearchOptions = {\n+    ...defaultSearchOptions,\n+    collections: collection\n+      ? await getCollectionDetails(collection)\n+      : undefined,\n+    query: getQueryParam(LegacySearchParams.QUERY),\n+    owner: owner ? await getUserDetails(owner) : undefined,\n+    lastModifiedDateRange: getLastModifiedDateRange(\n+      dateRange ?? \"\",\n+      new Date(parseInt(getQueryParam(LegacySearchParams.PRIMARYDATE) ?? \"\")),\n+      new Date(parseInt(getQueryParam(LegacySearchParams.SECONDARYDATE) ?? \"\"))\n+    ),\n+    sortOrder:\n+      (getQueryParam(LegacySearchParams.SORT)?.toUpperCase() as SortOrder) ||\n+      undefined,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d3d5b14bc2cb8572b7846a17d77283d74151f8"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI2MTI3Mg==", "bodyText": "I wonder what will happen in this scenario.\nqueryStringSearchOptions includes sortOrder being Rank, changed the sort order to Datemodified, go to another page and go back. Which sort order will be remembered?  From your attached video I am guessing the answer would be Rank.", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507261272", "createdAt": "2020-10-18T23:49:34Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/SearchPage.tsx", "diffHunk": "@@ -118,21 +119,40 @@ const SearchPage = ({ updateTemplate }: TemplateUpdateProps) => {\n   const [showSpinner, setShowSpinner] = useState<boolean>(false);\n   const [searchSettings, setSearchSettings] = useState<SearchSettings>();\n   const [classifications, setClassifications] = useState<Classification[]>([]);\n+\n+  const location = useLocation();\n+\n   /**\n    * Update the page title and retrieve Search settings.\n    */\n   useEffect(() => {\n     updateTemplate((tp) => ({\n       ...templateDefaults(searchStrings.title)(tp),\n     }));\n-\n     // Show spinner before calling API to retrieve Search settings.\n     setShowSpinner(true);\n-    getSearchSettingsFromServer().then((settings: SearchSettings) => {\n-      setSearchSettings(settings);\n-      handleSortOrderChanged(\n-        searchPageOptions.sortOrder ?? settings.defaultSearchSort\n-      );\n+\n+    Promise.all([\n+      getSearchSettingsFromServer(),\n+      convertParamsToSearchOptions(location.search),\n+    ]).then((results) => {\n+      const [searchSettings, queryStringSearchOptions] = results;\n+      setSearchSettings(searchSettings);\n+\n+      if (queryStringSearchOptions)\n+        setSearchPageOptions({\n+          ...queryStringSearchOptions,\n+          dateRangeQuickModeEnabled: false,\n+          sortOrder:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d3d5b14bc2cb8572b7846a17d77283d74151f8"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI2MjE3NA==", "bodyText": "Hehe this is the same thing I did, and then I changed back to iff.", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507262174", "createdAt": "2020-10-18T23:51:29Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/SearchBar.tsx", "diffHunk": "@@ -94,21 +94,20 @@ export default function SearchBar({\n \n   // Update state when search query is cleared.\n   useEffect(() => {\n-    if (!query) {\n-      setCurrentQuery(query);\n-    }\n+    setCurrentQuery(query);\n   }, [query]);\n \n   const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n     if (event.keyCode === ESCAPE_KEY_CODE && currentQuery) {\n-      // iff there is a current query, clear it out and trigger a search\n+      // if there is a current query, clear it out and trigger a search", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d3d5b14bc2cb8572b7846a17d77283d74151f8"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "116ed22329aee54733bcd028816b7235e6930a98", "author": {"user": {"login": "mrblippy", "name": "Nick Charles"}}, "url": "https://github.com/openequella/openEQUELLA/commit/116ed22329aee54733bcd028816b7235e6930a98", "committedDate": "2020-10-19T00:56:41Z", "message": "Modify LuxonUtils import in DateRangeSelector, which means I can remove the two flags I added in tsconfig"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExMzEyNDQ1", "url": "https://github.com/openequella/openEQUELLA/pull/2414#pullrequestreview-511312445", "createdAt": "2020-10-18T23:58:21Z", "commit": {"oid": "86d3d5b14bc2cb8572b7846a17d77283d74151f8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQyMzo1ODoyMVrOHjxAcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwMToxNDoxNFrOHjz6qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI2NTEzOQ==", "bodyText": "These variable names are mis-leading. Makes it sound like it's just a mock for singular data structure. Better to go with mockedResolveUsers and mockedCollectionListSummary. (Mind you, that second one is not ideal, but at least you're matching the function name you're mocking.)", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507265139", "createdAt": "2020-10-18T23:58:21Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/modules/SearchModule.test.ts", "diffHunk": "@@ -104,4 +115,101 @@ describe(\"SearchModule\", () => {\n     expect(SearchModule.generateCategoryWhereQuery(undefined)).toBeUndefined();\n     expect(SearchModule.generateCategoryWhereQuery([])).toBeUndefined();\n   });\n+\n+  describe(\"convertParamsToSearchOptions\", () => {\n+    const mockedUser = jest.spyOn(UserModule, \"resolveUsers\");\n+    const mockedCollection = jest.spyOn(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d3d5b14bc2cb8572b7846a17d77283d74151f8"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI2ODYwNQ==", "bodyText": "No need for string template / backticks here:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  `converts legacy date range query params: %s to search options containing lastModifiedDateRange of %s`,\n          \n          \n            \n                  \"converts legacy date range query params: %s to search options containing lastModifiedDateRange of %s\",", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507268605", "createdAt": "2020-10-19T00:05:49Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/modules/SearchModule.test.ts", "diffHunk": "@@ -104,4 +115,101 @@ describe(\"SearchModule\", () => {\n     expect(SearchModule.generateCategoryWhereQuery(undefined)).toBeUndefined();\n     expect(SearchModule.generateCategoryWhereQuery([])).toBeUndefined();\n   });\n+\n+  describe(\"convertParamsToSearchOptions\", () => {\n+    const mockedUser = jest.spyOn(UserModule, \"resolveUsers\");\n+    const mockedCollection = jest.spyOn(\n+      CollectionModule,\n+      \"collectionListSummary\"\n+    );\n+\n+    afterEach(() => {\n+      jest.clearAllMocks();\n+    });\n+\n+    it(\"should return undefined if no query string parameters are defined\", async () => {\n+      const convertedParamsPromise = await convertParamsToSearchOptions(\"\");\n+      expect(convertedParamsPromise).toBeUndefined();\n+    });\n+\n+    it(\"should convert legacy search parameters to searchOptions\", async () => {\n+      mockedUser.mockResolvedValue(users);\n+      mockedCollection.mockResolvedValue(getCollectionMap);\n+\n+      //Query string was obtained from legacy UI searching.do->Share URL\n+      const fullQueryString =\n+        \"?in=C8e3caf16-f3cb-b3dd-d403-e5eb8d545fff&q=test&sort=datecreated&owner=680f5eb7-22e2-4ab6-bcea-25205165e36e&dp=1601510400000&dr=AFTER\";\n+\n+      const convertedParamsPromise = await convertParamsToSearchOptions(\n+        fullQueryString\n+      );\n+\n+      const expectedSearchOptions: SearchOptions = {\n+        ...defaultSearchOptions,\n+        sortOrder: SortOrder.DATECREATED,\n+        searchAttachments: true,\n+        collections: [\n+          {\n+            uuid: \"8e3caf16-f3cb-b3dd-d403-e5eb8d545fff\",\n+            name: \"DRM Test Collection\",\n+          },\n+        ],\n+        query: \"test\",\n+        owner: {\n+          id: \"680f5eb7-22e2-4ab6-bcea-25205165e36e\",\n+          username: \"user200\",\n+          firstName: \"Fabienne\",\n+          lastName: \"Hobson\",\n+        },\n+        lastModifiedDateRange: { start: new Date(\"2020-10-01T00:00:00.000Z\") },\n+      };\n+\n+      expect(convertedParamsPromise).toEqual(expectedSearchOptions);\n+    });\n+\n+    // All combinations of Date Modified parameters that legacy UI uses. Epoch Unix Time Stamp formatted\n+    // dp: DatePrimary ds: DateSecondary dr: DateRange\n+\n+    // dp=15 October 2020 00:00:00\n+    const beforeDateQuery = \"?dp=1602720000000&dr=BEFORE\";\n+    // dp=15 October 2020 00:00:00\n+    const afterDateQuery = \"?dp=1602720000000&dr=AFTER\";\n+    // dp=13 October 2020 00:00:00 ds=15 October 2020 00:00:00\n+    const betweenDateQuery = \"?dp=1602547200000&ds=1602720000000&dr=BETWEEN\";\n+    // dp=15 October 2020 00:00:00 ds=16 October 2020 00:00:00\n+    const onDateQuery = \"?dp=1602720000000&dr=ON\";\n+\n+    const expectedBeforeRange = {\n+      end: new Date(\"2020-10-15T00:00:00.000+00:00\"),\n+    };\n+    const expectedAfterRange = {\n+      start: new Date(\"2020-10-15T00:00:00.000+00:00\"),\n+    };\n+    const expectedBetweenRange = {\n+      start: new Date(\"2020-10-13T00:00:00.000+00:00\"),\n+      end: new Date(\"2020-10-15T00:00:00.000+00:00\"),\n+    };\n+    const expectedOnRange = {\n+      start: new Date(\"2020-10-15T00:00:00.000+00:00\"),\n+      end: new Date(\"2020-10-15T00:00:00.000+00:00\"),\n+    };\n+\n+    it.each([\n+      [beforeDateQuery, expectedBeforeRange],\n+      [afterDateQuery, expectedAfterRange],\n+      [betweenDateQuery, expectedBetweenRange],\n+      [onDateQuery, expectedOnRange],\n+    ])(\n+      `converts legacy date range query params: %s to search options containing lastModifiedDateRange of %s`,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d3d5b14bc2cb8572b7846a17d77283d74151f8"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI2OTMwNg==", "bodyText": "Rather than specifying your types here, I feel it'd be better up in the generic for .each. So you'd have:\nit.each<string, DateRange>([\nAnd then here you'd omit the typing.", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507269306", "createdAt": "2020-10-19T00:07:15Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/modules/SearchModule.test.ts", "diffHunk": "@@ -104,4 +115,101 @@ describe(\"SearchModule\", () => {\n     expect(SearchModule.generateCategoryWhereQuery(undefined)).toBeUndefined();\n     expect(SearchModule.generateCategoryWhereQuery([])).toBeUndefined();\n   });\n+\n+  describe(\"convertParamsToSearchOptions\", () => {\n+    const mockedUser = jest.spyOn(UserModule, \"resolveUsers\");\n+    const mockedCollection = jest.spyOn(\n+      CollectionModule,\n+      \"collectionListSummary\"\n+    );\n+\n+    afterEach(() => {\n+      jest.clearAllMocks();\n+    });\n+\n+    it(\"should return undefined if no query string parameters are defined\", async () => {\n+      const convertedParamsPromise = await convertParamsToSearchOptions(\"\");\n+      expect(convertedParamsPromise).toBeUndefined();\n+    });\n+\n+    it(\"should convert legacy search parameters to searchOptions\", async () => {\n+      mockedUser.mockResolvedValue(users);\n+      mockedCollection.mockResolvedValue(getCollectionMap);\n+\n+      //Query string was obtained from legacy UI searching.do->Share URL\n+      const fullQueryString =\n+        \"?in=C8e3caf16-f3cb-b3dd-d403-e5eb8d545fff&q=test&sort=datecreated&owner=680f5eb7-22e2-4ab6-bcea-25205165e36e&dp=1601510400000&dr=AFTER\";\n+\n+      const convertedParamsPromise = await convertParamsToSearchOptions(\n+        fullQueryString\n+      );\n+\n+      const expectedSearchOptions: SearchOptions = {\n+        ...defaultSearchOptions,\n+        sortOrder: SortOrder.DATECREATED,\n+        searchAttachments: true,\n+        collections: [\n+          {\n+            uuid: \"8e3caf16-f3cb-b3dd-d403-e5eb8d545fff\",\n+            name: \"DRM Test Collection\",\n+          },\n+        ],\n+        query: \"test\",\n+        owner: {\n+          id: \"680f5eb7-22e2-4ab6-bcea-25205165e36e\",\n+          username: \"user200\",\n+          firstName: \"Fabienne\",\n+          lastName: \"Hobson\",\n+        },\n+        lastModifiedDateRange: { start: new Date(\"2020-10-01T00:00:00.000Z\") },\n+      };\n+\n+      expect(convertedParamsPromise).toEqual(expectedSearchOptions);\n+    });\n+\n+    // All combinations of Date Modified parameters that legacy UI uses. Epoch Unix Time Stamp formatted\n+    // dp: DatePrimary ds: DateSecondary dr: DateRange\n+\n+    // dp=15 October 2020 00:00:00\n+    const beforeDateQuery = \"?dp=1602720000000&dr=BEFORE\";\n+    // dp=15 October 2020 00:00:00\n+    const afterDateQuery = \"?dp=1602720000000&dr=AFTER\";\n+    // dp=13 October 2020 00:00:00 ds=15 October 2020 00:00:00\n+    const betweenDateQuery = \"?dp=1602547200000&ds=1602720000000&dr=BETWEEN\";\n+    // dp=15 October 2020 00:00:00 ds=16 October 2020 00:00:00\n+    const onDateQuery = \"?dp=1602720000000&dr=ON\";\n+\n+    const expectedBeforeRange = {\n+      end: new Date(\"2020-10-15T00:00:00.000+00:00\"),\n+    };\n+    const expectedAfterRange = {\n+      start: new Date(\"2020-10-15T00:00:00.000+00:00\"),\n+    };\n+    const expectedBetweenRange = {\n+      start: new Date(\"2020-10-13T00:00:00.000+00:00\"),\n+      end: new Date(\"2020-10-15T00:00:00.000+00:00\"),\n+    };\n+    const expectedOnRange = {\n+      start: new Date(\"2020-10-15T00:00:00.000+00:00\"),\n+      end: new Date(\"2020-10-15T00:00:00.000+00:00\"),\n+    };\n+\n+    it.each([\n+      [beforeDateQuery, expectedBeforeRange],\n+      [afterDateQuery, expectedAfterRange],\n+      [betweenDateQuery, expectedBetweenRange],\n+      [onDateQuery, expectedOnRange],\n+    ])(\n+      `converts legacy date range query params: %s to search options containing lastModifiedDateRange of %s`,\n+      async (queryString, expectedRange: DateRange) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d3d5b14bc2cb8572b7846a17d77283d74151f8"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI2OTc0Mg==", "bodyText": "There's no testing in here for any error handling.", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507269742", "createdAt": "2020-10-19T00:08:05Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/modules/SearchModule.test.ts", "diffHunk": "@@ -104,4 +115,101 @@ describe(\"SearchModule\", () => {\n     expect(SearchModule.generateCategoryWhereQuery(undefined)).toBeUndefined();\n     expect(SearchModule.generateCategoryWhereQuery([])).toBeUndefined();\n   });\n+\n+  describe(\"convertParamsToSearchOptions\", () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d3d5b14bc2cb8572b7846a17d77283d74151f8"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI3MDE4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            const mockQueryParamSearchOptions = jest.spyOn(\n          \n          \n            \n            const mockConvertParamsToSearchOptions = jest.spyOn(", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507270182", "createdAt": "2020-10-19T00:09:04Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -76,6 +76,10 @@ const mockSearchSettings = jest.spyOn(\n   SearchSettingsModule,\n   \"getSearchSettingsFromServer\"\n );\n+const mockQueryParamSearchOptions = jest.spyOn(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d3d5b14bc2cb8572b7846a17d77283d74151f8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI3MTI1MQ==", "bodyText": "You test here is saying it should call the function if there were query parameters in url however you don't appear to be setting such in the URL. Did I miss something.\nAnd arguably, there should be an inverse function then to ensure it's not called if there are none. (If such implied constraints are correct.)", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507271251", "createdAt": "2020-10-19T00:11:19Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -664,3 +668,28 @@ describe(\"<SearchPage/>\", () => {\n     });\n   });\n });\n+\n+describe(\"conversion of legacy query parameters to SearchPageOptions\", () => {\n+  const searchPageOptions: SearchPageOptions = {\n+    ...defaultSearchPageOptions,\n+    dateRangeQuickModeEnabled: false,\n+  };\n+\n+  beforeEach(() => {\n+    mockQueryParamSearchOptions.mockResolvedValueOnce(searchPageOptions);\n+  });\n+\n+  afterEach(() => {\n+    jest.clearAllMocks();\n+  });\n+\n+  it(\"should call convertParamsToSearchOptions if there were query paramaters in url\", async () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d3d5b14bc2cb8572b7846a17d77283d74151f8"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI3MjcxNA==", "bodyText": "Like @ChristianMurphy I'm also unsure what you're doing here. It looks almost like for like.\nBut also, I'm not sure why you're playing here. The tests you updated were React Testing Library based - not enzyme. Could you please tell us what's the haps?", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507272714", "createdAt": "2020-10-19T00:14:31Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/jest.setup.ts", "diffHunk": "@@ -16,6 +16,6 @@\n  * limitations under the License.\n  */\n import { configure } from \"enzyme\";\n-import * as Adapter from \"enzyme-adapter-react-16\";\n-\n-configure({ adapter: new Adapter() });\n+import * as ReactSixteenAdapter from \"enzyme-adapter-react-16\";\n+const adapter = ReactSixteenAdapter as any;\n+configure({ adapter: new adapter.default() });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d3d5b14bc2cb8572b7846a17d77283d74151f8"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI3MzQwNA==", "bodyText": "Similar to jest.setup.ts, what was the issue you're trying to address here?", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507273404", "createdAt": "2020-10-19T00:15:53Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsconfig.json", "diffHunk": "@@ -2,6 +2,8 @@\n   \"compilerOptions\": {\n     \"outDir\": \"target/ts\",\n     \"module\": \"CommonJS\",\n+    \"allowSyntheticDefaultImports\": true,\n+    \"esModuleInterop\": true,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d3d5b14bc2cb8572b7846a17d77283d74151f8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI3Mzk3Ng==", "bodyText": "Ultimately yes, but not as part of this work - we plan to do that once all the search features are available in the New Search UI. (And then we'll also remove the toggle option etc.)", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507273976", "createdAt": "2020-10-19T00:17:15Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/mainui/routes.tsx", "diffHunk": "@@ -57,7 +57,7 @@ export const routes = {\n     component: SettingsPage,\n   },\n   Search: {\n-    path: \"/page/search\",\n+    path: \"(/page/search|/searching.do)\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA2NDg1Mg=="}, "originalCommit": {"oid": "4a0bf10f98054290a67963128a1224ae148a28b4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI3NzY0MA==", "bodyText": "Just a reminder that typescript enums are removed post transpilation and can cause issues in Jest tests. So we're pretty well staying away from them.\nThe more idiomatic way of JS is to use constants, or in typescript it seems safer to go with simple string unions - as unpalatable as that may feel coming from other languages. And lastly, if you also wish to be able to enumerate what is available (not possible with either of the above) then we do have the option of Union fom runtypes as I use in the REST module.\nAny this just in... I've found that runtypes has Pattern Matching!! I was looking for that in my View Attachments work to avoid a switch statement - and so would be a great fit for you here.", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507277640", "createdAt": "2020-10-19T00:25:27Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -87,6 +88,19 @@ export interface DateRange {\n   end?: Date;\n }\n \n+/**\n+ * Legacy searching.do parameters currently supported by SearchPage component.\n+ */\n+export enum LegacySearchParams {\n+  PRIMARYDATE = \"dp\",\n+  SECONDARYDATE = \"ds\",\n+  DATERANGE = \"dr\",\n+  QUERY = \"q\",\n+  SORT = \"sort\",\n+  OWNER = \"owner\",\n+  IN = \"in\",\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d3d5b14bc2cb8572b7846a17d77283d74151f8"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI4MjA4OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @param queryString query string params from a shared searching.do url\n          \n          \n            \n             * @param queryString query string params from a shared `searching.do` URL\n          \n      \n    \n    \n  \n\nTwo things there:\n\ngood to get capitalisation for acronyms right; and\nYou can use markdown in these comments and the formatting will carry over (if we ever get around to generating it)", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507282089", "createdAt": "2020-10-19T00:31:55Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -202,3 +216,84 @@ export const searchItems = ({\n   };\n   return OEQ.Search.search(API_BASE_URL, searchParams);\n };\n+\n+/**\n+ * A function that takes query string params from a shared searching.do url and converts all applicable params to Search options\n+ * @param queryString query string params from a shared searching.do url", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d3d5b14bc2cb8572b7846a17d77283d74151f8"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI4MzQwNQ==", "bodyText": "Please specify return type.\nFor exported / externally used functions they should be fully typed.", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507283405", "createdAt": "2020-10-19T00:33:31Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -202,3 +216,84 @@ export const searchItems = ({\n   };\n   return OEQ.Search.search(API_BASE_URL, searchParams);\n };\n+\n+/**\n+ * A function that takes query string params from a shared searching.do url and converts all applicable params to Search options\n+ * @param queryString query string params from a shared searching.do url\n+ * @return SearchOptions object\n+ */\n+export const convertParamsToSearchOptions = async (queryString: string) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d3d5b14bc2cb8572b7846a17d77283d74151f8"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI4NTQ0NA==", "bodyText": "Should this either:\n\nReturn default search options; or\nThrow an error\n\nMore so though, is this redundant as the function signature does not allow undefined. \ud83e\udd14", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507285444", "createdAt": "2020-10-19T00:35:42Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -202,3 +216,84 @@ export const searchItems = ({\n   };\n   return OEQ.Search.search(API_BASE_URL, searchParams);\n };\n+\n+/**\n+ * A function that takes query string params from a shared searching.do url and converts all applicable params to Search options\n+ * @param queryString query string params from a shared searching.do url\n+ * @return SearchOptions object\n+ */\n+export const convertParamsToSearchOptions = async (queryString: string) => {\n+  if (!queryString) return undefined;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d3d5b14bc2cb8572b7846a17d77283d74151f8"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI5MDI2MQ==", "bodyText": "So if a userId is invalid, then I guess (without having read resolveUsers) that userDetails.length could be less than 1 and this will return undefined. Should you specify that in the return type, or do you need to throw or...", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507290261", "createdAt": "2020-10-19T00:41:14Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -202,3 +216,84 @@ export const searchItems = ({\n   };\n   return OEQ.Search.search(API_BASE_URL, searchParams);\n };\n+\n+/**\n+ * A function that takes query string params from a shared searching.do url and converts all applicable params to Search options\n+ * @param queryString query string params from a shared searching.do url\n+ * @return SearchOptions object\n+ */\n+export const convertParamsToSearchOptions = async (queryString: string) => {\n+  if (!queryString) return undefined;\n+\n+  const params = new URLSearchParams(queryString);\n+\n+  const getQueryParam = (paramName: string) => {\n+    return params.get(paramName) ?? undefined;\n+  };\n+\n+  const collection = getQueryParam(LegacySearchParams.IN)?.substring(1);\n+  const owner = getQueryParam(LegacySearchParams.OWNER);\n+  const dateRange = getQueryParam(LegacySearchParams.DATERANGE);\n+\n+  const getUserDetails = async (\n+    userId: string\n+  ): Promise<OEQ.UserQuery.UserDetails> => {\n+    const userDetails = await resolveUsers([userId]);\n+    return userDetails[0];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d3d5b14bc2cb8572b7846a17d77283d74151f8"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI5NjM4Nw==", "bodyText": "This will now have the SEARCH_COLLECTION string in three (+) places. Being a standard ACL arguably it should in an ACL_SEARCH_COLLECTION constant. Maybe we need a oeq-ts-rest-api/src/Acl.ts.\nThis ideally would've been addressed when we reached two instances, so we definitely need to do it now.", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507296387", "createdAt": "2020-10-19T00:50:44Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -202,3 +216,84 @@ export const searchItems = ({\n   };\n   return OEQ.Search.search(API_BASE_URL, searchParams);\n };\n+\n+/**\n+ * A function that takes query string params from a shared searching.do url and converts all applicable params to Search options\n+ * @param queryString query string params from a shared searching.do url\n+ * @return SearchOptions object\n+ */\n+export const convertParamsToSearchOptions = async (queryString: string) => {\n+  if (!queryString) return undefined;\n+\n+  const params = new URLSearchParams(queryString);\n+\n+  const getQueryParam = (paramName: string) => {\n+    return params.get(paramName) ?? undefined;\n+  };\n+\n+  const collection = getQueryParam(LegacySearchParams.IN)?.substring(1);\n+  const owner = getQueryParam(LegacySearchParams.OWNER);\n+  const dateRange = getQueryParam(LegacySearchParams.DATERANGE);\n+\n+  const getUserDetails = async (\n+    userId: string\n+  ): Promise<OEQ.UserQuery.UserDetails> => {\n+    const userDetails = await resolveUsers([userId]);\n+    return userDetails[0];\n+  };\n+\n+  const getCollectionDetails = async (\n+    collectionUuid: string\n+  ): Promise<Collection[]> => {\n+    const collectionList = await collectionListSummary([\"SEARCH_COLLECTION\"]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d3d5b14bc2cb8572b7846a17d77283d74151f8"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMwMTQ3OQ==", "bodyText": "So as mentioned above, I reckon let's bring in runtypes and then setup a Union for the ranges, and then with that in place you can also replace the below switch statement using rangeType a pattern match.", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507301479", "createdAt": "2020-10-19T00:58:22Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -202,3 +216,84 @@ export const searchItems = ({\n   };\n   return OEQ.Search.search(API_BASE_URL, searchParams);\n };\n+\n+/**\n+ * A function that takes query string params from a shared searching.do url and converts all applicable params to Search options\n+ * @param queryString query string params from a shared searching.do url\n+ * @return SearchOptions object\n+ */\n+export const convertParamsToSearchOptions = async (queryString: string) => {\n+  if (!queryString) return undefined;\n+\n+  const params = new URLSearchParams(queryString);\n+\n+  const getQueryParam = (paramName: string) => {\n+    return params.get(paramName) ?? undefined;\n+  };\n+\n+  const collection = getQueryParam(LegacySearchParams.IN)?.substring(1);\n+  const owner = getQueryParam(LegacySearchParams.OWNER);\n+  const dateRange = getQueryParam(LegacySearchParams.DATERANGE);\n+\n+  const getUserDetails = async (\n+    userId: string\n+  ): Promise<OEQ.UserQuery.UserDetails> => {\n+    const userDetails = await resolveUsers([userId]);\n+    return userDetails[0];\n+  };\n+\n+  const getCollectionDetails = async (\n+    collectionUuid: string\n+  ): Promise<Collection[]> => {\n+    const collectionList = await collectionListSummary([\"SEARCH_COLLECTION\"]);\n+    return collectionList.filter((c) => {\n+      return c.uuid === collectionUuid;\n+    });\n+  };\n+\n+  const getLastModifiedDateRange = (\n+    rangeType: string,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d3d5b14bc2cb8572b7846a17d77283d74151f8"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMwMzExOQ==", "bodyText": "What's the ?? here for when primaryDate is typed as Date - i.e. no undefined or null allowed.", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507303119", "createdAt": "2020-10-19T01:01:10Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -202,3 +216,84 @@ export const searchItems = ({\n   };\n   return OEQ.Search.search(API_BASE_URL, searchParams);\n };\n+\n+/**\n+ * A function that takes query string params from a shared searching.do url and converts all applicable params to Search options\n+ * @param queryString query string params from a shared searching.do url\n+ * @return SearchOptions object\n+ */\n+export const convertParamsToSearchOptions = async (queryString: string) => {\n+  if (!queryString) return undefined;\n+\n+  const params = new URLSearchParams(queryString);\n+\n+  const getQueryParam = (paramName: string) => {\n+    return params.get(paramName) ?? undefined;\n+  };\n+\n+  const collection = getQueryParam(LegacySearchParams.IN)?.substring(1);\n+  const owner = getQueryParam(LegacySearchParams.OWNER);\n+  const dateRange = getQueryParam(LegacySearchParams.DATERANGE);\n+\n+  const getUserDetails = async (\n+    userId: string\n+  ): Promise<OEQ.UserQuery.UserDetails> => {\n+    const userDetails = await resolveUsers([userId]);\n+    return userDetails[0];\n+  };\n+\n+  const getCollectionDetails = async (\n+    collectionUuid: string\n+  ): Promise<Collection[]> => {\n+    const collectionList = await collectionListSummary([\"SEARCH_COLLECTION\"]);\n+    return collectionList.filter((c) => {\n+      return c.uuid === collectionUuid;\n+    });\n+  };\n+\n+  const getLastModifiedDateRange = (\n+    rangeType: string,\n+    primaryDate: Date,\n+    secondaryDate?: Date\n+  ): DateRange => {\n+    let dr: DateRange = {};\n+    switch (rangeType?.toLocaleLowerCase()) {\n+      case undefined:\n+        break;\n+      case \"between\":\n+        dr = { start: primaryDate, end: secondaryDate };\n+        break;\n+      case \"after\":\n+        dr = { start: primaryDate ?? undefined };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d3d5b14bc2cb8572b7846a17d77283d74151f8"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMwNDUyNg==", "bodyText": "Should this be:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  (getQueryParam(LegacySearchParams.SORT)?.toUpperCase() as SortOrder) ||\n          \n          \n            \n                  (getQueryParam(LegacySearchParams.SORT)?.toUpperCase() as SortOrder) ??\n          \n      \n    \n    \n  \n\n?", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507304526", "createdAt": "2020-10-19T01:03:30Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -202,3 +216,84 @@ export const searchItems = ({\n   };\n   return OEQ.Search.search(API_BASE_URL, searchParams);\n };\n+\n+/**\n+ * A function that takes query string params from a shared searching.do url and converts all applicable params to Search options\n+ * @param queryString query string params from a shared searching.do url\n+ * @return SearchOptions object\n+ */\n+export const convertParamsToSearchOptions = async (queryString: string) => {\n+  if (!queryString) return undefined;\n+\n+  const params = new URLSearchParams(queryString);\n+\n+  const getQueryParam = (paramName: string) => {\n+    return params.get(paramName) ?? undefined;\n+  };\n+\n+  const collection = getQueryParam(LegacySearchParams.IN)?.substring(1);\n+  const owner = getQueryParam(LegacySearchParams.OWNER);\n+  const dateRange = getQueryParam(LegacySearchParams.DATERANGE);\n+\n+  const getUserDetails = async (\n+    userId: string\n+  ): Promise<OEQ.UserQuery.UserDetails> => {\n+    const userDetails = await resolveUsers([userId]);\n+    return userDetails[0];\n+  };\n+\n+  const getCollectionDetails = async (\n+    collectionUuid: string\n+  ): Promise<Collection[]> => {\n+    const collectionList = await collectionListSummary([\"SEARCH_COLLECTION\"]);\n+    return collectionList.filter((c) => {\n+      return c.uuid === collectionUuid;\n+    });\n+  };\n+\n+  const getLastModifiedDateRange = (\n+    rangeType: string,\n+    primaryDate: Date,\n+    secondaryDate?: Date\n+  ): DateRange => {\n+    let dr: DateRange = {};\n+    switch (rangeType?.toLocaleLowerCase()) {\n+      case undefined:\n+        break;\n+      case \"between\":\n+        dr = { start: primaryDate, end: secondaryDate };\n+        break;\n+      case \"after\":\n+        dr = { start: primaryDate ?? undefined };\n+        break;\n+      case \"before\":\n+        dr = { end: primaryDate };\n+        break;\n+      case \"on\":\n+        dr = { start: primaryDate, end: primaryDate };\n+        break;\n+      default:\n+        throw new TypeError(\"Invalid range\");\n+        break;\n+    }\n+    return dr;\n+  };\n+\n+  const searchOptions: SearchOptions = {\n+    ...defaultSearchOptions,\n+    collections: collection\n+      ? await getCollectionDetails(collection)\n+      : undefined,\n+    query: getQueryParam(LegacySearchParams.QUERY),\n+    owner: owner ? await getUserDetails(owner) : undefined,\n+    lastModifiedDateRange: getLastModifiedDateRange(\n+      dateRange ?? \"\",\n+      new Date(parseInt(getQueryParam(LegacySearchParams.PRIMARYDATE) ?? \"\")),\n+      new Date(parseInt(getQueryParam(LegacySearchParams.SECONDARYDATE) ?? \"\"))\n+    ),\n+    sortOrder:\n+      (getQueryParam(LegacySearchParams.SORT)?.toUpperCase() as SortOrder) ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d3d5b14bc2cb8572b7846a17d77283d74151f8"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMwNTUxNw==", "bodyText": "I wonder if in the below where you do various coalescing to undefined or \"\" whether you really should be going back to the value from defaultSearchOptions?", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507305517", "createdAt": "2020-10-19T01:04:45Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -202,3 +216,84 @@ export const searchItems = ({\n   };\n   return OEQ.Search.search(API_BASE_URL, searchParams);\n };\n+\n+/**\n+ * A function that takes query string params from a shared searching.do url and converts all applicable params to Search options\n+ * @param queryString query string params from a shared searching.do url\n+ * @return SearchOptions object\n+ */\n+export const convertParamsToSearchOptions = async (queryString: string) => {\n+  if (!queryString) return undefined;\n+\n+  const params = new URLSearchParams(queryString);\n+\n+  const getQueryParam = (paramName: string) => {\n+    return params.get(paramName) ?? undefined;\n+  };\n+\n+  const collection = getQueryParam(LegacySearchParams.IN)?.substring(1);\n+  const owner = getQueryParam(LegacySearchParams.OWNER);\n+  const dateRange = getQueryParam(LegacySearchParams.DATERANGE);\n+\n+  const getUserDetails = async (\n+    userId: string\n+  ): Promise<OEQ.UserQuery.UserDetails> => {\n+    const userDetails = await resolveUsers([userId]);\n+    return userDetails[0];\n+  };\n+\n+  const getCollectionDetails = async (\n+    collectionUuid: string\n+  ): Promise<Collection[]> => {\n+    const collectionList = await collectionListSummary([\"SEARCH_COLLECTION\"]);\n+    return collectionList.filter((c) => {\n+      return c.uuid === collectionUuid;\n+    });\n+  };\n+\n+  const getLastModifiedDateRange = (\n+    rangeType: string,\n+    primaryDate: Date,\n+    secondaryDate?: Date\n+  ): DateRange => {\n+    let dr: DateRange = {};\n+    switch (rangeType?.toLocaleLowerCase()) {\n+      case undefined:\n+        break;\n+      case \"between\":\n+        dr = { start: primaryDate, end: secondaryDate };\n+        break;\n+      case \"after\":\n+        dr = { start: primaryDate ?? undefined };\n+        break;\n+      case \"before\":\n+        dr = { end: primaryDate };\n+        break;\n+      case \"on\":\n+        dr = { start: primaryDate, end: primaryDate };\n+        break;\n+      default:\n+        throw new TypeError(\"Invalid range\");\n+        break;\n+    }\n+    return dr;\n+  };\n+\n+  const searchOptions: SearchOptions = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d3d5b14bc2cb8572b7846a17d77283d74151f8"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMwNzM2Ng==", "bodyText": "We know it's an array (more or less) from the type signature. How about reworking to something more generic - and also defining which IDs:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @param ids An array of oEQ ids\n          \n          \n            \n             * @param ids A list of oEQ user IDs", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507307366", "createdAt": "2020-10-19T01:06:50Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/UserModule.ts", "diffHunk": "@@ -40,3 +40,16 @@ export const getCurrentUserDetails = () =>\n   OEQ.LegacyContent.getCurrentUserDetails(API_BASE_URL).then(\n     (result: OEQ.LegacyContent.CurrentUserDetails) => result\n   );\n+\n+/**\n+ * Lookup users known in oEQ.\n+ * @param ids An array of oEQ ids", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d3d5b14bc2cb8572b7846a17d77283d74151f8"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMxMDE3NA==", "bodyText": "Two things:\n\nWhy were the superfluous curly braces added?\nIn doing so we've no lost white space between the end of this function (handleQueryChanged) and the next (handleCollectionSelectionChanged).", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507310174", "createdAt": "2020-10-19T01:10:25Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/SearchPage.tsx", "diffHunk": "@@ -184,14 +204,14 @@ const SearchPage = ({ updateTemplate }: TemplateUpdateProps) => {\n   const handleSortOrderChanged = (order: SortOrder) =>\n     setSearchPageOptions({ ...searchPageOptions, sortOrder: order });\n \n-  const handleQueryChanged = (query: string) =>\n+  const handleQueryChanged = (query: string) => {\n     setSearchPageOptions({\n       ...searchPageOptions,\n       query: query,\n       currentPage: 0,\n       selectedCategories: undefined,\n     });\n-\n+  };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d3d5b14bc2cb8572b7846a17d77283d74151f8"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMxMTE1MA==", "bodyText": "Yup, it was iff as in https://en.wikipedia.org/wiki/If_and_only_if\nBut if it keeps confusing people, then we can leave it.", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507311150", "createdAt": "2020-10-19T01:11:57Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/SearchBar.tsx", "diffHunk": "@@ -94,21 +94,20 @@ export default function SearchBar({\n \n   // Update state when search query is cleared.\n   useEffect(() => {\n-    if (!query) {\n-      setCurrentQuery(query);\n-    }\n+    setCurrentQuery(query);\n   }, [query]);\n \n   const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n     if (event.keyCode === ESCAPE_KEY_CODE && currentQuery) {\n-      // iff there is a current query, clear it out and trigger a search\n+      // if there is a current query, clear it out and trigger a search", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI2MjE3NA=="}, "originalCommit": {"oid": "86d3d5b14bc2cb8572b7846a17d77283d74151f8"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMxMjgxMQ==", "bodyText": "We probably need to mark this test with a TODO so that @PenghaiZhang can pick is up when he does his work to exclude tests which only work in old or new from certain modes. \ud83e\udd14", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507312811", "createdAt": "2020-10-19T01:14:14Z", "author": {"login": "edalex-ian"}, "path": "autotest/Tests/src/test/scala/equellatests/tests/SearchQueryProperties.scala", "diffHunk": "@@ -1,84 +1,92 @@\n package equellatests.tests\n \n-import com.tle.webtests.framework.PageContext\n+import java.io.File\n+import java.lang.System.console\n+\n+import com.tle.webtests.framework.{PageContext, TestConfig}\n import com.tle.webtests.pageobject.searching.SearchPage\n import com.tle.webtests.pageobject.wizard.ContributePage\n+import equellatests.GlobalConfig.{baseFolderForInst, testConfig}\n import equellatests.domain._\n import equellatests.instgen.workflow._\n-import equellatests.ShotProperties\n+import equellatests.{GlobalConfig, ShotProperties}\n import org.scalacheck.Arbitrary._\n import org.scalacheck.Prop._\n import org.scalacheck._\n \n object SearchQueryProperties extends ShotProperties(\"Search Query Properties\") {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d3d5b14bc2cb8572b7846a17d77283d74151f8"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c09c5ee58b8b560a3dd5ef17af1a55b21cc3b83d", "author": {"user": {"login": "mrblippy", "name": "Nick Charles"}}, "url": "https://github.com/openequella/openEQUELLA/commit/c09c5ee58b8b560a3dd5ef17af1a55b21cc3b83d", "committedDate": "2020-10-19T01:51:58Z", "message": "Add RangeType type to SearchModule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfb493cdb1d9e2b8a4bf46bdf363b98bc0e9e1df", "author": {"user": {"login": "mrblippy", "name": "Nick Charles"}}, "url": "https://github.com/openequella/openEQUELLA/commit/bfb493cdb1d9e2b8a4bf46bdf363b98bc0e9e1df", "committedDate": "2020-10-19T05:29:47Z", "message": "Only redirect seraching.do url to SearchPage component if newSeach is enabled in config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d7bd036ea12a8bce6df4278e21131e74e90b16d", "author": {"user": {"login": "mrblippy", "name": "Nick Charles"}}, "url": "https://github.com/openequella/openEQUELLA/commit/0d7bd036ea12a8bce6df4278e21131e74e90b16d", "committedDate": "2020-10-23T01:17:27Z", "message": "Address pr feedback that I really should have included in separate commits. Includes:\n* Adding new Acl into the api module to store ACL constants\n* Allow query string to be used inside SearchPage test, in order to validate that the useLocation hook is being used properly\n* Adjust DateRangeSelector Luxon import, as my previous change broke DateSelector in the browser\n* Use defaultSearchOptions in SearchModule, for any searchquery parameters have not been defined"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1NjkyODk0", "url": "https://github.com/openequella/openEQUELLA/pull/2414#pullrequestreview-515692894", "createdAt": "2020-10-23T13:58:15Z", "commit": {"oid": "0d7bd036ea12a8bce6df4278e21131e74e90b16d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMzo1ODoxNVrOHnPDfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMzo1ODoxNVrOHnPDfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkwMzE2NA==", "bodyText": "Out of curiosity, why is runtypes used here for type validation, while\n\n  \n    \n      openEQUELLA/oeq-ts-rest-api/package.json\n    \n    \n         Line 37\n      in\n      7d32b92\n    \n    \n    \n    \n\n        \n          \n           \"typescript-is\": \"^0.16.0\" \n        \n    \n  \n\n\nis used in the rest API?", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r510903164", "createdAt": "2020-10-23T13:58:15Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.core/js/package.json", "diffHunk": "@@ -33,26 +33,27 @@\n     \"@material-ui/core\": \"4.11.0\",\n     \"@material-ui/icons\": \"4.9.1\",\n     \"@material-ui/lab\": \"4.0.0-alpha.56\",\n+    \"@material-ui/pickers\": \"3.2.10\",\n+    \"@openequella/rest-api-client\": \"file:../../../../../oeq-ts-rest-api\",\n     \"@tinymce/tinymce-react\": \"3.6.1\",\n     \"axios\": \"0.20.0\",\n     \"create-react-class\": \"15.6.3\",\n     \"es6-object-assign\": \"1.1.0\",\n     \"history\": \"4.10.1\",\n     \"jspolyfill-array.prototype.find\": \"0.1.3\",\n     \"lodash\": \"4.17.20\",\n-    \"@material-ui/pickers\": \"3.2.10\",\n     \"luxon\": \"1.25.0\",\n-    \"@openequella/rest-api-client\": \"file:../../../../../oeq-ts-rest-api\",\n     \"oeq-cloudproviders\": \"git+https://github.com/apereo/openEQUELLA-cloudprovidersdk.git#32d958ddfff64ca748e7e1b2eae0f0487946a487\",\n     \"prop-types\": \"15.7.2\",\n     \"react\": \"16.14.0\",\n     \"react-beautiful-dnd\": \"13.0.0\",\n     \"react-color\": \"2.18.1\",\n-    \"react-html-parser\": \"2.0.2\",\n     \"react-dom\": \"16.14.0\",\n+    \"react-html-parser\": \"2.0.2\",\n     \"react-router\": \"5.2.0\",\n     \"react-router-dom\": \"5.2.0\",\n     \"react-visibility-sensor\": \"3.14.0\",\n+    \"runtypes\": \"^5.0.1\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d7bd036ea12a8bce6df4278e21131e74e90b16d"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16f81649e29d7a2d567aa622ea3eda2cd209b543", "author": {"user": {"login": "mrblippy", "name": "Nick Charles"}}, "url": "https://github.com/openequella/openEQUELLA/commit/16f81649e29d7a2d567aa622ea3eda2cd209b543", "committedDate": "2020-10-25T22:25:51Z", "message": "Check if renderData is defined before using it, otherwise we get errors loading the settings page in old ui mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca3cb94e8383f5cbc3deba4b6f9cb3befee12167", "author": {"user": {"login": "mrblippy", "name": "Nick Charles"}}, "url": "https://github.com/openequella/openEQUELLA/commit/ca3cb94e8383f5cbc3deba4b6f9cb3befee12167", "committedDate": "2020-10-25T23:07:30Z", "message": "Remove the Enum that i mistakenly left in here"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "984766e93c011959fce52d04b29015b46d178841", "author": {"user": {"login": "mrblippy", "name": "Nick Charles"}}, "url": "https://github.com/openequella/openEQUELLA/commit/984766e93c011959fce52d04b29015b46d178841", "committedDate": "2020-10-26T01:06:26Z", "message": "Return defaults when collections and userids don't exists, and add tests to validate it"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "feaf8639390929b773268bff49a1b599254a7e9f", "author": {"user": {"login": "mrblippy", "name": "Nick Charles"}}, "url": "https://github.com/openequella/openEQUELLA/commit/feaf8639390929b773268bff49a1b599254a7e9f", "committedDate": "2020-10-26T02:30:27Z", "message": "Actually use the queryString parameter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9081024bc7c6c6c8d689fbc73285828db101fc83", "author": {"user": {"login": "mrblippy", "name": "Nick Charles"}}, "url": "https://github.com/openequella/openEQUELLA/commit/9081024bc7c6c6c8d689fbc73285828db101fc83", "committedDate": "2020-10-27T02:50:42Z", "message": "Modify enzyme adapter import, so enzyme based tests run correctly with the esModuleInterop tsconfig flag set to true"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff9a51e6d57149140d104109738de8e6c924e121", "author": {"user": {"login": "mrblippy", "name": "Nick Charles"}}, "url": "https://github.com/openequella/openEQUELLA/commit/ff9a51e6d57149140d104109738de8e6c924e121", "committedDate": "2020-10-27T03:00:06Z", "message": "Merge branch 'develop' into feature/legacy-search-params"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b61d4d7b71a6fe91d3670210b081df16a90cc9f", "author": {"user": {"login": "mrblippy", "name": "Nick Charles"}}, "url": "https://github.com/openequella/openEQUELLA/commit/5b61d4d7b71a6fe91d3670210b081df16a90cc9f", "committedDate": "2020-10-27T03:23:44Z", "message": "Remove the duplicate imports and rouge any that snuck into my merge conflict resolution"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d9770896f89bc1aa1f89aaa8cd3e878906233b2", "author": {"user": {"login": "mrblippy", "name": "Nick Charles"}}, "url": "https://github.com/openequella/openEQUELLA/commit/0d9770896f89bc1aa1f89aaa8cd3e878906233b2", "committedDate": "2020-10-27T03:42:18Z", "message": "Reinstate a MimeTypesModule import in SearchPageTest that I mistakenly removed when resolving merge conflicts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MzcwMDU1", "url": "https://github.com/openequella/openEQUELLA/pull/2414#pullrequestreview-517370055", "createdAt": "2020-10-27T06:02:17Z", "commit": {"oid": "0d9770896f89bc1aa1f89aaa8cd3e878906233b2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NjgzNzAy", "url": "https://github.com/openequella/openEQUELLA/pull/2414#pullrequestreview-517683702", "createdAt": "2020-10-27T13:10:49Z", "commit": {"oid": "0d9770896f89bc1aa1f89aaa8cd3e878906233b2"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMzoxMDo0OVrOHo7XGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMzo1NTo0NFrOHo9dmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY3NzY1OQ==", "bodyText": "according to the typing rangeType should already be RangeType?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                )(rangeType.toLowerCase() as RangeType);\n          \n          \n            \n                )(rangeType.toLowerCase());\n          \n      \n    \n    \n  \n\nalso since the value comes from a dropdown,\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                )(rangeType.toLowerCase() as RangeType);\n          \n          \n            \n                )(rangeType);\n          \n      \n    \n    \n  \n\nmay work?", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r512677659", "createdAt": "2020-10-27T13:10:49Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -202,3 +220,100 @@ export const searchItems = ({\n   };\n   return OEQ.Search.search(API_BASE_URL, searchParams);\n };\n+\n+/**\n+ * A function that takes query string params from a shared searching.do URL and converts all applicable params to Search options\n+ * @param queryString query string params from a shared `searching.do` URL\n+ * @return SearchOptions object, or undefined if there were no query string parameters.\n+ */\n+export const convertParamsToSearchOptions = async (\n+  queryString: string\n+): Promise<SearchOptions | undefined> => {\n+  if (!queryString) return undefined;\n+\n+  const params = new URLSearchParams(queryString);\n+\n+  const getQueryParam = (paramName: LegacyParams) => {\n+    return params.get(paramName) ?? undefined;\n+  };\n+\n+  const collectionId = getQueryParam(\"in\")?.substring(1);\n+  const ownerId = getQueryParam(\"owner\");\n+  const dateRange = getQueryParam(\"dr\");\n+  const datePrimary = getQueryParam(\"dp\");\n+  const dateSecondary = getQueryParam(\"ds\");\n+\n+  const getUserDetails = async (\n+    userId: string\n+  ): Promise<OEQ.UserQuery.UserDetails | undefined> => {\n+    const userDetails = await resolveUsers([userId]);\n+    return userDetails.length > 0 ? userDetails[0] : defaultSearchOptions.owner;\n+  };\n+\n+  const getCollectionDetails = async (\n+    collectionUuid: string\n+  ): Promise<Collection[] | undefined> => {\n+    const collectionList = await collectionListSummary([\n+      OEQ.Acl.ACL_SEARCH_COLLECTION,\n+    ]);\n+    const filteredCollectionList = collectionList.filter((c) => {\n+      return c.uuid === collectionUuid;\n+    });\n+    return filteredCollectionList.length > 0\n+      ? filteredCollectionList\n+      : defaultSearchOptions.collections;\n+  };\n+\n+  const RangeType = Union(\n+    Literal(\"between\"),\n+    Literal(\"after\"),\n+    Literal(\"before\"),\n+    Literal(\"on\")\n+  );\n+\n+  type RangeType = Static<typeof RangeType>;\n+\n+  const getLastModifiedDateRange = (\n+    rangeType: RangeType,\n+    primaryDate?: Date,\n+    secondaryDate?: Date\n+  ): DateRange | undefined => {\n+    if (!primaryDate && !secondaryDate) {\n+      return undefined;\n+    }\n+    return match(\n+      [\n+        Literal(\"between\"),\n+        (): DateRange => ({ start: primaryDate, end: secondaryDate }),\n+      ],\n+      [Literal(\"after\"), (): DateRange => ({ start: primaryDate })],\n+      [Literal(\"before\"), (): DateRange => ({ end: primaryDate })],\n+      [\n+        Literal(\"on\"),\n+        (): DateRange => ({\n+          start: primaryDate,\n+          end: primaryDate,\n+        }),\n+      ]\n+    )(rangeType.toLowerCase() as RangeType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d9770896f89bc1aa1f89aaa8cd3e878906233b2"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcwNjM2NA==", "bodyText": "[Runtypes is] being used for its pattern matching in this context.\n\nIs matching needed? This looks like it could be a case statement", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r512706364", "createdAt": "2020-10-27T13:48:47Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -202,3 +220,100 @@ export const searchItems = ({\n   };\n   return OEQ.Search.search(API_BASE_URL, searchParams);\n };\n+\n+/**\n+ * A function that takes query string params from a shared searching.do URL and converts all applicable params to Search options\n+ * @param queryString query string params from a shared `searching.do` URL\n+ * @return SearchOptions object, or undefined if there were no query string parameters.\n+ */\n+export const convertParamsToSearchOptions = async (\n+  queryString: string\n+): Promise<SearchOptions | undefined> => {\n+  if (!queryString) return undefined;\n+\n+  const params = new URLSearchParams(queryString);\n+\n+  const getQueryParam = (paramName: LegacyParams) => {\n+    return params.get(paramName) ?? undefined;\n+  };\n+\n+  const collectionId = getQueryParam(\"in\")?.substring(1);\n+  const ownerId = getQueryParam(\"owner\");\n+  const dateRange = getQueryParam(\"dr\");\n+  const datePrimary = getQueryParam(\"dp\");\n+  const dateSecondary = getQueryParam(\"ds\");\n+\n+  const getUserDetails = async (\n+    userId: string\n+  ): Promise<OEQ.UserQuery.UserDetails | undefined> => {\n+    const userDetails = await resolveUsers([userId]);\n+    return userDetails.length > 0 ? userDetails[0] : defaultSearchOptions.owner;\n+  };\n+\n+  const getCollectionDetails = async (\n+    collectionUuid: string\n+  ): Promise<Collection[] | undefined> => {\n+    const collectionList = await collectionListSummary([\n+      OEQ.Acl.ACL_SEARCH_COLLECTION,\n+    ]);\n+    const filteredCollectionList = collectionList.filter((c) => {\n+      return c.uuid === collectionUuid;\n+    });\n+    return filteredCollectionList.length > 0\n+      ? filteredCollectionList\n+      : defaultSearchOptions.collections;\n+  };\n+\n+  const RangeType = Union(\n+    Literal(\"between\"),\n+    Literal(\"after\"),\n+    Literal(\"before\"),\n+    Literal(\"on\")\n+  );\n+\n+  type RangeType = Static<typeof RangeType>;\n+\n+  const getLastModifiedDateRange = (\n+    rangeType: RangeType,\n+    primaryDate?: Date,\n+    secondaryDate?: Date\n+  ): DateRange | undefined => {\n+    if (!primaryDate && !secondaryDate) {\n+      return undefined;\n+    }\n+    return match(\n+      [\n+        Literal(\"between\"),\n+        (): DateRange => ({ start: primaryDate, end: secondaryDate }),\n+      ],\n+      [Literal(\"after\"), (): DateRange => ({ start: primaryDate })],\n+      [Literal(\"before\"), (): DateRange => ({ end: primaryDate })],\n+      [\n+        Literal(\"on\"),\n+        (): DateRange => ({\n+          start: primaryDate,\n+          end: primaryDate,\n+        }),\n+      ]\n+    )(rangeType.toLowerCase() as RangeType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d9770896f89bc1aa1f89aaa8cd3e878906233b2"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcxMTk0Ng==", "bodyText": "Since runtypes and typescript-is are available would it make sense to validate rather than cast?", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r512711946", "createdAt": "2020-10-27T13:55:34Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -202,3 +220,100 @@ export const searchItems = ({\n   };\n   return OEQ.Search.search(API_BASE_URL, searchParams);\n };\n+\n+/**\n+ * A function that takes query string params from a shared searching.do URL and converts all applicable params to Search options\n+ * @param queryString query string params from a shared `searching.do` URL\n+ * @return SearchOptions object, or undefined if there were no query string parameters.\n+ */\n+export const convertParamsToSearchOptions = async (\n+  queryString: string\n+): Promise<SearchOptions | undefined> => {\n+  if (!queryString) return undefined;\n+\n+  const params = new URLSearchParams(queryString);\n+\n+  const getQueryParam = (paramName: LegacyParams) => {\n+    return params.get(paramName) ?? undefined;\n+  };\n+\n+  const collectionId = getQueryParam(\"in\")?.substring(1);\n+  const ownerId = getQueryParam(\"owner\");\n+  const dateRange = getQueryParam(\"dr\");\n+  const datePrimary = getQueryParam(\"dp\");\n+  const dateSecondary = getQueryParam(\"ds\");\n+\n+  const getUserDetails = async (\n+    userId: string\n+  ): Promise<OEQ.UserQuery.UserDetails | undefined> => {\n+    const userDetails = await resolveUsers([userId]);\n+    return userDetails.length > 0 ? userDetails[0] : defaultSearchOptions.owner;\n+  };\n+\n+  const getCollectionDetails = async (\n+    collectionUuid: string\n+  ): Promise<Collection[] | undefined> => {\n+    const collectionList = await collectionListSummary([\n+      OEQ.Acl.ACL_SEARCH_COLLECTION,\n+    ]);\n+    const filteredCollectionList = collectionList.filter((c) => {\n+      return c.uuid === collectionUuid;\n+    });\n+    return filteredCollectionList.length > 0\n+      ? filteredCollectionList\n+      : defaultSearchOptions.collections;\n+  };\n+\n+  const RangeType = Union(\n+    Literal(\"between\"),\n+    Literal(\"after\"),\n+    Literal(\"before\"),\n+    Literal(\"on\")\n+  );\n+\n+  type RangeType = Static<typeof RangeType>;\n+\n+  const getLastModifiedDateRange = (\n+    rangeType: RangeType,\n+    primaryDate?: Date,\n+    secondaryDate?: Date\n+  ): DateRange | undefined => {\n+    if (!primaryDate && !secondaryDate) {\n+      return undefined;\n+    }\n+    return match(\n+      [\n+        Literal(\"between\"),\n+        (): DateRange => ({ start: primaryDate, end: secondaryDate }),\n+      ],\n+      [Literal(\"after\"), (): DateRange => ({ start: primaryDate })],\n+      [Literal(\"before\"), (): DateRange => ({ end: primaryDate })],\n+      [\n+        Literal(\"on\"),\n+        (): DateRange => ({\n+          start: primaryDate,\n+          end: primaryDate,\n+        }),\n+      ]\n+    )(rangeType.toLowerCase() as RangeType);\n+  };\n+\n+  const searchOptions: SearchOptions = {\n+    ...defaultSearchOptions,\n+    collections: collectionId\n+      ? await getCollectionDetails(collectionId)\n+      : defaultSearchOptions.collections,\n+    query: getQueryParam(\"q\") ?? defaultSearchOptions.query,\n+    owner: ownerId ? await getUserDetails(ownerId) : defaultSearchOptions.owner,\n+    lastModifiedDateRange:\n+      getLastModifiedDateRange(\n+        dateRange as RangeType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d9770896f89bc1aa1f89aaa8cd3e878906233b2"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcxMjA4OQ==", "bodyText": "Since runtypes and typescript-is are available would it make sense to validate rather than cast?", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r512712089", "createdAt": "2020-10-27T13:55:44Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -202,3 +220,100 @@ export const searchItems = ({\n   };\n   return OEQ.Search.search(API_BASE_URL, searchParams);\n };\n+\n+/**\n+ * A function that takes query string params from a shared searching.do URL and converts all applicable params to Search options\n+ * @param queryString query string params from a shared `searching.do` URL\n+ * @return SearchOptions object, or undefined if there were no query string parameters.\n+ */\n+export const convertParamsToSearchOptions = async (\n+  queryString: string\n+): Promise<SearchOptions | undefined> => {\n+  if (!queryString) return undefined;\n+\n+  const params = new URLSearchParams(queryString);\n+\n+  const getQueryParam = (paramName: LegacyParams) => {\n+    return params.get(paramName) ?? undefined;\n+  };\n+\n+  const collectionId = getQueryParam(\"in\")?.substring(1);\n+  const ownerId = getQueryParam(\"owner\");\n+  const dateRange = getQueryParam(\"dr\");\n+  const datePrimary = getQueryParam(\"dp\");\n+  const dateSecondary = getQueryParam(\"ds\");\n+\n+  const getUserDetails = async (\n+    userId: string\n+  ): Promise<OEQ.UserQuery.UserDetails | undefined> => {\n+    const userDetails = await resolveUsers([userId]);\n+    return userDetails.length > 0 ? userDetails[0] : defaultSearchOptions.owner;\n+  };\n+\n+  const getCollectionDetails = async (\n+    collectionUuid: string\n+  ): Promise<Collection[] | undefined> => {\n+    const collectionList = await collectionListSummary([\n+      OEQ.Acl.ACL_SEARCH_COLLECTION,\n+    ]);\n+    const filteredCollectionList = collectionList.filter((c) => {\n+      return c.uuid === collectionUuid;\n+    });\n+    return filteredCollectionList.length > 0\n+      ? filteredCollectionList\n+      : defaultSearchOptions.collections;\n+  };\n+\n+  const RangeType = Union(\n+    Literal(\"between\"),\n+    Literal(\"after\"),\n+    Literal(\"before\"),\n+    Literal(\"on\")\n+  );\n+\n+  type RangeType = Static<typeof RangeType>;\n+\n+  const getLastModifiedDateRange = (\n+    rangeType: RangeType,\n+    primaryDate?: Date,\n+    secondaryDate?: Date\n+  ): DateRange | undefined => {\n+    if (!primaryDate && !secondaryDate) {\n+      return undefined;\n+    }\n+    return match(\n+      [\n+        Literal(\"between\"),\n+        (): DateRange => ({ start: primaryDate, end: secondaryDate }),\n+      ],\n+      [Literal(\"after\"), (): DateRange => ({ start: primaryDate })],\n+      [Literal(\"before\"), (): DateRange => ({ end: primaryDate })],\n+      [\n+        Literal(\"on\"),\n+        (): DateRange => ({\n+          start: primaryDate,\n+          end: primaryDate,\n+        }),\n+      ]\n+    )(rangeType.toLowerCase() as RangeType);\n+  };\n+\n+  const searchOptions: SearchOptions = {\n+    ...defaultSearchOptions,\n+    collections: collectionId\n+      ? await getCollectionDetails(collectionId)\n+      : defaultSearchOptions.collections,\n+    query: getQueryParam(\"q\") ?? defaultSearchOptions.query,\n+    owner: ownerId ? await getUserDetails(ownerId) : defaultSearchOptions.owner,\n+    lastModifiedDateRange:\n+      getLastModifiedDateRange(\n+        dateRange as RangeType,\n+        datePrimary ? new Date(parseInt(datePrimary)) : undefined,\n+        dateSecondary ? new Date(parseInt(dateSecondary)) : undefined\n+      ) ?? defaultSearchOptions.lastModifiedDateRange,\n+    sortOrder:\n+      (getQueryParam(\"sort\")?.toUpperCase() as SortOrder) ??", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d9770896f89bc1aa1f89aaa8cd3e878906233b2"}, "originalPosition": 145}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 408, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}