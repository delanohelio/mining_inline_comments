{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NzE5NDIy", "number": 1781, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMTo1Mzo0OVrOEFwRBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNjoyODozOVrOEGBEgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDY5MTI0OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/auditlog/AuditLogService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMTo1Mzo0OVrOGkIgfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNDowNjo1OFrOGnYhKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU0MTMwOA==", "bodyText": "Can we have more readable parameter names or  a brief description ?", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r440541308", "createdAt": "2020-06-16T01:53:49Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/auditlog/AuditLogService.java", "diffHunk": "@@ -83,6 +83,8 @@ void logItemContentViewed(\n \n   void logItemPurged(Item item);\n \n+  void logExternalConnectorUsed(String d1, String d2, String d3, String d4);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f693dddaba1f14da45f398671bb9924b3367eb5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk0OTM1Mw==", "bodyText": "done", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r443949353", "createdAt": "2020-06-23T04:06:58Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/auditlog/AuditLogService.java", "diffHunk": "@@ -83,6 +83,8 @@ void logItemContentViewed(\n \n   void logItemPurged(Item item);\n \n+  void logExternalConnectorUsed(String d1, String d2, String d3, String d4);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU0MTMwOA=="}, "originalCommit": {"oid": "8f693dddaba1f14da45f398671bb9924b3367eb5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDY5NTYyOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRESTConnectorConstants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMTo1NjowOFrOGkIjOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNDowNjo1MVrOGnYhEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU0MjAxMQ==", "bodyText": "Can remove these two lines.", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r440542011", "createdAt": "2020-06-16T01:56:08Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRESTConnectorConstants.java", "diffHunk": "@@ -18,16 +18,31 @@\n \n package com.tle.core.connectors.blackboard;\n \n-/** @author Aaron */\n @SuppressWarnings(\"nls\")\n public final class BlackboardRESTConnectorConstants {\n-  private BlackboardRESTConnectorConstants() {\n-    throw new Error();\n-  }\n+\n+  public static final String AUTHENTICATIONCODE_SERVICE_URI_PATH =\n+      \"/learn/api/public/v1/oauth2/authorizationcode\";\n+\n+  public static final String SESSION_KEY_USER_ID = \"BbRest.UserId\";\n+  public static final String SESSION_COURSES = \"BbRest.UserCourses\";\n+  public static final String SESSION_CODE = \"BbRest.Code\";\n+  public static final String SESSION_TOKEN = \"BbRest.Token\";\n \n   public static final String CONNECTOR_TYPE = \"blackboardrest\";\n \n-  public static final String FIELD_TESTED_WEBSERVICE = \"testedWebservice\";\n   public static final String FIELD_API_KEY = \"apiKey\";\n   public static final String FIELD_API_SECRET = \"apiSecret\";\n+\n+  //  public static final String FIELD_APP_ID = \"appId\";\n+  //  public static final String FIELD_APP_KEY = \"appKey\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f693dddaba1f14da45f398671bb9924b3367eb5"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk0OTMyOQ==", "bodyText": "done", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r443949329", "createdAt": "2020-06-23T04:06:51Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRESTConnectorConstants.java", "diffHunk": "@@ -18,16 +18,31 @@\n \n package com.tle.core.connectors.blackboard;\n \n-/** @author Aaron */\n @SuppressWarnings(\"nls\")\n public final class BlackboardRESTConnectorConstants {\n-  private BlackboardRESTConnectorConstants() {\n-    throw new Error();\n-  }\n+\n+  public static final String AUTHENTICATIONCODE_SERVICE_URI_PATH =\n+      \"/learn/api/public/v1/oauth2/authorizationcode\";\n+\n+  public static final String SESSION_KEY_USER_ID = \"BbRest.UserId\";\n+  public static final String SESSION_COURSES = \"BbRest.UserCourses\";\n+  public static final String SESSION_CODE = \"BbRest.Code\";\n+  public static final String SESSION_TOKEN = \"BbRest.Token\";\n \n   public static final String CONNECTOR_TYPE = \"blackboardrest\";\n \n-  public static final String FIELD_TESTED_WEBSERVICE = \"testedWebservice\";\n   public static final String FIELD_API_KEY = \"apiKey\";\n   public static final String FIELD_API_SECRET = \"apiSecret\";\n+\n+  //  public static final String FIELD_APP_ID = \"appId\";\n+  //  public static final String FIELD_APP_KEY = \"appKey\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU0MjAxMQ=="}, "originalCommit": {"oid": "8f693dddaba1f14da45f398671bb9924b3367eb5"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDcxMzM4OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestUserContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMjowNzowN1rOGkIumw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNDowNzowNVrOGnYhTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU0NDkyMw==", "bodyText": "Still got a lot of references to D2L in here. Probably worth going through to reword comments and change identifiers - so that the different connectors don't become coupled together and hard to maintain.", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r440544923", "createdAt": "2020-06-16T02:07:07Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestUserContext.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.core.connectors.blackboard;\n+\n+// TODO If this works for Bb, consider refactoring into a general class\n+import com.google.common.base.Strings;\n+import com.tle.core.connectors.brightspace.D2LSigner;\n+import java.io.Serializable;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/** TODO - this was taken from the D2L logic. May not need everything... */\n+public class BlackboardRestUserContext implements Serializable {\n+  private final String instanceUrl;\n+  private final String appId;\n+  private final String appKey;\n+  private final String userId;\n+  private final String userKey;\n+\n+  private long _serverSkewMillis;\n+\n+  private static final String APP_ID_PARAMETER = \"x_a\";\n+  private static final String USER_ID_PARAMETER = \"x_b\";\n+  private static final String SIGNATURE_BY_APP_KEY_PARAMETER = \"x_c\";\n+  private static final String SIGNATURE_BY_USER_KEY_PARAMETER = \"x_d\";\n+  private static final String TIMESTAMP_PARAMETER = \"x_t\";\n+\n+  /** Returned when no result can be identified or as an unitialized value. Val=0x00; */\n+  public final int RESULT_UNKNOWN = 0x00;\n+\n+  /** Returned when result 200 okay. Val=0x01 */\n+  public final int RESULT_OKAY = 0x01;\n+\n+  /**\n+   * Returned when the signature or id was invalid, typically this should trigger a\n+   * reauthentication. Val=0x02\n+   */\n+  public final int RESULT_INVALID_SIG = 0x02;\n+\n+  /**\n+   * Returned if the timestamp was outside of the validity window, this indicates clocks are skewed.\n+   * The handleResult message automatically corrects the clock so on receiving this message callers\n+   * typically should retry the same operation. Val=0x03\n+   */\n+  public final int RESULT_INVALID_TIMESTAMP = 0x03;\n+\n+  /**\n+   * Returned if the requested operation is not allowed, typically user should be prompted that they\n+   * need to request different permissions from the administrator. Val = 0x04\n+   */\n+  public final int RESULT_NO_PERMISSION = 0x04;\n+\n+  /**\n+   * Creates a User Context with the provided parameters\n+   *\n+   * @param url the url of the D2Linstance\n+   * @param appId the Application Id\n+   * @param appKey The Application Key\n+   * @param userId the User Id\n+   * @param userKey the User Key\n+   */\n+  public BlackboardRestUserContext(\n+      String url, String appId, String appKey, String userId, String userKey) {\n+    this.instanceUrl = url;\n+    this.appId = appId;\n+    this.appKey = appKey;\n+    this.userId = userId;\n+    this.userKey = userKey;\n+  }\n+\n+  public String getUserId() {\n+    return userId;\n+  }\n+\n+  public String getUserKey() {\n+    return userKey;\n+  }\n+\n+  public long getServerSkewMillis() {\n+    return _serverSkewMillis;\n+  }\n+\n+  public void setServerSkewMillis(long _serverSkewMillis) {\n+    this._serverSkewMillis = _serverSkewMillis;\n+  }\n+\n+  public URI createAuthenticatedUri(String path, String httpMethod) {\n+    int split = path.indexOf(\"?\");\n+    String query = \"\";\n+    if (split >= 0) {\n+      query = path.substring(split + 1);\n+      path = path.substring(0, split);\n+    }\n+    String queryString = getQueryString(path, query, httpMethod);\n+    try {\n+      URI uri = new URI(instanceUrl + path + queryString);\n+      return uri;\n+    } catch (URISyntaxException e) {\n+      e.printStackTrace();\n+      return null;\n+    }\n+  }\n+\n+  public boolean calculateServerSkewFromResponse(String responseBody) {\n+    long serverTimestampSeconds = tryParseTimestamp(responseBody);\n+    if (serverTimestampSeconds > 0) {\n+      long clientTimestampMilliseconds = System.currentTimeMillis();\n+      _serverSkewMillis = serverTimestampSeconds * 1000 - clientTimestampMilliseconds;\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  /**\n+   * Constructs the query string with the appropriate parameters for authentication with the D2L", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f693dddaba1f14da45f398671bb9924b3367eb5"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk0OTM5MA==", "bodyText": "Ended up removing the class entirely.", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r443949390", "createdAt": "2020-06-23T04:07:05Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestUserContext.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.core.connectors.blackboard;\n+\n+// TODO If this works for Bb, consider refactoring into a general class\n+import com.google.common.base.Strings;\n+import com.tle.core.connectors.brightspace.D2LSigner;\n+import java.io.Serializable;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/** TODO - this was taken from the D2L logic. May not need everything... */\n+public class BlackboardRestUserContext implements Serializable {\n+  private final String instanceUrl;\n+  private final String appId;\n+  private final String appKey;\n+  private final String userId;\n+  private final String userKey;\n+\n+  private long _serverSkewMillis;\n+\n+  private static final String APP_ID_PARAMETER = \"x_a\";\n+  private static final String USER_ID_PARAMETER = \"x_b\";\n+  private static final String SIGNATURE_BY_APP_KEY_PARAMETER = \"x_c\";\n+  private static final String SIGNATURE_BY_USER_KEY_PARAMETER = \"x_d\";\n+  private static final String TIMESTAMP_PARAMETER = \"x_t\";\n+\n+  /** Returned when no result can be identified or as an unitialized value. Val=0x00; */\n+  public final int RESULT_UNKNOWN = 0x00;\n+\n+  /** Returned when result 200 okay. Val=0x01 */\n+  public final int RESULT_OKAY = 0x01;\n+\n+  /**\n+   * Returned when the signature or id was invalid, typically this should trigger a\n+   * reauthentication. Val=0x02\n+   */\n+  public final int RESULT_INVALID_SIG = 0x02;\n+\n+  /**\n+   * Returned if the timestamp was outside of the validity window, this indicates clocks are skewed.\n+   * The handleResult message automatically corrects the clock so on receiving this message callers\n+   * typically should retry the same operation. Val=0x03\n+   */\n+  public final int RESULT_INVALID_TIMESTAMP = 0x03;\n+\n+  /**\n+   * Returned if the requested operation is not allowed, typically user should be prompted that they\n+   * need to request different permissions from the administrator. Val = 0x04\n+   */\n+  public final int RESULT_NO_PERMISSION = 0x04;\n+\n+  /**\n+   * Creates a User Context with the provided parameters\n+   *\n+   * @param url the url of the D2Linstance\n+   * @param appId the Application Id\n+   * @param appKey The Application Key\n+   * @param userId the User Id\n+   * @param userKey the User Key\n+   */\n+  public BlackboardRestUserContext(\n+      String url, String appId, String appKey, String userId, String userKey) {\n+    this.instanceUrl = url;\n+    this.appId = appId;\n+    this.appKey = appKey;\n+    this.userId = userId;\n+    this.userKey = userKey;\n+  }\n+\n+  public String getUserId() {\n+    return userId;\n+  }\n+\n+  public String getUserKey() {\n+    return userKey;\n+  }\n+\n+  public long getServerSkewMillis() {\n+    return _serverSkewMillis;\n+  }\n+\n+  public void setServerSkewMillis(long _serverSkewMillis) {\n+    this._serverSkewMillis = _serverSkewMillis;\n+  }\n+\n+  public URI createAuthenticatedUri(String path, String httpMethod) {\n+    int split = path.indexOf(\"?\");\n+    String query = \"\";\n+    if (split >= 0) {\n+      query = path.substring(split + 1);\n+      path = path.substring(0, split);\n+    }\n+    String queryString = getQueryString(path, query, httpMethod);\n+    try {\n+      URI uri = new URI(instanceUrl + path + queryString);\n+      return uri;\n+    } catch (URISyntaxException e) {\n+      e.printStackTrace();\n+      return null;\n+    }\n+  }\n+\n+  public boolean calculateServerSkewFromResponse(String responseBody) {\n+    long serverTimestampSeconds = tryParseTimestamp(responseBody);\n+    if (serverTimestampSeconds > 0) {\n+      long clientTimestampMilliseconds = System.currentTimeMillis();\n+      _serverSkewMillis = serverTimestampSeconds * 1000 - clientTimestampMilliseconds;\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  /**\n+   * Constructs the query string with the appropriate parameters for authentication with the D2L", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU0NDkyMw=="}, "originalCommit": {"oid": "8f693dddaba1f14da45f398671bb9924b3367eb5"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDcyMzUwOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestAppContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMjoxMzo1OVrOGkI1EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNDowNjo0NFrOGnYg8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU0NjU3Ng==", "bodyText": "Why not combine these two constants and the = into one constant?", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r440546576", "createdAt": "2020-06-16T02:13:59Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestAppContext.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.core.connectors.blackboard;\n+\n+import com.tle.annotation.Nullable;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URLEncoder;\n+\n+public class BlackboardRestAppContext {\n+  private static final String STATE_PARAMETER = \"state\";\n+  private static final String VALUE_CODE = \"code\";\n+  private static final String FIELD_REDIRECT_URI = \"redirect_uri\";\n+  private static final String FIELD_RESPONSE_TYPE = \"response_type\";\n+  private static final String FIELD_CLIENT_ID = \"client_id\";\n+  private static final String FIELD_SCOPE = \"scope\";\n+  private static final String VALUE_READ_WRITE_DELETE = \"read write delete\";\n+\n+  private final String _appId;\n+  private final String _appKey;\n+  private String _url;\n+\n+  /**\n+   * Constructs a BlackboardRestAppContext with the provided application values\n+   *\n+   * @param appId The application ID provided by the key tool\n+   * @param appKey The application key provided by the key tool\n+   * @param url The url of the Bb instance\n+   */\n+  public BlackboardRestAppContext(String appId, String appKey, String url) {\n+    _appId = appId;\n+    _appKey = appKey;\n+    if (url != null && url.endsWith(\"/\")) {\n+      _url = url.substring(0, url.lastIndexOf(\"/\"));\n+    } else {\n+      _url = url;\n+    }\n+  }\n+\n+  public URI createWebUrlForAuthentication(URI redirectUrl, @Nullable String state) {\n+    try {\n+      URI uri =\n+          new URI(\n+              _url\n+                  + BlackboardRESTConnectorConstants.AUTHENTICATIONCODE_SERVICE_URI_PATH\n+                  + \"?\"\n+                  + buildAuthenticationCodeUriQueryString(redirectUrl, state));\n+      return uri;\n+    } catch (URISyntaxException e) {\n+      return null;\n+    }\n+  }\n+\n+  private String buildAuthenticationCodeUriQueryString(URI callbackUri, @Nullable String state) {\n+    String callbackUriString = callbackUri.toString();\n+    String result = FIELD_RESPONSE_TYPE + \"=\" + VALUE_CODE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f693dddaba1f14da45f398671bb9924b3367eb5"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk0OTI5Nw==", "bodyText": "done", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r443949297", "createdAt": "2020-06-23T04:06:44Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestAppContext.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.core.connectors.blackboard;\n+\n+import com.tle.annotation.Nullable;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URLEncoder;\n+\n+public class BlackboardRestAppContext {\n+  private static final String STATE_PARAMETER = \"state\";\n+  private static final String VALUE_CODE = \"code\";\n+  private static final String FIELD_REDIRECT_URI = \"redirect_uri\";\n+  private static final String FIELD_RESPONSE_TYPE = \"response_type\";\n+  private static final String FIELD_CLIENT_ID = \"client_id\";\n+  private static final String FIELD_SCOPE = \"scope\";\n+  private static final String VALUE_READ_WRITE_DELETE = \"read write delete\";\n+\n+  private final String _appId;\n+  private final String _appKey;\n+  private String _url;\n+\n+  /**\n+   * Constructs a BlackboardRestAppContext with the provided application values\n+   *\n+   * @param appId The application ID provided by the key tool\n+   * @param appKey The application key provided by the key tool\n+   * @param url The url of the Bb instance\n+   */\n+  public BlackboardRestAppContext(String appId, String appKey, String url) {\n+    _appId = appId;\n+    _appKey = appKey;\n+    if (url != null && url.endsWith(\"/\")) {\n+      _url = url.substring(0, url.lastIndexOf(\"/\"));\n+    } else {\n+      _url = url;\n+    }\n+  }\n+\n+  public URI createWebUrlForAuthentication(URI redirectUrl, @Nullable String state) {\n+    try {\n+      URI uri =\n+          new URI(\n+              _url\n+                  + BlackboardRESTConnectorConstants.AUTHENTICATIONCODE_SERVICE_URI_PATH\n+                  + \"?\"\n+                  + buildAuthenticationCodeUriQueryString(redirectUrl, state));\n+      return uri;\n+    } catch (URISyntaxException e) {\n+      return null;\n+    }\n+  }\n+\n+  private String buildAuthenticationCodeUriQueryString(URI callbackUri, @Nullable String state) {\n+    String callbackUriString = callbackUri.toString();\n+    String result = FIELD_RESPONSE_TYPE + \"=\" + VALUE_CODE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU0NjU3Ng=="}, "originalCommit": {"oid": "8f693dddaba1f14da45f398671bb9924b3367eb5"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDczMTczOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestUserContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMjoxOToxNFrOGkI6Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNDowNjozNlrOGnYg3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU0Nzg1OA==", "bodyText": "May I ask why use hexadecimal numbers and what they mean?", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r440547858", "createdAt": "2020-06-16T02:19:14Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestUserContext.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.core.connectors.blackboard;\n+\n+// TODO If this works for Bb, consider refactoring into a general class\n+import com.google.common.base.Strings;\n+import com.tle.core.connectors.brightspace.D2LSigner;\n+import java.io.Serializable;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/** TODO - this was taken from the D2L logic. May not need everything... */\n+public class BlackboardRestUserContext implements Serializable {\n+  private final String instanceUrl;\n+  private final String appId;\n+  private final String appKey;\n+  private final String userId;\n+  private final String userKey;\n+\n+  private long _serverSkewMillis;\n+\n+  private static final String APP_ID_PARAMETER = \"x_a\";\n+  private static final String USER_ID_PARAMETER = \"x_b\";\n+  private static final String SIGNATURE_BY_APP_KEY_PARAMETER = \"x_c\";\n+  private static final String SIGNATURE_BY_USER_KEY_PARAMETER = \"x_d\";\n+  private static final String TIMESTAMP_PARAMETER = \"x_t\";\n+\n+  /** Returned when no result can be identified or as an unitialized value. Val=0x00; */\n+  public final int RESULT_UNKNOWN = 0x00;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f693dddaba1f14da45f398671bb9924b3367eb5"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk0OTI3Ng==", "bodyText": "That came from the D2L flows, but turns out the class isn't needed for Blackboard REST.  Ended up removing the class entirely.", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r443949276", "createdAt": "2020-06-23T04:06:36Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestUserContext.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.core.connectors.blackboard;\n+\n+// TODO If this works for Bb, consider refactoring into a general class\n+import com.google.common.base.Strings;\n+import com.tle.core.connectors.brightspace.D2LSigner;\n+import java.io.Serializable;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/** TODO - this was taken from the D2L logic. May not need everything... */\n+public class BlackboardRestUserContext implements Serializable {\n+  private final String instanceUrl;\n+  private final String appId;\n+  private final String appKey;\n+  private final String userId;\n+  private final String userKey;\n+\n+  private long _serverSkewMillis;\n+\n+  private static final String APP_ID_PARAMETER = \"x_a\";\n+  private static final String USER_ID_PARAMETER = \"x_b\";\n+  private static final String SIGNATURE_BY_APP_KEY_PARAMETER = \"x_c\";\n+  private static final String SIGNATURE_BY_USER_KEY_PARAMETER = \"x_d\";\n+  private static final String TIMESTAMP_PARAMETER = \"x_t\";\n+\n+  /** Returned when no result can be identified or as an unitialized value. Val=0x00; */\n+  public final int RESULT_UNKNOWN = 0x00;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU0Nzg1OA=="}, "originalCommit": {"oid": "8f693dddaba1f14da45f398671bb9924b3367eb5"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDczOTMwOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestUserContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMjoyMzozMFrOGkI-nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNDowNTozN1rOGnYf9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU0OTAyMw==", "bodyText": "Can we use LOGGER.error here?", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r440549023", "createdAt": "2020-06-16T02:23:30Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestUserContext.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.core.connectors.blackboard;\n+\n+// TODO If this works for Bb, consider refactoring into a general class\n+import com.google.common.base.Strings;\n+import com.tle.core.connectors.brightspace.D2LSigner;\n+import java.io.Serializable;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/** TODO - this was taken from the D2L logic. May not need everything... */\n+public class BlackboardRestUserContext implements Serializable {\n+  private final String instanceUrl;\n+  private final String appId;\n+  private final String appKey;\n+  private final String userId;\n+  private final String userKey;\n+\n+  private long _serverSkewMillis;\n+\n+  private static final String APP_ID_PARAMETER = \"x_a\";\n+  private static final String USER_ID_PARAMETER = \"x_b\";\n+  private static final String SIGNATURE_BY_APP_KEY_PARAMETER = \"x_c\";\n+  private static final String SIGNATURE_BY_USER_KEY_PARAMETER = \"x_d\";\n+  private static final String TIMESTAMP_PARAMETER = \"x_t\";\n+\n+  /** Returned when no result can be identified or as an unitialized value. Val=0x00; */\n+  public final int RESULT_UNKNOWN = 0x00;\n+\n+  /** Returned when result 200 okay. Val=0x01 */\n+  public final int RESULT_OKAY = 0x01;\n+\n+  /**\n+   * Returned when the signature or id was invalid, typically this should trigger a\n+   * reauthentication. Val=0x02\n+   */\n+  public final int RESULT_INVALID_SIG = 0x02;\n+\n+  /**\n+   * Returned if the timestamp was outside of the validity window, this indicates clocks are skewed.\n+   * The handleResult message automatically corrects the clock so on receiving this message callers\n+   * typically should retry the same operation. Val=0x03\n+   */\n+  public final int RESULT_INVALID_TIMESTAMP = 0x03;\n+\n+  /**\n+   * Returned if the requested operation is not allowed, typically user should be prompted that they\n+   * need to request different permissions from the administrator. Val = 0x04\n+   */\n+  public final int RESULT_NO_PERMISSION = 0x04;\n+\n+  /**\n+   * Creates a User Context with the provided parameters\n+   *\n+   * @param url the url of the D2Linstance\n+   * @param appId the Application Id\n+   * @param appKey The Application Key\n+   * @param userId the User Id\n+   * @param userKey the User Key\n+   */\n+  public BlackboardRestUserContext(\n+      String url, String appId, String appKey, String userId, String userKey) {\n+    this.instanceUrl = url;\n+    this.appId = appId;\n+    this.appKey = appKey;\n+    this.userId = userId;\n+    this.userKey = userKey;\n+  }\n+\n+  public String getUserId() {\n+    return userId;\n+  }\n+\n+  public String getUserKey() {\n+    return userKey;\n+  }\n+\n+  public long getServerSkewMillis() {\n+    return _serverSkewMillis;\n+  }\n+\n+  public void setServerSkewMillis(long _serverSkewMillis) {\n+    this._serverSkewMillis = _serverSkewMillis;\n+  }\n+\n+  public URI createAuthenticatedUri(String path, String httpMethod) {\n+    int split = path.indexOf(\"?\");\n+    String query = \"\";\n+    if (split >= 0) {\n+      query = path.substring(split + 1);\n+      path = path.substring(0, split);\n+    }\n+    String queryString = getQueryString(path, query, httpMethod);\n+    try {\n+      URI uri = new URI(instanceUrl + path + queryString);\n+      return uri;\n+    } catch (URISyntaxException e) {\n+      e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f693dddaba1f14da45f398671bb9924b3367eb5"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk0OTA0NA==", "bodyText": "Ended up removing the class entirely.", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r443949044", "createdAt": "2020-06-23T04:05:37Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestUserContext.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.core.connectors.blackboard;\n+\n+// TODO If this works for Bb, consider refactoring into a general class\n+import com.google.common.base.Strings;\n+import com.tle.core.connectors.brightspace.D2LSigner;\n+import java.io.Serializable;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/** TODO - this was taken from the D2L logic. May not need everything... */\n+public class BlackboardRestUserContext implements Serializable {\n+  private final String instanceUrl;\n+  private final String appId;\n+  private final String appKey;\n+  private final String userId;\n+  private final String userKey;\n+\n+  private long _serverSkewMillis;\n+\n+  private static final String APP_ID_PARAMETER = \"x_a\";\n+  private static final String USER_ID_PARAMETER = \"x_b\";\n+  private static final String SIGNATURE_BY_APP_KEY_PARAMETER = \"x_c\";\n+  private static final String SIGNATURE_BY_USER_KEY_PARAMETER = \"x_d\";\n+  private static final String TIMESTAMP_PARAMETER = \"x_t\";\n+\n+  /** Returned when no result can be identified or as an unitialized value. Val=0x00; */\n+  public final int RESULT_UNKNOWN = 0x00;\n+\n+  /** Returned when result 200 okay. Val=0x01 */\n+  public final int RESULT_OKAY = 0x01;\n+\n+  /**\n+   * Returned when the signature or id was invalid, typically this should trigger a\n+   * reauthentication. Val=0x02\n+   */\n+  public final int RESULT_INVALID_SIG = 0x02;\n+\n+  /**\n+   * Returned if the timestamp was outside of the validity window, this indicates clocks are skewed.\n+   * The handleResult message automatically corrects the clock so on receiving this message callers\n+   * typically should retry the same operation. Val=0x03\n+   */\n+  public final int RESULT_INVALID_TIMESTAMP = 0x03;\n+\n+  /**\n+   * Returned if the requested operation is not allowed, typically user should be prompted that they\n+   * need to request different permissions from the administrator. Val = 0x04\n+   */\n+  public final int RESULT_NO_PERMISSION = 0x04;\n+\n+  /**\n+   * Creates a User Context with the provided parameters\n+   *\n+   * @param url the url of the D2Linstance\n+   * @param appId the Application Id\n+   * @param appKey The Application Key\n+   * @param userId the User Id\n+   * @param userKey the User Key\n+   */\n+  public BlackboardRestUserContext(\n+      String url, String appId, String appKey, String userId, String userKey) {\n+    this.instanceUrl = url;\n+    this.appId = appId;\n+    this.appKey = appKey;\n+    this.userId = userId;\n+    this.userKey = userKey;\n+  }\n+\n+  public String getUserId() {\n+    return userId;\n+  }\n+\n+  public String getUserKey() {\n+    return userKey;\n+  }\n+\n+  public long getServerSkewMillis() {\n+    return _serverSkewMillis;\n+  }\n+\n+  public void setServerSkewMillis(long _serverSkewMillis) {\n+    this._serverSkewMillis = _serverSkewMillis;\n+  }\n+\n+  public URI createAuthenticatedUri(String path, String httpMethod) {\n+    int split = path.indexOf(\"?\");\n+    String query = \"\";\n+    if (split >= 0) {\n+      query = path.substring(split + 1);\n+      path = path.substring(0, split);\n+    }\n+    String queryString = getQueryString(path, query, httpMethod);\n+    try {\n+      URI uri = new URI(instanceUrl + path + queryString);\n+      return uri;\n+    } catch (URISyntaxException e) {\n+      e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU0OTAyMw=="}, "originalCommit": {"oid": "8f693dddaba1f14da45f398671bb9924b3367eb5"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDc0ODMxOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestUserContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMjoyODozMVrOGkJD_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNDowNToyNlrOGnYfzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU1MDM5OA==", "bodyText": "OEQ provides tools that check strings. You can call Check.isEmpty(query) to do the check.", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r440550398", "createdAt": "2020-06-16T02:28:31Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestUserContext.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.core.connectors.blackboard;\n+\n+// TODO If this works for Bb, consider refactoring into a general class\n+import com.google.common.base.Strings;\n+import com.tle.core.connectors.brightspace.D2LSigner;\n+import java.io.Serializable;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/** TODO - this was taken from the D2L logic. May not need everything... */\n+public class BlackboardRestUserContext implements Serializable {\n+  private final String instanceUrl;\n+  private final String appId;\n+  private final String appKey;\n+  private final String userId;\n+  private final String userKey;\n+\n+  private long _serverSkewMillis;\n+\n+  private static final String APP_ID_PARAMETER = \"x_a\";\n+  private static final String USER_ID_PARAMETER = \"x_b\";\n+  private static final String SIGNATURE_BY_APP_KEY_PARAMETER = \"x_c\";\n+  private static final String SIGNATURE_BY_USER_KEY_PARAMETER = \"x_d\";\n+  private static final String TIMESTAMP_PARAMETER = \"x_t\";\n+\n+  /** Returned when no result can be identified or as an unitialized value. Val=0x00; */\n+  public final int RESULT_UNKNOWN = 0x00;\n+\n+  /** Returned when result 200 okay. Val=0x01 */\n+  public final int RESULT_OKAY = 0x01;\n+\n+  /**\n+   * Returned when the signature or id was invalid, typically this should trigger a\n+   * reauthentication. Val=0x02\n+   */\n+  public final int RESULT_INVALID_SIG = 0x02;\n+\n+  /**\n+   * Returned if the timestamp was outside of the validity window, this indicates clocks are skewed.\n+   * The handleResult message automatically corrects the clock so on receiving this message callers\n+   * typically should retry the same operation. Val=0x03\n+   */\n+  public final int RESULT_INVALID_TIMESTAMP = 0x03;\n+\n+  /**\n+   * Returned if the requested operation is not allowed, typically user should be prompted that they\n+   * need to request different permissions from the administrator. Val = 0x04\n+   */\n+  public final int RESULT_NO_PERMISSION = 0x04;\n+\n+  /**\n+   * Creates a User Context with the provided parameters\n+   *\n+   * @param url the url of the D2Linstance\n+   * @param appId the Application Id\n+   * @param appKey The Application Key\n+   * @param userId the User Id\n+   * @param userKey the User Key\n+   */\n+  public BlackboardRestUserContext(\n+      String url, String appId, String appKey, String userId, String userKey) {\n+    this.instanceUrl = url;\n+    this.appId = appId;\n+    this.appKey = appKey;\n+    this.userId = userId;\n+    this.userKey = userKey;\n+  }\n+\n+  public String getUserId() {\n+    return userId;\n+  }\n+\n+  public String getUserKey() {\n+    return userKey;\n+  }\n+\n+  public long getServerSkewMillis() {\n+    return _serverSkewMillis;\n+  }\n+\n+  public void setServerSkewMillis(long _serverSkewMillis) {\n+    this._serverSkewMillis = _serverSkewMillis;\n+  }\n+\n+  public URI createAuthenticatedUri(String path, String httpMethod) {\n+    int split = path.indexOf(\"?\");\n+    String query = \"\";\n+    if (split >= 0) {\n+      query = path.substring(split + 1);\n+      path = path.substring(0, split);\n+    }\n+    String queryString = getQueryString(path, query, httpMethod);\n+    try {\n+      URI uri = new URI(instanceUrl + path + queryString);\n+      return uri;\n+    } catch (URISyntaxException e) {\n+      e.printStackTrace();\n+      return null;\n+    }\n+  }\n+\n+  public boolean calculateServerSkewFromResponse(String responseBody) {\n+    long serverTimestampSeconds = tryParseTimestamp(responseBody);\n+    if (serverTimestampSeconds > 0) {\n+      long clientTimestampMilliseconds = System.currentTimeMillis();\n+      _serverSkewMillis = serverTimestampSeconds * 1000 - clientTimestampMilliseconds;\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  /**\n+   * Constructs the query string with the appropriate parameters for authentication with the D2L\n+   * authentication system.\n+   *\n+   * @param signature The signature based on the path, http method and time\n+   * @param timestamp The timestamp for the query string\n+   * @return A query string with the relevant authentication parameters\n+   */\n+  private String buildAuthenticatedUriQueryString(String signature, long timestamp) {\n+    String queryString = \"?\" + APP_ID_PARAMETER + \"=\" + appId;\n+    if (getUserId() != null) {\n+      queryString += \"&\" + USER_ID_PARAMETER + \"=\" + getUserId();\n+    }\n+    queryString += \"&\" + SIGNATURE_BY_APP_KEY_PARAMETER;\n+    queryString += \"=\" + D2LSigner.getBase64HashString(appKey, signature);\n+    if (getUserId() != null) {\n+      queryString += \"&\" + SIGNATURE_BY_USER_KEY_PARAMETER;\n+      queryString += \"=\" + D2LSigner.getBase64HashString(getUserKey(), signature);\n+    }\n+    queryString += \"&\" + TIMESTAMP_PARAMETER + \"=\" + timestamp;\n+    return queryString;\n+  }\n+\n+  /**\n+   * Provides the unix timestamp adjusted for the approximate delay between the D2L server and\n+   * client\n+   *\n+   * @return The unix timestamp adjusted for the approximate delay between the D2L server and client\n+   */\n+  private long getAdjustedTimestampInSeconds() {\n+    long timestampMilliseconds = System.currentTimeMillis();\n+    long adjustedTimestampSeconds = (timestampMilliseconds + _serverSkewMillis) / 1000;\n+    return adjustedTimestampSeconds;\n+  }\n+\n+  /**\n+   * Constructs the query string with the appropriate parameters for authentication with the D2L\n+   * authentication system.\n+   *\n+   * @param path The absolute server path of the api (ie. /d2l/api/versions/)\n+   * @param httpMethod The http method to access the url with (GET,POST,etc.)\n+   * @return The query string with the appropriate parameters for authentication\n+   */\n+  private String getQueryString(String path, String query, String httpMethod) {\n+    long adjustedTimestampSeconds = getAdjustedTimestampInSeconds();\n+    String signature = formatSignature(path, httpMethod, adjustedTimestampSeconds);\n+    String queryString = buildAuthenticatedUriQueryString(signature, adjustedTimestampSeconds);\n+\n+    if (!Strings.isNullOrEmpty(query)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f693dddaba1f14da45f398671bb9924b3367eb5"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk0OTAwNQ==", "bodyText": "not sure why we use a custom tool instead of a library that's available.  However, for this, I ended up removing the class entirely.", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r443949005", "createdAt": "2020-06-23T04:05:26Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestUserContext.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.core.connectors.blackboard;\n+\n+// TODO If this works for Bb, consider refactoring into a general class\n+import com.google.common.base.Strings;\n+import com.tle.core.connectors.brightspace.D2LSigner;\n+import java.io.Serializable;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/** TODO - this was taken from the D2L logic. May not need everything... */\n+public class BlackboardRestUserContext implements Serializable {\n+  private final String instanceUrl;\n+  private final String appId;\n+  private final String appKey;\n+  private final String userId;\n+  private final String userKey;\n+\n+  private long _serverSkewMillis;\n+\n+  private static final String APP_ID_PARAMETER = \"x_a\";\n+  private static final String USER_ID_PARAMETER = \"x_b\";\n+  private static final String SIGNATURE_BY_APP_KEY_PARAMETER = \"x_c\";\n+  private static final String SIGNATURE_BY_USER_KEY_PARAMETER = \"x_d\";\n+  private static final String TIMESTAMP_PARAMETER = \"x_t\";\n+\n+  /** Returned when no result can be identified or as an unitialized value. Val=0x00; */\n+  public final int RESULT_UNKNOWN = 0x00;\n+\n+  /** Returned when result 200 okay. Val=0x01 */\n+  public final int RESULT_OKAY = 0x01;\n+\n+  /**\n+   * Returned when the signature or id was invalid, typically this should trigger a\n+   * reauthentication. Val=0x02\n+   */\n+  public final int RESULT_INVALID_SIG = 0x02;\n+\n+  /**\n+   * Returned if the timestamp was outside of the validity window, this indicates clocks are skewed.\n+   * The handleResult message automatically corrects the clock so on receiving this message callers\n+   * typically should retry the same operation. Val=0x03\n+   */\n+  public final int RESULT_INVALID_TIMESTAMP = 0x03;\n+\n+  /**\n+   * Returned if the requested operation is not allowed, typically user should be prompted that they\n+   * need to request different permissions from the administrator. Val = 0x04\n+   */\n+  public final int RESULT_NO_PERMISSION = 0x04;\n+\n+  /**\n+   * Creates a User Context with the provided parameters\n+   *\n+   * @param url the url of the D2Linstance\n+   * @param appId the Application Id\n+   * @param appKey The Application Key\n+   * @param userId the User Id\n+   * @param userKey the User Key\n+   */\n+  public BlackboardRestUserContext(\n+      String url, String appId, String appKey, String userId, String userKey) {\n+    this.instanceUrl = url;\n+    this.appId = appId;\n+    this.appKey = appKey;\n+    this.userId = userId;\n+    this.userKey = userKey;\n+  }\n+\n+  public String getUserId() {\n+    return userId;\n+  }\n+\n+  public String getUserKey() {\n+    return userKey;\n+  }\n+\n+  public long getServerSkewMillis() {\n+    return _serverSkewMillis;\n+  }\n+\n+  public void setServerSkewMillis(long _serverSkewMillis) {\n+    this._serverSkewMillis = _serverSkewMillis;\n+  }\n+\n+  public URI createAuthenticatedUri(String path, String httpMethod) {\n+    int split = path.indexOf(\"?\");\n+    String query = \"\";\n+    if (split >= 0) {\n+      query = path.substring(split + 1);\n+      path = path.substring(0, split);\n+    }\n+    String queryString = getQueryString(path, query, httpMethod);\n+    try {\n+      URI uri = new URI(instanceUrl + path + queryString);\n+      return uri;\n+    } catch (URISyntaxException e) {\n+      e.printStackTrace();\n+      return null;\n+    }\n+  }\n+\n+  public boolean calculateServerSkewFromResponse(String responseBody) {\n+    long serverTimestampSeconds = tryParseTimestamp(responseBody);\n+    if (serverTimestampSeconds > 0) {\n+      long clientTimestampMilliseconds = System.currentTimeMillis();\n+      _serverSkewMillis = serverTimestampSeconds * 1000 - clientTimestampMilliseconds;\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  /**\n+   * Constructs the query string with the appropriate parameters for authentication with the D2L\n+   * authentication system.\n+   *\n+   * @param signature The signature based on the path, http method and time\n+   * @param timestamp The timestamp for the query string\n+   * @return A query string with the relevant authentication parameters\n+   */\n+  private String buildAuthenticatedUriQueryString(String signature, long timestamp) {\n+    String queryString = \"?\" + APP_ID_PARAMETER + \"=\" + appId;\n+    if (getUserId() != null) {\n+      queryString += \"&\" + USER_ID_PARAMETER + \"=\" + getUserId();\n+    }\n+    queryString += \"&\" + SIGNATURE_BY_APP_KEY_PARAMETER;\n+    queryString += \"=\" + D2LSigner.getBase64HashString(appKey, signature);\n+    if (getUserId() != null) {\n+      queryString += \"&\" + SIGNATURE_BY_USER_KEY_PARAMETER;\n+      queryString += \"=\" + D2LSigner.getBase64HashString(getUserKey(), signature);\n+    }\n+    queryString += \"&\" + TIMESTAMP_PARAMETER + \"=\" + timestamp;\n+    return queryString;\n+  }\n+\n+  /**\n+   * Provides the unix timestamp adjusted for the approximate delay between the D2L server and\n+   * client\n+   *\n+   * @return The unix timestamp adjusted for the approximate delay between the D2L server and client\n+   */\n+  private long getAdjustedTimestampInSeconds() {\n+    long timestampMilliseconds = System.currentTimeMillis();\n+    long adjustedTimestampSeconds = (timestampMilliseconds + _serverSkewMillis) / 1000;\n+    return adjustedTimestampSeconds;\n+  }\n+\n+  /**\n+   * Constructs the query string with the appropriate parameters for authentication with the D2L\n+   * authentication system.\n+   *\n+   * @param path The absolute server path of the api (ie. /d2l/api/versions/)\n+   * @param httpMethod The http method to access the url with (GET,POST,etc.)\n+   * @return The query string with the appropriate parameters for authentication\n+   */\n+  private String getQueryString(String path, String query, String httpMethod) {\n+    long adjustedTimestampSeconds = getAdjustedTimestampInSeconds();\n+    String signature = formatSignature(path, httpMethod, adjustedTimestampSeconds);\n+    String queryString = buildAuthenticatedUriQueryString(signature, adjustedTimestampSeconds);\n+\n+    if (!Strings.isNullOrEmpty(query)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU1MDM5OA=="}, "originalCommit": {"oid": "8f693dddaba1f14da45f398671bb9924b3367eb5"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDc1MDI3OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestUserContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMjoyOTo1NVrOGkJFVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNDowNToxN1rOGnYfsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU1MDc0MQ==", "bodyText": "Can we have an example that matches this pattern ?", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r440550741", "createdAt": "2020-06-16T02:29:55Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestUserContext.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.core.connectors.blackboard;\n+\n+// TODO If this works for Bb, consider refactoring into a general class\n+import com.google.common.base.Strings;\n+import com.tle.core.connectors.brightspace.D2LSigner;\n+import java.io.Serializable;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/** TODO - this was taken from the D2L logic. May not need everything... */\n+public class BlackboardRestUserContext implements Serializable {\n+  private final String instanceUrl;\n+  private final String appId;\n+  private final String appKey;\n+  private final String userId;\n+  private final String userKey;\n+\n+  private long _serverSkewMillis;\n+\n+  private static final String APP_ID_PARAMETER = \"x_a\";\n+  private static final String USER_ID_PARAMETER = \"x_b\";\n+  private static final String SIGNATURE_BY_APP_KEY_PARAMETER = \"x_c\";\n+  private static final String SIGNATURE_BY_USER_KEY_PARAMETER = \"x_d\";\n+  private static final String TIMESTAMP_PARAMETER = \"x_t\";\n+\n+  /** Returned when no result can be identified or as an unitialized value. Val=0x00; */\n+  public final int RESULT_UNKNOWN = 0x00;\n+\n+  /** Returned when result 200 okay. Val=0x01 */\n+  public final int RESULT_OKAY = 0x01;\n+\n+  /**\n+   * Returned when the signature or id was invalid, typically this should trigger a\n+   * reauthentication. Val=0x02\n+   */\n+  public final int RESULT_INVALID_SIG = 0x02;\n+\n+  /**\n+   * Returned if the timestamp was outside of the validity window, this indicates clocks are skewed.\n+   * The handleResult message automatically corrects the clock so on receiving this message callers\n+   * typically should retry the same operation. Val=0x03\n+   */\n+  public final int RESULT_INVALID_TIMESTAMP = 0x03;\n+\n+  /**\n+   * Returned if the requested operation is not allowed, typically user should be prompted that they\n+   * need to request different permissions from the administrator. Val = 0x04\n+   */\n+  public final int RESULT_NO_PERMISSION = 0x04;\n+\n+  /**\n+   * Creates a User Context with the provided parameters\n+   *\n+   * @param url the url of the D2Linstance\n+   * @param appId the Application Id\n+   * @param appKey The Application Key\n+   * @param userId the User Id\n+   * @param userKey the User Key\n+   */\n+  public BlackboardRestUserContext(\n+      String url, String appId, String appKey, String userId, String userKey) {\n+    this.instanceUrl = url;\n+    this.appId = appId;\n+    this.appKey = appKey;\n+    this.userId = userId;\n+    this.userKey = userKey;\n+  }\n+\n+  public String getUserId() {\n+    return userId;\n+  }\n+\n+  public String getUserKey() {\n+    return userKey;\n+  }\n+\n+  public long getServerSkewMillis() {\n+    return _serverSkewMillis;\n+  }\n+\n+  public void setServerSkewMillis(long _serverSkewMillis) {\n+    this._serverSkewMillis = _serverSkewMillis;\n+  }\n+\n+  public URI createAuthenticatedUri(String path, String httpMethod) {\n+    int split = path.indexOf(\"?\");\n+    String query = \"\";\n+    if (split >= 0) {\n+      query = path.substring(split + 1);\n+      path = path.substring(0, split);\n+    }\n+    String queryString = getQueryString(path, query, httpMethod);\n+    try {\n+      URI uri = new URI(instanceUrl + path + queryString);\n+      return uri;\n+    } catch (URISyntaxException e) {\n+      e.printStackTrace();\n+      return null;\n+    }\n+  }\n+\n+  public boolean calculateServerSkewFromResponse(String responseBody) {\n+    long serverTimestampSeconds = tryParseTimestamp(responseBody);\n+    if (serverTimestampSeconds > 0) {\n+      long clientTimestampMilliseconds = System.currentTimeMillis();\n+      _serverSkewMillis = serverTimestampSeconds * 1000 - clientTimestampMilliseconds;\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  /**\n+   * Constructs the query string with the appropriate parameters for authentication with the D2L\n+   * authentication system.\n+   *\n+   * @param signature The signature based on the path, http method and time\n+   * @param timestamp The timestamp for the query string\n+   * @return A query string with the relevant authentication parameters\n+   */\n+  private String buildAuthenticatedUriQueryString(String signature, long timestamp) {\n+    String queryString = \"?\" + APP_ID_PARAMETER + \"=\" + appId;\n+    if (getUserId() != null) {\n+      queryString += \"&\" + USER_ID_PARAMETER + \"=\" + getUserId();\n+    }\n+    queryString += \"&\" + SIGNATURE_BY_APP_KEY_PARAMETER;\n+    queryString += \"=\" + D2LSigner.getBase64HashString(appKey, signature);\n+    if (getUserId() != null) {\n+      queryString += \"&\" + SIGNATURE_BY_USER_KEY_PARAMETER;\n+      queryString += \"=\" + D2LSigner.getBase64HashString(getUserKey(), signature);\n+    }\n+    queryString += \"&\" + TIMESTAMP_PARAMETER + \"=\" + timestamp;\n+    return queryString;\n+  }\n+\n+  /**\n+   * Provides the unix timestamp adjusted for the approximate delay between the D2L server and\n+   * client\n+   *\n+   * @return The unix timestamp adjusted for the approximate delay between the D2L server and client\n+   */\n+  private long getAdjustedTimestampInSeconds() {\n+    long timestampMilliseconds = System.currentTimeMillis();\n+    long adjustedTimestampSeconds = (timestampMilliseconds + _serverSkewMillis) / 1000;\n+    return adjustedTimestampSeconds;\n+  }\n+\n+  /**\n+   * Constructs the query string with the appropriate parameters for authentication with the D2L\n+   * authentication system.\n+   *\n+   * @param path The absolute server path of the api (ie. /d2l/api/versions/)\n+   * @param httpMethod The http method to access the url with (GET,POST,etc.)\n+   * @return The query string with the appropriate parameters for authentication\n+   */\n+  private String getQueryString(String path, String query, String httpMethod) {\n+    long adjustedTimestampSeconds = getAdjustedTimestampInSeconds();\n+    String signature = formatSignature(path, httpMethod, adjustedTimestampSeconds);\n+    String queryString = buildAuthenticatedUriQueryString(signature, adjustedTimestampSeconds);\n+\n+    if (!Strings.isNullOrEmpty(query)) {\n+      queryString += \"&\" + query;\n+    }\n+    return queryString;\n+  }\n+\n+  /**\n+   * Creates a signature formatted to the D2L specifications for connecting to a given path\n+   *\n+   * @param path The absolute server path of the api (ie. /d2l/api/versions/)\n+   * @param httpMethod The http method to access the url with (GET,POST,etc.)\n+   * @param timestampSeconds\n+   * @return\n+   */\n+  private static String formatSignature(String path, String httpMethod, long timestampSeconds) {\n+    return httpMethod.toUpperCase()\n+        + \"&\"\n+        + URI.create(path).getPath().toLowerCase()\n+        + \"&\"\n+        + timestampSeconds;\n+  }\n+\n+  /**\n+   * Returns the timestamp returned by the server if the time between the request and when the\n+   * server received it is too large\n+   *\n+   * @param timestampMessage The message returned by the D2L Server\n+   * @return The timestamp returned by the server or 0 if no timestamp returned\n+   */\n+  private long tryParseTimestamp(String timestampMessage) {\n+    long result;\n+    Pattern p = Pattern.compile(\"Timestamp out of range\\\\r*\\\\n*\\\\s*(([0-9]+))\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f693dddaba1f14da45f398671bb9924b3367eb5"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk0ODk3Nw==", "bodyText": "Ended up removing the class entirely.", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r443948977", "createdAt": "2020-06-23T04:05:17Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestUserContext.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.core.connectors.blackboard;\n+\n+// TODO If this works for Bb, consider refactoring into a general class\n+import com.google.common.base.Strings;\n+import com.tle.core.connectors.brightspace.D2LSigner;\n+import java.io.Serializable;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/** TODO - this was taken from the D2L logic. May not need everything... */\n+public class BlackboardRestUserContext implements Serializable {\n+  private final String instanceUrl;\n+  private final String appId;\n+  private final String appKey;\n+  private final String userId;\n+  private final String userKey;\n+\n+  private long _serverSkewMillis;\n+\n+  private static final String APP_ID_PARAMETER = \"x_a\";\n+  private static final String USER_ID_PARAMETER = \"x_b\";\n+  private static final String SIGNATURE_BY_APP_KEY_PARAMETER = \"x_c\";\n+  private static final String SIGNATURE_BY_USER_KEY_PARAMETER = \"x_d\";\n+  private static final String TIMESTAMP_PARAMETER = \"x_t\";\n+\n+  /** Returned when no result can be identified or as an unitialized value. Val=0x00; */\n+  public final int RESULT_UNKNOWN = 0x00;\n+\n+  /** Returned when result 200 okay. Val=0x01 */\n+  public final int RESULT_OKAY = 0x01;\n+\n+  /**\n+   * Returned when the signature or id was invalid, typically this should trigger a\n+   * reauthentication. Val=0x02\n+   */\n+  public final int RESULT_INVALID_SIG = 0x02;\n+\n+  /**\n+   * Returned if the timestamp was outside of the validity window, this indicates clocks are skewed.\n+   * The handleResult message automatically corrects the clock so on receiving this message callers\n+   * typically should retry the same operation. Val=0x03\n+   */\n+  public final int RESULT_INVALID_TIMESTAMP = 0x03;\n+\n+  /**\n+   * Returned if the requested operation is not allowed, typically user should be prompted that they\n+   * need to request different permissions from the administrator. Val = 0x04\n+   */\n+  public final int RESULT_NO_PERMISSION = 0x04;\n+\n+  /**\n+   * Creates a User Context with the provided parameters\n+   *\n+   * @param url the url of the D2Linstance\n+   * @param appId the Application Id\n+   * @param appKey The Application Key\n+   * @param userId the User Id\n+   * @param userKey the User Key\n+   */\n+  public BlackboardRestUserContext(\n+      String url, String appId, String appKey, String userId, String userKey) {\n+    this.instanceUrl = url;\n+    this.appId = appId;\n+    this.appKey = appKey;\n+    this.userId = userId;\n+    this.userKey = userKey;\n+  }\n+\n+  public String getUserId() {\n+    return userId;\n+  }\n+\n+  public String getUserKey() {\n+    return userKey;\n+  }\n+\n+  public long getServerSkewMillis() {\n+    return _serverSkewMillis;\n+  }\n+\n+  public void setServerSkewMillis(long _serverSkewMillis) {\n+    this._serverSkewMillis = _serverSkewMillis;\n+  }\n+\n+  public URI createAuthenticatedUri(String path, String httpMethod) {\n+    int split = path.indexOf(\"?\");\n+    String query = \"\";\n+    if (split >= 0) {\n+      query = path.substring(split + 1);\n+      path = path.substring(0, split);\n+    }\n+    String queryString = getQueryString(path, query, httpMethod);\n+    try {\n+      URI uri = new URI(instanceUrl + path + queryString);\n+      return uri;\n+    } catch (URISyntaxException e) {\n+      e.printStackTrace();\n+      return null;\n+    }\n+  }\n+\n+  public boolean calculateServerSkewFromResponse(String responseBody) {\n+    long serverTimestampSeconds = tryParseTimestamp(responseBody);\n+    if (serverTimestampSeconds > 0) {\n+      long clientTimestampMilliseconds = System.currentTimeMillis();\n+      _serverSkewMillis = serverTimestampSeconds * 1000 - clientTimestampMilliseconds;\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  /**\n+   * Constructs the query string with the appropriate parameters for authentication with the D2L\n+   * authentication system.\n+   *\n+   * @param signature The signature based on the path, http method and time\n+   * @param timestamp The timestamp for the query string\n+   * @return A query string with the relevant authentication parameters\n+   */\n+  private String buildAuthenticatedUriQueryString(String signature, long timestamp) {\n+    String queryString = \"?\" + APP_ID_PARAMETER + \"=\" + appId;\n+    if (getUserId() != null) {\n+      queryString += \"&\" + USER_ID_PARAMETER + \"=\" + getUserId();\n+    }\n+    queryString += \"&\" + SIGNATURE_BY_APP_KEY_PARAMETER;\n+    queryString += \"=\" + D2LSigner.getBase64HashString(appKey, signature);\n+    if (getUserId() != null) {\n+      queryString += \"&\" + SIGNATURE_BY_USER_KEY_PARAMETER;\n+      queryString += \"=\" + D2LSigner.getBase64HashString(getUserKey(), signature);\n+    }\n+    queryString += \"&\" + TIMESTAMP_PARAMETER + \"=\" + timestamp;\n+    return queryString;\n+  }\n+\n+  /**\n+   * Provides the unix timestamp adjusted for the approximate delay between the D2L server and\n+   * client\n+   *\n+   * @return The unix timestamp adjusted for the approximate delay between the D2L server and client\n+   */\n+  private long getAdjustedTimestampInSeconds() {\n+    long timestampMilliseconds = System.currentTimeMillis();\n+    long adjustedTimestampSeconds = (timestampMilliseconds + _serverSkewMillis) / 1000;\n+    return adjustedTimestampSeconds;\n+  }\n+\n+  /**\n+   * Constructs the query string with the appropriate parameters for authentication with the D2L\n+   * authentication system.\n+   *\n+   * @param path The absolute server path of the api (ie. /d2l/api/versions/)\n+   * @param httpMethod The http method to access the url with (GET,POST,etc.)\n+   * @return The query string with the appropriate parameters for authentication\n+   */\n+  private String getQueryString(String path, String query, String httpMethod) {\n+    long adjustedTimestampSeconds = getAdjustedTimestampInSeconds();\n+    String signature = formatSignature(path, httpMethod, adjustedTimestampSeconds);\n+    String queryString = buildAuthenticatedUriQueryString(signature, adjustedTimestampSeconds);\n+\n+    if (!Strings.isNullOrEmpty(query)) {\n+      queryString += \"&\" + query;\n+    }\n+    return queryString;\n+  }\n+\n+  /**\n+   * Creates a signature formatted to the D2L specifications for connecting to a given path\n+   *\n+   * @param path The absolute server path of the api (ie. /d2l/api/versions/)\n+   * @param httpMethod The http method to access the url with (GET,POST,etc.)\n+   * @param timestampSeconds\n+   * @return\n+   */\n+  private static String formatSignature(String path, String httpMethod, long timestampSeconds) {\n+    return httpMethod.toUpperCase()\n+        + \"&\"\n+        + URI.create(path).getPath().toLowerCase()\n+        + \"&\"\n+        + timestampSeconds;\n+  }\n+\n+  /**\n+   * Returns the timestamp returned by the server if the time between the request and when the\n+   * server received it is too large\n+   *\n+   * @param timestampMessage The message returned by the D2L Server\n+   * @return The timestamp returned by the server or 0 if no timestamp returned\n+   */\n+  private long tryParseTimestamp(String timestampMessage) {\n+    long result;\n+    Pattern p = Pattern.compile(\"Timestamp out of range\\\\r*\\\\n*\\\\s*(([0-9]+))\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU1MDc0MQ=="}, "originalCommit": {"oid": "8f693dddaba1f14da45f398671bb9924b3367eb5"}, "originalPosition": 211}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDc2ODQzOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/beans/ErrorResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMjo0MTo1MFrOGkJQtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNDowNToxMFrOGnYflg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU1MzY1NA==", "bodyText": "Is it possible to reuse this class com.tle.web.oauth.response.ErrorResponse?", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r440553654", "createdAt": "2020-06-16T02:41:50Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/beans/ErrorResponse.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.core.connectors.blackboard.beans;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import javax.xml.bind.annotation.XmlRootElement;\n+\n+@XmlRootElement\n+public class ErrorResponse {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f693dddaba1f14da45f398671bb9924b3367eb5"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk0ODk1MA==", "bodyText": "good catch.  Switched out for the OAuth class, and removed the Bb class.", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r443948950", "createdAt": "2020-06-23T04:05:10Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/beans/ErrorResponse.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.core.connectors.blackboard.beans;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import javax.xml.bind.annotation.XmlRootElement;\n+\n+@XmlRootElement\n+public class ErrorResponse {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU1MzY1NA=="}, "originalCommit": {"oid": "8f693dddaba1f14da45f398671bb9924b3367eb5"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDc3MzY0OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/service/impl/BlackboardRESTConnectorServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMjo0NTowOFrOGkJUAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNDowNTowM1rOGnYffg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU1NDQ5OQ==", "bodyText": "Can we have a brief description for these numbers (what do they do)?", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r440554499", "createdAt": "2020-06-16T02:45:08Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/service/impl/BlackboardRESTConnectorServiceImpl.java", "diffHunk": "@@ -80,15 +84,19 @@\n   private static final String KEY_PFX =\n       AbstractPluginService.getMyPluginId(BlackboardRESTConnectorService.class) + \".\";\n \n-  private static final String API_ROOT = \"/learn/api/public/v1\";\n+  private static final String API_ROOT_V1 = \"/learn/api/public/v1/\";\n+  private static final String API_ROOT_V3 = \"/learn/api/public/v3/\";\n+\n+  private static final byte[] SHAREPASS =\n+      new byte[] {45, 123, -112, 2, 89, 124, 19, 74, 0, 24, -118, 98, 5, 100, 92, 7};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f693dddaba1f14da45f398671bb9924b3367eb5"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk0ODkyNg==", "bodyText": "I added some comments in the code, and changed the values to prove they are arbitrary:\n// Used to encrypt and decrypt state information (such as connector uuid) \n// during the integration flows. Actual values are not important.", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r443948926", "createdAt": "2020-06-23T04:05:03Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/service/impl/BlackboardRESTConnectorServiceImpl.java", "diffHunk": "@@ -80,15 +84,19 @@\n   private static final String KEY_PFX =\n       AbstractPluginService.getMyPluginId(BlackboardRESTConnectorService.class) + \".\";\n \n-  private static final String API_ROOT = \"/learn/api/public/v1\";\n+  private static final String API_ROOT_V1 = \"/learn/api/public/v1/\";\n+  private static final String API_ROOT_V3 = \"/learn/api/public/v3/\";\n+\n+  private static final byte[] SHAREPASS =\n+      new byte[] {45, 123, -112, 2, 89, 124, 19, 74, 0, 24, -118, 98, 5, 100, 92, 7};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU1NDQ5OQ=="}, "originalCommit": {"oid": "8f693dddaba1f14da45f398671bb9924b3367eb5"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDc5ODIyOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/web/connectors/dialog/LMSAuthDialog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMzowMToxN1rOGkJjeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNDowNDo1NFrOGnYfYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU1ODQ1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void setShowNewTabLauncher(boolean b) {\n          \n          \n            \n                public void setShowNewTabLauncher(boolean showNewTabLauncher) {", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r440558457", "createdAt": "2020-06-16T03:01:17Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/web/connectors/dialog/LMSAuthDialog.java", "diffHunk": "@@ -157,5 +177,21 @@ public String getAuthUrl() {\n     public void setAuthUrl(String authUrl) {\n       this.authUrl = authUrl;\n     }\n+\n+    public void setShowNewTabLauncher(boolean b) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f693dddaba1f14da45f398671bb9924b3367eb5"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk0ODg5Ng==", "bodyText": "done (via a different commit)", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r443948896", "createdAt": "2020-06-23T04:04:54Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/web/connectors/dialog/LMSAuthDialog.java", "diffHunk": "@@ -157,5 +177,21 @@ public String getAuthUrl() {\n     public void setAuthUrl(String authUrl) {\n       this.authUrl = authUrl;\n     }\n+\n+    public void setShowNewTabLauncher(boolean b) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU1ODQ1Nw=="}, "originalCommit": {"oid": "8f693dddaba1f14da45f398671bb9924b3367eb5"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzI0MjMxOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/resources/view/dialog/lmsauth.ftl", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo0MDowNFrOGkhg9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNDowNDoxNlrOGnYexw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1MTAyOA==", "bodyText": "Unless they are explicitly needed, it would be best to avoid sending opener and referrer.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                              \"${m.authUrl}\", \"_blank\");\n          \n          \n            \n                              \"${m.authUrl}\", \"_blank\", \"noopener,noreferrer\");", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r440951028", "createdAt": "2020-06-16T15:40:04Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.core/resources/view/dialog/lmsauth.ftl", "diffHunk": "@@ -4,5 +4,24 @@\n <@css \"auth.css\" />\n \n <div id=\"auth_container\">\n-\t<iframe frameBorder=\"0\" src=\"${m.authUrl?html}\"></iframe>\n-</div>\n\\ No newline at end of file\n+  <#if m.showReceipt >\n+    <p>${b.key('export.authorization.newtab.receipt')}</p>\n+  <#else>\n+    <#if m.showNewTabLauncher >\n+      <p>${b.key('export.authorization.newtab.description')}</p>\n+\n+      <button onclick=\"newTabAuth()\" class=\"btn btn-equella\">\n+          ${b.key('export.authorization.newtab.launch')}\n+      </button>\n+\n+        <script>\n+            function newTabAuth() {\n+                window.open(\n+                  \"${m.authUrl}\", \"_blank\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f693dddaba1f14da45f398671bb9924b3367eb5"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk0ODc0Mw==", "bodyText": "done", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r443948743", "createdAt": "2020-06-23T04:04:16Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.core/resources/view/dialog/lmsauth.ftl", "diffHunk": "@@ -4,5 +4,24 @@\n <@css \"auth.css\" />\n \n <div id=\"auth_container\">\n-\t<iframe frameBorder=\"0\" src=\"${m.authUrl?html}\"></iframe>\n-</div>\n\\ No newline at end of file\n+  <#if m.showReceipt >\n+    <p>${b.key('export.authorization.newtab.receipt')}</p>\n+  <#else>\n+    <#if m.showNewTabLauncher >\n+      <p>${b.key('export.authorization.newtab.description')}</p>\n+\n+      <button onclick=\"newTabAuth()\" class=\"btn btn-equella\">\n+          ${b.key('export.authorization.newtab.launch')}\n+      </button>\n+\n+        <script>\n+            function newTabAuth() {\n+                window.open(\n+                  \"${m.authUrl}\", \"_blank\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1MTAyOA=="}, "originalCommit": {"oid": "8f693dddaba1f14da45f398671bb9924b3367eb5"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzQzMDMxOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/resources/view/dialog/lmsauth.ftl", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNjoyNToxNFrOGkjZxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNDowNDoyNlrOGnYe7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk4MTk1Ng==", "bodyText": "Would it make sense/be safe to sandbox the iframe?\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-sandbox\nassuming the iframe is just for a login form:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  <iframe frameBorder=\"0\" src=\"${m.authUrl?html}\"></iframe>\n          \n          \n            \n                  <iframe frameBorder=\"0\" src=\"${m.authUrl?html}\" sandbox=\"allow-forms\"></iframe>", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r440981956", "createdAt": "2020-06-16T16:25:14Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.core/resources/view/dialog/lmsauth.ftl", "diffHunk": "@@ -4,5 +4,24 @@\n <@css \"auth.css\" />\n \n <div id=\"auth_container\">\n-\t<iframe frameBorder=\"0\" src=\"${m.authUrl?html}\"></iframe>\n-</div>\n\\ No newline at end of file\n+  <#if m.showReceipt >\n+    <p>${b.key('export.authorization.newtab.receipt')}</p>\n+  <#else>\n+    <#if m.showNewTabLauncher >\n+      <p>${b.key('export.authorization.newtab.description')}</p>\n+\n+      <button onclick=\"newTabAuth()\" class=\"btn btn-equella\">\n+          ${b.key('export.authorization.newtab.launch')}\n+      </button>\n+\n+        <script>\n+            function newTabAuth() {\n+                window.open(\n+                  \"${m.authUrl}\", \"_blank\");\n+            }\n+        </script>\n+    <#else>\n+      <iframe frameBorder=\"0\" src=\"${m.authUrl?html}\"></iframe>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f693dddaba1f14da45f398671bb9924b3367eb5"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk0ODc4Mw==", "bodyText": "possibly, but would widen the scope of testing. After our further discussion, I'm holding off on this change.", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r443948783", "createdAt": "2020-06-23T04:04:26Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.core/resources/view/dialog/lmsauth.ftl", "diffHunk": "@@ -4,5 +4,24 @@\n <@css \"auth.css\" />\n \n <div id=\"auth_container\">\n-\t<iframe frameBorder=\"0\" src=\"${m.authUrl?html}\"></iframe>\n-</div>\n\\ No newline at end of file\n+  <#if m.showReceipt >\n+    <p>${b.key('export.authorization.newtab.receipt')}</p>\n+  <#else>\n+    <#if m.showNewTabLauncher >\n+      <p>${b.key('export.authorization.newtab.description')}</p>\n+\n+      <button onclick=\"newTabAuth()\" class=\"btn btn-equella\">\n+          ${b.key('export.authorization.newtab.launch')}\n+      </button>\n+\n+        <script>\n+            function newTabAuth() {\n+                window.open(\n+                  \"${m.authUrl}\", \"_blank\");\n+            }\n+        </script>\n+    <#else>\n+      <iframe frameBorder=\"0\" src=\"${m.authUrl?html}\"></iframe>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk4MTk1Ng=="}, "originalCommit": {"oid": "8f693dddaba1f14da45f398671bb9924b3367eb5"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzQ0NDQ4OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/web/connectors/blackboard/servlet/BlackboardRestOauthSignonServlet.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNjoyODozOVrOGkjiqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNDowNDozNlrOGnYfDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk4NDIzMw==", "bodyText": "Could this be given a more descriptive name?\nMaybe oauthReq?", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r440984233", "createdAt": "2020-06-16T16:28:39Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/web/connectors/blackboard/servlet/BlackboardRestOauthSignonServlet.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.web.connectors.blackboard.servlet;\n+\n+import com.dytech.devlib.Base64;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.base.Throwables;\n+import com.tle.annotation.NonNullByDefault;\n+import com.tle.common.PathUtils;\n+import com.tle.common.connectors.entity.Connector;\n+import com.tle.core.connectors.blackboard.BlackboardRESTConnectorConstants;\n+import com.tle.core.connectors.blackboard.beans.ErrorResponse;\n+import com.tle.core.connectors.blackboard.beans.Token;\n+import com.tle.core.connectors.blackboard.service.BlackboardRESTConnectorService;\n+import com.tle.core.connectors.service.ConnectorService;\n+import com.tle.core.encryption.EncryptionService;\n+import com.tle.core.guice.Bind;\n+import com.tle.core.institution.InstitutionService;\n+import com.tle.core.services.HttpService;\n+import com.tle.core.services.http.Request;\n+import com.tle.core.services.http.Response;\n+import com.tle.core.services.user.UserSessionService;\n+import com.tle.core.settings.service.ConfigurationService;\n+import com.tle.exceptions.AuthenticationException;\n+import java.io.IOException;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.log4j.Logger;\n+\n+/** Served up at /blackboardrestauth */\n+@SuppressWarnings(\"nls\")\n+@NonNullByDefault\n+@Bind\n+@Singleton\n+public class BlackboardRestOauthSignonServlet extends HttpServlet {\n+  private static final String STATE_CALLBACK_PARAMETER = \"state\";\n+\n+  private static final Logger LOGGER = Logger.getLogger(BlackboardRestOauthSignonServlet.class);\n+  @Inject private HttpService httpService;\n+  @Inject private ConnectorService connectorService;\n+  @Inject private EncryptionService encryptionService;\n+  @Inject private ConfigurationService configService;\n+  @Inject private UserSessionService sessionService;\n+  @Inject private BlackboardRESTConnectorService blackboardRestConnectorService;\n+  @Inject private InstitutionService institutionService;\n+\n+  private static final ObjectMapper jsonMapper = new ObjectMapper();\n+\n+  @Override\n+  protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n+      throws ServletException, IOException {\n+    LOGGER.trace(\"Requesting OAuth Sign-on\");\n+    String postfixKey = \"\";\n+    String connectorUuid = \"\";\n+    String forwardUrl = null;\n+    String state = req.getParameter(STATE_CALLBACK_PARAMETER);\n+\n+    if (state != null) {\n+      ObjectNode stateJson =\n+          (ObjectNode) new ObjectMapper().readTree(blackboardRestConnectorService.decrypt(state));\n+      JsonNode forwardUrlNode =\n+          stateJson.get(BlackboardRESTConnectorConstants.STATE_KEY_FORWARD_URL);\n+      if (forwardUrlNode != null) {\n+        forwardUrl = forwardUrlNode.asText();\n+      }\n+\n+      JsonNode postfixKeyNode =\n+          stateJson.get(BlackboardRESTConnectorConstants.STATE_KEY_POSTFIX_KEY);\n+      if (postfixKeyNode != null) {\n+        postfixKey = postfixKeyNode.asText();\n+      }\n+\n+      JsonNode connectorUuidNode = stateJson.get(\"connectorUuid\");\n+      if (connectorUuidNode != null) {\n+        connectorUuid = connectorUuidNode.asText();\n+      }\n+    }\n+    String code = req.getParameter(\"code\");\n+    sessionService.setAttribute(BlackboardRESTConnectorConstants.SESSION_CODE + postfixKey, code);\n+\n+    // Ask for the token.\n+    final Connector connector = connectorService.getByUuid(connectorUuid);\n+    final String apiKey = connector.getAttribute(BlackboardRESTConnectorConstants.FIELD_API_KEY);\n+    final String apiSecret =\n+        encryptionService.decrypt(\n+            connector.getAttribute(BlackboardRESTConnectorConstants.FIELD_API_SECRET));\n+    final String b64 =\n+        new Base64()\n+            .encode((apiKey + \":\" + apiSecret).getBytes())\n+            .replace(\"\\n\", \"\")\n+            .replace(\"\\r\", \"\");\n+\n+    final Request req2 =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f693dddaba1f14da45f398671bb9924b3367eb5"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk0ODgxMg==", "bodyText": "done", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r443948812", "createdAt": "2020-06-23T04:04:36Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/web/connectors/blackboard/servlet/BlackboardRestOauthSignonServlet.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.web.connectors.blackboard.servlet;\n+\n+import com.dytech.devlib.Base64;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.base.Throwables;\n+import com.tle.annotation.NonNullByDefault;\n+import com.tle.common.PathUtils;\n+import com.tle.common.connectors.entity.Connector;\n+import com.tle.core.connectors.blackboard.BlackboardRESTConnectorConstants;\n+import com.tle.core.connectors.blackboard.beans.ErrorResponse;\n+import com.tle.core.connectors.blackboard.beans.Token;\n+import com.tle.core.connectors.blackboard.service.BlackboardRESTConnectorService;\n+import com.tle.core.connectors.service.ConnectorService;\n+import com.tle.core.encryption.EncryptionService;\n+import com.tle.core.guice.Bind;\n+import com.tle.core.institution.InstitutionService;\n+import com.tle.core.services.HttpService;\n+import com.tle.core.services.http.Request;\n+import com.tle.core.services.http.Response;\n+import com.tle.core.services.user.UserSessionService;\n+import com.tle.core.settings.service.ConfigurationService;\n+import com.tle.exceptions.AuthenticationException;\n+import java.io.IOException;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.log4j.Logger;\n+\n+/** Served up at /blackboardrestauth */\n+@SuppressWarnings(\"nls\")\n+@NonNullByDefault\n+@Bind\n+@Singleton\n+public class BlackboardRestOauthSignonServlet extends HttpServlet {\n+  private static final String STATE_CALLBACK_PARAMETER = \"state\";\n+\n+  private static final Logger LOGGER = Logger.getLogger(BlackboardRestOauthSignonServlet.class);\n+  @Inject private HttpService httpService;\n+  @Inject private ConnectorService connectorService;\n+  @Inject private EncryptionService encryptionService;\n+  @Inject private ConfigurationService configService;\n+  @Inject private UserSessionService sessionService;\n+  @Inject private BlackboardRESTConnectorService blackboardRestConnectorService;\n+  @Inject private InstitutionService institutionService;\n+\n+  private static final ObjectMapper jsonMapper = new ObjectMapper();\n+\n+  @Override\n+  protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n+      throws ServletException, IOException {\n+    LOGGER.trace(\"Requesting OAuth Sign-on\");\n+    String postfixKey = \"\";\n+    String connectorUuid = \"\";\n+    String forwardUrl = null;\n+    String state = req.getParameter(STATE_CALLBACK_PARAMETER);\n+\n+    if (state != null) {\n+      ObjectNode stateJson =\n+          (ObjectNode) new ObjectMapper().readTree(blackboardRestConnectorService.decrypt(state));\n+      JsonNode forwardUrlNode =\n+          stateJson.get(BlackboardRESTConnectorConstants.STATE_KEY_FORWARD_URL);\n+      if (forwardUrlNode != null) {\n+        forwardUrl = forwardUrlNode.asText();\n+      }\n+\n+      JsonNode postfixKeyNode =\n+          stateJson.get(BlackboardRESTConnectorConstants.STATE_KEY_POSTFIX_KEY);\n+      if (postfixKeyNode != null) {\n+        postfixKey = postfixKeyNode.asText();\n+      }\n+\n+      JsonNode connectorUuidNode = stateJson.get(\"connectorUuid\");\n+      if (connectorUuidNode != null) {\n+        connectorUuid = connectorUuidNode.asText();\n+      }\n+    }\n+    String code = req.getParameter(\"code\");\n+    sessionService.setAttribute(BlackboardRESTConnectorConstants.SESSION_CODE + postfixKey, code);\n+\n+    // Ask for the token.\n+    final Connector connector = connectorService.getByUuid(connectorUuid);\n+    final String apiKey = connector.getAttribute(BlackboardRESTConnectorConstants.FIELD_API_KEY);\n+    final String apiSecret =\n+        encryptionService.decrypt(\n+            connector.getAttribute(BlackboardRESTConnectorConstants.FIELD_API_SECRET));\n+    final String b64 =\n+        new Base64()\n+            .encode((apiKey + \":\" + apiSecret).getBytes())\n+            .replace(\"\\n\", \"\")\n+            .replace(\"\\r\", \"\");\n+\n+    final Request req2 =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk4NDIzMw=="}, "originalCommit": {"oid": "8f693dddaba1f14da45f398671bb9924b3367eb5"}, "originalPosition": 115}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1361, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}