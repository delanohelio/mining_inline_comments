{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1NDAzMjc4", "number": 2592, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMzoyMTozMlrOFDL9Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNToyMjozM1rOFDRxDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODg1OTA3OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/service/BlackboardRESTConnectorService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMzoyMTozMlrOICuBtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjo1MToyNlrOIDg6KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyMjE2Nw==", "bodyText": "Arguably these should be completed. Or, otherwise removed. (But it would be nice if they were actually populated to assist with future maintenance - it's one area that bites us again and again maintaining oEQ code.)", "url": "https://github.com/openequella/openEQUELLA/pull/2592#discussion_r539722167", "createdAt": "2020-12-09T23:21:32Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/service/BlackboardRESTConnectorService.java", "diffHunk": "@@ -46,16 +47,16 @@ String getAuthorisationUrl(\n    * The connector object will need to store an encrypted admin token in the DB. Use this method to\n    * encrypt the one returned from Blackboard.\n    *\n-   * @param token\n+   * @param data\n    * @return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48f93e886eb0ad29fe11a2fe4e9c424de8474df1"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU1NTgxNg==", "bodyText": "I don't have time for a complete overhaul of the Blackboard code atm, but I'll keep that in mind to not leave javadoc skeletons around \ud83d\udc4d", "url": "https://github.com/openequella/openEQUELLA/pull/2592#discussion_r540555816", "createdAt": "2020-12-10T22:51:26Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/service/BlackboardRESTConnectorService.java", "diffHunk": "@@ -46,16 +47,16 @@ String getAuthorisationUrl(\n    * The connector object will need to store an encrypted admin token in the DB. Use this method to\n    * encrypt the one returned from Blackboard.\n    *\n-   * @param token\n+   * @param data\n    * @return", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyMjE2Nw=="}, "originalCommit": {"oid": "48f93e886eb0ad29fe11a2fe4e9c424de8474df1"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODg2NDQ1OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/service/BlackboardRESTConnectorService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMzoyMjo1NFrOICuEqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMzoyMjo1NFrOICuEqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyMjkyMg==", "bodyText": "A comment on this would be gold. As it's definitely unclear what this should be doing/implemented as.\nFrom reading on more, I'd suggest a different name though: buildBasicAuthorizationCredentials. As that seems to be the aim, and it's definitely not encrypting anything (just encoding).", "url": "https://github.com/openequella/openEQUELLA/pull/2592#discussion_r539722922", "createdAt": "2020-12-09T23:22:54Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/service/BlackboardRESTConnectorService.java", "diffHunk": "@@ -46,16 +47,16 @@ String getAuthorisationUrl(\n    * The connector object will need to store an encrypted admin token in the DB. Use this method to\n    * encrypt the one returned from Blackboard.\n    *\n-   * @param token\n+   * @param data\n    * @return\n    */\n   String encrypt(String data);\n \n   String decrypt(String encryptedData);\n \n-  void setToken(Connector connector, String value);\n+  String encryptKeyAndSecret(Connector connector);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48f93e886eb0ad29fe11a2fe4e9c424de8474df1"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODg3OTgzOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/service/impl/BlackboardRESTConnectorServiceImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMzoyNzo1MVrOICuNJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNTo0NDo0NlrOIFAxSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyNTA5Mg==", "bodyText": "Maybe I've misread... But, if a token expires after 60mins, why cache for 90mins - shouldn't it also be 60?\nI assume with a refresh that'd do an update to the cache item and then it would start its TTL again.", "url": "https://github.com/openequella/openEQUELLA/pull/2592#discussion_r539725092", "createdAt": "2020-12-09T23:27:51Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/service/impl/BlackboardRESTConnectorServiceImpl.java", "diffHunk": "@@ -138,10 +136,15 @@\n \n   @PostConstruct\n   public void setupCache() {\n-    courseCache = cacheService.getCache(CACHE_ID_COURSE, 1000, 10, TimeUnit.MINUTES);\n-    courseFoldersCache = cacheService.getCache(CACHE_ID_COURSE_FOLDERS, 1000, 10, TimeUnit.MINUTES);\n-    tokenCache = cacheService.getCache(CACHE_ID_TOKEN, 1000, 60, TimeUnit.MINUTES);\n-    uidCache = cacheService.getCache(CACHE_ID_USERID, 1000, 60, TimeUnit.MINUTES);\n+    // These two caches can be easily rebuilt, and the original\n+    //  data on the Bb servers can frequently change\n+    courseCache = cacheService.getCache(CACHE_ID_COURSE, 100, 2, TimeUnit.MINUTES);\n+    courseFoldersCache = cacheService.getCache(CACHE_ID_COURSE_FOLDERS, 100, 2, TimeUnit.MINUTES);\n+    // Depending on usage, setting this values (size and ttl) too low will break the\n+    //  FU / MER / AES flows. Setting it higher to be safe.  Bb tokens expire after 60\n+    //  minutes, and since we use the refresh_token flows, refreshing a token is less\n+    //  noticeable to the user then requesting a new access token\n+    authCache = cacheService.getCache(CACHE_ID_AUTH, 1000, 90, TimeUnit.MINUTES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48f93e886eb0ad29fe11a2fe4e9c424de8474df1"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUxOTk4Mw==", "bodyText": "The 3LO flow with Blackboard requires user interaction (or at least a full page redirect).  This disrupts the user experience, and at times, can make the user stop what they are doing and relaunch the 'Add to External System' or LTI Selection Session flows.  The theory with setting this to 90 minutes is to offer a cushion to those users using the flows for extended periods, who may work with the integration over 60 minutes.\nWith these latest fixes to (a) put the auth token in the user session and (b) leverage the refresh_token flow, I think we can safely bring the cache ttl to match Blackboard's expiry.  I could be convinced that we can bring the size and the ttl lower, to say, 200 and 30 minutes, if folks are concerned with the resources to maintain that cache.", "url": "https://github.com/openequella/openEQUELLA/pull/2592#discussion_r540519983", "createdAt": "2020-12-10T21:46:23Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/service/impl/BlackboardRESTConnectorServiceImpl.java", "diffHunk": "@@ -138,10 +136,15 @@\n \n   @PostConstruct\n   public void setupCache() {\n-    courseCache = cacheService.getCache(CACHE_ID_COURSE, 1000, 10, TimeUnit.MINUTES);\n-    courseFoldersCache = cacheService.getCache(CACHE_ID_COURSE_FOLDERS, 1000, 10, TimeUnit.MINUTES);\n-    tokenCache = cacheService.getCache(CACHE_ID_TOKEN, 1000, 60, TimeUnit.MINUTES);\n-    uidCache = cacheService.getCache(CACHE_ID_USERID, 1000, 60, TimeUnit.MINUTES);\n+    // These two caches can be easily rebuilt, and the original\n+    //  data on the Bb servers can frequently change\n+    courseCache = cacheService.getCache(CACHE_ID_COURSE, 100, 2, TimeUnit.MINUTES);\n+    courseFoldersCache = cacheService.getCache(CACHE_ID_COURSE_FOLDERS, 100, 2, TimeUnit.MINUTES);\n+    // Depending on usage, setting this values (size and ttl) too low will break the\n+    //  FU / MER / AES flows. Setting it higher to be safe.  Bb tokens expire after 60\n+    //  minutes, and since we use the refresh_token flows, refreshing a token is less\n+    //  noticeable to the user then requesting a new access token\n+    authCache = cacheService.getCache(CACHE_ID_AUTH, 1000, 90, TimeUnit.MINUTES);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyNTA5Mg=="}, "originalCommit": {"oid": "48f93e886eb0ad29fe11a2fe4e9c424de8474df1"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEyNTE3MQ==", "bodyText": "hmmm, not sure that addresses my concern. It seems we're holding onto an expired token for an additional 30mins. Surely sending an expired token would force the refresh anyway from the Bb side. \ud83e\udd14", "url": "https://github.com/openequella/openEQUELLA/pull/2592#discussion_r542125171", "createdAt": "2020-12-14T05:41:04Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/service/impl/BlackboardRESTConnectorServiceImpl.java", "diffHunk": "@@ -138,10 +136,15 @@\n \n   @PostConstruct\n   public void setupCache() {\n-    courseCache = cacheService.getCache(CACHE_ID_COURSE, 1000, 10, TimeUnit.MINUTES);\n-    courseFoldersCache = cacheService.getCache(CACHE_ID_COURSE_FOLDERS, 1000, 10, TimeUnit.MINUTES);\n-    tokenCache = cacheService.getCache(CACHE_ID_TOKEN, 1000, 60, TimeUnit.MINUTES);\n-    uidCache = cacheService.getCache(CACHE_ID_USERID, 1000, 60, TimeUnit.MINUTES);\n+    // These two caches can be easily rebuilt, and the original\n+    //  data on the Bb servers can frequently change\n+    courseCache = cacheService.getCache(CACHE_ID_COURSE, 100, 2, TimeUnit.MINUTES);\n+    courseFoldersCache = cacheService.getCache(CACHE_ID_COURSE_FOLDERS, 100, 2, TimeUnit.MINUTES);\n+    // Depending on usage, setting this values (size and ttl) too low will break the\n+    //  FU / MER / AES flows. Setting it higher to be safe.  Bb tokens expire after 60\n+    //  minutes, and since we use the refresh_token flows, refreshing a token is less\n+    //  noticeable to the user then requesting a new access token\n+    authCache = cacheService.getCache(CACHE_ID_AUTH, 1000, 90, TimeUnit.MINUTES);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyNTA5Mg=="}, "originalCommit": {"oid": "48f93e886eb0ad29fe11a2fe4e9c424de8474df1"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEyNjQwOQ==", "bodyText": "Ah hold on, I now see you've address that. \ud83d\udc4d", "url": "https://github.com/openequella/openEQUELLA/pull/2592#discussion_r542126409", "createdAt": "2020-12-14T05:44:46Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/service/impl/BlackboardRESTConnectorServiceImpl.java", "diffHunk": "@@ -138,10 +136,15 @@\n \n   @PostConstruct\n   public void setupCache() {\n-    courseCache = cacheService.getCache(CACHE_ID_COURSE, 1000, 10, TimeUnit.MINUTES);\n-    courseFoldersCache = cacheService.getCache(CACHE_ID_COURSE_FOLDERS, 1000, 10, TimeUnit.MINUTES);\n-    tokenCache = cacheService.getCache(CACHE_ID_TOKEN, 1000, 60, TimeUnit.MINUTES);\n-    uidCache = cacheService.getCache(CACHE_ID_USERID, 1000, 60, TimeUnit.MINUTES);\n+    // These two caches can be easily rebuilt, and the original\n+    //  data on the Bb servers can frequently change\n+    courseCache = cacheService.getCache(CACHE_ID_COURSE, 100, 2, TimeUnit.MINUTES);\n+    courseFoldersCache = cacheService.getCache(CACHE_ID_COURSE_FOLDERS, 100, 2, TimeUnit.MINUTES);\n+    // Depending on usage, setting this values (size and ttl) too low will break the\n+    //  FU / MER / AES flows. Setting it higher to be safe.  Bb tokens expire after 60\n+    //  minutes, and since we use the refresh_token flows, refreshing a token is less\n+    //  noticeable to the user then requesting a new access token\n+    authCache = cacheService.getCache(CACHE_ID_AUTH, 1000, 90, TimeUnit.MINUTES);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyNTA5Mg=="}, "originalCommit": {"oid": "48f93e886eb0ad29fe11a2fe4e9c424de8474df1"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODg5MDY3OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/service/impl/BlackboardRESTConnectorServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMzozMDo1OVrOICuS3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMzozMDo1OVrOICuS3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyNjU1OA==", "bodyText": "I'd normally only expect this defined in the interface, or if you wish to change it maybe have a reference back.", "url": "https://github.com/openequella/openEQUELLA/pull/2592#discussion_r539726558", "createdAt": "2020-12-09T23:30:59Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/service/impl/BlackboardRESTConnectorServiceImpl.java", "diffHunk": "@@ -166,10 +169,18 @@ protected boolean isRelativeUrls() {\n     return false;\n   }\n \n+  /**\n+   * Calling this method loads the auth Token into the user session.\n+   *\n+   * @param connector\n+   * @return\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48f93e886eb0ad29fe11a2fe4e9c424de8474df1"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTIxNTM4OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/service/impl/BlackboardRESTConnectorServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMToyMzoyMFrOICxEFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMDoxMTowOVrOIDbU3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc3MTkyNA==", "bodyText": "Are you sure you want to do that - it's kind of expected with Base64.", "url": "https://github.com/openequella/openEQUELLA/pull/2592#discussion_r539771924", "createdAt": "2020-12-10T01:23:20Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/service/impl/BlackboardRESTConnectorServiceImpl.java", "diffHunk": "@@ -687,25 +727,38 @@ public String decrypt(String encryptedData) {\n     return encryptedData;\n   }\n \n-  public Optional<String> getToken(Connector connector) {\n-    return getCachedValue(tokenCache, buildCacheKey(CACHE_ID_TOKEN, connector));\n+  @Override\n+  public String encryptKeyAndSecret(Connector connector) {\n+    final String apiKey = connector.getAttribute(BlackboardRESTConnectorConstants.FIELD_API_KEY);\n+    final String apiSecret =\n+        encryptionService.decrypt(\n+            connector.getAttribute(BlackboardRESTConnectorConstants.FIELD_API_SECRET));\n+    return new Base64()\n+        .encode((apiKey + \":\" + apiSecret).getBytes())\n+        .replace(\"\\n\", \"\")\n+        .replace(\"\\r\", \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48f93e886eb0ad29fe11a2fe4e9c424de8474df1"}, "originalPosition": 323}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ2NDM0OA==", "bodyText": "I pulled that from existing code.  When I remove the 2 replace methods, Blackboard responds with Invalid Credentials, so I'll leave that logic as-is for now.", "url": "https://github.com/openequella/openEQUELLA/pull/2592#discussion_r540464348", "createdAt": "2020-12-10T20:11:09Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/service/impl/BlackboardRESTConnectorServiceImpl.java", "diffHunk": "@@ -687,25 +727,38 @@ public String decrypt(String encryptedData) {\n     return encryptedData;\n   }\n \n-  public Optional<String> getToken(Connector connector) {\n-    return getCachedValue(tokenCache, buildCacheKey(CACHE_ID_TOKEN, connector));\n+  @Override\n+  public String encryptKeyAndSecret(Connector connector) {\n+    final String apiKey = connector.getAttribute(BlackboardRESTConnectorConstants.FIELD_API_KEY);\n+    final String apiSecret =\n+        encryptionService.decrypt(\n+            connector.getAttribute(BlackboardRESTConnectorConstants.FIELD_API_SECRET));\n+    return new Base64()\n+        .encode((apiKey + \":\" + apiSecret).getBytes())\n+        .replace(\"\\n\", \"\")\n+        .replace(\"\\r\", \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc3MTkyNA=="}, "originalCommit": {"oid": "48f93e886eb0ad29fe11a2fe4e9c424de8474df1"}, "originalPosition": 323}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTI0NTIyOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/service/impl/BlackboardRESTConnectorServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMTozNDoxM1rOICxUJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjozNzo1MlrOIDgd4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc3NjAzNw==", "bodyText": "This function (sendBlackboardData) is really getting out of hand and needs to be refactored I'm afraid. We have it implementing two concerns at least - making a request and processing the response - and even in the request areas we have some headers added at the start, some then added later after the body, and then a MIME type set here or there. But then with this modification the request building also includes the verbatim details of whether to attempt a refresh, or use an existing token.\nAt the very least it should be refactored into: makeBlackboardRequest and processBlackboardResponse. Following that, each of those should then be tidied up to be more orderly.", "url": "https://github.com/openequella/openEQUELLA/pull/2592#discussion_r539776037", "createdAt": "2020-12-10T01:34:13Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/service/impl/BlackboardRESTConnectorServiceImpl.java", "diffHunk": "@@ -548,47 +531,54 @@ public boolean supportsReverseSort() {\n       } else {\n         body = \"\";\n       }\n-      request.setBody(body);\n-      if (body.length() > 0) {\n-        request.addHeader(\"Content-Type\", \"application/json\");\n+\n+      if (\"grant_type=refresh_token\".equals(data)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48f93e886eb0ad29fe11a2fe4e9c424de8474df1"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU0ODU3OQ==", "bodyText": "I pulled out the preparation bits and cleaned it up - quite a bit easier to read now, though it could likely use future work, including pagination of results.", "url": "https://github.com/openequella/openEQUELLA/pull/2592#discussion_r540548579", "createdAt": "2020-12-10T22:37:52Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/service/impl/BlackboardRESTConnectorServiceImpl.java", "diffHunk": "@@ -548,47 +531,54 @@ public boolean supportsReverseSort() {\n       } else {\n         body = \"\";\n       }\n-      request.setBody(body);\n-      if (body.length() > 0) {\n-        request.addHeader(\"Content-Type\", \"application/json\");\n+\n+      if (\"grant_type=refresh_token\".equals(data)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc3NjAzNw=="}, "originalCommit": {"oid": "48f93e886eb0ad29fe11a2fe4e9c424de8474df1"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTI0NzExOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/service/impl/BlackboardRESTConnectorServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMTozNDo1MFrOICxVHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMTozNDo1MFrOICxVHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc3NjI4NQ==", "bodyText": "This string and logic check is duplicated from a few lines up. Should at the very least be stored in a flag, and possibly the logic joined together - or split into another method.", "url": "https://github.com/openequella/openEQUELLA/pull/2592#discussion_r539776285", "createdAt": "2020-12-10T01:34:50Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/service/impl/BlackboardRESTConnectorServiceImpl.java", "diffHunk": "@@ -548,47 +531,54 @@ public boolean supportsReverseSort() {\n       } else {\n         body = \"\";\n       }\n-      request.setBody(body);\n-      if (body.length() > 0) {\n-        request.addHeader(\"Content-Type\", \"application/json\");\n+\n+      if (\"grant_type=refresh_token\".equals(data)) {\n+        request.setMimeType(\"application/x-www-form-urlencoded\");\n+      } else {\n+        if (body.length() > 0) {\n+          request.addHeader(\"Content-Type\", \"application/json\");\n+        }\n       }\n+      request.setBody(body);\n+\n       if (LOGGER.isDebugEnabled()) {\n         LOGGER.debug(\"Sending \" + prettyJson(body));\n       }\n \n-      // attach cached token.\n-      final Optional<String> token = getToken(connector);\n-      if (!token.isPresent()) {\n-        throw new AuthenticationException(\"User token is not present\");\n+      if (\"grant_type=refresh_token\".equals(data)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48f93e886eb0ad29fe11a2fe4e9c424de8474df1"}, "originalPosition": 200}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTc4MTU4OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/service/impl/BlackboardRESTConnectorServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNTowOTo0MlrOIC1zDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNTowOTo0MlrOIC1zDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0OTQ4Nw==", "bodyText": "Should this just be a do-while? Something like:\n    Optional<String> url = Optional\n        .of(API_ROOT_V1 + \"courses/\" + courseId + \"/contents?recursive=true\");\n    final List<Content> allContent = new ArrayList<>();\n    do {\n      Contents contents =\n          sendBlackboardData(connector, url.get(), Contents.class, null, Request.Method.GET);\n      allContent.addAll(contents.getResults());\n      url = Optional.ofNullable(contents.getPaging()).map(Paging::getNextPage);\n    } while (url.isPresent());", "url": "https://github.com/openequella/openEQUELLA/pull/2592#discussion_r539849487", "createdAt": "2020-12-10T05:09:42Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/service/impl/BlackboardRESTConnectorServiceImpl.java", "diffHunk": "@@ -346,13 +315,27 @@ private boolean isCoursesCached(Connector connector) {\n       return cachedFolders.get();\n     }\n \n+    // No cached folders available.  Pull latest from Blackboard.\n     final String url = API_ROOT_V1 + \"courses/\" + courseId + \"/contents?recursive=true\";\n-    final Contents contents =\n+    final List<Content> allContent = new ArrayList<>();\n+    Contents contents =\n         sendBlackboardData(connector, url, Contents.class, null, Request.Method.GET);\n+    allContent.addAll(contents.getResults());\n+\n+    Paging paging = contents.getPaging();\n+\n+    while (paging != null && paging.getNextPage() != null) {\n+      contents =\n+          sendBlackboardData(\n+              connector, paging.getNextPage(), Contents.class, null, Request.Method.GET);\n+      allContent.addAll(contents.getResults());\n+\n+      paging = contents.getPaging();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48f93e886eb0ad29fe11a2fe4e9c424de8474df1"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTc5NDI4OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/service/impl/BlackboardRESTConnectorServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNToxNTowNVrOIC151A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNToxNTowNVrOIC151A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg1MTIyMA==", "bodyText": "Should be an orElseThrow:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Optional<Token> auth =\n          \n          \n            \n                    userSessionService.getAttribute(BlackboardRESTConnectorConstants.USER_SESSION_AUTH_KEY);\n          \n          \n            \n                if (!auth.isPresent()) {\n          \n          \n            \n                  throw new AuthenticationException(\n          \n          \n            \n                      \"User authentication details are not available in the session\");\n          \n          \n            \n                }\n          \n          \n            \n                return auth.get();\n          \n          \n            \n                return userSessionService.getAttribute(BlackboardRESTConnectorConstants.USER_SESSION_AUTH_KEY)\n          \n          \n            \n                  .orElseThrow(\n          \n          \n            \n                    () -> new AuthenticationException(\"User authentication details are not available in the session\"));", "url": "https://github.com/openequella/openEQUELLA/pull/2592#discussion_r539851220", "createdAt": "2020-12-10T05:15:05Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/service/impl/BlackboardRESTConnectorServiceImpl.java", "diffHunk": "@@ -606,6 +596,56 @@ public boolean supportsReverseSort() {\n     }\n   }\n \n+  private Token getUserSessionAuth() {\n+    Optional<Token> auth =\n+        userSessionService.getAttribute(BlackboardRESTConnectorConstants.USER_SESSION_AUTH_KEY);\n+    if (!auth.isPresent()) {\n+      throw new AuthenticationException(\n+          \"User authentication details are not available in the session\");\n+    }\n+    return auth.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48f93e886eb0ad29fe11a2fe4e9c424de8474df1"}, "originalPosition": 262}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTgwMTg3OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/service/impl/BlackboardRESTConnectorServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNToxODozM1rOIC197w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNToxODozM1rOIC197w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg1MjI3MQ==", "bodyText": "Is this:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Token expAuth = getUserSessionAuth();\n          \n          \n            \n            \n          \n          \n            \n                // Make a reasonable effort to obtain the latest refresh token\n          \n          \n            \n                Optional<Token> cachedAuth = getAuth(connector);\n          \n          \n            \n                if (cachedAuth.isPresent()) {\n          \n          \n            \n                  expAuth = cachedAuth.get();\n          \n          \n            \n                }\n          \n          \n            \n                Token expAuth = getAuth(connector)\n          \n          \n            \n                  .orElse(() -> getUserSessionAuth());", "url": "https://github.com/openequella/openEQUELLA/pull/2592#discussion_r539852271", "createdAt": "2020-12-10T05:18:33Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/service/impl/BlackboardRESTConnectorServiceImpl.java", "diffHunk": "@@ -606,6 +596,56 @@ public boolean supportsReverseSort() {\n     }\n   }\n \n+  private Token getUserSessionAuth() {\n+    Optional<Token> auth =\n+        userSessionService.getAttribute(BlackboardRESTConnectorConstants.USER_SESSION_AUTH_KEY);\n+    if (!auth.isPresent()) {\n+      throw new AuthenticationException(\n+          \"User authentication details are not available in the session\");\n+    }\n+    return auth.get();\n+  }\n+\n+  private void setUserSessionAuth(Optional<Token> t) {\n+    userSessionService.setAttribute(BlackboardRESTConnectorConstants.USER_SESSION_AUTH_KEY, t);\n+  }\n+\n+  private void setUserSessionAuth(Token t) {\n+    setUserSessionAuth(Optional.fromNullable(t));\n+  }\n+\n+  private void refreshBlackboardToken(Connector connector) {\n+    Token expAuth = getUserSessionAuth();\n+\n+    // Make a reasonable effort to obtain the latest refresh token\n+    Optional<Token> cachedAuth = getAuth(connector);\n+    if (cachedAuth.isPresent()) {\n+      expAuth = cachedAuth.get();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48f93e886eb0ad29fe11a2fe4e9c424de8474df1"}, "originalPosition": 280}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTgwMzU0OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/service/impl/BlackboardRESTConnectorServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNToxOToxN1rOIC1-2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxODozMDowOFrOIDXfHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg1MjUwNA==", "bodyText": "Is this missing a throw?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  new AuthenticationException(\"Unable to refresh auth token.  Please retry action.\");\n          \n          \n            \n                  throw new AuthenticationException(\"Unable to refresh auth token.  Please retry action.\");", "url": "https://github.com/openequella/openEQUELLA/pull/2592#discussion_r539852504", "createdAt": "2020-12-10T05:19:17Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/service/impl/BlackboardRESTConnectorServiceImpl.java", "diffHunk": "@@ -606,6 +596,56 @@ public boolean supportsReverseSort() {\n     }\n   }\n \n+  private Token getUserSessionAuth() {\n+    Optional<Token> auth =\n+        userSessionService.getAttribute(BlackboardRESTConnectorConstants.USER_SESSION_AUTH_KEY);\n+    if (!auth.isPresent()) {\n+      throw new AuthenticationException(\n+          \"User authentication details are not available in the session\");\n+    }\n+    return auth.get();\n+  }\n+\n+  private void setUserSessionAuth(Optional<Token> t) {\n+    userSessionService.setAttribute(BlackboardRESTConnectorConstants.USER_SESSION_AUTH_KEY, t);\n+  }\n+\n+  private void setUserSessionAuth(Token t) {\n+    setUserSessionAuth(Optional.fromNullable(t));\n+  }\n+\n+  private void refreshBlackboardToken(Connector connector) {\n+    Token expAuth = getUserSessionAuth();\n+\n+    // Make a reasonable effort to obtain the latest refresh token\n+    Optional<Token> cachedAuth = getAuth(connector);\n+    if (cachedAuth.isPresent()) {\n+      expAuth = cachedAuth.get();\n+    }\n+\n+    final String path =\n+        \"learn/api/public/v1/oauth2/token?grant_type=refresh_token&refresh_token=\"\n+            + expAuth.getRefreshToken();\n+\n+    try {\n+      // Setting 'firstTime' to false - if the token refresh fails, it's likely not recoverable.\n+      setAuth(\n+          connector,\n+          sendBlackboardData(\n+              connector,\n+              path,\n+              Token.class,\n+              \"grant_type=refresh_token\",\n+              Request.Method.POST,\n+              false));\n+    } catch (Exception exception) {\n+      LOGGER.error(exception.getMessage());\n+      // Likely an expired auth token that failed to refresh.  Guide the user to try again\n+      removeCachedValue(authCache, buildCacheKey(CACHE_ID_AUTH, connector));\n+      new AuthenticationException(\"Unable to refresh auth token.  Please retry action.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48f93e886eb0ad29fe11a2fe4e9c424de8474df1"}, "originalPosition": 301}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQwMTQzOA==", "bodyText": "doh - yes it is.", "url": "https://github.com/openequella/openEQUELLA/pull/2592#discussion_r540401438", "createdAt": "2020-12-10T18:30:08Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/service/impl/BlackboardRESTConnectorServiceImpl.java", "diffHunk": "@@ -606,6 +596,56 @@ public boolean supportsReverseSort() {\n     }\n   }\n \n+  private Token getUserSessionAuth() {\n+    Optional<Token> auth =\n+        userSessionService.getAttribute(BlackboardRESTConnectorConstants.USER_SESSION_AUTH_KEY);\n+    if (!auth.isPresent()) {\n+      throw new AuthenticationException(\n+          \"User authentication details are not available in the session\");\n+    }\n+    return auth.get();\n+  }\n+\n+  private void setUserSessionAuth(Optional<Token> t) {\n+    userSessionService.setAttribute(BlackboardRESTConnectorConstants.USER_SESSION_AUTH_KEY, t);\n+  }\n+\n+  private void setUserSessionAuth(Token t) {\n+    setUserSessionAuth(Optional.fromNullable(t));\n+  }\n+\n+  private void refreshBlackboardToken(Connector connector) {\n+    Token expAuth = getUserSessionAuth();\n+\n+    // Make a reasonable effort to obtain the latest refresh token\n+    Optional<Token> cachedAuth = getAuth(connector);\n+    if (cachedAuth.isPresent()) {\n+      expAuth = cachedAuth.get();\n+    }\n+\n+    final String path =\n+        \"learn/api/public/v1/oauth2/token?grant_type=refresh_token&refresh_token=\"\n+            + expAuth.getRefreshToken();\n+\n+    try {\n+      // Setting 'firstTime' to false - if the token refresh fails, it's likely not recoverable.\n+      setAuth(\n+          connector,\n+          sendBlackboardData(\n+              connector,\n+              path,\n+              Token.class,\n+              \"grant_type=refresh_token\",\n+              Request.Method.POST,\n+              false));\n+    } catch (Exception exception) {\n+      LOGGER.error(exception.getMessage());\n+      // Likely an expired auth token that failed to refresh.  Guide the user to try again\n+      removeCachedValue(authCache, buildCacheKey(CACHE_ID_AUTH, connector));\n+      new AuthenticationException(\"Unable to refresh auth token.  Please retry action.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg1MjUwNA=="}, "originalCommit": {"oid": "48f93e886eb0ad29fe11a2fe4e9c424de8474df1"}, "originalPosition": 301}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTgxMTM1OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/service/impl/BlackboardRESTConnectorServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNToyMjozM1rOIC2C6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjozNjoxOFrOIDgacw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg1MzU0Ng==", "bodyText": "This looks like it should be a do-while like earlier up.\nOne thing also interesting here is the duplicated pattern: sendBlackboardData -> process output to create a List -> check for another page -> repeat. Feels like that should be a method which takes a lambda to support abstracting the commonality of processing/consuming List output.", "url": "https://github.com/openequella/openEQUELLA/pull/2592#discussion_r539853546", "createdAt": "2020-12-10T05:22:33Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/service/impl/BlackboardRESTConnectorServiceImpl.java", "diffHunk": "@@ -730,34 +786,67 @@ private void setCachedCourses(Connector connector, ImmutableList<Course> courses\n     setCachedValue(courseCache, key, courses);\n   }\n \n-  private Optional<ImmutableList<Course>> getCachedCourses(Connector connector) {\n+  /**\n+   * First tries to return the cached courses. If none are available, request them from Blackboard,\n+   * cache them, and return the now cached courses.\n+   *\n+   * @param connector\n+   * @return\n+   */\n+  private ImmutableList<Course> getCachedCourses(Connector connector) {\n     final String key = buildCacheKey(CACHE_ID_COURSE, connector);\n-    return getCachedValue(courseCache, key);\n+    final Optional<ImmutableList<Course>> cached = getCachedValue(courseCache, key);\n+    if (cached.isPresent()) {\n+      return cached.get();\n+    }\n+\n+    // Not cached - get a fresh copy\n+    String url =\n+        API_ROOT_V1\n+            + \"users/\"\n+            + getUserIdType()\n+            + getUserSessionAuth().getUserId()\n+            + \"/courses?fields=course\";\n+\n+    final List<Course> allCourses = new ArrayList<>();\n+    CoursesByUser courses =\n+        sendBlackboardData(connector, url, CoursesByUser.class, null, Request.Method.GET);\n+    for (CourseByUser cbu : courses.getResults()) {\n+      allCourses.add(cbu.getCourse());\n+    }\n+    Paging paging = courses.getPaging();\n+\n+    while (paging != null && paging.getNextPage() != null) {\n+      courses =\n+          sendBlackboardData(\n+              connector, paging.getNextPage(), CoursesByUser.class, null, Request.Method.GET);\n+      for (CourseByUser cbu : courses.getResults()) {\n+        allCourses.add(cbu.getCourse());\n+      }\n+      paging = courses.getPaging();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48f93e886eb0ad29fe11a2fe4e9c424de8474df1"}, "originalPosition": 423}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU0NzY5OQ==", "bodyText": "fixed the do-while.  Time is a bit tight, so I need to forego gathering in the list logic, though I like the idea.", "url": "https://github.com/openequella/openEQUELLA/pull/2592#discussion_r540547699", "createdAt": "2020-12-10T22:36:18Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/service/impl/BlackboardRESTConnectorServiceImpl.java", "diffHunk": "@@ -730,34 +786,67 @@ private void setCachedCourses(Connector connector, ImmutableList<Course> courses\n     setCachedValue(courseCache, key, courses);\n   }\n \n-  private Optional<ImmutableList<Course>> getCachedCourses(Connector connector) {\n+  /**\n+   * First tries to return the cached courses. If none are available, request them from Blackboard,\n+   * cache them, and return the now cached courses.\n+   *\n+   * @param connector\n+   * @return\n+   */\n+  private ImmutableList<Course> getCachedCourses(Connector connector) {\n     final String key = buildCacheKey(CACHE_ID_COURSE, connector);\n-    return getCachedValue(courseCache, key);\n+    final Optional<ImmutableList<Course>> cached = getCachedValue(courseCache, key);\n+    if (cached.isPresent()) {\n+      return cached.get();\n+    }\n+\n+    // Not cached - get a fresh copy\n+    String url =\n+        API_ROOT_V1\n+            + \"users/\"\n+            + getUserIdType()\n+            + getUserSessionAuth().getUserId()\n+            + \"/courses?fields=course\";\n+\n+    final List<Course> allCourses = new ArrayList<>();\n+    CoursesByUser courses =\n+        sendBlackboardData(connector, url, CoursesByUser.class, null, Request.Method.GET);\n+    for (CourseByUser cbu : courses.getResults()) {\n+      allCourses.add(cbu.getCourse());\n+    }\n+    Paging paging = courses.getPaging();\n+\n+    while (paging != null && paging.getNextPage() != null) {\n+      courses =\n+          sendBlackboardData(\n+              connector, paging.getNextPage(), CoursesByUser.class, null, Request.Method.GET);\n+      for (CourseByUser cbu : courses.getResults()) {\n+        allCourses.add(cbu.getCourse());\n+      }\n+      paging = courses.getPaging();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg1MzU0Ng=="}, "originalCommit": {"oid": "48f93e886eb0ad29fe11a2fe4e9c424de8474df1"}, "originalPosition": 423}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1621, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}