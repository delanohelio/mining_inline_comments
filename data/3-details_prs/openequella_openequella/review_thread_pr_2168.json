{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1ODc1NTk1", "number": 2168, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNjowODowNVrOEXER4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMToyMDowN1rOEYTasQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjIyODE4OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/search/SearchHelper.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNjowODowNVrOG-pn2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNjowODowNVrOG-pn2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM0Njg0MQ==", "bodyText": "There is one more blank line added above.", "url": "https://github.com/openequella/openEQUELLA/pull/2168#discussion_r468346841", "createdAt": "2020-08-11T06:08:05Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/search/SearchHelper.scala", "diffHunk": "@@ -39,6 +40,7 @@ import com.tle.web.api.item.equella.interfaces.beans.{\n }\n import com.tle.web.api.item.interfaces.beans.AttachmentBean\n import com.tle.web.api.search.model.{SearchParam, SearchResultAttachment, SearchResultItem}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fce5858846ebbdb463d5fbaf026262262dc7ad26"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjIzMDM1OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/search/SearchResource.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNjowODo1NlrOG-ppCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNjowODo1NlrOG-ppCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM0NzE0Nw==", "bodyText": "Better to keep the type of this variable.", "url": "https://github.com/openequella/openEQUELLA/pull/2168#discussion_r468347147", "createdAt": "2020-08-11T06:08:56Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/search/SearchResource.scala", "diffHunk": "@@ -44,23 +45,28 @@ class SearchResource {\n     response = classOf[SearchResult[SearchResultItem]],\n   )\n   def searchItems(@BeanParam params: SearchParam): Response = {\n-    val searchResults: SearchResults[ItemIdKey] =\n-      LegacyGuice.freeTextService.searchIds(createSearch(params), params.start, params.length)\n-    val itemIds: List[ItemIdKey] = searchResults.getResults.asScala.toList\n-    val serializer               = createSerializer(itemIds)\n-    val items: List[(ItemIdKey, EquellaItemBean)] = for { itemId <- itemIds } yield {\n+    val searchResults: FreetextSearchResults[FreetextResult] =\n+      LegacyGuice.freeTextService.search(createSearch(params), params.start, params.length)\n+    val itemIds = for { item <- searchResults.getSearchResults.asScala } yield {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fce5858846ebbdb463d5fbaf026262262dc7ad26"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjI2Nzg3OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/search/SearchResource.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNjoyNDo0MFrOG-p-1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNjoyNDo0MFrOG-p-1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM1MjcyNg==", "bodyText": "Above two for comprehensives can be refactored to:\nval itemIdsAndItems: : List[(ItemIdKey, FreetextResult)] = searchResults.getSearchResults.asScala.map(result => (result.getItemIdKey, result)).toList\nval serializer = createSerializer(itemIdsAndItems.map(_._1))\nval items = itemIdsAndItems.map{\n  case (itemIdKey, freeTextResult) =>\n    val keyFound = freeTextResult.isKeywordFoundInAttachment\n    val itemBean = new EquellaItemBean\n    itemBean.setKeyWordFoundInAttachment(keyFound)\n    itemBean.setUuid(itemIdKey.getUuid)\n    itemBean.setVersion(itemIdKey.getVersion)\n    serializer.writeItemBeanResult(itemBean, itemIdKey.getKey)\n    LegacyGuice.itemLinkService.addLinks(itemBean)\n    itemIdKey -> itemBean\n}", "url": "https://github.com/openequella/openEQUELLA/pull/2168#discussion_r468352726", "createdAt": "2020-08-11T06:24:40Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/search/SearchResource.scala", "diffHunk": "@@ -44,23 +45,28 @@ class SearchResource {\n     response = classOf[SearchResult[SearchResultItem]],\n   )\n   def searchItems(@BeanParam params: SearchParam): Response = {\n-    val searchResults: SearchResults[ItemIdKey] =\n-      LegacyGuice.freeTextService.searchIds(createSearch(params), params.start, params.length)\n-    val itemIds: List[ItemIdKey] = searchResults.getResults.asScala.toList\n-    val serializer               = createSerializer(itemIds)\n-    val items: List[(ItemIdKey, EquellaItemBean)] = for { itemId <- itemIds } yield {\n+    val searchResults: FreetextSearchResults[FreetextResult] =\n+      LegacyGuice.freeTextService.search(createSearch(params), params.start, params.length)\n+    val itemIds = for { item <- searchResults.getSearchResults.asScala } yield {\n+      item.getItemIdKey\n+    }\n+    val serializer = createSerializer(itemIds.toList)\n+    val items = for { resultData <- searchResults.getSearchResults.asScala } yield {\n+      val keyFound = resultData.isKeywordFoundInAttachment\n+      val itemId   = resultData.getItemIdKey\n       val itemBean = new EquellaItemBean\n+      itemBean.setKeyWordFoundInAttachment(keyFound)\n       itemBean.setUuid(itemId.getUuid)\n       itemBean.setVersion(itemId.getVersion)\n       serializer.writeItemBeanResult(itemBean, itemId.getKey)\n       LegacyGuice.itemLinkService.addLinks(itemBean)\n       itemId -> itemBean\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fce5858846ebbdb463d5fbaf026262262dc7ad26"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjI3OTE0OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/search/model/SearchResultItem.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNjoyOTowNVrOG-qFLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNjoyOTowNVrOG-qFLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM1NDM0OA==", "bodyText": "I think this field does not have to be a Option. A Boolean should be enough. And Javadoc for this field is missing.", "url": "https://github.com/openequella/openEQUELLA/pull/2168#discussion_r468354348", "createdAt": "2020-08-11T06:29:05Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/search/model/SearchResultItem.scala", "diffHunk": "@@ -53,6 +53,7 @@ case class SearchResultItem(\n     thumbnail: String,\n     displayFields: List[DisplayField],\n     displayOptions: Option[DisplayOptions],\n+    keywordFoundInAttachment: Option[Boolean],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fce5858846ebbdb463d5fbaf026262262dc7ad26"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjI4Mzk2OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/services/item/StdFreetextResults.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNjozMDo1OVrOG-qH-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNjozMDo1OVrOG-qH-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM1NTA2Nw==", "bodyText": "This method seems to be unused so we can remove it.", "url": "https://github.com/openequella/openEQUELLA/pull/2168#discussion_r468355067", "createdAt": "2020-08-11T06:30:59Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/services/item/StdFreetextResults.java", "diffHunk": "@@ -50,6 +50,10 @@ public StdFreetextResults(ItemService itemService, SearchResults<T> results, Sea\n     return items;\n   }\n \n+  public SearchResults<T> getSearchResult() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fce5858846ebbdb463d5fbaf026262262dc7ad26"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjYzNzUyOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.base/src/com/tle/web/api/item/interfaces/beans/ItemBean.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwODoyMjoyNVrOG-tbqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwMDowMjoxOFrOG_NO8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQwOTI1Ng==", "bodyText": "So wouldn't this then modify the model returned from the existing search API? Do we need it here, or can we leave it just in the SearchResultItem on the scala side?", "url": "https://github.com/openequella/openEQUELLA/pull/2168#discussion_r468409256", "createdAt": "2020-08-11T08:22:25Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.base/src/com/tle/web/api/item/interfaces/beans/ItemBean.java", "diffHunk": "@@ -194,4 +195,12 @@ public ItemExportBean getExportDetails() {\n   public void setExportDetails(ItemExportBean exportDetails) {\n     this.exportDetails = exportDetails;\n   }\n+\n+  public boolean isKeyWordFoundInAttachment() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fce5858846ebbdb463d5fbaf026262262dc7ad26"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYyNDM5Mg==", "bodyText": "More generally, this seems to be representing the source of where the match was found.\nWould it make sense to have it be a set of enumerables? To allows for the possibilities of more than one source and future search sources.", "url": "https://github.com/openequella/openEQUELLA/pull/2168#discussion_r468624392", "createdAt": "2020-08-11T14:27:12Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.base/src/com/tle/web/api/item/interfaces/beans/ItemBean.java", "diffHunk": "@@ -194,4 +195,12 @@ public ItemExportBean getExportDetails() {\n   public void setExportDetails(ItemExportBean exportDetails) {\n     this.exportDetails = exportDetails;\n   }\n+\n+  public boolean isKeyWordFoundInAttachment() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQwOTI1Ng=="}, "originalCommit": {"oid": "fce5858846ebbdb463d5fbaf026262262dc7ad26"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkzMDI5MA==", "bodyText": "So wouldn't this then modify the model returned from the existing search API? Do we need it here, or can we leave it just in the SearchResultItem on the scala side?\n\nYeah, you raise a very valid point. I believe I can come up with a solution that does not modify the ItemBean", "url": "https://github.com/openequella/openEQUELLA/pull/2168#discussion_r468930290", "createdAt": "2020-08-12T00:02:18Z", "author": {"login": "mrblippy"}, "path": "Source/Plugins/Core/com.equella.base/src/com/tle/web/api/item/interfaces/beans/ItemBean.java", "diffHunk": "@@ -194,4 +195,12 @@ public ItemExportBean getExportDetails() {\n   public void setExportDetails(ItemExportBean exportDetails) {\n     this.exportDetails = exportDetails;\n   }\n+\n+  public boolean isKeyWordFoundInAttachment() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQwOTI1Ng=="}, "originalCommit": {"oid": "fce5858846ebbdb463d5fbaf026262262dc7ad26"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTk3MDEzOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/services/item/StdFreetextResults.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwMDowNzo0MVrOG_NU5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwMDowNzo0MVrOG_NU5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkzMTgxNQ==", "bodyText": "Because there is so much confusion in this class, I also suggest we put some comments here to explain why we added this new method and why the one in TopicDisplaySection.java returns null.", "url": "https://github.com/openequella/openEQUELLA/pull/2168#discussion_r468931815", "createdAt": "2020-08-12T00:07:41Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/services/item/StdFreetextResults.java", "diffHunk": "@@ -63,6 +67,11 @@ public ItemKey getItemKey(int index) {\n     return results.getResults().get(index).getItemKey();\n   }\n \n+  @Override\n+  public List<T> getSearchResults() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fce5858846ebbdb463d5fbaf026262262dc7ad26"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDQ0ODMyOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/search/SearchResource.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNDo0ODo1OFrOG_RrAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNDo0ODo1OFrOG_RrAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwMzAwOQ==", "bodyText": "object SearchItem {\n  def apply(item: FreetextResult, serializer: ItemSerializerItemBean) : SearchItem = {\n            val keywordFoundInAttachment = item.isKeywordFoundInAttachment\n            val itemId                   = item.getItemIdKey\n            val itemBean                 = new EquellaItemBean\n            itemBean.setUuid(itemId.getUuid)\n            itemBean.setVersion(itemId.getVersion)\n            serializer.writeItemBeanResult(itemBean, itemId.getKey)\n            LegacyGuice.itemLinkService.addLinks(itemBean)\n            itemId -> itemBean\n            SearchItem(itemId, itemBean, keywordFoundInAttachment)\n  }\n}\nI suggest we add a company object for this case class and then add a apply function.", "url": "https://github.com/openequella/openEQUELLA/pull/2168#discussion_r469003009", "createdAt": "2020-08-12T04:48:58Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/search/SearchResource.scala", "diffHunk": "@@ -51,22 +50,32 @@ class SearchResource {\n       item.getItemIdKey\n     }\n     val serializer = createSerializer(itemIds.toList)\n-    val items = for { resultData <- searchResults.getSearchResults.asScala } yield {\n-      val keyFound = resultData.isKeywordFoundInAttachment\n-      val itemId   = resultData.getItemIdKey\n-      val itemBean = new EquellaItemBean\n-      itemBean.setKeyWordFoundInAttachment(keyFound)\n-      itemBean.setUuid(itemId.getUuid)\n-      itemBean.setVersion(itemId.getVersion)\n-      serializer.writeItemBeanResult(itemBean, itemId.getKey)\n-      LegacyGuice.itemLinkService.addLinks(itemBean)\n-      itemId -> itemBean\n+    val items: List[SearchItem] = {\n+      val items = for { resultData <- searchResults.getSearchResults.asScala } yield {\n+        val keywordFoundInAttachment = resultData.isKeywordFoundInAttachment\n+        val itemId                   = resultData.getItemIdKey\n+        val itemBean                 = new EquellaItemBean\n+        itemBean.setUuid(itemId.getUuid)\n+        itemBean.setVersion(itemId.getVersion)\n+        serializer.writeItemBeanResult(itemBean, itemId.getKey)\n+        LegacyGuice.itemLinkService.addLinks(itemBean)\n+        itemId -> itemBean\n+        SearchItem(itemId, itemBean, keywordFoundInAttachment)\n+      }\n+      items.toList\n     }\n-\n     val result = SearchResult(searchResults.getOffset,\n                               searchResults.getCount,\n                               searchResults.getAvailable,\n-                              items.toList.map(convertToItem))\n+                              items.map(convertToItem))\n     Response.ok.entity(result).build()\n   }\n }\n+\n+/**\n+  * This class provides general information of an Item to be used inside a SearchResult.\n+  * @param idKey\n+  * @param bean An EquellaItemBean\n+  * @param keywordFound Indicates if a search term has been found inside attachment content\n+  */\n+case class SearchItem(idKey: ItemIdKey, bean: EquellaItemBean, keywordFound: Boolean)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9b05690559e7eb429b02c1d6ce7bfadb1f1e305"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDQ2MTIxOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/search/SearchResource.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNDo1Njo0N1rOG_RylQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNDo1Njo0N1rOG_RylQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwNDk0OQ==", "bodyText": "We can simplify this function by doing this.\n    val freetextResults = searchResults.getSearchResults.asScala.toList\n    val itemIds = freetextResults.map(_.getItemIdKey)\n    val serializer = createSerializer(itemIds)\n    val items : List[SearchItem] = freetextResults.map(result => SearchItem(result, serializer))", "url": "https://github.com/openequella/openEQUELLA/pull/2168#discussion_r469004949", "createdAt": "2020-08-12T04:56:47Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/search/SearchResource.scala", "diffHunk": "@@ -51,22 +50,32 @@ class SearchResource {\n       item.getItemIdKey\n     }\n     val serializer = createSerializer(itemIds.toList)\n-    val items = for { resultData <- searchResults.getSearchResults.asScala } yield {\n-      val keyFound = resultData.isKeywordFoundInAttachment\n-      val itemId   = resultData.getItemIdKey\n-      val itemBean = new EquellaItemBean\n-      itemBean.setKeyWordFoundInAttachment(keyFound)\n-      itemBean.setUuid(itemId.getUuid)\n-      itemBean.setVersion(itemId.getVersion)\n-      serializer.writeItemBeanResult(itemBean, itemId.getKey)\n-      LegacyGuice.itemLinkService.addLinks(itemBean)\n-      itemId -> itemBean\n+    val items: List[SearchItem] = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9b05690559e7eb429b02c1d6ce7bfadb1f1e305"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDkyMTk5OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.base/src/com/tle/web/api/item/interfaces/beans/ItemBean.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzo1NjoxOFrOG_WDxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMTowNTozNlrOG_4TRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA3NDg4Nw==", "bodyText": "I must be missing something. But... Where is this now set? (I only see it being read.)", "url": "https://github.com/openequella/openEQUELLA/pull/2168#discussion_r469074887", "createdAt": "2020-08-12T07:56:18Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.base/src/com/tle/web/api/item/interfaces/beans/ItemBean.java", "diffHunk": "@@ -47,6 +47,7 @@\n   private List<AttachmentBean> attachments;\n   private NavigationTreeBean navigation;\n   private DrmBean drm;\n+  private boolean isKeyWordFoundInAttachment;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "210e86b10193af77aa22f028f8896951e9b0bc32"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYzNTkxMA==", "bodyText": "Yeah, this is now unused. And I should remove it", "url": "https://github.com/openequella/openEQUELLA/pull/2168#discussion_r469635910", "createdAt": "2020-08-13T01:05:36Z", "author": {"login": "mrblippy"}, "path": "Source/Plugins/Core/com.equella.base/src/com/tle/web/api/item/interfaces/beans/ItemBean.java", "diffHunk": "@@ -47,6 +47,7 @@\n   private List<AttachmentBean> attachments;\n   private NavigationTreeBean navigation;\n   private DrmBean drm;\n+  private boolean isKeyWordFoundInAttachment;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA3NDg4Nw=="}, "originalCommit": {"oid": "210e86b10193af77aa22f028f8896951e9b0bc32"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTE5NDA5OnYy", "diffSide": "RIGHT", "path": "autotest/OldTests/src/test/java/io/github/openequella/rest/Search2ApiTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMToyMDowN1rOHAkf8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMToyMDowN1rOHAkf8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM2MDA0OQ==", "bodyText": "As discussed, let's add a comment to further explain what's going on here - i.e. using the same item, but now searching for a value in the item vs the attachment.", "url": "https://github.com/openequella/openEQUELLA/pull/2168#discussion_r470360049", "createdAt": "2020-08-14T01:20:07Z", "author": {"login": "edalex-ian"}, "path": "autotest/OldTests/src/test/java/io/github/openequella/rest/Search2ApiTest.java", "diffHunk": "@@ -75,6 +75,21 @@ public void startLengthTest() throws IOException {\n     assertEquals(result.get(\"results\").size(), 2);\n   }\n \n+  @Test(description = \"Search for a term that is found inside an attachment\")\n+  public void termFoundInAttachmentTest() throws IOException {\n+    JsonNode itemResult = doSearch(200, new NameValuePair(\"query\", \"frogs\")).get(\"results\").get(0);\n+    assertEquals(itemResult.get(\"keywordFoundInAttachment\").asBoolean(), true);\n+  }\n+\n+  @Test(description = \"Search for a term that is not found inside an attachment\")\n+  public void noTermFoundInAttachmentTest() throws IOException {\n+    JsonNode itemResult =\n+        doSearch(200, new NameValuePair(\"query\", \"Keyword found in attachment test item\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8770f34c73ca60acfb21d5f05583b14c6a2678ba"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1217, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}