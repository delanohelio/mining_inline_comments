{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2MjgzNzQ0", "number": 2280, "title": "Bugfix/custom typescript language string not working", "bodyText": "Checklist\n\n the [contributor license agreement][] is signed\n commit message follows [commit guidelines][]\n tests are included\n screenshots are included showing significant UI changes\n documentation is changed or added\n\nDescription of change\nThis PR aims to fix the problem that custom New UI language strings provided in newui.properties do not get properly used. The apporach is to override values of object languageStrings defined in langstrings.ts.\nAnother issue we found is although we have overridden languageStrings, some pages still show their default strings. This is because the object referencing their strings is declared in their modules\nand instantiated when index.tsx is importing modules which occurs before custom strings are initialised. One example is the Cloud provder page. As a result, we refactored index.tsx so that it will lazy import modules.\nAnd lastly, we moved the core implementation of index.tsx to a new file named App.tsx. I guess this way better follows react file structure rules.", "createdAt": "2020-09-14T02:08:32Z", "url": "https://github.com/openequella/openEQUELLA/pull/2280", "merged": true, "mergeCommit": {"oid": "28bab24797351403a78c2e2f0b7a81858250fbb6"}, "closed": true, "closedAt": "2020-09-17T03:09:57Z", "author": {"login": "PenghaiZhang"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdIoxJlgH2gAyNDg2MjgzNzQ0OjZmOTNlZjIxNGQ0OGYwZDYwYTBjMzk5YjkzY2JiOTQ4OTY3ODUwOGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJmjPHAFqTQ5MDE3OTExMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6f93ef214d48f0d60a0c399b93cbb9489678508d", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/6f93ef214d48f0d60a0c399b93cbb9489678508d", "committedDate": "2020-09-14T01:18:31Z", "message": "Override existing language strings if custom strings are\nprovided."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09c724fbd3197e89f7d0cd96fb911301eb3f93d0", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/09c724fbd3197e89f7d0cd96fb911301eb3f93d0", "committedDate": "2020-09-14T01:26:39Z", "message": "Simplify the react entry file('index.tsx)', including:\n1. Move the core implementation to 'App.tsx';\n2. Lazily import 'App.tsx' to ensure language strings are\n   properly initialised before importing."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3Mzc2ODk0", "url": "https://github.com/openequella/openEQUELLA/pull/2280#pullrequestreview-487376894", "createdAt": "2020-09-14T02:17:37Z", "commit": {"oid": "09c724fbd3197e89f7d0cd96fb911301eb3f93d0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwMjoxNzozOFrOHRB0sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwMjoxNzozOFrOHRB0sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYxNzcxMg==", "bodyText": "The real changes of this file are  AppProps and App.", "url": "https://github.com/openequella/openEQUELLA/pull/2280#discussion_r487617712", "createdAt": "2020-09-14T02:17:38Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/mainui/App.tsx", "diffHunk": "@@ -0,0 +1,264 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import { ThemeProvider } from \"@material-ui/core\";\n+import { oeqTheme } from \"../theme\";\n+import * as React from \"react\";\n+import { getCurrentUser, UserData } from \"../api/currentuser\";\n+import { ErrorResponse } from \"../api/errors\";\n+import {\n+  LegacyContent,\n+  LegacyContentProps,\n+  PageContent,\n+} from \"../legacycontent/LegacyContent\";\n+import { Template, TemplateProps, TemplateUpdate } from \"./Template\";\n+import { defaultNavMessage, NavAwayDialog } from \"./PreventNavigation\";\n+import { shallowEqual } from \"shallow-equal-object\";\n+import { OEQRoute, OEQRouteComponentProps, routes } from \"./routes\";\n+import {\n+  Prompt,\n+  Redirect,\n+  Route,\n+  RouteComponentProps,\n+  Switch,\n+} from \"react-router\";\n+import ErrorPage from \"./ErrorPage\";\n+import { LegacyPage, templatePropsForLegacy } from \"./LegacyPage\";\n+import { BrowserRouter } from \"react-router-dom\";\n+import { LegacyForm } from \"../legacycontent/LegacyForm\";\n+import HtmlParser from \"react-html-parser\";\n+import SettingsPage from \"../settings/SettingsPage\";\n+import { startHeartbeat } from \"../util/heartbeat\";\n+\n+const beforeunload = function (e: Event) {\n+  e.returnValue = (\"Are you sure?\" as unknown) as boolean;\n+  return \"Are you sure?\";\n+};\n+\n+const baseFullPath = new URL(document.head.getElementsByTagName(\"base\")[0].href)\n+  .pathname;\n+export const basePath = baseFullPath.substr(0, baseFullPath.length - 1);\n+\n+function IndexPage() {\n+  const [currentUser, setCurrentUser] = React.useState<UserData>();\n+  const [fullPageError, setFullPageError] = React.useState<ErrorResponse>();\n+  const errorShowing = React.useRef(false);\n+\n+  const refreshUser = React.useCallback(() => {\n+    getCurrentUser().then(setCurrentUser);\n+  }, []);\n+\n+  React.useEffect(() => refreshUser(), []);\n+\n+  const [navAwayCallback, setNavAwayCallback] = React.useState<{\n+    message: string;\n+    cb: (confirm: boolean) => void;\n+  }>();\n+\n+  const [preventNavMessage, setPreventNavMessage] = React.useState<string>();\n+  const [legacyContentProps, setLegacyContentProps] = React.useState<\n+    LegacyContentProps\n+  >({\n+    enabled: false,\n+    pathname: \"\",\n+    search: \"\",\n+    locationKey: \"\",\n+    userUpdated: refreshUser,\n+    redirected: () => {},\n+    onError: () => {},\n+    render: () => <div />,\n+  });\n+\n+  const [templateProps, setTemplateProps] = React.useState({\n+    title: \"\",\n+    fullscreenMode: \"YES\",\n+    children: [],\n+  } as TemplateProps);\n+\n+  const setPreventNavigation = React.useCallback(\n+    (prevent) => {\n+      const message = prevent ? defaultNavMessage() : undefined;\n+      if (message) {\n+        window.addEventListener(\"beforeunload\", beforeunload, false);\n+      } else {\n+        window.removeEventListener(\"beforeunload\", beforeunload, false);\n+      }\n+      setPreventNavMessage(message);\n+    },\n+    [setPreventNavMessage]\n+  );\n+\n+  const nonBlankNavMsg = preventNavMessage ? preventNavMessage : \"\";\n+\n+  const updateTemplate = React.useCallback((edit: TemplateUpdate) => {\n+    setTemplateProps((tp) => {\n+      const edited = edit(tp);\n+      return shallowEqual(edited, tp) ? tp : edited;\n+    });\n+  }, []);\n+  const oeqRoutes: { [key: string]: OEQRoute } = routes;\n+\n+  function mkRouteProps(p: RouteComponentProps<any>): OEQRouteComponentProps {\n+    return {\n+      ...p,\n+      updateTemplate,\n+      refreshUser,\n+      redirect: p.history.push,\n+      setPreventNavigation,\n+    };\n+  }\n+\n+  const newUIRoutes = React.useMemo(() => {\n+    return Object.keys(oeqRoutes).map((key, ind) => {\n+      const oeqRoute = oeqRoutes[key];\n+      return (\n+        (oeqRoute.component || oeqRoute.render) && (\n+          <Route\n+            key={ind}\n+            exact={oeqRoute.exact}\n+            path={oeqRoute.path}\n+            render={(p) => {\n+              const oeqProps = mkRouteProps(p);\n+              if (oeqRoute.component) {\n+                return <oeqRoute.component {...oeqProps} />;\n+              }\n+              return oeqRoute.render?.(oeqProps);\n+            }}\n+          />\n+        )\n+      );\n+    });\n+  }, [refreshUser]);\n+\n+  const errorCallback = React.useCallback((err) => {\n+    errorShowing.current = true;\n+    setTemplateProps((p) => ({ ...p, fullscreenMode: undefined }));\n+    setFullPageError(err);\n+  }, []);\n+\n+  function routeSwitch(content?: PageContent) {\n+    return (\n+      <Switch>\n+        {fullPageError && (\n+          <Route>\n+            <ErrorPage error={fullPageError} />\n+          </Route>\n+        )}\n+        <Route path=\"/\" exact>\n+          <Redirect to=\"/home.do\" />\n+        </Route>\n+        {newUIRoutes}\n+        <Route\n+          render={(p) => (\n+            <LegacyPage\n+              {...mkRouteProps(p)}\n+              errorCallback={errorCallback}\n+              legacyContent={{ content, setLegacyContentProps }}\n+            />\n+          )}\n+        />\n+      </Switch>\n+    );\n+  }\n+\n+  return (\n+    <BrowserRouter\n+      basename={basePath}\n+      getUserConfirmation={(message, cb) => {\n+        if (errorShowing.current) {\n+          errorShowing.current = false;\n+          setFullPageError(undefined);\n+          cb(true);\n+        } else {\n+          setNavAwayCallback({ message, cb });\n+        }\n+      }}\n+    >\n+      <Prompt\n+        when={Boolean(preventNavMessage) || errorShowing.current}\n+        message={nonBlankNavMsg}\n+      />\n+      <NavAwayDialog\n+        open={Boolean(navAwayCallback)}\n+        message={nonBlankNavMsg}\n+        navigateConfirm={(confirm) => {\n+          if (navAwayCallback) navAwayCallback.cb(confirm);\n+          if (confirm) setPreventNavMessage(undefined);\n+          setNavAwayCallback(undefined);\n+        }}\n+      />\n+      <LegacyContent\n+        {...legacyContentProps}\n+        render={(content) => {\n+          const tp = content\n+            ? templatePropsForLegacy(content)\n+            : {\n+                ...templateProps,\n+                fullscreenMode: legacyContentProps.enabled\n+                  ? templateProps.fullscreenMode\n+                  : undefined,\n+              };\n+          const withErr = fullPageError\n+            ? { ...tp, title: fullPageError.error, fullscreenMode: undefined }\n+            : tp;\n+          const template = (\n+            <Template {...withErr} currentUser={currentUser}>\n+              {routeSwitch(content)}\n+            </Template>\n+          );\n+          const render = () => {\n+            if (!content || content.noForm) {\n+              return template;\n+            } else {\n+              const { form } = content.html;\n+              return (\n+                <>\n+                  <LegacyForm state={content.state}>{template}</LegacyForm>\n+                  {form && HtmlParser(form)}\n+                </>\n+              );\n+            }\n+          };\n+          return render();\n+        }}\n+      />\n+    </BrowserRouter>\n+  );\n+}\n+interface AppProps {\n+  legacySettingsMode: boolean;\n+}\n+export const App = ({ legacySettingsMode }: AppProps) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09c724fbd3197e89f7d0cd96fb911301eb3f93d0"}, "originalPosition": 245}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NDA3NjAx", "url": "https://github.com/openequella/openEQUELLA/pull/2280#pullrequestreview-487407601", "createdAt": "2020-09-14T04:27:49Z", "commit": {"oid": "09c724fbd3197e89f7d0cd96fb911301eb3f93d0"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNDoyNzo0OVrOHRDe4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNDozNTo0OVrOHRDlsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY0NDg5Ng==", "bodyText": "Using the BeforeUnloadEvent should remove the need for casing string to boolean.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            const beforeunload = function (e: Event) {\n          \n          \n            \n              e.returnValue = (\"Are you sure?\" as unknown) as boolean;\n          \n          \n            \n            const beforeunload = function (e: BeforeUnloadEvent) {\n          \n          \n            \n              e.returnValue = \"Are you sure?\";", "url": "https://github.com/openequella/openEQUELLA/pull/2280#discussion_r487644896", "createdAt": "2020-09-14T04:27:49Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/mainui/App.tsx", "diffHunk": "@@ -0,0 +1,264 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import { ThemeProvider } from \"@material-ui/core\";\n+import { oeqTheme } from \"../theme\";\n+import * as React from \"react\";\n+import { getCurrentUser, UserData } from \"../api/currentuser\";\n+import { ErrorResponse } from \"../api/errors\";\n+import {\n+  LegacyContent,\n+  LegacyContentProps,\n+  PageContent,\n+} from \"../legacycontent/LegacyContent\";\n+import { Template, TemplateProps, TemplateUpdate } from \"./Template\";\n+import { defaultNavMessage, NavAwayDialog } from \"./PreventNavigation\";\n+import { shallowEqual } from \"shallow-equal-object\";\n+import { OEQRoute, OEQRouteComponentProps, routes } from \"./routes\";\n+import {\n+  Prompt,\n+  Redirect,\n+  Route,\n+  RouteComponentProps,\n+  Switch,\n+} from \"react-router\";\n+import ErrorPage from \"./ErrorPage\";\n+import { LegacyPage, templatePropsForLegacy } from \"./LegacyPage\";\n+import { BrowserRouter } from \"react-router-dom\";\n+import { LegacyForm } from \"../legacycontent/LegacyForm\";\n+import HtmlParser from \"react-html-parser\";\n+import SettingsPage from \"../settings/SettingsPage\";\n+import { startHeartbeat } from \"../util/heartbeat\";\n+\n+const beforeunload = function (e: Event) {\n+  e.returnValue = (\"Are you sure?\" as unknown) as boolean;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09c724fbd3197e89f7d0cd96fb911301eb3f93d0"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY0NTI4Mw==", "bodyText": "for consistency with typed useState calls\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              const [templateProps, setTemplateProps] = React.useState({\n          \n          \n            \n                title: \"\",\n          \n          \n            \n                fullscreenMode: \"YES\",\n          \n          \n            \n                children: [],\n          \n          \n            \n              } as TemplateProps);\n          \n          \n            \n              const [templateProps, setTemplateProps] = React.useState<TemplateProps>({\n          \n          \n            \n                title: \"\",\n          \n          \n            \n                fullscreenMode: \"YES\",\n          \n          \n            \n                children: [],\n          \n          \n            \n              });", "url": "https://github.com/openequella/openEQUELLA/pull/2280#discussion_r487645283", "createdAt": "2020-09-14T04:29:31Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/mainui/App.tsx", "diffHunk": "@@ -0,0 +1,264 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import { ThemeProvider } from \"@material-ui/core\";\n+import { oeqTheme } from \"../theme\";\n+import * as React from \"react\";\n+import { getCurrentUser, UserData } from \"../api/currentuser\";\n+import { ErrorResponse } from \"../api/errors\";\n+import {\n+  LegacyContent,\n+  LegacyContentProps,\n+  PageContent,\n+} from \"../legacycontent/LegacyContent\";\n+import { Template, TemplateProps, TemplateUpdate } from \"./Template\";\n+import { defaultNavMessage, NavAwayDialog } from \"./PreventNavigation\";\n+import { shallowEqual } from \"shallow-equal-object\";\n+import { OEQRoute, OEQRouteComponentProps, routes } from \"./routes\";\n+import {\n+  Prompt,\n+  Redirect,\n+  Route,\n+  RouteComponentProps,\n+  Switch,\n+} from \"react-router\";\n+import ErrorPage from \"./ErrorPage\";\n+import { LegacyPage, templatePropsForLegacy } from \"./LegacyPage\";\n+import { BrowserRouter } from \"react-router-dom\";\n+import { LegacyForm } from \"../legacycontent/LegacyForm\";\n+import HtmlParser from \"react-html-parser\";\n+import SettingsPage from \"../settings/SettingsPage\";\n+import { startHeartbeat } from \"../util/heartbeat\";\n+\n+const beforeunload = function (e: Event) {\n+  e.returnValue = (\"Are you sure?\" as unknown) as boolean;\n+  return \"Are you sure?\";\n+};\n+\n+const baseFullPath = new URL(document.head.getElementsByTagName(\"base\")[0].href)\n+  .pathname;\n+export const basePath = baseFullPath.substr(0, baseFullPath.length - 1);\n+\n+function IndexPage() {\n+  const [currentUser, setCurrentUser] = React.useState<UserData>();\n+  const [fullPageError, setFullPageError] = React.useState<ErrorResponse>();\n+  const errorShowing = React.useRef(false);\n+\n+  const refreshUser = React.useCallback(() => {\n+    getCurrentUser().then(setCurrentUser);\n+  }, []);\n+\n+  React.useEffect(() => refreshUser(), []);\n+\n+  const [navAwayCallback, setNavAwayCallback] = React.useState<{\n+    message: string;\n+    cb: (confirm: boolean) => void;\n+  }>();\n+\n+  const [preventNavMessage, setPreventNavMessage] = React.useState<string>();\n+  const [legacyContentProps, setLegacyContentProps] = React.useState<\n+    LegacyContentProps\n+  >({\n+    enabled: false,\n+    pathname: \"\",\n+    search: \"\",\n+    locationKey: \"\",\n+    userUpdated: refreshUser,\n+    redirected: () => {},\n+    onError: () => {},\n+    render: () => <div />,\n+  });\n+\n+  const [templateProps, setTemplateProps] = React.useState({\n+    title: \"\",\n+    fullscreenMode: \"YES\",\n+    children: [],\n+  } as TemplateProps);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09c724fbd3197e89f7d0cd96fb911301eb3f93d0"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY0NTg0Ng==", "bodyText": "Msg is spelled out as Message elsewhere in the file, it may be good to make it consistent\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              const nonBlankNavMsg = preventNavMessage ? preventNavMessage : \"\";\n          \n          \n            \n              const nonBlankNavMessage = preventNavMessage ? preventNavMessage : \"\";", "url": "https://github.com/openequella/openEQUELLA/pull/2280#discussion_r487645846", "createdAt": "2020-09-14T04:32:00Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/mainui/App.tsx", "diffHunk": "@@ -0,0 +1,264 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import { ThemeProvider } from \"@material-ui/core\";\n+import { oeqTheme } from \"../theme\";\n+import * as React from \"react\";\n+import { getCurrentUser, UserData } from \"../api/currentuser\";\n+import { ErrorResponse } from \"../api/errors\";\n+import {\n+  LegacyContent,\n+  LegacyContentProps,\n+  PageContent,\n+} from \"../legacycontent/LegacyContent\";\n+import { Template, TemplateProps, TemplateUpdate } from \"./Template\";\n+import { defaultNavMessage, NavAwayDialog } from \"./PreventNavigation\";\n+import { shallowEqual } from \"shallow-equal-object\";\n+import { OEQRoute, OEQRouteComponentProps, routes } from \"./routes\";\n+import {\n+  Prompt,\n+  Redirect,\n+  Route,\n+  RouteComponentProps,\n+  Switch,\n+} from \"react-router\";\n+import ErrorPage from \"./ErrorPage\";\n+import { LegacyPage, templatePropsForLegacy } from \"./LegacyPage\";\n+import { BrowserRouter } from \"react-router-dom\";\n+import { LegacyForm } from \"../legacycontent/LegacyForm\";\n+import HtmlParser from \"react-html-parser\";\n+import SettingsPage from \"../settings/SettingsPage\";\n+import { startHeartbeat } from \"../util/heartbeat\";\n+\n+const beforeunload = function (e: Event) {\n+  e.returnValue = (\"Are you sure?\" as unknown) as boolean;\n+  return \"Are you sure?\";\n+};\n+\n+const baseFullPath = new URL(document.head.getElementsByTagName(\"base\")[0].href)\n+  .pathname;\n+export const basePath = baseFullPath.substr(0, baseFullPath.length - 1);\n+\n+function IndexPage() {\n+  const [currentUser, setCurrentUser] = React.useState<UserData>();\n+  const [fullPageError, setFullPageError] = React.useState<ErrorResponse>();\n+  const errorShowing = React.useRef(false);\n+\n+  const refreshUser = React.useCallback(() => {\n+    getCurrentUser().then(setCurrentUser);\n+  }, []);\n+\n+  React.useEffect(() => refreshUser(), []);\n+\n+  const [navAwayCallback, setNavAwayCallback] = React.useState<{\n+    message: string;\n+    cb: (confirm: boolean) => void;\n+  }>();\n+\n+  const [preventNavMessage, setPreventNavMessage] = React.useState<string>();\n+  const [legacyContentProps, setLegacyContentProps] = React.useState<\n+    LegacyContentProps\n+  >({\n+    enabled: false,\n+    pathname: \"\",\n+    search: \"\",\n+    locationKey: \"\",\n+    userUpdated: refreshUser,\n+    redirected: () => {},\n+    onError: () => {},\n+    render: () => <div />,\n+  });\n+\n+  const [templateProps, setTemplateProps] = React.useState({\n+    title: \"\",\n+    fullscreenMode: \"YES\",\n+    children: [],\n+  } as TemplateProps);\n+\n+  const setPreventNavigation = React.useCallback(\n+    (prevent) => {\n+      const message = prevent ? defaultNavMessage() : undefined;\n+      if (message) {\n+        window.addEventListener(\"beforeunload\", beforeunload, false);\n+      } else {\n+        window.removeEventListener(\"beforeunload\", beforeunload, false);\n+      }\n+      setPreventNavMessage(message);\n+    },\n+    [setPreventNavMessage]\n+  );\n+\n+  const nonBlankNavMsg = preventNavMessage ? preventNavMessage : \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09c724fbd3197e89f7d0cd96fb911301eb3f93d0"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY0NjE2Mg==", "bodyText": "\ud83e\udd14 this may could problems when synced with develop branch which has removed most any types and lint checks for them", "url": "https://github.com/openequella/openEQUELLA/pull/2280#discussion_r487646162", "createdAt": "2020-09-14T04:33:34Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/mainui/App.tsx", "diffHunk": "@@ -0,0 +1,264 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import { ThemeProvider } from \"@material-ui/core\";\n+import { oeqTheme } from \"../theme\";\n+import * as React from \"react\";\n+import { getCurrentUser, UserData } from \"../api/currentuser\";\n+import { ErrorResponse } from \"../api/errors\";\n+import {\n+  LegacyContent,\n+  LegacyContentProps,\n+  PageContent,\n+} from \"../legacycontent/LegacyContent\";\n+import { Template, TemplateProps, TemplateUpdate } from \"./Template\";\n+import { defaultNavMessage, NavAwayDialog } from \"./PreventNavigation\";\n+import { shallowEqual } from \"shallow-equal-object\";\n+import { OEQRoute, OEQRouteComponentProps, routes } from \"./routes\";\n+import {\n+  Prompt,\n+  Redirect,\n+  Route,\n+  RouteComponentProps,\n+  Switch,\n+} from \"react-router\";\n+import ErrorPage from \"./ErrorPage\";\n+import { LegacyPage, templatePropsForLegacy } from \"./LegacyPage\";\n+import { BrowserRouter } from \"react-router-dom\";\n+import { LegacyForm } from \"../legacycontent/LegacyForm\";\n+import HtmlParser from \"react-html-parser\";\n+import SettingsPage from \"../settings/SettingsPage\";\n+import { startHeartbeat } from \"../util/heartbeat\";\n+\n+const beforeunload = function (e: Event) {\n+  e.returnValue = (\"Are you sure?\" as unknown) as boolean;\n+  return \"Are you sure?\";\n+};\n+\n+const baseFullPath = new URL(document.head.getElementsByTagName(\"base\")[0].href)\n+  .pathname;\n+export const basePath = baseFullPath.substr(0, baseFullPath.length - 1);\n+\n+function IndexPage() {\n+  const [currentUser, setCurrentUser] = React.useState<UserData>();\n+  const [fullPageError, setFullPageError] = React.useState<ErrorResponse>();\n+  const errorShowing = React.useRef(false);\n+\n+  const refreshUser = React.useCallback(() => {\n+    getCurrentUser().then(setCurrentUser);\n+  }, []);\n+\n+  React.useEffect(() => refreshUser(), []);\n+\n+  const [navAwayCallback, setNavAwayCallback] = React.useState<{\n+    message: string;\n+    cb: (confirm: boolean) => void;\n+  }>();\n+\n+  const [preventNavMessage, setPreventNavMessage] = React.useState<string>();\n+  const [legacyContentProps, setLegacyContentProps] = React.useState<\n+    LegacyContentProps\n+  >({\n+    enabled: false,\n+    pathname: \"\",\n+    search: \"\",\n+    locationKey: \"\",\n+    userUpdated: refreshUser,\n+    redirected: () => {},\n+    onError: () => {},\n+    render: () => <div />,\n+  });\n+\n+  const [templateProps, setTemplateProps] = React.useState({\n+    title: \"\",\n+    fullscreenMode: \"YES\",\n+    children: [],\n+  } as TemplateProps);\n+\n+  const setPreventNavigation = React.useCallback(\n+    (prevent) => {\n+      const message = prevent ? defaultNavMessage() : undefined;\n+      if (message) {\n+        window.addEventListener(\"beforeunload\", beforeunload, false);\n+      } else {\n+        window.removeEventListener(\"beforeunload\", beforeunload, false);\n+      }\n+      setPreventNavMessage(message);\n+    },\n+    [setPreventNavMessage]\n+  );\n+\n+  const nonBlankNavMsg = preventNavMessage ? preventNavMessage : \"\";\n+\n+  const updateTemplate = React.useCallback((edit: TemplateUpdate) => {\n+    setTemplateProps((tp) => {\n+      const edited = edit(tp);\n+      return shallowEqual(edited, tp) ? tp : edited;\n+    });\n+  }, []);\n+  const oeqRoutes: { [key: string]: OEQRoute } = routes;\n+\n+  function mkRouteProps(p: RouteComponentProps<any>): OEQRouteComponentProps {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09c724fbd3197e89f7d0cd96fb911301eb3f93d0"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY0NjY0MQ==", "bodyText": "No fallback content?\nWould it have value to show something, even the text loading?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <React.Suspense fallback={null}>\n          \n          \n            \n                <React.Suspense fallback={<>loading</>}>", "url": "https://github.com/openequella/openEQUELLA/pull/2280#discussion_r487646641", "createdAt": "2020-09-14T04:35:49Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/mainui/index.tsx", "diffHunk": "@@ -58,216 +27,15 @@ declare const renderData:\n     }\n   | undefined;\n \n-const beforeunload = function (e: Event) {\n-  e.returnValue = (\"Are you sure?\" as unknown) as boolean;\n-  return \"Are you sure?\";\n-};\n-\n-function IndexPage() {\n-  const [currentUser, setCurrentUser] = React.useState<UserData>();\n-  const [fullPageError, setFullPageError] = React.useState<ErrorResponse>();\n-  const errorShowing = React.useRef(false);\n-\n-  const refreshUser = React.useCallback(() => {\n-    getCurrentUser().then(setCurrentUser);\n-  }, []);\n-\n-  React.useEffect(() => refreshUser(), []);\n-\n-  const [navAwayCallback, setNavAwayCallback] = React.useState<{\n-    message: string;\n-    cb: (confirm: boolean) => void;\n-  }>();\n-\n-  const [preventNavMessage, setPreventNavMessage] = React.useState<string>();\n-  const [legacyContentProps, setLegacyContentProps] = React.useState<\n-    LegacyContentProps\n-  >({\n-    enabled: false,\n-    pathname: \"\",\n-    search: \"\",\n-    locationKey: \"\",\n-    userUpdated: refreshUser,\n-    redirected: () => {},\n-    onError: () => {},\n-    render: () => <div />,\n-  });\n-\n-  const [templateProps, setTemplateProps] = React.useState({\n-    title: \"\",\n-    fullscreenMode: \"YES\",\n-    children: [],\n-  } as TemplateProps);\n-\n-  const setPreventNavigation = React.useCallback(\n-    (prevent) => {\n-      const message = prevent ? defaultNavMessage() : undefined;\n-      if (message) {\n-        window.addEventListener(\"beforeunload\", beforeunload, false);\n-      } else {\n-        window.removeEventListener(\"beforeunload\", beforeunload, false);\n-      }\n-      setPreventNavMessage(message);\n-    },\n-    [setPreventNavMessage]\n-  );\n-\n-  const nonBlankNavMsg = preventNavMessage ? preventNavMessage : \"\";\n-\n-  const updateTemplate = React.useCallback((edit: TemplateUpdate) => {\n-    setTemplateProps((tp) => {\n-      const edited = edit(tp);\n-      return shallowEqual(edited, tp) ? tp : edited;\n-    });\n-  }, []);\n-  const oeqRoutes: { [key: string]: OEQRoute } = routes;\n-\n-  function mkRouteProps(p: RouteComponentProps<any>): OEQRouteComponentProps {\n-    return {\n-      ...p,\n-      updateTemplate,\n-      refreshUser,\n-      redirect: p.history.push,\n-      setPreventNavigation,\n-    };\n-  }\n-\n-  const newUIRoutes = React.useMemo(() => {\n-    return Object.keys(oeqRoutes).map((key, ind) => {\n-      const oeqRoute = oeqRoutes[key];\n-      return (\n-        (oeqRoute.component || oeqRoute.render) && (\n-          <Route\n-            key={ind}\n-            exact={oeqRoute.exact}\n-            path={oeqRoute.path}\n-            render={(p) => {\n-              const oeqProps = mkRouteProps(p);\n-              if (oeqRoute.component) {\n-                return <oeqRoute.component {...oeqProps} />;\n-              }\n-              return oeqRoute.render?.(oeqProps);\n-            }}\n-          />\n-        )\n-      );\n-    });\n-  }, [refreshUser]);\n-\n-  const errorCallback = React.useCallback((err) => {\n-    errorShowing.current = true;\n-    setTemplateProps((p) => ({ ...p, fullscreenMode: undefined }));\n-    setFullPageError(err);\n-  }, []);\n-\n-  function routeSwitch(content?: PageContent) {\n-    return (\n-      <Switch>\n-        {fullPageError && (\n-          <Route>\n-            <ErrorPage error={fullPageError} />\n-          </Route>\n-        )}\n-        <Route path=\"/\" exact>\n-          <Redirect to=\"/home.do\" />\n-        </Route>\n-        {newUIRoutes}\n-        <Route\n-          render={(p) => (\n-            <LegacyPage\n-              {...mkRouteProps(p)}\n-              errorCallback={errorCallback}\n-              legacyContent={{ content, setLegacyContentProps }}\n-            />\n-          )}\n-        />\n-      </Switch>\n-    );\n-  }\n-\n-  return (\n-    <BrowserRouter\n-      basename={basePath}\n-      getUserConfirmation={(message, cb) => {\n-        if (errorShowing.current) {\n-          errorShowing.current = false;\n-          setFullPageError(undefined);\n-          cb(true);\n-        } else {\n-          setNavAwayCallback({ message, cb });\n-        }\n-      }}\n-    >\n-      <Prompt\n-        when={Boolean(preventNavMessage) || errorShowing.current}\n-        message={nonBlankNavMsg}\n-      />\n-      <NavAwayDialog\n-        open={Boolean(navAwayCallback)}\n-        message={nonBlankNavMsg}\n-        navigateConfirm={(confirm) => {\n-          if (navAwayCallback) navAwayCallback.cb(confirm);\n-          if (confirm) setPreventNavMessage(undefined);\n-          setNavAwayCallback(undefined);\n-        }}\n-      />\n-      <LegacyContent\n-        {...legacyContentProps}\n-        render={(content) => {\n-          const tp = content\n-            ? templatePropsForLegacy(content)\n-            : {\n-                ...templateProps,\n-                fullscreenMode: legacyContentProps.enabled\n-                  ? templateProps.fullscreenMode\n-                  : undefined,\n-              };\n-          const withErr = fullPageError\n-            ? { ...tp, title: fullPageError.error, fullscreenMode: undefined }\n-            : tp;\n-          const template = (\n-            <Template {...withErr} currentUser={currentUser}>\n-              {routeSwitch(content)}\n-            </Template>\n-          );\n-          const render = () => {\n-            if (!content || content.noForm) {\n-              return template;\n-            } else {\n-              const { form } = content.html;\n-              return (\n-                <>\n-                  <LegacyForm state={content.state}>{template}</LegacyForm>\n-                  {form && HtmlParser(form)}\n-                </>\n-              );\n-            }\n-          };\n-          return render();\n-        }}\n-      />\n-    </BrowserRouter>\n-  );\n-}\n+const App = React.lazy(() => import(\"./App\"));\n \n export default function () {\n   initStrings();\n-  if (typeof renderData !== \"undefined\") {\n-    startHeartbeat();\n-    ReactDOM.render(\n-      <ThemeProvider theme={oeqTheme}>\n-        <IndexPage />\n-      </ThemeProvider>,\n-      document.getElementById(\"mainDiv\")\n-    );\n-  } else {\n-    ReactDOM.render(\n-      <BrowserRouter basename={basePath} forceRefresh>\n-        <ThemeProvider theme={oeqTheme}>\n-          <SettingsPage refreshUser={() => {}} updateTemplate={() => {}} />\n-        </ThemeProvider>\n-      </BrowserRouter>,\n-      document.getElementById(\"settingsPage\")\n-    );\n-  }\n+  const legacySettingsMode = typeof renderData === \"undefined\";\n+  ReactDOM.render(\n+    <React.Suspense fallback={null}>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09c724fbd3197e89f7d0cd96fb911301eb3f93d0"}, "originalPosition": 260}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NDA4NTQ3", "url": "https://github.com/openequella/openEQUELLA/pull/2280#pullrequestreview-487408547", "createdAt": "2020-09-14T04:31:21Z", "commit": {"oid": "09c724fbd3197e89f7d0cd96fb911301eb3f93d0"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNDozMToyMVrOHRDiBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNDozMjozMFrOHRDi7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY0NTcwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            interface AppProps {\n          \n          \n            \n            \n          \n          \n            \n            interface AppProps {", "url": "https://github.com/openequella/openEQUELLA/pull/2280#discussion_r487645703", "createdAt": "2020-09-14T04:31:21Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/mainui/App.tsx", "diffHunk": "@@ -0,0 +1,264 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import { ThemeProvider } from \"@material-ui/core\";\n+import { oeqTheme } from \"../theme\";\n+import * as React from \"react\";\n+import { getCurrentUser, UserData } from \"../api/currentuser\";\n+import { ErrorResponse } from \"../api/errors\";\n+import {\n+  LegacyContent,\n+  LegacyContentProps,\n+  PageContent,\n+} from \"../legacycontent/LegacyContent\";\n+import { Template, TemplateProps, TemplateUpdate } from \"./Template\";\n+import { defaultNavMessage, NavAwayDialog } from \"./PreventNavigation\";\n+import { shallowEqual } from \"shallow-equal-object\";\n+import { OEQRoute, OEQRouteComponentProps, routes } from \"./routes\";\n+import {\n+  Prompt,\n+  Redirect,\n+  Route,\n+  RouteComponentProps,\n+  Switch,\n+} from \"react-router\";\n+import ErrorPage from \"./ErrorPage\";\n+import { LegacyPage, templatePropsForLegacy } from \"./LegacyPage\";\n+import { BrowserRouter } from \"react-router-dom\";\n+import { LegacyForm } from \"../legacycontent/LegacyForm\";\n+import HtmlParser from \"react-html-parser\";\n+import SettingsPage from \"../settings/SettingsPage\";\n+import { startHeartbeat } from \"../util/heartbeat\";\n+\n+const beforeunload = function (e: Event) {\n+  e.returnValue = (\"Are you sure?\" as unknown) as boolean;\n+  return \"Are you sure?\";\n+};\n+\n+const baseFullPath = new URL(document.head.getElementsByTagName(\"base\")[0].href)\n+  .pathname;\n+export const basePath = baseFullPath.substr(0, baseFullPath.length - 1);\n+\n+function IndexPage() {\n+  const [currentUser, setCurrentUser] = React.useState<UserData>();\n+  const [fullPageError, setFullPageError] = React.useState<ErrorResponse>();\n+  const errorShowing = React.useRef(false);\n+\n+  const refreshUser = React.useCallback(() => {\n+    getCurrentUser().then(setCurrentUser);\n+  }, []);\n+\n+  React.useEffect(() => refreshUser(), []);\n+\n+  const [navAwayCallback, setNavAwayCallback] = React.useState<{\n+    message: string;\n+    cb: (confirm: boolean) => void;\n+  }>();\n+\n+  const [preventNavMessage, setPreventNavMessage] = React.useState<string>();\n+  const [legacyContentProps, setLegacyContentProps] = React.useState<\n+    LegacyContentProps\n+  >({\n+    enabled: false,\n+    pathname: \"\",\n+    search: \"\",\n+    locationKey: \"\",\n+    userUpdated: refreshUser,\n+    redirected: () => {},\n+    onError: () => {},\n+    render: () => <div />,\n+  });\n+\n+  const [templateProps, setTemplateProps] = React.useState({\n+    title: \"\",\n+    fullscreenMode: \"YES\",\n+    children: [],\n+  } as TemplateProps);\n+\n+  const setPreventNavigation = React.useCallback(\n+    (prevent) => {\n+      const message = prevent ? defaultNavMessage() : undefined;\n+      if (message) {\n+        window.addEventListener(\"beforeunload\", beforeunload, false);\n+      } else {\n+        window.removeEventListener(\"beforeunload\", beforeunload, false);\n+      }\n+      setPreventNavMessage(message);\n+    },\n+    [setPreventNavMessage]\n+  );\n+\n+  const nonBlankNavMsg = preventNavMessage ? preventNavMessage : \"\";\n+\n+  const updateTemplate = React.useCallback((edit: TemplateUpdate) => {\n+    setTemplateProps((tp) => {\n+      const edited = edit(tp);\n+      return shallowEqual(edited, tp) ? tp : edited;\n+    });\n+  }, []);\n+  const oeqRoutes: { [key: string]: OEQRoute } = routes;\n+\n+  function mkRouteProps(p: RouteComponentProps<any>): OEQRouteComponentProps {\n+    return {\n+      ...p,\n+      updateTemplate,\n+      refreshUser,\n+      redirect: p.history.push,\n+      setPreventNavigation,\n+    };\n+  }\n+\n+  const newUIRoutes = React.useMemo(() => {\n+    return Object.keys(oeqRoutes).map((key, ind) => {\n+      const oeqRoute = oeqRoutes[key];\n+      return (\n+        (oeqRoute.component || oeqRoute.render) && (\n+          <Route\n+            key={ind}\n+            exact={oeqRoute.exact}\n+            path={oeqRoute.path}\n+            render={(p) => {\n+              const oeqProps = mkRouteProps(p);\n+              if (oeqRoute.component) {\n+                return <oeqRoute.component {...oeqProps} />;\n+              }\n+              return oeqRoute.render?.(oeqProps);\n+            }}\n+          />\n+        )\n+      );\n+    });\n+  }, [refreshUser]);\n+\n+  const errorCallback = React.useCallback((err) => {\n+    errorShowing.current = true;\n+    setTemplateProps((p) => ({ ...p, fullscreenMode: undefined }));\n+    setFullPageError(err);\n+  }, []);\n+\n+  function routeSwitch(content?: PageContent) {\n+    return (\n+      <Switch>\n+        {fullPageError && (\n+          <Route>\n+            <ErrorPage error={fullPageError} />\n+          </Route>\n+        )}\n+        <Route path=\"/\" exact>\n+          <Redirect to=\"/home.do\" />\n+        </Route>\n+        {newUIRoutes}\n+        <Route\n+          render={(p) => (\n+            <LegacyPage\n+              {...mkRouteProps(p)}\n+              errorCallback={errorCallback}\n+              legacyContent={{ content, setLegacyContentProps }}\n+            />\n+          )}\n+        />\n+      </Switch>\n+    );\n+  }\n+\n+  return (\n+    <BrowserRouter\n+      basename={basePath}\n+      getUserConfirmation={(message, cb) => {\n+        if (errorShowing.current) {\n+          errorShowing.current = false;\n+          setFullPageError(undefined);\n+          cb(true);\n+        } else {\n+          setNavAwayCallback({ message, cb });\n+        }\n+      }}\n+    >\n+      <Prompt\n+        when={Boolean(preventNavMessage) || errorShowing.current}\n+        message={nonBlankNavMsg}\n+      />\n+      <NavAwayDialog\n+        open={Boolean(navAwayCallback)}\n+        message={nonBlankNavMsg}\n+        navigateConfirm={(confirm) => {\n+          if (navAwayCallback) navAwayCallback.cb(confirm);\n+          if (confirm) setPreventNavMessage(undefined);\n+          setNavAwayCallback(undefined);\n+        }}\n+      />\n+      <LegacyContent\n+        {...legacyContentProps}\n+        render={(content) => {\n+          const tp = content\n+            ? templatePropsForLegacy(content)\n+            : {\n+                ...templateProps,\n+                fullscreenMode: legacyContentProps.enabled\n+                  ? templateProps.fullscreenMode\n+                  : undefined,\n+              };\n+          const withErr = fullPageError\n+            ? { ...tp, title: fullPageError.error, fullscreenMode: undefined }\n+            : tp;\n+          const template = (\n+            <Template {...withErr} currentUser={currentUser}>\n+              {routeSwitch(content)}\n+            </Template>\n+          );\n+          const render = () => {\n+            if (!content || content.noForm) {\n+              return template;\n+            } else {\n+              const { form } = content.html;\n+              return (\n+                <>\n+                  <LegacyForm state={content.state}>{template}</LegacyForm>\n+                  {form && HtmlParser(form)}\n+                </>\n+              );\n+            }\n+          };\n+          return render();\n+        }}\n+      />\n+    </BrowserRouter>\n+  );\n+}\n+interface AppProps {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09c724fbd3197e89f7d0cd96fb911301eb3f93d0"}, "originalPosition": 242}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY0NTc0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            export const App = ({ legacySettingsMode }: AppProps) => {\n          \n          \n            \n            \n          \n          \n            \n            export const App = ({ legacySettingsMode }: AppProps) => {", "url": "https://github.com/openequella/openEQUELLA/pull/2280#discussion_r487645748", "createdAt": "2020-09-14T04:31:33Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/mainui/App.tsx", "diffHunk": "@@ -0,0 +1,264 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import { ThemeProvider } from \"@material-ui/core\";\n+import { oeqTheme } from \"../theme\";\n+import * as React from \"react\";\n+import { getCurrentUser, UserData } from \"../api/currentuser\";\n+import { ErrorResponse } from \"../api/errors\";\n+import {\n+  LegacyContent,\n+  LegacyContentProps,\n+  PageContent,\n+} from \"../legacycontent/LegacyContent\";\n+import { Template, TemplateProps, TemplateUpdate } from \"./Template\";\n+import { defaultNavMessage, NavAwayDialog } from \"./PreventNavigation\";\n+import { shallowEqual } from \"shallow-equal-object\";\n+import { OEQRoute, OEQRouteComponentProps, routes } from \"./routes\";\n+import {\n+  Prompt,\n+  Redirect,\n+  Route,\n+  RouteComponentProps,\n+  Switch,\n+} from \"react-router\";\n+import ErrorPage from \"./ErrorPage\";\n+import { LegacyPage, templatePropsForLegacy } from \"./LegacyPage\";\n+import { BrowserRouter } from \"react-router-dom\";\n+import { LegacyForm } from \"../legacycontent/LegacyForm\";\n+import HtmlParser from \"react-html-parser\";\n+import SettingsPage from \"../settings/SettingsPage\";\n+import { startHeartbeat } from \"../util/heartbeat\";\n+\n+const beforeunload = function (e: Event) {\n+  e.returnValue = (\"Are you sure?\" as unknown) as boolean;\n+  return \"Are you sure?\";\n+};\n+\n+const baseFullPath = new URL(document.head.getElementsByTagName(\"base\")[0].href)\n+  .pathname;\n+export const basePath = baseFullPath.substr(0, baseFullPath.length - 1);\n+\n+function IndexPage() {\n+  const [currentUser, setCurrentUser] = React.useState<UserData>();\n+  const [fullPageError, setFullPageError] = React.useState<ErrorResponse>();\n+  const errorShowing = React.useRef(false);\n+\n+  const refreshUser = React.useCallback(() => {\n+    getCurrentUser().then(setCurrentUser);\n+  }, []);\n+\n+  React.useEffect(() => refreshUser(), []);\n+\n+  const [navAwayCallback, setNavAwayCallback] = React.useState<{\n+    message: string;\n+    cb: (confirm: boolean) => void;\n+  }>();\n+\n+  const [preventNavMessage, setPreventNavMessage] = React.useState<string>();\n+  const [legacyContentProps, setLegacyContentProps] = React.useState<\n+    LegacyContentProps\n+  >({\n+    enabled: false,\n+    pathname: \"\",\n+    search: \"\",\n+    locationKey: \"\",\n+    userUpdated: refreshUser,\n+    redirected: () => {},\n+    onError: () => {},\n+    render: () => <div />,\n+  });\n+\n+  const [templateProps, setTemplateProps] = React.useState({\n+    title: \"\",\n+    fullscreenMode: \"YES\",\n+    children: [],\n+  } as TemplateProps);\n+\n+  const setPreventNavigation = React.useCallback(\n+    (prevent) => {\n+      const message = prevent ? defaultNavMessage() : undefined;\n+      if (message) {\n+        window.addEventListener(\"beforeunload\", beforeunload, false);\n+      } else {\n+        window.removeEventListener(\"beforeunload\", beforeunload, false);\n+      }\n+      setPreventNavMessage(message);\n+    },\n+    [setPreventNavMessage]\n+  );\n+\n+  const nonBlankNavMsg = preventNavMessage ? preventNavMessage : \"\";\n+\n+  const updateTemplate = React.useCallback((edit: TemplateUpdate) => {\n+    setTemplateProps((tp) => {\n+      const edited = edit(tp);\n+      return shallowEqual(edited, tp) ? tp : edited;\n+    });\n+  }, []);\n+  const oeqRoutes: { [key: string]: OEQRoute } = routes;\n+\n+  function mkRouteProps(p: RouteComponentProps<any>): OEQRouteComponentProps {\n+    return {\n+      ...p,\n+      updateTemplate,\n+      refreshUser,\n+      redirect: p.history.push,\n+      setPreventNavigation,\n+    };\n+  }\n+\n+  const newUIRoutes = React.useMemo(() => {\n+    return Object.keys(oeqRoutes).map((key, ind) => {\n+      const oeqRoute = oeqRoutes[key];\n+      return (\n+        (oeqRoute.component || oeqRoute.render) && (\n+          <Route\n+            key={ind}\n+            exact={oeqRoute.exact}\n+            path={oeqRoute.path}\n+            render={(p) => {\n+              const oeqProps = mkRouteProps(p);\n+              if (oeqRoute.component) {\n+                return <oeqRoute.component {...oeqProps} />;\n+              }\n+              return oeqRoute.render?.(oeqProps);\n+            }}\n+          />\n+        )\n+      );\n+    });\n+  }, [refreshUser]);\n+\n+  const errorCallback = React.useCallback((err) => {\n+    errorShowing.current = true;\n+    setTemplateProps((p) => ({ ...p, fullscreenMode: undefined }));\n+    setFullPageError(err);\n+  }, []);\n+\n+  function routeSwitch(content?: PageContent) {\n+    return (\n+      <Switch>\n+        {fullPageError && (\n+          <Route>\n+            <ErrorPage error={fullPageError} />\n+          </Route>\n+        )}\n+        <Route path=\"/\" exact>\n+          <Redirect to=\"/home.do\" />\n+        </Route>\n+        {newUIRoutes}\n+        <Route\n+          render={(p) => (\n+            <LegacyPage\n+              {...mkRouteProps(p)}\n+              errorCallback={errorCallback}\n+              legacyContent={{ content, setLegacyContentProps }}\n+            />\n+          )}\n+        />\n+      </Switch>\n+    );\n+  }\n+\n+  return (\n+    <BrowserRouter\n+      basename={basePath}\n+      getUserConfirmation={(message, cb) => {\n+        if (errorShowing.current) {\n+          errorShowing.current = false;\n+          setFullPageError(undefined);\n+          cb(true);\n+        } else {\n+          setNavAwayCallback({ message, cb });\n+        }\n+      }}\n+    >\n+      <Prompt\n+        when={Boolean(preventNavMessage) || errorShowing.current}\n+        message={nonBlankNavMsg}\n+      />\n+      <NavAwayDialog\n+        open={Boolean(navAwayCallback)}\n+        message={nonBlankNavMsg}\n+        navigateConfirm={(confirm) => {\n+          if (navAwayCallback) navAwayCallback.cb(confirm);\n+          if (confirm) setPreventNavMessage(undefined);\n+          setNavAwayCallback(undefined);\n+        }}\n+      />\n+      <LegacyContent\n+        {...legacyContentProps}\n+        render={(content) => {\n+          const tp = content\n+            ? templatePropsForLegacy(content)\n+            : {\n+                ...templateProps,\n+                fullscreenMode: legacyContentProps.enabled\n+                  ? templateProps.fullscreenMode\n+                  : undefined,\n+              };\n+          const withErr = fullPageError\n+            ? { ...tp, title: fullPageError.error, fullscreenMode: undefined }\n+            : tp;\n+          const template = (\n+            <Template {...withErr} currentUser={currentUser}>\n+              {routeSwitch(content)}\n+            </Template>\n+          );\n+          const render = () => {\n+            if (!content || content.noForm) {\n+              return template;\n+            } else {\n+              const { form } = content.html;\n+              return (\n+                <>\n+                  <LegacyForm state={content.state}>{template}</LegacyForm>\n+                  {form && HtmlParser(form)}\n+                </>\n+              );\n+            }\n+          };\n+          return render();\n+        }}\n+      />\n+    </BrowserRouter>\n+  );\n+}\n+interface AppProps {\n+  legacySettingsMode: boolean;\n+}\n+export const App = ({ legacySettingsMode }: AppProps) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09c724fbd3197e89f7d0cd96fb911301eb3f93d0"}, "originalPosition": 245}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY0NTkzNA==", "bodyText": "hmmm, just thinking.... Could be handy to have a comment here to explain why this is here. Otherwise, it looks kind of redundant.", "url": "https://github.com/openequella/openEQUELLA/pull/2280#discussion_r487645934", "createdAt": "2020-09-14T04:32:30Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/mainui/index.tsx", "diffHunk": "@@ -58,216 +27,15 @@ declare const renderData:\n     }\n   | undefined;\n \n-const beforeunload = function (e: Event) {\n-  e.returnValue = (\"Are you sure?\" as unknown) as boolean;\n-  return \"Are you sure?\";\n-};\n-\n-function IndexPage() {\n-  const [currentUser, setCurrentUser] = React.useState<UserData>();\n-  const [fullPageError, setFullPageError] = React.useState<ErrorResponse>();\n-  const errorShowing = React.useRef(false);\n-\n-  const refreshUser = React.useCallback(() => {\n-    getCurrentUser().then(setCurrentUser);\n-  }, []);\n-\n-  React.useEffect(() => refreshUser(), []);\n-\n-  const [navAwayCallback, setNavAwayCallback] = React.useState<{\n-    message: string;\n-    cb: (confirm: boolean) => void;\n-  }>();\n-\n-  const [preventNavMessage, setPreventNavMessage] = React.useState<string>();\n-  const [legacyContentProps, setLegacyContentProps] = React.useState<\n-    LegacyContentProps\n-  >({\n-    enabled: false,\n-    pathname: \"\",\n-    search: \"\",\n-    locationKey: \"\",\n-    userUpdated: refreshUser,\n-    redirected: () => {},\n-    onError: () => {},\n-    render: () => <div />,\n-  });\n-\n-  const [templateProps, setTemplateProps] = React.useState({\n-    title: \"\",\n-    fullscreenMode: \"YES\",\n-    children: [],\n-  } as TemplateProps);\n-\n-  const setPreventNavigation = React.useCallback(\n-    (prevent) => {\n-      const message = prevent ? defaultNavMessage() : undefined;\n-      if (message) {\n-        window.addEventListener(\"beforeunload\", beforeunload, false);\n-      } else {\n-        window.removeEventListener(\"beforeunload\", beforeunload, false);\n-      }\n-      setPreventNavMessage(message);\n-    },\n-    [setPreventNavMessage]\n-  );\n-\n-  const nonBlankNavMsg = preventNavMessage ? preventNavMessage : \"\";\n-\n-  const updateTemplate = React.useCallback((edit: TemplateUpdate) => {\n-    setTemplateProps((tp) => {\n-      const edited = edit(tp);\n-      return shallowEqual(edited, tp) ? tp : edited;\n-    });\n-  }, []);\n-  const oeqRoutes: { [key: string]: OEQRoute } = routes;\n-\n-  function mkRouteProps(p: RouteComponentProps<any>): OEQRouteComponentProps {\n-    return {\n-      ...p,\n-      updateTemplate,\n-      refreshUser,\n-      redirect: p.history.push,\n-      setPreventNavigation,\n-    };\n-  }\n-\n-  const newUIRoutes = React.useMemo(() => {\n-    return Object.keys(oeqRoutes).map((key, ind) => {\n-      const oeqRoute = oeqRoutes[key];\n-      return (\n-        (oeqRoute.component || oeqRoute.render) && (\n-          <Route\n-            key={ind}\n-            exact={oeqRoute.exact}\n-            path={oeqRoute.path}\n-            render={(p) => {\n-              const oeqProps = mkRouteProps(p);\n-              if (oeqRoute.component) {\n-                return <oeqRoute.component {...oeqProps} />;\n-              }\n-              return oeqRoute.render?.(oeqProps);\n-            }}\n-          />\n-        )\n-      );\n-    });\n-  }, [refreshUser]);\n-\n-  const errorCallback = React.useCallback((err) => {\n-    errorShowing.current = true;\n-    setTemplateProps((p) => ({ ...p, fullscreenMode: undefined }));\n-    setFullPageError(err);\n-  }, []);\n-\n-  function routeSwitch(content?: PageContent) {\n-    return (\n-      <Switch>\n-        {fullPageError && (\n-          <Route>\n-            <ErrorPage error={fullPageError} />\n-          </Route>\n-        )}\n-        <Route path=\"/\" exact>\n-          <Redirect to=\"/home.do\" />\n-        </Route>\n-        {newUIRoutes}\n-        <Route\n-          render={(p) => (\n-            <LegacyPage\n-              {...mkRouteProps(p)}\n-              errorCallback={errorCallback}\n-              legacyContent={{ content, setLegacyContentProps }}\n-            />\n-          )}\n-        />\n-      </Switch>\n-    );\n-  }\n-\n-  return (\n-    <BrowserRouter\n-      basename={basePath}\n-      getUserConfirmation={(message, cb) => {\n-        if (errorShowing.current) {\n-          errorShowing.current = false;\n-          setFullPageError(undefined);\n-          cb(true);\n-        } else {\n-          setNavAwayCallback({ message, cb });\n-        }\n-      }}\n-    >\n-      <Prompt\n-        when={Boolean(preventNavMessage) || errorShowing.current}\n-        message={nonBlankNavMsg}\n-      />\n-      <NavAwayDialog\n-        open={Boolean(navAwayCallback)}\n-        message={nonBlankNavMsg}\n-        navigateConfirm={(confirm) => {\n-          if (navAwayCallback) navAwayCallback.cb(confirm);\n-          if (confirm) setPreventNavMessage(undefined);\n-          setNavAwayCallback(undefined);\n-        }}\n-      />\n-      <LegacyContent\n-        {...legacyContentProps}\n-        render={(content) => {\n-          const tp = content\n-            ? templatePropsForLegacy(content)\n-            : {\n-                ...templateProps,\n-                fullscreenMode: legacyContentProps.enabled\n-                  ? templateProps.fullscreenMode\n-                  : undefined,\n-              };\n-          const withErr = fullPageError\n-            ? { ...tp, title: fullPageError.error, fullscreenMode: undefined }\n-            : tp;\n-          const template = (\n-            <Template {...withErr} currentUser={currentUser}>\n-              {routeSwitch(content)}\n-            </Template>\n-          );\n-          const render = () => {\n-            if (!content || content.noForm) {\n-              return template;\n-            } else {\n-              const { form } = content.html;\n-              return (\n-                <>\n-                  <LegacyForm state={content.state}>{template}</LegacyForm>\n-                  {form && HtmlParser(form)}\n-                </>\n-              );\n-            }\n-          };\n-          return render();\n-        }}\n-      />\n-    </BrowserRouter>\n-  );\n-}\n+const App = React.lazy(() => import(\"./App\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09c724fbd3197e89f7d0cd96fb911301eb3f93d0"}, "originalPosition": 236}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "916ccb795e1a9d7eb1c2949ea27951aceb715f8c", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/916ccb795e1a9d7eb1c2949ea27951aceb715f8c", "committedDate": "2020-09-14T07:48:38Z", "message": "Some tweaks for 'App.tsx' and 'index.tsx'."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a8d1801beb291ab63b2d608210d8500b7634c18", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/3a8d1801beb291ab63b2d608210d8500b7634c18", "committedDate": "2020-09-15T09:27:47Z", "message": "Merge branch 'component/new-search-page' into bugfix/custom-language-string-not-working"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMTc5MTEx", "url": "https://github.com/openequella/openEQUELLA/pull/2280#pullrequestreview-490179111", "createdAt": "2020-09-17T01:17:26Z", "commit": {"oid": "3a8d1801beb291ab63b2d608210d8500b7634c18"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 452, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}