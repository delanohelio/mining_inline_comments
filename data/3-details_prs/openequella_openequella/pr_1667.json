{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNDU5OTc5", "number": 1667, "title": "Basic auth endpoint for REST", "bodyText": "Checklist\n\n\n the contributor license agreement is signed\n commit message follows commit guidelines\n tests are included\n screenshots are included showing significant UI changes - NA\n documentation is changed or added - kinda of (apidocs)\n\nDescription of change\nProvides a simple REST auth endpoint for user (and cookie) based authentication (rather than token / OAuth), utilising existing authentication and authorization mechanisms as referenced from the current form based authentication process.\nTesting was a little interesting, as this did not really fit within the current oEQ REST testing paradigm. So I also pushed this out into it's own package (including root package reflecting current situation).\n#1656", "createdAt": "2020-04-29T02:50:20Z", "url": "https://github.com/openequella/openEQUELLA/pull/1667", "merged": true, "mergeCommit": {"oid": "4a06c1a23dc66b85e2117fb557e860594747b49a"}, "closed": true, "closedAt": "2020-05-01T02:31:42Z", "author": {"login": "edalex-ian"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaqogPAH2gAyNDEwNDU5OTc5OjBkMDVkZmYxMjg0Y2NkZmQ5NWVhODgyMGFiNDlmNGU2NzIyZGZjNWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABccmiOMAFqTQwMzIxOTI2NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0d05dff1284ccdfd95ea8820ab49f4e6722dfc5a", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/0d05dff1284ccdfd95ea8820ab49f4e6722dfc5a", "committedDate": "2020-04-24T05:28:22Z", "message": "Add new endpoint to support simple end user login\n\n#1656"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "022fd1dc760c67fa28e56a7344350f119cfe72ff", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/022fd1dc760c67fa28e56a7344350f119cfe72ff", "committedDate": "2020-04-24T05:31:04Z", "message": "Add header to Auth.scala\n\nIssue #1656"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1ca1f4f2d2e98c451b96eb80db02158d76912ee", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/b1ca1f4f2d2e98c451b96eb80db02158d76912ee", "committedDate": "2020-04-24T06:16:21Z", "message": "Only convert some login failure responses to language strings\n\nIssue #1656"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e017ccf51e54cd81b9f78e622819752abcb07c33", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/e017ccf51e54cd81b9f78e622819752abcb07c33", "committedDate": "2020-04-29T02:35:34Z", "message": "Fix 500 on /api/auth/logout\n\n#1656"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9732396e8def2c5e1bc8cc8b6b33d7eb69f50486", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/9732396e8def2c5e1bc8cc8b6b33d7eb69f50486", "committedDate": "2020-04-29T02:43:44Z", "message": "Add basic tests for /api/auth\n\n#1656"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77c967725442ff1fc9bf1f896fa8b688ddb3a4b1", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/77c967725442ff1fc9bf1f896fa8b688ddb3a4b1", "committedDate": "2020-04-29T05:46:49Z", "message": "Fix formatting\n\n#1656"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMDk5ODgy", "url": "https://github.com/openequella/openEQUELLA/pull/1667#pullrequestreview-403099882", "createdAt": "2020-04-29T23:04:26Z", "commit": {"oid": "77c967725442ff1fc9bf1f896fa8b688ddb3a4b1"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMzowNDoyNlrOGOUG8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMzoxMzoyNlrOGOUSyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2MjcwNQ==", "bodyText": "We have a Scala object called ApiErrorResponse which generates responses for 404 and 400. What about we move this method to there ?", "url": "https://github.com/openequella/openEQUELLA/pull/1667#discussion_r417662705", "createdAt": "2020-04-29T23:04:26Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/auth/Auth.scala", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.web.api.auth\n+\n+import com.tle.common.i18n.CurrentLocale\n+import com.tle.common.usermanagement.user.{CurrentUser, WebAuthenticationDetails}\n+import com.tle.exceptions.{\n+  AccountExpiredException,\n+  AuthenticationException,\n+  BadCredentialsException\n+}\n+import com.tle.legacy.LegacyGuice\n+import com.tle.web.resources.{PluginResourceHelper, ResourcesService}\n+import io.swagger.annotations.{Api, ApiOperation}\n+import javax.servlet.http.HttpServletRequest\n+import javax.ws.rs.core.{Context, Response}\n+import javax.ws.rs.{POST, PUT, Path, QueryParam}\n+\n+@Api(\"Authentication\")\n+@Path(\"auth\")\n+class Auth {\n+  val RESOURCE_HELPER: PluginResourceHelper =\n+    ResourcesService.getResourceHelper(classOf[Auth])\n+\n+  /**\n+    * Provide simple username / password login as per a legacy oEQ form based authentication but for\n+    * use with REST APIs - possible the start of an authenticated Single Page App. This basically\n+    * mimics the existing form based login logic.\n+    *\n+    * @see com.tle.web.login.LogonSection#authenticate(SectionInfo)\n+    */\n+  @POST\n+  @Path(\"login\")\n+  @ApiOperation(\n+    value = \"Login as a normal user.\",\n+    notes =\n+      \"Provides a means to establish a simple cookie based (JSESSIONID) session, for easy use of the REST API for user based operations.\",\n+    response = classOf[String]\n+  )\n+  def login(@Context req: HttpServletRequest,\n+            @QueryParam(\"username\") username: String,\n+            @QueryParam(\"password\") password: String): Response = {\n+    LegacyGuice.userSessionService.reenableSessionUse()\n+\n+    val us  = LegacyGuice.userService\n+    val wad = us.getWebAuthenticationDetails(req)\n+    def lfr(messageKey: String): Response =\n+      loginFailedResponse(wad, username, CurrentLocale.get(RESOURCE_HELPER.key(messageKey)))\n+\n+    try {\n+      us.login(username, password, wad, true)\n+      Response.ok().build()\n+    } catch {\n+      case _: BadCredentialsException => lfr(\"logon.invalid\")\n+      case e: AccountExpiredException => loginFailedResponse(wad, username, e.getMessage)\n+      case _: AuthenticationException => lfr(\"logon.problems\")\n+    }\n+  }\n+\n+  @PUT\n+  @Path(\"logout\")\n+  @ApiOperation(\n+    value = \"Logout the current session.\",\n+    notes =\n+      \"This is to logout sessions which were setup with the /api/auth/login endpoint, and will do so based on the JSESSIONID cookie.\"\n+  )\n+  def logout(@Context req: HttpServletRequest): Response = {\n+    LegacyGuice.userSessionService.reenableSessionUse()\n+    val us = LegacyGuice.userService\n+    us.logoutToGuest(us.getWebAuthenticationDetails(req), false)\n+    Response.ok().build()\n+  }\n+\n+  def loginFailedResponse(wad: WebAuthenticationDetails,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77c967725442ff1fc9bf1f896fa8b688ddb3a4b1"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2MzE4MQ==", "bodyText": "Can I ask Why use PUT for logout?", "url": "https://github.com/openequella/openEQUELLA/pull/1667#discussion_r417663181", "createdAt": "2020-04-29T23:05:56Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/auth/Auth.scala", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.web.api.auth\n+\n+import com.tle.common.i18n.CurrentLocale\n+import com.tle.common.usermanagement.user.{CurrentUser, WebAuthenticationDetails}\n+import com.tle.exceptions.{\n+  AccountExpiredException,\n+  AuthenticationException,\n+  BadCredentialsException\n+}\n+import com.tle.legacy.LegacyGuice\n+import com.tle.web.resources.{PluginResourceHelper, ResourcesService}\n+import io.swagger.annotations.{Api, ApiOperation}\n+import javax.servlet.http.HttpServletRequest\n+import javax.ws.rs.core.{Context, Response}\n+import javax.ws.rs.{POST, PUT, Path, QueryParam}\n+\n+@Api(\"Authentication\")\n+@Path(\"auth\")\n+class Auth {\n+  val RESOURCE_HELPER: PluginResourceHelper =\n+    ResourcesService.getResourceHelper(classOf[Auth])\n+\n+  /**\n+    * Provide simple username / password login as per a legacy oEQ form based authentication but for\n+    * use with REST APIs - possible the start of an authenticated Single Page App. This basically\n+    * mimics the existing form based login logic.\n+    *\n+    * @see com.tle.web.login.LogonSection#authenticate(SectionInfo)\n+    */\n+  @POST\n+  @Path(\"login\")\n+  @ApiOperation(\n+    value = \"Login as a normal user.\",\n+    notes =\n+      \"Provides a means to establish a simple cookie based (JSESSIONID) session, for easy use of the REST API for user based operations.\",\n+    response = classOf[String]\n+  )\n+  def login(@Context req: HttpServletRequest,\n+            @QueryParam(\"username\") username: String,\n+            @QueryParam(\"password\") password: String): Response = {\n+    LegacyGuice.userSessionService.reenableSessionUse()\n+\n+    val us  = LegacyGuice.userService\n+    val wad = us.getWebAuthenticationDetails(req)\n+    def lfr(messageKey: String): Response =\n+      loginFailedResponse(wad, username, CurrentLocale.get(RESOURCE_HELPER.key(messageKey)))\n+\n+    try {\n+      us.login(username, password, wad, true)\n+      Response.ok().build()\n+    } catch {\n+      case _: BadCredentialsException => lfr(\"logon.invalid\")\n+      case e: AccountExpiredException => loginFailedResponse(wad, username, e.getMessage)\n+      case _: AuthenticationException => lfr(\"logon.problems\")\n+    }\n+  }\n+\n+  @PUT", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77c967725442ff1fc9bf1f896fa8b688ddb3a4b1"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2NTczOQ==", "bodyText": "Will we use  io.github.openequella.rest.XXX as package names for REST Api tests created in the future ?", "url": "https://github.com/openequella/openEQUELLA/pull/1667#discussion_r417665739", "createdAt": "2020-04-29T23:13:26Z", "author": {"login": "PenghaiZhang"}, "path": "autotest/OldTests/testng-travis-webservices.yaml", "diffHunk": "@@ -28,6 +28,7 @@ tests:\n       - com.tle.webtests.test.webservices.rest.TasksApiTest\n       - com.tle.webtests.test.webservices.rest.TaxonomyApiTest\n       - com.tle.webtests.test.webservices.rest.UserGroupManagementApiTest\n+      - io.github.openequella.rest.AuthApiTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77c967725442ff1fc9bf1f896fa8b688ddb3a4b1"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMjE5MjY1", "url": "https://github.com/openequella/openEQUELLA/pull/1667#pullrequestreview-403219265", "createdAt": "2020-04-30T05:49:44Z", "commit": {"oid": "77c967725442ff1fc9bf1f896fa8b688ddb3a4b1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 86, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}