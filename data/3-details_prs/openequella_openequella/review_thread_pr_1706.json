{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzOTMyODA3", "number": 1706, "reviewThreads": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMjozMDo1M1rOD6fRRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNDo0MDowOFrOD7E6Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjU2MzI3OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsPage.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMjozMDo1M1rOGSW15A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMjozMDo1M1rOGSW15A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkwMTc5Ng==", "bodyText": "We don't need this array for now. When chained then returns one or more 207 responses, use this array to store all error messages, and set them to state in the last then.", "url": "https://github.com/openequella/openEQUELLA/pull/1706#discussion_r421901796", "createdAt": "2020-05-08T02:30:53Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsPage.tsx", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps,\n+} from \"../../../mainui/Template\";\n+import SettingPageTemplate from \"../../../components/SettingPageTemplate\";\n+import { useState } from \"react\";\n+import {\n+  Card,\n+  CardActions,\n+  IconButton,\n+  List,\n+  ListItem,\n+  ListItemSecondaryAction,\n+  ListItemText,\n+  ListSubheader,\n+  makeStyles,\n+} from \"@material-ui/core\";\n+import { languageStrings } from \"../../../util/langstrings\";\n+import {\n+  addFlags,\n+  batchUpdateOrAdd,\n+  ModifiedClassification,\n+  FacetedSearchClassification,\n+  getClassificationsFromServer,\n+  removeFlags,\n+  getHighestOrderIndex,\n+} from \"./FacetedSearchSettingsModule\";\n+import EditIcon from \"@material-ui/icons/Edit\";\n+import DeleteIcon from \"@material-ui/icons/Delete\";\n+import AddCircleIcon from \"@material-ui/icons/AddCircle\";\n+import ClassificationDialog from \"./ClassificationDialog\";\n+import { useEffect } from \"react\";\n+import { routes } from \"../../../mainui/routes\";\n+import { addElement } from \"../../../util/ImmutableArrayUtil\";\n+import { generateFromError } from \"../../../api/errors\";\n+import MessageDialog from \"../../../components/MessageDialog\";\n+import { commonString } from \"../../../util/commonstrings\";\n+\n+const useStyles = makeStyles({\n+  spacedCards: {\n+    margin: \"16px\",\n+    width: \"75%\",\n+    padding: \"16px\",\n+    float: \"left\",\n+  },\n+  cardAction: {\n+    display: \"flex\",\n+    justifyContent: \"flex-end\",\n+  },\n+});\n+\n+/**\n+ * A page for setting Faceted search classifications.\n+ */\n+const FacetedSearchSettingsPage = ({ updateTemplate }: TemplateUpdateProps) => {\n+  const facetedsearchsettingStrings =\n+    languageStrings.settings.searching.facetedsearchsetting;\n+  const classes = useStyles();\n+\n+  // Show the snackbar when all the status of a 207 response is 2xx.\n+  const [showSnackBar, setShowSnackBar] = useState<boolean>(false);\n+  // Show a message dialog when a 207 response includes any status that's 4xx.\n+  const [showResultDialog, setShowResultDialog] = useState<boolean>(false);\n+  const [resultMessages, setResultMessagesMessages] = useState<string[]>([]);\n+\n+  const [showEditingDialog, setShowEditingDialog] = useState<boolean>(false);\n+  const [classifications, setClassifications] = useState<\n+    ModifiedClassification[]\n+  >([]);\n+\n+  const addOrEditQueue = classifications\n+    .filter((classification) => classification.changed)\n+    .map((classification) => removeFlags(classification));\n+  const changesUnsaved = addOrEditQueue.length > 0;\n+\n+  /**\n+   * Update the page title and back route, and get a list of classifications.\n+   */\n+  useEffect(() => {\n+    updateTemplate((tp) => ({\n+      ...templateDefaults(facetedsearchsettingStrings.name)(tp),\n+      backRoute: routes.Settings.to,\n+    }));\n+    getClassifications();\n+  }, []);\n+\n+  const getClassifications = () => {\n+    getClassificationsFromServer().then((classifications) => {\n+      setClassifications(\n+        classifications.map((classification) => {\n+          return addFlags(classification, false, false, false);\n+        })\n+      );\n+    });\n+  };\n+\n+  /**\n+   * Save classifications in the queue to the Server.\n+   * Show the message dialog if any error message is received otherwise show snackbar.\n+   */\n+  const save = () => {\n+    const errorMessages: string[] = [];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed006ff5ac660ef8b29b300333a5897ea5410a8f"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjYxMjQ4OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/ClassificationDialog.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMzowMDoxNlrOGSXS6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNDo0NTo0N1rOGSY4FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkwOTIyNQ==", "bodyText": "Alternative below, it's not much of a difference and the only real nicety is for setMaxResults and the not needing a ternary.\nsetName(classication?.name ?? '')\nsetSchemaNode(classification?.schemaNode ?? \"\");\nsetMaxResults(classification?.maxResults);", "url": "https://github.com/openequella/openEQUELLA/pull/1706#discussion_r421909225", "createdAt": "2020-05-08T03:00:16Z", "author": {"login": "edalex-tom"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/ClassificationDialog.tsx", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import {\n+  Button,\n+  Dialog,\n+  DialogActions,\n+  DialogContent,\n+  DialogTitle,\n+  TextField,\n+} from \"@material-ui/core\";\n+import { commonString } from \"../../../util/commonstrings\";\n+import { languageStrings } from \"../../../util/langstrings\";\n+import { useEffect, useState } from \"react\";\n+import {\n+  FacetedSearchClassification,\n+  validateClassificationFields,\n+} from \"./FacetedSearchSettingsModule\";\n+\n+interface ClassificationDialogProps {\n+  /**\n+   * If true, the dialog will be shown.\n+   */\n+  open: boolean;\n+  /**\n+   * Fired when the dialog is closed.\n+   */\n+  onClose: () => void;\n+  /**\n+   * Fired when click the ADD button.\n+   */\n+  addOrEdit: (classification: FacetedSearchClassification) => void;\n+  /**\n+   * The classification to be edited; undefined if the action is to add a new one.\n+   */\n+  classification?: FacetedSearchClassification;\n+  /**\n+   * Error handling.\n+   */\n+  handleError: (error: Error) => void;\n+  /**\n+   * Current highest order index.\n+   */\n+  highestOrderIndex: number;\n+}\n+\n+/**\n+ * A dialog for adding/editing a Faceted search classification\n+ */\n+const ClassificationDialog = ({\n+  open,\n+  onClose,\n+  addOrEdit,\n+  handleError,\n+  classification,\n+  highestOrderIndex,\n+}: ClassificationDialogProps) => {\n+  const {\n+    facetedsearchsetting: facetedSearchSettingStrings,\n+  } = languageStrings.settings.searching;\n+  const { classification: classificationStrings } = facetedSearchSettingStrings;\n+\n+  const [name, setName] = useState<string>(\"\");\n+  const [schemaNode, setSchemaNode] = useState<string>(\"\");\n+  const [maxResults, setMaxResults] = useState<number | undefined>();\n+\n+  const isNameInvalid = validateClassificationFields(name);\n+  const isSchemaNodeInvalid = validateClassificationFields(schemaNode);\n+\n+  /**\n+   * Initialise textfields' values, depending on 'onClose'.\n+   */\n+  useEffect(() => {\n+    setName(classification ? classification.name : \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed006ff5ac660ef8b29b300333a5897ea5410a8f"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzNTEyNA==", "bodyText": "I like this. I need to update my Intellij as the version I am using does not recognise this operator.", "url": "https://github.com/openequella/openEQUELLA/pull/1706#discussion_r421935124", "createdAt": "2020-05-08T04:45:47Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/ClassificationDialog.tsx", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import {\n+  Button,\n+  Dialog,\n+  DialogActions,\n+  DialogContent,\n+  DialogTitle,\n+  TextField,\n+} from \"@material-ui/core\";\n+import { commonString } from \"../../../util/commonstrings\";\n+import { languageStrings } from \"../../../util/langstrings\";\n+import { useEffect, useState } from \"react\";\n+import {\n+  FacetedSearchClassification,\n+  validateClassificationFields,\n+} from \"./FacetedSearchSettingsModule\";\n+\n+interface ClassificationDialogProps {\n+  /**\n+   * If true, the dialog will be shown.\n+   */\n+  open: boolean;\n+  /**\n+   * Fired when the dialog is closed.\n+   */\n+  onClose: () => void;\n+  /**\n+   * Fired when click the ADD button.\n+   */\n+  addOrEdit: (classification: FacetedSearchClassification) => void;\n+  /**\n+   * The classification to be edited; undefined if the action is to add a new one.\n+   */\n+  classification?: FacetedSearchClassification;\n+  /**\n+   * Error handling.\n+   */\n+  handleError: (error: Error) => void;\n+  /**\n+   * Current highest order index.\n+   */\n+  highestOrderIndex: number;\n+}\n+\n+/**\n+ * A dialog for adding/editing a Faceted search classification\n+ */\n+const ClassificationDialog = ({\n+  open,\n+  onClose,\n+  addOrEdit,\n+  handleError,\n+  classification,\n+  highestOrderIndex,\n+}: ClassificationDialogProps) => {\n+  const {\n+    facetedsearchsetting: facetedSearchSettingStrings,\n+  } = languageStrings.settings.searching;\n+  const { classification: classificationStrings } = facetedSearchSettingStrings;\n+\n+  const [name, setName] = useState<string>(\"\");\n+  const [schemaNode, setSchemaNode] = useState<string>(\"\");\n+  const [maxResults, setMaxResults] = useState<number | undefined>();\n+\n+  const isNameInvalid = validateClassificationFields(name);\n+  const isSchemaNodeInvalid = validateClassificationFields(schemaNode);\n+\n+  /**\n+   * Initialise textfields' values, depending on 'onClose'.\n+   */\n+  useEffect(() => {\n+    setName(classification ? classification.name : \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkwOTIyNQ=="}, "originalCommit": {"oid": "ed006ff5ac660ef8b29b300333a5897ea5410a8f"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjYxNzcxOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/ClassificationDialog.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMzowMzoyMlrOGSXV3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMzowMzoyMlrOGSXV3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkwOTk4MA==", "bodyText": "Can this be simplified to\naddOrEdit({\n      name,\n      schemaNode,\n      maxResults,\n      orderIndex: highestOrderIndex + 1,\n    });", "url": "https://github.com/openequella/openEQUELLA/pull/1706#discussion_r421909980", "createdAt": "2020-05-08T03:03:22Z", "author": {"login": "edalex-tom"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/ClassificationDialog.tsx", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import {\n+  Button,\n+  Dialog,\n+  DialogActions,\n+  DialogContent,\n+  DialogTitle,\n+  TextField,\n+} from \"@material-ui/core\";\n+import { commonString } from \"../../../util/commonstrings\";\n+import { languageStrings } from \"../../../util/langstrings\";\n+import { useEffect, useState } from \"react\";\n+import {\n+  FacetedSearchClassification,\n+  validateClassificationFields,\n+} from \"./FacetedSearchSettingsModule\";\n+\n+interface ClassificationDialogProps {\n+  /**\n+   * If true, the dialog will be shown.\n+   */\n+  open: boolean;\n+  /**\n+   * Fired when the dialog is closed.\n+   */\n+  onClose: () => void;\n+  /**\n+   * Fired when click the ADD button.\n+   */\n+  addOrEdit: (classification: FacetedSearchClassification) => void;\n+  /**\n+   * The classification to be edited; undefined if the action is to add a new one.\n+   */\n+  classification?: FacetedSearchClassification;\n+  /**\n+   * Error handling.\n+   */\n+  handleError: (error: Error) => void;\n+  /**\n+   * Current highest order index.\n+   */\n+  highestOrderIndex: number;\n+}\n+\n+/**\n+ * A dialog for adding/editing a Faceted search classification\n+ */\n+const ClassificationDialog = ({\n+  open,\n+  onClose,\n+  addOrEdit,\n+  handleError,\n+  classification,\n+  highestOrderIndex,\n+}: ClassificationDialogProps) => {\n+  const {\n+    facetedsearchsetting: facetedSearchSettingStrings,\n+  } = languageStrings.settings.searching;\n+  const { classification: classificationStrings } = facetedSearchSettingStrings;\n+\n+  const [name, setName] = useState<string>(\"\");\n+  const [schemaNode, setSchemaNode] = useState<string>(\"\");\n+  const [maxResults, setMaxResults] = useState<number | undefined>();\n+\n+  const isNameInvalid = validateClassificationFields(name);\n+  const isSchemaNodeInvalid = validateClassificationFields(schemaNode);\n+\n+  /**\n+   * Initialise textfields' values, depending on 'onClose'.\n+   */\n+  useEffect(() => {\n+    setName(classification ? classification.name : \"\");\n+    setSchemaNode(classification ? classification.schemaNode : \"\");\n+    setMaxResults(classification ? classification.maxResults : undefined);\n+  }, [onClose]);\n+\n+  const onAddOrEdit = () => {\n+    addOrEdit({\n+      name: name,\n+      schemaNode: schemaNode,\n+      maxResults: maxResults,\n+      orderIndex: highestOrderIndex + 1,\n+    });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed006ff5ac660ef8b29b300333a5897ea5410a8f"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjYyMjU2OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsModule.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMzowNTo1NVrOGSXYjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMzowNTo1NVrOGSXYjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxMDY3MA==", "bodyText": "Should this be classifications?", "url": "https://github.com/openequella/openEQUELLA/pull/1706#discussion_r421910670", "createdAt": "2020-05-08T03:05:55Z", "author": {"login": "edalex-tom"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsModule.ts", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import Axios from \"axios\";\n+import {\n+  BatchOperationResponse,\n+  groupErrorMessages,\n+} from \"../../../api/BatchOperationResponse\";\n+\n+export interface FacetedSearchClassification {\n+  /**\n+   * Name of a classification\n+   */\n+  name: string;\n+  /**\n+   * Schema node of a classification\n+   */\n+  schemaNode: string;\n+  /**\n+   * The number of category of a classification; Being undefined means the number is unlimited.\n+   */\n+  maxResults?: number;\n+  /**\n+   * Used for re-ordering classifications.\n+   */\n+  orderIndex: number;\n+}\n+\n+export interface ModifiedClassification extends FacetedSearchClassification {\n+  /**\n+   * A flag indicating creating or updating this classification on the Server.\n+   */\n+  changed: boolean;\n+  /**\n+   * A flag indicating deleting this classification from the Server.\n+   */\n+  deleted: boolean;\n+  /**\n+   * A flag indication if a classification hasn't been saved to the Server.\n+   */\n+  dirty: boolean;\n+}\n+\n+const FACETED_SEARCH_API_URL = \"api/settings/facetedsearch/classification\";\n+\n+export const getClassificationsFromServer = (): Promise<\n+  FacetedSearchClassification[]\n+> => Axios.get(FACETED_SEARCH_API_URL).then((res) => res.data);\n+\n+export const batchUpdateOrAdd = (\n+  classifitioncas: FacetedSearchClassification[]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed006ff5ac660ef8b29b300333a5897ea5410a8f"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjYyNTM0OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsModule.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMzowNzozN1rOGSXaPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMzowNzozN1rOGSXaPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxMTEwMw==", "bodyText": "This should be made a function or read only, otherwise it could be mutated by accident", "url": "https://github.com/openequella/openEQUELLA/pull/1706#discussion_r421911103", "createdAt": "2020-05-08T03:07:37Z", "author": {"login": "edalex-tom"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsModule.ts", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import Axios from \"axios\";\n+import {\n+  BatchOperationResponse,\n+  groupErrorMessages,\n+} from \"../../../api/BatchOperationResponse\";\n+\n+export interface FacetedSearchClassification {\n+  /**\n+   * Name of a classification\n+   */\n+  name: string;\n+  /**\n+   * Schema node of a classification\n+   */\n+  schemaNode: string;\n+  /**\n+   * The number of category of a classification; Being undefined means the number is unlimited.\n+   */\n+  maxResults?: number;\n+  /**\n+   * Used for re-ordering classifications.\n+   */\n+  orderIndex: number;\n+}\n+\n+export interface ModifiedClassification extends FacetedSearchClassification {\n+  /**\n+   * A flag indicating creating or updating this classification on the Server.\n+   */\n+  changed: boolean;\n+  /**\n+   * A flag indicating deleting this classification from the Server.\n+   */\n+  deleted: boolean;\n+  /**\n+   * A flag indication if a classification hasn't been saved to the Server.\n+   */\n+  dirty: boolean;\n+}\n+\n+const FACETED_SEARCH_API_URL = \"api/settings/facetedsearch/classification\";\n+\n+export const getClassificationsFromServer = (): Promise<\n+  FacetedSearchClassification[]\n+> => Axios.get(FACETED_SEARCH_API_URL).then((res) => res.data);\n+\n+export const batchUpdateOrAdd = (\n+  classifitioncas: FacetedSearchClassification[]\n+) =>\n+  Axios.put<BatchOperationResponse[]>(\n+    FACETED_SEARCH_API_URL,\n+    classifitioncas\n+  ).then((res) => groupErrorMessages(res.data));\n+\n+/**\n+ * Validate if trimmed name or schema node is empty.\n+ * Return true if they are invalid.\n+ */\n+export const validateClassificationFields = (field: string): boolean => {\n+  return !field?.trim();\n+};\n+\n+/**\n+ * Convert an instace of FacetedSearchClassification to an instace of ModifiedClassification.\n+ */\n+export const addFlags = (\n+  classification: FacetedSearchClassification,\n+  changed: boolean,\n+  deleted: boolean,\n+  dirty: boolean\n+): ModifiedClassification =>\n+  Object.assign(classification, {\n+    changed: changed,\n+    deleted: deleted,\n+    dirty: dirty,\n+  });\n+\n+/**\n+ * Convert an instace of ModifiedClassification to an instace of FacetedSearchClassification.\n+ */\n+export const removeFlags = (classification: ModifiedClassification) => {\n+  delete classification.deleted;\n+  delete classification.changed;\n+  delete classification.dirty;\n+  return classification;\n+};\n+\n+/**\n+ * Given a list of classifications, find the one that has the highest order index.\n+ */\n+export const getHighestOrderIndex = (\n+  classifications: ModifiedClassification[]\n+) => {\n+  const classification = classifications.reduce((prev, current) => {\n+    return prev.orderIndex > current.orderIndex ? prev : current;\n+  }, defaultClassifion);\n+  return classification.orderIndex;\n+};\n+\n+const defaultClassifion: FacetedSearchClassification = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed006ff5ac660ef8b29b300333a5897ea5410a8f"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjYzMTUyOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsModule.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMzoxMDo1M1rOGSXd2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMzoxMDo1M1rOGSXd2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxMjAyNA==", "bodyText": "This approach tends to scale poorly (e.g. if a new field is added to ModifiedClassification then this will still appear to work), as discussed this won't provide any type safety (it's also missing the return type).\nI'm not sure there's any better approaches though, I've had a brief look and there doesn't seem to be any nice way of converting interfaces and it can't be easily achieved with reflection on an interface", "url": "https://github.com/openequella/openEQUELLA/pull/1706#discussion_r421912024", "createdAt": "2020-05-08T03:10:53Z", "author": {"login": "edalex-tom"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsModule.ts", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import Axios from \"axios\";\n+import {\n+  BatchOperationResponse,\n+  groupErrorMessages,\n+} from \"../../../api/BatchOperationResponse\";\n+\n+export interface FacetedSearchClassification {\n+  /**\n+   * Name of a classification\n+   */\n+  name: string;\n+  /**\n+   * Schema node of a classification\n+   */\n+  schemaNode: string;\n+  /**\n+   * The number of category of a classification; Being undefined means the number is unlimited.\n+   */\n+  maxResults?: number;\n+  /**\n+   * Used for re-ordering classifications.\n+   */\n+  orderIndex: number;\n+}\n+\n+export interface ModifiedClassification extends FacetedSearchClassification {\n+  /**\n+   * A flag indicating creating or updating this classification on the Server.\n+   */\n+  changed: boolean;\n+  /**\n+   * A flag indicating deleting this classification from the Server.\n+   */\n+  deleted: boolean;\n+  /**\n+   * A flag indication if a classification hasn't been saved to the Server.\n+   */\n+  dirty: boolean;\n+}\n+\n+const FACETED_SEARCH_API_URL = \"api/settings/facetedsearch/classification\";\n+\n+export const getClassificationsFromServer = (): Promise<\n+  FacetedSearchClassification[]\n+> => Axios.get(FACETED_SEARCH_API_URL).then((res) => res.data);\n+\n+export const batchUpdateOrAdd = (\n+  classifitioncas: FacetedSearchClassification[]\n+) =>\n+  Axios.put<BatchOperationResponse[]>(\n+    FACETED_SEARCH_API_URL,\n+    classifitioncas\n+  ).then((res) => groupErrorMessages(res.data));\n+\n+/**\n+ * Validate if trimmed name or schema node is empty.\n+ * Return true if they are invalid.\n+ */\n+export const validateClassificationFields = (field: string): boolean => {\n+  return !field?.trim();\n+};\n+\n+/**\n+ * Convert an instace of FacetedSearchClassification to an instace of ModifiedClassification.\n+ */\n+export const addFlags = (\n+  classification: FacetedSearchClassification,\n+  changed: boolean,\n+  deleted: boolean,\n+  dirty: boolean\n+): ModifiedClassification =>\n+  Object.assign(classification, {\n+    changed: changed,\n+    deleted: deleted,\n+    dirty: dirty,\n+  });\n+\n+/**\n+ * Convert an instace of ModifiedClassification to an instace of FacetedSearchClassification.\n+ */\n+export const removeFlags = (classification: ModifiedClassification) => {\n+  delete classification.deleted;\n+  delete classification.changed;\n+  delete classification.dirty;\n+  return classification;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed006ff5ac660ef8b29b300333a5897ea5410a8f"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjYzNTU0OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsModule.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMzoxMzoxOVrOGSXgLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMzoxMzoxOVrOGSXgLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxMjYyMA==", "bodyText": "I'm not sure this provides any type safety, it may be better as a simple spread operator as that would\n\nnot mutate the original object, the classification instance is being modified here\ntypescript should pickup on any key mismatches\n\nIt may be simpler to just spread the extra values rather than having a addFlags method at all, needing to pass multiple booleans in a method may cause confusion as it's hard to track what the correct order when calling the method.  JS doc for the arguments may help as they'd give code hints for development", "url": "https://github.com/openequella/openEQUELLA/pull/1706#discussion_r421912620", "createdAt": "2020-05-08T03:13:19Z", "author": {"login": "edalex-tom"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsModule.ts", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import Axios from \"axios\";\n+import {\n+  BatchOperationResponse,\n+  groupErrorMessages,\n+} from \"../../../api/BatchOperationResponse\";\n+\n+export interface FacetedSearchClassification {\n+  /**\n+   * Name of a classification\n+   */\n+  name: string;\n+  /**\n+   * Schema node of a classification\n+   */\n+  schemaNode: string;\n+  /**\n+   * The number of category of a classification; Being undefined means the number is unlimited.\n+   */\n+  maxResults?: number;\n+  /**\n+   * Used for re-ordering classifications.\n+   */\n+  orderIndex: number;\n+}\n+\n+export interface ModifiedClassification extends FacetedSearchClassification {\n+  /**\n+   * A flag indicating creating or updating this classification on the Server.\n+   */\n+  changed: boolean;\n+  /**\n+   * A flag indicating deleting this classification from the Server.\n+   */\n+  deleted: boolean;\n+  /**\n+   * A flag indication if a classification hasn't been saved to the Server.\n+   */\n+  dirty: boolean;\n+}\n+\n+const FACETED_SEARCH_API_URL = \"api/settings/facetedsearch/classification\";\n+\n+export const getClassificationsFromServer = (): Promise<\n+  FacetedSearchClassification[]\n+> => Axios.get(FACETED_SEARCH_API_URL).then((res) => res.data);\n+\n+export const batchUpdateOrAdd = (\n+  classifitioncas: FacetedSearchClassification[]\n+) =>\n+  Axios.put<BatchOperationResponse[]>(\n+    FACETED_SEARCH_API_URL,\n+    classifitioncas\n+  ).then((res) => groupErrorMessages(res.data));\n+\n+/**\n+ * Validate if trimmed name or schema node is empty.\n+ * Return true if they are invalid.\n+ */\n+export const validateClassificationFields = (field: string): boolean => {\n+  return !field?.trim();\n+};\n+\n+/**\n+ * Convert an instace of FacetedSearchClassification to an instace of ModifiedClassification.\n+ */\n+export const addFlags = (\n+  classification: FacetedSearchClassification,\n+  changed: boolean,\n+  deleted: boolean,\n+  dirty: boolean\n+): ModifiedClassification =>\n+  Object.assign(classification, {\n+    changed: changed,\n+    deleted: deleted,\n+    dirty: dirty,\n+  });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed006ff5ac660ef8b29b300333a5897ea5410a8f"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjY0MjU5OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsModule.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMzoxNzozNlrOGSXkNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMzoxNzozNlrOGSXkNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxMzY1Mg==", "bodyText": "Could be simplified with a .map and Math.max. the reduce is better if there's a need to get the object itself rather than just the orderIndex", "url": "https://github.com/openequella/openEQUELLA/pull/1706#discussion_r421913652", "createdAt": "2020-05-08T03:17:36Z", "author": {"login": "edalex-tom"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsModule.ts", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import Axios from \"axios\";\n+import {\n+  BatchOperationResponse,\n+  groupErrorMessages,\n+} from \"../../../api/BatchOperationResponse\";\n+\n+export interface FacetedSearchClassification {\n+  /**\n+   * Name of a classification\n+   */\n+  name: string;\n+  /**\n+   * Schema node of a classification\n+   */\n+  schemaNode: string;\n+  /**\n+   * The number of category of a classification; Being undefined means the number is unlimited.\n+   */\n+  maxResults?: number;\n+  /**\n+   * Used for re-ordering classifications.\n+   */\n+  orderIndex: number;\n+}\n+\n+export interface ModifiedClassification extends FacetedSearchClassification {\n+  /**\n+   * A flag indicating creating or updating this classification on the Server.\n+   */\n+  changed: boolean;\n+  /**\n+   * A flag indicating deleting this classification from the Server.\n+   */\n+  deleted: boolean;\n+  /**\n+   * A flag indication if a classification hasn't been saved to the Server.\n+   */\n+  dirty: boolean;\n+}\n+\n+const FACETED_SEARCH_API_URL = \"api/settings/facetedsearch/classification\";\n+\n+export const getClassificationsFromServer = (): Promise<\n+  FacetedSearchClassification[]\n+> => Axios.get(FACETED_SEARCH_API_URL).then((res) => res.data);\n+\n+export const batchUpdateOrAdd = (\n+  classifitioncas: FacetedSearchClassification[]\n+) =>\n+  Axios.put<BatchOperationResponse[]>(\n+    FACETED_SEARCH_API_URL,\n+    classifitioncas\n+  ).then((res) => groupErrorMessages(res.data));\n+\n+/**\n+ * Validate if trimmed name or schema node is empty.\n+ * Return true if they are invalid.\n+ */\n+export const validateClassificationFields = (field: string): boolean => {\n+  return !field?.trim();\n+};\n+\n+/**\n+ * Convert an instace of FacetedSearchClassification to an instace of ModifiedClassification.\n+ */\n+export const addFlags = (\n+  classification: FacetedSearchClassification,\n+  changed: boolean,\n+  deleted: boolean,\n+  dirty: boolean\n+): ModifiedClassification =>\n+  Object.assign(classification, {\n+    changed: changed,\n+    deleted: deleted,\n+    dirty: dirty,\n+  });\n+\n+/**\n+ * Convert an instace of ModifiedClassification to an instace of FacetedSearchClassification.\n+ */\n+export const removeFlags = (classification: ModifiedClassification) => {\n+  delete classification.deleted;\n+  delete classification.changed;\n+  delete classification.dirty;\n+  return classification;\n+};\n+\n+/**\n+ * Given a list of classifications, find the one that has the highest order index.\n+ */\n+export const getHighestOrderIndex = (\n+  classifications: ModifiedClassification[]\n+) => {\n+  const classification = classifications.reduce((prev, current) => {\n+    return prev.orderIndex > current.orderIndex ? prev : current;\n+  }, defaultClassifion);\n+  return classification.orderIndex;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed006ff5ac660ef8b29b300333a5897ea5410a8f"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjY0Mzk2OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsPage.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMzoxODozM1rOGSXlBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMzoxODozM1rOGSXlBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxMzg2MA==", "bodyText": "Not sure the comments should be here, it's dictating how the state is used when ideally this is just defining state.", "url": "https://github.com/openequella/openEQUELLA/pull/1706#discussion_r421913860", "createdAt": "2020-05-08T03:18:33Z", "author": {"login": "edalex-tom"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsPage.tsx", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps,\n+} from \"../../../mainui/Template\";\n+import SettingPageTemplate from \"../../../components/SettingPageTemplate\";\n+import { useState } from \"react\";\n+import {\n+  Card,\n+  CardActions,\n+  IconButton,\n+  List,\n+  ListItem,\n+  ListItemSecondaryAction,\n+  ListItemText,\n+  ListSubheader,\n+  makeStyles,\n+} from \"@material-ui/core\";\n+import { languageStrings } from \"../../../util/langstrings\";\n+import {\n+  addFlags,\n+  batchUpdateOrAdd,\n+  ModifiedClassification,\n+  FacetedSearchClassification,\n+  getClassificationsFromServer,\n+  removeFlags,\n+  getHighestOrderIndex,\n+} from \"./FacetedSearchSettingsModule\";\n+import EditIcon from \"@material-ui/icons/Edit\";\n+import DeleteIcon from \"@material-ui/icons/Delete\";\n+import AddCircleIcon from \"@material-ui/icons/AddCircle\";\n+import ClassificationDialog from \"./ClassificationDialog\";\n+import { useEffect } from \"react\";\n+import { routes } from \"../../../mainui/routes\";\n+import { addElement } from \"../../../util/ImmutableArrayUtil\";\n+import { generateFromError } from \"../../../api/errors\";\n+import MessageDialog from \"../../../components/MessageDialog\";\n+import { commonString } from \"../../../util/commonstrings\";\n+\n+const useStyles = makeStyles({\n+  spacedCards: {\n+    margin: \"16px\",\n+    width: \"75%\",\n+    padding: \"16px\",\n+    float: \"left\",\n+  },\n+  cardAction: {\n+    display: \"flex\",\n+    justifyContent: \"flex-end\",\n+  },\n+});\n+\n+/**\n+ * A page for setting Faceted search classifications.\n+ */\n+const FacetedSearchSettingsPage = ({ updateTemplate }: TemplateUpdateProps) => {\n+  const facetedsearchsettingStrings =\n+    languageStrings.settings.searching.facetedsearchsetting;\n+  const classes = useStyles();\n+\n+  // Show the snackbar when all the status of a 207 response is 2xx.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed006ff5ac660ef8b29b300333a5897ea5410a8f"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjY0NjkzOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsPage.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMzoxOTo1M1rOGSXmhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMzoxOTo1M1rOGSXmhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxNDI0NQ==", "bodyText": "not sure addOrEditQueue is describing what this is actually doing", "url": "https://github.com/openequella/openEQUELLA/pull/1706#discussion_r421914245", "createdAt": "2020-05-08T03:19:53Z", "author": {"login": "edalex-tom"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsPage.tsx", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps,\n+} from \"../../../mainui/Template\";\n+import SettingPageTemplate from \"../../../components/SettingPageTemplate\";\n+import { useState } from \"react\";\n+import {\n+  Card,\n+  CardActions,\n+  IconButton,\n+  List,\n+  ListItem,\n+  ListItemSecondaryAction,\n+  ListItemText,\n+  ListSubheader,\n+  makeStyles,\n+} from \"@material-ui/core\";\n+import { languageStrings } from \"../../../util/langstrings\";\n+import {\n+  addFlags,\n+  batchUpdateOrAdd,\n+  ModifiedClassification,\n+  FacetedSearchClassification,\n+  getClassificationsFromServer,\n+  removeFlags,\n+  getHighestOrderIndex,\n+} from \"./FacetedSearchSettingsModule\";\n+import EditIcon from \"@material-ui/icons/Edit\";\n+import DeleteIcon from \"@material-ui/icons/Delete\";\n+import AddCircleIcon from \"@material-ui/icons/AddCircle\";\n+import ClassificationDialog from \"./ClassificationDialog\";\n+import { useEffect } from \"react\";\n+import { routes } from \"../../../mainui/routes\";\n+import { addElement } from \"../../../util/ImmutableArrayUtil\";\n+import { generateFromError } from \"../../../api/errors\";\n+import MessageDialog from \"../../../components/MessageDialog\";\n+import { commonString } from \"../../../util/commonstrings\";\n+\n+const useStyles = makeStyles({\n+  spacedCards: {\n+    margin: \"16px\",\n+    width: \"75%\",\n+    padding: \"16px\",\n+    float: \"left\",\n+  },\n+  cardAction: {\n+    display: \"flex\",\n+    justifyContent: \"flex-end\",\n+  },\n+});\n+\n+/**\n+ * A page for setting Faceted search classifications.\n+ */\n+const FacetedSearchSettingsPage = ({ updateTemplate }: TemplateUpdateProps) => {\n+  const facetedsearchsettingStrings =\n+    languageStrings.settings.searching.facetedsearchsetting;\n+  const classes = useStyles();\n+\n+  // Show the snackbar when all the status of a 207 response is 2xx.\n+  const [showSnackBar, setShowSnackBar] = useState<boolean>(false);\n+  // Show a message dialog when a 207 response includes any status that's 4xx.\n+  const [showResultDialog, setShowResultDialog] = useState<boolean>(false);\n+  const [resultMessages, setResultMessagesMessages] = useState<string[]>([]);\n+\n+  const [showEditingDialog, setShowEditingDialog] = useState<boolean>(false);\n+  const [classifications, setClassifications] = useState<\n+    ModifiedClassification[]\n+  >([]);\n+\n+  const addOrEditQueue = classifications\n+    .filter((classification) => classification.changed)\n+    .map((classification) => removeFlags(classification));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed006ff5ac660ef8b29b300333a5897ea5410a8f"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjY1MTA5OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsPage.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMzoyMjo0MVrOGSXo5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMzoyMjo0MVrOGSXo5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxNDg1NQ==", "bodyText": "Having trouble identifying why errorMessages is defined, it looks like the messages could be used directly", "url": "https://github.com/openequella/openEQUELLA/pull/1706#discussion_r421914855", "createdAt": "2020-05-08T03:22:41Z", "author": {"login": "edalex-tom"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsPage.tsx", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps,\n+} from \"../../../mainui/Template\";\n+import SettingPageTemplate from \"../../../components/SettingPageTemplate\";\n+import { useState } from \"react\";\n+import {\n+  Card,\n+  CardActions,\n+  IconButton,\n+  List,\n+  ListItem,\n+  ListItemSecondaryAction,\n+  ListItemText,\n+  ListSubheader,\n+  makeStyles,\n+} from \"@material-ui/core\";\n+import { languageStrings } from \"../../../util/langstrings\";\n+import {\n+  addFlags,\n+  batchUpdateOrAdd,\n+  ModifiedClassification,\n+  FacetedSearchClassification,\n+  getClassificationsFromServer,\n+  removeFlags,\n+  getHighestOrderIndex,\n+} from \"./FacetedSearchSettingsModule\";\n+import EditIcon from \"@material-ui/icons/Edit\";\n+import DeleteIcon from \"@material-ui/icons/Delete\";\n+import AddCircleIcon from \"@material-ui/icons/AddCircle\";\n+import ClassificationDialog from \"./ClassificationDialog\";\n+import { useEffect } from \"react\";\n+import { routes } from \"../../../mainui/routes\";\n+import { addElement } from \"../../../util/ImmutableArrayUtil\";\n+import { generateFromError } from \"../../../api/errors\";\n+import MessageDialog from \"../../../components/MessageDialog\";\n+import { commonString } from \"../../../util/commonstrings\";\n+\n+const useStyles = makeStyles({\n+  spacedCards: {\n+    margin: \"16px\",\n+    width: \"75%\",\n+    padding: \"16px\",\n+    float: \"left\",\n+  },\n+  cardAction: {\n+    display: \"flex\",\n+    justifyContent: \"flex-end\",\n+  },\n+});\n+\n+/**\n+ * A page for setting Faceted search classifications.\n+ */\n+const FacetedSearchSettingsPage = ({ updateTemplate }: TemplateUpdateProps) => {\n+  const facetedsearchsettingStrings =\n+    languageStrings.settings.searching.facetedsearchsetting;\n+  const classes = useStyles();\n+\n+  // Show the snackbar when all the status of a 207 response is 2xx.\n+  const [showSnackBar, setShowSnackBar] = useState<boolean>(false);\n+  // Show a message dialog when a 207 response includes any status that's 4xx.\n+  const [showResultDialog, setShowResultDialog] = useState<boolean>(false);\n+  const [resultMessages, setResultMessagesMessages] = useState<string[]>([]);\n+\n+  const [showEditingDialog, setShowEditingDialog] = useState<boolean>(false);\n+  const [classifications, setClassifications] = useState<\n+    ModifiedClassification[]\n+  >([]);\n+\n+  const addOrEditQueue = classifications\n+    .filter((classification) => classification.changed)\n+    .map((classification) => removeFlags(classification));\n+  const changesUnsaved = addOrEditQueue.length > 0;\n+\n+  /**\n+   * Update the page title and back route, and get a list of classifications.\n+   */\n+  useEffect(() => {\n+    updateTemplate((tp) => ({\n+      ...templateDefaults(facetedsearchsettingStrings.name)(tp),\n+      backRoute: routes.Settings.to,\n+    }));\n+    getClassifications();\n+  }, []);\n+\n+  const getClassifications = () => {\n+    getClassificationsFromServer().then((classifications) => {\n+      setClassifications(\n+        classifications.map((classification) => {\n+          return addFlags(classification, false, false, false);\n+        })\n+      );\n+    });\n+  };\n+\n+  /**\n+   * Save classifications in the queue to the Server.\n+   * Show the message dialog if any error message is received otherwise show snackbar.\n+   */\n+  const save = () => {\n+    const errorMessages: string[] = [];\n+    batchUpdateOrAdd(addOrEditQueue)\n+      .then((messages) => {\n+        errorMessages.push(...messages);\n+        if (errorMessages.length > 0) {\n+          setResultMessagesMessages(errorMessages);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed006ff5ac660ef8b29b300333a5897ea5410a8f"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjY1OTE0OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsPage.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMzoyNzoxOVrOGSXtoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNDo0NzozOVrOGSY5xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxNjA2NQ==", "bodyText": "May be going into component overdrive (i.e. writing too many generic components) but this could be a common AddButton which would standardise it and reduce the need to import IconButton + Icon", "url": "https://github.com/openequella/openEQUELLA/pull/1706#discussion_r421916065", "createdAt": "2020-05-08T03:27:19Z", "author": {"login": "edalex-tom"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsPage.tsx", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps,\n+} from \"../../../mainui/Template\";\n+import SettingPageTemplate from \"../../../components/SettingPageTemplate\";\n+import { useState } from \"react\";\n+import {\n+  Card,\n+  CardActions,\n+  IconButton,\n+  List,\n+  ListItem,\n+  ListItemSecondaryAction,\n+  ListItemText,\n+  ListSubheader,\n+  makeStyles,\n+} from \"@material-ui/core\";\n+import { languageStrings } from \"../../../util/langstrings\";\n+import {\n+  addFlags,\n+  batchUpdateOrAdd,\n+  ModifiedClassification,\n+  FacetedSearchClassification,\n+  getClassificationsFromServer,\n+  removeFlags,\n+  getHighestOrderIndex,\n+} from \"./FacetedSearchSettingsModule\";\n+import EditIcon from \"@material-ui/icons/Edit\";\n+import DeleteIcon from \"@material-ui/icons/Delete\";\n+import AddCircleIcon from \"@material-ui/icons/AddCircle\";\n+import ClassificationDialog from \"./ClassificationDialog\";\n+import { useEffect } from \"react\";\n+import { routes } from \"../../../mainui/routes\";\n+import { addElement } from \"../../../util/ImmutableArrayUtil\";\n+import { generateFromError } from \"../../../api/errors\";\n+import MessageDialog from \"../../../components/MessageDialog\";\n+import { commonString } from \"../../../util/commonstrings\";\n+\n+const useStyles = makeStyles({\n+  spacedCards: {\n+    margin: \"16px\",\n+    width: \"75%\",\n+    padding: \"16px\",\n+    float: \"left\",\n+  },\n+  cardAction: {\n+    display: \"flex\",\n+    justifyContent: \"flex-end\",\n+  },\n+});\n+\n+/**\n+ * A page for setting Faceted search classifications.\n+ */\n+const FacetedSearchSettingsPage = ({ updateTemplate }: TemplateUpdateProps) => {\n+  const facetedsearchsettingStrings =\n+    languageStrings.settings.searching.facetedsearchsetting;\n+  const classes = useStyles();\n+\n+  // Show the snackbar when all the status of a 207 response is 2xx.\n+  const [showSnackBar, setShowSnackBar] = useState<boolean>(false);\n+  // Show a message dialog when a 207 response includes any status that's 4xx.\n+  const [showResultDialog, setShowResultDialog] = useState<boolean>(false);\n+  const [resultMessages, setResultMessagesMessages] = useState<string[]>([]);\n+\n+  const [showEditingDialog, setShowEditingDialog] = useState<boolean>(false);\n+  const [classifications, setClassifications] = useState<\n+    ModifiedClassification[]\n+  >([]);\n+\n+  const addOrEditQueue = classifications\n+    .filter((classification) => classification.changed)\n+    .map((classification) => removeFlags(classification));\n+  const changesUnsaved = addOrEditQueue.length > 0;\n+\n+  /**\n+   * Update the page title and back route, and get a list of classifications.\n+   */\n+  useEffect(() => {\n+    updateTemplate((tp) => ({\n+      ...templateDefaults(facetedsearchsettingStrings.name)(tp),\n+      backRoute: routes.Settings.to,\n+    }));\n+    getClassifications();\n+  }, []);\n+\n+  const getClassifications = () => {\n+    getClassificationsFromServer().then((classifications) => {\n+      setClassifications(\n+        classifications.map((classification) => {\n+          return addFlags(classification, false, false, false);\n+        })\n+      );\n+    });\n+  };\n+\n+  /**\n+   * Save classifications in the queue to the Server.\n+   * Show the message dialog if any error message is received otherwise show snackbar.\n+   */\n+  const save = () => {\n+    const errorMessages: string[] = [];\n+    batchUpdateOrAdd(addOrEditQueue)\n+      .then((messages) => {\n+        errorMessages.push(...messages);\n+        if (errorMessages.length > 0) {\n+          setResultMessagesMessages(errorMessages);\n+          setShowResultDialog(true);\n+        } else {\n+          setShowSnackBar(true);\n+        }\n+      })\n+      .catch((error) => handleError(error))\n+      .finally(() => getClassifications());\n+  };\n+\n+  /**\n+   * Visually add/update a classification\n+   */\n+  const addOrEdit = (classification: FacetedSearchClassification) => {\n+    setClassifications(\n+      addElement(classifications, addFlags(classification, true, false, true))\n+    );\n+  };\n+\n+  /**\n+   * Error handling which throws a new error in order to break chained 'then'.\n+   */\n+  const handleError = (error: Error) => {\n+    updateTemplate(templateError(generateFromError(error)));\n+    throw new Error(error.message);\n+  };\n+\n+  return (\n+    <SettingPageTemplate\n+      onSave={save}\n+      saveButtonDisabled={!changesUnsaved}\n+      snackbarOpen={showSnackBar}\n+      snackBarOnClose={() => setShowSnackBar(false)}\n+      preventNavigation={changesUnsaved}\n+    >\n+      <Card className={classes.spacedCards}>\n+        <List\n+          subheader={\n+            <ListSubheader disableGutters>\n+              {facetedsearchsettingStrings.name}\n+            </ListSubheader>\n+          }\n+        >\n+          {classifications\n+            .filter((classification) => !classification.deleted)\n+            .map((classification, index) => {\n+              return (\n+                <ListItem divider={true} key={index}>\n+                  <ListItemText primary={classification.name} />\n+                  <ListItemSecondaryAction>\n+                    <IconButton color={\"secondary\"}>\n+                      <EditIcon />\n+                    </IconButton>\n+                    |\n+                    <IconButton color=\"secondary\">\n+                      <DeleteIcon />\n+                    </IconButton>\n+                  </ListItemSecondaryAction>\n+                </ListItem>\n+              );\n+            })}\n+        </List>\n+        <CardActions className={classes.cardAction}>\n+          <IconButton\n+            onClick={() => setShowEditingDialog(true)}\n+            aria-label={facetedsearchsettingStrings.add}\n+            color={\"primary\"}\n+          >\n+            <AddCircleIcon fontSize={\"large\"} />\n+          </IconButton>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed006ff5ac660ef8b29b300333a5897ea5410a8f"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzNTU1Ng==", "bodyText": "I will talk to Ian in sprint review and see if we want to do another commonality refactoring.", "url": "https://github.com/openequella/openEQUELLA/pull/1706#discussion_r421935556", "createdAt": "2020-05-08T04:47:39Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsPage.tsx", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps,\n+} from \"../../../mainui/Template\";\n+import SettingPageTemplate from \"../../../components/SettingPageTemplate\";\n+import { useState } from \"react\";\n+import {\n+  Card,\n+  CardActions,\n+  IconButton,\n+  List,\n+  ListItem,\n+  ListItemSecondaryAction,\n+  ListItemText,\n+  ListSubheader,\n+  makeStyles,\n+} from \"@material-ui/core\";\n+import { languageStrings } from \"../../../util/langstrings\";\n+import {\n+  addFlags,\n+  batchUpdateOrAdd,\n+  ModifiedClassification,\n+  FacetedSearchClassification,\n+  getClassificationsFromServer,\n+  removeFlags,\n+  getHighestOrderIndex,\n+} from \"./FacetedSearchSettingsModule\";\n+import EditIcon from \"@material-ui/icons/Edit\";\n+import DeleteIcon from \"@material-ui/icons/Delete\";\n+import AddCircleIcon from \"@material-ui/icons/AddCircle\";\n+import ClassificationDialog from \"./ClassificationDialog\";\n+import { useEffect } from \"react\";\n+import { routes } from \"../../../mainui/routes\";\n+import { addElement } from \"../../../util/ImmutableArrayUtil\";\n+import { generateFromError } from \"../../../api/errors\";\n+import MessageDialog from \"../../../components/MessageDialog\";\n+import { commonString } from \"../../../util/commonstrings\";\n+\n+const useStyles = makeStyles({\n+  spacedCards: {\n+    margin: \"16px\",\n+    width: \"75%\",\n+    padding: \"16px\",\n+    float: \"left\",\n+  },\n+  cardAction: {\n+    display: \"flex\",\n+    justifyContent: \"flex-end\",\n+  },\n+});\n+\n+/**\n+ * A page for setting Faceted search classifications.\n+ */\n+const FacetedSearchSettingsPage = ({ updateTemplate }: TemplateUpdateProps) => {\n+  const facetedsearchsettingStrings =\n+    languageStrings.settings.searching.facetedsearchsetting;\n+  const classes = useStyles();\n+\n+  // Show the snackbar when all the status of a 207 response is 2xx.\n+  const [showSnackBar, setShowSnackBar] = useState<boolean>(false);\n+  // Show a message dialog when a 207 response includes any status that's 4xx.\n+  const [showResultDialog, setShowResultDialog] = useState<boolean>(false);\n+  const [resultMessages, setResultMessagesMessages] = useState<string[]>([]);\n+\n+  const [showEditingDialog, setShowEditingDialog] = useState<boolean>(false);\n+  const [classifications, setClassifications] = useState<\n+    ModifiedClassification[]\n+  >([]);\n+\n+  const addOrEditQueue = classifications\n+    .filter((classification) => classification.changed)\n+    .map((classification) => removeFlags(classification));\n+  const changesUnsaved = addOrEditQueue.length > 0;\n+\n+  /**\n+   * Update the page title and back route, and get a list of classifications.\n+   */\n+  useEffect(() => {\n+    updateTemplate((tp) => ({\n+      ...templateDefaults(facetedsearchsettingStrings.name)(tp),\n+      backRoute: routes.Settings.to,\n+    }));\n+    getClassifications();\n+  }, []);\n+\n+  const getClassifications = () => {\n+    getClassificationsFromServer().then((classifications) => {\n+      setClassifications(\n+        classifications.map((classification) => {\n+          return addFlags(classification, false, false, false);\n+        })\n+      );\n+    });\n+  };\n+\n+  /**\n+   * Save classifications in the queue to the Server.\n+   * Show the message dialog if any error message is received otherwise show snackbar.\n+   */\n+  const save = () => {\n+    const errorMessages: string[] = [];\n+    batchUpdateOrAdd(addOrEditQueue)\n+      .then((messages) => {\n+        errorMessages.push(...messages);\n+        if (errorMessages.length > 0) {\n+          setResultMessagesMessages(errorMessages);\n+          setShowResultDialog(true);\n+        } else {\n+          setShowSnackBar(true);\n+        }\n+      })\n+      .catch((error) => handleError(error))\n+      .finally(() => getClassifications());\n+  };\n+\n+  /**\n+   * Visually add/update a classification\n+   */\n+  const addOrEdit = (classification: FacetedSearchClassification) => {\n+    setClassifications(\n+      addElement(classifications, addFlags(classification, true, false, true))\n+    );\n+  };\n+\n+  /**\n+   * Error handling which throws a new error in order to break chained 'then'.\n+   */\n+  const handleError = (error: Error) => {\n+    updateTemplate(templateError(generateFromError(error)));\n+    throw new Error(error.message);\n+  };\n+\n+  return (\n+    <SettingPageTemplate\n+      onSave={save}\n+      saveButtonDisabled={!changesUnsaved}\n+      snackbarOpen={showSnackBar}\n+      snackBarOnClose={() => setShowSnackBar(false)}\n+      preventNavigation={changesUnsaved}\n+    >\n+      <Card className={classes.spacedCards}>\n+        <List\n+          subheader={\n+            <ListSubheader disableGutters>\n+              {facetedsearchsettingStrings.name}\n+            </ListSubheader>\n+          }\n+        >\n+          {classifications\n+            .filter((classification) => !classification.deleted)\n+            .map((classification, index) => {\n+              return (\n+                <ListItem divider={true} key={index}>\n+                  <ListItemText primary={classification.name} />\n+                  <ListItemSecondaryAction>\n+                    <IconButton color={\"secondary\"}>\n+                      <EditIcon />\n+                    </IconButton>\n+                    |\n+                    <IconButton color=\"secondary\">\n+                      <DeleteIcon />\n+                    </IconButton>\n+                  </ListItemSecondaryAction>\n+                </ListItem>\n+              );\n+            })}\n+        </List>\n+        <CardActions className={classes.cardAction}>\n+          <IconButton\n+            onClick={() => setShowEditingDialog(true)}\n+            aria-label={facetedsearchsettingStrings.add}\n+            color={\"primary\"}\n+          >\n+            <AddCircleIcon fontSize={\"large\"} />\n+          </IconButton>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxNjA2NQ=="}, "originalCommit": {"oid": "ed006ff5ac660ef8b29b300333a5897ea5410a8f"}, "originalPosition": 195}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjI4ODcyOnYy", "diffSide": "LEFT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/components/MessageDialog.tsx", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQyMzoxODoxNFrOGTIebg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMDo0Mzo1OVrOGTJJiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcxNDk5MA==", "bodyText": "Why was this removed?", "url": "https://github.com/openequella/openEQUELLA/pull/1706#discussion_r422714990", "createdAt": "2020-05-10T23:18:14Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/components/MessageDialog.tsx", "diffHunk": "@@ -30,25 +30,24 @@ import { commonString } from \"../util/commonstrings\";\n interface MessageDialogProps {\n   open: boolean;\n   title: string;\n-  subtitle: string;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8365a61d4734153a196b736cd4a314253613a71f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcxOTg1OA==", "bodyText": "It looks like Penghai wanted to use this component without the subtitle - but removing the option to do so limits the component. Better to make it an optional prop.", "url": "https://github.com/openequella/openEQUELLA/pull/1706#discussion_r422719858", "createdAt": "2020-05-10T23:57:36Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/components/MessageDialog.tsx", "diffHunk": "@@ -30,25 +30,24 @@ import { commonString } from \"../util/commonstrings\";\n interface MessageDialogProps {\n   open: boolean;\n   title: string;\n-  subtitle: string;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcxNDk5MA=="}, "originalCommit": {"oid": "8365a61d4734153a196b736cd4a314253613a71f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcyMDE0Ng==", "bodyText": "I found the other two dialogs(AdminDownloadDialog and ConfirmDialog) do not have a subtitle, and none of the MUI Dialog examples use subtitle. So I removed it.", "url": "https://github.com/openequella/openEQUELLA/pull/1706#discussion_r422720146", "createdAt": "2020-05-11T00:00:05Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/components/MessageDialog.tsx", "diffHunk": "@@ -30,25 +30,24 @@ import { commonString } from \"../util/commonstrings\";\n interface MessageDialogProps {\n   open: boolean;\n   title: string;\n-  subtitle: string;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcxNDk5MA=="}, "originalCommit": {"oid": "8365a61d4734153a196b736cd4a314253613a71f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcyNjAyNQ==", "bodyText": "Gotcha. Good plan. \ud83d\udc4d", "url": "https://github.com/openequella/openEQUELLA/pull/1706#discussion_r422726025", "createdAt": "2020-05-11T00:43:59Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/components/MessageDialog.tsx", "diffHunk": "@@ -30,25 +30,24 @@ import { commonString } from \"../util/commonstrings\";\n interface MessageDialogProps {\n   open: boolean;\n   title: string;\n-  subtitle: string;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcxNDk5MA=="}, "originalCommit": {"oid": "8365a61d4734153a196b736cd4a314253613a71f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjI5MTcwOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetDialog.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQyMzoyMToyN1rOGTIf9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQyMzoyMToyN1rOGTIf9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcxNTM4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            interface facetDialogProps {\n          \n          \n            \n            interface FacetDialogProps {", "url": "https://github.com/openequella/openEQUELLA/pull/1706#discussion_r422715383", "createdAt": "2020-05-10T23:21:27Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetDialog.tsx", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import {\n+  Button,\n+  Dialog,\n+  DialogActions,\n+  DialogContent,\n+  DialogTitle,\n+  TextField,\n+} from \"@material-ui/core\";\n+import { commonString } from \"../../../util/commonstrings\";\n+import { languageStrings } from \"../../../util/langstrings\";\n+import { useEffect, useState } from \"react\";\n+import {\n+  FacetWithFlags,\n+  validateFacetFields,\n+} from \"./FacetedSearchSettingsModule\";\n+\n+interface facetDialogProps {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8365a61d4734153a196b736cd4a314253613a71f"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjI5NTc3OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetDialog.tsx", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQyMzoyNToyNVrOGTIh8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMTo0MjoxNlrOGTJ45w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcxNTg5MA==", "bodyText": "Feels like this logic should be in the calling component. Actually, indeed if this is an 'edit' then this shouldn't change at all. So yes, this should be logic in the addOrEdit method and highestOrderIndex should be removed from the props interface.", "url": "https://github.com/openequella/openEQUELLA/pull/1706#discussion_r422715890", "createdAt": "2020-05-10T23:25:25Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetDialog.tsx", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import {\n+  Button,\n+  Dialog,\n+  DialogActions,\n+  DialogContent,\n+  DialogTitle,\n+  TextField,\n+} from \"@material-ui/core\";\n+import { commonString } from \"../../../util/commonstrings\";\n+import { languageStrings } from \"../../../util/langstrings\";\n+import { useEffect, useState } from \"react\";\n+import {\n+  FacetWithFlags,\n+  validateFacetFields,\n+} from \"./FacetedSearchSettingsModule\";\n+\n+interface facetDialogProps {\n+  /**\n+   * If true, the dialog will be shown.\n+   */\n+  open: boolean;\n+  /**\n+   * Fired when the dialog is closed.\n+   */\n+  onClose: () => void;\n+  /**\n+   * Fired when click the ADD button.\n+   */\n+  addOrEdit: (facet: FacetWithFlags) => void;\n+  /**\n+   * The facet to be edited; undefined if the action is to add a new one.\n+   */\n+  facet?: FacetWithFlags;\n+  /**\n+   * Error handling.\n+   */\n+  handleError: (error: Error) => void;\n+  /**\n+   * Current highest order index.\n+   */\n+  highestOrderIndex: number;\n+}\n+\n+/**\n+ * A dialog for adding/editing a facet\n+ */\n+const FacetDialog = ({\n+  open,\n+  onClose,\n+  addOrEdit,\n+  handleError,\n+  facet,\n+  highestOrderIndex,\n+}: facetDialogProps) => {\n+  const {\n+    facetedsearchsetting: facetedSearchSettingStrings,\n+  } = languageStrings.settings.searching;\n+  const { facetfields: facetFieldStrings } = facetedSearchSettingStrings;\n+\n+  const [name, setName] = useState<string>(\"\");\n+  const [schemaNode, setSchemaNode] = useState<string>(\"\");\n+  const [maxResults, setMaxResults] = useState<number | undefined>();\n+\n+  const isNameInvalid = validateFacetFields(name);\n+  const isSchemaNodeInvalid = validateFacetFields(schemaNode);\n+\n+  /**\n+   * Initialise textfields' values, depending on 'onClose'.\n+   */\n+  useEffect(() => {\n+    setName(facet?.name ?? \"\");\n+    setSchemaNode(facet?.schemaNode ?? \"\");\n+    setMaxResults(facet?.maxResults);\n+  }, [onClose]);\n+\n+  const onAddOrEdit = () => {\n+    addOrEdit({\n+      name,\n+      schemaNode,\n+      maxResults,\n+      orderIndex: highestOrderIndex + 1,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8365a61d4734153a196b736cd4a314253613a71f"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcyMTA4Mg==", "bodyText": "my code was looking like this :\nlet newFacet: FacetWithFlags;\nif(!facet){\nnewFacet = {\nname,\nschemaNode,\nmaxResults,\norderIndex: highestOrderIndex + 1,\nupdated: true,\ndeleted: false,\ndirty: true,\n}\n}\nelse{\nnewFacet = {\n...facet,\nname,\nschemaNode,\nmaxResults,\nupdated: true\n}\n}\naddOrEdit(newFacet);\nBased on whether facet is undefined or not we know this action is adding or updating. And then construct an object based on this action.\nBut before I opened a PR I simplified this function as this PR only focuses on adding.", "url": "https://github.com/openequella/openEQUELLA/pull/1706#discussion_r422721082", "createdAt": "2020-05-11T00:08:07Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetDialog.tsx", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import {\n+  Button,\n+  Dialog,\n+  DialogActions,\n+  DialogContent,\n+  DialogTitle,\n+  TextField,\n+} from \"@material-ui/core\";\n+import { commonString } from \"../../../util/commonstrings\";\n+import { languageStrings } from \"../../../util/langstrings\";\n+import { useEffect, useState } from \"react\";\n+import {\n+  FacetWithFlags,\n+  validateFacetFields,\n+} from \"./FacetedSearchSettingsModule\";\n+\n+interface facetDialogProps {\n+  /**\n+   * If true, the dialog will be shown.\n+   */\n+  open: boolean;\n+  /**\n+   * Fired when the dialog is closed.\n+   */\n+  onClose: () => void;\n+  /**\n+   * Fired when click the ADD button.\n+   */\n+  addOrEdit: (facet: FacetWithFlags) => void;\n+  /**\n+   * The facet to be edited; undefined if the action is to add a new one.\n+   */\n+  facet?: FacetWithFlags;\n+  /**\n+   * Error handling.\n+   */\n+  handleError: (error: Error) => void;\n+  /**\n+   * Current highest order index.\n+   */\n+  highestOrderIndex: number;\n+}\n+\n+/**\n+ * A dialog for adding/editing a facet\n+ */\n+const FacetDialog = ({\n+  open,\n+  onClose,\n+  addOrEdit,\n+  handleError,\n+  facet,\n+  highestOrderIndex,\n+}: facetDialogProps) => {\n+  const {\n+    facetedsearchsetting: facetedSearchSettingStrings,\n+  } = languageStrings.settings.searching;\n+  const { facetfields: facetFieldStrings } = facetedSearchSettingStrings;\n+\n+  const [name, setName] = useState<string>(\"\");\n+  const [schemaNode, setSchemaNode] = useState<string>(\"\");\n+  const [maxResults, setMaxResults] = useState<number | undefined>();\n+\n+  const isNameInvalid = validateFacetFields(name);\n+  const isSchemaNodeInvalid = validateFacetFields(schemaNode);\n+\n+  /**\n+   * Initialise textfields' values, depending on 'onClose'.\n+   */\n+  useEffect(() => {\n+    setName(facet?.name ?? \"\");\n+    setSchemaNode(facet?.schemaNode ?? \"\");\n+    setMaxResults(facet?.maxResults);\n+  }, [onClose]);\n+\n+  const onAddOrEdit = () => {\n+    addOrEdit({\n+      name,\n+      schemaNode,\n+      maxResults,\n+      orderIndex: highestOrderIndex + 1,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcxNTg5MA=="}, "originalCommit": {"oid": "8365a61d4734153a196b736cd4a314253613a71f"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcyMTQ5Ng==", "bodyText": "But no worries I will move highestOrderIndex to the calling component.", "url": "https://github.com/openequella/openEQUELLA/pull/1706#discussion_r422721496", "createdAt": "2020-05-11T00:11:18Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetDialog.tsx", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import {\n+  Button,\n+  Dialog,\n+  DialogActions,\n+  DialogContent,\n+  DialogTitle,\n+  TextField,\n+} from \"@material-ui/core\";\n+import { commonString } from \"../../../util/commonstrings\";\n+import { languageStrings } from \"../../../util/langstrings\";\n+import { useEffect, useState } from \"react\";\n+import {\n+  FacetWithFlags,\n+  validateFacetFields,\n+} from \"./FacetedSearchSettingsModule\";\n+\n+interface facetDialogProps {\n+  /**\n+   * If true, the dialog will be shown.\n+   */\n+  open: boolean;\n+  /**\n+   * Fired when the dialog is closed.\n+   */\n+  onClose: () => void;\n+  /**\n+   * Fired when click the ADD button.\n+   */\n+  addOrEdit: (facet: FacetWithFlags) => void;\n+  /**\n+   * The facet to be edited; undefined if the action is to add a new one.\n+   */\n+  facet?: FacetWithFlags;\n+  /**\n+   * Error handling.\n+   */\n+  handleError: (error: Error) => void;\n+  /**\n+   * Current highest order index.\n+   */\n+  highestOrderIndex: number;\n+}\n+\n+/**\n+ * A dialog for adding/editing a facet\n+ */\n+const FacetDialog = ({\n+  open,\n+  onClose,\n+  addOrEdit,\n+  handleError,\n+  facet,\n+  highestOrderIndex,\n+}: facetDialogProps) => {\n+  const {\n+    facetedsearchsetting: facetedSearchSettingStrings,\n+  } = languageStrings.settings.searching;\n+  const { facetfields: facetFieldStrings } = facetedSearchSettingStrings;\n+\n+  const [name, setName] = useState<string>(\"\");\n+  const [schemaNode, setSchemaNode] = useState<string>(\"\");\n+  const [maxResults, setMaxResults] = useState<number | undefined>();\n+\n+  const isNameInvalid = validateFacetFields(name);\n+  const isSchemaNodeInvalid = validateFacetFields(schemaNode);\n+\n+  /**\n+   * Initialise textfields' values, depending on 'onClose'.\n+   */\n+  useEffect(() => {\n+    setName(facet?.name ?? \"\");\n+    setSchemaNode(facet?.schemaNode ?? \"\");\n+    setMaxResults(facet?.maxResults);\n+  }, [onClose]);\n+\n+  const onAddOrEdit = () => {\n+    addOrEdit({\n+      name,\n+      schemaNode,\n+      maxResults,\n+      orderIndex: highestOrderIndex + 1,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcxNTg5MA=="}, "originalCommit": {"oid": "8365a61d4734153a196b736cd4a314253613a71f"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcyNTg0Ng==", "bodyText": "Well actually that highlights the main issue here. This dialog only needs to know about three things - the three fields it's displaying. So really really, that's all it should be putting in this object, everything else should be left to higher up where it knows the details.\nAs a result, these lines should really just be:\n    addOrEdit({\n      name,\n      schemaNode,\n      maxResults });\n\nAll the flags etc are only the concern of the calling component.", "url": "https://github.com/openequella/openEQUELLA/pull/1706#discussion_r422725846", "createdAt": "2020-05-11T00:42:48Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetDialog.tsx", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import {\n+  Button,\n+  Dialog,\n+  DialogActions,\n+  DialogContent,\n+  DialogTitle,\n+  TextField,\n+} from \"@material-ui/core\";\n+import { commonString } from \"../../../util/commonstrings\";\n+import { languageStrings } from \"../../../util/langstrings\";\n+import { useEffect, useState } from \"react\";\n+import {\n+  FacetWithFlags,\n+  validateFacetFields,\n+} from \"./FacetedSearchSettingsModule\";\n+\n+interface facetDialogProps {\n+  /**\n+   * If true, the dialog will be shown.\n+   */\n+  open: boolean;\n+  /**\n+   * Fired when the dialog is closed.\n+   */\n+  onClose: () => void;\n+  /**\n+   * Fired when click the ADD button.\n+   */\n+  addOrEdit: (facet: FacetWithFlags) => void;\n+  /**\n+   * The facet to be edited; undefined if the action is to add a new one.\n+   */\n+  facet?: FacetWithFlags;\n+  /**\n+   * Error handling.\n+   */\n+  handleError: (error: Error) => void;\n+  /**\n+   * Current highest order index.\n+   */\n+  highestOrderIndex: number;\n+}\n+\n+/**\n+ * A dialog for adding/editing a facet\n+ */\n+const FacetDialog = ({\n+  open,\n+  onClose,\n+  addOrEdit,\n+  handleError,\n+  facet,\n+  highestOrderIndex,\n+}: facetDialogProps) => {\n+  const {\n+    facetedsearchsetting: facetedSearchSettingStrings,\n+  } = languageStrings.settings.searching;\n+  const { facetfields: facetFieldStrings } = facetedSearchSettingStrings;\n+\n+  const [name, setName] = useState<string>(\"\");\n+  const [schemaNode, setSchemaNode] = useState<string>(\"\");\n+  const [maxResults, setMaxResults] = useState<number | undefined>();\n+\n+  const isNameInvalid = validateFacetFields(name);\n+  const isSchemaNodeInvalid = validateFacetFields(schemaNode);\n+\n+  /**\n+   * Initialise textfields' values, depending on 'onClose'.\n+   */\n+  useEffect(() => {\n+    setName(facet?.name ?? \"\");\n+    setSchemaNode(facet?.schemaNode ?? \"\");\n+    setMaxResults(facet?.maxResults);\n+  }, [onClose]);\n+\n+  const onAddOrEdit = () => {\n+    addOrEdit({\n+      name,\n+      schemaNode,\n+      maxResults,\n+      orderIndex: highestOrderIndex + 1,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcxNTg5MA=="}, "originalCommit": {"oid": "8365a61d4734153a196b736cd4a314253613a71f"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjczMjg1OA==", "bodyText": "I am afraid above may not work because the type of Facet requires orderIndex unless this field can be undefined. Alternatively I can create another interface which only includes these three fields.", "url": "https://github.com/openequella/openEQUELLA/pull/1706#discussion_r422732858", "createdAt": "2020-05-11T01:24:47Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetDialog.tsx", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import {\n+  Button,\n+  Dialog,\n+  DialogActions,\n+  DialogContent,\n+  DialogTitle,\n+  TextField,\n+} from \"@material-ui/core\";\n+import { commonString } from \"../../../util/commonstrings\";\n+import { languageStrings } from \"../../../util/langstrings\";\n+import { useEffect, useState } from \"react\";\n+import {\n+  FacetWithFlags,\n+  validateFacetFields,\n+} from \"./FacetedSearchSettingsModule\";\n+\n+interface facetDialogProps {\n+  /**\n+   * If true, the dialog will be shown.\n+   */\n+  open: boolean;\n+  /**\n+   * Fired when the dialog is closed.\n+   */\n+  onClose: () => void;\n+  /**\n+   * Fired when click the ADD button.\n+   */\n+  addOrEdit: (facet: FacetWithFlags) => void;\n+  /**\n+   * The facet to be edited; undefined if the action is to add a new one.\n+   */\n+  facet?: FacetWithFlags;\n+  /**\n+   * Error handling.\n+   */\n+  handleError: (error: Error) => void;\n+  /**\n+   * Current highest order index.\n+   */\n+  highestOrderIndex: number;\n+}\n+\n+/**\n+ * A dialog for adding/editing a facet\n+ */\n+const FacetDialog = ({\n+  open,\n+  onClose,\n+  addOrEdit,\n+  handleError,\n+  facet,\n+  highestOrderIndex,\n+}: facetDialogProps) => {\n+  const {\n+    facetedsearchsetting: facetedSearchSettingStrings,\n+  } = languageStrings.settings.searching;\n+  const { facetfields: facetFieldStrings } = facetedSearchSettingStrings;\n+\n+  const [name, setName] = useState<string>(\"\");\n+  const [schemaNode, setSchemaNode] = useState<string>(\"\");\n+  const [maxResults, setMaxResults] = useState<number | undefined>();\n+\n+  const isNameInvalid = validateFacetFields(name);\n+  const isSchemaNodeInvalid = validateFacetFields(schemaNode);\n+\n+  /**\n+   * Initialise textfields' values, depending on 'onClose'.\n+   */\n+  useEffect(() => {\n+    setName(facet?.name ?? \"\");\n+    setSchemaNode(facet?.schemaNode ?? \"\");\n+    setMaxResults(facet?.maxResults);\n+  }, [onClose]);\n+\n+  const onAddOrEdit = () => {\n+    addOrEdit({\n+      name,\n+      schemaNode,\n+      maxResults,\n+      orderIndex: highestOrderIndex + 1,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcxNTg5MA=="}, "originalCommit": {"oid": "8365a61d4734153a196b736cd4a314253613a71f"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjczODE1MQ==", "bodyText": "I just recalled that in back-end orderIndex is not a mandatory field and its default value  is 0, so it may be OK to allow it to be undefined in front-end.", "url": "https://github.com/openequella/openEQUELLA/pull/1706#discussion_r422738151", "createdAt": "2020-05-11T01:42:16Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetDialog.tsx", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import {\n+  Button,\n+  Dialog,\n+  DialogActions,\n+  DialogContent,\n+  DialogTitle,\n+  TextField,\n+} from \"@material-ui/core\";\n+import { commonString } from \"../../../util/commonstrings\";\n+import { languageStrings } from \"../../../util/langstrings\";\n+import { useEffect, useState } from \"react\";\n+import {\n+  FacetWithFlags,\n+  validateFacetFields,\n+} from \"./FacetedSearchSettingsModule\";\n+\n+interface facetDialogProps {\n+  /**\n+   * If true, the dialog will be shown.\n+   */\n+  open: boolean;\n+  /**\n+   * Fired when the dialog is closed.\n+   */\n+  onClose: () => void;\n+  /**\n+   * Fired when click the ADD button.\n+   */\n+  addOrEdit: (facet: FacetWithFlags) => void;\n+  /**\n+   * The facet to be edited; undefined if the action is to add a new one.\n+   */\n+  facet?: FacetWithFlags;\n+  /**\n+   * Error handling.\n+   */\n+  handleError: (error: Error) => void;\n+  /**\n+   * Current highest order index.\n+   */\n+  highestOrderIndex: number;\n+}\n+\n+/**\n+ * A dialog for adding/editing a facet\n+ */\n+const FacetDialog = ({\n+  open,\n+  onClose,\n+  addOrEdit,\n+  handleError,\n+  facet,\n+  highestOrderIndex,\n+}: facetDialogProps) => {\n+  const {\n+    facetedsearchsetting: facetedSearchSettingStrings,\n+  } = languageStrings.settings.searching;\n+  const { facetfields: facetFieldStrings } = facetedSearchSettingStrings;\n+\n+  const [name, setName] = useState<string>(\"\");\n+  const [schemaNode, setSchemaNode] = useState<string>(\"\");\n+  const [maxResults, setMaxResults] = useState<number | undefined>();\n+\n+  const isNameInvalid = validateFacetFields(name);\n+  const isSchemaNodeInvalid = validateFacetFields(schemaNode);\n+\n+  /**\n+   * Initialise textfields' values, depending on 'onClose'.\n+   */\n+  useEffect(() => {\n+    setName(facet?.name ?? \"\");\n+    setSchemaNode(facet?.schemaNode ?? \"\");\n+    setMaxResults(facet?.maxResults);\n+  }, [onClose]);\n+\n+  const onAddOrEdit = () => {\n+    addOrEdit({\n+      name,\n+      schemaNode,\n+      maxResults,\n+      orderIndex: highestOrderIndex + 1,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcxNTg5MA=="}, "originalCommit": {"oid": "8365a61d4734153a196b736cd4a314253613a71f"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjMwNjQyOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsPage.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQyMzozNjo1M1rOGTInYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQyMzozNjo1M1rOGTInYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcxNzI4Mg==", "bodyText": "For readability, could we please extract this out into a const and then simply place the variable in here? I'd like to start minimising the use of logic and functions within the return/render methods.", "url": "https://github.com/openequella/openEQUELLA/pull/1706#discussion_r422717282", "createdAt": "2020-05-10T23:36:53Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsPage.tsx", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps,\n+} from \"../../../mainui/Template\";\n+import SettingPageTemplate from \"../../../components/SettingPageTemplate\";\n+import { useState } from \"react\";\n+import {\n+  Card,\n+  CardActions,\n+  IconButton,\n+  List,\n+  ListItem,\n+  ListItemSecondaryAction,\n+  ListItemText,\n+  ListSubheader,\n+  makeStyles,\n+} from \"@material-ui/core\";\n+import { languageStrings } from \"../../../util/langstrings\";\n+import {\n+  batchUpdateOrAdd,\n+  FacetWithFlags,\n+  getFacetsFromServer,\n+  getHighestOrderIndex,\n+} from \"./FacetedSearchSettingsModule\";\n+import EditIcon from \"@material-ui/icons/Edit\";\n+import DeleteIcon from \"@material-ui/icons/Delete\";\n+import AddCircleIcon from \"@material-ui/icons/AddCircle\";\n+import FacetDialog from \"./FacetDialog\";\n+import { useEffect } from \"react\";\n+import { routes } from \"../../../mainui/routes\";\n+import { addElement } from \"../../../util/ImmutableArrayUtil\";\n+import { generateFromError } from \"../../../api/errors\";\n+import MessageDialog from \"../../../components/MessageDialog\";\n+import { commonString } from \"../../../util/commonstrings\";\n+\n+const useStyles = makeStyles({\n+  spacedCards: {\n+    margin: \"16px\",\n+    width: \"75%\",\n+    padding: \"16px\",\n+    float: \"left\",\n+  },\n+  cardAction: {\n+    display: \"flex\",\n+    justifyContent: \"flex-end\",\n+  },\n+});\n+\n+/**\n+ * A page for setting Faceted search facets.\n+ */\n+const FacetedSearchSettingsPage = ({ updateTemplate }: TemplateUpdateProps) => {\n+  const facetedsearchsettingStrings =\n+    languageStrings.settings.searching.facetedsearchsetting;\n+  const classes = useStyles();\n+\n+  const [showSnackBar, setShowSnackBar] = useState<boolean>(false);\n+  const [showResultDialog, setShowResultDialog] = useState<boolean>(false);\n+  const [resultMessages, setResultMessagesMessages] = useState<string[]>([]);\n+  const [showEditingDialog, setShowEditingDialog] = useState<boolean>(false);\n+  const [facets, setFacets] = useState<FacetWithFlags[]>([]);\n+\n+  const listOfUpdates: FacetWithFlags[] = facets.filter(\n+    (facet) => facet.updated\n+  );\n+  const changesUnsaved = listOfUpdates.length > 0;\n+\n+  /**\n+   * Update the page title and back route, and get a list of facets.\n+   */\n+  useEffect(() => {\n+    updateTemplate((tp) => ({\n+      ...templateDefaults(facetedsearchsettingStrings.name)(tp),\n+      backRoute: routes.Settings.to,\n+    }));\n+    getFacets();\n+  }, []);\n+\n+  /**\n+   * Get facets from the Server and add boolean flags on them.\n+   */\n+  const getFacets = () => {\n+    getFacetsFromServer().then((facets) => {\n+      setFacets(\n+        facets.map((facet) => {\n+          return { ...facet, updated: false, deleted: false, dirty: false };\n+        })\n+      );\n+    });\n+  };\n+\n+  /**\n+   * Save updated/deleted facets to the Server.\n+   * Show the message dialog if any error message is received otherwise show snackbar.\n+   */\n+  const save = () => {\n+    batchUpdateOrAdd(listOfUpdates)\n+      .then((messages) => {\n+        if (messages.length > 0) {\n+          setResultMessagesMessages(messages);\n+          setShowResultDialog(true);\n+        } else {\n+          setShowSnackBar(true);\n+        }\n+      })\n+      .catch((error) => handleError(error))\n+      .finally(() => getFacets());\n+  };\n+\n+  /**\n+   * Visually add/update a facet.\n+   */\n+  const addOrEdit = (facet: FacetWithFlags) => {\n+    setFacets(addElement(facets, facet));\n+  };\n+\n+  /**\n+   * Error handling which throws a new error in order to break chained 'then'.\n+   */\n+  const handleError = (error: Error) => {\n+    updateTemplate(templateError(generateFromError(error)));\n+    throw new Error(error.message);\n+  };\n+\n+  return (\n+    <SettingPageTemplate\n+      onSave={save}\n+      saveButtonDisabled={!changesUnsaved}\n+      snackbarOpen={showSnackBar}\n+      snackBarOnClose={() => setShowSnackBar(false)}\n+      preventNavigation={changesUnsaved}\n+    >\n+      <Card className={classes.spacedCards}>\n+        <List\n+          subheader={\n+            <ListSubheader disableGutters>\n+              {facetedsearchsettingStrings.name}\n+            </ListSubheader>\n+          }\n+        >\n+          {facets\n+            .filter((facet) => !facet.deleted)\n+            .map((facet, index) => {\n+              return (\n+                <ListItem divider={true} key={index}>\n+                  <ListItemText primary={facet.name} />\n+                  <ListItemSecondaryAction>\n+                    <IconButton color={\"secondary\"}>\n+                      <EditIcon />\n+                    </IconButton>\n+                    |\n+                    <IconButton color=\"secondary\">\n+                      <DeleteIcon />\n+                    </IconButton>\n+                  </ListItemSecondaryAction>\n+                </ListItem>\n+              );\n+            })}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8365a61d4734153a196b736cd4a314253613a71f"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjMwOTMyOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsPage.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQyMzo0MDoxMVrOGTIo4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQyMzo0MDoxMVrOGTIo4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcxNzY2Ng==", "bodyText": "Can you please remind me why this is here (rather than just using the message mechanism in the template)? Is it due to the batch CRUDing?", "url": "https://github.com/openequella/openEQUELLA/pull/1706#discussion_r422717666", "createdAt": "2020-05-10T23:40:11Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsPage.tsx", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps,\n+} from \"../../../mainui/Template\";\n+import SettingPageTemplate from \"../../../components/SettingPageTemplate\";\n+import { useState } from \"react\";\n+import {\n+  Card,\n+  CardActions,\n+  IconButton,\n+  List,\n+  ListItem,\n+  ListItemSecondaryAction,\n+  ListItemText,\n+  ListSubheader,\n+  makeStyles,\n+} from \"@material-ui/core\";\n+import { languageStrings } from \"../../../util/langstrings\";\n+import {\n+  batchUpdateOrAdd,\n+  FacetWithFlags,\n+  getFacetsFromServer,\n+  getHighestOrderIndex,\n+} from \"./FacetedSearchSettingsModule\";\n+import EditIcon from \"@material-ui/icons/Edit\";\n+import DeleteIcon from \"@material-ui/icons/Delete\";\n+import AddCircleIcon from \"@material-ui/icons/AddCircle\";\n+import FacetDialog from \"./FacetDialog\";\n+import { useEffect } from \"react\";\n+import { routes } from \"../../../mainui/routes\";\n+import { addElement } from \"../../../util/ImmutableArrayUtil\";\n+import { generateFromError } from \"../../../api/errors\";\n+import MessageDialog from \"../../../components/MessageDialog\";\n+import { commonString } from \"../../../util/commonstrings\";\n+\n+const useStyles = makeStyles({\n+  spacedCards: {\n+    margin: \"16px\",\n+    width: \"75%\",\n+    padding: \"16px\",\n+    float: \"left\",\n+  },\n+  cardAction: {\n+    display: \"flex\",\n+    justifyContent: \"flex-end\",\n+  },\n+});\n+\n+/**\n+ * A page for setting Faceted search facets.\n+ */\n+const FacetedSearchSettingsPage = ({ updateTemplate }: TemplateUpdateProps) => {\n+  const facetedsearchsettingStrings =\n+    languageStrings.settings.searching.facetedsearchsetting;\n+  const classes = useStyles();\n+\n+  const [showSnackBar, setShowSnackBar] = useState<boolean>(false);\n+  const [showResultDialog, setShowResultDialog] = useState<boolean>(false);\n+  const [resultMessages, setResultMessagesMessages] = useState<string[]>([]);\n+  const [showEditingDialog, setShowEditingDialog] = useState<boolean>(false);\n+  const [facets, setFacets] = useState<FacetWithFlags[]>([]);\n+\n+  const listOfUpdates: FacetWithFlags[] = facets.filter(\n+    (facet) => facet.updated\n+  );\n+  const changesUnsaved = listOfUpdates.length > 0;\n+\n+  /**\n+   * Update the page title and back route, and get a list of facets.\n+   */\n+  useEffect(() => {\n+    updateTemplate((tp) => ({\n+      ...templateDefaults(facetedsearchsettingStrings.name)(tp),\n+      backRoute: routes.Settings.to,\n+    }));\n+    getFacets();\n+  }, []);\n+\n+  /**\n+   * Get facets from the Server and add boolean flags on them.\n+   */\n+  const getFacets = () => {\n+    getFacetsFromServer().then((facets) => {\n+      setFacets(\n+        facets.map((facet) => {\n+          return { ...facet, updated: false, deleted: false, dirty: false };\n+        })\n+      );\n+    });\n+  };\n+\n+  /**\n+   * Save updated/deleted facets to the Server.\n+   * Show the message dialog if any error message is received otherwise show snackbar.\n+   */\n+  const save = () => {\n+    batchUpdateOrAdd(listOfUpdates)\n+      .then((messages) => {\n+        if (messages.length > 0) {\n+          setResultMessagesMessages(messages);\n+          setShowResultDialog(true);\n+        } else {\n+          setShowSnackBar(true);\n+        }\n+      })\n+      .catch((error) => handleError(error))\n+      .finally(() => getFacets());\n+  };\n+\n+  /**\n+   * Visually add/update a facet.\n+   */\n+  const addOrEdit = (facet: FacetWithFlags) => {\n+    setFacets(addElement(facets, facet));\n+  };\n+\n+  /**\n+   * Error handling which throws a new error in order to break chained 'then'.\n+   */\n+  const handleError = (error: Error) => {\n+    updateTemplate(templateError(generateFromError(error)));\n+    throw new Error(error.message);\n+  };\n+\n+  return (\n+    <SettingPageTemplate\n+      onSave={save}\n+      saveButtonDisabled={!changesUnsaved}\n+      snackbarOpen={showSnackBar}\n+      snackBarOnClose={() => setShowSnackBar(false)}\n+      preventNavigation={changesUnsaved}\n+    >\n+      <Card className={classes.spacedCards}>\n+        <List\n+          subheader={\n+            <ListSubheader disableGutters>\n+              {facetedsearchsettingStrings.name}\n+            </ListSubheader>\n+          }\n+        >\n+          {facets\n+            .filter((facet) => !facet.deleted)\n+            .map((facet, index) => {\n+              return (\n+                <ListItem divider={true} key={index}>\n+                  <ListItemText primary={facet.name} />\n+                  <ListItemSecondaryAction>\n+                    <IconButton color={\"secondary\"}>\n+                      <EditIcon />\n+                    </IconButton>\n+                    |\n+                    <IconButton color=\"secondary\">\n+                      <DeleteIcon />\n+                    </IconButton>\n+                  </ListItemSecondaryAction>\n+                </ListItem>\n+              );\n+            })}\n+        </List>\n+        <CardActions className={classes.cardAction}>\n+          <IconButton\n+            onClick={() => setShowEditingDialog(true)}\n+            aria-label={facetedsearchsettingStrings.add}\n+            color={\"primary\"}\n+          >\n+            <AddCircleIcon fontSize={\"large\"} />\n+          </IconButton>\n+        </CardActions>\n+      </Card>\n+\n+      <FacetDialog\n+        addOrEdit={addOrEdit}\n+        open={showEditingDialog}\n+        onClose={() => setShowEditingDialog(false)}\n+        handleError={handleError}\n+        facet={undefined}\n+        highestOrderIndex={getHighestOrderIndex(facets)}\n+      />\n+\n+      <MessageDialog", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64e9ad6c4ac8975ee7c7e9d39faddbd52707e87f"}, "originalPosition": 199}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjMyNzM2OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/mainui/routes.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQyMzo1ODoyMVrOGTIx7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQyMzo1ODoyMVrOGTIx7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcxOTk4MQ==", "bodyText": "Should this have the same formatting as the above routes, for consistency?", "url": "https://github.com/openequella/openEQUELLA/pull/1706#discussion_r422719981", "createdAt": "2020-05-10T23:58:21Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/mainui/routes.tsx", "diffHunk": "@@ -64,16 +65,20 @@ export const routes = {\n     path: \"/page/searchsettings\",\n     render: (p: OEQRouteComponentProps<any>) => <SearchPageSettings {...p} />,\n   },\n-\n   SearchFilterSettings: {\n     path: \"/page/searchfiltersettings\",\n     render: (p: OEQRouteComponentProps<any>) => <SearchFilterPage {...p} />,\n   },\n-\n   ContentIndexSettings: {\n     path: \"/page/contentindexsettings\",\n     render: (p: OEQRouteComponentProps<any>) => <ContentIndexSettings {...p} />,\n   },\n+  FacetedSearchSetting: {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64e9ad6c4ac8975ee7c7e9d39faddbd52707e87f"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjMyODcwOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetDialog.tsx", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMDowMDowOVrOGTIylQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMToxMDozNVrOGTJaqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcyMDE0OQ==", "bodyText": "What happens here if facet is undefined? Is that a possible situation?", "url": "https://github.com/openequella/openEQUELLA/pull/1706#discussion_r422720149", "createdAt": "2020-05-11T00:00:09Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetDialog.tsx", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import {\n+  Button,\n+  Dialog,\n+  DialogActions,\n+  DialogContent,\n+  DialogTitle,\n+  TextField,\n+} from \"@material-ui/core\";\n+import { commonString } from \"../../../util/commonstrings\";\n+import { languageStrings } from \"../../../util/langstrings\";\n+import { useEffect, useState } from \"react\";\n+import {\n+  FacetWithFlags,\n+  validateFacetFields,\n+} from \"./FacetedSearchSettingsModule\";\n+\n+interface facetDialogProps {\n+  /**\n+   * If true, the dialog will be shown.\n+   */\n+  open: boolean;\n+  /**\n+   * Fired when the dialog is closed.\n+   */\n+  onClose: () => void;\n+  /**\n+   * Fired when click the ADD button.\n+   */\n+  addOrEdit: (facet: FacetWithFlags) => void;\n+  /**\n+   * The facet to be edited; undefined if the action is to add a new one.\n+   */\n+  facet?: FacetWithFlags;\n+  /**\n+   * Error handling.\n+   */\n+  handleError: (error: Error) => void;\n+  /**\n+   * Current highest order index.\n+   */\n+  highestOrderIndex: number;\n+}\n+\n+/**\n+ * A dialog for adding/editing a facet\n+ */\n+const FacetDialog = ({\n+  open,\n+  onClose,\n+  addOrEdit,\n+  handleError,\n+  facet,\n+  highestOrderIndex,\n+}: facetDialogProps) => {\n+  const {\n+    facetedsearchsetting: facetedSearchSettingStrings,\n+  } = languageStrings.settings.searching;\n+  const { facetfields: facetFieldStrings } = facetedSearchSettingStrings;\n+\n+  const [name, setName] = useState<string>(\"\");\n+  const [schemaNode, setSchemaNode] = useState<string>(\"\");\n+  const [maxResults, setMaxResults] = useState<number | undefined>();\n+\n+  const isNameInvalid = validateFacetFields(name);\n+  const isSchemaNodeInvalid = validateFacetFields(schemaNode);\n+\n+  /**\n+   * Initialise textfields' values, depending on 'onClose'.\n+   */\n+  useEffect(() => {\n+    setName(facet?.name ?? \"\");\n+    setSchemaNode(facet?.schemaNode ?? \"\");\n+    setMaxResults(facet?.maxResults);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64e9ad6c4ac8975ee7c7e9d39faddbd52707e87f"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcyNTEwOQ==", "bodyText": "Yes facet can be undefined. When this happens, empty strings will be set to name and schemaNode.", "url": "https://github.com/openequella/openEQUELLA/pull/1706#discussion_r422725109", "createdAt": "2020-05-11T00:37:17Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetDialog.tsx", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import {\n+  Button,\n+  Dialog,\n+  DialogActions,\n+  DialogContent,\n+  DialogTitle,\n+  TextField,\n+} from \"@material-ui/core\";\n+import { commonString } from \"../../../util/commonstrings\";\n+import { languageStrings } from \"../../../util/langstrings\";\n+import { useEffect, useState } from \"react\";\n+import {\n+  FacetWithFlags,\n+  validateFacetFields,\n+} from \"./FacetedSearchSettingsModule\";\n+\n+interface facetDialogProps {\n+  /**\n+   * If true, the dialog will be shown.\n+   */\n+  open: boolean;\n+  /**\n+   * Fired when the dialog is closed.\n+   */\n+  onClose: () => void;\n+  /**\n+   * Fired when click the ADD button.\n+   */\n+  addOrEdit: (facet: FacetWithFlags) => void;\n+  /**\n+   * The facet to be edited; undefined if the action is to add a new one.\n+   */\n+  facet?: FacetWithFlags;\n+  /**\n+   * Error handling.\n+   */\n+  handleError: (error: Error) => void;\n+  /**\n+   * Current highest order index.\n+   */\n+  highestOrderIndex: number;\n+}\n+\n+/**\n+ * A dialog for adding/editing a facet\n+ */\n+const FacetDialog = ({\n+  open,\n+  onClose,\n+  addOrEdit,\n+  handleError,\n+  facet,\n+  highestOrderIndex,\n+}: facetDialogProps) => {\n+  const {\n+    facetedsearchsetting: facetedSearchSettingStrings,\n+  } = languageStrings.settings.searching;\n+  const { facetfields: facetFieldStrings } = facetedSearchSettingStrings;\n+\n+  const [name, setName] = useState<string>(\"\");\n+  const [schemaNode, setSchemaNode] = useState<string>(\"\");\n+  const [maxResults, setMaxResults] = useState<number | undefined>();\n+\n+  const isNameInvalid = validateFacetFields(name);\n+  const isSchemaNodeInvalid = validateFacetFields(schemaNode);\n+\n+  /**\n+   * Initialise textfields' values, depending on 'onClose'.\n+   */\n+  useEffect(() => {\n+    setName(facet?.name ?? \"\");\n+    setSchemaNode(facet?.schemaNode ?? \"\");\n+    setMaxResults(facet?.maxResults);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcyMDE0OQ=="}, "originalCommit": {"oid": "64e9ad6c4ac8975ee7c7e9d39faddbd52707e87f"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjczMDQxMQ==", "bodyText": "And maxResults is allowed to be undefined. Gotcha. \ud83d\udc4d Thanks for clarifying.", "url": "https://github.com/openequella/openEQUELLA/pull/1706#discussion_r422730411", "createdAt": "2020-05-11T01:10:35Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetDialog.tsx", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import {\n+  Button,\n+  Dialog,\n+  DialogActions,\n+  DialogContent,\n+  DialogTitle,\n+  TextField,\n+} from \"@material-ui/core\";\n+import { commonString } from \"../../../util/commonstrings\";\n+import { languageStrings } from \"../../../util/langstrings\";\n+import { useEffect, useState } from \"react\";\n+import {\n+  FacetWithFlags,\n+  validateFacetFields,\n+} from \"./FacetedSearchSettingsModule\";\n+\n+interface facetDialogProps {\n+  /**\n+   * If true, the dialog will be shown.\n+   */\n+  open: boolean;\n+  /**\n+   * Fired when the dialog is closed.\n+   */\n+  onClose: () => void;\n+  /**\n+   * Fired when click the ADD button.\n+   */\n+  addOrEdit: (facet: FacetWithFlags) => void;\n+  /**\n+   * The facet to be edited; undefined if the action is to add a new one.\n+   */\n+  facet?: FacetWithFlags;\n+  /**\n+   * Error handling.\n+   */\n+  handleError: (error: Error) => void;\n+  /**\n+   * Current highest order index.\n+   */\n+  highestOrderIndex: number;\n+}\n+\n+/**\n+ * A dialog for adding/editing a facet\n+ */\n+const FacetDialog = ({\n+  open,\n+  onClose,\n+  addOrEdit,\n+  handleError,\n+  facet,\n+  highestOrderIndex,\n+}: facetDialogProps) => {\n+  const {\n+    facetedsearchsetting: facetedSearchSettingStrings,\n+  } = languageStrings.settings.searching;\n+  const { facetfields: facetFieldStrings } = facetedSearchSettingStrings;\n+\n+  const [name, setName] = useState<string>(\"\");\n+  const [schemaNode, setSchemaNode] = useState<string>(\"\");\n+  const [maxResults, setMaxResults] = useState<number | undefined>();\n+\n+  const isNameInvalid = validateFacetFields(name);\n+  const isSchemaNodeInvalid = validateFacetFields(schemaNode);\n+\n+  /**\n+   * Initialise textfields' values, depending on 'onClose'.\n+   */\n+  useEffect(() => {\n+    setName(facet?.name ?? \"\");\n+    setSchemaNode(facet?.schemaNode ?? \"\");\n+    setMaxResults(facet?.maxResults);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcyMDE0OQ=="}, "originalCommit": {"oid": "64e9ad6c4ac8975ee7c7e9d39faddbd52707e87f"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjMzMDA5OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetDialog.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMDowMTo0MFrOGTIzRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMDowMTo0MFrOGTIzRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcyMDMyNg==", "bodyText": "Unnecessary braces", "url": "https://github.com/openequella/openEQUELLA/pull/1706#discussion_r422720326", "createdAt": "2020-05-11T00:01:40Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetDialog.tsx", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import {\n+  Button,\n+  Dialog,\n+  DialogActions,\n+  DialogContent,\n+  DialogTitle,\n+  TextField,\n+} from \"@material-ui/core\";\n+import { commonString } from \"../../../util/commonstrings\";\n+import { languageStrings } from \"../../../util/langstrings\";\n+import { useEffect, useState } from \"react\";\n+import {\n+  FacetWithFlags,\n+  validateFacetFields,\n+} from \"./FacetedSearchSettingsModule\";\n+\n+interface facetDialogProps {\n+  /**\n+   * If true, the dialog will be shown.\n+   */\n+  open: boolean;\n+  /**\n+   * Fired when the dialog is closed.\n+   */\n+  onClose: () => void;\n+  /**\n+   * Fired when click the ADD button.\n+   */\n+  addOrEdit: (facet: FacetWithFlags) => void;\n+  /**\n+   * The facet to be edited; undefined if the action is to add a new one.\n+   */\n+  facet?: FacetWithFlags;\n+  /**\n+   * Error handling.\n+   */\n+  handleError: (error: Error) => void;\n+  /**\n+   * Current highest order index.\n+   */\n+  highestOrderIndex: number;\n+}\n+\n+/**\n+ * A dialog for adding/editing a facet\n+ */\n+const FacetDialog = ({\n+  open,\n+  onClose,\n+  addOrEdit,\n+  handleError,\n+  facet,\n+  highestOrderIndex,\n+}: facetDialogProps) => {\n+  const {\n+    facetedsearchsetting: facetedSearchSettingStrings,\n+  } = languageStrings.settings.searching;\n+  const { facetfields: facetFieldStrings } = facetedSearchSettingStrings;\n+\n+  const [name, setName] = useState<string>(\"\");\n+  const [schemaNode, setSchemaNode] = useState<string>(\"\");\n+  const [maxResults, setMaxResults] = useState<number | undefined>();\n+\n+  const isNameInvalid = validateFacetFields(name);\n+  const isSchemaNodeInvalid = validateFacetFields(schemaNode);\n+\n+  /**\n+   * Initialise textfields' values, depending on 'onClose'.\n+   */\n+  useEffect(() => {\n+    setName(facet?.name ?? \"\");\n+    setSchemaNode(facet?.schemaNode ?? \"\");\n+    setMaxResults(facet?.maxResults);\n+  }, [onClose]);\n+\n+  const onAddOrEdit = () => {\n+    addOrEdit({\n+      name,\n+      schemaNode,\n+      maxResults,\n+      orderIndex: highestOrderIndex + 1,\n+      updated: true,\n+      deleted: false,\n+      dirty: true,\n+    });\n+    onClose();\n+  };\n+\n+  return (\n+    <Dialog\n+      open={open}\n+      onClose={onClose}\n+      disableBackdropClick\n+      disableEscapeKeyDown\n+      fullWidth\n+    >\n+      <DialogTitle>{facetedSearchSettingStrings.add}</DialogTitle>\n+      <DialogContent>\n+        <TextField\n+          margin=\"dense\"\n+          label={facetFieldStrings.name}\n+          value={name}\n+          required\n+          fullWidth\n+          onChange={(event) => setName(event.target.value)}\n+          error={!!name && isNameInvalid}\n+        />\n+        <TextField\n+          margin=\"dense\"\n+          label={facetFieldStrings.schemanode}\n+          value={schemaNode}\n+          required\n+          fullWidth\n+          onChange={(event) => setSchemaNode(event.target.value)}\n+          error={!!schemaNode && isSchemaNodeInvalid}\n+        />\n+        <TextField\n+          type={\"number\"}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64e9ad6c4ac8975ee7c7e9d39faddbd52707e87f"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjMzMDk1OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetDialog.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMDowMjo1MFrOGTIzuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMDowMjo1MFrOGTIzuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcyMDQ0MA==", "bodyText": "Rather than setting a const, couldn't you just refer to event.target.value directly in the setMaxResults function call?", "url": "https://github.com/openequella/openEQUELLA/pull/1706#discussion_r422720440", "createdAt": "2020-05-11T00:02:50Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetDialog.tsx", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import {\n+  Button,\n+  Dialog,\n+  DialogActions,\n+  DialogContent,\n+  DialogTitle,\n+  TextField,\n+} from \"@material-ui/core\";\n+import { commonString } from \"../../../util/commonstrings\";\n+import { languageStrings } from \"../../../util/langstrings\";\n+import { useEffect, useState } from \"react\";\n+import {\n+  FacetWithFlags,\n+  validateFacetFields,\n+} from \"./FacetedSearchSettingsModule\";\n+\n+interface facetDialogProps {\n+  /**\n+   * If true, the dialog will be shown.\n+   */\n+  open: boolean;\n+  /**\n+   * Fired when the dialog is closed.\n+   */\n+  onClose: () => void;\n+  /**\n+   * Fired when click the ADD button.\n+   */\n+  addOrEdit: (facet: FacetWithFlags) => void;\n+  /**\n+   * The facet to be edited; undefined if the action is to add a new one.\n+   */\n+  facet?: FacetWithFlags;\n+  /**\n+   * Error handling.\n+   */\n+  handleError: (error: Error) => void;\n+  /**\n+   * Current highest order index.\n+   */\n+  highestOrderIndex: number;\n+}\n+\n+/**\n+ * A dialog for adding/editing a facet\n+ */\n+const FacetDialog = ({\n+  open,\n+  onClose,\n+  addOrEdit,\n+  handleError,\n+  facet,\n+  highestOrderIndex,\n+}: facetDialogProps) => {\n+  const {\n+    facetedsearchsetting: facetedSearchSettingStrings,\n+  } = languageStrings.settings.searching;\n+  const { facetfields: facetFieldStrings } = facetedSearchSettingStrings;\n+\n+  const [name, setName] = useState<string>(\"\");\n+  const [schemaNode, setSchemaNode] = useState<string>(\"\");\n+  const [maxResults, setMaxResults] = useState<number | undefined>();\n+\n+  const isNameInvalid = validateFacetFields(name);\n+  const isSchemaNodeInvalid = validateFacetFields(schemaNode);\n+\n+  /**\n+   * Initialise textfields' values, depending on 'onClose'.\n+   */\n+  useEffect(() => {\n+    setName(facet?.name ?? \"\");\n+    setSchemaNode(facet?.schemaNode ?? \"\");\n+    setMaxResults(facet?.maxResults);\n+  }, [onClose]);\n+\n+  const onAddOrEdit = () => {\n+    addOrEdit({\n+      name,\n+      schemaNode,\n+      maxResults,\n+      orderIndex: highestOrderIndex + 1,\n+      updated: true,\n+      deleted: false,\n+      dirty: true,\n+    });\n+    onClose();\n+  };\n+\n+  return (\n+    <Dialog\n+      open={open}\n+      onClose={onClose}\n+      disableBackdropClick\n+      disableEscapeKeyDown\n+      fullWidth\n+    >\n+      <DialogTitle>{facetedSearchSettingStrings.add}</DialogTitle>\n+      <DialogContent>\n+        <TextField\n+          margin=\"dense\"\n+          label={facetFieldStrings.name}\n+          value={name}\n+          required\n+          fullWidth\n+          onChange={(event) => setName(event.target.value)}\n+          error={!!name && isNameInvalid}\n+        />\n+        <TextField\n+          margin=\"dense\"\n+          label={facetFieldStrings.schemanode}\n+          value={schemaNode}\n+          required\n+          fullWidth\n+          onChange={(event) => setSchemaNode(event.target.value)}\n+          error={!!schemaNode && isSchemaNodeInvalid}\n+        />\n+        <TextField\n+          type={\"number\"}\n+          margin=\"dense\"\n+          label={facetFieldStrings.categorynumber}\n+          value={maxResults}\n+          fullWidth\n+          onChange={(event) => {\n+            const value = event.target.value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64e9ad6c4ac8975ee7c7e9d39faddbd52707e87f"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjMzMzAzOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsModule.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMDowNDo1OFrOGTI0uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMDowNDo1OFrOGTI0uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcyMDY5Ng==", "bodyText": "Why the ?? This function is typed such that field must be a string.", "url": "https://github.com/openequella/openEQUELLA/pull/1706#discussion_r422720696", "createdAt": "2020-05-11T00:04:58Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsModule.ts", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import Axios from \"axios\";\n+import {\n+  BatchOperationResponse,\n+  groupErrorMessages,\n+} from \"../../../api/BatchOperationResponse\";\n+\n+export interface Facet {\n+  /**\n+   * Name of a facet\n+   */\n+  name: string;\n+  /**\n+   * Schema node of a facet\n+   */\n+  schemaNode: string;\n+  /**\n+   * The number of category of a facet; Being undefined means the number is unlimited.\n+   */\n+  maxResults?: number;\n+  /**\n+   * Used for re-ordering facets.\n+   */\n+  orderIndex: number;\n+}\n+\n+export interface FacetWithFlags extends Facet {\n+  /**\n+   * A flag indicating a facet has been visually updated/created.\n+   */\n+  updated: boolean;\n+  /**\n+   * A flag indicating a facet has been visually deleted.\n+   */\n+  deleted: boolean;\n+  /**\n+   * A flag indication if a facet does not exist on the Server.\n+   */\n+  dirty: boolean;\n+}\n+\n+const FACETED_SEARCH_API_URL = \"api/settings/facetedsearch/classification\";\n+\n+export const getFacetsFromServer = (): Promise<Facet[]> =>\n+  Axios.get(FACETED_SEARCH_API_URL).then((res) => res.data);\n+\n+/**\n+ * Remove the boolean flags and then save to the Server.\n+ */\n+export const batchUpdateOrAdd = (facets: FacetWithFlags[]) =>\n+  Axios.put<BatchOperationResponse[]>(\n+    FACETED_SEARCH_API_URL,\n+    facets.map((facet) => removeFlags(facet))\n+  ).then((res) => groupErrorMessages(res.data));\n+\n+/**\n+ * Validate if trimmed name or schema node is empty.\n+ * Return true if they are invalid.\n+ */\n+export const validateFacetFields = (field: string): boolean => {\n+  return !field?.trim();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64e9ad6c4ac8975ee7c7e9d39faddbd52707e87f"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjMzNTI5OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsPage.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMDowNzozNVrOGTI13w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMDowNzozNVrOGTI13w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcyMDk5MQ==", "bodyText": "Should be its own function.", "url": "https://github.com/openequella/openEQUELLA/pull/1706#discussion_r422720991", "createdAt": "2020-05-11T00:07:35Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsPage.tsx", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps,\n+} from \"../../../mainui/Template\";\n+import SettingPageTemplate from \"../../../components/SettingPageTemplate\";\n+import { useState } from \"react\";\n+import {\n+  Card,\n+  CardActions,\n+  IconButton,\n+  List,\n+  ListItem,\n+  ListItemSecondaryAction,\n+  ListItemText,\n+  ListSubheader,\n+  makeStyles,\n+} from \"@material-ui/core\";\n+import { languageStrings } from \"../../../util/langstrings\";\n+import {\n+  batchUpdateOrAdd,\n+  FacetWithFlags,\n+  getFacetsFromServer,\n+  getHighestOrderIndex,\n+} from \"./FacetedSearchSettingsModule\";\n+import EditIcon from \"@material-ui/icons/Edit\";\n+import DeleteIcon from \"@material-ui/icons/Delete\";\n+import AddCircleIcon from \"@material-ui/icons/AddCircle\";\n+import FacetDialog from \"./FacetDialog\";\n+import { useEffect } from \"react\";\n+import { routes } from \"../../../mainui/routes\";\n+import { addElement } from \"../../../util/ImmutableArrayUtil\";\n+import { generateFromError } from \"../../../api/errors\";\n+import MessageDialog from \"../../../components/MessageDialog\";\n+import { commonString } from \"../../../util/commonstrings\";\n+\n+const useStyles = makeStyles({\n+  spacedCards: {\n+    margin: \"16px\",\n+    width: \"75%\",\n+    padding: \"16px\",\n+    float: \"left\",\n+  },\n+  cardAction: {\n+    display: \"flex\",\n+    justifyContent: \"flex-end\",\n+  },\n+});\n+\n+/**\n+ * A page for setting Faceted search facets.\n+ */\n+const FacetedSearchSettingsPage = ({ updateTemplate }: TemplateUpdateProps) => {\n+  const facetedsearchsettingStrings =\n+    languageStrings.settings.searching.facetedsearchsetting;\n+  const classes = useStyles();\n+\n+  const [showSnackBar, setShowSnackBar] = useState<boolean>(false);\n+  const [showResultDialog, setShowResultDialog] = useState<boolean>(false);\n+  const [resultMessages, setResultMessagesMessages] = useState<string[]>([]);\n+  const [showEditingDialog, setShowEditingDialog] = useState<boolean>(false);\n+  const [facets, setFacets] = useState<FacetWithFlags[]>([]);\n+\n+  const listOfUpdates: FacetWithFlags[] = facets.filter(\n+    (facet) => facet.updated\n+  );\n+  const changesUnsaved = listOfUpdates.length > 0;\n+\n+  /**\n+   * Update the page title and back route, and get a list of facets.\n+   */\n+  useEffect(() => {\n+    updateTemplate((tp) => ({\n+      ...templateDefaults(facetedsearchsettingStrings.name)(tp),\n+      backRoute: routes.Settings.to,\n+    }));\n+    getFacets();\n+  }, []);\n+\n+  /**\n+   * Get facets from the Server and add boolean flags on them.\n+   */\n+  const getFacets = () => {\n+    getFacetsFromServer().then((facets) => {\n+      setFacets(\n+        facets.map((facet) => {\n+          return { ...facet, updated: false, deleted: false, dirty: false };\n+        })\n+      );\n+    });\n+  };\n+\n+  /**\n+   * Save updated/deleted facets to the Server.\n+   * Show the message dialog if any error message is received otherwise show snackbar.\n+   */\n+  const save = () => {\n+    batchUpdateOrAdd(listOfUpdates)\n+      .then((messages) => {\n+        if (messages.length > 0) {\n+          setResultMessagesMessages(messages);\n+          setShowResultDialog(true);\n+        } else {\n+          setShowSnackBar(true);\n+        }\n+      })\n+      .catch((error) => handleError(error))\n+      .finally(() => getFacets());\n+  };\n+\n+  /**\n+   * Visually add/update a facet.\n+   */\n+  const addOrEdit = (facet: FacetWithFlags) => {\n+    setFacets(addElement(facets, facet));\n+  };\n+\n+  /**\n+   * Error handling which throws a new error in order to break chained 'then'.\n+   */\n+  const handleError = (error: Error) => {\n+    updateTemplate(templateError(generateFromError(error)));\n+    throw new Error(error.message);\n+  };\n+\n+  return (\n+    <SettingPageTemplate\n+      onSave={save}\n+      saveButtonDisabled={!changesUnsaved}\n+      snackbarOpen={showSnackBar}\n+      snackBarOnClose={() => setShowSnackBar(false)}\n+      preventNavigation={changesUnsaved}\n+    >\n+      <Card className={classes.spacedCards}>\n+        <List\n+          subheader={\n+            <ListSubheader disableGutters>\n+              {facetedsearchsettingStrings.name}\n+            </ListSubheader>\n+          }\n+        >\n+          {facets", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64e9ad6c4ac8975ee7c7e9d39faddbd52707e87f"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjMzODY4OnYy", "diffSide": "LEFT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/util/langstrings.ts", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMDoxMDo1NFrOGTI3pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMTozMjozMVrOGTJpig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcyMTQ0NA==", "bodyText": "Why are messagedialogtitle and messagedialogsubtitle removed? I can see that the messagedialogsubtitle is moved to errors, but the other one just seems to drop off.", "url": "https://github.com/openequella/openEQUELLA/pull/1706#discussion_r422721444", "createdAt": "2020-05-11T00:10:54Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/util/langstrings.ts", "diffHunk": "@@ -420,9 +421,6 @@ export const languageStrings = {\n         save: \"save Search filter configurations\",\n         filternamelabel: \"Name\",\n         mimetypelistlabel: \"MIME types *\",\n-        messagedialogtitle: \"Search filter setting results\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64e9ad6c4ac8975ee7c7e9d39faddbd52707e87f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcyOTE1Nw==", "bodyText": "Yes, as I mentioned above I found most Dialogs do not use subtitle so I removed it.", "url": "https://github.com/openequella/openEQUELLA/pull/1706#discussion_r422729157", "createdAt": "2020-05-11T01:03:54Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/util/langstrings.ts", "diffHunk": "@@ -420,9 +421,6 @@ export const languageStrings = {\n         save: \"save Search filter configurations\",\n         filternamelabel: \"Name\",\n         mimetypelistlabel: \"MIME types *\",\n-        messagedialogtitle: \"Search filter setting results\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcyMTQ0NA=="}, "originalCommit": {"oid": "64e9ad6c4ac8975ee7c7e9d39faddbd52707e87f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjczMDA1NQ==", "bodyText": "When you say \"most\", does that mean all of them don't use the subtitle prop? If so then yes, feel free to remove.", "url": "https://github.com/openequella/openEQUELLA/pull/1706#discussion_r422730055", "createdAt": "2020-05-11T01:08:53Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/util/langstrings.ts", "diffHunk": "@@ -420,9 +421,6 @@ export const languageStrings = {\n         save: \"save Search filter configurations\",\n         filternamelabel: \"Name\",\n         mimetypelistlabel: \"MIME types *\",\n-        messagedialogtitle: \"Search filter setting results\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcyMTQ0NA=="}, "originalCommit": {"oid": "64e9ad6c4ac8975ee7c7e9d39faddbd52707e87f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjczNDIxOA==", "bodyText": "I'd say yes. In oEQ existing dialogs and MUI Dialog examples I don't see any subtitle.  In MUI examples, they just put title in  DialogTitle and no subtitle is used.", "url": "https://github.com/openequella/openEQUELLA/pull/1706#discussion_r422734218", "createdAt": "2020-05-11T01:32:31Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/util/langstrings.ts", "diffHunk": "@@ -420,9 +421,6 @@ export const languageStrings = {\n         save: \"save Search filter configurations\",\n         filternamelabel: \"Name\",\n         mimetypelistlabel: \"MIME types *\",\n-        messagedialogtitle: \"Search filter setting results\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcyMTQ0NA=="}, "originalCommit": {"oid": "64e9ad6c4ac8975ee7c7e9d39faddbd52707e87f"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjY4NDExOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsPage.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNDoxNDo1OVrOGTL2XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNDoxNDo1OVrOGTL2XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc3MDI2OQ==", "bodyText": "You can just use divider without ={true}", "url": "https://github.com/openequella/openEQUELLA/pull/1706#discussion_r422770269", "createdAt": "2020-05-11T04:14:59Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsPage.tsx", "diffHunk": "@@ -141,6 +153,43 @@ const FacetedSearchSettingsPage = ({ updateTemplate }: TemplateUpdateProps) => {\n     throw new Error(error.message);\n   };\n \n+  /**\n+   * Only renders a ListItem for each non-deleted facet.\n+   */\n+  const facetListItems: ReactElement[] = facets\n+    .filter((facet) => !facet.deleted)\n+    .map((facet, index) => {\n+      return (\n+        <ListItem divider={true} key={index}>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb036c5f721dcd4915e94e017aa753faa4251cfc"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjczMDIyOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsPage.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNDo0MDowOFrOGTMO0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNDo0MDowOFrOGTMO0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc3NjUzMA==", "bodyText": "Just a reminder, performance wise you normally don't want to simply use an item's array index as the key. Typically in this case - if I didn't have unique id from a DB for example - I'd go with something like facet.name + index.\nThis'll be more important once the editing/deleting/re-ordering is added.", "url": "https://github.com/openequella/openEQUELLA/pull/1706#discussion_r422776530", "createdAt": "2020-05-11T04:40:08Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetedSearchSettingsPage.tsx", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps,\n+} from \"../../../mainui/Template\";\n+import SettingPageTemplate from \"../../../components/SettingPageTemplate\";\n+import { ReactElement, useState } from \"react\";\n+import {\n+  Card,\n+  CardActions,\n+  IconButton,\n+  List,\n+  ListItem,\n+  ListItemSecondaryAction,\n+  ListItemText,\n+  ListSubheader,\n+  makeStyles,\n+} from \"@material-ui/core\";\n+import { languageStrings } from \"../../../util/langstrings\";\n+import {\n+  batchUpdateOrAdd,\n+  FacetWithFlags,\n+  getFacetsFromServer,\n+  getHighestOrderIndex,\n+} from \"./FacetedSearchSettingsModule\";\n+import EditIcon from \"@material-ui/icons/Edit\";\n+import DeleteIcon from \"@material-ui/icons/Delete\";\n+import AddCircleIcon from \"@material-ui/icons/AddCircle\";\n+import FacetDialog from \"./FacetDialog\";\n+import { useEffect } from \"react\";\n+import { routes } from \"../../../mainui/routes\";\n+import { addElement } from \"../../../util/ImmutableArrayUtil\";\n+import { generateFromError } from \"../../../api/errors\";\n+import MessageDialog from \"../../../components/MessageDialog\";\n+import { commonString } from \"../../../util/commonstrings\";\n+\n+const useStyles = makeStyles({\n+  spacedCards: {\n+    margin: \"16px\",\n+    width: \"75%\",\n+    padding: \"16px\",\n+    float: \"left\",\n+  },\n+  cardAction: {\n+    display: \"flex\",\n+    justifyContent: \"flex-end\",\n+  },\n+});\n+\n+/**\n+ * A page for setting Faceted search facets.\n+ */\n+const FacetedSearchSettingsPage = ({ updateTemplate }: TemplateUpdateProps) => {\n+  const facetedsearchsettingStrings =\n+    languageStrings.settings.searching.facetedsearchsetting;\n+  const classes = useStyles();\n+\n+  const [showSnackBar, setShowSnackBar] = useState<boolean>(false);\n+  const [showResultDialog, setShowResultDialog] = useState<boolean>(false);\n+  const [resultMessages, setResultMessagesMessages] = useState<string[]>([]);\n+  const [showEditingDialog, setShowEditingDialog] = useState<boolean>(false);\n+  const [facets, setFacets] = useState<FacetWithFlags[]>([]);\n+\n+  const listOfUpdates: FacetWithFlags[] = facets.filter(\n+    (facet) => facet.updated\n+  );\n+  const changesUnsaved = listOfUpdates.length > 0;\n+\n+  /**\n+   * Update the page title and back route, and get a list of facets.\n+   */\n+  useEffect(() => {\n+    updateTemplate((tp) => ({\n+      ...templateDefaults(facetedsearchsettingStrings.name)(tp),\n+      backRoute: routes.Settings.to,\n+    }));\n+    getFacets();\n+  }, []);\n+\n+  /**\n+   * Get facets from the Server and add boolean flags on them.\n+   */\n+  const getFacets = () => {\n+    getFacetsFromServer().then((facets) => {\n+      setFacets(\n+        facets.map((facet) => {\n+          return { ...facet, updated: false, deleted: false };\n+        })\n+      );\n+    });\n+  };\n+\n+  /**\n+   * Save updated/deleted facets to the Server.\n+   * Show the message dialog if any error message is received otherwise show snackbar.\n+   */\n+  const save = () => {\n+    batchUpdateOrAdd(listOfUpdates)\n+      .then((messages) => {\n+        if (messages.length > 0) {\n+          setResultMessagesMessages(messages);\n+          setShowResultDialog(true);\n+        } else {\n+          setShowSnackBar(true);\n+        }\n+      })\n+      .catch((error) => handleError(error))\n+      .finally(() => getFacets());\n+  };\n+\n+  /**\n+   * Visually add/update a facet.\n+   */\n+  const addOrEdit = (\n+    name: string,\n+    schemaNode: string,\n+    maxResults: number | undefined\n+  ) => {\n+    const facet = {\n+      name,\n+      schemaNode,\n+      maxResults,\n+      orderIndex: getHighestOrderIndex(facets) + 1,\n+      updated: true,\n+      deleted: false,\n+    };\n+    setFacets(addElement(facets, facet));\n+  };\n+\n+  /**\n+   * Error handling which throws a new error in order to break chained 'then'.\n+   */\n+  const handleError = (error: Error) => {\n+    updateTemplate(templateError(generateFromError(error)));\n+    throw new Error(error.message);\n+  };\n+\n+  /**\n+   * Only renders a ListItem for each non-deleted facet.\n+   */\n+  const facetListItems: ReactElement[] = facets\n+    .filter((facet) => !facet.deleted)\n+    .map((facet, index) => {\n+      return (\n+        <ListItem divider key={index}>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "060af42768f24a807f5859f28a04dc404a1f0d39"}, "originalPosition": 163}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1415, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}