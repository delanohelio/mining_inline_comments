{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0NDQ5MTMx", "number": 2240, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNToxMDoxOFrOEdC88A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNjo0MjoyM1rOEdFQMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4ODkyNTI4OnYy", "diffSide": "LEFT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNToxMDoxOFrOHH-i-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNToxMDoxOFrOHH-i-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODEyNjg0MA==", "bodyText": "This is the one test I did not replicate.", "url": "https://github.com/openequella/openEQUELLA/pull/2240#discussion_r478126840", "createdAt": "2020-08-27T05:10:18Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -582,22 +561,11 @@ describe(\"<SearchPage/>\", () => {\n     });\n   });\n \n-  it(\"should display a spinner when search is in progress\", async () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a414981ce6228256bec1f328109eded25669029d"}, "originalPosition": 396}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4ODkyODcyOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/components/DateRangeSelector.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNToxMToxN1rOHH-lag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNToxMToxN1rOHH-lag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODEyNzQ2Ng==", "bodyText": "Fix for issue from #2202", "url": "https://github.com/openequella/openEQUELLA/pull/2240#discussion_r478127466", "createdAt": "2020-08-27T05:11:17Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/components/DateRangeSelector.tsx", "diffHunk": "@@ -250,7 +250,7 @@ export const DateRangeSelector = ({\n         id=\"date_range_selector\"\n         labelId=\"date_range_selector_label\"\n         onChange={(event) =>\n-          handleQuickDateOptionChange(event.currentTarget.value as string)\n+          handleQuickDateOptionChange(event.target.value as string)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a414981ce6228256bec1f328109eded25669029d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4ODkzNDIzOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/SearchOrderSelect.tsx", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNToxMjo0MVrOHH-o3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNzowMDo1NVrOHIC-rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODEyODM0OQ==", "bodyText": "To improve accessibility, but also testability. Follows MUI recommendations - as far as using InputLabel etc. However I put the display: none so as to ensure it looked no different to before.", "url": "https://github.com/openequella/openEQUELLA/pull/2240#discussion_r478128349", "createdAt": "2020-08-27T05:12:41Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/SearchOrderSelect.tsx", "diffHunk": "@@ -58,18 +58,28 @@ export const SearchOrderSelect = ({\n     [SortOrder.RATING, userRating],\n   ]);\n \n+  const baseId = \"sort-order-select\";\n+  const labelId = baseId + \"-label\";\n+\n   return (\n-    <Select\n-      // If sortOrder is undefined, pass an empty string to select nothing.\n-      value={value ?? \"\"}\n-      onChange={(event) => onChange(event.target.value as SortOrder)}\n-    >\n-      {Array.from(sortingOptionStrings).map(([value, text]) => (\n-        <MenuItem key={value} value={value}>\n-          {text}\n-        </MenuItem>\n-      ))}\n-    </Select>\n+    <>\n+      <InputLabel id={labelId} style={{ display: \"none\" }}>\n+        Search Order\n+      </InputLabel>\n+      <Select\n+        id={baseId}\n+        labelId={labelId}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a414981ce6228256bec1f328109eded25669029d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE3NjUwNw==", "bodyText": "I actually feel  without display: none the UI looks better for me. This is because when the default sorting has not been configured, it is undefined. As a result, this control shows nothing. But if a lable is showed there, it helps me know this control is about sorting", "url": "https://github.com/openequella/openEQUELLA/pull/2240#discussion_r478176507", "createdAt": "2020-08-27T06:25:49Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/SearchOrderSelect.tsx", "diffHunk": "@@ -58,18 +58,28 @@ export const SearchOrderSelect = ({\n     [SortOrder.RATING, userRating],\n   ]);\n \n+  const baseId = \"sort-order-select\";\n+  const labelId = baseId + \"-label\";\n+\n   return (\n-    <Select\n-      // If sortOrder is undefined, pass an empty string to select nothing.\n-      value={value ?? \"\"}\n-      onChange={(event) => onChange(event.target.value as SortOrder)}\n-    >\n-      {Array.from(sortingOptionStrings).map(([value, text]) => (\n-        <MenuItem key={value} value={value}>\n-          {text}\n-        </MenuItem>\n-      ))}\n-    </Select>\n+    <>\n+      <InputLabel id={labelId} style={{ display: \"none\" }}>\n+        Search Order\n+      </InputLabel>\n+      <Select\n+        id={baseId}\n+        labelId={labelId}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODEyODM0OQ=="}, "originalCommit": {"oid": "a414981ce6228256bec1f328109eded25669029d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE5OTQ3MQ==", "bodyText": "Yup, I agree. Get's a bit wacky though when you do then select a value, and I was wondering if that empty case is actually just an anomaly from our dev environments.\nMaybe we should raise an issue around this to fix next sprint. \ud83e\udd14", "url": "https://github.com/openequella/openEQUELLA/pull/2240#discussion_r478199471", "createdAt": "2020-08-27T07:00:55Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/SearchOrderSelect.tsx", "diffHunk": "@@ -58,18 +58,28 @@ export const SearchOrderSelect = ({\n     [SortOrder.RATING, userRating],\n   ]);\n \n+  const baseId = \"sort-order-select\";\n+  const labelId = baseId + \"-label\";\n+\n   return (\n-    <Select\n-      // If sortOrder is undefined, pass an empty string to select nothing.\n-      value={value ?? \"\"}\n-      onChange={(event) => onChange(event.target.value as SortOrder)}\n-    >\n-      {Array.from(sortingOptionStrings).map(([value, text]) => (\n-        <MenuItem key={value} value={value}>\n-          {text}\n-        </MenuItem>\n-      ))}\n-    </Select>\n+    <>\n+      <InputLabel id={labelId} style={{ display: \"none\" }}>\n+        Search Order\n+      </InputLabel>\n+      <Select\n+        id={baseId}\n+        labelId={labelId}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODEyODM0OQ=="}, "originalCommit": {"oid": "a414981ce6228256bec1f328109eded25669029d"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4OTEwNDA0OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/MuiTestHelpers.ts", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNTo1NjozNFrOHIAU9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNzoyODo0NVrOHID0cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE1NjAyMw==", "bodyText": "Is there a plan for supporting MUI <Autocomplete> which kind of acts like a select ?", "url": "https://github.com/openequella/openEQUELLA/pull/2240#discussion_r478156023", "createdAt": "2020-08-27T05:56:34Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/MuiTestHelpers.ts", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import { screen } from \"@testing-library/react\";\n+import userEvent from \"@testing-library/user-event\";\n+\n+/**\n+ * Use to 'select' an option from a MUI `<Select>`. This is done through a series of\n+ * userEvent.click() calls.\n+ *\n+ * @param container The base container from which to start a search\n+ * @param selector A CSS selector to pass to `HTMLElement.querySelector()` to find the `<Select>`\n+ * @param optionText The text which represents the option you wish to select - user visible.\n+ */\n+export const selectOption = (", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a414981ce6228256bec1f328109eded25669029d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODIwMTMwMw==", "bodyText": "From what I saw, it looks like this could possibly work with <Autocomplete>s. But for the one I was testing it didn't have an ID but did have a rather specific text label ('Collections') so I didn't end up using selectOption. But the code I did use was basically the same - just started with a getByText or getByLabel on the rendered component.\n(The other issue I had trying to check with <Autocomplete>, is when attempting to inspect the DOM to check, the autocomplete would close the drop down list and so I couldn't see for sure.)", "url": "https://github.com/openequella/openEQUELLA/pull/2240#discussion_r478201303", "createdAt": "2020-08-27T07:04:32Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/MuiTestHelpers.ts", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import { screen } from \"@testing-library/react\";\n+import userEvent from \"@testing-library/user-event\";\n+\n+/**\n+ * Use to 'select' an option from a MUI `<Select>`. This is done through a series of\n+ * userEvent.click() calls.\n+ *\n+ * @param container The base container from which to start a search\n+ * @param selector A CSS selector to pass to `HTMLElement.querySelector()` to find the `<Select>`\n+ * @param optionText The text which represents the option you wish to select - user visible.\n+ */\n+export const selectOption = (", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE1NjAyMw=="}, "originalCommit": {"oid": "a414981ce6228256bec1f328109eded25669029d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODIxMzIzNQ==", "bodyText": "This is the same issue I have !", "url": "https://github.com/openequella/openEQUELLA/pull/2240#discussion_r478213235", "createdAt": "2020-08-27T07:28:45Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/MuiTestHelpers.ts", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import { screen } from \"@testing-library/react\";\n+import userEvent from \"@testing-library/user-event\";\n+\n+/**\n+ * Use to 'select' an option from a MUI `<Select>`. This is done through a series of\n+ * userEvent.click() calls.\n+ *\n+ * @param container The base container from which to start a search\n+ * @param selector A CSS selector to pass to `HTMLElement.querySelector()` to find the `<Select>`\n+ * @param optionText The text which represents the option you wish to select - user visible.\n+ */\n+export const selectOption = (", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE1NjAyMw=="}, "originalCommit": {"oid": "a414981ce6228256bec1f328109eded25669029d"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4OTExNTE1OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/MuiTestHelpers.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNTo1OToyNVrOHIAcPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNzowNjowMFrOHIDIxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE1Nzg4Ng==", "bodyText": "Ah this is what you described yesterday.  userEvent.click consists of a few events such as keydown whereas fireEvent does not.  MUI Select might listens to keydown  rather than 'click'.", "url": "https://github.com/openequella/openEQUELLA/pull/2240#discussion_r478157886", "createdAt": "2020-08-27T05:59:25Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/MuiTestHelpers.ts", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import { screen } from \"@testing-library/react\";\n+import userEvent from \"@testing-library/user-event\";\n+\n+/**\n+ * Use to 'select' an option from a MUI `<Select>`. This is done through a series of\n+ * userEvent.click() calls.\n+ *\n+ * @param container The base container from which to start a search\n+ * @param selector A CSS selector to pass to `HTMLElement.querySelector()` to find the `<Select>`\n+ * @param optionText The text which represents the option you wish to select - user visible.\n+ */\n+export const selectOption = (\n+  container: HTMLElement,\n+  selector: string,\n+  optionText: string\n+) => {\n+  const muiSelect = container.querySelector(selector);\n+  if (!muiSelect) {\n+    throw Error(\"Unable to find MUI Select.\");\n+  }\n+\n+  // Click the <Select>\n+  userEvent.click(muiSelect);\n+  // .. then click the option in the list\n+  userEvent.click(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a414981ce6228256bec1f328109eded25669029d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODIwMjA1Mg==", "bodyText": "That's correct. I wasted a good number of hours until I discovered MUI selects register onMouseDown not onClick. userEvent allows you to not worry about this - just like a user wouldn't worry about it.", "url": "https://github.com/openequella/openEQUELLA/pull/2240#discussion_r478202052", "createdAt": "2020-08-27T07:06:00Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/MuiTestHelpers.ts", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import { screen } from \"@testing-library/react\";\n+import userEvent from \"@testing-library/user-event\";\n+\n+/**\n+ * Use to 'select' an option from a MUI `<Select>`. This is done through a series of\n+ * userEvent.click() calls.\n+ *\n+ * @param container The base container from which to start a search\n+ * @param selector A CSS selector to pass to `HTMLElement.querySelector()` to find the `<Select>`\n+ * @param optionText The text which represents the option you wish to select - user visible.\n+ */\n+export const selectOption = (\n+  container: HTMLElement,\n+  selector: string,\n+  optionText: string\n+) => {\n+  const muiSelect = container.querySelector(selector);\n+  if (!muiSelect) {\n+    throw Error(\"Unable to find MUI Select.\");\n+  }\n+\n+  // Click the <Select>\n+  userEvent.click(muiSelect);\n+  // .. then click the option in the list\n+  userEvent.click(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE1Nzg4Ng=="}, "originalCommit": {"oid": "a414981ce6228256bec1f328109eded25669029d"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4OTEyNjcyOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/components/SearchPagination.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNjowMjoxMlrOHIAjrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNzowNjo1OFrOHIDKjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE1OTc5MQ==", "bodyText": "The comment for this line seems wrong.  It's on page 2 of 3 because the second parameter is 1.", "url": "https://github.com/openequella/openEQUELLA/pull/2240#discussion_r478159791", "createdAt": "2020-08-27T06:02:12Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/components/SearchPagination.test.tsx", "diffHunk": "@@ -39,87 +41,103 @@ describe(\"<SearchPagination/>\", () => {\n     );\n \n   it(\"Goes back to the first page of results when First Page Button is clicked\", () => {\n-    //currently on page 3 of 3\n-    const lastPage = searchPagination(30, 1, 10);\n-    const { firstPageButton } = paginatorControls(lastPage);\n+    // currently on page 3 of 3\n+    const { container } = searchPagination(30, 1, 10);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a414981ce6228256bec1f328109eded25669029d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODIwMjUwOA==", "bodyText": "Yeah, I agree. I left them as is, as I thought I might be missing something. But now that you mention it too. I'm going to go and rework them.", "url": "https://github.com/openequella/openEQUELLA/pull/2240#discussion_r478202508", "createdAt": "2020-08-27T07:06:58Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/components/SearchPagination.test.tsx", "diffHunk": "@@ -39,87 +41,103 @@ describe(\"<SearchPagination/>\", () => {\n     );\n \n   it(\"Goes back to the first page of results when First Page Button is clicked\", () => {\n-    //currently on page 3 of 3\n-    const lastPage = searchPagination(30, 1, 10);\n-    const { firstPageButton } = paginatorControls(lastPage);\n+    // currently on page 3 of 3\n+    const { container } = searchPagination(30, 1, 10);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE1OTc5MQ=="}, "originalCommit": {"oid": "a414981ce6228256bec1f328109eded25669029d"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4OTE0OTc0OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/components/SearchPagination.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNjowODowM1rOHIAy0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNzoxMDozM1rOHIDRBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE2MzY2NA==", "bodyText": "It seems like we can do a parameterised test for above 4 test cases ? But that probably does not bring in many benefits.", "url": "https://github.com/openequella/openEQUELLA/pull/2240#discussion_r478163664", "createdAt": "2020-08-27T06:08:03Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/components/SearchPagination.test.tsx", "diffHunk": "@@ -39,87 +41,103 @@ describe(\"<SearchPagination/>\", () => {\n     );\n \n   it(\"Goes back to the first page of results when First Page Button is clicked\", () => {\n-    //currently on page 3 of 3\n-    const lastPage = searchPagination(30, 1, 10);\n-    const { firstPageButton } = paginatorControls(lastPage);\n+    // currently on page 3 of 3\n+    const { container } = searchPagination(30, 1, 10);\n+    const { getFirstPageButton } = queryPaginatorControls(container);\n \n-    firstPageButton.simulate(\"click\");\n+    userEvent.click(getFirstPageButton());\n     expect(mockOnPageChange).toHaveBeenCalledWith(0);\n   });\n \n   it(\"Goes back to the previous page of results when Previous Page Button is clicked\", () => {\n-    //currently on page 2 of 2\n-    const lastPage = searchPagination(20, 1, 10);\n-    const { previousPageButton } = paginatorControls(lastPage);\n+    // currently on page 2 of 2\n+    const { container } = searchPagination(20, 1, 10);\n+    const { getPreviousPageButton } = queryPaginatorControls(container);\n \n-    previousPageButton.simulate(\"click\");\n+    userEvent.click(getPreviousPageButton());\n     expect(mockOnPageChange).toHaveBeenCalledWith(0);\n   });\n \n   it(\"Goes to the next page of results when Next Page Button is clicked\", () => {\n-    //currently on page 1 of 2\n-    const firstPage = searchPagination(20, 0, 10);\n-    const { nextPageButton } = paginatorControls(firstPage);\n+    // currently on page 1 of 2\n+    const { container } = searchPagination(20, 0, 10);\n+    const { getNextPageButton } = queryPaginatorControls(container);\n \n-    nextPageButton.simulate(\"click\");\n+    userEvent.click(getNextPageButton());\n     expect(mockOnPageChange).toHaveBeenCalledWith(1);\n   });\n \n   it(\"Goes to the last page of results when Last Page Button is clicked\", () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a414981ce6228256bec1f328109eded25669029d"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODIwNDE2NQ==", "bodyText": "You may be right. I have tried to avoid significant structural changes in that regard. I think that'd be a subsequent refactor - as then it's easier to ensure we're not losing bits and pieces.", "url": "https://github.com/openequella/openEQUELLA/pull/2240#discussion_r478204165", "createdAt": "2020-08-27T07:10:33Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/components/SearchPagination.test.tsx", "diffHunk": "@@ -39,87 +41,103 @@ describe(\"<SearchPagination/>\", () => {\n     );\n \n   it(\"Goes back to the first page of results when First Page Button is clicked\", () => {\n-    //currently on page 3 of 3\n-    const lastPage = searchPagination(30, 1, 10);\n-    const { firstPageButton } = paginatorControls(lastPage);\n+    // currently on page 3 of 3\n+    const { container } = searchPagination(30, 1, 10);\n+    const { getFirstPageButton } = queryPaginatorControls(container);\n \n-    firstPageButton.simulate(\"click\");\n+    userEvent.click(getFirstPageButton());\n     expect(mockOnPageChange).toHaveBeenCalledWith(0);\n   });\n \n   it(\"Goes back to the previous page of results when Previous Page Button is clicked\", () => {\n-    //currently on page 2 of 2\n-    const lastPage = searchPagination(20, 1, 10);\n-    const { previousPageButton } = paginatorControls(lastPage);\n+    // currently on page 2 of 2\n+    const { container } = searchPagination(20, 1, 10);\n+    const { getPreviousPageButton } = queryPaginatorControls(container);\n \n-    previousPageButton.simulate(\"click\");\n+    userEvent.click(getPreviousPageButton());\n     expect(mockOnPageChange).toHaveBeenCalledWith(0);\n   });\n \n   it(\"Goes to the next page of results when Next Page Button is clicked\", () => {\n-    //currently on page 1 of 2\n-    const firstPage = searchPagination(20, 0, 10);\n-    const { nextPageButton } = paginatorControls(firstPage);\n+    // currently on page 1 of 2\n+    const { container } = searchPagination(20, 0, 10);\n+    const { getNextPageButton } = queryPaginatorControls(container);\n \n-    nextPageButton.simulate(\"click\");\n+    userEvent.click(getNextPageButton());\n     expect(mockOnPageChange).toHaveBeenCalledWith(1);\n   });\n \n   it(\"Goes to the last page of results when Last Page Button is clicked\", () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE2MzY2NA=="}, "originalCommit": {"oid": "a414981ce6228256bec1f328109eded25669029d"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4OTE4NjkwOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/components/SearchPaginationTestHelper.ts", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNjoxNjo0NlrOHIBLbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNzozMToyN1rOHID6Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE2OTk2NQ==", "bodyText": "Is there any reason why you want to have another interface extending the base one rather than put below getXXX in the base interface ?  And They have the same comment. Should they have different comments to let people know the get ones throw exceptions and the query ones don't ?", "url": "https://github.com/openequella/openEQUELLA/pull/2240#discussion_r478169965", "createdAt": "2020-08-27T06:16:46Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/components/SearchPaginationTestHelper.ts", "diffHunk": "@@ -15,29 +15,131 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-import { ReactWrapper } from \"enzyme\";\n-\n-interface PaginatorControls {\n-  firstPageButton: ReactWrapper;\n-  previousPageButton: ReactWrapper;\n-  nextPageButton: ReactWrapper;\n-  lastPageButton: ReactWrapper;\n-  pageCount: ReactWrapper;\n+import { screen } from \"@testing-library/react\";\n+\n+const createGetQuery = (\n+  elementName: string,\n+  fn: () => HTMLElement | null\n+): (() => HTMLElement) => () => {\n+  const e = fn();\n+  if (!e) {\n+    throw new Error(`Failed to get element: ${elementName}`);\n+  }\n+\n+  return e;\n+};\n+\n+interface PaginatorBaseQueries {\n+  /**\n+   * The text caption for the control (e.g. \"Items per page\"), which then also has an #id which\n+   * is the aria-labelledby to link to the pop up list for the MUI Select.\n+   */\n+  queryCaption: () => HTMLElement | null;\n+  queryFirstPageButton: () => HTMLElement | null;\n+  queryItemsPerPageOption: (pageItems: number) => HTMLElement | null;\n+  queryItemsPerPageSelect: () => HTMLElement | null;\n+  queryLastPageButton: () => HTMLElement | null;\n+  queryNextPageButton: () => HTMLElement | null;\n+  queryPageCount: () => HTMLElement | null;\n+  queryPreviousPageButton: () => HTMLElement | null;\n }\n \n-/**\n- * Provides a helper function for east access to pagination controls\n- * Takes a ReactWrapper, representing SearchPagination component\n- * @return {ReactWrapper} Wrappers for navigating to First, Previous, Next, and Last Page, and PageCount of pagination controls\n- */\n-export const paginatorControls = (\n-  component: ReactWrapper\n-): PaginatorControls => {\n+interface PaginatorQueries extends PaginatorBaseQueries {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a414981ce6228256bec1f328109eded25669029d"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODIwODM2Nw==", "bodyText": "Sure is a reason.\nYou'll note that first I setup so called 'baseQueries', and then I build the other functions off that. Having the two interfaces allows me to build up the first (without the need for optionals) and then build up the other.\nFor example, say I had:\ninterface SomeInterface {\n  a: () => HTMLElement | null;\n  b: () => HTMLElement\n}\nHow do I then build that object such that b is created based on a. AFAIK I can't do:\nreturn {\n  a: () => {container.querySelector('body');\n  b: () => {\n    const e = a();\n    if( !e ) {\n      throw new Error(\"no e\");\n    }\n\n    return e;\n  }\n}\n???\nAs for the comment, you are correct. I could work these more.", "url": "https://github.com/openequella/openEQUELLA/pull/2240#discussion_r478208367", "createdAt": "2020-08-27T07:19:14Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/components/SearchPaginationTestHelper.ts", "diffHunk": "@@ -15,29 +15,131 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-import { ReactWrapper } from \"enzyme\";\n-\n-interface PaginatorControls {\n-  firstPageButton: ReactWrapper;\n-  previousPageButton: ReactWrapper;\n-  nextPageButton: ReactWrapper;\n-  lastPageButton: ReactWrapper;\n-  pageCount: ReactWrapper;\n+import { screen } from \"@testing-library/react\";\n+\n+const createGetQuery = (\n+  elementName: string,\n+  fn: () => HTMLElement | null\n+): (() => HTMLElement) => () => {\n+  const e = fn();\n+  if (!e) {\n+    throw new Error(`Failed to get element: ${elementName}`);\n+  }\n+\n+  return e;\n+};\n+\n+interface PaginatorBaseQueries {\n+  /**\n+   * The text caption for the control (e.g. \"Items per page\"), which then also has an #id which\n+   * is the aria-labelledby to link to the pop up list for the MUI Select.\n+   */\n+  queryCaption: () => HTMLElement | null;\n+  queryFirstPageButton: () => HTMLElement | null;\n+  queryItemsPerPageOption: (pageItems: number) => HTMLElement | null;\n+  queryItemsPerPageSelect: () => HTMLElement | null;\n+  queryLastPageButton: () => HTMLElement | null;\n+  queryNextPageButton: () => HTMLElement | null;\n+  queryPageCount: () => HTMLElement | null;\n+  queryPreviousPageButton: () => HTMLElement | null;\n }\n \n-/**\n- * Provides a helper function for east access to pagination controls\n- * Takes a ReactWrapper, representing SearchPagination component\n- * @return {ReactWrapper} Wrappers for navigating to First, Previous, Next, and Last Page, and PageCount of pagination controls\n- */\n-export const paginatorControls = (\n-  component: ReactWrapper\n-): PaginatorControls => {\n+interface PaginatorQueries extends PaginatorBaseQueries {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE2OTk2NQ=="}, "originalCommit": {"oid": "a414981ce6228256bec1f328109eded25669029d"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODIxNDY3MA==", "bodyText": "I get your idea! Cool.", "url": "https://github.com/openequella/openEQUELLA/pull/2240#discussion_r478214670", "createdAt": "2020-08-27T07:31:27Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/components/SearchPaginationTestHelper.ts", "diffHunk": "@@ -15,29 +15,131 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-import { ReactWrapper } from \"enzyme\";\n-\n-interface PaginatorControls {\n-  firstPageButton: ReactWrapper;\n-  previousPageButton: ReactWrapper;\n-  nextPageButton: ReactWrapper;\n-  lastPageButton: ReactWrapper;\n-  pageCount: ReactWrapper;\n+import { screen } from \"@testing-library/react\";\n+\n+const createGetQuery = (\n+  elementName: string,\n+  fn: () => HTMLElement | null\n+): (() => HTMLElement) => () => {\n+  const e = fn();\n+  if (!e) {\n+    throw new Error(`Failed to get element: ${elementName}`);\n+  }\n+\n+  return e;\n+};\n+\n+interface PaginatorBaseQueries {\n+  /**\n+   * The text caption for the control (e.g. \"Items per page\"), which then also has an #id which\n+   * is the aria-labelledby to link to the pop up list for the MUI Select.\n+   */\n+  queryCaption: () => HTMLElement | null;\n+  queryFirstPageButton: () => HTMLElement | null;\n+  queryItemsPerPageOption: (pageItems: number) => HTMLElement | null;\n+  queryItemsPerPageSelect: () => HTMLElement | null;\n+  queryLastPageButton: () => HTMLElement | null;\n+  queryNextPageButton: () => HTMLElement | null;\n+  queryPageCount: () => HTMLElement | null;\n+  queryPreviousPageButton: () => HTMLElement | null;\n }\n \n-/**\n- * Provides a helper function for east access to pagination controls\n- * Takes a ReactWrapper, representing SearchPagination component\n- * @return {ReactWrapper} Wrappers for navigating to First, Previous, Next, and Last Page, and PageCount of pagination controls\n- */\n-export const paginatorControls = (\n-  component: ReactWrapper\n-): PaginatorControls => {\n+interface PaginatorQueries extends PaginatorBaseQueries {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE2OTk2NQ=="}, "originalCommit": {"oid": "a414981ce6228256bec1f328109eded25669029d"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4OTI3MDM5OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNjozNTozMVrOHICCEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODowMTo0NlrOHIE7LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE4Mzk1NQ==", "bodyText": "Have you tried calling advanceTimersByTime(1000) after this await ?", "url": "https://github.com/openequella/openEQUELLA/pull/2240#discussion_r478183955", "createdAt": "2020-08-27T06:35:31Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -143,13 +141,48 @@ const queryRefineSearchComponent = (\n const getRefineSearchComponent = (\n   container: Element,\n   componentSuffix: string\n-) => {\n+): HTMLElement => {\n   const e = queryRefineSearchComponent(container, componentSuffix);\n   if (!e) {\n     throw new Error(`Failed to find ${componentSuffix}`);\n   }\n \n-  return e as HTMLElement;\n+  return e;\n+};\n+\n+const getQueryBar = (container: Element): HTMLElement => {\n+  const queryBar = container.querySelector<HTMLElement>(\"#searchBar\");\n+  if (!queryBar) {\n+    throw new Error(\"Failed to locate the search bar, unable to continue.\");\n+  }\n+\n+  return queryBar;\n+};\n+\n+const changeQuery = async (\n+  container: Element,\n+  query: string,\n+  rawMode?: boolean\n+) => {\n+  // We will change the debounced query so use fake timer here.\n+  jest.useFakeTimers(\"modern\");\n+  // Change search options now.\n+  if (rawMode) {\n+    const rawModeSwitch = container.querySelector(\"#rawSearch\");\n+    if (!rawModeSwitch) {\n+      throw new Error(\"Failed to find the raw mode switch!\");\n+    }\n+    userEvent.click(rawModeSwitch);\n+  }\n+  const _queryBar = () => getQueryBar(container);\n+  // Would be nice to replace this with a userEvent.type like:\n+  //   await act(async () => await userEvent.type(_queryBar(), query, {delay: 1}));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a414981ce6228256bec1f328109eded25669029d"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODIxMDEwMw==", "bodyText": "It does that down in the waitFor down on line 184 doesn't it? Or do you mean something else?\nOf note, it's the expect in the waitFor which fails. It only ever sees the last character of query. For example, if query was abcd it says the expect fails as the value is only \"d\" rather than \"abcd\". \ud83d\ude15\n(Keep in mind the waitFor loops, so it possibly even does it more.)", "url": "https://github.com/openequella/openEQUELLA/pull/2240#discussion_r478210103", "createdAt": "2020-08-27T07:22:41Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -143,13 +141,48 @@ const queryRefineSearchComponent = (\n const getRefineSearchComponent = (\n   container: Element,\n   componentSuffix: string\n-) => {\n+): HTMLElement => {\n   const e = queryRefineSearchComponent(container, componentSuffix);\n   if (!e) {\n     throw new Error(`Failed to find ${componentSuffix}`);\n   }\n \n-  return e as HTMLElement;\n+  return e;\n+};\n+\n+const getQueryBar = (container: Element): HTMLElement => {\n+  const queryBar = container.querySelector<HTMLElement>(\"#searchBar\");\n+  if (!queryBar) {\n+    throw new Error(\"Failed to locate the search bar, unable to continue.\");\n+  }\n+\n+  return queryBar;\n+};\n+\n+const changeQuery = async (\n+  container: Element,\n+  query: string,\n+  rawMode?: boolean\n+) => {\n+  // We will change the debounced query so use fake timer here.\n+  jest.useFakeTimers(\"modern\");\n+  // Change search options now.\n+  if (rawMode) {\n+    const rawModeSwitch = container.querySelector(\"#rawSearch\");\n+    if (!rawModeSwitch) {\n+      throw new Error(\"Failed to find the raw mode switch!\");\n+    }\n+    userEvent.click(rawModeSwitch);\n+  }\n+  const _queryBar = () => getQueryBar(container);\n+  // Would be nice to replace this with a userEvent.type like:\n+  //   await act(async () => await userEvent.type(_queryBar(), query, {delay: 1}));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE4Mzk1NQ=="}, "originalCommit": {"oid": "a414981ce6228256bec1f328109eded25669029d"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODIzMTM0MA==", "bodyText": "I mean in your attempt with userEvent.type", "url": "https://github.com/openequella/openEQUELLA/pull/2240#discussion_r478231340", "createdAt": "2020-08-27T08:01:46Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -143,13 +141,48 @@ const queryRefineSearchComponent = (\n const getRefineSearchComponent = (\n   container: Element,\n   componentSuffix: string\n-) => {\n+): HTMLElement => {\n   const e = queryRefineSearchComponent(container, componentSuffix);\n   if (!e) {\n     throw new Error(`Failed to find ${componentSuffix}`);\n   }\n \n-  return e as HTMLElement;\n+  return e;\n+};\n+\n+const getQueryBar = (container: Element): HTMLElement => {\n+  const queryBar = container.querySelector<HTMLElement>(\"#searchBar\");\n+  if (!queryBar) {\n+    throw new Error(\"Failed to locate the search bar, unable to continue.\");\n+  }\n+\n+  return queryBar;\n+};\n+\n+const changeQuery = async (\n+  container: Element,\n+  query: string,\n+  rawMode?: boolean\n+) => {\n+  // We will change the debounced query so use fake timer here.\n+  jest.useFakeTimers(\"modern\");\n+  // Change search options now.\n+  if (rawMode) {\n+    const rawModeSwitch = container.querySelector(\"#rawSearch\");\n+    if (!rawModeSwitch) {\n+      throw new Error(\"Failed to find the raw mode switch!\");\n+    }\n+    userEvent.click(rawModeSwitch);\n+  }\n+  const _queryBar = () => getQueryBar(container);\n+  // Would be nice to replace this with a userEvent.type like:\n+  //   await act(async () => await userEvent.type(_queryBar(), query, {delay: 1}));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE4Mzk1NQ=="}, "originalCommit": {"oid": "a414981ce6228256bec1f328109eded25669029d"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4OTMwMjI3OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNjo0MjoyM1rOHICWag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNzoyMzoyN1rOHIDpkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE4OTE2Mg==", "bodyText": "I was very struggling to do this with Enzyme!  So userEvent.click works for MUI <Autocomplete />!!", "url": "https://github.com/openequella/openEQUELLA/pull/2240#discussion_r478189162", "createdAt": "2020-08-27T06:42:23Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -611,44 +579,31 @@ describe(\"<SearchPage/>\", () => {\n     expect(SearchModule.searchItems).toHaveBeenCalledTimes(3);\n   });\n \n-  it(\"should filter search results by collections\", async () => {\n-    const selectedCollections = [\n-      {\n-        uuid: \"8e3caf16-f3cb-b3dd-d403-e5eb8d545fff\",\n-        name: \"DRM Test Collection\",\n-      },\n-      {\n-        uuid: \"8e3caf16-f3cb-b3dd-d403-e5eb8d545ffe\",\n-        name: \"Generic Testing Collection\",\n-      },\n-    ];\n-    component.update();\n-    const collectionSelector = component.find(CollectionSelector);\n-    const handleCollectionChange: (\n-      collections: CollectionsModule.Collection[]\n-    ) => void = collectionSelector.prop(\"onSelectionChange\");\n-    await awaitAct(() => handleCollectionChange(selectedCollections));\n-    expect(SearchModule.searchItems).toHaveBeenCalledTimes(2);\n-    expect(SearchModule.searchItems).toHaveBeenCalledWith({\n+  it(\"filters by date range derived from 'Quick Options'\", async () => {\n+    selectOption(page.container, \"#date_range_selector\", \"Today\");\n+    await waitForSearch();\n+\n+    expect(SearchModule.searchItems).toHaveBeenLastCalledWith({\n       ...defaultSearchPageOptions,\n-      collections: selectedCollections,\n+      lastModifiedDateRange: {\n+        start: new Date(), // i.e. Today as per the quick option\n+        end: undefined,\n+      },\n     });\n   });\n \n-  it(\"should support selecting a date range through Quick options\", async () => {\n-    component.update();\n-    const quickOptions = component.find(\"#date_range_selector input\");\n-    await awaitAct(() =>\n-      quickOptions.simulate(\"change\", { target: { value: \"Today\" } })\n+  it(\"filters by selected collection\", async () => {\n+    const targetCollection: Collection = getCollectionMap[0];\n+    userEvent.click(\n+      page.getByLabelText(languageStrings.searchpage.collectionSelector.title)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a414981ce6228256bec1f328109eded25669029d"}, "originalPosition": 464}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODIxMDQ0OQ==", "bodyText": "Sure does! Nice an easy. (And this is almost the same pattern as the selectOption helper.)", "url": "https://github.com/openequella/openEQUELLA/pull/2240#discussion_r478210449", "createdAt": "2020-08-27T07:23:27Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -611,44 +579,31 @@ describe(\"<SearchPage/>\", () => {\n     expect(SearchModule.searchItems).toHaveBeenCalledTimes(3);\n   });\n \n-  it(\"should filter search results by collections\", async () => {\n-    const selectedCollections = [\n-      {\n-        uuid: \"8e3caf16-f3cb-b3dd-d403-e5eb8d545fff\",\n-        name: \"DRM Test Collection\",\n-      },\n-      {\n-        uuid: \"8e3caf16-f3cb-b3dd-d403-e5eb8d545ffe\",\n-        name: \"Generic Testing Collection\",\n-      },\n-    ];\n-    component.update();\n-    const collectionSelector = component.find(CollectionSelector);\n-    const handleCollectionChange: (\n-      collections: CollectionsModule.Collection[]\n-    ) => void = collectionSelector.prop(\"onSelectionChange\");\n-    await awaitAct(() => handleCollectionChange(selectedCollections));\n-    expect(SearchModule.searchItems).toHaveBeenCalledTimes(2);\n-    expect(SearchModule.searchItems).toHaveBeenCalledWith({\n+  it(\"filters by date range derived from 'Quick Options'\", async () => {\n+    selectOption(page.container, \"#date_range_selector\", \"Today\");\n+    await waitForSearch();\n+\n+    expect(SearchModule.searchItems).toHaveBeenLastCalledWith({\n       ...defaultSearchPageOptions,\n-      collections: selectedCollections,\n+      lastModifiedDateRange: {\n+        start: new Date(), // i.e. Today as per the quick option\n+        end: undefined,\n+      },\n     });\n   });\n \n-  it(\"should support selecting a date range through Quick options\", async () => {\n-    component.update();\n-    const quickOptions = component.find(\"#date_range_selector input\");\n-    await awaitAct(() =>\n-      quickOptions.simulate(\"change\", { target: { value: \"Today\" } })\n+  it(\"filters by selected collection\", async () => {\n+    const targetCollection: Collection = getCollectionMap[0];\n+    userEvent.click(\n+      page.getByLabelText(languageStrings.searchpage.collectionSelector.title)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE4OTE2Mg=="}, "originalCommit": {"oid": "a414981ce6228256bec1f328109eded25669029d"}, "originalPosition": 464}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1750, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}