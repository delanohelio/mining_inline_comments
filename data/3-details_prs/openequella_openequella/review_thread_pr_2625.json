{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzOTAwMTMx", "number": 2625, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNjoyNjo0OVrOFICi2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMjo1ODo0M1rOFLFIEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTc0NjE4OnYy", "diffSide": "LEFT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNjoyNjo0OVrOIJv3rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNjoyNjo0OVrOIJv3rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA5MjM5OQ==", "bodyText": "location.pathname.endsWith(\"searching.do\") can't guarantee the shared link is generated from old UI now due to the support of Quick Search.", "url": "https://github.com/openequella/openEQUELLA/pull/2625#discussion_r547092399", "createdAt": "2020-12-22T06:26:49Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -247,18 +247,23 @@ export const generateCategoryWhereQuery = (\n export const queryStringParamsToSearchOptions = async (\n   location: Location\n ): Promise<SearchOptions | undefined> => {\n-  if (!location.search) return undefined;\n-  const params = new URLSearchParams(location.search);\n-\n-  // If no query strings is of type LegacySearchParams, return undefined.\n-  if (!Array.from(params.keys()).some((key) => LegacySearchParams.guard(key))) {\n+  if (!location.search) {\n     return undefined;\n   }\n-\n-  if (location.pathname.endsWith(\"searching.do\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd628d879902e74d8dfa42ab7479d89d51874177"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTc5MjM3OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNjo0ODoyNVrOIJwRyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMjozNDoyMFrOIKPPkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA5OTA4Mw==", "bodyText": "Seems rather verbose, would it be fine to have:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              const params = new URLSearchParams(location.search);\n          \n          \n            \n              const searchOptions = params.get(\"searchOptions\");\n          \n          \n            \n              const searchOptions = new URLSearchParams(location.search).get(\"searchOptions\");", "url": "https://github.com/openequella/openEQUELLA/pull/2625#discussion_r547099083", "createdAt": "2020-12-22T06:48:25Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -247,18 +247,23 @@ export const generateCategoryWhereQuery = (\n export const queryStringParamsToSearchOptions = async (\n   location: Location\n ): Promise<SearchOptions | undefined> => {\n-  if (!location.search) return undefined;\n-  const params = new URLSearchParams(location.search);\n-\n-  // If no query strings is of type LegacySearchParams, return undefined.\n-  if (!Array.from(params.keys()).some((key) => LegacySearchParams.guard(key))) {\n+  if (!location.search) {\n     return undefined;\n   }\n-\n-  if (location.pathname.endsWith(\"searching.do\")) {\n+  const params = new URLSearchParams(location.search);\n+  const searchOptions = params.get(\"searchOptions\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd628d879902e74d8dfa42ab7479d89d51874177"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU0NTAwMQ==", "bodyText": "Both params  and  searchOptions are needed in the below if block.", "url": "https://github.com/openequella/openEQUELLA/pull/2625#discussion_r547545001", "createdAt": "2020-12-22T22:51:42Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -247,18 +247,23 @@ export const generateCategoryWhereQuery = (\n export const queryStringParamsToSearchOptions = async (\n   location: Location\n ): Promise<SearchOptions | undefined> => {\n-  if (!location.search) return undefined;\n-  const params = new URLSearchParams(location.search);\n-\n-  // If no query strings is of type LegacySearchParams, return undefined.\n-  if (!Array.from(params.keys()).some((key) => LegacySearchParams.guard(key))) {\n+  if (!location.search) {\n     return undefined;\n   }\n-\n-  if (location.pathname.endsWith(\"searching.do\")) {\n+  const params = new URLSearchParams(location.search);\n+  const searchOptions = params.get(\"searchOptions\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA5OTA4Mw=="}, "originalCommit": {"oid": "dd628d879902e74d8dfa42ab7479d89d51874177"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYwNjQxNg==", "bodyText": "Aaaah yes, of course. I should've read ahead before commenting. ;)", "url": "https://github.com/openequella/openEQUELLA/pull/2625#discussion_r547606416", "createdAt": "2020-12-23T02:34:20Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -247,18 +247,23 @@ export const generateCategoryWhereQuery = (\n export const queryStringParamsToSearchOptions = async (\n   location: Location\n ): Promise<SearchOptions | undefined> => {\n-  if (!location.search) return undefined;\n-  const params = new URLSearchParams(location.search);\n-\n-  // If no query strings is of type LegacySearchParams, return undefined.\n-  if (!Array.from(params.keys()).some((key) => LegacySearchParams.guard(key))) {\n+  if (!location.search) {\n     return undefined;\n   }\n-\n-  if (location.pathname.endsWith(\"searching.do\")) {\n+  const params = new URLSearchParams(location.search);\n+  const searchOptions = params.get(\"searchOptions\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA5OTA4Mw=="}, "originalCommit": {"oid": "dd628d879902e74d8dfa42ab7479d89d51874177"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTgwMjkwOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNjo1Mzo0N1rOIJwYGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNjo1Mzo0N1rOIJwYGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEwMDY5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              // If SearchOptions is in query string, convert the string to a SearchOptions.\n          \n          \n            \n              // Or, if query string contains 'LegacySearchParams', convert the string\n          \n          \n            \n              // to a SearchOptions.\n          \n          \n            \n              // Otherwise, return undefined.\n          \n          \n            \n              // If the query params contain `searchOptions` convert to `SearchOptions` with `newSearchQueryToSearchOptions`.\n          \n          \n            \n              // Else if the query params contain params from legacy `searching.do` (i.e. `LegacySearchParams`) then convert to\n          \n          \n            \n              //   `searchOptions` with `legacyQueryStringToSearchOptions`\n          \n          \n            \n              // For all else, return `undefined`.", "url": "https://github.com/openequella/openEQUELLA/pull/2625#discussion_r547100698", "createdAt": "2020-12-22T06:53:47Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -247,18 +247,23 @@ export const generateCategoryWhereQuery = (\n export const queryStringParamsToSearchOptions = async (\n   location: Location\n ): Promise<SearchOptions | undefined> => {\n-  if (!location.search) return undefined;\n-  const params = new URLSearchParams(location.search);\n-\n-  // If no query strings is of type LegacySearchParams, return undefined.\n-  if (!Array.from(params.keys()).some((key) => LegacySearchParams.guard(key))) {\n+  if (!location.search) {\n     return undefined;\n   }\n-\n-  if (location.pathname.endsWith(\"searching.do\")) {\n+  const params = new URLSearchParams(location.search);\n+  const searchOptions = params.get(\"searchOptions\");\n+  // If SearchOptions is in query string, convert the string to a SearchOptions.\n+  // Or, if query string contains 'LegacySearchParams', convert the string\n+  // to a SearchOptions.\n+  // Otherwise, return undefined.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd628d879902e74d8dfa42ab7479d89d51874177"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MTYyNjQxOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMjo1ODo0M1rOIOEHEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMzozMTo0N1rOIOE0cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYxODMyMg==", "bodyText": "what does undefined do in this case?", "url": "https://github.com/openequella/openEQUELLA/pull/2625#discussion_r551618322", "createdAt": "2021-01-04T22:58:43Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -247,18 +247,24 @@ export const generateCategoryWhereQuery = (\n export const queryStringParamsToSearchOptions = async (\n   location: Location\n ): Promise<SearchOptions | undefined> => {\n-  if (!location.search) return undefined;\n-  const params = new URLSearchParams(location.search);\n-\n-  // If no query strings is of type LegacySearchParams, return undefined.\n-  if (!Array.from(params.keys()).some((key) => LegacySearchParams.guard(key))) {\n+  if (!location.search) {\n     return undefined;\n   }\n-\n-  if (location.pathname.endsWith(\"searching.do\")) {\n+  const params = new URLSearchParams(location.search);\n+  const searchOptions = params.get(\"searchOptions\");\n+\n+  // If the query params contain `searchOptions` convert to `SearchOptions` with `newSearchQueryToSearchOptions`.\n+  // Else if the query params contain params from legacy `searching.do` (i.e. `LegacySearchParams`) then convert to\n+  // `searchOptions` with `legacyQueryStringToSearchOptions`.\n+  // For all else, return `undefined`.\n+  if (searchOptions) {\n+    return await newSearchQueryToSearchOptions(searchOptions);\n+  } else if (\n+    Array.from(params.keys()).some((key) => LegacySearchParams.guard(key))\n+  ) {\n     return await legacyQueryStringToSearchOptions(params);\n   }\n-  return await newSearchQueryToSearchOptions(params.get(\"searchOptions\") ?? \"\");\n+  return undefined;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a358ee192f6fd5eca618345cbfdd011c61a1a41"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYyOTkzNw==", "bodyText": "If this function returns undefined, it means new search page will use the default search options rather than the one stored in browser history or the one converted from URL query params.\nYou can see this logic in SearchPage.tsx line 168 to 181.", "url": "https://github.com/openequella/openEQUELLA/pull/2625#discussion_r551629937", "createdAt": "2021-01-04T23:31:47Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -247,18 +247,24 @@ export const generateCategoryWhereQuery = (\n export const queryStringParamsToSearchOptions = async (\n   location: Location\n ): Promise<SearchOptions | undefined> => {\n-  if (!location.search) return undefined;\n-  const params = new URLSearchParams(location.search);\n-\n-  // If no query strings is of type LegacySearchParams, return undefined.\n-  if (!Array.from(params.keys()).some((key) => LegacySearchParams.guard(key))) {\n+  if (!location.search) {\n     return undefined;\n   }\n-\n-  if (location.pathname.endsWith(\"searching.do\")) {\n+  const params = new URLSearchParams(location.search);\n+  const searchOptions = params.get(\"searchOptions\");\n+\n+  // If the query params contain `searchOptions` convert to `SearchOptions` with `newSearchQueryToSearchOptions`.\n+  // Else if the query params contain params from legacy `searching.do` (i.e. `LegacySearchParams`) then convert to\n+  // `searchOptions` with `legacyQueryStringToSearchOptions`.\n+  // For all else, return `undefined`.\n+  if (searchOptions) {\n+    return await newSearchQueryToSearchOptions(searchOptions);\n+  } else if (\n+    Array.from(params.keys()).some((key) => LegacySearchParams.guard(key))\n+  ) {\n     return await legacyQueryStringToSearchOptions(params);\n   }\n-  return await newSearchQueryToSearchOptions(params.get(\"searchOptions\") ?? \"\");\n+  return undefined;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYxODMyMg=="}, "originalCommit": {"oid": "4a358ee192f6fd5eca618345cbfdd011c61a1a41"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1641, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}