{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4NTMxNzc4", "number": 2046, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMzo0MTo0NVrOEOCy-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMzo0MTo0NVrOEOCy-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTYxMzM5OnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/src/Collection.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMzo0MTo0NVrOGw-o5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMDo0NjowN1rOGw_1uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxMTExMA==", "bodyText": "Since params is optional,  I think we can just pass params.", "url": "https://github.com/openequella/openEQUELLA/pull/2046#discussion_r454011110", "createdAt": "2020-07-13T23:41:45Z", "author": {"login": "PenghaiZhang"}, "path": "oeq-ts-rest-api/src/Collection.ts", "diffHunk": "@@ -0,0 +1,48 @@\n+import * as Common from './Common';\n+import { GET } from './AxiosInstance';\n+import * as Security from './Security';\n+import { is } from 'typescript-is';\n+\n+export interface CollectionSecurity extends Security.BaseEntitySecurity {\n+  dynamicRules: Security.DynamicRule[];\n+  metadata: Record<string, Security.ItemMetadataSecurity>;\n+  statuses: Record<string, Security.TargetListEntry[]>;\n+}\n+\n+export interface Collection extends Common.BaseEntity {\n+  schema: Common.BaseEntityReference;\n+  workflow?: Common.BaseEntityReference;\n+  reviewPeriod?: number;\n+  security: CollectionSecurity;\n+  filestoreId: string;\n+}\n+\n+const isPagedCollection = (\n+  instance: unknown\n+): instance is Common.PagedResult<Collection> =>\n+  is<Common.PagedResult<Collection>>(instance);\n+\n+const COLLECTION_ROOT_PATH = '/collection';\n+\n+/**\n+ * List all available collections which the currently authenticated user has access to. Results can\n+ * be customised based on params, and if the `full` param is specified then the return value is\n+ * actually `Collection` with all details.\n+ *\n+ * @param apiBasePath Base URI to the oEQ institution and API\n+ * @param params Query parameters to customize (and/or page) result\n+ */\n+export const listCollections = (\n+  apiBasePath: string,\n+  params?: Common.ListCommonParams\n+): Promise<Common.PagedResult<Common.BaseEntity>> => {\n+  // Only if the `full` param is specified do you get a whole Collection definition, otherwise\n+  // it's the bare minimum of BaseEntity.\n+  const validator = params?.full ? isPagedCollection : Common.isPagedBaseEntity;\n+\n+  return GET<Common.PagedResult<Common.BaseEntity>>(\n+    apiBasePath + COLLECTION_ROOT_PATH,\n+    validator,\n+    params ?? undefined", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b647291081d042a3737bd513a006e94cd72c5c"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAzMDc3Nw==", "bodyText": "Aha! Nice find @PenghaiZhang . I'll fix this up in Schema as well, it's hangover from when this change was made:\n9b1f37f", "url": "https://github.com/openequella/openEQUELLA/pull/2046#discussion_r454030777", "createdAt": "2020-07-14T00:46:07Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/src/Collection.ts", "diffHunk": "@@ -0,0 +1,48 @@\n+import * as Common from './Common';\n+import { GET } from './AxiosInstance';\n+import * as Security from './Security';\n+import { is } from 'typescript-is';\n+\n+export interface CollectionSecurity extends Security.BaseEntitySecurity {\n+  dynamicRules: Security.DynamicRule[];\n+  metadata: Record<string, Security.ItemMetadataSecurity>;\n+  statuses: Record<string, Security.TargetListEntry[]>;\n+}\n+\n+export interface Collection extends Common.BaseEntity {\n+  schema: Common.BaseEntityReference;\n+  workflow?: Common.BaseEntityReference;\n+  reviewPeriod?: number;\n+  security: CollectionSecurity;\n+  filestoreId: string;\n+}\n+\n+const isPagedCollection = (\n+  instance: unknown\n+): instance is Common.PagedResult<Collection> =>\n+  is<Common.PagedResult<Collection>>(instance);\n+\n+const COLLECTION_ROOT_PATH = '/collection';\n+\n+/**\n+ * List all available collections which the currently authenticated user has access to. Results can\n+ * be customised based on params, and if the `full` param is specified then the return value is\n+ * actually `Collection` with all details.\n+ *\n+ * @param apiBasePath Base URI to the oEQ institution and API\n+ * @param params Query parameters to customize (and/or page) result\n+ */\n+export const listCollections = (\n+  apiBasePath: string,\n+  params?: Common.ListCommonParams\n+): Promise<Common.PagedResult<Common.BaseEntity>> => {\n+  // Only if the `full` param is specified do you get a whole Collection definition, otherwise\n+  // it's the bare minimum of BaseEntity.\n+  const validator = params?.full ? isPagedCollection : Common.isPagedBaseEntity;\n+\n+  return GET<Common.PagedResult<Common.BaseEntity>>(\n+    apiBasePath + COLLECTION_ROOT_PATH,\n+    validator,\n+    params ?? undefined", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxMTExMA=="}, "originalCommit": {"oid": "65b647291081d042a3737bd513a006e94cd72c5c"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1273, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}