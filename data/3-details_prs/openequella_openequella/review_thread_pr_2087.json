{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0ODI3OTkx", "number": 2087, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMzo1NjowNVrOEQ4RuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDo1ODoxNlrOERTbpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTM0NzEzOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/SearchModule.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMzo1NjowNVrOG1RyUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMzo1NjowNVrOG1RyUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUxOTEyMA==", "bodyText": "This will need language strings.", "url": "https://github.com/openequella/openEQUELLA/pull/2087#discussion_r458519120", "createdAt": "2020-07-22T03:56:05Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/SearchModule.ts", "diffHunk": "@@ -108,3 +109,89 @@ export interface SearchOptions {\n    */\n   rawMode: boolean;\n }\n+\n+/**\n+ * Type of Last modified date range.\n+ */\n+export interface LastModifiedDateRange {\n+  /**\n+   * The date before which items are modified.\n+   */\n+  modifiedBefore?: string;\n+  /**\n+   * The date after which items are modified.\n+   */\n+  modifiedAfter?: string;\n+}\n+\n+/**\n+ * An enum providing five values as the Quick date options.\n+ */\n+export enum LastModifiedDateOption {\n+  ALL = \"All\",\n+  TODAY = \"Today\",\n+  LAST_SEVEN_DAYS = \"Last seven days\",\n+  LAST_MONTH = \"Last month\",\n+  THIS_YEAR = \"This year\",\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7b41bf3b4234936d4dc740bb2fca88a8eaccae9"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTM1NDA2OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/ModifiedDateSelector.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNDowMDozNlrOG1R2Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNDowMDozNlrOG1R2Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUyMDE2Mw==", "bodyText": "A couple of things:\n\nThese props are duplicates - maybe put them in an object and spread them; and\nShould format be using the locale format or if internal than ISO? (I'm not sure what this prop controls.)", "url": "https://github.com/openequella/openEQUELLA/pull/2087#discussion_r458520163", "createdAt": "2020-07-22T04:00:36Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/ModifiedDateSelector.tsx", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import {\n+  FormControl,\n+  Grid,\n+  InputLabel,\n+  MenuItem,\n+  Select,\n+} from \"@material-ui/core\";\n+import { InlineDatePicker } from \"material-ui-pickers\";\n+\n+import { DateTime } from \"luxon\";\n+import {\n+  dateOptionToDateRangeConverter,\n+  dateRangeToDateOptionConverter,\n+  LastModifiedDateOption,\n+  LastModifiedDateRange,\n+} from \"../SearchModule\";\n+import SettingsToggleSwitch from \"../../components/SettingsToggleSwitch\";\n+import { ReactNode } from \"react\";\n+import { languageStrings } from \"../../util/langstrings\";\n+\n+export interface ModifiedDateSelectorProps {\n+  /**\n+   * Fired when date range is changed.\n+   * @param dateRange A new date range.\n+   */\n+  onDateRangeChange: (dateRange?: LastModifiedDateRange) => void;\n+  /**\n+   * Fired when the status of Quick mode is changed.\n+   * @param enabled The new status of Quick mode\n+   */\n+  onQuickModeChange: (enabled: boolean) => void;\n+  /**\n+   * Initially selected date range.\n+   */\n+  dateRange?: LastModifiedDateRange;\n+  /**\n+   * Initial status of Quick mode.\n+   */\n+  quickModeEnabled?: boolean;\n+}\n+\n+/**\n+ * As a refine control, this component is used to filter search results by last modified dates.\n+ * Depending on what mode is selected, a Quick option Dropdown or two custom date pickers are displayed.\n+ */\n+export const ModifiedDateSelector = ({\n+  onDateRangeChange,\n+  onQuickModeChange,\n+  dateRange,\n+  quickModeEnabled,\n+}: ModifiedDateSelectorProps) => {\n+  const modifiedDateSelectorStrings =\n+    languageStrings.searchpage.modifiedDateSelector;\n+\n+  const handleQuickDateOptionChange = (\n+    option: LastModifiedDateOption\n+  ): void => {\n+    const dateRange = dateOptionToDateRangeConverter(option);\n+    onDateRangeChange(dateRange);\n+  };\n+\n+  const quickOptions: ReactNode = (\n+    <FormControl variant=\"outlined\" fullWidth>\n+      <InputLabel id=\"modified_date_range_selector_label\">\n+        {modifiedDateSelectorStrings.quickOptionLabel}\n+      </InputLabel>\n+      <Select\n+        value={dateRangeToDateOptionConverter(dateRange)}\n+        id=\"modified_date_range_selector\"\n+        labelId=\"modified_date_range_selector_label\"\n+        onChange={(event) =>\n+          handleQuickDateOptionChange(\n+            event.target.value as LastModifiedDateOption\n+          )\n+        }\n+        label={modifiedDateSelectorStrings.quickOptionLabel}\n+      >\n+        {Object.values(LastModifiedDateOption).map((value) => (\n+          <MenuItem key={value} value={value}>\n+            {value}\n+          </MenuItem>\n+        ))}\n+      </Select>\n+    </FormControl>\n+  );\n+\n+  const customDateRange: ReactNode = (\n+    <Grid container>\n+      <Grid item xs={6}>\n+        <InlineDatePicker\n+          disableFuture\n+          variant=\"outlined\"\n+          format=\"dd/MM/yyyy\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7b41bf3b4234936d4dc740bb2fca88a8eaccae9"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTc1ODgxOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/ModifiedDateSelector.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDozMzo0M1rOG176-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDozMzo0M1rOG176-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwOTQ2NA==", "bodyText": "AFAICT, there's no planned external use of this, so no need to export.", "url": "https://github.com/openequella/openEQUELLA/pull/2087#discussion_r459209464", "createdAt": "2020-07-23T04:33:43Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/ModifiedDateSelector.tsx", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import {\n+  FormControl,\n+  Grid,\n+  InputLabel,\n+  MenuItem,\n+  Select,\n+} from \"@material-ui/core\";\n+import { DatePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\n+import SettingsToggleSwitch from \"../../components/SettingsToggleSwitch\";\n+import { ReactNode } from \"react\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import { MaterialUiPickersDate } from \"@material-ui/pickers/typings/date\";\n+import LuxonUtils from \"@date-io/luxon\";\n+import { DateTime } from \"luxon\";\n+\n+/**\n+ * Type of Last modified date range.\n+ */\n+export interface LastModifiedDateRange {\n+  /**\n+   * The date before which items are modified.\n+   */\n+  modifiedBefore?: Date;\n+  /**\n+   * The date after which items are modified.\n+   */\n+  modifiedAfter?: Date;\n+}\n+\n+export interface ModifiedDateSelectorProps {\n+  /**\n+   * Fired when date range is changed.\n+   * @param dateRange A new date range.\n+   */\n+  onDateRangeChange: (dateRange?: LastModifiedDateRange) => void;\n+  /**\n+   * Fired when the status of Quick mode is changed.\n+   * @param enabled The new status of Quick mode\n+   */\n+  onQuickModeChange: (enabled: boolean) => void;\n+  /**\n+   * Initially selected date range.\n+   */\n+  dateRange?: LastModifiedDateRange;\n+  /**\n+   * Initial status of Quick mode.\n+   */\n+  quickModeEnabled?: boolean;\n+}\n+\n+type DatePickerInputVariant = \"standard\" | \"outlined\" | \"filled\";\n+type DatePickerWrapperVariant = \"dialog\" | \"inline\" | \"static\";\n+\n+/**\n+ * General props for Material ui Date Picker.\n+ *\n+ * @see BaseDatePickerProps\n+ * @see BasePickerProps\n+ */\n+export interface GeneralDatePickerProps {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59119d75b63ac97832b60cb59003c5c0730d38d4"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTc2MTk3OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/ModifiedDateSelector.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDozNTo1OFrOG178uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDozNTo1OFrOG178uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwOTkxNQ==", "bodyText": "I wonder if you've overdone it here. You only ever use one value from each of these, and they wont be used externally, so... \ud83e\udd14", "url": "https://github.com/openequella/openEQUELLA/pull/2087#discussion_r459209915", "createdAt": "2020-07-23T04:35:58Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/ModifiedDateSelector.tsx", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import {\n+  FormControl,\n+  Grid,\n+  InputLabel,\n+  MenuItem,\n+  Select,\n+} from \"@material-ui/core\";\n+import { DatePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\n+import SettingsToggleSwitch from \"../../components/SettingsToggleSwitch\";\n+import { ReactNode } from \"react\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import { MaterialUiPickersDate } from \"@material-ui/pickers/typings/date\";\n+import LuxonUtils from \"@date-io/luxon\";\n+import { DateTime } from \"luxon\";\n+\n+/**\n+ * Type of Last modified date range.\n+ */\n+export interface LastModifiedDateRange {\n+  /**\n+   * The date before which items are modified.\n+   */\n+  modifiedBefore?: Date;\n+  /**\n+   * The date after which items are modified.\n+   */\n+  modifiedAfter?: Date;\n+}\n+\n+export interface ModifiedDateSelectorProps {\n+  /**\n+   * Fired when date range is changed.\n+   * @param dateRange A new date range.\n+   */\n+  onDateRangeChange: (dateRange?: LastModifiedDateRange) => void;\n+  /**\n+   * Fired when the status of Quick mode is changed.\n+   * @param enabled The new status of Quick mode\n+   */\n+  onQuickModeChange: (enabled: boolean) => void;\n+  /**\n+   * Initially selected date range.\n+   */\n+  dateRange?: LastModifiedDateRange;\n+  /**\n+   * Initial status of Quick mode.\n+   */\n+  quickModeEnabled?: boolean;\n+}\n+\n+type DatePickerInputVariant = \"standard\" | \"outlined\" | \"filled\";\n+type DatePickerWrapperVariant = \"dialog\" | \"inline\" | \"static\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59119d75b63ac97832b60cb59003c5c0730d38d4"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTc2Mzk4OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/ModifiedDateSelector.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDozNzozNVrOG1795A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDozNzozNVrOG1795A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxMDIxMg==", "bodyText": "I wonder if you even need all this typing. Where you use it you end up doing a one off literal declaration of an object and then never change it. Sure you spread over the props into the element, but if it's got types then that'll check things for you anyway.", "url": "https://github.com/openequella/openEQUELLA/pull/2087#discussion_r459210212", "createdAt": "2020-07-23T04:37:35Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/ModifiedDateSelector.tsx", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import {\n+  FormControl,\n+  Grid,\n+  InputLabel,\n+  MenuItem,\n+  Select,\n+} from \"@material-ui/core\";\n+import { DatePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\n+import SettingsToggleSwitch from \"../../components/SettingsToggleSwitch\";\n+import { ReactNode } from \"react\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import { MaterialUiPickersDate } from \"@material-ui/pickers/typings/date\";\n+import LuxonUtils from \"@date-io/luxon\";\n+import { DateTime } from \"luxon\";\n+\n+/**\n+ * Type of Last modified date range.\n+ */\n+export interface LastModifiedDateRange {\n+  /**\n+   * The date before which items are modified.\n+   */\n+  modifiedBefore?: Date;\n+  /**\n+   * The date after which items are modified.\n+   */\n+  modifiedAfter?: Date;\n+}\n+\n+export interface ModifiedDateSelectorProps {\n+  /**\n+   * Fired when date range is changed.\n+   * @param dateRange A new date range.\n+   */\n+  onDateRangeChange: (dateRange?: LastModifiedDateRange) => void;\n+  /**\n+   * Fired when the status of Quick mode is changed.\n+   * @param enabled The new status of Quick mode\n+   */\n+  onQuickModeChange: (enabled: boolean) => void;\n+  /**\n+   * Initially selected date range.\n+   */\n+  dateRange?: LastModifiedDateRange;\n+  /**\n+   * Initial status of Quick mode.\n+   */\n+  quickModeEnabled?: boolean;\n+}\n+\n+type DatePickerInputVariant = \"standard\" | \"outlined\" | \"filled\";\n+type DatePickerWrapperVariant = \"dialog\" | \"inline\" | \"static\";\n+\n+/**\n+ * General props for Material ui Date Picker.\n+ *\n+ * @see BaseDatePickerProps\n+ * @see BasePickerProps\n+ */\n+export interface GeneralDatePickerProps {\n+  disableFuture: boolean;\n+  variant: DatePickerWrapperVariant;\n+  inputVariant: DatePickerInputVariant;\n+  autoOk: boolean;\n+  labelFunc: (value: MaterialUiPickersDate, invalidLabel: string) => string;\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59119d75b63ac97832b60cb59003c5c0730d38d4"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTc3MzAwOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/ModifiedDateSelector.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDo0Mzo1NFrOG18C4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDo0Mzo1NFrOG18C4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxMTQ5MA==", "bodyText": "Would be nice to use meaningful names here, something like:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  (value: DateTime | undefined, key: string) => {\n          \n          \n            \n                  (dt: DateTime | undefined, label: string) => {\n          \n      \n    \n    \n  \n\ndt is not great, but might do. I wonder about optionDateTime, but not sure.", "url": "https://github.com/openequella/openEQUELLA/pull/2087#discussion_r459211490", "createdAt": "2020-07-23T04:43:54Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/ModifiedDateSelector.tsx", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import {\n+  FormControl,\n+  Grid,\n+  InputLabel,\n+  MenuItem,\n+  Select,\n+} from \"@material-ui/core\";\n+import { DatePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\n+import SettingsToggleSwitch from \"../../components/SettingsToggleSwitch\";\n+import { ReactNode } from \"react\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import { MaterialUiPickersDate } from \"@material-ui/pickers/typings/date\";\n+import LuxonUtils from \"@date-io/luxon\";\n+import { DateTime } from \"luxon\";\n+\n+/**\n+ * Type of Last modified date range.\n+ */\n+export interface LastModifiedDateRange {\n+  /**\n+   * The date before which items are modified.\n+   */\n+  modifiedBefore?: Date;\n+  /**\n+   * The date after which items are modified.\n+   */\n+  modifiedAfter?: Date;\n+}\n+\n+export interface ModifiedDateSelectorProps {\n+  /**\n+   * Fired when date range is changed.\n+   * @param dateRange A new date range.\n+   */\n+  onDateRangeChange: (dateRange?: LastModifiedDateRange) => void;\n+  /**\n+   * Fired when the status of Quick mode is changed.\n+   * @param enabled The new status of Quick mode\n+   */\n+  onQuickModeChange: (enabled: boolean) => void;\n+  /**\n+   * Initially selected date range.\n+   */\n+  dateRange?: LastModifiedDateRange;\n+  /**\n+   * Initial status of Quick mode.\n+   */\n+  quickModeEnabled?: boolean;\n+}\n+\n+type DatePickerInputVariant = \"standard\" | \"outlined\" | \"filled\";\n+type DatePickerWrapperVariant = \"dialog\" | \"inline\" | \"static\";\n+\n+/**\n+ * General props for Material ui Date Picker.\n+ *\n+ * @see BaseDatePickerProps\n+ * @see BasePickerProps\n+ */\n+export interface GeneralDatePickerProps {\n+  disableFuture: boolean;\n+  variant: DatePickerWrapperVariant;\n+  inputVariant: DatePickerInputVariant;\n+  autoOk: boolean;\n+  labelFunc: (value: MaterialUiPickersDate, invalidLabel: string) => string;\n+}\n+\n+/**\n+ * As a refine control, this component is used to filter search results by last modified dates.\n+ * Depending on what mode is selected, a Quick option Dropdown or two custom date pickers are displayed.\n+ */\n+export const ModifiedDateSelector = ({\n+  onDateRangeChange,\n+  onQuickModeChange,\n+  dateRange,\n+  quickModeEnabled,\n+}: ModifiedDateSelectorProps) => {\n+  const {\n+    quickOptionLabel,\n+    quickOptionSwitchLabel,\n+    modifiedBeforeLabel,\n+    modifiedAfterLabel,\n+    optionsLabel,\n+  } = languageStrings.searchpage.modifiedDateSelector;\n+\n+  const datePickerProps: GeneralDatePickerProps = {\n+    disableFuture: true,\n+    variant: \"inline\",\n+    inputVariant: \"outlined\",\n+    autoOk: true,\n+    labelFunc: (value, invalidLabel) => value?.toLocaleString() ?? invalidLabel,\n+  };\n+\n+  /**\n+   * Return a map in which keys are language strings and values are instances of DateTime or undefined.\n+   */\n+  const getLastModifiedDateOptions = (): Map<string, DateTime | undefined> => {\n+    const { today, lastSevenDays, lastMonth, thisYear, all } = optionsLabel;\n+    const now = DateTime.local();\n+    return new Map([\n+      [today, now],\n+      [lastSevenDays, now.minus({ days: 7 })],\n+      [lastMonth, now.minus({ month: 1 })],\n+      [thisYear, DateTime.local(now.year)],\n+      [all, undefined],\n+    ]);\n+  };\n+\n+  /**\n+   * Convert a quick date option to a date range.\n+   * The value of field 'modifiedAfter' depends on what Quick date option is selected.\n+   * The value of field 'modifiedBefore' is always undefined.\n+   *\n+   * @param option  An option selected from the Quick date options.\n+   */\n+  const dateOptionToDateRangeConverter = (\n+    option: string\n+  ): LastModifiedDateRange => {\n+    const modifiedAfter = getLastModifiedDateOptions().get(option);\n+    return {\n+      modifiedAfter: modifiedAfter?.toJSDate(),\n+      modifiedBefore: undefined,\n+    };\n+  };\n+\n+  /**\n+   * Convert a date range to a Quick date option.\n+   * If the provided date range is undefined, or defined but the value of field modifiedAfter is undefined,\n+   * then return the Quick option \"All\".\n+   * Otherwise, returns the Quick option whose value is equal to modifiedAfter in ISO Date format.\n+   *\n+   * @param dateRange A date range to be converted to a Quick date range\n+   */\n+  const dateRangeToDateOptionConverter = (\n+    dateRange?: LastModifiedDateRange\n+  ): string => {\n+    let option = optionsLabel.all;\n+    if (!dateRange || !dateRange.modifiedAfter) {\n+      return option;\n+    }\n+    const modifiedAfter = DateTime.fromJSDate(dateRange.modifiedAfter);\n+    getLastModifiedDateOptions().forEach(\n+      (value: DateTime | undefined, key: string) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59119d75b63ac97832b60cb59003c5c0730d38d4"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTc5NjIyOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/ModifiedDateSelector.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDo1ODoxNlrOG18PNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDo1ODoxNlrOG18PNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxNDY0Ng==", "bodyText": "That's a big duplicated block other than value and label. I'd say either create a function, or internal component (i.e. another component in this file), or even something maybe fun like:\nnew Map([\n  [modifiedAfterLabel, dateRange?.modifiedAfter],\n  [modifiedBeforeLabel, dateRange?.modifiedBefore],\n]).forEach((label, value) =>\n  <Grid item>\n    <DatePicker\n      {...datePickerProps}\n        label={label}\n        value={value}\n        onChange={(newDate: MaterialUiPickersDate) =>\n          onDateRangeChange({\n            ...dateRange,\n            modifiedBefore: newDate?.toJSDate(),\n          })\n        }\n    />\n  </Grid>\n);", "url": "https://github.com/openequella/openEQUELLA/pull/2087#discussion_r459214646", "createdAt": "2020-07-23T04:58:16Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/ModifiedDateSelector.tsx", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import {\n+  FormControl,\n+  Grid,\n+  InputLabel,\n+  MenuItem,\n+  Select,\n+} from \"@material-ui/core\";\n+import { DatePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\n+import SettingsToggleSwitch from \"../../components/SettingsToggleSwitch\";\n+import { ReactNode } from \"react\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import { MaterialUiPickersDate } from \"@material-ui/pickers/typings/date\";\n+import LuxonUtils from \"@date-io/luxon\";\n+import { DateTime } from \"luxon\";\n+\n+/**\n+ * Type of Last modified date range.\n+ */\n+export interface LastModifiedDateRange {\n+  /**\n+   * The date before which items are modified.\n+   */\n+  modifiedBefore?: Date;\n+  /**\n+   * The date after which items are modified.\n+   */\n+  modifiedAfter?: Date;\n+}\n+\n+export interface ModifiedDateSelectorProps {\n+  /**\n+   * Fired when date range is changed.\n+   * @param dateRange A new date range.\n+   */\n+  onDateRangeChange: (dateRange?: LastModifiedDateRange) => void;\n+  /**\n+   * Fired when the status of Quick mode is changed.\n+   * @param enabled The new status of Quick mode\n+   */\n+  onQuickModeChange: (enabled: boolean) => void;\n+  /**\n+   * Initially selected date range.\n+   */\n+  dateRange?: LastModifiedDateRange;\n+  /**\n+   * Initial status of Quick mode.\n+   */\n+  quickModeEnabled?: boolean;\n+}\n+\n+type DatePickerInputVariant = \"standard\" | \"outlined\" | \"filled\";\n+type DatePickerWrapperVariant = \"dialog\" | \"inline\" | \"static\";\n+\n+/**\n+ * General props for Material ui Date Picker.\n+ *\n+ * @see BaseDatePickerProps\n+ * @see BasePickerProps\n+ */\n+export interface GeneralDatePickerProps {\n+  disableFuture: boolean;\n+  variant: DatePickerWrapperVariant;\n+  inputVariant: DatePickerInputVariant;\n+  autoOk: boolean;\n+  labelFunc: (value: MaterialUiPickersDate, invalidLabel: string) => string;\n+}\n+\n+/**\n+ * As a refine control, this component is used to filter search results by last modified dates.\n+ * Depending on what mode is selected, a Quick option Dropdown or two custom date pickers are displayed.\n+ */\n+export const ModifiedDateSelector = ({\n+  onDateRangeChange,\n+  onQuickModeChange,\n+  dateRange,\n+  quickModeEnabled,\n+}: ModifiedDateSelectorProps) => {\n+  const {\n+    quickOptionLabel,\n+    quickOptionSwitchLabel,\n+    modifiedBeforeLabel,\n+    modifiedAfterLabel,\n+    optionsLabel,\n+  } = languageStrings.searchpage.modifiedDateSelector;\n+\n+  const datePickerProps: GeneralDatePickerProps = {\n+    disableFuture: true,\n+    variant: \"inline\",\n+    inputVariant: \"outlined\",\n+    autoOk: true,\n+    labelFunc: (value, invalidLabel) => value?.toLocaleString() ?? invalidLabel,\n+  };\n+\n+  /**\n+   * Return a map in which keys are language strings and values are instances of DateTime or undefined.\n+   */\n+  const getLastModifiedDateOptions = (): Map<string, DateTime | undefined> => {\n+    const { today, lastSevenDays, lastMonth, thisYear, all } = optionsLabel;\n+    const now = DateTime.local();\n+    return new Map([\n+      [today, now],\n+      [lastSevenDays, now.minus({ days: 7 })],\n+      [lastMonth, now.minus({ month: 1 })],\n+      [thisYear, DateTime.local(now.year)],\n+      [all, undefined],\n+    ]);\n+  };\n+\n+  /**\n+   * Convert a quick date option to a date range.\n+   * The value of field 'modifiedAfter' depends on what Quick date option is selected.\n+   * The value of field 'modifiedBefore' is always undefined.\n+   *\n+   * @param option  An option selected from the Quick date options.\n+   */\n+  const dateOptionToDateRangeConverter = (\n+    option: string\n+  ): LastModifiedDateRange => {\n+    const modifiedAfter = getLastModifiedDateOptions().get(option);\n+    return {\n+      modifiedAfter: modifiedAfter?.toJSDate(),\n+      modifiedBefore: undefined,\n+    };\n+  };\n+\n+  /**\n+   * Convert a date range to a Quick date option.\n+   * If the provided date range is undefined, or defined but the value of field modifiedAfter is undefined,\n+   * then return the Quick option \"All\".\n+   * Otherwise, returns the Quick option whose value is equal to modifiedAfter in ISO Date format.\n+   *\n+   * @param dateRange A date range to be converted to a Quick date range\n+   */\n+  const dateRangeToDateOptionConverter = (\n+    dateRange?: LastModifiedDateRange\n+  ): string => {\n+    let option = optionsLabel.all;\n+    if (!dateRange || !dateRange.modifiedAfter) {\n+      return option;\n+    }\n+    const modifiedAfter = DateTime.fromJSDate(dateRange.modifiedAfter);\n+    getLastModifiedDateOptions().forEach(\n+      (value: DateTime | undefined, key: string) => {\n+        if (value && value.toISODate() === modifiedAfter.toISODate()) {\n+          option = key;\n+        }\n+      }\n+    );\n+\n+    return option;\n+  };\n+\n+  /**\n+   * Fired when a different Quick option is selected.\n+   * @param option A Quick option.\n+   */\n+  const handleQuickDateOptionChange = (option: string): void => {\n+    const dateRange = dateOptionToDateRangeConverter(option);\n+    onDateRangeChange(dateRange);\n+  };\n+\n+  const quickOptionSelector: ReactNode = (\n+    <FormControl variant=\"outlined\" fullWidth>\n+      <InputLabel id=\"modified_date_range_selector_label\">\n+        {quickOptionLabel}\n+      </InputLabel>\n+      <Select\n+        value={dateRangeToDateOptionConverter(dateRange)}\n+        id=\"modified_date_range_selector\"\n+        labelId=\"modified_date_range_selector_label\"\n+        onChange={(event) =>\n+          handleQuickDateOptionChange(event.target.value as string)\n+        }\n+        label={quickOptionLabel}\n+      >\n+        {Array.from(getLastModifiedDateOptions()).map(([option, _]) => (\n+          <MenuItem key={option} value={option}>\n+            {option}\n+          </MenuItem>\n+        ))}\n+      </Select>\n+    </FormControl>\n+  );\n+\n+  const customDatePicker: ReactNode = (\n+    <MuiPickersUtilsProvider utils={LuxonUtils}>\n+      <Grid container spacing={2}>\n+        <Grid item>\n+          <DatePicker\n+            {...datePickerProps}\n+            label={modifiedAfterLabel}\n+            value={dateRange?.modifiedAfter}\n+            onChange={(newDate: MaterialUiPickersDate) =>\n+              onDateRangeChange({\n+                ...dateRange,\n+                modifiedAfter: newDate?.toJSDate(),\n+              })\n+            }\n+          />\n+        </Grid>\n+        <Grid item>\n+          <DatePicker\n+            {...datePickerProps}\n+            label={modifiedBeforeLabel}\n+            value={dateRange?.modifiedBefore}\n+            onChange={(newDate: MaterialUiPickersDate) =>\n+              onDateRangeChange({\n+                ...dateRange,\n+                modifiedBefore: newDate?.toJSDate(),\n+              })\n+            }\n+          />\n+        </Grid>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59119d75b63ac97832b60cb59003c5c0730d38d4"}, "originalPosition": 231}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1157, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}