{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4MzQ1MzQ3", "number": 2561, "title": "Make pdf extraction safe", "bodyText": "Checklist\n\n\n the contributor license agreement is signed\n commit message follows commit guidelines\n\nDescription of change\n#2530\nText extraction for indexing on \"broken\" PDF files can cause performance and stability issues, slamming server CPU. This PR is to address this by adding a new column to the ATTACHMENT table. After a timeout (controlled by the existing property textExtracter.parseDurationCap in milliseconds in the plugins/com.tle.core.freetext/optional.properties file) PDF extraction will error out and a flag will be set to true on the attachment, errored_when_indexing. When the item is re-indexed for any reason, that attachment will be skipped for extraction.\nThis will serve to prevent perpetual server load hammering by the TextExtracter and also highlight problem attachments in the database. An admin would be able to go into the ATTACHMENT table and check for any with errored_while_indexing. If there are any, those attachments can be followed up and checked for issues.\nThis PR includes a migration to add the new column, com.tle.core.institution.migration.v20202.addIndexingErrorColumnMigration and set it to false by default. It has also been incorporated into Attachment serialization.", "createdAt": "2020-11-27T01:07:28Z", "url": "https://github.com/openequella/openEQUELLA/pull/2561", "merged": true, "mergeCommit": {"oid": "b70a6c8ececdc50f620dbb23104e1ef7cfea4ba4"}, "closed": true, "closedAt": "2020-12-08T02:33:13Z", "author": {"login": "SammyIsConfused"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdffKTgAH2gAyNTI4MzQ1MzQ3OmVkZWM4MjI1NDUxM2EzOTk4M2RhNTllZGI3MWNmNjNjMWM3YWRhZDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkAm8pgFqTU0NjY5NDg3NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "edec82254513a39983da59edb71cf63c1c7adad5", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/edec82254513a39983da59edb71cf63c1c7adad5", "committedDate": "2020-11-24T01:07:12Z", "message": "Add indexing error column migration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd4cf75f0a62429e0dbcc9a064388b5a5190e19e", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/bd4cf75f0a62429e0dbcc9a064388b5a5190e19e", "committedDate": "2020-11-24T01:08:50Z", "message": "Add new value to Attachment types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "724317b3a89d130b7ae99329aa02cc4c75807f47", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/724317b3a89d130b7ae99329aa02cc4c75807f47", "committedDate": "2020-11-24T01:09:43Z", "message": "Set error flag when timeout occurs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5360e761d85d89ec7ff348f38d1c2cc8dfd9d200", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/5360e761d85d89ec7ff348f38d1c2cc8dfd9d200", "committedDate": "2020-11-24T01:11:50Z", "message": "Set Propagation to REQUIRED\n\nMANDATORY requires a transaction to already exist before running, or it will error out.\nREQUIRED uses an existing transaction if there is one, but if there isn't it will create\none."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "457659427acc8ed85d2001467311b0238afe28fc", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/457659427acc8ed85d2001467311b0238afe28fc", "committedDate": "2020-11-24T01:15:23Z", "message": "Add Migration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2735e36fb9614a07d5ccfab97c3488cca10fe856", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/2735e36fb9614a07d5ccfab97c3488cca10fe856", "committedDate": "2020-11-24T01:17:42Z", "message": "Add throws to method signatures"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f15e2c6c6333722d4d90dbc3f42babbade6a13e3", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/f15e2c6c6333722d4d90dbc3f42babbade6a13e3", "committedDate": "2020-11-27T00:46:02Z", "message": "Add indexing error column migration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94625bef9197f0ded92a74f88fa2c9b541a02030", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/94625bef9197f0ded92a74f88fa2c9b541a02030", "committedDate": "2020-11-27T00:46:02Z", "message": "Add new value to Attachment types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbc6854b5b514a27c9e6fea8bab0b37a50b20b6c", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/bbc6854b5b514a27c9e6fea8bab0b37a50b20b6c", "committedDate": "2020-11-27T00:46:02Z", "message": "Set error flag when timeout occurs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ccb1625702115ab367662fc79922e38624e3eac", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/0ccb1625702115ab367662fc79922e38624e3eac", "committedDate": "2020-11-27T00:46:02Z", "message": "Set Propagation to REQUIRED\n\nMANDATORY requires a transaction to already exist before running, or it will error out.\nREQUIRED uses an existing transaction if there is one, but if there isn't it will create\none."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83f0981ab9c307eda2255220cee2cc88ef3af421", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/83f0981ab9c307eda2255220cee2cc88ef3af421", "committedDate": "2020-11-27T00:46:02Z", "message": "Add Migration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b6c1a8715159c4cef60c306736e9780ba610588", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/6b6c1a8715159c4cef60c306736e9780ba610588", "committedDate": "2020-11-27T00:46:02Z", "message": "Add throws to method signatures"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76b8b68acc3f43f9d76a06a49d90920d0c39afa3", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/76b8b68acc3f43f9d76a06a49d90920d0c39afa3", "committedDate": "2020-11-27T00:46:28Z", "message": "Merge branch 'bugfix/make_pdf_extraction_safe' of github.com:SammyIsConfused/openEQUELLA into bugfix/make_pdf_extraction_safe"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "302200fd9fed34fc3084d65635188ecb32cc8e3c", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/302200fd9fed34fc3084d65635188ecb32cc8e3c", "committedDate": "2020-11-27T05:36:50Z", "message": "Add license header and start migration filename with a capital letter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eaf9ccee2e2ca15c21a4fadd2bcd827c9f852988", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/eaf9ccee2e2ca15c21a4fadd2bcd827c9f852988", "committedDate": "2020-11-27T23:25:51Z", "message": "Simplify runnable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89770a34ae42f750e039229c43495fa7b9ddb7e0", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/89770a34ae42f750e039229c43495fa7b9ddb7e0", "committedDate": "2020-11-28T05:32:28Z", "message": "Use function to kill Linux process and subprocesses"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3f4215f4c8447f40679be1394b670b8028133f6", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/b3f4215f4c8447f40679be1394b670b8028133f6", "committedDate": "2020-11-29T22:08:59Z", "message": "Revert \"Use function to kill Linux process and subprocesses\"\n\nThis reverts commit 89770a34ae42f750e039229c43495fa7b9ddb7e0. Best suited to its own PR."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxNDIwMTQz", "url": "https://github.com/openequella/openEQUELLA/pull/2561#pullrequestreview-541420143", "createdAt": "2020-12-01T01:21:44Z", "commit": {"oid": "b3f4215f4c8447f40679be1394b670b8028133f6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMToyMTo0NFrOH8UY9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMTo1MzozNVrOH8VBNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxMDY3OQ==", "bodyText": "Although not done historically, for the new stuff we add JavaDoc to help our future selves. Please add.", "url": "https://github.com/openequella/openEQUELLA/pull/2561#discussion_r533010679", "createdAt": "2020-12-01T01:21:44Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.base/src/com/tle/beans/item/attachments/IAttachment.java", "diffHunk": "@@ -67,4 +67,8 @@\n   boolean isRestricted();\n \n   IItem<?> getItem();\n+\n+  boolean isErroredIndexing();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3f4215f4c8447f40679be1394b670b8028133f6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxMTYyMQ==", "bodyText": "Please JavaDoc - even if it's a @see to IAttachment matching method.", "url": "https://github.com/openequella/openEQUELLA/pull/2561#discussion_r533011621", "createdAt": "2020-12-01T01:24:51Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.base/src/com/tle/web/api/item/interfaces/beans/AttachmentBean.java", "diffHunk": "@@ -65,4 +66,12 @@ public boolean isPreview() {\n   public void setPreview(boolean preview) {\n     this.preview = preview;\n   }\n+\n+  public boolean isErroredIndexing() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3f4215f4c8447f40679be1394b670b8028133f6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxMjE4NA==", "bodyText": "Be worthwhile to keep wording around it generic. That way if in the future we have other failure modes, we're all set.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /com.tle.core.entity.services.migration.v20202.indexing.errored=Add column to attachment table to allow indexer to skip individual attachments that have timed out.\n          \n          \n            \n            /com.tle.core.entity.services.migration.v20202.indexing.errored=Add column to attachment table to allow indexer to skip individual attachments that have failed.", "url": "https://github.com/openequella/openEQUELLA/pull/2561#discussion_r533012184", "createdAt": "2020-12-01T01:26:25Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/resources/lang/i18n-resource-centre.properties", "diffHunk": "@@ -80,6 +80,7 @@\n /com.tle.core.entity.services.migration.v20192.unknownuser.alluser=Create a new table for all users\n /com.tle.core.entity.services.migration.v20202.facetedsearch.classification=Create a new table for faceted search classification\n /com.tle.core.entity.services.migration.v20202.removelastknownuserconstraint=Remove last known user composite constraint (username and institution ID)\n+/com.tle.core.entity.services.migration.v20202.indexing.errored=Add column to attachment table to allow indexer to skip individual attachments that have timed out.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3f4215f4c8447f40679be1394b670b8028133f6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxMzQwOA==", "bodyText": "Being in Java 8 land, best to now go with an anonymous lambda rather than an anonymous class and all its overhead.", "url": "https://github.com/openequella/openEQUELLA/pull/2561#discussion_r533013408", "createdAt": "2020-12-01T01:30:00Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/freetext/extracter/standard/PdfExtracter.java", "diffHunk": "@@ -50,25 +56,34 @@ public boolean isSupportedByDefault(MimeEntry mimeEntry) {\n   @Override\n   public void extractText(\n       String mimeType, InputStream input, StringBuilder outputText, int maxSize, long parseDuration)\n-      throws IOException {\n+      throws IOException, InterruptedException, ExecutionException, TimeoutException {\n     WriteOutContentHandler wrapped = new WriteOutContentHandler(maxSize);\n     ContentHandler handler = new CappedBodyContentHandler(wrapped, parseDuration);\n-    try {\n-      Metadata meta = new Metadata();\n-      Parser parser = new AutoDetectParser(new TikaConfig(getClass().getClassLoader()));\n-      parser.parse(input, handler, meta, new ParseContext());\n+    Runnable runnableParse =\n+        new Runnable() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3f4215f4c8447f40679be1394b670b8028133f6"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxOTk5MA==", "bodyText": "It could be good to add a catch for InterruptException to capture when it's terminated early (or by other unforeseen interrupts). \ud83e\udd14", "url": "https://github.com/openequella/openEQUELLA/pull/2561#discussion_r533019990", "createdAt": "2020-12-01T01:50:29Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/freetext/extracter/standard/PdfExtracter.java", "diffHunk": "@@ -50,25 +56,34 @@ public boolean isSupportedByDefault(MimeEntry mimeEntry) {\n   @Override\n   public void extractText(\n       String mimeType, InputStream input, StringBuilder outputText, int maxSize, long parseDuration)\n-      throws IOException {\n+      throws IOException, InterruptedException, ExecutionException, TimeoutException {\n     WriteOutContentHandler wrapped = new WriteOutContentHandler(maxSize);\n     ContentHandler handler = new CappedBodyContentHandler(wrapped, parseDuration);\n-    try {\n-      Metadata meta = new Metadata();\n-      Parser parser = new AutoDetectParser(new TikaConfig(getClass().getClassLoader()));\n-      parser.parse(input, handler, meta, new ParseContext());\n+    Runnable runnableParse =\n+        new Runnable() {\n+          @Override\n+          public void run() {\n+            try {\n+              Metadata meta = new Metadata();\n+              Parser parser = new AutoDetectParser(new TikaConfig(getClass().getClassLoader()));\n+              parser.parse(input, handler, meta, new ParseContext());\n \n-      appendText(handler, outputText, maxSize);\n-\n-    } catch (Exception t) {\n-      if (wrapped.isWriteLimitReached(t)) {\n-        // keep going\n-        LOGGER.debug(\"PDF size limit reached.  Indexing truncated text\");\n-        appendText(handler, outputText, maxSize);\n-        return;\n-      }\n-      throw Throwables.propagate(t);\n-    }\n+              appendText(handler, outputText, maxSize);\n+            } catch (Exception t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3f4215f4c8447f40679be1394b670b8028133f6"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAyMDk4Mg==", "bodyText": "Bringing in an ExecutorService etc. seems rather heavy handed for a single thread. How about just going with:\nThread extractThread = new Thread(() -> { ... }, \"ExtractThread\");\nextractThread.join(parseDuration);\nextractThread.interrupt();\nI'm assuming that interrupt() will be sufficient, as that's they typical recommendation for ExecutorService.shutdownNow(). But maybe you had issues?", "url": "https://github.com/openequella/openEQUELLA/pull/2561#discussion_r533020982", "createdAt": "2020-12-01T01:53:35Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/freetext/extracter/standard/PdfExtracter.java", "diffHunk": "@@ -50,25 +56,34 @@ public boolean isSupportedByDefault(MimeEntry mimeEntry) {\n   @Override\n   public void extractText(\n       String mimeType, InputStream input, StringBuilder outputText, int maxSize, long parseDuration)\n-      throws IOException {\n+      throws IOException, InterruptedException, ExecutionException, TimeoutException {\n     WriteOutContentHandler wrapped = new WriteOutContentHandler(maxSize);\n     ContentHandler handler = new CappedBodyContentHandler(wrapped, parseDuration);\n-    try {\n-      Metadata meta = new Metadata();\n-      Parser parser = new AutoDetectParser(new TikaConfig(getClass().getClassLoader()));\n-      parser.parse(input, handler, meta, new ParseContext());\n+    Runnable runnableParse =\n+        new Runnable() {\n+          @Override\n+          public void run() {\n+            try {\n+              Metadata meta = new Metadata();\n+              Parser parser = new AutoDetectParser(new TikaConfig(getClass().getClassLoader()));\n+              parser.parse(input, handler, meta, new ParseContext());\n \n-      appendText(handler, outputText, maxSize);\n-\n-    } catch (Exception t) {\n-      if (wrapped.isWriteLimitReached(t)) {\n-        // keep going\n-        LOGGER.debug(\"PDF size limit reached.  Indexing truncated text\");\n-        appendText(handler, outputText, maxSize);\n-        return;\n-      }\n-      throw Throwables.propagate(t);\n-    }\n+              appendText(handler, outputText, maxSize);\n+            } catch (Exception t) {\n+              if (wrapped.isWriteLimitReached(t)) {\n+                // keep going\n+                LOGGER.info(\"PDF size limit reached.  Indexing truncated text\");\n+                appendText(handler, outputText, maxSize);\n+                return;\n+              }\n+              throw Throwables.propagate(t);\n+            }\n+          }\n+        };\n+    ExecutorService executor = Executors.newSingleThreadExecutor();\n+    Future<?> future = executor.submit(runnableParse);\n+    future.get(parseDuration, TimeUnit.MILLISECONDS);\n+    executor.shutdownNow();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3f4215f4c8447f40679be1394b670b8028133f6"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f52c4cc72cab97b14b64eb46b8dafa58af531e85", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/f52c4cc72cab97b14b64eb46b8dafa58af531e85", "committedDate": "2020-12-01T04:16:47Z", "message": "Make language string for indexing error migration more generic\n\nCo-authored-by: edalex-ian <43919233+edalex-ian@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ced7454cd231c14d77d6a59a28fab7253178ec2", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/3ced7454cd231c14d77d6a59a28fab7253178ec2", "committedDate": "2020-12-01T04:53:38Z", "message": "Add Javadoc to IAttachment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d67edb4440daf2e72f289a6e14c2bac5d83b843", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/0d67edb4440daf2e72f289a6e14c2bac5d83b843", "committedDate": "2020-12-01T22:10:21Z", "message": "Merge branch 'develop' into bugfix/make_pdf_extraction_safe"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31238c2c77e11e4e7f63d6f21c0845f11bb31a56", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/31238c2c77e11e4e7f63d6f21c0845f11bb31a56", "committedDate": "2020-12-02T01:14:10Z", "message": "Instantiate runnableParse as lambda"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0772539274c8f218f9806769922e894ceb98d3a7", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/0772539274c8f218f9806769922e894ceb98d3a7", "committedDate": "2020-12-02T01:14:44Z", "message": "Catch timeout and rethrow"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzNDI4MDc3", "url": "https://github.com/openequella/openEQUELLA/pull/2561#pullrequestreview-543428077", "createdAt": "2020-12-03T04:08:12Z", "commit": {"oid": "0772539274c8f218f9806769922e894ceb98d3a7"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNDowODoxMlrOH94oyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNDoxMTowMFrOH94sgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1MzEzMA==", "bodyText": "\ud83e\udd14 would this make sense as a state/enumeration rather than a flag?\nsomething like\n             state machine\n+-----------------------------------------+\n|                                         |\n|                        +--------------+ |\n|                        |              | |\n|         +-----------+->+ indexed      | |\n| added   |           |  |              | |\n+-------->+ unindexed |  +--------------+ |\n|         |           |  |              | |\n|         +-----------+->+ index failed | |\n|                        |              | |\n|                        +--------------+ |\n|                                         |\n+-----------------------------------------+\n\n\nnew attachments start as unindexed, they can move to indexed, to index failed when processed.\nA state system would also leave to door open for partially indexed content, or other possible states.\nThough it may be overkill here \ud83e\udd14\nThoughts? \ud83d\udcad", "url": "https://github.com/openequella/openEQUELLA/pull/2561#discussion_r534653130", "createdAt": "2020-12-03T04:08:12Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.base/src/com/tle/beans/item/attachments/Attachment.java", "diffHunk": "@@ -86,6 +86,9 @@\n \n   private boolean restricted;\n \n+  @Column(name = \"errored_when_indexing\")\n+  private boolean erroredIndexing;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0772539274c8f218f9806769922e894ceb98d3a7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1MzQ5Nw==", "bodyText": "would it make sense for the param to also be errorIndexing?", "url": "https://github.com/openequella/openEQUELLA/pull/2561#discussion_r534653497", "createdAt": "2020-12-03T04:09:18Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.base/src/com/tle/beans/item/attachments/Attachment.java", "diffHunk": "@@ -281,4 +284,12 @@ public void setRestricted(boolean restricted) {\n   public String getAttachmentSignature() {\n     return item.getIdString() + \"/\" + this.uuid + \" [\" + this.description + \"]\";\n   }\n+\n+  public boolean isErroredIndexing() {\n+    return erroredIndexing;\n+  }\n+\n+  public void setErroredIndexing(boolean skipIndexing) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0772539274c8f218f9806769922e894ceb98d3a7"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1NDA4MQ==", "bodyText": "Maybe hasErroredIndexing would read more naturally here? \ud83e\udd14", "url": "https://github.com/openequella/openEQUELLA/pull/2561#discussion_r534654081", "createdAt": "2020-12-03T04:11:00Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.base/src/com/tle/beans/item/attachments/Attachment.java", "diffHunk": "@@ -281,4 +284,12 @@ public void setRestricted(boolean restricted) {\n   public String getAttachmentSignature() {\n     return item.getIdString() + \"/\" + this.uuid + \" [\" + this.description + \"]\";\n   }\n+\n+  public boolean isErroredIndexing() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0772539274c8f218f9806769922e894ceb98d3a7"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NzYyNjAy", "url": "https://github.com/openequella/openEQUELLA/pull/2561#pullrequestreview-545762602", "createdAt": "2020-12-06T23:37:58Z", "commit": {"oid": "0772539274c8f218f9806769922e894ceb98d3a7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NzY5MDc3", "url": "https://github.com/openequella/openEQUELLA/pull/2561#pullrequestreview-545769077", "createdAt": "2020-12-07T00:32:19Z", "commit": {"oid": "0772539274c8f218f9806769922e894ceb98d3a7"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMDozMjoxOVrOIARtcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMDozMjozNlrOIARtkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE2MTA3NA==", "bodyText": "If you do nullable = false in Attachment.java, you also need to do that here.", "url": "https://github.com/openequella/openEQUELLA/pull/2561#discussion_r537161074", "createdAt": "2020-12-07T00:32:19Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/institution/migration/v20202/AddIndexingErrorColumnMigration.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.core.institution.migration.v20202;\n+\n+import com.google.inject.Singleton;\n+import com.tle.core.guice.Bind;\n+import com.tle.core.hibernate.impl.HibernateMigrationHelper;\n+import com.tle.core.migration.AbstractHibernateSchemaMigration;\n+import com.tle.core.migration.MigrationInfo;\n+import com.tle.core.migration.MigrationResult;\n+import java.util.List;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import org.hibernate.Query;\n+import org.hibernate.Session;\n+import org.hibernate.annotations.AccessType;\n+\n+@Bind\n+@Singleton\n+public class AddIndexingErrorColumnMigration extends AbstractHibernateSchemaMigration {\n+\n+  @Override\n+  protected void executeDataMigration(\n+      HibernateMigrationHelper helper, MigrationResult result, Session session) throws Exception {\n+    Query q = session.createQuery(\"UPDATE Attachment SET errored_when_indexing = :value\");\n+    q.setParameter(\"value\", false);\n+    q.executeUpdate();\n+  }\n+\n+  @Override\n+  protected int countDataMigrations(HibernateMigrationHelper helper, Session session) {\n+    return 1;\n+  }\n+\n+  @Override\n+  protected List<String> getDropModifySql(HibernateMigrationHelper helper) {\n+    return helper.getAddNotNullSQL(\"attachment\", \"errored_when_indexing\");\n+  }\n+\n+  @Override\n+  protected List<String> getAddSql(HibernateMigrationHelper helper) {\n+    return helper.getAddColumnsSQL(\"attachment\", \"errored_when_indexing\");\n+  }\n+\n+  @Override\n+  protected Class<?>[] getDomainClasses() {\n+    return new Class<?>[] {FakeAttachment.class};\n+  }\n+\n+  @Override\n+  public MigrationInfo createMigrationInfo() {\n+    return new MigrationInfo(\"com.tle.core.entity.services.migration.v20202.indexing.errored\");\n+  }\n+\n+  @Entity(name = \"Attachment\")\n+  @AccessType(\"field\")\n+  public static class FakeAttachment {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    long id;\n+\n+    @Column boolean errored_when_indexing;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0772539274c8f218f9806769922e894ceb98d3a7"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE2MTEwNA==", "bodyText": "Hi Sam, I have two questions here.\n\n\nDo we need to drop column 'errored_when_indexing'  in any situation?  If yes, I think we should use\n'getDropModifySql'. If no we can just return null.\n\n\nI am not quite sure why use getAddNotNullSQL. If this column needs a not null constraint, you can try\n@Column(name = \"errored_when_indexing\", nullable = false) in  attachment.java.", "url": "https://github.com/openequella/openEQUELLA/pull/2561#discussion_r537161104", "createdAt": "2020-12-07T00:32:36Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/institution/migration/v20202/AddIndexingErrorColumnMigration.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.core.institution.migration.v20202;\n+\n+import com.google.inject.Singleton;\n+import com.tle.core.guice.Bind;\n+import com.tle.core.hibernate.impl.HibernateMigrationHelper;\n+import com.tle.core.migration.AbstractHibernateSchemaMigration;\n+import com.tle.core.migration.MigrationInfo;\n+import com.tle.core.migration.MigrationResult;\n+import java.util.List;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import org.hibernate.Query;\n+import org.hibernate.Session;\n+import org.hibernate.annotations.AccessType;\n+\n+@Bind\n+@Singleton\n+public class AddIndexingErrorColumnMigration extends AbstractHibernateSchemaMigration {\n+\n+  @Override\n+  protected void executeDataMigration(\n+      HibernateMigrationHelper helper, MigrationResult result, Session session) throws Exception {\n+    Query q = session.createQuery(\"UPDATE Attachment SET errored_when_indexing = :value\");\n+    q.setParameter(\"value\", false);\n+    q.executeUpdate();\n+  }\n+\n+  @Override\n+  protected int countDataMigrations(HibernateMigrationHelper helper, Session session) {\n+    return 1;\n+  }\n+\n+  @Override\n+  protected List<String> getDropModifySql(HibernateMigrationHelper helper) {\n+    return helper.getAddNotNullSQL(\"attachment\", \"errored_when_indexing\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0772539274c8f218f9806769922e894ceb98d3a7"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9cbf20d1fd4fa3b84cb99e752809a80c09ce4dc", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/a9cbf20d1fd4fa3b84cb99e752809a80c09ce4dc", "committedDate": "2020-12-07T05:41:38Z", "message": "Remove unnecessary dropModifySql implementation, fix typo in Attachment.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1ODQ1MTIx", "url": "https://github.com/openequella/openEQUELLA/pull/2561#pullrequestreview-545845121", "createdAt": "2020-12-07T05:45:37Z", "commit": {"oid": "a9cbf20d1fd4fa3b84cb99e752809a80c09ce4dc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b7372bc3be723e54898c2e2a9775fc726f5d991", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/3b7372bc3be723e54898c2e2a9775fc726f5d991", "committedDate": "2020-12-07T23:02:19Z", "message": "Add nullable = false to annotation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2Njk0ODc1", "url": "https://github.com/openequella/openEQUELLA/pull/2561#pullrequestreview-546694875", "createdAt": "2020-12-08T02:21:03Z", "commit": {"oid": "3b7372bc3be723e54898c2e2a9775fc726f5d991"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 268, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}