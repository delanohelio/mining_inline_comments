{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2NTE1MjU4", "number": 2172, "title": "Refine Search - StatusSelector", "bodyText": "Checklist\n\n\n the contributor license agreement is signed\n commit message follows commit guidelines\n tests are included\n screenshots are included showing significant UI changes\n\nDescription of change\n\nAnother Refine Search control, this time for status.\nAlso needed to refactor the OEQ.Common.ItemStatus from an enum to essentially a string literal union. Triggered due to issues with Jest losing visibility of the enum post transpilation. To provide the full power I was after, rather than just a plain ol' string literal union, I brought in runtypes.\nFurther auxilary items:\n\nA wording change for the configuration of whether to display this control - previously worded around non-live statuses;\nFor IntelliJ project turned on sort imports by module - so that CTRL+ALT+o gives a nice tidy up (which was done in some files); and\nSorted the sub groups of the Search Page language strings, as it was become rather unwieldy.\n\n\n\n#1306", "createdAt": "2020-08-12T05:17:26Z", "url": "https://github.com/openequella/openEQUELLA/pull/2172", "merged": true, "mergeCommit": {"oid": "27c395bca8114d97dedafe26d7a4f418742f7788"}, "closed": true, "closedAt": "2020-08-13T01:03:42Z", "author": {"login": "edalex-ian"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-A8FggH2gAyNDY2NTE1MjU4OmM3MDZhZDMxNzk0MWYxZmI2MmE1MTFlZWFmOGUyYmFiYWMwOTEzNzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-INNFgH2gAyNDY2NTE1MjU4OmUyZDc3Zjg0YzE2YWFiOTUxNWQ4OGMxODE0NjA0MDk4YzRjMTRiYWI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c706ad317941f1fb62a511eeaf8e2babac091371", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/c706ad317941f1fb62a511eeaf8e2babac091371", "committedDate": "2020-08-12T01:15:01Z", "message": "front-end: Setup IntelliJ to sort imports by modules"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b38cc902d00d8c2794a0bd7caacce103de4ec16", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/8b38cc902d00d8c2794a0bd7caacce103de4ec16", "committedDate": "2020-08-12T01:21:50Z", "message": "front-end: Sort searchPage language string groups\n\nSo as to make maintenance and searching easier."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1b13432a64dbf7c6538e923966030713dc2a939", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/e1b13432a64dbf7c6538e923966030713dc2a939", "committedDate": "2020-08-12T01:25:54Z", "message": "front-end: Add Status refine search control"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "176eb0d327b7a4a8a7d0653ae2747e288ab5c9d5", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/176eb0d327b7a4a8a7d0653ae2747e288ab5c9d5", "committedDate": "2020-08-12T01:25:56Z", "message": "front-end: Change OEQ.Common.ItemStatus to a string literal union\n\nIt seems the enum is TS has issues in Jest land. And although it seems like a great language feature, it's really rather half baked - it's not a full enum as you'd find in any modern language.\n\nSo it seems that's why you see the string literal unions used in other TS/JS libraries; and it made sense for us to follow.\n\nHowever there was still a need to be able to iterate over the values of the resulting type, so also brought in runtypes to support this."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f54ae22fdc1df46fdfc5b7ab023ae1e4b801bd7", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/1f54ae22fdc1df46fdfc5b7ab023ae1e4b801bd7", "committedDate": "2020-08-12T02:47:26Z", "message": "front-end: Rework language strings for new StatusSelector"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08119d5d40d01f0b567219529ee4b76623e196a9", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/08119d5d40d01f0b567219529ee4b76623e196a9", "committedDate": "2020-08-12T02:49:29Z", "message": "front-end: Add tests for StatusSelector\n\nOnly integration tests with SearchPage, as the component itself is rather simple, and should get full coverage from these tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a829f3ae75f900592949910a033743009e358963", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/a829f3ae75f900592949910a033743009e358963", "committedDate": "2020-08-12T04:59:24Z", "message": "front-end: Tidy up JSDoc and describe clause in SearchPage.test.tsx"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NjIwMjAy", "url": "https://github.com/openequella/openEQUELLA/pull/2172#pullrequestreview-465620202", "createdAt": "2020-08-12T06:21:44Z", "commit": {"oid": "a829f3ae75f900592949910a033743009e358963"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjoyMTo0NFrOG_TUlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo0MzoxOFrOG_T1eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzMDAzNw==", "bodyText": "We have mixed use of  toHaveBeenCalledWith and toHaveBeenLastCalledWith ? Is it something we want to unify ?\nAlso I noted a small difference. This function checks mockSearch whereas others check SearchModule.searchItems, but I think the result is the same.", "url": "https://github.com/openequella/openEQUELLA/pull/2172#discussion_r469030037", "createdAt": "2020-08-12T06:21:44Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -75,36 +81,112 @@ const defaultSearchPageOptions: SearchPageOptions = {\n };\n const defaultCollectionPrivileges = [\"SEARCH_COLLECTION\"];\n \n+/**\n+ * Simple helper to wrap the process of waiting for the execution of a search based on checking the\n+ * `searchPromise`. Being that it is abstracted out, in the future could change as needed to be\n+ * something other than the `searchPromise`.\n+ */\n+const waitForSearch = async () =>\n+  await act(async () => {\n+    await searchPromise;\n+  });\n+\n+/**\n+ * Helper function for the initial render of the `<SearchPage>` for tests below. Also includes\n+ * the wait for the initial search call.\n+ *\n+ * @returns The RenderResult from the `render` of the `<SearchPage>`\n+ */\n+const renderSearchPage = async (): Promise<RenderResult> => {\n+  window.history.replaceState({}, \"Clean history state\");\n+  const page = render(\n+    <BrowserRouter>\n+      <SearchPage updateTemplate={jest.fn()} />{\" \"}\n+    </BrowserRouter>\n+  );\n+  // Wait for the first completion of initial search\n+  await waitForSearch();\n+\n+  return page;\n+};\n+\n+/**\n+ * Helper function to find individual Refine Search components based on the their `idSuffix`.\n+ *\n+ * @param container The root container to start the search from\n+ * @param componentSuffix Typically the `idSuffix` provided in `SearchPage.tsx`\n+ */\n+const getRefineSearchComponent = (\n+  container: Element,\n+  componentSuffix: string\n+) => {\n+  const id = `#RefineSearchPanel-${componentSuffix}`;\n+  const e = container.querySelector(id);\n+  if (!e) {\n+    throw new Error(`Failed to find ${id}`);\n+  }\n+\n+  return e as HTMLElement;\n+};\n+\n+describe(\"Refine search by status\", () => {\n+  const {\n+    live: liveButtonLabel,\n+    all: allButtonLabel,\n+  } = languageStrings.searchpage.statusSelector;\n+\n+  const expectSearchItemsCalledWithStatus = (status: OEQ.Common.ItemStatus[]) =>\n+    expect(mockSearch).toHaveBeenCalledWith({", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a829f3ae75f900592949910a033743009e358963"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzMTYxNg==", "bodyText": "According to the doco of render, it might be good to call cleanup here.", "url": "https://github.com/openequella/openEQUELLA/pull/2172#discussion_r469031616", "createdAt": "2020-08-12T06:25:53Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -75,36 +81,112 @@ const defaultSearchPageOptions: SearchPageOptions = {\n };\n const defaultCollectionPrivileges = [\"SEARCH_COLLECTION\"];\n \n+/**\n+ * Simple helper to wrap the process of waiting for the execution of a search based on checking the\n+ * `searchPromise`. Being that it is abstracted out, in the future could change as needed to be\n+ * something other than the `searchPromise`.\n+ */\n+const waitForSearch = async () =>\n+  await act(async () => {\n+    await searchPromise;\n+  });\n+\n+/**\n+ * Helper function for the initial render of the `<SearchPage>` for tests below. Also includes\n+ * the wait for the initial search call.\n+ *\n+ * @returns The RenderResult from the `render` of the `<SearchPage>`\n+ */\n+const renderSearchPage = async (): Promise<RenderResult> => {\n+  window.history.replaceState({}, \"Clean history state\");\n+  const page = render(\n+    <BrowserRouter>\n+      <SearchPage updateTemplate={jest.fn()} />{\" \"}\n+    </BrowserRouter>\n+  );\n+  // Wait for the first completion of initial search\n+  await waitForSearch();\n+\n+  return page;\n+};\n+\n+/**\n+ * Helper function to find individual Refine Search components based on the their `idSuffix`.\n+ *\n+ * @param container The root container to start the search from\n+ * @param componentSuffix Typically the `idSuffix` provided in `SearchPage.tsx`\n+ */\n+const getRefineSearchComponent = (\n+  container: Element,\n+  componentSuffix: string\n+) => {\n+  const id = `#RefineSearchPanel-${componentSuffix}`;\n+  const e = container.querySelector(id);\n+  if (!e) {\n+    throw new Error(`Failed to find ${id}`);\n+  }\n+\n+  return e as HTMLElement;\n+};\n+\n+describe(\"Refine search by status\", () => {\n+  const {\n+    live: liveButtonLabel,\n+    all: allButtonLabel,\n+  } = languageStrings.searchpage.statusSelector;\n+\n+  const expectSearchItemsCalledWithStatus = (status: OEQ.Common.ItemStatus[]) =>\n+    expect(mockSearch).toHaveBeenCalledWith({\n+      ...defaultSearchPageOptions,\n+      status: status,\n+    });\n+\n+  const getStatusSelector = (container: Element): HTMLElement =>\n+    getRefineSearchComponent(container, \"StatusSelector\");\n+\n+  const selectStatus = (container: Element, status: string) =>\n+    fireEvent.click(getByText(getStatusSelector(container), status));\n+\n+  afterEach(() => {\n+    // Needed to keep Enzyme tests below happy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a829f3ae75f900592949910a033743009e358963"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzODQ1Ng==", "bodyText": "May I ask why we want a const representing non-live Statuses rather than all Statuses ? If we have something like allStatuses then we can skip some array concatenation.", "url": "https://github.com/openequella/openEQUELLA/pull/2172#discussion_r469038456", "createdAt": "2020-08-12T06:43:18Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -22,11 +22,31 @@ import { Collection } from \"./CollectionsModule\";\n import { DateRange } from \"../components/DateRangeSelector\";\n import { getISODateString } from \"../util/Date\";\n \n+/**\n+ * List of status which are considered 'live'.\n+ */\n+export const liveStatuses: OEQ.Common.ItemStatus[] = [\"LIVE\", \"REVIEW\"];\n+\n+/**\n+ * Predicate for checking if a provided status is not one of `liveStatuses`.\n+ * @param status a status to check for liveliness\n+ */\n+export const nonLiveStatus = (status: OEQ.Common.ItemStatus): boolean =>\n+  !liveStatuses.find((liveStatus) => status === liveStatus);\n+\n+/**\n+ * List of statuses which are considered non-live.\n+ */\n+export const nonLiveStatuses: OEQ.Common.ItemStatus[] = OEQ.Common.ItemStatuses.alternatives", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a829f3ae75f900592949910a033743009e358963"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2d77f84c16aab9515d88c1814604098c4c14bab", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/e2d77f84c16aab9515d88c1814604098c4c14bab", "committedDate": "2020-08-12T09:43:03Z", "message": "front-end: Use toHaveBeenLastCalledWith for Status tests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4902, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}