{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3NjU0NjA5", "number": 2286, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMzoxNToxM1rOEq9BHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMzozNjoyNFrOErbxyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDc1MzU4OnYy", "diffSide": "RIGHT", "path": "autotest/OldTests/src/test/java/com/tle/webtests/test/searching/NewSearchPageTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMzoxNToxM1rOHddHGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTo1MzozNFrOHeG2sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0NzcwNA==", "bodyText": "Curious.... You say the initial search should return 10 items, but then you wait for 16...", "url": "https://github.com/openequella/openEQUELLA/pull/2286#discussion_r500647704", "createdAt": "2020-10-06T23:15:13Z", "author": {"login": "edalex-ian"}, "path": "autotest/OldTests/src/test/java/com/tle/webtests/test/searching/NewSearchPageTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package com.tle.webtests.test.searching;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+import com.tle.webtests.framework.TestInstitution;\n+import com.tle.webtests.pageobject.searching.NewSearchPage;\n+import com.tle.webtests.pageobject.viewitem.SummaryPage;\n+import com.tle.webtests.test.AbstractCleanupAutoTest;\n+import org.openqa.selenium.WebElement;\n+import org.testng.annotations.Test;\n+\n+@TestInstitution(\"facet\")\n+public class NewSearchPageTest extends AbstractCleanupAutoTest {\n+  private NewSearchPage searchPage;\n+\n+  @Test(description = \"open the new Search page and wait for initial search completed\")\n+  public void initialSearch() {\n+    searchPage = new NewSearchPage(context).load();\n+    // The initial search should return 10 items.\n+    searchPage.waitForSearchCompleted(16);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad345cdab0d4bce5b441856afd04c6ff72f251ed"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMzMTYzNQ==", "bodyText": "oops I forgot to update the comment.", "url": "https://github.com/openequella/openEQUELLA/pull/2286#discussion_r501331635", "createdAt": "2020-10-07T21:53:34Z", "author": {"login": "PenghaiZhang"}, "path": "autotest/OldTests/src/test/java/com/tle/webtests/test/searching/NewSearchPageTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package com.tle.webtests.test.searching;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+import com.tle.webtests.framework.TestInstitution;\n+import com.tle.webtests.pageobject.searching.NewSearchPage;\n+import com.tle.webtests.pageobject.viewitem.SummaryPage;\n+import com.tle.webtests.test.AbstractCleanupAutoTest;\n+import org.openqa.selenium.WebElement;\n+import org.testng.annotations.Test;\n+\n+@TestInstitution(\"facet\")\n+public class NewSearchPageTest extends AbstractCleanupAutoTest {\n+  private NewSearchPage searchPage;\n+\n+  @Test(description = \"open the new Search page and wait for initial search completed\")\n+  public void initialSearch() {\n+    searchPage = new NewSearchPage(context).load();\n+    // The initial search should return 10 items.\n+    searchPage.waitForSearchCompleted(16);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0NzcwNA=="}, "originalCommit": {"oid": "ad345cdab0d4bce5b441856afd04c6ff72f251ed"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDc2MTk2OnYy", "diffSide": "RIGHT", "path": "autotest/OldTests/src/test/java/com/tle/webtests/test/searching/NewSearchPageTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMzoxOToyMFrOHddL7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMzoxOToyMFrOHddL7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0ODk0MA==", "bodyText": "It'd be good to have this as a method of NewSearchPage. Maybe with a signature of: SummaryPage selectItem(String itemTitle).", "url": "https://github.com/openequella/openEQUELLA/pull/2286#discussion_r500648940", "createdAt": "2020-10-06T23:19:20Z", "author": {"login": "edalex-ian"}, "path": "autotest/OldTests/src/test/java/com/tle/webtests/test/searching/NewSearchPageTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package com.tle.webtests.test.searching;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+import com.tle.webtests.framework.TestInstitution;\n+import com.tle.webtests.pageobject.searching.NewSearchPage;\n+import com.tle.webtests.pageobject.viewitem.SummaryPage;\n+import com.tle.webtests.test.AbstractCleanupAutoTest;\n+import org.openqa.selenium.WebElement;\n+import org.testng.annotations.Test;\n+\n+@TestInstitution(\"facet\")\n+public class NewSearchPageTest extends AbstractCleanupAutoTest {\n+  private NewSearchPage searchPage;\n+\n+  @Test(description = \"open the new Search page and wait for initial search completed\")\n+  public void initialSearch() {\n+    searchPage = new NewSearchPage(context).load();\n+    // The initial search should return 10 items.\n+    searchPage.waitForSearchCompleted(16);\n+  }\n+\n+  @Test(dependsOnMethods = \"initialSearch\", description = \"Search with a query and refine controls\")\n+  public void searchByFilters() {\n+    searchPage.newSearch();\n+    // Search by Collections.\n+    searchPage.selectCollection(\"programming\");\n+    searchPage.waitForSearchCompleted(9);\n+    // Expand the Refine control panel.\n+    searchPage.expandRefineControlPanel();\n+    // Search by Item status.\n+    searchPage.selectStatus(true);\n+    searchPage.waitForSearchCompleted(10);\n+    // Search by a query.\n+    searchPage.changeQuery(\"Java\");\n+    searchPage.waitForSearchCompleted(4);\n+    // Exclude attachments in a search.\n+    searchPage.selectSearchAttachments(false);\n+    searchPage.waitForSearchCompleted(4);\n+    // Search by date ranges.\n+    searchPage.selectCustomDateRange(\"2020-10-01\", \"2020-10-06\");\n+    searchPage.waitForSearchCompleted(1);\n+    // Search by an owner.\n+    searchPage.selectOwner(\"AutoTest\");\n+    searchPage.waitForSearchCompleted(1);\n+  }\n+\n+  @Test(description = \"open an item's summary page\", dependsOnMethods = \"searchByFilters\")\n+  public void openItemSummaryPage() {\n+    final String ITEM_TITLE = \"Java (cloned)\";\n+    WebElement titleLink = searchPage.getItemTitleLink(ITEM_TITLE);\n+    titleLink.click();\n+    SummaryPage summary = new SummaryPage(context).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad345cdab0d4bce5b441856afd04c6ff72f251ed"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDc2NTIyOnYy", "diffSide": "RIGHT", "path": "autotest/OldTests/src/test/java/com/tle/webtests/test/searching/NewSearchPageTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMzoyMTowMVrOHddNxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMzoyMTowMVrOHddNxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0OTQxNQ==", "bodyText": "Could be good to add a comment above this to highlight what the following lines are doing:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assertEquals(searchBar.getAttribute(\"value\"), \"Java\");\n          \n          \n            \n                // Expect when going 'back' to the search page, the previous search settings have been remembered\n          \n          \n            \n                assertEquals(searchBar.getAttribute(\"value\"), \"Java\");", "url": "https://github.com/openequella/openEQUELLA/pull/2286#discussion_r500649415", "createdAt": "2020-10-06T23:21:01Z", "author": {"login": "edalex-ian"}, "path": "autotest/OldTests/src/test/java/com/tle/webtests/test/searching/NewSearchPageTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package com.tle.webtests.test.searching;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+import com.tle.webtests.framework.TestInstitution;\n+import com.tle.webtests.pageobject.searching.NewSearchPage;\n+import com.tle.webtests.pageobject.viewitem.SummaryPage;\n+import com.tle.webtests.test.AbstractCleanupAutoTest;\n+import org.openqa.selenium.WebElement;\n+import org.testng.annotations.Test;\n+\n+@TestInstitution(\"facet\")\n+public class NewSearchPageTest extends AbstractCleanupAutoTest {\n+  private NewSearchPage searchPage;\n+\n+  @Test(description = \"open the new Search page and wait for initial search completed\")\n+  public void initialSearch() {\n+    searchPage = new NewSearchPage(context).load();\n+    // The initial search should return 10 items.\n+    searchPage.waitForSearchCompleted(16);\n+  }\n+\n+  @Test(dependsOnMethods = \"initialSearch\", description = \"Search with a query and refine controls\")\n+  public void searchByFilters() {\n+    searchPage.newSearch();\n+    // Search by Collections.\n+    searchPage.selectCollection(\"programming\");\n+    searchPage.waitForSearchCompleted(9);\n+    // Expand the Refine control panel.\n+    searchPage.expandRefineControlPanel();\n+    // Search by Item status.\n+    searchPage.selectStatus(true);\n+    searchPage.waitForSearchCompleted(10);\n+    // Search by a query.\n+    searchPage.changeQuery(\"Java\");\n+    searchPage.waitForSearchCompleted(4);\n+    // Exclude attachments in a search.\n+    searchPage.selectSearchAttachments(false);\n+    searchPage.waitForSearchCompleted(4);\n+    // Search by date ranges.\n+    searchPage.selectCustomDateRange(\"2020-10-01\", \"2020-10-06\");\n+    searchPage.waitForSearchCompleted(1);\n+    // Search by an owner.\n+    searchPage.selectOwner(\"AutoTest\");\n+    searchPage.waitForSearchCompleted(1);\n+  }\n+\n+  @Test(description = \"open an item's summary page\", dependsOnMethods = \"searchByFilters\")\n+  public void openItemSummaryPage() {\n+    final String ITEM_TITLE = \"Java (cloned)\";\n+    WebElement titleLink = searchPage.getItemTitleLink(ITEM_TITLE);\n+    titleLink.click();\n+    SummaryPage summary = new SummaryPage(context).get();\n+    assertEquals(summary.getItemTitle(), ITEM_TITLE);\n+  }\n+\n+  @Test(\n+      description = \"Go back to the Search page from another page\",\n+      dependsOnMethods = \"openItemSummaryPage\")\n+  public void backToSearchPage() {\n+    context.getDriver().navigate().back();\n+    WebElement searchBar = searchPage.getSearchBar();\n+    assertEquals(searchBar.getAttribute(\"value\"), \"Java\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad345cdab0d4bce5b441856afd04c6ff72f251ed"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDgxNTc2OnYy", "diffSide": "RIGHT", "path": "autotest/OldTests/src/test/java/com/tle/webtests/test/searching/NewSearchPageTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMzo0NjozMVrOHddr8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMzo0NjozMVrOHddr8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY1NzEzOA==", "bodyText": "I was wondering why you were going through this pain when you actually don't need anything else AbstractCleanupAutoTest really provides - other than perhaps the prepareBrowserSession implementation. So on digging deeper I think it would be good to:\n\nMove com.tle.webtests.test.AbstractCleanupTest#logon, com.tle.webtests.test.AbstractCleanupTest#AUTOTEST_LOGON and com.tle.webtests.test.AbstractCleanupTest#AUTOTEST_PASSWD to com.tle.webtests.test.AbstractSessionTest\nMake this test then simply extend com.tle.webtests.test.AbstractSessionTest\nAnd in this test add your implementation of prepareBrowserSession which simply calls the newly located com.tle.webtests.test.AbstractSessionTest#logon", "url": "https://github.com/openequella/openEQUELLA/pull/2286#discussion_r500657138", "createdAt": "2020-10-06T23:46:31Z", "author": {"login": "edalex-ian"}, "path": "autotest/OldTests/src/test/java/com/tle/webtests/test/searching/NewSearchPageTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package com.tle.webtests.test.searching;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+import com.tle.webtests.framework.TestInstitution;\n+import com.tle.webtests.pageobject.searching.NewSearchPage;\n+import com.tle.webtests.pageobject.viewitem.SummaryPage;\n+import com.tle.webtests.test.AbstractCleanupAutoTest;\n+import org.openqa.selenium.WebElement;\n+import org.testng.annotations.Test;\n+\n+@TestInstitution(\"facet\")\n+public class NewSearchPageTest extends AbstractCleanupAutoTest {\n+  private NewSearchPage searchPage;\n+\n+  @Test(description = \"open the new Search page and wait for initial search completed\")\n+  public void initialSearch() {\n+    searchPage = new NewSearchPage(context).load();\n+    // The initial search should return 10 items.\n+    searchPage.waitForSearchCompleted(16);\n+  }\n+\n+  @Test(dependsOnMethods = \"initialSearch\", description = \"Search with a query and refine controls\")\n+  public void searchByFilters() {\n+    searchPage.newSearch();\n+    // Search by Collections.\n+    searchPage.selectCollection(\"programming\");\n+    searchPage.waitForSearchCompleted(9);\n+    // Expand the Refine control panel.\n+    searchPage.expandRefineControlPanel();\n+    // Search by Item status.\n+    searchPage.selectStatus(true);\n+    searchPage.waitForSearchCompleted(10);\n+    // Search by a query.\n+    searchPage.changeQuery(\"Java\");\n+    searchPage.waitForSearchCompleted(4);\n+    // Exclude attachments in a search.\n+    searchPage.selectSearchAttachments(false);\n+    searchPage.waitForSearchCompleted(4);\n+    // Search by date ranges.\n+    searchPage.selectCustomDateRange(\"2020-10-01\", \"2020-10-06\");\n+    searchPage.waitForSearchCompleted(1);\n+    // Search by an owner.\n+    searchPage.selectOwner(\"AutoTest\");\n+    searchPage.waitForSearchCompleted(1);\n+  }\n+\n+  @Test(description = \"open an item's summary page\", dependsOnMethods = \"searchByFilters\")\n+  public void openItemSummaryPage() {\n+    final String ITEM_TITLE = \"Java (cloned)\";\n+    WebElement titleLink = searchPage.getItemTitleLink(ITEM_TITLE);\n+    titleLink.click();\n+    SummaryPage summary = new SummaryPage(context).get();\n+    assertEquals(summary.getItemTitle(), ITEM_TITLE);\n+  }\n+\n+  @Test(\n+      description = \"Go back to the Search page from another page\",\n+      dependsOnMethods = \"openItemSummaryPage\")\n+  public void backToSearchPage() {\n+    context.getDriver().navigate().back();\n+    WebElement searchBar = searchPage.getSearchBar();\n+    assertEquals(searchBar.getAttribute(\"value\"), \"Java\");\n+    searchPage.waitForSearchCompleted(1);\n+  }\n+\n+  @Override\n+  protected void cleanupAfterClass() throws Exception {\n+    // This test does not need to clean anything.\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad345cdab0d4bce5b441856afd04c6ff72f251ed"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDg0MTEwOnYy", "diffSide": "RIGHT", "path": "autotest/OldTests/src/test/java/com/tle/webtests/test/searching/NewSearchPageTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMzo1ODoyM1rOHdd6ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMzo1ODoyM1rOHdd6ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2MDg1OQ==", "bodyText": "Seeing this is all about testing the new stuff, should we perhaps move it (and the below Page class) over to the io.github.openequella package tree? Maybe they could be:\n\nio.github.openequella.search.NewSearchPageTest\nio.github.openequella.pages.search.NewSearchPage", "url": "https://github.com/openequella/openEQUELLA/pull/2286#discussion_r500660859", "createdAt": "2020-10-06T23:58:23Z", "author": {"login": "edalex-ian"}, "path": "autotest/OldTests/src/test/java/com/tle/webtests/test/searching/NewSearchPageTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package com.tle.webtests.test.searching;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad345cdab0d4bce5b441856afd04c6ff72f251ed"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDg0MjI1OnYy", "diffSide": "RIGHT", "path": "autotest/OldTests/testng-codebuild.yaml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMzo1ODo1NlrOHdd7Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMzoyODozOFrOHeMsYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2MTAyMw==", "bodyText": "Hmmmm, so is this getting run as part of the 'Old UI' mode of tests?", "url": "https://github.com/openequella/openEQUELLA/pull/2286#discussion_r500661023", "createdAt": "2020-10-06T23:58:56Z", "author": {"login": "edalex-ian"}, "path": "autotest/OldTests/testng-codebuild.yaml", "diffHunk": "@@ -4,6 +4,7 @@ threadCount: 1\n tests:\n   - name: OneAfterAnother\n     classes:\n+      - com.tle.webtests.test.searching.NewSearchPageTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad345cdab0d4bce5b441856afd04c6ff72f251ed"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM2MDEzNA==", "bodyText": "Yes it's. This test does not have any thing specific to either Old UI or New UI so it still works fine in Old UI mode.", "url": "https://github.com/openequella/openEQUELLA/pull/2286#discussion_r501360134", "createdAt": "2020-10-07T23:08:28Z", "author": {"login": "PenghaiZhang"}, "path": "autotest/OldTests/testng-codebuild.yaml", "diffHunk": "@@ -4,6 +4,7 @@ threadCount: 1\n tests:\n   - name: OneAfterAnother\n     classes:\n+      - com.tle.webtests.test.searching.NewSearchPageTest", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2MTAyMw=="}, "originalCommit": {"oid": "ad345cdab0d4bce5b441856afd04c6ff72f251ed"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM2MTM2MQ==", "bodyText": "When we merge component to develop, there will be a difference - the ItemSummary page will display in Old UI  because of the Old UI persisting fix #2296", "url": "https://github.com/openequella/openEQUELLA/pull/2286#discussion_r501361361", "createdAt": "2020-10-07T23:12:12Z", "author": {"login": "PenghaiZhang"}, "path": "autotest/OldTests/testng-codebuild.yaml", "diffHunk": "@@ -4,6 +4,7 @@ threadCount: 1\n tests:\n   - name: OneAfterAnother\n     classes:\n+      - com.tle.webtests.test.searching.NewSearchPageTest", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2MTAyMw=="}, "originalCommit": {"oid": "ad345cdab0d4bce5b441856afd04c6ff72f251ed"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQyNzI5OA==", "bodyText": "But as we get more of these we don't want them running in Legacy UI testing mode - as it just wastes time and resources. Maybe we a TestNG annotation we can disable it when the newUI config value is set; or, maybe something in this YAML syntax.", "url": "https://github.com/openequella/openEQUELLA/pull/2286#discussion_r501427298", "createdAt": "2020-10-08T03:28:38Z", "author": {"login": "edalex-ian"}, "path": "autotest/OldTests/testng-codebuild.yaml", "diffHunk": "@@ -4,6 +4,7 @@ threadCount: 1\n tests:\n   - name: OneAfterAnother\n     classes:\n+      - com.tle.webtests.test.searching.NewSearchPageTest", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2MTAyMw=="}, "originalCommit": {"oid": "ad345cdab0d4bce5b441856afd04c6ff72f251ed"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDg1MzY4OnYy", "diffSide": "RIGHT", "path": "autotest/Tests/src/main/java/com/tle/webtests/pageobject/searching/NewSearchPage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDowNDozOVrOHdeB3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMjo0Mzo1OFrOHeIEvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2Mjc0OQ==", "bodyText": "Is this unused?", "url": "https://github.com/openequella/openEQUELLA/pull/2286#discussion_r500662749", "createdAt": "2020-10-07T00:04:39Z", "author": {"login": "edalex-ian"}, "path": "autotest/Tests/src/main/java/com/tle/webtests/pageobject/searching/NewSearchPage.java", "diffHunk": "@@ -0,0 +1,193 @@\n+package com.tle.webtests.pageobject.searching;\n+\n+import com.tle.webtests.framework.PageContext;\n+import com.tle.webtests.pageobject.AbstractPage;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.Keys;\n+import org.openqa.selenium.WebElement;\n+import org.openqa.selenium.support.ui.ExpectedConditions;\n+\n+public class NewSearchPage extends AbstractPage<NewSearchPage> {\n+\n+  public NewSearchPage(PageContext context) {\n+    super(context);\n+  }\n+\n+  @Override\n+  protected void loadUrl() {\n+    driver.get(context.getBaseUrl() + \"page/search\");\n+  }\n+\n+  /** Find the Search query bar. */\n+  public WebElement getSearchBar() {\n+    return driver.findElement(By.id(\"searchBar\"));\n+  }\n+\n+  @Override\n+  protected WebElement findLoadedElement() {\n+    // When the Search bar is visible, the page is loaded.\n+    return getSearchBar();\n+  }\n+\n+  /**\n+   * Wait until the correct number of items are displayed.\n+   *\n+   * @param itemCount The expected number of items\n+   */\n+  public void waitForSearchCompleted(int itemCount) {\n+    waiter.until(\n+        ExpectedConditions.visibilityOfElementLocated(\n+            By.xpath(\"//span[text()='Search results (\" + itemCount + \")']\")));\n+  }\n+\n+  /** Perform a new search. */\n+  public void newSearch() {\n+    WebElement newSearchButton = driver.findElement(By.xpath(\"//button[span=('New search')]\"));\n+    newSearchButton.click();\n+  }\n+\n+  /**\n+   * Change the search query.\n+   *\n+   * @param query A text used as search query.\n+   */\n+  public void changeQuery(String query) {\n+    WebElement searchBar = getSearchBar();\n+    searchBar.sendKeys(query);\n+  }\n+\n+  /**\n+   * Get the link of an Item's title which links to the Item's summary page.\n+   *\n+   * @param title The text of an Item's title\n+   */\n+  public WebElement getItemTitleLink(String title) {\n+    return driver.findElement(By.linkText(title));\n+  }\n+\n+  public void expandRefineControlPanel() {\n+    WebElement showMore = driver.findElement(By.id(\"collapsibleRefinePanelButton\"));\n+    showMore.click();\n+  }\n+  /**\n+   * Select Collections by typing keywords in the Selector's TextField.\n+   *\n+   * @param collectionNames A list of Collection names\n+   */\n+  public void selectCollection(String... collectionNames) {\n+    WebElement collectionSelector = getRefineControl(\"CollectionSelector\");\n+    WebElement collectionSelectTextField = collectionSelector.findElement(By.xpath(\".//input\"));\n+    for (String name : collectionNames) {\n+      collectionSelectTextField.sendKeys(name);\n+      collectionSelectTextField.sendKeys(Keys.DOWN);\n+      collectionSelectTextField.sendKeys(Keys.ENTER);\n+    }\n+    // Press TAB to remove the focus so the Collection dropdown list will disappear.\n+    collectionSelectTextField.sendKeys(Keys.TAB);\n+  }\n+\n+  /**\n+   * Select one of the date range quick options.\n+   *\n+   * @param quickOption The text of a quick option\n+   */\n+  public void selectDateRangeQuickOption(String quickOption) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad345cdab0d4bce5b441856afd04c6ff72f251ed"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM1MTYxNQ==", "bodyText": "It was actually used. The test expects no items found if today is selected, but this failed because of the two new items. So I removed it. Now I can call this method again. The test will select Today and check, and then select All and check.", "url": "https://github.com/openequella/openEQUELLA/pull/2286#discussion_r501351615", "createdAt": "2020-10-07T22:43:58Z", "author": {"login": "PenghaiZhang"}, "path": "autotest/Tests/src/main/java/com/tle/webtests/pageobject/searching/NewSearchPage.java", "diffHunk": "@@ -0,0 +1,193 @@\n+package com.tle.webtests.pageobject.searching;\n+\n+import com.tle.webtests.framework.PageContext;\n+import com.tle.webtests.pageobject.AbstractPage;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.Keys;\n+import org.openqa.selenium.WebElement;\n+import org.openqa.selenium.support.ui.ExpectedConditions;\n+\n+public class NewSearchPage extends AbstractPage<NewSearchPage> {\n+\n+  public NewSearchPage(PageContext context) {\n+    super(context);\n+  }\n+\n+  @Override\n+  protected void loadUrl() {\n+    driver.get(context.getBaseUrl() + \"page/search\");\n+  }\n+\n+  /** Find the Search query bar. */\n+  public WebElement getSearchBar() {\n+    return driver.findElement(By.id(\"searchBar\"));\n+  }\n+\n+  @Override\n+  protected WebElement findLoadedElement() {\n+    // When the Search bar is visible, the page is loaded.\n+    return getSearchBar();\n+  }\n+\n+  /**\n+   * Wait until the correct number of items are displayed.\n+   *\n+   * @param itemCount The expected number of items\n+   */\n+  public void waitForSearchCompleted(int itemCount) {\n+    waiter.until(\n+        ExpectedConditions.visibilityOfElementLocated(\n+            By.xpath(\"//span[text()='Search results (\" + itemCount + \")']\")));\n+  }\n+\n+  /** Perform a new search. */\n+  public void newSearch() {\n+    WebElement newSearchButton = driver.findElement(By.xpath(\"//button[span=('New search')]\"));\n+    newSearchButton.click();\n+  }\n+\n+  /**\n+   * Change the search query.\n+   *\n+   * @param query A text used as search query.\n+   */\n+  public void changeQuery(String query) {\n+    WebElement searchBar = getSearchBar();\n+    searchBar.sendKeys(query);\n+  }\n+\n+  /**\n+   * Get the link of an Item's title which links to the Item's summary page.\n+   *\n+   * @param title The text of an Item's title\n+   */\n+  public WebElement getItemTitleLink(String title) {\n+    return driver.findElement(By.linkText(title));\n+  }\n+\n+  public void expandRefineControlPanel() {\n+    WebElement showMore = driver.findElement(By.id(\"collapsibleRefinePanelButton\"));\n+    showMore.click();\n+  }\n+  /**\n+   * Select Collections by typing keywords in the Selector's TextField.\n+   *\n+   * @param collectionNames A list of Collection names\n+   */\n+  public void selectCollection(String... collectionNames) {\n+    WebElement collectionSelector = getRefineControl(\"CollectionSelector\");\n+    WebElement collectionSelectTextField = collectionSelector.findElement(By.xpath(\".//input\"));\n+    for (String name : collectionNames) {\n+      collectionSelectTextField.sendKeys(name);\n+      collectionSelectTextField.sendKeys(Keys.DOWN);\n+      collectionSelectTextField.sendKeys(Keys.ENTER);\n+    }\n+    // Press TAB to remove the focus so the Collection dropdown list will disappear.\n+    collectionSelectTextField.sendKeys(Keys.TAB);\n+  }\n+\n+  /**\n+   * Select one of the date range quick options.\n+   *\n+   * @param quickOption The text of a quick option\n+   */\n+  public void selectDateRangeQuickOption(String quickOption) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2Mjc0OQ=="}, "originalCommit": {"oid": "ad345cdab0d4bce5b441856afd04c6ff72f251ed"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTQzMzQ4OnYy", "diffSide": "RIGHT", "path": "autotest/Tests/src/main/java/com/tle/webtests/pageobject/searching/NewSearchPage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNTozNzo0MVrOHdjPcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMzo0MDoxNVrOHeJNuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc0ODE0NQ==", "bodyText": "I wonder if instead we should use the @FindById and a class property. \ud83e\udd14", "url": "https://github.com/openequella/openEQUELLA/pull/2286#discussion_r500748145", "createdAt": "2020-10-07T05:37:41Z", "author": {"login": "edalex-ian"}, "path": "autotest/Tests/src/main/java/com/tle/webtests/pageobject/searching/NewSearchPage.java", "diffHunk": "@@ -0,0 +1,193 @@\n+package com.tle.webtests.pageobject.searching;\n+\n+import com.tle.webtests.framework.PageContext;\n+import com.tle.webtests.pageobject.AbstractPage;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.Keys;\n+import org.openqa.selenium.WebElement;\n+import org.openqa.selenium.support.ui.ExpectedConditions;\n+\n+public class NewSearchPage extends AbstractPage<NewSearchPage> {\n+\n+  public NewSearchPage(PageContext context) {\n+    super(context);\n+  }\n+\n+  @Override\n+  protected void loadUrl() {\n+    driver.get(context.getBaseUrl() + \"page/search\");\n+  }\n+\n+  /** Find the Search query bar. */\n+  public WebElement getSearchBar() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad345cdab0d4bce5b441856afd04c6ff72f251ed"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM3MDI5OQ==", "bodyText": "I think it's good to use this annotation for three components: the search bar, new search button and the refine panel show more button.", "url": "https://github.com/openequella/openEQUELLA/pull/2286#discussion_r501370299", "createdAt": "2020-10-07T23:40:15Z", "author": {"login": "PenghaiZhang"}, "path": "autotest/Tests/src/main/java/com/tle/webtests/pageobject/searching/NewSearchPage.java", "diffHunk": "@@ -0,0 +1,193 @@\n+package com.tle.webtests.pageobject.searching;\n+\n+import com.tle.webtests.framework.PageContext;\n+import com.tle.webtests.pageobject.AbstractPage;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.Keys;\n+import org.openqa.selenium.WebElement;\n+import org.openqa.selenium.support.ui.ExpectedConditions;\n+\n+public class NewSearchPage extends AbstractPage<NewSearchPage> {\n+\n+  public NewSearchPage(PageContext context) {\n+    super(context);\n+  }\n+\n+  @Override\n+  protected void loadUrl() {\n+    driver.get(context.getBaseUrl() + \"page/search\");\n+  }\n+\n+  /** Find the Search query bar. */\n+  public WebElement getSearchBar() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc0ODE0NQ=="}, "originalCommit": {"oid": "ad345cdab0d4bce5b441856afd04c6ff72f251ed"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTc5MzM5OnYy", "diffSide": "RIGHT", "path": "autotest/OldTests/src/test/java/io/github/openequella/search/NewSearchPageTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMzozNjoyNFrOHeMzyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMzozNjoyNFrOHeMzyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQyOTE5Mw==", "bodyText": "Does it need to depend on any prior test? Seeing it's logging in with a new session, it should be stand-alone really shouldn't it?", "url": "https://github.com/openequella/openEQUELLA/pull/2286#discussion_r501429193", "createdAt": "2020-10-08T03:36:24Z", "author": {"login": "edalex-ian"}, "path": "autotest/OldTests/src/test/java/io/github/openequella/search/NewSearchPageTest.java", "diffHunk": "@@ -60,12 +68,22 @@ public void openItemSummaryPage() {\n   public void backToSearchPage() {\n     context.getDriver().navigate().back();\n     WebElement searchBar = searchPage.getSearchBar();\n+    // Expect when going 'back' to the search page, the previous search\n+    // settings have been remembered.\n     assertEquals(searchBar.getAttribute(\"value\"), \"Java\");\n     searchPage.waitForSearchCompleted(1);\n   }\n \n-  @Override\n-  protected void cleanupAfterClass() throws Exception {\n-    // This test does not need to clean anything.\n+  @Test(description = \"Search with a low privileged user\", dependsOnMethods = \"backToSearchPage\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92dbb54acba1937afde1c707a0d6bf070054271f"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1794, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}