{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NjA0OTc5", "number": 1784, "reviewThreads": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNjowMDowNlrOECanZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMjoyNjo1N1rOEGK9qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTY4Njc3OnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/src/AxiosInstance.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNjowMDowNlrOGe25Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNjoxOTozMlrOGe3SJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAwOTg0Mg==", "bodyText": "The reason to add this is because the default query string format for array is not accepted on oEQ Server.\nFor example, /search2/?status[]=xxx&status[]=yyy  is not OK but /search2/?status=xxx&status=yyy is fine.\nAnybody have better ideas?", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r435009842", "createdAt": "2020-06-04T06:00:06Z", "author": {"login": "PenghaiZhang"}, "path": "oeq-ts-rest-api/src/AxiosInstance.ts", "diffHunk": "@@ -19,7 +20,7 @@ export const GET = <T>(\n   queryParams?: object\n ): Promise<T> =>\n   axios\n-    .get<T>(path, {params: queryParams})\n+    .get<T>(path, {params: queryParams, paramsSerializer: params => stringify(params)}, )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c0e1a34990928b291b9f9dc08c232b65c96ea4e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAxNjIyOA==", "bodyText": "I'm fine with that. But see my comment, as we may want to use a slightly more active module.", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r435016228", "createdAt": "2020-06-04T06:19:32Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/src/AxiosInstance.ts", "diffHunk": "@@ -19,7 +20,7 @@ export const GET = <T>(\n   queryParams?: object\n ): Promise<T> =>\n   axios\n-    .get<T>(path, {params: queryParams})\n+    .get<T>(path, {params: queryParams, paramsSerializer: params => stringify(params)}, )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAwOTg0Mg=="}, "originalCommit": {"oid": "8c0e1a34990928b291b9f9dc08c232b65c96ea4e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTY4Njk1OnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/src/Search.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNjowMDoxM1rOGe25VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNjowMDoxM1rOGe25VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAwOTg3Ng==", "bodyText": "Please add JSDoc at the interface level too.", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r435009876", "createdAt": "2020-06-04T06:00:13Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/src/Search.ts", "diffHunk": "@@ -0,0 +1,70 @@\n+import * as Common from './Common';\n+import { is } from 'typescript-is';\n+import * as SearchResult from './SearchResult';\n+import {GET} from './AxiosInstance';\n+\n+export interface SearchParams {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c0e1a34990928b291b9f9dc08c232b65c96ea4e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTY4OTIzOnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/src/Search.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNjowMTozMVrOGe26yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNjowMTozMVrOGe26yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAxMDI0OA==", "bodyText": "No need for this to be in its own stand-alone function. You'll see the others have just defined it where used. I see you've also exported it, but AFAICT it's not needed anywhere else.", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r435010248", "createdAt": "2020-06-04T06:01:31Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/src/Search.ts", "diffHunk": "@@ -0,0 +1,70 @@\n+import * as Common from './Common';\n+import { is } from 'typescript-is';\n+import * as SearchResult from './SearchResult';\n+import {GET} from './AxiosInstance';\n+\n+export interface SearchParams {\n+  /**\n+   * Query string.\n+   */\n+  query?: string;\n+  /**\n+   * The first record of the search results to return.\n+   */\n+  start?: number;\n+  /**\n+   * The number of results to return.\n+   */\n+  length?: number;\n+  /**\n+   * List of collections.\n+   */\n+  collections?: string[];\n+  /**\n+   * The order of the search results.\n+   */\n+  order?: string;\n+  /**\n+   * Reverse the order of the search results.\n+   */\n+  reverseOrder?: boolean;\n+  /**\n+   * An advanced search UUID.\n+   */\n+  advancedSearch?: string;\n+  /**\n+   * A where clause.\n+   */\n+  whereClause?: string;\n+  /**\n+   * Item status.\n+   */\n+  status?: SearchResult.ItemStatus[];\n+  /**\n+   * A date before which items are modified. Date format (yyyy-MM-dd).\n+   */\n+  modifiedBefore?: string;\n+  /**\n+   * A date after which items are modified. Date format (yyyy-MM-dd).\n+   */\n+  modifiedAfter?: string;\n+  /**\n+   * An ID of a user.\n+   */\n+  owner?: string;\n+  /**\n+   * single dynamic collection uuid.\n+   */\n+  dynaCollection?: string;\n+}\n+\n+export const isPagedSearchResultItem = (instance: unknown): boolean =>\n+  is<Common.PagedResult<SearchResult.Item>>(instance);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c0e1a34990928b291b9f9dc08c232b65c96ea4e"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTY5MDU2OnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/test/search.test.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNjowMjoyM1rOGe27qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNjoyMDoxN1rOGe3TVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAxMDQ3NQ==", "bodyText": "I feel this Jest test is more focused on validating the returned data type and handling errors rather than checking if the search result is correct or not.\nWe have another test Search2ApiTest which check the search results.", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r435010475", "createdAt": "2020-06-04T06:02:23Z", "author": {"login": "PenghaiZhang"}, "path": "oeq-ts-rest-api/test/search.test.ts", "diffHunk": "@@ -0,0 +1,56 @@\n+import * as Search from '../src/Search';\n+import * as SearchResult from '../src/SearchResult';\n+import * as Common from '../src/Common';\n+import * as Auth from '../src/Auth';\n+import * as TC from './TestConfig';\n+import * as Errors from \"../src/Errors\";\n+\n+beforeAll(() => Auth.login(TC.API_PATH, TC.USERNAME, TC.PASSWORD));\n+afterAll(() => Auth.logout(TC.API_PATH, true));\n+\n+describe(\"Search for items\", () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c0e1a34990928b291b9f9dc08c232b65c96ea4e"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAxNjUzNA==", "bodyText": "Correct. The Jest tests here are to ensure the API comms work. The test of the actual search logic is a core oEQ testing concern. \ud83d\udc4d", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r435016534", "createdAt": "2020-06-04T06:20:17Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/test/search.test.ts", "diffHunk": "@@ -0,0 +1,56 @@\n+import * as Search from '../src/Search';\n+import * as SearchResult from '../src/SearchResult';\n+import * as Common from '../src/Common';\n+import * as Auth from '../src/Auth';\n+import * as TC from './TestConfig';\n+import * as Errors from \"../src/Errors\";\n+\n+beforeAll(() => Auth.login(TC.API_PATH, TC.USERNAME, TC.PASSWORD));\n+afterAll(() => Auth.logout(TC.API_PATH, true));\n+\n+describe(\"Search for items\", () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAxMDQ3NQ=="}, "originalCommit": {"oid": "8c0e1a34990928b291b9f9dc08c232b65c96ea4e"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTY5MjMzOnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/src/SearchResult.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNjowMzowN1rOGe28pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNjowMzowN1rOGe28pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAxMDcyNQ==", "bodyText": "File level comments:\n\nAll the interfaces here should be in either Common and over in Search, there's no need for this file; and\nAll of the interfaces in this file are missing JSDoc.", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r435010725", "createdAt": "2020-06-04T06:03:07Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/src/SearchResult.ts", "diffHunk": "@@ -0,0 +1,50 @@\n+import * as Common from './Common';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c0e1a34990928b291b9f9dc08c232b65c96ea4e"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTY5NDk0OnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/test/search.test.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNjowNDozNlrOGe2-Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNjowNDozNlrOGe2-Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAxMTE1OQ==", "bodyText": "We believe (thanks to the recent updates from @ChristianMurphy ), that we don't need this if you define the test as async and use await for the API call - see the other tests.", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r435011159", "createdAt": "2020-06-04T06:04:36Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/test/search.test.ts", "diffHunk": "@@ -0,0 +1,56 @@\n+import * as Search from '../src/Search';\n+import * as SearchResult from '../src/SearchResult';\n+import * as Common from '../src/Common';\n+import * as Auth from '../src/Auth';\n+import * as TC from './TestConfig';\n+import * as Errors from \"../src/Errors\";\n+\n+beforeAll(() => Auth.login(TC.API_PATH, TC.USERNAME, TC.PASSWORD));\n+afterAll(() => Auth.logout(TC.API_PATH, true));\n+\n+describe(\"Search for items\", () => {\n+  const SEARCH_API_PATH = `${TC.API_PATH}/search2`;\n+\n+  it(\"should be able to search without params\", () => {\n+    expect.assertions(4);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c0e1a34990928b291b9f9dc08c232b65c96ea4e"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTY5OTg3OnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/src/Search.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNjowNzowMFrOGe3BYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNjowNzowMFrOGe3BYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAxMTkzNw==", "bodyText": "Missing JSDoc.\nKeep in mind the pattern is that searchPath is just meant to be apiBasePath. It then uses that to build the full path so that the caller does not need to worry about the routes etc. (See others as examples.)", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r435011937", "createdAt": "2020-06-04T06:07:00Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/src/Search.ts", "diffHunk": "@@ -0,0 +1,70 @@\n+import * as Common from './Common';\n+import { is } from 'typescript-is';\n+import * as SearchResult from './SearchResult';\n+import {GET} from './AxiosInstance';\n+\n+export interface SearchParams {\n+  /**\n+   * Query string.\n+   */\n+  query?: string;\n+  /**\n+   * The first record of the search results to return.\n+   */\n+  start?: number;\n+  /**\n+   * The number of results to return.\n+   */\n+  length?: number;\n+  /**\n+   * List of collections.\n+   */\n+  collections?: string[];\n+  /**\n+   * The order of the search results.\n+   */\n+  order?: string;\n+  /**\n+   * Reverse the order of the search results.\n+   */\n+  reverseOrder?: boolean;\n+  /**\n+   * An advanced search UUID.\n+   */\n+  advancedSearch?: string;\n+  /**\n+   * A where clause.\n+   */\n+  whereClause?: string;\n+  /**\n+   * Item status.\n+   */\n+  status?: SearchResult.ItemStatus[];\n+  /**\n+   * A date before which items are modified. Date format (yyyy-MM-dd).\n+   */\n+  modifiedBefore?: string;\n+  /**\n+   * A date after which items are modified. Date format (yyyy-MM-dd).\n+   */\n+  modifiedAfter?: string;\n+  /**\n+   * An ID of a user.\n+   */\n+  owner?: string;\n+  /**\n+   * single dynamic collection uuid.\n+   */\n+  dynaCollection?: string;\n+}\n+\n+export const isPagedSearchResultItem = (instance: unknown): boolean =>\n+  is<Common.PagedResult<SearchResult.Item>>(instance);\n+\n+export const search = (searchPath: string, params?: SearchParams): Promise<Common.PagedResult<SearchResult.Item>> => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c0e1a34990928b291b9f9dc08c232b65c96ea4e"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTcwMTgwOnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/test/search.test.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNjowNzo1M1rOGe3CjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNjowNzo1M1rOGe3CjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAxMjIzNg==", "bodyText": "As mentioned in Search.ts, this path should be internalised to Search.ts.", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r435012236", "createdAt": "2020-06-04T06:07:53Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/test/search.test.ts", "diffHunk": "@@ -0,0 +1,56 @@\n+import * as Search from '../src/Search';\n+import * as SearchResult from '../src/SearchResult';\n+import * as Common from '../src/Common';\n+import * as Auth from '../src/Auth';\n+import * as TC from './TestConfig';\n+import * as Errors from \"../src/Errors\";\n+\n+beforeAll(() => Auth.login(TC.API_PATH, TC.USERNAME, TC.PASSWORD));\n+afterAll(() => Auth.logout(TC.API_PATH, true));\n+\n+describe(\"Search for items\", () => {\n+  const SEARCH_API_PATH = `${TC.API_PATH}/search2`;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c0e1a34990928b291b9f9dc08c232b65c96ea4e"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTcwNTA1OnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/test/search.test.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNjowOTozOFrOGe3EsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNjowOTozOFrOGe3EsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAxMjc4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              it(\"should get 404 response if search for an non-existing collection\", () => {\n          \n          \n            \n              it(\"should get 404 response if search for a non-existing collection\", () => {", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r435012784", "createdAt": "2020-06-04T06:09:38Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/test/search.test.ts", "diffHunk": "@@ -0,0 +1,56 @@\n+import * as Search from '../src/Search';\n+import * as SearchResult from '../src/SearchResult';\n+import * as Common from '../src/Common';\n+import * as Auth from '../src/Auth';\n+import * as TC from './TestConfig';\n+import * as Errors from \"../src/Errors\";\n+\n+beforeAll(() => Auth.login(TC.API_PATH, TC.USERNAME, TC.PASSWORD));\n+afterAll(() => Auth.logout(TC.API_PATH, true));\n+\n+describe(\"Search for items\", () => {\n+  const SEARCH_API_PATH = `${TC.API_PATH}/search2`;\n+\n+  it(\"should be able to search without params\", () => {\n+    expect.assertions(4);\n+    return Search.search(SEARCH_API_PATH).then(\n+      (pagedResult: Common.PagedResult<SearchResult.Item>) => {\n+        // The default start is 0 and length of search results is 10.\n+        expect(pagedResult.start).toBe(0);\n+        expect(pagedResult).toHaveLength(10);\n+        expect(pagedResult.available).toBeGreaterThan(0);\n+        expect(pagedResult.results).toHaveLength(10)\n+      }\n+    )\n+  });\n+\n+  it(\"should be able to search with params\", () => {\n+    expect.assertions(4);\n+    const collection = \"a77112e6-3370-fd02-6ac6-6bc5aec22001\";\n+    const searchParams: Search.SearchParams = {\n+      query: \"API\",\n+      status: [SearchResult.ItemStatus.LIVE],\n+      collections: [collection]\n+    };\n+    return Search.search(SEARCH_API_PATH, searchParams).then(\n+      (pagedResult: Common.PagedResult<SearchResult.Item>) => {\n+        const {uuid, status, collectionId} = pagedResult.results[0];\n+        expect(pagedResult).toHaveLength(pagedResult.results.length);\n+        expect(uuid).toBeTruthy();\n+        // Status returned is in lowercase so have to convert to uppercase.\n+        expect(status.toUpperCase()).toBe(SearchResult.ItemStatus.LIVE);\n+        expect(collectionId).toBe(collection);\n+      }\n+    )\n+  });\n+\n+  it(\"should get 404 response if search for an non-existing collection\", () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c0e1a34990928b291b9f9dc08c232b65c96ea4e"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTcyMzgxOnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/src/AxiosInstance.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNjoxODoxNFrOGe3QZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNzowODo1MFrOGe4kJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAxNTc4MA==", "bodyText": "I wonder if instead we should use https://www.npmjs.com/package/query-string\nOnly because it's been updated lately (2 months vs 7 years) and seems a bit more widely used.\nIt is also interesting that you could pull this in without adding anything to package.json. \ud83e\udd14\n(And as a real minor sidenote, interest that this is in double quotes where the others are in single quotes - I wonder if you ran Prettier over this...)", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r435015780", "createdAt": "2020-06-04T06:18:14Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/src/AxiosInstance.ts", "diffHunk": "@@ -2,6 +2,7 @@ import Axios, { AxiosResponse, AxiosError } from 'axios';\n import axiosCookieJarSupport from 'axios-cookiejar-support';\n import * as tough from 'tough-cookie';\n import { repackageError } from './Errors';\n+import {stringify} from \"querystring\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c0e1a34990928b291b9f9dc08c232b65c96ea4e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAzNzIyMQ==", "bodyText": "No I did not. I just hit alt+enter to import this library.", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r435037221", "createdAt": "2020-06-04T07:08:50Z", "author": {"login": "PenghaiZhang"}, "path": "oeq-ts-rest-api/src/AxiosInstance.ts", "diffHunk": "@@ -2,6 +2,7 @@ import Axios, { AxiosResponse, AxiosError } from 'axios';\n import axiosCookieJarSupport from 'axios-cookiejar-support';\n import * as tough from 'tough-cookie';\n import { repackageError } from './Errors';\n+import {stringify} from \"querystring\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAxNTc4MA=="}, "originalCommit": {"oid": "8c0e1a34990928b291b9f9dc08c232b65c96ea4e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTUxMTE5OnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/src/Search.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDozMTozNlrOGfI5iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNjozOTowNlrOGfiIOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMwNDg0MQ==", "bodyText": "Are these statuses fixed/static? Or are they customizable at an institution level?", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r435304841", "createdAt": "2020-06-04T14:31:36Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/src/Search.ts", "diffHunk": "@@ -0,0 +1,210 @@\n+import * as Common from './Common';\n+import { is } from 'typescript-is';\n+import {GET} from './AxiosInstance';\n+\n+/**\n+ * Type of query parameters that can be used in a search.\n+ */\n+export interface SearchParams {\n+  /**\n+   * Query string.\n+   */\n+  query?: string;\n+  /**\n+   * The first record of the search results to return.\n+   */\n+  start?: number;\n+  /**\n+   * The number of results to return.\n+   */\n+  length?: number;\n+  /**\n+   * List of collections.\n+   */\n+  collections?: string[];\n+  /**\n+   * The order of the search results.\n+   */\n+  order?: string;\n+  /**\n+   * Reverse the order of the search results.\n+   */\n+  reverseOrder?: boolean;\n+  /**\n+   * An advanced search UUID.\n+   */\n+  advancedSearch?: string;\n+  /**\n+   * A where clause.\n+   */\n+  whereClause?: string;\n+  /**\n+   * Item status.\n+   */\n+  status?: ItemStatus[];\n+  /**\n+   * A date before which items are modified. Date format (yyyy-MM-dd).\n+   */\n+  modifiedBefore?: string;\n+  /**\n+   * A date after which items are modified. Date format (yyyy-MM-dd).\n+   */\n+  modifiedAfter?: string;\n+  /**\n+   * An ID of a user.\n+   */\n+  owner?: string;\n+  /**\n+   * single dynamic collection uuid.\n+   */\n+  dynaCollection?: string;\n+}\n+\n+export enum ItemStatus {\n+  DRAFT = \"DRAFT\",\n+  LIVE = \"LIVE\",\n+  REJECTED = \"REJECTED\",\n+  MODERATING = \"MODERATING\",\n+  ARCHIVED = \"ARCHIVED\",\n+  SUSPENDED = \"SUSPENDED\",\n+  DELETED = \"DELETED\",\n+  REVIEW = \"REVIEW\",\n+  PERSONAL = \"PERSONAL\",\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "709165beb03861bc92e7d3e21ccb5be95c5b1145"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcxODIwMA==", "bodyText": "These are fixed/static and match an enum server side.", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r435718200", "createdAt": "2020-06-05T06:39:06Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/src/Search.ts", "diffHunk": "@@ -0,0 +1,210 @@\n+import * as Common from './Common';\n+import { is } from 'typescript-is';\n+import {GET} from './AxiosInstance';\n+\n+/**\n+ * Type of query parameters that can be used in a search.\n+ */\n+export interface SearchParams {\n+  /**\n+   * Query string.\n+   */\n+  query?: string;\n+  /**\n+   * The first record of the search results to return.\n+   */\n+  start?: number;\n+  /**\n+   * The number of results to return.\n+   */\n+  length?: number;\n+  /**\n+   * List of collections.\n+   */\n+  collections?: string[];\n+  /**\n+   * The order of the search results.\n+   */\n+  order?: string;\n+  /**\n+   * Reverse the order of the search results.\n+   */\n+  reverseOrder?: boolean;\n+  /**\n+   * An advanced search UUID.\n+   */\n+  advancedSearch?: string;\n+  /**\n+   * A where clause.\n+   */\n+  whereClause?: string;\n+  /**\n+   * Item status.\n+   */\n+  status?: ItemStatus[];\n+  /**\n+   * A date before which items are modified. Date format (yyyy-MM-dd).\n+   */\n+  modifiedBefore?: string;\n+  /**\n+   * A date after which items are modified. Date format (yyyy-MM-dd).\n+   */\n+  modifiedAfter?: string;\n+  /**\n+   * An ID of a user.\n+   */\n+  owner?: string;\n+  /**\n+   * single dynamic collection uuid.\n+   */\n+  dynaCollection?: string;\n+}\n+\n+export enum ItemStatus {\n+  DRAFT = \"DRAFT\",\n+  LIVE = \"LIVE\",\n+  REJECTED = \"REJECTED\",\n+  MODERATING = \"MODERATING\",\n+  ARCHIVED = \"ARCHIVED\",\n+  SUSPENDED = \"SUSPENDED\",\n+  DELETED = \"DELETED\",\n+  REVIEW = \"REVIEW\",\n+  PERSONAL = \"PERSONAL\",\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMwNDg0MQ=="}, "originalCommit": {"oid": "709165beb03861bc92e7d3e21ccb5be95c5b1145"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDA4MzU3OnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/src/Search.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNjo0MToyNVrOGfiLbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNjo0MToyNVrOGfiLbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcxOTAyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Type of item's display options.\n          \n          \n            \n             * How an item should be displayed as configured per institution via the search result display template.", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r435719020", "createdAt": "2020-06-05T06:41:25Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/src/Search.ts", "diffHunk": "@@ -58,13 +60,151 @@ export interface SearchParams {\n   dynaCollection?: string;\n }\n \n-export const isPagedSearchResultItem = (instance: unknown): boolean =>\n-  is<Common.PagedResult<SearchResult.Item>>(instance);\n+export enum ItemStatus {\n+  DRAFT = \"DRAFT\",\n+  LIVE = \"LIVE\",\n+  REJECTED = \"REJECTED\",\n+  MODERATING = \"MODERATING\",\n+  ARCHIVED = \"ARCHIVED\",\n+  SUSPENDED = \"SUSPENDED\",\n+  DELETED = \"DELETED\",\n+  REVIEW = \"REVIEW\",\n+  PERSONAL = \"PERSONAL\",\n+}\n+\n+/**\n+ * Type of item's display fields.\n+ */\n+export interface DisplayFields {\n+  /**\n+   * Type of a field.\n+   */\n+  type: string;\n+  /**\n+   * Name of a field.\n+   */\n+  name: Common.i18nString;\n+  /**\n+   * Html code of a field.\n+   */\n+  html: Common.i18nString;\n+}\n+\n+/**\n+ * Type of item's display options.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "709165beb03861bc92e7d3e21ccb5be95c5b1145"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDA4ODA3OnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/src/Search.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNjo0MzozNVrOGfiOVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNjo0MzozNVrOGfiOVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcxOTc2Nw==", "bodyText": "We can probably simplify the name here:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            export interface SearchResultAttachment {\n          \n          \n            \n            export interface Attachment {\n          \n      \n    \n    \n  \n\nMaybe the long name matches the server side, but with namespacing here it'll be Search.Attachment anyway... \ud83e\udd14", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r435719767", "createdAt": "2020-06-05T06:43:35Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/src/Search.ts", "diffHunk": "@@ -58,13 +60,151 @@ export interface SearchParams {\n   dynaCollection?: string;\n }\n \n-export const isPagedSearchResultItem = (instance: unknown): boolean =>\n-  is<Common.PagedResult<SearchResult.Item>>(instance);\n+export enum ItemStatus {\n+  DRAFT = \"DRAFT\",\n+  LIVE = \"LIVE\",\n+  REJECTED = \"REJECTED\",\n+  MODERATING = \"MODERATING\",\n+  ARCHIVED = \"ARCHIVED\",\n+  SUSPENDED = \"SUSPENDED\",\n+  DELETED = \"DELETED\",\n+  REVIEW = \"REVIEW\",\n+  PERSONAL = \"PERSONAL\",\n+}\n+\n+/**\n+ * Type of item's display fields.\n+ */\n+export interface DisplayFields {\n+  /**\n+   * Type of a field.\n+   */\n+  type: string;\n+  /**\n+   * Name of a field.\n+   */\n+  name: Common.i18nString;\n+  /**\n+   * Html code of a field.\n+   */\n+  html: Common.i18nString;\n+}\n+\n+/**\n+ * Type of item's display options.\n+ */\n+export interface DisplayOptions {\n+  /**\n+   * The display mode for attachments when viewed from search result page.\n+   */\n+  attachmentType: string;\n+  /**\n+   * True if thumbnail is prevented from displaying.\n+   */\n+  disableThumbnail: boolean;\n+  /**\n+   * True if the 'show attachments' icon is enabled for standard search result pages.\n+   */\n+  standardOpen: boolean;\n+  /**\n+   * True if the 'show attachments' icon is enabled for integration screen result pages.\n+   */\n+  integrationOpen: boolean;\n+}\n+\n+/**\n+ * Type of search result attachment.\n+ */\n+export interface SearchResultAttachment {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "709165beb03861bc92e7d3e21ccb5be95c5b1145"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDA4OTQ2OnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/src/Search.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNjo0NDoxMVrOGfiPOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNjo0NDoxMVrOGfiPOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcxOTk5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Type of search result attachment.\n          \n          \n            \n             * Summary of an attachment associated with an item returned in a search result.", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r435719992", "createdAt": "2020-06-05T06:44:11Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/src/Search.ts", "diffHunk": "@@ -58,13 +60,151 @@ export interface SearchParams {\n   dynaCollection?: string;\n }\n \n-export const isPagedSearchResultItem = (instance: unknown): boolean =>\n-  is<Common.PagedResult<SearchResult.Item>>(instance);\n+export enum ItemStatus {\n+  DRAFT = \"DRAFT\",\n+  LIVE = \"LIVE\",\n+  REJECTED = \"REJECTED\",\n+  MODERATING = \"MODERATING\",\n+  ARCHIVED = \"ARCHIVED\",\n+  SUSPENDED = \"SUSPENDED\",\n+  DELETED = \"DELETED\",\n+  REVIEW = \"REVIEW\",\n+  PERSONAL = \"PERSONAL\",\n+}\n+\n+/**\n+ * Type of item's display fields.\n+ */\n+export interface DisplayFields {\n+  /**\n+   * Type of a field.\n+   */\n+  type: string;\n+  /**\n+   * Name of a field.\n+   */\n+  name: Common.i18nString;\n+  /**\n+   * Html code of a field.\n+   */\n+  html: Common.i18nString;\n+}\n+\n+/**\n+ * Type of item's display options.\n+ */\n+export interface DisplayOptions {\n+  /**\n+   * The display mode for attachments when viewed from search result page.\n+   */\n+  attachmentType: string;\n+  /**\n+   * True if thumbnail is prevented from displaying.\n+   */\n+  disableThumbnail: boolean;\n+  /**\n+   * True if the 'show attachments' icon is enabled for standard search result pages.\n+   */\n+  standardOpen: boolean;\n+  /**\n+   * True if the 'show attachments' icon is enabled for integration screen result pages.\n+   */\n+  integrationOpen: boolean;\n+}\n+\n+/**\n+ * Type of search result attachment.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "709165beb03861bc92e7d3e21ccb5be95c5b1145"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDA5NjAxOnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/src/Search.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNjo0Njo1N1rOGfiTMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMDoxNDo0NVrOGg0h3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcyMTAxMA==", "bodyText": "Could be good to give example values of some of the standard ones...\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Attachment type.\n          \n          \n            \n               * Attachment type, e.g. \"file\", \"url\", \"package\", \"scorm\", etc.\n          \n      \n    \n    \n  \n\nFrom memory these are configurable server side, so I guess we can't use an enum.", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r435721010", "createdAt": "2020-06-05T06:46:57Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/src/Search.ts", "diffHunk": "@@ -58,13 +60,151 @@ export interface SearchParams {\n   dynaCollection?: string;\n }\n \n-export const isPagedSearchResultItem = (instance: unknown): boolean =>\n-  is<Common.PagedResult<SearchResult.Item>>(instance);\n+export enum ItemStatus {\n+  DRAFT = \"DRAFT\",\n+  LIVE = \"LIVE\",\n+  REJECTED = \"REJECTED\",\n+  MODERATING = \"MODERATING\",\n+  ARCHIVED = \"ARCHIVED\",\n+  SUSPENDED = \"SUSPENDED\",\n+  DELETED = \"DELETED\",\n+  REVIEW = \"REVIEW\",\n+  PERSONAL = \"PERSONAL\",\n+}\n+\n+/**\n+ * Type of item's display fields.\n+ */\n+export interface DisplayFields {\n+  /**\n+   * Type of a field.\n+   */\n+  type: string;\n+  /**\n+   * Name of a field.\n+   */\n+  name: Common.i18nString;\n+  /**\n+   * Html code of a field.\n+   */\n+  html: Common.i18nString;\n+}\n+\n+/**\n+ * Type of item's display options.\n+ */\n+export interface DisplayOptions {\n+  /**\n+   * The display mode for attachments when viewed from search result page.\n+   */\n+  attachmentType: string;\n+  /**\n+   * True if thumbnail is prevented from displaying.\n+   */\n+  disableThumbnail: boolean;\n+  /**\n+   * True if the 'show attachments' icon is enabled for standard search result pages.\n+   */\n+  standardOpen: boolean;\n+  /**\n+   * True if the 'show attachments' icon is enabled for integration screen result pages.\n+   */\n+  integrationOpen: boolean;\n+}\n+\n+/**\n+ * Type of search result attachment.\n+ */\n+export interface SearchResultAttachment {\n+  /**\n+   * Attachment type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "709165beb03861bc92e7d3e21ccb5be95c5b1145"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2ODI1Mg==", "bodyText": "Yes. We have quite a few beans which extend AttachmentBean and these beans define their types.", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r437068252", "createdAt": "2020-06-09T00:14:45Z", "author": {"login": "PenghaiZhang"}, "path": "oeq-ts-rest-api/src/Search.ts", "diffHunk": "@@ -58,13 +60,151 @@ export interface SearchParams {\n   dynaCollection?: string;\n }\n \n-export const isPagedSearchResultItem = (instance: unknown): boolean =>\n-  is<Common.PagedResult<SearchResult.Item>>(instance);\n+export enum ItemStatus {\n+  DRAFT = \"DRAFT\",\n+  LIVE = \"LIVE\",\n+  REJECTED = \"REJECTED\",\n+  MODERATING = \"MODERATING\",\n+  ARCHIVED = \"ARCHIVED\",\n+  SUSPENDED = \"SUSPENDED\",\n+  DELETED = \"DELETED\",\n+  REVIEW = \"REVIEW\",\n+  PERSONAL = \"PERSONAL\",\n+}\n+\n+/**\n+ * Type of item's display fields.\n+ */\n+export interface DisplayFields {\n+  /**\n+   * Type of a field.\n+   */\n+  type: string;\n+  /**\n+   * Name of a field.\n+   */\n+  name: Common.i18nString;\n+  /**\n+   * Html code of a field.\n+   */\n+  html: Common.i18nString;\n+}\n+\n+/**\n+ * Type of item's display options.\n+ */\n+export interface DisplayOptions {\n+  /**\n+   * The display mode for attachments when viewed from search result page.\n+   */\n+  attachmentType: string;\n+  /**\n+   * True if thumbnail is prevented from displaying.\n+   */\n+  disableThumbnail: boolean;\n+  /**\n+   * True if the 'show attachments' icon is enabled for standard search result pages.\n+   */\n+  standardOpen: boolean;\n+  /**\n+   * True if the 'show attachments' icon is enabled for integration screen result pages.\n+   */\n+  integrationOpen: boolean;\n+}\n+\n+/**\n+ * Type of search result attachment.\n+ */\n+export interface SearchResultAttachment {\n+  /**\n+   * Attachment type.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcyMTAxMA=="}, "originalCommit": {"oid": "709165beb03861bc92e7d3e21ccb5be95c5b1145"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDA5NzM1OnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/src/Search.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNjo0NzozMFrOGfiT6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzoyMjo0MlrOGgzpVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcyMTE5NQ==", "bodyText": "Seeing this is a string, does that mean it's a UUID?", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r435721195", "createdAt": "2020-06-05T06:47:30Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/src/Search.ts", "diffHunk": "@@ -58,13 +60,151 @@ export interface SearchParams {\n   dynaCollection?: string;\n }\n \n-export const isPagedSearchResultItem = (instance: unknown): boolean =>\n-  is<Common.PagedResult<SearchResult.Item>>(instance);\n+export enum ItemStatus {\n+  DRAFT = \"DRAFT\",\n+  LIVE = \"LIVE\",\n+  REJECTED = \"REJECTED\",\n+  MODERATING = \"MODERATING\",\n+  ARCHIVED = \"ARCHIVED\",\n+  SUSPENDED = \"SUSPENDED\",\n+  DELETED = \"DELETED\",\n+  REVIEW = \"REVIEW\",\n+  PERSONAL = \"PERSONAL\",\n+}\n+\n+/**\n+ * Type of item's display fields.\n+ */\n+export interface DisplayFields {\n+  /**\n+   * Type of a field.\n+   */\n+  type: string;\n+  /**\n+   * Name of a field.\n+   */\n+  name: Common.i18nString;\n+  /**\n+   * Html code of a field.\n+   */\n+  html: Common.i18nString;\n+}\n+\n+/**\n+ * Type of item's display options.\n+ */\n+export interface DisplayOptions {\n+  /**\n+   * The display mode for attachments when viewed from search result page.\n+   */\n+  attachmentType: string;\n+  /**\n+   * True if thumbnail is prevented from displaying.\n+   */\n+  disableThumbnail: boolean;\n+  /**\n+   * True if the 'show attachments' icon is enabled for standard search result pages.\n+   */\n+  standardOpen: boolean;\n+  /**\n+   * True if the 'show attachments' icon is enabled for integration screen result pages.\n+   */\n+  integrationOpen: boolean;\n+}\n+\n+/**\n+ * Type of search result attachment.\n+ */\n+export interface SearchResultAttachment {\n+  /**\n+   * Attachment type.\n+   */\n+  attachmentType: string;\n+  /**\n+   * The unique ID of an attachment.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "709165beb03861bc92e7d3e21ccb5be95c5b1145"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1Mzc4MQ==", "bodyText": "Yes.", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r437053781", "createdAt": "2020-06-08T23:22:42Z", "author": {"login": "PenghaiZhang"}, "path": "oeq-ts-rest-api/src/Search.ts", "diffHunk": "@@ -58,13 +60,151 @@ export interface SearchParams {\n   dynaCollection?: string;\n }\n \n-export const isPagedSearchResultItem = (instance: unknown): boolean =>\n-  is<Common.PagedResult<SearchResult.Item>>(instance);\n+export enum ItemStatus {\n+  DRAFT = \"DRAFT\",\n+  LIVE = \"LIVE\",\n+  REJECTED = \"REJECTED\",\n+  MODERATING = \"MODERATING\",\n+  ARCHIVED = \"ARCHIVED\",\n+  SUSPENDED = \"SUSPENDED\",\n+  DELETED = \"DELETED\",\n+  REVIEW = \"REVIEW\",\n+  PERSONAL = \"PERSONAL\",\n+}\n+\n+/**\n+ * Type of item's display fields.\n+ */\n+export interface DisplayFields {\n+  /**\n+   * Type of a field.\n+   */\n+  type: string;\n+  /**\n+   * Name of a field.\n+   */\n+  name: Common.i18nString;\n+  /**\n+   * Html code of a field.\n+   */\n+  html: Common.i18nString;\n+}\n+\n+/**\n+ * Type of item's display options.\n+ */\n+export interface DisplayOptions {\n+  /**\n+   * The display mode for attachments when viewed from search result page.\n+   */\n+  attachmentType: string;\n+  /**\n+   * True if thumbnail is prevented from displaying.\n+   */\n+  disableThumbnail: boolean;\n+  /**\n+   * True if the 'show attachments' icon is enabled for standard search result pages.\n+   */\n+  standardOpen: boolean;\n+  /**\n+   * True if the 'show attachments' icon is enabled for integration screen result pages.\n+   */\n+  integrationOpen: boolean;\n+}\n+\n+/**\n+ * Type of search result attachment.\n+ */\n+export interface SearchResultAttachment {\n+  /**\n+   * Attachment type.\n+   */\n+  attachmentType: string;\n+  /**\n+   * The unique ID of an attachment.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcyMTE5NQ=="}, "originalCommit": {"oid": "709165beb03861bc92e7d3e21ccb5be95c5b1145"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDEwMjM1OnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/src/Search.ts", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNjo0OTozNlrOGfiW7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNDoyNzoyOVrOGhkbCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcyMTk2NQ==", "bodyText": "I wonder if we're able to use Date on this side and then Axios might transform it for us. And from memory, typescript-is supports Date.", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r435721965", "createdAt": "2020-06-05T06:49:36Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/src/Search.ts", "diffHunk": "@@ -58,13 +60,151 @@ export interface SearchParams {\n   dynaCollection?: string;\n }\n \n-export const isPagedSearchResultItem = (instance: unknown): boolean =>\n-  is<Common.PagedResult<SearchResult.Item>>(instance);\n+export enum ItemStatus {\n+  DRAFT = \"DRAFT\",\n+  LIVE = \"LIVE\",\n+  REJECTED = \"REJECTED\",\n+  MODERATING = \"MODERATING\",\n+  ARCHIVED = \"ARCHIVED\",\n+  SUSPENDED = \"SUSPENDED\",\n+  DELETED = \"DELETED\",\n+  REVIEW = \"REVIEW\",\n+  PERSONAL = \"PERSONAL\",\n+}\n+\n+/**\n+ * Type of item's display fields.\n+ */\n+export interface DisplayFields {\n+  /**\n+   * Type of a field.\n+   */\n+  type: string;\n+  /**\n+   * Name of a field.\n+   */\n+  name: Common.i18nString;\n+  /**\n+   * Html code of a field.\n+   */\n+  html: Common.i18nString;\n+}\n+\n+/**\n+ * Type of item's display options.\n+ */\n+export interface DisplayOptions {\n+  /**\n+   * The display mode for attachments when viewed from search result page.\n+   */\n+  attachmentType: string;\n+  /**\n+   * True if thumbnail is prevented from displaying.\n+   */\n+  disableThumbnail: boolean;\n+  /**\n+   * True if the 'show attachments' icon is enabled for standard search result pages.\n+   */\n+  standardOpen: boolean;\n+  /**\n+   * True if the 'show attachments' icon is enabled for integration screen result pages.\n+   */\n+  integrationOpen: boolean;\n+}\n+\n+/**\n+ * Type of search result attachment.\n+ */\n+export interface SearchResultAttachment {\n+  /**\n+   * Attachment type.\n+   */\n+  attachmentType: string;\n+  /**\n+   * The unique ID of an attachment.\n+   */\n+  id: string;\n+  /**\n+   * The description of an attachment.\n+   */\n+  description?: string;\n+  /**\n+   * True if an attachment can be previewed.\n+   */\n+  preview: boolean;\n+  /**\n+   * Links to the attachment.\n+   */\n+  links: Record<string, string>;\n+}\n+\n+/**\n+ * Type of search result item.\n+ */\n+export interface SearchResultItem {\n+  /**\n+   * Item's unique ID.\n+   */\n+  uuid: string;\n+  /**\n+   * Item's name.\n+   */\n+  name?: Common.i18nString;\n+  /**\n+   * Item's description.\n+   */\n+  description?: Common.i18nString;\n+  /**\n+   * Item's status\n+   */\n+  status: string;\n+  /**\n+   * The date when item is created.\n+   */\n+  createdDate: string;\n+  /**\n+   * The last date when item is modified.\n+   */\n+  modifiedDate: string;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "709165beb03861bc92e7d3e21ccb5be95c5b1145"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA4MjYzMA==", "bodyText": "I am a bit confused about this. Let's have a quick talk tomorrow.\nThe issue is using Date as the field's type will break type checks", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r437082630", "createdAt": "2020-06-09T01:10:50Z", "author": {"login": "PenghaiZhang"}, "path": "oeq-ts-rest-api/src/Search.ts", "diffHunk": "@@ -58,13 +60,151 @@ export interface SearchParams {\n   dynaCollection?: string;\n }\n \n-export const isPagedSearchResultItem = (instance: unknown): boolean =>\n-  is<Common.PagedResult<SearchResult.Item>>(instance);\n+export enum ItemStatus {\n+  DRAFT = \"DRAFT\",\n+  LIVE = \"LIVE\",\n+  REJECTED = \"REJECTED\",\n+  MODERATING = \"MODERATING\",\n+  ARCHIVED = \"ARCHIVED\",\n+  SUSPENDED = \"SUSPENDED\",\n+  DELETED = \"DELETED\",\n+  REVIEW = \"REVIEW\",\n+  PERSONAL = \"PERSONAL\",\n+}\n+\n+/**\n+ * Type of item's display fields.\n+ */\n+export interface DisplayFields {\n+  /**\n+   * Type of a field.\n+   */\n+  type: string;\n+  /**\n+   * Name of a field.\n+   */\n+  name: Common.i18nString;\n+  /**\n+   * Html code of a field.\n+   */\n+  html: Common.i18nString;\n+}\n+\n+/**\n+ * Type of item's display options.\n+ */\n+export interface DisplayOptions {\n+  /**\n+   * The display mode for attachments when viewed from search result page.\n+   */\n+  attachmentType: string;\n+  /**\n+   * True if thumbnail is prevented from displaying.\n+   */\n+  disableThumbnail: boolean;\n+  /**\n+   * True if the 'show attachments' icon is enabled for standard search result pages.\n+   */\n+  standardOpen: boolean;\n+  /**\n+   * True if the 'show attachments' icon is enabled for integration screen result pages.\n+   */\n+  integrationOpen: boolean;\n+}\n+\n+/**\n+ * Type of search result attachment.\n+ */\n+export interface SearchResultAttachment {\n+  /**\n+   * Attachment type.\n+   */\n+  attachmentType: string;\n+  /**\n+   * The unique ID of an attachment.\n+   */\n+  id: string;\n+  /**\n+   * The description of an attachment.\n+   */\n+  description?: string;\n+  /**\n+   * True if an attachment can be previewed.\n+   */\n+  preview: boolean;\n+  /**\n+   * Links to the attachment.\n+   */\n+  links: Record<string, string>;\n+}\n+\n+/**\n+ * Type of search result item.\n+ */\n+export interface SearchResultItem {\n+  /**\n+   * Item's unique ID.\n+   */\n+  uuid: string;\n+  /**\n+   * Item's name.\n+   */\n+  name?: Common.i18nString;\n+  /**\n+   * Item's description.\n+   */\n+  description?: Common.i18nString;\n+  /**\n+   * Item's status\n+   */\n+  status: string;\n+  /**\n+   * The date when item is created.\n+   */\n+  createdDate: string;\n+  /**\n+   * The last date when item is modified.\n+   */\n+  modifiedDate: string;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcyMTk2NQ=="}, "originalCommit": {"oid": "709165beb03861bc92e7d3e21ccb5be95c5b1145"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg1MjkzNw==", "bodyText": "Yup, looks like we need support in the GET to take another function (say, transformer) which can modify the response.data as required, and then maybe a standard transformer called convertDateFields looking something like:\nconst convertDateFields = (fields: string[], data: unknown) => T\nThat could sit in a new Utils.ts", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r437852937", "createdAt": "2020-06-10T04:27:29Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/src/Search.ts", "diffHunk": "@@ -58,13 +60,151 @@ export interface SearchParams {\n   dynaCollection?: string;\n }\n \n-export const isPagedSearchResultItem = (instance: unknown): boolean =>\n-  is<Common.PagedResult<SearchResult.Item>>(instance);\n+export enum ItemStatus {\n+  DRAFT = \"DRAFT\",\n+  LIVE = \"LIVE\",\n+  REJECTED = \"REJECTED\",\n+  MODERATING = \"MODERATING\",\n+  ARCHIVED = \"ARCHIVED\",\n+  SUSPENDED = \"SUSPENDED\",\n+  DELETED = \"DELETED\",\n+  REVIEW = \"REVIEW\",\n+  PERSONAL = \"PERSONAL\",\n+}\n+\n+/**\n+ * Type of item's display fields.\n+ */\n+export interface DisplayFields {\n+  /**\n+   * Type of a field.\n+   */\n+  type: string;\n+  /**\n+   * Name of a field.\n+   */\n+  name: Common.i18nString;\n+  /**\n+   * Html code of a field.\n+   */\n+  html: Common.i18nString;\n+}\n+\n+/**\n+ * Type of item's display options.\n+ */\n+export interface DisplayOptions {\n+  /**\n+   * The display mode for attachments when viewed from search result page.\n+   */\n+  attachmentType: string;\n+  /**\n+   * True if thumbnail is prevented from displaying.\n+   */\n+  disableThumbnail: boolean;\n+  /**\n+   * True if the 'show attachments' icon is enabled for standard search result pages.\n+   */\n+  standardOpen: boolean;\n+  /**\n+   * True if the 'show attachments' icon is enabled for integration screen result pages.\n+   */\n+  integrationOpen: boolean;\n+}\n+\n+/**\n+ * Type of search result attachment.\n+ */\n+export interface SearchResultAttachment {\n+  /**\n+   * Attachment type.\n+   */\n+  attachmentType: string;\n+  /**\n+   * The unique ID of an attachment.\n+   */\n+  id: string;\n+  /**\n+   * The description of an attachment.\n+   */\n+  description?: string;\n+  /**\n+   * True if an attachment can be previewed.\n+   */\n+  preview: boolean;\n+  /**\n+   * Links to the attachment.\n+   */\n+  links: Record<string, string>;\n+}\n+\n+/**\n+ * Type of search result item.\n+ */\n+export interface SearchResultItem {\n+  /**\n+   * Item's unique ID.\n+   */\n+  uuid: string;\n+  /**\n+   * Item's name.\n+   */\n+  name?: Common.i18nString;\n+  /**\n+   * Item's description.\n+   */\n+  description?: Common.i18nString;\n+  /**\n+   * Item's status\n+   */\n+  status: string;\n+  /**\n+   * The date when item is created.\n+   */\n+  createdDate: string;\n+  /**\n+   * The last date when item is modified.\n+   */\n+  modifiedDate: string;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcyMTk2NQ=="}, "originalCommit": {"oid": "709165beb03861bc92e7d3e21ccb5be95c5b1145"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDEwNDg3OnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/src/Search.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNjo1MDozOFrOGfiYfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNjo1MDozOFrOGfiYfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcyMjM2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Type of item's display fields.\n          \n          \n            \n             * Details of an additional field to display as part of search results - server side configurable in collections.", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r435722364", "createdAt": "2020-06-05T06:50:38Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/src/Search.ts", "diffHunk": "@@ -58,13 +60,151 @@ export interface SearchParams {\n   dynaCollection?: string;\n }\n \n-export const isPagedSearchResultItem = (instance: unknown): boolean =>\n-  is<Common.PagedResult<SearchResult.Item>>(instance);\n+export enum ItemStatus {\n+  DRAFT = \"DRAFT\",\n+  LIVE = \"LIVE\",\n+  REJECTED = \"REJECTED\",\n+  MODERATING = \"MODERATING\",\n+  ARCHIVED = \"ARCHIVED\",\n+  SUSPENDED = \"SUSPENDED\",\n+  DELETED = \"DELETED\",\n+  REVIEW = \"REVIEW\",\n+  PERSONAL = \"PERSONAL\",\n+}\n+\n+/**\n+ * Type of item's display fields.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "709165beb03861bc92e7d3e21ccb5be95c5b1145"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDEwODkwOnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/src/Search.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNjo1MjoyOVrOGfia_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNjo1MjoyOVrOGfia_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcyMzAwNw==", "bodyText": "I imagine this should be over in Common as it's not unique to search results, and so later when working with Items we'll most likely use it again.", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r435723007", "createdAt": "2020-06-05T06:52:29Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/src/Search.ts", "diffHunk": "@@ -58,13 +60,151 @@ export interface SearchParams {\n   dynaCollection?: string;\n }\n \n-export const isPagedSearchResultItem = (instance: unknown): boolean =>\n-  is<Common.PagedResult<SearchResult.Item>>(instance);\n+export enum ItemStatus {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "709165beb03861bc92e7d3e21ccb5be95c5b1145"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDExNTQ3OnYy", "diffSide": "LEFT", "path": "oeq-ts-rest-api/test/search.test.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNjo1NTowOVrOGfie6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNjo1NTowOVrOGfie6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcyNDAxMQ==", "bodyText": "Could we please match the namespaced import style as done in the other tests?\nSo instead go with the:\nimport * as OEQ from '../src';\n\nAnd then below you'd do your calls for example with:\nOEQ.Search.search(TC.API_PATH)", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r435724011", "createdAt": "2020-06-05T06:55:09Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/test/search.test.ts", "diffHunk": "@@ -1,56 +1,39 @@\n import * as Search from '../src/Search';\n-import * as SearchResult from '../src/SearchResult';\n-import * as Common from '../src/Common';\n import * as Auth from '../src/Auth';\n import * as TC from './TestConfig';\n-import * as Errors from \"../src/Errors\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "709165beb03861bc92e7d3e21ccb5be95c5b1145"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDEyMTc3OnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/src/Search.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNjo1Nzo0NVrOGfiixg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNjo1Nzo0NVrOGfiixg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcyNDk5OA==", "bodyText": "We need to be thorough with the JSDoc. Here you're missing the @param statements.\nYou should just be able to copy across the definitely for apiBasePath from the others - to keep it consistent. And then add one for params.\nLong term - if we do this right - when we build it as it's own module, we can also publish the JSDocs for easy reference on a github pages setup. Further, the doco assists with IDE integrated doco.", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r435724998", "createdAt": "2020-06-05T06:57:45Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/src/Search.ts", "diffHunk": "@@ -58,13 +60,151 @@ export interface SearchParams {\n   dynaCollection?: string;\n }\n \n-export const isPagedSearchResultItem = (instance: unknown): boolean =>\n-  is<Common.PagedResult<SearchResult.Item>>(instance);\n+export enum ItemStatus {\n+  DRAFT = \"DRAFT\",\n+  LIVE = \"LIVE\",\n+  REJECTED = \"REJECTED\",\n+  MODERATING = \"MODERATING\",\n+  ARCHIVED = \"ARCHIVED\",\n+  SUSPENDED = \"SUSPENDED\",\n+  DELETED = \"DELETED\",\n+  REVIEW = \"REVIEW\",\n+  PERSONAL = \"PERSONAL\",\n+}\n+\n+/**\n+ * Type of item's display fields.\n+ */\n+export interface DisplayFields {\n+  /**\n+   * Type of a field.\n+   */\n+  type: string;\n+  /**\n+   * Name of a field.\n+   */\n+  name: Common.i18nString;\n+  /**\n+   * Html code of a field.\n+   */\n+  html: Common.i18nString;\n+}\n+\n+/**\n+ * Type of item's display options.\n+ */\n+export interface DisplayOptions {\n+  /**\n+   * The display mode for attachments when viewed from search result page.\n+   */\n+  attachmentType: string;\n+  /**\n+   * True if thumbnail is prevented from displaying.\n+   */\n+  disableThumbnail: boolean;\n+  /**\n+   * True if the 'show attachments' icon is enabled for standard search result pages.\n+   */\n+  standardOpen: boolean;\n+  /**\n+   * True if the 'show attachments' icon is enabled for integration screen result pages.\n+   */\n+  integrationOpen: boolean;\n+}\n+\n+/**\n+ * Type of search result attachment.\n+ */\n+export interface SearchResultAttachment {\n+  /**\n+   * Attachment type.\n+   */\n+  attachmentType: string;\n+  /**\n+   * The unique ID of an attachment.\n+   */\n+  id: string;\n+  /**\n+   * The description of an attachment.\n+   */\n+  description?: string;\n+  /**\n+   * True if an attachment can be previewed.\n+   */\n+  preview: boolean;\n+  /**\n+   * Links to the attachment.\n+   */\n+  links: Record<string, string>;\n+}\n+\n+/**\n+ * Type of search result item.\n+ */\n+export interface SearchResultItem {\n+  /**\n+   * Item's unique ID.\n+   */\n+  uuid: string;\n+  /**\n+   * Item's name.\n+   */\n+  name?: Common.i18nString;\n+  /**\n+   * Item's description.\n+   */\n+  description?: Common.i18nString;\n+  /**\n+   * Item's status\n+   */\n+  status: string;\n+  /**\n+   * The date when item is created.\n+   */\n+  createdDate: string;\n+  /**\n+   * The last date when item is modified.\n+   */\n+  modifiedDate: string;\n+  /**\n+   * The ID of item's collection.\n+   */\n+  collectionId: string;\n+  /**\n+   * The number of item's comments.\n+   */\n+  commentCount: number;\n+  /**\n+   * Item's attachments.\n+   */\n+  attachments: SearchResultAttachment[];\n+  /**\n+   * Item's thumbnail.\n+   */\n+  thumbnail: string;\n+  /**\n+   * Item's display fields.\n+   */\n+  displayFields: DisplayFields[];\n+  /**\n+   * Item's display options.\n+   */\n+  displayOptions?: DisplayOptions;\n+  /**\n+   * Links to an item.\n+   */\n+  links: Record<string, string>;\n+}\n+\n+const SEARCH2_API_PATH = '/search2';\n \n-export const search = (searchPath: string, params?: SearchParams): Promise<Common.PagedResult<SearchResult.Item>> => {\n-  return GET<Common.PagedResult<SearchResult.Item>>(\n-    searchPath,\n-    isPagedSearchResultItem,\n+/**\n+ * Communicate with REST endpoint 'search2' to do a search with specified search criteria.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "709165beb03861bc92e7d3e21ccb5be95c5b1145"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjExMjM5OnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/src/AxiosInstance.ts", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNToyNjoyOVrOGi3dfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNDowODoxNFrOGk06hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIxMzQzNg==", "bodyText": "The type of data should be T so I am concerned about if using any will break type safety.", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r439213436", "createdAt": "2020-06-12T05:26:29Z", "author": {"login": "PenghaiZhang"}, "path": "oeq-ts-rest-api/src/AxiosInstance.ts", "diffHunk": "@@ -17,17 +17,19 @@ const catchHandler = (error: AxiosError | Error): never => {\n export const GET = <T>(\n   path: string,\n   validator?: (data: unknown) => boolean,\n-  queryParams?: object\n+  queryParams?: object,\n+  transformer?: (data: T) => unknown,\n ): Promise<T> =>\n   axios\n     .get<T>(path, {params: queryParams, paramsSerializer: params => stringify(params)}, )\n     .then((response: AxiosResponse<T>) => {\n-      if (validator && !validator(response.data)) {\n+      const data: any = transformer? transformer(response.data) : response.data;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10b9b794294d4f158b5d2af672c0e227d8986d76"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg4MTE2Nw==", "bodyText": "I think we've got this the wrong way about.\nReally, it's the data returned from axios.get() which is potentially unknown. So maybe the axios.get<T>() should drop the generic and just do axios.get(). Then, the signature for the transformer should be:\n(data: unknown) => T\n\nBecause it's still a blind transform (i.e. the validator hasn't be run yet) you could argue the return should still be unknown. But I guess the argument is we're expecting it to return T and then we're simply validating it.\nSo how about we make the above two changes - that's the axios.get call, and the signature for the transformer?", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r439881167", "createdAt": "2020-06-14T23:59:25Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/src/AxiosInstance.ts", "diffHunk": "@@ -17,17 +17,19 @@ const catchHandler = (error: AxiosError | Error): never => {\n export const GET = <T>(\n   path: string,\n   validator?: (data: unknown) => boolean,\n-  queryParams?: object\n+  queryParams?: object,\n+  transformer?: (data: T) => unknown,\n ): Promise<T> =>\n   axios\n     .get<T>(path, {params: queryParams, paramsSerializer: params => stringify(params)}, )\n     .then((response: AxiosResponse<T>) => {\n-      if (validator && !validator(response.data)) {\n+      const data: any = transformer? transformer(response.data) : response.data;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIxMzQzNg=="}, "originalCommit": {"oid": "10b9b794294d4f158b5d2af672c0e227d8986d76"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIwMDYyNA==", "bodyText": "If I'm interpreting the previous comments for this line correctly right, this still needs to be updated\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  const data: any = transformer? transformer(response.data) : response.data;\n          \n          \n            \n                  const data: unknown = transformer? transformer(response.data) : response.data;", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r441200624", "createdAt": "2020-06-16T23:40:31Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/src/AxiosInstance.ts", "diffHunk": "@@ -17,17 +17,19 @@ const catchHandler = (error: AxiosError | Error): never => {\n export const GET = <T>(\n   path: string,\n   validator?: (data: unknown) => boolean,\n-  queryParams?: object\n+  queryParams?: object,\n+  transformer?: (data: T) => unknown,\n ): Promise<T> =>\n   axios\n     .get<T>(path, {params: queryParams, paramsSerializer: params => stringify(params)}, )\n     .then((response: AxiosResponse<T>) => {\n-      if (validator && !validator(response.data)) {\n+      const data: any = transformer? transformer(response.data) : response.data;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIxMzQzNg=="}, "originalCommit": {"oid": "10b9b794294d4f158b5d2af672c0e227d8986d76"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2ODg3MA==", "bodyText": "see PenghaiZhang#2 for another approach", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r441268870", "createdAt": "2020-06-17T04:08:14Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/src/AxiosInstance.ts", "diffHunk": "@@ -17,17 +17,19 @@ const catchHandler = (error: AxiosError | Error): never => {\n export const GET = <T>(\n   path: string,\n   validator?: (data: unknown) => boolean,\n-  queryParams?: object\n+  queryParams?: object,\n+  transformer?: (data: T) => unknown,\n ): Promise<T> =>\n   axios\n     .get<T>(path, {params: queryParams, paramsSerializer: params => stringify(params)}, )\n     .then((response: AxiosResponse<T>) => {\n-      if (validator && !validator(response.data)) {\n+      const data: any = transformer? transformer(response.data) : response.data;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIxMzQzNg=="}, "originalCommit": {"oid": "10b9b794294d4f158b5d2af672c0e227d8986d76"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjExNTYwOnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/src/Utils.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNToyODozMlrOGi3fjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwMDowNTo0NVrOGjgQWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIxMzk2NA==", "bodyText": "The returning type is unknown because the object is modified so it might be no longer of its original type. This is my understanding but I am not very sure if I am right.", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r439213964", "createdAt": "2020-06-12T05:28:32Z", "author": {"login": "PenghaiZhang"}, "path": "oeq-ts-rest-api/src/Utils.ts", "diffHunk": "@@ -0,0 +1,29 @@\n+import * as Lodash from \"lodash\";\n+\n+/**\n+ * Return a copied object of which types of specified fields are converted to Date.\n+ * @param fields Names of fields that need type conversion.\n+ * @param data The object to be processed. Nested objects will be processed, too.\n+ * @param cloneData True if deep clone is required.\n+ */\n+export const convertDateFields = <T>(fields: string[], data: T, cloneData: boolean): unknown => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10b9b794294d4f158b5d2af672c0e227d8986d76"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg4MTgxOA==", "bodyText": "I think that's right, but I'd also argue the input too is also unknown - or more so, does not have to be known consider we don't use any of the type information here - we've mostly resorted to metaprogramming.", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r439881818", "createdAt": "2020-06-15T00:05:45Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/src/Utils.ts", "diffHunk": "@@ -0,0 +1,29 @@\n+import * as Lodash from \"lodash\";\n+\n+/**\n+ * Return a copied object of which types of specified fields are converted to Date.\n+ * @param fields Names of fields that need type conversion.\n+ * @param data The object to be processed. Nested objects will be processed, too.\n+ * @param cloneData True if deep clone is required.\n+ */\n+export const convertDateFields = <T>(fields: string[], data: T, cloneData: boolean): unknown => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIxMzk2NA=="}, "originalCommit": {"oid": "10b9b794294d4f158b5d2af672c0e227d8986d76"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDUzMDUzOnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/src/AxiosInstance.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQyMzo1MjoxOFrOGjgLAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQyMzo1MjoxOFrOGjgLAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg4MDQ0OA==", "bodyText": "I think we're now at a point where this function needs some JSDoc to support future maintenance. Although it's primarily internal, I think it'll help with it's consumption going forward. Maybe something like:\n/**\n * Executes a HTTP GET for a given path.\n *\n * @param path The URL path for the target GET\n * @param validator A function to perform runtime type checking against the result - typically with typescript-is\n * @param queryParams The query parameters to send with the GET request\n * @param transformer A function which returns a copy of the raw data from the GET with any required values transformed - this should NOT mutate the input data (transforms should start on a copy/clone of the input)\n */", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r439880448", "createdAt": "2020-06-14T23:52:18Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/src/AxiosInstance.ts", "diffHunk": "@@ -16,17 +17,19 @@ const catchHandler = (error: AxiosError | Error): never => {\n export const GET = <T>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10b9b794294d4f158b5d2af672c0e227d8986d76"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDU0MTM2OnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/src/Utils.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwMDowNzozM1rOGjgQ_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwMDowNzozM1rOGjgQ_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg4MTk4MA==", "bodyText": "I'd suggest the target (data) should be the first param.\nWhy do we need an option around deep cloning?\nAhhh, now I see what's going on. You've kind of got two functions in one here. I suggest you split it out to something like:\nexport const convertDateFields = (input: unknown, fields: string[]): unknown => {\n  final inputClone = Lodash.cloneDeep(input);\n  // Note: Not sure if we need to validate the date - so the converter returning `undefined` might be fine...\n  convertFields(inputClone, fields, true, (value: string) => new Date( value));\n  return inputClone;\n}\n\n/**\n * Performs inplace conversion of specified fields with supplied converter.\n*/\nconst convertFields = (input: unknown, targetFields: string[], recursive: boolean, converter: (value: T) => R?): void =>\n  Object.entries( input ).forEach((field, value}) => {\n    if(typeof value === \"object\" && recursive) {\n      convertFields(value, targetFields, recursive, converter);\n    }\n    else {\n      targetFields.each( targetField => {\n        if(field === targetField) {\n          input[field] = converter(value);\n        }\n      });\n    }\n  }\nDisclaimer: I've just hacked this code together here - probably completely broken with syntax errors.\nI think there's a couple of benefits here: First makes for a cleaner interface on the converDateFields function, and second splits out a potentially reusable function - while also splitting out some recursive functionality (which is always wise to avoid accidents).", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r439881980", "createdAt": "2020-06-15T00:07:33Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/src/Utils.ts", "diffHunk": "@@ -0,0 +1,29 @@\n+import * as Lodash from \"lodash\";\n+\n+/**\n+ * Return a copied object of which types of specified fields are converted to Date.\n+ * @param fields Names of fields that need type conversion.\n+ * @param data The object to be processed. Nested objects will be processed, too.\n+ * @param cloneData True if deep clone is required.\n+ */\n+export const convertDateFields = <T>(fields: string[], data: T, cloneData: boolean): unknown => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10b9b794294d4f158b5d2af672c0e227d8986d76"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDU0MzM0OnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/src/Utils.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwMDoxMDo0NlrOGjgSHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwMDoxMDo0NlrOGjgSHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg4MjI3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Return a copied object of which types of specified fields are converted to Date.\n          \n          \n            \n             * @param fields Names of fields that need type conversion.\n          \n          \n            \n             * @param data The object to be processed. Nested objects will be processed, too.\n          \n          \n            \n             * @param cloneData True if deep clone is required.\n          \n          \n            \n             * Return a clone of the provided object with specified fields converted to type Date. A deep clone\n          \n          \n            \n             * will be undertaken, and so nested fields with matching names will also be converted.\n          \n          \n            \n             *\n          \n          \n            \n             * @param fields List of the names of fields to convert.\n          \n          \n            \n             * @param data The object to be processed.\n          \n          \n            \n             * @param cloneData True if deep clone is required.", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r439882271", "createdAt": "2020-06-15T00:10:46Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/src/Utils.ts", "diffHunk": "@@ -0,0 +1,29 @@\n+import * as Lodash from \"lodash\";\n+\n+/**\n+ * Return a copied object of which types of specified fields are converted to Date.\n+ * @param fields Names of fields that need type conversion.\n+ * @param data The object to be processed. Nested objects will be processed, too.\n+ * @param cloneData True if deep clone is required.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10b9b794294d4f158b5d2af672c0e227d8986d76"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODc2MzYxOnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/src/Utils.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMzozMDoxNFrOGkwkqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMzozMDoxNFrOGkwkqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE5NzczNw==", "bodyText": "Hold on, you've still got some of the specific date conversion logic here. This function should now be general purpose, and the logic goes down in the convertDateFields() function.\nThis line would now just be:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      (input as any)[field] = isNaN(Date.parse(value))? undefined: converter(value);\n          \n          \n            \n                      (input as any)[field] = converter(value);", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r441197737", "createdAt": "2020-06-16T23:30:14Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/src/Utils.ts", "diffHunk": "@@ -1,29 +1,40 @@\n import * as Lodash from \"lodash\";\n \n /**\n- * Return a copied object of which types of specified fields are converted to Date.\n- * @param fields Names of fields that need type conversion.\n- * @param data The object to be processed. Nested objects will be processed, too.\n- * @param cloneData True if deep clone is required.\n+ * Performs inplace conversion of specified fields with supplied converter.\n+ *\n+ * @param input The object to be processed.\n+ * @param targetFields List of the names of fields to convert.\n+ * @param recursive True if processing nested objects is required.\n+ * @param converter A function converting fields' type.\n  */\n-export const convertDateFields = <T>(fields: string[], data: T, cloneData: boolean): unknown => {\n-  const clonedData: T = cloneData? Lodash.cloneDeep(data) : data;\n-  const results: [string, any][] = Object.entries(clonedData);\n+const convertFields = <T, R>(input: unknown, targetFields: string[], recursive: boolean, converter: (value: T) => R): void => {\n+  const entries: [string, any][] = Object.entries(input as any);\n \n-  results.forEach(([key, value]) => {\n-    if(typeof value === \"object\"){\n-      // Don't need to deep clone nested objects again.\n-      convertDateFields(fields, value, false);\n+  entries.forEach(([field, value]) => {\n+    if(typeof value === \"object\" && recursive) {\n+      convertFields(value, targetFields, recursive, converter);\n     }\n-    else{\n-      fields.forEach(field => {\n-        // Convert when a date string can be parsed to Date.\n-        if(field === key && !isNaN(Date.parse(value))){\n-          (clonedData as any)[field] = new Date(value)\n+    else {\n+      targetFields.forEach( targetField => {\n+        if(field === targetField) {\n+          (input as any)[field] = isNaN(Date.parse(value))? undefined: converter(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76f12af6ce9644648ff842d4db737ddd88cdd5b0"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODc3MTM5OnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/src/Utils.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMzozNDozMFrOGkwpdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMzozNDozMFrOGkwpdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE5ODk2Ng==", "bodyText": "I fear this block has now become a bit unreadable and unwieldly. But we can tidy it up with filter I feel. e.g.\ntargetFields\n  .filter(targetField => targetField === field)\n  .forEach(field => (input as any)[field] = converter(value));", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r441198966", "createdAt": "2020-06-16T23:34:30Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/src/Utils.ts", "diffHunk": "@@ -1,29 +1,40 @@\n import * as Lodash from \"lodash\";\n \n /**\n- * Return a copied object of which types of specified fields are converted to Date.\n- * @param fields Names of fields that need type conversion.\n- * @param data The object to be processed. Nested objects will be processed, too.\n- * @param cloneData True if deep clone is required.\n+ * Performs inplace conversion of specified fields with supplied converter.\n+ *\n+ * @param input The object to be processed.\n+ * @param targetFields List of the names of fields to convert.\n+ * @param recursive True if processing nested objects is required.\n+ * @param converter A function converting fields' type.\n  */\n-export const convertDateFields = <T>(fields: string[], data: T, cloneData: boolean): unknown => {\n-  const clonedData: T = cloneData? Lodash.cloneDeep(data) : data;\n-  const results: [string, any][] = Object.entries(clonedData);\n+const convertFields = <T, R>(input: unknown, targetFields: string[], recursive: boolean, converter: (value: T) => R): void => {\n+  const entries: [string, any][] = Object.entries(input as any);\n \n-  results.forEach(([key, value]) => {\n-    if(typeof value === \"object\"){\n-      // Don't need to deep clone nested objects again.\n-      convertDateFields(fields, value, false);\n+  entries.forEach(([field, value]) => {\n+    if(typeof value === \"object\" && recursive) {\n+      convertFields(value, targetFields, recursive, converter);\n     }\n-    else{\n-      fields.forEach(field => {\n-        // Convert when a date string can be parsed to Date.\n-        if(field === key && !isNaN(Date.parse(value))){\n-          (clonedData as any)[field] = new Date(value)\n+    else {\n+      targetFields.forEach( targetField => {\n+        if(field === targetField) {\n+          (input as any)[field] = isNaN(Date.parse(value))? undefined: converter(value);\n         }\n-      })\n+      });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76f12af6ce9644648ff842d4db737ddd88cdd5b0"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODc5NTkzOnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/src/Utils.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMzo0ODoxOFrOGkw4Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMzo0ODoxOFrOGkw4Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIwMjc3MQ==", "bodyText": "Could we avoid importing all of lodash for one function?\nInstead using\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import * as Lodash from \"lodash\";\n          \n          \n            \n            import { cloneDeep } from \"lodash\";\n          \n      \n    \n    \n  \n\nwith https://github.com/lodash/babel-plugin-lodash\nor\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import * as Lodash from \"lodash\";\n          \n          \n            \n            import * as cloneDeep from \"lodash/cloneDeep\";", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r441202771", "createdAt": "2020-06-16T23:48:18Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/src/Utils.ts", "diffHunk": "@@ -0,0 +1,40 @@\n+import * as Lodash from \"lodash\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76f12af6ce9644648ff842d4db737ddd88cdd5b0"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODc5ODExOnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/src/Search.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMzo0OTozM1rOGkw5pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDozMDoxMFrOGkxlsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIwMzExMQ==", "bodyText": "destructuring is inconsistent\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import { is } from 'typescript-is';\n          \n          \n            \n            import {GET} from './AxiosInstance';\n          \n          \n            \n            import { is } from 'typescript-is';\n          \n          \n            \n            import { GET } from './AxiosInstance';", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r441203111", "createdAt": "2020-06-16T23:49:33Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/src/Search.ts", "diffHunk": "@@ -0,0 +1,203 @@\n+import * as Common from './Common';\n+import { is } from 'typescript-is';\n+import {GET} from './AxiosInstance';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76f12af6ce9644648ff842d4db737ddd88cdd5b0"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxNDM4NQ==", "bodyText": "Yeah, really need to get this setup with linting and formatting. Just with the plan to move to own repo I want to wait until then rather than messing things up here. So, I guess it's manual for now - which I do by manually triggering Prettier in my IDE as I work.", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r441214385", "createdAt": "2020-06-17T00:30:10Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/src/Search.ts", "diffHunk": "@@ -0,0 +1,203 @@\n+import * as Common from './Common';\n+import { is } from 'typescript-is';\n+import {GET} from './AxiosInstance';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIwMzExMQ=="}, "originalCommit": {"oid": "76f12af6ce9644648ff842d4db737ddd88cdd5b0"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODg0NDA2OnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/src/AxiosInstance.ts", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDoxNDozNFrOGkxVRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzozNzo0NVrOGlGI_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMDE4MA==", "bodyText": "@PenghaiZhang cast could be avoided by using the type predicate to narrow unknown automatically before returning, with:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (validator && !validator(data)) {\n          \n          \n            \n                    // If a validator is provided, but it fails to validate the provided data...\n          \n          \n            \n                    throw new Error('Data format mismatch with data received from server.');\n          \n          \n            \n                  }\n          \n          \n            \n            \n          \n          \n            \n                  return response.data;\n          \n          \n            \n                  return data;\n          \n          \n            \n                  if (validator) {\n          \n          \n            \n                    if (validator(data)) {\n          \n          \n            \n                      return data;\n          \n          \n            \n                    }\n          \n          \n            \n                    throw new Error('Data format mismatch with data received from server.');\n          \n          \n            \n                  }\n          \n          \n            \n            \n          \n          \n            \n                  return data;", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r441210180", "createdAt": "2020-06-17T00:14:34Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/src/AxiosInstance.ts", "diffHunk": "@@ -17,17 +17,19 @@ const catchHandler = (error: AxiosError | Error): never => {\n export const GET = <T>(\n   path: string,\n   validator?: (data: unknown) => boolean,\n-  queryParams?: object\n+  queryParams?: object,\n+  transformer?: (data: T) => unknown,\n ): Promise<T> =>\n   axios\n     .get<T>(path, {params: queryParams, paramsSerializer: params => stringify(params)}, )\n     .then((response: AxiosResponse<T>) => {\n-      if (validator && !validator(response.data)) {\n+      const data: any = transformer? transformer(response.data) : response.data;\n+      if (validator && !validator(data)) {\n         // If a validator is provided, but it fails to validate the provided data...\n         throw new Error('Data format mismatch with data received from server.');\n       }\n \n-      return response.data;\n+      return data;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10b9b794294d4f158b5d2af672c0e227d8986d76"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMTAxMw==", "bodyText": "this may also need a change to the type for validator see #1784 (review)", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r441211013", "createdAt": "2020-06-17T00:17:36Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/src/AxiosInstance.ts", "diffHunk": "@@ -17,17 +17,19 @@ const catchHandler = (error: AxiosError | Error): never => {\n export const GET = <T>(\n   path: string,\n   validator?: (data: unknown) => boolean,\n-  queryParams?: object\n+  queryParams?: object,\n+  transformer?: (data: T) => unknown,\n ): Promise<T> =>\n   axios\n     .get<T>(path, {params: queryParams, paramsSerializer: params => stringify(params)}, )\n     .then((response: AxiosResponse<T>) => {\n-      if (validator && !validator(response.data)) {\n+      const data: any = transformer? transformer(response.data) : response.data;\n+      if (validator && !validator(data)) {\n         // If a validator is provided, but it fails to validate the provided data...\n         throw new Error('Data format mismatch with data received from server.');\n       }\n \n-      return response.data;\n+      return data;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMDE4MA=="}, "originalCommit": {"oid": "10b9b794294d4f158b5d2af672c0e227d8986d76"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMTI4Mw==", "bodyText": "This function is expected to return a Promise<T>. As data is unknown, return data  without casting may not be OK.\nI can see this error Type unknown is not assignable to type T.", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r441211283", "createdAt": "2020-06-17T00:18:36Z", "author": {"login": "PenghaiZhang"}, "path": "oeq-ts-rest-api/src/AxiosInstance.ts", "diffHunk": "@@ -17,17 +17,19 @@ const catchHandler = (error: AxiosError | Error): never => {\n export const GET = <T>(\n   path: string,\n   validator?: (data: unknown) => boolean,\n-  queryParams?: object\n+  queryParams?: object,\n+  transformer?: (data: T) => unknown,\n ): Promise<T> =>\n   axios\n     .get<T>(path, {params: queryParams, paramsSerializer: params => stringify(params)}, )\n     .then((response: AxiosResponse<T>) => {\n-      if (validator && !validator(response.data)) {\n+      const data: any = transformer? transformer(response.data) : response.data;\n+      if (validator && !validator(data)) {\n         // If a validator is provided, but it fails to validate the provided data...\n         throw new Error('Data format mismatch with data received from server.');\n       }\n \n-      return response.data;\n+      return data;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMDE4MA=="}, "originalCommit": {"oid": "10b9b794294d4f158b5d2af672c0e227d8986d76"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMzk0NA==", "bodyText": "That is closer to what we want, if the type isn't validated it is unknown.\n\ud83e\udd14 the return type may need to be made conditional on the presence of validator", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r441213944", "createdAt": "2020-06-17T00:28:24Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/src/AxiosInstance.ts", "diffHunk": "@@ -17,17 +17,19 @@ const catchHandler = (error: AxiosError | Error): never => {\n export const GET = <T>(\n   path: string,\n   validator?: (data: unknown) => boolean,\n-  queryParams?: object\n+  queryParams?: object,\n+  transformer?: (data: T) => unknown,\n ): Promise<T> =>\n   axios\n     .get<T>(path, {params: queryParams, paramsSerializer: params => stringify(params)}, )\n     .then((response: AxiosResponse<T>) => {\n-      if (validator && !validator(response.data)) {\n+      const data: any = transformer? transformer(response.data) : response.data;\n+      if (validator && !validator(data)) {\n         // If a validator is provided, but it fails to validate the provided data...\n         throw new Error('Data format mismatch with data received from server.');\n       }\n \n-      return response.data;\n+      return data;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMDE4MA=="}, "originalCommit": {"oid": "10b9b794294d4f158b5d2af672c0e227d8986d76"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyODI4Ng==", "bodyText": "Okay, we had more of a play with this but it's getting a bit confusing. Perhaps what we've got is good enough for now, and we can try and improve it later. Or if you have time @ChristianMurphy  maybe once this branch is merged in you can have a hack at it then.", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r441228286", "createdAt": "2020-06-17T01:24:57Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/src/AxiosInstance.ts", "diffHunk": "@@ -17,17 +17,19 @@ const catchHandler = (error: AxiosError | Error): never => {\n export const GET = <T>(\n   path: string,\n   validator?: (data: unknown) => boolean,\n-  queryParams?: object\n+  queryParams?: object,\n+  transformer?: (data: T) => unknown,\n ): Promise<T> =>\n   axios\n     .get<T>(path, {params: queryParams, paramsSerializer: params => stringify(params)}, )\n     .then((response: AxiosResponse<T>) => {\n-      if (validator && !validator(response.data)) {\n+      const data: any = transformer? transformer(response.data) : response.data;\n+      if (validator && !validator(data)) {\n         // If a validator is provided, but it fails to validate the provided data...\n         throw new Error('Data format mismatch with data received from server.');\n       }\n \n-      return response.data;\n+      return data;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMDE4MA=="}, "originalCommit": {"oid": "10b9b794294d4f158b5d2af672c0e227d8986d76"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2MTY3MQ==", "bodyText": "@edalex-ian @PenghaiZhang PenghaiZhang#2", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r441261671", "createdAt": "2020-06-17T03:36:46Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/src/AxiosInstance.ts", "diffHunk": "@@ -17,17 +17,19 @@ const catchHandler = (error: AxiosError | Error): never => {\n export const GET = <T>(\n   path: string,\n   validator?: (data: unknown) => boolean,\n-  queryParams?: object\n+  queryParams?: object,\n+  transformer?: (data: T) => unknown,\n ): Promise<T> =>\n   axios\n     .get<T>(path, {params: queryParams, paramsSerializer: params => stringify(params)}, )\n     .then((response: AxiosResponse<T>) => {\n-      if (validator && !validator(response.data)) {\n+      const data: any = transformer? transformer(response.data) : response.data;\n+      if (validator && !validator(data)) {\n         // If a validator is provided, but it fails to validate the provided data...\n         throw new Error('Data format mismatch with data received from server.');\n       }\n \n-      return response.data;\n+      return data;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMDE4MA=="}, "originalCommit": {"oid": "10b9b794294d4f158b5d2af672c0e227d8986d76"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMwNjIyMA==", "bodyText": "Okay, we've had a look but are concerned about how that supports all the different possible permutations. e.g. What If I want a path, no validator, but params; or, path, no validator, maybe params, and a transformer. It's just getting a bit crazy, and we need to merge this one in so as not to block further work.\nSo let's proceed to merge for now, and then maybe once in your can repoint your PR and show us how all the permutations can be support cleanly... Sorry we can't accommodate just now, but we definitely tried.", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r441306220", "createdAt": "2020-06-17T06:21:49Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/src/AxiosInstance.ts", "diffHunk": "@@ -17,17 +17,19 @@ const catchHandler = (error: AxiosError | Error): never => {\n export const GET = <T>(\n   path: string,\n   validator?: (data: unknown) => boolean,\n-  queryParams?: object\n+  queryParams?: object,\n+  transformer?: (data: T) => unknown,\n ): Promise<T> =>\n   axios\n     .get<T>(path, {params: queryParams, paramsSerializer: params => stringify(params)}, )\n     .then((response: AxiosResponse<T>) => {\n-      if (validator && !validator(response.data)) {\n+      const data: any = transformer? transformer(response.data) : response.data;\n+      if (validator && !validator(data)) {\n         // If a validator is provided, but it fails to validate the provided data...\n         throw new Error('Data format mismatch with data received from server.');\n       }\n \n-      return response.data;\n+      return data;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMDE4MA=="}, "originalCommit": {"oid": "10b9b794294d4f158b5d2af672c0e227d8986d76"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU1MTEwMQ==", "bodyText": "but are concerned about how that supports all the different possible permutations. e.g. What If I want a path, no validator, but params; or, path, no validator, maybe params, and a transformer\n\nI'm not sure I follow this, params are positional.\nin the current implementation\n(\n  path: string,\n  validator?: (data: unknown) => boolean,\n  queryParams?: object,\n  transformer?: (data: T) => unknown,\n)\n\nThe parameters must be added in order (path, path and validator, path and validator and query params, or path and validator and query params and transformer).\nIt isn't possible to skip validator and go straight to transformer with this syntax.\nexport function GET<T>(path: string): Promise<unknown>;\nexport function GET<T>(\n  path: string,\n  validator: (data: unknown) => data is T,\n  queryParams?: object,\n  transformer?: (data: unknown) => T\n): Promise<T>;\ncovers all possible combinations.", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r441551101", "createdAt": "2020-06-17T13:37:45Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/src/AxiosInstance.ts", "diffHunk": "@@ -17,17 +17,19 @@ const catchHandler = (error: AxiosError | Error): never => {\n export const GET = <T>(\n   path: string,\n   validator?: (data: unknown) => boolean,\n-  queryParams?: object\n+  queryParams?: object,\n+  transformer?: (data: T) => unknown,\n ): Promise<T> =>\n   axios\n     .get<T>(path, {params: queryParams, paramsSerializer: params => stringify(params)}, )\n     .then((response: AxiosResponse<T>) => {\n-      if (validator && !validator(response.data)) {\n+      const data: any = transformer? transformer(response.data) : response.data;\n+      if (validator && !validator(data)) {\n         // If a validator is provided, but it fails to validate the provided data...\n         throw new Error('Data format mismatch with data received from server.');\n       }\n \n-      return response.data;\n+      return data;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMDE4MA=="}, "originalCommit": {"oid": "10b9b794294d4f158b5d2af672c0e227d8986d76"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODg0ODU1OnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/src/AxiosInstance.ts", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDoxNjo1N1rOGkxX1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNDowNzoxOVrOGk05rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMDgzOA==", "bodyText": "to ensure validator is a predicate use\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              validator?: (data: unknown) => boolean,\n          \n          \n            \n              validator?: (data: unknown) => data is T,", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r441210838", "createdAt": "2020-06-17T00:16:57Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/src/AxiosInstance.ts", "diffHunk": "@@ -13,20 +14,30 @@ const catchHandler = (error: AxiosError | Error): never => {\n   throw repackageError(error);\n };\n \n+/**\n+ * Executes a HTTP GET for a given path.\n+ *\n+ * @param path The URL path for the target GET\n+ * @param validator A function to perform runtime type checking against the result - typically with typescript-is\n+ * @param queryParams The query parameters to send with the GET request\n+ * @param transformer A function which returns a copy of the raw data from the GET with any required values transformed - this should NOT mutate the input data (transforms should start on a copy/clone of the input)\n+ */\n export const GET = <T>(\n   path: string,\n   validator?: (data: unknown) => boolean,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76f12af6ce9644648ff842d4db737ddd88cdd5b0"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMTMxNw==", "bodyText": "see: https://www.typescriptlang.org/docs/handbook/advanced-types.html#using-type-predicates for more information on predicates", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r441211317", "createdAt": "2020-06-17T00:18:46Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/src/AxiosInstance.ts", "diffHunk": "@@ -13,20 +14,30 @@ const catchHandler = (error: AxiosError | Error): never => {\n   throw repackageError(error);\n };\n \n+/**\n+ * Executes a HTTP GET for a given path.\n+ *\n+ * @param path The URL path for the target GET\n+ * @param validator A function to perform runtime type checking against the result - typically with typescript-is\n+ * @param queryParams The query parameters to send with the GET request\n+ * @param transformer A function which returns a copy of the raw data from the GET with any required values transformed - this should NOT mutate the input data (transforms should start on a copy/clone of the input)\n+ */\n export const GET = <T>(\n   path: string,\n   validator?: (data: unknown) => boolean,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMDgzOA=="}, "originalCommit": {"oid": "76f12af6ce9644648ff842d4db737ddd88cdd5b0"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMzcwNw==", "bodyText": "Hold on though. This is not just meant to be a simple validator or type predicate. This is so that we can parse in a function that under the hood will do runtime validation via typescript-is.", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r441213707", "createdAt": "2020-06-17T00:27:33Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/src/AxiosInstance.ts", "diffHunk": "@@ -13,20 +14,30 @@ const catchHandler = (error: AxiosError | Error): never => {\n   throw repackageError(error);\n };\n \n+/**\n+ * Executes a HTTP GET for a given path.\n+ *\n+ * @param path The URL path for the target GET\n+ * @param validator A function to perform runtime type checking against the result - typically with typescript-is\n+ * @param queryParams The query parameters to send with the GET request\n+ * @param transformer A function which returns a copy of the raw data from the GET with any required values transformed - this should NOT mutate the input data (transforms should start on a copy/clone of the input)\n+ */\n export const GET = <T>(\n   path: string,\n   validator?: (data: unknown) => boolean,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMDgzOA=="}, "originalCommit": {"oid": "76f12af6ce9644648ff842d4db737ddd88cdd5b0"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyNDMxMg==", "bodyText": "Ahhh, okay you're talking about the typeof predicate. My bad... Pondering... \ud83e\udd14", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r441224312", "createdAt": "2020-06-17T01:08:47Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/src/AxiosInstance.ts", "diffHunk": "@@ -13,20 +14,30 @@ const catchHandler = (error: AxiosError | Error): never => {\n   throw repackageError(error);\n };\n \n+/**\n+ * Executes a HTTP GET for a given path.\n+ *\n+ * @param path The URL path for the target GET\n+ * @param validator A function to perform runtime type checking against the result - typically with typescript-is\n+ * @param queryParams The query parameters to send with the GET request\n+ * @param transformer A function which returns a copy of the raw data from the GET with any required values transformed - this should NOT mutate the input data (transforms should start on a copy/clone of the input)\n+ */\n export const GET = <T>(\n   path: string,\n   validator?: (data: unknown) => boolean,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMDgzOA=="}, "originalCommit": {"oid": "76f12af6ce9644648ff842d4db737ddd88cdd5b0"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2ODY1Mg==", "bodyText": "See PenghaiZhang#2 for how this would work", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r441268652", "createdAt": "2020-06-17T04:07:19Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/src/AxiosInstance.ts", "diffHunk": "@@ -13,20 +14,30 @@ const catchHandler = (error: AxiosError | Error): never => {\n   throw repackageError(error);\n };\n \n+/**\n+ * Executes a HTTP GET for a given path.\n+ *\n+ * @param path The URL path for the target GET\n+ * @param validator A function to perform runtime type checking against the result - typically with typescript-is\n+ * @param queryParams The query parameters to send with the GET request\n+ * @param transformer A function which returns a copy of the raw data from the GET with any required values transformed - this should NOT mutate the input data (transforms should start on a copy/clone of the input)\n+ */\n export const GET = <T>(\n   path: string,\n   validator?: (data: unknown) => boolean,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMDgzOA=="}, "originalCommit": {"oid": "76f12af6ce9644648ff842d4db737ddd88cdd5b0"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTA2NTM4OnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/src/AxiosInstance.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMjoyNjo1N1rOGkzbpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNDowNzoyN1rOGk05yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI0NDU4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import {stringify} from 'query-string';\n          \n          \n            \n            import { stringify } from 'query-string';", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r441244581", "createdAt": "2020-06-17T02:26:57Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/src/AxiosInstance.ts", "diffHunk": "@@ -2,6 +2,7 @@ import Axios, { AxiosResponse, AxiosError } from 'axios';\n import axiosCookieJarSupport from 'axios-cookiejar-support';\n import * as tough from 'tough-cookie';\n import { repackageError } from './Errors';\n+import {stringify} from 'query-string';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a19c055c6abe30e3439f480e7ce174a68f44078"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2ODY4MQ==", "bodyText": "also resolved in PenghaiZhang#2", "url": "https://github.com/openequella/openEQUELLA/pull/1784#discussion_r441268681", "createdAt": "2020-06-17T04:07:27Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/src/AxiosInstance.ts", "diffHunk": "@@ -2,6 +2,7 @@ import Axios, { AxiosResponse, AxiosError } from 'axios';\n import axiosCookieJarSupport from 'axios-cookiejar-support';\n import * as tough from 'tough-cookie';\n import { repackageError } from './Errors';\n+import {stringify} from 'query-string';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI0NDU4MQ=="}, "originalCommit": {"oid": "0a19c055c6abe30e3439f480e7ce174a68f44078"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1373, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}