{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4NDI1MTU3", "number": 2298, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNTo1NzoyN1rOEkYKig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMDoyMTo1OVrOEkxRag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NTgwMTA2OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/SearchResult.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNTo1NzoyN1rOHTSg0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNTo1NzoyN1rOHTSg0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTk4ODMwNw==", "bodyText": "Just fixing a typo.", "url": "https://github.com/openequella/openEQUELLA/pull/2298#discussion_r489988307", "createdAt": "2020-09-17T05:57:27Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/SearchResult.tsx", "diffHunk": "@@ -79,34 +80,51 @@ const useStyles = makeStyles((theme: Theme) => {\n       color: theme.palette.secondary.main,\n       borderRadius: \"50%\",\n     },\n+    highlight: {\n+      color: theme.palette.secondary.main,\n+    },\n   };\n });\n \n+export interface SearchResultProps {\n+  /**\n+   * The details of the items to display.\n+   */\n+  item: OEQ.Search.SearchResultItem;\n+\n+  /**\n+   * The list of words which should be highlighted.\n+   */\n+  highlights: string[];\n+}\n+\n export default function SearchResult({\n-  name,\n-  version,\n-  uuid,\n-  description,\n-  displayFields,\n-  modifiedDate,\n-  status,\n-  displayOptions,\n-  attachments,\n-  keywordFoundInAttachment,\n-  links,\n-}: OEQ.Search.SearchResultItem) {\n+  item: {\n+    name,\n+    version,\n+    uuid,\n+    description,\n+    displayFields,\n+    modifiedDate,\n+    status,\n+    displayOptions,\n+    attachments,\n+    keywordFoundInAttachment,\n+  },\n+  highlights,\n+}: SearchResultProps) {\n   const classes = useStyles();\n \n   const searchResultStrings = languageStrings.searchpage.searchresult;\n \n-  const [attachExapanded, setAttachExpanded] = React.useState(\n+  const [attachExpanded, setAttachExpanded] = React.useState(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a03d923898663962d7ad456ae6d1b7754819f6a"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTgwMDM3OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__stories__/search/SearchResult.stories.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzoyMzowNVrOHT4v9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzo0NToyOVrOHT5Kbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYxNDc3NA==", "bodyText": "Is it possible to type args?", "url": "https://github.com/openequella/openEQUELLA/pull/2298#discussion_r490614774", "createdAt": "2020-09-17T23:23:05Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/__stories__/search/SearchResult.stories.tsx", "diffHunk": "@@ -15,131 +15,64 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+import type { Story } from \"@storybook/react\";\n import * as React from \"react\";\n import * as mockData from \"../../__mocks__/searchresult_mock_data\";\n-import SearchResult from \"../../tsrc/search/components/SearchResult\";\n-import { boolean, number, object, text } from \"@storybook/addon-knobs\";\n+import SearchResult, {\n+  SearchResultProps,\n+} from \"../../tsrc/search/components/SearchResult\";\n \n export default {\n   title: \"Search/SearchResult\",\n   component: SearchResult,\n };\n-const defaultItemName = \"Item Name\";\n-const defaultItemDescription = \"Item Description\";\n \n-export const BasicSearchResultComponent = () => (\n-  <SearchResult\n-    name={text(\"name\", mockData.basicSearchObj.name || defaultItemName)}\n-    version={number(\"version\", mockData.basicSearchObj.version)}\n-    uuid={text(\"uuid\", mockData.basicSearchObj.uuid)}\n-    description={text(\n-      \"description\",\n-      mockData.basicSearchObj.description || defaultItemDescription\n-    )}\n-    displayFields={object(\"display fields\", [\n-      ...mockData.basicSearchObj.displayFields,\n-    ])}\n-    modifiedDate={object(\"modified date\", mockData.basicSearchObj.modifiedDate)}\n-    createdDate={object(\"created date\", mockData.basicSearchObj.createdDate)}\n-    status={text(\"item status\", mockData.basicSearchObj.status)}\n-    displayOptions={object(\n-      \"display options\",\n-      mockData.basicSearchObj.displayOptions\n-    )}\n-    attachments={object(\"attachments\", [\n-      ...mockData.basicSearchObj.attachments,\n-    ])}\n-    links={object(\"links\", mockData.basicSearchObj.links)}\n-    collectionId={text(\"collection ID\", mockData.basicSearchObj.collectionId)}\n-    commentCount={number(\"comment count\", mockData.basicSearchObj.commentCount)}\n-    thumbnail={text(\"thumbnail\", mockData.basicSearchObj.thumbnail)}\n-    keywordFoundInAttachment={boolean(\n-      \"keywordFoundInAttachment\",\n-      mockData.basicSearchObj.keywordFoundInAttachment\n-    )}\n-  />\n+export const BasicSearchResult: Story<SearchResultProps> = (args) => (\n+  <SearchResult {...args} />\n );\n+BasicSearchResult.args = {\n+  item: {\n+    ...mockData.basicSearchObj,\n+  },\n+  highlights: [],\n+};\n+\n+export const AttachmentSearchResult: Story<SearchResultProps> = (args) => (", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a03d923898663962d7ad456ae6d1b7754819f6a"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYyMTU1MA==", "bodyText": "It's possible, but kind of redundant and doesn't seem the idiomatic way. I guess that's also because the type of args is that of the Story generic and would just look like:\nconst AttachmentSearchResult: Story<SearchResultProps> = (args: SearchResultProps) => (", "url": "https://github.com/openequella/openEQUELLA/pull/2298#discussion_r490621550", "createdAt": "2020-09-17T23:45:29Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__stories__/search/SearchResult.stories.tsx", "diffHunk": "@@ -15,131 +15,64 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+import type { Story } from \"@storybook/react\";\n import * as React from \"react\";\n import * as mockData from \"../../__mocks__/searchresult_mock_data\";\n-import SearchResult from \"../../tsrc/search/components/SearchResult\";\n-import { boolean, number, object, text } from \"@storybook/addon-knobs\";\n+import SearchResult, {\n+  SearchResultProps,\n+} from \"../../tsrc/search/components/SearchResult\";\n \n export default {\n   title: \"Search/SearchResult\",\n   component: SearchResult,\n };\n-const defaultItemName = \"Item Name\";\n-const defaultItemDescription = \"Item Description\";\n \n-export const BasicSearchResultComponent = () => (\n-  <SearchResult\n-    name={text(\"name\", mockData.basicSearchObj.name || defaultItemName)}\n-    version={number(\"version\", mockData.basicSearchObj.version)}\n-    uuid={text(\"uuid\", mockData.basicSearchObj.uuid)}\n-    description={text(\n-      \"description\",\n-      mockData.basicSearchObj.description || defaultItemDescription\n-    )}\n-    displayFields={object(\"display fields\", [\n-      ...mockData.basicSearchObj.displayFields,\n-    ])}\n-    modifiedDate={object(\"modified date\", mockData.basicSearchObj.modifiedDate)}\n-    createdDate={object(\"created date\", mockData.basicSearchObj.createdDate)}\n-    status={text(\"item status\", mockData.basicSearchObj.status)}\n-    displayOptions={object(\n-      \"display options\",\n-      mockData.basicSearchObj.displayOptions\n-    )}\n-    attachments={object(\"attachments\", [\n-      ...mockData.basicSearchObj.attachments,\n-    ])}\n-    links={object(\"links\", mockData.basicSearchObj.links)}\n-    collectionId={text(\"collection ID\", mockData.basicSearchObj.collectionId)}\n-    commentCount={number(\"comment count\", mockData.basicSearchObj.commentCount)}\n-    thumbnail={text(\"thumbnail\", mockData.basicSearchObj.thumbnail)}\n-    keywordFoundInAttachment={boolean(\n-      \"keywordFoundInAttachment\",\n-      mockData.basicSearchObj.keywordFoundInAttachment\n-    )}\n-  />\n+export const BasicSearchResult: Story<SearchResultProps> = (args) => (\n+  <SearchResult {...args} />\n );\n+BasicSearchResult.args = {\n+  item: {\n+    ...mockData.basicSearchObj,\n+  },\n+  highlights: [],\n+};\n+\n+export const AttachmentSearchResult: Story<SearchResultProps> = (args) => (", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYxNDc3NA=="}, "originalCommit": {"oid": "4a03d923898663962d7ad456ae6d1b7754819f6a"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTgwNDgxOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/components/SearchResult.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzoyNToxMlrOHT4yiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzo0Njo0NVrOHT5LxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYxNTQzNQ==", "bodyText": "If you are using spread here with no modifiers, surely you can just use it directly?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      item={{ ...itemResult }}\n          \n          \n            \n                      item={ itemResult }", "url": "https://github.com/openequella/openEQUELLA/pull/2298#discussion_r490615435", "createdAt": "2020-09-17T23:25:12Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/components/SearchResult.test.tsx", "diffHunk": "@@ -29,7 +29,11 @@ describe(\"<SearchResult/>\", () => {\n     return render(\n       //This needs to be wrapped inside a BrowserRouter, to prevent an `Invariant failed: You should not use <Link> outside a <Router>` error  because of the <Link/> tag within SearchResult\n       <BrowserRouter>\n-        <SearchResult {...itemResult} key={itemResult.uuid} />\n+        <SearchResult\n+          key={itemResult.uuid}\n+          item={{ ...itemResult }}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a03d923898663962d7ad456ae6d1b7754819f6a"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYyMTg5Mg==", "bodyText": "hmmmm... \ud83e\udd14\nI originally saw this as a copy of the object, but it was more so spreading it so that it's populate the old props. So yes, with the new props I could happily just drop it in. I'll tweak it.", "url": "https://github.com/openequella/openEQUELLA/pull/2298#discussion_r490621892", "createdAt": "2020-09-17T23:46:45Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/components/SearchResult.test.tsx", "diffHunk": "@@ -29,7 +29,11 @@ describe(\"<SearchResult/>\", () => {\n     return render(\n       //This needs to be wrapped inside a BrowserRouter, to prevent an `Invariant failed: You should not use <Link> outside a <Router>` error  because of the <Link/> tag within SearchResult\n       <BrowserRouter>\n-        <SearchResult {...itemResult} key={itemResult.uuid} />\n+        <SearchResult\n+          key={itemResult.uuid}\n+          item={{ ...itemResult }}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYxNTQzNQ=="}, "originalCommit": {"oid": "4a03d923898663962d7ad456ae6d1b7754819f6a"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTgxMTg0OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/util/TextUtils.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzoyODozN1rOHT42aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzo0OToyOFrOHT5OlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYxNjQyNw==", "bodyText": "Do we need tests for the functions in this file?", "url": "https://github.com/openequella/openEQUELLA/pull/2298#discussion_r490616427", "createdAt": "2020-09-17T23:28:37Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/util/TextUtils.ts", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+/**\n+ * Based on work from com.tle.web.sections.render.TextUtils\n+ */\n+\n+const removeNonWordCharacters = (highlight: string): string =>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a03d923898663962d7ad456ae6d1b7754819f6a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYyMjYxMw==", "bodyText": "There is some coverage of this due to the tests in TextUtils.test.ts. True it's not exhaustive, but seeing this was a conversion of the old I think it'll do for now.\nIf there were test for the Java, I would've converted this too. But to derive all the cases this was attempting to address - without tests or doco - was not justified effort.", "url": "https://github.com/openequella/openEQUELLA/pull/2298#discussion_r490622613", "createdAt": "2020-09-17T23:49:28Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/util/TextUtils.ts", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+/**\n+ * Based on work from com.tle.web.sections.render.TextUtils\n+ */\n+\n+const removeNonWordCharacters = (highlight: string): string =>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYxNjQyNw=="}, "originalCommit": {"oid": "4a03d923898663962d7ad456ae6d1b7754819f6a"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTg2NTU2OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/util/TextUtils.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzo1NjowNlrOHT5Vvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMDoyMTowN1rOHT5xRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYyNDQ0Nw==", "bodyText": "I can basically imagine what string this regex will match, but can we have a simple example here?", "url": "https://github.com/openequella/openEQUELLA/pull/2298#discussion_r490624447", "createdAt": "2020-09-17T23:56:06Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/util/TextUtils.ts", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+/**\n+ * Based on work from com.tle.web.sections.render.TextUtils\n+ */\n+\n+const removeNonWordCharacters = (highlight: string): string =>\n+  highlight\n+    .replace(/\\\\/g, \"\")\n+    .replace(/\\./g, \"\")\n+    .replace(/\\(/g, \"\")\n+    .replace(/\\)/g, \"\")\n+    .replace(/\\[/g, \"\")\n+    .replace(/]/g, \"\")\n+    .replace(/\\+/g, \"\")\n+    .replace(/\\?/g, \".?\")\n+    .replace(/\\*/g, \"\\\\w*\")\n+    .replace(/\\|/g, \"\");\n+\n+const highlightsAsRegex = (highlights: string[]) =>\n+  highlights\n+    .map((h) => h.trim())\n+    .filter((h) => h.length > 0)\n+    .map((h) => removeNonWordCharacters(h))\n+    .filter((h) => h.length > 0)\n+    .join(\"|\");\n+\n+/**\n+ * Takes a line of text and a list of words which should be highlighted within that line. It returns\n+ * a `string` which contains the text, and the listed words encapsulated within `span`s\n+ * having the specified `class`.\n+ *\n+ * @param text Plain text to be highlighted\n+ * @param highlights A list of words to highlight\n+ * @param cssClass The CSS class to apply to the highlighting spans\n+ */\n+export const highlight = (\n+  text: string,\n+  highlights: string[],\n+  cssClass: string\n+): string => {\n+  const highlightsRegex = highlightsAsRegex(highlights);\n+  if (highlights.length < 1) {\n+    // Nothing to highlight\n+    return text;\n+  }\n+\n+  const re = new RegExp(\"^(.*?)\\\\b(\" + highlightsRegex + \")\\\\b(.*)$\", \"is\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a03d923898663962d7ad456ae6d1b7754819f6a"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzMTQ5Mw==", "bodyText": "Yeah, fair point. I've copied this across from the Java side (which had no doco) and so I've put it as was. But indeed, as I normally tell others, if you're going to have a regex, then you should document it as per best practice.\nI'll work on breaking it down and documenting it. \ud83d\udc4d", "url": "https://github.com/openequella/openEQUELLA/pull/2298#discussion_r490631493", "createdAt": "2020-09-18T00:21:07Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/util/TextUtils.ts", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+/**\n+ * Based on work from com.tle.web.sections.render.TextUtils\n+ */\n+\n+const removeNonWordCharacters = (highlight: string): string =>\n+  highlight\n+    .replace(/\\\\/g, \"\")\n+    .replace(/\\./g, \"\")\n+    .replace(/\\(/g, \"\")\n+    .replace(/\\)/g, \"\")\n+    .replace(/\\[/g, \"\")\n+    .replace(/]/g, \"\")\n+    .replace(/\\+/g, \"\")\n+    .replace(/\\?/g, \".?\")\n+    .replace(/\\*/g, \"\\\\w*\")\n+    .replace(/\\|/g, \"\");\n+\n+const highlightsAsRegex = (highlights: string[]) =>\n+  highlights\n+    .map((h) => h.trim())\n+    .filter((h) => h.length > 0)\n+    .map((h) => removeNonWordCharacters(h))\n+    .filter((h) => h.length > 0)\n+    .join(\"|\");\n+\n+/**\n+ * Takes a line of text and a list of words which should be highlighted within that line. It returns\n+ * a `string` which contains the text, and the listed words encapsulated within `span`s\n+ * having the specified `class`.\n+ *\n+ * @param text Plain text to be highlighted\n+ * @param highlights A list of words to highlight\n+ * @param cssClass The CSS class to apply to the highlighting spans\n+ */\n+export const highlight = (\n+  text: string,\n+  highlights: string[],\n+  cssClass: string\n+): string => {\n+  const highlightsRegex = highlightsAsRegex(highlights);\n+  if (highlights.length < 1) {\n+    // Nothing to highlight\n+    return text;\n+  }\n+\n+  const re = new RegExp(\"^(.*?)\\\\b(\" + highlightsRegex + \")\\\\b(.*)$\", \"is\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYyNDQ0Nw=="}, "originalCommit": {"oid": "4a03d923898663962d7ad456ae6d1b7754819f6a"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTkxNDY2OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/util/TextUtils.test.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMDoyMjowMFrOHT5yIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMDoyNDowMlrOHT50Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzMTcxMw==", "bodyText": "If my understanding is right, I won't see\n<span class=\"${className}\">knives</span>\nif I search knife* ? oEQ's highlight approach does not include any stemming analyzer.", "url": "https://github.com/openequella/openEQUELLA/pull/2298#discussion_r490631713", "createdAt": "2020-09-18T00:22:00Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/util/TextUtils.test.ts", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import { highlight } from \"../../../tsrc/util/TextUtils\";\n+\n+describe(\"Highlighting of Text\", () => {\n+  const className = \"highlighted\";\n+  it.each([\n+    [\n+      \"The quick brown fox jumps over the lazy dog\",\n+      [\"The\", \"fox\", \"dog\"],\n+      `<span class=\"${className}\">The</span> quick brown <span class=\"${className}\">fox</span> jumps over <span class=\"${className}\">the</span> lazy <span class=\"${className}\">dog</span>`,\n+    ],\n+    [\n+      \"The life of kelpies explained\",\n+      [\"kelp*\"],\n+      `The life of <span class=\"${className}\">kelpies</span> explained`,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd6ccb92ad6acab171923ec2f54d1985162586f9"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzMjI0Nw==", "bodyText": "That is correct. But that's also not something new due to this PR - i.e. this PR maintains the status quo. This is indeed one of the issues in oEQ not using the Lucene highlighting and instead doing it's own after the fact.", "url": "https://github.com/openequella/openEQUELLA/pull/2298#discussion_r490632247", "createdAt": "2020-09-18T00:24:02Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/util/TextUtils.test.ts", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import { highlight } from \"../../../tsrc/util/TextUtils\";\n+\n+describe(\"Highlighting of Text\", () => {\n+  const className = \"highlighted\";\n+  it.each([\n+    [\n+      \"The quick brown fox jumps over the lazy dog\",\n+      [\"The\", \"fox\", \"dog\"],\n+      `<span class=\"${className}\">The</span> quick brown <span class=\"${className}\">fox</span> jumps over <span class=\"${className}\">the</span> lazy <span class=\"${className}\">dog</span>`,\n+    ],\n+    [\n+      \"The life of kelpies explained\",\n+      [\"kelp*\"],\n+      `The life of <span class=\"${className}\">kelpies</span> explained`,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzMTcxMw=="}, "originalCommit": {"oid": "fd6ccb92ad6acab171923ec2f54d1985162586f9"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1806, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}