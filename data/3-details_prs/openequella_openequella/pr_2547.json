{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2MjAzMDM1", "number": 2547, "title": "Feature/select resource from new search page", "bodyText": "#688\nChecklist\n\n the [contributor license agreement][] is signed\n commit message follows [commit guidelines][]\n tests are included\n screenshots are included showing significant UI changes\n documentation is changed or added\n\nDescription of change\nThis PR includes much more code than I imaged.\nHere is a list of what changes have been made:\n\n\nFunctions made in 'SelectionSessionModule.ts' to support selecting resources from new search UI (e.g. API calls and DOM update).\n\n\nChanges made in some legacy Java/JS files in order to ensure selecting/unselecting resources from either structure or selectOrAdd in both New and Old UI  works correctly.\n\n\nChanges made in SearchPage.tsx to skip query string param conversion if Selection Session is open.\n\n\nNew Jest tests added for SearchResult and SelectionSessionModule.\n\n\nHere are two videos.\nselectOrAdd\nstructured", "createdAt": "2020-11-24T06:14:25Z", "url": "https://github.com/openequella/openEQUELLA/pull/2547", "merged": true, "mergeCommit": {"oid": "587691ee9c10ad66b190327467f21ff51eaf904d"}, "closed": true, "closedAt": "2020-11-26T09:14:32Z", "author": {"login": "PenghaiZhang"}, "timelineItems": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdc--2ugH2gAyNTI2MjAzMDM1OjkzYzQyOTkwNWJkNzAxNmVkODdiMDcyNDE1ZTZmODEyZTI3NWIzODI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdgNZq6gFqTUzOTAzNTcwMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "93c429905bd7016ed87b072415e6f812e275b382", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/93c429905bd7016ed87b072415e6f812e275b382", "committedDate": "2020-11-16T06:29:53Z", "message": "Ignore eslint checks for legacy JS code."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcc9e8895f6a3a0fcf7652b89e822c43ca544172", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/fcc9e8895f6a3a0fcf7652b89e822c43ca544172", "committedDate": "2020-11-16T06:30:05Z", "message": "Refactor legacy code to support select resources\nfrom new search UI. This includes:\n\n1. Separate the functionality of updating course list\nto a single function.\n\n2. Improve function 'selectAllAttachmentsFunction'.\n3. Some tweaks for 'CourseListSection'."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff8ef0136aeaba34f0eec58270efb2f8ec36748c", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/ff8ef0136aeaba34f0eec58270efb2f8ec36748c", "committedDate": "2020-11-17T23:06:36Z", "message": "Change the type of parameters passed to 'selectAllAttachments'."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3147aeb185905f23dd0b14dc2893ce615c2306c", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/a3147aeb185905f23dd0b14dc2893ce615c2306c", "committedDate": "2020-11-17T23:39:08Z", "message": "Export interface 'LegacyContentResponse'."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "445e74c6e3945e4a78bcc15f29f1a85af07c9d90", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/445e74c6e3945e4a78bcc15f29f1a85af07c9d90", "committedDate": "2020-11-18T03:39:21Z", "message": "Fundamentals for selecting resources from new search UI. This includes:\n\n1. A few type definitions for required data structure.\n2. Two functions that build request URL and body data .\n3. An abstract function sending request to server and firing callbacks.\n4. A function updating the 'selection-summary' div in 'selectOrAdd'."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5559061c2f4b45a84c320ee1bd47d4a95588ab9f", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/5559061c2f4b45a84c320ee1bd47d4a95588ab9f", "committedDate": "2020-11-18T03:40:37Z", "message": "Integrate SearchResult with SelectionSessionModule."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04dc17ef0928dc14875da663d044f181b6dca4af", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/04dc17ef0928dc14875da663d044f181b6dca4af", "committedDate": "2020-11-18T22:05:36Z", "message": "Ensure new search page search options persist when\nresources are unselected from the course list."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96e47275b291dc13a1cc3a8101b03099fc2902e8", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/96e47275b291dc13a1cc3a8101b03099fc2902e8", "committedDate": "2020-11-18T23:19:32Z", "message": "Tidy ups for SelectionSessionModule."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4292285632261cf5b959ca0aab6aa2fb69b6efd", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/c4292285632261cf5b959ca0aab6aa2fb69b6efd", "committedDate": "2020-11-19T05:46:49Z", "message": "Create a server event handler for selecting attachments\nfrom new search UI in 'selectOrAdd'.\n\nThe existing handler will unselect an attachment if the\nattachment is selected, which is not needed in new search\nUI. So implement a new handler which only adds an attachment."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f783b3a257af6c241b1426509b0bc779a4a71a3", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/5f783b3a257af6c241b1426509b0bc779a4a71a3", "committedDate": "2020-11-19T05:50:28Z", "message": "Allow the Selection Summary panel to be updated by\nan ajax request when new search UI is enabled.\n\nTo achieve this, the JS file for AJAX Effect must be\nincluded in the context of new search UI."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5033e4eeddf9c3439282a3b8c8d4ed5620d903f", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/f5033e4eeddf9c3439282a3b8c8d4ed5620d903f", "committedDate": "2020-11-20T00:29:25Z", "message": "Remove redundant field 'isAllAttachments' for 'SelectResourceProps'."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89f371a40d86e2e6d3e18b4506bd5d925581704b", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/89f371a40d86e2e6d3e18b4506bd5d925581704b", "committedDate": "2020-11-20T00:43:14Z", "message": "Use JS History API to navigate from Selection Checkout page\nback to Search page.\n\nThe previous approach is to refresh the whole page which works\nfine for Old UI. But with new search UI refreshing the page\nwill result in missing search options. Luckily, new search UI\ncan read search options stored in Browser history. Therefore,\nusing JS History API is probably the best way at this stage.\nAnd it still works fine with Old UI."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ae4e596b21faf2ebc90b47dd02228804fc44050", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/4ae4e596b21faf2ebc90b47dd02228804fc44050", "committedDate": "2020-11-23T04:50:29Z", "message": "Merge branch 'component/new-search-page-in-selection-section' into feature/select-resource-from-new-search-page"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "194bd57aa260b8abe38d939cc89982761edbbf4b", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/194bd57aa260b8abe38d939cc89982761edbbf4b", "committedDate": "2020-11-23T06:09:04Z", "message": "Update SelectionSessionModule and SearchResult\n\n1. Remove redundant interface 'SelectResourceProps'.\n2. Centralise the validation for Selection Session info\ninb one function.\n3. Update comments and clean up the code."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24a5e0b54d37180aa9f78e5346b255720ff7a892", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/24a5e0b54d37180aa9f78e5346b255720ff7a892", "committedDate": "2020-11-24T00:53:44Z", "message": "Merge branch 'component/new-search-page-in-selection-section' into feature/select-resource-from-new-search-page"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23d6398634f8aa48837f5d81a26d316d6a3e55db", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/23d6398634f8aa48837f5d81a26d316d6a3e55db", "committedDate": "2020-11-24T02:42:53Z", "message": "Merge branch 'component/new-search-page-in-selection-section' into feature/select-resource-from-new-search-page"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b7ff79a299b89a3d1fee9414389ceb2b30e3d50", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/8b7ff79a299b89a3d1fee9414389ceb2b30e3d50", "committedDate": "2020-11-24T03:12:44Z", "message": "Do not convert query string params to search options\nin Selection Session."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48381b6cf4e8fbb83c3fdd9fdb8447377d86c84d", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/48381b6cf4e8fbb83c3fdd9fdb8447377d86c84d", "committedDate": "2020-11-24T03:32:58Z", "message": "Clean up SelectionSessionModule."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4855002a821578f1f9d704adf83a64c3952385a5", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/4855002a821578f1f9d704adf83a64c3952385a5", "committedDate": "2020-11-24T05:26:17Z", "message": "Add a Jest test for selecting resources from new search UI."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c68835ad06a7fa4a6dfe7142027951c4af249eb6", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/c68835ad06a7fa4a6dfe7142027951c4af249eb6", "committedDate": "2020-11-24T05:59:56Z", "message": "Add more Jest tests in SelectionSessionModule."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d958c14054b5ad57e1b6bfb4e7ff1b8f9c338574", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/d958c14054b5ad57e1b6bfb4e7ff1b8f9c338574", "committedDate": "2020-11-24T22:46:33Z", "message": "Move the test for function 'isSelectionSessionOpen' to\nits own describe block."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MDEwMDQz", "url": "https://github.com/openequella/openEQUELLA/pull/2547#pullrequestreview-538010043", "createdAt": "2020-11-24T22:12:38Z", "commit": {"oid": "c68835ad06a7fa4a6dfe7142027951c4af249eb6"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjoxMjozOFrOH5YFNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjo1MjozMFrOH5apog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkyNTQzMQ==", "bodyText": "The format of these comments is broken here but looks good locally. \ud83e\udd14", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r529925431", "createdAt": "2020-11-24T22:12:38Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/resources/web/scripts/attachments/attachments.js", "diffHunk": "@@ -156,7 +156,13 @@ var Attachments = (function()\n \t\t\t\tCourseList.scrollToSelected();\n \t\t\t\tCourseList.transfer($ul);\n \t\t\t}\n-\t\t\tselectAllCallback(uuids, itemId, itemExtensionType);\n+\n+\t\t\t// To support using the standard reload function for selecting all attachment,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c68835ad06a7fa4a6dfe7142027951c4af249eb6"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkyNzQzNQ==", "bodyText": "This const and mocked functiongetRenderData appear in here and SearchResult.test.ts. Perhaps we should centralise them in a utility file ?", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r529927435", "createdAt": "2020-11-24T22:14:37Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/modules/SelectionSessionModule.test.ts", "diffHunk": "@@ -16,44 +16,73 @@\n  * limitations under the License.\n  */\n import { getSearchResult } from \"../../../__mocks__/SearchResult.mock\";\n-import type { SelectionSessionInfo } from \"../../../tsrc/AppConfig\";\n+import type { RenderData, SelectionSessionInfo } from \"../../../tsrc/AppConfig\";\n import * as AppConfig from \"../../../tsrc/AppConfig\";\n-import { buildSelectionSessionItemSummaryLink } from \"../../../tsrc/modules/SelectionSessionModule\";\n+import {\n+  buildSelectionSessionItemSummaryLink,\n+  isSelectionSessionOpen,\n+} from \"../../../tsrc/modules/SelectionSessionModule\";\n \n const basicSelectionSessionInfo: SelectionSessionInfo = {\n   stateId: \"1\",\n   layout: \"coursesearch\",\n };\n+const withIntegId: SelectionSessionInfo = {\n+  ...basicSelectionSessionInfo,\n+  integId: \"2\",\n+};\n+const basicRenderData: RenderData = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c68835ad06a7fa4a6dfe7142027951c4af249eb6"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk2NzUyMg==", "bodyText": "I did not put this function in the REST Module as we don't have REST endpoints for Selection Session yet. In addition, I am unsure how to write tests for this function. I can make a mocked Axios.post though and check if the callback has been called or not.", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r529967522", "createdAt": "2020-11-24T22:52:30Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SelectionSessionModule.ts", "diffHunk": "@@ -32,6 +107,44 @@ const isSelectionSessionInfo = (\n export const isSelectionSessionOpen = (): boolean =>\n   isSelectionSessionInfo(getRenderData()?.selectionSessionInfo);\n \n+/**\n+ * Validate the selectionSessionInfo included in renderData.\n+ * And return selectionSessionInfo if the checking is passed, or throw a type error.\n+ */\n+const getSelectionSessionInfo = (): SelectionSessionInfo => {\n+  const selectionSessionInfo = getRenderData()?.selectionSessionInfo;\n+  if (isSelectionSessionInfo(selectionSessionInfo)) {\n+    return selectionSessionInfo;\n+  }\n+  throw new TypeError(\"The type of Selection Session Info is incorrect.\");\n+};\n+\n+const submitBaseUrl = `${API_BASE_URL}/content/submit`;\n+\n+const getBasicPostData = () => {\n+  const { stateId, integId, layout } = getSelectionSessionInfo();\n+  const basicPostData = {\n+    \"_sl.stateId\": [`${stateId}`],\n+    a: [layout],\n+  };\n+  return integId\n+    ? { ...basicPostData, \"_int.id\": [`${integId}`] }\n+    : basicPostData;\n+};\n+\n+/**\n+ * Send a POST request to submit selected resources.\n+ *\n+ * @param path URL of an endpoint for submitting selected resources\n+ * @param data Payload of the request\n+ * @param callback Function called when the request is successful\n+ */\n+const submitSelection = <T>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d958c14054b5ad57e1b6bfb4e7ff1b8f9c338574"}, "originalPosition": 120}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f4fdffe74ca53201cbe4305086616c114398755", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/7f4fdffe74ca53201cbe4305086616c114398755", "committedDate": "2020-11-24T23:37:34Z", "message": "Make sure the course list is reloaded when the Selection\nDialog is closed by the close button."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MTg2MTY0", "url": "https://github.com/openequella/openEQUELLA/pull/2547#pullrequestreview-538186164", "createdAt": "2020-11-25T06:22:03Z", "commit": {"oid": "7f4fdffe74ca53201cbe4305086616c114398755"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNjoyMjowM1rOH5ks3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNzoxNTo1MlrOH5l3lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEzMjE4OA==", "bodyText": "Yup, sounds like a good plan to me. \ud83d\udc4d", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530132188", "createdAt": "2020-11-25T06:22:03Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/modules/SelectionSessionModule.test.ts", "diffHunk": "@@ -16,44 +16,73 @@\n  * limitations under the License.\n  */\n import { getSearchResult } from \"../../../__mocks__/SearchResult.mock\";\n-import type { SelectionSessionInfo } from \"../../../tsrc/AppConfig\";\n+import type { RenderData, SelectionSessionInfo } from \"../../../tsrc/AppConfig\";\n import * as AppConfig from \"../../../tsrc/AppConfig\";\n-import { buildSelectionSessionItemSummaryLink } from \"../../../tsrc/modules/SelectionSessionModule\";\n+import {\n+  buildSelectionSessionItemSummaryLink,\n+  isSelectionSessionOpen,\n+} from \"../../../tsrc/modules/SelectionSessionModule\";\n \n const basicSelectionSessionInfo: SelectionSessionInfo = {\n   stateId: \"1\",\n   layout: \"coursesearch\",\n };\n+const withIntegId: SelectionSessionInfo = {\n+  ...basicSelectionSessionInfo,\n+  integId: \"2\",\n+};\n+const basicRenderData: RenderData = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkyNzQzNQ=="}, "originalCommit": {"oid": "c68835ad06a7fa4a6dfe7142027951c4af249eb6"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEzMzgxMg==", "bodyText": "It's a bit more common, and makes a bit more sense, to put the description/when string as the first item (or column if you think of this as tabular data). And then the string you'd have you'd have: \"when [%s] then return [%s]\"", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530133812", "createdAt": "2020-11-25T06:27:21Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/modules/SelectionSessionModule.test.ts", "diffHunk": "@@ -16,44 +16,75 @@\n  * limitations under the License.\n  */\n import { getSearchResult } from \"../../../__mocks__/SearchResult.mock\";\n-import type { SelectionSessionInfo } from \"../../../tsrc/AppConfig\";\n+import type { RenderData, SelectionSessionInfo } from \"../../../tsrc/AppConfig\";\n import * as AppConfig from \"../../../tsrc/AppConfig\";\n-import { buildSelectionSessionItemSummaryLink } from \"../../../tsrc/modules/SelectionSessionModule\";\n+import {\n+  buildSelectionSessionItemSummaryLink,\n+  isSelectionSessionOpen,\n+} from \"../../../tsrc/modules/SelectionSessionModule\";\n \n const basicSelectionSessionInfo: SelectionSessionInfo = {\n   stateId: \"1\",\n   layout: \"coursesearch\",\n };\n+const withIntegId: SelectionSessionInfo = {\n+  ...basicSelectionSessionInfo,\n+  integId: \"2\",\n+};\n+const basicRenderData: RenderData = {\n+  baseResources: \"p/r/2020.2.0/com.equella.core/\",\n+  newUI: true,\n+  autotestMode: false,\n+  newSearch: true,\n+  selectionSessionInfo: basicSelectionSessionInfo,\n+};\n const mockGetRenderData = jest.spyOn(AppConfig, \"getRenderData\");\n-const updateMockGetRenderData = (\n-  selectionSessionInfo: SelectionSessionInfo\n-) => {\n-  mockGetRenderData.mockReturnValue({\n-    baseResources: \"p/r/2020.2.0/com.equella.core/\",\n-    newUI: true,\n-    autotestMode: false,\n-    newSearch: true,\n-    selectionSessionInfo: selectionSessionInfo,\n-  });\n+const updateMockGetRenderData = (renderData?: RenderData) => {\n+  mockGetRenderData.mockReturnValue(renderData);\n };\n \n describe(\"buildSelectionSessionItemSummaryLink\", () => {\n   const { uuid, version } = getSearchResult.results[0];\n \n   it(\"builds basic URLs for accessing ItemSummary pages in Selection Session mode\", () => {\n-    updateMockGetRenderData(basicSelectionSessionInfo);\n+    updateMockGetRenderData(basicRenderData);\n     const link = buildSelectionSessionItemSummaryLink(uuid, version);\n     expect(link).toBe(\n       \"items/9b9bf5a9-c5af-490b-88fe-7e330679fad2/1/?_sl.stateId=1&a=coursesearch\"\n     );\n   });\n \n   it(\"will include the Integration ID in the URL if provided in SelectionSessionInfo\", () => {\n-    updateMockGetRenderData({ ...basicSelectionSessionInfo, integId: \"2\" });\n+    updateMockGetRenderData({\n+      ...basicRenderData,\n+      selectionSessionInfo: withIntegId,\n+    });\n \n     const link = buildSelectionSessionItemSummaryLink(uuid, version);\n     expect(link).toBe(\n       \"items/9b9bf5a9-c5af-490b-88fe-7e330679fad2/1/?_sl.stateId=1&a=coursesearch&_int.id=2\"\n     );\n   });\n });\n+\n+describe(\"isSelectionSessionOpen\", () => {\n+  it.each([\n+    [true, \"selectionSessionInfo has correct type\", basicRenderData],\n+    [\n+      false,\n+      \"selectionSessionInfo is null\",\n+      { ...basicRenderData, selectionSessionInfo: null },\n+    ],\n+    [false, \"renderData is undefined\", undefined],\n+  ])(\n+    \"return %s when %s\",\n+    (\n+      inSelectionSession: boolean,\n+      when: string,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4fdffe74ca53201cbe4305086616c114398755"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEzNDEyNg==", "bodyText": "Should this perhaps be:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                [true, \"selectionSessionInfo has correct type\", basicRenderData],\n          \n          \n            \n                [true, \"RenderData includes SelectionSessionInfo\", basicRenderData],", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530134126", "createdAt": "2020-11-25T06:28:27Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/modules/SelectionSessionModule.test.ts", "diffHunk": "@@ -16,44 +16,75 @@\n  * limitations under the License.\n  */\n import { getSearchResult } from \"../../../__mocks__/SearchResult.mock\";\n-import type { SelectionSessionInfo } from \"../../../tsrc/AppConfig\";\n+import type { RenderData, SelectionSessionInfo } from \"../../../tsrc/AppConfig\";\n import * as AppConfig from \"../../../tsrc/AppConfig\";\n-import { buildSelectionSessionItemSummaryLink } from \"../../../tsrc/modules/SelectionSessionModule\";\n+import {\n+  buildSelectionSessionItemSummaryLink,\n+  isSelectionSessionOpen,\n+} from \"../../../tsrc/modules/SelectionSessionModule\";\n \n const basicSelectionSessionInfo: SelectionSessionInfo = {\n   stateId: \"1\",\n   layout: \"coursesearch\",\n };\n+const withIntegId: SelectionSessionInfo = {\n+  ...basicSelectionSessionInfo,\n+  integId: \"2\",\n+};\n+const basicRenderData: RenderData = {\n+  baseResources: \"p/r/2020.2.0/com.equella.core/\",\n+  newUI: true,\n+  autotestMode: false,\n+  newSearch: true,\n+  selectionSessionInfo: basicSelectionSessionInfo,\n+};\n const mockGetRenderData = jest.spyOn(AppConfig, \"getRenderData\");\n-const updateMockGetRenderData = (\n-  selectionSessionInfo: SelectionSessionInfo\n-) => {\n-  mockGetRenderData.mockReturnValue({\n-    baseResources: \"p/r/2020.2.0/com.equella.core/\",\n-    newUI: true,\n-    autotestMode: false,\n-    newSearch: true,\n-    selectionSessionInfo: selectionSessionInfo,\n-  });\n+const updateMockGetRenderData = (renderData?: RenderData) => {\n+  mockGetRenderData.mockReturnValue(renderData);\n };\n \n describe(\"buildSelectionSessionItemSummaryLink\", () => {\n   const { uuid, version } = getSearchResult.results[0];\n \n   it(\"builds basic URLs for accessing ItemSummary pages in Selection Session mode\", () => {\n-    updateMockGetRenderData(basicSelectionSessionInfo);\n+    updateMockGetRenderData(basicRenderData);\n     const link = buildSelectionSessionItemSummaryLink(uuid, version);\n     expect(link).toBe(\n       \"items/9b9bf5a9-c5af-490b-88fe-7e330679fad2/1/?_sl.stateId=1&a=coursesearch\"\n     );\n   });\n \n   it(\"will include the Integration ID in the URL if provided in SelectionSessionInfo\", () => {\n-    updateMockGetRenderData({ ...basicSelectionSessionInfo, integId: \"2\" });\n+    updateMockGetRenderData({\n+      ...basicRenderData,\n+      selectionSessionInfo: withIntegId,\n+    });\n \n     const link = buildSelectionSessionItemSummaryLink(uuid, version);\n     expect(link).toBe(\n       \"items/9b9bf5a9-c5af-490b-88fe-7e330679fad2/1/?_sl.stateId=1&a=coursesearch&_int.id=2\"\n     );\n   });\n });\n+\n+describe(\"isSelectionSessionOpen\", () => {\n+  it.each([\n+    [true, \"selectionSessionInfo has correct type\", basicRenderData],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4fdffe74ca53201cbe4305086616c114398755"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEzNjA4Mw==", "bodyText": "Why didn't you just do this on the import?\nE.g.\nimport {selectResourceForCourseList, selectResourceForNonCourseList} from ...", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530136083", "createdAt": "2020-11-25T06:34:42Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/components/SearchResult.test.tsx", "diffHunk": "@@ -172,19 +180,78 @@ describe(\"<SearchResult/>\", () => {\n     );\n   });\n \n-  it.each<[string]>([\n-    [languageStrings.searchpage.selectResource.summaryPage],\n-    [languageStrings.searchpage.selectResource.allAttachments],\n-    [languageStrings.searchpage.selectResource.attachment],\n-  ])(\n-    // todo: pass event handler in and check if it has been called.\n-    \"should display buttons for %s in Selection Session\",\n-    async (buttonLabel: string) => {\n-      updateMockRenderData();\n-      const { queryByLabelText } = await renderSearchResult(\n-        mockData.attachSearchObj\n-      );\n-      expect(queryByLabelText(buttonLabel)).toBeInTheDocument();\n-    }\n-  );\n+  describe(\"In Selection Session\", () => {\n+    const mockGlobalCourseList = jest.spyOn(\n+      SelectionSessionModule,\n+      \"getGlobalCourseList\"\n+    );\n+    mockGlobalCourseList.mockReturnValue({ updateCourseList: jest.fn() });\n+\n+    const mockSelectResourceForCourseList = jest.spyOn(\n+      SelectionSessionModule,\n+      \"selectResourceForCourseList\"\n+    );\n+    mockSelectResourceForCourseList.mockResolvedValue();\n+\n+    const mockSelectResourceForNonCourseList = jest.spyOn(\n+      SelectionSessionModule,\n+      \"selectResourceForNonCourseList\"\n+    );\n+    mockSelectResourceForNonCourseList.mockResolvedValue();\n+\n+    const selectOrAddInfo: SelectionSessionInfo = {\n+      ...basicSelectionSessionInfo,\n+      layout: \"search\",\n+    };\n+\n+    const {\n+      summaryPage,\n+      allAttachments,\n+      attachment,\n+    } = languageStrings.searchpage.selectResource;\n+    const STRUCTURED = \"structured\";\n+    const SELECT_OR_ADD = \"selectOrAdd\";\n+    const selectForCourseFunc =\n+      SelectionSessionModule.selectResourceForCourseList;\n+    const selectForNonCourseFunc =\n+      SelectionSessionModule.selectResourceForNonCourseList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4fdffe74ca53201cbe4305086616c114398755"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEzODg2OA==", "bodyText": "It's unclear what this is all about. I'm guessing - which we don't want readers to have to do - that the intention here is to check on the presence of a selection button and then click it. If so, it could greatly benefit by something like:\nconst makeSelection = (selectorLabel: string) => {\n  // First, make sure the selector control is active\n  expect(queryByLabelText(selectorLabel)).toBeInTheDocument();\n  // And then make a selection by clicking it\n  fireEvent.click(getByLabelText(selectorLabel));\n}\nAnd then tweak this to be:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    expect(queryByLabelText(resourceType)).toBeInTheDocument();\n          \n          \n            \n            \n          \n          \n            \n                    fireEvent.click(getByLabelText(resourceType));\n          \n          \n            \n                    makeSelection(resourceType);", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530138868", "createdAt": "2020-11-25T06:42:51Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/components/SearchResult.test.tsx", "diffHunk": "@@ -172,19 +180,78 @@ describe(\"<SearchResult/>\", () => {\n     );\n   });\n \n-  it.each<[string]>([\n-    [languageStrings.searchpage.selectResource.summaryPage],\n-    [languageStrings.searchpage.selectResource.allAttachments],\n-    [languageStrings.searchpage.selectResource.attachment],\n-  ])(\n-    // todo: pass event handler in and check if it has been called.\n-    \"should display buttons for %s in Selection Session\",\n-    async (buttonLabel: string) => {\n-      updateMockRenderData();\n-      const { queryByLabelText } = await renderSearchResult(\n-        mockData.attachSearchObj\n-      );\n-      expect(queryByLabelText(buttonLabel)).toBeInTheDocument();\n-    }\n-  );\n+  describe(\"In Selection Session\", () => {\n+    const mockGlobalCourseList = jest.spyOn(\n+      SelectionSessionModule,\n+      \"getGlobalCourseList\"\n+    );\n+    mockGlobalCourseList.mockReturnValue({ updateCourseList: jest.fn() });\n+\n+    const mockSelectResourceForCourseList = jest.spyOn(\n+      SelectionSessionModule,\n+      \"selectResourceForCourseList\"\n+    );\n+    mockSelectResourceForCourseList.mockResolvedValue();\n+\n+    const mockSelectResourceForNonCourseList = jest.spyOn(\n+      SelectionSessionModule,\n+      \"selectResourceForNonCourseList\"\n+    );\n+    mockSelectResourceForNonCourseList.mockResolvedValue();\n+\n+    const selectOrAddInfo: SelectionSessionInfo = {\n+      ...basicSelectionSessionInfo,\n+      layout: \"search\",\n+    };\n+\n+    const {\n+      summaryPage,\n+      allAttachments,\n+      attachment,\n+    } = languageStrings.searchpage.selectResource;\n+    const STRUCTURED = \"structured\";\n+    const SELECT_OR_ADD = \"selectOrAdd\";\n+    const selectForCourseFunc =\n+      SelectionSessionModule.selectResourceForCourseList;\n+    const selectForNonCourseFunc =\n+      SelectionSessionModule.selectResourceForNonCourseList;\n+\n+    it.each([\n+      [summaryPage, STRUCTURED, selectForCourseFunc, basicSelectionSessionInfo],\n+      [\n+        allAttachments,\n+        STRUCTURED,\n+        selectForCourseFunc,\n+        basicSelectionSessionInfo,\n+      ],\n+      [attachment, STRUCTURED, selectForCourseFunc, basicSelectionSessionInfo],\n+      [summaryPage, SELECT_OR_ADD, selectForNonCourseFunc, selectOrAddInfo],\n+      [allAttachments, SELECT_OR_ADD, selectForNonCourseFunc, selectOrAddInfo],\n+      [attachment, SELECT_OR_ADD, selectForNonCourseFunc, selectOrAddInfo],\n+    ])(\n+      \"supports %s in %s mode\",\n+      async (\n+        resourceType: string,\n+        selectionSessionMode: string,\n+        selectResourceFunc: (\n+          itemKey: string,\n+          attachmentUUIDs: string[]\n+        ) => Promise<void>,\n+        selectionSessionInfo: SelectionSessionInfo\n+      ) => {\n+        updateMockRenderData({\n+          ...basicRenderData,\n+          selectionSessionInfo: selectionSessionInfo,\n+        });\n+\n+        const { queryByLabelText, getByLabelText } = await renderSearchResult(\n+          mockData.attachSearchObj\n+        );\n+        expect(queryByLabelText(resourceType)).toBeInTheDocument();\n+\n+        fireEvent.click(getByLabelText(resourceType));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4fdffe74ca53201cbe4305086616c114398755"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEzOTA5MQ==", "bodyText": "Although we have this test to (I think) check that the selector controls are active in Selection Sessions. We don't seem to have a function to ensure we don't show them during non-Selection Sessions. Could be handy...", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530139091", "createdAt": "2020-11-25T06:43:37Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/components/SearchResult.test.tsx", "diffHunk": "@@ -172,19 +180,78 @@ describe(\"<SearchResult/>\", () => {\n     );\n   });\n \n-  it.each<[string]>([\n-    [languageStrings.searchpage.selectResource.summaryPage],\n-    [languageStrings.searchpage.selectResource.allAttachments],\n-    [languageStrings.searchpage.selectResource.attachment],\n-  ])(\n-    // todo: pass event handler in and check if it has been called.\n-    \"should display buttons for %s in Selection Session\",\n-    async (buttonLabel: string) => {\n-      updateMockRenderData();\n-      const { queryByLabelText } = await renderSearchResult(\n-        mockData.attachSearchObj\n-      );\n-      expect(queryByLabelText(buttonLabel)).toBeInTheDocument();\n-    }\n-  );\n+  describe(\"In Selection Session\", () => {\n+    const mockGlobalCourseList = jest.spyOn(\n+      SelectionSessionModule,\n+      \"getGlobalCourseList\"\n+    );\n+    mockGlobalCourseList.mockReturnValue({ updateCourseList: jest.fn() });\n+\n+    const mockSelectResourceForCourseList = jest.spyOn(\n+      SelectionSessionModule,\n+      \"selectResourceForCourseList\"\n+    );\n+    mockSelectResourceForCourseList.mockResolvedValue();\n+\n+    const mockSelectResourceForNonCourseList = jest.spyOn(\n+      SelectionSessionModule,\n+      \"selectResourceForNonCourseList\"\n+    );\n+    mockSelectResourceForNonCourseList.mockResolvedValue();\n+\n+    const selectOrAddInfo: SelectionSessionInfo = {\n+      ...basicSelectionSessionInfo,\n+      layout: \"search\",\n+    };\n+\n+    const {\n+      summaryPage,\n+      allAttachments,\n+      attachment,\n+    } = languageStrings.searchpage.selectResource;\n+    const STRUCTURED = \"structured\";\n+    const SELECT_OR_ADD = \"selectOrAdd\";\n+    const selectForCourseFunc =\n+      SelectionSessionModule.selectResourceForCourseList;\n+    const selectForNonCourseFunc =\n+      SelectionSessionModule.selectResourceForNonCourseList;\n+\n+    it.each([", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4fdffe74ca53201cbe4305086616c114398755"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE0MjQxNg==", "bodyText": "Yup, you're right not to put this in the REST module. But I feel we need to somehow highlight this is the interface to Legacy Selection Sessions. I wonder if we should push these interface definitions, HTTP calls and supporting functions into maybe something called LegacySelectionSessionModule.ts and maybe at the top of the file a file wide comment stating that this Module is all about interacting with the Legacy AJAX endpoints for selections sessions, and will be used until the supporting REST endpoints are developed. \ud83e\udd14", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530142416", "createdAt": "2020-11-25T06:52:36Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SelectionSessionModule.ts", "diffHunk": "@@ -32,6 +107,44 @@ const isSelectionSessionInfo = (\n export const isSelectionSessionOpen = (): boolean =>\n   isSelectionSessionInfo(getRenderData()?.selectionSessionInfo);\n \n+/**\n+ * Validate the selectionSessionInfo included in renderData.\n+ * And return selectionSessionInfo if the checking is passed, or throw a type error.\n+ */\n+const getSelectionSessionInfo = (): SelectionSessionInfo => {\n+  const selectionSessionInfo = getRenderData()?.selectionSessionInfo;\n+  if (isSelectionSessionInfo(selectionSessionInfo)) {\n+    return selectionSessionInfo;\n+  }\n+  throw new TypeError(\"The type of Selection Session Info is incorrect.\");\n+};\n+\n+const submitBaseUrl = `${API_BASE_URL}/content/submit`;\n+\n+const getBasicPostData = () => {\n+  const { stateId, integId, layout } = getSelectionSessionInfo();\n+  const basicPostData = {\n+    \"_sl.stateId\": [`${stateId}`],\n+    a: [layout],\n+  };\n+  return integId\n+    ? { ...basicPostData, \"_int.id\": [`${integId}`] }\n+    : basicPostData;\n+};\n+\n+/**\n+ * Send a POST request to submit selected resources.\n+ *\n+ * @param path URL of an endpoint for submitting selected resources\n+ * @param data Payload of the request\n+ * @param callback Function called when the request is successful\n+ */\n+const submitSelection = <T>(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk2NzUyMg=="}, "originalCommit": {"oid": "d958c14054b5ad57e1b6bfb4e7ff1b8f9c338574"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE0NDUxOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Select resources in 'structured'. The approach is to call the server ajax method 'reloadFolder'\n          \n          \n            \n             * Select resources in 'structured'. The approach is to call the server AJAX method 'reloadFolder'", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530144519", "createdAt": "2020-11-25T06:58:13Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SelectionSessionModule.ts", "diffHunk": "@@ -42,19 +155,120 @@ export const buildSelectionSessionItemSummaryLink = (\n   uuid: string,\n   version: number\n ): string => {\n-  const selectionSessionInfo = getRenderData()?.selectionSessionInfo;\n-  if (isSelectionSessionInfo(selectionSessionInfo)) {\n-    const { stateId, integId, layout } = selectionSessionInfo;\n-    const itemSummaryPageLink = AppConfig.baseUrl.concat(\n-      `items/${uuid}/${version}/?_sl.stateId=${stateId}&a=${layout}`\n-    );\n-\n-    // integId can be null in 'Resource Selector'.\n-    if (integId) {\n-      return itemSummaryPageLink.concat(`&_int.id=${integId}`);\n-    }\n-    return itemSummaryPageLink;\n-  } else {\n-    throw new TypeError(\"The type of Selection Session Info is incorrect.\");\n+  const { stateId, integId, layout } = getSelectionSessionInfo();\n+  const itemSummaryPageLink = AppConfig.baseUrl.concat(\n+    `items/${uuid}/${version}/?_sl.stateId=${stateId}&a=${layout}`\n+  );\n+\n+  // integId can be null in 'Resource Selector'.\n+  if (integId) {\n+    return itemSummaryPageLink.concat(`&_int.id=${integId}`);\n   }\n+  return itemSummaryPageLink;\n+};\n+\n+/**\n+ * Update the content of DIV \"selection-summary\". This function is primarily for\n+ * 'selectOrAdd' mode. In this mode, what is returned from 'searching.do' is an\n+ * object of 'LegacyContentResponse'.\n+ *\n+ * So we need to convert the HTML string to a Document, and then extract the content\n+ * of node \"selection-summary\", and lastly use jQuery to update the DOM.\n+ *\n+ * @param legacyContent An object of LegacyContentResponse returned from server\n+ */\n+const updateSelectionSummary = (legacyContent: LegacyContentResponse) => {\n+  const bodyContent = new DOMParser().parseFromString(\n+    legacyContent.html.body,\n+    \"text/html\"\n+  );\n+  const selectionSummary = bodyContent.getElementById(\"selection-summary\");\n+  if (!selectionSummary) {\n+    throw new Error(\"Failed to update Selection Summary.\");\n+  }\n+  $(\"#selection-summary\").html(selectionSummary.innerHTML);\n+};\n+\n+/**\n+ * Select resources in 'structured'. The approach is to call the server ajax method 'reloadFolder'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4fdffe74ca53201cbe4305086616c114398755"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE0NTM3Mw==", "bodyText": "So is this:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              return submitSelection(\n          \n          \n            \n              return submitSelection<void>(", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530145373", "createdAt": "2020-11-25T07:00:28Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SelectionSessionModule.ts", "diffHunk": "@@ -42,19 +155,120 @@ export const buildSelectionSessionItemSummaryLink = (\n   uuid: string,\n   version: number\n ): string => {\n-  const selectionSessionInfo = getRenderData()?.selectionSessionInfo;\n-  if (isSelectionSessionInfo(selectionSessionInfo)) {\n-    const { stateId, integId, layout } = selectionSessionInfo;\n-    const itemSummaryPageLink = AppConfig.baseUrl.concat(\n-      `items/${uuid}/${version}/?_sl.stateId=${stateId}&a=${layout}`\n-    );\n-\n-    // integId can be null in 'Resource Selector'.\n-    if (integId) {\n-      return itemSummaryPageLink.concat(`&_int.id=${integId}`);\n-    }\n-    return itemSummaryPageLink;\n-  } else {\n-    throw new TypeError(\"The type of Selection Session Info is incorrect.\");\n+  const { stateId, integId, layout } = getSelectionSessionInfo();\n+  const itemSummaryPageLink = AppConfig.baseUrl.concat(\n+    `items/${uuid}/${version}/?_sl.stateId=${stateId}&a=${layout}`\n+  );\n+\n+  // integId can be null in 'Resource Selector'.\n+  if (integId) {\n+    return itemSummaryPageLink.concat(`&_int.id=${integId}`);\n   }\n+  return itemSummaryPageLink;\n+};\n+\n+/**\n+ * Update the content of DIV \"selection-summary\". This function is primarily for\n+ * 'selectOrAdd' mode. In this mode, what is returned from 'searching.do' is an\n+ * object of 'LegacyContentResponse'.\n+ *\n+ * So we need to convert the HTML string to a Document, and then extract the content\n+ * of node \"selection-summary\", and lastly use jQuery to update the DOM.\n+ *\n+ * @param legacyContent An object of LegacyContentResponse returned from server\n+ */\n+const updateSelectionSummary = (legacyContent: LegacyContentResponse) => {\n+  const bodyContent = new DOMParser().parseFromString(\n+    legacyContent.html.body,\n+    \"text/html\"\n+  );\n+  const selectionSummary = bodyContent.getElementById(\"selection-summary\");\n+  if (!selectionSummary) {\n+    throw new Error(\"Failed to update Selection Summary.\");\n+  }\n+  $(\"#selection-summary\").html(selectionSummary.innerHTML);\n+};\n+\n+/**\n+ * Select resources in 'structured'. The approach is to call the server ajax method 'reloadFolder'\n+ * which is defined in 'CourseListSection'. The parameter passed to this method is a JSON string\n+ * converted from an object of 'CourseListFolderAjaxUpdateData'.\n+ */\n+export const selectResourceForCourseList = (\n+  itemKey: string,\n+  attachmentUUIDs: string[] = []\n+): Promise<void> => {\n+  const serverSideEvent: (string | null)[] =\n+    attachmentUUIDs.length > 0\n+      ? [\n+          \"_slcl.selectAllAttachments\",\n+          `${attachmentUUIDs.join(\",\")}`,\n+          `${itemKey}`,\n+          null,\n+        ]\n+      : [\"_slcl.selectItem\", `${itemKey}`, null];\n+\n+  const courseListUpdateData: CourseListFolderAjaxUpdateData = {\n+    ajaxIds: [\"courselistajax\"],\n+    event: serverSideEvent,\n+  };\n+\n+  const postData: SelectionSessionPostData = {\n+    event__: [\"_slcl.reloadFolder\"], // This refers to the method 'reloadFolder' defined in 'CourseListSection'.\n+    eventp__0: [`${JSON.stringify(courseListUpdateData)}`],\n+    ...getBasicPostData(),\n+  };\n+\n+  return submitSelection(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4fdffe74ca53201cbe4305086616c114398755"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE0ODE0MA==", "bodyText": "I'd imagine it's tabs vs. spaces in this ol' stuff.", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530148140", "createdAt": "2020-11-25T07:07:57Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/resources/web/scripts/attachments/attachments.js", "diffHunk": "@@ -156,7 +156,13 @@ var Attachments = (function()\n \t\t\t\tCourseList.scrollToSelected();\n \t\t\t\tCourseList.transfer($ul);\n \t\t\t}\n-\t\t\tselectAllCallback(uuids, itemId, itemExtensionType);\n+\n+\t\t\t// To support using the standard reload function for selecting all attachment,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkyNTQzMQ=="}, "originalCommit": {"oid": "c68835ad06a7fa4a6dfe7142027951c4af249eb6"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE0ODcyMA==", "bodyText": "Was this pushed into a function to allow you to call from TS side?", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530148720", "createdAt": "2020-11-25T07:09:27Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/resources/web/scripts/courselist.js", "diffHunk": "@@ -184,29 +184,34 @@ var CourseList = {\n \t\t\t}\n \t\t\tfid = $checked.attr('id').substring('folder_'.length);\n \t\t}\n-\t\t\n+\n \t\t//TODO: shouldn't need to tell the server the selected folder\n \t\tvar reloadData = {\n \t\t\t\tajaxIds : ajaxIds,\n \t\t\t\tfolderId : fid,\n \t\t\t\tevent : eventArgs\n \t\t\t};\n-\t\t\n+\n \t\tajax(function(result)\n \t\t{\n \t\t\tupdateIncludes(result, function()\n \t\t\t{\n-\t\t\t\tvar $tree = $(\".foldertree\");\n-\t\t\t\tif (!$tree.length)\n-\t\t\t\t{\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\tvar folderId = result.folderId;\n-\t\t\t\tvar newTree = result.updates['courselistajax'];\n-\t\t\t\tvar $newTree = $(newTree.html);\n-\t\t\t\t$tree.find('[data-folderid=\"' + folderId + '\"]').replaceWith($newTree.find('[data-folderid=\"' + folderId + '\"]'));\n-\t\t\t\t$(document).trigger('equella_courselistupdate');\n+        CourseList.updateCourseList(result);\n \t\t\t});\n \t\t}, JSON.stringify(reloadData));\n-\t}\n+\t},\n+\n+  updateCourseList: function(result) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4fdffe74ca53201cbe4305086616c114398755"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE0OTAwNQ==", "bodyText": "This seems like a significant change and removal of an optimisation. Could you explain the backstory here please?", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530149005", "createdAt": "2020-11-25T07:10:07Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/resources/web/scripts/courselist.js", "diffHunk": "@@ -184,29 +184,34 @@ var CourseList = {\n \t\t\t}\n \t\t\tfid = $checked.attr('id').substring('folder_'.length);\n \t\t}\n-\t\t\n+\n \t\t//TODO: shouldn't need to tell the server the selected folder\n \t\tvar reloadData = {\n \t\t\t\tajaxIds : ajaxIds,\n \t\t\t\tfolderId : fid,\n \t\t\t\tevent : eventArgs\n \t\t\t};\n-\t\t\n+\n \t\tajax(function(result)\n \t\t{\n \t\t\tupdateIncludes(result, function()\n \t\t\t{\n-\t\t\t\tvar $tree = $(\".foldertree\");\n-\t\t\t\tif (!$tree.length)\n-\t\t\t\t{\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\tvar folderId = result.folderId;\n-\t\t\t\tvar newTree = result.updates['courselistajax'];\n-\t\t\t\tvar $newTree = $(newTree.html);\n-\t\t\t\t$tree.find('[data-folderid=\"' + folderId + '\"]').replaceWith($newTree.find('[data-folderid=\"' + folderId + '\"]'));\n-\t\t\t\t$(document).trigger('equella_courselistupdate');\n+        CourseList.updateCourseList(result);\n \t\t\t});\n \t\t}, JSON.stringify(reloadData));\n-\t}\n+\t},\n+\n+  updateCourseList: function(result) {\n+    var $tree = $(\".foldertree\");\n+    if (!$tree.length)\n+    {\n+      return;\n+    }\n+    var folderId = result.folderId;\n+    var newTree = result.updates['courselistajax'];\n+    var $newTree = $(newTree.html);\n+    // Update the whole folder tree rather than a single node.\n+    $tree.html($newTree.find(\".foldertree\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4fdffe74ca53201cbe4305086616c114398755"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE1MTMxOQ==", "bodyText": "Sorry, I've lost track of the threads. Where is this triggered from?", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530151319", "createdAt": "2020-11-25T07:15:52Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/web/itemlist/standard/AbstractItemlikeListAttachmentDisplaySection.java", "diffHunk": "@@ -396,7 +394,42 @@ public void selectAttachment(\n     final AttachmentDisplayModel<I> model = getModel(info);\n     model.setShow(true);\n     model.setItemId(itemId);\n+  }\n+\n+  private void addAttachment(\n+      SectionInfo info, String attachmentUuid, ItemId itemId, String extensionType) {\n+    final IAttachment attachment =\n+        new UnmodifiableAttachments(getCachedItem(info, itemId))\n+            .getAttachmentByUuid(attachmentUuid);\n+    if (attachment != null) {\n+      final ViewableItem<I> viewableItem = getViewableItem(getItem(itemId));\n+      final SelectAttachmentHandler selectAttachmentHandler =\n+          selectionService.getSelectAttachmentHandler(info, viewableItem, attachmentUuid);\n+      if (selectAttachmentHandler != null) {\n+        selectAttachmentHandler.handleAttachmentSelection(\n+            info, itemId, attachment, extensionType, true);\n+      }\n+    }\n+  }\n \n+  @EventHandlerMethod\n+  public void selectAttachmentsFromNewSearch(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4fdffe74ca53201cbe4305086616c114398755"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2a3e7520c0ed6266659c1aa92df1c7fbdc2204c", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/c2a3e7520c0ed6266659c1aa92df1c7fbdc2204c", "committedDate": "2020-11-25T23:34:58Z", "message": "Rename SelectionSessionModule to LegacySelectionSessionModule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97b0befc798302051a51f725b2e5a9338846ab08", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/97b0befc798302051a51f725b2e5a9338846ab08", "committedDate": "2020-11-25T23:45:02Z", "message": "Tweaks for LegacySelectionSessionModule test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18435d69c5ee7cb2e3dd7a52031145032055eaed", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/18435d69c5ee7cb2e3dd7a52031145032055eaed", "committedDate": "2020-11-26T02:45:07Z", "message": "Add one more Jest test for not showing selection\nbuttons in non-Selection Sessions.\n\nAlso improve readability of the test for showing and\nclicking selection buttons."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "faa38abe4dc8e00a52387c928126635da7eca9bb", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/faa38abe4dc8e00a52387c928126635da7eca9bb", "committedDate": "2020-11-26T02:45:53Z", "message": "Tidy ups for LegacySelectionSessionModule."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c2a39d947d9c44bfa5d2d093cc1d04bcf7a3670", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/9c2a39d947d9c44bfa5d2d093cc1d04bcf7a3670", "committedDate": "2020-11-26T02:47:52Z", "message": "Fix the comment format issue in 'attachments.js'."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8dddd58a4651ffc8ca0df1fa626d29d5860fb021", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/8dddd58a4651ffc8ca0df1fa626d29d5860fb021", "committedDate": "2020-11-26T03:21:10Z", "message": "Centralise mocked 'renderData' and 'getRenderData'\ninto a helper file."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "910096e996f444fcedc7d3b7a7ebad5c2f3d3e06", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/910096e996f444fcedc7d3b7a7ebad5c2f3d3e06", "committedDate": "2020-11-26T04:45:29Z", "message": "Add Jest tests for building the data sent to\nLegacy Selection Session endpoints."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5MDAxMTI5", "url": "https://github.com/openequella/openEQUELLA/pull/2547#pullrequestreview-539001129", "createdAt": "2020-11-26T05:20:58Z", "commit": {"oid": "910096e996f444fcedc7d3b7a7ebad5c2f3d3e06"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNToyMDo1OFrOH6MN7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNTozMDozNVrOH6MXjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc3OTYzMQ==", "bodyText": "That's odd. Are you aware this is sitting in the buildPostDataForStructured describe block?", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530779631", "createdAt": "2020-11-26T05:20:58Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/modules/LegacySelectionSessionModule.test.ts", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import { getSearchResult } from \"../../../__mocks__/SearchResult.mock\";\n+import type { RenderData } from \"../../../tsrc/AppConfig\";\n+import {\n+  buildPostDataForSelectOrAdd,\n+  buildPostDataForStructured,\n+  buildSelectionSessionItemSummaryLink,\n+  isSelectionSessionOpen,\n+  SelectionSessionPostData,\n+} from \"../../../tsrc/modules/LegacySelectionSessionModule\";\n+import { languageStrings } from \"../../../tsrc/util/langstrings\";\n+import {\n+  basicRenderData,\n+  renderDataForSelectOrAdd,\n+  updateMockGetRenderData,\n+  withIntegId,\n+} from \"../RenderDataHelper\";\n+\n+const {\n+  summaryPage: selectSummaryPageString,\n+  allAttachments: selectAllAttachmentsString,\n+  attachment: selectAttachmentString,\n+} = languageStrings.searchpage.selectResource;\n+const itemKey = \"72558c1d-8788-4515-86c8-b24a28cc451e/1\";\n+const attachmentUUID = \"4c636d7e-21fe-4202-b7de-2e8a728b8ffc\";\n+const attachmentUUIDs = [\n+  \"4c636d7e-21fe-4202-b7de-2e8a728b8ffc\",\n+  \"29e0fe1b-dbd6-4c98-9e7a-d957d9c731f5\",\n+];\n+\n+describe(\"buildSelectionSessionItemSummaryLink\", () => {\n+  const { uuid, version } = getSearchResult.results[0];\n+\n+  it(\"builds basic URLs for accessing ItemSummary pages in Selection Session mode\", () => {\n+    updateMockGetRenderData(basicRenderData);\n+    const link = buildSelectionSessionItemSummaryLink(uuid, version);\n+    expect(link).toBe(\n+      \"items/9b9bf5a9-c5af-490b-88fe-7e330679fad2/1/?_sl.stateId=1&a=coursesearch\"\n+    );\n+  });\n+\n+  it(\"will include the Integration ID in the URL if provided in SelectionSessionInfo\", () => {\n+    updateMockGetRenderData({\n+      ...basicRenderData,\n+      selectionSessionInfo: withIntegId,\n+    });\n+\n+    const link = buildSelectionSessionItemSummaryLink(uuid, version);\n+    expect(link).toBe(\n+      \"items/9b9bf5a9-c5af-490b-88fe-7e330679fad2/1/?_sl.stateId=1&a=coursesearch&_int.id=2\"\n+    );\n+  });\n+});\n+\n+describe(\"isSelectionSessionOpen\", () => {\n+  it.each<[string, boolean, RenderData | undefined]>([\n+    [\"RenderData includes SelectionSessionInfo\", true, basicRenderData],\n+    [\n+      \"selectionSessionInfo is null\",\n+      false,\n+      { ...basicRenderData, selectionSessionInfo: null },\n+    ],\n+    [\"renderData is undefined\", false, undefined],\n+  ])(\n+    \"when %s return %s\",\n+    (\n+      when: string,\n+      inSelectionSession: boolean,\n+      renderData: RenderData | undefined\n+    ) => {\n+      updateMockGetRenderData(renderData);\n+      expect(isSelectionSessionOpen()).toBe(inSelectionSession);\n+    }\n+  );\n+});\n+\n+describe(\"buildPostDataForStructured\", () => {\n+  const basicPostData = {\n+    \"_sl.stateId\": [\"1\"],\n+    a: [\"coursesearch\"],\n+    event__: [\"_slcl.reloadFolder\"],\n+  };\n+  const ajaxIds = `\"ajaxIds\":[\"courselistajax\"]`;\n+\n+  const itemSummaryData: SelectionSessionPostData = {\n+    ...basicPostData,\n+    eventp__0: [`{${ajaxIds},\"event\":[\"_slcl.selectItem\",\"${itemKey}\",null]}`],\n+  };\n+\n+  const oneAttachmentData: SelectionSessionPostData = {\n+    ...basicPostData,\n+    eventp__0: [\n+      `{${ajaxIds},\"event\":[\"_slcl.selectAllAttachments\",\"${attachmentUUID}\",\"${itemKey}\",null]}`,\n+    ],\n+  };\n+\n+  const allAttachmentsData: SelectionSessionPostData = {\n+    ...basicPostData,\n+    eventp__0: [\n+      `{${ajaxIds},\"event\":[\"_slcl.selectAllAttachments\",\"${attachmentUUIDs.join(\n+        \",\"\n+      )}\",\"${itemKey}\",null]}`,\n+    ],\n+  };\n+\n+  it.each<[string, string[], SelectionSessionPostData]>([\n+    [selectSummaryPageString, [], itemSummaryData],\n+    [selectAttachmentString, [attachmentUUID], oneAttachmentData],\n+    [selectAllAttachmentsString, attachmentUUIDs, allAttachmentsData],\n+  ])(\n+    \"builds POST data for %s in 'structured'\",\n+    (\n+      resourceType: string,\n+      attachmentUUIDs: string[],\n+      expectedPostData: SelectionSessionPostData\n+    ) => {\n+      updateMockGetRenderData(basicRenderData);\n+      const data: SelectionSessionPostData = buildPostDataForStructured(\n+        itemKey,\n+        attachmentUUIDs\n+      );\n+      expect(data).toMatchObject(expectedPostData);\n+    }\n+  );\n+\n+  describe(\"buildPostDataForSelectOrAdd\", () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "910096e996f444fcedc7d3b7a7ebad5c2f3d3e06"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc4MjA5Mg==", "bodyText": "This could be simplified with:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                const makeSelection = (\n          \n          \n            \n                  selectorLabel: string,\n          \n          \n            \n                  queryByLabelText: (text: string) => HTMLElement | null,\n          \n          \n            \n                  getByLabelText: (text: string) => HTMLElement\n          \n          \n            \n                ) => {\n          \n          \n            \n                  // First, make sure the selector control is active\n          \n          \n            \n                  expect(queryByLabelText(selectorLabel)).toBeInTheDocument();\n          \n          \n            \n                  // And then make a selection by clicking it\n          \n          \n            \n                  fireEvent.click(getByLabelText(selectorLabel));\n          \n          \n            \n                };\n          \n          \n            \n                const makeSelection = (\n          \n          \n            \n                  findSelector: (text: string) => HTMLElement | null,\n          \n          \n            \n                ) => {\n          \n          \n            \n                  const selectorControl = findSelector();\n          \n          \n            \n                  // First, make sure the selector control is active\n          \n          \n            \n                  expect(selectorControl).toBeInTheDocument();\n          \n          \n            \n                  // And then make a selection by clicking it\n          \n          \n            \n                  fireEvent.click(selectorControl);\n          \n          \n            \n                };\n          \n      \n    \n    \n  \n\nAnd that way when you use it you'd only have to:\nmakeSelection(() => queryByLabelText(resourceType));", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530782092", "createdAt": "2020-11-26T05:30:35Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/components/SearchResult.test.tsx", "diffHunk": "@@ -172,19 +191,97 @@ describe(\"<SearchResult/>\", () => {\n     );\n   });\n \n-  it.each<[string]>([\n-    [languageStrings.searchpage.selectResource.summaryPage],\n-    [languageStrings.searchpage.selectResource.allAttachments],\n-    [languageStrings.searchpage.selectResource.attachment],\n-  ])(\n-    // todo: pass event handler in and check if it has been called.\n-    \"should display buttons for %s in Selection Session\",\n-    async (buttonLabel: string) => {\n-      updateMockRenderData();\n-      const { queryByLabelText } = await renderSearchResult(\n-        mockData.attachSearchObj\n-      );\n-      expect(queryByLabelText(buttonLabel)).toBeInTheDocument();\n-    }\n-  );\n+  describe(\"In Selection Session\", () => {\n+    const mockGlobalCourseList = jest.spyOn(\n+      LegacySelectionSessionModule,\n+      \"getGlobalCourseList\"\n+    );\n+    mockGlobalCourseList.mockReturnValue({ updateCourseList: jest.fn() });\n+\n+    const mockSelectResourceForCourseList = jest.spyOn(\n+      LegacySelectionSessionModule,\n+      \"selectResourceForCourseList\"\n+    );\n+    mockSelectResourceForCourseList.mockResolvedValue();\n+\n+    const mockSelectResourceForNonCourseList = jest.spyOn(\n+      LegacySelectionSessionModule,\n+      \"selectResourceForNonCourseList\"\n+    );\n+    mockSelectResourceForNonCourseList.mockResolvedValue();\n+\n+    const STRUCTURED = \"structured\";\n+    const SELECT_OR_ADD = \"selectOrAdd\";\n+    const selectForCourseFunc = selectResourceForCourseList;\n+    const selectForNonCourseFunc = selectResourceForNonCourseList;\n+\n+    const makeSelection = (\n+      selectorLabel: string,\n+      queryByLabelText: (text: string) => HTMLElement | null,\n+      getByLabelText: (text: string) => HTMLElement\n+    ) => {\n+      // First, make sure the selector control is active\n+      expect(queryByLabelText(selectorLabel)).toBeInTheDocument();\n+      // And then make a selection by clicking it\n+      fireEvent.click(getByLabelText(selectorLabel));\n+    };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "910096e996f444fcedc7d3b7a7ebad5c2f3d3e06"}, "originalPosition": 144}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c79dd2bb0fe7417c8d58b52acf0d770777185bff", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/c79dd2bb0fe7417c8d58b52acf0d770777185bff", "committedDate": "2020-11-26T05:47:16Z", "message": "Move the test suite for 'buildPostDataForSelectOrAdd'\nto an independent describe block."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a1f862f07cd109ca32314bbc56f69438ac2e1fa", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/0a1f862f07cd109ca32314bbc56f69438ac2e1fa", "committedDate": "2020-11-26T05:55:00Z", "message": "Simplify function 'makeSelection'."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5MDM1NzAy", "url": "https://github.com/openequella/openEQUELLA/pull/2547#pullrequestreview-539035702", "createdAt": "2020-11-26T06:59:37Z", "commit": {"oid": "0a1f862f07cd109ca32314bbc56f69438ac2e1fa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 370, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}