{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzOTI3NjQ1", "number": 2339, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzo1ODo1MFrOEoTNxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzo1ODo1MFrOEoTNxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjkzMzE4OnYy", "diffSide": "RIGHT", "path": "autotest/OldTests/src/test/java/io/github/openequella/rest/MimeTypeApiTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzo1ODo1MFrOHZTsGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDoyMjowOFrOHZUFug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5OTAzNA==", "bodyText": "So, the number 153 is the total number of mimetypes in the institution.\nCould that number be placed it a named variable to aid in readability?", "url": "https://github.com/openequella/openEQUELLA/pull/2339#discussion_r496299034", "createdAt": "2020-09-28T23:58:50Z", "author": {"login": "mrblippy"}, "path": "autotest/OldTests/src/test/java/io/github/openequella/rest/MimeTypeApiTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package io.github.openequella.rest;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import org.apache.commons.httpclient.HttpMethod;\n+import org.apache.commons.httpclient.HttpStatus;\n+import org.apache.commons.httpclient.methods.GetMethod;\n+import org.codehaus.jackson.JsonNode;\n+import org.codehaus.jackson.type.TypeReference;\n+import org.testng.annotations.Test;\n+\n+public class MimeTypeApiTest extends AbstractRestApiTest {\n+\n+  private static final String MIMETYPE_API_ENDPOINT =\n+      TEST_CONFIG.getInstitutionUrl() + \"api/mimetype\";\n+\n+  @Test\n+  public void testRetrieveMimeTypes() throws Exception {\n+    final List<MimeTypeDetail> initialFilters = getMimeTypes();\n+    assertEquals(153, initialFilters.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dad6080caa252d7badd0d06c929c8a5c847dfb9"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMzMyMA==", "bodyText": "Hmmm, this was the original test which I moved across. Ummm, well a variable could be OTT, but at the very least a magic number should be documented in some form - you are correct.\nassertEquals (like many others) allows you to specify a message. So I'll change this to:\n    assertEquals(\"The number of returned filters should match the institution total.\", 153,\n      initialFilters.size());\nWhich then provides a form of documentation, and also on failure would nicely report like:\njava.lang.AssertionError: The number of returned filters should match the institution total. \nExpected :152\nActual   :153", "url": "https://github.com/openequella/openEQUELLA/pull/2339#discussion_r496303320", "createdAt": "2020-09-29T00:13:54Z", "author": {"login": "edalex-ian"}, "path": "autotest/OldTests/src/test/java/io/github/openequella/rest/MimeTypeApiTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package io.github.openequella.rest;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import org.apache.commons.httpclient.HttpMethod;\n+import org.apache.commons.httpclient.HttpStatus;\n+import org.apache.commons.httpclient.methods.GetMethod;\n+import org.codehaus.jackson.JsonNode;\n+import org.codehaus.jackson.type.TypeReference;\n+import org.testng.annotations.Test;\n+\n+public class MimeTypeApiTest extends AbstractRestApiTest {\n+\n+  private static final String MIMETYPE_API_ENDPOINT =\n+      TEST_CONFIG.getInstitutionUrl() + \"api/mimetype\";\n+\n+  @Test\n+  public void testRetrieveMimeTypes() throws Exception {\n+    final List<MimeTypeDetail> initialFilters = getMimeTypes();\n+    assertEquals(153, initialFilters.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5OTAzNA=="}, "originalCommit": {"oid": "2dad6080caa252d7badd0d06c929c8a5c847dfb9"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwNTU5NA==", "bodyText": "Yeah, i think that's a good approach \ud83d\udc4d \ud83d\udc4d", "url": "https://github.com/openequella/openEQUELLA/pull/2339#discussion_r496305594", "createdAt": "2020-09-29T00:22:08Z", "author": {"login": "mrblippy"}, "path": "autotest/OldTests/src/test/java/io/github/openequella/rest/MimeTypeApiTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package io.github.openequella.rest;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import org.apache.commons.httpclient.HttpMethod;\n+import org.apache.commons.httpclient.HttpStatus;\n+import org.apache.commons.httpclient.methods.GetMethod;\n+import org.codehaus.jackson.JsonNode;\n+import org.codehaus.jackson.type.TypeReference;\n+import org.testng.annotations.Test;\n+\n+public class MimeTypeApiTest extends AbstractRestApiTest {\n+\n+  private static final String MIMETYPE_API_ENDPOINT =\n+      TEST_CONFIG.getInstitutionUrl() + \"api/mimetype\";\n+\n+  @Test\n+  public void testRetrieveMimeTypes() throws Exception {\n+    final List<MimeTypeDetail> initialFilters = getMimeTypes();\n+    assertEquals(153, initialFilters.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5OTAzNA=="}, "originalCommit": {"oid": "2dad6080caa252d7badd0d06c929c8a5c847dfb9"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1822, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}