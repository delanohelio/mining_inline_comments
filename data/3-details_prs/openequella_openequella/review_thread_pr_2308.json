{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwMDc3MTI4", "number": 2308, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNzo1ODo0M1rOElimgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwMTo0NzoyNVrOEqiceQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3Nzk5NjgyOnYy", "diffSide": "LEFT", "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/entity/PagedResults.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNzo1ODo0M1rOHVEW9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNzo1ODo0M1rOHVEW9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg1MzU1Nw==", "bodyText": "After removing amountToTry, moving nextLot and privMap to the object level  and renaming them, this method looks easier to read and understand to me, but I have not worked out how to properly move ExtraPrivs outside.", "url": "https://github.com/openequella/openEQUELLA/pull/2308#discussion_r491853557", "createdAt": "2020-09-21T07:58:43Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/entity/PagedResults.scala", "diffHunk": "@@ -58,53 +58,55 @@ object PagedResults {\n \n     val allReqPriv = if (full) forFull ++ privilege else privilege\n \n+    // All Collections, including dynamic Collections.\n+    val baseEntities = res.getEntityService.query(\n+      new EnumerateOptions(q, -1, MaxEntities, system, if (includeDisabled) null else false))\n+    // A list of Collections which users have permissions to access.\n+    val availableEntities = baseEntities.asScala.collect {\n+      case be if !LegacyGuice.aclManager.filterNonGrantedPrivileges(be, privilege.asJava).isEmpty =>\n+        be\n+    }\n+    // Return a map where the key is a base entity and the value is a another map for the entity's ACLs.\n+    // Depending on the value of offset, some available entities are not added into the map.\n+    def getPrivilegeMap(offset: Int): Map[BE, java.util.Map[String, java.lang.Boolean]] =\n+      LegacyGuice.aclManager\n+        .getPrivilegesForObjects(allReqPriv.asJavaCollection, availableEntities.drop(offset).asJava)\n+        .asScala\n+        .toMap\n+\n     @tailrec\n     def collectMore(\n         len: Int,\n         offset: Int,\n-        tried: Int,\n-        vec: Vector[(BE, Boolean, Set[String])]): (Int, Vector[(BE, Boolean, Set[String])]) = {\n-      if (len <= 0 || tried >= MaxEntities) (offset, vec)\n-      else {\n-        val amountToTry = if (tried == 0) len * 2 else MaxEntities - tried\n-        val nextLot = res.getEntityService.query(\n-          new EnumerateOptions(q,\n-                               offset,\n-                               amountToTry,\n-                               system,\n-                               if (includeDisabled) null else false))\n-        val nextOffset = offset + nextLot.size()\n-        if (nextOffset == offset) {\n-          (offset, vec)\n-        } else {\n-          val privMap = LegacyGuice.aclManager\n-            .getPrivilegesForObjects(allReqPriv.asJavaCollection, nextLot)\n-            .asScala\n-          object ExtraPrivs {\n-            def unapply(be: BE): Option[(BE, Set[String])] = privMap.get(be).map { p =>\n+        vec: Vector[(BE, Boolean, Set[String])]): (Vector[(BE, Boolean, Set[String])]) = {\n+      if (len <= 0 || availableEntities.length < offset) {\n+        (vec)\n+      } else {\n+        object ExtraPrivs {\n+          def unapply(be: BE): Option[(BE, Set[String])] = getPrivilegeMap(offset).get(be).map {\n+            p =>\n               (be, allReqPriv & p.asScala.keySet)\n-            }\n           }\n-          val withPriv = nextLot.asScala", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bebee625a65f22ac90b6404bc39650a4a38eae2"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODAzMzQ4OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/entity/PagedResults.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODowOTo0NFrOHVEsJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODowOTo0NFrOHVEsJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg1ODk4Mw==", "bodyText": "I wonder if peope are confused about the use of drop so let me give an example.\nSay there are 15 available entities. The initial token is 0:10, which means offset is 0 and length is 10. So the first response include the first 10 entities.  And then, the secdon token must be 10:10. Because we already have the first 10 entities, we drop them and only get 11th - 15th entities.", "url": "https://github.com/openequella/openEQUELLA/pull/2308#discussion_r491858983", "createdAt": "2020-09-21T08:09:44Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/entity/PagedResults.scala", "diffHunk": "@@ -58,53 +58,55 @@ object PagedResults {\n \n     val allReqPriv = if (full) forFull ++ privilege else privilege\n \n+    // All Collections, including dynamic Collections.\n+    val baseEntities = res.getEntityService.query(\n+      new EnumerateOptions(q, -1, MaxEntities, system, if (includeDisabled) null else false))\n+    // A list of Collections which users have permissions to access.\n+    val availableEntities = baseEntities.asScala.collect {\n+      case be if !LegacyGuice.aclManager.filterNonGrantedPrivileges(be, privilege.asJava).isEmpty =>\n+        be\n+    }\n+    // Return a map where the key is a base entity and the value is a another map for the entity's ACLs.\n+    // Depending on the value of offset, some available entities are not added into the map.\n+    def getPrivilegeMap(offset: Int): Map[BE, java.util.Map[String, java.lang.Boolean]] =\n+      LegacyGuice.aclManager\n+        .getPrivilegesForObjects(allReqPriv.asJavaCollection, availableEntities.drop(offset).asJava)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bebee625a65f22ac90b6404bc39650a4a38eae2"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NjA4OTM3OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/search/SearchHelper.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDo0MDozNVrOHWRBUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDo0MDozNVrOHWRBUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwOTU4NA==", "bodyText": "Strange that to get a count of the number of comments, we first go and retrieve all the comments from the DB. This is unnecessary load on the DB, normally you'd just do a count query. I note however that the Service currently lacks such a method. Might be good to keep the new methods you have - as we'll need them later - but maybe we should do this properly with a DB call.", "url": "https://github.com/openequella/openEQUELLA/pull/2308#discussion_r493109584", "createdAt": "2020-09-23T00:40:35Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/search/SearchHelper.scala", "diffHunk": "@@ -197,7 +196,7 @@ object SearchHelper {\n       createdDate = bean.getCreatedDate,\n       modifiedDate = bean.getModifiedDate,\n       collectionId = bean.getCollection.getUuid,\n-      commentCount,\n+      commentCount = getItemComments(key).map(_.size),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bebee625a65f22ac90b6404bc39650a4a38eae2"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NjA5MzMwOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/entity/PagedResults.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDo0MzowN1rOHWRDsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDo0MzowN1rOHWRDsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzExMDE5Mg==", "bodyText": "As discussed, there's an issue here to resolve before I can review the Collections part of this PR.", "url": "https://github.com/openequella/openEQUELLA/pull/2308#discussion_r493110192", "createdAt": "2020-09-23T00:43:07Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/entity/PagedResults.scala", "diffHunk": "@@ -58,53 +58,55 @@ object PagedResults {\n \n     val allReqPriv = if (full) forFull ++ privilege else privilege\n \n+    // All Collections, including dynamic Collections.\n+    val baseEntities = res.getEntityService.query(\n+      new EnumerateOptions(q, -1, MaxEntities, system, if (includeDisabled) null else false))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bebee625a65f22ac90b6404bc39650a4a38eae2"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTM0MDkxOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/item/standard/service/impl/ItemCommentServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzowODo0MlrOHXD_Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMTo0MzoxM1rOHXGzfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk0NDY2Mg==", "bodyText": "I did not create a new method for comment count. Instead, I reused itemDao.getCommentCounts like how old search page uses it.", "url": "https://github.com/openequella/openEQUELLA/pull/2308#discussion_r493944662", "createdAt": "2020-09-23T23:08:42Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/item/standard/service/impl/ItemCommentServiceImpl.java", "diffHunk": "@@ -85,6 +89,27 @@ public Comment getComment(Item item, String commentUuid) {\n     return getComments(item, filter, order, limit);\n   }\n \n+  @Override\n+  @Transactional\n+  public List<Comment> getCommentsWithACLCheck(\n+      ItemKey itemId, EnumSet<CommentFilter> filter, CommentOrder order, int limit) {\n+    Item item = itemDao.getExistingItem(itemId);\n+    if (canViewComment(item)) {\n+      return getComments(item, filter, order, limit);\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  @Transactional\n+  public int getCommentCountWithACLCheck(ItemKey itemId) {\n+    Item item = itemDao.getExistingItem(itemId);\n+    if (canViewComment(item)) {\n+      return itemDao.getCommentCounts(Collections.singletonList(item)).get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "823c0077832d416b18ad584be9109f56c0489d39"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk5MDc4Mw==", "bodyText": "Good find, I see it's doing a HQL count(), so that's perfect. \ud83d\udc4d", "url": "https://github.com/openequella/openEQUELLA/pull/2308#discussion_r493990783", "createdAt": "2020-09-24T01:43:13Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/item/standard/service/impl/ItemCommentServiceImpl.java", "diffHunk": "@@ -85,6 +89,27 @@ public Comment getComment(Item item, String commentUuid) {\n     return getComments(item, filter, order, limit);\n   }\n \n+  @Override\n+  @Transactional\n+  public List<Comment> getCommentsWithACLCheck(\n+      ItemKey itemId, EnumSet<CommentFilter> filter, CommentOrder order, int limit) {\n+    Item item = itemDao.getExistingItem(itemId);\n+    if (canViewComment(item)) {\n+      return getComments(item, filter, order, limit);\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  @Transactional\n+  public int getCommentCountWithACLCheck(ItemKey itemId) {\n+    Item item = itemDao.getExistingItem(itemId);\n+    if (canViewComment(item)) {\n+      return itemDao.getCommentCounts(Collections.singletonList(item)).get(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk0NDY2Mg=="}, "originalCommit": {"oid": "823c0077832d416b18ad584be9109f56c0489d39"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTY4NzgyOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/item/standard/service/impl/ItemCommentServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMjowNToxN1rOHXHJfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMjowNToxN1rOHXHJfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk5NjQxNA==", "bodyText": "I'm just thinking. Both the methods above which call this are almost the same. And indeed, if you change the above two methods to instead return Optional<List<Comment>> and Optional<Integer> you could then possibly change this method to take a lambda which receives an Item and the returns an Optional (returning Optional.empty() if can't view comments). And then the other two methods could look something like (the very rough code):\n@Override\n@Transactional\npublic Optional<Integer> getCommentCountWithACLCheck(ItemKey itemId) {\n  return canViewComment( itemId, (item) -> Optional.of(\n    itemDao.getCommentCounts(Collections.singletonList(item)).get(0)\n  ));\n}", "url": "https://github.com/openequella/openEQUELLA/pull/2308#discussion_r493996414", "createdAt": "2020-09-24T02:05:17Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/item/standard/service/impl/ItemCommentServiceImpl.java", "diffHunk": "@@ -159,6 +184,11 @@ AddCommentOperation comment(\n     ReassignOperation reassign(\n         @Assisted(\"fromUserId\") String fromUserId, @Assisted(\"toUserId\") String toUserId);\n   }\n+\n+  private boolean canViewComment(Item item) {\n+    Set<String> privileges = tleAclManager.filterNonGrantedPrivileges(item, COMMENT_VIEW_ITEM);\n+    return !privileges.isEmpty();\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "823c0077832d416b18ad584be9109f56c0489d39"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTY5MTI4OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/entity/PagedResults.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMjowNzoxNlrOHXHLjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMjowNzoxNlrOHXHLjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk5Njk0Mw==", "bodyText": "We may want to make a comment here to highlight we're retrieving all. But this is done in a considered way that the targetted BaseEntities are all small datasets.", "url": "https://github.com/openequella/openEQUELLA/pull/2308#discussion_r493996943", "createdAt": "2020-09-24T02:07:16Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/entity/PagedResults.scala", "diffHunk": "@@ -58,59 +58,79 @@ object PagedResults {\n \n     val allReqPriv = if (full) forFull ++ privilege else privilege\n \n+    def getBaseEntities(offset: Int, max: Int): List[BE] =\n+      res.getEntityService\n+        .query(new EnumerateOptions(q, offset, max, system, if (includeDisabled) null else false))\n+        .asScala\n+        .toList\n+\n+    def getPrivilegeMap(entities: List[BE]): Map[BE, java.util.Map[String, java.lang.Boolean]] =\n+      LegacyGuice.aclManager\n+        .getPrivilegesForObjects(allReqPriv.asJavaCollection, entities.asJava)\n+        .asScala\n+        .toMap\n+\n+    val available: Int = {\n+      val entities = getBaseEntities(0, -1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "823c0077832d416b18ad584be9109f56c0489d39"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTcxMjk5OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/entity/PagedResults.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMjoyMDoyNVrOHXHYMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMjoyMDoyNVrOHXHYMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAwMDE3Ng==", "bodyText": "I find it kinda wierd how we're relying on always getting MaxEntities (rather than say length) and then hoping we can prune it down. Rather then getting length entities, and topping it up with more queries as needed.\nFeels like there's a chance that MaxEntities could potentially fail to have enough, and then we'd fall short. But maybe that's an extreme edge case. Or... Maybe I'm also mis-understanding something here. (I don't find collectMore that readable.)", "url": "https://github.com/openequella/openEQUELLA/pull/2308#discussion_r494000176", "createdAt": "2020-09-24T02:20:25Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/entity/PagedResults.scala", "diffHunk": "@@ -58,59 +58,79 @@ object PagedResults {\n \n     val allReqPriv = if (full) forFull ++ privilege else privilege\n \n+    def getBaseEntities(offset: Int, max: Int): List[BE] =\n+      res.getEntityService\n+        .query(new EnumerateOptions(q, offset, max, system, if (includeDisabled) null else false))\n+        .asScala\n+        .toList\n+\n+    def getPrivilegeMap(entities: List[BE]): Map[BE, java.util.Map[String, java.lang.Boolean]] =\n+      LegacyGuice.aclManager\n+        .getPrivilegesForObjects(allReqPriv.asJavaCollection, entities.asJava)\n+        .asScala\n+        .toMap\n+\n+    val available: Int = {\n+      val entities = getBaseEntities(0, -1)\n+      entities.collect {\n+        case entity\n+            if !LegacyGuice.aclManager\n+              .filterNonGrantedPrivileges(entity, allReqPriv.asJavaCollection)\n+              .isEmpty =>\n+          entity\n+      }.length\n+    }\n+\n     @tailrec\n     def collectMore(\n         len: Int,\n         offset: Int,\n-        tried: Int,\n         vec: Vector[(BE, Boolean, Set[String])]): (Int, Vector[(BE, Boolean, Set[String])]) = {\n-      if (len <= 0 || tried >= MaxEntities) (offset, vec)\n-      else {\n-        val amountToTry = if (tried == 0) len * 2 else MaxEntities - tried\n-        val nextLot = res.getEntityService.query(\n-          new EnumerateOptions(q,\n-                               offset,\n-                               amountToTry,\n-                               system,\n-                               if (includeDisabled) null else false))\n-        val nextOffset = offset + nextLot.size()\n-        if (nextOffset == offset) {\n-          (offset, vec)\n-        } else {\n-          val privMap = LegacyGuice.aclManager\n-            .getPrivilegesForObjects(allReqPriv.asJavaCollection, nextLot)\n-            .asScala\n-          object ExtraPrivs {\n-            def unapply(be: BE): Option[(BE, Set[String])] = privMap.get(be).map { p =>\n-              (be, allReqPriv & p.asScala.keySet)\n-            }\n+      val baseEntities = getBaseEntities(offset, MaxEntities)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "823c0077832d416b18ad584be9109f56c0489d39"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNjM0Nzg3OnYy", "diffSide": "RIGHT", "path": "autotest/OldTests/src/test/java/io/github/openequella/rest/BaseEntityAPITest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwMzoyOTo1N1rOHcMwIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjowODo0MlrOHcvceQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTMzMTEwNg==", "bodyText": "Just something to ponder...\nYou can make this a bit stricter on typing with:\n  @DataProvider(name = \"initialResumptionTokens\")\n  public static Iterator<String> tokens() {\n    return Arrays.asList({\"0:5\"}, {\"0:10\"}, {\"0:20\"}).iterator();\n  }", "url": "https://github.com/openequella/openEQUELLA/pull/2308#discussion_r499331106", "createdAt": "2020-10-05T03:29:57Z", "author": {"login": "edalex-ian"}, "path": "autotest/OldTests/src/test/java/io/github/openequella/rest/BaseEntityAPITest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package io.github.openequella.rest;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import org.apache.commons.httpclient.HttpMethod;\n+import org.apache.commons.httpclient.HttpStatus;\n+import org.apache.commons.httpclient.NameValuePair;\n+import org.apache.commons.httpclient.methods.GetMethod;\n+import org.codehaus.jackson.JsonNode;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+public class BaseEntityAPITest extends AbstractRestApiTest {\n+  private static final String COLLECTION_API_ENDPOINT =\n+      TEST_CONFIG.getInstitutionUrl() + \"api/collection\";\n+\n+  @DataProvider(name = \"initialResumptionTokens\")\n+  public static Object[][] tokens() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f47348b2a3eb6b96d0af852e05c56c0f2139c29"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM3NDA2Ng==", "bodyText": "We probably need to update TESTNG to change the type of DataProvider.", "url": "https://github.com/openequella/openEQUELLA/pull/2308#discussion_r499374066", "createdAt": "2020-10-05T06:46:10Z", "author": {"login": "PenghaiZhang"}, "path": "autotest/OldTests/src/test/java/io/github/openequella/rest/BaseEntityAPITest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package io.github.openequella.rest;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import org.apache.commons.httpclient.HttpMethod;\n+import org.apache.commons.httpclient.HttpStatus;\n+import org.apache.commons.httpclient.NameValuePair;\n+import org.apache.commons.httpclient.methods.GetMethod;\n+import org.codehaus.jackson.JsonNode;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+public class BaseEntityAPITest extends AbstractRestApiTest {\n+  private static final String COLLECTION_API_ENDPOINT =\n+      TEST_CONFIG.getInstitutionUrl() + \"api/collection\";\n+\n+  @DataProvider(name = \"initialResumptionTokens\")\n+  public static Object[][] tokens() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTMzMTEwNg=="}, "originalCommit": {"oid": "8f47348b2a3eb6b96d0af852e05c56c0f2139c29"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg5NjA5Mg==", "bodyText": "Yeah, we did have a Renovate PR there for a bit, but it got closed. #2022", "url": "https://github.com/openequella/openEQUELLA/pull/2308#discussion_r499896092", "createdAt": "2020-10-05T21:59:52Z", "author": {"login": "edalex-ian"}, "path": "autotest/OldTests/src/test/java/io/github/openequella/rest/BaseEntityAPITest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package io.github.openequella.rest;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import org.apache.commons.httpclient.HttpMethod;\n+import org.apache.commons.httpclient.HttpStatus;\n+import org.apache.commons.httpclient.NameValuePair;\n+import org.apache.commons.httpclient.methods.GetMethod;\n+import org.codehaus.jackson.JsonNode;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+public class BaseEntityAPITest extends AbstractRestApiTest {\n+  private static final String COLLECTION_API_ENDPOINT =\n+      TEST_CONFIG.getInstitutionUrl() + \"api/collection\";\n+\n+  @DataProvider(name = \"initialResumptionTokens\")\n+  public static Object[][] tokens() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTMzMTEwNg=="}, "originalCommit": {"oid": "8f47348b2a3eb6b96d0af852e05c56c0f2139c29"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg5OTUxMw==", "bodyText": "I see that PR failed on scala check, but I can't remember why we did not give Renovate some help.", "url": "https://github.com/openequella/openEQUELLA/pull/2308#discussion_r499899513", "createdAt": "2020-10-05T22:08:42Z", "author": {"login": "PenghaiZhang"}, "path": "autotest/OldTests/src/test/java/io/github/openequella/rest/BaseEntityAPITest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package io.github.openequella.rest;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import org.apache.commons.httpclient.HttpMethod;\n+import org.apache.commons.httpclient.HttpStatus;\n+import org.apache.commons.httpclient.NameValuePair;\n+import org.apache.commons.httpclient.methods.GetMethod;\n+import org.codehaus.jackson.JsonNode;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+public class BaseEntityAPITest extends AbstractRestApiTest {\n+  private static final String COLLECTION_API_ENDPOINT =\n+      TEST_CONFIG.getInstitutionUrl() + \"api/collection\";\n+\n+  @DataProvider(name = \"initialResumptionTokens\")\n+  public static Object[][] tokens() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTMzMTEwNg=="}, "originalCommit": {"oid": "8f47348b2a3eb6b96d0af852e05c56c0f2139c29"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNjM1OTUxOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/entity/PagedResults.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwMzo0MDoxOVrOHcM2mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwMzo0MDoxOVrOHcM2mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTMzMjc2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // If there is no enough quota for all filtered entities, find out index of the\n          \n          \n            \n                    // entity which is the last one in the result list. Then, plus the index to offset.\n          \n          \n            \n                    // If quota is enough then simply plus the length of entities to offset.\n          \n          \n            \n                    // The offset for subsequent calls needs to take into account the potential\n          \n          \n            \n                    // skipping of entities due to filtering by ACLs.\n          \n          \n            \n                    // If there is not enough quota after filtering entities, calculate the offset\n          \n          \n            \n                    // for the next call by adding the index of the last entity in the result list\n          \n          \n            \n                    // to the current offset.\n          \n          \n            \n                    // If there is enough for the quota, then simply return the current offset plus\n          \n          \n            \n                    // the length of retrieved entities.", "url": "https://github.com/openequella/openEQUELLA/pull/2308#discussion_r499332763", "createdAt": "2020-10-05T03:40:19Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/entity/PagedResults.scala", "diffHunk": "@@ -58,61 +56,70 @@ object PagedResults {\n \n     val allReqPriv = if (full) forFull ++ privilege else privilege\n \n-    @tailrec\n-    def collectMore(\n-        len: Int,\n-        offset: Int,\n-        tried: Int,\n-        vec: Vector[(BE, Boolean, Set[String])]): (Int, Vector[(BE, Boolean, Set[String])]) = {\n-      if (len <= 0 || tried >= MaxEntities) (offset, vec)\n-      else {\n-        val amountToTry = if (tried == 0) len * 2 else MaxEntities - tried\n-        val nextLot = res.getEntityService.query(\n-          new EnumerateOptions(q,\n-                               offset,\n-                               amountToTry,\n-                               system,\n-                               if (includeDisabled) null else false))\n-        val nextOffset = offset + nextLot.size()\n-        if (nextOffset == offset) {\n-          (offset, vec)\n+    def getBaseEntities(offset: Int, max: Int): List[BE] =\n+      res.getEntityService\n+        .query(new EnumerateOptions(q, offset, max, system, if (includeDisabled) null else false))\n+        .asScala\n+        .toList\n+\n+    def filterByPermission(entities: List[BE]): List[BE] = {\n+      entities.filter(\n+        entity =>\n+          !LegacyGuice.aclManager\n+            .filterNonGrantedPrivileges(entity, allReqPriv.asJavaCollection)\n+            .isEmpty)\n+    }\n+\n+    def getAvailable: Int = {\n+      // It's acceptable to retrieve all because targeted BaseEntities are all small datasets.\n+      val entities = getBaseEntities(0, -1)\n+      filterByPermission(entities).length\n+    }\n+\n+    def collectMore(length: Int, initialOffset: Int): (Int, List[BE]) = {\n+      val results: ListBuffer[BE] = ListBuffer()\n+      var offset                  = initialOffset\n+      var filteredEntityQuota     = length // Indicate how many entities can be put in the result list.\n+      while (filteredEntityQuota > 0) {\n+        val entities: List[BE] = getBaseEntities(offset, length)\n+        if (entities.isEmpty) {\n+          return (offset, results.toList)\n+        }\n+\n+        // Filter entities by permissions.\n+        val filteredEntities = filterByPermission(entities)\n+\n+        results ++= filteredEntities.take(filteredEntityQuota)\n+\n+        // If there is no enough quota for all filtered entities, find out index of the\n+        // entity which is the last one in the result list. Then, plus the index to offset.\n+        // If quota is enough then simply plus the length of entities to offset.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f47348b2a3eb6b96d0af852e05c56c0f2139c29"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNjM2MjM1OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/entity/PagedResults.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwMzo0Mjo1N1rOHcM4YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwMzo0Mjo1N1rOHcM4YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTMzMzIxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // When there are no enough entities retrieved, do not return a resumption token.\n          \n          \n            \n                // When the number of results returned are less than asked for, we have reached the end.\n          \n          \n            \n                // So do not return a resumption token.", "url": "https://github.com/openequella/openEQUELLA/pull/2308#discussion_r499333217", "createdAt": "2020-10-05T03:42:57Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/entity/PagedResults.scala", "diffHunk": "@@ -58,61 +56,70 @@ object PagedResults {\n \n     val allReqPriv = if (full) forFull ++ privilege else privilege\n \n-    @tailrec\n-    def collectMore(\n-        len: Int,\n-        offset: Int,\n-        tried: Int,\n-        vec: Vector[(BE, Boolean, Set[String])]): (Int, Vector[(BE, Boolean, Set[String])]) = {\n-      if (len <= 0 || tried >= MaxEntities) (offset, vec)\n-      else {\n-        val amountToTry = if (tried == 0) len * 2 else MaxEntities - tried\n-        val nextLot = res.getEntityService.query(\n-          new EnumerateOptions(q,\n-                               offset,\n-                               amountToTry,\n-                               system,\n-                               if (includeDisabled) null else false))\n-        val nextOffset = offset + nextLot.size()\n-        if (nextOffset == offset) {\n-          (offset, vec)\n+    def getBaseEntities(offset: Int, max: Int): List[BE] =\n+      res.getEntityService\n+        .query(new EnumerateOptions(q, offset, max, system, if (includeDisabled) null else false))\n+        .asScala\n+        .toList\n+\n+    def filterByPermission(entities: List[BE]): List[BE] = {\n+      entities.filter(\n+        entity =>\n+          !LegacyGuice.aclManager\n+            .filterNonGrantedPrivileges(entity, allReqPriv.asJavaCollection)\n+            .isEmpty)\n+    }\n+\n+    def getAvailable: Int = {\n+      // It's acceptable to retrieve all because targeted BaseEntities are all small datasets.\n+      val entities = getBaseEntities(0, -1)\n+      filterByPermission(entities).length\n+    }\n+\n+    def collectMore(length: Int, initialOffset: Int): (Int, List[BE]) = {\n+      val results: ListBuffer[BE] = ListBuffer()\n+      var offset                  = initialOffset\n+      var filteredEntityQuota     = length // Indicate how many entities can be put in the result list.\n+      while (filteredEntityQuota > 0) {\n+        val entities: List[BE] = getBaseEntities(offset, length)\n+        if (entities.isEmpty) {\n+          return (offset, results.toList)\n+        }\n+\n+        // Filter entities by permissions.\n+        val filteredEntities = filterByPermission(entities)\n+\n+        results ++= filteredEntities.take(filteredEntityQuota)\n+\n+        // If there is no enough quota for all filtered entities, find out index of the\n+        // entity which is the last one in the result list. Then, plus the index to offset.\n+        // If quota is enough then simply plus the length of entities to offset.\n+        if (filteredEntityQuota < filteredEntities.length && results.nonEmpty) {\n+          offset += entities.indexOf(results.last) + 1\n         } else {\n-          val privMap = LegacyGuice.aclManager\n-            .getPrivilegesForObjects(allReqPriv.asJavaCollection, nextLot)\n-            .asScala\n-          object ExtraPrivs {\n-            def unapply(be: BE): Option[(BE, Set[String])] = privMap.get(be).map { p =>\n-              (be, allReqPriv & p.asScala.keySet)\n-            }\n-          }\n-          val withPriv = nextLot.asScala\n-            .collect {\n-              case ExtraPrivs(be, privs) if privs.count(privilege) > 0 =>\n-                (be, full && privs.exists(forFull), privs)\n-            }\n-            .take(len)\n-          collectMore(len - withPriv.size, nextOffset, tried + amountToTry, vec ++ withPriv)\n+          offset += entities.length\n         }\n+        filteredEntityQuota = length - results.length\n       }\n+      (offset, results.toList)\n     }\n+\n     def addPrivs(privs: Set[String], b: BEB): BEB = {\n       b.setReadonly(new BaseEntityReadOnly(privs.asJavaCollection))\n       b\n     }\n \n-    val (_, results) = collectMore(_length, firstOffset, 0, Vector.empty)\n-    val pb           = new PagingBean[BEB]\n-    val available = res.getEntityService\n-      .countAll(new EnumerateOptions(q, 0, -1, system, if (includeDisabled) null else false))\n-      .toInt\n+    val (nextOffset, results) = collectMore(_length, firstOffset)\n+    val pb                    = new PagingBean[BEB]\n     pb.setStart(firstOffset)\n     pb.setLength(results.length)\n-    pb.setAvailable(available)\n-    // Include resumption token if there are items which can be retrieved in next request.\n-    if (results.length + firstOffset < available)\n-      pb.setResumptionToken(s\"${firstOffset + results.length}:${_length}\")\n-    pb.setResults(results.map {\n-      case (be, canFull, privs) => addPrivs(privs, res.serialize(be, null, canFull))\n+    pb.setAvailable(getAvailable)\n+    // When there are no enough entities retrieved, do not return a resumption token.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f47348b2a3eb6b96d0af852e05c56c0f2139c29"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNjM2MjY3OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/entity/PagedResults.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwMzo0MzoxNlrOHcM4jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwMzo0MzoxNlrOHcM4jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTMzMzI2Mw==", "bodyText": "Is this still TODO?", "url": "https://github.com/openequella/openEQUELLA/pull/2308#discussion_r499333263", "createdAt": "2020-10-05T03:43:16Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/entity/PagedResults.scala", "diffHunk": "@@ -58,61 +56,70 @@ object PagedResults {\n \n     val allReqPriv = if (full) forFull ++ privilege else privilege\n \n-    @tailrec\n-    def collectMore(\n-        len: Int,\n-        offset: Int,\n-        tried: Int,\n-        vec: Vector[(BE, Boolean, Set[String])]): (Int, Vector[(BE, Boolean, Set[String])]) = {\n-      if (len <= 0 || tried >= MaxEntities) (offset, vec)\n-      else {\n-        val amountToTry = if (tried == 0) len * 2 else MaxEntities - tried\n-        val nextLot = res.getEntityService.query(\n-          new EnumerateOptions(q,\n-                               offset,\n-                               amountToTry,\n-                               system,\n-                               if (includeDisabled) null else false))\n-        val nextOffset = offset + nextLot.size()\n-        if (nextOffset == offset) {\n-          (offset, vec)\n+    def getBaseEntities(offset: Int, max: Int): List[BE] =\n+      res.getEntityService\n+        .query(new EnumerateOptions(q, offset, max, system, if (includeDisabled) null else false))\n+        .asScala\n+        .toList\n+\n+    def filterByPermission(entities: List[BE]): List[BE] = {\n+      entities.filter(\n+        entity =>\n+          !LegacyGuice.aclManager\n+            .filterNonGrantedPrivileges(entity, allReqPriv.asJavaCollection)\n+            .isEmpty)\n+    }\n+\n+    def getAvailable: Int = {\n+      // It's acceptable to retrieve all because targeted BaseEntities are all small datasets.\n+      val entities = getBaseEntities(0, -1)\n+      filterByPermission(entities).length\n+    }\n+\n+    def collectMore(length: Int, initialOffset: Int): (Int, List[BE]) = {\n+      val results: ListBuffer[BE] = ListBuffer()\n+      var offset                  = initialOffset\n+      var filteredEntityQuota     = length // Indicate how many entities can be put in the result list.\n+      while (filteredEntityQuota > 0) {\n+        val entities: List[BE] = getBaseEntities(offset, length)\n+        if (entities.isEmpty) {\n+          return (offset, results.toList)\n+        }\n+\n+        // Filter entities by permissions.\n+        val filteredEntities = filterByPermission(entities)\n+\n+        results ++= filteredEntities.take(filteredEntityQuota)\n+\n+        // If there is no enough quota for all filtered entities, find out index of the\n+        // entity which is the last one in the result list. Then, plus the index to offset.\n+        // If quota is enough then simply plus the length of entities to offset.\n+        if (filteredEntityQuota < filteredEntities.length && results.nonEmpty) {\n+          offset += entities.indexOf(results.last) + 1\n         } else {\n-          val privMap = LegacyGuice.aclManager\n-            .getPrivilegesForObjects(allReqPriv.asJavaCollection, nextLot)\n-            .asScala\n-          object ExtraPrivs {\n-            def unapply(be: BE): Option[(BE, Set[String])] = privMap.get(be).map { p =>\n-              (be, allReqPriv & p.asScala.keySet)\n-            }\n-          }\n-          val withPriv = nextLot.asScala\n-            .collect {\n-              case ExtraPrivs(be, privs) if privs.count(privilege) > 0 =>\n-                (be, full && privs.exists(forFull), privs)\n-            }\n-            .take(len)\n-          collectMore(len - withPriv.size, nextOffset, tried + amountToTry, vec ++ withPriv)\n+          offset += entities.length\n         }\n+        filteredEntityQuota = length - results.length\n       }\n+      (offset, results.toList)\n     }\n+\n     def addPrivs(privs: Set[String], b: BEB): BEB = {\n       b.setReadonly(new BaseEntityReadOnly(privs.asJavaCollection))\n       b\n     }\n \n-    val (_, results) = collectMore(_length, firstOffset, 0, Vector.empty)\n-    val pb           = new PagingBean[BEB]\n-    val available = res.getEntityService\n-      .countAll(new EnumerateOptions(q, 0, -1, system, if (includeDisabled) null else false))\n-      .toInt\n+    val (nextOffset, results) = collectMore(_length, firstOffset)\n+    val pb                    = new PagingBean[BEB]\n     pb.setStart(firstOffset)\n     pb.setLength(results.length)\n-    pb.setAvailable(available)\n-    // Include resumption token if there are items which can be retrieved in next request.\n-    if (results.length + firstOffset < available)\n-      pb.setResumptionToken(s\"${firstOffset + results.length}:${_length}\")\n-    pb.setResults(results.map {\n-      case (be, canFull, privs) => addPrivs(privs, res.serialize(be, null, canFull))\n+    pb.setAvailable(getAvailable)\n+    // When there are no enough entities retrieved, do not return a resumption token.\n+    if (results.length == _length)\n+      pb.setResumptionToken(s\"${nextOffset}:${_length}\")\n+    // todo: Support getting full information.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f47348b2a3eb6b96d0af852e05c56c0f2139c29"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNjc1MTUyOnYy", "diffSide": "LEFT", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/portal/dao/PortletDaoImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNzoyNjozMVrOHcQZSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjowNjozMFrOHcvZWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM5MDc5Mg==", "bodyText": "Here is why PortletTest failed. The callback passed in this method is essentially a PagedListCallback so an order by will be appended to the HQL, which resulted in Postgresl error [42803]: column \"be.id\" must appear in the GROUP BY clause or be used in an aggregate function Position: 42  .\nHowever, this method is used to count the number of Portlets. There is no point to do a sorting. So I believe we should remove this if statement. One good example is method createEnumerateQuery from GenericInstitionalDaoImpl.", "url": "https://github.com/openequella/openEQUELLA/pull/2308#discussion_r499390792", "createdAt": "2020-10-05T07:26:31Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/portal/dao/PortletDaoImpl.java", "diffHunk": "@@ -158,10 +158,6 @@ public Object doInHibernate(Session session) throws HibernateException {\n                           hql.append(callback.getAdditionalWhere());\n                         }\n \n-                        if (callback != null && callback.getOrderBy() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cfaae13ea66447590c636b43da055676a9fe37d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg5ODcxNA==", "bodyText": "I agree.\nThis is odd it's doing an order for a count. I wonder if it's a case of copy pasta. \ud83e\udd14", "url": "https://github.com/openequella/openEQUELLA/pull/2308#discussion_r499898714", "createdAt": "2020-10-05T22:06:30Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/portal/dao/PortletDaoImpl.java", "diffHunk": "@@ -158,10 +158,6 @@ public Object doInHibernate(Session session) throws HibernateException {\n                           hql.append(callback.getAdditionalWhere());\n                         }\n \n-                        if (callback != null && callback.getOrderBy() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM5MDc5Mg=="}, "originalCommit": {"oid": "1cfaae13ea66447590c636b43da055676a9fe37d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTk4MDk1OnYy", "diffSide": "RIGHT", "path": "autotest/OldTests/src/test/java/io/github/openequella/rest/BaseEntityAPITest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjowODowM1rOHcvbiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjowODowM1rOHcvbiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg5OTI3NQ==", "bodyText": "Maybe expand this out then to highlight what the significance of then checking for security is. (As personally, I'm not sure what the point is...)", "url": "https://github.com/openequella/openEQUELLA/pull/2308#discussion_r499899275", "createdAt": "2020-10-05T22:08:03Z", "author": {"login": "edalex-ian"}, "path": "autotest/OldTests/src/test/java/io/github/openequella/rest/BaseEntityAPITest.java", "diffHunk": "@@ -49,6 +51,27 @@ public void getEntities(String initialToken) throws IOException {\n     assertEquals(count, 12);\n   }\n \n+  @Test\n+  public void getFullInformation() throws IOException {\n+    final HttpMethod method = new GetMethod(COLLECTION_API_ENDPOINT);\n+    final NameValuePair[] queryParams = new NameValuePair[3];\n+    queryParams[0] = new NameValuePair(\"privilege\", PERMISSION);\n+    queryParams[1] = new NameValuePair(\"full\", \"true\");\n+    queryParams[2] = new NameValuePair(\"q\", \"Basic\");\n+    method.setQueryString(queryParams);\n+\n+    int statusCode = makeClientRequest(method);\n+    assertEquals(statusCode, HttpStatus.SC_OK);\n+\n+    JsonNode results = getResultList(mapper.readTree(method.getResponseBody()));\n+\n+    // There are two Collections named 'Basic xxx'. Full information of the first one\n+    // is accessible whereas that of the second is not accessible.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cfaae13ea66447590c636b43da055676a9fe37d"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTk5NjYzOnYy", "diffSide": "RIGHT", "path": "autotest/OldTests/src/test/java/io/github/openequella/rest/BaseEntityAPITest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjoxNDoyNlrOHcvkwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjoxNDoyNlrOHcvkwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwMTYzNA==", "bodyText": "You should update getResultLength to also use this new method.", "url": "https://github.com/openequella/openEQUELLA/pull/2308#discussion_r499901634", "createdAt": "2020-10-05T22:14:26Z", "author": {"login": "edalex-ian"}, "path": "autotest/OldTests/src/test/java/io/github/openequella/rest/BaseEntityAPITest.java", "diffHunk": "@@ -60,4 +83,8 @@ private String getTokenFromResponse(JsonNode result) {\n     }\n     return null;\n   }\n+\n+  private JsonNode getResultList(JsonNode result) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cfaae13ea66447590c636b43da055676a9fe37d"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDAyNDA2OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/entity/PagedResults.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjoyNjowMFrOHcv0vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwMDoxMjo0MFrOHcx0ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwNTcyNA==", "bodyText": "The addition of this tuple ((BE, Boolean, Set[String])) is getting a bit obtuse. Especially when the return of the method is now a tuple which includes a List which contains a tuple which also includes a Set. (I think that mouthful highlights the situation.)\nI wonder if a case class may be in order for the inner tuple of (BE, Boolean, Set[String]). \ud83e\udd14", "url": "https://github.com/openequella/openEQUELLA/pull/2308#discussion_r499905724", "createdAt": "2020-10-05T22:26:00Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/entity/PagedResults.scala", "diffHunk": "@@ -76,10 +76,10 @@ object PagedResults {\n       filterByPermission(entities).length\n     }\n \n-    def collectMore(length: Int, initialOffset: Int): (Int, List[BE]) = {\n-      val results: ListBuffer[BE] = ListBuffer()\n-      var offset                  = initialOffset\n-      var filteredEntityQuota     = length // Indicate how many entities can be put in the result list.\n+    def collectMore(length: Int, initialOffset: Int): (Int, List[(BE, Boolean, Set[String])]) = {\n+      val results: ListBuffer[(BE, Boolean, Set[String])] = ListBuffer()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cfaae13ea66447590c636b43da055676a9fe37d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkzODQwNQ==", "bodyText": "It's a very good idea to use a case class here!", "url": "https://github.com/openequella/openEQUELLA/pull/2308#discussion_r499938405", "createdAt": "2020-10-06T00:12:40Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/entity/PagedResults.scala", "diffHunk": "@@ -76,10 +76,10 @@ object PagedResults {\n       filterByPermission(entities).length\n     }\n \n-    def collectMore(length: Int, initialOffset: Int): (Int, List[BE]) = {\n-      val results: ListBuffer[BE] = ListBuffer()\n-      var offset                  = initialOffset\n-      var filteredEntityQuota     = length // Indicate how many entities can be put in the result list.\n+    def collectMore(length: Int, initialOffset: Int): (Int, List[(BE, Boolean, Set[String])]) = {\n+      val results: ListBuffer[(BE, Boolean, Set[String])] = ListBuffer()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwNTcyNA=="}, "originalCommit": {"oid": "1cfaae13ea66447590c636b43da055676a9fe37d"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDM5OTkzOnYy", "diffSide": "RIGHT", "path": "autotest/Tests/tests/rest/institution/itemdefinition/25/f5db7438-a367-4c3e-85b9-ab67be09d5e6.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwMTo0NzoyNVrOHczQgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwMzowOToxMFrOHc0bug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk2MTk4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            </com.tle.beans.entity.itemdef.ItemDefinition>\n          \n          \n            \n            </com.tle.beans.entity.itemdef.ItemDefinition>", "url": "https://github.com/openequella/openEQUELLA/pull/2308#discussion_r499961987", "createdAt": "2020-10-06T01:47:25Z", "author": {"login": "ChristianMurphy"}, "path": "autotest/Tests/tests/rest/institution/itemdefinition/25/f5db7438-a367-4c3e-85b9-ab67be09d5e6.xml", "diffHunk": "@@ -0,0 +1,114 @@\n+<com.tle.beans.entity.itemdef.ItemDefinition>\n+  <id>788751</id>\n+  <uuid>f5db7438-a367-4c3e-85b9-ab67be09d5e6</uuid>\n+  <owner>TLE_ADMINISTRATOR</owner>\n+  <dateModified class=\"sql-timestamp\">2020-10-05 12:38:03.404</dateModified>\n+  <dateCreated class=\"sql-timestamp\">2020-10-05 12:38:03.404</dateCreated>\n+  <name>\n+    <id>788752</id>\n+    <strings>\n+      <entry>\n+        <string>en</string>\n+        <com.tle.beans.entity.LanguageString>\n+          <id>788753</id>\n+          <locale>en</locale>\n+          <priority>1</priority>\n+          <text>Paged List Testing Collection</text>\n+          <bundle reference=\"../../../..\"/>\n+        </com.tle.beans.entity.LanguageString>\n+      </entry>\n+    </strings>\n+  </name>\n+  <attributes/>\n+  <systemType>false</systemType>\n+  <disabled>false</disabled>\n+  <schema entityclass=\"com.tle.beans.entity.Schema\" uuid=\"d9aba963-4648-e497-d62b-fc1ddf2d0199\"/>\n+  <reviewperiod>-2147483648</reviewperiod>\n+  <slow>\n+    <id>788754</id>\n+    <itemMetadataRules/>\n+    <dynamicMetadataRules/>\n+    <wizard>\n+      <pages/>\n+      <redraftScript></redraftScript>\n+      <saveScript></saveScript>\n+      <allowNonSequentialNavigation>false</allowNonSequentialNavigation>\n+      <showPageTitlesNextPrev>false</showPageTitlesNextPrev>\n+    </wizard>\n+    <searchDetails>\n+      <attDisplay>STRUCTURED</attDisplay>\n+      <disableThumbnail>false</disableThumbnail>\n+      <standardOpen>false</standardOpen>\n+      <integrationOpen>false</integrationOpen>\n+    </searchDetails>\n+    <metadataMapping>\n+      <imsMapping class=\"list\"/>\n+      <htmlMapping class=\"list\"/>\n+      <literalMapping class=\"list\"/>\n+    </metadataMapping>\n+    <itemSummarySections>\n+      <configList>\n+        <com.tle.beans.entity.itemdef.SummarySectionsConfig>\n+          <uuid>72bb5a17-58ff-412d-9c8e-7d4430acd32b</uuid>\n+          <value>basicSection</value>\n+          <bundleTitle>\n+            <id>0</id>\n+            <strings>\n+              <entry>\n+                <string>en_AU</string>\n+                <com.tle.beans.entity.LanguageString>\n+                  <id>0</id>\n+                  <locale>en_AU</locale>\n+                  <priority>2</priority>\n+                  <text>Basic Information</text>\n+                  <bundle reference=\"../../../..\"/>\n+                </com.tle.beans.entity.LanguageString>\n+              </entry>\n+            </strings>\n+          </bundleTitle>\n+        </com.tle.beans.entity.itemdef.SummarySectionsConfig>\n+        <com.tle.beans.entity.itemdef.SummarySectionsConfig>\n+          <uuid>bd838945-7827-4d8d-8824-2012026a7575</uuid>\n+          <value>attachmentsSection</value>\n+          <bundleTitle>\n+            <id>0</id>\n+            <strings>\n+              <entry>\n+                <string>en_AU</string>\n+                <com.tle.beans.entity.LanguageString>\n+                  <id>0</id>\n+                  <locale>en_AU</locale>\n+                  <priority>2</priority>\n+                  <text>Links to resources</text>\n+                  <bundle reference=\"../../../..\"/>\n+                </com.tle.beans.entity.LanguageString>\n+              </entry>\n+            </strings>\n+          </bundleTitle>\n+        </com.tle.beans.entity.itemdef.SummarySectionsConfig>\n+        <com.tle.beans.entity.itemdef.SummarySectionsConfig>\n+          <uuid>2520cfbc-1130-4b15-b5da-c8ba77ef4912</uuid>\n+          <value>commentsSection</value>\n+          <bundleTitle>\n+            <id>0</id>\n+            <strings>\n+              <entry>\n+                <string>en_AU</string>\n+                <com.tle.beans.entity.LanguageString>\n+                  <id>0</id>\n+                  <locale>en_AU</locale>\n+                  <priority>2</priority>\n+                  <text>Add a comment</text>\n+                  <bundle reference=\"../../../..\"/>\n+                </com.tle.beans.entity.LanguageString>\n+              </entry>\n+            </strings>\n+          </bundleTitle>\n+        </com.tle.beans.entity.itemdef.SummarySectionsConfig>\n+      </configList>\n+      <hideOwner>false</hideOwner>\n+      <hideCollaborators>false</hideCollaborators>\n+    </itemSummarySections>\n+  </slow>\n+  <denyDirectContribution>false</denyDirectContribution>\n+</com.tle.beans.entity.itemdef.ItemDefinition>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1ec8eb7665cf4fb7ee9ccc4f069b52ef01b82ef"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk4MTI0Mg==", "bodyText": "Hi Christian, this xml file is from an Institution export and in the format oEQ expects.", "url": "https://github.com/openequella/openEQUELLA/pull/2308#discussion_r499981242", "createdAt": "2020-10-06T03:09:10Z", "author": {"login": "PenghaiZhang"}, "path": "autotest/Tests/tests/rest/institution/itemdefinition/25/f5db7438-a367-4c3e-85b9-ab67be09d5e6.xml", "diffHunk": "@@ -0,0 +1,114 @@\n+<com.tle.beans.entity.itemdef.ItemDefinition>\n+  <id>788751</id>\n+  <uuid>f5db7438-a367-4c3e-85b9-ab67be09d5e6</uuid>\n+  <owner>TLE_ADMINISTRATOR</owner>\n+  <dateModified class=\"sql-timestamp\">2020-10-05 12:38:03.404</dateModified>\n+  <dateCreated class=\"sql-timestamp\">2020-10-05 12:38:03.404</dateCreated>\n+  <name>\n+    <id>788752</id>\n+    <strings>\n+      <entry>\n+        <string>en</string>\n+        <com.tle.beans.entity.LanguageString>\n+          <id>788753</id>\n+          <locale>en</locale>\n+          <priority>1</priority>\n+          <text>Paged List Testing Collection</text>\n+          <bundle reference=\"../../../..\"/>\n+        </com.tle.beans.entity.LanguageString>\n+      </entry>\n+    </strings>\n+  </name>\n+  <attributes/>\n+  <systemType>false</systemType>\n+  <disabled>false</disabled>\n+  <schema entityclass=\"com.tle.beans.entity.Schema\" uuid=\"d9aba963-4648-e497-d62b-fc1ddf2d0199\"/>\n+  <reviewperiod>-2147483648</reviewperiod>\n+  <slow>\n+    <id>788754</id>\n+    <itemMetadataRules/>\n+    <dynamicMetadataRules/>\n+    <wizard>\n+      <pages/>\n+      <redraftScript></redraftScript>\n+      <saveScript></saveScript>\n+      <allowNonSequentialNavigation>false</allowNonSequentialNavigation>\n+      <showPageTitlesNextPrev>false</showPageTitlesNextPrev>\n+    </wizard>\n+    <searchDetails>\n+      <attDisplay>STRUCTURED</attDisplay>\n+      <disableThumbnail>false</disableThumbnail>\n+      <standardOpen>false</standardOpen>\n+      <integrationOpen>false</integrationOpen>\n+    </searchDetails>\n+    <metadataMapping>\n+      <imsMapping class=\"list\"/>\n+      <htmlMapping class=\"list\"/>\n+      <literalMapping class=\"list\"/>\n+    </metadataMapping>\n+    <itemSummarySections>\n+      <configList>\n+        <com.tle.beans.entity.itemdef.SummarySectionsConfig>\n+          <uuid>72bb5a17-58ff-412d-9c8e-7d4430acd32b</uuid>\n+          <value>basicSection</value>\n+          <bundleTitle>\n+            <id>0</id>\n+            <strings>\n+              <entry>\n+                <string>en_AU</string>\n+                <com.tle.beans.entity.LanguageString>\n+                  <id>0</id>\n+                  <locale>en_AU</locale>\n+                  <priority>2</priority>\n+                  <text>Basic Information</text>\n+                  <bundle reference=\"../../../..\"/>\n+                </com.tle.beans.entity.LanguageString>\n+              </entry>\n+            </strings>\n+          </bundleTitle>\n+        </com.tle.beans.entity.itemdef.SummarySectionsConfig>\n+        <com.tle.beans.entity.itemdef.SummarySectionsConfig>\n+          <uuid>bd838945-7827-4d8d-8824-2012026a7575</uuid>\n+          <value>attachmentsSection</value>\n+          <bundleTitle>\n+            <id>0</id>\n+            <strings>\n+              <entry>\n+                <string>en_AU</string>\n+                <com.tle.beans.entity.LanguageString>\n+                  <id>0</id>\n+                  <locale>en_AU</locale>\n+                  <priority>2</priority>\n+                  <text>Links to resources</text>\n+                  <bundle reference=\"../../../..\"/>\n+                </com.tle.beans.entity.LanguageString>\n+              </entry>\n+            </strings>\n+          </bundleTitle>\n+        </com.tle.beans.entity.itemdef.SummarySectionsConfig>\n+        <com.tle.beans.entity.itemdef.SummarySectionsConfig>\n+          <uuid>2520cfbc-1130-4b15-b5da-c8ba77ef4912</uuid>\n+          <value>commentsSection</value>\n+          <bundleTitle>\n+            <id>0</id>\n+            <strings>\n+              <entry>\n+                <string>en_AU</string>\n+                <com.tle.beans.entity.LanguageString>\n+                  <id>0</id>\n+                  <locale>en_AU</locale>\n+                  <priority>2</priority>\n+                  <text>Add a comment</text>\n+                  <bundle reference=\"../../../..\"/>\n+                </com.tle.beans.entity.LanguageString>\n+              </entry>\n+            </strings>\n+          </bundleTitle>\n+        </com.tle.beans.entity.itemdef.SummarySectionsConfig>\n+      </configList>\n+      <hideOwner>false</hideOwner>\n+      <hideCollaborators>false</hideCollaborators>\n+    </itemSummarySections>\n+  </slow>\n+  <denyDirectContribution>false</denyDirectContribution>\n+</com.tle.beans.entity.itemdef.ItemDefinition>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk2MTk4Nw=="}, "originalCommit": {"oid": "e1ec8eb7665cf4fb7ee9ccc4f069b52ef01b82ef"}, "originalPosition": 114}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1814, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}