{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3MDUxMzgw", "number": 1631, "title": "Entity, DAO and Service for Faceted Search Classification", "bodyText": "#764\nChecklist\n\n the [contributor license agreement] is signed\n commit message follows [commit guidelines]\n\nDescription of change\nThe initial work creates a new entity which maps the faceted_search_classification table, and creates the DAO and Service layers for Faceted Search Classification.", "createdAt": "2020-04-22T05:14:28Z", "url": "https://github.com/openequella/openEQUELLA/pull/1631", "merged": true, "mergeCommit": {"oid": "bf3ad59d6c074499910e54963fe21e214c5b6c23"}, "closed": true, "closedAt": "2020-04-26T23:14:13Z", "author": {"login": "PenghaiZhang"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaBLVgAH2gAyNDA3MDUxMzgwOjZiZTJlZTkzYzhjZjVlZDBiZGI5MTFjYjE4N2I0ZDdmNTYxZTlhOWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcar6cYAH2gAyNDA3MDUxMzgwOjdkMzc3N2M2YjI3MTgzMDJlYzk0MmQ1OTEyNWVlMTZmZDM3ZWQzNTQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6be2ee93c8cf5ed0bdb911cb187b4d7f561e9a9a", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/6be2ee93c8cf5ed0bdb911cb187b4d7f561e9a9a", "committedDate": "2020-04-22T05:10:24Z", "message": "Entity, DAO and Service for the Faceted Search Classification.\n\nSupport create, retrieve, update and delete one Faceted Search Classification,\nand retrieve all classifications."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3ODQ5MzE4", "url": "https://github.com/openequella/openEQUELLA/pull/1631#pullrequestreview-397849318", "createdAt": "2020-04-22T05:16:11Z", "commit": {"oid": "6be2ee93c8cf5ed0bdb911cb187b4d7f561e9a9a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNToxNjoxMVrOGJjvzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNTozMDoyOVrOGJkDRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3NjA0NA==", "bodyText": "I am not sure if maxResults and orderIndex can be null or not so at the moment I assume they could be null.", "url": "https://github.com/openequella/openEQUELLA/pull/1631#discussion_r412676044", "createdAt": "2020-04-22T05:16:11Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/bean/FacetedSearchClassification.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.tle.core.facetedsearch.bean;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import org.hibernate.annotations.AccessType;\n+\n+@Entity\n+@AccessType(\"field\")\n+public class FacetedSearchClassification {\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.AUTO)\n+  private long id;\n+\n+  @Column(nullable = false)\n+  private long institutionId;\n+\n+  @Column @JsonIgnore private Date dateCreated;\n+\n+  @Column @JsonIgnore private Date dateModified;\n+\n+  @Column(nullable = false)\n+  private String name;\n+\n+  @Column(nullable = false)\n+  private String schemaNode;\n+\n+  private int maxResults;\n+\n+  private int orderIndex;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6be2ee93c8cf5ed0bdb911cb187b4d7f561e9a9a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY4MTAyOQ==", "bodyText": "There are two ways of doing a delete in oEQ. One is calling the delete implemented in GenericDaoImpl with an entity as parameter, and the other one is using Hibernate Query. Both are used in quite a few places.", "url": "https://github.com/openequella/openEQUELLA/pull/1631#discussion_r412681029", "createdAt": "2020-04-22T05:30:29Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/dao/FacetedSearchClassificationDaoImpl.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package com.tle.core.facetedsearch.dao;\n+\n+import com.google.inject.Singleton;\n+import com.tle.common.institution.CurrentInstitution;\n+import com.tle.core.facetedsearch.bean.FacetedSearchClassification;\n+import com.tle.core.guice.Bind;\n+import com.tle.core.hibernate.dao.GenericDaoImpl;\n+import java.util.List;\n+import org.hibernate.Query;\n+import org.hibernate.Session;\n+import org.springframework.orm.hibernate3.HibernateCallback;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Bind(FacetedSearchClassificationDao.class)\n+@Singleton\n+public class FacetedSearchClassificationDaoImpl\n+    extends GenericDaoImpl<FacetedSearchClassification, Long>\n+    implements FacetedSearchClassificationDao {\n+\n+  public FacetedSearchClassificationDaoImpl() {\n+    super(FacetedSearchClassification.class);\n+  }\n+\n+  @Override\n+  public FacetedSearchClassification getClassificationById(long id) {\n+    return (FacetedSearchClassification)\n+        getHibernateTemplate()\n+            .execute(\n+                new HibernateCallback() {\n+                  @Override\n+                  public Object doInHibernate(Session session) {\n+                    Query query =\n+                        session.createQuery(\n+                            \"FROM FacetedSearchClassification WHERE id = :id AND institution_id = :institutionId\");\n+                    query.setParameter(\"id\", id);\n+                    query.setParameter(\"institutionId\", CurrentInstitution.get().getUniqueId());\n+                    return query.uniqueResult();\n+                  }\n+                });\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @Override\n+  public List<FacetedSearchClassification> getAllClassifications() {\n+    return getHibernateTemplate()\n+        .find(\n+            \"from FacetedSearchClassification where institution_id = ?\",\n+            CurrentInstitution.get().getUniqueId());\n+  }\n+\n+  @Transactional\n+  @Override\n+  public void deleteClassification(FacetedSearchClassification facetedSearchClassification) {\n+    delete(facetedSearchClassification);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6be2ee93c8cf5ed0bdb911cb187b4d7f561e9a9a"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3ODYwMDkx", "url": "https://github.com/openequella/openEQUELLA/pull/1631#pullrequestreview-397860091", "createdAt": "2020-04-22T05:47:32Z", "commit": {"oid": "6be2ee93c8cf5ed0bdb911cb187b4d7f561e9a9a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNTo0NzozMlrOGJkbwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNTo0NzozMlrOGJkbwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY4NzI5Ng==", "bodyText": "I think there is no need to return dateCreated and dateModified to front-end so I add @JsonIgnore here.", "url": "https://github.com/openequella/openEQUELLA/pull/1631#discussion_r412687296", "createdAt": "2020-04-22T05:47:32Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/bean/FacetedSearchClassification.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.tle.core.facetedsearch.bean;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import org.hibernate.annotations.AccessType;\n+\n+@Entity\n+@AccessType(\"field\")\n+public class FacetedSearchClassification {\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.AUTO)\n+  private long id;\n+\n+  @Column(nullable = false)\n+  private long institutionId;\n+\n+  @Column @JsonIgnore private Date dateCreated;\n+\n+  @Column @JsonIgnore private Date dateModified;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6be2ee93c8cf5ed0bdb911cb187b4d7f561e9a9a"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4943816e15b3882201799882c0f7f985dfcd1d6b", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/4943816e15b3882201799882c0f7f985dfcd1d6b", "committedDate": "2020-04-22T05:48:42Z", "message": "Remove the setter of id"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3ODU0MDU0", "url": "https://github.com/openequella/openEQUELLA/pull/1631#pullrequestreview-397854054", "createdAt": "2020-04-22T05:30:32Z", "commit": {"oid": "6be2ee93c8cf5ed0bdb911cb187b4d7f561e9a9a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNTozMDozMlrOGJkDUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNTo1ODo0M1rOGJktGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY4MTA0MQ==", "bodyText": "I don't see any need to ignore these - and I can see some cases where it could be useful (such as dateModified indicating currency - unless we have ETags setup).", "url": "https://github.com/openequella/openEQUELLA/pull/1631#discussion_r412681041", "createdAt": "2020-04-22T05:30:32Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/bean/FacetedSearchClassification.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.tle.core.facetedsearch.bean;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import org.hibernate.annotations.AccessType;\n+\n+@Entity\n+@AccessType(\"field\")\n+public class FacetedSearchClassification {\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.AUTO)\n+  private long id;\n+\n+  @Column(nullable = false)\n+  private long institutionId;\n+\n+  @Column @JsonIgnore private Date dateCreated;\n+\n+  @Column @JsonIgnore private Date dateModified;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6be2ee93c8cf5ed0bdb911cb187b4d7f561e9a9a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY4NTAyNA==", "bodyText": "Aren't these redundant? It should be fine to just use the inherited delete, save and merge.", "url": "https://github.com/openequella/openEQUELLA/pull/1631#discussion_r412685024", "createdAt": "2020-04-22T05:41:20Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/dao/FacetedSearchClassificationDao.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.tle.core.facetedsearch.dao;\n+\n+import com.tle.core.facetedsearch.bean.FacetedSearchClassification;\n+import com.tle.core.hibernate.dao.GenericDao;\n+import java.util.List;\n+\n+public interface FacetedSearchClassificationDao\n+    extends GenericDao<FacetedSearchClassification, Long> {\n+\n+  FacetedSearchClassification getClassificationById(long id);\n+\n+  List getAllClassifications();\n+\n+  void deleteClassification(FacetedSearchClassification facetedSearchClassification);\n+\n+  void addFacetedSearchClassification(FacetedSearchClassification facetedSearchClassification);\n+\n+  void updateFacetedSearchClassification(FacetedSearchClassification facetedSearchClassification);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6be2ee93c8cf5ed0bdb911cb187b4d7f561e9a9a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY4NzQzMw==", "bodyText": "I wonder if it'd be better to rely on the enumerate methods provided by GenericInstitutionalDao?", "url": "https://github.com/openequella/openEQUELLA/pull/1631#discussion_r412687433", "createdAt": "2020-04-22T05:47:56Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/dao/FacetedSearchClassificationDao.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.tle.core.facetedsearch.dao;\n+\n+import com.tle.core.facetedsearch.bean.FacetedSearchClassification;\n+import com.tle.core.hibernate.dao.GenericDao;\n+import java.util.List;\n+\n+public interface FacetedSearchClassificationDao\n+    extends GenericDao<FacetedSearchClassification, Long> {\n+\n+  FacetedSearchClassification getClassificationById(long id);\n+\n+  List getAllClassifications();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6be2ee93c8cf5ed0bdb911cb187b4d7f561e9a9a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY4OTQ1Mg==", "bodyText": "I'm surprised this also is provided by one of the base classes, but looks not. However might want to go with the simple getById or findById.", "url": "https://github.com/openequella/openEQUELLA/pull/1631#discussion_r412689452", "createdAt": "2020-04-22T05:53:08Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/dao/FacetedSearchClassificationDao.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.tle.core.facetedsearch.dao;\n+\n+import com.tle.core.facetedsearch.bean.FacetedSearchClassification;\n+import com.tle.core.hibernate.dao.GenericDao;\n+import java.util.List;\n+\n+public interface FacetedSearchClassificationDao\n+    extends GenericDao<FacetedSearchClassification, Long> {\n+\n+  FacetedSearchClassification getClassificationById(long id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4943816e15b3882201799882c0f7f985dfcd1d6b"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY4OTg1NA==", "bodyText": "And although it's not done too often in oEQ, it'd be good to put a JavaDoc on it to say it'll retrieve by id within the current institution.", "url": "https://github.com/openequella/openEQUELLA/pull/1631#discussion_r412689854", "createdAt": "2020-04-22T05:54:10Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/dao/FacetedSearchClassificationDao.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.tle.core.facetedsearch.dao;\n+\n+import com.tle.core.facetedsearch.bean.FacetedSearchClassification;\n+import com.tle.core.hibernate.dao.GenericDao;\n+import java.util.List;\n+\n+public interface FacetedSearchClassificationDao\n+    extends GenericDao<FacetedSearchClassification, Long> {\n+\n+  FacetedSearchClassification getClassificationById(long id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4943816e15b3882201799882c0f7f985dfcd1d6b"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY5MDMzMQ==", "bodyText": "For the method names, no need to use Classifications again. It's unnecessarily verbose and is kind of implied on a service dedicated to classifications.", "url": "https://github.com/openequella/openEQUELLA/pull/1631#discussion_r412690331", "createdAt": "2020-04-22T05:55:25Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/service/FacetedSearchClassificationService.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package com.tle.core.facetedsearch.service;\n+\n+import com.tle.core.facetedsearch.bean.FacetedSearchClassification;\n+import java.util.List;\n+\n+public interface FacetedSearchClassificationService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4943816e15b3882201799882c0f7f985dfcd1d6b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY5MTczNg==", "bodyText": "Yeah, we can start there.", "url": "https://github.com/openequella/openEQUELLA/pull/1631#discussion_r412691736", "createdAt": "2020-04-22T05:58:43Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/bean/FacetedSearchClassification.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.tle.core.facetedsearch.bean;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import org.hibernate.annotations.AccessType;\n+\n+@Entity\n+@AccessType(\"field\")\n+public class FacetedSearchClassification {\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.AUTO)\n+  private long id;\n+\n+  @Column(nullable = false)\n+  private long institutionId;\n+\n+  @Column @JsonIgnore private Date dateCreated;\n+\n+  @Column @JsonIgnore private Date dateModified;\n+\n+  @Column(nullable = false)\n+  private String name;\n+\n+  @Column(nullable = false)\n+  private String schemaNode;\n+\n+  private int maxResults;\n+\n+  private int orderIndex;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3NjA0NA=="}, "originalCommit": {"oid": "6be2ee93c8cf5ed0bdb911cb187b4d7f561e9a9a"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3c6297d3ed006032abd7c3b0c9ba4e01e7717f7", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/f3c6297d3ed006032abd7c3b0c9ba4e01e7717f7", "committedDate": "2020-04-23T01:57:00Z", "message": "Remove @JsonIgnore from 'dateCreated' and 'dateModified';\n\nIn order to make the DAO extend GenericInstitutionDao, this entity needs\nfull information of an institution. So replace 'institutionId' with an\ninstance of 'Institution'. The relation should be many-to-one. And when\nexporting an institution, there is no need to export the institution\ninformation together with this entity so add '@XStreamOmitField'."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "873e143cc2562b39ddc640bdfc54a68403f8b952", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/873e143cc2562b39ddc640bdfc54a68403f8b952", "committedDate": "2020-04-23T02:06:37Z", "message": "All the basic database related methods are already provided by\nGenericInstitutionalDao so remove redundant methods.\n\nRename names of methods of the 'FacetedSearchClassificationService'.\n\nAdd the annotation of Transactional to DML operations."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61789e12a640ccf0ce4b40a31685f85240e382e2", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/61789e12a640ccf0ce4b40a31685f85240e382e2", "committedDate": "2020-04-23T02:12:05Z", "message": "Support data migration for the new classification table;\n\nCreate a new Converter to ensure data of classification are imported and\nexported when importing or exporting the institution."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad17ca296b9b257cc356977b0a9d02a81d881c59", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/ad17ca296b9b257cc356977b0a9d02a81d881c59", "committedDate": "2020-04-23T02:19:58Z", "message": "Headers for new files."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NzQyMjE2", "url": "https://github.com/openequella/openEQUELLA/pull/1631#pullrequestreview-398742216", "createdAt": "2020-04-23T03:57:36Z", "commit": {"oid": "ad17ca296b9b257cc356977b0a9d02a81d881c59"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a42cb8eb5bba156dd42d676d048b5fa76aa3f698", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/a42cb8eb5bba156dd42d676d048b5fa76aa3f698", "committedDate": "2020-04-23T04:47:03Z", "message": "Add 'FacetedSearchClassification' to 'InitialSchema'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98cae93ad6f8b1cd80faa843e7510b93f86bdf0e", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/98cae93ad6f8b1cd80faa843e7510b93f86bdf0e", "committedDate": "2020-04-24T00:07:48Z", "message": "Add new endpoints to support create, retrieve, update and delete faceted\nsearch classification;\n\nAdd a method used to validate classification  but limited to name and\nschema node at the moment;\n\nAdd new tests for the new endpoints."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9501c92a190b58876cf63e13eed427cfe7e9abfc", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/9501c92a190b58876cf63e13eed427cfe7e9abfc", "committedDate": "2020-04-24T03:00:03Z", "message": "Add the testing json file"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NjM5MTM5", "url": "https://github.com/openequella/openEQUELLA/pull/1631#pullrequestreview-399639139", "createdAt": "2020-04-24T04:56:05Z", "commit": {"oid": "9501c92a190b58876cf63e13eed427cfe7e9abfc"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNDo1NjowNVrOGLGZfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNToxMTo1NlrOGLGu7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI5MjM0OQ==", "bodyText": "How's about:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @Path(\"settings/\")\n          \n          \n            \n            @Path(\"settings/facetedsearch/classification\")\n          \n      \n    \n    \n  \n\nLess repetition.", "url": "https://github.com/openequella/openEQUELLA/pull/1631#discussion_r414292349", "createdAt": "2020-04-24T04:56:05Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/settings/FacetedSearch/FacetedSearchClassificationResource.scala", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.web.api.settings.FacetedSearch\n+\n+import java.util.Date\n+\n+import com.tle.common.Check\n+import com.tle.common.institution.CurrentInstitution\n+import com.tle.core.facetedsearch.bean.FacetedSearchClassification\n+import com.tle.legacy.LegacyGuice\n+import com.tle.web.api.ApiErrorResponse\n+import io.swagger.annotations.{Api, ApiOperation, ApiParam}\n+import javax.ws.rs.core.Response\n+import javax.ws.rs.core.Response.Status\n+import javax.ws.rs.{DELETE, GET, POST, PUT, Path, PathParam, Produces}\n+import org.jboss.resteasy.annotations.cache.NoCache\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+@NoCache\n+@Path(\"settings/\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9501c92a190b58876cf63e13eed427cfe7e9abfc"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI5Mzc4OQ==", "bodyText": "Isn't value redundant?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              def get(@ApiParam(value = \"ID\") @PathParam(\"id\") id: Long): Response = {\n          \n          \n            \n              def get(@ApiParam(\"ID\") @PathParam(\"id\") id: Long): Response = {", "url": "https://github.com/openequella/openEQUELLA/pull/1631#discussion_r414293789", "createdAt": "2020-04-24T05:00:40Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/settings/FacetedSearch/FacetedSearchClassificationResource.scala", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.web.api.settings.FacetedSearch\n+\n+import java.util.Date\n+\n+import com.tle.common.Check\n+import com.tle.common.institution.CurrentInstitution\n+import com.tle.core.facetedsearch.bean.FacetedSearchClassification\n+import com.tle.legacy.LegacyGuice\n+import com.tle.web.api.ApiErrorResponse\n+import io.swagger.annotations.{Api, ApiOperation, ApiParam}\n+import javax.ws.rs.core.Response\n+import javax.ws.rs.core.Response.Status\n+import javax.ws.rs.{DELETE, GET, POST, PUT, Path, PathParam, Produces}\n+import org.jboss.resteasy.annotations.cache.NoCache\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+@NoCache\n+@Path(\"settings/\")\n+@Produces(value = Array(\"application/json\"))\n+@Api(value = \"Settings\")\n+class FacetedSearchClassificationResource {\n+  val service          = LegacyGuice.facetedSearchClassificationService\n+  val privilegeChecker = LegacyGuice.searchPrivProvider\n+\n+  @GET\n+  @Path(\"facetedsearch/classification\")\n+  @ApiOperation(\n+    value = \"List faceted search classifications\",\n+    notes = \"This endpoint is used to retrieve faceted search classifications.\",\n+    response = classOf[FacetedSearchClassification],\n+    responseContainer = \"List\"\n+  )\n+  def getAll: Response = {\n+    privilegeChecker.checkAuthorised()\n+    val classifications = service.enumerateAll()\n+    Response.ok().entity(classifications).build()\n+  }\n+\n+  @GET\n+  @Path(\"facetedsearch/classification/{id}\")\n+  @ApiOperation(\n+    value = \"Retrieve one faceted search classification\",\n+    notes = \"This endpoint is used to retrieve one faceted search classification.\",\n+    response = classOf[FacetedSearchClassification]\n+  )\n+  def get(@ApiParam(value = \"ID\") @PathParam(\"id\") id: Long): Response = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9501c92a190b58876cf63e13eed427cfe7e9abfc"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI5NTU2Nw==", "bodyText": "Shame the DAO is not doing this, or that it's not being done with hibernate hooks/events. However if oEQ doesn't already do that, then fine....", "url": "https://github.com/openequella/openEQUELLA/pull/1631#discussion_r414295567", "createdAt": "2020-04-24T05:05:59Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/settings/FacetedSearch/FacetedSearchClassificationResource.scala", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.web.api.settings.FacetedSearch\n+\n+import java.util.Date\n+\n+import com.tle.common.Check\n+import com.tle.common.institution.CurrentInstitution\n+import com.tle.core.facetedsearch.bean.FacetedSearchClassification\n+import com.tle.legacy.LegacyGuice\n+import com.tle.web.api.ApiErrorResponse\n+import io.swagger.annotations.{Api, ApiOperation, ApiParam}\n+import javax.ws.rs.core.Response\n+import javax.ws.rs.core.Response.Status\n+import javax.ws.rs.{DELETE, GET, POST, PUT, Path, PathParam, Produces}\n+import org.jboss.resteasy.annotations.cache.NoCache\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+@NoCache\n+@Path(\"settings/\")\n+@Produces(value = Array(\"application/json\"))\n+@Api(value = \"Settings\")\n+class FacetedSearchClassificationResource {\n+  val service          = LegacyGuice.facetedSearchClassificationService\n+  val privilegeChecker = LegacyGuice.searchPrivProvider\n+\n+  @GET\n+  @Path(\"facetedsearch/classification\")\n+  @ApiOperation(\n+    value = \"List faceted search classifications\",\n+    notes = \"This endpoint is used to retrieve faceted search classifications.\",\n+    response = classOf[FacetedSearchClassification],\n+    responseContainer = \"List\"\n+  )\n+  def getAll: Response = {\n+    privilegeChecker.checkAuthorised()\n+    val classifications = service.enumerateAll()\n+    Response.ok().entity(classifications).build()\n+  }\n+\n+  @GET\n+  @Path(\"facetedsearch/classification/{id}\")\n+  @ApiOperation(\n+    value = \"Retrieve one faceted search classification\",\n+    notes = \"This endpoint is used to retrieve one faceted search classification.\",\n+    response = classOf[FacetedSearchClassification]\n+  )\n+  def get(@ApiParam(value = \"ID\") @PathParam(\"id\") id: Long): Response = {\n+    privilegeChecker.checkAuthorised()\n+    Option(service.getById(id)) match {\n+      case Some(classification) => Response.ok().entity(classification).build()\n+      case None                 => ApiErrorResponse.resourceNotFound(notFound(id))\n+    }\n+  }\n+\n+  @POST\n+  @Path(\"facetedsearch/classification\")\n+  @ApiOperation(\n+    value = \"Add one faceted search classification\",\n+    notes = \"This endpoint is used to add one faceted search classification.\",\n+    response = classOf[FacetedSearchClassification]\n+  )\n+  def add(classification: FacetedSearchClassification): Response = {\n+    privilegeChecker.checkAuthorised()\n+    validate(classification) match {\n+      case Left(errors) => ApiErrorResponse.badRequest(errors: _*)\n+      case Right(_) =>\n+        classification.setDateCreated(new Date())\n+        classification.setDateModified(new Date())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9501c92a190b58876cf63e13eed427cfe7e9abfc"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI5NjA1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              def update(@ApiParam(value = \"ID\") @PathParam(\"id\") id: Long,\n          \n          \n            \n              def update(@ApiParam(\"ID\") @PathParam(\"id\") id: Long,", "url": "https://github.com/openequella/openEQUELLA/pull/1631#discussion_r414296056", "createdAt": "2020-04-24T05:07:07Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/settings/FacetedSearch/FacetedSearchClassificationResource.scala", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.web.api.settings.FacetedSearch\n+\n+import java.util.Date\n+\n+import com.tle.common.Check\n+import com.tle.common.institution.CurrentInstitution\n+import com.tle.core.facetedsearch.bean.FacetedSearchClassification\n+import com.tle.legacy.LegacyGuice\n+import com.tle.web.api.ApiErrorResponse\n+import io.swagger.annotations.{Api, ApiOperation, ApiParam}\n+import javax.ws.rs.core.Response\n+import javax.ws.rs.core.Response.Status\n+import javax.ws.rs.{DELETE, GET, POST, PUT, Path, PathParam, Produces}\n+import org.jboss.resteasy.annotations.cache.NoCache\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+@NoCache\n+@Path(\"settings/\")\n+@Produces(value = Array(\"application/json\"))\n+@Api(value = \"Settings\")\n+class FacetedSearchClassificationResource {\n+  val service          = LegacyGuice.facetedSearchClassificationService\n+  val privilegeChecker = LegacyGuice.searchPrivProvider\n+\n+  @GET\n+  @Path(\"facetedsearch/classification\")\n+  @ApiOperation(\n+    value = \"List faceted search classifications\",\n+    notes = \"This endpoint is used to retrieve faceted search classifications.\",\n+    response = classOf[FacetedSearchClassification],\n+    responseContainer = \"List\"\n+  )\n+  def getAll: Response = {\n+    privilegeChecker.checkAuthorised()\n+    val classifications = service.enumerateAll()\n+    Response.ok().entity(classifications).build()\n+  }\n+\n+  @GET\n+  @Path(\"facetedsearch/classification/{id}\")\n+  @ApiOperation(\n+    value = \"Retrieve one faceted search classification\",\n+    notes = \"This endpoint is used to retrieve one faceted search classification.\",\n+    response = classOf[FacetedSearchClassification]\n+  )\n+  def get(@ApiParam(value = \"ID\") @PathParam(\"id\") id: Long): Response = {\n+    privilegeChecker.checkAuthorised()\n+    Option(service.getById(id)) match {\n+      case Some(classification) => Response.ok().entity(classification).build()\n+      case None                 => ApiErrorResponse.resourceNotFound(notFound(id))\n+    }\n+  }\n+\n+  @POST\n+  @Path(\"facetedsearch/classification\")\n+  @ApiOperation(\n+    value = \"Add one faceted search classification\",\n+    notes = \"This endpoint is used to add one faceted search classification.\",\n+    response = classOf[FacetedSearchClassification]\n+  )\n+  def add(classification: FacetedSearchClassification): Response = {\n+    privilegeChecker.checkAuthorised()\n+    validate(classification) match {\n+      case Left(errors) => ApiErrorResponse.badRequest(errors: _*)\n+      case Right(_) =>\n+        classification.setDateCreated(new Date())\n+        classification.setDateModified(new Date())\n+        classification.setInstitution(CurrentInstitution.get)\n+        service.add(classification)\n+        Response.status(Status.CREATED).entity(classification).build()\n+    }\n+  }\n+\n+  @PUT\n+  @Path(\"facetedsearch/classification/{id}\")\n+  @ApiOperation(\n+    value = \"Update one faceted search classification\",\n+    notes = \"This endpoint is used to update one faceted search classification.\",\n+    response = classOf[FacetedSearchClassification]\n+  )\n+  def update(@ApiParam(value = \"ID\") @PathParam(\"id\") id: Long,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9501c92a190b58876cf63e13eed427cfe7e9abfc"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI5NzgzNw==", "bodyText": "Sees odd to need to use something called Attachments for this. Normally you'd just use the classloader.getResourceAsStream(<filename>). But maybe this is the oEQ way?", "url": "https://github.com/openequella/openEQUELLA/pull/1631#discussion_r414297837", "createdAt": "2020-04-24T05:11:56Z", "author": {"login": "edalex-ian"}, "path": "autotest/OldTests/src/test/java/com/tle/webtests/test/webservices/rest/FacetedSearchClassificationApiTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.tle.webtests.test.webservices.rest;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import com.tle.common.Pair;\n+import com.tle.webtests.test.files.Attachments;\n+import java.util.List;\n+import org.apache.http.HttpResponse;\n+import org.codehaus.jackson.JsonNode;\n+import org.codehaus.jackson.node.ObjectNode;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+public class FacetedSearchClassificationApiTest extends AbstractRestApiTest {\n+  private static final String OAUTH_CLIENT_ID = \"FacetedSearchApiTestClient\";\n+  private static final String API_PATH = \"api/settings/facetedsearch/classification/\";\n+  private long classificationId;\n+  private ObjectNode validClassification;\n+  private ObjectNode invalidClassification;\n+\n+  private static final String NAME = \"good name\";\n+  private static final String NEW_NAME = \"better name\";\n+  private static final long invalidId = 763311234511L;\n+\n+  @Override\n+  protected void addOAuthClients(List<Pair<String, String>> clients) {\n+    clients.add(new Pair<String, String>(OAUTH_CLIENT_ID, \"AutoTest\"));\n+  }\n+\n+  @BeforeClass\n+  @Override\n+  public void registerClients() throws Exception {\n+    super.registerClients();\n+    JsonNode node = mapper.readTree(Attachments.get(\"facetedsearchclassification.json\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9501c92a190b58876cf63e13eed427cfe7e9abfc"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d3777c6b2718302ec942d59125ee16fd37ed354", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/7d3777c6b2718302ec942d59125ee16fd37ed354", "committedDate": "2020-04-24T06:57:52Z", "message": "Specify the endpoint path at the top of the file;\n\nCreate a resources folder for 'OldTests';\n\nAdd the new test in Codebuild and Travis."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 223, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}