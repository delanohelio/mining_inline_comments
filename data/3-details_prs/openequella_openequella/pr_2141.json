{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzMTY0OTYx", "number": 2141, "title": "Update Schema module and Collection module", "bodyText": "#1306\nChecklist\n\n the [contributor license agreement][] is signed\n commit message follows [commit guidelines][]\n tests are included\n screenshots are included showing significant UI changes\n documentation is changed or added\n\nDescription of change\nAs the resumption token has been fixed, this PR attempts to update Schema module and Collection module to use resumption tokens to retrieve data.\nCreated a new function to list entities that extend BaseEntity, and then updated the two modules to use this function. Also updated mock data and renamed a field of CommonParams.", "createdAt": "2020-08-05T06:02:43Z", "url": "https://github.com/openequella/openEQUELLA/pull/2141", "merged": true, "mergeCommit": {"oid": "564cffa2a3cd08952e4e0a4a81d22bb0cc38ae5e"}, "closed": true, "closedAt": "2020-08-10T03:25:38Z", "author": {"login": "PenghaiZhang"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc70vO0AH2gAyNDYzMTY0OTYxOjcxNzY1OGYwNDFiYzc5MDMzZGU2ZDU4MWI0ZTAyYjhmMjZkYWU3OTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc9VzitAH2gAyNDYzMTY0OTYxOjg2OWIyODUzMmZiOTRkNGVjZDhiZDA0OTcwOTY3ZGU5NjJkZTJlMTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "717658f041bc79033de6d581b4e02b8f26dae794", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/717658f041bc79033de6d581b4e02b8f26dae794", "committedDate": "2020-08-05T05:54:16Z", "message": "Update Schema module and Collection module\n\n1. Create a new function to list BaseEntities by resumption tokens.\n2. Update Schema module and Collection module to use this new function.\n3. Rename ListCommonParams's field 'resumptionToken' to 'resumption'.\n4. Update mock data for tests."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMzczNDc3", "url": "https://github.com/openequella/openEQUELLA/pull/2141#pullrequestreview-461373477", "createdAt": "2020-08-05T06:28:08Z", "commit": {"oid": "717658f041bc79033de6d581b4e02b8f26dae794"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoyODowOFrOG778jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoyODowOFrOG778jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwMTMyNw==", "bodyText": "Spare log.", "url": "https://github.com/openequella/openEQUELLA/pull/2141#discussion_r465501327", "createdAt": "2020-08-05T06:28:08Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/OEQHelpers.ts", "diffHunk": "@@ -24,11 +24,38 @@ import * as OEQ from \"@openequella/rest-api-client\";\n  *\n  * @param list A list most likely retrieved via a REST call in the REST Client library\n  */\n-export const summarisePagedBaseEntities = (\n-  list: OEQ.Common.PagedResult<OEQ.Common.BaseEntity>\n-) =>\n-  list.results.reduce(\n+export const summarisePagedBaseEntities = (list: OEQ.Common.BaseEntity[]) =>\n+  list.reduce(\n     (prev: Map<string, string>, curr: OEQ.Common.BaseEntity) =>\n       prev.set(curr.uuid, curr.name),\n     new Map<string, string>()\n   );\n+\n+const DEFAULT_RESUMPTION_TOKEN = \"0:10\";\n+\n+/**\n+ * Retrieve BaseEntities by resumption tokens.\n+ * If a resumption token is included in response, then send another request to retrieve\n+ * more entities, until no resumption token is returned.\n+ *\n+ * @param getData A function which takes a resumption token to retrieve specific entities\n+ *        such as schemas and collections.\n+ */\n+export const listEntities = <T extends OEQ.Common.BaseEntity>(\n+  getData: (resumptionToken: string) => Promise<OEQ.Common.PagedResult<T>>\n+): Promise<T[]> => {\n+  const entities: T[] = [];\n+  return getData(DEFAULT_RESUMPTION_TOKEN).then(async (pagedResult) => {\n+    console.log(pagedResult);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "717658f041bc79033de6d581b4e02b8f26dae794"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e70246a027a53fbdaac0e0458c11c20596192c5", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/1e70246a027a53fbdaac0e0458c11c20596192c5", "committedDate": "2020-08-05T06:32:17Z", "message": "Remove a useless console log."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a17ce7d2153de2677e60bc1c1b05470d1d57295", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/0a17ce7d2153de2677e60bc1c1b05470d1d57295", "committedDate": "2020-08-05T23:11:24Z", "message": "Tweak code in PagedResults.scala to follow Scala convention."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMTI2OTA1", "url": "https://github.com/openequella/openEQUELLA/pull/2141#pullrequestreview-462126905", "createdAt": "2020-08-06T01:28:10Z", "commit": {"oid": "0a17ce7d2153de2677e60bc1c1b05470d1d57295"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMToyODoxMFrOG8gBZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMToyODoxMFrOG8gBZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA5MjM4OQ==", "bodyText": "A couple of things here:\n\nIf you make a recursive function, please put it in the JSDoc so it's immediately obvious to any consumers. This is important, as recursive functions can be a source of all kinds of wonderful issues. That leads to;\nAlthough I like you're thinking, using a recursive function to iteratively retrieve an unknown size of results from a server is dangerous! Here in Javascript land we don't have tail-recursion and so you easily run the risk of blowing the stack. this is a pretty simple case, so a while loop will be fine, or you want you could play with JS Iterators or Generators.\n\nSo, we need to rewrite this without the recursion.", "url": "https://github.com/openequella/openEQUELLA/pull/2141#discussion_r466092389", "createdAt": "2020-08-06T01:28:10Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/OEQHelpers.ts", "diffHunk": "@@ -24,11 +24,37 @@ import * as OEQ from \"@openequella/rest-api-client\";\n  *\n  * @param list A list most likely retrieved via a REST call in the REST Client library\n  */\n-export const summarisePagedBaseEntities = (\n-  list: OEQ.Common.PagedResult<OEQ.Common.BaseEntity>\n-) =>\n-  list.results.reduce(\n+export const summarisePagedBaseEntities = (list: OEQ.Common.BaseEntity[]) =>\n+  list.reduce(\n     (prev: Map<string, string>, curr: OEQ.Common.BaseEntity) =>\n       prev.set(curr.uuid, curr.name),\n     new Map<string, string>()\n   );\n+\n+const DEFAULT_RESUMPTION_TOKEN = \"0:10\";\n+\n+/**\n+ * Retrieve BaseEntities by resumption tokens.\n+ * If a resumption token is included in response, then send another request to retrieve\n+ * more entities, until no resumption token is returned.\n+ *\n+ * @param getData A function which takes a resumption token to retrieve specific entities\n+ *        such as schemas and collections.\n+ */\n+export const listEntities = <T extends OEQ.Common.BaseEntity>(\n+  getData: (resumptionToken: string) => Promise<OEQ.Common.PagedResult<T>>\n+): Promise<T[]> => {\n+  const entities: T[] = [];\n+  return getData(DEFAULT_RESUMPTION_TOKEN).then(async (pagedResult) => {\n+    entities.push(...pagedResult.results);\n+    // If a resumption token is returned, recursively call listEntities to retrieve more entities.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a17ce7d2153de2677e60bc1c1b05470d1d57295"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "579f6e5022e9e67588d6975fb5ce883a814fa9c2", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/579f6e5022e9e67588d6975fb5ce883a814fa9c2", "committedDate": "2020-08-06T04:13:19Z", "message": "Use a while loop rater than recursive calls to retrieve entities."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMTc3MTgw", "url": "https://github.com/openequella/openEQUELLA/pull/2141#pullrequestreview-462177180", "createdAt": "2020-08-06T04:22:51Z", "commit": {"oid": "579f6e5022e9e67588d6975fb5ce883a814fa9c2"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNDoyMjo1MVrOG8iwmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNDoyMjo1MVrOG8iwmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzNzI0Mg==", "bodyText": "If you're going to use await, wouldn't you just do:\n    const pagedResult = await getData(token);\n    entities.push(...pagedResult.results);\n    token = pagedResult.resumptionToken ?? \"\";\nOr are you doing it for the error handling?\nAlso, shouldn't it be fine for:\n    token = pagedResult.resumptionToken ?? \"\";\nJust to be:\n    token = pagedResult.resumptionToken;", "url": "https://github.com/openequella/openEQUELLA/pull/2141#discussion_r466137242", "createdAt": "2020-08-06T04:22:51Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/OEQHelpers.ts", "diffHunk": "@@ -24,11 +24,33 @@ import * as OEQ from \"@openequella/rest-api-client\";\n  *\n  * @param list A list most likely retrieved via a REST call in the REST Client library\n  */\n-export const summarisePagedBaseEntities = (\n-  list: OEQ.Common.PagedResult<OEQ.Common.BaseEntity>\n-) =>\n-  list.results.reduce(\n+export const summarisePagedBaseEntities = (list: OEQ.Common.BaseEntity[]) =>\n+  list.reduce(\n     (prev: Map<string, string>, curr: OEQ.Common.BaseEntity) =>\n       prev.set(curr.uuid, curr.name),\n     new Map<string, string>()\n   );\n+\n+const DEFAULT_RESUMPTION_TOKEN = \"0:10\";\n+\n+/**\n+ * Retrieve BaseEntities by resumption tokens.\n+ * If a resumption token is included in response, then send another request to retrieve\n+ * more entities, until no resumption token is returned.\n+ *\n+ * @param getData A function which takes a resumption token to retrieve specific entities\n+ *        such as schemas and collections.\n+ */\n+export const listEntities = async <T extends OEQ.Common.BaseEntity>(\n+  getData: (resumptionToken: string) => Promise<OEQ.Common.PagedResult<T>>\n+): Promise<T[]> => {\n+  const entities: T[] = [];\n+  let token: string = DEFAULT_RESUMPTION_TOKEN;\n+  while (token) {\n+    await getData(token).then((pagedResult) => {\n+      entities.push(...pagedResult.results);\n+      token = pagedResult.resumptionToken ?? \"\";\n+    });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "579f6e5022e9e67588d6975fb5ce883a814fa9c2"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06e8f4a4e2c0f6691743c19f65dc0871b45b75ac", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/06e8f4a4e2c0f6691743c19f65dc0871b45b75ac", "committedDate": "2020-08-06T04:34:08Z", "message": "Simplify function listEntities and improve its readability."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "869b28532fb94d4ecd8bd04970967de962de2e19", "author": {"user": {"login": "PenghaiZhang", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/869b28532fb94d4ecd8bd04970967de962de2e19", "committedDate": "2020-08-09T22:59:46Z", "message": "Merge branch 'component/new-search-page' into feature/update-schema-module-and-collection-module"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4870, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}