{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYxOTk5NDM0", "number": 2132, "title": "Feature/frontend usersearch component", "bodyText": "Checklist\n\n\n the contributor license agreement is signed\n commit message follows commit guidelines\n tests are included\n screenshots are included showing significant UI changes\n\nDescription of change\n\nThis adds a simple generic component (UserSearch) to support searching for oEQ users. It includes a Storybook story and Jest unit/interaction tests. Items of note:\n\nThe component has been designed with the ability to inject the function which does the search, however defaulting to the new UserModule method. This was done to support being able to inject a different function when under test/story.\nThe tests have been written with the React Testing Library in an attempt to see if it will be more suitable than Enzyme with concern over future removal of simulate. Personally, I'm rather impressed with how the library works, and the way it makes for rather readable and maintainable tests.\nThere are known issues currently with component/new-search-page, with four failing Jest tests - this is not due to this PR, but due to today's merge of develop.\n\nScreenshots\nInitial state:\n\nSearch (no such user):\n\nSearch (with results - with height set to 150px, note scroll bar):\n\n#1306", "createdAt": "2020-08-03T07:24:08Z", "url": "https://github.com/openequella/openEQUELLA/pull/2132", "merged": true, "mergeCommit": {"oid": "8e6c67c7f3640d30c3ee808ccb4aa2175ed366bc"}, "closed": true, "closedAt": "2020-08-04T02:44:24Z", "author": {"login": "edalex-ian"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7MgiigH2gAyNDYxOTk5NDM0OjNmMzA0ODQwNzU3MWVjZGU5ODQ4MjNkOGRhMDdmNzI3ZGZlNGY5YmM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc7bwfegH2gAyNDYxOTk5NDM0OjJhYTdmMTc1Y2JmMDIyZjA2MjRjOGFmY2ZkMDNjNGJmNDYwMjdjMGI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3f3048407571ecde984823d8da07f727dfe4f9bc", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/3f3048407571ecde984823d8da07f727dfe4f9bc", "committedDate": "2020-08-03T07:02:01Z", "message": "front-end: Create generic UserSearch component"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "affebd597d588bdf6647db863434e6cdc4b306e3", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/affebd597d588bdf6647db863434e6cdc4b306e3", "committedDate": "2020-08-03T07:02:01Z", "message": "front-end: Add test for UserSearch component"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30448fc636fda92eced26d73e4298ec4845f3902", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/30448fc636fda92eced26d73e4298ec4845f3902", "committedDate": "2020-08-03T23:49:39Z", "message": "Merge branch 'component/new-search-page' into feature/frontend-usersearch-component"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNDA0NTc4", "url": "https://github.com/openequella/openEQUELLA/pull/2132#pullrequestreview-460404578", "createdAt": "2020-08-03T23:38:08Z", "commit": {"oid": "affebd597d588bdf6647db863434e6cdc4b306e3"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMzozODowOFrOG7MEBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMzo1NDo0MFrOG7MXFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxNjgwNw==", "bodyText": "The default value of alignItems is stretch.", "url": "https://github.com/openequella/openEQUELLA/pull/2132#discussion_r464716807", "createdAt": "2020-08-03T23:38:08Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/components/UserSearch.tsx", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import { KeyboardEvent, useState } from \"react\";\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import {\n+  Grid,\n+  IconButton,\n+  List,\n+  ListItem,\n+  ListItemIcon,\n+  ListItemText,\n+  TextField,\n+} from \"@material-ui/core\";\n+import SearchIcon from \"@material-ui/icons/Search\";\n+import { AccountCircle, ErrorOutline } from \"@material-ui/icons\";\n+import * as UserModule from \"../modules/UserModule\";\n+import { languageStrings } from \"../util/langstrings\";\n+import { sprintf } from \"sprintf-js\";\n+\n+interface UserSearchProps {\n+  /** An optional `id` attribute for the component. Will also be used to prefix core child elements. */\n+  id?: string;\n+  /** How high (in pixels) the list of users should be. */\n+  listHeight?: number;\n+  /** Callback triggered when a user entry is clicked on. */\n+  onSelect: (username: OEQ.UserQuery.UserDetails) => void;\n+  /** Function which will provide the list of users. */\n+  userListProvider?: (query?: string) => Promise<OEQ.UserQuery.UserDetails[]>;\n+}\n+\n+/**\n+ * Provides a control to list users via an input field text query filter. Users can then\n+ * be selected (single select).\n+ */\n+const UserSearch = ({\n+  id,\n+  listHeight,\n+  onSelect,\n+  userListProvider = (query?: string) =>\n+    UserModule.listUsers(query ? `${query}*` : undefined),\n+}: UserSearchProps) => {\n+  const {\n+    failedToFindUsersMessage,\n+    queryFieldLabel,\n+  } = languageStrings.userSearchComponent;\n+\n+  const [query, setQuery] = useState<string>(\"\");\n+  const [users, setUsers] = useState<OEQ.UserQuery.UserDetails[]>([]);\n+  const [selectedUser, setSelectedUser] = useState<\n+    OEQ.Common.UuidString | undefined\n+  >(undefined);\n+  const [hasSearched, setHasSearched] = useState<boolean>(false);\n+\n+  // Simple helper function to assist with providing useful id's for testing and theming.\n+  const genId = (suffix?: string) =>\n+    (id ? `${id}-` : \"\") + \"UserSearch\" + (suffix ? `-${suffix}` : \"\");\n+\n+  const handleOnSearch = () =>\n+    userListProvider(query).then((userDetails: OEQ.UserQuery.UserDetails[]) => {\n+      setHasSearched(true);\n+      setUsers(\n+        userDetails.sort((a, b) =>\n+          a.username.toLowerCase().localeCompare(b.username.toLowerCase())\n+        )\n+      );\n+    });\n+\n+  const handleQueryFieldKeypress = (event: KeyboardEvent<HTMLDivElement>) => {\n+    switch (event.key) {\n+      case \"Escape\":\n+        setQuery(\"\");\n+        setUsers([]);\n+        setSelectedUser(undefined);\n+        setHasSearched(false);\n+        break;\n+      case \"Enter\":\n+        handleOnSearch();\n+        break;\n+    }\n+  };\n+\n+  const queryBar = (\n+    <Grid id={genId(\"QueryBar\")} container spacing={1}>\n+      <Grid item>\n+        <IconButton onClick={handleOnSearch}>\n+          <SearchIcon />\n+        </IconButton>\n+      </Grid>\n+      <Grid item>\n+        <TextField\n+          label={queryFieldLabel}\n+          value={query}\n+          onChange={(event) => {\n+            setHasSearched(false);\n+            setQuery(event.target.value);\n+          }}\n+          onKeyDown={handleQueryFieldKeypress}\n+        />\n+      </Grid>\n+    </Grid>\n+  );\n+\n+  const userList = () => {\n+    // If there's no users because a search has not been done,\n+    // then return with nothing\n+    if (users.length < 1 && !hasSearched) {\n+      return null;\n+    }\n+\n+    return (\n+      <List\n+        id={genId(\"UserList\")}\n+        style={listHeight ? { height: listHeight, overflow: \"auto\" } : {}}\n+      >\n+        {users.length ? (\n+          users.map((userDetails: OEQ.UserQuery.UserDetails) => (\n+            <ListItem\n+              button\n+              onClick={() => {\n+                setSelectedUser(userDetails.id);\n+                onSelect(userDetails);\n+              }}\n+              key={userDetails.id}\n+              selected={selectedUser === userDetails.id}\n+            >\n+              <ListItemIcon>\n+                <AccountCircle />\n+              </ListItemIcon>\n+              <ListItemText\n+                primary={userDetails.username}\n+                secondary={`${userDetails.firstName} ${userDetails.lastName}`}\n+              />\n+            </ListItem>\n+          ))\n+        ) : (\n+          <ListItem>\n+            <ListItemIcon>\n+              <ErrorOutline />\n+            </ListItemIcon>\n+            <ListItemText\n+              secondary={sprintf(failedToFindUsersMessage, query)}\n+            />\n+          </ListItem>\n+        )}\n+      </List>\n+    );\n+  };\n+\n+  return (\n+    <Grid\n+      id={genId()}\n+      container\n+      direction=\"column\"\n+      justify=\"flex-start\"\n+      alignItems=\"stretch\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "affebd597d588bdf6647db863434e6cdc4b306e3"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxNjk0OQ==", "bodyText": "Default value of justify is flex-start.", "url": "https://github.com/openequella/openEQUELLA/pull/2132#discussion_r464716949", "createdAt": "2020-08-03T23:38:30Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/components/UserSearch.tsx", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import { KeyboardEvent, useState } from \"react\";\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import {\n+  Grid,\n+  IconButton,\n+  List,\n+  ListItem,\n+  ListItemIcon,\n+  ListItemText,\n+  TextField,\n+} from \"@material-ui/core\";\n+import SearchIcon from \"@material-ui/icons/Search\";\n+import { AccountCircle, ErrorOutline } from \"@material-ui/icons\";\n+import * as UserModule from \"../modules/UserModule\";\n+import { languageStrings } from \"../util/langstrings\";\n+import { sprintf } from \"sprintf-js\";\n+\n+interface UserSearchProps {\n+  /** An optional `id` attribute for the component. Will also be used to prefix core child elements. */\n+  id?: string;\n+  /** How high (in pixels) the list of users should be. */\n+  listHeight?: number;\n+  /** Callback triggered when a user entry is clicked on. */\n+  onSelect: (username: OEQ.UserQuery.UserDetails) => void;\n+  /** Function which will provide the list of users. */\n+  userListProvider?: (query?: string) => Promise<OEQ.UserQuery.UserDetails[]>;\n+}\n+\n+/**\n+ * Provides a control to list users via an input field text query filter. Users can then\n+ * be selected (single select).\n+ */\n+const UserSearch = ({\n+  id,\n+  listHeight,\n+  onSelect,\n+  userListProvider = (query?: string) =>\n+    UserModule.listUsers(query ? `${query}*` : undefined),\n+}: UserSearchProps) => {\n+  const {\n+    failedToFindUsersMessage,\n+    queryFieldLabel,\n+  } = languageStrings.userSearchComponent;\n+\n+  const [query, setQuery] = useState<string>(\"\");\n+  const [users, setUsers] = useState<OEQ.UserQuery.UserDetails[]>([]);\n+  const [selectedUser, setSelectedUser] = useState<\n+    OEQ.Common.UuidString | undefined\n+  >(undefined);\n+  const [hasSearched, setHasSearched] = useState<boolean>(false);\n+\n+  // Simple helper function to assist with providing useful id's for testing and theming.\n+  const genId = (suffix?: string) =>\n+    (id ? `${id}-` : \"\") + \"UserSearch\" + (suffix ? `-${suffix}` : \"\");\n+\n+  const handleOnSearch = () =>\n+    userListProvider(query).then((userDetails: OEQ.UserQuery.UserDetails[]) => {\n+      setHasSearched(true);\n+      setUsers(\n+        userDetails.sort((a, b) =>\n+          a.username.toLowerCase().localeCompare(b.username.toLowerCase())\n+        )\n+      );\n+    });\n+\n+  const handleQueryFieldKeypress = (event: KeyboardEvent<HTMLDivElement>) => {\n+    switch (event.key) {\n+      case \"Escape\":\n+        setQuery(\"\");\n+        setUsers([]);\n+        setSelectedUser(undefined);\n+        setHasSearched(false);\n+        break;\n+      case \"Enter\":\n+        handleOnSearch();\n+        break;\n+    }\n+  };\n+\n+  const queryBar = (\n+    <Grid id={genId(\"QueryBar\")} container spacing={1}>\n+      <Grid item>\n+        <IconButton onClick={handleOnSearch}>\n+          <SearchIcon />\n+        </IconButton>\n+      </Grid>\n+      <Grid item>\n+        <TextField\n+          label={queryFieldLabel}\n+          value={query}\n+          onChange={(event) => {\n+            setHasSearched(false);\n+            setQuery(event.target.value);\n+          }}\n+          onKeyDown={handleQueryFieldKeypress}\n+        />\n+      </Grid>\n+    </Grid>\n+  );\n+\n+  const userList = () => {\n+    // If there's no users because a search has not been done,\n+    // then return with nothing\n+    if (users.length < 1 && !hasSearched) {\n+      return null;\n+    }\n+\n+    return (\n+      <List\n+        id={genId(\"UserList\")}\n+        style={listHeight ? { height: listHeight, overflow: \"auto\" } : {}}\n+      >\n+        {users.length ? (\n+          users.map((userDetails: OEQ.UserQuery.UserDetails) => (\n+            <ListItem\n+              button\n+              onClick={() => {\n+                setSelectedUser(userDetails.id);\n+                onSelect(userDetails);\n+              }}\n+              key={userDetails.id}\n+              selected={selectedUser === userDetails.id}\n+            >\n+              <ListItemIcon>\n+                <AccountCircle />\n+              </ListItemIcon>\n+              <ListItemText\n+                primary={userDetails.username}\n+                secondary={`${userDetails.firstName} ${userDetails.lastName}`}\n+              />\n+            </ListItem>\n+          ))\n+        ) : (\n+          <ListItem>\n+            <ListItemIcon>\n+              <ErrorOutline />\n+            </ListItemIcon>\n+            <ListItemText\n+              secondary={sprintf(failedToFindUsersMessage, query)}\n+            />\n+          </ListItem>\n+        )}\n+      </List>\n+    );\n+  };\n+\n+  return (\n+    <Grid\n+      id={genId()}\n+      container\n+      direction=\"column\"\n+      justify=\"flex-start\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "affebd597d588bdf6647db863434e6cdc4b306e3"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxNzgzOA==", "bodyText": "Because xs of items are 12, perhaps we don't need to use column.", "url": "https://github.com/openequella/openEQUELLA/pull/2132#discussion_r464717838", "createdAt": "2020-08-03T23:41:20Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/components/UserSearch.tsx", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import { KeyboardEvent, useState } from \"react\";\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import {\n+  Grid,\n+  IconButton,\n+  List,\n+  ListItem,\n+  ListItemIcon,\n+  ListItemText,\n+  TextField,\n+} from \"@material-ui/core\";\n+import SearchIcon from \"@material-ui/icons/Search\";\n+import { AccountCircle, ErrorOutline } from \"@material-ui/icons\";\n+import * as UserModule from \"../modules/UserModule\";\n+import { languageStrings } from \"../util/langstrings\";\n+import { sprintf } from \"sprintf-js\";\n+\n+interface UserSearchProps {\n+  /** An optional `id` attribute for the component. Will also be used to prefix core child elements. */\n+  id?: string;\n+  /** How high (in pixels) the list of users should be. */\n+  listHeight?: number;\n+  /** Callback triggered when a user entry is clicked on. */\n+  onSelect: (username: OEQ.UserQuery.UserDetails) => void;\n+  /** Function which will provide the list of users. */\n+  userListProvider?: (query?: string) => Promise<OEQ.UserQuery.UserDetails[]>;\n+}\n+\n+/**\n+ * Provides a control to list users via an input field text query filter. Users can then\n+ * be selected (single select).\n+ */\n+const UserSearch = ({\n+  id,\n+  listHeight,\n+  onSelect,\n+  userListProvider = (query?: string) =>\n+    UserModule.listUsers(query ? `${query}*` : undefined),\n+}: UserSearchProps) => {\n+  const {\n+    failedToFindUsersMessage,\n+    queryFieldLabel,\n+  } = languageStrings.userSearchComponent;\n+\n+  const [query, setQuery] = useState<string>(\"\");\n+  const [users, setUsers] = useState<OEQ.UserQuery.UserDetails[]>([]);\n+  const [selectedUser, setSelectedUser] = useState<\n+    OEQ.Common.UuidString | undefined\n+  >(undefined);\n+  const [hasSearched, setHasSearched] = useState<boolean>(false);\n+\n+  // Simple helper function to assist with providing useful id's for testing and theming.\n+  const genId = (suffix?: string) =>\n+    (id ? `${id}-` : \"\") + \"UserSearch\" + (suffix ? `-${suffix}` : \"\");\n+\n+  const handleOnSearch = () =>\n+    userListProvider(query).then((userDetails: OEQ.UserQuery.UserDetails[]) => {\n+      setHasSearched(true);\n+      setUsers(\n+        userDetails.sort((a, b) =>\n+          a.username.toLowerCase().localeCompare(b.username.toLowerCase())\n+        )\n+      );\n+    });\n+\n+  const handleQueryFieldKeypress = (event: KeyboardEvent<HTMLDivElement>) => {\n+    switch (event.key) {\n+      case \"Escape\":\n+        setQuery(\"\");\n+        setUsers([]);\n+        setSelectedUser(undefined);\n+        setHasSearched(false);\n+        break;\n+      case \"Enter\":\n+        handleOnSearch();\n+        break;\n+    }\n+  };\n+\n+  const queryBar = (\n+    <Grid id={genId(\"QueryBar\")} container spacing={1}>\n+      <Grid item>\n+        <IconButton onClick={handleOnSearch}>\n+          <SearchIcon />\n+        </IconButton>\n+      </Grid>\n+      <Grid item>\n+        <TextField\n+          label={queryFieldLabel}\n+          value={query}\n+          onChange={(event) => {\n+            setHasSearched(false);\n+            setQuery(event.target.value);\n+          }}\n+          onKeyDown={handleQueryFieldKeypress}\n+        />\n+      </Grid>\n+    </Grid>\n+  );\n+\n+  const userList = () => {\n+    // If there's no users because a search has not been done,\n+    // then return with nothing\n+    if (users.length < 1 && !hasSearched) {\n+      return null;\n+    }\n+\n+    return (\n+      <List\n+        id={genId(\"UserList\")}\n+        style={listHeight ? { height: listHeight, overflow: \"auto\" } : {}}\n+      >\n+        {users.length ? (\n+          users.map((userDetails: OEQ.UserQuery.UserDetails) => (\n+            <ListItem\n+              button\n+              onClick={() => {\n+                setSelectedUser(userDetails.id);\n+                onSelect(userDetails);\n+              }}\n+              key={userDetails.id}\n+              selected={selectedUser === userDetails.id}\n+            >\n+              <ListItemIcon>\n+                <AccountCircle />\n+              </ListItemIcon>\n+              <ListItemText\n+                primary={userDetails.username}\n+                secondary={`${userDetails.firstName} ${userDetails.lastName}`}\n+              />\n+            </ListItem>\n+          ))\n+        ) : (\n+          <ListItem>\n+            <ListItemIcon>\n+              <ErrorOutline />\n+            </ListItemIcon>\n+            <ListItemText\n+              secondary={sprintf(failedToFindUsersMessage, query)}\n+            />\n+          </ListItem>\n+        )}\n+      </List>\n+    );\n+  };\n+\n+  return (\n+    <Grid\n+      id={genId()}\n+      container\n+      direction=\"column\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "affebd597d588bdf6647db863434e6cdc4b306e3"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcyMTY4Ng==", "bodyText": "Does this mean when this text is found the rendering is completed?\nI will read this testing library's documentation.", "url": "https://github.com/openequella/openEQUELLA/pull/2132#discussion_r464721686", "createdAt": "2020-08-03T23:54:40Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/components/UserSearch.test.tsx", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import { fireEvent, render, screen, waitFor } from \"@testing-library/react\";\n+import \"@testing-library/jest-dom/extend-expect\";\n+import UserSearch from \"../../../tsrc/components/UserSearch\";\n+import { languageStrings } from \"../../../tsrc/util/langstrings\";\n+import { sprintf } from \"sprintf-js\";\n+import * as UserSearchMock from \"../../../__mocks__/UserSearch.mock\";\n+\n+describe(\"<UserSearch/>\", () => {\n+  const {\n+    failedToFindUsersMessage,\n+    queryFieldLabel,\n+  } = languageStrings.userSearchComponent;\n+\n+  // Helper to render and wait for component under test\n+  const renderUserSearch = async (\n+    onSelect: (username: OEQ.UserQuery.UserDetails) => void = jest.fn()\n+  ): Promise<HTMLElement> => {\n+    const { container } = render(\n+      <UserSearch\n+        onSelect={onSelect}\n+        userListProvider={UserSearchMock.userDetailsProvider}\n+      />\n+    );\n+\n+    // Wait for it to be rendered\n+    await waitFor(() => screen.getByText(queryFieldLabel));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "affebd597d588bdf6647db863434e6cdc4b306e3"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2aa7f175cbf022f0624c8afcfd03c4bf46027c0b", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/2aa7f175cbf022f0624c8afcfd03c4bf46027c0b", "committedDate": "2020-08-04T00:48:01Z", "message": "front-end: Remove superfluous Grid props in UserSearch component\n\nThese are the defaults, no need to specify here."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4866, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}