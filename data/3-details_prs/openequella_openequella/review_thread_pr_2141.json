{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzMTY0OTYx", "number": 2141, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoyODowOFrOEVRsPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNDoyMjo1MVrOEVqWmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzQ1NDA3OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/OEQHelpers.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoyODowOFrOG778jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjozMToxOFrOG78BNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwMTMyNw==", "bodyText": "Spare log.", "url": "https://github.com/openequella/openEQUELLA/pull/2141#discussion_r465501327", "createdAt": "2020-08-05T06:28:08Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/OEQHelpers.ts", "diffHunk": "@@ -24,11 +24,38 @@ import * as OEQ from \"@openequella/rest-api-client\";\n  *\n  * @param list A list most likely retrieved via a REST call in the REST Client library\n  */\n-export const summarisePagedBaseEntities = (\n-  list: OEQ.Common.PagedResult<OEQ.Common.BaseEntity>\n-) =>\n-  list.results.reduce(\n+export const summarisePagedBaseEntities = (list: OEQ.Common.BaseEntity[]) =>\n+  list.reduce(\n     (prev: Map<string, string>, curr: OEQ.Common.BaseEntity) =>\n       prev.set(curr.uuid, curr.name),\n     new Map<string, string>()\n   );\n+\n+const DEFAULT_RESUMPTION_TOKEN = \"0:10\";\n+\n+/**\n+ * Retrieve BaseEntities by resumption tokens.\n+ * If a resumption token is included in response, then send another request to retrieve\n+ * more entities, until no resumption token is returned.\n+ *\n+ * @param getData A function which takes a resumption token to retrieve specific entities\n+ *        such as schemas and collections.\n+ */\n+export const listEntities = <T extends OEQ.Common.BaseEntity>(\n+  getData: (resumptionToken: string) => Promise<OEQ.Common.PagedResult<T>>\n+): Promise<T[]> => {\n+  const entities: T[] = [];\n+  return getData(DEFAULT_RESUMPTION_TOKEN).then(async (pagedResult) => {\n+    console.log(pagedResult);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "717658f041bc79033de6d581b4e02b8f26dae794"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwMjUxOA==", "bodyText": "Ah thanks for reminding!", "url": "https://github.com/openequella/openEQUELLA/pull/2141#discussion_r465502518", "createdAt": "2020-08-05T06:31:18Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/OEQHelpers.ts", "diffHunk": "@@ -24,11 +24,38 @@ import * as OEQ from \"@openequella/rest-api-client\";\n  *\n  * @param list A list most likely retrieved via a REST call in the REST Client library\n  */\n-export const summarisePagedBaseEntities = (\n-  list: OEQ.Common.PagedResult<OEQ.Common.BaseEntity>\n-) =>\n-  list.results.reduce(\n+export const summarisePagedBaseEntities = (list: OEQ.Common.BaseEntity[]) =>\n+  list.reduce(\n     (prev: Map<string, string>, curr: OEQ.Common.BaseEntity) =>\n       prev.set(curr.uuid, curr.name),\n     new Map<string, string>()\n   );\n+\n+const DEFAULT_RESUMPTION_TOKEN = \"0:10\";\n+\n+/**\n+ * Retrieve BaseEntities by resumption tokens.\n+ * If a resumption token is included in response, then send another request to retrieve\n+ * more entities, until no resumption token is returned.\n+ *\n+ * @param getData A function which takes a resumption token to retrieve specific entities\n+ *        such as schemas and collections.\n+ */\n+export const listEntities = <T extends OEQ.Common.BaseEntity>(\n+  getData: (resumptionToken: string) => Promise<OEQ.Common.PagedResult<T>>\n+): Promise<T[]> => {\n+  const entities: T[] = [];\n+  return getData(DEFAULT_RESUMPTION_TOKEN).then(async (pagedResult) => {\n+    console.log(pagedResult);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwMTMyNw=="}, "originalCommit": {"oid": "717658f041bc79033de6d581b4e02b8f26dae794"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTE5MjgzOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/OEQHelpers.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMToyODoxMFrOG8gBZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMToyODoxMFrOG8gBZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA5MjM4OQ==", "bodyText": "A couple of things here:\n\nIf you make a recursive function, please put it in the JSDoc so it's immediately obvious to any consumers. This is important, as recursive functions can be a source of all kinds of wonderful issues. That leads to;\nAlthough I like you're thinking, using a recursive function to iteratively retrieve an unknown size of results from a server is dangerous! Here in Javascript land we don't have tail-recursion and so you easily run the risk of blowing the stack. this is a pretty simple case, so a while loop will be fine, or you want you could play with JS Iterators or Generators.\n\nSo, we need to rewrite this without the recursion.", "url": "https://github.com/openequella/openEQUELLA/pull/2141#discussion_r466092389", "createdAt": "2020-08-06T01:28:10Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/OEQHelpers.ts", "diffHunk": "@@ -24,11 +24,37 @@ import * as OEQ from \"@openequella/rest-api-client\";\n  *\n  * @param list A list most likely retrieved via a REST call in the REST Client library\n  */\n-export const summarisePagedBaseEntities = (\n-  list: OEQ.Common.PagedResult<OEQ.Common.BaseEntity>\n-) =>\n-  list.results.reduce(\n+export const summarisePagedBaseEntities = (list: OEQ.Common.BaseEntity[]) =>\n+  list.reduce(\n     (prev: Map<string, string>, curr: OEQ.Common.BaseEntity) =>\n       prev.set(curr.uuid, curr.name),\n     new Map<string, string>()\n   );\n+\n+const DEFAULT_RESUMPTION_TOKEN = \"0:10\";\n+\n+/**\n+ * Retrieve BaseEntities by resumption tokens.\n+ * If a resumption token is included in response, then send another request to retrieve\n+ * more entities, until no resumption token is returned.\n+ *\n+ * @param getData A function which takes a resumption token to retrieve specific entities\n+ *        such as schemas and collections.\n+ */\n+export const listEntities = <T extends OEQ.Common.BaseEntity>(\n+  getData: (resumptionToken: string) => Promise<OEQ.Common.PagedResult<T>>\n+): Promise<T[]> => {\n+  const entities: T[] = [];\n+  return getData(DEFAULT_RESUMPTION_TOKEN).then(async (pagedResult) => {\n+    entities.push(...pagedResult.results);\n+    // If a resumption token is returned, recursively call listEntities to retrieve more entities.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a17ce7d2153de2677e60bc1c1b05470d1d57295"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTQ5NDY0OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/OEQHelpers.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNDoyMjo1MVrOG8iwmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNDoyMjo1MVrOG8iwmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzNzI0Mg==", "bodyText": "If you're going to use await, wouldn't you just do:\n    const pagedResult = await getData(token);\n    entities.push(...pagedResult.results);\n    token = pagedResult.resumptionToken ?? \"\";\nOr are you doing it for the error handling?\nAlso, shouldn't it be fine for:\n    token = pagedResult.resumptionToken ?? \"\";\nJust to be:\n    token = pagedResult.resumptionToken;", "url": "https://github.com/openequella/openEQUELLA/pull/2141#discussion_r466137242", "createdAt": "2020-08-06T04:22:51Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/OEQHelpers.ts", "diffHunk": "@@ -24,11 +24,33 @@ import * as OEQ from \"@openequella/rest-api-client\";\n  *\n  * @param list A list most likely retrieved via a REST call in the REST Client library\n  */\n-export const summarisePagedBaseEntities = (\n-  list: OEQ.Common.PagedResult<OEQ.Common.BaseEntity>\n-) =>\n-  list.results.reduce(\n+export const summarisePagedBaseEntities = (list: OEQ.Common.BaseEntity[]) =>\n+  list.reduce(\n     (prev: Map<string, string>, curr: OEQ.Common.BaseEntity) =>\n       prev.set(curr.uuid, curr.name),\n     new Map<string, string>()\n   );\n+\n+const DEFAULT_RESUMPTION_TOKEN = \"0:10\";\n+\n+/**\n+ * Retrieve BaseEntities by resumption tokens.\n+ * If a resumption token is included in response, then send another request to retrieve\n+ * more entities, until no resumption token is returned.\n+ *\n+ * @param getData A function which takes a resumption token to retrieve specific entities\n+ *        such as schemas and collections.\n+ */\n+export const listEntities = async <T extends OEQ.Common.BaseEntity>(\n+  getData: (resumptionToken: string) => Promise<OEQ.Common.PagedResult<T>>\n+): Promise<T[]> => {\n+  const entities: T[] = [];\n+  let token: string = DEFAULT_RESUMPTION_TOKEN;\n+  while (token) {\n+    await getData(token).then((pagedResult) => {\n+      entities.push(...pagedResult.results);\n+      token = pagedResult.resumptionToken ?? \"\";\n+    });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "579f6e5022e9e67588d6975fb5ce883a814fa9c2"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1190, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}