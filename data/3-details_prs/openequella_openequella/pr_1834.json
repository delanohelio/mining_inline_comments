{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0MzI3MzI5", "number": 1834, "title": "Add schema node selector", "bodyText": "Checklist\n\n\n the contributor license agreement is signed\n commit message follows commit guidelines\n tests are included\n screenshots are included showing significant UI changes\n documentation is changed or added (new storybook story, JSDoc)\n\nDescription of change\nAdds a reuseable SchemaSelector component for choosing schemas and schema nodes for use in the oEQ new UI. In place in the FacetDialog. The new functions in SchemaModule for getting a list of all paths for a schema and for generating the TreeItem tree are surrounded by tests.", "createdAt": "2020-06-15T06:50:08Z", "url": "https://github.com/openequella/openEQUELLA/pull/1834", "merged": true, "mergeCommit": {"oid": "d8d90914f1da8d3137b5600808dba6cf0581722c"}, "closed": true, "closedAt": "2020-06-18T03:32:09Z", "author": {"login": "SammyIsConfused"}, "timelineItems": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcm25cGgH2gAyNDM0MzI3MzI5OjM3N2E5NmJiYTEzZTVjNzkwYjk3NjYyNjM4NWVhMWU2YmJhNjZmNzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsUQ_0gFqTQzMjg4MTg5OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "377a96bba13e5c790b976626385ea1e6bba66f75", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/377a96bba13e5c790b976626385ea1e6bba66f75", "committedDate": "2020-06-01T02:32:49Z", "message": "Add initial component and story for SchemaNodeSelector.tsx"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93d8fb3fcdab6187012c3093822c3a149d6ec64f", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/93d8fb3fcdab6187012c3093822c3a149d6ec64f", "committedDate": "2020-06-01T02:32:49Z", "message": "Start SchemaSelector.tsx"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "797c85d02f072b4671fa5e9428cc9deabb07d669", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/797c85d02f072b4671fa5e9428cc9deabb07d669", "committedDate": "2020-06-02T04:07:20Z", "message": "Connect to schema rest endpoints"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c120193216635382b266ea00f78d1956d652e74", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/5c120193216635382b266ea00f78d1956d652e74", "committedDate": "2020-06-12T04:56:17Z", "message": "Add mock data for story"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6828cde70900ae6fd33408cd19472abef5892e4", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/a6828cde70900ae6fd33408cd19472abef5892e4", "committedDate": "2020-06-15T01:46:18Z", "message": "Merge branch 'develop' into feature/add_schema_node_selector"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7afdff357e2e54cf029c814cc5dd090e4d2b14f4", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/7afdff357e2e54cf029c814cc5dd090e4d2b14f4", "committedDate": "2020-06-15T03:45:02Z", "message": "Revert mistaken change to tsconfig.json"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4272917353aaba6379f65a9976002a449215a6fb", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/4272917353aaba6379f65a9976002a449215a6fb", "committedDate": "2020-06-15T03:57:46Z", "message": "Add parents to the mock data"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f79adb030404e10342d2193f50af59fa7773f62c", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/f79adb030404e10342d2193f50af59fa7773f62c", "committedDate": "2020-06-15T03:58:33Z", "message": "Add a method to get all paths and to render the tree in SchemaModule.tsx"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c4b2c2f024702bcccfb4a1d115e025a8390a23b", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/8c4b2c2f024702bcccfb4a1d115e025a8390a23b", "committedDate": "2020-06-15T03:59:07Z", "message": "Add tests to new SchemaModule functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "deade57f1b85d227ac01b86d4fe1ecc1f0a981ef", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/deade57f1b85d227ac01b86d4fe1ecc1f0a981ef", "committedDate": "2020-06-15T04:01:41Z", "message": "Update FacetDialog.tsx to include the SchemaSelector"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09da546bdf18133a22eef7f249d12273533a7e79", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/09da546bdf18133a22eef7f249d12273533a7e79", "committedDate": "2020-06-15T04:07:44Z", "message": "Add expand/collapse controls"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efa10bfae7e24fbff7c45f6b0140cfc606b9f7db", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/efa10bfae7e24fbff7c45f6b0140cfc606b9f7db", "committedDate": "2020-06-15T05:41:24Z", "message": "Enable manual input"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ad2366daa09e1ea53df17a64a3d7f9faa0c8000", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/1ad2366daa09e1ea53df17a64a3d7f9faa0c8000", "committedDate": "2020-06-15T06:32:17Z", "message": "Update language strings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e8946b5bc2278b185a7c21141550adc84cde2ab", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/2e8946b5bc2278b185a7c21141550adc84cde2ab", "committedDate": "2020-06-15T07:11:52Z", "message": "Stop using for of loop\n\nRequired a special flag in tsconfig.json. using Map.forEach\navoids the issue."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e8ea6da665e89c9970cea57e4ed05b52221d84f", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/5e8ea6da665e89c9970cea57e4ed05b52221d84f", "committedDate": "2020-06-15T07:39:36Z", "message": "Merge branch 'develop' into feature/add_schema_node_selector"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48a8e3e4d56444a2f825e4b68f93490d47778fd2", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/48a8e3e4d56444a2f825e4b68f93490d47778fd2", "committedDate": "2020-06-16T00:03:33Z", "message": "Add mock API calls to FacetedSearchSettingsPage.test.tsx"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMTU5MzUw", "url": "https://github.com/openequella/openEQUELLA/pull/1834#pullrequestreview-431159350", "createdAt": "2020-06-16T04:56:47Z", "commit": {"oid": "48a8e3e4d56444a2f825e4b68f93490d47778fd2"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNDo1Njo0OFrOGkLPJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNTozOToyMVrOGkL7sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU4NjAyMg==", "bodyText": "Can we make tree the first parameter to be consistent with the interface definition ?", "url": "https://github.com/openequella/openEQUELLA/pull/1834#discussion_r440586022", "createdAt": "2020-06-16T04:56:48Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/SchemaNodeSelector.tsx", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import { TreeView } from \"@material-ui/lab\";\n+import { Add, Remove } from \"@material-ui/icons\";\n+import { getAllPaths, renderTree, SchemaNode } from \"../schema/SchemaModule\";\n+import { Button, Grid } from \"@material-ui/core\";\n+import { makeStyles, Theme } from \"@material-ui/core/styles\";\n+import { languageStrings } from \"../util/langstrings\";\n+\n+const useStyles = makeStyles((theme: Theme) => {\n+  return {\n+    treeView: {\n+      flexGrow: 1,\n+      maxHeight: \"30vh\",\n+      overflowY: \"auto\",\n+      width: \"100%\",\n+    },\n+    button: {\n+      marginTop: theme.spacing(1),\n+      marginBottom: theme.spacing(1),\n+    },\n+  };\n+});\n+\n+interface SchemaNodeSelectorProps {\n+  /**\n+   * The schema tree this component will display.\n+   */\n+  tree: SchemaNode | undefined;\n+  /**\n+   * Function that gets called upon selection of a node.\n+   * @param node The path of the selected node.\n+   */\n+  setSelectedNode: (node: string) => void;\n+  /**\n+   * If present, expand all/collapse all buttons will be available.\n+   */\n+  expandControls?: boolean;\n+}\n+\n+/**\n+ * This component defines a schema node selector, for the display of a schema and selection of its nodes. The schema itself passed into this should be of type SchemaNode.\n+ */\n+export default function SchemaNodeSelector({\n+  setSelectedNode,\n+  tree,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48a8e3e4d56444a2f825e4b68f93490d47778fd2"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU4NjcwNQ==", "bodyText": "This name makes me feel it was a boolean variable at the first glance, but it's certainly fine.", "url": "https://github.com/openequella/openEQUELLA/pull/1834#discussion_r440586705", "createdAt": "2020-06-16T04:59:41Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/SchemaNodeSelector.tsx", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import { TreeView } from \"@material-ui/lab\";\n+import { Add, Remove } from \"@material-ui/icons\";\n+import { getAllPaths, renderTree, SchemaNode } from \"../schema/SchemaModule\";\n+import { Button, Grid } from \"@material-ui/core\";\n+import { makeStyles, Theme } from \"@material-ui/core/styles\";\n+import { languageStrings } from \"../util/langstrings\";\n+\n+const useStyles = makeStyles((theme: Theme) => {\n+  return {\n+    treeView: {\n+      flexGrow: 1,\n+      maxHeight: \"30vh\",\n+      overflowY: \"auto\",\n+      width: \"100%\",\n+    },\n+    button: {\n+      marginTop: theme.spacing(1),\n+      marginBottom: theme.spacing(1),\n+    },\n+  };\n+});\n+\n+interface SchemaNodeSelectorProps {\n+  /**\n+   * The schema tree this component will display.\n+   */\n+  tree: SchemaNode | undefined;\n+  /**\n+   * Function that gets called upon selection of a node.\n+   * @param node The path of the selected node.\n+   */\n+  setSelectedNode: (node: string) => void;\n+  /**\n+   * If present, expand all/collapse all buttons will be available.\n+   */\n+  expandControls?: boolean;\n+}\n+\n+/**\n+ * This component defines a schema node selector, for the display of a schema and selection of its nodes. The schema itself passed into this should be of type SchemaNode.\n+ */\n+export default function SchemaNodeSelector({\n+  setSelectedNode,\n+  tree,\n+  expandControls,\n+}: SchemaNodeSelectorProps) {\n+  const [selectedNode, setSelected] = React.useState(\"\");\n+  const [expanded, setExpanded] = React.useState<string[]>([]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48a8e3e4d56444a2f825e4b68f93490d47778fd2"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU4NzU0Mw==", "bodyText": "I think we just need if (tree) .", "url": "https://github.com/openequella/openEQUELLA/pull/1834#discussion_r440587543", "createdAt": "2020-06-16T05:02:52Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/SchemaNodeSelector.tsx", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import { TreeView } from \"@material-ui/lab\";\n+import { Add, Remove } from \"@material-ui/icons\";\n+import { getAllPaths, renderTree, SchemaNode } from \"../schema/SchemaModule\";\n+import { Button, Grid } from \"@material-ui/core\";\n+import { makeStyles, Theme } from \"@material-ui/core/styles\";\n+import { languageStrings } from \"../util/langstrings\";\n+\n+const useStyles = makeStyles((theme: Theme) => {\n+  return {\n+    treeView: {\n+      flexGrow: 1,\n+      maxHeight: \"30vh\",\n+      overflowY: \"auto\",\n+      width: \"100%\",\n+    },\n+    button: {\n+      marginTop: theme.spacing(1),\n+      marginBottom: theme.spacing(1),\n+    },\n+  };\n+});\n+\n+interface SchemaNodeSelectorProps {\n+  /**\n+   * The schema tree this component will display.\n+   */\n+  tree: SchemaNode | undefined;\n+  /**\n+   * Function that gets called upon selection of a node.\n+   * @param node The path of the selected node.\n+   */\n+  setSelectedNode: (node: string) => void;\n+  /**\n+   * If present, expand all/collapse all buttons will be available.\n+   */\n+  expandControls?: boolean;\n+}\n+\n+/**\n+ * This component defines a schema node selector, for the display of a schema and selection of its nodes. The schema itself passed into this should be of type SchemaNode.\n+ */\n+export default function SchemaNodeSelector({\n+  setSelectedNode,\n+  tree,\n+  expandControls,\n+}: SchemaNodeSelectorProps) {\n+  const [selectedNode, setSelected] = React.useState(\"\");\n+  const [expanded, setExpanded] = React.useState<string[]>([]);\n+  const [renderedTree, setRenderedTree] = React.useState<JSX.Element>(<div />);\n+  const classes = useStyles();\n+  const strings =\n+    languageStrings.settings.searching.facetedsearchsetting.schemaselector\n+      .nodeselector;\n+  React.useEffect(() => {\n+    if (tree !== undefined) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48a8e3e4d56444a2f825e4b68f93490d47778fd2"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU5MDIzNA==", "bodyText": "May I ask why choose Grid here? There is only one grid item.", "url": "https://github.com/openequella/openEQUELLA/pull/1834#discussion_r440590234", "createdAt": "2020-06-16T05:13:10Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/SchemaNodeSelector.tsx", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import { TreeView } from \"@material-ui/lab\";\n+import { Add, Remove } from \"@material-ui/icons\";\n+import { getAllPaths, renderTree, SchemaNode } from \"../schema/SchemaModule\";\n+import { Button, Grid } from \"@material-ui/core\";\n+import { makeStyles, Theme } from \"@material-ui/core/styles\";\n+import { languageStrings } from \"../util/langstrings\";\n+\n+const useStyles = makeStyles((theme: Theme) => {\n+  return {\n+    treeView: {\n+      flexGrow: 1,\n+      maxHeight: \"30vh\",\n+      overflowY: \"auto\",\n+      width: \"100%\",\n+    },\n+    button: {\n+      marginTop: theme.spacing(1),\n+      marginBottom: theme.spacing(1),\n+    },\n+  };\n+});\n+\n+interface SchemaNodeSelectorProps {\n+  /**\n+   * The schema tree this component will display.\n+   */\n+  tree: SchemaNode | undefined;\n+  /**\n+   * Function that gets called upon selection of a node.\n+   * @param node The path of the selected node.\n+   */\n+  setSelectedNode: (node: string) => void;\n+  /**\n+   * If present, expand all/collapse all buttons will be available.\n+   */\n+  expandControls?: boolean;\n+}\n+\n+/**\n+ * This component defines a schema node selector, for the display of a schema and selection of its nodes. The schema itself passed into this should be of type SchemaNode.\n+ */\n+export default function SchemaNodeSelector({\n+  setSelectedNode,\n+  tree,\n+  expandControls,\n+}: SchemaNodeSelectorProps) {\n+  const [selectedNode, setSelected] = React.useState(\"\");\n+  const [expanded, setExpanded] = React.useState<string[]>([]);\n+  const [renderedTree, setRenderedTree] = React.useState<JSX.Element>(<div />);\n+  const classes = useStyles();\n+  const strings =\n+    languageStrings.settings.searching.facetedsearchsetting.schemaselector\n+      .nodeselector;\n+  React.useEffect(() => {\n+    if (tree !== undefined) {\n+      setRenderedTree(renderTree(tree));\n+      setExpanded([]);\n+      setSelectedNode(\"\");\n+    }\n+  }, [tree]);\n+\n+  return (\n+    <>\n+      {expandControls && (\n+        <Grid container direction={\"row\"} wrap={\"nowrap\"} justify={\"flex-end\"}>\n+          <Grid item>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48a8e3e4d56444a2f825e4b68f93490d47778fd2"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU5MzUxNA==", "bodyText": "Is there any particular reason for using JSX.Element ?  I think JSX.Element is more or less the same as ReactElement but I did not see any usage of JSX.Element  before in oEQ.", "url": "https://github.com/openequella/openEQUELLA/pull/1834#discussion_r440593514", "createdAt": "2020-06-16T05:25:31Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/SchemaSelector.tsx", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import { Grid, InputLabel, MenuItem, Select } from \"@material-ui/core\";\n+import {\n+  schemaListSummary,\n+  SchemaNode,\n+  schemaTree,\n+} from \"../schema/SchemaModule\";\n+import SchemaNodeSelector from \"../settings/SchemaNodeSelector\";\n+import { languageStrings } from \"../util/langstrings\";\n+\n+interface SchemaSelectorProps {\n+  /**\n+   * Callback function triggered upon selection of a node.\n+   * @param node  Path of the selected node.\n+   */\n+  setSchemaNode: (node: string) => void;\n+}\n+\n+/**\n+ * This component defines a schema selector, for selecting a schema and then a node within.\n+ * When a schema is selected, it will display that schema within a SchemaNodeSelector.\n+ *\n+ */\n+export default function SchemaSelector({ setSchemaNode }: SchemaSelectorProps) {\n+  const [selectedSchema, setSelectedSchema] = React.useState<\n+    string | undefined\n+  >(undefined);\n+  const [schema, setSchema] = React.useState<SchemaNode>();\n+  const [schemaList, setSchemaList] = React.useState<JSX.Element[]>([]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48a8e3e4d56444a2f825e4b68f93490d47778fd2"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU5NDY4Mw==", "bodyText": "Does this default MenuItem need an ID?", "url": "https://github.com/openequella/openEQUELLA/pull/1834#discussion_r440594683", "createdAt": "2020-06-16T05:29:41Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/SchemaSelector.tsx", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import { Grid, InputLabel, MenuItem, Select } from \"@material-ui/core\";\n+import {\n+  schemaListSummary,\n+  SchemaNode,\n+  schemaTree,\n+} from \"../schema/SchemaModule\";\n+import SchemaNodeSelector from \"../settings/SchemaNodeSelector\";\n+import { languageStrings } from \"../util/langstrings\";\n+\n+interface SchemaSelectorProps {\n+  /**\n+   * Callback function triggered upon selection of a node.\n+   * @param node  Path of the selected node.\n+   */\n+  setSchemaNode: (node: string) => void;\n+}\n+\n+/**\n+ * This component defines a schema selector, for selecting a schema and then a node within.\n+ * When a schema is selected, it will display that schema within a SchemaNodeSelector.\n+ *\n+ */\n+export default function SchemaSelector({ setSchemaNode }: SchemaSelectorProps) {\n+  const [selectedSchema, setSelectedSchema] = React.useState<\n+    string | undefined\n+  >(undefined);\n+  const [schema, setSchema] = React.useState<SchemaNode>();\n+  const [schemaList, setSchemaList] = React.useState<JSX.Element[]>([]);\n+  const [schemaNodePath, setSchemaNodePath] = React.useState<string>(\"\");\n+  const strings =\n+    languageStrings.settings.searching.facetedsearchsetting.schemaselector;\n+  React.useEffect(() => {\n+    schemaListSummary().then((schemas) => {\n+      const elementList: JSX.Element[] = [\n+        <MenuItem value={undefined}>{strings.selectaschema}</MenuItem>,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48a8e3e4d56444a2f825e4b68f93490d47778fd2"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU5NTQzMw==", "bodyText": "what about selectedSchema && selectedSchema.trim() ?", "url": "https://github.com/openequella/openEQUELLA/pull/1834#discussion_r440595433", "createdAt": "2020-06-16T05:32:16Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/SchemaSelector.tsx", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import { Grid, InputLabel, MenuItem, Select } from \"@material-ui/core\";\n+import {\n+  schemaListSummary,\n+  SchemaNode,\n+  schemaTree,\n+} from \"../schema/SchemaModule\";\n+import SchemaNodeSelector from \"../settings/SchemaNodeSelector\";\n+import { languageStrings } from \"../util/langstrings\";\n+\n+interface SchemaSelectorProps {\n+  /**\n+   * Callback function triggered upon selection of a node.\n+   * @param node  Path of the selected node.\n+   */\n+  setSchemaNode: (node: string) => void;\n+}\n+\n+/**\n+ * This component defines a schema selector, for selecting a schema and then a node within.\n+ * When a schema is selected, it will display that schema within a SchemaNodeSelector.\n+ *\n+ */\n+export default function SchemaSelector({ setSchemaNode }: SchemaSelectorProps) {\n+  const [selectedSchema, setSelectedSchema] = React.useState<\n+    string | undefined\n+  >(undefined);\n+  const [schema, setSchema] = React.useState<SchemaNode>();\n+  const [schemaList, setSchemaList] = React.useState<JSX.Element[]>([]);\n+  const [schemaNodePath, setSchemaNodePath] = React.useState<string>(\"\");\n+  const strings =\n+    languageStrings.settings.searching.facetedsearchsetting.schemaselector;\n+  React.useEffect(() => {\n+    schemaListSummary().then((schemas) => {\n+      const elementList: JSX.Element[] = [\n+        <MenuItem value={undefined}>{strings.selectaschema}</MenuItem>,\n+      ];\n+      schemas.forEach((name, uuid) => {\n+        elementList.push(\n+          <MenuItem id={uuid} value={uuid}>\n+            {name}\n+          </MenuItem>\n+        );\n+      });\n+      setSchemaList(elementList);\n+    });\n+  }, []);\n+\n+  React.useEffect(() => {\n+    if (selectedSchema && selectedSchema !== \"\") {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48a8e3e4d56444a2f825e4b68f93490d47778fd2"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU5NzE1MQ==", "bodyText": "Same as line 67.", "url": "https://github.com/openequella/openEQUELLA/pull/1834#discussion_r440597151", "createdAt": "2020-06-16T05:38:12Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/SchemaSelector.tsx", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import { Grid, InputLabel, MenuItem, Select } from \"@material-ui/core\";\n+import {\n+  schemaListSummary,\n+  SchemaNode,\n+  schemaTree,\n+} from \"../schema/SchemaModule\";\n+import SchemaNodeSelector from \"../settings/SchemaNodeSelector\";\n+import { languageStrings } from \"../util/langstrings\";\n+\n+interface SchemaSelectorProps {\n+  /**\n+   * Callback function triggered upon selection of a node.\n+   * @param node  Path of the selected node.\n+   */\n+  setSchemaNode: (node: string) => void;\n+}\n+\n+/**\n+ * This component defines a schema selector, for selecting a schema and then a node within.\n+ * When a schema is selected, it will display that schema within a SchemaNodeSelector.\n+ *\n+ */\n+export default function SchemaSelector({ setSchemaNode }: SchemaSelectorProps) {\n+  const [selectedSchema, setSelectedSchema] = React.useState<\n+    string | undefined\n+  >(undefined);\n+  const [schema, setSchema] = React.useState<SchemaNode>();\n+  const [schemaList, setSchemaList] = React.useState<JSX.Element[]>([]);\n+  const [schemaNodePath, setSchemaNodePath] = React.useState<string>(\"\");\n+  const strings =\n+    languageStrings.settings.searching.facetedsearchsetting.schemaselector;\n+  React.useEffect(() => {\n+    schemaListSummary().then((schemas) => {\n+      const elementList: JSX.Element[] = [\n+        <MenuItem value={undefined}>{strings.selectaschema}</MenuItem>,\n+      ];\n+      schemas.forEach((name, uuid) => {\n+        elementList.push(\n+          <MenuItem id={uuid} value={uuid}>\n+            {name}\n+          </MenuItem>\n+        );\n+      });\n+      setSchemaList(elementList);\n+    });\n+  }, []);\n+\n+  React.useEffect(() => {\n+    if (selectedSchema && selectedSchema !== \"\") {\n+      schemaTree(selectedSchema).then((tree) => setSchema(tree));\n+    } else {\n+      setSchema(undefined);\n+    }\n+  }, [selectedSchema]);\n+\n+  React.useEffect(() => {\n+    if (schemaNodePath !== \"\") {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48a8e3e4d56444a2f825e4b68f93490d47778fd2"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU5NzQyNQ==", "bodyText": "Do we need this fragment ?", "url": "https://github.com/openequella/openEQUELLA/pull/1834#discussion_r440597425", "createdAt": "2020-06-16T05:39:21Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/SchemaSelector.tsx", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import { Grid, InputLabel, MenuItem, Select } from \"@material-ui/core\";\n+import {\n+  schemaListSummary,\n+  SchemaNode,\n+  schemaTree,\n+} from \"../schema/SchemaModule\";\n+import SchemaNodeSelector from \"../settings/SchemaNodeSelector\";\n+import { languageStrings } from \"../util/langstrings\";\n+\n+interface SchemaSelectorProps {\n+  /**\n+   * Callback function triggered upon selection of a node.\n+   * @param node  Path of the selected node.\n+   */\n+  setSchemaNode: (node: string) => void;\n+}\n+\n+/**\n+ * This component defines a schema selector, for selecting a schema and then a node within.\n+ * When a schema is selected, it will display that schema within a SchemaNodeSelector.\n+ *\n+ */\n+export default function SchemaSelector({ setSchemaNode }: SchemaSelectorProps) {\n+  const [selectedSchema, setSelectedSchema] = React.useState<\n+    string | undefined\n+  >(undefined);\n+  const [schema, setSchema] = React.useState<SchemaNode>();\n+  const [schemaList, setSchemaList] = React.useState<JSX.Element[]>([]);\n+  const [schemaNodePath, setSchemaNodePath] = React.useState<string>(\"\");\n+  const strings =\n+    languageStrings.settings.searching.facetedsearchsetting.schemaselector;\n+  React.useEffect(() => {\n+    schemaListSummary().then((schemas) => {\n+      const elementList: JSX.Element[] = [\n+        <MenuItem value={undefined}>{strings.selectaschema}</MenuItem>,\n+      ];\n+      schemas.forEach((name, uuid) => {\n+        elementList.push(\n+          <MenuItem id={uuid} value={uuid}>\n+            {name}\n+          </MenuItem>\n+        );\n+      });\n+      setSchemaList(elementList);\n+    });\n+  }, []);\n+\n+  React.useEffect(() => {\n+    if (selectedSchema && selectedSchema !== \"\") {\n+      schemaTree(selectedSchema).then((tree) => setSchema(tree));\n+    } else {\n+      setSchema(undefined);\n+    }\n+  }, [selectedSchema]);\n+\n+  React.useEffect(() => {\n+    if (schemaNodePath !== \"\") {\n+      setSchemaNode(schemaNodePath);\n+    }\n+  }, [schemaNodePath]);\n+  return (\n+    <Grid container direction={\"column\"} spacing={0}>\n+      <>\n+        <Grid item>\n+          {schemaList && (\n+            <>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48a8e3e4d56444a2f825e4b68f93490d47778fd2"}, "originalPosition": 84}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df887c7fb75177327b98eb1c56b55d75b93607f5", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/df887c7fb75177327b98eb1c56b55d75b93607f5", "committedDate": "2020-06-16T06:52:11Z", "message": "Add id to default menu item, tidy up code based on Penghai's feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNzE0Nzk2", "url": "https://github.com/openequella/openEQUELLA/pull/1834#pullrequestreview-431714796", "createdAt": "2020-06-16T17:02:55Z", "commit": {"oid": "df887c7fb75177327b98eb1c56b55d75b93607f5"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzowMjo1NVrOGkk5LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzoyMTo0NlrOGklkOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAwNjM4MQ==", "bodyText": "maybe leverage flatMap with concat to add\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              paths.push(pathForNode(nodes, stripXml));\n          \n          \n            \n              nodes.children?.forEach((childNode) => {\n          \n          \n            \n                paths.concat(getAllPaths(childNode, paths, stripXml));\n          \n          \n            \n              });\n          \n          \n            \n            \n          \n          \n            \n              return paths;\n          \n          \n            \n              return paths.concat(pathForNode(nodes, stripXml)).concat(\n          \n          \n            \n                nodes.children?.flatMap((childNode) => {\n          \n          \n            \n                  return getAllPaths(childNode, paths, stripXml);\n          \n          \n            \n                }) ?? []\n          \n          \n            \n              );", "url": "https://github.com/openequella/openEQUELLA/pull/1834#discussion_r441006381", "createdAt": "2020-06-16T17:02:55Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/schema/SchemaModule.tsx", "diffHunk": "@@ -123,3 +125,43 @@ export const pathForNode = (node: SchemaNode, stripXml = true): string => {\n \n   return path;\n };\n+\n+/**\n+ * Recursive helper function to get a list of all possible xml paths from a given SchemaNode.\n+ * @param nodes The schema to generate paths for.\n+ * @param paths Used by the recursive algorithm to build up the returned list.\n+ *          When passing in initially, leave as a blank array.\n+ * @param stripXml Passed into pathForNode. Whether to include the leading /xml.\n+ *\n+ */\n+export const getAllPaths = (\n+  nodes: SchemaNode,\n+  paths: string[],\n+  stripXml = true\n+) => {\n+  paths.push(pathForNode(nodes, stripXml));\n+  nodes.children?.forEach((childNode) => {\n+    paths.concat(getAllPaths(childNode, paths, stripXml));\n+  });\n+\n+  return paths;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df887c7fb75177327b98eb1c56b55d75b93607f5"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxMjEyOQ==", "bodyText": "use map as an alternative forEach with push when possible.\nmap makes it visually easier to track data flow\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  const elementList: JSX.Element[] = [\n          \n          \n            \n                    <MenuItem id={strings.selectaschema} value={undefined}>\n          \n          \n            \n                      {strings.selectaschema}\n          \n          \n            \n                    </MenuItem>,\n          \n          \n            \n                  ];\n          \n          \n            \n                  schemas.forEach((name, uuid) => {\n          \n          \n            \n                    elementList.push(\n          \n          \n            \n                      <MenuItem id={uuid} value={uuid}>\n          \n          \n            \n                        {name}\n          \n          \n            \n                      </MenuItem>\n          \n          \n            \n                    );\n          \n          \n            \n                  });\n          \n          \n            \n                  setSchemaList(elementList);\n          \n          \n            \n                  const defaultListItem = [\n          \n          \n            \n                    <MenuItem id={strings.selectaschema} value={undefined}>\n          \n          \n            \n                      {strings.selectaschema}\n          \n          \n            \n                    </MenuItem>,\n          \n          \n            \n                  ];\n          \n          \n            \n                  const schemaListItems = schemas.map((name, uuid) => (\n          \n          \n            \n                    <MenuItem id={uuid} value={uuid}>\n          \n          \n            \n                      {name}\n          \n          \n            \n                    </MenuItem>\n          \n          \n            \n                  ));\n          \n          \n            \n                  setSchemaList(defaultListItem.concat(schemaListItems));", "url": "https://github.com/openequella/openEQUELLA/pull/1834#discussion_r441012129", "createdAt": "2020-06-16T17:12:56Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/SchemaSelector.tsx", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import { ReactElement } from \"react\";\n+import { Grid, InputLabel, MenuItem, Select } from \"@material-ui/core\";\n+import {\n+  schemaListSummary,\n+  SchemaNode,\n+  schemaTree,\n+} from \"../schema/SchemaModule\";\n+import SchemaNodeSelector from \"../settings/SchemaNodeSelector\";\n+import { languageStrings } from \"../util/langstrings\";\n+\n+interface SchemaSelectorProps {\n+  /**\n+   * Callback function triggered upon selection of a node.\n+   * @param node  Path of the selected node.\n+   */\n+  setSchemaNode: (node: string) => void;\n+}\n+\n+/**\n+ * This component defines a schema selector, for selecting a schema and then a node within.\n+ * When a schema is selected, it will display that schema within a SchemaNodeSelector.\n+ *\n+ */\n+export default function SchemaSelector({ setSchemaNode }: SchemaSelectorProps) {\n+  const [selectedSchema, setSelectedSchema] = React.useState<\n+    string | undefined\n+  >(undefined);\n+  const [schema, setSchema] = React.useState<SchemaNode>();\n+  const [schemaList, setSchemaList] = React.useState<ReactElement[]>([]);\n+  const [schemaNodePath, setSchemaNodePath] = React.useState<string>(\"\");\n+  const strings =\n+    languageStrings.settings.searching.facetedsearchsetting.schemaselector;\n+  React.useEffect(() => {\n+    schemaListSummary().then((schemas) => {\n+      const elementList: JSX.Element[] = [\n+        <MenuItem id={strings.selectaschema} value={undefined}>\n+          {strings.selectaschema}\n+        </MenuItem>,\n+      ];\n+      schemas.forEach((name, uuid) => {\n+        elementList.push(\n+          <MenuItem id={uuid} value={uuid}>\n+            {name}\n+          </MenuItem>\n+        );\n+      });\n+      setSchemaList(elementList);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df887c7fb75177327b98eb1c56b55d75b93607f5"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxMzIwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              }, [schemaNodePath]);\n          \n          \n            \n              return (\n          \n          \n            \n              }, [schemaNodePath]);\n          \n          \n            \n            \n          \n          \n            \n              return (", "url": "https://github.com/openequella/openEQUELLA/pull/1834#discussion_r441013204", "createdAt": "2020-06-16T17:14:47Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/SchemaSelector.tsx", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import { ReactElement } from \"react\";\n+import { Grid, InputLabel, MenuItem, Select } from \"@material-ui/core\";\n+import {\n+  schemaListSummary,\n+  SchemaNode,\n+  schemaTree,\n+} from \"../schema/SchemaModule\";\n+import SchemaNodeSelector from \"../settings/SchemaNodeSelector\";\n+import { languageStrings } from \"../util/langstrings\";\n+\n+interface SchemaSelectorProps {\n+  /**\n+   * Callback function triggered upon selection of a node.\n+   * @param node  Path of the selected node.\n+   */\n+  setSchemaNode: (node: string) => void;\n+}\n+\n+/**\n+ * This component defines a schema selector, for selecting a schema and then a node within.\n+ * When a schema is selected, it will display that schema within a SchemaNodeSelector.\n+ *\n+ */\n+export default function SchemaSelector({ setSchemaNode }: SchemaSelectorProps) {\n+  const [selectedSchema, setSelectedSchema] = React.useState<\n+    string | undefined\n+  >(undefined);\n+  const [schema, setSchema] = React.useState<SchemaNode>();\n+  const [schemaList, setSchemaList] = React.useState<ReactElement[]>([]);\n+  const [schemaNodePath, setSchemaNodePath] = React.useState<string>(\"\");\n+  const strings =\n+    languageStrings.settings.searching.facetedsearchsetting.schemaselector;\n+  React.useEffect(() => {\n+    schemaListSummary().then((schemas) => {\n+      const elementList: JSX.Element[] = [\n+        <MenuItem id={strings.selectaschema} value={undefined}>\n+          {strings.selectaschema}\n+        </MenuItem>,\n+      ];\n+      schemas.forEach((name, uuid) => {\n+        elementList.push(\n+          <MenuItem id={uuid} value={uuid}>\n+            {name}\n+          </MenuItem>\n+        );\n+      });\n+      setSchemaList(elementList);\n+    });\n+  }, []);\n+\n+  React.useEffect(() => {\n+    if (selectedSchema?.trim()) {\n+      schemaTree(selectedSchema).then((tree) => setSchema(tree));\n+    } else {\n+      setSchema(undefined);\n+    }\n+  }, [selectedSchema]);\n+\n+  React.useEffect(() => {\n+    if (schemaNodePath?.trim()) {\n+      setSchemaNode(schemaNodePath);\n+    }\n+  }, [schemaNodePath]);\n+  return (", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df887c7fb75177327b98eb1c56b55d75b93607f5"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxNDE1MQ==", "bodyText": "using currentTarget instead of target may remove the need for the cast", "url": "https://github.com/openequella/openEQUELLA/pull/1834#discussion_r441014151", "createdAt": "2020-06-16T17:16:26Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/SchemaSelector.tsx", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import { ReactElement } from \"react\";\n+import { Grid, InputLabel, MenuItem, Select } from \"@material-ui/core\";\n+import {\n+  schemaListSummary,\n+  SchemaNode,\n+  schemaTree,\n+} from \"../schema/SchemaModule\";\n+import SchemaNodeSelector from \"../settings/SchemaNodeSelector\";\n+import { languageStrings } from \"../util/langstrings\";\n+\n+interface SchemaSelectorProps {\n+  /**\n+   * Callback function triggered upon selection of a node.\n+   * @param node  Path of the selected node.\n+   */\n+  setSchemaNode: (node: string) => void;\n+}\n+\n+/**\n+ * This component defines a schema selector, for selecting a schema and then a node within.\n+ * When a schema is selected, it will display that schema within a SchemaNodeSelector.\n+ *\n+ */\n+export default function SchemaSelector({ setSchemaNode }: SchemaSelectorProps) {\n+  const [selectedSchema, setSelectedSchema] = React.useState<\n+    string | undefined\n+  >(undefined);\n+  const [schema, setSchema] = React.useState<SchemaNode>();\n+  const [schemaList, setSchemaList] = React.useState<ReactElement[]>([]);\n+  const [schemaNodePath, setSchemaNodePath] = React.useState<string>(\"\");\n+  const strings =\n+    languageStrings.settings.searching.facetedsearchsetting.schemaselector;\n+  React.useEffect(() => {\n+    schemaListSummary().then((schemas) => {\n+      const elementList: JSX.Element[] = [\n+        <MenuItem id={strings.selectaschema} value={undefined}>\n+          {strings.selectaschema}\n+        </MenuItem>,\n+      ];\n+      schemas.forEach((name, uuid) => {\n+        elementList.push(\n+          <MenuItem id={uuid} value={uuid}>\n+            {name}\n+          </MenuItem>\n+        );\n+      });\n+      setSchemaList(elementList);\n+    });\n+  }, []);\n+\n+  React.useEffect(() => {\n+    if (selectedSchema?.trim()) {\n+      schemaTree(selectedSchema).then((tree) => setSchema(tree));\n+    } else {\n+      setSchema(undefined);\n+    }\n+  }, [selectedSchema]);\n+\n+  React.useEffect(() => {\n+    if (schemaNodePath?.trim()) {\n+      setSchemaNode(schemaNodePath);\n+    }\n+  }, [schemaNodePath]);\n+  return (\n+    <Grid container direction={\"column\"} spacing={0}>\n+      <>\n+        <Grid item>\n+          {schemaList && (\n+            <Select\n+              fullWidth\n+              label={\n+                <InputLabel shrink id=\"select-label\">\n+                  {strings.schema}\n+                </InputLabel>\n+              }\n+              value={selectedSchema}\n+              displayEmpty\n+              onChange={(event) => {\n+                setSelectedSchema(event.target.value as string | undefined);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df887c7fb75177327b98eb1c56b55d75b93607f5"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxNjkwNg==", "bodyText": "In general it may be easier to work with currentTarget over target, unless bubbling is explicitly needed.\nTypeScript can statically check currentTarget, it can't with target since it is dynamic.", "url": "https://github.com/openequella/openEQUELLA/pull/1834#discussion_r441016906", "createdAt": "2020-06-16T17:20:52Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/facetedsearch/FacetDialog.tsx", "diffHunk": "@@ -134,7 +153,24 @@ const FacetDialog = ({\n               event.target.value ? parseInt(event.target.value) : undefined\n             )\n           }\n-          helperText={\"Leave blank to display all categories\"}\n+          helperText={facetFieldStrings.categorynumberhelper}\n+        />\n+        <TextField\n+          margin=\"dense\"\n+          label={facetFieldStrings.schemanode}\n+          value={schemaNode}\n+          helperText={facetFieldStrings.schemanodehelper}\n+          onChange={(event) => {\n+            setSchemaNode(event.target.value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df887c7fb75177327b98eb1c56b55d75b93607f5"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxNzQwMQ==", "bodyText": "Would it make sense to leverage camel case for the multi-word language strings?", "url": "https://github.com/openequella/openEQUELLA/pull/1834#discussion_r441017401", "createdAt": "2020-06-16T17:21:46Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/util/langstrings.ts", "diffHunk": "@@ -444,11 +444,25 @@ export const languageStrings = {\n       },\n       facetedsearchsetting: {\n         name: \"Faceted search settings\",\n-        add: \"Create facet\",\n+        subheading: \"Classifications\",\n+        add: \"Create classification\",\n+        edit: \"Edit classification\",\n         facetfields: {\n           name: \"Classification name\",\n+          namehelper: \"Enter name to display in the Refine search panel\",\n           schemanode: \"Schema node\",\n+          schemanodehelper:\n+            \"The categories will be generated from the selected node\",\n           categorynumber: \"Default number of categories\",\n+          categorynumberhelper: \"Leave blank to display all categories\",\n+        },\n+        schemaselector: {\n+          schema: \"Schema\",\n+          selectaschema: \"Select a schema...\",\n+          nodeselector: {\n+            expandall: \"Expand All\",\n+            collapseall: \"Collapse All\",\n+          },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df887c7fb75177327b98eb1c56b55d75b93607f5"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxOTY4MDMz", "url": "https://github.com/openequella/openEQUELLA/pull/1834#pullrequestreview-431968033", "createdAt": "2020-06-16T23:54:28Z", "commit": {"oid": "df887c7fb75177327b98eb1c56b55d75b93607f5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMzo1NDoyOFrOGkw_NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDoxMjozOVrOGkxTTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIwNDUzMw==", "bodyText": "If you're going to match against an external mocked definition, it might be a good idea to have the input also over in the mock file. Keep them both together so they can be maintained together if needed.", "url": "https://github.com/openequella/openEQUELLA/pull/1834#discussion_r441204533", "createdAt": "2020-06-16T23:54:28Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/schema/SchemaModule.test.ts", "diffHunk": "@@ -62,3 +63,46 @@ describe(\"pathForNode\", () => {\n       \"/xml/child1/child2/child3\"\n     ));\n });\n+\n+describe(\"getAllPaths\", () => {\n+  const schemaDefinition = {\n+    child1: {\n+      _type: \"text\",\n+      child2: { _type: \"text\", child3: { _type: \"text\" } },\n+    },\n+  };\n+  const testSchema = SchemaModule.buildSchemaTree(schemaDefinition, \"xml\");\n+  it(\"should correctly generate the list of full paths\", () => {\n+    const paths = SchemaModule.getAllPaths(testSchema, [], false);\n+    expect(paths).toEqual([\n+      \"/xml\",\n+      \"/xml/child1\",\n+      \"/xml/child1/child2\",\n+      \"/xml/child1/child2/child3\",\n+    ]);\n+  });\n+  it(\"should correctly generate the list of xml stripped paths\", () => {\n+    const paths = SchemaModule.getAllPaths(testSchema, [], true);\n+    expect(paths).toEqual([\n+      \"\",\n+      \"/child1\",\n+      \"/child1/child2\",\n+      \"/child1/child2/child3\",\n+    ]);\n+  });\n+});\n+describe(\"renderTree\", () => {\n+  const schemaDefinition = {\n+    child1: {\n+      _type: \"text\",\n+      child2: { _type: \"text\", child3: { _type: \"text\" } },\n+    },\n+  };\n+\n+  const testSchema = SchemaModule.buildSchemaTree(schemaDefinition, \"xml\");\n+  const rendered = SchemaModule.renderTree(testSchema);\n+\n+  it(\"should render the tree into nested TreeItem components correctly\", () => {\n+    expect(rendered.toString()).toEqual(jsxOutput.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df887c7fb75177327b98eb1c56b55d75b93607f5"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIwNDg1Mw==", "bodyText": "nit: stray line", "url": "https://github.com/openequella/openEQUELLA/pull/1834#discussion_r441204853", "createdAt": "2020-06-16T23:55:27Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/schema/SchemaModule.tsx", "diffHunk": "@@ -123,3 +125,43 @@ export const pathForNode = (node: SchemaNode, stripXml = true): string => {\n \n   return path;\n };\n+\n+/**\n+ * Recursive helper function to get a list of all possible xml paths from a given SchemaNode.\n+ * @param nodes The schema to generate paths for.\n+ * @param paths Used by the recursive algorithm to build up the returned list.\n+ *          When passing in initially, leave as a blank array.\n+ * @param stripXml Passed into pathForNode. Whether to include the leading /xml.\n+ *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df887c7fb75177327b98eb1c56b55d75b93607f5"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIwNTUwNA==", "bodyText": "Could we explicitly specify the return type. Adds to doco and also provides assurance that we're writing what we think we are.", "url": "https://github.com/openequella/openEQUELLA/pull/1834#discussion_r441205504", "createdAt": "2020-06-16T23:57:34Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/schema/SchemaModule.tsx", "diffHunk": "@@ -123,3 +125,43 @@ export const pathForNode = (node: SchemaNode, stripXml = true): string => {\n \n   return path;\n };\n+\n+/**\n+ * Recursive helper function to get a list of all possible xml paths from a given SchemaNode.\n+ * @param nodes The schema to generate paths for.\n+ * @param paths Used by the recursive algorithm to build up the returned list.\n+ *          When passing in initially, leave as a blank array.\n+ * @param stripXml Passed into pathForNode. Whether to include the leading /xml.\n+ *\n+ */\n+export const getAllPaths = (\n+  nodes: SchemaNode,\n+  paths: string[],\n+  stripXml = true\n+) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df887c7fb75177327b98eb1c56b55d75b93607f5"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIwNjM5OA==", "bodyText": "It'd be preferable to not mutate an input (paths) and simply build up the internal list and return.", "url": "https://github.com/openequella/openEQUELLA/pull/1834#discussion_r441206398", "createdAt": "2020-06-17T00:00:44Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/schema/SchemaModule.tsx", "diffHunk": "@@ -123,3 +125,43 @@ export const pathForNode = (node: SchemaNode, stripXml = true): string => {\n \n   return path;\n };\n+\n+/**\n+ * Recursive helper function to get a list of all possible xml paths from a given SchemaNode.\n+ * @param nodes The schema to generate paths for.\n+ * @param paths Used by the recursive algorithm to build up the returned list.\n+ *          When passing in initially, leave as a blank array.\n+ * @param stripXml Passed into pathForNode. Whether to include the leading /xml.\n+ *\n+ */\n+export const getAllPaths = (\n+  nodes: SchemaNode,\n+  paths: string[],\n+  stripXml = true\n+) => {\n+  paths.push(pathForNode(nodes, stripXml));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df887c7fb75177327b98eb1c56b55d75b93607f5"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIwNjkwOA==", "bodyText": "It would be preferable to keep the Modules as much as possible focused on business logic and not presentation. Seeing that this helper function is only needed for one component, could we keep it over there for now? Otherwise, I'd be inclined to see how we could do this as a component itself.", "url": "https://github.com/openequella/openEQUELLA/pull/1834#discussion_r441206908", "createdAt": "2020-06-17T00:02:38Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/schema/SchemaModule.tsx", "diffHunk": "@@ -123,3 +125,43 @@ export const pathForNode = (node: SchemaNode, stripXml = true): string => {\n \n   return path;\n };\n+\n+/**\n+ * Recursive helper function to get a list of all possible xml paths from a given SchemaNode.\n+ * @param nodes The schema to generate paths for.\n+ * @param paths Used by the recursive algorithm to build up the returned list.\n+ *          When passing in initially, leave as a blank array.\n+ * @param stripXml Passed into pathForNode. Whether to include the leading /xml.\n+ *\n+ */\n+export const getAllPaths = (\n+  nodes: SchemaNode,\n+  paths: string[],\n+  stripXml = true\n+) => {\n+  paths.push(pathForNode(nodes, stripXml));\n+  nodes.children?.forEach((childNode) => {\n+    paths.concat(getAllPaths(childNode, paths, stripXml));\n+  });\n+\n+  return paths;\n+};\n+\n+/**\n+ * Recursive helper function that converts a SchemaNode into a corresponding Material UI\n+ * TreeItem tree.\n+ * @param nodes The node to generate a TreeItem for.\n+ */\n+export const renderTree = (nodes: SchemaNode) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df887c7fb75177327b98eb1c56b55d75b93607f5"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIwOTY3OA==", "bodyText": "And to just flip it around slightly. If you can simply add to your schemas with the default value at the top, then you could simply have:\nsetSchemaList(schemas.map((name, uuid) => (<MenuItem>...</MenuItem>));", "url": "https://github.com/openequella/openEQUELLA/pull/1834#discussion_r441209678", "createdAt": "2020-06-17T00:12:39Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/SchemaSelector.tsx", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import { ReactElement } from \"react\";\n+import { Grid, InputLabel, MenuItem, Select } from \"@material-ui/core\";\n+import {\n+  schemaListSummary,\n+  SchemaNode,\n+  schemaTree,\n+} from \"../schema/SchemaModule\";\n+import SchemaNodeSelector from \"../settings/SchemaNodeSelector\";\n+import { languageStrings } from \"../util/langstrings\";\n+\n+interface SchemaSelectorProps {\n+  /**\n+   * Callback function triggered upon selection of a node.\n+   * @param node  Path of the selected node.\n+   */\n+  setSchemaNode: (node: string) => void;\n+}\n+\n+/**\n+ * This component defines a schema selector, for selecting a schema and then a node within.\n+ * When a schema is selected, it will display that schema within a SchemaNodeSelector.\n+ *\n+ */\n+export default function SchemaSelector({ setSchemaNode }: SchemaSelectorProps) {\n+  const [selectedSchema, setSelectedSchema] = React.useState<\n+    string | undefined\n+  >(undefined);\n+  const [schema, setSchema] = React.useState<SchemaNode>();\n+  const [schemaList, setSchemaList] = React.useState<ReactElement[]>([]);\n+  const [schemaNodePath, setSchemaNodePath] = React.useState<string>(\"\");\n+  const strings =\n+    languageStrings.settings.searching.facetedsearchsetting.schemaselector;\n+  React.useEffect(() => {\n+    schemaListSummary().then((schemas) => {\n+      const elementList: JSX.Element[] = [\n+        <MenuItem id={strings.selectaschema} value={undefined}>\n+          {strings.selectaschema}\n+        </MenuItem>,\n+      ];\n+      schemas.forEach((name, uuid) => {\n+        elementList.push(\n+          <MenuItem id={uuid} value={uuid}>\n+            {name}\n+          </MenuItem>\n+        );\n+      });\n+      setSchemaList(elementList);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxMjEyOQ=="}, "originalCommit": {"oid": "df887c7fb75177327b98eb1c56b55d75b93607f5"}, "originalPosition": 65}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7550426f4f5fd63e3bf1edb3780b6e905ca3d76", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/a7550426f4f5fd63e3bf1edb3780b6e905ca3d76", "committedDate": "2020-06-17T06:01:23Z", "message": "Move renderTree out of the module into SchemaNodeSelector.tsx"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0fc36ce2e3da4e29ab7ea04a1de88bee4aa96b2", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/d0fc36ce2e3da4e29ab7ea04a1de88bee4aa96b2", "committedDate": "2020-06-17T06:02:16Z", "message": "Move renderTree test into SchemaNodeSelector.test.tsx"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0785c7182d835dd84cd09b925281277ac17aecea", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/0785c7182d835dd84cd09b925281277ac17aecea", "committedDate": "2020-06-17T06:03:11Z", "message": "Include a null check on selectedSchema"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c430e9d54cd1193ca8b9bbed1f035de6b2d12996", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/c430e9d54cd1193ca8b9bbed1f035de6b2d12996", "committedDate": "2020-06-17T06:03:56Z", "message": "Simplify building up the schemaList"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4987530e1c3b30a4b51bae6a4a0bb6bd8d81731b", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/4987530e1c3b30a4b51bae6a4a0bb6bd8d81731b", "committedDate": "2020-06-17T06:04:21Z", "message": "Add mock data to schemaSelectorDataMock.tsx"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c333d68dc39db3ab294819fa1c78a605db6a88c1", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/c333d68dc39db3ab294819fa1c78a605db6a88c1", "committedDate": "2020-06-17T06:19:53Z", "message": "Change new language strings to camelCase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "321952339b40e151e28f4e60c7606d63f37dc7a0", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/321952339b40e151e28f4e60c7606d63f37dc7a0", "committedDate": "2020-06-17T07:50:00Z", "message": "Add explanatory text to top of FacetedSearchSettingsPage"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMTY1OTgw", "url": "https://github.com/openequella/openEQUELLA/pull/1834#pullrequestreview-432165980", "createdAt": "2020-06-17T08:18:02Z", "commit": {"oid": "321952339b40e151e28f4e60c7606d63f37dc7a0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwODoxODowMlrOGk64hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwODoyNToyNlrOGk7Jyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2NjY2MA==", "bodyText": "This can now just have a function body of implicit return types with arrow functions:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ): string[] => {\n          \n          \n            \n              return paths.concat(pathForNode(nodes, stripXml)).concat(\n          \n          \n            \n                nodes.children?.flatMap((childNode) => {\n          \n          \n            \n                  return getAllPaths(childNode, paths, stripXml);\n          \n          \n            \n                }) ?? []\n          \n          \n            \n              );\n          \n          \n            \n            };\n          \n          \n            \n            ): string[] =>\n          \n          \n            \n              paths\n          \n          \n            \n                .concat(pathForNode(nodes, stripXml))\n          \n          \n            \n                .concat(nodes.children?.flatMap((childNode) => getAllPaths(childNode, paths, stripXml))\n          \n          \n            \n              ?? [];", "url": "https://github.com/openequella/openEQUELLA/pull/1834#discussion_r441366660", "createdAt": "2020-06-17T08:18:02Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/schema/SchemaModule.tsx", "diffHunk": "@@ -132,36 +130,15 @@ export const pathForNode = (node: SchemaNode, stripXml = true): string => {\n  * @param paths Used by the recursive algorithm to build up the returned list.\n  *          When passing in initially, leave as a blank array.\n  * @param stripXml Passed into pathForNode. Whether to include the leading /xml.\n- *\n  */\n export const getAllPaths = (\n   nodes: SchemaNode,\n   paths: string[],\n   stripXml = true\n-) => {\n-  paths.push(pathForNode(nodes, stripXml));\n-  nodes.children?.forEach((childNode) => {\n-    paths.concat(getAllPaths(childNode, paths, stripXml));\n-  });\n-\n-  return paths;\n-};\n-\n-/**\n- * Recursive helper function that converts a SchemaNode into a corresponding Material UI\n- * TreeItem tree.\n- * @param nodes The node to generate a TreeItem for.\n- */\n-export const renderTree = (nodes: SchemaNode) => {\n-  return (\n-    <TreeItem\n-      key={nodes.name}\n-      nodeId={pathForNode(nodes, false)}\n-      label={nodes.name}\n-    >\n-      {Array.isArray(nodes.children)\n-        ? nodes.children.map((node) => renderTree(node))\n-        : null}\n-    </TreeItem>\n+): string[] => {\n+  return paths.concat(pathForNode(nodes, stripXml)).concat(\n+    nodes.children?.flatMap((childNode) => {\n+      return getAllPaths(childNode, paths, stripXml);\n+    }) ?? []\n   );\n };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321952339b40e151e28f4e60c7606d63f37dc7a0"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2ODQyMQ==", "bodyText": "Okay, so keeping paths just for the internal recursive mechanism, how about you swap this around and add a default:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              paths: string[],\n          \n          \n            \n              stripXml = true\n          \n          \n            \n              stripXml = true,\n          \n          \n            \n              paths: string[] = []\n          \n      \n    \n    \n  \n\nAnd then typical usage (and your current usage) would just be getAllPaths(node); or maybe occassionally getAllPaths(node, false); All while still bootstrapping your recursive algorithm.", "url": "https://github.com/openequella/openEQUELLA/pull/1834#discussion_r441368421", "createdAt": "2020-06-17T08:20:54Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/schema/SchemaModule.tsx", "diffHunk": "@@ -132,36 +130,15 @@ export const pathForNode = (node: SchemaNode, stripXml = true): string => {\n  * @param paths Used by the recursive algorithm to build up the returned list.\n  *          When passing in initially, leave as a blank array.\n  * @param stripXml Passed into pathForNode. Whether to include the leading /xml.\n- *\n  */\n export const getAllPaths = (\n   nodes: SchemaNode,\n   paths: string[],\n   stripXml = true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321952339b40e151e28f4e60c7606d63f37dc7a0"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM3MTA4Mg==", "bodyText": "As mentioned, I'm struggling to read this with the big first sentence. Let's see tomorrow if we can come up with some different wording.", "url": "https://github.com/openequella/openEQUELLA/pull/1834#discussion_r441371082", "createdAt": "2020-06-17T08:25:26Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/util/langstrings.ts", "diffHunk": "@@ -444,24 +444,26 @@ export const languageStrings = {\n       },\n       facetedsearchsetting: {\n         name: \"Faceted search settings\",\n-        subheading: \"Classifications\",\n+        subHeading: \"Classifications\",\n+        explanationText:\n+          \"A classification (schema node) and its categories (unique values found within the selected schema node across all items matching search criteria) displays in the Refine search panel of the Search page. The number of matches per category is shown, and users can click on a category to view results.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321952339b40e151e28f4e60c7606d63f37dc7a0"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d9ec4bd9383718c9dbf56094e2fc5712cbd9a3b", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/7d9ec4bd9383718c9dbf56094e2fc5712cbd9a3b", "committedDate": "2020-06-18T00:57:35Z", "message": "Simplify explanation text"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79bfabb976433556f93fe0cd65bcf3bbb780a852", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/79bfabb976433556f93fe0cd65bcf3bbb780a852", "committedDate": "2020-06-18T00:58:31Z", "message": "Simplify getAllPaths with a default paths array"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2dddaf2ccaa8d062cdeb13c3c21fec5a58921582", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/2dddaf2ccaa8d062cdeb13c3c21fec5a58921582", "committedDate": "2020-06-18T01:12:13Z", "message": "Use implicit return for getAllPaths"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyODgwMTk4", "url": "https://github.com/openequella/openEQUELLA/pull/1834#pullrequestreview-432880198", "createdAt": "2020-06-18T01:29:44Z", "commit": {"oid": "2dddaf2ccaa8d062cdeb13c3c21fec5a58921582"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyODgxODk5", "url": "https://github.com/openequella/openEQUELLA/pull/1834#pullrequestreview-432881899", "createdAt": "2020-06-18T01:35:25Z", "commit": {"oid": "2dddaf2ccaa8d062cdeb13c3c21fec5a58921582"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 65, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}