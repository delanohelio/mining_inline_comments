{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5MTg5NTk5", "number": 2566, "title": "Make sure that thumbnailing timeout kills both imagick and ghostscript", "bodyText": "Checklist\n\n\n the contributor license agreement is signed\n commit message follows commit guidelines\n\nDescription of change\nRelated to #2527, the delegate ghostscript doesn't inherently close when imagemagick does. This PR ensures that when thumbnailing times out, any child processes of imagemagick are killed first.", "createdAt": "2020-11-29T22:14:00Z", "url": "https://github.com/openequella/openEQUELLA/pull/2566", "merged": true, "mergeCommit": {"oid": "1a236d62bfdfbc4841a46e64c4320b4f5730412d"}, "closed": true, "closedAt": "2020-12-02T04:47:33Z", "author": {"login": "SammyIsConfused"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdhYPmlAH2gAyNTI5MTg5NTk5OmQ0MTdmMWJhMDg3NDVjZWM2ZjA3ZDBhZDg1ZTIwZGI1ODhjNmM0MDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdiC5UugH2gAyNTI5MTg5NTk5OmM4NWNhZDJlMTQ3MTYyNjk2MDU2NDQ1NTFjMTQwYjE0MzJkMmY1YzE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d417f1ba08745cec6f07d0ad85e20db588c6c403", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/d417f1ba08745cec6f07d0ad85e20db588c6c403", "committedDate": "2020-11-29T22:11:30Z", "message": "Make sure that Timeout kills both imagick and ghostscript"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNTczMjEw", "url": "https://github.com/openequella/openEQUELLA/pull/2566#pullrequestreview-540573210", "createdAt": "2020-11-30T03:06:44Z", "commit": {"oid": "d417f1ba08745cec6f07d0ad85e20db588c6c403"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMzowNjo0NFrOH7qhNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMzozOTozMFrOH7q85g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMyNDY2MQ==", "bodyText": "I gather this must be following an example, as there is no need for this setup here. It can just be a stand-alone static method like the others in this class. Probably with a signature like: public static void killLinuxProcessTree(int pid)", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r532324661", "createdAt": "2020-11-30T03:06:44Z", "author": {"login": "edalex-ian"}, "path": "Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java", "diffHunk": "@@ -52,6 +55,71 @@\n     \"\", \".exe\", \".bat\"\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n+  /**\n+   * Creates a process which will then kill a given process and it's child processes on Linux.\n+   * arg[0] should be the PID of the main process you want to terminate.\n+   */\n+  public static class LinuxKill {\n+    public static void main(String[] args) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d417f1ba08745cec6f07d0ad85e20db588c6c403"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMyNTIyMw==", "bodyText": "Should you check first you're running on linux?", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r532325223", "createdAt": "2020-11-30T03:09:25Z", "author": {"login": "edalex-ian"}, "path": "Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java", "diffHunk": "@@ -130,10 +198,12 @@ public static ExecResult execWithTimeLimit(\n           createProcess(cmdarray, additionalEnv, dir);\n       LOGGER.debug(\"Started timed process\");\n       final Process proc = cp.getFirst();\n+      String pid = Long.toString(getPidOfProcess(proc).orElse(0L));\n       final StreamReader stdOut = cp.getSecond();\n       final StreamReader stdErr = cp.getThird();\n       proc.waitFor(durationInSeconds, TimeUnit.SECONDS);\n       if (!stdErr.isFinished() || !stdOut.isFinished()) {\n+        LinuxKill.main(new String[] {pid});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d417f1ba08745cec6f07d0ad85e20db588c6c403"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMyOTA2Nw==", "bodyText": "Couple of things here.\n\nyou may wish to consider using CharStreams.copy(new InputStremReader(getChildPid.getInputStream(), childPid);; and\nWhat if you get multiple PIDs back? Are they find coming back with new lines and getting fed to the following exec?", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r532329067", "createdAt": "2020-11-30T03:27:13Z", "author": {"login": "edalex-ian"}, "path": "Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java", "diffHunk": "@@ -52,6 +55,71 @@\n     \"\", \".exe\", \".bat\"\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n+  /**\n+   * Creates a process which will then kill a given process and it's child processes on Linux.\n+   * arg[0] should be the PID of the main process you want to terminate.\n+   */\n+  public static class LinuxKill {\n+    public static void main(String[] args) {\n+      try {\n+        if (Integer.parseInt(args[0]) > 0) {\n+          // get child process PIDs as string\n+          Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + args[0]);\n+          getChildPid.waitFor();\n+          StringBuilder childPid = new StringBuilder();\n+          if (getChildPid.exitValue() == 0) {\n+            InputStream procIn = getChildPid.getInputStream();\n+            int c = 0;\n+            while ((c = procIn.read()) != -1) {\n+              childPid.append((char) c);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d417f1ba08745cec6f07d0ad85e20db588c6c403"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMyOTQzMg==", "bodyText": "So if it returns non-zero, it won't throw an exception (I gather). So the catch block wont be triggered and nothing will be logged (or noted).", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r532329432", "createdAt": "2020-11-30T03:28:53Z", "author": {"login": "edalex-ian"}, "path": "Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java", "diffHunk": "@@ -52,6 +55,71 @@\n     \"\", \".exe\", \".bat\"\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n+  /**\n+   * Creates a process which will then kill a given process and it's child processes on Linux.\n+   * arg[0] should be the PID of the main process you want to terminate.\n+   */\n+  public static class LinuxKill {\n+    public static void main(String[] args) {\n+      try {\n+        if (Integer.parseInt(args[0]) > 0) {\n+          // get child process PIDs as string\n+          Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + args[0]);\n+          getChildPid.waitFor();\n+          StringBuilder childPid = new StringBuilder();\n+          if (getChildPid.exitValue() == 0) {\n+            InputStream procIn = getChildPid.getInputStream();\n+            int c = 0;\n+            while ((c = procIn.read()) != -1) {\n+              childPid.append((char) c);\n+            }\n+          }\n+\n+          // Kill child process(es)\n+          Process childKillProc = Runtime.getRuntime().exec(\"kill -9 \" + childPid);\n+          childKillProc.waitFor();\n+          if (childKillProc.exitValue() == 0) {\n+            LOGGER.debug(\"Child processes terminated: \" + childPid);\n+          }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d417f1ba08745cec6f07d0ad85e20db588c6c403"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMzMDIyNQ==", "bodyText": "Your comment is confusing me. Above you check to see that kill -9 returns zero. Then here you're saying it could return 1. Which is it?\nAlso, be good here to do the same as the above and check the result.\nAnd arguably this code is the same as the above and should be in it's own method, perhaps: static void int sendSigKill(int pid). Could encapsulate waiting and logging, but then ultimately still return the exit code.", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r532330225", "createdAt": "2020-11-30T03:32:17Z", "author": {"login": "edalex-ian"}, "path": "Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java", "diffHunk": "@@ -52,6 +55,71 @@\n     \"\", \".exe\", \".bat\"\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n+  /**\n+   * Creates a process which will then kill a given process and it's child processes on Linux.\n+   * arg[0] should be the PID of the main process you want to terminate.\n+   */\n+  public static class LinuxKill {\n+    public static void main(String[] args) {\n+      try {\n+        if (Integer.parseInt(args[0]) > 0) {\n+          // get child process PIDs as string\n+          Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + args[0]);\n+          getChildPid.waitFor();\n+          StringBuilder childPid = new StringBuilder();\n+          if (getChildPid.exitValue() == 0) {\n+            InputStream procIn = getChildPid.getInputStream();\n+            int c = 0;\n+            while ((c = procIn.read()) != -1) {\n+              childPid.append((char) c);\n+            }\n+          }\n+\n+          // Kill child process(es)\n+          Process childKillProc = Runtime.getRuntime().exec(\"kill -9 \" + childPid);\n+          childKillProc.waitFor();\n+          if (childKillProc.exitValue() == 0) {\n+            LOGGER.debug(\"Child processes terminated: \" + childPid);\n+          }\n+\n+          // kill process itself\n+          Process proc = Runtime.getRuntime().exec(\"kill -9 \" + args[0]);\n+          int exitVal = proc.waitFor();\n+          LOGGER.debug(\"Exit value: \" + exitVal); // often 1 under Ubuntu 12.10", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d417f1ba08745cec6f07d0ad85e20db588c6c403"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMzMDU5Ng==", "bodyText": "Be good to know why it failed. (Also, slight change in capitalisation.)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LOGGER.warn(\"Process Kill failed. Process may be left hanging\");\n          \n          \n            \n                    LOGGER.warn(\"Process kill failed. Process may be left hanging. \" + e.getMessage());", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r532330596", "createdAt": "2020-11-30T03:33:59Z", "author": {"login": "edalex-ian"}, "path": "Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java", "diffHunk": "@@ -52,6 +55,71 @@\n     \"\", \".exe\", \".bat\"\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n+  /**\n+   * Creates a process which will then kill a given process and it's child processes on Linux.\n+   * arg[0] should be the PID of the main process you want to terminate.\n+   */\n+  public static class LinuxKill {\n+    public static void main(String[] args) {\n+      try {\n+        if (Integer.parseInt(args[0]) > 0) {\n+          // get child process PIDs as string\n+          Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + args[0]);\n+          getChildPid.waitFor();\n+          StringBuilder childPid = new StringBuilder();\n+          if (getChildPid.exitValue() == 0) {\n+            InputStream procIn = getChildPid.getInputStream();\n+            int c = 0;\n+            while ((c = procIn.read()) != -1) {\n+              childPid.append((char) c);\n+            }\n+          }\n+\n+          // Kill child process(es)\n+          Process childKillProc = Runtime.getRuntime().exec(\"kill -9 \" + childPid);\n+          childKillProc.waitFor();\n+          if (childKillProc.exitValue() == 0) {\n+            LOGGER.debug(\"Child processes terminated: \" + childPid);\n+          }\n+\n+          // kill process itself\n+          Process proc = Runtime.getRuntime().exec(\"kill -9 \" + args[0]);\n+          int exitVal = proc.waitFor();\n+          LOGGER.debug(\"Exit value: \" + exitVal); // often 1 under Ubuntu 12.10\n+\n+          proc.destroy();\n+          childKillProc.destroy();\n+          getChildPid.destroy();\n+        }\n+      } catch (Exception e) {\n+        LOGGER.warn(\"Process Kill failed. Process may be left hanging\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d417f1ba08745cec6f07d0ad85e20db588c6c403"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMzMTMyMQ==", "bodyText": "What exceptions get thrown here? Could be good to be more targetted, and to log what happened.", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r532331321", "createdAt": "2020-11-30T03:37:11Z", "author": {"login": "edalex-ian"}, "path": "Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java", "diffHunk": "@@ -52,6 +55,71 @@\n     \"\", \".exe\", \".bat\"\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n+  /**\n+   * Creates a process which will then kill a given process and it's child processes on Linux.\n+   * arg[0] should be the PID of the main process you want to terminate.\n+   */\n+  public static class LinuxKill {\n+    public static void main(String[] args) {\n+      try {\n+        if (Integer.parseInt(args[0]) > 0) {\n+          // get child process PIDs as string\n+          Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + args[0]);\n+          getChildPid.waitFor();\n+          StringBuilder childPid = new StringBuilder();\n+          if (getChildPid.exitValue() == 0) {\n+            InputStream procIn = getChildPid.getInputStream();\n+            int c = 0;\n+            while ((c = procIn.read()) != -1) {\n+              childPid.append((char) c);\n+            }\n+          }\n+\n+          // Kill child process(es)\n+          Process childKillProc = Runtime.getRuntime().exec(\"kill -9 \" + childPid);\n+          childKillProc.waitFor();\n+          if (childKillProc.exitValue() == 0) {\n+            LOGGER.debug(\"Child processes terminated: \" + childPid);\n+          }\n+\n+          // kill process itself\n+          Process proc = Runtime.getRuntime().exec(\"kill -9 \" + args[0]);\n+          int exitVal = proc.waitFor();\n+          LOGGER.debug(\"Exit value: \" + exitVal); // often 1 under Ubuntu 12.10\n+\n+          proc.destroy();\n+          childKillProc.destroy();\n+          getChildPid.destroy();\n+        }\n+      } catch (Exception e) {\n+        LOGGER.warn(\"Process Kill failed. Process may be left hanging\");\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Gets the PID of a given process.\n+   *\n+   * @param p The Process of which to get the PID.\n+   * @return An Optional long. If not on Linux, or if the PID declared field is not available, the\n+   *     value will be empty.\n+   */\n+  public static synchronized Optional<Long> getPidOfProcess(Process p) {\n+    Optional<Long> pid = Optional.empty();\n+\n+    try {\n+      if (p.getClass().getName().equals(\"java.lang.UNIXProcess\")) {\n+        Field f = p.getClass().getDeclaredField(\"pid\");\n+        f.setAccessible(true);\n+        pid = Optional.of(f.getLong(p));\n+        f.setAccessible(false);\n+      }\n+    } catch (Exception e) {\n+      return pid;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d417f1ba08745cec6f07d0ad85e20db588c6c403"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMzMTQxMw==", "bodyText": "Seems awkward to have the two return statements right next to each other. Would a finally block perhaps be a better fit?", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r532331413", "createdAt": "2020-11-30T03:37:41Z", "author": {"login": "edalex-ian"}, "path": "Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java", "diffHunk": "@@ -52,6 +55,71 @@\n     \"\", \".exe\", \".bat\"\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n+  /**\n+   * Creates a process which will then kill a given process and it's child processes on Linux.\n+   * arg[0] should be the PID of the main process you want to terminate.\n+   */\n+  public static class LinuxKill {\n+    public static void main(String[] args) {\n+      try {\n+        if (Integer.parseInt(args[0]) > 0) {\n+          // get child process PIDs as string\n+          Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + args[0]);\n+          getChildPid.waitFor();\n+          StringBuilder childPid = new StringBuilder();\n+          if (getChildPid.exitValue() == 0) {\n+            InputStream procIn = getChildPid.getInputStream();\n+            int c = 0;\n+            while ((c = procIn.read()) != -1) {\n+              childPid.append((char) c);\n+            }\n+          }\n+\n+          // Kill child process(es)\n+          Process childKillProc = Runtime.getRuntime().exec(\"kill -9 \" + childPid);\n+          childKillProc.waitFor();\n+          if (childKillProc.exitValue() == 0) {\n+            LOGGER.debug(\"Child processes terminated: \" + childPid);\n+          }\n+\n+          // kill process itself\n+          Process proc = Runtime.getRuntime().exec(\"kill -9 \" + args[0]);\n+          int exitVal = proc.waitFor();\n+          LOGGER.debug(\"Exit value: \" + exitVal); // often 1 under Ubuntu 12.10\n+\n+          proc.destroy();\n+          childKillProc.destroy();\n+          getChildPid.destroy();\n+        }\n+      } catch (Exception e) {\n+        LOGGER.warn(\"Process Kill failed. Process may be left hanging\");\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Gets the PID of a given process.\n+   *\n+   * @param p The Process of which to get the PID.\n+   * @return An Optional long. If not on Linux, or if the PID declared field is not available, the\n+   *     value will be empty.\n+   */\n+  public static synchronized Optional<Long> getPidOfProcess(Process p) {\n+    Optional<Long> pid = Optional.empty();\n+\n+    try {\n+      if (p.getClass().getName().equals(\"java.lang.UNIXProcess\")) {\n+        Field f = p.getClass().getDeclaredField(\"pid\");\n+        f.setAccessible(true);\n+        pid = Optional.of(f.getLong(p));\n+        f.setAccessible(false);\n+      }\n+    } catch (Exception e) {\n+      return pid;\n+    }\n+    return pid;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d417f1ba08745cec6f07d0ad85e20db588c6c403"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMzMTYxNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Gets the PID of a given process.\n          \n          \n            \n               * Gets the process ID (PID) of a given *nix process.", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r532331616", "createdAt": "2020-11-30T03:38:48Z", "author": {"login": "edalex-ian"}, "path": "Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java", "diffHunk": "@@ -52,6 +55,71 @@\n     \"\", \".exe\", \".bat\"\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n+  /**\n+   * Creates a process which will then kill a given process and it's child processes on Linux.\n+   * arg[0] should be the PID of the main process you want to terminate.\n+   */\n+  public static class LinuxKill {\n+    public static void main(String[] args) {\n+      try {\n+        if (Integer.parseInt(args[0]) > 0) {\n+          // get child process PIDs as string\n+          Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + args[0]);\n+          getChildPid.waitFor();\n+          StringBuilder childPid = new StringBuilder();\n+          if (getChildPid.exitValue() == 0) {\n+            InputStream procIn = getChildPid.getInputStream();\n+            int c = 0;\n+            while ((c = procIn.read()) != -1) {\n+              childPid.append((char) c);\n+            }\n+          }\n+\n+          // Kill child process(es)\n+          Process childKillProc = Runtime.getRuntime().exec(\"kill -9 \" + childPid);\n+          childKillProc.waitFor();\n+          if (childKillProc.exitValue() == 0) {\n+            LOGGER.debug(\"Child processes terminated: \" + childPid);\n+          }\n+\n+          // kill process itself\n+          Process proc = Runtime.getRuntime().exec(\"kill -9 \" + args[0]);\n+          int exitVal = proc.waitFor();\n+          LOGGER.debug(\"Exit value: \" + exitVal); // often 1 under Ubuntu 12.10\n+\n+          proc.destroy();\n+          childKillProc.destroy();\n+          getChildPid.destroy();\n+        }\n+      } catch (Exception e) {\n+        LOGGER.warn(\"Process Kill failed. Process may be left hanging\");\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Gets the PID of a given process.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d417f1ba08745cec6f07d0ad85e20db588c6c403"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMzMTc1MA==", "bodyText": "What's the difference with say Windows? As those processes also have IDs, is it simply a case of a different name for the field?", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r532331750", "createdAt": "2020-11-30T03:39:30Z", "author": {"login": "edalex-ian"}, "path": "Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java", "diffHunk": "@@ -52,6 +55,71 @@\n     \"\", \".exe\", \".bat\"\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n+  /**\n+   * Creates a process which will then kill a given process and it's child processes on Linux.\n+   * arg[0] should be the PID of the main process you want to terminate.\n+   */\n+  public static class LinuxKill {\n+    public static void main(String[] args) {\n+      try {\n+        if (Integer.parseInt(args[0]) > 0) {\n+          // get child process PIDs as string\n+          Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + args[0]);\n+          getChildPid.waitFor();\n+          StringBuilder childPid = new StringBuilder();\n+          if (getChildPid.exitValue() == 0) {\n+            InputStream procIn = getChildPid.getInputStream();\n+            int c = 0;\n+            while ((c = procIn.read()) != -1) {\n+              childPid.append((char) c);\n+            }\n+          }\n+\n+          // Kill child process(es)\n+          Process childKillProc = Runtime.getRuntime().exec(\"kill -9 \" + childPid);\n+          childKillProc.waitFor();\n+          if (childKillProc.exitValue() == 0) {\n+            LOGGER.debug(\"Child processes terminated: \" + childPid);\n+          }\n+\n+          // kill process itself\n+          Process proc = Runtime.getRuntime().exec(\"kill -9 \" + args[0]);\n+          int exitVal = proc.waitFor();\n+          LOGGER.debug(\"Exit value: \" + exitVal); // often 1 under Ubuntu 12.10\n+\n+          proc.destroy();\n+          childKillProc.destroy();\n+          getChildPid.destroy();\n+        }\n+      } catch (Exception e) {\n+        LOGGER.warn(\"Process Kill failed. Process may be left hanging\");\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Gets the PID of a given process.\n+   *\n+   * @param p The Process of which to get the PID.\n+   * @return An Optional long. If not on Linux, or if the PID declared field is not available, the\n+   *     value will be empty.\n+   */\n+  public static synchronized Optional<Long> getPidOfProcess(Process p) {\n+    Optional<Long> pid = Optional.empty();\n+\n+    try {\n+      if (p.getClass().getName().equals(\"java.lang.UNIXProcess\")) {\n+        Field f = p.getClass().getDeclaredField(\"pid\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d417f1ba08745cec6f07d0ad85e20db588c6c403"}, "originalPosition": 76}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5252221e279064e385826200b72fc4f6e2d1d8c9", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/5252221e279064e385826200b72fc4f6e2d1d8c9", "committedDate": "2020-12-01T01:26:28Z", "message": "Use int for getPidOfProcess"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23bdc6f59fe4db89a72c71674f6e17029b43484f", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/23bdc6f59fe4db89a72c71674f6e17029b43484f", "committedDate": "2020-12-01T01:27:09Z", "message": "Check platform before running kill function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ff980622c54182cdeac787bdf1706de002d3216", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/4ff980622c54182cdeac787bdf1706de002d3216", "committedDate": "2020-12-01T01:27:54Z", "message": "Refactor LinuxKill into killLinuxProcessTree"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16da9dfd857cd8926b72131e6ba2c6603defad51", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/16da9dfd857cd8926b72131e6ba2c6603defad51", "committedDate": "2020-12-01T02:28:12Z", "message": "Fix up whitespaces"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7134e8424c3500b0cdc554d8afcaf8a1b384e7a", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/f7134e8424c3500b0cdc554d8afcaf8a1b384e7a", "committedDate": "2020-12-01T02:48:13Z", "message": "Catch exceptions specifically"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5753354c4ce3676d36ce2efc1253b387ad48462e", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/5753354c4ce3676d36ce2efc1253b387ad48462e", "committedDate": "2020-12-01T02:53:36Z", "message": "Update comment to be *nix specific\n\nCo-authored-by: edalex-ian <43919233+edalex-ian@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7b3b572e61c2f59c1c750bc526fe4d77cc6c653", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/d7b3b572e61c2f59c1c750bc526fe4d77cc6c653", "committedDate": "2020-12-01T03:31:05Z", "message": "Capture and log output of finished processes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxNDcxODgx", "url": "https://github.com/openequella/openEQUELLA/pull/2566#pullrequestreview-541471881", "createdAt": "2020-12-01T03:57:57Z", "commit": {"oid": "d7b3b572e61c2f59c1c750bc526fe4d77cc6c653"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMzo1Nzo1N1rOH8XQbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMzo1Nzo1N1rOH8XQbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA1NzY0NQ==", "bodyText": "Should that be:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  return childPid.toString().replaceAll(\"\\n\", \"\").split(\" \");\n          \n          \n            \n                  return childPid.toString().replaceAll(\"\\n\", \" \").split(\" \");", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r533057645", "createdAt": "2020-12-01T03:57:57Z", "author": {"login": "edalex-ian"}, "path": "Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java", "diffHunk": "@@ -52,6 +54,104 @@\n     \"\", \".exe\", \".bat\"\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n+  /**\n+   * For a given Process ID, kill any child processes and then kill the process. Works on Unix only,\n+   * as it leverages pgrep and kill commands.\n+   *\n+   * @param pid The Process for which to terminate including it's direct children.\n+   */\n+  public static void killLinuxProcessTree(int pid) {\n+    if (pid > 0) {\n+      // get child process PIDs as strings\n+      String[] children = getChildUnixProcessPids(pid);\n+      // Kill child process(es)\n+      for (String child : children) {\n+        sendSigKill(Integer.parseInt(child));\n+      }\n+      // kill process itself\n+      sendSigKill(pid);\n+    }\n+  }\n+\n+  /**\n+   * Runs pgrep -P for a given Process ID, to get a list of child processes as Process IDs.\n+   *\n+   * @param pid The parent process ID to check for child processes.\n+   * @return String[] An array of process IDs for the children of pid. Can be empty.\n+   */\n+  public static String[] getChildUnixProcessPids(int pid) {\n+    try {\n+      Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + pid);\n+      getChildPid.waitFor();\n+      StringBuilder childPid = new StringBuilder();\n+      if (getChildPid.exitValue() == 0) {\n+        CharStreams.copy(new InputStreamReader(getChildPid.getInputStream()), childPid);\n+      } else {\n+        StringBuilder errorOutput = new StringBuilder();\n+        CharStreams.copy(new InputStreamReader(getChildPid.getErrorStream()), errorOutput);\n+        LOGGER.debug(\"getChildPid function did not run properly.\\n\" + errorOutput);\n+      }\n+      getChildPid.destroy();\n+      return childPid.toString().replaceAll(\"\\n\", \"\").split(\" \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b3b572e61c2f59c1c750bc526fe4d77cc6c653"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d010e0f40b672bae43756408420d8b234901acc1", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/d010e0f40b672bae43756408420d8b234901acc1", "committedDate": "2020-12-01T03:59:37Z", "message": "Replace newlines with spaces\n\nCo-authored-by: edalex-ian <43919233+edalex-ian@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxNDc0MTQz", "url": "https://github.com/openequella/openEQUELLA/pull/2566#pullrequestreview-541474143", "createdAt": "2020-12-01T04:05:48Z", "commit": {"oid": "d010e0f40b672bae43756408420d8b234901acc1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNDowNTo0OFrOH8XYww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNDo1MDo0OFrOH8YGmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA1OTc3OQ==", "bodyText": "Rather than silently doing nothing, how about invert this logic:\nif(pid < 1) {\n  throw new IllegalArgumentException(\"Process ID should be greater than 0\");\n}", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r533059779", "createdAt": "2020-12-01T04:05:48Z", "author": {"login": "edalex-ian"}, "path": "Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java", "diffHunk": "@@ -52,6 +54,104 @@\n     \"\", \".exe\", \".bat\"\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n+  /**\n+   * For a given Process ID, kill any child processes and then kill the process. Works on Unix only,\n+   * as it leverages pgrep and kill commands.\n+   *\n+   * @param pid The Process for which to terminate including it's direct children.\n+   */\n+  public static void killLinuxProcessTree(int pid) {\n+    if (pid > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d010e0f40b672bae43756408420d8b234901acc1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA2MjA5Nw==", "bodyText": "The way you're having to use this highlights a few issues with the below methods. Really, you'd expect the methods to support something like:\ngetChildUnixProcessPids(pid)\n  .ifPresent(pids ->\n    sendSigKill(pids));\nComments which follow have this in mind.", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r533062097", "createdAt": "2020-12-01T04:15:32Z", "author": {"login": "edalex-ian"}, "path": "Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java", "diffHunk": "@@ -52,6 +54,104 @@\n     \"\", \".exe\", \".bat\"\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n+  /**\n+   * For a given Process ID, kill any child processes and then kill the process. Works on Unix only,\n+   * as it leverages pgrep and kill commands.\n+   *\n+   * @param pid The Process for which to terminate including it's direct children.\n+   */\n+  public static void killLinuxProcessTree(int pid) {\n+    if (pid > 0) {\n+      // get child process PIDs as strings\n+      String[] children = getChildUnixProcessPids(pid);\n+      // Kill child process(es)\n+      for (String child : children) {\n+        sendSigKill(Integer.parseInt(child));\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d010e0f40b672bae43756408420d8b234901acc1"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA2MjMzNg==", "bodyText": "If 'Can be empty' how about return an Optional? You'd then reap the benefits hoped for above, plus your method signature than flags this without the need for a comment.", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r533062336", "createdAt": "2020-12-01T04:16:26Z", "author": {"login": "edalex-ian"}, "path": "Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java", "diffHunk": "@@ -52,6 +54,104 @@\n     \"\", \".exe\", \".bat\"\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n+  /**\n+   * For a given Process ID, kill any child processes and then kill the process. Works on Unix only,\n+   * as it leverages pgrep and kill commands.\n+   *\n+   * @param pid The Process for which to terminate including it's direct children.\n+   */\n+  public static void killLinuxProcessTree(int pid) {\n+    if (pid > 0) {\n+      // get child process PIDs as strings\n+      String[] children = getChildUnixProcessPids(pid);\n+      // Kill child process(es)\n+      for (String child : children) {\n+        sendSigKill(Integer.parseInt(child));\n+      }\n+      // kill process itself\n+      sendSigKill(pid);\n+    }\n+  }\n+\n+  /**\n+   * Runs pgrep -P for a given Process ID, to get a list of child processes as Process IDs.\n+   *\n+   * @param pid The parent process ID to check for child processes.\n+   * @return String[] An array of process IDs for the children of pid. Can be empty.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d010e0f40b672bae43756408420d8b234901acc1"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA2OTM0NA==", "bodyText": "It's expected that this method would return an array of numbers (PIDs) not strings. Keep in mind the above suggestion for an Optional it'd be good if you also streamed across the strings to transform them to Integers. Something like:\nArrays.stream(childPid...split(\" \"))\n  .stream()\n  .mapToInt(s -> Integer.parseInt(s))\n  .toArray();", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r533069344", "createdAt": "2020-12-01T04:42:29Z", "author": {"login": "edalex-ian"}, "path": "Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java", "diffHunk": "@@ -52,6 +54,104 @@\n     \"\", \".exe\", \".bat\"\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n+  /**\n+   * For a given Process ID, kill any child processes and then kill the process. Works on Unix only,\n+   * as it leverages pgrep and kill commands.\n+   *\n+   * @param pid The Process for which to terminate including it's direct children.\n+   */\n+  public static void killLinuxProcessTree(int pid) {\n+    if (pid > 0) {\n+      // get child process PIDs as strings\n+      String[] children = getChildUnixProcessPids(pid);\n+      // Kill child process(es)\n+      for (String child : children) {\n+        sendSigKill(Integer.parseInt(child));\n+      }\n+      // kill process itself\n+      sendSigKill(pid);\n+    }\n+  }\n+\n+  /**\n+   * Runs pgrep -P for a given Process ID, to get a list of child processes as Process IDs.\n+   *\n+   * @param pid The parent process ID to check for child processes.\n+   * @return String[] An array of process IDs for the children of pid. Can be empty.\n+   */\n+  public static String[] getChildUnixProcessPids(int pid) {\n+    try {\n+      Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + pid);\n+      getChildPid.waitFor();\n+      StringBuilder childPid = new StringBuilder();\n+      if (getChildPid.exitValue() == 0) {\n+        CharStreams.copy(new InputStreamReader(getChildPid.getInputStream()), childPid);\n+      } else {\n+        StringBuilder errorOutput = new StringBuilder();\n+        CharStreams.copy(new InputStreamReader(getChildPid.getErrorStream()), errorOutput);\n+        LOGGER.debug(\"getChildPid function did not run properly.\\n\" + errorOutput);\n+      }\n+      getChildPid.destroy();\n+      return childPid.toString().replaceAll(\"\\n\", \" \").split(\" \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d010e0f40b672bae43756408420d8b234901acc1"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA3MDE3OA==", "bodyText": "Seeing kill has a definition of:\nkill [options] <pid> [...]\n\nIt'd make sense to allow this to support a list of PIDs too:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static int sendSigKill(int pid) {\n          \n          \n            \n              public static int sendSigKill(int[] pid) {\n          \n      \n    \n    \n  \n\nThat also then supports your use case of killing potentially multiple PIDs. If you did also want to support the form of taking a single PID (which I'm not sure you have a use for here), then you could add an overload that does the transform simply to an array and chain to this method.", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r533070178", "createdAt": "2020-12-01T04:45:44Z", "author": {"login": "edalex-ian"}, "path": "Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java", "diffHunk": "@@ -52,6 +54,104 @@\n     \"\", \".exe\", \".bat\"\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n+  /**\n+   * For a given Process ID, kill any child processes and then kill the process. Works on Unix only,\n+   * as it leverages pgrep and kill commands.\n+   *\n+   * @param pid The Process for which to terminate including it's direct children.\n+   */\n+  public static void killLinuxProcessTree(int pid) {\n+    if (pid > 0) {\n+      // get child process PIDs as strings\n+      String[] children = getChildUnixProcessPids(pid);\n+      // Kill child process(es)\n+      for (String child : children) {\n+        sendSigKill(Integer.parseInt(child));\n+      }\n+      // kill process itself\n+      sendSigKill(pid);\n+    }\n+  }\n+\n+  /**\n+   * Runs pgrep -P for a given Process ID, to get a list of child processes as Process IDs.\n+   *\n+   * @param pid The parent process ID to check for child processes.\n+   * @return String[] An array of process IDs for the children of pid. Can be empty.\n+   */\n+  public static String[] getChildUnixProcessPids(int pid) {\n+    try {\n+      Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + pid);\n+      getChildPid.waitFor();\n+      StringBuilder childPid = new StringBuilder();\n+      if (getChildPid.exitValue() == 0) {\n+        CharStreams.copy(new InputStreamReader(getChildPid.getInputStream()), childPid);\n+      } else {\n+        StringBuilder errorOutput = new StringBuilder();\n+        CharStreams.copy(new InputStreamReader(getChildPid.getErrorStream()), errorOutput);\n+        LOGGER.debug(\"getChildPid function did not run properly.\\n\" + errorOutput);\n+      }\n+      getChildPid.destroy();\n+      return childPid.toString().replaceAll(\"\\n\", \" \").split(\" \");\n+    } catch (IOException | InterruptedException e) {\n+      LOGGER.error(\"Error getting child processes for: \" + pid, e);\n+    }\n+    return new String[] {};\n+  }\n+\n+  /**\n+   * Creates a process which then sends a SIGKILL signal to a given process.\n+   *\n+   * @param pid the Process ID of the process to kill.\n+   * @return the exitValue of the SIGKILL process (not the process being killed)\n+   */\n+  public static int sendSigKill(int pid) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d010e0f40b672bae43756408420d8b234901acc1"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA3MDc1MA==", "bodyText": "If you should get here, should you perhaps ensure that by adding a line to your above catch to throw or rethrow?", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r533070750", "createdAt": "2020-12-01T04:48:06Z", "author": {"login": "edalex-ian"}, "path": "Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java", "diffHunk": "@@ -52,6 +54,104 @@\n     \"\", \".exe\", \".bat\"\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n+  /**\n+   * For a given Process ID, kill any child processes and then kill the process. Works on Unix only,\n+   * as it leverages pgrep and kill commands.\n+   *\n+   * @param pid The Process for which to terminate including it's direct children.\n+   */\n+  public static void killLinuxProcessTree(int pid) {\n+    if (pid > 0) {\n+      // get child process PIDs as strings\n+      String[] children = getChildUnixProcessPids(pid);\n+      // Kill child process(es)\n+      for (String child : children) {\n+        sendSigKill(Integer.parseInt(child));\n+      }\n+      // kill process itself\n+      sendSigKill(pid);\n+    }\n+  }\n+\n+  /**\n+   * Runs pgrep -P for a given Process ID, to get a list of child processes as Process IDs.\n+   *\n+   * @param pid The parent process ID to check for child processes.\n+   * @return String[] An array of process IDs for the children of pid. Can be empty.\n+   */\n+  public static String[] getChildUnixProcessPids(int pid) {\n+    try {\n+      Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + pid);\n+      getChildPid.waitFor();\n+      StringBuilder childPid = new StringBuilder();\n+      if (getChildPid.exitValue() == 0) {\n+        CharStreams.copy(new InputStreamReader(getChildPid.getInputStream()), childPid);\n+      } else {\n+        StringBuilder errorOutput = new StringBuilder();\n+        CharStreams.copy(new InputStreamReader(getChildPid.getErrorStream()), errorOutput);\n+        LOGGER.debug(\"getChildPid function did not run properly.\\n\" + errorOutput);\n+      }\n+      getChildPid.destroy();\n+      return childPid.toString().replaceAll(\"\\n\", \" \").split(\" \");\n+    } catch (IOException | InterruptedException e) {\n+      LOGGER.error(\"Error getting child processes for: \" + pid, e);\n+    }\n+    return new String[] {};\n+  }\n+\n+  /**\n+   * Creates a process which then sends a SIGKILL signal to a given process.\n+   *\n+   * @param pid the Process ID of the process to kill.\n+   * @return the exitValue of the SIGKILL process (not the process being killed)\n+   */\n+  public static int sendSigKill(int pid) {\n+    try {\n+      Process sigKill = Runtime.getRuntime().exec(\"kill -9 \" + pid);\n+      sigKill.waitFor();\n+      int returnValue = sigKill.exitValue();\n+      if (sigKill.exitValue() == 0) {\n+        StringBuilder successOutput = new StringBuilder();\n+        CharStreams.copy(new InputStreamReader(sigKill.getInputStream()), successOutput);\n+        LOGGER.debug(\"Output of kill function: \" + successOutput);\n+      } else {\n+        StringBuilder errorOutput = new StringBuilder();\n+        CharStreams.copy(new InputStreamReader(sigKill.getErrorStream()), errorOutput);\n+        LOGGER.debug(\"kill function did not run properly.\\n\" + errorOutput);\n+      }\n+      sigKill.destroy();\n+      return returnValue;\n+    } catch (IOException | InterruptedException e) {\n+      LOGGER.error(\"killing process \" + pid + \" failed.\", e);\n+    }\n+    // shouldn't get here\n+    return -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d010e0f40b672bae43756408420d8b234901acc1"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA3MTUxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          \"Platform not yet supported for process tree kill. Processes may be left hanging\");\n          \n          \n            \n                          \"Platform (\" + platform + \") does not supported process tree kill. Processes may be left hanging.\");", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r533071512", "createdAt": "2020-12-01T04:50:48Z", "author": {"login": "edalex-ian"}, "path": "Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java", "diffHunk": "@@ -130,10 +230,18 @@ public static ExecResult execWithTimeLimit(\n           createProcess(cmdarray, additionalEnv, dir);\n       LOGGER.debug(\"Started timed process\");\n       final Process proc = cp.getFirst();\n+      int pid = getPidOfProcess(proc).orElse(0);\n       final StreamReader stdOut = cp.getSecond();\n       final StreamReader stdErr = cp.getThird();\n       proc.waitFor(durationInSeconds, TimeUnit.SECONDS);\n       if (!stdErr.isFinished() || !stdOut.isFinished()) {\n+        String platform = determinePlatform();\n+        if (platform.equals(PLATFORM_LINUX) || platform.equals(PLATFORM_LINUX64)) {\n+          killLinuxProcessTree(pid);\n+        } else {\n+          LOGGER.debug(\n+              \"Platform not yet supported for process tree kill. Processes may be left hanging\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d010e0f40b672bae43756408420d8b234901acc1"}, "originalPosition": 134}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5515a7e7162c58dc3ee69e7531008c08c15c8f6b", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/5515a7e7162c58dc3ee69e7531008c08c15c8f6b", "committedDate": "2020-12-01T05:08:06Z", "message": "Handle pid of zero or less with IllegalArgumentException"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3cf0e4ddd0ee21e548cf0fa5fbacda0bb411c2b0", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/3cf0e4ddd0ee21e548cf0fa5fbacda0bb411c2b0", "committedDate": "2020-12-01T06:59:31Z", "message": "Refactor to kill all child processes at once and then the parent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efac1afbffd16498168aba0f9a001a0d5df6df43", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/efac1afbffd16498168aba0f9a001a0d5df6df43", "committedDate": "2020-12-01T07:03:58Z", "message": "Reword comment to include platform"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35b24f0c978119b611aada781809e0e5cb26807c", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/35b24f0c978119b611aada781809e0e5cb26807c", "committedDate": "2020-12-01T07:07:37Z", "message": "Rethrow exceptions from sendSigKill"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "589b0c7e23e1cd7e61940f28cb460122dac51584", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/589b0c7e23e1cd7e61940f28cb460122dac51584", "committedDate": "2020-12-01T07:11:39Z", "message": "Merge branch 'develop' into bugfix/ensure_gs_gets_terminated"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMzc3OTQx", "url": "https://github.com/openequella/openEQUELLA/pull/2566#pullrequestreview-542377941", "createdAt": "2020-12-01T23:18:27Z", "commit": {"oid": "589b0c7e23e1cd7e61940f28cb460122dac51584"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMzoxODoyN1rOH9Dz5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMzoyODoxNVrOH9EDJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc4NzYyMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @return Optional<String[]> An array of process IDs for the children of pid.\n          \n          \n            \n               * @return Process IDs for the children of {@code pid}.", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r533787623", "createdAt": "2020-12-01T23:18:27Z", "author": {"login": "edalex-ian"}, "path": "Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java", "diffHunk": "@@ -52,6 +54,125 @@\n     \"\", \".exe\", \".bat\"\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n+  /**\n+   * For a given Process ID, kill any child processes and then kill the process. Works on Unix only,\n+   * as it leverages pgrep and kill commands.\n+   *\n+   * @param pid The Process for which to terminate including it's direct children.\n+   */\n+  public static void killLinuxProcessTree(int pid) {\n+    if (pid < 1) {\n+      throw new IllegalArgumentException(\"Process ID should be greater than 0\");\n+    }\n+    // get child process PIDs and kill them\n+    getChildUnixProcessPids(pid).ifPresent(ExecUtils::sendSigKill);\n+\n+    // kill process itself, after all the child processes have been terminated\n+    sendSigKill(pid);\n+  }\n+\n+  /**\n+   * Runs pgrep -P for a given Process ID, to get a list of child processes as Process IDs.\n+   *\n+   * @param pid The parent process ID to check for child processes.\n+   * @return Optional<String[]> An array of process IDs for the children of pid.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "589b0c7e23e1cd7e61940f28cb460122dac51584"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5MDI4OQ==", "bodyText": "Being an error level log message, would be good if it was a more useful error message for an administrator.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  LOGGER.error(\"Output of getChildPids command not parsable as integers\", e);\n          \n          \n            \n                  LOGGER.error(\"Unsupported output from 'pgrep -P'. Unable to terminate child processes.\");\n          \n          \n            \n                  LOGGER.error(\"'pgrep' output: \" + childPid.toString());\n          \n          \n            \n                  LOGGER.error(\"Parsing exception.\", e);", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r533790289", "createdAt": "2020-12-01T23:24:50Z", "author": {"login": "edalex-ian"}, "path": "Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java", "diffHunk": "@@ -52,6 +54,125 @@\n     \"\", \".exe\", \".bat\"\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n+  /**\n+   * For a given Process ID, kill any child processes and then kill the process. Works on Unix only,\n+   * as it leverages pgrep and kill commands.\n+   *\n+   * @param pid The Process for which to terminate including it's direct children.\n+   */\n+  public static void killLinuxProcessTree(int pid) {\n+    if (pid < 1) {\n+      throw new IllegalArgumentException(\"Process ID should be greater than 0\");\n+    }\n+    // get child process PIDs and kill them\n+    getChildUnixProcessPids(pid).ifPresent(ExecUtils::sendSigKill);\n+\n+    // kill process itself, after all the child processes have been terminated\n+    sendSigKill(pid);\n+  }\n+\n+  /**\n+   * Runs pgrep -P for a given Process ID, to get a list of child processes as Process IDs.\n+   *\n+   * @param pid The parent process ID to check for child processes.\n+   * @return Optional<String[]> An array of process IDs for the children of pid.\n+   */\n+  public static Optional<int[]> getChildUnixProcessPids(int pid) {\n+    Optional<int[]> pids = Optional.empty();\n+    try {\n+      Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + pid);\n+      getChildPid.waitFor();\n+      StringBuilder childPid = new StringBuilder();\n+      if (getChildPid.exitValue() == 0) {\n+        CharStreams.copy(new InputStreamReader(getChildPid.getInputStream()), childPid);\n+      } else {\n+        StringBuilder errorOutput = new StringBuilder();\n+        CharStreams.copy(new InputStreamReader(getChildPid.getErrorStream()), errorOutput);\n+        LOGGER.debug(\"getChildPid function did not run properly.\\n\" + errorOutput);\n+      }\n+      getChildPid.destroy();\n+      // convert string to array of ints\n+      pids =\n+          Optional.of(\n+              Arrays.stream(childPid.toString().replaceAll(\"\\n\", \" \").split(\" \"))\n+                  .mapToInt(Integer::parseInt)\n+                  .toArray());\n+    } catch (IOException | InterruptedException e) {\n+      LOGGER.error(\"Error getting child processes for: \" + pid, e);\n+    } catch (NumberFormatException e) {\n+      LOGGER.error(\"Output of getChildPids command not parsable as integers\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "589b0c7e23e1cd7e61940f28cb460122dac51584"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5MTUyNw==", "bodyText": "Be useful for administrators to know when this kind of thing is not functioning correctly.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LOGGER.debug(\"kill function did not run properly.\\n\" + errorOutput);\n          \n          \n            \n                    LOGGER.warn(\"Attempt to terminate processes failed (\" + command + \"):\\n\" + errorOutput);", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r533791527", "createdAt": "2020-12-01T23:28:15Z", "author": {"login": "edalex-ian"}, "path": "Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java", "diffHunk": "@@ -52,6 +54,125 @@\n     \"\", \".exe\", \".bat\"\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n+  /**\n+   * For a given Process ID, kill any child processes and then kill the process. Works on Unix only,\n+   * as it leverages pgrep and kill commands.\n+   *\n+   * @param pid The Process for which to terminate including it's direct children.\n+   */\n+  public static void killLinuxProcessTree(int pid) {\n+    if (pid < 1) {\n+      throw new IllegalArgumentException(\"Process ID should be greater than 0\");\n+    }\n+    // get child process PIDs and kill them\n+    getChildUnixProcessPids(pid).ifPresent(ExecUtils::sendSigKill);\n+\n+    // kill process itself, after all the child processes have been terminated\n+    sendSigKill(pid);\n+  }\n+\n+  /**\n+   * Runs pgrep -P for a given Process ID, to get a list of child processes as Process IDs.\n+   *\n+   * @param pid The parent process ID to check for child processes.\n+   * @return Optional<String[]> An array of process IDs for the children of pid.\n+   */\n+  public static Optional<int[]> getChildUnixProcessPids(int pid) {\n+    Optional<int[]> pids = Optional.empty();\n+    try {\n+      Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + pid);\n+      getChildPid.waitFor();\n+      StringBuilder childPid = new StringBuilder();\n+      if (getChildPid.exitValue() == 0) {\n+        CharStreams.copy(new InputStreamReader(getChildPid.getInputStream()), childPid);\n+      } else {\n+        StringBuilder errorOutput = new StringBuilder();\n+        CharStreams.copy(new InputStreamReader(getChildPid.getErrorStream()), errorOutput);\n+        LOGGER.debug(\"getChildPid function did not run properly.\\n\" + errorOutput);\n+      }\n+      getChildPid.destroy();\n+      // convert string to array of ints\n+      pids =\n+          Optional.of(\n+              Arrays.stream(childPid.toString().replaceAll(\"\\n\", \" \").split(\" \"))\n+                  .mapToInt(Integer::parseInt)\n+                  .toArray());\n+    } catch (IOException | InterruptedException e) {\n+      LOGGER.error(\"Error getting child processes for: \" + pid, e);\n+    } catch (NumberFormatException e) {\n+      LOGGER.error(\"Output of getChildPids command not parsable as integers\", e);\n+    }\n+    return pids;\n+  }\n+\n+  /**\n+   * Creates a process which then sends a SIGKILL signal to an array of given processes.\n+   *\n+   * @param pids the Process IDs of the processes to kill.\n+   * @return the exitValue of the SIGKILL process (not the process being killed)\n+   */\n+  public static int sendSigKill(int[] pids) {\n+    try {\n+      StringBuilder command = new StringBuilder(\"kill -9 \");\n+      for (int pid : pids) {\n+        command.append(pid).append(\" \");\n+      }\n+      LOGGER.debug(\"Running command: \" + command);\n+      Process sigKill = Runtime.getRuntime().exec(String.valueOf(command));\n+      sigKill.waitFor();\n+      int returnValue = sigKill.exitValue();\n+      if (sigKill.exitValue() == 0) {\n+        StringBuilder successOutput = new StringBuilder();\n+        CharStreams.copy(new InputStreamReader(sigKill.getInputStream()), successOutput);\n+        LOGGER.debug(\"Output of kill function: \" + successOutput);\n+      } else {\n+        StringBuilder errorOutput = new StringBuilder();\n+        CharStreams.copy(new InputStreamReader(sigKill.getErrorStream()), errorOutput);\n+        LOGGER.debug(\"kill function did not run properly.\\n\" + errorOutput);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "589b0c7e23e1cd7e61940f28cb460122dac51584"}, "originalPosition": 93}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4041db62d21980241a1031af895af73908a98ff9", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/4041db62d21980241a1031af895af73908a98ff9", "committedDate": "2020-12-01T23:42:23Z", "message": "Reword error messages\n\nCo-authored-by: edalex-ian <43919233+edalex-ian@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c85cad2e14716269605644551c140b1432d2f5c1", "author": {"user": null}, "url": "https://github.com/openequella/openEQUELLA/commit/c85cad2e14716269605644551c140b1432d2f5c1", "committedDate": "2020-12-01T23:53:05Z", "message": "Make sure childPid is accessible from error block"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 273, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}