{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1OTI1NTMz", "number": 1722, "reviewThreads": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzo1MjoyMlrOD7V9VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzoyMToyMFrOD726wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTUyMzQxOnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzo1MjoyMlrOGTnASA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzo1MjoyMlrOGTnASA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIxNTE3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <img\n          \n          \n            \n            src=\"https://user-images.githubusercontent.com/4060187/52168322-a98e5b00-26f6-11e9-8cf6-222d716b75ef.gif\"\n          \n          \n            \n            width=\"600\" />\n          \n          \n            \n            ![npm build example](https://user-images.githubusercontent.com/4060187/52168322-a98e5b00-26f6-11e9-8cf6-222d716b75ef.gif)", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423215176", "createdAt": "2020-05-11T17:52:22Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/README.md", "diffHunk": "@@ -0,0 +1,76 @@\n+# openEQUELLA Typescript REST API SDK\n+\n+This module provides a code generated SDK for access to the openEQUELLA REST API.\n+\n+## Local Development\n+\n+This project was bootstrapped with [TSDX](https://github.com/jaredpalmer/tsdx) but the subsequently\n+tweaked (especially for Jest and Eslint).\n+\n+Below is a list of commands you may find useful.\n+\n+### `npm start` or `yarn start`\n+\n+Runs the project in development/watch mode. Your project will be rebuilt upon changes. TSDX has a\n+special logger for you convenience. Error messages are pretty printed and formatted for\n+compatibility VS Code's Problems tab.\n+\n+<img\n+src=\"https://user-images.githubusercontent.com/4060187/52168303-574d3a00-26f6-11e9-9f3b-71dbec9ebfcb.gif\"\n+width=\"600\" />\n+\n+Your library will be rebuilt if you make edits.\n+\n+### `npm run build` or `yarn build`\n+\n+Bundles the package to the `dist` folder.  The package is optimized and bundled with Rollup into\n+multiple formats (CommonJS, UMD, and ES Module).\n+\n+<img\n+src=\"https://user-images.githubusercontent.com/4060187/52168322-a98e5b00-26f6-11e9-8cf6-222d716b75ef.gif\"\n+width=\"600\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b9ec7e2b7cfa2de4ae9b0aecadd095af90dc2b9"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTYyNTE4OnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxODoyMjoyNVrOGToBtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxODoyMjoyNVrOGToBtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIzMTkyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <img\n          \n          \n            \n            src=\"https://user-images.githubusercontent.com/4060187/52168303-574d3a00-26f6-11e9-9f3b-71dbec9ebfcb.gif\"\n          \n          \n            \n            width=\"600\" />\n          \n          \n            \n            ![npm start example](https://user-images.githubusercontent.com/4060187/52168303-574d3a00-26f6-11e9-9f3b-71dbec9ebfcb.gif)", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423231925", "createdAt": "2020-05-11T18:22:25Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/README.md", "diffHunk": "@@ -0,0 +1,76 @@\n+# openEQUELLA Typescript REST API SDK\n+\n+This module provides a code generated SDK for access to the openEQUELLA REST API.\n+\n+## Local Development\n+\n+This project was bootstrapped with [TSDX](https://github.com/jaredpalmer/tsdx) but the subsequently\n+tweaked (especially for Jest and Eslint).\n+\n+Below is a list of commands you may find useful.\n+\n+### `npm start` or `yarn start`\n+\n+Runs the project in development/watch mode. Your project will be rebuilt upon changes. TSDX has a\n+special logger for you convenience. Error messages are pretty printed and formatted for\n+compatibility VS Code's Problems tab.\n+\n+<img\n+src=\"https://user-images.githubusercontent.com/4060187/52168303-574d3a00-26f6-11e9-9f3b-71dbec9ebfcb.gif\"\n+width=\"600\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b9ec7e2b7cfa2de4ae9b0aecadd095af90dc2b9"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTYzMDY5OnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/package.json", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxODoyMzo0OVrOGToFHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMzowMjowN1rOGTwUnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIzMjc5Ng==", "bodyText": "It may be worth considering using a namespace, giving openEquella an organization to manage package(s) and a way to give more flexibility with naming.\nSomething like @openequella/rest-api-client", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423232796", "createdAt": "2020-05-11T18:23:49Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/package.json", "diffHunk": "@@ -0,0 +1,49 @@\n+{\n+  \"version\": \"2020.2.0-Alpha\",\n+  \"license\": \"Apache-2.0\",\n+  \"main\": \"dist/index.js\",\n+  \"typings\": \"dist/index.d.ts\",\n+  \"files\": [\n+    \"dist\",\n+    \"src\"\n+  ],\n+  \"engines\": {\n+    \"node\": \">=10\"\n+  },\n+  \"scripts\": {\n+    \"start\": \"tsdx watch\",\n+    \"build\": \"tsdx build\",\n+    \"test\": \"jest\",\n+    \"lint\": \"eslint \\\"src/**/*.{ts,tsx}\\\" \\\"test/**/*.{ts,tsx}\\\"\",\n+    \"prepare\": \"tsdx build\"\n+  },\n+  \"peerDependencies\": {},\n+  \"husky\": {\n+    \"hooks\": {\n+      \"pre-commit\": \"npm run lint\"\n+    }\n+  },\n+  \"prettier\": {\n+    \"printWidth\": 80,\n+    \"semi\": true,\n+    \"singleQuote\": true,\n+    \"trailingComma\": \"es5\"\n+  },\n+  \"name\": \"oeq-ts-rest-api\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b9ec7e2b7cfa2de4ae9b0aecadd095af90dc2b9"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMzOTM2NQ==", "bodyText": "I like that idea. Will do. Thanks. \ud83d\udc4d", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423339365", "createdAt": "2020-05-11T21:47:44Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/package.json", "diffHunk": "@@ -0,0 +1,49 @@\n+{\n+  \"version\": \"2020.2.0-Alpha\",\n+  \"license\": \"Apache-2.0\",\n+  \"main\": \"dist/index.js\",\n+  \"typings\": \"dist/index.d.ts\",\n+  \"files\": [\n+    \"dist\",\n+    \"src\"\n+  ],\n+  \"engines\": {\n+    \"node\": \">=10\"\n+  },\n+  \"scripts\": {\n+    \"start\": \"tsdx watch\",\n+    \"build\": \"tsdx build\",\n+    \"test\": \"jest\",\n+    \"lint\": \"eslint \\\"src/**/*.{ts,tsx}\\\" \\\"test/**/*.{ts,tsx}\\\"\",\n+    \"prepare\": \"tsdx build\"\n+  },\n+  \"peerDependencies\": {},\n+  \"husky\": {\n+    \"hooks\": {\n+      \"pre-commit\": \"npm run lint\"\n+    }\n+  },\n+  \"prettier\": {\n+    \"printWidth\": 80,\n+    \"semi\": true,\n+    \"singleQuote\": true,\n+    \"trailingComma\": \"es5\"\n+  },\n+  \"name\": \"oeq-ts-rest-api\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIzMjc5Ng=="}, "originalCommit": {"oid": "1b9ec7e2b7cfa2de4ae9b0aecadd095af90dc2b9"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2NzgzNg==", "bodyText": "Done.", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423367836", "createdAt": "2020-05-11T23:02:07Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/package.json", "diffHunk": "@@ -0,0 +1,49 @@\n+{\n+  \"version\": \"2020.2.0-Alpha\",\n+  \"license\": \"Apache-2.0\",\n+  \"main\": \"dist/index.js\",\n+  \"typings\": \"dist/index.d.ts\",\n+  \"files\": [\n+    \"dist\",\n+    \"src\"\n+  ],\n+  \"engines\": {\n+    \"node\": \">=10\"\n+  },\n+  \"scripts\": {\n+    \"start\": \"tsdx watch\",\n+    \"build\": \"tsdx build\",\n+    \"test\": \"jest\",\n+    \"lint\": \"eslint \\\"src/**/*.{ts,tsx}\\\" \\\"test/**/*.{ts,tsx}\\\"\",\n+    \"prepare\": \"tsdx build\"\n+  },\n+  \"peerDependencies\": {},\n+  \"husky\": {\n+    \"hooks\": {\n+      \"pre-commit\": \"npm run lint\"\n+    }\n+  },\n+  \"prettier\": {\n+    \"printWidth\": 80,\n+    \"semi\": true,\n+    \"singleQuote\": true,\n+    \"trailingComma\": \"es5\"\n+  },\n+  \"name\": \"oeq-ts-rest-api\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIzMjc5Ng=="}, "originalCommit": {"oid": "1b9ec7e2b7cfa2de4ae9b0aecadd095af90dc2b9"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTc3NDA1OnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/src/LegacyContent.ts", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxOTowNToyOFrOGTpf8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzo1MjoxN1rOGT6YRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI1NjA0OA==", "bodyText": "Really like that the types carry through here. \ud83d\udc4d\nSomething which may be worth exploring, a lightway check that the data matches the expectation can be useful as an early warning system if the client get's out of sync with the API itself.\nFor example:\nhttps://github.com/gcanti/io-ts\nhttps://github.com/sindresorhus/ow\nhttps://github.com/ianstormtaylor/superstruct", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423256048", "createdAt": "2020-05-11T19:05:28Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/src/LegacyContent.ts", "diffHunk": "@@ -0,0 +1,40 @@\n+import { GET } from './AxiosInstance';\n+\n+export interface ItemCounts {\n+  tasks: number;\n+  notifications: number;\n+}\n+\n+export interface MenuItem {\n+  title: string;\n+  href?: string;\n+  systemIcon?: string;\n+  route?: string;\n+  iconUrl?: string;\n+  newWindow: boolean;\n+}\n+\n+export interface CurrentUserDetails {\n+  id: string;\n+  username: string;\n+  firstName: string;\n+  lastName: string;\n+  emailAddress: string;\n+  accessibilityMode: boolean;\n+  autoLoggedIn: boolean;\n+  guest: boolean;\n+  prefsEditable: boolean;\n+  menuGroups: Array<Array<MenuItem>>;\n+  counts?: ItemCounts;\n+}\n+\n+/**\n+ * Retrieve details of the current user (based on JSESSIONID) including details for the UI such\n+ * as menu structure and task and notification counts.\n+ *\n+ * @param apiBasePath Base URI to the oEQ institution and API\n+ */\n+export const getCurrentUserDetails = (\n+  apiBasePath: string\n+): Promise<CurrentUserDetails> =>\n+  GET<CurrentUserDetails>(apiBasePath + '/content/currentuser');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b9ec7e2b7cfa2de4ae9b0aecadd095af90dc2b9"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMzOTc5OQ==", "bodyText": "I like the sounds of that. Will have a closer look and see if I can maybe slot something into the GET.", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423339799", "createdAt": "2020-05-11T21:48:43Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/src/LegacyContent.ts", "diffHunk": "@@ -0,0 +1,40 @@\n+import { GET } from './AxiosInstance';\n+\n+export interface ItemCounts {\n+  tasks: number;\n+  notifications: number;\n+}\n+\n+export interface MenuItem {\n+  title: string;\n+  href?: string;\n+  systemIcon?: string;\n+  route?: string;\n+  iconUrl?: string;\n+  newWindow: boolean;\n+}\n+\n+export interface CurrentUserDetails {\n+  id: string;\n+  username: string;\n+  firstName: string;\n+  lastName: string;\n+  emailAddress: string;\n+  accessibilityMode: boolean;\n+  autoLoggedIn: boolean;\n+  guest: boolean;\n+  prefsEditable: boolean;\n+  menuGroups: Array<Array<MenuItem>>;\n+  counts?: ItemCounts;\n+}\n+\n+/**\n+ * Retrieve details of the current user (based on JSESSIONID) including details for the UI such\n+ * as menu structure and task and notification counts.\n+ *\n+ * @param apiBasePath Base URI to the oEQ institution and API\n+ */\n+export const getCurrentUserDetails = (\n+  apiBasePath: string\n+): Promise<CurrentUserDetails> =>\n+  GET<CurrentUserDetails>(apiBasePath + '/content/currentuser');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI1NjA0OA=="}, "originalCommit": {"oid": "1b9ec7e2b7cfa2de4ae9b0aecadd095af90dc2b9"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM0NDcwMw==", "bodyText": "A snippet I've used on past projects\nimport { Mixed, TypeOf } from 'io-ts';\nimport { either, pipeable } from 'fp-ts';\n\n/**\n * Takes unknown data and returns a strongly typed data.\n * If data does not match expected API interface, it throws a TypeError.\n *\n * @throws TypeError\n */\nexport const validateDataShape = <T extends Mixed>(data: unknown, validateShape: T): TypeOf<T> =>\n  pipeable.pipe(\n    validateShape.decode(data),\n    either.fold(\n      /**\n       * Where there is an error, throw exception and log a message.\n       * Example message: 'value 3 is unexpected type, at root > property > 2 > isActive,\n       * actual type \"string\" expected type \"boolean\"'\n       */\n      errors => {\n        throw new TypeError(\n          errors\n            .map(({ message, context, value }) => {\n              const overallErrorDescription = message || `value ${value} is unexpected type, at`;\n              return `${overallErrorDescription} ${context\n                .map(({ key }) => key || 'root')\n                .join(' > ')}, actual type \"${typeof context[context.length - 1]\n                .actual}\" expected type \"${context[context.length - 1].type.name}\"`;\n            })\n            .join('; '),\n        );\n      },\n      /**\n       * Pass valid value through\n       */\n      value => value,\n    ),\n  );\nexport const fetchWrapped = async <T extends Mixed>({\n  url,\n  shape,\n  token,\n  requestOptions,\n}: UseFetchProps<T>) => {\n  const response = await fetch(url, generateRequestOptions(requestOptions, token));\n\n  let data;\n\n  try {\n    data = await response.json();\n  } catch (e) {\n    // the server might respond with an empty body\n    // in some cases, which should be ignored\n  }\n\n  if (data?.status >= 400) {\n    throw new Error(data.statusText);\n  }\n\n  return validateData(data, shape);\n};\nwhere fetchWrapper is a rough equivalent to GET and fetch is the stand in for axios,\nand where shape can be any io-ts definition, for example:\nimport * as t from 'io-ts';\n\nexport const DefinedTypeShape = t.strict({\n  type: t.string,\n  isActive: t.boolean,\n});", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423344703", "createdAt": "2020-05-11T22:00:04Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/src/LegacyContent.ts", "diffHunk": "@@ -0,0 +1,40 @@\n+import { GET } from './AxiosInstance';\n+\n+export interface ItemCounts {\n+  tasks: number;\n+  notifications: number;\n+}\n+\n+export interface MenuItem {\n+  title: string;\n+  href?: string;\n+  systemIcon?: string;\n+  route?: string;\n+  iconUrl?: string;\n+  newWindow: boolean;\n+}\n+\n+export interface CurrentUserDetails {\n+  id: string;\n+  username: string;\n+  firstName: string;\n+  lastName: string;\n+  emailAddress: string;\n+  accessibilityMode: boolean;\n+  autoLoggedIn: boolean;\n+  guest: boolean;\n+  prefsEditable: boolean;\n+  menuGroups: Array<Array<MenuItem>>;\n+  counts?: ItemCounts;\n+}\n+\n+/**\n+ * Retrieve details of the current user (based on JSESSIONID) including details for the UI such\n+ * as menu structure and task and notification counts.\n+ *\n+ * @param apiBasePath Base URI to the oEQ institution and API\n+ */\n+export const getCurrentUserDetails = (\n+  apiBasePath: string\n+): Promise<CurrentUserDetails> =>\n+  GET<CurrentUserDetails>(apiBasePath + '/content/currentuser');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI1NjA0OA=="}, "originalCommit": {"oid": "1b9ec7e2b7cfa2de4ae9b0aecadd095af90dc2b9"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUzMjYxNA==", "bodyText": "Well that ended up being an adventure, but I now have typescript-is plugged in - and indeed it picked up one error in my model. But to get there took migrating from TSDX to direct rollup and things definitely got interesting.\nAlthough I quite like the look of the above I wasn't a fan of how with io-ts I couldn't just use a simple interface. It seems instead you define a Type and then derive your interfaces from that (and possibly use aliases) - based on https://lorefnon.tech/2018/03/25/typescript-and-validations-at-runtime-boundaries/ and https://github.com/gcanti/io-ts/blob/master/Type.md\nThat said, doing so I can see you get far more informative error messages - and when I had to debug my issue it was rather manual. But hopefully it's the exception rather than the norm, and just a bit of a guard.\nSo I've pushed for one more review, and based on current approvals I'll then move to merging tomorrow.", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423532614", "createdAt": "2020-05-12T07:52:17Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/src/LegacyContent.ts", "diffHunk": "@@ -0,0 +1,40 @@\n+import { GET } from './AxiosInstance';\n+\n+export interface ItemCounts {\n+  tasks: number;\n+  notifications: number;\n+}\n+\n+export interface MenuItem {\n+  title: string;\n+  href?: string;\n+  systemIcon?: string;\n+  route?: string;\n+  iconUrl?: string;\n+  newWindow: boolean;\n+}\n+\n+export interface CurrentUserDetails {\n+  id: string;\n+  username: string;\n+  firstName: string;\n+  lastName: string;\n+  emailAddress: string;\n+  accessibilityMode: boolean;\n+  autoLoggedIn: boolean;\n+  guest: boolean;\n+  prefsEditable: boolean;\n+  menuGroups: Array<Array<MenuItem>>;\n+  counts?: ItemCounts;\n+}\n+\n+/**\n+ * Retrieve details of the current user (based on JSESSIONID) including details for the UI such\n+ * as menu structure and task and notification counts.\n+ *\n+ * @param apiBasePath Base URI to the oEQ institution and API\n+ */\n+export const getCurrentUserDetails = (\n+  apiBasePath: string\n+): Promise<CurrentUserDetails> =>\n+  GET<CurrentUserDetails>(apiBasePath + '/content/currentuser');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI1NjA0OA=="}, "originalCommit": {"oid": "1b9ec7e2b7cfa2de4ae9b0aecadd095af90dc2b9"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTk1MzQwOnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/jest.config.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDowMDozNlrOGTrRHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDowMDozNlrOGTrRHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4NTAyMA==", "bodyText": "This was a bit tough to read, the comment at the top linking to the documentation helps.\n100+ lines of comments for options not used make it difficult (for me) to read.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            module.exports = {\n          \n          \n            \n              // All imported modules in your tests should be mocked automatically\n          \n          \n            \n              // automock: false,\n          \n          \n            \n            \n          \n          \n            \n              // Stop running tests after `n` failures\n          \n          \n            \n              // bail: 0,\n          \n          \n            \n            \n          \n          \n            \n              // Respect \"browser\" field in package.json when resolving modules\n          \n          \n            \n              // browser: false,\n          \n          \n            \n            \n          \n          \n            \n              // The directory where Jest should store its cached dependency information\n          \n          \n            \n              // cacheDirectory: \"/tmp/jest_rs\",\n          \n          \n            \n            \n          \n          \n            \n              // Automatically clear mock calls and instances between every test\n          \n          \n            \n              clearMocks: true,\n          \n          \n            \n            \n          \n          \n            \n              // Indicates whether the coverage information should be collected while executing the test\n          \n          \n            \n              // collectCoverage: false,\n          \n          \n            \n            \n          \n          \n            \n              // An array of glob patterns indicating a set of files for which coverage information should be collected\n          \n          \n            \n              // collectCoverageFrom: null,\n          \n          \n            \n            \n          \n          \n            \n              // The directory where Jest should output its coverage files\n          \n          \n            \n              coverageDirectory: \"coverage\",\n          \n          \n            \n            \n          \n          \n            \n              // An array of regexp pattern strings used to skip coverage collection\n          \n          \n            \n              // coveragePathIgnorePatterns: [\n          \n          \n            \n              //   \"/node_modules/\"\n          \n          \n            \n              // ],\n          \n          \n            \n            \n          \n          \n            \n              // A list of reporter names that Jest uses when writing coverage reports\n          \n          \n            \n              // coverageReporters: [\n          \n          \n            \n              //   \"json\",\n          \n          \n            \n              //   \"text\",\n          \n          \n            \n              //   \"lcov\",\n          \n          \n            \n              //   \"clover\"\n          \n          \n            \n              // ],\n          \n          \n            \n            \n          \n          \n            \n              // An object that configures minimum threshold enforcement for coverage results\n          \n          \n            \n              // coverageThreshold: null,\n          \n          \n            \n            \n          \n          \n            \n              // A path to a custom dependency extractor\n          \n          \n            \n              // dependencyExtractor: null,\n          \n          \n            \n            \n          \n          \n            \n              // Make calling deprecated APIs throw helpful error messages\n          \n          \n            \n              // errorOnDeprecated: false,\n          \n          \n            \n            \n          \n          \n            \n              // Force coverage collection from ignored files using an array of glob patterns\n          \n          \n            \n              // forceCoverageMatch: [],\n          \n          \n            \n            \n          \n          \n            \n              // A path to a module which exports an async function that is triggered once before all test suites\n          \n          \n            \n              // globalSetup: null,\n          \n          \n            \n            \n          \n          \n            \n              // A path to a module which exports an async function that is triggered once after all test suites\n          \n          \n            \n              // globalTeardown: null,\n          \n          \n            \n            \n          \n          \n            \n              // A set of global variables that need to be available in all test environments\n          \n          \n            \n              // globals: {},\n          \n          \n            \n            \n          \n          \n            \n              // The maximum amount of workers used to run your tests. Can be specified as % or a number. E.g. maxWorkers: 10% will use 10% of your CPU amount + 1 as the maximum worker number. maxWorkers: 2 will use a maximum of 2 workers.\n          \n          \n            \n              // maxWorkers: \"50%\",\n          \n          \n            \n            \n          \n          \n            \n              // An array of directory names to be searched recursively up from the requiring module's location\n          \n          \n            \n              // moduleDirectories: [\n          \n          \n            \n              //   \"node_modules\"\n          \n          \n            \n              // ],\n          \n          \n            \n            \n          \n          \n            \n              // An array of file extensions your modules use\n          \n          \n            \n              // moduleFileExtensions: [\n          \n          \n            \n              //   \"js\",\n          \n          \n            \n              //   \"json\",\n          \n          \n            \n              //   \"jsx\",\n          \n          \n            \n              //   \"ts\",\n          \n          \n            \n              //   \"tsx\",\n          \n          \n            \n              //   \"node\"\n          \n          \n            \n              // ],\n          \n          \n            \n            \n          \n          \n            \n              // A map from regular expressions to module names that allow to stub out resources with a single module\n          \n          \n            \n              // moduleNameMapper: {},\n          \n          \n            \n            \n          \n          \n            \n              // An array of regexp pattern strings, matched against all module paths before considered 'visible' to the module loader\n          \n          \n            \n              // modulePathIgnorePatterns: [],\n          \n          \n            \n            \n          \n          \n            \n              // Activates notifications for test results\n          \n          \n            \n              // notify: false,\n          \n          \n            \n            \n          \n          \n            \n              // An enum that specifies notification mode. Requires { notify: true }\n          \n          \n            \n              // notifyMode: \"failure-change\",\n          \n          \n            \n            \n          \n          \n            \n              // A preset that is used as a base for Jest's configuration\n          \n          \n            \n              preset: \"ts-jest\",\n          \n          \n            \n            \n          \n          \n            \n              // Run tests from one or more projects\n          \n          \n            \n              // projects: null,\n          \n          \n            \n            \n          \n          \n            \n              // Use this configuration option to add custom reporters to Jest\n          \n          \n            \n              // reporters: undefined,\n          \n          \n            \n            \n          \n          \n            \n              // Automatically reset mock state between every test\n          \n          \n            \n              // resetMocks: false,\n          \n          \n            \n            \n          \n          \n            \n              // Reset the module registry before running each individual test\n          \n          \n            \n              // resetModules: false,\n          \n          \n            \n            \n          \n          \n            \n              // A path to a custom resolver\n          \n          \n            \n              // resolver: null,\n          \n          \n            \n            \n          \n          \n            \n              // Automatically restore mock state between every test\n          \n          \n            \n              // restoreMocks: false,\n          \n          \n            \n            \n          \n          \n            \n              // The root directory that Jest should scan for tests and modules within\n          \n          \n            \n              // rootDir: null,\n          \n          \n            \n            \n          \n          \n            \n              // A list of paths to directories that Jest should use to search for files in\n          \n          \n            \n              // roots: [\n          \n          \n            \n              //   \"<rootDir>\"\n          \n          \n            \n              // ],\n          \n          \n            \n            \n          \n          \n            \n              // Allows you to use a custom runner instead of Jest's default test runner\n          \n          \n            \n              // runner: \"jest-runner\",\n          \n          \n            \n            \n          \n          \n            \n              // The paths to modules that run some code to configure or set up the testing environment before each test\n          \n          \n            \n              // setupFiles: [],\n          \n          \n            \n            \n          \n          \n            \n              // A list of paths to modules that run some code to configure or set up the testing framework before each test\n          \n          \n            \n              // setupFilesAfterEnv: [],\n          \n          \n            \n            \n          \n          \n            \n              // A list of paths to snapshot serializer modules Jest should use for snapshot testing\n          \n          \n            \n              // snapshotSerializers: [],\n          \n          \n            \n            \n          \n          \n            \n              // The test environment that will be used for testing\n          \n          \n            \n              testEnvironment: \"node\",\n          \n          \n            \n            \n          \n          \n            \n              // Options that will be passed to the testEnvironment\n          \n          \n            \n              // testEnvironmentOptions: {},\n          \n          \n            \n            \n          \n          \n            \n              // Adds a location field to test results\n          \n          \n            \n              // testLocationInResults: false,\n          \n          \n            \n            \n          \n          \n            \n              // The glob patterns Jest uses to detect test files\n          \n          \n            \n              // testMatch: [\n          \n          \n            \n              //   \"**/__tests__/**/*.[jt]s?(x)\",\n          \n          \n            \n              //   \"**/?(*.)+(spec|test).[tj]s?(x)\"\n          \n          \n            \n              // ],\n          \n          \n            \n            \n          \n          \n            \n              // An array of regexp pattern strings that are matched against all test paths, matched tests are skipped\n          \n          \n            \n              // testPathIgnorePatterns: [\n          \n          \n            \n              //   \"/node_modules/\"\n          \n          \n            \n              // ],\n          \n          \n            \n            \n          \n          \n            \n              // The regexp pattern or array of patterns that Jest uses to detect test files\n          \n          \n            \n              // testRegex: [],\n          \n          \n            \n            \n          \n          \n            \n              // This option allows the use of a custom results processor\n          \n          \n            \n              // testResultsProcessor: null,\n          \n          \n            \n            \n          \n          \n            \n              // This option allows use of a custom test runner\n          \n          \n            \n              // testRunner: \"jasmine2\",\n          \n          \n            \n            \n          \n          \n            \n              // This option sets the URL for the jsdom environment. It is reflected in properties such as location.href\n          \n          \n            \n              // testURL: \"http://localhost\",\n          \n          \n            \n            \n          \n          \n            \n              // Setting this value to \"fake\" allows the use of fake timers for functions such as \"setTimeout\"\n          \n          \n            \n              // timers: \"real\",\n          \n          \n            \n            \n          \n          \n            \n              // A map from regular expressions to paths to transformers\n          \n          \n            \n              // transform: null,\n          \n          \n            \n            \n          \n          \n            \n              // An array of regexp pattern strings that are matched against all source file paths, matched files will skip transformation\n          \n          \n            \n              // transformIgnorePatterns: [\n          \n          \n            \n              //   \"/node_modules/\"\n          \n          \n            \n              // ],\n          \n          \n            \n            \n          \n          \n            \n              // An array of regexp pattern strings that are matched against all modules before the module loader will automatically return a mock for them\n          \n          \n            \n              // unmockedModulePathPatterns: undefined,\n          \n          \n            \n            \n          \n          \n            \n              // Indicates whether each individual test should be reported during the run\n          \n          \n            \n              // verbose: null,\n          \n          \n            \n            \n          \n          \n            \n              // An array of regexp patterns that are matched against all source file paths before re-running tests in watch mode\n          \n          \n            \n              // watchPathIgnorePatterns: [],\n          \n          \n            \n            \n          \n          \n            \n              // Whether to use watchman for file crawling\n          \n          \n            \n              // watchman: true,\n          \n          \n            \n            };\n          \n          \n            \n            module.exports = {\n          \n          \n            \n              clearMocks: true,\n          \n          \n            \n              coverageDirectory: \"coverage\",\n          \n          \n            \n              preset: \"ts-jest\",\n          \n          \n            \n              testEnvironment: \"node\",\n          \n          \n            \n            };", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423285020", "createdAt": "2020-05-11T20:00:36Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/jest.config.js", "diffHunk": "@@ -0,0 +1,189 @@\n+// For a detailed explanation regarding each configuration property, visit:\n+// https://jestjs.io/docs/en/configuration.html\n+\n+// eslint-disable-next-line no-undef\n+module.exports = {\n+  // All imported modules in your tests should be mocked automatically\n+  // automock: false,\n+\n+  // Stop running tests after `n` failures\n+  // bail: 0,\n+\n+  // Respect \"browser\" field in package.json when resolving modules\n+  // browser: false,\n+\n+  // The directory where Jest should store its cached dependency information\n+  // cacheDirectory: \"/tmp/jest_rs\",\n+\n+  // Automatically clear mock calls and instances between every test\n+  clearMocks: true,\n+\n+  // Indicates whether the coverage information should be collected while executing the test\n+  // collectCoverage: false,\n+\n+  // An array of glob patterns indicating a set of files for which coverage information should be collected\n+  // collectCoverageFrom: null,\n+\n+  // The directory where Jest should output its coverage files\n+  coverageDirectory: \"coverage\",\n+\n+  // An array of regexp pattern strings used to skip coverage collection\n+  // coveragePathIgnorePatterns: [\n+  //   \"/node_modules/\"\n+  // ],\n+\n+  // A list of reporter names that Jest uses when writing coverage reports\n+  // coverageReporters: [\n+  //   \"json\",\n+  //   \"text\",\n+  //   \"lcov\",\n+  //   \"clover\"\n+  // ],\n+\n+  // An object that configures minimum threshold enforcement for coverage results\n+  // coverageThreshold: null,\n+\n+  // A path to a custom dependency extractor\n+  // dependencyExtractor: null,\n+\n+  // Make calling deprecated APIs throw helpful error messages\n+  // errorOnDeprecated: false,\n+\n+  // Force coverage collection from ignored files using an array of glob patterns\n+  // forceCoverageMatch: [],\n+\n+  // A path to a module which exports an async function that is triggered once before all test suites\n+  // globalSetup: null,\n+\n+  // A path to a module which exports an async function that is triggered once after all test suites\n+  // globalTeardown: null,\n+\n+  // A set of global variables that need to be available in all test environments\n+  // globals: {},\n+\n+  // The maximum amount of workers used to run your tests. Can be specified as % or a number. E.g. maxWorkers: 10% will use 10% of your CPU amount + 1 as the maximum worker number. maxWorkers: 2 will use a maximum of 2 workers.\n+  // maxWorkers: \"50%\",\n+\n+  // An array of directory names to be searched recursively up from the requiring module's location\n+  // moduleDirectories: [\n+  //   \"node_modules\"\n+  // ],\n+\n+  // An array of file extensions your modules use\n+  // moduleFileExtensions: [\n+  //   \"js\",\n+  //   \"json\",\n+  //   \"jsx\",\n+  //   \"ts\",\n+  //   \"tsx\",\n+  //   \"node\"\n+  // ],\n+\n+  // A map from regular expressions to module names that allow to stub out resources with a single module\n+  // moduleNameMapper: {},\n+\n+  // An array of regexp pattern strings, matched against all module paths before considered 'visible' to the module loader\n+  // modulePathIgnorePatterns: [],\n+\n+  // Activates notifications for test results\n+  // notify: false,\n+\n+  // An enum that specifies notification mode. Requires { notify: true }\n+  // notifyMode: \"failure-change\",\n+\n+  // A preset that is used as a base for Jest's configuration\n+  preset: \"ts-jest\",\n+\n+  // Run tests from one or more projects\n+  // projects: null,\n+\n+  // Use this configuration option to add custom reporters to Jest\n+  // reporters: undefined,\n+\n+  // Automatically reset mock state between every test\n+  // resetMocks: false,\n+\n+  // Reset the module registry before running each individual test\n+  // resetModules: false,\n+\n+  // A path to a custom resolver\n+  // resolver: null,\n+\n+  // Automatically restore mock state between every test\n+  // restoreMocks: false,\n+\n+  // The root directory that Jest should scan for tests and modules within\n+  // rootDir: null,\n+\n+  // A list of paths to directories that Jest should use to search for files in\n+  // roots: [\n+  //   \"<rootDir>\"\n+  // ],\n+\n+  // Allows you to use a custom runner instead of Jest's default test runner\n+  // runner: \"jest-runner\",\n+\n+  // The paths to modules that run some code to configure or set up the testing environment before each test\n+  // setupFiles: [],\n+\n+  // A list of paths to modules that run some code to configure or set up the testing framework before each test\n+  // setupFilesAfterEnv: [],\n+\n+  // A list of paths to snapshot serializer modules Jest should use for snapshot testing\n+  // snapshotSerializers: [],\n+\n+  // The test environment that will be used for testing\n+  testEnvironment: \"node\",\n+\n+  // Options that will be passed to the testEnvironment\n+  // testEnvironmentOptions: {},\n+\n+  // Adds a location field to test results\n+  // testLocationInResults: false,\n+\n+  // The glob patterns Jest uses to detect test files\n+  // testMatch: [\n+  //   \"**/__tests__/**/*.[jt]s?(x)\",\n+  //   \"**/?(*.)+(spec|test).[tj]s?(x)\"\n+  // ],\n+\n+  // An array of regexp pattern strings that are matched against all test paths, matched tests are skipped\n+  // testPathIgnorePatterns: [\n+  //   \"/node_modules/\"\n+  // ],\n+\n+  // The regexp pattern or array of patterns that Jest uses to detect test files\n+  // testRegex: [],\n+\n+  // This option allows the use of a custom results processor\n+  // testResultsProcessor: null,\n+\n+  // This option allows use of a custom test runner\n+  // testRunner: \"jasmine2\",\n+\n+  // This option sets the URL for the jsdom environment. It is reflected in properties such as location.href\n+  // testURL: \"http://localhost\",\n+\n+  // Setting this value to \"fake\" allows the use of fake timers for functions such as \"setTimeout\"\n+  // timers: \"real\",\n+\n+  // A map from regular expressions to paths to transformers\n+  // transform: null,\n+\n+  // An array of regexp pattern strings that are matched against all source file paths, matched files will skip transformation\n+  // transformIgnorePatterns: [\n+  //   \"/node_modules/\"\n+  // ],\n+\n+  // An array of regexp pattern strings that are matched against all modules before the module loader will automatically return a mock for them\n+  // unmockedModulePathPatterns: undefined,\n+\n+  // Indicates whether each individual test should be reported during the run\n+  // verbose: null,\n+\n+  // An array of regexp patterns that are matched against all source file paths before re-running tests in watch mode\n+  // watchPathIgnorePatterns: [],\n+\n+  // Whether to use watchman for file crawling\n+  // watchman: true,\n+};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b9ec7e2b7cfa2de4ae9b0aecadd095af90dc2b9"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTk4MTE0OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/package.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDowOTo0MFrOGTri8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMzowMjoyOFrOGTwVDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4OTU4Ng==", "bodyText": "This should be fine for now, if this gets moved to the npm or github registry down the road, it might be good to match the package name.", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423289586", "createdAt": "2020-05-11T20:09:40Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.core/js/package.json", "diffHunk": "@@ -44,6 +45,7 @@\n     \"lodash\": \"4.17.15\",\n     \"luxon\": \"1.16.0\",\n     \"material-ui-pickers\": \"2.2.4\",\n+    \"oeq\": \"file:../../../../../oeq-ts-rest-api\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b9ec7e2b7cfa2de4ae9b0aecadd095af90dc2b9"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2Nzk0OQ==", "bodyText": "Good plan. Done. ;)", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423367949", "createdAt": "2020-05-11T23:02:28Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/package.json", "diffHunk": "@@ -44,6 +45,7 @@\n     \"lodash\": \"4.17.15\",\n     \"luxon\": \"1.16.0\",\n     \"material-ui-pickers\": \"2.2.4\",\n+    \"oeq\": \"file:../../../../../oeq-ts-rest-api\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4OTU4Ng=="}, "originalCommit": {"oid": "1b9ec7e2b7cfa2de4ae9b0aecadd095af90dc2b9"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTk4NTM2OnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/.gitignore", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoxMDo0OFrOGTrlgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMjowMjoxN1rOGTu9vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5MDI0Mw==", "bodyText": "Is this file included as an intermediate step to prep for moving this to another repo?", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423290243", "createdAt": "2020-05-11T20:10:48Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/.gitignore", "diffHunk": "@@ -0,0 +1,5 @@\n+*.log\n+.DS_Store\n+node_modules\n+dist\n+.vscode", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b9ec7e2b7cfa2de4ae9b0aecadd095af90dc2b9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM0MDUzOA==", "bodyText": "That's correct. There's a couple of top level files that I've left there in prep for when it goes stand-alone (including things like the Husky set-up).", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423340538", "createdAt": "2020-05-11T21:50:23Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/.gitignore", "diffHunk": "@@ -0,0 +1,5 @@\n+*.log\n+.DS_Store\n+node_modules\n+dist\n+.vscode", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5MDI0Mw=="}, "originalCommit": {"oid": "1b9ec7e2b7cfa2de4ae9b0aecadd095af90dc2b9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM0NTU5Ng==", "bodyText": "Thanks! That makes sense", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423345596", "createdAt": "2020-05-11T22:02:17Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/.gitignore", "diffHunk": "@@ -0,0 +1,5 @@\n+*.log\n+.DS_Store\n+node_modules\n+dist\n+.vscode", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5MDI0Mw=="}, "originalCommit": {"oid": "1b9ec7e2b7cfa2de4ae9b0aecadd095af90dc2b9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTk5MDc3OnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/test/TestConfig.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoxMjoyOFrOGTrozQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoxMjoyOFrOGTrozQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5MTA4NQ==", "bodyText": "Nice to have, a newline at end of file\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            export const PASSWORD = 'abc';\n          \n          \n            \n            export const PASSWORD = 'abc';", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423291085", "createdAt": "2020-05-11T20:12:28Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/test/TestConfig.ts", "diffHunk": "@@ -0,0 +1,3 @@\n+export const API_PATH = 'http://localhost:8080/rest/api';\n+export const USERNAME = 'TLE_ADMINISTRATOR';\n+export const PASSWORD = 'abc';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b9ec7e2b7cfa2de4ae9b0aecadd095af90dc2b9"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTk5MTg3OnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/src/index.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoxMjo0NVrOGTrpbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoxMjo0NVrOGTrpbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5MTI0Nw==", "bodyText": "Nice to have, a newline at the end of the file\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            export * as Settings from './Settings';\n          \n          \n            \n            export * as Settings from './Settings';", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423291247", "createdAt": "2020-05-11T20:12:45Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/src/index.ts", "diffHunk": "@@ -0,0 +1,4 @@\n+export * as Auth from './Auth';\n+export * as LegacyContent from './LegacyContent';\n+export * as Errors from './Errors';\n+export * as Settings from './Settings';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b9ec7e2b7cfa2de4ae9b0aecadd095af90dc2b9"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzI1MTk5OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/SettingsPage.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjozMTowN1rOGT33JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzo1MzowMFrOGT6aCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5MTM2NQ==", "bodyText": "Does this still need to be here? Or is it just a placeholder in case we need CancelTokens in the future?", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423491365", "createdAt": "2020-05-12T06:31:07Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/SettingsPage.tsx", "diffHunk": "@@ -81,22 +80,22 @@ const SettingsPage = ({ refreshUser, updateTemplate }: SettingsPageProps) => {\n \n   useEffect(() => {\n     // Use a flag to prevent setting state when component is being unmounted\n-    const cancelToken = axios.CancelToken.source();\n-    fetchSettings(cancelToken.token)\n+    let cleanupTriggered = false;\n+    fetchSettings()\n       .then((settings) => {\n-        setSettingGroups(groupMap(settings));\n-        setLoading(false);\n+        if (!cleanupTriggered) {\n+          setSettingGroups(groupMap(settings));\n+          setLoading(false);\n+        }\n       })\n       .catch((error) => {\n-        if (axios.isCancel(error)) {\n-          return; // Request was cancelled\n-        }\n         handleError(error);\n         setLoading(false);\n       });\n \n     return () => {\n-      cancelToken.cancel();\n+      cleanupTriggered = true;\n+      // cancelToken.cancel();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6128cabe7d0e15c406a2e9460fe07a033e6a3145"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUzMzA2NA==", "bodyText": "Yup, that's just been missed. Will address.", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423533064", "createdAt": "2020-05-12T07:53:00Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/SettingsPage.tsx", "diffHunk": "@@ -81,22 +80,22 @@ const SettingsPage = ({ refreshUser, updateTemplate }: SettingsPageProps) => {\n \n   useEffect(() => {\n     // Use a flag to prevent setting state when component is being unmounted\n-    const cancelToken = axios.CancelToken.source();\n-    fetchSettings(cancelToken.token)\n+    let cleanupTriggered = false;\n+    fetchSettings()\n       .then((settings) => {\n-        setSettingGroups(groupMap(settings));\n-        setLoading(false);\n+        if (!cleanupTriggered) {\n+          setSettingGroups(groupMap(settings));\n+          setLoading(false);\n+        }\n       })\n       .catch((error) => {\n-        if (axios.isCancel(error)) {\n-          return; // Request was cancelled\n-        }\n         handleError(error);\n         setLoading(false);\n       });\n \n     return () => {\n-      cancelToken.cancel();\n+      cleanupTriggered = true;\n+      // cancelToken.cancel();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5MTM2NQ=="}, "originalCommit": {"oid": "6128cabe7d0e15c406a2e9460fe07a033e6a3145"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzI1OTk0OnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjozMzo1OFrOGT38Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjozMzo1OFrOGT38Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5MjYxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This project was bootstrapped with [TSDX](https://github.com/jaredpalmer/tsdx) but the subsequently\n          \n          \n            \n            This project was bootstrapped with [TSDX](https://github.com/jaredpalmer/tsdx) but then subsequently", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423492614", "createdAt": "2020-05-12T06:33:58Z", "author": {"login": "SammyIsConfused"}, "path": "oeq-ts-rest-api/README.md", "diffHunk": "@@ -0,0 +1,72 @@\n+# openEQUELLA Typescript REST API SDK\n+\n+This module provides a code generated SDK for access to the openEQUELLA REST API.\n+\n+## Local Development\n+\n+This project was bootstrapped with [TSDX](https://github.com/jaredpalmer/tsdx) but the subsequently", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6128cabe7d0e15c406a2e9460fe07a033e6a3145"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzI2MTQzOnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjozNDozMVrOGT383A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjozNDozMVrOGT383A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5MjgyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            special logger for you convenience. Error messages are pretty printed and formatted for\n          \n          \n            \n            special logger for your convenience. Error messages are pretty printed and formatted for", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423492828", "createdAt": "2020-05-12T06:34:31Z", "author": {"login": "SammyIsConfused"}, "path": "oeq-ts-rest-api/README.md", "diffHunk": "@@ -0,0 +1,72 @@\n+# openEQUELLA Typescript REST API SDK\n+\n+This module provides a code generated SDK for access to the openEQUELLA REST API.\n+\n+## Local Development\n+\n+This project was bootstrapped with [TSDX](https://github.com/jaredpalmer/tsdx) but the subsequently\n+tweaked (especially for Jest and Eslint).\n+\n+Below is a list of commands you may find useful.\n+\n+### `npm start` or `yarn start`\n+\n+Runs the project in development/watch mode. Your project will be rebuilt upon changes. TSDX has a\n+special logger for you convenience. Error messages are pretty printed and formatted for", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6128cabe7d0e15c406a2e9460fe07a033e6a3145"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzI2NzQyOnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjozNjo0NFrOGT4AjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjozNjo0NFrOGT4AjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5Mzc3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Ideally the we could just write our own codegen from the models. However, this has a couple of issues\n          \n          \n            \n            Ideally then, we could just write our own codegen from the models. However, this has a couple of issues", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423493772", "createdAt": "2020-05-12T06:36:44Z", "author": {"login": "SammyIsConfused"}, "path": "oeq-ts-rest-api/README.md", "diffHunk": "@@ -0,0 +1,72 @@\n+# openEQUELLA Typescript REST API SDK\n+\n+This module provides a code generated SDK for access to the openEQUELLA REST API.\n+\n+## Local Development\n+\n+This project was bootstrapped with [TSDX](https://github.com/jaredpalmer/tsdx) but the subsequently\n+tweaked (especially for Jest and Eslint).\n+\n+Below is a list of commands you may find useful.\n+\n+### `npm start` or `yarn start`\n+\n+Runs the project in development/watch mode. Your project will be rebuilt upon changes. TSDX has a\n+special logger for you convenience. Error messages are pretty printed and formatted for\n+compatibility VS Code's Problems tab.\n+\n+![npm start example](https://user-images.githubusercontent.com/4060187/52168303-574d3a00-26f6-11e9-9f3b-71dbec9ebfcb.gif)\n+\n+Your library will be rebuilt if you make edits.\n+\n+### `npm run build` or `yarn build`\n+\n+Bundles the package to the `dist` folder.  The package is optimized and bundled with Rollup into\n+multiple formats (CommonJS, UMD, and ES Module).\n+\n+![npm build example](https://user-images.githubusercontent.com/4060187/52168322-a98e5b00-26f6-11e9-8cf6-222d716b75ef.gif)\n+\n+## Implementation Considerations\n+\n+First, why was this done?\n+\n+1. To reduce coupling between the UI layers and the API calls; so as\n+2. To ease testing of the UI components, and ease testing of the API interactions; and\n+3. Provide a unit of stand-alone code that could easily be developed on and tested.\n+\n+When approaching this a few items were considered:\n+\n+1. Using codegen from the oEQ generated swagger.yml; and\n+2. Doing codegen just for the models\n+\n+However, both of these had issues, and so in the end the code has simply been hand rolled. Here is\n+an outline of the issues faced with these to help any future efforts.\n+\n+### Codegen from oEQ's swagger.yml\n+\n+First and foremost, there were some issues with generating from the current swagger.yml - more so\n+with the current openapi generator outright failing. But the generated code from such a tool is\n+rather simplistic and doesn't really reduce coupling between the implementation details of the API\n+interaction (such as, use of Axios) and so results in limited value.\n+\n+Further, some of the oEQ endpoints have been written code first, and so the YAML and the resulting\n+API is not necessarily that user friendly - and definitely lacks documentation.\n+\n+### Codegen just for the models\n+\n+This would be a great win, but the swagger/openapi codgen tools don't really provide a means to\n+do this. But even if they did, again due to the way the oEQ API has been built over time (very much\n+a code first approach) the resultant models would not necessarily be ideal - especially with a strong\n+prevalence of the use of maps. (Maps are not really directly supported via swagger/openapi so you\n+end up with some work arounds.)\n+\n+Ideally the we could just write our own codegen from the models. However, this has a couple of issues", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6128cabe7d0e15c406a2e9460fe07a033e6a3145"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzI2ODQwOnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjozNzowNlrOGT4BLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjozNzowNlrOGT4BLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5MzkzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            on it's own:\n          \n          \n            \n            on its own:", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423493935", "createdAt": "2020-05-12T06:37:06Z", "author": {"login": "SammyIsConfused"}, "path": "oeq-ts-rest-api/README.md", "diffHunk": "@@ -0,0 +1,72 @@\n+# openEQUELLA Typescript REST API SDK\n+\n+This module provides a code generated SDK for access to the openEQUELLA REST API.\n+\n+## Local Development\n+\n+This project was bootstrapped with [TSDX](https://github.com/jaredpalmer/tsdx) but the subsequently\n+tweaked (especially for Jest and Eslint).\n+\n+Below is a list of commands you may find useful.\n+\n+### `npm start` or `yarn start`\n+\n+Runs the project in development/watch mode. Your project will be rebuilt upon changes. TSDX has a\n+special logger for you convenience. Error messages are pretty printed and formatted for\n+compatibility VS Code's Problems tab.\n+\n+![npm start example](https://user-images.githubusercontent.com/4060187/52168303-574d3a00-26f6-11e9-9f3b-71dbec9ebfcb.gif)\n+\n+Your library will be rebuilt if you make edits.\n+\n+### `npm run build` or `yarn build`\n+\n+Bundles the package to the `dist` folder.  The package is optimized and bundled with Rollup into\n+multiple formats (CommonJS, UMD, and ES Module).\n+\n+![npm build example](https://user-images.githubusercontent.com/4060187/52168322-a98e5b00-26f6-11e9-8cf6-222d716b75ef.gif)\n+\n+## Implementation Considerations\n+\n+First, why was this done?\n+\n+1. To reduce coupling between the UI layers and the API calls; so as\n+2. To ease testing of the UI components, and ease testing of the API interactions; and\n+3. Provide a unit of stand-alone code that could easily be developed on and tested.\n+\n+When approaching this a few items were considered:\n+\n+1. Using codegen from the oEQ generated swagger.yml; and\n+2. Doing codegen just for the models\n+\n+However, both of these had issues, and so in the end the code has simply been hand rolled. Here is\n+an outline of the issues faced with these to help any future efforts.\n+\n+### Codegen from oEQ's swagger.yml\n+\n+First and foremost, there were some issues with generating from the current swagger.yml - more so\n+with the current openapi generator outright failing. But the generated code from such a tool is\n+rather simplistic and doesn't really reduce coupling between the implementation details of the API\n+interaction (such as, use of Axios) and so results in limited value.\n+\n+Further, some of the oEQ endpoints have been written code first, and so the YAML and the resulting\n+API is not necessarily that user friendly - and definitely lacks documentation.\n+\n+### Codegen just for the models\n+\n+This would be a great win, but the swagger/openapi codgen tools don't really provide a means to\n+do this. But even if they did, again due to the way the oEQ API has been built over time (very much\n+a code first approach) the resultant models would not necessarily be ideal - especially with a strong\n+prevalence of the use of maps. (Maps are not really directly supported via swagger/openapi so you\n+end up with some work arounds.)\n+\n+Ideally the we could just write our own codegen from the models. However, this has a couple of issues\n+on it's own:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6128cabe7d0e15c406a2e9460fe07a033e6a3145"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzI3MzY4OnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjozODo1OFrOGT4Egg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjozODo1OFrOGT4Egg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5NDc4Ng==", "bodyText": "Not a suggestion, just a comment this README is really great. Gives lots of insight into not just how this works, but also how and why you got there.", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423494786", "createdAt": "2020-05-12T06:38:58Z", "author": {"login": "SammyIsConfused"}, "path": "oeq-ts-rest-api/README.md", "diffHunk": "@@ -0,0 +1,72 @@\n+# openEQUELLA Typescript REST API SDK", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6128cabe7d0e15c406a2e9460fe07a033e6a3145"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzI4OTI1OnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/test/auth.test.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjo0NDoyNFrOGT4OCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjo0NDoyNFrOGT4OCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5NzIyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            test(\"That having login, we're able to properly log out.\", () =>\n          \n          \n            \n            test(\"That having logged in, we're able to properly log out.\", () =>", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423497227", "createdAt": "2020-05-12T06:44:24Z", "author": {"login": "SammyIsConfused"}, "path": "oeq-ts-rest-api/test/auth.test.ts", "diffHunk": "@@ -0,0 +1,33 @@\n+import * as OEQ from '../src';\n+import * as TC from './TestConfig';\n+\n+beforeEach(() => OEQ.Auth.logout(TC.API_PATH, true));\n+\n+test(\"That we're able to login\", () =>\n+  OEQ.Auth.login(TC.API_PATH, TC.USERNAME, TC.PASSWORD)\n+    .then((sessionid: string | undefined) => expect(sessionid).toBeTruthy())\n+    .then(() => OEQ.LegacyContent.getCurrentUserDetails(TC.API_PATH))\n+    .then((userDetails: OEQ.LegacyContent.CurrentUserDetails) =>\n+      expect(userDetails.id).toBe(TC.USERNAME)\n+    ));\n+\n+test('An attempt to login with bad credentials fails', () => {\n+  expect.assertions(1);\n+  return OEQ.Auth.login(TC.API_PATH, 'fakeusername', 'fakepassword').catch(\n+    (error: OEQ.Errors.ApiError) => {\n+      expect(error.status).toBe(401);\n+    }\n+  );\n+});\n+\n+test(\"That having login, we're able to properly log out.\", () =>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6128cabe7d0e15c406a2e9460fe07a033e6a3145"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzI5NDAxOnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/test/settings.test.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjo0NjowMFrOGT4Q4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjo0NjowMFrOGT4Q4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5Nzk1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            test('Able to retrieve general settings', () =>\n          \n          \n            \n            test('That we're able to retrieve general settings', () =>\n          \n      \n    \n    \n  \n\nJust for consistency with above.", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423497953", "createdAt": "2020-05-12T06:46:00Z", "author": {"login": "SammyIsConfused"}, "path": "oeq-ts-rest-api/test/settings.test.ts", "diffHunk": "@@ -0,0 +1,40 @@\n+import * as OEQ from '../src';\n+import * as TC from './TestConfig';\n+import { GeneralSetting, UISettings } from '../src/Settings';\n+\n+beforeAll(() => OEQ.Auth.login(TC.API_PATH, TC.USERNAME, TC.PASSWORD));\n+\n+afterAll(() => OEQ.Auth.logout(TC.API_PATH, true));\n+\n+test('Able to retrieve general settings', () =>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6128cabe7d0e15c406a2e9460fe07a033e6a3145"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzMwMTY2OnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/jest.config.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjo0ODo1M1rOGT4VzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODowMDozOFrOGT6seQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5OTIxMg==", "bodyText": "I know we were using jsdom before now - is there any reason for the change?", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423499212", "createdAt": "2020-05-12T06:48:53Z", "author": {"login": "SammyIsConfused"}, "path": "oeq-ts-rest-api/jest.config.js", "diffHunk": "@@ -0,0 +1,10 @@\n+// For a detailed explanation regarding each configuration property, visit:\n+// https://jestjs.io/docs/en/configuration.html\n+\n+// eslint-disable-next-line no-undef\n+module.exports = {\n+  clearMocks: true,\n+  coverageDirectory: \"coverage\",\n+  preset: \"ts-jest\",\n+  testEnvironment: \"node\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6128cabe7d0e15c406a2e9460fe07a033e6a3145"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUzNzc4NQ==", "bodyText": "Yup! Trying to get axios and cookies working under Jest was a real big pain. This fixes half the issues, and seeing this is a library for the back-end we have no need for a surrogate DOM to get in the way.", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423537785", "createdAt": "2020-05-12T08:00:38Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/jest.config.js", "diffHunk": "@@ -0,0 +1,10 @@\n+// For a detailed explanation regarding each configuration property, visit:\n+// https://jestjs.io/docs/en/configuration.html\n+\n+// eslint-disable-next-line no-undef\n+module.exports = {\n+  clearMocks: true,\n+  coverageDirectory: \"coverage\",\n+  preset: \"ts-jest\",\n+  testEnvironment: \"node\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5OTIxMg=="}, "originalCommit": {"oid": "6128cabe7d0e15c406a2e9460fe07a033e6a3145"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzMwOTQ2OnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/package.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjo1MTo1NFrOGT4a5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODowMToxMlrOGT6tuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMDUxOQ==", "bodyText": "Just curious - in future releases, part of the process of progressing the version will be to bump this number up to match the same on the backend? Also, is this documented anywhere?", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423500519", "createdAt": "2020-05-12T06:51:54Z", "author": {"login": "SammyIsConfused"}, "path": "oeq-ts-rest-api/package.json", "diffHunk": "@@ -0,0 +1,49 @@\n+{\n+  \"name\": \"@openequella/rest-api-client\",\n+  \"version\": \"2020.2.0-Alpha\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6128cabe7d0e15c406a2e9460fe07a033e6a3145"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUzODEwNw==", "bodyText": "That's the current tentative idea. This will come more into play when we split out into it's own repo. Consider this kind of a place holder for now.", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423538107", "createdAt": "2020-05-12T08:01:12Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/package.json", "diffHunk": "@@ -0,0 +1,49 @@\n+{\n+  \"name\": \"@openequella/rest-api-client\",\n+  \"version\": \"2020.2.0-Alpha\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMDUxOQ=="}, "originalCommit": {"oid": "6128cabe7d0e15c406a2e9460fe07a033e6a3145"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzMxMzM3OnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/package.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjo1MzoxN1rOGT4dYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODowMTo1NlrOGT6vSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMTE1Mw==", "bodyText": "is there some sort of eslint --fix command we could add?", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423501153", "createdAt": "2020-05-12T06:53:17Z", "author": {"login": "SammyIsConfused"}, "path": "oeq-ts-rest-api/package.json", "diffHunk": "@@ -0,0 +1,49 @@\n+{\n+  \"name\": \"@openequella/rest-api-client\",\n+  \"version\": \"2020.2.0-Alpha\",\n+  \"license\": \"Apache-2.0\",\n+  \"main\": \"dist/index.js\",\n+  \"typings\": \"dist/index.d.ts\",\n+  \"files\": [\n+    \"dist\",\n+    \"src\"\n+  ],\n+  \"engines\": {\n+    \"node\": \">=10\"\n+  },\n+  \"scripts\": {\n+    \"start\": \"tsdx watch\",\n+    \"build\": \"tsdx build\",\n+    \"test\": \"jest\",\n+    \"lint\": \"eslint \\\"src/**/*.{ts,tsx}\\\" \\\"test/**/*.{ts,tsx}\\\"\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6128cabe7d0e15c406a2e9460fe07a033e6a3145"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUzODUwNw==", "bodyText": "I've added it, but there is actually a lot of work still to do in this area - e.g. bring in the eslint prettier plugin, and also match configurations to core oEQ. That's a future.", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423538507", "createdAt": "2020-05-12T08:01:56Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/package.json", "diffHunk": "@@ -0,0 +1,49 @@\n+{\n+  \"name\": \"@openequella/rest-api-client\",\n+  \"version\": \"2020.2.0-Alpha\",\n+  \"license\": \"Apache-2.0\",\n+  \"main\": \"dist/index.js\",\n+  \"typings\": \"dist/index.d.ts\",\n+  \"files\": [\n+    \"dist\",\n+    \"src\"\n+  ],\n+  \"engines\": {\n+    \"node\": \">=10\"\n+  },\n+  \"scripts\": {\n+    \"start\": \"tsdx watch\",\n+    \"build\": \"tsdx build\",\n+    \"test\": \"jest\",\n+    \"lint\": \"eslint \\\"src/**/*.{ts,tsx}\\\" \\\"test/**/*.{ts,tsx}\\\"\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMTE1Mw=="}, "originalCommit": {"oid": "6128cabe7d0e15c406a2e9460fe07a033e6a3145"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDY5MjU2OnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/.eslintrc.js", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMTo0NDoxOVrOGUaDbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzozMDozMFrOGUxq1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA1MTU2NA==", "bodyText": "Are these globals used?", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r424051564", "createdAt": "2020-05-12T21:44:19Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/.eslintrc.js", "diffHunk": "@@ -0,0 +1,23 @@\n+module.exports = {\n+  root: true,\n+  env: {\n+    browser: true,\n+    es6: true,\n+  },\n+  extends: [\n+    'eslint:recommended',\n+    'plugin:@typescript-eslint/eslint-recommended',\n+    'plugin:@typescript-eslint/recommended',\n+  ],\n+  globals: {\n+    Atomics: 'readonly',\n+    SharedArrayBuffer: 'readonly',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9d035ccb3a6a0932216e6605fd107412322dac8"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5NTc5NA==", "bodyText": "These lines just came from eslint --init. Should I remove?\n(Ultimately I'm going to match the eslint/prettier setup with that done in core oEQ. Although may keep the config external to package.json.)", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r424095794", "createdAt": "2020-05-12T23:45:25Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/.eslintrc.js", "diffHunk": "@@ -0,0 +1,23 @@\n+module.exports = {\n+  root: true,\n+  env: {\n+    browser: true,\n+    es6: true,\n+  },\n+  extends: [\n+    'eslint:recommended',\n+    'plugin:@typescript-eslint/eslint-recommended',\n+    'plugin:@typescript-eslint/recommended',\n+  ],\n+  globals: {\n+    Atomics: 'readonly',\n+    SharedArrayBuffer: 'readonly',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA1MTU2NA=="}, "originalCommit": {"oid": "d9d035ccb3a6a0932216e6605fd107412322dac8"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQzODQ4NA==", "bodyText": "I think we can keep them for now, I am a bit surprised eslint included them, but if they're default they shouldn't hurt.", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r424438484", "createdAt": "2020-05-13T13:30:30Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/.eslintrc.js", "diffHunk": "@@ -0,0 +1,23 @@\n+module.exports = {\n+  root: true,\n+  env: {\n+    browser: true,\n+    es6: true,\n+  },\n+  extends: [\n+    'eslint:recommended',\n+    'plugin:@typescript-eslint/eslint-recommended',\n+    'plugin:@typescript-eslint/recommended',\n+  ],\n+  globals: {\n+    Atomics: 'readonly',\n+    SharedArrayBuffer: 'readonly',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA1MTU2NA=="}, "originalCommit": {"oid": "d9d035ccb3a6a0932216e6605fd107412322dac8"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDczMjIxOnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/package.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMTo1Nzo0NFrOGUabyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMjozMjowNFrOGUfZKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA1NzgwMw==", "bodyText": "For libraries is can be nice to allow version ranges for dependencies, so down stream, npm has more flexibility resolving version conflicts.\nRenovate has a good write up on some of the trade offs with this: https://docs.renovatebot.com/dependency-pinning/#why-use-ranges", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r424057803", "createdAt": "2020-05-12T21:57:44Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/package.json", "diffHunk": "@@ -0,0 +1,58 @@\n+{\n+  \"name\": \"@openequella/rest-api-client\",\n+  \"version\": \"2020.2.0-Alpha\",\n+  \"license\": \"Apache-2.0\",\n+  \"main\": \"dist/index.js\",\n+  \"typings\": \"dist/index.d.ts\",\n+  \"files\": [\n+    \"dist\",\n+    \"src\"\n+  ],\n+  \"engines\": {\n+    \"node\": \">=10\"\n+  },\n+  \"scripts\": {\n+    \"start\": \"rollup --config --watch\",\n+    \"build\": \"rollup --config\",\n+    \"test\": \"jest\",\n+    \"lint\": \"eslint \\\"src/**/*.{ts,tsx}\\\" \\\"test/**/*.{ts,tsx}\\\"\",\n+    \"format\": \"eslint --fix \\\"src/**/*.{ts,tsx}\\\" \\\"test/**/*.{ts,tsx}\\\"\",\n+    \"prepare\": \"rollup --config\"\n+  },\n+  \"peerDependencies\": {},\n+  \"husky\": {\n+    \"hooks\": {\n+      \"pre-commit\": \"npm run lint\"\n+    }\n+  },\n+  \"prettier\": {\n+    \"printWidth\": 80,\n+    \"semi\": true,\n+    \"singleQuote\": true,\n+    \"trailingComma\": \"es5\"\n+  },\n+  \"dependencies\": {\n+    \"axios\": \"0.19.2\",\n+    \"axios-cookiejar-support\": \"1.0.0\",\n+    \"tough-cookie\": \"4.0.0\",\n+    \"typescript-is\": \"0.16.0\"\n+  },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9d035ccb3a6a0932216e6605fd107412322dac8"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEzOTA1MA==", "bodyText": "Okay, I'll have a read. Might have to save for a future todo for now though.", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r424139050", "createdAt": "2020-05-13T02:32:04Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/package.json", "diffHunk": "@@ -0,0 +1,58 @@\n+{\n+  \"name\": \"@openequella/rest-api-client\",\n+  \"version\": \"2020.2.0-Alpha\",\n+  \"license\": \"Apache-2.0\",\n+  \"main\": \"dist/index.js\",\n+  \"typings\": \"dist/index.d.ts\",\n+  \"files\": [\n+    \"dist\",\n+    \"src\"\n+  ],\n+  \"engines\": {\n+    \"node\": \">=10\"\n+  },\n+  \"scripts\": {\n+    \"start\": \"rollup --config --watch\",\n+    \"build\": \"rollup --config\",\n+    \"test\": \"jest\",\n+    \"lint\": \"eslint \\\"src/**/*.{ts,tsx}\\\" \\\"test/**/*.{ts,tsx}\\\"\",\n+    \"format\": \"eslint --fix \\\"src/**/*.{ts,tsx}\\\" \\\"test/**/*.{ts,tsx}\\\"\",\n+    \"prepare\": \"rollup --config\"\n+  },\n+  \"peerDependencies\": {},\n+  \"husky\": {\n+    \"hooks\": {\n+      \"pre-commit\": \"npm run lint\"\n+    }\n+  },\n+  \"prettier\": {\n+    \"printWidth\": 80,\n+    \"semi\": true,\n+    \"singleQuote\": true,\n+    \"trailingComma\": \"es5\"\n+  },\n+  \"dependencies\": {\n+    \"axios\": \"0.19.2\",\n+    \"axios-cookiejar-support\": \"1.0.0\",\n+    \"tough-cookie\": \"4.0.0\",\n+    \"typescript-is\": \"0.16.0\"\n+  },", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA1NzgwMw=="}, "originalCommit": {"oid": "d9d035ccb3a6a0932216e6605fd107412322dac8"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDkxNTU4OnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/rollup.config.js", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzoxNzoxMFrOGUcNrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMToyMzowNVrOGUeUVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4Njk1OQ==", "bodyText": "ESM build is great! \ud83d\udc4d\nA lot of build tools look for a main entry in package.json which usually CJS format.\nIt might be worth having both formats?\nhttps://babeljs.io/blog/2018/06/26/on-consuming-and-publishing-es2015+-packages talks a bit more about the formats.", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r424086959", "createdAt": "2020-05-12T23:17:10Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/rollup.config.js", "diffHunk": "@@ -0,0 +1,20 @@\n+import commonjs from '@rollup/plugin-commonjs';\n+import json from '@rollup/plugin-json';\n+import resolve from '@rollup/plugin-node-resolve';\n+import ttypescript from 'ttypescript';\n+import typescript from '@rollup/plugin-typescript';\n+\n+export default {\n+  input: 'src/index.ts',\n+  output: {\n+    dir: 'dist',\n+    format: 'es',\n+    sourcemap: true,\n+  },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9d035ccb3a6a0932216e6605fd107412322dac8"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5MzY0MQ==", "bodyText": "Ah!! I wonder if that is my current issue with Jest. I'll add commonJS output in and try.", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r424093641", "createdAt": "2020-05-12T23:38:31Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/rollup.config.js", "diffHunk": "@@ -0,0 +1,20 @@\n+import commonjs from '@rollup/plugin-commonjs';\n+import json from '@rollup/plugin-json';\n+import resolve from '@rollup/plugin-node-resolve';\n+import ttypescript from 'ttypescript';\n+import typescript from '@rollup/plugin-typescript';\n+\n+export default {\n+  input: 'src/index.ts',\n+  output: {\n+    dir: 'dist',\n+    format: 'es',\n+    sourcemap: true,\n+  },", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4Njk1OQ=="}, "originalCommit": {"oid": "d9d035ccb3a6a0932216e6605fd107412322dac8"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEyMTQzMQ==", "bodyText": "Aha! That was it. I've reworked the build to produce both, and in turn have now made Jest much happier. \ud83d\udc4d", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r424121431", "createdAt": "2020-05-13T01:23:05Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/rollup.config.js", "diffHunk": "@@ -0,0 +1,20 @@\n+import commonjs from '@rollup/plugin-commonjs';\n+import json from '@rollup/plugin-json';\n+import resolve from '@rollup/plugin-node-resolve';\n+import ttypescript from 'ttypescript';\n+import typescript from '@rollup/plugin-typescript';\n+\n+export default {\n+  input: 'src/index.ts',\n+  output: {\n+    dir: 'dist',\n+    format: 'es',\n+    sourcemap: true,\n+  },", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4Njk1OQ=="}, "originalCommit": {"oid": "d9d035ccb3a6a0932216e6605fd107412322dac8"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDkxNzE3OnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/src/LegacyContent.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzoxNzo1OFrOGUcOtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMToyMzozOVrOGUeU8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4NzIyMg==", "bodyText": "newline at end of file\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              );\n          \n          \n            \n              );", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r424087222", "createdAt": "2020-05-12T23:17:58Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/src/LegacyContent.ts", "diffHunk": "@@ -0,0 +1,43 @@\n+import { GET } from './AxiosInstance';\n+import { is } from 'typescript-is';\n+\n+export interface ItemCounts {\n+  tasks: number;\n+  notifications: number;\n+}\n+\n+export interface MenuItem {\n+  title: string;\n+  href?: string;\n+  systemIcon?: string;\n+  route?: string;\n+  iconUrl?: string;\n+  newWindow: boolean;\n+}\n+\n+export interface CurrentUserDetails {\n+  id: string;\n+  username: string;\n+  firstName: string;\n+  lastName: string;\n+  emailAddress?: string;\n+  accessibilityMode: boolean;\n+  autoLoggedIn: boolean;\n+  guest: boolean;\n+  prefsEditable: boolean;\n+  menuGroups: Array<Array<MenuItem>>;\n+  counts?: ItemCounts;\n+}\n+\n+/**\n+ * Retrieve details of the current user (based on JSESSIONID) including details for the UI such\n+ * as menu structure and task and notification counts.\n+ *\n+ * @param apiBasePath Base URI to the oEQ institution and API\n+ */\n+export const getCurrentUserDetails = (\n+  apiBasePath: string\n+): Promise<CurrentUserDetails> =>\n+  GET<CurrentUserDetails>(apiBasePath + '/content/currentuser', (data) =>\n+    is<CurrentUserDetails>(data)\n+  );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9d035ccb3a6a0932216e6605fd107412322dac8"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEyMTU4Ng==", "bodyText": "hmmm, I really need to get the linting and formatting fixed up on this module soon. Thanks.", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r424121586", "createdAt": "2020-05-13T01:23:39Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/src/LegacyContent.ts", "diffHunk": "@@ -0,0 +1,43 @@\n+import { GET } from './AxiosInstance';\n+import { is } from 'typescript-is';\n+\n+export interface ItemCounts {\n+  tasks: number;\n+  notifications: number;\n+}\n+\n+export interface MenuItem {\n+  title: string;\n+  href?: string;\n+  systemIcon?: string;\n+  route?: string;\n+  iconUrl?: string;\n+  newWindow: boolean;\n+}\n+\n+export interface CurrentUserDetails {\n+  id: string;\n+  username: string;\n+  firstName: string;\n+  lastName: string;\n+  emailAddress?: string;\n+  accessibilityMode: boolean;\n+  autoLoggedIn: boolean;\n+  guest: boolean;\n+  prefsEditable: boolean;\n+  menuGroups: Array<Array<MenuItem>>;\n+  counts?: ItemCounts;\n+}\n+\n+/**\n+ * Retrieve details of the current user (based on JSESSIONID) including details for the UI such\n+ * as menu structure and task and notification counts.\n+ *\n+ * @param apiBasePath Base URI to the oEQ institution and API\n+ */\n+export const getCurrentUserDetails = (\n+  apiBasePath: string\n+): Promise<CurrentUserDetails> =>\n+  GET<CurrentUserDetails>(apiBasePath + '/content/currentuser', (data) =>\n+    is<CurrentUserDetails>(data)\n+  );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4NzIyMg=="}, "originalCommit": {"oid": "d9d035ccb3a6a0932216e6605fd107412322dac8"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDkxODQwOnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/src/LegacyContent.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzoxODo0M1rOGUcPkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMToyNDo0MVrOGUeV0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4NzQ0Mg==", "bodyText": "Pretty slick that it can directly use the typing, nice! \ud83d\udc4d", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r424087442", "createdAt": "2020-05-12T23:18:43Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/src/LegacyContent.ts", "diffHunk": "@@ -0,0 +1,43 @@\n+import { GET } from './AxiosInstance';\n+import { is } from 'typescript-is';\n+\n+export interface ItemCounts {\n+  tasks: number;\n+  notifications: number;\n+}\n+\n+export interface MenuItem {\n+  title: string;\n+  href?: string;\n+  systemIcon?: string;\n+  route?: string;\n+  iconUrl?: string;\n+  newWindow: boolean;\n+}\n+\n+export interface CurrentUserDetails {\n+  id: string;\n+  username: string;\n+  firstName: string;\n+  lastName: string;\n+  emailAddress?: string;\n+  accessibilityMode: boolean;\n+  autoLoggedIn: boolean;\n+  guest: boolean;\n+  prefsEditable: boolean;\n+  menuGroups: Array<Array<MenuItem>>;\n+  counts?: ItemCounts;\n+}\n+\n+/**\n+ * Retrieve details of the current user (based on JSESSIONID) including details for the UI such\n+ * as menu structure and task and notification counts.\n+ *\n+ * @param apiBasePath Base URI to the oEQ institution and API\n+ */\n+export const getCurrentUserDetails = (\n+  apiBasePath: string\n+): Promise<CurrentUserDetails> =>\n+  GET<CurrentUserDetails>(apiBasePath + '/content/currentuser', (data) =>\n+    is<CurrentUserDetails>(data)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9d035ccb3a6a0932216e6605fd107412322dac8"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEyMTgxMQ==", "bodyText": "Yeah it's pretty tidy. \ud83d\ude01", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r424121811", "createdAt": "2020-05-13T01:24:41Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/src/LegacyContent.ts", "diffHunk": "@@ -0,0 +1,43 @@\n+import { GET } from './AxiosInstance';\n+import { is } from 'typescript-is';\n+\n+export interface ItemCounts {\n+  tasks: number;\n+  notifications: number;\n+}\n+\n+export interface MenuItem {\n+  title: string;\n+  href?: string;\n+  systemIcon?: string;\n+  route?: string;\n+  iconUrl?: string;\n+  newWindow: boolean;\n+}\n+\n+export interface CurrentUserDetails {\n+  id: string;\n+  username: string;\n+  firstName: string;\n+  lastName: string;\n+  emailAddress?: string;\n+  accessibilityMode: boolean;\n+  autoLoggedIn: boolean;\n+  guest: boolean;\n+  prefsEditable: boolean;\n+  menuGroups: Array<Array<MenuItem>>;\n+  counts?: ItemCounts;\n+}\n+\n+/**\n+ * Retrieve details of the current user (based on JSESSIONID) including details for the UI such\n+ * as menu structure and task and notification counts.\n+ *\n+ * @param apiBasePath Base URI to the oEQ institution and API\n+ */\n+export const getCurrentUserDetails = (\n+  apiBasePath: string\n+): Promise<CurrentUserDetails> =>\n+  GET<CurrentUserDetails>(apiBasePath + '/content/currentuser', (data) =>\n+    is<CurrentUserDetails>(data)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4NzQ0Mg=="}, "originalCommit": {"oid": "d9d035ccb3a6a0932216e6605fd107412322dac8"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDkyMzU0OnYy", "diffSide": "RIGHT", "path": "oeq-ts-rest-api/src/index.ts", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzoyMToyMFrOGUcS0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMjoxNjowNlrOGUfJYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4ODI3NQ==", "bodyText": "\ud83e\udd14 do we want to embed the runtime at the library level?\nThis would get included in the bundle right?\nIf there is ever another library added, which also needs a regenerator runtime, would that mean each bundle has it's own copy of the runtime?\nWould that be the expected outcome?", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r424088275", "createdAt": "2020-05-12T23:21:20Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/src/index.ts", "diffHunk": "@@ -0,0 +1,7 @@\n+// Needed to stop error of: \"regeneratorRuntime is not defined\"\n+import \"regenerator-runtime/runtime.js\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9d035ccb3a6a0932216e6605fd107412322dac8"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5NTA1NA==", "bodyText": "I'm completely out of my depth with this bit. I'm definitely open to suggestions and help.\nWith vanilla TSDX builds this was not needed. But when I moved to doing Rollup myself suddenly oEQ's UI would throw the above mentioned error about regeneratorRuntime when attempting to use this module.\nI spent hours trying to adding in babel to Rollup with the runtime plugins etc but nothing worked. Then I just tried hacking in the above import and oEQ started working again. And to be honest, I'm not even sure what dependency is making this available to the module's build.\nIf you can offer an insight to what TSDX might have been doing that meant this was never an issue I'd love to replicate it and not have this stray import.", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r424095054", "createdAt": "2020-05-12T23:43:04Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/src/index.ts", "diffHunk": "@@ -0,0 +1,7 @@\n+// Needed to stop error of: \"regeneratorRuntime is not defined\"\n+import \"regenerator-runtime/runtime.js\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4ODI3NQ=="}, "originalCommit": {"oid": "d9d035ccb3a6a0932216e6605fd107412322dac8"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwNDk1Ng==", "bodyText": "I'm not \ud83d\udcaf sure,\nI think the magic sauce is\nhttps://github.com/jaredpalmer/tsdx/blob/17ffcd215f78a4e9d6936644cbeab332f6439088/src/createRollupConfig.ts#L62-L66\nWhich tells rollup not to include libraries which are dependencies in the bundle, but to instead to use import or required to resolve them.", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r424104956", "createdAt": "2020-05-13T00:18:59Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/src/index.ts", "diffHunk": "@@ -0,0 +1,7 @@\n+// Needed to stop error of: \"regeneratorRuntime is not defined\"\n+import \"regenerator-runtime/runtime.js\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4ODI3NQ=="}, "originalCommit": {"oid": "d9d035ccb3a6a0932216e6605fd107412322dac8"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEyODkwNw==", "bodyText": "Okay, I'll have a little more of a play. As now this is causing issues on Codebuild. (Strange, seems there's a JS environment difference between CodeBuild and GHA.", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r424128907", "createdAt": "2020-05-13T01:52:48Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/src/index.ts", "diffHunk": "@@ -0,0 +1,7 @@\n+// Needed to stop error of: \"regeneratorRuntime is not defined\"\n+import \"regenerator-runtime/runtime.js\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4ODI3NQ=="}, "originalCommit": {"oid": "d9d035ccb3a6a0932216e6605fd107412322dac8"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEzNTAxMA==", "bodyText": "Seems it was a side effect of not building a CommonJS format module and having main point to it. With that issue resolved, I could remove the line with no effect.", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r424135010", "createdAt": "2020-05-13T02:16:06Z", "author": {"login": "edalex-ian"}, "path": "oeq-ts-rest-api/src/index.ts", "diffHunk": "@@ -0,0 +1,7 @@\n+// Needed to stop error of: \"regeneratorRuntime is not defined\"\n+import \"regenerator-runtime/runtime.js\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4ODI3NQ=="}, "originalCommit": {"oid": "d9d035ccb3a6a0932216e6605fd107412322dac8"}, "originalPosition": 2}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1436, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}