{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MTA1MTEy", "number": 1529, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxODoyMzo1MVrODmC0qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNzozNDozMlrODnj4Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjE4NzMwOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/util/actionutil.test.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxODoyMzo1MVrOFzRGig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxODoyMzo1MVrOFzRGig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMTg5OA==", "bodyText": "open to a better description, it's not entirely clear from the code why this util exists.", "url": "https://github.com/openequella/openEQUELLA/pull/1529#discussion_r389301898", "createdAt": "2020-03-07T18:23:51Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/util/actionutil.test.ts", "diffHunk": "@@ -0,0 +1,38 @@\n+import { actionCreator, wrapAsyncWorker } from \"./actionutil\";\n+\n+describe(\"actionutil\", () => {\n+  describe(\"actionCreator\", () => {\n+    it(\"should return a sync action\", () => {\n+      const actionFactory = actionCreator(\"example\");\n+      expect(typeof actionFactory).toBe(\"function\");\n+      const action = actionFactory();\n+      expect(action).toMatchObject({ type: \"example\", payload: undefined });\n+    });\n+\n+    it(\"should return an async action\", () => {\n+      const actionFactory = actionCreator.async(\"example\");\n+      expect(typeof actionFactory).toBe(\"object\");\n+\n+      const action = actionFactory.started(\"payload\");\n+      expect(action).toMatchObject({\n+        type: \"example_STARTED\",\n+        payload: \"payload\"\n+      });\n+    });\n+  });\n+\n+  describe(\"wrapAsyncWorker\", () => {\n+    it(\"should do something?\", async () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70f0033cbcb94fb7d29b563c99ebd6b8f7b6b9dd"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjE4NzY3OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/mainui/ErrorPage.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxODoyNTowN1rOFzRGwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxODozNjo0OVrOFzRJtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMTk1Mw==", "bodyText": "Note, when material ui styles on the page, use createMount to automatically setup the context providers.\nhttps://material-ui.com/guides/testing/", "url": "https://github.com/openequella/openEQUELLA/pull/1529#discussion_r389301953", "createdAt": "2020-03-07T18:25:07Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/mainui/ErrorPage.test.tsx", "diffHunk": "@@ -0,0 +1,49 @@\n+import * as React from \"react\";\n+import { createMount } from \"@material-ui/core/test-utils\";\n+import ErrorPage from \"./ErrorPage\";\n+\n+jest.mock(\"@material-ui/styles\", () => ({\n+  makeStyles: () => () => ({ errorPage: \"mock-classname\" })\n+}));\n+\n+describe(\"<ErrorPage />\", () => {\n+  let mount: ReturnType<typeof createMount>;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70f0033cbcb94fb7d29b563c99ebd6b8f7b6b9dd"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMjcwOQ==", "bodyText": "/cc @PenghaiZhang  re #1231 (comment)\nThis is an example of an inline interface that could not be easily reused.\nIn the material ui side the typing is:\nexport default function createMount(\n  options?: Partial<MountOptions>,\n): typeof mount & {\n  attachTo: HTMLElement;\n  cleanUp(): void;\n};\nbecause the return type interface was done inline, rather than through creating a new exported type or interface the only way to get proper typing in oEQ is to do type extraction ReturnType<typeof createMount>", "url": "https://github.com/openequella/openEQUELLA/pull/1529#discussion_r389302709", "createdAt": "2020-03-07T18:36:49Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/mainui/ErrorPage.test.tsx", "diffHunk": "@@ -0,0 +1,49 @@\n+import * as React from \"react\";\n+import { createMount } from \"@material-ui/core/test-utils\";\n+import ErrorPage from \"./ErrorPage\";\n+\n+jest.mock(\"@material-ui/styles\", () => ({\n+  makeStyles: () => () => ({ errorPage: \"mock-classname\" })\n+}));\n+\n+describe(\"<ErrorPage />\", () => {\n+  let mount: ReturnType<typeof createMount>;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMTk1Mw=="}, "originalCommit": {"oid": "70f0033cbcb94fb7d29b563c99ebd6b8f7b6b9dd"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjcxMjAyOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/util/langstrings.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMTo1MjoyMFrOFz6pHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMzozMTo0MFrOF0Ab3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk4MjQ5Mg==", "bodyText": "Nice! We should probably raise a Issue to do that - especially as we move to the New UI in earnest.", "url": "https://github.com/openequella/openEQUELLA/pull/1529#discussion_r389982492", "createdAt": "2020-03-09T21:52:20Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/util/langstrings.ts", "diffHunk": "@@ -7,8 +7,17 @@ export interface Sizes {\n   one: string;\n   more: string;\n }\n+\n+/**\n+ * Get appropriate language string based off size of value\n+ *\n+ * @param size size or count of value\n+ * @param strings language strings to choose from\n+ *\n+ * TODO: replace with https://github.com/formatjs/react-intl", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70f0033cbcb94fb7d29b563c99ebd6b8f7b6b9dd"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3NzQwNA==", "bodyText": "Also be aware react-intl isn't the only option.\nthere is https://github.com/i18next/react-i18next which is also a good option.\nEither way I'd recommend using ICU format\n\nhttp://userguide.icu-project.org/formatparse/messages\nhttps://formatjs.io/guides/message-syntax\nhttps://react.i18next.com/misc/using-with-icu-format\n\nBecause it comes baked in with awareness of different languages' pluralization rules (through CLDR)\nhttp://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html is a nice reminder of the challenges it solves, Arabic and Czech are two languages which are prime examples of pluralization rules very different from English", "url": "https://github.com/openequella/openEQUELLA/pull/1529#discussion_r390077404", "createdAt": "2020-03-10T03:31:40Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/util/langstrings.ts", "diffHunk": "@@ -7,8 +7,17 @@ export interface Sizes {\n   one: string;\n   more: string;\n }\n+\n+/**\n+ * Get appropriate language string based off size of value\n+ *\n+ * @param size size or count of value\n+ * @param strings language strings to choose from\n+ *\n+ * TODO: replace with https://github.com/formatjs/react-intl", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk4MjQ5Mg=="}, "originalCommit": {"oid": "70f0033cbcb94fb7d29b563c99ebd6b8f7b6b9dd"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODA4ODUwOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/versioncheck.test.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNzozNDozMlrOF1ogGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNzozNDozMlrOF1ogGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc4MjQyNw==", "bodyText": "rewire allows access to non-exported variables, without needing to run eval.\nhttps://github.com/jhnns/rewire", "url": "https://github.com/openequella/openEQUELLA/pull/1529#discussion_r391782427", "createdAt": "2020-03-12T17:34:32Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/versioncheck.test.ts", "diffHunk": "@@ -1,12 +1,8 @@\n-// versioncheck.js is not processed by Parcel and it only serves to the browser.\n-// So here need to read the file and then evaluate its content\n-const mockData = require(\"../__mocks__/versioncheck_mock_data\");\n-const fs = require(\"fs\");\n-const version_check_js_file = fs.readFileSync(\n-  \"../resources/web/js/versioncheck.js\",\n-  \"utf8\"\n-);\n-eval(version_check_js_file);\n+import * as mockData from \"../__mocks__/versioncheck_mock_data\";\n+import rewire = require(\"rewire\");\n+\n+const versioncheck = rewire(\"../../resources/web/js/versioncheck.js\");\n+const createCheckResult = versioncheck.__get__(\"createCheckResult\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a33aa18ae53874f8001b21036c9090aec11faff"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1485, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}