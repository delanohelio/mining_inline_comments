{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2MjAzMDM1", "number": 2547, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjoxMjozOFrOE8826g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNTozMDozNVrOE9e48A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzQ3MTE0OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/resources/web/scripts/attachments/attachments.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjoxMjozOFrOH5YFNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNzowNzo1N1rOH5lrLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkyNTQzMQ==", "bodyText": "The format of these comments is broken here but looks good locally. \ud83e\udd14", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r529925431", "createdAt": "2020-11-24T22:12:38Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/resources/web/scripts/attachments/attachments.js", "diffHunk": "@@ -156,7 +156,13 @@ var Attachments = (function()\n \t\t\t\tCourseList.scrollToSelected();\n \t\t\t\tCourseList.transfer($ul);\n \t\t\t}\n-\t\t\tselectAllCallback(uuids, itemId, itemExtensionType);\n+\n+\t\t\t// To support using the standard reload function for selecting all attachment,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c68835ad06a7fa4a6dfe7142027951c4af249eb6"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE0ODE0MA==", "bodyText": "I'd imagine it's tabs vs. spaces in this ol' stuff.", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530148140", "createdAt": "2020-11-25T07:07:57Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/resources/web/scripts/attachments/attachments.js", "diffHunk": "@@ -156,7 +156,13 @@ var Attachments = (function()\n \t\t\t\tCourseList.scrollToSelected();\n \t\t\t\tCourseList.transfer($ul);\n \t\t\t}\n-\t\t\tselectAllCallback(uuids, itemId, itemExtensionType);\n+\n+\t\t\t// To support using the standard reload function for selecting all attachment,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkyNTQzMQ=="}, "originalCommit": {"oid": "c68835ad06a7fa4a6dfe7142027951c4af249eb6"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzQ4MzYwOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/modules/SelectionSessionModule.test.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjoxNDozN1rOH5YNCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNjoyMjowM1rOH5ks3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkyNzQzNQ==", "bodyText": "This const and mocked functiongetRenderData appear in here and SearchResult.test.ts. Perhaps we should centralise them in a utility file ?", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r529927435", "createdAt": "2020-11-24T22:14:37Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/modules/SelectionSessionModule.test.ts", "diffHunk": "@@ -16,44 +16,73 @@\n  * limitations under the License.\n  */\n import { getSearchResult } from \"../../../__mocks__/SearchResult.mock\";\n-import type { SelectionSessionInfo } from \"../../../tsrc/AppConfig\";\n+import type { RenderData, SelectionSessionInfo } from \"../../../tsrc/AppConfig\";\n import * as AppConfig from \"../../../tsrc/AppConfig\";\n-import { buildSelectionSessionItemSummaryLink } from \"../../../tsrc/modules/SelectionSessionModule\";\n+import {\n+  buildSelectionSessionItemSummaryLink,\n+  isSelectionSessionOpen,\n+} from \"../../../tsrc/modules/SelectionSessionModule\";\n \n const basicSelectionSessionInfo: SelectionSessionInfo = {\n   stateId: \"1\",\n   layout: \"coursesearch\",\n };\n+const withIntegId: SelectionSessionInfo = {\n+  ...basicSelectionSessionInfo,\n+  integId: \"2\",\n+};\n+const basicRenderData: RenderData = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c68835ad06a7fa4a6dfe7142027951c4af249eb6"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEzMjE4OA==", "bodyText": "Yup, sounds like a good plan to me. \ud83d\udc4d", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530132188", "createdAt": "2020-11-25T06:22:03Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/modules/SelectionSessionModule.test.ts", "diffHunk": "@@ -16,44 +16,73 @@\n  * limitations under the License.\n  */\n import { getSearchResult } from \"../../../__mocks__/SearchResult.mock\";\n-import type { SelectionSessionInfo } from \"../../../tsrc/AppConfig\";\n+import type { RenderData, SelectionSessionInfo } from \"../../../tsrc/AppConfig\";\n import * as AppConfig from \"../../../tsrc/AppConfig\";\n-import { buildSelectionSessionItemSummaryLink } from \"../../../tsrc/modules/SelectionSessionModule\";\n+import {\n+  buildSelectionSessionItemSummaryLink,\n+  isSelectionSessionOpen,\n+} from \"../../../tsrc/modules/SelectionSessionModule\";\n \n const basicSelectionSessionInfo: SelectionSessionInfo = {\n   stateId: \"1\",\n   layout: \"coursesearch\",\n };\n+const withIntegId: SelectionSessionInfo = {\n+  ...basicSelectionSessionInfo,\n+  integId: \"2\",\n+};\n+const basicRenderData: RenderData = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkyNzQzNQ=="}, "originalCommit": {"oid": "c68835ad06a7fa4a6dfe7142027951c4af249eb6"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzcyNjk4OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SelectionSessionModule.ts", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjo1MjozMFrOH5apog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMzozNjo0N1rOH6HA3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk2NzUyMg==", "bodyText": "I did not put this function in the REST Module as we don't have REST endpoints for Selection Session yet. In addition, I am unsure how to write tests for this function. I can make a mocked Axios.post though and check if the callback has been called or not.", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r529967522", "createdAt": "2020-11-24T22:52:30Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SelectionSessionModule.ts", "diffHunk": "@@ -32,6 +107,44 @@ const isSelectionSessionInfo = (\n export const isSelectionSessionOpen = (): boolean =>\n   isSelectionSessionInfo(getRenderData()?.selectionSessionInfo);\n \n+/**\n+ * Validate the selectionSessionInfo included in renderData.\n+ * And return selectionSessionInfo if the checking is passed, or throw a type error.\n+ */\n+const getSelectionSessionInfo = (): SelectionSessionInfo => {\n+  const selectionSessionInfo = getRenderData()?.selectionSessionInfo;\n+  if (isSelectionSessionInfo(selectionSessionInfo)) {\n+    return selectionSessionInfo;\n+  }\n+  throw new TypeError(\"The type of Selection Session Info is incorrect.\");\n+};\n+\n+const submitBaseUrl = `${API_BASE_URL}/content/submit`;\n+\n+const getBasicPostData = () => {\n+  const { stateId, integId, layout } = getSelectionSessionInfo();\n+  const basicPostData = {\n+    \"_sl.stateId\": [`${stateId}`],\n+    a: [layout],\n+  };\n+  return integId\n+    ? { ...basicPostData, \"_int.id\": [`${integId}`] }\n+    : basicPostData;\n+};\n+\n+/**\n+ * Send a POST request to submit selected resources.\n+ *\n+ * @param path URL of an endpoint for submitting selected resources\n+ * @param data Payload of the request\n+ * @param callback Function called when the request is successful\n+ */\n+const submitSelection = <T>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d958c14054b5ad57e1b6bfb4e7ff1b8f9c338574"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE0MjQxNg==", "bodyText": "Yup, you're right not to put this in the REST module. But I feel we need to somehow highlight this is the interface to Legacy Selection Sessions. I wonder if we should push these interface definitions, HTTP calls and supporting functions into maybe something called LegacySelectionSessionModule.ts and maybe at the top of the file a file wide comment stating that this Module is all about interacting with the Legacy AJAX endpoints for selections sessions, and will be used until the supporting REST endpoints are developed. \ud83e\udd14", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530142416", "createdAt": "2020-11-25T06:52:36Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SelectionSessionModule.ts", "diffHunk": "@@ -32,6 +107,44 @@ const isSelectionSessionInfo = (\n export const isSelectionSessionOpen = (): boolean =>\n   isSelectionSessionInfo(getRenderData()?.selectionSessionInfo);\n \n+/**\n+ * Validate the selectionSessionInfo included in renderData.\n+ * And return selectionSessionInfo if the checking is passed, or throw a type error.\n+ */\n+const getSelectionSessionInfo = (): SelectionSessionInfo => {\n+  const selectionSessionInfo = getRenderData()?.selectionSessionInfo;\n+  if (isSelectionSessionInfo(selectionSessionInfo)) {\n+    return selectionSessionInfo;\n+  }\n+  throw new TypeError(\"The type of Selection Session Info is incorrect.\");\n+};\n+\n+const submitBaseUrl = `${API_BASE_URL}/content/submit`;\n+\n+const getBasicPostData = () => {\n+  const { stateId, integId, layout } = getSelectionSessionInfo();\n+  const basicPostData = {\n+    \"_sl.stateId\": [`${stateId}`],\n+    a: [layout],\n+  };\n+  return integId\n+    ? { ...basicPostData, \"_int.id\": [`${integId}`] }\n+    : basicPostData;\n+};\n+\n+/**\n+ * Send a POST request to submit selected resources.\n+ *\n+ * @param path URL of an endpoint for submitting selected resources\n+ * @param data Payload of the request\n+ * @param callback Function called when the request is successful\n+ */\n+const submitSelection = <T>(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk2NzUyMg=="}, "originalCommit": {"oid": "d958c14054b5ad57e1b6bfb4e7ff1b8f9c338574"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY5NDM2NQ==", "bodyText": "Good idea. I have renamed the module.", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530694365", "createdAt": "2020-11-25T23:36:47Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SelectionSessionModule.ts", "diffHunk": "@@ -32,6 +107,44 @@ const isSelectionSessionInfo = (\n export const isSelectionSessionOpen = (): boolean =>\n   isSelectionSessionInfo(getRenderData()?.selectionSessionInfo);\n \n+/**\n+ * Validate the selectionSessionInfo included in renderData.\n+ * And return selectionSessionInfo if the checking is passed, or throw a type error.\n+ */\n+const getSelectionSessionInfo = (): SelectionSessionInfo => {\n+  const selectionSessionInfo = getRenderData()?.selectionSessionInfo;\n+  if (isSelectionSessionInfo(selectionSessionInfo)) {\n+    return selectionSessionInfo;\n+  }\n+  throw new TypeError(\"The type of Selection Session Info is incorrect.\");\n+};\n+\n+const submitBaseUrl = `${API_BASE_URL}/content/submit`;\n+\n+const getBasicPostData = () => {\n+  const { stateId, integId, layout } = getSelectionSessionInfo();\n+  const basicPostData = {\n+    \"_sl.stateId\": [`${stateId}`],\n+    a: [layout],\n+  };\n+  return integId\n+    ? { ...basicPostData, \"_int.id\": [`${integId}`] }\n+    : basicPostData;\n+};\n+\n+/**\n+ * Send a POST request to submit selected resources.\n+ *\n+ * @param path URL of an endpoint for submitting selected resources\n+ * @param data Payload of the request\n+ * @param callback Function called when the request is successful\n+ */\n+const submitSelection = <T>(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk2NzUyMg=="}, "originalCommit": {"oid": "d958c14054b5ad57e1b6bfb4e7ff1b8f9c338574"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDgyNjQ1OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/modules/SelectionSessionModule.test.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNjoyNzoyMVrOH5kzNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNjoyNzoyMVrOH5kzNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEzMzgxMg==", "bodyText": "It's a bit more common, and makes a bit more sense, to put the description/when string as the first item (or column if you think of this as tabular data). And then the string you'd have you'd have: \"when [%s] then return [%s]\"", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530133812", "createdAt": "2020-11-25T06:27:21Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/modules/SelectionSessionModule.test.ts", "diffHunk": "@@ -16,44 +16,75 @@\n  * limitations under the License.\n  */\n import { getSearchResult } from \"../../../__mocks__/SearchResult.mock\";\n-import type { SelectionSessionInfo } from \"../../../tsrc/AppConfig\";\n+import type { RenderData, SelectionSessionInfo } from \"../../../tsrc/AppConfig\";\n import * as AppConfig from \"../../../tsrc/AppConfig\";\n-import { buildSelectionSessionItemSummaryLink } from \"../../../tsrc/modules/SelectionSessionModule\";\n+import {\n+  buildSelectionSessionItemSummaryLink,\n+  isSelectionSessionOpen,\n+} from \"../../../tsrc/modules/SelectionSessionModule\";\n \n const basicSelectionSessionInfo: SelectionSessionInfo = {\n   stateId: \"1\",\n   layout: \"coursesearch\",\n };\n+const withIntegId: SelectionSessionInfo = {\n+  ...basicSelectionSessionInfo,\n+  integId: \"2\",\n+};\n+const basicRenderData: RenderData = {\n+  baseResources: \"p/r/2020.2.0/com.equella.core/\",\n+  newUI: true,\n+  autotestMode: false,\n+  newSearch: true,\n+  selectionSessionInfo: basicSelectionSessionInfo,\n+};\n const mockGetRenderData = jest.spyOn(AppConfig, \"getRenderData\");\n-const updateMockGetRenderData = (\n-  selectionSessionInfo: SelectionSessionInfo\n-) => {\n-  mockGetRenderData.mockReturnValue({\n-    baseResources: \"p/r/2020.2.0/com.equella.core/\",\n-    newUI: true,\n-    autotestMode: false,\n-    newSearch: true,\n-    selectionSessionInfo: selectionSessionInfo,\n-  });\n+const updateMockGetRenderData = (renderData?: RenderData) => {\n+  mockGetRenderData.mockReturnValue(renderData);\n };\n \n describe(\"buildSelectionSessionItemSummaryLink\", () => {\n   const { uuid, version } = getSearchResult.results[0];\n \n   it(\"builds basic URLs for accessing ItemSummary pages in Selection Session mode\", () => {\n-    updateMockGetRenderData(basicSelectionSessionInfo);\n+    updateMockGetRenderData(basicRenderData);\n     const link = buildSelectionSessionItemSummaryLink(uuid, version);\n     expect(link).toBe(\n       \"items/9b9bf5a9-c5af-490b-88fe-7e330679fad2/1/?_sl.stateId=1&a=coursesearch\"\n     );\n   });\n \n   it(\"will include the Integration ID in the URL if provided in SelectionSessionInfo\", () => {\n-    updateMockGetRenderData({ ...basicSelectionSessionInfo, integId: \"2\" });\n+    updateMockGetRenderData({\n+      ...basicRenderData,\n+      selectionSessionInfo: withIntegId,\n+    });\n \n     const link = buildSelectionSessionItemSummaryLink(uuid, version);\n     expect(link).toBe(\n       \"items/9b9bf5a9-c5af-490b-88fe-7e330679fad2/1/?_sl.stateId=1&a=coursesearch&_int.id=2\"\n     );\n   });\n });\n+\n+describe(\"isSelectionSessionOpen\", () => {\n+  it.each([\n+    [true, \"selectionSessionInfo has correct type\", basicRenderData],\n+    [\n+      false,\n+      \"selectionSessionInfo is null\",\n+      { ...basicRenderData, selectionSessionInfo: null },\n+    ],\n+    [false, \"renderData is undefined\", undefined],\n+  ])(\n+    \"return %s when %s\",\n+    (\n+      inSelectionSession: boolean,\n+      when: string,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4fdffe74ca53201cbe4305086616c114398755"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDgyODU2OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/modules/SelectionSessionModule.test.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNjoyODoyN1rOH5k0bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNjoyODoyN1rOH5k0bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEzNDEyNg==", "bodyText": "Should this perhaps be:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                [true, \"selectionSessionInfo has correct type\", basicRenderData],\n          \n          \n            \n                [true, \"RenderData includes SelectionSessionInfo\", basicRenderData],", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530134126", "createdAt": "2020-11-25T06:28:27Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/modules/SelectionSessionModule.test.ts", "diffHunk": "@@ -16,44 +16,75 @@\n  * limitations under the License.\n  */\n import { getSearchResult } from \"../../../__mocks__/SearchResult.mock\";\n-import type { SelectionSessionInfo } from \"../../../tsrc/AppConfig\";\n+import type { RenderData, SelectionSessionInfo } from \"../../../tsrc/AppConfig\";\n import * as AppConfig from \"../../../tsrc/AppConfig\";\n-import { buildSelectionSessionItemSummaryLink } from \"../../../tsrc/modules/SelectionSessionModule\";\n+import {\n+  buildSelectionSessionItemSummaryLink,\n+  isSelectionSessionOpen,\n+} from \"../../../tsrc/modules/SelectionSessionModule\";\n \n const basicSelectionSessionInfo: SelectionSessionInfo = {\n   stateId: \"1\",\n   layout: \"coursesearch\",\n };\n+const withIntegId: SelectionSessionInfo = {\n+  ...basicSelectionSessionInfo,\n+  integId: \"2\",\n+};\n+const basicRenderData: RenderData = {\n+  baseResources: \"p/r/2020.2.0/com.equella.core/\",\n+  newUI: true,\n+  autotestMode: false,\n+  newSearch: true,\n+  selectionSessionInfo: basicSelectionSessionInfo,\n+};\n const mockGetRenderData = jest.spyOn(AppConfig, \"getRenderData\");\n-const updateMockGetRenderData = (\n-  selectionSessionInfo: SelectionSessionInfo\n-) => {\n-  mockGetRenderData.mockReturnValue({\n-    baseResources: \"p/r/2020.2.0/com.equella.core/\",\n-    newUI: true,\n-    autotestMode: false,\n-    newSearch: true,\n-    selectionSessionInfo: selectionSessionInfo,\n-  });\n+const updateMockGetRenderData = (renderData?: RenderData) => {\n+  mockGetRenderData.mockReturnValue(renderData);\n };\n \n describe(\"buildSelectionSessionItemSummaryLink\", () => {\n   const { uuid, version } = getSearchResult.results[0];\n \n   it(\"builds basic URLs for accessing ItemSummary pages in Selection Session mode\", () => {\n-    updateMockGetRenderData(basicSelectionSessionInfo);\n+    updateMockGetRenderData(basicRenderData);\n     const link = buildSelectionSessionItemSummaryLink(uuid, version);\n     expect(link).toBe(\n       \"items/9b9bf5a9-c5af-490b-88fe-7e330679fad2/1/?_sl.stateId=1&a=coursesearch\"\n     );\n   });\n \n   it(\"will include the Integration ID in the URL if provided in SelectionSessionInfo\", () => {\n-    updateMockGetRenderData({ ...basicSelectionSessionInfo, integId: \"2\" });\n+    updateMockGetRenderData({\n+      ...basicRenderData,\n+      selectionSessionInfo: withIntegId,\n+    });\n \n     const link = buildSelectionSessionItemSummaryLink(uuid, version);\n     expect(link).toBe(\n       \"items/9b9bf5a9-c5af-490b-88fe-7e330679fad2/1/?_sl.stateId=1&a=coursesearch&_int.id=2\"\n     );\n   });\n });\n+\n+describe(\"isSelectionSessionOpen\", () => {\n+  it.each([\n+    [true, \"selectionSessionInfo has correct type\", basicRenderData],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4fdffe74ca53201cbe4305086616c114398755"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDg0MjE5OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/components/SearchResult.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNjozNDo0MlrOH5k8Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMzozOTo0OVrOH6HDnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEzNjA4Mw==", "bodyText": "Why didn't you just do this on the import?\nE.g.\nimport {selectResourceForCourseList, selectResourceForNonCourseList} from ...", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530136083", "createdAt": "2020-11-25T06:34:42Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/components/SearchResult.test.tsx", "diffHunk": "@@ -172,19 +180,78 @@ describe(\"<SearchResult/>\", () => {\n     );\n   });\n \n-  it.each<[string]>([\n-    [languageStrings.searchpage.selectResource.summaryPage],\n-    [languageStrings.searchpage.selectResource.allAttachments],\n-    [languageStrings.searchpage.selectResource.attachment],\n-  ])(\n-    // todo: pass event handler in and check if it has been called.\n-    \"should display buttons for %s in Selection Session\",\n-    async (buttonLabel: string) => {\n-      updateMockRenderData();\n-      const { queryByLabelText } = await renderSearchResult(\n-        mockData.attachSearchObj\n-      );\n-      expect(queryByLabelText(buttonLabel)).toBeInTheDocument();\n-    }\n-  );\n+  describe(\"In Selection Session\", () => {\n+    const mockGlobalCourseList = jest.spyOn(\n+      SelectionSessionModule,\n+      \"getGlobalCourseList\"\n+    );\n+    mockGlobalCourseList.mockReturnValue({ updateCourseList: jest.fn() });\n+\n+    const mockSelectResourceForCourseList = jest.spyOn(\n+      SelectionSessionModule,\n+      \"selectResourceForCourseList\"\n+    );\n+    mockSelectResourceForCourseList.mockResolvedValue();\n+\n+    const mockSelectResourceForNonCourseList = jest.spyOn(\n+      SelectionSessionModule,\n+      \"selectResourceForNonCourseList\"\n+    );\n+    mockSelectResourceForNonCourseList.mockResolvedValue();\n+\n+    const selectOrAddInfo: SelectionSessionInfo = {\n+      ...basicSelectionSessionInfo,\n+      layout: \"search\",\n+    };\n+\n+    const {\n+      summaryPage,\n+      allAttachments,\n+      attachment,\n+    } = languageStrings.searchpage.selectResource;\n+    const STRUCTURED = \"structured\";\n+    const SELECT_OR_ADD = \"selectOrAdd\";\n+    const selectForCourseFunc =\n+      SelectionSessionModule.selectResourceForCourseList;\n+    const selectForNonCourseFunc =\n+      SelectionSessionModule.selectResourceForNonCourseList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4fdffe74ca53201cbe4305086616c114398755"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY5NTA2OA==", "bodyText": "Because there is an import of the entire module into a single variable so I was thinking if I should skip the duplicated imports.", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530695068", "createdAt": "2020-11-25T23:39:49Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/components/SearchResult.test.tsx", "diffHunk": "@@ -172,19 +180,78 @@ describe(\"<SearchResult/>\", () => {\n     );\n   });\n \n-  it.each<[string]>([\n-    [languageStrings.searchpage.selectResource.summaryPage],\n-    [languageStrings.searchpage.selectResource.allAttachments],\n-    [languageStrings.searchpage.selectResource.attachment],\n-  ])(\n-    // todo: pass event handler in and check if it has been called.\n-    \"should display buttons for %s in Selection Session\",\n-    async (buttonLabel: string) => {\n-      updateMockRenderData();\n-      const { queryByLabelText } = await renderSearchResult(\n-        mockData.attachSearchObj\n-      );\n-      expect(queryByLabelText(buttonLabel)).toBeInTheDocument();\n-    }\n-  );\n+  describe(\"In Selection Session\", () => {\n+    const mockGlobalCourseList = jest.spyOn(\n+      SelectionSessionModule,\n+      \"getGlobalCourseList\"\n+    );\n+    mockGlobalCourseList.mockReturnValue({ updateCourseList: jest.fn() });\n+\n+    const mockSelectResourceForCourseList = jest.spyOn(\n+      SelectionSessionModule,\n+      \"selectResourceForCourseList\"\n+    );\n+    mockSelectResourceForCourseList.mockResolvedValue();\n+\n+    const mockSelectResourceForNonCourseList = jest.spyOn(\n+      SelectionSessionModule,\n+      \"selectResourceForNonCourseList\"\n+    );\n+    mockSelectResourceForNonCourseList.mockResolvedValue();\n+\n+    const selectOrAddInfo: SelectionSessionInfo = {\n+      ...basicSelectionSessionInfo,\n+      layout: \"search\",\n+    };\n+\n+    const {\n+      summaryPage,\n+      allAttachments,\n+      attachment,\n+    } = languageStrings.searchpage.selectResource;\n+    const STRUCTURED = \"structured\";\n+    const SELECT_OR_ADD = \"selectOrAdd\";\n+    const selectForCourseFunc =\n+      SelectionSessionModule.selectResourceForCourseList;\n+    const selectForNonCourseFunc =\n+      SelectionSessionModule.selectResourceForNonCourseList;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEzNjA4Mw=="}, "originalCommit": {"oid": "7f4fdffe74ca53201cbe4305086616c114398755"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDg2MTY0OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/components/SearchResult.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNjo0Mjo1MVrOH5lG9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMzo1MTowM1rOH6HOsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEzODg2OA==", "bodyText": "It's unclear what this is all about. I'm guessing - which we don't want readers to have to do - that the intention here is to check on the presence of a selection button and then click it. If so, it could greatly benefit by something like:\nconst makeSelection = (selectorLabel: string) => {\n  // First, make sure the selector control is active\n  expect(queryByLabelText(selectorLabel)).toBeInTheDocument();\n  // And then make a selection by clicking it\n  fireEvent.click(getByLabelText(selectorLabel));\n}\nAnd then tweak this to be:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    expect(queryByLabelText(resourceType)).toBeInTheDocument();\n          \n          \n            \n            \n          \n          \n            \n                    fireEvent.click(getByLabelText(resourceType));\n          \n          \n            \n                    makeSelection(resourceType);", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530138868", "createdAt": "2020-11-25T06:42:51Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/components/SearchResult.test.tsx", "diffHunk": "@@ -172,19 +180,78 @@ describe(\"<SearchResult/>\", () => {\n     );\n   });\n \n-  it.each<[string]>([\n-    [languageStrings.searchpage.selectResource.summaryPage],\n-    [languageStrings.searchpage.selectResource.allAttachments],\n-    [languageStrings.searchpage.selectResource.attachment],\n-  ])(\n-    // todo: pass event handler in and check if it has been called.\n-    \"should display buttons for %s in Selection Session\",\n-    async (buttonLabel: string) => {\n-      updateMockRenderData();\n-      const { queryByLabelText } = await renderSearchResult(\n-        mockData.attachSearchObj\n-      );\n-      expect(queryByLabelText(buttonLabel)).toBeInTheDocument();\n-    }\n-  );\n+  describe(\"In Selection Session\", () => {\n+    const mockGlobalCourseList = jest.spyOn(\n+      SelectionSessionModule,\n+      \"getGlobalCourseList\"\n+    );\n+    mockGlobalCourseList.mockReturnValue({ updateCourseList: jest.fn() });\n+\n+    const mockSelectResourceForCourseList = jest.spyOn(\n+      SelectionSessionModule,\n+      \"selectResourceForCourseList\"\n+    );\n+    mockSelectResourceForCourseList.mockResolvedValue();\n+\n+    const mockSelectResourceForNonCourseList = jest.spyOn(\n+      SelectionSessionModule,\n+      \"selectResourceForNonCourseList\"\n+    );\n+    mockSelectResourceForNonCourseList.mockResolvedValue();\n+\n+    const selectOrAddInfo: SelectionSessionInfo = {\n+      ...basicSelectionSessionInfo,\n+      layout: \"search\",\n+    };\n+\n+    const {\n+      summaryPage,\n+      allAttachments,\n+      attachment,\n+    } = languageStrings.searchpage.selectResource;\n+    const STRUCTURED = \"structured\";\n+    const SELECT_OR_ADD = \"selectOrAdd\";\n+    const selectForCourseFunc =\n+      SelectionSessionModule.selectResourceForCourseList;\n+    const selectForNonCourseFunc =\n+      SelectionSessionModule.selectResourceForNonCourseList;\n+\n+    it.each([\n+      [summaryPage, STRUCTURED, selectForCourseFunc, basicSelectionSessionInfo],\n+      [\n+        allAttachments,\n+        STRUCTURED,\n+        selectForCourseFunc,\n+        basicSelectionSessionInfo,\n+      ],\n+      [attachment, STRUCTURED, selectForCourseFunc, basicSelectionSessionInfo],\n+      [summaryPage, SELECT_OR_ADD, selectForNonCourseFunc, selectOrAddInfo],\n+      [allAttachments, SELECT_OR_ADD, selectForNonCourseFunc, selectOrAddInfo],\n+      [attachment, SELECT_OR_ADD, selectForNonCourseFunc, selectOrAddInfo],\n+    ])(\n+      \"supports %s in %s mode\",\n+      async (\n+        resourceType: string,\n+        selectionSessionMode: string,\n+        selectResourceFunc: (\n+          itemKey: string,\n+          attachmentUUIDs: string[]\n+        ) => Promise<void>,\n+        selectionSessionInfo: SelectionSessionInfo\n+      ) => {\n+        updateMockRenderData({\n+          ...basicRenderData,\n+          selectionSessionInfo: selectionSessionInfo,\n+        });\n+\n+        const { queryByLabelText, getByLabelText } = await renderSearchResult(\n+          mockData.attachSearchObj\n+        );\n+        expect(queryByLabelText(resourceType)).toBeInTheDocument();\n+\n+        fireEvent.click(getByLabelText(resourceType));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4fdffe74ca53201cbe4305086616c114398755"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY5NzkwNw==", "bodyText": "Sorry for the confusion. Yes your guess is 100% correct.", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530697907", "createdAt": "2020-11-25T23:51:03Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/components/SearchResult.test.tsx", "diffHunk": "@@ -172,19 +180,78 @@ describe(\"<SearchResult/>\", () => {\n     );\n   });\n \n-  it.each<[string]>([\n-    [languageStrings.searchpage.selectResource.summaryPage],\n-    [languageStrings.searchpage.selectResource.allAttachments],\n-    [languageStrings.searchpage.selectResource.attachment],\n-  ])(\n-    // todo: pass event handler in and check if it has been called.\n-    \"should display buttons for %s in Selection Session\",\n-    async (buttonLabel: string) => {\n-      updateMockRenderData();\n-      const { queryByLabelText } = await renderSearchResult(\n-        mockData.attachSearchObj\n-      );\n-      expect(queryByLabelText(buttonLabel)).toBeInTheDocument();\n-    }\n-  );\n+  describe(\"In Selection Session\", () => {\n+    const mockGlobalCourseList = jest.spyOn(\n+      SelectionSessionModule,\n+      \"getGlobalCourseList\"\n+    );\n+    mockGlobalCourseList.mockReturnValue({ updateCourseList: jest.fn() });\n+\n+    const mockSelectResourceForCourseList = jest.spyOn(\n+      SelectionSessionModule,\n+      \"selectResourceForCourseList\"\n+    );\n+    mockSelectResourceForCourseList.mockResolvedValue();\n+\n+    const mockSelectResourceForNonCourseList = jest.spyOn(\n+      SelectionSessionModule,\n+      \"selectResourceForNonCourseList\"\n+    );\n+    mockSelectResourceForNonCourseList.mockResolvedValue();\n+\n+    const selectOrAddInfo: SelectionSessionInfo = {\n+      ...basicSelectionSessionInfo,\n+      layout: \"search\",\n+    };\n+\n+    const {\n+      summaryPage,\n+      allAttachments,\n+      attachment,\n+    } = languageStrings.searchpage.selectResource;\n+    const STRUCTURED = \"structured\";\n+    const SELECT_OR_ADD = \"selectOrAdd\";\n+    const selectForCourseFunc =\n+      SelectionSessionModule.selectResourceForCourseList;\n+    const selectForNonCourseFunc =\n+      SelectionSessionModule.selectResourceForNonCourseList;\n+\n+    it.each([\n+      [summaryPage, STRUCTURED, selectForCourseFunc, basicSelectionSessionInfo],\n+      [\n+        allAttachments,\n+        STRUCTURED,\n+        selectForCourseFunc,\n+        basicSelectionSessionInfo,\n+      ],\n+      [attachment, STRUCTURED, selectForCourseFunc, basicSelectionSessionInfo],\n+      [summaryPage, SELECT_OR_ADD, selectForNonCourseFunc, selectOrAddInfo],\n+      [allAttachments, SELECT_OR_ADD, selectForNonCourseFunc, selectOrAddInfo],\n+      [attachment, SELECT_OR_ADD, selectForNonCourseFunc, selectOrAddInfo],\n+    ])(\n+      \"supports %s in %s mode\",\n+      async (\n+        resourceType: string,\n+        selectionSessionMode: string,\n+        selectResourceFunc: (\n+          itemKey: string,\n+          attachmentUUIDs: string[]\n+        ) => Promise<void>,\n+        selectionSessionInfo: SelectionSessionInfo\n+      ) => {\n+        updateMockRenderData({\n+          ...basicRenderData,\n+          selectionSessionInfo: selectionSessionInfo,\n+        });\n+\n+        const { queryByLabelText, getByLabelText } = await renderSearchResult(\n+          mockData.attachSearchObj\n+        );\n+        expect(queryByLabelText(resourceType)).toBeInTheDocument();\n+\n+        fireEvent.click(getByLabelText(resourceType));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEzODg2OA=="}, "originalCommit": {"oid": "7f4fdffe74ca53201cbe4305086616c114398755"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDg2MzAwOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/components/SearchResult.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNjo0MzozN1rOH5lH0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMDowNzo0NFrOH6HeoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEzOTA5MQ==", "bodyText": "Although we have this test to (I think) check that the selector controls are active in Selection Sessions. We don't seem to have a function to ensure we don't show them during non-Selection Sessions. Could be handy...", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530139091", "createdAt": "2020-11-25T06:43:37Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/components/SearchResult.test.tsx", "diffHunk": "@@ -172,19 +180,78 @@ describe(\"<SearchResult/>\", () => {\n     );\n   });\n \n-  it.each<[string]>([\n-    [languageStrings.searchpage.selectResource.summaryPage],\n-    [languageStrings.searchpage.selectResource.allAttachments],\n-    [languageStrings.searchpage.selectResource.attachment],\n-  ])(\n-    // todo: pass event handler in and check if it has been called.\n-    \"should display buttons for %s in Selection Session\",\n-    async (buttonLabel: string) => {\n-      updateMockRenderData();\n-      const { queryByLabelText } = await renderSearchResult(\n-        mockData.attachSearchObj\n-      );\n-      expect(queryByLabelText(buttonLabel)).toBeInTheDocument();\n-    }\n-  );\n+  describe(\"In Selection Session\", () => {\n+    const mockGlobalCourseList = jest.spyOn(\n+      SelectionSessionModule,\n+      \"getGlobalCourseList\"\n+    );\n+    mockGlobalCourseList.mockReturnValue({ updateCourseList: jest.fn() });\n+\n+    const mockSelectResourceForCourseList = jest.spyOn(\n+      SelectionSessionModule,\n+      \"selectResourceForCourseList\"\n+    );\n+    mockSelectResourceForCourseList.mockResolvedValue();\n+\n+    const mockSelectResourceForNonCourseList = jest.spyOn(\n+      SelectionSessionModule,\n+      \"selectResourceForNonCourseList\"\n+    );\n+    mockSelectResourceForNonCourseList.mockResolvedValue();\n+\n+    const selectOrAddInfo: SelectionSessionInfo = {\n+      ...basicSelectionSessionInfo,\n+      layout: \"search\",\n+    };\n+\n+    const {\n+      summaryPage,\n+      allAttachments,\n+      attachment,\n+    } = languageStrings.searchpage.selectResource;\n+    const STRUCTURED = \"structured\";\n+    const SELECT_OR_ADD = \"selectOrAdd\";\n+    const selectForCourseFunc =\n+      SelectionSessionModule.selectResourceForCourseList;\n+    const selectForNonCourseFunc =\n+      SelectionSessionModule.selectResourceForNonCourseList;\n+\n+    it.each([", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4fdffe74ca53201cbe4305086616c114398755"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcwMTk4NA==", "bodyText": "What about adding a test to check these buttons disappear in non-Selection Sessions ?", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530701984", "createdAt": "2020-11-26T00:07:44Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/components/SearchResult.test.tsx", "diffHunk": "@@ -172,19 +180,78 @@ describe(\"<SearchResult/>\", () => {\n     );\n   });\n \n-  it.each<[string]>([\n-    [languageStrings.searchpage.selectResource.summaryPage],\n-    [languageStrings.searchpage.selectResource.allAttachments],\n-    [languageStrings.searchpage.selectResource.attachment],\n-  ])(\n-    // todo: pass event handler in and check if it has been called.\n-    \"should display buttons for %s in Selection Session\",\n-    async (buttonLabel: string) => {\n-      updateMockRenderData();\n-      const { queryByLabelText } = await renderSearchResult(\n-        mockData.attachSearchObj\n-      );\n-      expect(queryByLabelText(buttonLabel)).toBeInTheDocument();\n-    }\n-  );\n+  describe(\"In Selection Session\", () => {\n+    const mockGlobalCourseList = jest.spyOn(\n+      SelectionSessionModule,\n+      \"getGlobalCourseList\"\n+    );\n+    mockGlobalCourseList.mockReturnValue({ updateCourseList: jest.fn() });\n+\n+    const mockSelectResourceForCourseList = jest.spyOn(\n+      SelectionSessionModule,\n+      \"selectResourceForCourseList\"\n+    );\n+    mockSelectResourceForCourseList.mockResolvedValue();\n+\n+    const mockSelectResourceForNonCourseList = jest.spyOn(\n+      SelectionSessionModule,\n+      \"selectResourceForNonCourseList\"\n+    );\n+    mockSelectResourceForNonCourseList.mockResolvedValue();\n+\n+    const selectOrAddInfo: SelectionSessionInfo = {\n+      ...basicSelectionSessionInfo,\n+      layout: \"search\",\n+    };\n+\n+    const {\n+      summaryPage,\n+      allAttachments,\n+      attachment,\n+    } = languageStrings.searchpage.selectResource;\n+    const STRUCTURED = \"structured\";\n+    const SELECT_OR_ADD = \"selectOrAdd\";\n+    const selectForCourseFunc =\n+      SelectionSessionModule.selectResourceForCourseList;\n+    const selectForNonCourseFunc =\n+      SelectionSessionModule.selectResourceForNonCourseList;\n+\n+    it.each([", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEzOTA5MQ=="}, "originalCommit": {"oid": "7f4fdffe74ca53201cbe4305086616c114398755"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDkwMTQyOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SelectionSessionModule.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNjo1ODoxM1rOH5ldBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNjo1ODoxM1rOH5ldBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE0NDUxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Select resources in 'structured'. The approach is to call the server ajax method 'reloadFolder'\n          \n          \n            \n             * Select resources in 'structured'. The approach is to call the server AJAX method 'reloadFolder'", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530144519", "createdAt": "2020-11-25T06:58:13Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SelectionSessionModule.ts", "diffHunk": "@@ -42,19 +155,120 @@ export const buildSelectionSessionItemSummaryLink = (\n   uuid: string,\n   version: number\n ): string => {\n-  const selectionSessionInfo = getRenderData()?.selectionSessionInfo;\n-  if (isSelectionSessionInfo(selectionSessionInfo)) {\n-    const { stateId, integId, layout } = selectionSessionInfo;\n-    const itemSummaryPageLink = AppConfig.baseUrl.concat(\n-      `items/${uuid}/${version}/?_sl.stateId=${stateId}&a=${layout}`\n-    );\n-\n-    // integId can be null in 'Resource Selector'.\n-    if (integId) {\n-      return itemSummaryPageLink.concat(`&_int.id=${integId}`);\n-    }\n-    return itemSummaryPageLink;\n-  } else {\n-    throw new TypeError(\"The type of Selection Session Info is incorrect.\");\n+  const { stateId, integId, layout } = getSelectionSessionInfo();\n+  const itemSummaryPageLink = AppConfig.baseUrl.concat(\n+    `items/${uuid}/${version}/?_sl.stateId=${stateId}&a=${layout}`\n+  );\n+\n+  // integId can be null in 'Resource Selector'.\n+  if (integId) {\n+    return itemSummaryPageLink.concat(`&_int.id=${integId}`);\n   }\n+  return itemSummaryPageLink;\n+};\n+\n+/**\n+ * Update the content of DIV \"selection-summary\". This function is primarily for\n+ * 'selectOrAdd' mode. In this mode, what is returned from 'searching.do' is an\n+ * object of 'LegacyContentResponse'.\n+ *\n+ * So we need to convert the HTML string to a Document, and then extract the content\n+ * of node \"selection-summary\", and lastly use jQuery to update the DOM.\n+ *\n+ * @param legacyContent An object of LegacyContentResponse returned from server\n+ */\n+const updateSelectionSummary = (legacyContent: LegacyContentResponse) => {\n+  const bodyContent = new DOMParser().parseFromString(\n+    legacyContent.html.body,\n+    \"text/html\"\n+  );\n+  const selectionSummary = bodyContent.getElementById(\"selection-summary\");\n+  if (!selectionSummary) {\n+    throw new Error(\"Failed to update Selection Summary.\");\n+  }\n+  $(\"#selection-summary\").html(selectionSummary.innerHTML);\n+};\n+\n+/**\n+ * Select resources in 'structured'. The approach is to call the server ajax method 'reloadFolder'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4fdffe74ca53201cbe4305086616c114398755"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDkwNzE3OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SelectionSessionModule.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNzowMDoyOFrOH5lgXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMToxNDowMlrOH6If4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE0NTM3Mw==", "bodyText": "So is this:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              return submitSelection(\n          \n          \n            \n              return submitSelection<void>(", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530145373", "createdAt": "2020-11-25T07:00:28Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SelectionSessionModule.ts", "diffHunk": "@@ -42,19 +155,120 @@ export const buildSelectionSessionItemSummaryLink = (\n   uuid: string,\n   version: number\n ): string => {\n-  const selectionSessionInfo = getRenderData()?.selectionSessionInfo;\n-  if (isSelectionSessionInfo(selectionSessionInfo)) {\n-    const { stateId, integId, layout } = selectionSessionInfo;\n-    const itemSummaryPageLink = AppConfig.baseUrl.concat(\n-      `items/${uuid}/${version}/?_sl.stateId=${stateId}&a=${layout}`\n-    );\n-\n-    // integId can be null in 'Resource Selector'.\n-    if (integId) {\n-      return itemSummaryPageLink.concat(`&_int.id=${integId}`);\n-    }\n-    return itemSummaryPageLink;\n-  } else {\n-    throw new TypeError(\"The type of Selection Session Info is incorrect.\");\n+  const { stateId, integId, layout } = getSelectionSessionInfo();\n+  const itemSummaryPageLink = AppConfig.baseUrl.concat(\n+    `items/${uuid}/${version}/?_sl.stateId=${stateId}&a=${layout}`\n+  );\n+\n+  // integId can be null in 'Resource Selector'.\n+  if (integId) {\n+    return itemSummaryPageLink.concat(`&_int.id=${integId}`);\n   }\n+  return itemSummaryPageLink;\n+};\n+\n+/**\n+ * Update the content of DIV \"selection-summary\". This function is primarily for\n+ * 'selectOrAdd' mode. In this mode, what is returned from 'searching.do' is an\n+ * object of 'LegacyContentResponse'.\n+ *\n+ * So we need to convert the HTML string to a Document, and then extract the content\n+ * of node \"selection-summary\", and lastly use jQuery to update the DOM.\n+ *\n+ * @param legacyContent An object of LegacyContentResponse returned from server\n+ */\n+const updateSelectionSummary = (legacyContent: LegacyContentResponse) => {\n+  const bodyContent = new DOMParser().parseFromString(\n+    legacyContent.html.body,\n+    \"text/html\"\n+  );\n+  const selectionSummary = bodyContent.getElementById(\"selection-summary\");\n+  if (!selectionSummary) {\n+    throw new Error(\"Failed to update Selection Summary.\");\n+  }\n+  $(\"#selection-summary\").html(selectionSummary.innerHTML);\n+};\n+\n+/**\n+ * Select resources in 'structured'. The approach is to call the server ajax method 'reloadFolder'\n+ * which is defined in 'CourseListSection'. The parameter passed to this method is a JSON string\n+ * converted from an object of 'CourseListFolderAjaxUpdateData'.\n+ */\n+export const selectResourceForCourseList = (\n+  itemKey: string,\n+  attachmentUUIDs: string[] = []\n+): Promise<void> => {\n+  const serverSideEvent: (string | null)[] =\n+    attachmentUUIDs.length > 0\n+      ? [\n+          \"_slcl.selectAllAttachments\",\n+          `${attachmentUUIDs.join(\",\")}`,\n+          `${itemKey}`,\n+          null,\n+        ]\n+      : [\"_slcl.selectItem\", `${itemKey}`, null];\n+\n+  const courseListUpdateData: CourseListFolderAjaxUpdateData = {\n+    ajaxIds: [\"courselistajax\"],\n+    event: serverSideEvent,\n+  };\n+\n+  const postData: SelectionSessionPostData = {\n+    event__: [\"_slcl.reloadFolder\"], // This refers to the method 'reloadFolder' defined in 'CourseListSection'.\n+    eventp__0: [`${JSON.stringify(courseListUpdateData)}`],\n+    ...getBasicPostData(),\n+  };\n+\n+  return submitSelection(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4fdffe74ca53201cbe4305086616c114398755"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcxODY4OA==", "bodyText": "I think we should use unknown  as this type is for the parameter passed to the callback, which is unknown in this case.\n updateCourseList: (data: unknown) => void;", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530718688", "createdAt": "2020-11-26T01:14:02Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SelectionSessionModule.ts", "diffHunk": "@@ -42,19 +155,120 @@ export const buildSelectionSessionItemSummaryLink = (\n   uuid: string,\n   version: number\n ): string => {\n-  const selectionSessionInfo = getRenderData()?.selectionSessionInfo;\n-  if (isSelectionSessionInfo(selectionSessionInfo)) {\n-    const { stateId, integId, layout } = selectionSessionInfo;\n-    const itemSummaryPageLink = AppConfig.baseUrl.concat(\n-      `items/${uuid}/${version}/?_sl.stateId=${stateId}&a=${layout}`\n-    );\n-\n-    // integId can be null in 'Resource Selector'.\n-    if (integId) {\n-      return itemSummaryPageLink.concat(`&_int.id=${integId}`);\n-    }\n-    return itemSummaryPageLink;\n-  } else {\n-    throw new TypeError(\"The type of Selection Session Info is incorrect.\");\n+  const { stateId, integId, layout } = getSelectionSessionInfo();\n+  const itemSummaryPageLink = AppConfig.baseUrl.concat(\n+    `items/${uuid}/${version}/?_sl.stateId=${stateId}&a=${layout}`\n+  );\n+\n+  // integId can be null in 'Resource Selector'.\n+  if (integId) {\n+    return itemSummaryPageLink.concat(`&_int.id=${integId}`);\n   }\n+  return itemSummaryPageLink;\n+};\n+\n+/**\n+ * Update the content of DIV \"selection-summary\". This function is primarily for\n+ * 'selectOrAdd' mode. In this mode, what is returned from 'searching.do' is an\n+ * object of 'LegacyContentResponse'.\n+ *\n+ * So we need to convert the HTML string to a Document, and then extract the content\n+ * of node \"selection-summary\", and lastly use jQuery to update the DOM.\n+ *\n+ * @param legacyContent An object of LegacyContentResponse returned from server\n+ */\n+const updateSelectionSummary = (legacyContent: LegacyContentResponse) => {\n+  const bodyContent = new DOMParser().parseFromString(\n+    legacyContent.html.body,\n+    \"text/html\"\n+  );\n+  const selectionSummary = bodyContent.getElementById(\"selection-summary\");\n+  if (!selectionSummary) {\n+    throw new Error(\"Failed to update Selection Summary.\");\n+  }\n+  $(\"#selection-summary\").html(selectionSummary.innerHTML);\n+};\n+\n+/**\n+ * Select resources in 'structured'. The approach is to call the server ajax method 'reloadFolder'\n+ * which is defined in 'CourseListSection'. The parameter passed to this method is a JSON string\n+ * converted from an object of 'CourseListFolderAjaxUpdateData'.\n+ */\n+export const selectResourceForCourseList = (\n+  itemKey: string,\n+  attachmentUUIDs: string[] = []\n+): Promise<void> => {\n+  const serverSideEvent: (string | null)[] =\n+    attachmentUUIDs.length > 0\n+      ? [\n+          \"_slcl.selectAllAttachments\",\n+          `${attachmentUUIDs.join(\",\")}`,\n+          `${itemKey}`,\n+          null,\n+        ]\n+      : [\"_slcl.selectItem\", `${itemKey}`, null];\n+\n+  const courseListUpdateData: CourseListFolderAjaxUpdateData = {\n+    ajaxIds: [\"courselistajax\"],\n+    event: serverSideEvent,\n+  };\n+\n+  const postData: SelectionSessionPostData = {\n+    event__: [\"_slcl.reloadFolder\"], // This refers to the method 'reloadFolder' defined in 'CourseListSection'.\n+    eventp__0: [`${JSON.stringify(courseListUpdateData)}`],\n+    ...getBasicPostData(),\n+  };\n+\n+  return submitSelection(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE0NTM3Mw=="}, "originalCommit": {"oid": "7f4fdffe74ca53201cbe4305086616c114398755"}, "originalPosition": 211}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDkyOTY5OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/resources/web/scripts/courselist.js", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNzowOToyN1rOH5ltcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMjo1OToxMFrOH6GZFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE0ODcyMA==", "bodyText": "Was this pushed into a function to allow you to call from TS side?", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530148720", "createdAt": "2020-11-25T07:09:27Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/resources/web/scripts/courselist.js", "diffHunk": "@@ -184,29 +184,34 @@ var CourseList = {\n \t\t\t}\n \t\t\tfid = $checked.attr('id').substring('folder_'.length);\n \t\t}\n-\t\t\n+\n \t\t//TODO: shouldn't need to tell the server the selected folder\n \t\tvar reloadData = {\n \t\t\t\tajaxIds : ajaxIds,\n \t\t\t\tfolderId : fid,\n \t\t\t\tevent : eventArgs\n \t\t\t};\n-\t\t\n+\n \t\tajax(function(result)\n \t\t{\n \t\t\tupdateIncludes(result, function()\n \t\t\t{\n-\t\t\t\tvar $tree = $(\".foldertree\");\n-\t\t\t\tif (!$tree.length)\n-\t\t\t\t{\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\tvar folderId = result.folderId;\n-\t\t\t\tvar newTree = result.updates['courselistajax'];\n-\t\t\t\tvar $newTree = $(newTree.html);\n-\t\t\t\t$tree.find('[data-folderid=\"' + folderId + '\"]').replaceWith($newTree.find('[data-folderid=\"' + folderId + '\"]'));\n-\t\t\t\t$(document).trigger('equella_courselistupdate');\n+        CourseList.updateCourseList(result);\n \t\t\t});\n \t\t}, JSON.stringify(reloadData));\n-\t}\n+\t},\n+\n+  updateCourseList: function(result) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4fdffe74ca53201cbe4305086616c114398755"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY3ODc4MA==", "bodyText": "Yes it's. It was part of updateTargetFolder", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530678780", "createdAt": "2020-11-25T22:41:45Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/resources/web/scripts/courselist.js", "diffHunk": "@@ -184,29 +184,34 @@ var CourseList = {\n \t\t\t}\n \t\t\tfid = $checked.attr('id').substring('folder_'.length);\n \t\t}\n-\t\t\n+\n \t\t//TODO: shouldn't need to tell the server the selected folder\n \t\tvar reloadData = {\n \t\t\t\tajaxIds : ajaxIds,\n \t\t\t\tfolderId : fid,\n \t\t\t\tevent : eventArgs\n \t\t\t};\n-\t\t\n+\n \t\tajax(function(result)\n \t\t{\n \t\t\tupdateIncludes(result, function()\n \t\t\t{\n-\t\t\t\tvar $tree = $(\".foldertree\");\n-\t\t\t\tif (!$tree.length)\n-\t\t\t\t{\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\tvar folderId = result.folderId;\n-\t\t\t\tvar newTree = result.updates['courselistajax'];\n-\t\t\t\tvar $newTree = $(newTree.html);\n-\t\t\t\t$tree.find('[data-folderid=\"' + folderId + '\"]').replaceWith($newTree.find('[data-folderid=\"' + folderId + '\"]'));\n-\t\t\t\t$(document).trigger('equella_courselistupdate');\n+        CourseList.updateCourseList(result);\n \t\t\t});\n \t\t}, JSON.stringify(reloadData));\n-\t}\n+\t},\n+\n+  updateCourseList: function(result) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE0ODcyMA=="}, "originalCommit": {"oid": "7f4fdffe74ca53201cbe4305086616c114398755"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY4NDE4Mw==", "bodyText": "Yes, we use this function in SelectionSessionModule.ts", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530684183", "createdAt": "2020-11-25T22:59:10Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/resources/web/scripts/courselist.js", "diffHunk": "@@ -184,29 +184,34 @@ var CourseList = {\n \t\t\t}\n \t\t\tfid = $checked.attr('id').substring('folder_'.length);\n \t\t}\n-\t\t\n+\n \t\t//TODO: shouldn't need to tell the server the selected folder\n \t\tvar reloadData = {\n \t\t\t\tajaxIds : ajaxIds,\n \t\t\t\tfolderId : fid,\n \t\t\t\tevent : eventArgs\n \t\t\t};\n-\t\t\n+\n \t\tajax(function(result)\n \t\t{\n \t\t\tupdateIncludes(result, function()\n \t\t\t{\n-\t\t\t\tvar $tree = $(\".foldertree\");\n-\t\t\t\tif (!$tree.length)\n-\t\t\t\t{\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\tvar folderId = result.folderId;\n-\t\t\t\tvar newTree = result.updates['courselistajax'];\n-\t\t\t\tvar $newTree = $(newTree.html);\n-\t\t\t\t$tree.find('[data-folderid=\"' + folderId + '\"]').replaceWith($newTree.find('[data-folderid=\"' + folderId + '\"]'));\n-\t\t\t\t$(document).trigger('equella_courselistupdate');\n+        CourseList.updateCourseList(result);\n \t\t\t});\n \t\t}, JSON.stringify(reloadData));\n-\t}\n+\t},\n+\n+  updateCourseList: function(result) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE0ODcyMA=="}, "originalCommit": {"oid": "7f4fdffe74ca53201cbe4305086616c114398755"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDkzMTYyOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/resources/web/scripts/courselist.js", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNzoxMDowN1rOH5lujQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMDo1NDoxMlrOH6ILjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE0OTAwNQ==", "bodyText": "This seems like a significant change and removal of an optimisation. Could you explain the backstory here please?", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530149005", "createdAt": "2020-11-25T07:10:07Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/resources/web/scripts/courselist.js", "diffHunk": "@@ -184,29 +184,34 @@ var CourseList = {\n \t\t\t}\n \t\t\tfid = $checked.attr('id').substring('folder_'.length);\n \t\t}\n-\t\t\n+\n \t\t//TODO: shouldn't need to tell the server the selected folder\n \t\tvar reloadData = {\n \t\t\t\tajaxIds : ajaxIds,\n \t\t\t\tfolderId : fid,\n \t\t\t\tevent : eventArgs\n \t\t\t};\n-\t\t\n+\n \t\tajax(function(result)\n \t\t{\n \t\t\tupdateIncludes(result, function()\n \t\t\t{\n-\t\t\t\tvar $tree = $(\".foldertree\");\n-\t\t\t\tif (!$tree.length)\n-\t\t\t\t{\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\tvar folderId = result.folderId;\n-\t\t\t\tvar newTree = result.updates['courselistajax'];\n-\t\t\t\tvar $newTree = $(newTree.html);\n-\t\t\t\t$tree.find('[data-folderid=\"' + folderId + '\"]').replaceWith($newTree.find('[data-folderid=\"' + folderId + '\"]'));\n-\t\t\t\t$(document).trigger('equella_courselistupdate');\n+        CourseList.updateCourseList(result);\n \t\t\t});\n \t\t}, JSON.stringify(reloadData));\n-\t}\n+\t},\n+\n+  updateCourseList: function(result) {\n+    var $tree = $(\".foldertree\");\n+    if (!$tree.length)\n+    {\n+      return;\n+    }\n+    var folderId = result.folderId;\n+    var newTree = result.updates['courselistajax'];\n+    var $newTree = $(newTree.html);\n+    // Update the whole folder tree rather than a single node.\n+    $tree.html($newTree.find(\".foldertree\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4fdffe74ca53201cbe4305086616c114398755"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY4MzUyMw==", "bodyText": "With previous code, if we want to remove some selected resources in the dialog, when we close the dialog, we will only see that the currently selected course gets its UI updated.\nFor example, course A has two resources and course B has one. And B is currently selected.\nSo in the course list we should see\nA   (2)\nB   (1)\n\nAnd then we remove all selected resources and it's expected to see\nA   (0)\nB   (0)\n\nBut what is actually displayed is\nA   (2)\nB   (0)\n\nA does not get updated. If we navigate to a different page which results in a page refresh, we will see the correct UI.", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530683523", "createdAt": "2020-11-25T22:56:52Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/resources/web/scripts/courselist.js", "diffHunk": "@@ -184,29 +184,34 @@ var CourseList = {\n \t\t\t}\n \t\t\tfid = $checked.attr('id').substring('folder_'.length);\n \t\t}\n-\t\t\n+\n \t\t//TODO: shouldn't need to tell the server the selected folder\n \t\tvar reloadData = {\n \t\t\t\tajaxIds : ajaxIds,\n \t\t\t\tfolderId : fid,\n \t\t\t\tevent : eventArgs\n \t\t\t};\n-\t\t\n+\n \t\tajax(function(result)\n \t\t{\n \t\t\tupdateIncludes(result, function()\n \t\t\t{\n-\t\t\t\tvar $tree = $(\".foldertree\");\n-\t\t\t\tif (!$tree.length)\n-\t\t\t\t{\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\tvar folderId = result.folderId;\n-\t\t\t\tvar newTree = result.updates['courselistajax'];\n-\t\t\t\tvar $newTree = $(newTree.html);\n-\t\t\t\t$tree.find('[data-folderid=\"' + folderId + '\"]').replaceWith($newTree.find('[data-folderid=\"' + folderId + '\"]'));\n-\t\t\t\t$(document).trigger('equella_courselistupdate');\n+        CourseList.updateCourseList(result);\n \t\t\t});\n \t\t}, JSON.stringify(reloadData));\n-\t}\n+\t},\n+\n+  updateCourseList: function(result) {\n+    var $tree = $(\".foldertree\");\n+    if (!$tree.length)\n+    {\n+      return;\n+    }\n+    var folderId = result.folderId;\n+    var newTree = result.updates['courselistajax'];\n+    var $newTree = $(newTree.html);\n+    // Update the whole folder tree rather than a single node.\n+    $tree.html($newTree.find(\".foldertree\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE0OTAwNQ=="}, "originalCommit": {"oid": "7f4fdffe74ca53201cbe4305086616c114398755"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcwNzQ1OA==", "bodyText": "Okay, but... Does that mean this is effectively fixing a bug in the Legacy mode too? Or more so, that bug was just not exhibited due to a server side re-render?", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530707458", "createdAt": "2020-11-26T00:30:35Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/resources/web/scripts/courselist.js", "diffHunk": "@@ -184,29 +184,34 @@ var CourseList = {\n \t\t\t}\n \t\t\tfid = $checked.attr('id').substring('folder_'.length);\n \t\t}\n-\t\t\n+\n \t\t//TODO: shouldn't need to tell the server the selected folder\n \t\tvar reloadData = {\n \t\t\t\tajaxIds : ajaxIds,\n \t\t\t\tfolderId : fid,\n \t\t\t\tevent : eventArgs\n \t\t\t};\n-\t\t\n+\n \t\tajax(function(result)\n \t\t{\n \t\t\tupdateIncludes(result, function()\n \t\t\t{\n-\t\t\t\tvar $tree = $(\".foldertree\");\n-\t\t\t\tif (!$tree.length)\n-\t\t\t\t{\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\tvar folderId = result.folderId;\n-\t\t\t\tvar newTree = result.updates['courselistajax'];\n-\t\t\t\tvar $newTree = $(newTree.html);\n-\t\t\t\t$tree.find('[data-folderid=\"' + folderId + '\"]').replaceWith($newTree.find('[data-folderid=\"' + folderId + '\"]'));\n-\t\t\t\t$(document).trigger('equella_courselistupdate');\n+        CourseList.updateCourseList(result);\n \t\t\t});\n \t\t}, JSON.stringify(reloadData));\n-\t}\n+\t},\n+\n+  updateCourseList: function(result) {\n+    var $tree = $(\".foldertree\");\n+    if (!$tree.length)\n+    {\n+      return;\n+    }\n+    var folderId = result.folderId;\n+    var newTree = result.updates['courselistajax'];\n+    var $newTree = $(newTree.html);\n+    // Update the whole folder tree rather than a single node.\n+    $tree.html($newTree.find(\".foldertree\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE0OTAwNQ=="}, "originalCommit": {"oid": "7f4fdffe74ca53201cbe4305086616c114398755"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcxMzQ4NQ==", "bodyText": "Yes it also fixes this bug for Legacy mode.  And yes again, this bug was hidden due to a server side re-render.\nYou can search versionDialog.setOkCallback in CourseListSection, and you will see the callback was a ReloadFunction which is used to reload the page I reckon.", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530713485", "createdAt": "2020-11-26T00:54:12Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/resources/web/scripts/courselist.js", "diffHunk": "@@ -184,29 +184,34 @@ var CourseList = {\n \t\t\t}\n \t\t\tfid = $checked.attr('id').substring('folder_'.length);\n \t\t}\n-\t\t\n+\n \t\t//TODO: shouldn't need to tell the server the selected folder\n \t\tvar reloadData = {\n \t\t\t\tajaxIds : ajaxIds,\n \t\t\t\tfolderId : fid,\n \t\t\t\tevent : eventArgs\n \t\t\t};\n-\t\t\n+\n \t\tajax(function(result)\n \t\t{\n \t\t\tupdateIncludes(result, function()\n \t\t\t{\n-\t\t\t\tvar $tree = $(\".foldertree\");\n-\t\t\t\tif (!$tree.length)\n-\t\t\t\t{\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\tvar folderId = result.folderId;\n-\t\t\t\tvar newTree = result.updates['courselistajax'];\n-\t\t\t\tvar $newTree = $(newTree.html);\n-\t\t\t\t$tree.find('[data-folderid=\"' + folderId + '\"]').replaceWith($newTree.find('[data-folderid=\"' + folderId + '\"]'));\n-\t\t\t\t$(document).trigger('equella_courselistupdate');\n+        CourseList.updateCourseList(result);\n \t\t\t});\n \t\t}, JSON.stringify(reloadData));\n-\t}\n+\t},\n+\n+  updateCourseList: function(result) {\n+    var $tree = $(\".foldertree\");\n+    if (!$tree.length)\n+    {\n+      return;\n+    }\n+    var folderId = result.folderId;\n+    var newTree = result.updates['courselistajax'];\n+    var $newTree = $(newTree.html);\n+    // Update the whole folder tree rather than a single node.\n+    $tree.html($newTree.find(\".foldertree\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE0OTAwNQ=="}, "originalCommit": {"oid": "7f4fdffe74ca53201cbe4305086616c114398755"}, "originalPosition": 193}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDk0NzA1OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/web/itemlist/standard/AbstractItemlikeListAttachmentDisplaySection.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNzoxNTo1MlrOH5l3lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMToyMDo1MVrOH6InLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE1MTMxOQ==", "bodyText": "Sorry, I've lost track of the threads. Where is this triggered from?", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530151319", "createdAt": "2020-11-25T07:15:52Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/web/itemlist/standard/AbstractItemlikeListAttachmentDisplaySection.java", "diffHunk": "@@ -396,7 +394,42 @@ public void selectAttachment(\n     final AttachmentDisplayModel<I> model = getModel(info);\n     model.setShow(true);\n     model.setItemId(itemId);\n+  }\n+\n+  private void addAttachment(\n+      SectionInfo info, String attachmentUuid, ItemId itemId, String extensionType) {\n+    final IAttachment attachment =\n+        new UnmodifiableAttachments(getCachedItem(info, itemId))\n+            .getAttachmentByUuid(attachmentUuid);\n+    if (attachment != null) {\n+      final ViewableItem<I> viewableItem = getViewableItem(getItem(itemId));\n+      final SelectAttachmentHandler selectAttachmentHandler =\n+          selectionService.getSelectAttachmentHandler(info, viewableItem, attachmentUuid);\n+      if (selectAttachmentHandler != null) {\n+        selectAttachmentHandler.handleAttachmentSelection(\n+            info, itemId, attachment, extensionType, true);\n+      }\n+    }\n+  }\n \n+  @EventHandlerMethod\n+  public void selectAttachmentsFromNewSearch(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4fdffe74ca53201cbe4305086616c114398755"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY4NzcyMQ==", "bodyText": "The only usage of this is in SelectionSessionModule.ts. There is an existing one named selectAttachment, and there are two key differences:\n\nthis one will not unselect an attachment if the button is clicked again.\nthis one supports selecting multiple attachments.", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530687721", "createdAt": "2020-11-25T23:11:51Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/web/itemlist/standard/AbstractItemlikeListAttachmentDisplaySection.java", "diffHunk": "@@ -396,7 +394,42 @@ public void selectAttachment(\n     final AttachmentDisplayModel<I> model = getModel(info);\n     model.setShow(true);\n     model.setItemId(itemId);\n+  }\n+\n+  private void addAttachment(\n+      SectionInfo info, String attachmentUuid, ItemId itemId, String extensionType) {\n+    final IAttachment attachment =\n+        new UnmodifiableAttachments(getCachedItem(info, itemId))\n+            .getAttachmentByUuid(attachmentUuid);\n+    if (attachment != null) {\n+      final ViewableItem<I> viewableItem = getViewableItem(getItem(itemId));\n+      final SelectAttachmentHandler selectAttachmentHandler =\n+          selectionService.getSelectAttachmentHandler(info, viewableItem, attachmentUuid);\n+      if (selectAttachmentHandler != null) {\n+        selectAttachmentHandler.handleAttachmentSelection(\n+            info, itemId, attachment, extensionType, true);\n+      }\n+    }\n+  }\n \n+  @EventHandlerMethod\n+  public void selectAttachmentsFromNewSearch(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE1MTMxOQ=="}, "originalCommit": {"oid": "7f4fdffe74ca53201cbe4305086616c114398755"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcwNzY1MQ==", "bodyText": "Ah! How it is triggered? Just but building up the correct events etc for the POST?", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530707651", "createdAt": "2020-11-26T00:31:31Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/web/itemlist/standard/AbstractItemlikeListAttachmentDisplaySection.java", "diffHunk": "@@ -396,7 +394,42 @@ public void selectAttachment(\n     final AttachmentDisplayModel<I> model = getModel(info);\n     model.setShow(true);\n     model.setItemId(itemId);\n+  }\n+\n+  private void addAttachment(\n+      SectionInfo info, String attachmentUuid, ItemId itemId, String extensionType) {\n+    final IAttachment attachment =\n+        new UnmodifiableAttachments(getCachedItem(info, itemId))\n+            .getAttachmentByUuid(attachmentUuid);\n+    if (attachment != null) {\n+      final ViewableItem<I> viewableItem = getViewableItem(getItem(itemId));\n+      final SelectAttachmentHandler selectAttachmentHandler =\n+          selectionService.getSelectAttachmentHandler(info, viewableItem, attachmentUuid);\n+      if (selectAttachmentHandler != null) {\n+        selectAttachmentHandler.handleAttachmentSelection(\n+            info, itemId, attachment, extensionType, true);\n+      }\n+    }\n+  }\n \n+  @EventHandlerMethod\n+  public void selectAttachmentsFromNewSearch(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE1MTMxOQ=="}, "originalCommit": {"oid": "7f4fdffe74ca53201cbe4305086616c114398755"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyMDU1OA==", "bodyText": "Yes, but we must tell the server the correct section, which is ilad here.\nilad is probably the short name of AbstractItemlikeListAttachmentDisplaySection.\nThat is why I did\n event__: [`ilad.selectAttachmentsFromNewSearch`],\n\nI am pretty sure I have seen how server processes this event__ and finds the matched method from the section. But I can't remember much detail now...", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530720558", "createdAt": "2020-11-26T01:20:51Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/web/itemlist/standard/AbstractItemlikeListAttachmentDisplaySection.java", "diffHunk": "@@ -396,7 +394,42 @@ public void selectAttachment(\n     final AttachmentDisplayModel<I> model = getModel(info);\n     model.setShow(true);\n     model.setItemId(itemId);\n+  }\n+\n+  private void addAttachment(\n+      SectionInfo info, String attachmentUuid, ItemId itemId, String extensionType) {\n+    final IAttachment attachment =\n+        new UnmodifiableAttachments(getCachedItem(info, itemId))\n+            .getAttachmentByUuid(attachmentUuid);\n+    if (attachment != null) {\n+      final ViewableItem<I> viewableItem = getViewableItem(getItem(itemId));\n+      final SelectAttachmentHandler selectAttachmentHandler =\n+          selectionService.getSelectAttachmentHandler(info, viewableItem, attachmentUuid);\n+      if (selectAttachmentHandler != null) {\n+        selectAttachmentHandler.handleAttachmentSelection(\n+            info, itemId, attachment, extensionType, true);\n+      }\n+    }\n+  }\n \n+  @EventHandlerMethod\n+  public void selectAttachmentsFromNewSearch(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE1MTMxOQ=="}, "originalCommit": {"oid": "7f4fdffe74ca53201cbe4305086616c114398755"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyOTAzMDUyOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/modules/LegacySelectionSessionModule.test.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNToyMDo1OFrOH6MN7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNTo0NjowMFrOH6MnBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc3OTYzMQ==", "bodyText": "That's odd. Are you aware this is sitting in the buildPostDataForStructured describe block?", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530779631", "createdAt": "2020-11-26T05:20:58Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/modules/LegacySelectionSessionModule.test.ts", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import { getSearchResult } from \"../../../__mocks__/SearchResult.mock\";\n+import type { RenderData } from \"../../../tsrc/AppConfig\";\n+import {\n+  buildPostDataForSelectOrAdd,\n+  buildPostDataForStructured,\n+  buildSelectionSessionItemSummaryLink,\n+  isSelectionSessionOpen,\n+  SelectionSessionPostData,\n+} from \"../../../tsrc/modules/LegacySelectionSessionModule\";\n+import { languageStrings } from \"../../../tsrc/util/langstrings\";\n+import {\n+  basicRenderData,\n+  renderDataForSelectOrAdd,\n+  updateMockGetRenderData,\n+  withIntegId,\n+} from \"../RenderDataHelper\";\n+\n+const {\n+  summaryPage: selectSummaryPageString,\n+  allAttachments: selectAllAttachmentsString,\n+  attachment: selectAttachmentString,\n+} = languageStrings.searchpage.selectResource;\n+const itemKey = \"72558c1d-8788-4515-86c8-b24a28cc451e/1\";\n+const attachmentUUID = \"4c636d7e-21fe-4202-b7de-2e8a728b8ffc\";\n+const attachmentUUIDs = [\n+  \"4c636d7e-21fe-4202-b7de-2e8a728b8ffc\",\n+  \"29e0fe1b-dbd6-4c98-9e7a-d957d9c731f5\",\n+];\n+\n+describe(\"buildSelectionSessionItemSummaryLink\", () => {\n+  const { uuid, version } = getSearchResult.results[0];\n+\n+  it(\"builds basic URLs for accessing ItemSummary pages in Selection Session mode\", () => {\n+    updateMockGetRenderData(basicRenderData);\n+    const link = buildSelectionSessionItemSummaryLink(uuid, version);\n+    expect(link).toBe(\n+      \"items/9b9bf5a9-c5af-490b-88fe-7e330679fad2/1/?_sl.stateId=1&a=coursesearch\"\n+    );\n+  });\n+\n+  it(\"will include the Integration ID in the URL if provided in SelectionSessionInfo\", () => {\n+    updateMockGetRenderData({\n+      ...basicRenderData,\n+      selectionSessionInfo: withIntegId,\n+    });\n+\n+    const link = buildSelectionSessionItemSummaryLink(uuid, version);\n+    expect(link).toBe(\n+      \"items/9b9bf5a9-c5af-490b-88fe-7e330679fad2/1/?_sl.stateId=1&a=coursesearch&_int.id=2\"\n+    );\n+  });\n+});\n+\n+describe(\"isSelectionSessionOpen\", () => {\n+  it.each<[string, boolean, RenderData | undefined]>([\n+    [\"RenderData includes SelectionSessionInfo\", true, basicRenderData],\n+    [\n+      \"selectionSessionInfo is null\",\n+      false,\n+      { ...basicRenderData, selectionSessionInfo: null },\n+    ],\n+    [\"renderData is undefined\", false, undefined],\n+  ])(\n+    \"when %s return %s\",\n+    (\n+      when: string,\n+      inSelectionSession: boolean,\n+      renderData: RenderData | undefined\n+    ) => {\n+      updateMockGetRenderData(renderData);\n+      expect(isSelectionSessionOpen()).toBe(inSelectionSession);\n+    }\n+  );\n+});\n+\n+describe(\"buildPostDataForStructured\", () => {\n+  const basicPostData = {\n+    \"_sl.stateId\": [\"1\"],\n+    a: [\"coursesearch\"],\n+    event__: [\"_slcl.reloadFolder\"],\n+  };\n+  const ajaxIds = `\"ajaxIds\":[\"courselistajax\"]`;\n+\n+  const itemSummaryData: SelectionSessionPostData = {\n+    ...basicPostData,\n+    eventp__0: [`{${ajaxIds},\"event\":[\"_slcl.selectItem\",\"${itemKey}\",null]}`],\n+  };\n+\n+  const oneAttachmentData: SelectionSessionPostData = {\n+    ...basicPostData,\n+    eventp__0: [\n+      `{${ajaxIds},\"event\":[\"_slcl.selectAllAttachments\",\"${attachmentUUID}\",\"${itemKey}\",null]}`,\n+    ],\n+  };\n+\n+  const allAttachmentsData: SelectionSessionPostData = {\n+    ...basicPostData,\n+    eventp__0: [\n+      `{${ajaxIds},\"event\":[\"_slcl.selectAllAttachments\",\"${attachmentUUIDs.join(\n+        \",\"\n+      )}\",\"${itemKey}\",null]}`,\n+    ],\n+  };\n+\n+  it.each<[string, string[], SelectionSessionPostData]>([\n+    [selectSummaryPageString, [], itemSummaryData],\n+    [selectAttachmentString, [attachmentUUID], oneAttachmentData],\n+    [selectAllAttachmentsString, attachmentUUIDs, allAttachmentsData],\n+  ])(\n+    \"builds POST data for %s in 'structured'\",\n+    (\n+      resourceType: string,\n+      attachmentUUIDs: string[],\n+      expectedPostData: SelectionSessionPostData\n+    ) => {\n+      updateMockGetRenderData(basicRenderData);\n+      const data: SelectionSessionPostData = buildPostDataForStructured(\n+        itemKey,\n+        attachmentUUIDs\n+      );\n+      expect(data).toMatchObject(expectedPostData);\n+    }\n+  );\n+\n+  describe(\"buildPostDataForSelectOrAdd\", () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "910096e996f444fcedc7d3b7a7ebad5c2f3d3e06"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc4NjA1Mg==", "bodyText": "oops I will move this describe out.", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530786052", "createdAt": "2020-11-26T05:46:00Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/modules/LegacySelectionSessionModule.test.ts", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import { getSearchResult } from \"../../../__mocks__/SearchResult.mock\";\n+import type { RenderData } from \"../../../tsrc/AppConfig\";\n+import {\n+  buildPostDataForSelectOrAdd,\n+  buildPostDataForStructured,\n+  buildSelectionSessionItemSummaryLink,\n+  isSelectionSessionOpen,\n+  SelectionSessionPostData,\n+} from \"../../../tsrc/modules/LegacySelectionSessionModule\";\n+import { languageStrings } from \"../../../tsrc/util/langstrings\";\n+import {\n+  basicRenderData,\n+  renderDataForSelectOrAdd,\n+  updateMockGetRenderData,\n+  withIntegId,\n+} from \"../RenderDataHelper\";\n+\n+const {\n+  summaryPage: selectSummaryPageString,\n+  allAttachments: selectAllAttachmentsString,\n+  attachment: selectAttachmentString,\n+} = languageStrings.searchpage.selectResource;\n+const itemKey = \"72558c1d-8788-4515-86c8-b24a28cc451e/1\";\n+const attachmentUUID = \"4c636d7e-21fe-4202-b7de-2e8a728b8ffc\";\n+const attachmentUUIDs = [\n+  \"4c636d7e-21fe-4202-b7de-2e8a728b8ffc\",\n+  \"29e0fe1b-dbd6-4c98-9e7a-d957d9c731f5\",\n+];\n+\n+describe(\"buildSelectionSessionItemSummaryLink\", () => {\n+  const { uuid, version } = getSearchResult.results[0];\n+\n+  it(\"builds basic URLs for accessing ItemSummary pages in Selection Session mode\", () => {\n+    updateMockGetRenderData(basicRenderData);\n+    const link = buildSelectionSessionItemSummaryLink(uuid, version);\n+    expect(link).toBe(\n+      \"items/9b9bf5a9-c5af-490b-88fe-7e330679fad2/1/?_sl.stateId=1&a=coursesearch\"\n+    );\n+  });\n+\n+  it(\"will include the Integration ID in the URL if provided in SelectionSessionInfo\", () => {\n+    updateMockGetRenderData({\n+      ...basicRenderData,\n+      selectionSessionInfo: withIntegId,\n+    });\n+\n+    const link = buildSelectionSessionItemSummaryLink(uuid, version);\n+    expect(link).toBe(\n+      \"items/9b9bf5a9-c5af-490b-88fe-7e330679fad2/1/?_sl.stateId=1&a=coursesearch&_int.id=2\"\n+    );\n+  });\n+});\n+\n+describe(\"isSelectionSessionOpen\", () => {\n+  it.each<[string, boolean, RenderData | undefined]>([\n+    [\"RenderData includes SelectionSessionInfo\", true, basicRenderData],\n+    [\n+      \"selectionSessionInfo is null\",\n+      false,\n+      { ...basicRenderData, selectionSessionInfo: null },\n+    ],\n+    [\"renderData is undefined\", false, undefined],\n+  ])(\n+    \"when %s return %s\",\n+    (\n+      when: string,\n+      inSelectionSession: boolean,\n+      renderData: RenderData | undefined\n+    ) => {\n+      updateMockGetRenderData(renderData);\n+      expect(isSelectionSessionOpen()).toBe(inSelectionSession);\n+    }\n+  );\n+});\n+\n+describe(\"buildPostDataForStructured\", () => {\n+  const basicPostData = {\n+    \"_sl.stateId\": [\"1\"],\n+    a: [\"coursesearch\"],\n+    event__: [\"_slcl.reloadFolder\"],\n+  };\n+  const ajaxIds = `\"ajaxIds\":[\"courselistajax\"]`;\n+\n+  const itemSummaryData: SelectionSessionPostData = {\n+    ...basicPostData,\n+    eventp__0: [`{${ajaxIds},\"event\":[\"_slcl.selectItem\",\"${itemKey}\",null]}`],\n+  };\n+\n+  const oneAttachmentData: SelectionSessionPostData = {\n+    ...basicPostData,\n+    eventp__0: [\n+      `{${ajaxIds},\"event\":[\"_slcl.selectAllAttachments\",\"${attachmentUUID}\",\"${itemKey}\",null]}`,\n+    ],\n+  };\n+\n+  const allAttachmentsData: SelectionSessionPostData = {\n+    ...basicPostData,\n+    eventp__0: [\n+      `{${ajaxIds},\"event\":[\"_slcl.selectAllAttachments\",\"${attachmentUUIDs.join(\n+        \",\"\n+      )}\",\"${itemKey}\",null]}`,\n+    ],\n+  };\n+\n+  it.each<[string, string[], SelectionSessionPostData]>([\n+    [selectSummaryPageString, [], itemSummaryData],\n+    [selectAttachmentString, [attachmentUUID], oneAttachmentData],\n+    [selectAllAttachmentsString, attachmentUUIDs, allAttachmentsData],\n+  ])(\n+    \"builds POST data for %s in 'structured'\",\n+    (\n+      resourceType: string,\n+      attachmentUUIDs: string[],\n+      expectedPostData: SelectionSessionPostData\n+    ) => {\n+      updateMockGetRenderData(basicRenderData);\n+      const data: SelectionSessionPostData = buildPostDataForStructured(\n+        itemKey,\n+        attachmentUUIDs\n+      );\n+      expect(data).toMatchObject(expectedPostData);\n+    }\n+  );\n+\n+  describe(\"buildPostDataForSelectOrAdd\", () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc3OTYzMQ=="}, "originalCommit": {"oid": "910096e996f444fcedc7d3b7a7ebad5c2f3d3e06"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyOTA0Njg4OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/components/SearchResult.test.tsx", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNTozMDozNVrOH6MXjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNTo0NDo0OFrOH6Ml2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc4MjA5Mg==", "bodyText": "This could be simplified with:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                const makeSelection = (\n          \n          \n            \n                  selectorLabel: string,\n          \n          \n            \n                  queryByLabelText: (text: string) => HTMLElement | null,\n          \n          \n            \n                  getByLabelText: (text: string) => HTMLElement\n          \n          \n            \n                ) => {\n          \n          \n            \n                  // First, make sure the selector control is active\n          \n          \n            \n                  expect(queryByLabelText(selectorLabel)).toBeInTheDocument();\n          \n          \n            \n                  // And then make a selection by clicking it\n          \n          \n            \n                  fireEvent.click(getByLabelText(selectorLabel));\n          \n          \n            \n                };\n          \n          \n            \n                const makeSelection = (\n          \n          \n            \n                  findSelector: (text: string) => HTMLElement | null,\n          \n          \n            \n                ) => {\n          \n          \n            \n                  const selectorControl = findSelector();\n          \n          \n            \n                  // First, make sure the selector control is active\n          \n          \n            \n                  expect(selectorControl).toBeInTheDocument();\n          \n          \n            \n                  // And then make a selection by clicking it\n          \n          \n            \n                  fireEvent.click(selectorControl);\n          \n          \n            \n                };\n          \n      \n    \n    \n  \n\nAnd that way when you use it you'd only have to:\nmakeSelection(() => queryByLabelText(resourceType));", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530782092", "createdAt": "2020-11-26T05:30:35Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/components/SearchResult.test.tsx", "diffHunk": "@@ -172,19 +191,97 @@ describe(\"<SearchResult/>\", () => {\n     );\n   });\n \n-  it.each<[string]>([\n-    [languageStrings.searchpage.selectResource.summaryPage],\n-    [languageStrings.searchpage.selectResource.allAttachments],\n-    [languageStrings.searchpage.selectResource.attachment],\n-  ])(\n-    // todo: pass event handler in and check if it has been called.\n-    \"should display buttons for %s in Selection Session\",\n-    async (buttonLabel: string) => {\n-      updateMockRenderData();\n-      const { queryByLabelText } = await renderSearchResult(\n-        mockData.attachSearchObj\n-      );\n-      expect(queryByLabelText(buttonLabel)).toBeInTheDocument();\n-    }\n-  );\n+  describe(\"In Selection Session\", () => {\n+    const mockGlobalCourseList = jest.spyOn(\n+      LegacySelectionSessionModule,\n+      \"getGlobalCourseList\"\n+    );\n+    mockGlobalCourseList.mockReturnValue({ updateCourseList: jest.fn() });\n+\n+    const mockSelectResourceForCourseList = jest.spyOn(\n+      LegacySelectionSessionModule,\n+      \"selectResourceForCourseList\"\n+    );\n+    mockSelectResourceForCourseList.mockResolvedValue();\n+\n+    const mockSelectResourceForNonCourseList = jest.spyOn(\n+      LegacySelectionSessionModule,\n+      \"selectResourceForNonCourseList\"\n+    );\n+    mockSelectResourceForNonCourseList.mockResolvedValue();\n+\n+    const STRUCTURED = \"structured\";\n+    const SELECT_OR_ADD = \"selectOrAdd\";\n+    const selectForCourseFunc = selectResourceForCourseList;\n+    const selectForNonCourseFunc = selectResourceForNonCourseList;\n+\n+    const makeSelection = (\n+      selectorLabel: string,\n+      queryByLabelText: (text: string) => HTMLElement | null,\n+      getByLabelText: (text: string) => HTMLElement\n+    ) => {\n+      // First, make sure the selector control is active\n+      expect(queryByLabelText(selectorLabel)).toBeInTheDocument();\n+      // And then make a selection by clicking it\n+      fireEvent.click(getByLabelText(selectorLabel));\n+    };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "910096e996f444fcedc7d3b7a7ebad5c2f3d3e06"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc4Mzg5NA==", "bodyText": "But I guess fireEvent.click will complain because selectorControl could be null.", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530783894", "createdAt": "2020-11-26T05:37:17Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/components/SearchResult.test.tsx", "diffHunk": "@@ -172,19 +191,97 @@ describe(\"<SearchResult/>\", () => {\n     );\n   });\n \n-  it.each<[string]>([\n-    [languageStrings.searchpage.selectResource.summaryPage],\n-    [languageStrings.searchpage.selectResource.allAttachments],\n-    [languageStrings.searchpage.selectResource.attachment],\n-  ])(\n-    // todo: pass event handler in and check if it has been called.\n-    \"should display buttons for %s in Selection Session\",\n-    async (buttonLabel: string) => {\n-      updateMockRenderData();\n-      const { queryByLabelText } = await renderSearchResult(\n-        mockData.attachSearchObj\n-      );\n-      expect(queryByLabelText(buttonLabel)).toBeInTheDocument();\n-    }\n-  );\n+  describe(\"In Selection Session\", () => {\n+    const mockGlobalCourseList = jest.spyOn(\n+      LegacySelectionSessionModule,\n+      \"getGlobalCourseList\"\n+    );\n+    mockGlobalCourseList.mockReturnValue({ updateCourseList: jest.fn() });\n+\n+    const mockSelectResourceForCourseList = jest.spyOn(\n+      LegacySelectionSessionModule,\n+      \"selectResourceForCourseList\"\n+    );\n+    mockSelectResourceForCourseList.mockResolvedValue();\n+\n+    const mockSelectResourceForNonCourseList = jest.spyOn(\n+      LegacySelectionSessionModule,\n+      \"selectResourceForNonCourseList\"\n+    );\n+    mockSelectResourceForNonCourseList.mockResolvedValue();\n+\n+    const STRUCTURED = \"structured\";\n+    const SELECT_OR_ADD = \"selectOrAdd\";\n+    const selectForCourseFunc = selectResourceForCourseList;\n+    const selectForNonCourseFunc = selectResourceForNonCourseList;\n+\n+    const makeSelection = (\n+      selectorLabel: string,\n+      queryByLabelText: (text: string) => HTMLElement | null,\n+      getByLabelText: (text: string) => HTMLElement\n+    ) => {\n+      // First, make sure the selector control is active\n+      expect(queryByLabelText(selectorLabel)).toBeInTheDocument();\n+      // And then make a selection by clicking it\n+      fireEvent.click(getByLabelText(selectorLabel));\n+    };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc4MjA5Mg=="}, "originalCommit": {"oid": "910096e996f444fcedc7d3b7a7ebad5c2f3d3e06"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc4NTMxMg==", "bodyText": "Yeah, here is the error:\nArgument of type 'HTMLElement | null' is not assignable to parameter of type 'Element | Node | Window | Document'.\nType 'null' is not assignable to type 'Element | Node | Window | Document'.\nWhat about we use a if statement and throw an error if queryByLabelText returns null ? We have used this approach for querySelector in a few places.", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530785312", "createdAt": "2020-11-26T05:42:54Z", "author": {"login": "PenghaiZhang"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/components/SearchResult.test.tsx", "diffHunk": "@@ -172,19 +191,97 @@ describe(\"<SearchResult/>\", () => {\n     );\n   });\n \n-  it.each<[string]>([\n-    [languageStrings.searchpage.selectResource.summaryPage],\n-    [languageStrings.searchpage.selectResource.allAttachments],\n-    [languageStrings.searchpage.selectResource.attachment],\n-  ])(\n-    // todo: pass event handler in and check if it has been called.\n-    \"should display buttons for %s in Selection Session\",\n-    async (buttonLabel: string) => {\n-      updateMockRenderData();\n-      const { queryByLabelText } = await renderSearchResult(\n-        mockData.attachSearchObj\n-      );\n-      expect(queryByLabelText(buttonLabel)).toBeInTheDocument();\n-    }\n-  );\n+  describe(\"In Selection Session\", () => {\n+    const mockGlobalCourseList = jest.spyOn(\n+      LegacySelectionSessionModule,\n+      \"getGlobalCourseList\"\n+    );\n+    mockGlobalCourseList.mockReturnValue({ updateCourseList: jest.fn() });\n+\n+    const mockSelectResourceForCourseList = jest.spyOn(\n+      LegacySelectionSessionModule,\n+      \"selectResourceForCourseList\"\n+    );\n+    mockSelectResourceForCourseList.mockResolvedValue();\n+\n+    const mockSelectResourceForNonCourseList = jest.spyOn(\n+      LegacySelectionSessionModule,\n+      \"selectResourceForNonCourseList\"\n+    );\n+    mockSelectResourceForNonCourseList.mockResolvedValue();\n+\n+    const STRUCTURED = \"structured\";\n+    const SELECT_OR_ADD = \"selectOrAdd\";\n+    const selectForCourseFunc = selectResourceForCourseList;\n+    const selectForNonCourseFunc = selectResourceForNonCourseList;\n+\n+    const makeSelection = (\n+      selectorLabel: string,\n+      queryByLabelText: (text: string) => HTMLElement | null,\n+      getByLabelText: (text: string) => HTMLElement\n+    ) => {\n+      // First, make sure the selector control is active\n+      expect(queryByLabelText(selectorLabel)).toBeInTheDocument();\n+      // And then make a selection by clicking it\n+      fireEvent.click(getByLabelText(selectorLabel));\n+    };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc4MjA5Mg=="}, "originalCommit": {"oid": "910096e996f444fcedc7d3b7a7ebad5c2f3d3e06"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc4NTc1NA==", "bodyText": "Yup, I'd say that'd be the plan. But just wrap the fireEvent in the if.\nActually, this is probably a valid case of using the not null (!) postfix operator - as we definitely know (due to validation with expect) that this is non-null. \ud83e\udd14", "url": "https://github.com/openequella/openEQUELLA/pull/2547#discussion_r530785754", "createdAt": "2020-11-26T05:44:48Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/components/SearchResult.test.tsx", "diffHunk": "@@ -172,19 +191,97 @@ describe(\"<SearchResult/>\", () => {\n     );\n   });\n \n-  it.each<[string]>([\n-    [languageStrings.searchpage.selectResource.summaryPage],\n-    [languageStrings.searchpage.selectResource.allAttachments],\n-    [languageStrings.searchpage.selectResource.attachment],\n-  ])(\n-    // todo: pass event handler in and check if it has been called.\n-    \"should display buttons for %s in Selection Session\",\n-    async (buttonLabel: string) => {\n-      updateMockRenderData();\n-      const { queryByLabelText } = await renderSearchResult(\n-        mockData.attachSearchObj\n-      );\n-      expect(queryByLabelText(buttonLabel)).toBeInTheDocument();\n-    }\n-  );\n+  describe(\"In Selection Session\", () => {\n+    const mockGlobalCourseList = jest.spyOn(\n+      LegacySelectionSessionModule,\n+      \"getGlobalCourseList\"\n+    );\n+    mockGlobalCourseList.mockReturnValue({ updateCourseList: jest.fn() });\n+\n+    const mockSelectResourceForCourseList = jest.spyOn(\n+      LegacySelectionSessionModule,\n+      \"selectResourceForCourseList\"\n+    );\n+    mockSelectResourceForCourseList.mockResolvedValue();\n+\n+    const mockSelectResourceForNonCourseList = jest.spyOn(\n+      LegacySelectionSessionModule,\n+      \"selectResourceForNonCourseList\"\n+    );\n+    mockSelectResourceForNonCourseList.mockResolvedValue();\n+\n+    const STRUCTURED = \"structured\";\n+    const SELECT_OR_ADD = \"selectOrAdd\";\n+    const selectForCourseFunc = selectResourceForCourseList;\n+    const selectForNonCourseFunc = selectResourceForNonCourseList;\n+\n+    const makeSelection = (\n+      selectorLabel: string,\n+      queryByLabelText: (text: string) => HTMLElement | null,\n+      getByLabelText: (text: string) => HTMLElement\n+    ) => {\n+      // First, make sure the selector control is active\n+      expect(queryByLabelText(selectorLabel)).toBeInTheDocument();\n+      // And then make a selection by clicking it\n+      fireEvent.click(getByLabelText(selectorLabel));\n+    };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc4MjA5Mg=="}, "originalCommit": {"oid": "910096e996f444fcedc7d3b7a7ebad5c2f3d3e06"}, "originalPosition": 144}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1690, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}