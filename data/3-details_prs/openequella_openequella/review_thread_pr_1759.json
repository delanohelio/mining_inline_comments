{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyNTIxOTUx", "number": 1759, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNToxNjo1NFrOD_Q3Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNTozNDo0NFrOD_RAJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjYzMTQyOnYy", "diffSide": "RIGHT", "path": "autotest/OldTests/src/test/java/retry/MaxRetryCount.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNToxNjo1NFrOGZ065w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNzo0MDo1MVrOGZ3sDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTczNDYzMQ==", "bodyText": "How about a default of 3?\nSeems odd to have 0 for a Max.\nOr should we have a DefaultRetry annotation that stacks on this and has the value as zero?", "url": "https://github.com/openequella/openEQUELLA/pull/1759#discussion_r429734631", "createdAt": "2020-05-25T05:16:54Z", "author": {"login": "edalex-ian"}, "path": "autotest/OldTests/src/test/java/retry/MaxRetryCount.java", "diffHunk": "@@ -0,0 +1,9 @@\n+package retry;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface MaxRetryCount {\n+  int value() default 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae9cc2b695f10982b70c5609a5ea7bc5f1d8be57"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3OTk4MQ==", "bodyText": "I'll rename this to RetryTest with a default of three.\n@RetryTest would just give the default.\n@RetryTest(5) would override that.", "url": "https://github.com/openequella/openEQUELLA/pull/1759#discussion_r429779981", "createdAt": "2020-05-25T07:40:51Z", "author": {"login": "SammyIsConfused"}, "path": "autotest/OldTests/src/test/java/retry/MaxRetryCount.java", "diffHunk": "@@ -0,0 +1,9 @@\n+package retry;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface MaxRetryCount {\n+  int value() default 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTczNDYzMQ=="}, "originalCommit": {"oid": "ae9cc2b695f10982b70c5609a5ea7bc5f1d8be57"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjYzMTk5OnYy", "diffSide": "RIGHT", "path": "autotest/OldTests/src/test/java/com/tle/webtests/test/contribute/bugs/VisibilityScriptingBugTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNToxNzoyMVrOGZ07Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNToxNzoyMVrOGZ07Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTczNDcyMw==", "bodyText": "5 seems rather high. 3?", "url": "https://github.com/openequella/openEQUELLA/pull/1759#discussion_r429734723", "createdAt": "2020-05-25T05:17:21Z", "author": {"login": "edalex-ian"}, "path": "autotest/OldTests/src/test/java/com/tle/webtests/test/contribute/bugs/VisibilityScriptingBugTest.java", "diffHunk": "@@ -27,23 +26,11 @@\n   private static final String COLLECTION = \"Test Wizard Issue\";\n   private static final String ITEM_NAME = \"VisibilityScriptingBugTest - Lost Metadata Test Item 1\";\n \n-  private static final Date DATE = new Date(1589256742342L);\n-  private static final String DATE_AS_STRING = new SimpleDateFormat(\"yyyy-MM-dd\").format(DATE);\n+  private static final String RADIO = \"Yes\";\n \n-  private static final String CHECKBOX = \"one\";\n-  private static final String DROPDOWN = \"List 2\";\n-  private static final String EMAIL = \"test@test.com\";\n-  private static final String ROLE = \"System Administrator\";\n-\n-  private static final String RADIO1 = \"Radio 1\";\n-  private static final String RADIO2 = \"Yes\";\n-  private static final String SHUFFLE1 = \"Shuffle 1\";\n-  private static final String SHUFFLE2 = \"Shuffle 2\";\n-\n-  private static final String XML_PATH = \"item/itembody/\";\n-  private static final String ROLE_ID = \"ROLE_SYSTEM_ADMINISTRATOR\";\n-  private static final String USER_ID = \"4026b550-9a1f-4521-9b56-9ec737c02526\";\n+  private static final String XML_PATH = \"item/\";\n \n+  @MaxRetryCount(5)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae9cc2b695f10982b70c5609a5ea7bc5f1d8be57"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjYzNzA1OnYy", "diffSide": "RIGHT", "path": "autotest/OldTests/src/test/java/retry/FailureRetryAnalyzer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNToyMTozN1rOGZ0-Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNjo1NToyMVrOGZ2ijA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTczNTQ5NQ==", "bodyText": "Is this required? If so, does that mean this is instantiated as a singleton? If so, does that mean we have concurrency issues with this?", "url": "https://github.com/openequella/openEQUELLA/pull/1759#discussion_r429735495", "createdAt": "2020-05-25T05:21:37Z", "author": {"login": "edalex-ian"}, "path": "autotest/OldTests/src/test/java/retry/FailureRetryAnalyzer.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package retry;\n+\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import org.testng.IRetryAnalyzer;\n+import org.testng.ITestResult;\n+\n+public class FailureRetryAnalyzer implements IRetryAnalyzer {\n+  int currentRetry = 0;\n+  Logger LOGGER = Logger.getLogger(FailureRetryAnalyzer.class.getName());\n+\n+  @Override\n+  public boolean retry(ITestResult result) {\n+    MaxRetryCount failureRetryCount =\n+        result.getMethod().getConstructorOrMethod().getMethod().getAnnotation(MaxRetryCount.class);\n+    int maxRetryCount = (failureRetryCount == null) ? 0 : failureRetryCount.value();\n+    if (++currentRetry > maxRetryCount) {\n+      currentRetry = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae9cc2b695f10982b70c5609a5ea7bc5f1d8be57"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc0NDM4NA==", "bodyText": "I don't think it's required. Each individual test that requires one instantiates a FailureRetryAnalyzer of its own.", "url": "https://github.com/openequella/openEQUELLA/pull/1759#discussion_r429744384", "createdAt": "2020-05-25T05:59:05Z", "author": {"login": "SammyIsConfused"}, "path": "autotest/OldTests/src/test/java/retry/FailureRetryAnalyzer.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package retry;\n+\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import org.testng.IRetryAnalyzer;\n+import org.testng.ITestResult;\n+\n+public class FailureRetryAnalyzer implements IRetryAnalyzer {\n+  int currentRetry = 0;\n+  Logger LOGGER = Logger.getLogger(FailureRetryAnalyzer.class.getName());\n+\n+  @Override\n+  public boolean retry(ITestResult result) {\n+    MaxRetryCount failureRetryCount =\n+        result.getMethod().getConstructorOrMethod().getMethod().getAnnotation(MaxRetryCount.class);\n+    int maxRetryCount = (failureRetryCount == null) ? 0 : failureRetryCount.value();\n+    if (++currentRetry > maxRetryCount) {\n+      currentRetry = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTczNTQ5NQ=="}, "originalCommit": {"oid": "ae9cc2b695f10982b70c5609a5ea7bc5f1d8be57"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc2MTE2NA==", "bodyText": "Phew, in that case might as well drop it.", "url": "https://github.com/openequella/openEQUELLA/pull/1759#discussion_r429761164", "createdAt": "2020-05-25T06:55:21Z", "author": {"login": "edalex-ian"}, "path": "autotest/OldTests/src/test/java/retry/FailureRetryAnalyzer.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package retry;\n+\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import org.testng.IRetryAnalyzer;\n+import org.testng.ITestResult;\n+\n+public class FailureRetryAnalyzer implements IRetryAnalyzer {\n+  int currentRetry = 0;\n+  Logger LOGGER = Logger.getLogger(FailureRetryAnalyzer.class.getName());\n+\n+  @Override\n+  public boolean retry(ITestResult result) {\n+    MaxRetryCount failureRetryCount =\n+        result.getMethod().getConstructorOrMethod().getMethod().getAnnotation(MaxRetryCount.class);\n+    int maxRetryCount = (failureRetryCount == null) ? 0 : failureRetryCount.value();\n+    if (++currentRetry > maxRetryCount) {\n+      currentRetry = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTczNTQ5NQ=="}, "originalCommit": {"oid": "ae9cc2b695f10982b70c5609a5ea7bc5f1d8be57"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjY0MTU1OnYy", "diffSide": "RIGHT", "path": "autotest/OldTests/src/test/java/retry/FailureRetryAnalyzer.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNToyNTowNVrOGZ1BDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNjo1NDo0MVrOGZ2hnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTczNjIwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                LOGGER.log(Level.WARNING, result.getThrowable().getMessage(), result.getThrowable());\n          \n          \n            \n                LOGGER.warning(result.getThrowable().getMessage(), result.getThrowable());\n          \n      \n    \n    \n  \n\nor can you\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                LOGGER.log(Level.WARNING, result.getThrowable().getMessage(), result.getThrowable());\n          \n          \n            \n                LOGGER.warning(result.getThrowable());\n          \n      \n    \n    \n  \n\nActually, do we even need to log this? Seems excessively verbose.", "url": "https://github.com/openequella/openEQUELLA/pull/1759#discussion_r429736207", "createdAt": "2020-05-25T05:25:05Z", "author": {"login": "edalex-ian"}, "path": "autotest/OldTests/src/test/java/retry/FailureRetryAnalyzer.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package retry;\n+\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import org.testng.IRetryAnalyzer;\n+import org.testng.ITestResult;\n+\n+public class FailureRetryAnalyzer implements IRetryAnalyzer {\n+  int currentRetry = 0;\n+  Logger LOGGER = Logger.getLogger(FailureRetryAnalyzer.class.getName());\n+\n+  @Override\n+  public boolean retry(ITestResult result) {\n+    MaxRetryCount failureRetryCount =\n+        result.getMethod().getConstructorOrMethod().getMethod().getAnnotation(MaxRetryCount.class);\n+    int maxRetryCount = (failureRetryCount == null) ? 0 : failureRetryCount.value();\n+    if (++currentRetry > maxRetryCount) {\n+      currentRetry = 0;\n+      return false;\n+    } else {\n+      logRetryInfo(result, maxRetryCount);\n+      return true;\n+    }\n+  }\n+\n+  private void logRetryInfo(ITestResult result, int maxRetryCount) {\n+    LOGGER.warning(\"Test with retry analyser failed.\\n\\n\");\n+    // print failure stack trace\n+    LOGGER.log(Level.WARNING, result.getThrowable().getMessage(), result.getThrowable());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae9cc2b695f10982b70c5609a5ea7bc5f1d8be57"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc0MzMyNg==", "bodyText": "Your suggestion will not work.\nLOGGER.warning() helper function doesn't have a stack trace method like LOGGER.error does. In order to get a stack trace, and a warning label, you must LOGGER.log(level, message, throwable)", "url": "https://github.com/openequella/openEQUELLA/pull/1759#discussion_r429743326", "createdAt": "2020-05-25T05:56:25Z", "author": {"login": "SammyIsConfused"}, "path": "autotest/OldTests/src/test/java/retry/FailureRetryAnalyzer.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package retry;\n+\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import org.testng.IRetryAnalyzer;\n+import org.testng.ITestResult;\n+\n+public class FailureRetryAnalyzer implements IRetryAnalyzer {\n+  int currentRetry = 0;\n+  Logger LOGGER = Logger.getLogger(FailureRetryAnalyzer.class.getName());\n+\n+  @Override\n+  public boolean retry(ITestResult result) {\n+    MaxRetryCount failureRetryCount =\n+        result.getMethod().getConstructorOrMethod().getMethod().getAnnotation(MaxRetryCount.class);\n+    int maxRetryCount = (failureRetryCount == null) ? 0 : failureRetryCount.value();\n+    if (++currentRetry > maxRetryCount) {\n+      currentRetry = 0;\n+      return false;\n+    } else {\n+      logRetryInfo(result, maxRetryCount);\n+      return true;\n+    }\n+  }\n+\n+  private void logRetryInfo(ITestResult result, int maxRetryCount) {\n+    LOGGER.warning(\"Test with retry analyser failed.\\n\\n\");\n+    // print failure stack trace\n+    LOGGER.log(Level.WARNING, result.getThrowable().getMessage(), result.getThrowable());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTczNjIwNw=="}, "originalCommit": {"oid": "ae9cc2b695f10982b70c5609a5ea7bc5f1d8be57"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc0MzY3NQ==", "bodyText": "The purpose here was so that when a TestNG method fails and retries, the initial failure will still log a stack trace.", "url": "https://github.com/openequella/openEQUELLA/pull/1759#discussion_r429743675", "createdAt": "2020-05-25T05:56:56Z", "author": {"login": "SammyIsConfused"}, "path": "autotest/OldTests/src/test/java/retry/FailureRetryAnalyzer.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package retry;\n+\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import org.testng.IRetryAnalyzer;\n+import org.testng.ITestResult;\n+\n+public class FailureRetryAnalyzer implements IRetryAnalyzer {\n+  int currentRetry = 0;\n+  Logger LOGGER = Logger.getLogger(FailureRetryAnalyzer.class.getName());\n+\n+  @Override\n+  public boolean retry(ITestResult result) {\n+    MaxRetryCount failureRetryCount =\n+        result.getMethod().getConstructorOrMethod().getMethod().getAnnotation(MaxRetryCount.class);\n+    int maxRetryCount = (failureRetryCount == null) ? 0 : failureRetryCount.value();\n+    if (++currentRetry > maxRetryCount) {\n+      currentRetry = 0;\n+      return false;\n+    } else {\n+      logRetryInfo(result, maxRetryCount);\n+      return true;\n+    }\n+  }\n+\n+  private void logRetryInfo(ITestResult result, int maxRetryCount) {\n+    LOGGER.warning(\"Test with retry analyser failed.\\n\\n\");\n+    // print failure stack trace\n+    LOGGER.log(Level.WARNING, result.getThrowable().getMessage(), result.getThrowable());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTczNjIwNw=="}, "originalCommit": {"oid": "ae9cc2b695f10982b70c5609a5ea7bc5f1d8be57"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc0Njg1OA==", "bodyText": "Your suggestion will not work.\n\nYup, as it appears we're not using log4j, just vanilla JRE logging. We should be using log4j\n\nThe purpose here was so that when a TestNG method fails and retries, the initial failure will still log a stack trace.\n\nBut what does that offer when we already have the report that test t from class c is retrying? We don't want our logs for testing even more verbose unless it serves a purpose.", "url": "https://github.com/openequella/openEQUELLA/pull/1759#discussion_r429746858", "createdAt": "2020-05-25T06:08:42Z", "author": {"login": "edalex-ian"}, "path": "autotest/OldTests/src/test/java/retry/FailureRetryAnalyzer.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package retry;\n+\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import org.testng.IRetryAnalyzer;\n+import org.testng.ITestResult;\n+\n+public class FailureRetryAnalyzer implements IRetryAnalyzer {\n+  int currentRetry = 0;\n+  Logger LOGGER = Logger.getLogger(FailureRetryAnalyzer.class.getName());\n+\n+  @Override\n+  public boolean retry(ITestResult result) {\n+    MaxRetryCount failureRetryCount =\n+        result.getMethod().getConstructorOrMethod().getMethod().getAnnotation(MaxRetryCount.class);\n+    int maxRetryCount = (failureRetryCount == null) ? 0 : failureRetryCount.value();\n+    if (++currentRetry > maxRetryCount) {\n+      currentRetry = 0;\n+      return false;\n+    } else {\n+      logRetryInfo(result, maxRetryCount);\n+      return true;\n+    }\n+  }\n+\n+  private void logRetryInfo(ITestResult result, int maxRetryCount) {\n+    LOGGER.warning(\"Test with retry analyser failed.\\n\\n\");\n+    // print failure stack trace\n+    LOGGER.log(Level.WARNING, result.getThrowable().getMessage(), result.getThrowable());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTczNjIwNw=="}, "originalCommit": {"oid": "ae9cc2b695f10982b70c5609a5ea7bc5f1d8be57"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc0Nzg5NA==", "bodyText": "The idea I had for that is that if some test is flakey, we can look into why it was breaking without letting it fail the whole run. But if you don't think that's worthwhile I'm happy to remove it.", "url": "https://github.com/openequella/openEQUELLA/pull/1759#discussion_r429747894", "createdAt": "2020-05-25T06:12:47Z", "author": {"login": "SammyIsConfused"}, "path": "autotest/OldTests/src/test/java/retry/FailureRetryAnalyzer.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package retry;\n+\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import org.testng.IRetryAnalyzer;\n+import org.testng.ITestResult;\n+\n+public class FailureRetryAnalyzer implements IRetryAnalyzer {\n+  int currentRetry = 0;\n+  Logger LOGGER = Logger.getLogger(FailureRetryAnalyzer.class.getName());\n+\n+  @Override\n+  public boolean retry(ITestResult result) {\n+    MaxRetryCount failureRetryCount =\n+        result.getMethod().getConstructorOrMethod().getMethod().getAnnotation(MaxRetryCount.class);\n+    int maxRetryCount = (failureRetryCount == null) ? 0 : failureRetryCount.value();\n+    if (++currentRetry > maxRetryCount) {\n+      currentRetry = 0;\n+      return false;\n+    } else {\n+      logRetryInfo(result, maxRetryCount);\n+      return true;\n+    }\n+  }\n+\n+  private void logRetryInfo(ITestResult result, int maxRetryCount) {\n+    LOGGER.warning(\"Test with retry analyser failed.\\n\\n\");\n+    // print failure stack trace\n+    LOGGER.log(Level.WARNING, result.getThrowable().getMessage(), result.getThrowable());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTczNjIwNw=="}, "originalCommit": {"oid": "ae9cc2b695f10982b70c5609a5ea7bc5f1d8be57"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc2MDkyNw==", "bodyText": "Okay, so as discussed just now, this is to capture initial details of a test that eventually passes but we may want to go back at a later date an look into the flakiness.\nSeeing this would really be the exception to the norm, let's log the stacktrace at 'debug' once the logger is changed over to log4j.", "url": "https://github.com/openequella/openEQUELLA/pull/1759#discussion_r429760927", "createdAt": "2020-05-25T06:54:41Z", "author": {"login": "edalex-ian"}, "path": "autotest/OldTests/src/test/java/retry/FailureRetryAnalyzer.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package retry;\n+\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import org.testng.IRetryAnalyzer;\n+import org.testng.ITestResult;\n+\n+public class FailureRetryAnalyzer implements IRetryAnalyzer {\n+  int currentRetry = 0;\n+  Logger LOGGER = Logger.getLogger(FailureRetryAnalyzer.class.getName());\n+\n+  @Override\n+  public boolean retry(ITestResult result) {\n+    MaxRetryCount failureRetryCount =\n+        result.getMethod().getConstructorOrMethod().getMethod().getAnnotation(MaxRetryCount.class);\n+    int maxRetryCount = (failureRetryCount == null) ? 0 : failureRetryCount.value();\n+    if (++currentRetry > maxRetryCount) {\n+      currentRetry = 0;\n+      return false;\n+    } else {\n+      logRetryInfo(result, maxRetryCount);\n+      return true;\n+    }\n+  }\n+\n+  private void logRetryInfo(ITestResult result, int maxRetryCount) {\n+    LOGGER.warning(\"Test with retry analyser failed.\\n\\n\");\n+    // print failure stack trace\n+    LOGGER.log(Level.WARNING, result.getThrowable().getMessage(), result.getThrowable());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTczNjIwNw=="}, "originalCommit": {"oid": "ae9cc2b695f10982b70c5609a5ea7bc5f1d8be57"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjY0MzIxOnYy", "diffSide": "RIGHT", "path": "autotest/OldTests/src/test/java/retry/FailureRetryAnalyzer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNToyNjoyMFrOGZ1CEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNTo1NTo0NFrOGZ1bqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTczNjQ2Ng==", "bodyText": "This message is kind of redundant isn't it?", "url": "https://github.com/openequella/openEQUELLA/pull/1759#discussion_r429736466", "createdAt": "2020-05-25T05:26:20Z", "author": {"login": "edalex-ian"}, "path": "autotest/OldTests/src/test/java/retry/FailureRetryAnalyzer.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package retry;\n+\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import org.testng.IRetryAnalyzer;\n+import org.testng.ITestResult;\n+\n+public class FailureRetryAnalyzer implements IRetryAnalyzer {\n+  int currentRetry = 0;\n+  Logger LOGGER = Logger.getLogger(FailureRetryAnalyzer.class.getName());\n+\n+  @Override\n+  public boolean retry(ITestResult result) {\n+    MaxRetryCount failureRetryCount =\n+        result.getMethod().getConstructorOrMethod().getMethod().getAnnotation(MaxRetryCount.class);\n+    int maxRetryCount = (failureRetryCount == null) ? 0 : failureRetryCount.value();\n+    if (++currentRetry > maxRetryCount) {\n+      currentRetry = 0;\n+      return false;\n+    } else {\n+      logRetryInfo(result, maxRetryCount);\n+      return true;\n+    }\n+  }\n+\n+  private void logRetryInfo(ITestResult result, int maxRetryCount) {\n+    LOGGER.warning(\"Test with retry analyser failed.\\n\\n\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae9cc2b695f10982b70c5609a5ea7bc5f1d8be57"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc0MjU3MQ==", "bodyText": "This was just for logging purposes - without this it would go straight to the stack trace, and that could potentially look too similar to a standard failed test.", "url": "https://github.com/openequella/openEQUELLA/pull/1759#discussion_r429742571", "createdAt": "2020-05-25T05:53:56Z", "author": {"login": "SammyIsConfused"}, "path": "autotest/OldTests/src/test/java/retry/FailureRetryAnalyzer.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package retry;\n+\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import org.testng.IRetryAnalyzer;\n+import org.testng.ITestResult;\n+\n+public class FailureRetryAnalyzer implements IRetryAnalyzer {\n+  int currentRetry = 0;\n+  Logger LOGGER = Logger.getLogger(FailureRetryAnalyzer.class.getName());\n+\n+  @Override\n+  public boolean retry(ITestResult result) {\n+    MaxRetryCount failureRetryCount =\n+        result.getMethod().getConstructorOrMethod().getMethod().getAnnotation(MaxRetryCount.class);\n+    int maxRetryCount = (failureRetryCount == null) ? 0 : failureRetryCount.value();\n+    if (++currentRetry > maxRetryCount) {\n+      currentRetry = 0;\n+      return false;\n+    } else {\n+      logRetryInfo(result, maxRetryCount);\n+      return true;\n+    }\n+  }\n+\n+  private void logRetryInfo(ITestResult result, int maxRetryCount) {\n+    LOGGER.warning(\"Test with retry analyser failed.\\n\\n\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTczNjQ2Ng=="}, "originalCommit": {"oid": "ae9cc2b695f10982b70c5609a5ea7bc5f1d8be57"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc0MzAxOA==", "bodyText": "Gotcha. Well, let's remove this and the stack trace.", "url": "https://github.com/openequella/openEQUELLA/pull/1759#discussion_r429743018", "createdAt": "2020-05-25T05:55:44Z", "author": {"login": "edalex-ian"}, "path": "autotest/OldTests/src/test/java/retry/FailureRetryAnalyzer.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package retry;\n+\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import org.testng.IRetryAnalyzer;\n+import org.testng.ITestResult;\n+\n+public class FailureRetryAnalyzer implements IRetryAnalyzer {\n+  int currentRetry = 0;\n+  Logger LOGGER = Logger.getLogger(FailureRetryAnalyzer.class.getName());\n+\n+  @Override\n+  public boolean retry(ITestResult result) {\n+    MaxRetryCount failureRetryCount =\n+        result.getMethod().getConstructorOrMethod().getMethod().getAnnotation(MaxRetryCount.class);\n+    int maxRetryCount = (failureRetryCount == null) ? 0 : failureRetryCount.value();\n+    if (++currentRetry > maxRetryCount) {\n+      currentRetry = 0;\n+      return false;\n+    } else {\n+      logRetryInfo(result, maxRetryCount);\n+      return true;\n+    }\n+  }\n+\n+  private void logRetryInfo(ITestResult result, int maxRetryCount) {\n+    LOGGER.warning(\"Test with retry analyser failed.\\n\\n\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTczNjQ2Ng=="}, "originalCommit": {"oid": "ae9cc2b695f10982b70c5609a5ea7bc5f1d8be57"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjY0NjUyOnYy", "diffSide": "RIGHT", "path": "autotest/OldTests/src/test/java/retry/FailureRetryAnalyzer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNToyODo0NlrOGZ1EAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNTo1NTowMlrOGZ1a7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTczNjk2Mw==", "bodyText": "Does this get called before the first test run, of before the first retry?\n(As we don't want any log message for a single successful run.)", "url": "https://github.com/openequella/openEQUELLA/pull/1759#discussion_r429736963", "createdAt": "2020-05-25T05:28:46Z", "author": {"login": "edalex-ian"}, "path": "autotest/OldTests/src/test/java/retry/FailureRetryAnalyzer.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package retry;\n+\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import org.testng.IRetryAnalyzer;\n+import org.testng.ITestResult;\n+\n+public class FailureRetryAnalyzer implements IRetryAnalyzer {\n+  int currentRetry = 0;\n+  Logger LOGGER = Logger.getLogger(FailureRetryAnalyzer.class.getName());\n+\n+  @Override\n+  public boolean retry(ITestResult result) {\n+    MaxRetryCount failureRetryCount =\n+        result.getMethod().getConstructorOrMethod().getMethod().getAnnotation(MaxRetryCount.class);\n+    int maxRetryCount = (failureRetryCount == null) ? 0 : failureRetryCount.value();\n+    if (++currentRetry > maxRetryCount) {\n+      currentRetry = 0;\n+      return false;\n+    } else {\n+      logRetryInfo(result, maxRetryCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae9cc2b695f10982b70c5609a5ea7bc5f1d8be57"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc0MjI1NQ==", "bodyText": "this gets called after a run that has @MaxRetryCount annotation fails, before it retries.", "url": "https://github.com/openequella/openEQUELLA/pull/1759#discussion_r429742255", "createdAt": "2020-05-25T05:52:44Z", "author": {"login": "SammyIsConfused"}, "path": "autotest/OldTests/src/test/java/retry/FailureRetryAnalyzer.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package retry;\n+\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import org.testng.IRetryAnalyzer;\n+import org.testng.ITestResult;\n+\n+public class FailureRetryAnalyzer implements IRetryAnalyzer {\n+  int currentRetry = 0;\n+  Logger LOGGER = Logger.getLogger(FailureRetryAnalyzer.class.getName());\n+\n+  @Override\n+  public boolean retry(ITestResult result) {\n+    MaxRetryCount failureRetryCount =\n+        result.getMethod().getConstructorOrMethod().getMethod().getAnnotation(MaxRetryCount.class);\n+    int maxRetryCount = (failureRetryCount == null) ? 0 : failureRetryCount.value();\n+    if (++currentRetry > maxRetryCount) {\n+      currentRetry = 0;\n+      return false;\n+    } else {\n+      logRetryInfo(result, maxRetryCount);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTczNjk2Mw=="}, "originalCommit": {"oid": "ae9cc2b695f10982b70c5609a5ea7bc5f1d8be57"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc0MjgzMQ==", "bodyText": "Cool. \ud83d\udc4d", "url": "https://github.com/openequella/openEQUELLA/pull/1759#discussion_r429742831", "createdAt": "2020-05-25T05:55:02Z", "author": {"login": "edalex-ian"}, "path": "autotest/OldTests/src/test/java/retry/FailureRetryAnalyzer.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package retry;\n+\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import org.testng.IRetryAnalyzer;\n+import org.testng.ITestResult;\n+\n+public class FailureRetryAnalyzer implements IRetryAnalyzer {\n+  int currentRetry = 0;\n+  Logger LOGGER = Logger.getLogger(FailureRetryAnalyzer.class.getName());\n+\n+  @Override\n+  public boolean retry(ITestResult result) {\n+    MaxRetryCount failureRetryCount =\n+        result.getMethod().getConstructorOrMethod().getMethod().getAnnotation(MaxRetryCount.class);\n+    int maxRetryCount = (failureRetryCount == null) ? 0 : failureRetryCount.value();\n+    if (++currentRetry > maxRetryCount) {\n+      currentRetry = 0;\n+      return false;\n+    } else {\n+      logRetryInfo(result, maxRetryCount);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTczNjk2Mw=="}, "originalCommit": {"oid": "ae9cc2b695f10982b70c5609a5ea7bc5f1d8be57"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjY1MDM5OnYy", "diffSide": "RIGHT", "path": "autotest/OldTests/src/test/java/retry/TestAnnotationTransformer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNTozMTozMVrOGZ1GNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNTozMTozMVrOGZ1GNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTczNzUyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (maxRetryCount == null) return;\n          \n          \n            \n                if (maxRetryCount == null && maxRetryCount.value() < 1) return;", "url": "https://github.com/openequella/openEQUELLA/pull/1759#discussion_r429737526", "createdAt": "2020-05-25T05:31:31Z", "author": {"login": "edalex-ian"}, "path": "autotest/OldTests/src/test/java/retry/TestAnnotationTransformer.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package retry;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Method;\n+import org.testng.IAnnotationTransformer;\n+import org.testng.annotations.ITestAnnotation;\n+\n+public class TestAnnotationTransformer implements IAnnotationTransformer {\n+\n+  @Override\n+  public void transform(\n+      ITestAnnotation annotation, Class testClass, Constructor testConstructor, Method testMethod) {\n+    if (testMethod == null) return;\n+    MaxRetryCount maxRetryCount = testMethod.getAnnotation(MaxRetryCount.class);\n+    if (maxRetryCount == null) return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae9cc2b695f10982b70c5609a5ea7bc5f1d8be57"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjY1NDQ2OnYy", "diffSide": "RIGHT", "path": "autotest/OldTests/src/test/java/retry/FailureRetryAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNTozNDo0NFrOGZ1IxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNzo0NDo0MlrOGZ3zag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTczODE4MQ==", "bodyText": "Do we have the log4j framework overhere? (Or Slf4j?)", "url": "https://github.com/openequella/openEQUELLA/pull/1759#discussion_r429738181", "createdAt": "2020-05-25T05:34:44Z", "author": {"login": "edalex-ian"}, "path": "autotest/OldTests/src/test/java/retry/FailureRetryAnalyzer.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package retry;\n+\n+import java.util.logging.Level;\n+import java.util.logging.Logger;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae9cc2b695f10982b70c5609a5ea7bc5f1d8be57"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc4MTg2Ng==", "bodyText": "Changed over to slf4j.", "url": "https://github.com/openequella/openEQUELLA/pull/1759#discussion_r429781866", "createdAt": "2020-05-25T07:44:42Z", "author": {"login": "SammyIsConfused"}, "path": "autotest/OldTests/src/test/java/retry/FailureRetryAnalyzer.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package retry;\n+\n+import java.util.logging.Level;\n+import java.util.logging.Logger;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTczODE4MQ=="}, "originalCommit": {"oid": "ae9cc2b695f10982b70c5609a5ea7bc5f1d8be57"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1463, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}