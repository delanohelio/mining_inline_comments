{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0NTEwNDYw", "number": 2344, "reviewThreads": {"totalCount": 53, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMjoxMjozMVrOE13gGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMTowMToxMVrOE5zj8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTE5MzIxOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Admin/com.tle.web.adminconsole/build.sbt", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMjoxMjozMVrOHuYtHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwMzo0ODozMFrOHwKq9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMTMwOQ==", "bodyText": "Is this an error you anticipate people will run into?\nIs including the error in the source a good way to guide adopters/future developers on how to work with this?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518401309", "createdAt": "2020-11-05T22:12:31Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Admin/com.tle.web.adminconsole/build.sbt", "diffHunk": "@@ -6,3 +6,20 @@ resourceGenerators in Compile += Def.task {\n   (jarSigner.value).apply(jarFile, outJar)\n   Seq(outJar)\n }.taskValue\n+\n+assemblyMergeStrategy in assembly := {\n+  // Post SpringHib5 upgrade, the following error was thrown on build:\n+  // deduplicate: different file contents found in the following:\n+  // [error] .../com.fasterxml/classmate/bundles/classmate-1.5.1.jar:module-info.class\n+  // [error] .../com.sun.istack/istack-commons-runtime/jars/istack-commons-runtime-3.0.7.jar:module-info.class\n+  // [error] .../com.sun.xml.fastinfoset/FastInfoset/jars/FastInfoset-1.2.15.jar:module-info.class\n+  // [error] .../javax.xml.bind/jaxb-api/jars/jaxb-api-2.3.1.jar:module-info.class\n+  // [error] .../org.glassfish.jaxb/jaxb-runtime/jars/jaxb-runtime-2.3.1.jar:module-info.class\n+  // [error] .../org.glassfish.jaxb/txw2/jars/txw2-2.3.1.jar:module-info.class\n+  // [error] .../org.jvnet.staxex/stax-ex/jars/stax-ex-1.8.jar:module-info.class\n+  // As per https://stackoverflow.com/questions/54834125/sbt-assembly-deduplicate-module-info-class , discarding is OK for Java 8", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQzOTkzNg==", "bodyText": "If folks omit that merge strategy with the current dependency tree, they'll hit the error.\nI put that in there as documentation for why the merge strategy was put in place. I think something should be in there as to why it was added, but if folks find it too noisy, I can make it more brief.  When affected deps are upgraded, a review of the associated merge strategies would be good, but very time consuming with the current build system.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518439936", "createdAt": "2020-11-05T23:49:53Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Admin/com.tle.web.adminconsole/build.sbt", "diffHunk": "@@ -6,3 +6,20 @@ resourceGenerators in Compile += Def.task {\n   (jarSigner.value).apply(jarFile, outJar)\n   Seq(outJar)\n }.taskValue\n+\n+assemblyMergeStrategy in assembly := {\n+  // Post SpringHib5 upgrade, the following error was thrown on build:\n+  // deduplicate: different file contents found in the following:\n+  // [error] .../com.fasterxml/classmate/bundles/classmate-1.5.1.jar:module-info.class\n+  // [error] .../com.sun.istack/istack-commons-runtime/jars/istack-commons-runtime-3.0.7.jar:module-info.class\n+  // [error] .../com.sun.xml.fastinfoset/FastInfoset/jars/FastInfoset-1.2.15.jar:module-info.class\n+  // [error] .../javax.xml.bind/jaxb-api/jars/jaxb-api-2.3.1.jar:module-info.class\n+  // [error] .../org.glassfish.jaxb/jaxb-runtime/jars/jaxb-runtime-2.3.1.jar:module-info.class\n+  // [error] .../org.glassfish.jaxb/txw2/jars/txw2-2.3.1.jar:module-info.class\n+  // [error] .../org.jvnet.staxex/stax-ex/jars/stax-ex-1.8.jar:module-info.class\n+  // As per https://stackoverflow.com/questions/54834125/sbt-assembly-deduplicate-module-info-class , discarding is OK for Java 8", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMTMwOQ=="}, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI2ODUzNQ==", "bodyText": "I think it's fine. If we wanted to optimise I'd keep the first and last lines. (I.e. Concisely state the issue, and then any reference on approach taken.)", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520268535", "createdAt": "2020-11-10T03:48:30Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Admin/com.tle.web.adminconsole/build.sbt", "diffHunk": "@@ -6,3 +6,20 @@ resourceGenerators in Compile += Def.task {\n   (jarSigner.value).apply(jarFile, outJar)\n   Seq(outJar)\n }.taskValue\n+\n+assemblyMergeStrategy in assembly := {\n+  // Post SpringHib5 upgrade, the following error was thrown on build:\n+  // deduplicate: different file contents found in the following:\n+  // [error] .../com.fasterxml/classmate/bundles/classmate-1.5.1.jar:module-info.class\n+  // [error] .../com.sun.istack/istack-commons-runtime/jars/istack-commons-runtime-3.0.7.jar:module-info.class\n+  // [error] .../com.sun.xml.fastinfoset/FastInfoset/jars/FastInfoset-1.2.15.jar:module-info.class\n+  // [error] .../javax.xml.bind/jaxb-api/jars/jaxb-api-2.3.1.jar:module-info.class\n+  // [error] .../org.glassfish.jaxb/jaxb-runtime/jars/jaxb-runtime-2.3.1.jar:module-info.class\n+  // [error] .../org.glassfish.jaxb/txw2/jars/txw2-2.3.1.jar:module-info.class\n+  // [error] .../org.jvnet.staxex/stax-ex/jars/stax-ex-1.8.jar:module-info.class\n+  // As per https://stackoverflow.com/questions/54834125/sbt-assembly-deduplicate-module-info-class , discarding is OK for Java 8", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMTMwOQ=="}, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTE5NDQxOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Admin/com.tle.web.adminconsole/jarsrc/build.sbt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMjoxMjo1OVrOHuYt3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMzo1MDowNVrOHubERg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMTUwMg==", "bodyText": "Is this an error you anticipate people will run into?\nIs including the error in the source a good way to guide adopters/future developers on how to work with this?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518401502", "createdAt": "2020-11-05T22:12:59Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Admin/com.tle.web.adminconsole/jarsrc/build.sbt", "diffHunk": "@@ -1,20 +1,48 @@\n+val springVersion = \"5.2.9.RELEASE\"\n+\n libraryDependencies ++= Seq(\n   \"com.github.equella.jpf\" % \"jpf\"             % \"1.0.7\",\n   \"com.google.guava\"       % \"guava\"           % \"18.0\",\n   \"org.slf4j\"              % \"jcl-over-slf4j\"  % \"1.7.30\",\n   \"org.slf4j\"              % \"slf4j-simple\"    % \"1.7.30\",\n-  \"org.springframework\"    % \"spring-web\"      % \"2.5.6\",\n-  \"org.springframework\"    % \"spring-aop\"      % \"2.5.6\",\n+  \"org.springframework\"    % \"spring-web\"      % springVersion,\n+  \"org.springframework\"    % \"spring-aop\"      % springVersion,\n+  \"org.springframework\"    % \"spring-context\"  % springVersion,\n   \"com.fifesoft\"           % \"rsyntaxtextarea\" % \"1.5.2\",\n   \"com.miglayout\"          % \"miglayout-swing\" % \"4.2\",\n   xstreamDep\n )\n \n-excludeDependencies += \"commons-logging\" % \"commons-logging\"\n+excludeDependencies ++= Seq(\n+  \"commons-logging\" % \"commons-logging\",\n+  // Spring 5 added a default logging bridge.  In oEQ, this results in\n+  // a [deduplicate: different file contents found in the following] error\n+  // ...org.slf4j/jcl-over-slf4j/jars/jcl-over-slf4j-1.7.30.jar:org/apache/commons/logging/Log.class\n+  // ...org.springframework/spring-jcl/jars/spring-jcl-5.2.9.RELEASE.jar:org/apache/commons/logging/Log.class\n+  // As per https://github.com/spring-projects/spring-framework/issues/20611 ,\n+  // since we already have logging in place, we can safely exclude the dep from spring.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ0MDAwNg==", "bodyText": "see note above", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518440006", "createdAt": "2020-11-05T23:50:05Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Admin/com.tle.web.adminconsole/jarsrc/build.sbt", "diffHunk": "@@ -1,20 +1,48 @@\n+val springVersion = \"5.2.9.RELEASE\"\n+\n libraryDependencies ++= Seq(\n   \"com.github.equella.jpf\" % \"jpf\"             % \"1.0.7\",\n   \"com.google.guava\"       % \"guava\"           % \"18.0\",\n   \"org.slf4j\"              % \"jcl-over-slf4j\"  % \"1.7.30\",\n   \"org.slf4j\"              % \"slf4j-simple\"    % \"1.7.30\",\n-  \"org.springframework\"    % \"spring-web\"      % \"2.5.6\",\n-  \"org.springframework\"    % \"spring-aop\"      % \"2.5.6\",\n+  \"org.springframework\"    % \"spring-web\"      % springVersion,\n+  \"org.springframework\"    % \"spring-aop\"      % springVersion,\n+  \"org.springframework\"    % \"spring-context\"  % springVersion,\n   \"com.fifesoft\"           % \"rsyntaxtextarea\" % \"1.5.2\",\n   \"com.miglayout\"          % \"miglayout-swing\" % \"4.2\",\n   xstreamDep\n )\n \n-excludeDependencies += \"commons-logging\" % \"commons-logging\"\n+excludeDependencies ++= Seq(\n+  \"commons-logging\" % \"commons-logging\",\n+  // Spring 5 added a default logging bridge.  In oEQ, this results in\n+  // a [deduplicate: different file contents found in the following] error\n+  // ...org.slf4j/jcl-over-slf4j/jars/jcl-over-slf4j-1.7.30.jar:org/apache/commons/logging/Log.class\n+  // ...org.springframework/spring-jcl/jars/spring-jcl-5.2.9.RELEASE.jar:org/apache/commons/logging/Log.class\n+  // As per https://github.com/spring-projects/spring-framework/issues/20611 ,\n+  // since we already have logging in place, we can safely exclude the dep from spring.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMTUwMg=="}, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTE5NDkwOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Admin/com.tle.web.adminconsole/jarsrc/build.sbt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMjoxMzowOVrOHuYuKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMzo1MDoxOVrOHubEmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMTU3OQ==", "bodyText": "Is this an error you anticipate people will run into?\nIs including the error in the source a good way to guide adopters/future developers on how to work with this?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518401579", "createdAt": "2020-11-05T22:13:09Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Admin/com.tle.web.adminconsole/jarsrc/build.sbt", "diffHunk": "@@ -1,20 +1,48 @@\n+val springVersion = \"5.2.9.RELEASE\"\n+\n libraryDependencies ++= Seq(\n   \"com.github.equella.jpf\" % \"jpf\"             % \"1.0.7\",\n   \"com.google.guava\"       % \"guava\"           % \"18.0\",\n   \"org.slf4j\"              % \"jcl-over-slf4j\"  % \"1.7.30\",\n   \"org.slf4j\"              % \"slf4j-simple\"    % \"1.7.30\",\n-  \"org.springframework\"    % \"spring-web\"      % \"2.5.6\",\n-  \"org.springframework\"    % \"spring-aop\"      % \"2.5.6\",\n+  \"org.springframework\"    % \"spring-web\"      % springVersion,\n+  \"org.springframework\"    % \"spring-aop\"      % springVersion,\n+  \"org.springframework\"    % \"spring-context\"  % springVersion,\n   \"com.fifesoft\"           % \"rsyntaxtextarea\" % \"1.5.2\",\n   \"com.miglayout\"          % \"miglayout-swing\" % \"4.2\",\n   xstreamDep\n )\n \n-excludeDependencies += \"commons-logging\" % \"commons-logging\"\n+excludeDependencies ++= Seq(\n+  \"commons-logging\" % \"commons-logging\",\n+  // Spring 5 added a default logging bridge.  In oEQ, this results in\n+  // a [deduplicate: different file contents found in the following] error\n+  // ...org.slf4j/jcl-over-slf4j/jars/jcl-over-slf4j-1.7.30.jar:org/apache/commons/logging/Log.class\n+  // ...org.springframework/spring-jcl/jars/spring-jcl-5.2.9.RELEASE.jar:org/apache/commons/logging/Log.class\n+  // As per https://github.com/spring-projects/spring-framework/issues/20611 ,\n+  // since we already have logging in place, we can safely exclude the dep from spring.\n+  \"org.springframework\" % \"spring-jcl\"\n+)\n+\n packageOptions in assembly += Package.ManifestAttributes(\"Permissions\" -> \"all-permissions\")\n assemblyOption in assembly := (assemblyOption in assembly).value\n assemblyMergeStrategy in assembly := {\n   case PathList(\"org\", \"xmlpull\", \"v1\", _*) => MergeStrategy.first\n+  // Added due to a [deduplicate: different file contents found in the following] error against:\n+  // org.springframework/spring-context/jars/spring-context-3.2.18.RELEASE.jar:overview.html\n+  // org.springframework/spring-web/jars/spring-web-3.2.18.RELEASE.jar:overview.html\n+  case x if x.contains(\"overview.html\") => MergeStrategy.first\n+  // Post SpringHib5 upgrade, the following error was thrown on build:\n+  // deduplicate: different file contents found in the following:\n+  // [error] .../com.fasterxml/classmate/bundles/classmate-1.5.1.jar:module-info.class\n+  // [error] .../com.sun.istack/istack-commons-runtime/jars/istack-commons-runtime-3.0.7.jar:module-info.class\n+  // [error] .../com.sun.xml.fastinfoset/FastInfoset/jars/FastInfoset-1.2.15.jar:module-info.class\n+  // [error] .../javax.xml.bind/jaxb-api/jars/jaxb-api-2.3.1.jar:module-info.class\n+  // [error] .../org.glassfish.jaxb/jaxb-runtime/jars/jaxb-runtime-2.3.1.jar:module-info.class\n+  // [error] .../org.glassfish.jaxb/txw2/jars/txw2-2.3.1.jar:module-info.class\n+  // [error] .../org.jvnet.staxex/stax-ex/jars/stax-ex-1.8.jar:module-info.class\n+  // As per https://stackoverflow.com/questions/54834125/sbt-assembly-deduplicate-module-info-class , discarding is OK for Java 8", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ0MDA5MQ==", "bodyText": "see note above", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518440091", "createdAt": "2020-11-05T23:50:19Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Admin/com.tle.web.adminconsole/jarsrc/build.sbt", "diffHunk": "@@ -1,20 +1,48 @@\n+val springVersion = \"5.2.9.RELEASE\"\n+\n libraryDependencies ++= Seq(\n   \"com.github.equella.jpf\" % \"jpf\"             % \"1.0.7\",\n   \"com.google.guava\"       % \"guava\"           % \"18.0\",\n   \"org.slf4j\"              % \"jcl-over-slf4j\"  % \"1.7.30\",\n   \"org.slf4j\"              % \"slf4j-simple\"    % \"1.7.30\",\n-  \"org.springframework\"    % \"spring-web\"      % \"2.5.6\",\n-  \"org.springframework\"    % \"spring-aop\"      % \"2.5.6\",\n+  \"org.springframework\"    % \"spring-web\"      % springVersion,\n+  \"org.springframework\"    % \"spring-aop\"      % springVersion,\n+  \"org.springframework\"    % \"spring-context\"  % springVersion,\n   \"com.fifesoft\"           % \"rsyntaxtextarea\" % \"1.5.2\",\n   \"com.miglayout\"          % \"miglayout-swing\" % \"4.2\",\n   xstreamDep\n )\n \n-excludeDependencies += \"commons-logging\" % \"commons-logging\"\n+excludeDependencies ++= Seq(\n+  \"commons-logging\" % \"commons-logging\",\n+  // Spring 5 added a default logging bridge.  In oEQ, this results in\n+  // a [deduplicate: different file contents found in the following] error\n+  // ...org.slf4j/jcl-over-slf4j/jars/jcl-over-slf4j-1.7.30.jar:org/apache/commons/logging/Log.class\n+  // ...org.springframework/spring-jcl/jars/spring-jcl-5.2.9.RELEASE.jar:org/apache/commons/logging/Log.class\n+  // As per https://github.com/spring-projects/spring-framework/issues/20611 ,\n+  // since we already have logging in place, we can safely exclude the dep from spring.\n+  \"org.springframework\" % \"spring-jcl\"\n+)\n+\n packageOptions in assembly += Package.ManifestAttributes(\"Permissions\" -> \"all-permissions\")\n assemblyOption in assembly := (assemblyOption in assembly).value\n assemblyMergeStrategy in assembly := {\n   case PathList(\"org\", \"xmlpull\", \"v1\", _*) => MergeStrategy.first\n+  // Added due to a [deduplicate: different file contents found in the following] error against:\n+  // org.springframework/spring-context/jars/spring-context-3.2.18.RELEASE.jar:overview.html\n+  // org.springframework/spring-web/jars/spring-web-3.2.18.RELEASE.jar:overview.html\n+  case x if x.contains(\"overview.html\") => MergeStrategy.first\n+  // Post SpringHib5 upgrade, the following error was thrown on build:\n+  // deduplicate: different file contents found in the following:\n+  // [error] .../com.fasterxml/classmate/bundles/classmate-1.5.1.jar:module-info.class\n+  // [error] .../com.sun.istack/istack-commons-runtime/jars/istack-commons-runtime-3.0.7.jar:module-info.class\n+  // [error] .../com.sun.xml.fastinfoset/FastInfoset/jars/FastInfoset-1.2.15.jar:module-info.class\n+  // [error] .../javax.xml.bind/jaxb-api/jars/jaxb-api-2.3.1.jar:module-info.class\n+  // [error] .../org.glassfish.jaxb/jaxb-runtime/jars/jaxb-runtime-2.3.1.jar:module-info.class\n+  // [error] .../org.glassfish.jaxb/txw2/jars/txw2-2.3.1.jar:module-info.class\n+  // [error] .../org.jvnet.staxex/stax-ex/jars/stax-ex-1.8.jar:module-info.class\n+  // As per https://stackoverflow.com/questions/54834125/sbt-assembly-deduplicate-module-info-class , discarding is OK for Java 8", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMTU3OQ=="}, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTE5NTM5OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Applet/com.tle.web.filemanager.applet/appletsrc/build.sbt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMjoxMzoyMVrOHuYudw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMzo1MDoyN1rOHubEvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMTY1NQ==", "bodyText": "Is this an error you anticipate people will run into?\nIs including the error in the source a good way to guide adopters/future developers on how to work with this?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518401655", "createdAt": "2020-11-05T22:13:21Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Applet/com.tle.web.filemanager.applet/appletsrc/build.sbt", "diffHunk": "@@ -17,3 +19,24 @@ packageOptions in assembly += Package.ManifestAttributes(\n )\n \n assemblyOption in assembly := (assemblyOption in assembly).value.copy(includeScala = false)\n+\n+assemblyMergeStrategy in assembly := {\n+  // Added due to a [deduplicate: different file contents found in the following] error against:\n+  // org.springframework/spring-context/jars/spring-context-3.2.18.RELEASE.jar:overview.html\n+  // org.springframework/spring-web/jars/spring-web-3.2.18.RELEASE.jar:overview.html\n+  case x if x.contains(\"overview.html\") => MergeStrategy.first\n+  // Post SpringHib5 upgrade, the following error was thrown on build:\n+  // deduplicate: different file contents found in the following:\n+  // [error] .../com.fasterxml/classmate/bundles/classmate-1.5.1.jar:module-info.class\n+  // [error] .../com.sun.istack/istack-commons-runtime/jars/istack-commons-runtime-3.0.7.jar:module-info.class\n+  // [error] .../com.sun.xml.fastinfoset/FastInfoset/jars/FastInfoset-1.2.15.jar:module-info.class\n+  // [error] .../javax.xml.bind/jaxb-api/jars/jaxb-api-2.3.1.jar:module-info.class\n+  // [error] .../org.glassfish.jaxb/jaxb-runtime/jars/jaxb-runtime-2.3.1.jar:module-info.class\n+  // [error] .../org.glassfish.jaxb/txw2/jars/txw2-2.3.1.jar:module-info.class\n+  // [error] .../org.jvnet.staxex/stax-ex/jars/stax-ex-1.8.jar:module-info.class\n+  // As per https://stackoverflow.com/questions/54834125/sbt-assembly-deduplicate-module-info-class , discarding is OK for Java 8", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ0MDEyNA==", "bodyText": "see note above", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518440124", "createdAt": "2020-11-05T23:50:27Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Applet/com.tle.web.filemanager.applet/appletsrc/build.sbt", "diffHunk": "@@ -17,3 +19,24 @@ packageOptions in assembly += Package.ManifestAttributes(\n )\n \n assemblyOption in assembly := (assemblyOption in assembly).value.copy(includeScala = false)\n+\n+assemblyMergeStrategy in assembly := {\n+  // Added due to a [deduplicate: different file contents found in the following] error against:\n+  // org.springframework/spring-context/jars/spring-context-3.2.18.RELEASE.jar:overview.html\n+  // org.springframework/spring-web/jars/spring-web-3.2.18.RELEASE.jar:overview.html\n+  case x if x.contains(\"overview.html\") => MergeStrategy.first\n+  // Post SpringHib5 upgrade, the following error was thrown on build:\n+  // deduplicate: different file contents found in the following:\n+  // [error] .../com.fasterxml/classmate/bundles/classmate-1.5.1.jar:module-info.class\n+  // [error] .../com.sun.istack/istack-commons-runtime/jars/istack-commons-runtime-3.0.7.jar:module-info.class\n+  // [error] .../com.sun.xml.fastinfoset/FastInfoset/jars/FastInfoset-1.2.15.jar:module-info.class\n+  // [error] .../javax.xml.bind/jaxb-api/jars/jaxb-api-2.3.1.jar:module-info.class\n+  // [error] .../org.glassfish.jaxb/jaxb-runtime/jars/jaxb-runtime-2.3.1.jar:module-info.class\n+  // [error] .../org.glassfish.jaxb/txw2/jars/txw2-2.3.1.jar:module-info.class\n+  // [error] .../org.jvnet.staxex/stax-ex/jars/stax-ex-1.8.jar:module-info.class\n+  // As per https://stackoverflow.com/questions/54834125/sbt-assembly-deduplicate-module-info-class , discarding is OK for Java 8", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMTY1NQ=="}, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTE5NjAwOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/jarsrc/build.sbt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMjoxMzozMVrOHuYuzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMzo1MDozNlrOHubE2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMTc0Mg==", "bodyText": "Is this an error you anticipate people will run into?\nIs including the error in the source a good way to guide adopters/future developers on how to work with this?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518401742", "createdAt": "2020-11-05T22:13:31Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.core/jarsrc/build.sbt", "diffHunk": "@@ -15,6 +17,27 @@ packageOptions in assembly += Package.ManifestAttributes(\n )\n assemblyOption in assembly := (assemblyOption in assembly).value.copy(includeScala = false)\n \n+assemblyMergeStrategy in assembly := {\n+  // Added due to a [deduplicate: different file contents found in the following] error against:\n+  // org.springframework/spring-context/jars/spring-context-3.2.18.RELEASE.jar:overview.html\n+  // org.springframework/spring-web/jars/spring-web-3.2.18.RELEASE.jar:overview.html\n+  case x if x.contains(\"overview.html\") => MergeStrategy.first\n+  // Post SpringHib5 upgrade, the following error was thrown on build:\n+  // deduplicate: different file contents found in the following:\n+  // [error] .../com.fasterxml/classmate/bundles/classmate-1.5.1.jar:module-info.class\n+  // [error] .../com.sun.istack/istack-commons-runtime/jars/istack-commons-runtime-3.0.7.jar:module-info.class\n+  // [error] .../com.sun.xml.fastinfoset/FastInfoset/jars/FastInfoset-1.2.15.jar:module-info.class\n+  // [error] .../javax.xml.bind/jaxb-api/jars/jaxb-api-2.3.1.jar:module-info.class\n+  // [error] .../org.glassfish.jaxb/jaxb-runtime/jars/jaxb-runtime-2.3.1.jar:module-info.class\n+  // [error] .../org.glassfish.jaxb/txw2/jars/txw2-2.3.1.jar:module-info.class\n+  // [error] .../org.jvnet.staxex/stax-ex/jars/stax-ex-1.8.jar:module-info.class\n+  // As per https://stackoverflow.com/questions/54834125/sbt-assembly-deduplicate-module-info-class , discarding is OK for Java 8", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ0MDE1Mg==", "bodyText": "see note above", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518440152", "createdAt": "2020-11-05T23:50:36Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.core/jarsrc/build.sbt", "diffHunk": "@@ -15,6 +17,27 @@ packageOptions in assembly += Package.ManifestAttributes(\n )\n assemblyOption in assembly := (assemblyOption in assembly).value.copy(includeScala = false)\n \n+assemblyMergeStrategy in assembly := {\n+  // Added due to a [deduplicate: different file contents found in the following] error against:\n+  // org.springframework/spring-context/jars/spring-context-3.2.18.RELEASE.jar:overview.html\n+  // org.springframework/spring-web/jars/spring-web-3.2.18.RELEASE.jar:overview.html\n+  case x if x.contains(\"overview.html\") => MergeStrategy.first\n+  // Post SpringHib5 upgrade, the following error was thrown on build:\n+  // deduplicate: different file contents found in the following:\n+  // [error] .../com.fasterxml/classmate/bundles/classmate-1.5.1.jar:module-info.class\n+  // [error] .../com.sun.istack/istack-commons-runtime/jars/istack-commons-runtime-3.0.7.jar:module-info.class\n+  // [error] .../com.sun.xml.fastinfoset/FastInfoset/jars/FastInfoset-1.2.15.jar:module-info.class\n+  // [error] .../javax.xml.bind/jaxb-api/jars/jaxb-api-2.3.1.jar:module-info.class\n+  // [error] .../org.glassfish.jaxb/jaxb-runtime/jars/jaxb-runtime-2.3.1.jar:module-info.class\n+  // [error] .../org.glassfish.jaxb/txw2/jars/txw2-2.3.1.jar:module-info.class\n+  // [error] .../org.jvnet.staxex/stax-ex/jars/stax-ex-1.8.jar:module-info.class\n+  // As per https://stackoverflow.com/questions/54834125/sbt-assembly-deduplicate-module-info-class , discarding is OK for Java 8", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMTc0Mg=="}, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTIwMTA1OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/dao/AbstractHibernateDao.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMjoxNDo1OVrOHuYx0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMToyNjo1MlrOHyV-UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMjUxNA==", "bodyText": "is this still pending review?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518402514", "createdAt": "2020-11-05T22:14:59Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/dao/AbstractHibernateDao.java", "diffHunk": "@@ -42,21 +42,25 @@ protected synchronized HibernateTemplate getHibernateTemplate() {\n       lastFactory = newFactory;\n       template =\n           new HibernateTemplate(newFactory) {\n+            // Removed the method param, since it no longer exists in hib5:  boolean\n+            // enforceNewSession\n+            // TODO need to understand the impact of the removal\n             @Override\n-            protected Object doExecute(\n-                HibernateCallback action, boolean enforceNewSession, boolean enforceNativeSession)\n+            protected Object doExecute(HibernateCallback action, boolean enforceNativeSession)\n                 throws DataAccessException {\n               Thread currentThread = Thread.currentThread();\n               ClassLoader origLoader = currentThread.getContextClassLoader();\n               try {\n                 currentThread.setContextClassLoader(Session.class.getClassLoader());\n-                return super.doExecute(action, enforceNewSession, enforceNativeSession);\n+                return super.doExecute(action, enforceNativeSession);\n               } finally {\n                 currentThread.setContextClassLoader(origLoader);\n               }\n             }\n           };\n-      template.setAllowCreate(false);\n+      // TODO - no longer exists in hib5.  Need to review\n+      // template.setAllowCreate(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU1MDg2NA==", "bodyText": "Ah - no, just a leftover comment.  I'll clean it up.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522550864", "createdAt": "2020-11-13T01:26:52Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/dao/AbstractHibernateDao.java", "diffHunk": "@@ -42,21 +42,25 @@ protected synchronized HibernateTemplate getHibernateTemplate() {\n       lastFactory = newFactory;\n       template =\n           new HibernateTemplate(newFactory) {\n+            // Removed the method param, since it no longer exists in hib5:  boolean\n+            // enforceNewSession\n+            // TODO need to understand the impact of the removal\n             @Override\n-            protected Object doExecute(\n-                HibernateCallback action, boolean enforceNewSession, boolean enforceNativeSession)\n+            protected Object doExecute(HibernateCallback action, boolean enforceNativeSession)\n                 throws DataAccessException {\n               Thread currentThread = Thread.currentThread();\n               ClassLoader origLoader = currentThread.getContextClassLoader();\n               try {\n                 currentThread.setContextClassLoader(Session.class.getClassLoader());\n-                return super.doExecute(action, enforceNewSession, enforceNativeSession);\n+                return super.doExecute(action, enforceNativeSession);\n               } finally {\n                 currentThread.setContextClassLoader(origLoader);\n               }\n             }\n           };\n-      template.setAllowCreate(false);\n+      // TODO - no longer exists in hib5.  Need to review\n+      // template.setAllowCreate(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMjUxNA=="}, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTIwMTU1OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/dao/AbstractHibernateDao.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMjoxNToxMVrOHuYyIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMToyNzowN1rOHyV-pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMjU5NQ==", "bodyText": "is this still pending review?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518402595", "createdAt": "2020-11-05T22:15:11Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/dao/AbstractHibernateDao.java", "diffHunk": "@@ -42,21 +42,25 @@ protected synchronized HibernateTemplate getHibernateTemplate() {\n       lastFactory = newFactory;\n       template =\n           new HibernateTemplate(newFactory) {\n+            // Removed the method param, since it no longer exists in hib5:  boolean\n+            // enforceNewSession\n+            // TODO need to understand the impact of the removal", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5NzczMw==", "bodyText": "What @ChristianMurphy said. \ud83d\ude09", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520297733", "createdAt": "2020-11-10T05:33:10Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/dao/AbstractHibernateDao.java", "diffHunk": "@@ -42,21 +42,25 @@ protected synchronized HibernateTemplate getHibernateTemplate() {\n       lastFactory = newFactory;\n       template =\n           new HibernateTemplate(newFactory) {\n+            // Removed the method param, since it no longer exists in hib5:  boolean\n+            // enforceNewSession\n+            // TODO need to understand the impact of the removal", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMjU5NQ=="}, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU1MDk1MA==", "bodyText": "Ah - no, just a leftover comment.  I'll clean it up.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522550950", "createdAt": "2020-11-13T01:27:07Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/dao/AbstractHibernateDao.java", "diffHunk": "@@ -42,21 +42,25 @@ protected synchronized HibernateTemplate getHibernateTemplate() {\n       lastFactory = newFactory;\n       template =\n           new HibernateTemplate(newFactory) {\n+            // Removed the method param, since it no longer exists in hib5:  boolean\n+            // enforceNewSession\n+            // TODO need to understand the impact of the removal", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMjU5NQ=="}, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTIwNjUzOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/equella/service/impl/InitialiserServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMjoxNjo1NlrOHuY1KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMTozNzoyOFrOHyWK_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMzM2OA==", "bodyText": "would it be possible/make sense to filter the objects for valid ones?\nOr is swallowing the error the only/most effective way to handle this?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518403368", "createdAt": "2020-11-05T22:16:56Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/equella/service/impl/InitialiserServiceImpl.java", "diffHunk": "@@ -99,7 +102,27 @@ public void entitySimplified(Object old, Object newObj) {\n    */\n   private void evictFromSession(Set<Object> os) {\n     for (Object o : os) {\n-      getHibernateTemplate().evict(o);\n+      try {\n+        getHibernateTemplate().evict(o);\n+      } catch (IllegalArgumentException iae) {\n+        if (iae.getMessage().startsWith(\"Non-entity object instance passed to evict\")) {\n+          // This is being thrown in DefaultEvictEventListener.java:94\n+          // Does not appear to be a problem in this case, so trapping\n+          // and ignoring this specific case\n+          LOGGER.debug(\n+              \"Ignoring error with type [\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU1NDEwOQ==", "bodyText": "Please see response above.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522554109", "createdAt": "2020-11-13T01:37:28Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/equella/service/impl/InitialiserServiceImpl.java", "diffHunk": "@@ -99,7 +102,27 @@ public void entitySimplified(Object old, Object newObj) {\n    */\n   private void evictFromSession(Set<Object> os) {\n     for (Object o : os) {\n-      getHibernateTemplate().evict(o);\n+      try {\n+        getHibernateTemplate().evict(o);\n+      } catch (IllegalArgumentException iae) {\n+        if (iae.getMessage().startsWith(\"Non-entity object instance passed to evict\")) {\n+          // This is being thrown in DefaultEvictEventListener.java:94\n+          // Does not appear to be a problem in this case, so trapping\n+          // and ignoring this specific case\n+          LOGGER.debug(\n+              \"Ignoring error with type [\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMzM2OA=="}, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTIxMTI3OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMjoxODoyOFrOHuY39A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMDo0OTo0M1rOHyN1pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwNDA4NA==", "bodyText": "How large would this change be?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518404084", "createdAt": "2020-11-05T22:18:28Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java", "diffHunk": "@@ -36,19 +36,23 @@\n import java.util.Set;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-import org.hibernate.classic.Session;\n+import org.apache.curator.shaded.com.google.common.collect.Lists;\n+import org.hibernate.Session;\n+import org.hibernate.boot.model.relational.AuxiliaryDatabaseObject;\n import org.hibernate.dialect.Dialect;\n-import org.hibernate.engine.Mapping;\n+import org.hibernate.engine.spi.Mapping;\n import org.hibernate.id.PersistentIdentifierGenerator;\n-import org.hibernate.impl.SessionFactoryImpl;\n+import org.hibernate.internal.SessionFactoryImpl;\n import org.hibernate.jdbc.Work;\n-import org.hibernate.mapping.AuxiliaryDatabaseObject;\n import org.hibernate.mapping.Column;\n import org.hibernate.mapping.ForeignKey;\n import org.hibernate.mapping.Index;\n import org.hibernate.mapping.Table;\n import org.hibernate.mapping.UniqueKey;\n \n+// TECH_DEBT - found in SpringHib5, SessionFactoryImpl is now internal and should not be used\n+// directly.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQxNzU3NA==", "bodyText": "Interesting - looks like a pretty minor change.  I got rid of the internal reference.  If things start breaking, I'll revert an open an issue ticket for tech_debt.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522417574", "createdAt": "2020-11-12T20:49:43Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java", "diffHunk": "@@ -36,19 +36,23 @@\n import java.util.Set;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-import org.hibernate.classic.Session;\n+import org.apache.curator.shaded.com.google.common.collect.Lists;\n+import org.hibernate.Session;\n+import org.hibernate.boot.model.relational.AuxiliaryDatabaseObject;\n import org.hibernate.dialect.Dialect;\n-import org.hibernate.engine.Mapping;\n+import org.hibernate.engine.spi.Mapping;\n import org.hibernate.id.PersistentIdentifierGenerator;\n-import org.hibernate.impl.SessionFactoryImpl;\n+import org.hibernate.internal.SessionFactoryImpl;\n import org.hibernate.jdbc.Work;\n-import org.hibernate.mapping.AuxiliaryDatabaseObject;\n import org.hibernate.mapping.Column;\n import org.hibernate.mapping.ForeignKey;\n import org.hibernate.mapping.Index;\n import org.hibernate.mapping.Table;\n import org.hibernate.mapping.UniqueKey;\n \n+// TECH_DEBT - found in SpringHib5, SessionFactoryImpl is now internal and should not be used\n+// directly.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwNDA4NA=="}, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTIxMjk2OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMjoxOTowN1rOHuY5CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMTozMzozMFrOHyPMLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwNDM2MA==", "bodyText": "is this still a pending change?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518404360", "createdAt": "2020-11-05T22:19:07Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateServiceImpl.java", "diffHunk": "@@ -71,7 +72,11 @@ protected HibernateFactory getHibernateFactory(String name, boolean system) {\n     }\n     HibernateFactory factory = hibernateService.createConfiguration(dataSource, clazzes);\n     factory.setClassLoader(getClass().getClassLoader());\n-    factory.setProperty(Environment.TRANSACTION_STRATEGY, SpringTransactionFactory.class.getName());\n+    // TODO - likely need to reconfigure this.  SpringTransactionFactory doesn't exist in\n+    // Spring 5 / Hib5.   -\n+    // https://stackoverflow.com/questions/43057858/where-did-the-class-org-hibernate-transaction-jdbctransactionfactory-go-in-hiber\n+    //    factory.setProperty(Environment.TRANSACTION_STRATEGY,\n+    //     SpringTransactionFactory.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQzOTcyNw==", "bodyText": "no - leftover comment - the default strategy of JDBC suffices.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522439727", "createdAt": "2020-11-12T21:33:30Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateServiceImpl.java", "diffHunk": "@@ -71,7 +72,11 @@ protected HibernateFactory getHibernateFactory(String name, boolean system) {\n     }\n     HibernateFactory factory = hibernateService.createConfiguration(dataSource, clazzes);\n     factory.setClassLoader(getClass().getClassLoader());\n-    factory.setProperty(Environment.TRANSACTION_STRATEGY, SpringTransactionFactory.class.getName());\n+    // TODO - likely need to reconfigure this.  SpringTransactionFactory doesn't exist in\n+    // Spring 5 / Hib5.   -\n+    // https://stackoverflow.com/questions/43057858/where-did-the-class-org-hibernate-transaction-jdbctransactionfactory-go-in-hiber\n+    //    factory.setProperty(Environment.TRANSACTION_STRATEGY,\n+    //     SpringTransactionFactory.class.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwNDM2MA=="}, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTIyMjc5OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Security/com.tle.core.security/src/com/tle/core/security/impl/SecurityAttributeSource.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMjoyMjoxN1rOHuY-yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMToxMDo1NlrOHxlb7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwNTgzMw==", "bodyText": "Is Java 5 in the support matrix?\nI thought it was already set to 7 or 8", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518405833", "createdAt": "2020-11-05T22:22:17Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Security/com.tle.core.security/src/com/tle/core/security/impl/SecurityAttributeSource.java", "diffHunk": "@@ -65,8 +65,8 @@\n       ImmutableSet.of(\n           BaseEntity.class, EntityPack.class, Item.class, ItemPack.class, ActivateRequest.class);\n \n-  final Map<CacheKey, SecurityAttribute> attributeCache =\n-      CollectionFactory.createConcurrentMapIfPossible(16);\n+  // TODO - this assumes Java 5+ is required for oEQ.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQzNjcxOA==", "bodyText": "Sounds right.  I did a search for documentation - our known supported software guide doesn't say - https://openequella.github.io/server-administration/KnownWorkingSupportingSoftware.html\nSO - anyone concerned if we set the minimum version to 7, but note the developers only test against JDK 8?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518436718", "createdAt": "2020-11-05T23:40:34Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Security/com.tle.core.security/src/com/tle/core/security/impl/SecurityAttributeSource.java", "diffHunk": "@@ -65,8 +65,8 @@\n       ImmutableSet.of(\n           BaseEntity.class, EntityPack.class, Item.class, ItemPack.class, ActivateRequest.class);\n \n-  final Map<CacheKey, SecurityAttribute> attributeCache =\n-      CollectionFactory.createConcurrentMapIfPossible(16);\n+  // TODO - this assumes Java 5+ is required for oEQ.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwNTgzMw=="}, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMyMTE4Ng==", "bodyText": "You'll see in project/CommonSettings.scala that we build to target Java 8. So we should probably update the doco site, but also you're free to target 8 here. ;)", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520321186", "createdAt": "2020-11-10T06:30:05Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Security/com.tle.core.security/src/com/tle/core/security/impl/SecurityAttributeSource.java", "diffHunk": "@@ -65,8 +65,8 @@\n       ImmutableSet.of(\n           BaseEntity.class, EntityPack.class, Item.class, ItemPack.class, ActivateRequest.class);\n \n-  final Map<CacheKey, SecurityAttribute> attributeCache =\n-      CollectionFactory.createConcurrentMapIfPossible(16);\n+  // TODO - this assumes Java 5+ is required for oEQ.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwNTgzMw=="}, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc1NTYzMA==", "bodyText": "Sounds good. I've removed the java version comments / checks and opened:\nhttps://github.com/openequella/openequella.github.io/pull/74\n\nto update the docs.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r521755630", "createdAt": "2020-11-12T01:10:56Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Security/com.tle.core.security/src/com/tle/core/security/impl/SecurityAttributeSource.java", "diffHunk": "@@ -65,8 +65,8 @@\n       ImmutableSet.of(\n           BaseEntity.class, EntityPack.class, Item.class, ItemPack.class, ActivateRequest.class);\n \n-  final Map<CacheKey, SecurityAttribute> attributeCache =\n-      CollectionFactory.createConcurrentMapIfPossible(16);\n+  // TODO - this assumes Java 5+ is required for oEQ.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwNTgzMw=="}, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTIyNDU4OnYy", "diffSide": "RIGHT", "path": "Source/Server/equellaserver/build.sbt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMjoyMjo1OVrOHuY_4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMzo1MDo1NVrOHubFQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwNjExNA==", "bodyText": "Is this an error you anticipate people will run into?\nIs including the error in the source a good way to guide adopters/future developers on how to work with this?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518406114", "createdAt": "2020-11-05T22:22:59Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Server/equellaserver/build.sbt", "diffHunk": "@@ -310,6 +381,55 @@ assemblyMergeStrategy in assembly := {\n   case PathList(\"junit\", _*)                                => MergeStrategy.discard\n   case PathList(\"org\", \"apache\", \"axis2\", \"transport\", \"http\", \"util\", \"ComplexPart.class\") =>\n     MergeStrategy.first\n+\n+  // Due to the error: deduplicate: different file contents found in the following:\n+  // ...\n+  //  .../org.apache.cxf/cxf-rt-frontend-jaxws/bundles/cxf-rt-frontend-jaxws-3.4.0.jar:META-INF/cxf/bus-extensions.txt\n+  //  .../org.apache.cxf/cxf-rt-transports-http/bundles/cxf-rt-transports-http-3.4.0.jar:META-INF/cxf/bus-extensions.txt\n+  // ...\n+  // As per https://github.com/johnrengelman/shadow/issues/309 , combining the files.\n+  case PathList(\"META-INF\", \"cxf\", \"bus-extensions.txt\") => MergeStrategy.filterDistinctLines\n+\n+  // Due to the error: deduplicate: different file contents found in the following:\n+  // ...\n+  //  .../org.apache.cxf/cxf-rt-frontend-jaxrs/bundles/cxf-rt-frontend-jaxrs-3.3.6.jar:META-INF/blueprint.handlers\n+  //  .../org.apache.cxf/cxf-rt-frontend-jaxws/bundles/cxf-rt-frontend-jaxws-3.4.0.jar:META-INF/blueprint.handlers\n+  // ...\n+  // Different blueprint.handlers may specify different classes.  Using the first one allows testing to pass.\n+  case PathList(\"META-INF\", \"blueprint.handlers\") => MergeStrategy.first\n+\n+  // OK to do in Java 8 - interesting that the global case for module-info.class didn't pick up the bouncy castle files\n+  // deduplicate: different file contents found in the following:\n+  //  .../io.github.classgraph/classgraph/jars/classgraph-4.8.87.jar:META-INF/versions/9/module-info.class\n+  //  .../org.bouncycastle/bcmail-jdk15on/jars/bcmail-jdk15on-1.65.jar:META-INF/versions/9/module-info.class\n+  //  .../org.bouncycastle/bcpkix-jdk15on/jars/bcpkix-jdk15on-1.65.jar:META-INF/versions/9/module-info.class\n+  //  .../org.bouncycastle/bcprov-jdk15on/jars/bcprov-jdk15on-1.65.jar:META-INF/versions/9/module-info.class", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 346}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ0MDI1Nw==", "bodyText": "see note above", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518440257", "createdAt": "2020-11-05T23:50:55Z", "author": {"login": "cbeach47"}, "path": "Source/Server/equellaserver/build.sbt", "diffHunk": "@@ -310,6 +381,55 @@ assemblyMergeStrategy in assembly := {\n   case PathList(\"junit\", _*)                                => MergeStrategy.discard\n   case PathList(\"org\", \"apache\", \"axis2\", \"transport\", \"http\", \"util\", \"ComplexPart.class\") =>\n     MergeStrategy.first\n+\n+  // Due to the error: deduplicate: different file contents found in the following:\n+  // ...\n+  //  .../org.apache.cxf/cxf-rt-frontend-jaxws/bundles/cxf-rt-frontend-jaxws-3.4.0.jar:META-INF/cxf/bus-extensions.txt\n+  //  .../org.apache.cxf/cxf-rt-transports-http/bundles/cxf-rt-transports-http-3.4.0.jar:META-INF/cxf/bus-extensions.txt\n+  // ...\n+  // As per https://github.com/johnrengelman/shadow/issues/309 , combining the files.\n+  case PathList(\"META-INF\", \"cxf\", \"bus-extensions.txt\") => MergeStrategy.filterDistinctLines\n+\n+  // Due to the error: deduplicate: different file contents found in the following:\n+  // ...\n+  //  .../org.apache.cxf/cxf-rt-frontend-jaxrs/bundles/cxf-rt-frontend-jaxrs-3.3.6.jar:META-INF/blueprint.handlers\n+  //  .../org.apache.cxf/cxf-rt-frontend-jaxws/bundles/cxf-rt-frontend-jaxws-3.4.0.jar:META-INF/blueprint.handlers\n+  // ...\n+  // Different blueprint.handlers may specify different classes.  Using the first one allows testing to pass.\n+  case PathList(\"META-INF\", \"blueprint.handlers\") => MergeStrategy.first\n+\n+  // OK to do in Java 8 - interesting that the global case for module-info.class didn't pick up the bouncy castle files\n+  // deduplicate: different file contents found in the following:\n+  //  .../io.github.classgraph/classgraph/jars/classgraph-4.8.87.jar:META-INF/versions/9/module-info.class\n+  //  .../org.bouncycastle/bcmail-jdk15on/jars/bcmail-jdk15on-1.65.jar:META-INF/versions/9/module-info.class\n+  //  .../org.bouncycastle/bcpkix-jdk15on/jars/bcpkix-jdk15on-1.65.jar:META-INF/versions/9/module-info.class\n+  //  .../org.bouncycastle/bcprov-jdk15on/jars/bcprov-jdk15on-1.65.jar:META-INF/versions/9/module-info.class", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwNjExNA=="}, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 346}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTIyNTA3OnYy", "diffSide": "RIGHT", "path": "Source/Server/equellaserver/build.sbt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMjoyMzoxMFrOHuZALQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMzo1MTowNlrOHubFhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwNjE4OQ==", "bodyText": "Is this an error you anticipate people will run into?\nIs including the error in the source a good way to guide adopters/future developers on how to work with this?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518406189", "createdAt": "2020-11-05T22:23:10Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Server/equellaserver/build.sbt", "diffHunk": "@@ -310,6 +381,55 @@ assemblyMergeStrategy in assembly := {\n   case PathList(\"junit\", _*)                                => MergeStrategy.discard\n   case PathList(\"org\", \"apache\", \"axis2\", \"transport\", \"http\", \"util\", \"ComplexPart.class\") =>\n     MergeStrategy.first\n+\n+  // Due to the error: deduplicate: different file contents found in the following:\n+  // ...\n+  //  .../org.apache.cxf/cxf-rt-frontend-jaxws/bundles/cxf-rt-frontend-jaxws-3.4.0.jar:META-INF/cxf/bus-extensions.txt\n+  //  .../org.apache.cxf/cxf-rt-transports-http/bundles/cxf-rt-transports-http-3.4.0.jar:META-INF/cxf/bus-extensions.txt\n+  // ...\n+  // As per https://github.com/johnrengelman/shadow/issues/309 , combining the files.\n+  case PathList(\"META-INF\", \"cxf\", \"bus-extensions.txt\") => MergeStrategy.filterDistinctLines\n+\n+  // Due to the error: deduplicate: different file contents found in the following:\n+  // ...\n+  //  .../org.apache.cxf/cxf-rt-frontend-jaxrs/bundles/cxf-rt-frontend-jaxrs-3.3.6.jar:META-INF/blueprint.handlers\n+  //  .../org.apache.cxf/cxf-rt-frontend-jaxws/bundles/cxf-rt-frontend-jaxws-3.4.0.jar:META-INF/blueprint.handlers\n+  // ...\n+  // Different blueprint.handlers may specify different classes.  Using the first one allows testing to pass.\n+  case PathList(\"META-INF\", \"blueprint.handlers\") => MergeStrategy.first\n+\n+  // OK to do in Java 8 - interesting that the global case for module-info.class didn't pick up the bouncy castle files\n+  // deduplicate: different file contents found in the following:\n+  //  .../io.github.classgraph/classgraph/jars/classgraph-4.8.87.jar:META-INF/versions/9/module-info.class\n+  //  .../org.bouncycastle/bcmail-jdk15on/jars/bcmail-jdk15on-1.65.jar:META-INF/versions/9/module-info.class\n+  //  .../org.bouncycastle/bcpkix-jdk15on/jars/bcpkix-jdk15on-1.65.jar:META-INF/versions/9/module-info.class\n+  //  .../org.bouncycastle/bcprov-jdk15on/jars/bcprov-jdk15on-1.65.jar:META-INF/versions/9/module-info.class\n+  case PathList(\"META-INF\", \"versions\", \"9\", \"module-info.class\") => MergeStrategy.first\n+\n+  // Curious that it's xml vs soap.  testing passes using the first one.\n+  // Due to the error: deduplicate: different file contents found in the following:\n+  // ...\n+  //  .../org.apache.cxf/cxf-rt-bindings-soap/bundles/cxf-rt-bindings-soap-3.4.0.jar:META-INF/wsdl.plugin.xml\n+  //  .../org.apache.cxf/cxf-rt-bindings-xml/bundles/cxf-rt-bindings-xml-3.4.0.jar:META-INF/wsdl.plugin.xml\n+  // ...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 354}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ0MDMyNg==", "bodyText": "see note above", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518440326", "createdAt": "2020-11-05T23:51:06Z", "author": {"login": "cbeach47"}, "path": "Source/Server/equellaserver/build.sbt", "diffHunk": "@@ -310,6 +381,55 @@ assemblyMergeStrategy in assembly := {\n   case PathList(\"junit\", _*)                                => MergeStrategy.discard\n   case PathList(\"org\", \"apache\", \"axis2\", \"transport\", \"http\", \"util\", \"ComplexPart.class\") =>\n     MergeStrategy.first\n+\n+  // Due to the error: deduplicate: different file contents found in the following:\n+  // ...\n+  //  .../org.apache.cxf/cxf-rt-frontend-jaxws/bundles/cxf-rt-frontend-jaxws-3.4.0.jar:META-INF/cxf/bus-extensions.txt\n+  //  .../org.apache.cxf/cxf-rt-transports-http/bundles/cxf-rt-transports-http-3.4.0.jar:META-INF/cxf/bus-extensions.txt\n+  // ...\n+  // As per https://github.com/johnrengelman/shadow/issues/309 , combining the files.\n+  case PathList(\"META-INF\", \"cxf\", \"bus-extensions.txt\") => MergeStrategy.filterDistinctLines\n+\n+  // Due to the error: deduplicate: different file contents found in the following:\n+  // ...\n+  //  .../org.apache.cxf/cxf-rt-frontend-jaxrs/bundles/cxf-rt-frontend-jaxrs-3.3.6.jar:META-INF/blueprint.handlers\n+  //  .../org.apache.cxf/cxf-rt-frontend-jaxws/bundles/cxf-rt-frontend-jaxws-3.4.0.jar:META-INF/blueprint.handlers\n+  // ...\n+  // Different blueprint.handlers may specify different classes.  Using the first one allows testing to pass.\n+  case PathList(\"META-INF\", \"blueprint.handlers\") => MergeStrategy.first\n+\n+  // OK to do in Java 8 - interesting that the global case for module-info.class didn't pick up the bouncy castle files\n+  // deduplicate: different file contents found in the following:\n+  //  .../io.github.classgraph/classgraph/jars/classgraph-4.8.87.jar:META-INF/versions/9/module-info.class\n+  //  .../org.bouncycastle/bcmail-jdk15on/jars/bcmail-jdk15on-1.65.jar:META-INF/versions/9/module-info.class\n+  //  .../org.bouncycastle/bcpkix-jdk15on/jars/bcpkix-jdk15on-1.65.jar:META-INF/versions/9/module-info.class\n+  //  .../org.bouncycastle/bcprov-jdk15on/jars/bcprov-jdk15on-1.65.jar:META-INF/versions/9/module-info.class\n+  case PathList(\"META-INF\", \"versions\", \"9\", \"module-info.class\") => MergeStrategy.first\n+\n+  // Curious that it's xml vs soap.  testing passes using the first one.\n+  // Due to the error: deduplicate: different file contents found in the following:\n+  // ...\n+  //  .../org.apache.cxf/cxf-rt-bindings-soap/bundles/cxf-rt-bindings-soap-3.4.0.jar:META-INF/wsdl.plugin.xml\n+  //  .../org.apache.cxf/cxf-rt-bindings-xml/bundles/cxf-rt-bindings-xml-3.4.0.jar:META-INF/wsdl.plugin.xml\n+  // ...", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwNjE4OQ=="}, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 354}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTIyNjkxOnYy", "diffSide": "RIGHT", "path": "Source/Server/equellaserver/build.sbt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMjoyMzo1MFrOHuZBVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMzo1MToxNFrOHubFqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwNjQ4Ng==", "bodyText": "Is this an error you anticipate people will run into?\nIs including the error in the source a good way to guide adopters/future developers on how to work with this?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518406486", "createdAt": "2020-11-05T22:23:50Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Server/equellaserver/build.sbt", "diffHunk": "@@ -310,6 +381,55 @@ assemblyMergeStrategy in assembly := {\n   case PathList(\"junit\", _*)                                => MergeStrategy.discard\n   case PathList(\"org\", \"apache\", \"axis2\", \"transport\", \"http\", \"util\", \"ComplexPart.class\") =>\n     MergeStrategy.first\n+\n+  // Due to the error: deduplicate: different file contents found in the following:\n+  // ...\n+  //  .../org.apache.cxf/cxf-rt-frontend-jaxws/bundles/cxf-rt-frontend-jaxws-3.4.0.jar:META-INF/cxf/bus-extensions.txt\n+  //  .../org.apache.cxf/cxf-rt-transports-http/bundles/cxf-rt-transports-http-3.4.0.jar:META-INF/cxf/bus-extensions.txt\n+  // ...\n+  // As per https://github.com/johnrengelman/shadow/issues/309 , combining the files.\n+  case PathList(\"META-INF\", \"cxf\", \"bus-extensions.txt\") => MergeStrategy.filterDistinctLines\n+\n+  // Due to the error: deduplicate: different file contents found in the following:\n+  // ...\n+  //  .../org.apache.cxf/cxf-rt-frontend-jaxrs/bundles/cxf-rt-frontend-jaxrs-3.3.6.jar:META-INF/blueprint.handlers\n+  //  .../org.apache.cxf/cxf-rt-frontend-jaxws/bundles/cxf-rt-frontend-jaxws-3.4.0.jar:META-INF/blueprint.handlers\n+  // ...\n+  // Different blueprint.handlers may specify different classes.  Using the first one allows testing to pass.\n+  case PathList(\"META-INF\", \"blueprint.handlers\") => MergeStrategy.first\n+\n+  // OK to do in Java 8 - interesting that the global case for module-info.class didn't pick up the bouncy castle files\n+  // deduplicate: different file contents found in the following:\n+  //  .../io.github.classgraph/classgraph/jars/classgraph-4.8.87.jar:META-INF/versions/9/module-info.class\n+  //  .../org.bouncycastle/bcmail-jdk15on/jars/bcmail-jdk15on-1.65.jar:META-INF/versions/9/module-info.class\n+  //  .../org.bouncycastle/bcpkix-jdk15on/jars/bcpkix-jdk15on-1.65.jar:META-INF/versions/9/module-info.class\n+  //  .../org.bouncycastle/bcprov-jdk15on/jars/bcprov-jdk15on-1.65.jar:META-INF/versions/9/module-info.class\n+  case PathList(\"META-INF\", \"versions\", \"9\", \"module-info.class\") => MergeStrategy.first\n+\n+  // Curious that it's xml vs soap.  testing passes using the first one.\n+  // Due to the error: deduplicate: different file contents found in the following:\n+  // ...\n+  //  .../org.apache.cxf/cxf-rt-bindings-soap/bundles/cxf-rt-bindings-soap-3.4.0.jar:META-INF/wsdl.plugin.xml\n+  //  .../org.apache.cxf/cxf-rt-bindings-xml/bundles/cxf-rt-bindings-xml-3.4.0.jar:META-INF/wsdl.plugin.xml\n+  // ...\n+  case PathList(\"META-INF\", \"wsdl.plugin.xml\") => MergeStrategy.first\n+\n+  // The idea is to keep the later suffix list.\n+  // Due to the error: deduplicate: different file contents found in the following:\n+  // ...\n+  //  .../org.apache.cxf/cxf-rt-transports-http/bundles/cxf-rt-transports-http-3.3.6.jar:mozilla/public-suffix-list.txt\n+  //  .../org.apache.httpcomponents/httpclient/jars/httpclient-4.5.12.jar:mozilla/public-suffix-list.txt\n+  // ...\n+  case PathList(\"mozilla\", \"public-suffix-list.txt\") => MergeStrategy.last\n+\n+  // java2wsbeans.xml have different contents, and both look important.  Keeping the first one works with testing.\n+  // Due to the error: deduplicate: different file contents found in the following:\n+  // ...\n+  //  .../org.apache.cxf/cxf-rt-databinding-aegis/bundles/cxf-rt-databinding-aegis-3.4.0.jar:META-INF/cxf/java2wsbeans.xml\n+  //  .../org.apache.cxf/cxf-rt-databinding-jaxb/bundles/cxf-rt-databinding-jaxb-3.4.0.jar:META-INF/cxf/java2wsbeans.xml\n+  // ...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 370}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ0MDM2MA==", "bodyText": "see note above", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518440360", "createdAt": "2020-11-05T23:51:14Z", "author": {"login": "cbeach47"}, "path": "Source/Server/equellaserver/build.sbt", "diffHunk": "@@ -310,6 +381,55 @@ assemblyMergeStrategy in assembly := {\n   case PathList(\"junit\", _*)                                => MergeStrategy.discard\n   case PathList(\"org\", \"apache\", \"axis2\", \"transport\", \"http\", \"util\", \"ComplexPart.class\") =>\n     MergeStrategy.first\n+\n+  // Due to the error: deduplicate: different file contents found in the following:\n+  // ...\n+  //  .../org.apache.cxf/cxf-rt-frontend-jaxws/bundles/cxf-rt-frontend-jaxws-3.4.0.jar:META-INF/cxf/bus-extensions.txt\n+  //  .../org.apache.cxf/cxf-rt-transports-http/bundles/cxf-rt-transports-http-3.4.0.jar:META-INF/cxf/bus-extensions.txt\n+  // ...\n+  // As per https://github.com/johnrengelman/shadow/issues/309 , combining the files.\n+  case PathList(\"META-INF\", \"cxf\", \"bus-extensions.txt\") => MergeStrategy.filterDistinctLines\n+\n+  // Due to the error: deduplicate: different file contents found in the following:\n+  // ...\n+  //  .../org.apache.cxf/cxf-rt-frontend-jaxrs/bundles/cxf-rt-frontend-jaxrs-3.3.6.jar:META-INF/blueprint.handlers\n+  //  .../org.apache.cxf/cxf-rt-frontend-jaxws/bundles/cxf-rt-frontend-jaxws-3.4.0.jar:META-INF/blueprint.handlers\n+  // ...\n+  // Different blueprint.handlers may specify different classes.  Using the first one allows testing to pass.\n+  case PathList(\"META-INF\", \"blueprint.handlers\") => MergeStrategy.first\n+\n+  // OK to do in Java 8 - interesting that the global case for module-info.class didn't pick up the bouncy castle files\n+  // deduplicate: different file contents found in the following:\n+  //  .../io.github.classgraph/classgraph/jars/classgraph-4.8.87.jar:META-INF/versions/9/module-info.class\n+  //  .../org.bouncycastle/bcmail-jdk15on/jars/bcmail-jdk15on-1.65.jar:META-INF/versions/9/module-info.class\n+  //  .../org.bouncycastle/bcpkix-jdk15on/jars/bcpkix-jdk15on-1.65.jar:META-INF/versions/9/module-info.class\n+  //  .../org.bouncycastle/bcprov-jdk15on/jars/bcprov-jdk15on-1.65.jar:META-INF/versions/9/module-info.class\n+  case PathList(\"META-INF\", \"versions\", \"9\", \"module-info.class\") => MergeStrategy.first\n+\n+  // Curious that it's xml vs soap.  testing passes using the first one.\n+  // Due to the error: deduplicate: different file contents found in the following:\n+  // ...\n+  //  .../org.apache.cxf/cxf-rt-bindings-soap/bundles/cxf-rt-bindings-soap-3.4.0.jar:META-INF/wsdl.plugin.xml\n+  //  .../org.apache.cxf/cxf-rt-bindings-xml/bundles/cxf-rt-bindings-xml-3.4.0.jar:META-INF/wsdl.plugin.xml\n+  // ...\n+  case PathList(\"META-INF\", \"wsdl.plugin.xml\") => MergeStrategy.first\n+\n+  // The idea is to keep the later suffix list.\n+  // Due to the error: deduplicate: different file contents found in the following:\n+  // ...\n+  //  .../org.apache.cxf/cxf-rt-transports-http/bundles/cxf-rt-transports-http-3.3.6.jar:mozilla/public-suffix-list.txt\n+  //  .../org.apache.httpcomponents/httpclient/jars/httpclient-4.5.12.jar:mozilla/public-suffix-list.txt\n+  // ...\n+  case PathList(\"mozilla\", \"public-suffix-list.txt\") => MergeStrategy.last\n+\n+  // java2wsbeans.xml have different contents, and both look important.  Keeping the first one works with testing.\n+  // Due to the error: deduplicate: different file contents found in the following:\n+  // ...\n+  //  .../org.apache.cxf/cxf-rt-databinding-aegis/bundles/cxf-rt-databinding-aegis-3.4.0.jar:META-INF/cxf/java2wsbeans.xml\n+  //  .../org.apache.cxf/cxf-rt-databinding-jaxb/bundles/cxf-rt-databinding-jaxb-3.4.0.jar:META-INF/cxf/java2wsbeans.xml\n+  // ...", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwNjQ4Ng=="}, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 370}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTIyNzgzOnYy", "diffSide": "RIGHT", "path": "buildspec.yml", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMjoyNDoxMVrOHuZB3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzozODozMVrOH16HFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwNjYyMA==", "bodyText": "is this still todo?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518406620", "createdAt": "2020-11-05T22:24:11Z", "author": {"login": "ChristianMurphy"}, "path": "buildspec.yml", "diffHunk": "@@ -2,7 +2,8 @@ version: 0.2\n \n env:\n   variables:\n-    KALTURA_BRANCH: master\n+    # TODO [SpringHib5] keep this in sync with the appropriate oEQ-Kaltura branch before merging into `develop`, and eventually into `master`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ0MDg2MA==", "bodyText": "Yes - we'll need to coordinate how to merge this PR into develop, and then up into master since Kaltura master has been historical used for all branch builds.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518440860", "createdAt": "2020-11-05T23:52:53Z", "author": {"login": "cbeach47"}, "path": "buildspec.yml", "diffHunk": "@@ -2,7 +2,8 @@ version: 0.2\n \n env:\n   variables:\n-    KALTURA_BRANCH: master\n+    # TODO [SpringHib5] keep this in sync with the appropriate oEQ-Kaltura branch before merging into `develop`, and eventually into `master`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwNjYyMA=="}, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMyNTY5Mg==", "bodyText": "Hmmm, I wonder if you'll want to do the merges on your local machine, and then do an additional commit direct here to modify this, and then push both. \ud83e\udd14", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520325692", "createdAt": "2020-11-10T06:40:03Z", "author": {"login": "edalex-ian"}, "path": "buildspec.yml", "diffHunk": "@@ -2,7 +2,8 @@ version: 0.2\n \n env:\n   variables:\n-    KALTURA_BRANCH: master\n+    # TODO [SpringHib5] keep this in sync with the appropriate oEQ-Kaltura branch before merging into `develop`, and eventually into `master`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwNjYyMA=="}, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgxMzEzNw==", "bodyText": "Not sure of the value add in doing local merges in this case.  Personally, I would rather have github processes do as much of the flow as possible.\nThe problem I see is we now have to keep openEQUELLA and openEQUELLA-Kaltura branches in sync.\nI think the simplest solution would be to setup the following branches in openEQUELLA-Kaltura:\n\nmaster-pre-hib5\nmaster-post-hib5\ndevelop\n\nAnd then as part of the openEQUELLA release process, we modify the CodeBuild branch for Kaltura as needed.\nI've also considered having the branches in openEQUELLA-Kaltura mimic openEQUELLA's branches, but that seems like a lot of effort for little gain.\n@edalex-ian - interested in your thoughts on how to proceed.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r524813137", "createdAt": "2020-11-17T00:51:07Z", "author": {"login": "cbeach47"}, "path": "buildspec.yml", "diffHunk": "@@ -2,7 +2,8 @@ version: 0.2\n \n env:\n   variables:\n-    KALTURA_BRANCH: master\n+    # TODO [SpringHib5] keep this in sync with the appropriate oEQ-Kaltura branch before merging into `develop`, and eventually into `master`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwNjYyMA=="}, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgyMTI3MA==", "bodyText": "No probs, up to you.\nWith the branches, I'd say you'd only want to end up with:\n\ndevelop\nmaster - representing the current up to date code matching oEQ master\npre-2020.2-support\n\nKeeps things simple, but with explicit names. And if you really wanted to highlight the point on the master branch, drop a tag on master with a name like hibernate5-upgrade. Or then again, a version tag should highlight that. \ud83e\udd14", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r524821270", "createdAt": "2020-11-17T01:15:35Z", "author": {"login": "edalex-ian"}, "path": "buildspec.yml", "diffHunk": "@@ -2,7 +2,8 @@ version: 0.2\n \n env:\n   variables:\n-    KALTURA_BRANCH: master\n+    # TODO [SpringHib5] keep this in sync with the appropriate oEQ-Kaltura branch before merging into `develop`, and eventually into `master`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwNjYyMA=="}, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM0NTQ3NQ==", "bodyText": "I like the names you noted - having the version is good, but we don't have to necessarily create a oEQ-K branch for each oEQ branch.  I think the version tag will suffice for the tagging.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r525345475", "createdAt": "2020-11-17T17:23:40Z", "author": {"login": "cbeach47"}, "path": "buildspec.yml", "diffHunk": "@@ -2,7 +2,8 @@ version: 0.2\n \n env:\n   variables:\n-    KALTURA_BRANCH: master\n+    # TODO [SpringHib5] keep this in sync with the appropriate oEQ-Kaltura branch before merging into `develop`, and eventually into `master`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwNjYyMA=="}, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI4ODY2MQ==", "bodyText": "Branches are now created and pushed.  Will open a PR against that repo with a quick explanation of the branches after this merging is complete.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r526288661", "createdAt": "2020-11-18T17:38:31Z", "author": {"login": "cbeach47"}, "path": "buildspec.yml", "diffHunk": "@@ -2,7 +2,8 @@ version: 0.2\n \n env:\n   variables:\n-    KALTURA_BRANCH: master\n+    # TODO [SpringHib5] keep this in sync with the appropriate oEQ-Kaltura branch before merging into `develop`, and eventually into `master`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwNjYyMA=="}, "originalCommit": {"oid": "f68476ba268e987d099639fe3866696a27dba73f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTU0OTc3OnYy", "diffSide": "RIGHT", "path": "Dev/learningedge-config/defaults/learningedge-log4j.properties.default", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwMzo0NDo1NVrOHwKnIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwMzo0NDo1NVrOHwKnIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI2NzU1NA==", "bodyText": "I guess once these are merged in we should have a tech debt issue to map against. Ideally we'd reference that ticket here, but hen we have a bit of chicken and egg.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520267554", "createdAt": "2020-11-10T03:44:55Z", "author": {"login": "edalex-ian"}, "path": "Dev/learningedge-config/defaults/learningedge-log4j.properties.default", "diffHunk": "@@ -10,3 +10,13 @@ log4j.appender.CONSOLE.Target=System.out\n log4j.appender.CONSOLE.Threshold=DEBUG\n log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout\n log4j.appender.CONSOLE.layout.ConversionPattern=%d{ABSOLUTE} %-5p [%c{1}] %m%n\n+\n+# Criteria deprecation warning suppression\n+log4j.appender.CONSOLE.filter.1=org.apache.log4j.varia.StringMatchFilter\n+log4j.appender.CONSOLE.filter.1.StringToMatch=HHH90000022\n+log4j.appender.CONSOLE.filter.1.AcceptOnMatch=false\n+\n+# Generator warning suppression", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTU2NTk4OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.base/src/com/tle/beans/usermanagement/standard/ReplicatedConfiguration.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwMzo1Mzo1NVrOHwKwiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMDozODoxMlrOH0fy5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI2OTk2MA==", "bodyText": "Not sure I'm following this new comment. I guess I'm confused that these aren't going through JPA / Hibernate (how are they used), but also that no other changes are below so is this comment still needed?\nFeels like the comment might be a bit of a fragment of a bigger situation. \ud83e\udd14\nThere's several instances of this comment, so I'm rather interested to understand.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520269960", "createdAt": "2020-11-10T03:53:55Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.base/src/com/tle/beans/usermanagement/standard/ReplicatedConfiguration.java", "diffHunk": "@@ -27,6 +27,8 @@\n \n @SuppressWarnings(\"nls\")\n public class ReplicatedConfiguration extends UserManagementSettings {\n+  // [SpringHib5] Note - these queries with '?' in them do not need to be\n+  // ordinal since they aren't piped through JPA / Hibernate logic.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ5NjcxMA==", "bodyText": "I've revised the comment to the following.  I figured adding this comment without code changes would help clarify why there is a difference.  Does the revision make more sense?\n// General note on the queries in this class - With the advent of hibernate 5,\n// queries with '?' in them need to be ordinal ( ie `?4` ).  However, this class\n// does not leverage the JPA / Hibernate logic, so we can leave the `?`s as-is.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522496710", "createdAt": "2020-11-12T23:19:14Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.base/src/com/tle/beans/usermanagement/standard/ReplicatedConfiguration.java", "diffHunk": "@@ -27,6 +27,8 @@\n \n @SuppressWarnings(\"nls\")\n public class ReplicatedConfiguration extends UserManagementSettings {\n+  // [SpringHib5] Note - these queries with '?' in them do not need to be\n+  // ordinal since they aren't piped through JPA / Hibernate logic.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI2OTk2MA=="}, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgwODkzNQ==", "bodyText": "Good stuff. \ud83d\udc4d", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r524808935", "createdAt": "2020-11-17T00:38:12Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.base/src/com/tle/beans/usermanagement/standard/ReplicatedConfiguration.java", "diffHunk": "@@ -27,6 +27,8 @@\n \n @SuppressWarnings(\"nls\")\n public class ReplicatedConfiguration extends UserManagementSettings {\n+  // [SpringHib5] Note - these queries with '?' in them do not need to be\n+  // ordinal since they aren't piped through JPA / Hibernate logic.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI2OTk2MA=="}, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTU4NjIwOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/copyright/dao/AbstractCopyrightDao.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNDowNToxMVrOHwK7-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNDowNToxMVrOHwK7-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI3Mjg5MA==", "bodyText": "FYI - As we update code where it has the old NLS check comments, we've been removing them seeing it's now cruft with the absence any checking. Feel free to do the same.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520272890", "createdAt": "2020-11-10T04:05:11Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/copyright/dao/AbstractCopyrightDao.java", "diffHunk": "@@ -187,8 +190,9 @@ public H getHoldingForItem(Item item) {\n       return holding;\n     }\n     List<H> holdings =\n-        getHibernateTemplate()\n-            .find(query(\"select p.holding from %p p where p.item = ?\"), item); // $NON-NLS-1$\n+        (List<H>)\n+            getHibernateTemplate()\n+                .find(query(\"select p.holding from %p p where p.item = ?0\"), item); // $NON-NLS-1$", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTY1NjIzOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/i18n/dao/impl/LanguageDaoImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNDo0NDo1OFrOHwLjvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNzo1MDo1OFrOHyGruQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4MzA2OQ==", "bodyText": "Would it be better to keep things simple (even if not enhanced for readability) by simply using i here? If we just want to enhance readability, I would't be opposed to a comment saying: generating ordinal parameter strings of ?0, ?1 .. ?n", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520283069", "createdAt": "2020-11-10T04:44:58Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/i18n/dao/impl/LanguageDaoImpl.java", "diffHunk": "@@ -167,12 +167,13 @@ private void populateNameMap(\n   @Override\n   public void deleteBundles(Collection<Long> bundles) {\n     if (!bundles.isEmpty()) {\n+      int paramCounter = 0;\n       StringBuilder query = new StringBuilder(\"(\"); // $NON-NLS-1$\n       for (int i = 0; i < bundles.size(); i++) {\n         if (i > 0) {\n           query.append(',');\n         }\n-        query.append('?');\n+        query.append('?').append(paramCounter++);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMwMDM0NQ==", "bodyText": "yeah, that's a good point - I switched out paramCounter for i.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522300345", "createdAt": "2020-11-12T17:50:58Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/i18n/dao/impl/LanguageDaoImpl.java", "diffHunk": "@@ -167,12 +167,13 @@ private void populateNameMap(\n   @Override\n   public void deleteBundles(Collection<Long> bundles) {\n     if (!bundles.isEmpty()) {\n+      int paramCounter = 0;\n       StringBuilder query = new StringBuilder(\"(\"); // $NON-NLS-1$\n       for (int i = 0; i < bundles.size(); i++) {\n         if (i > 0) {\n           query.append(',');\n         }\n-        query.append('?');\n+        query.append('?').append(paramCounter++);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4MzA2OQ=="}, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTY2MjgxOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/item/dao/impl/ItemDaoImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNDo0OTowNFrOHwLnvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODowNDoxNlrOHyHNTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4NDA5Mg==", "bodyText": "As before, maybe just use i.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520284092", "createdAt": "2020-11-10T04:49:04Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/item/dao/impl/ItemDaoImpl.java", "diffHunk": "@@ -430,21 +442,26 @@ public ItemIdKey getItemIdKey(Long id) {\n     hql.append(\" FROM Item i WHERE \");\n \n     int i = 0;\n+    int paramCounter = 0;\n     hql.append('(');\n     for (ItemKey key : keys) {\n       if (i > 0) {\n         hql.append(\" OR \");\n       }\n       keyArray[i++] = key.getUuid();\n       keyArray[i++] = key.getVersion();\n-      hql.append(\"(i.uuid = ? and i.version = ?)\");\n+      hql.append(\"(i.uuid = ?\")\n+          .append(paramCounter++)\n+          .append(\" and i.version = ?\")\n+          .append(paramCounter++)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 294}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMwODk0MQ==", "bodyText": "Sounds good \ud83d\udc4d", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522308941", "createdAt": "2020-11-12T18:04:16Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/item/dao/impl/ItemDaoImpl.java", "diffHunk": "@@ -430,21 +442,26 @@ public ItemIdKey getItemIdKey(Long id) {\n     hql.append(\" FROM Item i WHERE \");\n \n     int i = 0;\n+    int paramCounter = 0;\n     hql.append('(');\n     for (ItemKey key : keys) {\n       if (i > 0) {\n         hql.append(\" OR \");\n       }\n       keyArray[i++] = key.getUuid();\n       keyArray[i++] = key.getVersion();\n-      hql.append(\"(i.uuid = ? and i.version = ?)\");\n+      hql.append(\"(i.uuid = ?\")\n+          .append(paramCounter++)\n+          .append(\" and i.version = ?\")\n+          .append(paramCounter++)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4NDA5Mg=="}, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 294}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTY3MDc0OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/item/dao/impl/ItemDaoImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNDo1MzoyMlrOHwLsUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODowOTo1MlrOHyHanA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4NTI2Ng==", "bodyText": "Couple of considerations:\n\nIs this still needed - or was it just while you were working through things? (This can be see just be turning on Hibernate logging.)\nIf still needed, maybe the log message can be improved and maybe change \" sql:\" to \" HQL:\"\nAlso consider placing in block of if(LOGGER.isTraceEnabled())", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520285266", "createdAt": "2020-11-10T04:53:22Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/item/dao/impl/ItemDaoImpl.java", "diffHunk": "@@ -430,21 +442,26 @@ public ItemIdKey getItemIdKey(Long id) {\n     hql.append(\" FROM Item i WHERE \");\n \n     int i = 0;\n+    int paramCounter = 0;\n     hql.append('(');\n     for (ItemKey key : keys) {\n       if (i > 0) {\n         hql.append(\" OR \");\n       }\n       keyArray[i++] = key.getUuid();\n       keyArray[i++] = key.getVersion();\n-      hql.append(\"(i.uuid = ? and i.version = ?)\");\n+      hql.append(\"(i.uuid = ?\")\n+          .append(paramCounter++)\n+          .append(\" and i.version = ?\")\n+          .append(paramCounter++)\n+          .append(\") \");\n     }\n     hql.append(\") \");\n \n     keyArray[i] = CurrentInstitution.get();\n-    hql.append(\" and i.institution = ?\");\n-\n-    List<Object[]> results = getHibernateTemplate().find(hql.toString(), keyArray);\n+    hql.append(\" and i.institution = ?\").append(paramCounter++);\n+    LOGGER.trace(\"selectForIds sql: \" + hql);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 304}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMxMjM0OA==", "bodyText": "I find it helpful to look at the query before Hibernate touches it, so I left it in.  I did wrap it in the isTraceEnabled block and improved the messaging.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522312348", "createdAt": "2020-11-12T18:09:52Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/item/dao/impl/ItemDaoImpl.java", "diffHunk": "@@ -430,21 +442,26 @@ public ItemIdKey getItemIdKey(Long id) {\n     hql.append(\" FROM Item i WHERE \");\n \n     int i = 0;\n+    int paramCounter = 0;\n     hql.append('(');\n     for (ItemKey key : keys) {\n       if (i > 0) {\n         hql.append(\" OR \");\n       }\n       keyArray[i++] = key.getUuid();\n       keyArray[i++] = key.getVersion();\n-      hql.append(\"(i.uuid = ? and i.version = ?)\");\n+      hql.append(\"(i.uuid = ?\")\n+          .append(paramCounter++)\n+          .append(\" and i.version = ?\")\n+          .append(paramCounter++)\n+          .append(\") \");\n     }\n     hql.append(\") \");\n \n     keyArray[i] = CurrentInstitution.get();\n-    hql.append(\" and i.institution = ?\");\n-\n-    List<Object[]> results = getHibernateTemplate().find(hql.toString(), keyArray);\n+    hql.append(\" and i.institution = ?\").append(paramCounter++);\n+    LOGGER.trace(\"selectForIds sql: \" + hql);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4NTI2Ng=="}, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 304}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTY3ODczOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/item/standard/dao/impl/ItemCommentDaoImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNDo1NzoyNlrOHwLw3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMToyMjowNFrOHxlolQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4NjQzMA==", "bodyText": "Gah!\nWell, even the GitHub diff broken down on this one. But from what I can tell it looks like you were careful. Are you giving some extra special testing to this?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520286430", "createdAt": "2020-11-10T04:57:26Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/item/standard/dao/impl/ItemCommentDaoImpl.java", "diffHunk": "@@ -92,112 +92,113 @@ public Object doInHibernate(Session session) {\n   }\n \n   @Override\n-  @SuppressWarnings(\"unchecked\")\n   public List<Comment> getComments(\n       final Item item,\n       final EnumSet<CommentFilter> filter,\n       final CommentOrder order,\n       final int limit) {\n-    return getHibernateTemplate()\n-        .executeFind(\n-            new HibernateCallback() {\n-              @Override\n-              public Object doInHibernate(Session session) {\n-                // SQL QUERY EXPLANATION!\n-                //\n-                // The following is a native SQL query, but Hibernate still\n-                // gives us some love to avoid nastiness. It needs to be a\n-                // native SQL query because HQL doesn't allow for joining onto a\n-                // selected set of result, eg, ...FROM (SELECT ...)...\n-                //\n-                // Tread very carefully.\n-\n-                StringBuilder sb = new StringBuilder(\"SELECT {c.*} FROM comments c\");\n-\n-                if (filter.contains(CommentFilter.ONLY_MOST_RECENT_PER_USER)) {\n-                  sb.append(\" JOIN (\");\n-                  sb.append(\"   SELECT owner, max(date_created) as date_created\");\n-                  sb.append(\"   FROM comments\");\n-                  sb.append(\"   WHERE item_id = :itemdbid\");\n-                  sb.append(\"   AND owner IS NOT NULL\");\n-\n-                  if (filter.contains(CommentFilter.NOT_ANONYMOUS_OR_GUEST)) {\n-                    // We already filter out blank guest rows when we do the\n-                    // group by, so only filter out anonymous comments here.\n-                    sb.append(\"   AND anonymous = :false\");\n-                  }\n-\n-                  if (filter.contains(CommentFilter.MUST_HAVE_COMMENT)) {\n-                    sb.append(\" AND \\\"comment\\\" IS NOT NULL\");\n-                  }\n-\n-                  if (filter.contains(CommentFilter.MUST_HAVE_RATING)) {\n-                    sb.append(\" AND rating > 0\");\n-                  }\n+    return (List<Comment>)\n+        getHibernateTemplate()\n+            .execute(\n+                new HibernateCallback() {\n+                  @Override\n+                  public Object doInHibernate(Session session) {\n+                    // SQL QUERY EXPLANATION!\n+                    //\n+                    // The following is a native SQL query, but Hibernate still\n+                    // gives us some love to avoid nastiness. It needs to be a\n+                    // native SQL query because HQL doesn't allow for joining onto a\n+                    // selected set of result, eg, ...FROM (SELECT ...)...\n+                    //\n+                    // Tread very carefully.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc1ODg2OQ==", "bodyText": "The changes in this file were a handful of casts, and an import path switch.  The github diff unfortunately makes it look quite ugly.\nFor clarity, these are the type castings added:", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r521758869", "createdAt": "2020-11-12T01:22:04Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/item/standard/dao/impl/ItemCommentDaoImpl.java", "diffHunk": "@@ -92,112 +92,113 @@ public Object doInHibernate(Session session) {\n   }\n \n   @Override\n-  @SuppressWarnings(\"unchecked\")\n   public List<Comment> getComments(\n       final Item item,\n       final EnumSet<CommentFilter> filter,\n       final CommentOrder order,\n       final int limit) {\n-    return getHibernateTemplate()\n-        .executeFind(\n-            new HibernateCallback() {\n-              @Override\n-              public Object doInHibernate(Session session) {\n-                // SQL QUERY EXPLANATION!\n-                //\n-                // The following is a native SQL query, but Hibernate still\n-                // gives us some love to avoid nastiness. It needs to be a\n-                // native SQL query because HQL doesn't allow for joining onto a\n-                // selected set of result, eg, ...FROM (SELECT ...)...\n-                //\n-                // Tread very carefully.\n-\n-                StringBuilder sb = new StringBuilder(\"SELECT {c.*} FROM comments c\");\n-\n-                if (filter.contains(CommentFilter.ONLY_MOST_RECENT_PER_USER)) {\n-                  sb.append(\" JOIN (\");\n-                  sb.append(\"   SELECT owner, max(date_created) as date_created\");\n-                  sb.append(\"   FROM comments\");\n-                  sb.append(\"   WHERE item_id = :itemdbid\");\n-                  sb.append(\"   AND owner IS NOT NULL\");\n-\n-                  if (filter.contains(CommentFilter.NOT_ANONYMOUS_OR_GUEST)) {\n-                    // We already filter out blank guest rows when we do the\n-                    // group by, so only filter out anonymous comments here.\n-                    sb.append(\"   AND anonymous = :false\");\n-                  }\n-\n-                  if (filter.contains(CommentFilter.MUST_HAVE_COMMENT)) {\n-                    sb.append(\" AND \\\"comment\\\" IS NOT NULL\");\n-                  }\n-\n-                  if (filter.contains(CommentFilter.MUST_HAVE_RATING)) {\n-                    sb.append(\" AND rating > 0\");\n-                  }\n+    return (List<Comment>)\n+        getHibernateTemplate()\n+            .execute(\n+                new HibernateCallback() {\n+                  @Override\n+                  public Object doInHibernate(Session session) {\n+                    // SQL QUERY EXPLANATION!\n+                    //\n+                    // The following is a native SQL query, but Hibernate still\n+                    // gives us some love to avoid nastiness. It needs to be a\n+                    // native SQL query because HQL doesn't allow for joining onto a\n+                    // selected set of result, eg, ...FROM (SELECT ...)...\n+                    //\n+                    // Tread very carefully.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4NjQzMA=="}, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTY4MDUwOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/legacy/migration/RemoveAssemblerAndActivityWizard.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNDo1ODo0N1rOHwLyAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNDo1ODo0N1rOHwLyAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4NjcyMw==", "bodyText": "Wow, I see this class was using a mixture of these annotations. Well, at least that's now tidied up. \ud83d\udc4d", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520286723", "createdAt": "2020-11-10T04:58:47Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/legacy/migration/RemoveAssemblerAndActivityWizard.java", "diffHunk": "@@ -312,7 +311,7 @@ private void removeAllNodesWithName(PropBagEx xml, String name) {\n   @AccessType(\"field\")\n   @Entity(name = \"ActivityWizard\")\n   public static class FakeActivityWizard extends FakeBaseEntity {\n-    @CollectionOfElements(fetch = FetchType.LAZY)\n+    @ElementCollection(fetch = FetchType.LAZY)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTY5MzY0OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/settings/dao/impl/ConfigurationDaoImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNTowNToyMVrOHwL5Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNTowNToyMVrOHwL5Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4ODU4Ng==", "bodyText": "In this case I see the value of paramCounter. \ud83d\udc4d\n(Just thought I'd mention to avoid an ambiguity.)", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520288586", "createdAt": "2020-11-10T05:05:21Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/settings/dao/impl/ConfigurationDaoImpl.java", "diffHunk": "@@ -56,17 +56,18 @@ public synchronized void deletePropertiesLike(Collection<String> select) {\n     final StringBuilder buffer = new StringBuilder();\n     buffer.append(\"from ConfigurationProperty where (\");\n     int length = select.size();\n+    int paramCounter = 0;\n     Object[] values = select.toArray(new Object[length + 1]);\n     for (int i = 0; i < length; i++) {\n       if (i > 0) {\n         buffer.append(\" or \");\n       }\n       values[i] = values[i].toString() + '%';\n-      buffer.append(\"key.property like ?\");\n+      buffer.append(\"key.property like ?\").append(paramCounter++);\n     }\n     buffer.append(\")\");\n \n-    buffer.append(\" and key.institutionId = ?\");\n+    buffer.append(\" and key.institutionId = ?\").append(paramCounter++);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTcxMjIyOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/web/core/filter/HibernateFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNToxNTozNFrOHwMD6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMzo1NzowMVrOHyT3Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MTMwNw==", "bodyText": "Is this TODO still to be done?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520291307", "createdAt": "2020-11-10T05:15:34Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/web/core/filter/HibernateFilter.java", "diffHunk": "@@ -55,7 +56,10 @@ public FilterResult filterRequest(HttpServletRequest request, HttpServletRespons\n \n       if (!TransactionSynchronizationManager.hasResource(sessionFactory)) {\n         LOGGER.debug(\"Opening single Hibernate Session in OpenSessionInViewFilter\"); // $NON-NLS-1$\n-        Session session = SessionFactoryUtils.getSession(sessionFactory, true);\n+        // TODO - previous code with SessionFactoryUtils:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNjI2Nw==", "bodyText": "mmm leftover comment.  I'll clean it up", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522516267", "createdAt": "2020-11-12T23:57:01Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/web/core/filter/HibernateFilter.java", "diffHunk": "@@ -55,7 +56,10 @@ public FilterResult filterRequest(HttpServletRequest request, HttpServletRespons\n \n       if (!TransactionSynchronizationManager.hasResource(sessionFactory)) {\n         LOGGER.debug(\"Opening single Hibernate Session in OpenSessionInViewFilter\"); // $NON-NLS-1$\n-        Session session = SessionFactoryUtils.getSession(sessionFactory, true);\n+        // TODO - previous code with SessionFactoryUtils:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MTMwNw=="}, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTcxNjA5OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/web/core/filter/HibernateFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNToxNzo1MFrOHwMGUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMToyMToyNVrOHyV3pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MTkyMQ==", "bodyText": "Oh! Is that right? Seems like a significant change and I don't see it in the old code. \ud83e\udd14 \ud83d\ude15", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520291921", "createdAt": "2020-11-10T05:17:50Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/web/core/filter/HibernateFilter.java", "diffHunk": "@@ -74,4 +78,10 @@ public void afterServlet(HttpServletRequest request, HttpServletResponse respons\n     }\n     return result;\n   }\n+\n+  private Session openSession(SessionFactory sessionFactory) {\n+    Session session = sessionFactory.openSession();\n+    session.setHibernateFlushMode(FlushMode.MANUAL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU0OTE1Nw==", "bodyText": "Thanks for calling this out - interesting logic on this one.  I've added a comment in the code to explain why MANUAL is chosen.  @edalex-ian Please let me know if there are further questions on this one.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522549157", "createdAt": "2020-11-13T01:21:25Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.core/src/com/tle/web/core/filter/HibernateFilter.java", "diffHunk": "@@ -74,4 +78,10 @@ public void afterServlet(HttpServletRequest request, HttpServletResponse respons\n     }\n     return result;\n   }\n+\n+  private Session openSession(SessionFactory sessionFactory) {\n+    Session session = sessionFactory.openSession();\n+    session.setHibernateFlushMode(FlushMode.MANUAL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MTkyMQ=="}, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTcyOTE4OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.serverbase/scalasrc/com/tle/core/db/RunWithDB.scala", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNToyNDozNlrOHwMNxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNzoxNTozMFrOH1AMng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MzgyOA==", "bodyText": "@PenghaiZhang do you have any thoughts on how this can be re-worked with a lambda/anonymous function and the Work API mentions at the SO post?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520293828", "createdAt": "2020-11-10T05:24:36Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/scalasrc/com/tle/core/db/RunWithDB.scala", "diffHunk": "@@ -46,7 +48,9 @@ object RunWithDB {\n     if (sessionHolder == null) {\n       sys.error(\"There is no hibernate session - make sure it's inside @Transactional\")\n     }\n-    val con = sessionHolder.getSession().connection()\n+    // TODO this is not the ideal solution.  Need to consider options, such as Work API.\n+    // https://stackoverflow.com/questions/3526556/session-connection-deprecated-on-hibernate\n+    val con = sessionHolder.getSession().asInstanceOf[SessionImpl].connection()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgwNDkyNA==", "bodyText": "Since this works, and we're getting close on time, I propose I move this into a tech debt issue.\n@edalex-ian - any concerns with that path forward?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r524804924", "createdAt": "2020-11-17T00:25:45Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.serverbase/scalasrc/com/tle/core/db/RunWithDB.scala", "diffHunk": "@@ -46,7 +48,9 @@ object RunWithDB {\n     if (sessionHolder == null) {\n       sys.error(\"There is no hibernate session - make sure it's inside @Transactional\")\n     }\n-    val con = sessionHolder.getSession().connection()\n+    // TODO this is not the ideal solution.  Need to consider options, such as Work API.\n+    // https://stackoverflow.com/questions/3526556/session-connection-deprecated-on-hibernate\n+    val con = sessionHolder.getSession().asInstanceOf[SessionImpl].connection()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MzgyOA=="}, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgwOTU5Ng==", "bodyText": "Sure thing. Tech debt issue it is. \ud83d\udc4d", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r524809596", "createdAt": "2020-11-17T00:40:18Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/scalasrc/com/tle/core/db/RunWithDB.scala", "diffHunk": "@@ -46,7 +48,9 @@ object RunWithDB {\n     if (sessionHolder == null) {\n       sys.error(\"There is no hibernate session - make sure it's inside @Transactional\")\n     }\n-    val con = sessionHolder.getSession().connection()\n+    // TODO this is not the ideal solution.  Need to consider options, such as Work API.\n+    // https://stackoverflow.com/questions/3526556/session-connection-deprecated-on-hibernate\n+    val con = sessionHolder.getSession().asInstanceOf[SessionImpl].connection()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MzgyOA=="}, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMzOTgwNg==", "bodyText": "Sounds good - #2525", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r525339806", "createdAt": "2020-11-17T17:15:30Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.serverbase/scalasrc/com/tle/core/db/RunWithDB.scala", "diffHunk": "@@ -46,7 +48,9 @@ object RunWithDB {\n     if (sessionHolder == null) {\n       sys.error(\"There is no hibernate session - make sure it's inside @Transactional\")\n     }\n-    val con = sessionHolder.getSession().connection()\n+    // TODO this is not the ideal solution.  Need to consider options, such as Work API.\n+    // https://stackoverflow.com/questions/3526556/session-connection-deprecated-on-hibernate\n+    val con = sessionHolder.getSession().asInstanceOf[SessionImpl].connection()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MzgyOA=="}, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTczOTA2OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/ExtendedAnnotationConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNToyODozNFrOHwMT9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNToyODozNFrOHwMT9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5NTQxMg==", "bodyText": "I'd normally comment about moving away from the iterator... However in the context and size of this PR, minimal change is good. \ud83d\ude04", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520295412", "createdAt": "2020-11-10T05:28:34Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/ExtendedAnnotationConfiguration.java", "diffHunk": "@@ -18,54 +18,117 @@\n \n package com.tle.core.hibernate;\n \n+import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n+import java.util.Properties;\n import java.util.TreeMap;\n+import org.apache.log4j.Logger;\n+import org.hibernate.boot.Metadata;\n+import org.hibernate.boot.model.relational.AuxiliaryDatabaseObject;\n+import org.hibernate.boot.registry.BootstrapServiceRegistryBuilder;\n import org.hibernate.cfg.Configuration;\n import org.hibernate.dialect.Dialect;\n+import org.hibernate.engine.spi.Mapping;\n+import org.hibernate.engine.spi.SessionFactoryImplementor;\n import org.hibernate.id.IdentifierGenerator;\n import org.hibernate.id.PersistentIdentifierGenerator;\n-import org.hibernate.mapping.AuxiliaryDatabaseObject;\n+import org.hibernate.integrator.spi.Integrator;\n import org.hibernate.mapping.Collection;\n import org.hibernate.mapping.IdentifierCollection;\n import org.hibernate.mapping.PersistentClass;\n import org.hibernate.mapping.RootClass;\n import org.hibernate.mapping.Table;\n+import org.hibernate.service.spi.SessionFactoryServiceRegistry;\n import org.hibernate.type.BasicType;\n \n public class ExtendedAnnotationConfiguration extends Configuration {\n   private static final long serialVersionUID = 1L;\n \n+  private static final Logger LOGGER = Logger.getLogger(ExtendedAnnotationConfiguration.class);\n+\n+  private static class MetadataCapture implements Integrator {\n+    private Metadata metadata;\n+\n+    public Metadata getMetadata() {\n+      return metadata;\n+    }\n+\n+    @Override\n+    public void integrate(\n+        Metadata metadata,\n+        SessionFactoryImplementor sessionFactory,\n+        SessionFactoryServiceRegistry serviceRegistry) {\n+      LOGGER.trace(\"integrating metadata\");\n+      this.metadata = metadata;\n+    }\n+\n+    @Override\n+    public void disintegrate(\n+        SessionFactoryImplementor sessionFactory, SessionFactoryServiceRegistry serviceRegistry) {\n+      LOGGER.trace(\"disintegrating metadata\");\n+      this.metadata = null;\n+    }\n+  }\n+\n+  private static final MetadataCapture METADATA_CAPTURE = new MetadataCapture();\n+\n   public ExtendedAnnotationConfiguration(ExtendedDialect dialect) {\n+    super(new BootstrapServiceRegistryBuilder().applyIntegrator(METADATA_CAPTURE).build());\n+    LOGGER.trace(\"Starting up a new configuration\");\n     Iterable<? extends BasicType> types = dialect.getExtraTypeOverrides();\n     for (BasicType basicType : types) {\n+      if (LOGGER.isTraceEnabled()) {\n+        LOGGER.trace(\"Registering basic type [\" + basicType.getName() + \"]\");\n+      }\n       registerTypeOverride(basicType);\n     }\n+    logProps(super.getProperties(), \"Hibernate properties after building config object\");\n   }\n \n   public Map<String, Table> getTableMap() {\n+    if (METADATA_CAPTURE.getMetadata() == null) {\n+      throw new IllegalStateException(\n+          \"Cannot access Hibernate Metadata before a SessionFactory has been created\");\n+    }\n+    Map<String, Table> tables = new HashMap<>();\n+    for (Table t : METADATA_CAPTURE.getMetadata().collectTableMappings()) {\n+      tables.put(t.getName(), t);\n+    }\n     return tables;\n   }\n \n   public List<AuxiliaryDatabaseObject> getAuxiliaryDatabaseObjects() {\n-    return auxiliaryDatabaseObjects;\n+    if (METADATA_CAPTURE.getMetadata() == null) {\n+      throw new IllegalStateException(\n+          \"Cannot access Hibernate Metadata before a SessionFactory has been created\");\n+    }\n+    List<AuxiliaryDatabaseObject> ados = new ArrayList<>();\n+    ados.addAll(METADATA_CAPTURE.getMetadata().getDatabase().getAuxiliaryDatabaseObjects());\n+    return ados;\n   }\n \n   public java.util.Collection<PersistentIdentifierGenerator> getGenerators(\n       Dialect dialect, String defaultCatalog, String defaultSchema) {\n+    if (METADATA_CAPTURE.getMetadata() == null) {\n+      throw new IllegalStateException(\n+          \"Cannot access Hibernate Metadata before a SessionFactory has been created\");\n+    }\n+\n     TreeMap<Object, PersistentIdentifierGenerator> generators =\n         new TreeMap<Object, PersistentIdentifierGenerator>();\n \n-    Iterator<PersistentClass> iter = classes.values().iterator();\n+    Iterator<PersistentClass> iter = METADATA_CAPTURE.getMetadata().getEntityBindings().iterator();\n     while (iter.hasNext()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTc1MDY4OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/HibernateFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNTozMToyNlrOHwMbWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODo0MToyNVrOHyInwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5NzMwNw==", "bodyText": "I'm concerned this could impact start-up times and load - even if only minor. Could this be wrapped in a isTraceEnabled() check please?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520297307", "createdAt": "2020-11-10T05:31:26Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/HibernateFactory.java", "diffHunk": "@@ -57,14 +65,20 @@ public synchronized ExtendedAnnotationConfiguration getConfiguration() {\n         setContextLoader(classLoader);\n         ExtendedDialect dialect = dataSourceHolder.getDialect();\n         this.config = new ExtendedAnnotationConfiguration(dialect);\n-        config.setProperties(properties);\n         config.setProperty(Environment.CONNECTION_PROVIDER, DataSourceProvider.class.getName());\n-        properties.put(KEY_DATASOURCE, dataSourceHolder.getDataSource());\n+        properties.put(Environment.DATASOURCE, dataSourceHolder.getDataSource());\n+        config.addProperties(properties);\n         config.setProperty(Environment.DIALECT, dialect.getClass().getName());\n         config.setProperty(Environment.USE_SECOND_LEVEL_CACHE, \"false\");\n-        config.setProperty(\"javax.persistence.validation.mode\", \"DDL\");\n-        config.setNamingStrategy(new LowercaseImprovedNamingScheme());\n+        config.setProperty(Environment.JPA_VALIDATION_MODE, \"DDL\");\n+        // Due to https://hibernate.atlassian.net/browse/HHH-12665 with SpringHib5,\n+        // certain operations, like importing a institution would fail with a\n+        // `javax.persistence.TransactionRequiredException: no transaction is in progress`\n+        config.setProperty(Environment.ALLOW_UPDATE_OUTSIDE_TRANSACTION, \"true\");\n+        config.setImplicitNamingStrategy(new OeqImplicitNamingStrategy());\n+        config.setPhysicalNamingStrategy(new OeqPhysicalNamingStrategy());\n         for (Class<?> class1 : clazzes) {\n+          LOGGER.trace(\"Adding annotated class: \" + class1.getCanonicalName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMzMjA5Nw==", "bodyText": "yep, done.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522332097", "createdAt": "2020-11-12T18:41:25Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/HibernateFactory.java", "diffHunk": "@@ -57,14 +65,20 @@ public synchronized ExtendedAnnotationConfiguration getConfiguration() {\n         setContextLoader(classLoader);\n         ExtendedDialect dialect = dataSourceHolder.getDialect();\n         this.config = new ExtendedAnnotationConfiguration(dialect);\n-        config.setProperties(properties);\n         config.setProperty(Environment.CONNECTION_PROVIDER, DataSourceProvider.class.getName());\n-        properties.put(KEY_DATASOURCE, dataSourceHolder.getDataSource());\n+        properties.put(Environment.DATASOURCE, dataSourceHolder.getDataSource());\n+        config.addProperties(properties);\n         config.setProperty(Environment.DIALECT, dialect.getClass().getName());\n         config.setProperty(Environment.USE_SECOND_LEVEL_CACHE, \"false\");\n-        config.setProperty(\"javax.persistence.validation.mode\", \"DDL\");\n-        config.setNamingStrategy(new LowercaseImprovedNamingScheme());\n+        config.setProperty(Environment.JPA_VALIDATION_MODE, \"DDL\");\n+        // Due to https://hibernate.atlassian.net/browse/HHH-12665 with SpringHib5,\n+        // certain operations, like importing a institution would fail with a\n+        // `javax.persistence.TransactionRequiredException: no transaction is in progress`\n+        config.setProperty(Environment.ALLOW_UPDATE_OUTSIDE_TRANSACTION, \"true\");\n+        config.setImplicitNamingStrategy(new OeqImplicitNamingStrategy());\n+        config.setPhysicalNamingStrategy(new OeqPhysicalNamingStrategy());\n         for (Class<?> class1 : clazzes) {\n+          LOGGER.trace(\"Adding annotated class: \" + class1.getCanonicalName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5NzMwNw=="}, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTc1NzMxOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/dao/GenericDaoImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNTozNToxN1rOHwMfRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODo1NDo1NVrOHyJHuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5ODMxMQ==", "bodyText": "That could be for good reason, as it possibly implies we're in an unexpected state - but would depend on how oEQ is written.\nTo match your new if block I wonder if there is value having an else to log a warning. (Of it it's super prevalent, maybe at a lower log level.)", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520298311", "createdAt": "2020-11-10T05:35:17Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/dao/GenericDaoImpl.java", "diffHunk": "@@ -136,7 +136,10 @@ public void delete(T entity) {\n   @Override\n   @Transactional(propagation = Propagation.MANDATORY)\n   public void unlinkFromSession(Object obj) {\n-    getHibernateTemplate().evict(obj);\n+    // Hibernate now throws an NullPointerException if we try evicting a null object", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM0MDI4Mw==", "bodyText": "I like the idea of not just swallowing the null object state.  I added a warning and will check the logs during tests - it's currently the only logging statement in the class, so if it gets noisy, it's simple enough to switch off.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522340283", "createdAt": "2020-11-12T18:54:55Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/dao/GenericDaoImpl.java", "diffHunk": "@@ -136,7 +136,10 @@ public void delete(T entity) {\n   @Override\n   @Transactional(propagation = Propagation.MANDATORY)\n   public void unlinkFromSession(Object obj) {\n-    getHibernateTemplate().evict(obj);\n+    // Hibernate now throws an NullPointerException if we try evicting a null object", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5ODMxMQ=="}, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTc2NDA2OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/equella/service/impl/InitialiserServiceImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNTozOTowN1rOHwMjWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMDo0ODozN1rOH0f_8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5OTM1NA==", "bodyText": "This could be brittle. Are we better to have a look at the cause and/or stack trace and check the class, method or file?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520299354", "createdAt": "2020-11-10T05:39:07Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/equella/service/impl/InitialiserServiceImpl.java", "diffHunk": "@@ -99,7 +102,27 @@ public void entitySimplified(Object old, Object newObj) {\n    */\n   private void evictFromSession(Set<Object> os) {\n     for (Object o : os) {\n-      getHibernateTemplate().evict(o);\n+      try {\n+        getHibernateTemplate().evict(o);\n+      } catch (IllegalArgumentException iae) {\n+        if (iae.getMessage().startsWith(\"Non-entity object instance passed to evict\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU3OTA1MA==", "bodyText": "It may work as well to bind to the stack trace, class, or other indicator(s).  However, after further consideration of the situation, I feel it\u2019s sufficient to bind to the message than a specific stack trace, given the message specificity.\nI did end up removing the error logging below this statement - it proved to just be creating noise.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522579050", "createdAt": "2020-11-13T02:54:37Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/equella/service/impl/InitialiserServiceImpl.java", "diffHunk": "@@ -99,7 +102,27 @@ public void entitySimplified(Object old, Object newObj) {\n    */\n   private void evictFromSession(Set<Object> os) {\n     for (Object o : os) {\n-      getHibernateTemplate().evict(o);\n+      try {\n+        getHibernateTemplate().evict(o);\n+      } catch (IllegalArgumentException iae) {\n+        if (iae.getMessage().startsWith(\"Non-entity object instance passed to evict\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5OTM1NA=="}, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgxMjI3NQ==", "bodyText": "I guess the only difference if it does break is that a debug log message will be missing, so no probs. \ud83d\ude09", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r524812275", "createdAt": "2020-11-17T00:48:37Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/equella/service/impl/InitialiserServiceImpl.java", "diffHunk": "@@ -99,7 +102,27 @@ public void entitySimplified(Object old, Object newObj) {\n    */\n   private void evictFromSession(Set<Object> os) {\n     for (Object o : os) {\n-      getHibernateTemplate().evict(o);\n+      try {\n+        getHibernateTemplate().evict(o);\n+      } catch (IllegalArgumentException iae) {\n+        if (iae.getMessage().startsWith(\"Non-entity object instance passed to evict\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5OTM1NA=="}, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTc2ODcxOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNTo0MToxN1rOHwMl7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMDo1MDowM1rOHyN2Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMwMDAxMg==", "bodyText": "Should raise a matching GitHub issue and reference here.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520300012", "createdAt": "2020-11-10T05:41:17Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java", "diffHunk": "@@ -36,19 +36,23 @@\n import java.util.Set;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-import org.hibernate.classic.Session;\n+import org.apache.curator.shaded.com.google.common.collect.Lists;\n+import org.hibernate.Session;\n+import org.hibernate.boot.model.relational.AuxiliaryDatabaseObject;\n import org.hibernate.dialect.Dialect;\n-import org.hibernate.engine.Mapping;\n+import org.hibernate.engine.spi.Mapping;\n import org.hibernate.id.PersistentIdentifierGenerator;\n-import org.hibernate.impl.SessionFactoryImpl;\n+import org.hibernate.internal.SessionFactoryImpl;\n import org.hibernate.jdbc.Work;\n-import org.hibernate.mapping.AuxiliaryDatabaseObject;\n import org.hibernate.mapping.Column;\n import org.hibernate.mapping.ForeignKey;\n import org.hibernate.mapping.Index;\n import org.hibernate.mapping.Table;\n import org.hibernate.mapping.UniqueKey;\n \n+// TECH_DEBT - found in SpringHib5, SessionFactoryImpl is now internal and should not be used", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQxNzcxNQ==", "bodyText": "Ended up just removing the internal reference.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522417715", "createdAt": "2020-11-12T20:50:03Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java", "diffHunk": "@@ -36,19 +36,23 @@\n import java.util.Set;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-import org.hibernate.classic.Session;\n+import org.apache.curator.shaded.com.google.common.collect.Lists;\n+import org.hibernate.Session;\n+import org.hibernate.boot.model.relational.AuxiliaryDatabaseObject;\n import org.hibernate.dialect.Dialect;\n-import org.hibernate.engine.Mapping;\n+import org.hibernate.engine.spi.Mapping;\n import org.hibernate.id.PersistentIdentifierGenerator;\n-import org.hibernate.impl.SessionFactoryImpl;\n+import org.hibernate.internal.SessionFactoryImpl;\n import org.hibernate.jdbc.Work;\n-import org.hibernate.mapping.AuxiliaryDatabaseObject;\n import org.hibernate.mapping.Column;\n import org.hibernate.mapping.ForeignKey;\n import org.hibernate.mapping.Index;\n import org.hibernate.mapping.Table;\n import org.hibernate.mapping.UniqueKey;\n \n+// TECH_DEBT - found in SpringHib5, SessionFactoryImpl is now internal and should not be used", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMwMDAxMg=="}, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTc3OTQ3OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNTo0NjozM1rOHwMsJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDoxODoxMlrOH0Pxtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMwMTYwNQ==", "bodyText": "All the additional logging has made this method now rather long and cumbersome - especially when combined with all the branching and nesting. I think now it needs to be split into it's core parts as part of this.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520301605", "createdAt": "2020-11-10T05:46:33Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java", "diffHunk": "@@ -102,38 +108,93 @@ public HibernateMigrationHelper(HibernateFactory factory, String defaultSchema)\n         Iterator<Index> subIter = table.getIndexIterator();\n         while (subIter.hasNext()) {\n           Index index = subIter.next();\n-          if (filter.includeIndex(table, index)\n-              && (!extDialect.supportsAutoIndexForUniqueColumn()\n-                  || !hasUniqueIndex(index, table))) {\n-            sqlStrings.add(index.sqlCreateString(dialect, mapping, defaultCatalog, defaultSchema));\n+          final boolean addIndex =\n+              filter.includeIndex(table, index)\n+                  && (!extDialect.supportsAutoIndexForUniqueColumn()\n+                      || !hasUniqueIndex(index, table));\n+          if (LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"Index to review: \" + index.toString());\n+            LOGGER.debug(\"Filter.includeIndex? \" + filter.includeIndex(table, index));\n+            LOGGER.debug(\n+                \"Dialect [\"\n+                    + extDialect.getClass().getName()\n+                    + \"] - supportsAutoIndexForUniqueColumn? \"\n+                    + extDialect.supportsAutoIndexForUniqueColumn());\n+            LOGGER.debug(\"HasUniqueIndex? \" + hasUniqueIndex(index, table));\n+            LOGGER.debug(\"Should index be added? \" + addIndex);\n+          }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU0NjQ4Nw==", "bodyText": "Fair point - This is split out now", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r524546487", "createdAt": "2020-11-16T20:18:12Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java", "diffHunk": "@@ -102,38 +108,93 @@ public HibernateMigrationHelper(HibernateFactory factory, String defaultSchema)\n         Iterator<Index> subIter = table.getIndexIterator();\n         while (subIter.hasNext()) {\n           Index index = subIter.next();\n-          if (filter.includeIndex(table, index)\n-              && (!extDialect.supportsAutoIndexForUniqueColumn()\n-                  || !hasUniqueIndex(index, table))) {\n-            sqlStrings.add(index.sqlCreateString(dialect, mapping, defaultCatalog, defaultSchema));\n+          final boolean addIndex =\n+              filter.includeIndex(table, index)\n+                  && (!extDialect.supportsAutoIndexForUniqueColumn()\n+                      || !hasUniqueIndex(index, table));\n+          if (LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"Index to review: \" + index.toString());\n+            LOGGER.debug(\"Filter.includeIndex? \" + filter.includeIndex(table, index));\n+            LOGGER.debug(\n+                \"Dialect [\"\n+                    + extDialect.getClass().getName()\n+                    + \"] - supportsAutoIndexForUniqueColumn? \"\n+                    + extDialect.supportsAutoIndexForUniqueColumn());\n+            LOGGER.debug(\"HasUniqueIndex? \" + hasUniqueIndex(index, table));\n+            LOGGER.debug(\"Should index be added? \" + addIndex);\n+          }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMwMTYwNQ=="}, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTc5MDk3OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNTo1MjowMFrOHwMypw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMToyMzoyMlrOHyO4bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMwMzI3MQ==", "bodyText": "Eeck! Am I reading this wrong? To me it seems sqlStrings should have ... SQL. It would seem this should have been another LOGGER.debug() followed by sqlStrings.add(sql)?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520303271", "createdAt": "2020-11-10T05:52:00Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java", "diffHunk": "@@ -576,12 +687,16 @@ private void processIndex(\n     String existingIndex = revIndexMap.get(indexCols);\n     if (existingIndex != null) {\n       if (existingIndex.equalsIgnoreCase(index.getName())) {\n+        LOGGER.debug(\"Index [\" + index.getName() + \"] exists.  returning.\");\n         return;\n       } else {\n-        sqlStrings.add(extDialect.getDropIndexSql(table.getName(), '`' + existingIndex + '`'));\n+        final String sql = extDialect.getDropIndexSql(table.getName(), '`' + existingIndex + '`');\n+        LOGGER.debug(\"Index does not exist.  Dropping index [\" + index.getName() + \"]\");\n+        sqlStrings.add(sql);\n       }\n     }\n-    sqlStrings.add(index.sqlCreateString(dialect, mapping, defaultCatalog, defaultSchema));\n+    final String sql = index.sqlCreateString(dialect, mapping, defaultCatalog, defaultSchema);\n+    sqlStrings.add(\"Existing index is null.  Creating index SQL: \" + sql);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 288}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQzNDY3MQ==", "bodyText": "oy - good catch.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522434671", "createdAt": "2020-11-12T21:23:22Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java", "diffHunk": "@@ -576,12 +687,16 @@ private void processIndex(\n     String existingIndex = revIndexMap.get(indexCols);\n     if (existingIndex != null) {\n       if (existingIndex.equalsIgnoreCase(index.getName())) {\n+        LOGGER.debug(\"Index [\" + index.getName() + \"] exists.  returning.\");\n         return;\n       } else {\n-        sqlStrings.add(extDialect.getDropIndexSql(table.getName(), '`' + existingIndex + '`'));\n+        final String sql = extDialect.getDropIndexSql(table.getName(), '`' + existingIndex + '`');\n+        LOGGER.debug(\"Index does not exist.  Dropping index [\" + index.getName() + \"]\");\n+        sqlStrings.add(sql);\n       }\n     }\n-    sqlStrings.add(index.sqlCreateString(dialect, mapping, defaultCatalog, defaultSchema));\n+    final String sql = index.sqlCreateString(dialect, mapping, defaultCatalog, defaultSchema);\n+    sqlStrings.add(\"Existing index is null.  Creating index SQL: \" + sql);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMwMzI3MQ=="}, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 288}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTc5MjY4OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNTo1Mjo1MFrOHwMztA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMTozNDoxMlrOHyPNfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMwMzU0MA==", "bodyText": "This combined with the TODO below makes it look like this file is still a WIP?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520303540", "createdAt": "2020-11-10T05:52:50Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateServiceImpl.java", "diffHunk": "@@ -31,8 +31,9 @@\n import javax.inject.Singleton;\n import org.hibernate.SessionFactory;\n import org.hibernate.cfg.Environment;\n-import org.springframework.orm.hibernate3.SpringSessionContext;\n-import org.springframework.orm.hibernate3.SpringTransactionFactory;\n+import org.springframework.orm.hibernate5.SpringSessionContext;\n+\n+// import org.springframework.orm.hibernate5.SpringTransactionFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ0MDA2Mw==", "bodyText": "no - I'll remove the comment and the todo - the default strategy of JDBC suffices.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522440063", "createdAt": "2020-11-12T21:34:12Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateServiceImpl.java", "diffHunk": "@@ -31,8 +31,9 @@\n import javax.inject.Singleton;\n import org.hibernate.SessionFactory;\n import org.hibernate.cfg.Environment;\n-import org.springframework.orm.hibernate3.SpringSessionContext;\n-import org.springframework.orm.hibernate3.SpringTransactionFactory;\n+import org.springframework.orm.hibernate5.SpringSessionContext;\n+\n+// import org.springframework.orm.hibernate5.SpringTransactionFactory;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMwMzU0MA=="}, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTc5NDMxOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/type/HibernateCsvType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNTo1Mzo0NlrOHwM0uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMTo0MTozOVrOHyPbyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMwMzgwMw==", "bodyText": "Needs a GitHub Issue and reference.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520303803", "createdAt": "2020-11-10T05:53:46Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/type/HibernateCsvType.java", "diffHunk": "@@ -29,9 +29,12 @@\n import java.util.StringTokenizer;\n import org.apache.log4j.Logger;\n import org.hibernate.HibernateException;\n+import org.hibernate.engine.spi.SharedSessionContractImplementor;\n+import org.hibernate.internal.util.SerializationHelper;\n import org.hibernate.type.SerializationException;\n import org.hibernate.usertype.UserType;\n-import org.hibernate.util.SerializationHelper;\n+\n+// TECH_DEBT - found in SpringHib5, StringHelper is now internal and should not be used directly.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ0MzcyMA==", "bodyText": "Ended up removing that comment entirely", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522443720", "createdAt": "2020-11-12T21:41:39Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/type/HibernateCsvType.java", "diffHunk": "@@ -29,9 +29,12 @@\n import java.util.StringTokenizer;\n import org.apache.log4j.Logger;\n import org.hibernate.HibernateException;\n+import org.hibernate.engine.spi.SharedSessionContractImplementor;\n+import org.hibernate.internal.util.SerializationHelper;\n import org.hibernate.type.SerializationException;\n import org.hibernate.usertype.UserType;\n-import org.hibernate.util.SerializationHelper;\n+\n+// TECH_DEBT - found in SpringHib5, StringHelper is now internal and should not be used directly.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMwMzgwMw=="}, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTgwMzc4OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/InPlaceUniqueDelegate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNTo1ODoxOFrOHwM6Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNTo1ODoxOFrOHwM6Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMwNTE4Ng==", "bodyText": "Might as well do as proper bit of JavaDoc.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520305186", "createdAt": "2020-11-10T05:58:18Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/InPlaceUniqueDelegate.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.hibernate.dialect;\n+\n+import java.util.Iterator;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.hibernate.dialect.Dialect;\n+import org.hibernate.dialect.unique.DefaultUniqueDelegate;\n+import org.hibernate.mapping.Table;\n+import org.hibernate.mapping.UniqueKey;\n+\n+// Standard Hib 5.3+ does not include the unique constraints\n+//  in the create table logic, so we need to add our own.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTgzMTA4OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/InPlaceUniqueDelegate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNjowOToxOFrOHwNLXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMTo0NzoyNVrOHyPmmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMwOTU5OA==", "bodyText": "Could void the iterator and go with:\n    StringBuilder sb = new StringBuilder();\n    table.getUniqueKeyIterator()\n      .forEachRemaining(uniqueKey ->\n        sb\n          .append(\", \")\n          .append(uniqueConstraintSql(uniqueKey)));\nBe nice to take it to a stream so you could simply reduce, but.... You're starting from an Iterator. \ud83d\ude1e", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520309598", "createdAt": "2020-11-10T06:09:18Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/InPlaceUniqueDelegate.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.hibernate.dialect;\n+\n+import java.util.Iterator;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.hibernate.dialect.Dialect;\n+import org.hibernate.dialect.unique.DefaultUniqueDelegate;\n+import org.hibernate.mapping.Table;\n+import org.hibernate.mapping.UniqueKey;\n+\n+// Standard Hib 5.3+ does not include the unique constraints\n+//  in the create table logic, so we need to add our own.\n+public class InPlaceUniqueDelegate extends DefaultUniqueDelegate {\n+  private static final Log LOGGER = LogFactory.getLog(InPlaceUniqueDelegate.class);\n+\n+  public InPlaceUniqueDelegate(Dialect dialect) {\n+    super(dialect);\n+  }\n+\n+  @Override\n+  public String getTableCreationUniqueConstraintsFragment(Table table) {\n+    Iterator<UniqueKey> iter = table.getUniqueKeyIterator();\n+    StringBuilder sb = new StringBuilder();\n+    while (iter.hasNext()) {\n+      sb.append(\", \").append(uniqueConstraintSql(iter.next()));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ0NjQ4OA==", "bodyText": "works for me - done.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522446488", "createdAt": "2020-11-12T21:47:25Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/InPlaceUniqueDelegate.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.hibernate.dialect;\n+\n+import java.util.Iterator;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.hibernate.dialect.Dialect;\n+import org.hibernate.dialect.unique.DefaultUniqueDelegate;\n+import org.hibernate.mapping.Table;\n+import org.hibernate.mapping.UniqueKey;\n+\n+// Standard Hib 5.3+ does not include the unique constraints\n+//  in the create table logic, so we need to add our own.\n+public class InPlaceUniqueDelegate extends DefaultUniqueDelegate {\n+  private static final Log LOGGER = LogFactory.getLog(InPlaceUniqueDelegate.class);\n+\n+  public InPlaceUniqueDelegate(Dialect dialect) {\n+    super(dialect);\n+  }\n+\n+  @Override\n+  public String getTableCreationUniqueConstraintsFragment(Table table) {\n+    Iterator<UniqueKey> iter = table.getUniqueKeyIterator();\n+    StringBuilder sb = new StringBuilder();\n+    while (iter.hasNext()) {\n+      sb.append(\", \").append(uniqueConstraintSql(iter.next()));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMwOTU5OA=="}, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTgzNjIxOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/MySQL5DialectEQUELLA.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNjoxMDoyOVrOHwNOtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMTo1Mjo0OFrOHyPxSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMxMDQ1Mg==", "bodyText": "That is interesting. Wonder if it still even works, or if it should be removed. Wonder if it'd be worth raising a GitHub ticket for someone to check. \ud83e\udd37", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520310452", "createdAt": "2020-11-10T06:10:29Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/MySQL5DialectEQUELLA.java", "diffHunk": "@@ -22,9 +22,12 @@\n \n public class MySQL5DialectEQUELLA extends org.hibernate.dialect.MySQL5Dialect {\n   @Override\n-  protected void registerColumnType(int code, int capacity, String name) {\n+  protected void registerColumnType(int code, String name) {\n+    // Note, due to using SpringHib5, had to remove the capacity parameter.\n+    // Interesting this dialect is even in here, since MySQL is not one of\n+    //  the supported oEQ DBs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ0OTIyNg==", "bodyText": "Can't hurt - I opened #2508", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522449226", "createdAt": "2020-11-12T21:52:48Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/MySQL5DialectEQUELLA.java", "diffHunk": "@@ -22,9 +22,12 @@\n \n public class MySQL5DialectEQUELLA extends org.hibernate.dialect.MySQL5Dialect {\n   @Override\n-  protected void registerColumnType(int code, int capacity, String name) {\n+  protected void registerColumnType(int code, String name) {\n+    // Note, due to using SpringHib5, had to remove the capacity parameter.\n+    // Interesting this dialect is even in here, since MySQL is not one of\n+    //  the supported oEQ DBs", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMxMDQ1Mg=="}, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTgzOTg2OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqImplicitNamingStrategy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNjoxMToyOFrOHwNRPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMjowNToyOVrOHyQJmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMxMTEwMg==", "bodyText": "Could you please add a JavaDoc description.\nI gather it is only handling Join table bits, and the rest is all for logging. If so, two things:\n\nThe JavaDoc should capture that, and I wonder if we should have a more explicit class name - on the assumption that if we needed more we add them;\nIf we only have all the other methods for logging, do we need them? Or if one wanted to see what was happening should they just turn the logging on for ImplicitNamingStrategyJpaCompliantImpl?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520311102", "createdAt": "2020-11-10T06:11:28Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqImplicitNamingStrategy.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.hibernate.dialect;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.log4j.Logger;\n+import org.hibernate.boot.model.naming.Identifier;\n+import org.hibernate.boot.model.naming.ImplicitAnyDiscriminatorColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitAnyKeyColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitBasicColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitCollectionTableNameSource;\n+import org.hibernate.boot.model.naming.ImplicitDiscriminatorColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitEntityNameSource;\n+import org.hibernate.boot.model.naming.ImplicitForeignKeyNameSource;\n+import org.hibernate.boot.model.naming.ImplicitIdentifierColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitIndexColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitIndexNameSource;\n+import org.hibernate.boot.model.naming.ImplicitJoinColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitJoinTableNameSource;\n+import org.hibernate.boot.model.naming.ImplicitMapKeyColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl;\n+import org.hibernate.boot.model.naming.ImplicitPrimaryKeyJoinColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitTenantIdColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitUniqueKeyNameSource;\n+\n+public class OeqImplicitNamingStrategy extends ImplicitNamingStrategyJpaCompliantImpl {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ1NTQ0OA==", "bodyText": "Currently all dialects use the same naming strategies, so the name implies it's the oEQ strategy.  If it a dialect needs to branch off into it's own future, I lean towards renaming at that point.\nThe overridden methods to inject logging was noisy.  I removed those and guarded the trace statements.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522455448", "createdAt": "2020-11-12T22:05:29Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqImplicitNamingStrategy.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.hibernate.dialect;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.log4j.Logger;\n+import org.hibernate.boot.model.naming.Identifier;\n+import org.hibernate.boot.model.naming.ImplicitAnyDiscriminatorColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitAnyKeyColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitBasicColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitCollectionTableNameSource;\n+import org.hibernate.boot.model.naming.ImplicitDiscriminatorColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitEntityNameSource;\n+import org.hibernate.boot.model.naming.ImplicitForeignKeyNameSource;\n+import org.hibernate.boot.model.naming.ImplicitIdentifierColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitIndexColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitIndexNameSource;\n+import org.hibernate.boot.model.naming.ImplicitJoinColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitJoinTableNameSource;\n+import org.hibernate.boot.model.naming.ImplicitMapKeyColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl;\n+import org.hibernate.boot.model.naming.ImplicitPrimaryKeyJoinColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitTenantIdColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitUniqueKeyNameSource;\n+\n+public class OeqImplicitNamingStrategy extends ImplicitNamingStrategyJpaCompliantImpl {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMxMTEwMg=="}, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTg0Mjg4OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqImplicitNamingStrategy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNjoxMjoxN1rOHwNTTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMjoxMTozNVrOHyQWsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMxMTYzMQ==", "bodyText": "Be nice if this had a isTraceEnabled() guard. And to save excessive messages - same with all the below trace messages where strings are being dynamically constructed.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520311631", "createdAt": "2020-11-10T06:12:17Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqImplicitNamingStrategy.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.hibernate.dialect;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.log4j.Logger;\n+import org.hibernate.boot.model.naming.Identifier;\n+import org.hibernate.boot.model.naming.ImplicitAnyDiscriminatorColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitAnyKeyColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitBasicColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitCollectionTableNameSource;\n+import org.hibernate.boot.model.naming.ImplicitDiscriminatorColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitEntityNameSource;\n+import org.hibernate.boot.model.naming.ImplicitForeignKeyNameSource;\n+import org.hibernate.boot.model.naming.ImplicitIdentifierColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitIndexColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitIndexNameSource;\n+import org.hibernate.boot.model.naming.ImplicitJoinColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitJoinTableNameSource;\n+import org.hibernate.boot.model.naming.ImplicitMapKeyColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl;\n+import org.hibernate.boot.model.naming.ImplicitPrimaryKeyJoinColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitTenantIdColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitUniqueKeyNameSource;\n+\n+public class OeqImplicitNamingStrategy extends ImplicitNamingStrategyJpaCompliantImpl {\n+  private static final Logger LOGGER = Logger.getLogger(OeqImplicitNamingStrategy.class);\n+\n+  private final Map<String, String> joinTableOverrides = new HashMap<>();\n+\n+  public OeqImplicitNamingStrategy() {\n+    // The default strategies for join tables are not sufficient for all cases in oEQ.\n+    // There doesn't appear to be a pattern for the discrepancies, so this override\n+    // map contains all the special cases.\n+    joinTableOverrides.put(\"PortletRecentContrib.ItemDefinition\", \"portlet_recent_contrib_collect\");\n+    joinTableOverrides.put(\"Item.HistoryEvent\", \"item_history\");\n+    joinTableOverrides.put(\"Item.ReferencedURL\", \"item_referenced_urls\");\n+    joinTableOverrides.put(\"HierarchyTopic.Item\", \"hierarchy_topic_key_resources\");\n+    joinTableOverrides.put(\"TLEGroup.TLEGroup\", \"tlegroup_all_parents\");\n+    joinTableOverrides.put(\"HierarchyTopic.HierarchyTopic\", \"hierarchy_topic_all_parents\");\n+    joinTableOverrides.put(\"PowerSearch.ItemDefinition\", \"power_search_itemdefs\");\n+  }\n+\n+  @Override\n+  public Identifier determinePrimaryTableName(ImplicitEntityNameSource source) {\n+    LOGGER.trace(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ1ODgwMA==", "bodyText": "done.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522458800", "createdAt": "2020-11-12T22:11:35Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqImplicitNamingStrategy.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.hibernate.dialect;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.log4j.Logger;\n+import org.hibernate.boot.model.naming.Identifier;\n+import org.hibernate.boot.model.naming.ImplicitAnyDiscriminatorColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitAnyKeyColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitBasicColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitCollectionTableNameSource;\n+import org.hibernate.boot.model.naming.ImplicitDiscriminatorColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitEntityNameSource;\n+import org.hibernate.boot.model.naming.ImplicitForeignKeyNameSource;\n+import org.hibernate.boot.model.naming.ImplicitIdentifierColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitIndexColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitIndexNameSource;\n+import org.hibernate.boot.model.naming.ImplicitJoinColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitJoinTableNameSource;\n+import org.hibernate.boot.model.naming.ImplicitMapKeyColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl;\n+import org.hibernate.boot.model.naming.ImplicitPrimaryKeyJoinColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitTenantIdColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitUniqueKeyNameSource;\n+\n+public class OeqImplicitNamingStrategy extends ImplicitNamingStrategyJpaCompliantImpl {\n+  private static final Logger LOGGER = Logger.getLogger(OeqImplicitNamingStrategy.class);\n+\n+  private final Map<String, String> joinTableOverrides = new HashMap<>();\n+\n+  public OeqImplicitNamingStrategy() {\n+    // The default strategies for join tables are not sufficient for all cases in oEQ.\n+    // There doesn't appear to be a pattern for the discrepancies, so this override\n+    // map contains all the special cases.\n+    joinTableOverrides.put(\"PortletRecentContrib.ItemDefinition\", \"portlet_recent_contrib_collect\");\n+    joinTableOverrides.put(\"Item.HistoryEvent\", \"item_history\");\n+    joinTableOverrides.put(\"Item.ReferencedURL\", \"item_referenced_urls\");\n+    joinTableOverrides.put(\"HierarchyTopic.Item\", \"hierarchy_topic_key_resources\");\n+    joinTableOverrides.put(\"TLEGroup.TLEGroup\", \"tlegroup_all_parents\");\n+    joinTableOverrides.put(\"HierarchyTopic.HierarchyTopic\", \"hierarchy_topic_all_parents\");\n+    joinTableOverrides.put(\"PowerSearch.ItemDefinition\", \"power_search_itemdefs\");\n+  }\n+\n+  @Override\n+  public Identifier determinePrimaryTableName(ImplicitEntityNameSource source) {\n+    LOGGER.trace(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMxMTYzMQ=="}, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTg2Njg1OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqPhysicalNamingStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNjoxODozN1rOHwNiqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNjoxODozN1rOHwNiqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMxNTU2Mw==", "bodyText": "Need GitHub Issue and ref.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520315563", "createdAt": "2020-11-10T06:18:37Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqPhysicalNamingStrategy.java", "diffHunk": "@@ -18,25 +18,43 @@\n \n package com.tle.hibernate.dialect;\n \n+import java.io.Serializable;\n import java.util.HashMap;\n import java.util.Map;\n-import org.hibernate.AssertionFailure;\n+import org.apache.log4j.Logger;\n+import org.hibernate.boot.model.naming.Identifier;\n+import org.hibernate.boot.model.naming.PhysicalNamingStrategy;\n import org.hibernate.cfg.ImprovedNamingStrategy;\n-import org.hibernate.util.StringHelper;\n+import org.hibernate.engine.jdbc.env.spi.JdbcEnvironment;\n+import org.hibernate.internal.util.StringHelper;\n+\n+// TECH_DEBT - found in SpringHib5, StringHelper is now internal and should not be used directly.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTg2OTY4OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqPhysicalNamingStrategy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNjoxOToyM1rOHwNkYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMjoyMTo0NlrOHyQ6_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMxNjAwMg==", "bodyText": "If it is still limited to lowercase naming of tables, then really the name it had before should remain.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520316002", "createdAt": "2020-11-10T06:19:23Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqPhysicalNamingStrategy.java", "diffHunk": "@@ -18,25 +18,43 @@\n \n package com.tle.hibernate.dialect;\n \n+import java.io.Serializable;\n import java.util.HashMap;\n import java.util.Map;\n-import org.hibernate.AssertionFailure;\n+import org.apache.log4j.Logger;\n+import org.hibernate.boot.model.naming.Identifier;\n+import org.hibernate.boot.model.naming.PhysicalNamingStrategy;\n import org.hibernate.cfg.ImprovedNamingStrategy;\n-import org.hibernate.util.StringHelper;\n+import org.hibernate.engine.jdbc.env.spi.JdbcEnvironment;\n+import org.hibernate.internal.util.StringHelper;\n+\n+// TECH_DEBT - found in SpringHib5, StringHelper is now internal and should not be used directly.\n \n /**\n- * Extends the ImprovedNamingScheme to make sure that the resulting table name is all lowercase.\n- * This helps with Enums on Postgresql.\n- *\n- * @author Nicholas Read\n+ * Extends the PhysicalNamingStrategyStandardImpl to make sure that the resulting table name is all\n+ * lowercase. This helps with Enums on Postgresql.\n  */\n @SuppressWarnings(\"nls\")\n-public class LowercaseImprovedNamingScheme extends ImprovedNamingStrategy {\n+public class OeqPhysicalNamingStrategy extends ImprovedNamingStrategy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ2ODA5NQ==", "bodyText": "It's not only lower-casing the table names, and in the spirit of the theory behind the Implicit Naming Strategy, I'd like to leave it general for now.  I updated the javadoc to help reflect that mindset.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522468095", "createdAt": "2020-11-12T22:21:46Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqPhysicalNamingStrategy.java", "diffHunk": "@@ -18,25 +18,43 @@\n \n package com.tle.hibernate.dialect;\n \n+import java.io.Serializable;\n import java.util.HashMap;\n import java.util.Map;\n-import org.hibernate.AssertionFailure;\n+import org.apache.log4j.Logger;\n+import org.hibernate.boot.model.naming.Identifier;\n+import org.hibernate.boot.model.naming.PhysicalNamingStrategy;\n import org.hibernate.cfg.ImprovedNamingStrategy;\n-import org.hibernate.util.StringHelper;\n+import org.hibernate.engine.jdbc.env.spi.JdbcEnvironment;\n+import org.hibernate.internal.util.StringHelper;\n+\n+// TECH_DEBT - found in SpringHib5, StringHelper is now internal and should not be used directly.\n \n /**\n- * Extends the ImprovedNamingScheme to make sure that the resulting table name is all lowercase.\n- * This helps with Enums on Postgresql.\n- *\n- * @author Nicholas Read\n+ * Extends the PhysicalNamingStrategyStandardImpl to make sure that the resulting table name is all\n+ * lowercase. This helps with Enums on Postgresql.\n  */\n @SuppressWarnings(\"nls\")\n-public class LowercaseImprovedNamingScheme extends ImprovedNamingStrategy {\n+public class OeqPhysicalNamingStrategy extends ImprovedNamingStrategy", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMxNjAwMg=="}, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTg3MjIwOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqPhysicalNamingStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNjoyMDowOFrOHwNmCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNjoyMDowOFrOHwNmCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMxNjQyNw==", "bodyText": "isTraceEnabled() guard.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520316427", "createdAt": "2020-11-10T06:20:08Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqPhysicalNamingStrategy.java", "diffHunk": "@@ -126,4 +112,63 @@ private String postProcess(String tableName) {\n   private void registerOverride(String from, String to) {\n     overrides.put(from.toLowerCase(), to.toLowerCase());\n   }\n+\n+  @Override\n+  public Identifier toPhysicalCatalogName(Identifier name, JdbcEnvironment jdbcEnvironment) {\n+    return apply(name, Transform.OTHER);\n+  }\n+\n+  @Override\n+  public Identifier toPhysicalSchemaName(Identifier name, JdbcEnvironment jdbcEnvironment) {\n+    return apply(name, Transform.OTHER);\n+  }\n+\n+  @Override\n+  public Identifier toPhysicalTableName(Identifier name, JdbcEnvironment jdbcEnvironment) {\n+    return apply(name, Transform.TABLE);\n+  }\n+\n+  @Override\n+  public Identifier toPhysicalSequenceName(Identifier name, JdbcEnvironment jdbcEnvironment) {\n+    return apply(name, Transform.OTHER);\n+  }\n+\n+  @Override\n+  public Identifier toPhysicalColumnName(Identifier name, JdbcEnvironment jdbcEnvironment) {\n+    return apply(name, Transform.COLUMN);\n+  }\n+\n+  private Identifier apply(Identifier name, Transform transform) {\n+    if (name == null) {\n+      return null;\n+    }\n+\n+    String resultantName = null;\n+    switch (transform) {\n+      case COLUMN:\n+        {\n+          resultantName = super.propertyToColumnName(getColumnName(name.getText()));\n+          break;\n+        }\n+      case TABLE:\n+        {\n+          resultantName = postProcess(super.classToTableName(name.getText()));\n+          break;\n+        }\n+      case OTHER:\n+      default:\n+        {\n+          resultantName = name.getText();\n+          break;\n+        }\n+    }\n+    LOGGER.trace(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTg3NzYxOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/SQLServerDialect.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNjoyMjoxM1rOHwNpgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNjoyMjoxM1rOHwNpgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMxNzMxNA==", "bodyText": "As per elsewhere. I think this is the fourth or so, but if they all have the GitHub issue reference they'll be easy to fix when the time comes.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520317314", "createdAt": "2020-11-10T06:22:13Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/SQLServerDialect.java", "diffHunk": "@@ -36,16 +36,22 @@\n import java.util.List;\n import java.util.UUID;\n import java.util.regex.Matcher;\n-import org.hibernate.engine.Mapping;\n+import org.hibernate.dialect.unique.UniqueDelegate;\n+import org.hibernate.engine.spi.Mapping;\n+import org.hibernate.internal.util.StringHelper;\n import org.hibernate.mapping.Column;\n import org.hibernate.type.BasicType;\n import org.hibernate.type.CustomType;\n import org.hibernate.type.StandardBasicTypes;\n-import org.hibernate.util.StringHelper;\n+\n+// TECH_DEBT - found in SpringHib5, StringHelper is now internal and should not be used directly.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTg4NjkzOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Generic/org.hibernate/build.sbt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNjoyNToyOFrOHwNvlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMjo1Mzo1OVrOHyR9yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMxODg3MA==", "bodyText": "Interesting. Why didn't you keep this in the matching 5.4.x series to match core?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520318870", "createdAt": "2020-11-10T06:25:28Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Generic/org.hibernate/build.sbt", "diffHunk": "@@ -1,16 +1,15 @@\n lazy val Hibernate     = config(\"hibernate\")\n lazy val CustomCompile = config(\"compile\") extend Hibernate\n+val springVersion      = \"5.2.9.RELEASE\"\n \n libraryDependencies := Seq(\n-  \"org.hibernate\"    % \"hibernate-core\"      % \"3.6.8.Final\",\n-  \"org.hibernate\"    % \"hibernate-validator\" % \"4.2.0.Final\",\n-  \"javax.validation\" % \"validation-api\"      % \"1.0.0.GA\",\n-//  \"org.hibernate\" % \"hibernate-validator-annotation-processor\" % \"4.2.0.Final\",\n-  \"org.hibernate.javax.persistence\" % \"hibernate-jpa-2.0-api\" % \"1.0.1.Final\",\n-  \"com.thoughtworks.xstream\"        % \"xstream-hibernate\"     % \"1.4.11.1\" excludeAll (\n+  \"org.hibernate\"            % \"hibernate-core\"        % \"5.4.21.Final\",\n+  \"org.hibernate\"            % \"hibernate-validator\"   % \"6.1.5.Final\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4NTE5Mw==", "bodyText": "Not super intuitive, but hibernate projects don't have a 'release train'. From https://hibernate.org/community/compatibility-policy/ :\n\nThere is no \"release train\" in Hibernate projects. Each Hibernate project releases new versions independently and picks the version of its dependencies according to its needs and compatibility requirements.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522485193", "createdAt": "2020-11-12T22:53:59Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Generic/org.hibernate/build.sbt", "diffHunk": "@@ -1,16 +1,15 @@\n lazy val Hibernate     = config(\"hibernate\")\n lazy val CustomCompile = config(\"compile\") extend Hibernate\n+val springVersion      = \"5.2.9.RELEASE\"\n \n libraryDependencies := Seq(\n-  \"org.hibernate\"    % \"hibernate-core\"      % \"3.6.8.Final\",\n-  \"org.hibernate\"    % \"hibernate-validator\" % \"4.2.0.Final\",\n-  \"javax.validation\" % \"validation-api\"      % \"1.0.0.GA\",\n-//  \"org.hibernate\" % \"hibernate-validator-annotation-processor\" % \"4.2.0.Final\",\n-  \"org.hibernate.javax.persistence\" % \"hibernate-jpa-2.0-api\" % \"1.0.1.Final\",\n-  \"com.thoughtworks.xstream\"        % \"xstream-hibernate\"     % \"1.4.11.1\" excludeAll (\n+  \"org.hibernate\"            % \"hibernate-core\"        % \"5.4.21.Final\",\n+  \"org.hibernate\"            % \"hibernate-validator\"   % \"6.1.5.Final\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMxODg3MA=="}, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTkwMjk4OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Security/com.tle.core.security/src/com/tle/core/security/impl/SecurityAttributeSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNjozMDo0OVrOHwN54g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMToxMjozNVrOHxldww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMyMTUwNg==", "bodyText": "Yup, as per above I don't believe we will run with < 8.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520321506", "createdAt": "2020-11-10T06:30:49Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Security/com.tle.core.security/src/com/tle/core/security/impl/SecurityAttributeSource.java", "diffHunk": "@@ -91,9 +91,12 @@ private SecurityAttribute computeSecurityAttribute(Method method, Class<?> targe\n     // target class.\n     // If the target class is null, the method will be unchanged.\n     Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass);\n+\n     // If we are dealing with method with generic parameters, find the\n     // original method.\n-    if (JdkVersion.isAtLeastJava15()) {\n+    // TODO - consider just dropping the version conditional.  No one should be\n+    // running oEQ or the Admin Console lower than Java 8.\n+    if (SystemUtils.isJavaVersionAtLeast(5)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc1NjA5OQ==", "bodyText": "resolved as per above.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r521756099", "createdAt": "2020-11-12T01:12:35Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Security/com.tle.core.security/src/com/tle/core/security/impl/SecurityAttributeSource.java", "diffHunk": "@@ -91,9 +91,12 @@ private SecurityAttribute computeSecurityAttribute(Method method, Class<?> targe\n     // target class.\n     // If the target class is null, the method will be unchanged.\n     Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass);\n+\n     // If we are dealing with method with generic parameters, find the\n     // original method.\n-    if (JdkVersion.isAtLeastJava15()) {\n+    // TODO - consider just dropping the version conditional.  No one should be\n+    // running oEQ or the Admin Console lower than Java 8.\n+    if (SystemUtils.isJavaVersionAtLeast(5)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMyMTUwNg=="}, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTkxMzM0OnYy", "diffSide": "RIGHT", "path": "Source/Server/equellaserver/build.sbt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNjozNDozNlrOHwOApA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMzowODo0MFrOHyYGmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMyMzIzNg==", "bodyText": "Oh!! Hold on... That's a regression vs. the above.\nAnd unfortunately that was an easy one to pick up. Due to the formatting changes it's very onerous to review all these and make sure they're correct. But being your PR, could I please ask that you go back and check all these. (Not just this block, but the real big blocks above.)", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520323236", "createdAt": "2020-11-10T06:34:36Z", "author": {"login": "edalex-ian"}, "path": "Source/Server/equellaserver/build.sbt", "diffHunk": "@@ -228,13 +265,18 @@ libraryDependencies ++= Seq(\n     ExclusionRule(organization = \"ch.qos.logback\"),\n     ExclusionRule(organization = \"net.sf.saxon\")\n   ),\n-  \"xml-resolver\"           % \"xml-resolver\"              % \"1.2\",\n-  \"org.scala-sbt\"          %% \"io\"                       % \"1.4.0\",\n-  \"org.mozilla\"            % \"rhino\"                     % \"1.7.13\",\n-  \"io.lemonlabs\"           %% \"scala-uri\"                % \"1.5.1\",\n-  \"org.scala-lang.modules\" %% \"scala-parser-combinators\" % \"1.1.2\",\n-  \"io.bit3\"                % \"jsass\"                     % \"5.10.3\",\n-  \"io.github.classgraph\"   % \"classgraph\"                % \"4.8.90\"\n+  \"xml-resolver\"                  % \"xml-resolver\"              % \"1.2\",\n+  \"org.scala-sbt\"                 %% \"io\"                       % \"1.3.4\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU4NTc1NA==", "bodyText": "I don't know why the formatter does that.  I thought the massive reformat a while back was supposed to resolve this kind of 'big block' diffs where little changes can hide.\nEither way, I compared the tip of develop with this file, and scala-sbt was the only regression.  Thanks for the catch.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522585754", "createdAt": "2020-11-13T03:08:40Z", "author": {"login": "cbeach47"}, "path": "Source/Server/equellaserver/build.sbt", "diffHunk": "@@ -228,13 +265,18 @@ libraryDependencies ++= Seq(\n     ExclusionRule(organization = \"ch.qos.logback\"),\n     ExclusionRule(organization = \"net.sf.saxon\")\n   ),\n-  \"xml-resolver\"           % \"xml-resolver\"              % \"1.2\",\n-  \"org.scala-sbt\"          %% \"io\"                       % \"1.4.0\",\n-  \"org.mozilla\"            % \"rhino\"                     % \"1.7.13\",\n-  \"io.lemonlabs\"           %% \"scala-uri\"                % \"1.5.1\",\n-  \"org.scala-lang.modules\" %% \"scala-parser-combinators\" % \"1.1.2\",\n-  \"io.bit3\"                % \"jsass\"                     % \"5.10.3\",\n-  \"io.github.classgraph\"   % \"classgraph\"                % \"4.8.90\"\n+  \"xml-resolver\"                  % \"xml-resolver\"              % \"1.2\",\n+  \"org.scala-sbt\"                 %% \"io\"                       % \"1.3.4\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMyMzIzNg=="}, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 259}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTkxODg4OnYy", "diffSide": "RIGHT", "path": "Source/Tools/UpgradeInstallation/src/com/tle/upgrade/LineFileModifier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNjozNjoyN1rOHwOECA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNjozNjoyN1rOHwOECA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMyNDEwNA==", "bodyText": "Heh, nice pick up. \ud83d\udc4d", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520324104", "createdAt": "2020-11-10T06:36:27Z", "author": {"login": "edalex-ian"}, "path": "Source/Tools/UpgradeInstallation/src/com/tle/upgrade/LineFileModifier.java", "diffHunk": "@@ -76,7 +76,7 @@ public void update() throws IOException {\n           outFile.write(addLine);\n           outFile.write(eol);\n           if (result != null) {\n-            result.addLogMessage(\"Added line '\" + line + \"'\");\n+            result.addLogMessage(\"Added line '\" + addLine + \"'\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTkyMTgwOnYy", "diffSide": "RIGHT", "path": "Source/Tools/UpgradeInstallation/src/com/tle/upgrade/upgraders/AddPostHib5UpgradeConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNjozNzozMFrOHwOF7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNjozNzozMFrOHwOF7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMyNDU4OQ==", "bodyText": "Could be good value in adding a JavaDoc description here with a synopsis of what upgrade steps are needed/included.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520324589", "createdAt": "2020-11-10T06:37:30Z", "author": {"login": "edalex-ian"}, "path": "Source/Tools/UpgradeInstallation/src/com/tle/upgrade/upgraders/AddPostHib5UpgradeConfig.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.upgrade.upgraders;\n+\n+import com.dytech.edge.common.Constants;\n+import com.google.common.collect.Lists;\n+import com.tle.common.util.EquellaConfig;\n+import com.tle.upgrade.LineFileModifier;\n+import com.tle.upgrade.PropertyFileModifier;\n+import com.tle.upgrade.UpgradeResult;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+\n+@SuppressWarnings(\"nls\")\n+public class AddPostHib5UpgradeConfig extends AbstractUpgrader {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDQ2NzcwOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMDo1MTowMlrOH0gDNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMDo1MTowMlrOH0gDNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgxMzExMQ==", "bodyText": "Nice work @cbeach47 \ud83d\udc4d", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r524813111", "createdAt": "2020-11-17T00:51:02Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java", "diffHunk": "@@ -94,6 +92,21 @@ public HibernateMigrationHelper(HibernateFactory factory, String defaultSchema)\n     if (LOGGER.isDebugEnabled()) {\n       LOGGER.debug(\"Tables registered:\" + configuration.getTableMap().keySet());\n     }\n+\n+    sqlStrings.addAll(getCreationSqlForTables(filter));\n+\n+    sqlStrings.addAll(getCreationSqlForTableIndexAndFks(filter));\n+\n+    sqlStrings.addAll(getCreationSqlForIdGenerators(filter));\n+\n+    sqlStrings.addAll(getCreationSqlForAuxDbos(filter));\n+\n+    return sqlStrings;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e8e8215f0e873d19cb394b70b1d60be4db38850"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDQ3NDcwOnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMDo1NDoxNlrOH0gHSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNjozNzowMVrOH0-OuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgxNDE1NQ==", "bodyText": "Hmmm, good to see this fixed, but.... Should the String output from index.sqlCreateString() be added to sqlStrings? As that looks like it just creates the string for logging purposes only. But ultimately this method is about processing the indices?", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r524814155", "createdAt": "2020-11-17T00:54:16Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java", "diffHunk": "@@ -696,7 +728,7 @@ private void processIndex(\n       }\n     }\n     final String sql = index.sqlCreateString(dialect, mapping, defaultCatalog, defaultSchema);\n-    sqlStrings.add(\"Existing index is null.  Creating index SQL: \" + sql);\n+    LOGGER.debug(\"Existing index is null.  Creating index SQL: \" + sql);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e8e8215f0e873d19cb394b70b1d60be4db38850"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMwNzU3Nw==", "bodyText": "nice catch - tip of develop has it in there.  I've left the logger msg in place, and added the sql into sqlStrings now.", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r525307577", "createdAt": "2020-11-17T16:37:01Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java", "diffHunk": "@@ -696,7 +728,7 @@ private void processIndex(\n       }\n     }\n     final String sql = index.sqlCreateString(dialect, mapping, defaultCatalog, defaultSchema);\n-    sqlStrings.add(\"Existing index is null.  Creating index SQL: \" + sql);\n+    LOGGER.debug(\"Existing index is null.  Creating index SQL: \" + sql);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgxNDE1NQ=="}, "originalCommit": {"oid": "9e8e8215f0e873d19cb394b70b1d60be4db38850"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDQ5MDc1OnYy", "diffSide": "RIGHT", "path": "Source/Plugins/Security/com.tle.core.security/src/com/tle/core/security/impl/SecurityAttributeSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMTowMToxMVrOH0gQkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNjo0NDoyOFrOH0-neQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgxNjUyOA==", "bodyText": "So this then makes the assignment on line 91 redundant. Perhaps this line should merge with 91 to make\n    Method specificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod);", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r524816528", "createdAt": "2020-11-17T01:01:11Z", "author": {"login": "edalex-ian"}, "path": "Source/Plugins/Security/com.tle.core.security/src/com/tle/core/security/impl/SecurityAttributeSource.java", "diffHunk": "@@ -94,11 +92,7 @@ private SecurityAttribute computeSecurityAttribute(Method method, Class<?> targe\n \n     // If we are dealing with method with generic parameters, find the\n     // original method.\n-    // TODO - consider just dropping the version conditional.  No one should be\n-    // running oEQ or the Admin Console lower than Java 8.\n-    if (SystemUtils.isJavaVersionAtLeast(5)) {\n-      specificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod);\n-    }\n+    specificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e8e8215f0e873d19cb394b70b1d60be4db38850"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMxMzkxMw==", "bodyText": "Yeah, that is a bit odd.  I'll streamline it", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r525313913", "createdAt": "2020-11-17T16:44:28Z", "author": {"login": "cbeach47"}, "path": "Source/Plugins/Security/com.tle.core.security/src/com/tle/core/security/impl/SecurityAttributeSource.java", "diffHunk": "@@ -94,11 +92,7 @@ private SecurityAttribute computeSecurityAttribute(Method method, Class<?> targe\n \n     // If we are dealing with method with generic parameters, find the\n     // original method.\n-    // TODO - consider just dropping the version conditional.  No one should be\n-    // running oEQ or the Admin Console lower than Java 8.\n-    if (SystemUtils.isJavaVersionAtLeast(5)) {\n-      specificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod);\n-    }\n+    specificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgxNjUyOA=="}, "originalCommit": {"oid": "9e8e8215f0e873d19cb394b70b1d60be4db38850"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1708, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}