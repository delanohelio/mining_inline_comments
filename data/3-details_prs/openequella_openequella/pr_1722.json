{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1OTI1NTMz", "number": 1722, "title": "Setup a standalone JS module for OEQ REST API interaction", "bodyText": "Checklist\n\n\n the contributor license agreement is signed\n commit message follows commit guidelines\n tests are included\n screenshots are included showing significant UI changes - NA\n documentation is changed or added\n\nDescription of change\nThis is the start of a JS module for interacting with OEQ via REST. Currently it is being built within the core repo for simplicity of integration. However, once it matures a bit, it will be split into its own repo and published (maybe just with GitHub packages).\nThis PR is targetting the component/search_configuration branch, as the next step will be to add support to it for the interrogation of oEQ Schema endpoints to be used in the faceted search configuration. The endpoints currently supported were kind of the bare minimum to prove the concept.\nAlthough tests are there - and they do work locally - more effort is required to make it so that they can be part of the pipeline. Hopefully this can be worked on in subsequent commits. Indeed, more effort is due on the build in general. It was bootstrapped with TSDX, but bit by bit key areas are being substituted out and aligned with the rest of the OEQ JS build setup.\nThe plan going forward (other than the above mentioned Schema endpoint support) will be to refactor existing endpoint calls into this module and establish a good level of decoupling between the View and the REST calls. And further, all new REST calls would be added into this module from the start.\nAs patterns are emerging they're being refactored (such as the GET and PUT) and I expect this to continue to evolve as needed. Also note, that for now I've avoided cancel tokens, but if the need arises we can add them in (in an abstract form to maintain decoupling). I'm trying to balance DRY and YAGNI principles as well as minimal complexity, but there's still a few things that couple be improved.\nLastly, you'll note there is explicit handling of cookies. This is mainly for the tests, and in theory turns into a noop in browsers. I'm not intending this to be used by CLI node apps, but it may just end up being a side effect/benefit of running tests in Jest via Node. I did almost swap to Mocha tests, but for now things seem happy enough.", "createdAt": "2020-05-11T07:41:18Z", "url": "https://github.com/openequella/openEQUELLA/pull/1722", "merged": true, "mergeCommit": {"oid": "7791982c2c2c9b100a19fdc1f8d8b21b3b26e025"}, "closed": true, "closedAt": "2020-05-13T05:05:49Z", "author": {"login": "edalex-ian"}, "timelineItems": {"totalCount": 45, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcf47T0AH2gAyNDE1OTI1NTMzOjg0M2MyZTEzMTAxZGIwNzY1MGI3M2I1Y2U3ODFkOWFiZjA4OTI2ZTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcgxgliAFqTQxMDU4NTYwOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "843c2e13101db07650b73b5ce781d9abf08926e3", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/843c2e13101db07650b73b5ce781d9abf08926e3", "committedDate": "2020-05-10T10:57:12Z", "message": "chore: Remove Intellij typescript compiler setup\n\nThese settings were causing JS files to be dumped alongside TSX files on\noccasion."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5cf5a6e47e58f4cb95e5582a17290fb34a6d886", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/f5cf5a6e47e58f4cb95e5582a17290fb34a6d886", "committedDate": "2020-05-10T11:00:02Z", "message": "Add initial shell of a JS oEQ REST API library\n\nThe plan being that this will provide a level of decoupling for the New UI\nwork. This will allow for easier testing of this interface, and then it\ncan be mocked in JS tests testing the New UI. Further, it could possibly\nbe used for any other JS projects.\n\nCurrently, it only has support for the basic login/logout methods, and\ngetting user details. However it will have more added shortly, and then be\nused from the current New UI work.\n\nOnce that is shown to be working, we can split off into it's own repository."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d4bb17ccbf86f0ec6ed17c50a4c85dddde69bfc", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/3d4bb17ccbf86f0ec6ed17c50a4c85dddde69bfc", "committedDate": "2020-05-10T22:31:39Z", "message": "Type Axios.get for CurrentUserDetails"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec5358801337ea44e135bd34bc595ffbca125b48", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/ec5358801337ea44e135bd34bc595ffbca125b48", "committedDate": "2020-05-11T05:10:25Z", "message": "Add support for Settings REST endpoints\n\nAlso includes refactor to keeps things DRY as patterns emerge."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13b4e09f69ebc30291ec6a64817b5d6ccf1b3823", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/13b4e09f69ebc30291ec6a64817b5d6ccf1b3823", "committedDate": "2020-05-11T05:17:20Z", "message": "doc: Add details around the implementation of the js module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc46187acdf97a02c384eb5b26da65a3f3c86967", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/dc46187acdf97a02c384eb5b26da65a3f3c86967", "committedDate": "2020-05-11T06:47:34Z", "message": "oeq-ts-rest-api: Remove codegen building in build pipeline\n\nLeft over from early explorations of using codegen."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc3989e5486d82b206911e3f5ceec8773ca40e80", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/dc3989e5486d82b206911e3f5ceec8773ca40e80", "committedDate": "2020-05-11T06:50:40Z", "message": "oeq-ts-rest-api: Change GeneralSettings to singular\n\nIt's typically used as an array of many of these."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9be24836454b8cd902bf531d4979d5bfb104531d", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/9be24836454b8cd902bf531d4979d5bfb104531d", "committedDate": "2020-05-11T06:55:34Z", "message": "Refactor SettingsPage and UISettingsEditor to use oeq-ts-rest-api\n\nThis being the first attempt to use the stand-alone module."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8a2f2d8d3d74e8501087aed2aa0d10fa7879a4c", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/b8a2f2d8d3d74e8501087aed2aa0d10fa7879a4c", "committedDate": "2020-05-11T07:13:02Z", "message": "Incorporate oeq-ts-rest-api into build pipeline\n\nThis is required until we split it off to its own stand-alone published\nrepository."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14c095df2a7b368b674454351ae873b52b3047b4", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/14c095df2a7b368b674454351ae873b52b3047b4", "committedDate": "2020-05-11T07:23:34Z", "message": "oeq-ts-rest-api: Use PUT for logout\n\nWe have it there, so let's ensure we use it consistently."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b9ec7e2b7cfa2de4ae9b0aecadd095af90dc2b9", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/1b9ec7e2b7cfa2de4ae9b0aecadd095af90dc2b9", "committedDate": "2020-05-11T08:53:52Z", "message": "Run `npm run format:ts`\n\nSeems my pre-commit hooks are not running reliably."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5Mzk2OTI3", "url": "https://github.com/openequella/openEQUELLA/pull/1722#pullrequestreview-409396927", "createdAt": "2020-05-11T17:52:22Z", "commit": {"oid": "1b9ec7e2b7cfa2de4ae9b0aecadd095af90dc2b9"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzo1MjoyMlrOGTnASA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxOTowNToyOFrOGTpf8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIxNTE3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <img\n          \n          \n            \n            src=\"https://user-images.githubusercontent.com/4060187/52168322-a98e5b00-26f6-11e9-8cf6-222d716b75ef.gif\"\n          \n          \n            \n            width=\"600\" />\n          \n          \n            \n            ![npm build example](https://user-images.githubusercontent.com/4060187/52168322-a98e5b00-26f6-11e9-8cf6-222d716b75ef.gif)", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423215176", "createdAt": "2020-05-11T17:52:22Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/README.md", "diffHunk": "@@ -0,0 +1,76 @@\n+# openEQUELLA Typescript REST API SDK\n+\n+This module provides a code generated SDK for access to the openEQUELLA REST API.\n+\n+## Local Development\n+\n+This project was bootstrapped with [TSDX](https://github.com/jaredpalmer/tsdx) but the subsequently\n+tweaked (especially for Jest and Eslint).\n+\n+Below is a list of commands you may find useful.\n+\n+### `npm start` or `yarn start`\n+\n+Runs the project in development/watch mode. Your project will be rebuilt upon changes. TSDX has a\n+special logger for you convenience. Error messages are pretty printed and formatted for\n+compatibility VS Code's Problems tab.\n+\n+<img\n+src=\"https://user-images.githubusercontent.com/4060187/52168303-574d3a00-26f6-11e9-9f3b-71dbec9ebfcb.gif\"\n+width=\"600\" />\n+\n+Your library will be rebuilt if you make edits.\n+\n+### `npm run build` or `yarn build`\n+\n+Bundles the package to the `dist` folder.  The package is optimized and bundled with Rollup into\n+multiple formats (CommonJS, UMD, and ES Module).\n+\n+<img\n+src=\"https://user-images.githubusercontent.com/4060187/52168322-a98e5b00-26f6-11e9-8cf6-222d716b75ef.gif\"\n+width=\"600\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b9ec7e2b7cfa2de4ae9b0aecadd095af90dc2b9"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIzMTkyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <img\n          \n          \n            \n            src=\"https://user-images.githubusercontent.com/4060187/52168303-574d3a00-26f6-11e9-9f3b-71dbec9ebfcb.gif\"\n          \n          \n            \n            width=\"600\" />\n          \n          \n            \n            ![npm start example](https://user-images.githubusercontent.com/4060187/52168303-574d3a00-26f6-11e9-9f3b-71dbec9ebfcb.gif)", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423231925", "createdAt": "2020-05-11T18:22:25Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/README.md", "diffHunk": "@@ -0,0 +1,76 @@\n+# openEQUELLA Typescript REST API SDK\n+\n+This module provides a code generated SDK for access to the openEQUELLA REST API.\n+\n+## Local Development\n+\n+This project was bootstrapped with [TSDX](https://github.com/jaredpalmer/tsdx) but the subsequently\n+tweaked (especially for Jest and Eslint).\n+\n+Below is a list of commands you may find useful.\n+\n+### `npm start` or `yarn start`\n+\n+Runs the project in development/watch mode. Your project will be rebuilt upon changes. TSDX has a\n+special logger for you convenience. Error messages are pretty printed and formatted for\n+compatibility VS Code's Problems tab.\n+\n+<img\n+src=\"https://user-images.githubusercontent.com/4060187/52168303-574d3a00-26f6-11e9-9f3b-71dbec9ebfcb.gif\"\n+width=\"600\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b9ec7e2b7cfa2de4ae9b0aecadd095af90dc2b9"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIzMjc5Ng==", "bodyText": "It may be worth considering using a namespace, giving openEquella an organization to manage package(s) and a way to give more flexibility with naming.\nSomething like @openequella/rest-api-client", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423232796", "createdAt": "2020-05-11T18:23:49Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/package.json", "diffHunk": "@@ -0,0 +1,49 @@\n+{\n+  \"version\": \"2020.2.0-Alpha\",\n+  \"license\": \"Apache-2.0\",\n+  \"main\": \"dist/index.js\",\n+  \"typings\": \"dist/index.d.ts\",\n+  \"files\": [\n+    \"dist\",\n+    \"src\"\n+  ],\n+  \"engines\": {\n+    \"node\": \">=10\"\n+  },\n+  \"scripts\": {\n+    \"start\": \"tsdx watch\",\n+    \"build\": \"tsdx build\",\n+    \"test\": \"jest\",\n+    \"lint\": \"eslint \\\"src/**/*.{ts,tsx}\\\" \\\"test/**/*.{ts,tsx}\\\"\",\n+    \"prepare\": \"tsdx build\"\n+  },\n+  \"peerDependencies\": {},\n+  \"husky\": {\n+    \"hooks\": {\n+      \"pre-commit\": \"npm run lint\"\n+    }\n+  },\n+  \"prettier\": {\n+    \"printWidth\": 80,\n+    \"semi\": true,\n+    \"singleQuote\": true,\n+    \"trailingComma\": \"es5\"\n+  },\n+  \"name\": \"oeq-ts-rest-api\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b9ec7e2b7cfa2de4ae9b0aecadd095af90dc2b9"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI1NjA0OA==", "bodyText": "Really like that the types carry through here. \ud83d\udc4d\nSomething which may be worth exploring, a lightway check that the data matches the expectation can be useful as an early warning system if the client get's out of sync with the API itself.\nFor example:\nhttps://github.com/gcanti/io-ts\nhttps://github.com/sindresorhus/ow\nhttps://github.com/ianstormtaylor/superstruct", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423256048", "createdAt": "2020-05-11T19:05:28Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/src/LegacyContent.ts", "diffHunk": "@@ -0,0 +1,40 @@\n+import { GET } from './AxiosInstance';\n+\n+export interface ItemCounts {\n+  tasks: number;\n+  notifications: number;\n+}\n+\n+export interface MenuItem {\n+  title: string;\n+  href?: string;\n+  systemIcon?: string;\n+  route?: string;\n+  iconUrl?: string;\n+  newWindow: boolean;\n+}\n+\n+export interface CurrentUserDetails {\n+  id: string;\n+  username: string;\n+  firstName: string;\n+  lastName: string;\n+  emailAddress: string;\n+  accessibilityMode: boolean;\n+  autoLoggedIn: boolean;\n+  guest: boolean;\n+  prefsEditable: boolean;\n+  menuGroups: Array<Array<MenuItem>>;\n+  counts?: ItemCounts;\n+}\n+\n+/**\n+ * Retrieve details of the current user (based on JSESSIONID) including details for the UI such\n+ * as menu structure and task and notification counts.\n+ *\n+ * @param apiBasePath Base URI to the oEQ institution and API\n+ */\n+export const getCurrentUserDetails = (\n+  apiBasePath: string\n+): Promise<CurrentUserDetails> =>\n+  GET<CurrentUserDetails>(apiBasePath + '/content/currentuser');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b9ec7e2b7cfa2de4ae9b0aecadd095af90dc2b9"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NDg3MDIz", "url": "https://github.com/openequella/openEQUELLA/pull/1722#pullrequestreview-409487023", "createdAt": "2020-05-11T20:00:36Z", "commit": {"oid": "1b9ec7e2b7cfa2de4ae9b0aecadd095af90dc2b9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDowMDozNlrOGTrRHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDowMDozNlrOGTrRHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4NTAyMA==", "bodyText": "This was a bit tough to read, the comment at the top linking to the documentation helps.\n100+ lines of comments for options not used make it difficult (for me) to read.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            module.exports = {\n          \n          \n            \n              // All imported modules in your tests should be mocked automatically\n          \n          \n            \n              // automock: false,\n          \n          \n            \n            \n          \n          \n            \n              // Stop running tests after `n` failures\n          \n          \n            \n              // bail: 0,\n          \n          \n            \n            \n          \n          \n            \n              // Respect \"browser\" field in package.json when resolving modules\n          \n          \n            \n              // browser: false,\n          \n          \n            \n            \n          \n          \n            \n              // The directory where Jest should store its cached dependency information\n          \n          \n            \n              // cacheDirectory: \"/tmp/jest_rs\",\n          \n          \n            \n            \n          \n          \n            \n              // Automatically clear mock calls and instances between every test\n          \n          \n            \n              clearMocks: true,\n          \n          \n            \n            \n          \n          \n            \n              // Indicates whether the coverage information should be collected while executing the test\n          \n          \n            \n              // collectCoverage: false,\n          \n          \n            \n            \n          \n          \n            \n              // An array of glob patterns indicating a set of files for which coverage information should be collected\n          \n          \n            \n              // collectCoverageFrom: null,\n          \n          \n            \n            \n          \n          \n            \n              // The directory where Jest should output its coverage files\n          \n          \n            \n              coverageDirectory: \"coverage\",\n          \n          \n            \n            \n          \n          \n            \n              // An array of regexp pattern strings used to skip coverage collection\n          \n          \n            \n              // coveragePathIgnorePatterns: [\n          \n          \n            \n              //   \"/node_modules/\"\n          \n          \n            \n              // ],\n          \n          \n            \n            \n          \n          \n            \n              // A list of reporter names that Jest uses when writing coverage reports\n          \n          \n            \n              // coverageReporters: [\n          \n          \n            \n              //   \"json\",\n          \n          \n            \n              //   \"text\",\n          \n          \n            \n              //   \"lcov\",\n          \n          \n            \n              //   \"clover\"\n          \n          \n            \n              // ],\n          \n          \n            \n            \n          \n          \n            \n              // An object that configures minimum threshold enforcement for coverage results\n          \n          \n            \n              // coverageThreshold: null,\n          \n          \n            \n            \n          \n          \n            \n              // A path to a custom dependency extractor\n          \n          \n            \n              // dependencyExtractor: null,\n          \n          \n            \n            \n          \n          \n            \n              // Make calling deprecated APIs throw helpful error messages\n          \n          \n            \n              // errorOnDeprecated: false,\n          \n          \n            \n            \n          \n          \n            \n              // Force coverage collection from ignored files using an array of glob patterns\n          \n          \n            \n              // forceCoverageMatch: [],\n          \n          \n            \n            \n          \n          \n            \n              // A path to a module which exports an async function that is triggered once before all test suites\n          \n          \n            \n              // globalSetup: null,\n          \n          \n            \n            \n          \n          \n            \n              // A path to a module which exports an async function that is triggered once after all test suites\n          \n          \n            \n              // globalTeardown: null,\n          \n          \n            \n            \n          \n          \n            \n              // A set of global variables that need to be available in all test environments\n          \n          \n            \n              // globals: {},\n          \n          \n            \n            \n          \n          \n            \n              // The maximum amount of workers used to run your tests. Can be specified as % or a number. E.g. maxWorkers: 10% will use 10% of your CPU amount + 1 as the maximum worker number. maxWorkers: 2 will use a maximum of 2 workers.\n          \n          \n            \n              // maxWorkers: \"50%\",\n          \n          \n            \n            \n          \n          \n            \n              // An array of directory names to be searched recursively up from the requiring module's location\n          \n          \n            \n              // moduleDirectories: [\n          \n          \n            \n              //   \"node_modules\"\n          \n          \n            \n              // ],\n          \n          \n            \n            \n          \n          \n            \n              // An array of file extensions your modules use\n          \n          \n            \n              // moduleFileExtensions: [\n          \n          \n            \n              //   \"js\",\n          \n          \n            \n              //   \"json\",\n          \n          \n            \n              //   \"jsx\",\n          \n          \n            \n              //   \"ts\",\n          \n          \n            \n              //   \"tsx\",\n          \n          \n            \n              //   \"node\"\n          \n          \n            \n              // ],\n          \n          \n            \n            \n          \n          \n            \n              // A map from regular expressions to module names that allow to stub out resources with a single module\n          \n          \n            \n              // moduleNameMapper: {},\n          \n          \n            \n            \n          \n          \n            \n              // An array of regexp pattern strings, matched against all module paths before considered 'visible' to the module loader\n          \n          \n            \n              // modulePathIgnorePatterns: [],\n          \n          \n            \n            \n          \n          \n            \n              // Activates notifications for test results\n          \n          \n            \n              // notify: false,\n          \n          \n            \n            \n          \n          \n            \n              // An enum that specifies notification mode. Requires { notify: true }\n          \n          \n            \n              // notifyMode: \"failure-change\",\n          \n          \n            \n            \n          \n          \n            \n              // A preset that is used as a base for Jest's configuration\n          \n          \n            \n              preset: \"ts-jest\",\n          \n          \n            \n            \n          \n          \n            \n              // Run tests from one or more projects\n          \n          \n            \n              // projects: null,\n          \n          \n            \n            \n          \n          \n            \n              // Use this configuration option to add custom reporters to Jest\n          \n          \n            \n              // reporters: undefined,\n          \n          \n            \n            \n          \n          \n            \n              // Automatically reset mock state between every test\n          \n          \n            \n              // resetMocks: false,\n          \n          \n            \n            \n          \n          \n            \n              // Reset the module registry before running each individual test\n          \n          \n            \n              // resetModules: false,\n          \n          \n            \n            \n          \n          \n            \n              // A path to a custom resolver\n          \n          \n            \n              // resolver: null,\n          \n          \n            \n            \n          \n          \n            \n              // Automatically restore mock state between every test\n          \n          \n            \n              // restoreMocks: false,\n          \n          \n            \n            \n          \n          \n            \n              // The root directory that Jest should scan for tests and modules within\n          \n          \n            \n              // rootDir: null,\n          \n          \n            \n            \n          \n          \n            \n              // A list of paths to directories that Jest should use to search for files in\n          \n          \n            \n              // roots: [\n          \n          \n            \n              //   \"<rootDir>\"\n          \n          \n            \n              // ],\n          \n          \n            \n            \n          \n          \n            \n              // Allows you to use a custom runner instead of Jest's default test runner\n          \n          \n            \n              // runner: \"jest-runner\",\n          \n          \n            \n            \n          \n          \n            \n              // The paths to modules that run some code to configure or set up the testing environment before each test\n          \n          \n            \n              // setupFiles: [],\n          \n          \n            \n            \n          \n          \n            \n              // A list of paths to modules that run some code to configure or set up the testing framework before each test\n          \n          \n            \n              // setupFilesAfterEnv: [],\n          \n          \n            \n            \n          \n          \n            \n              // A list of paths to snapshot serializer modules Jest should use for snapshot testing\n          \n          \n            \n              // snapshotSerializers: [],\n          \n          \n            \n            \n          \n          \n            \n              // The test environment that will be used for testing\n          \n          \n            \n              testEnvironment: \"node\",\n          \n          \n            \n            \n          \n          \n            \n              // Options that will be passed to the testEnvironment\n          \n          \n            \n              // testEnvironmentOptions: {},\n          \n          \n            \n            \n          \n          \n            \n              // Adds a location field to test results\n          \n          \n            \n              // testLocationInResults: false,\n          \n          \n            \n            \n          \n          \n            \n              // The glob patterns Jest uses to detect test files\n          \n          \n            \n              // testMatch: [\n          \n          \n            \n              //   \"**/__tests__/**/*.[jt]s?(x)\",\n          \n          \n            \n              //   \"**/?(*.)+(spec|test).[tj]s?(x)\"\n          \n          \n            \n              // ],\n          \n          \n            \n            \n          \n          \n            \n              // An array of regexp pattern strings that are matched against all test paths, matched tests are skipped\n          \n          \n            \n              // testPathIgnorePatterns: [\n          \n          \n            \n              //   \"/node_modules/\"\n          \n          \n            \n              // ],\n          \n          \n            \n            \n          \n          \n            \n              // The regexp pattern or array of patterns that Jest uses to detect test files\n          \n          \n            \n              // testRegex: [],\n          \n          \n            \n            \n          \n          \n            \n              // This option allows the use of a custom results processor\n          \n          \n            \n              // testResultsProcessor: null,\n          \n          \n            \n            \n          \n          \n            \n              // This option allows use of a custom test runner\n          \n          \n            \n              // testRunner: \"jasmine2\",\n          \n          \n            \n            \n          \n          \n            \n              // This option sets the URL for the jsdom environment. It is reflected in properties such as location.href\n          \n          \n            \n              // testURL: \"http://localhost\",\n          \n          \n            \n            \n          \n          \n            \n              // Setting this value to \"fake\" allows the use of fake timers for functions such as \"setTimeout\"\n          \n          \n            \n              // timers: \"real\",\n          \n          \n            \n            \n          \n          \n            \n              // A map from regular expressions to paths to transformers\n          \n          \n            \n              // transform: null,\n          \n          \n            \n            \n          \n          \n            \n              // An array of regexp pattern strings that are matched against all source file paths, matched files will skip transformation\n          \n          \n            \n              // transformIgnorePatterns: [\n          \n          \n            \n              //   \"/node_modules/\"\n          \n          \n            \n              // ],\n          \n          \n            \n            \n          \n          \n            \n              // An array of regexp pattern strings that are matched against all modules before the module loader will automatically return a mock for them\n          \n          \n            \n              // unmockedModulePathPatterns: undefined,\n          \n          \n            \n            \n          \n          \n            \n              // Indicates whether each individual test should be reported during the run\n          \n          \n            \n              // verbose: null,\n          \n          \n            \n            \n          \n          \n            \n              // An array of regexp patterns that are matched against all source file paths before re-running tests in watch mode\n          \n          \n            \n              // watchPathIgnorePatterns: [],\n          \n          \n            \n            \n          \n          \n            \n              // Whether to use watchman for file crawling\n          \n          \n            \n              // watchman: true,\n          \n          \n            \n            };\n          \n          \n            \n            module.exports = {\n          \n          \n            \n              clearMocks: true,\n          \n          \n            \n              coverageDirectory: \"coverage\",\n          \n          \n            \n              preset: \"ts-jest\",\n          \n          \n            \n              testEnvironment: \"node\",\n          \n          \n            \n            };", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423285020", "createdAt": "2020-05-11T20:00:36Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/jest.config.js", "diffHunk": "@@ -0,0 +1,189 @@\n+// For a detailed explanation regarding each configuration property, visit:\n+// https://jestjs.io/docs/en/configuration.html\n+\n+// eslint-disable-next-line no-undef\n+module.exports = {\n+  // All imported modules in your tests should be mocked automatically\n+  // automock: false,\n+\n+  // Stop running tests after `n` failures\n+  // bail: 0,\n+\n+  // Respect \"browser\" field in package.json when resolving modules\n+  // browser: false,\n+\n+  // The directory where Jest should store its cached dependency information\n+  // cacheDirectory: \"/tmp/jest_rs\",\n+\n+  // Automatically clear mock calls and instances between every test\n+  clearMocks: true,\n+\n+  // Indicates whether the coverage information should be collected while executing the test\n+  // collectCoverage: false,\n+\n+  // An array of glob patterns indicating a set of files for which coverage information should be collected\n+  // collectCoverageFrom: null,\n+\n+  // The directory where Jest should output its coverage files\n+  coverageDirectory: \"coverage\",\n+\n+  // An array of regexp pattern strings used to skip coverage collection\n+  // coveragePathIgnorePatterns: [\n+  //   \"/node_modules/\"\n+  // ],\n+\n+  // A list of reporter names that Jest uses when writing coverage reports\n+  // coverageReporters: [\n+  //   \"json\",\n+  //   \"text\",\n+  //   \"lcov\",\n+  //   \"clover\"\n+  // ],\n+\n+  // An object that configures minimum threshold enforcement for coverage results\n+  // coverageThreshold: null,\n+\n+  // A path to a custom dependency extractor\n+  // dependencyExtractor: null,\n+\n+  // Make calling deprecated APIs throw helpful error messages\n+  // errorOnDeprecated: false,\n+\n+  // Force coverage collection from ignored files using an array of glob patterns\n+  // forceCoverageMatch: [],\n+\n+  // A path to a module which exports an async function that is triggered once before all test suites\n+  // globalSetup: null,\n+\n+  // A path to a module which exports an async function that is triggered once after all test suites\n+  // globalTeardown: null,\n+\n+  // A set of global variables that need to be available in all test environments\n+  // globals: {},\n+\n+  // The maximum amount of workers used to run your tests. Can be specified as % or a number. E.g. maxWorkers: 10% will use 10% of your CPU amount + 1 as the maximum worker number. maxWorkers: 2 will use a maximum of 2 workers.\n+  // maxWorkers: \"50%\",\n+\n+  // An array of directory names to be searched recursively up from the requiring module's location\n+  // moduleDirectories: [\n+  //   \"node_modules\"\n+  // ],\n+\n+  // An array of file extensions your modules use\n+  // moduleFileExtensions: [\n+  //   \"js\",\n+  //   \"json\",\n+  //   \"jsx\",\n+  //   \"ts\",\n+  //   \"tsx\",\n+  //   \"node\"\n+  // ],\n+\n+  // A map from regular expressions to module names that allow to stub out resources with a single module\n+  // moduleNameMapper: {},\n+\n+  // An array of regexp pattern strings, matched against all module paths before considered 'visible' to the module loader\n+  // modulePathIgnorePatterns: [],\n+\n+  // Activates notifications for test results\n+  // notify: false,\n+\n+  // An enum that specifies notification mode. Requires { notify: true }\n+  // notifyMode: \"failure-change\",\n+\n+  // A preset that is used as a base for Jest's configuration\n+  preset: \"ts-jest\",\n+\n+  // Run tests from one or more projects\n+  // projects: null,\n+\n+  // Use this configuration option to add custom reporters to Jest\n+  // reporters: undefined,\n+\n+  // Automatically reset mock state between every test\n+  // resetMocks: false,\n+\n+  // Reset the module registry before running each individual test\n+  // resetModules: false,\n+\n+  // A path to a custom resolver\n+  // resolver: null,\n+\n+  // Automatically restore mock state between every test\n+  // restoreMocks: false,\n+\n+  // The root directory that Jest should scan for tests and modules within\n+  // rootDir: null,\n+\n+  // A list of paths to directories that Jest should use to search for files in\n+  // roots: [\n+  //   \"<rootDir>\"\n+  // ],\n+\n+  // Allows you to use a custom runner instead of Jest's default test runner\n+  // runner: \"jest-runner\",\n+\n+  // The paths to modules that run some code to configure or set up the testing environment before each test\n+  // setupFiles: [],\n+\n+  // A list of paths to modules that run some code to configure or set up the testing framework before each test\n+  // setupFilesAfterEnv: [],\n+\n+  // A list of paths to snapshot serializer modules Jest should use for snapshot testing\n+  // snapshotSerializers: [],\n+\n+  // The test environment that will be used for testing\n+  testEnvironment: \"node\",\n+\n+  // Options that will be passed to the testEnvironment\n+  // testEnvironmentOptions: {},\n+\n+  // Adds a location field to test results\n+  // testLocationInResults: false,\n+\n+  // The glob patterns Jest uses to detect test files\n+  // testMatch: [\n+  //   \"**/__tests__/**/*.[jt]s?(x)\",\n+  //   \"**/?(*.)+(spec|test).[tj]s?(x)\"\n+  // ],\n+\n+  // An array of regexp pattern strings that are matched against all test paths, matched tests are skipped\n+  // testPathIgnorePatterns: [\n+  //   \"/node_modules/\"\n+  // ],\n+\n+  // The regexp pattern or array of patterns that Jest uses to detect test files\n+  // testRegex: [],\n+\n+  // This option allows the use of a custom results processor\n+  // testResultsProcessor: null,\n+\n+  // This option allows use of a custom test runner\n+  // testRunner: \"jasmine2\",\n+\n+  // This option sets the URL for the jsdom environment. It is reflected in properties such as location.href\n+  // testURL: \"http://localhost\",\n+\n+  // Setting this value to \"fake\" allows the use of fake timers for functions such as \"setTimeout\"\n+  // timers: \"real\",\n+\n+  // A map from regular expressions to paths to transformers\n+  // transform: null,\n+\n+  // An array of regexp pattern strings that are matched against all source file paths, matched files will skip transformation\n+  // transformIgnorePatterns: [\n+  //   \"/node_modules/\"\n+  // ],\n+\n+  // An array of regexp pattern strings that are matched against all modules before the module loader will automatically return a mock for them\n+  // unmockedModulePathPatterns: undefined,\n+\n+  // Indicates whether each individual test should be reported during the run\n+  // verbose: null,\n+\n+  // An array of regexp patterns that are matched against all source file paths before re-running tests in watch mode\n+  // watchPathIgnorePatterns: [],\n+\n+  // Whether to use watchman for file crawling\n+  // watchman: true,\n+};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b9ec7e2b7cfa2de4ae9b0aecadd095af90dc2b9"}, "originalPosition": 189}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NDkyNzg1", "url": "https://github.com/openequella/openEQUELLA/pull/1722#pullrequestreview-409492785", "createdAt": "2020-05-11T20:09:39Z", "commit": {"oid": "1b9ec7e2b7cfa2de4ae9b0aecadd095af90dc2b9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDowOTo0MFrOGTri8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDowOTo0MFrOGTri8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4OTU4Ng==", "bodyText": "This should be fine for now, if this gets moved to the npm or github registry down the road, it might be good to match the package name.", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423289586", "createdAt": "2020-05-11T20:09:40Z", "author": {"login": "ChristianMurphy"}, "path": "Source/Plugins/Core/com.equella.core/js/package.json", "diffHunk": "@@ -44,6 +45,7 @@\n     \"lodash\": \"4.17.15\",\n     \"luxon\": \"1.16.0\",\n     \"material-ui-pickers\": \"2.2.4\",\n+    \"oeq\": \"file:../../../../../oeq-ts-rest-api\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b9ec7e2b7cfa2de4ae9b0aecadd095af90dc2b9"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NDkzNTU2", "url": "https://github.com/openequella/openEQUELLA/pull/1722#pullrequestreview-409493556", "createdAt": "2020-05-11T20:10:48Z", "commit": {"oid": "1b9ec7e2b7cfa2de4ae9b0aecadd095af90dc2b9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoxMDo0OFrOGTrlgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoxMDo0OFrOGTrlgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5MDI0Mw==", "bodyText": "Is this file included as an intermediate step to prep for moving this to another repo?", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423290243", "createdAt": "2020-05-11T20:10:48Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/.gitignore", "diffHunk": "@@ -0,0 +1,5 @@\n+*.log\n+.DS_Store\n+node_modules\n+dist\n+.vscode", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b9ec7e2b7cfa2de4ae9b0aecadd095af90dc2b9"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NDk0NjQ5", "url": "https://github.com/openequella/openEQUELLA/pull/1722#pullrequestreview-409494649", "createdAt": "2020-05-11T20:12:27Z", "commit": {"oid": "1b9ec7e2b7cfa2de4ae9b0aecadd095af90dc2b9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoxMjoyOFrOGTrozQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoxMjoyOFrOGTrozQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5MTA4NQ==", "bodyText": "Nice to have, a newline at end of file\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            export const PASSWORD = 'abc';\n          \n          \n            \n            export const PASSWORD = 'abc';", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423291085", "createdAt": "2020-05-11T20:12:28Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/test/TestConfig.ts", "diffHunk": "@@ -0,0 +1,3 @@\n+export const API_PATH = 'http://localhost:8080/rest/api';\n+export const USERNAME = 'TLE_ADMINISTRATOR';\n+export const PASSWORD = 'abc';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b9ec7e2b7cfa2de4ae9b0aecadd095af90dc2b9"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NDk0ODUw", "url": "https://github.com/openequella/openEQUELLA/pull/1722#pullrequestreview-409494850", "createdAt": "2020-05-11T20:12:45Z", "commit": {"oid": "1b9ec7e2b7cfa2de4ae9b0aecadd095af90dc2b9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoxMjo0NVrOGTrpbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoxMjo0NVrOGTrpbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5MTI0Nw==", "bodyText": "Nice to have, a newline at the end of the file\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            export * as Settings from './Settings';\n          \n          \n            \n            export * as Settings from './Settings';", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423291247", "createdAt": "2020-05-11T20:12:45Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/src/index.ts", "diffHunk": "@@ -0,0 +1,4 @@\n+export * as Auth from './Auth';\n+export * as LegacyContent from './LegacyContent';\n+export * as Errors from './Errors';\n+export * as Settings from './Settings';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b9ec7e2b7cfa2de4ae9b0aecadd095af90dc2b9"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ca12d6dec711cae6dbda08e594c30a175382db3", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/7ca12d6dec711cae6dbda08e594c30a175382db3", "committedDate": "2020-05-11T21:47:13Z", "message": "Update oeq-ts-rest-api/README.md\r\n\r\nIncorporate feedback from PR #1722\n\nCo-authored-by: Christian Murphy <christian.murphy.42@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3599b398808ef1347e2f91b58796fd88d52862dc", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/3599b398808ef1347e2f91b58796fd88d52862dc", "committedDate": "2020-05-11T21:47:22Z", "message": "Update oeq-ts-rest-api/README.md\r\n\r\nIncorporate feedback from PR #1722\n\nCo-authored-by: Christian Murphy <christian.murphy.42@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "616fa8f79f84c27eb20016344c1b97aa9940576e", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/616fa8f79f84c27eb20016344c1b97aa9940576e", "committedDate": "2020-05-11T21:49:27Z", "message": "Remove commented out template from oeq-ts-rest-api/jest.config.js\r\n\r\nIncorporate feedback from PR #1722\n\nCo-authored-by: Christian Murphy <christian.murphy.42@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3cbf68cb59b3fc9b401b72901ef6219821e30a36", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/3cbf68cb59b3fc9b401b72901ef6219821e30a36", "committedDate": "2020-05-11T21:50:44Z", "message": "Add newline at end of oeq-ts-rest-api/test/TestConfig.ts\n\nCo-authored-by: Christian Murphy <christian.murphy.42@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5963d60b128bac91a3a012b1a7336c008d9e0b4", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/c5963d60b128bac91a3a012b1a7336c008d9e0b4", "committedDate": "2020-05-11T21:51:06Z", "message": "Add new line at end of oeq-ts-rest-api/src/index.ts\r\n\r\nIncorporate feedback from PR #1722\n\nCo-authored-by: Christian Murphy <christian.murphy.42@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81f859012513681d8a5b40fa9dd9801081317e33", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/81f859012513681d8a5b40fa9dd9801081317e33", "committedDate": "2020-05-11T22:54:46Z", "message": "Use a namespace for the new REST JS Module\n\nAs per feedback from PR #1722"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6128cabe7d0e15c406a2e9460fe07a033e6a3145", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/6128cabe7d0e15c406a2e9460fe07a033e6a3145", "committedDate": "2020-05-11T22:55:54Z", "message": "Merge branch 'feature/js-oeq-api' of github.com:edalex-ian/openEQUELLA into feature/js-oeq-api"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NjM1ODQw", "url": "https://github.com/openequella/openEQUELLA/pull/1722#pullrequestreview-409635840", "createdAt": "2020-05-12T01:18:10Z", "commit": {"oid": "6128cabe7d0e15c406a2e9460fe07a033e6a3145"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NjY1NjIx", "url": "https://github.com/openequella/openEQUELLA/pull/1722#pullrequestreview-409665621", "createdAt": "2020-05-12T02:59:59Z", "commit": {"oid": "6128cabe7d0e15c406a2e9460fe07a033e6a3145"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28b5c7b528d0d4f51ce07a9a762706ce9a3491c7", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/28b5c7b528d0d4f51ce07a9a762706ce9a3491c7", "committedDate": "2020-05-12T03:24:36Z", "message": "oeq-rest-client: Convert build to using rollup directly"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NzMzOTgw", "url": "https://github.com/openequella/openEQUELLA/pull/1722#pullrequestreview-409733980", "createdAt": "2020-05-12T06:31:07Z", "commit": {"oid": "6128cabe7d0e15c406a2e9460fe07a033e6a3145"}, "state": "APPROVED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjozMTowN1rOGT33JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjo1MzoxN1rOGT4dYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5MTM2NQ==", "bodyText": "Does this still need to be here? Or is it just a placeholder in case we need CancelTokens in the future?", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423491365", "createdAt": "2020-05-12T06:31:07Z", "author": {"login": "SammyIsConfused"}, "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/SettingsPage.tsx", "diffHunk": "@@ -81,22 +80,22 @@ const SettingsPage = ({ refreshUser, updateTemplate }: SettingsPageProps) => {\n \n   useEffect(() => {\n     // Use a flag to prevent setting state when component is being unmounted\n-    const cancelToken = axios.CancelToken.source();\n-    fetchSettings(cancelToken.token)\n+    let cleanupTriggered = false;\n+    fetchSettings()\n       .then((settings) => {\n-        setSettingGroups(groupMap(settings));\n-        setLoading(false);\n+        if (!cleanupTriggered) {\n+          setSettingGroups(groupMap(settings));\n+          setLoading(false);\n+        }\n       })\n       .catch((error) => {\n-        if (axios.isCancel(error)) {\n-          return; // Request was cancelled\n-        }\n         handleError(error);\n         setLoading(false);\n       });\n \n     return () => {\n-      cancelToken.cancel();\n+      cleanupTriggered = true;\n+      // cancelToken.cancel();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6128cabe7d0e15c406a2e9460fe07a033e6a3145"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5MjYxNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This project was bootstrapped with [TSDX](https://github.com/jaredpalmer/tsdx) but the subsequently\n          \n          \n            \n            This project was bootstrapped with [TSDX](https://github.com/jaredpalmer/tsdx) but then subsequently", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423492614", "createdAt": "2020-05-12T06:33:58Z", "author": {"login": "SammyIsConfused"}, "path": "oeq-ts-rest-api/README.md", "diffHunk": "@@ -0,0 +1,72 @@\n+# openEQUELLA Typescript REST API SDK\n+\n+This module provides a code generated SDK for access to the openEQUELLA REST API.\n+\n+## Local Development\n+\n+This project was bootstrapped with [TSDX](https://github.com/jaredpalmer/tsdx) but the subsequently", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6128cabe7d0e15c406a2e9460fe07a033e6a3145"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5MjgyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            special logger for you convenience. Error messages are pretty printed and formatted for\n          \n          \n            \n            special logger for your convenience. Error messages are pretty printed and formatted for", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423492828", "createdAt": "2020-05-12T06:34:31Z", "author": {"login": "SammyIsConfused"}, "path": "oeq-ts-rest-api/README.md", "diffHunk": "@@ -0,0 +1,72 @@\n+# openEQUELLA Typescript REST API SDK\n+\n+This module provides a code generated SDK for access to the openEQUELLA REST API.\n+\n+## Local Development\n+\n+This project was bootstrapped with [TSDX](https://github.com/jaredpalmer/tsdx) but the subsequently\n+tweaked (especially for Jest and Eslint).\n+\n+Below is a list of commands you may find useful.\n+\n+### `npm start` or `yarn start`\n+\n+Runs the project in development/watch mode. Your project will be rebuilt upon changes. TSDX has a\n+special logger for you convenience. Error messages are pretty printed and formatted for", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6128cabe7d0e15c406a2e9460fe07a033e6a3145"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5Mzc3Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Ideally the we could just write our own codegen from the models. However, this has a couple of issues\n          \n          \n            \n            Ideally then, we could just write our own codegen from the models. However, this has a couple of issues", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423493772", "createdAt": "2020-05-12T06:36:44Z", "author": {"login": "SammyIsConfused"}, "path": "oeq-ts-rest-api/README.md", "diffHunk": "@@ -0,0 +1,72 @@\n+# openEQUELLA Typescript REST API SDK\n+\n+This module provides a code generated SDK for access to the openEQUELLA REST API.\n+\n+## Local Development\n+\n+This project was bootstrapped with [TSDX](https://github.com/jaredpalmer/tsdx) but the subsequently\n+tweaked (especially for Jest and Eslint).\n+\n+Below is a list of commands you may find useful.\n+\n+### `npm start` or `yarn start`\n+\n+Runs the project in development/watch mode. Your project will be rebuilt upon changes. TSDX has a\n+special logger for you convenience. Error messages are pretty printed and formatted for\n+compatibility VS Code's Problems tab.\n+\n+![npm start example](https://user-images.githubusercontent.com/4060187/52168303-574d3a00-26f6-11e9-9f3b-71dbec9ebfcb.gif)\n+\n+Your library will be rebuilt if you make edits.\n+\n+### `npm run build` or `yarn build`\n+\n+Bundles the package to the `dist` folder.  The package is optimized and bundled with Rollup into\n+multiple formats (CommonJS, UMD, and ES Module).\n+\n+![npm build example](https://user-images.githubusercontent.com/4060187/52168322-a98e5b00-26f6-11e9-8cf6-222d716b75ef.gif)\n+\n+## Implementation Considerations\n+\n+First, why was this done?\n+\n+1. To reduce coupling between the UI layers and the API calls; so as\n+2. To ease testing of the UI components, and ease testing of the API interactions; and\n+3. Provide a unit of stand-alone code that could easily be developed on and tested.\n+\n+When approaching this a few items were considered:\n+\n+1. Using codegen from the oEQ generated swagger.yml; and\n+2. Doing codegen just for the models\n+\n+However, both of these had issues, and so in the end the code has simply been hand rolled. Here is\n+an outline of the issues faced with these to help any future efforts.\n+\n+### Codegen from oEQ's swagger.yml\n+\n+First and foremost, there were some issues with generating from the current swagger.yml - more so\n+with the current openapi generator outright failing. But the generated code from such a tool is\n+rather simplistic and doesn't really reduce coupling between the implementation details of the API\n+interaction (such as, use of Axios) and so results in limited value.\n+\n+Further, some of the oEQ endpoints have been written code first, and so the YAML and the resulting\n+API is not necessarily that user friendly - and definitely lacks documentation.\n+\n+### Codegen just for the models\n+\n+This would be a great win, but the swagger/openapi codgen tools don't really provide a means to\n+do this. But even if they did, again due to the way the oEQ API has been built over time (very much\n+a code first approach) the resultant models would not necessarily be ideal - especially with a strong\n+prevalence of the use of maps. (Maps are not really directly supported via swagger/openapi so you\n+end up with some work arounds.)\n+\n+Ideally the we could just write our own codegen from the models. However, this has a couple of issues", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6128cabe7d0e15c406a2e9460fe07a033e6a3145"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5MzkzNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            on it's own:\n          \n          \n            \n            on its own:", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423493935", "createdAt": "2020-05-12T06:37:06Z", "author": {"login": "SammyIsConfused"}, "path": "oeq-ts-rest-api/README.md", "diffHunk": "@@ -0,0 +1,72 @@\n+# openEQUELLA Typescript REST API SDK\n+\n+This module provides a code generated SDK for access to the openEQUELLA REST API.\n+\n+## Local Development\n+\n+This project was bootstrapped with [TSDX](https://github.com/jaredpalmer/tsdx) but the subsequently\n+tweaked (especially for Jest and Eslint).\n+\n+Below is a list of commands you may find useful.\n+\n+### `npm start` or `yarn start`\n+\n+Runs the project in development/watch mode. Your project will be rebuilt upon changes. TSDX has a\n+special logger for you convenience. Error messages are pretty printed and formatted for\n+compatibility VS Code's Problems tab.\n+\n+![npm start example](https://user-images.githubusercontent.com/4060187/52168303-574d3a00-26f6-11e9-9f3b-71dbec9ebfcb.gif)\n+\n+Your library will be rebuilt if you make edits.\n+\n+### `npm run build` or `yarn build`\n+\n+Bundles the package to the `dist` folder.  The package is optimized and bundled with Rollup into\n+multiple formats (CommonJS, UMD, and ES Module).\n+\n+![npm build example](https://user-images.githubusercontent.com/4060187/52168322-a98e5b00-26f6-11e9-8cf6-222d716b75ef.gif)\n+\n+## Implementation Considerations\n+\n+First, why was this done?\n+\n+1. To reduce coupling between the UI layers and the API calls; so as\n+2. To ease testing of the UI components, and ease testing of the API interactions; and\n+3. Provide a unit of stand-alone code that could easily be developed on and tested.\n+\n+When approaching this a few items were considered:\n+\n+1. Using codegen from the oEQ generated swagger.yml; and\n+2. Doing codegen just for the models\n+\n+However, both of these had issues, and so in the end the code has simply been hand rolled. Here is\n+an outline of the issues faced with these to help any future efforts.\n+\n+### Codegen from oEQ's swagger.yml\n+\n+First and foremost, there were some issues with generating from the current swagger.yml - more so\n+with the current openapi generator outright failing. But the generated code from such a tool is\n+rather simplistic and doesn't really reduce coupling between the implementation details of the API\n+interaction (such as, use of Axios) and so results in limited value.\n+\n+Further, some of the oEQ endpoints have been written code first, and so the YAML and the resulting\n+API is not necessarily that user friendly - and definitely lacks documentation.\n+\n+### Codegen just for the models\n+\n+This would be a great win, but the swagger/openapi codgen tools don't really provide a means to\n+do this. But even if they did, again due to the way the oEQ API has been built over time (very much\n+a code first approach) the resultant models would not necessarily be ideal - especially with a strong\n+prevalence of the use of maps. (Maps are not really directly supported via swagger/openapi so you\n+end up with some work arounds.)\n+\n+Ideally the we could just write our own codegen from the models. However, this has a couple of issues\n+on it's own:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6128cabe7d0e15c406a2e9460fe07a033e6a3145"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5NDc4Ng==", "bodyText": "Not a suggestion, just a comment this README is really great. Gives lots of insight into not just how this works, but also how and why you got there.", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423494786", "createdAt": "2020-05-12T06:38:58Z", "author": {"login": "SammyIsConfused"}, "path": "oeq-ts-rest-api/README.md", "diffHunk": "@@ -0,0 +1,72 @@\n+# openEQUELLA Typescript REST API SDK", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6128cabe7d0e15c406a2e9460fe07a033e6a3145"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5NzIyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            test(\"That having login, we're able to properly log out.\", () =>\n          \n          \n            \n            test(\"That having logged in, we're able to properly log out.\", () =>", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423497227", "createdAt": "2020-05-12T06:44:24Z", "author": {"login": "SammyIsConfused"}, "path": "oeq-ts-rest-api/test/auth.test.ts", "diffHunk": "@@ -0,0 +1,33 @@\n+import * as OEQ from '../src';\n+import * as TC from './TestConfig';\n+\n+beforeEach(() => OEQ.Auth.logout(TC.API_PATH, true));\n+\n+test(\"That we're able to login\", () =>\n+  OEQ.Auth.login(TC.API_PATH, TC.USERNAME, TC.PASSWORD)\n+    .then((sessionid: string | undefined) => expect(sessionid).toBeTruthy())\n+    .then(() => OEQ.LegacyContent.getCurrentUserDetails(TC.API_PATH))\n+    .then((userDetails: OEQ.LegacyContent.CurrentUserDetails) =>\n+      expect(userDetails.id).toBe(TC.USERNAME)\n+    ));\n+\n+test('An attempt to login with bad credentials fails', () => {\n+  expect.assertions(1);\n+  return OEQ.Auth.login(TC.API_PATH, 'fakeusername', 'fakepassword').catch(\n+    (error: OEQ.Errors.ApiError) => {\n+      expect(error.status).toBe(401);\n+    }\n+  );\n+});\n+\n+test(\"That having login, we're able to properly log out.\", () =>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6128cabe7d0e15c406a2e9460fe07a033e6a3145"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5Nzk1Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            test('Able to retrieve general settings', () =>\n          \n          \n            \n            test('That we're able to retrieve general settings', () =>\n          \n      \n    \n    \n  \n\nJust for consistency with above.", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423497953", "createdAt": "2020-05-12T06:46:00Z", "author": {"login": "SammyIsConfused"}, "path": "oeq-ts-rest-api/test/settings.test.ts", "diffHunk": "@@ -0,0 +1,40 @@\n+import * as OEQ from '../src';\n+import * as TC from './TestConfig';\n+import { GeneralSetting, UISettings } from '../src/Settings';\n+\n+beforeAll(() => OEQ.Auth.login(TC.API_PATH, TC.USERNAME, TC.PASSWORD));\n+\n+afterAll(() => OEQ.Auth.logout(TC.API_PATH, true));\n+\n+test('Able to retrieve general settings', () =>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6128cabe7d0e15c406a2e9460fe07a033e6a3145"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5OTIxMg==", "bodyText": "I know we were using jsdom before now - is there any reason for the change?", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423499212", "createdAt": "2020-05-12T06:48:53Z", "author": {"login": "SammyIsConfused"}, "path": "oeq-ts-rest-api/jest.config.js", "diffHunk": "@@ -0,0 +1,10 @@\n+// For a detailed explanation regarding each configuration property, visit:\n+// https://jestjs.io/docs/en/configuration.html\n+\n+// eslint-disable-next-line no-undef\n+module.exports = {\n+  clearMocks: true,\n+  coverageDirectory: \"coverage\",\n+  preset: \"ts-jest\",\n+  testEnvironment: \"node\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6128cabe7d0e15c406a2e9460fe07a033e6a3145"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMDUxOQ==", "bodyText": "Just curious - in future releases, part of the process of progressing the version will be to bump this number up to match the same on the backend? Also, is this documented anywhere?", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423500519", "createdAt": "2020-05-12T06:51:54Z", "author": {"login": "SammyIsConfused"}, "path": "oeq-ts-rest-api/package.json", "diffHunk": "@@ -0,0 +1,49 @@\n+{\n+  \"name\": \"@openequella/rest-api-client\",\n+  \"version\": \"2020.2.0-Alpha\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6128cabe7d0e15c406a2e9460fe07a033e6a3145"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMTE1Mw==", "bodyText": "is there some sort of eslint --fix command we could add?", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r423501153", "createdAt": "2020-05-12T06:53:17Z", "author": {"login": "SammyIsConfused"}, "path": "oeq-ts-rest-api/package.json", "diffHunk": "@@ -0,0 +1,49 @@\n+{\n+  \"name\": \"@openequella/rest-api-client\",\n+  \"version\": \"2020.2.0-Alpha\",\n+  \"license\": \"Apache-2.0\",\n+  \"main\": \"dist/index.js\",\n+  \"typings\": \"dist/index.d.ts\",\n+  \"files\": [\n+    \"dist\",\n+    \"src\"\n+  ],\n+  \"engines\": {\n+    \"node\": \">=10\"\n+  },\n+  \"scripts\": {\n+    \"start\": \"tsdx watch\",\n+    \"build\": \"tsdx build\",\n+    \"test\": \"jest\",\n+    \"lint\": \"eslint \\\"src/**/*.{ts,tsx}\\\" \\\"test/**/*.{ts,tsx}\\\"\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6128cabe7d0e15c406a2e9460fe07a033e6a3145"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95b75e8629a91784573e81aef45e557e1d5ae9d1", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/95b75e8629a91784573e81aef45e557e1d5ae9d1", "committedDate": "2020-05-12T07:41:27Z", "message": "oeq-ts-rest-api: Add runtime type checking\n\nUsing typescript-is we're performing type checking on payloads at\nruntime to ensure the server we're taking to is matching.\n\nAlso involved fixing up some of our migration from TSDX to rollup."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ec20616e85911460a53c26f5da88c32383492dc", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/9ec20616e85911460a53c26f5da88c32383492dc", "committedDate": "2020-05-12T07:53:21Z", "message": "Update oeq-ts-rest-api/README.md\r\n\r\nFeedback in PR #1722\n\nCo-authored-by: SammyIsConfused <samantha.fisher@edalex.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd49f96209bb066ec6d6662aa8f80dff914a5cbe", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/dd49f96209bb066ec6d6662aa8f80dff914a5cbe", "committedDate": "2020-05-12T08:02:44Z", "message": "oeq-ts-rest-api: Update README to better reflect new non-TSDX setup."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1ad18d94df1cebb71b3c09b210a75bd61225981", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/d1ad18d94df1cebb71b3c09b210a75bd61225981", "committedDate": "2020-05-12T08:05:44Z", "message": "oeq-ts-rest-api: Add npm run format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7188873db1c9aa8294ca3def91366db6298beb5c", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/7188873db1c9aa8294ca3def91366db6298beb5c", "committedDate": "2020-05-12T08:06:21Z", "message": "oeq-ts-rest-api: fix typos in test descriptions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "353b09baaf4c0b1f050f157e1c38ccda1333759d", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/353b09baaf4c0b1f050f157e1c38ccda1333759d", "committedDate": "2020-05-12T08:08:37Z", "message": "Remove commented out use of cancel token"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9d035ccb3a6a0932216e6605fd107412322dac8", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/d9d035ccb3a6a0932216e6605fd107412322dac8", "committedDate": "2020-05-12T08:10:12Z", "message": "Update core/js/package-lock.json to reflect REST client updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de1c38f09fefc1ed492d749bbd2da984602f9bb8", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/de1c38f09fefc1ed492d749bbd2da984602f9bb8", "committedDate": "2020-05-12T22:40:57Z", "message": "oeq-ts-rest-api: remove husky\n\nThis was left in place for later when we split to another repo, but\nunfortunately keeping it here when you do a `npm i` it overwrites the\nroot husky setups and will break people's commit hooks."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNDQ0ODk4", "url": "https://github.com/openequella/openEQUELLA/pull/1722#pullrequestreview-410444898", "createdAt": "2020-05-12T21:44:19Z", "commit": {"oid": "d9d035ccb3a6a0932216e6605fd107412322dac8"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMTo0NDoxOVrOGUaDbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzoyMToyMFrOGUcS0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA1MTU2NA==", "bodyText": "Are these globals used?", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r424051564", "createdAt": "2020-05-12T21:44:19Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/.eslintrc.js", "diffHunk": "@@ -0,0 +1,23 @@\n+module.exports = {\n+  root: true,\n+  env: {\n+    browser: true,\n+    es6: true,\n+  },\n+  extends: [\n+    'eslint:recommended',\n+    'plugin:@typescript-eslint/eslint-recommended',\n+    'plugin:@typescript-eslint/recommended',\n+  ],\n+  globals: {\n+    Atomics: 'readonly',\n+    SharedArrayBuffer: 'readonly',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9d035ccb3a6a0932216e6605fd107412322dac8"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA1NzgwMw==", "bodyText": "For libraries is can be nice to allow version ranges for dependencies, so down stream, npm has more flexibility resolving version conflicts.\nRenovate has a good write up on some of the trade offs with this: https://docs.renovatebot.com/dependency-pinning/#why-use-ranges", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r424057803", "createdAt": "2020-05-12T21:57:44Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/package.json", "diffHunk": "@@ -0,0 +1,58 @@\n+{\n+  \"name\": \"@openequella/rest-api-client\",\n+  \"version\": \"2020.2.0-Alpha\",\n+  \"license\": \"Apache-2.0\",\n+  \"main\": \"dist/index.js\",\n+  \"typings\": \"dist/index.d.ts\",\n+  \"files\": [\n+    \"dist\",\n+    \"src\"\n+  ],\n+  \"engines\": {\n+    \"node\": \">=10\"\n+  },\n+  \"scripts\": {\n+    \"start\": \"rollup --config --watch\",\n+    \"build\": \"rollup --config\",\n+    \"test\": \"jest\",\n+    \"lint\": \"eslint \\\"src/**/*.{ts,tsx}\\\" \\\"test/**/*.{ts,tsx}\\\"\",\n+    \"format\": \"eslint --fix \\\"src/**/*.{ts,tsx}\\\" \\\"test/**/*.{ts,tsx}\\\"\",\n+    \"prepare\": \"rollup --config\"\n+  },\n+  \"peerDependencies\": {},\n+  \"husky\": {\n+    \"hooks\": {\n+      \"pre-commit\": \"npm run lint\"\n+    }\n+  },\n+  \"prettier\": {\n+    \"printWidth\": 80,\n+    \"semi\": true,\n+    \"singleQuote\": true,\n+    \"trailingComma\": \"es5\"\n+  },\n+  \"dependencies\": {\n+    \"axios\": \"0.19.2\",\n+    \"axios-cookiejar-support\": \"1.0.0\",\n+    \"tough-cookie\": \"4.0.0\",\n+    \"typescript-is\": \"0.16.0\"\n+  },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9d035ccb3a6a0932216e6605fd107412322dac8"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4Njk1OQ==", "bodyText": "ESM build is great! \ud83d\udc4d\nA lot of build tools look for a main entry in package.json which usually CJS format.\nIt might be worth having both formats?\nhttps://babeljs.io/blog/2018/06/26/on-consuming-and-publishing-es2015+-packages talks a bit more about the formats.", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r424086959", "createdAt": "2020-05-12T23:17:10Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/rollup.config.js", "diffHunk": "@@ -0,0 +1,20 @@\n+import commonjs from '@rollup/plugin-commonjs';\n+import json from '@rollup/plugin-json';\n+import resolve from '@rollup/plugin-node-resolve';\n+import ttypescript from 'ttypescript';\n+import typescript from '@rollup/plugin-typescript';\n+\n+export default {\n+  input: 'src/index.ts',\n+  output: {\n+    dir: 'dist',\n+    format: 'es',\n+    sourcemap: true,\n+  },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9d035ccb3a6a0932216e6605fd107412322dac8"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4NzIyMg==", "bodyText": "newline at end of file\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              );\n          \n          \n            \n              );", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r424087222", "createdAt": "2020-05-12T23:17:58Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/src/LegacyContent.ts", "diffHunk": "@@ -0,0 +1,43 @@\n+import { GET } from './AxiosInstance';\n+import { is } from 'typescript-is';\n+\n+export interface ItemCounts {\n+  tasks: number;\n+  notifications: number;\n+}\n+\n+export interface MenuItem {\n+  title: string;\n+  href?: string;\n+  systemIcon?: string;\n+  route?: string;\n+  iconUrl?: string;\n+  newWindow: boolean;\n+}\n+\n+export interface CurrentUserDetails {\n+  id: string;\n+  username: string;\n+  firstName: string;\n+  lastName: string;\n+  emailAddress?: string;\n+  accessibilityMode: boolean;\n+  autoLoggedIn: boolean;\n+  guest: boolean;\n+  prefsEditable: boolean;\n+  menuGroups: Array<Array<MenuItem>>;\n+  counts?: ItemCounts;\n+}\n+\n+/**\n+ * Retrieve details of the current user (based on JSESSIONID) including details for the UI such\n+ * as menu structure and task and notification counts.\n+ *\n+ * @param apiBasePath Base URI to the oEQ institution and API\n+ */\n+export const getCurrentUserDetails = (\n+  apiBasePath: string\n+): Promise<CurrentUserDetails> =>\n+  GET<CurrentUserDetails>(apiBasePath + '/content/currentuser', (data) =>\n+    is<CurrentUserDetails>(data)\n+  );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9d035ccb3a6a0932216e6605fd107412322dac8"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4NzQ0Mg==", "bodyText": "Pretty slick that it can directly use the typing, nice! \ud83d\udc4d", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r424087442", "createdAt": "2020-05-12T23:18:43Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/src/LegacyContent.ts", "diffHunk": "@@ -0,0 +1,43 @@\n+import { GET } from './AxiosInstance';\n+import { is } from 'typescript-is';\n+\n+export interface ItemCounts {\n+  tasks: number;\n+  notifications: number;\n+}\n+\n+export interface MenuItem {\n+  title: string;\n+  href?: string;\n+  systemIcon?: string;\n+  route?: string;\n+  iconUrl?: string;\n+  newWindow: boolean;\n+}\n+\n+export interface CurrentUserDetails {\n+  id: string;\n+  username: string;\n+  firstName: string;\n+  lastName: string;\n+  emailAddress?: string;\n+  accessibilityMode: boolean;\n+  autoLoggedIn: boolean;\n+  guest: boolean;\n+  prefsEditable: boolean;\n+  menuGroups: Array<Array<MenuItem>>;\n+  counts?: ItemCounts;\n+}\n+\n+/**\n+ * Retrieve details of the current user (based on JSESSIONID) including details for the UI such\n+ * as menu structure and task and notification counts.\n+ *\n+ * @param apiBasePath Base URI to the oEQ institution and API\n+ */\n+export const getCurrentUserDetails = (\n+  apiBasePath: string\n+): Promise<CurrentUserDetails> =>\n+  GET<CurrentUserDetails>(apiBasePath + '/content/currentuser', (data) =>\n+    is<CurrentUserDetails>(data)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9d035ccb3a6a0932216e6605fd107412322dac8"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4ODI3NQ==", "bodyText": "\ud83e\udd14 do we want to embed the runtime at the library level?\nThis would get included in the bundle right?\nIf there is ever another library added, which also needs a regenerator runtime, would that mean each bundle has it's own copy of the runtime?\nWould that be the expected outcome?", "url": "https://github.com/openequella/openEQUELLA/pull/1722#discussion_r424088275", "createdAt": "2020-05-12T23:21:20Z", "author": {"login": "ChristianMurphy"}, "path": "oeq-ts-rest-api/src/index.ts", "diffHunk": "@@ -0,0 +1,7 @@\n+// Needed to stop error of: \"regeneratorRuntime is not defined\"\n+import \"regenerator-runtime/runtime.js\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9d035ccb3a6a0932216e6605fd107412322dac8"}, "originalPosition": 2}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff4c0b9a9442f7edd3edbee14fb5d1f73b48ecaa", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/ff4c0b9a9442f7edd3edbee14fb5d1f73b48ecaa", "committedDate": "2020-05-13T01:19:37Z", "message": "oeq-ts-rest-api: Also output CommonJS module\n\nThe standard is that `main` in `package.json` is point to a CommonJS\npackage, yet it was pointing the ES module. Most tooling still relies on\nCommonJS modules, and indeed without this Jest was breaking in core oEQ."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85c23daccfa5963030a9e647e23ef94d915e7532", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/85c23daccfa5963030a9e647e23ef94d915e7532", "committedDate": "2020-05-13T01:24:06Z", "message": "Add newline to oeq-ts-rest-api/src/LegacyContent.ts\r\n\r\nFeedback from #1722\n\nCo-authored-by: Christian Murphy <christian.murphy.42@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "338bb91737ae0f06d2a450442a9d72b20431005c", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/338bb91737ae0f06d2a450442a9d72b20431005c", "committedDate": "2020-05-13T02:07:51Z", "message": "Remove unnecessary regenerator-runtime/runtime.js import\n\nLooks like the need for this was a side effect of not building a\nCommonJS format module and having main pointing to it."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44d960ce57d5a62f7bc5d78211859bcf0e097a8b", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/44d960ce57d5a62f7bc5d78211859bcf0e097a8b", "committedDate": "2020-05-13T02:13:22Z", "message": "Update core/js/package-lock.json to match REST Client module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a7db3b8eb1a8137b49584caf167a94d9dd3e78f", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/2a7db3b8eb1a8137b49584caf167a94d9dd3e78f", "committedDate": "2020-05-13T02:20:34Z", "message": "oeq-ts-rest-api: Remove Rollup JSON plugin\n\nNo longer required."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b27a820edfd1ffdffacaa1fd895417ad03c2594e", "author": {"user": {"login": "edalex-ian", "name": null}}, "url": "https://github.com/openequella/openEQUELLA/commit/b27a820edfd1ffdffacaa1fd895417ad03c2594e", "committedDate": "2020-05-13T02:29:45Z", "message": "oeq-ts-rest-api: Remove Rollup CommonJS plugin\n\nNo longer required."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNTc0OTk3", "url": "https://github.com/openequella/openEQUELLA/pull/1722#pullrequestreview-410574997", "createdAt": "2020-05-13T04:13:00Z", "commit": {"oid": "b27a820edfd1ffdffacaa1fd895417ad03c2594e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNTg1NjA4", "url": "https://github.com/openequella/openEQUELLA/pull/1722#pullrequestreview-410585608", "createdAt": "2020-05-13T04:52:36Z", "commit": {"oid": "b27a820edfd1ffdffacaa1fd895417ad03c2594e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 116, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}