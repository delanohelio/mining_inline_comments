{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5ODY1NDg5", "number": 797, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMzo1NDoxNlrOEsDtYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQwMDo0NzoyNlrOEsVKeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NjMzNTY5OnYy", "diffSide": "RIGHT", "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/commit/KafkaThrottledLatestProcessedCommit.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMzo1NDoxNlrOHfKtUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNDo0NTozOFrOHfgWoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ0MzM0NQ==", "bodyText": "This could be a problem as OffsetStore is not thread safe and was designed to be called within the context thread.\nIn partitionsRevoked we call clearLesserSequentiallyProcessedOffsetsAndReturnLargestOffset which mutates the OffsetStore. Is it not possible to make a blocking call in the context thread from the poll thread?", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/797#discussion_r502443345", "createdAt": "2020-10-09T13:54:16Z", "author": {"login": "pcasaes"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/commit/KafkaThrottledLatestProcessedCommit.java", "diffHunk": "@@ -38,7 +38,7 @@\n \n     private static final Map<String, Map<Integer, TopicPartition>> TOPIC_PARTITIONS_CACHE = new ConcurrentHashMap<>();\n \n-    private final Map<TopicPartition, OffsetStore> offsetStores = new HashMap<>();\n+    private final Map<TopicPartition, OffsetStore> offsetStores = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2103f9421752d23db3f9302e7ea058d4007dbeb1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ2NzMzNg==", "bodyText": "I ran the tests locally and they passed. What I did was to revert the offsetStores map back to a HashMap and ran the relevant parts of partitionsRevoked within the context. I'll post my changes later.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/797#discussion_r502467336", "createdAt": "2020-10-09T14:29:31Z", "author": {"login": "pcasaes"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/commit/KafkaThrottledLatestProcessedCommit.java", "diffHunk": "@@ -38,7 +38,7 @@\n \n     private static final Map<String, Map<Integer, TopicPartition>> TOPIC_PARTITIONS_CACHE = new ConcurrentHashMap<>();\n \n-    private final Map<TopicPartition, OffsetStore> offsetStores = new HashMap<>();\n+    private final Map<TopicPartition, OffsetStore> offsetStores = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ0MzM0NQ=="}, "originalCommit": {"oid": "2103f9421752d23db3f9302e7ea058d4007dbeb1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ3ODA5NA==", "bodyText": "no partitionRevoked must run completely from the polling thread. It cannot run from the event loop. When the method returns, everything must have been completed or failed.\nOne thing I was thinking is to block the polling thread and use a countdown latch decreased from the event loop. However, it can introduce deadlocks.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/797#discussion_r502478094", "createdAt": "2020-10-09T14:44:33Z", "author": {"login": "cescoffier"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/commit/KafkaThrottledLatestProcessedCommit.java", "diffHunk": "@@ -38,7 +38,7 @@\n \n     private static final Map<String, Map<Integer, TopicPartition>> TOPIC_PARTITIONS_CACHE = new ConcurrentHashMap<>();\n \n-    private final Map<TopicPartition, OffsetStore> offsetStores = new HashMap<>();\n+    private final Map<TopicPartition, OffsetStore> offsetStores = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ0MzM0NQ=="}, "originalCommit": {"oid": "2103f9421752d23db3f9302e7ea058d4007dbeb1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUxOTAxNw==", "bodyText": "I just used a FutureTask to manipulate the OffsetStore and fed it into the context and waited for a response on the poll thread. Seemed to work. Going to do some more tests.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/797#discussion_r502519017", "createdAt": "2020-10-09T15:44:04Z", "author": {"login": "pcasaes"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/commit/KafkaThrottledLatestProcessedCommit.java", "diffHunk": "@@ -38,7 +38,7 @@\n \n     private static final Map<String, Map<Integer, TopicPartition>> TOPIC_PARTITIONS_CACHE = new ConcurrentHashMap<>();\n \n-    private final Map<TopicPartition, OffsetStore> offsetStores = new HashMap<>();\n+    private final Map<TopicPartition, OffsetStore> offsetStores = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ0MzM0NQ=="}, "originalCommit": {"oid": "2103f9421752d23db3f9302e7ea058d4007dbeb1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4MTk1Nw==", "bodyText": "Here's what I tested\npcasaes@3db0166\nNotice there are a couple of FIXMEs.\nI did the run the tests as well as manual testing. Worked well.\nI did pickup a small bug which I'll open a separate PR for. During revoke we should be committing the offsets of those revoked partitions. There's a not contains which should be contains.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/797#discussion_r502581957", "createdAt": "2020-10-09T17:42:43Z", "author": {"login": "pcasaes"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/commit/KafkaThrottledLatestProcessedCommit.java", "diffHunk": "@@ -38,7 +38,7 @@\n \n     private static final Map<String, Map<Integer, TopicPartition>> TOPIC_PARTITIONS_CACHE = new ConcurrentHashMap<>();\n \n-    private final Map<TopicPartition, OffsetStore> offsetStores = new HashMap<>();\n+    private final Map<TopicPartition, OffsetStore> offsetStores = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ0MzM0NQ=="}, "originalCommit": {"oid": "2103f9421752d23db3f9302e7ea058d4007dbeb1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc5Nzk4NA==", "bodyText": "I've rebased the branch and updated to fit the synchronization protocol.\nThe FutureTask is a great idea!", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/797#discussion_r502797984", "createdAt": "2020-10-10T14:45:38Z", "author": {"login": "cescoffier"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/commit/KafkaThrottledLatestProcessedCommit.java", "diffHunk": "@@ -38,7 +38,7 @@\n \n     private static final Map<String, Map<Integer, TopicPartition>> TOPIC_PARTITIONS_CACHE = new ConcurrentHashMap<>();\n \n-    private final Map<TopicPartition, OffsetStore> offsetStores = new HashMap<>();\n+    private final Map<TopicPartition, OffsetStore> offsetStores = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ0MzM0NQ=="}, "originalCommit": {"oid": "2103f9421752d23db3f9302e7ea058d4007dbeb1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTE5NTQ2OnYy", "diffSide": "RIGHT", "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/commit/ContextHolder.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQwMDo0NzoyNlrOHfjeaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQwNzo1ODo0N1rOHflamA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg0OTEyOA==", "bodyText": "Are we sure about throwing a WakeupException? It will stop the poll thread dead cold. I used it without giving it much thought on my tests. The other option is to wrap it in a CompletionException along with the others (besides marking the current thread as interrupted).\nDealing with InterruptedException is always tricky because you never know where they can come from.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/797#discussion_r502849128", "createdAt": "2020-10-11T00:47:26Z", "author": {"login": "pcasaes"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/commit/ContextHolder.java", "diffHunk": "@@ -45,4 +50,18 @@ public void runOnContext(Runnable runnable) {\n         }\n     }\n \n+    public <T> T runOnContextAndAwait(Callable<T> action) {\n+        FutureTask<T> task = new FutureTask<>(action);\n+        runOnContext(task);\n+\n+        try {\n+            return task.get(timeout, TimeUnit.MILLISECONDS);\n+        } catch (InterruptedException e) {\n+            Thread.currentThread().interrupt();\n+            throw new WakeupException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2c8e3dcae6c957ccc63fcb4fecc85dd9487e683"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3OTgwNQ==", "bodyText": "So, I checked the Apache Kafka client, and it's how it's called:\n private Exception invokePartitionsAssigned(final Set<TopicPartition> assignedPartitions) {\n        log.info(\"Adding newly assigned partitions: {}\", Utils.join(assignedPartitions, \", \"));\n\n        ConsumerRebalanceListener listener = subscriptions.rebalanceListener();\n        try {\n            final long startMs = time.milliseconds();\n            listener.onPartitionsAssigned(assignedPartitions);\n            sensors.assignCallbackSensor.record(time.milliseconds() - startMs);\n        } catch (WakeupException | InterruptException e) {\n            throw e;\n        } catch (Exception e) {\n            log.error(\"User provided listener {} failed on invocation of onPartitionsAssigned for partitions {}\",\n                listener.getClass().getName(), assignedPartitions, e);\n            return e;\n        }\n\n        return null;\n    }\nThe CompletionException we are throwing would be handled by the second catch block and denotes a problem in the listener. The listener is the source of the issue. So, this case is fine.\nAs you mentioned, an interruption can come from anywhere, and it should not be handled by the second block, but by the first one. I believe we should throw an InterruptException (note that it's a Kafka-specific unchecked variant of InterruptedException) and let the polling thread handle the interruption.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/797#discussion_r502879805", "createdAt": "2020-10-11T07:48:01Z", "author": {"login": "cescoffier"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/commit/ContextHolder.java", "diffHunk": "@@ -45,4 +50,18 @@ public void runOnContext(Runnable runnable) {\n         }\n     }\n \n+    public <T> T runOnContextAndAwait(Callable<T> action) {\n+        FutureTask<T> task = new FutureTask<>(action);\n+        runOnContext(task);\n+\n+        try {\n+            return task.get(timeout, TimeUnit.MILLISECONDS);\n+        } catch (InterruptedException e) {\n+            Thread.currentThread().interrupt();\n+            throw new WakeupException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg0OTEyOA=="}, "originalCommit": {"oid": "d2c8e3dcae6c957ccc63fcb4fecc85dd9487e683"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg4MDkyMA==", "bodyText": "Updated the code.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/797#discussion_r502880920", "createdAt": "2020-10-11T07:58:47Z", "author": {"login": "cescoffier"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/commit/ContextHolder.java", "diffHunk": "@@ -45,4 +50,18 @@ public void runOnContext(Runnable runnable) {\n         }\n     }\n \n+    public <T> T runOnContextAndAwait(Callable<T> action) {\n+        FutureTask<T> task = new FutureTask<>(action);\n+        runOnContext(task);\n+\n+        try {\n+            return task.get(timeout, TimeUnit.MILLISECONDS);\n+        } catch (InterruptedException e) {\n+            Thread.currentThread().interrupt();\n+            throw new WakeupException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg0OTEyOA=="}, "originalCommit": {"oid": "d2c8e3dcae6c957ccc63fcb4fecc85dd9487e683"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 60, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}