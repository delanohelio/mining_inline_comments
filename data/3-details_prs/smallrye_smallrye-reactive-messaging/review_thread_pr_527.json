{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwMTE2NDcx", "number": 527, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMzozMTozMFrOD3MjUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMzozNDoyMVrOD3MovQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MjAzOTIxOnYy", "diffSide": "RIGHT", "path": "smallrye-reactive-messaging-amqp/src/main/java/io/smallrye/reactive/messaging/amqp/AmqpConnector.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMzozMTozMFrOGNUJjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMzo0NzoxNVrOGNU4gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYxNDc5Nw==", "bodyText": "Any chance you could avoid the lambda? It doesn't bring much here so better not pay for its cost.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/527#discussion_r416614797", "createdAt": "2020-04-28T13:31:30Z", "author": {"login": "gsmet"}, "path": "smallrye-reactive-messaging-amqp/src/main/java/io/smallrye/reactive/messaging/amqp/AmqpConnector.java", "diffHunk": "@@ -345,19 +345,32 @@ private String getActualAddress(Message<?> message, io.vertx.mutiny.amqp.AmqpMes\n                     .contentType(JSON_CONTENT_TYPE);\n         }\n \n-        builder.address(metadata.map(OutgoingAmqpMetadata::getAddress).orElse(null));\n-        builder.applicationProperties(metadata.map(OutgoingAmqpMetadata::getProperties).orElseGet(JsonObject::new));\n-\n-        builder.contentEncoding(metadata.map(OutgoingAmqpMetadata::getContentEncoding).orElse(null));\n-        builder.contentType(metadata.map(OutgoingAmqpMetadata::getContentType).orElse(null));\n-        builder.correlationId(metadata.map(OutgoingAmqpMetadata::getCorrelationId).orElse(null));\n-        builder.groupId(metadata.map(OutgoingAmqpMetadata::getGroupId).orElse(null));\n-        builder.id(metadata.map(OutgoingAmqpMetadata::getId).orElse(null));\n-        int priority = metadata.map(OutgoingAmqpMetadata::getPriority).orElse(-1);\n-        if (priority >= 0) {\n-            builder.priority((short) priority);\n-        }\n-        builder.subject(metadata.map(OutgoingAmqpMetadata::getSubject).orElse(null));\n+        metadata.ifPresent(meta -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0152602d22f35d8ffb2c4a06e087b888d64b4e5c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYxOTE3OQ==", "bodyText": "Reactive MEssaging and Reactive is general uses lots of lambdas. I can remove this one, but there will be tons of them around.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/527#discussion_r416619179", "createdAt": "2020-04-28T13:37:17Z", "author": {"login": "cescoffier"}, "path": "smallrye-reactive-messaging-amqp/src/main/java/io/smallrye/reactive/messaging/amqp/AmqpConnector.java", "diffHunk": "@@ -345,19 +345,32 @@ private String getActualAddress(Message<?> message, io.vertx.mutiny.amqp.AmqpMes\n                     .contentType(JSON_CONTENT_TYPE);\n         }\n \n-        builder.address(metadata.map(OutgoingAmqpMetadata::getAddress).orElse(null));\n-        builder.applicationProperties(metadata.map(OutgoingAmqpMetadata::getProperties).orElseGet(JsonObject::new));\n-\n-        builder.contentEncoding(metadata.map(OutgoingAmqpMetadata::getContentEncoding).orElse(null));\n-        builder.contentType(metadata.map(OutgoingAmqpMetadata::getContentType).orElse(null));\n-        builder.correlationId(metadata.map(OutgoingAmqpMetadata::getCorrelationId).orElse(null));\n-        builder.groupId(metadata.map(OutgoingAmqpMetadata::getGroupId).orElse(null));\n-        builder.id(metadata.map(OutgoingAmqpMetadata::getId).orElse(null));\n-        int priority = metadata.map(OutgoingAmqpMetadata::getPriority).orElse(-1);\n-        if (priority >= 0) {\n-            builder.priority((short) priority);\n-        }\n-        builder.subject(metadata.map(OutgoingAmqpMetadata::getSubject).orElse(null));\n+        metadata.ifPresent(meta -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYxNDc5Nw=="}, "originalCommit": {"oid": "0152602d22f35d8ffb2c4a06e087b888d64b4e5c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYyMzA0Mg==", "bodyText": "Done.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/527#discussion_r416623042", "createdAt": "2020-04-28T13:42:18Z", "author": {"login": "cescoffier"}, "path": "smallrye-reactive-messaging-amqp/src/main/java/io/smallrye/reactive/messaging/amqp/AmqpConnector.java", "diffHunk": "@@ -345,19 +345,32 @@ private String getActualAddress(Message<?> message, io.vertx.mutiny.amqp.AmqpMes\n                     .contentType(JSON_CONTENT_TYPE);\n         }\n \n-        builder.address(metadata.map(OutgoingAmqpMetadata::getAddress).orElse(null));\n-        builder.applicationProperties(metadata.map(OutgoingAmqpMetadata::getProperties).orElseGet(JsonObject::new));\n-\n-        builder.contentEncoding(metadata.map(OutgoingAmqpMetadata::getContentEncoding).orElse(null));\n-        builder.contentType(metadata.map(OutgoingAmqpMetadata::getContentType).orElse(null));\n-        builder.correlationId(metadata.map(OutgoingAmqpMetadata::getCorrelationId).orElse(null));\n-        builder.groupId(metadata.map(OutgoingAmqpMetadata::getGroupId).orElse(null));\n-        builder.id(metadata.map(OutgoingAmqpMetadata::getId).orElse(null));\n-        int priority = metadata.map(OutgoingAmqpMetadata::getPriority).orElse(-1);\n-        if (priority >= 0) {\n-            builder.priority((short) priority);\n-        }\n-        builder.subject(metadata.map(OutgoingAmqpMetadata::getSubject).orElse(null));\n+        metadata.ifPresent(meta -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYxNDc5Nw=="}, "originalCommit": {"oid": "0152602d22f35d8ffb2c4a06e087b888d64b4e5c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYyNjgxOA==", "bodyText": "Yeah, maybe it's just me but I fail to see how a lambda is better than a simple if (optional.isPresent()).\nI can see how it gets useful in more complex cases but I would try to avoid them for the simple ones.\nAnyway, ignore me, I'm just ranting :).", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/527#discussion_r416626818", "createdAt": "2020-04-28T13:47:15Z", "author": {"login": "gsmet"}, "path": "smallrye-reactive-messaging-amqp/src/main/java/io/smallrye/reactive/messaging/amqp/AmqpConnector.java", "diffHunk": "@@ -345,19 +345,32 @@ private String getActualAddress(Message<?> message, io.vertx.mutiny.amqp.AmqpMes\n                     .contentType(JSON_CONTENT_TYPE);\n         }\n \n-        builder.address(metadata.map(OutgoingAmqpMetadata::getAddress).orElse(null));\n-        builder.applicationProperties(metadata.map(OutgoingAmqpMetadata::getProperties).orElseGet(JsonObject::new));\n-\n-        builder.contentEncoding(metadata.map(OutgoingAmqpMetadata::getContentEncoding).orElse(null));\n-        builder.contentType(metadata.map(OutgoingAmqpMetadata::getContentType).orElse(null));\n-        builder.correlationId(metadata.map(OutgoingAmqpMetadata::getCorrelationId).orElse(null));\n-        builder.groupId(metadata.map(OutgoingAmqpMetadata::getGroupId).orElse(null));\n-        builder.id(metadata.map(OutgoingAmqpMetadata::getId).orElse(null));\n-        int priority = metadata.map(OutgoingAmqpMetadata::getPriority).orElse(-1);\n-        if (priority >= 0) {\n-            builder.priority((short) priority);\n-        }\n-        builder.subject(metadata.map(OutgoingAmqpMetadata::getSubject).orElse(null));\n+        metadata.ifPresent(meta -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYxNDc5Nw=="}, "originalCommit": {"oid": "0152602d22f35d8ffb2c4a06e087b888d64b4e5c"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MjA1MzA5OnYy", "diffSide": "RIGHT", "path": "smallrye-reactive-messaging-amqp/src/main/java/io/smallrye/reactive/messaging/amqp/AmqpConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMzozNDoyMVrOGNUR_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMzo0MjowOVrOGNUpVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYxNjk1Nw==", "bodyText": "Is it missing builder.groupId?", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/527#discussion_r416616957", "createdAt": "2020-04-28T13:34:21Z", "author": {"login": "kenfinnigan"}, "path": "smallrye-reactive-messaging-amqp/src/main/java/io/smallrye/reactive/messaging/amqp/AmqpConnector.java", "diffHunk": "@@ -345,19 +345,32 @@ private String getActualAddress(Message<?> message, io.vertx.mutiny.amqp.AmqpMes\n                     .contentType(JSON_CONTENT_TYPE);\n         }\n \n-        builder.address(metadata.map(OutgoingAmqpMetadata::getAddress).orElse(null));\n-        builder.applicationProperties(metadata.map(OutgoingAmqpMetadata::getProperties).orElseGet(JsonObject::new));\n-\n-        builder.contentEncoding(metadata.map(OutgoingAmqpMetadata::getContentEncoding).orElse(null));\n-        builder.contentType(metadata.map(OutgoingAmqpMetadata::getContentType).orElse(null));\n-        builder.correlationId(metadata.map(OutgoingAmqpMetadata::getCorrelationId).orElse(null));\n-        builder.groupId(metadata.map(OutgoingAmqpMetadata::getGroupId).orElse(null));\n-        builder.id(metadata.map(OutgoingAmqpMetadata::getId).orElse(null));\n-        int priority = metadata.map(OutgoingAmqpMetadata::getPriority).orElse(-1);\n-        if (priority >= 0) {\n-            builder.priority((short) priority);\n-        }\n-        builder.subject(metadata.map(OutgoingAmqpMetadata::getSubject).orElse(null));\n+        metadata.ifPresent(meta -> {\n+            if (meta.getAddress() != null) {\n+                builder.address(meta.getAddress());\n+            }\n+            if (meta.getProperties() != null && !meta.getProperties().isEmpty()) {\n+                builder.applicationProperties(meta.getProperties());\n+            }\n+            if (meta.getContentEncoding() != null) {\n+                builder.contentEncoding(meta.getContentEncoding());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0152602d22f35d8ffb2c4a06e087b888d64b4e5c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYyMjkzNA==", "bodyText": "Fixed.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/527#discussion_r416622934", "createdAt": "2020-04-28T13:42:09Z", "author": {"login": "cescoffier"}, "path": "smallrye-reactive-messaging-amqp/src/main/java/io/smallrye/reactive/messaging/amqp/AmqpConnector.java", "diffHunk": "@@ -345,19 +345,32 @@ private String getActualAddress(Message<?> message, io.vertx.mutiny.amqp.AmqpMes\n                     .contentType(JSON_CONTENT_TYPE);\n         }\n \n-        builder.address(metadata.map(OutgoingAmqpMetadata::getAddress).orElse(null));\n-        builder.applicationProperties(metadata.map(OutgoingAmqpMetadata::getProperties).orElseGet(JsonObject::new));\n-\n-        builder.contentEncoding(metadata.map(OutgoingAmqpMetadata::getContentEncoding).orElse(null));\n-        builder.contentType(metadata.map(OutgoingAmqpMetadata::getContentType).orElse(null));\n-        builder.correlationId(metadata.map(OutgoingAmqpMetadata::getCorrelationId).orElse(null));\n-        builder.groupId(metadata.map(OutgoingAmqpMetadata::getGroupId).orElse(null));\n-        builder.id(metadata.map(OutgoingAmqpMetadata::getId).orElse(null));\n-        int priority = metadata.map(OutgoingAmqpMetadata::getPriority).orElse(-1);\n-        if (priority >= 0) {\n-            builder.priority((short) priority);\n-        }\n-        builder.subject(metadata.map(OutgoingAmqpMetadata::getSubject).orElse(null));\n+        metadata.ifPresent(meta -> {\n+            if (meta.getAddress() != null) {\n+                builder.address(meta.getAddress());\n+            }\n+            if (meta.getProperties() != null && !meta.getProperties().isEmpty()) {\n+                builder.applicationProperties(meta.getProperties());\n+            }\n+            if (meta.getContentEncoding() != null) {\n+                builder.contentEncoding(meta.getContentEncoding());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYxNjk1Nw=="}, "originalCommit": {"oid": "0152602d22f35d8ffb2c4a06e087b888d64b4e5c"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 105, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}