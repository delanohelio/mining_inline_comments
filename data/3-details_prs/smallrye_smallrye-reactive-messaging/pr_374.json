{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyNTE2MDEx", "number": 374, "title": "Allow delayed subscription to channel handled by emitters", "bodyText": "This is useful when the user wants to inject the Publisher attached to the emitter and managed the subscription directly.\nSo, the emitter must not checked whether it got a subscription during the initialization, but should thrown an IllegalStateException when an interaction is attempted (send, complete, fail...).\nAlso this PR improves the very bad error messages (like the unfamous 'stream is not connected')", "createdAt": "2020-01-14T08:53:08Z", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/374", "merged": true, "mergeCommit": {"oid": "d93421ba53badf619a902a6954701a7f6d0b10b3"}, "closed": true, "closedAt": "2020-01-20T08:16:36Z", "author": {"login": "cescoffier"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6M_IMgH2gAyMzYyNTE2MDExOjRlMGE4YTMyZTRiMjk5YmE1OTE5Mjc0NjYwNTZiOGUyMTQ1ZTI3YmM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb7M2DrAH2gAyMzYyNTE2MDExOjQ1NTA2OWY2MGMxZWY5NjgzZTBkY2Y0ZDhmYjBiY2Y1OTNlNDk1MTQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4e0a8a32e4b299ba591927466056b8e2145e27bc", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/4e0a8a32e4b299ba591927466056b8e2145e27bc", "committedDate": "2020-01-14T08:50:21Z", "message": "allow delayed subscription to channel handled by emitters"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMjIxOTU4", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/374#pullrequestreview-343221958", "createdAt": "2020-01-15T13:37:33Z", "commit": {"oid": "4e0a8a32e4b299ba591927466056b8e2145e27bc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxMzozNzozM1rOFd4d6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxMzozODoyMVrOFd4fQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg3ODE4NQ==", "bodyText": "\"No one\" or \"Nothing\"?", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/374#discussion_r366878185", "createdAt": "2020-01-15T13:37:33Z", "author": {"login": "kenfinnigan"}, "path": "smallrye-reactive-messaging-provider/src/main/java/io/smallrye/reactive/messaging/extension/EmitterImpl.java", "diffHunk": "@@ -123,33 +124,34 @@ boolean isConnected() {\n         if (msg == null) {\n             throw new IllegalArgumentException(\"`null` is not a valid value\");\n         }\n-        FlowableEmitter<Message<? extends T>> emitter = verify(internal);\n+        FlowableEmitter<Message<? extends T>> emitter = verify(internal, name);\n         emitter.onNext(msg);\n \n     }\n \n-    static <T> FlowableEmitter<Message<? extends T>> verify(AtomicReference<FlowableEmitter<Message<? extends T>>> reference) {\n+    static <T> FlowableEmitter<Message<? extends T>> verify(AtomicReference<FlowableEmitter<Message<? extends T>>> reference,\n+            String name) {\n         FlowableEmitter<Message<? extends T>> emitter = reference.get();\n         if (emitter == null) {\n-            throw new IllegalStateException(\"Stream not yet connected\");\n+            throw new IllegalStateException(\"No one subscribed to channel \" + name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e0a8a32e4b299ba591927466056b8e2145e27bc"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg3ODUyOQ==", "bodyText": "Warning or just a trace?\nHow important is it for developers/debugging to know nothing is subscribed on creation?", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/374#discussion_r366878529", "createdAt": "2020-01-15T13:38:21Z", "author": {"login": "kenfinnigan"}, "path": "smallrye-reactive-messaging-provider/src/main/java/io/smallrye/reactive/messaging/extension/ReactiveMessagingExtension.java", "diffHunk": "@@ -110,9 +110,11 @@ void afterDeploymentValidation(@Observes AfterDeploymentValidation done, BeanMan\n             for (InjectionPoint ip : emitterInjectionPoints) {\n                 String name = ChannelProducer.getChannelName(ip);\n                 EmitterImpl<?> emitter = (EmitterImpl<?>) registry.getEmitter(name);\n-                if (!emitter.isConnected()) {\n-                    done.addDeploymentProblem(\n-                            new DeploymentException(\"No channel found for name: \" + name + \", injection point: \" + ip));\n+                if (!emitter.isSubscribed()) {\n+                    // Subscription may happen later, just print a warning.\n+                    // Attempting an emission without being subscribed would result in an error.\n+                    LOGGER.warn(\"No subscriber for channel {}  attached to the emitter {}.{}\", name,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e0a8a32e4b299ba591927466056b8e2145e27bc"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMjM5NjQx", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/374#pullrequestreview-343239641", "createdAt": "2020-01-15T14:05:01Z", "commit": {"oid": "4e0a8a32e4b299ba591927466056b8e2145e27bc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNDowNTowMlrOFd5Sww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNDowNTowMlrOFd5Sww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg5MTcxNQ==", "bodyText": "I see what you meant. This will impact spec and tck change because the validation is at runtime instead of startup time.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/374#discussion_r366891715", "createdAt": "2020-01-15T14:05:02Z", "author": {"login": "Emily-Jiang"}, "path": "smallrye-reactive-messaging-provider/src/test/java/io/smallrye/reactive/messaging/inject/EmitterInjectionTest.java", "diffHunk": "@@ -137,14 +141,16 @@ public void testWithNull() {\n         assertThat(bean.hasCaughtNullMessage()).isTrue();\n     }\n \n-    @Test(expected = DeploymentException.class)\n+    @Test(expected = IllegalStateException.class)\n     public void testWithMissingStream() {\n-        installInitializeAndGet(BeanWithMissingStream.class);\n+        // The error is only thrown when a message is emitted as the subscription can be delayed.\n+        installInitializeAndGet(BeanWithMissingStream.class).emitter().send(Message.of(\"foo\"));\n     }\n \n-    @Test(expected = DeploymentException.class)\n+    @Test(expected = IllegalStateException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e0a8a32e4b299ba591927466056b8e2145e27bc"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "455069f60c1ef9683e0dcf4d8fb0bcf593e49514", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/455069f60c1ef9683e0dcf4d8fb0bcf593e49514", "committedDate": "2020-01-17T11:14:22Z", "message": "improve error message"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2222, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}