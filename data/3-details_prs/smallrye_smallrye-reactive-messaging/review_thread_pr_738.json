{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2ODAzMjk5", "number": 738, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxOTowNDozN1rOEjRnsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxOTowNDozN1rOEjRnsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDI0MzA2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/smallrye/reactive/messaging/MessageConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxOTowNDozN1rOHRivXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODo1MjoxMlrOHR3k_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE1NzAyMg==", "bodyText": "accept is quite overloaded.\nMaybe canConvert? or isConvertible? or handles?", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/738#discussion_r488157022", "createdAt": "2020-09-14T19:04:37Z", "author": {"login": "kenfinnigan"}, "path": "api/src/main/java/io/smallrye/reactive/messaging/MessageConverter.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package io.smallrye.reactive.messaging;\n+\n+import java.lang.reflect.Type;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+\n+/**\n+ * Converter transforming {@code Message<A>} into {@code Message<B>}.\n+ * To register a converter, expose a, generally {@code ApplicationScoped} bean, implementing this interface.\n+ */\n+public interface MessageConverter {\n+\n+    /**\n+     * Checks whether this instance of converter can convert the given message {@code in} into a {@code Message<T>} with\n+     * {@code T} being the type represented by {@code target}.\n+     *\n+     * @param in the input message, not {@code null}\n+     * @param target the target type, generally the type ingested by a method\n+     * @return {@code true} if the conversion is possible, {@code false} otherwise.\n+     */\n+    boolean accept(Message<?> in, Type target);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a3ed332d9e1b07013cc4931d1c7c1e818d479c"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ5ODQzMA==", "bodyText": "Switched to canConvert.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/738#discussion_r488498430", "createdAt": "2020-09-15T08:52:12Z", "author": {"login": "cescoffier"}, "path": "api/src/main/java/io/smallrye/reactive/messaging/MessageConverter.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package io.smallrye.reactive.messaging;\n+\n+import java.lang.reflect.Type;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+\n+/**\n+ * Converter transforming {@code Message<A>} into {@code Message<B>}.\n+ * To register a converter, expose a, generally {@code ApplicationScoped} bean, implementing this interface.\n+ */\n+public interface MessageConverter {\n+\n+    /**\n+     * Checks whether this instance of converter can convert the given message {@code in} into a {@code Message<T>} with\n+     * {@code T} being the type represented by {@code target}.\n+     *\n+     * @param in the input message, not {@code null}\n+     * @param target the target type, generally the type ingested by a method\n+     * @return {@code true} if the conversion is possible, {@code false} otherwise.\n+     */\n+    boolean accept(Message<?> in, Type target);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE1NzAyMg=="}, "originalCommit": {"oid": "41a3ed332d9e1b07013cc4931d1c7c1e818d479c"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 31, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}