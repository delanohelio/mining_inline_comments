{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzNjgwOTI5", "number": 639, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNTo1NDo0M1rOELIbfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNTo1NjowMlrOELIckQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTA3OTAzOnYy", "diffSide": "RIGHT", "path": "smallrye-reactive-messaging-provider/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNTo1NDo0M1rOGskhzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMzowNDowNlrOGtWXNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM4OTAwNQ==", "bodyText": "Should we declare this version in the root pom? Maybe even the dependency in the dependency management?", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/639#discussion_r449389005", "createdAt": "2020-07-03T05:54:43Z", "author": {"login": "cescoffier"}, "path": "smallrye-reactive-messaging-provider/pom.xml", "diffHunk": "@@ -53,6 +53,18 @@\n       <scope>test</scope>\n     </dependency>\n \n+    <dependency>\n+      <groupId>io.smallrye.testing</groupId>\n+      <artifactId>smallrye-testing-utilities</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.jboss.logmanager</groupId>\n+      <artifactId>jboss-logmanager</artifactId>\n+      <version>2.1.17.Final</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "427675d7b44f3b47db21d5401cd7c5aa68ca8af2"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIwNTQ5Mw==", "bodyText": "Done", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/639#discussion_r450205493", "createdAt": "2020-07-06T13:04:06Z", "author": {"login": "kenfinnigan"}, "path": "smallrye-reactive-messaging-provider/pom.xml", "diffHunk": "@@ -53,6 +53,18 @@\n       <scope>test</scope>\n     </dependency>\n \n+    <dependency>\n+      <groupId>io.smallrye.testing</groupId>\n+      <artifactId>smallrye-testing-utilities</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.jboss.logmanager</groupId>\n+      <artifactId>jboss-logmanager</artifactId>\n+      <version>2.1.17.Final</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM4OTAwNQ=="}, "originalCommit": {"oid": "427675d7b44f3b47db21d5401cd7c5aa68ca8af2"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTA4MTc3OnYy", "diffSide": "RIGHT", "path": "smallrye-reactive-messaging-provider/src/test/java/io/smallrye/reactive/messaging/blocking/BlockingExceptionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNTo1NjowMlrOGskjRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMzowNDoxNVrOGtWXew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM4OTM4Mw==", "bodyText": "Is it done?", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/639#discussion_r449389383", "createdAt": "2020-07-03T05:56:02Z", "author": {"login": "cescoffier"}, "path": "smallrye-reactive-messaging-provider/src/test/java/io/smallrye/reactive/messaging/blocking/BlockingExceptionTest.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.smallrye.reactive.messaging.blocking;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.await;\n+\n+import org.jboss.logmanager.Level;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.smallrye.reactive.messaging.WeldTestBaseWithoutTails;\n+import io.smallrye.reactive.messaging.blocking.beans.IncomingBlockingExceptionBean;\n+import io.smallrye.testing.logging.LogCapture;\n+\n+public class BlockingExceptionTest extends WeldTestBaseWithoutTails {\n+\n+    @RegisterExtension\n+    static LogCapture logCapture = LogCapture.with(r -> \"io.smallrye.reactive.messaging.provider\".equals(r.getLoggerName()),\n+            Level.ERROR);\n+\n+    @Test\n+    public void testIncomingBlockingWithException() {\n+        addBeanClass(BlockingSubscriberTest.ProduceIn.class);\n+        addBeanClass(IncomingBlockingExceptionBean.class);\n+        initialize();\n+\n+        IncomingBlockingExceptionBean bean = container.getBeanManager().createInstance()\n+                .select(IncomingBlockingExceptionBean.class).get();\n+\n+        await().until(() -> bean.list().size() == 5);\n+        assertThat(bean.list()).contains(\"a\", \"b\", \"d\", \"e\", \"f\");\n+\n+        //TODO: Assert the log output contains an exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "427675d7b44f3b47db21d5401cd7c5aa68ca8af2"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIwNTU2Mw==", "bodyText": "Oops, removed", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/639#discussion_r450205563", "createdAt": "2020-07-06T13:04:15Z", "author": {"login": "kenfinnigan"}, "path": "smallrye-reactive-messaging-provider/src/test/java/io/smallrye/reactive/messaging/blocking/BlockingExceptionTest.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.smallrye.reactive.messaging.blocking;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.await;\n+\n+import org.jboss.logmanager.Level;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.smallrye.reactive.messaging.WeldTestBaseWithoutTails;\n+import io.smallrye.reactive.messaging.blocking.beans.IncomingBlockingExceptionBean;\n+import io.smallrye.testing.logging.LogCapture;\n+\n+public class BlockingExceptionTest extends WeldTestBaseWithoutTails {\n+\n+    @RegisterExtension\n+    static LogCapture logCapture = LogCapture.with(r -> \"io.smallrye.reactive.messaging.provider\".equals(r.getLoggerName()),\n+            Level.ERROR);\n+\n+    @Test\n+    public void testIncomingBlockingWithException() {\n+        addBeanClass(BlockingSubscriberTest.ProduceIn.class);\n+        addBeanClass(IncomingBlockingExceptionBean.class);\n+        initialize();\n+\n+        IncomingBlockingExceptionBean bean = container.getBeanManager().createInstance()\n+                .select(IncomingBlockingExceptionBean.class).get();\n+\n+        await().until(() -> bean.list().size() == 5);\n+        assertThat(bean.list()).contains(\"a\", \"b\", \"d\", \"e\", \"f\");\n+\n+        //TODO: Assert the log output contains an exception", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM4OTM4Mw=="}, "originalCommit": {"oid": "427675d7b44f3b47db21d5401cd7c5aa68ca8af2"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 87, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}