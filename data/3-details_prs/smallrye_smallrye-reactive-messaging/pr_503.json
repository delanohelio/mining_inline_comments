{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzMTg0NTQ1", "number": 503, "title": "add lower-level worker pool registration method", "bodyText": "", "createdAt": "2020-04-14T13:29:01Z", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/503", "merged": true, "mergeCommit": {"oid": "bbd732c4cc0f0ae9c8b668487b6b1423d42a67ec"}, "closed": true, "closedAt": "2020-04-15T06:37:18Z", "author": {"login": "michalszynkiewicz"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcXjf3AgH2gAyNDAzMTg0NTQ1OmFlMjA3ZjY5OGY1Y2UyOThlYzczNGJmNDhlYWY5MDc0MWVjMDdjNmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXpt6mAFqTM5MzI4MDExNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ae207f698f5ce298ec734bf48eaf90741ec07c6b", "author": {"user": {"login": "michalszynkiewicz", "name": "Micha\u0142 Szynkiewicz"}}, "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/ae207f698f5ce298ec734bf48eaf90741ec07c6b", "committedDate": "2020-04-14T13:27:49Z", "message": "add lower-level worker pool registration method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyOTQ1OTE4", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/503#pullrequestreview-392945918", "createdAt": "2020-04-14T13:50:25Z", "commit": {"oid": "ae207f698f5ce298ec734bf48eaf90741ec07c6b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyOTcyMzA4", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/503#pullrequestreview-392972308", "createdAt": "2020-04-14T14:17:35Z", "commit": {"oid": "ae207f698f5ce298ec734bf48eaf90741ec07c6b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDoxNzozNVrOGFQ3Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDoxODoxNlrOGFQ5Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE3MjM2Mw==", "bodyText": "What's the reason for not injecting the Config and using the Provider?\nI thought that was a source of issues?", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/503#discussion_r408172363", "createdAt": "2020-04-14T14:17:35Z", "author": {"login": "kenfinnigan"}, "path": "smallrye-reactive-messaging-provider/src/main/java/io/smallrye/reactive/messaging/connectors/WorkerPoolRegistry.java", "diffHunk": "@@ -38,9 +37,6 @@\n     @Inject\n     private ExecutionHolder executionHolder;\n \n-    @Inject", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae207f698f5ce298ec734bf48eaf90741ec07c6b"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE3Mjg1MA==", "bodyText": "Should this validation be in the other method so it doesn't need to be repeated in a runtime?\nNot sure what that means for parameters though", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/503#discussion_r408172850", "createdAt": "2020-04-14T14:18:16Z", "author": {"login": "kenfinnigan"}, "path": "smallrye-reactive-messaging-provider/src/main/java/io/smallrye/reactive/messaging/connectors/WorkerPoolRegistry.java", "diffHunk": "@@ -105,39 +101,45 @@ private WorkerExecutor getWorker(String workerName) {\n                 .forEach(m -> defineWorker(m.getJavaMember()));\n     }\n \n-    private void defineWorker(Method method) {\n+    public void defineWorker(String className, String method, String poolName) {\n+        Objects.requireNonNull(className, \"className was empty\");\n         Objects.requireNonNull(method, \"Method was empty\");\n \n-        Blocking blocking = method.getAnnotation(Blocking.class);\n-\n-        // Validate @Blocking is used in conjunction with @Incoming, or @Outgoing\n-        if (!(method.isAnnotationPresent(Incoming.class) || method.isAnnotationPresent(Outgoing.class))) {\n-            throw getBlockingError(method, \"no @Incoming or @Outgoing present\");\n-        }\n-\n-        if (!blocking.value().equals(Blocking.DEFAULT_WORKER_POOL)) {\n+        if (!poolName.equals(Blocking.DEFAULT_WORKER_POOL)) {\n             // Validate @Blocking value is not empty, if set\n-            if (Validation.isBlank(blocking.value())) {\n-                throw getBlockingError(method, \"value is blank or null\");\n+            if (Validation.isBlank(poolName)) {\n+                throw getBlockingError(className, method, \"value is blank or null\");\n             }\n \n             // Validate @Blocking worker pool has configuration to define concurrency\n-            String workerConfigKey = WORKER_CONFIG_PREFIX + \".\" + blocking.value() + \".\" + WORKER_CONCURRENCY;\n-            Optional<Integer> concurrency = configInstance.get().getOptionalValue(workerConfigKey, Integer.class);\n+            String workerConfigKey = WORKER_CONFIG_PREFIX + \".\" + poolName + \".\" + WORKER_CONCURRENCY;\n+            Optional<Integer> concurrency = ConfigProvider.getConfig().getOptionalValue(workerConfigKey, Integer.class);\n             if (!concurrency.isPresent()) {\n-                throw getBlockingError(method, workerConfigKey + \" was not defined\");\n+                throw getBlockingError(className, method, workerConfigKey + \" was not defined\");\n             }\n \n-            workerConcurrency.put(blocking.value(), concurrency.get());\n+            workerConcurrency.put(poolName, concurrency.get());\n         }\n     }\n \n-    private IllegalArgumentException getBlockingError(Method method, String message) {\n-        return new IllegalArgumentException(\n-                \"Invalid method annotated with @Blocking: \" + methodAsString(method) + \" - \" + message);\n+    private void defineWorker(Method method) {\n+        Objects.requireNonNull(method, \"Method was empty\");\n+\n+        Blocking blocking = method.getAnnotation(Blocking.class);\n+\n+        String methodName = method.getName();\n+        String className = method.getDeclaringClass().getName();\n+\n+        // Validate @Blocking is used in conjunction with @Incoming, or @Outgoing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae207f698f5ce298ec734bf48eaf90741ec07c6b"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMjgwMTE3", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/503#pullrequestreview-393280117", "createdAt": "2020-04-14T20:42:36Z", "commit": {"oid": "ae207f698f5ce298ec734bf48eaf90741ec07c6b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2317, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}