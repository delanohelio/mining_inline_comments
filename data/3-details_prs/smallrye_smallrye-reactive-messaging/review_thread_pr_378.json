{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0MDgyMTc3", "number": 378, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxOToyNDoyMFrODY6jog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxOToyNDoyMFrODY6jog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NDUxODEwOnYy", "diffSide": "RIGHT", "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/KafkaSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxOToyNDoyMFrOFfC5uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxOToyNDoyMFrOFfC5uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA5NzcyMQ==", "bodyText": "Not huge, but is the use of return needed, appears to be a single line statement? Is the code change actually changing anything?", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/378#discussion_r368097721", "createdAt": "2020-01-17T19:24:20Z", "author": {"login": "kenfinnigan"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/KafkaSource.java", "diffHunk": "@@ -60,14 +60,17 @@\n \n         Objects.requireNonNull(topic, \"The topic must be set, or the name must be set\");\n \n-        Flowable<KafkaConsumerRecord<K, V>> flowable = consumer.toFlowable();\n+        Flowable<KafkaConsumerRecord<K, V>> flowable = consumer.toFlowable()\n+                .doOnError(t -> LOGGER.error(\"Unable to read a record from Kafka topic '{}'\", topic, t));\n \n         if (config.getOptionalValue(\"retry\", Boolean.class).orElse(true)) {\n             Integer max = config.getOptionalValue(\"retry-attempts\", Integer.class).orElse(5);\n             flowable = flowable\n-                    .retryWhen(attempts -> attempts\n-                            .zipWith(Flowable.range(1, max), (n, i) -> i)\n-                            .flatMap(i -> Flowable.timer(i, TimeUnit.SECONDS)));\n+                    .retryWhen(attempts -> {\n+                        return attempts", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83fbf6c07901cca64e4c770868ff7cb4e139d3f"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 117, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}