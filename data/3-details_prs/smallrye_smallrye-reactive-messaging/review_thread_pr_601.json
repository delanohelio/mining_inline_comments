{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyOTE5MzE3", "number": 601, "reviewThreads": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwODo0MzoxN1rOEEmFvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjowNDozMFrOEFZkEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjUzODIxOnYy", "diffSide": "RIGHT", "path": "documentation/src/main/doc/modules/connectors/partials/META-INF/connector/smallrye-kafka-incoming.adoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwODo0MzoxN1rOGiUEjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNToxOTozOFrOGjjgnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYzMzYxNQ==", "bodyText": "Can use use javax.inject.Named and io.smallrye.reactive.messaging.kafka.KafkaConsumerRebalanceListener (purely cosmetic comment)", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r438633615", "createdAt": "2020-06-11T08:43:17Z", "author": {"login": "cescoffier"}, "path": "documentation/src/main/doc/modules/connectors/partials/META-INF/connector/smallrye-kafka-incoming.adoc", "diffHunk": "@@ -65,4 +65,8 @@ Type: _string_ | false |\n \n Type: _string_ | false | \n \n+| *consumer-rebalance-listener.name* | The name set in javax.inject.Named of a bean that implements io.smallrye.reactive.messaging.kafka.KafkaConsumerRebalanceListener. If set the listener will be applied to the consumer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9129f94ea4e9bd60c5e655d70373ee2c77884cec"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYzMzgxOQ==", "bodyText": "The change must be done in the connector class.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r438633819", "createdAt": "2020-06-11T08:43:37Z", "author": {"login": "cescoffier"}, "path": "documentation/src/main/doc/modules/connectors/partials/META-INF/connector/smallrye-kafka-incoming.adoc", "diffHunk": "@@ -65,4 +65,8 @@ Type: _string_ | false |\n \n Type: _string_ | false | \n \n+| *consumer-rebalance-listener.name* | The name set in javax.inject.Named of a bean that implements io.smallrye.reactive.messaging.kafka.KafkaConsumerRebalanceListener. If set the listener will be applied to the consumer.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYzMzYxNQ=="}, "originalCommit": {"oid": "9129f94ea4e9bd60c5e655d70373ee2c77884cec"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzNTEzMw==", "bodyText": "done", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r439935133", "createdAt": "2020-06-15T05:19:38Z", "author": {"login": "pcasaes"}, "path": "documentation/src/main/doc/modules/connectors/partials/META-INF/connector/smallrye-kafka-incoming.adoc", "diffHunk": "@@ -65,4 +65,8 @@ Type: _string_ | false |\n \n Type: _string_ | false | \n \n+| *consumer-rebalance-listener.name* | The name set in javax.inject.Named of a bean that implements io.smallrye.reactive.messaging.kafka.KafkaConsumerRebalanceListener. If set the listener will be applied to the consumer.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYzMzYxNQ=="}, "originalCommit": {"oid": "9129f94ea4e9bd60c5e655d70373ee2c77884cec"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjU0NjkxOnYy", "diffSide": "RIGHT", "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/KafkaConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwODo0NTozMFrOGiUJ0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNDo1MzoxM1rOGihA3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYzNDk2MA==", "bodyText": "You can also use an Instance<KafkaConsumerRebalanceListener> - the API is a bit simpler.\nSee https://github.com/smallrye/smallrye-reactive-messaging/blob/master/smallrye-reactive-messaging-amqp/src/main/java/io/smallrye/reactive/messaging/amqp/AmqpConnector.java#L79 and \n  \n    \n      smallrye-reactive-messaging/smallrye-reactive-messaging-amqp/src/main/java/io/smallrye/reactive/messaging/amqp/AmqpClientHelper.java\n    \n    \n         Line 21\n      in\n      a9b33e2\n    \n    \n    \n    \n\n        \n          \n           static AmqpClient createClient(AmqpConnector connector, AmqpConnectorCommonConfiguration config, \n        \n    \n  \n\n as an example.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r438634960", "createdAt": "2020-06-11T08:45:30Z", "author": {"login": "cescoffier"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/KafkaConnector.java", "diffHunk": "@@ -61,13 +62,17 @@\n @ConnectorAttribute(name = \"partition\", type = \"int\", direction = Direction.OUTGOING, description = \"The target partition id. -1 to let the client determine the partition\", defaultValue = \"-1\")\n @ConnectorAttribute(name = \"waitForWriteCompletion\", type = \"boolean\", direction = Direction.OUTGOING, description = \"Whether the client waits for Kafka to acknowledge the written record before acknowledging the message\", defaultValue = \"true\")\n @ConnectorAttribute(name = \"max-inflight-messages\", type = \"int\", direction = Direction.OUTGOING, description = \"The maximum number of messages to be written to Kafka concurrently - The default value is the value from the `max.in.flight.requests.per.connection` Kafka property. It configures the maximum number of unacknowledged requests the client before blocking. Note that if this setting is set to be greater than 1 and there are failed sends, there is a risk of message re-ordering due to retries.\", defaultValue = \"5\")\n+@ConnectorAttribute(name = \"consumer-rebalance-listener.name\", type = \"string\", direction = Direction.INCOMING, description = \"The name set in javax.inject.Named of a bean that implements io.smallrye.reactive.messaging.kafka.KafkaConsumerRebalanceListener. If set the listener will be applied to the consumer.\")\n public class KafkaConnector implements IncomingConnectorFactory, OutgoingConnectorFactory {\n \n     public static final String CONNECTOR_NAME = \"smallrye-kafka\";\n \n     @Inject\n     private ExecutionHolder executionHolder;\n \n+    @Inject\n+    private BeanManager beanManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9129f94ea4e9bd60c5e655d70373ee2c77884cec"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg0NTY2MQ==", "bodyText": "Sure thing!", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r438845661", "createdAt": "2020-06-11T14:53:13Z", "author": {"login": "pcasaes"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/KafkaConnector.java", "diffHunk": "@@ -61,13 +62,17 @@\n @ConnectorAttribute(name = \"partition\", type = \"int\", direction = Direction.OUTGOING, description = \"The target partition id. -1 to let the client determine the partition\", defaultValue = \"-1\")\n @ConnectorAttribute(name = \"waitForWriteCompletion\", type = \"boolean\", direction = Direction.OUTGOING, description = \"Whether the client waits for Kafka to acknowledge the written record before acknowledging the message\", defaultValue = \"true\")\n @ConnectorAttribute(name = \"max-inflight-messages\", type = \"int\", direction = Direction.OUTGOING, description = \"The maximum number of messages to be written to Kafka concurrently - The default value is the value from the `max.in.flight.requests.per.connection` Kafka property. It configures the maximum number of unacknowledged requests the client before blocking. Note that if this setting is set to be greater than 1 and there are failed sends, there is a risk of message re-ordering due to retries.\", defaultValue = \"5\")\n+@ConnectorAttribute(name = \"consumer-rebalance-listener.name\", type = \"string\", direction = Direction.INCOMING, description = \"The name set in javax.inject.Named of a bean that implements io.smallrye.reactive.messaging.kafka.KafkaConsumerRebalanceListener. If set the listener will be applied to the consumer.\")\n public class KafkaConnector implements IncomingConnectorFactory, OutgoingConnectorFactory {\n \n     public static final String CONNECTOR_NAME = \"smallrye-kafka\";\n \n     @Inject\n     private ExecutionHolder executionHolder;\n \n+    @Inject\n+    private BeanManager beanManager;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYzNDk2MA=="}, "originalCommit": {"oid": "9129f94ea4e9bd60c5e655d70373ee2c77884cec"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjU1MTI3OnYy", "diffSide": "RIGHT", "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/KafkaConsumerRebalanceListener.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwODo0Njo0OVrOGiUMmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNTowMTowOFrOGihXlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYzNTY3NQ==", "bodyText": "What's the reason for not using org.apache.kafka.clients.consumer.ConsumerRebalanceListener directly?", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r438635675", "createdAt": "2020-06-11T08:46:49Z", "author": {"login": "cescoffier"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/KafkaConsumerRebalanceListener.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package io.smallrye.reactive.messaging.kafka;\n+\n+import java.util.Set;\n+\n+import io.vertx.kafka.client.common.TopicPartition;\n+import io.vertx.mutiny.kafka.client.consumer.KafkaConsumer;\n+\n+/**\n+ *\n+ * When implemented by a managed bean annotated with {@link javax.inject.Named} and\n+ * configured against a consumer, ex:\n+ * mp.messaging.incoming.example.consumer-rebalance-listener.name=ExampleConsumerRebalanceListener\n+ *\n+ * Will be applied as a consumer rebalance listener to the consumer.\n+ *\n+ * For more details\n+ *\n+ * @see org.apache.kafka.clients.consumer.ConsumerRebalanceListener\n+ */\n+public interface KafkaConsumerRebalanceListener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9129f94ea4e9bd60c5e655d70373ee2c77884cec"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYzNjE5Mw==", "bodyText": "And then I read the next file and understood it. Sorry!", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r438636193", "createdAt": "2020-06-11T08:47:45Z", "author": {"login": "cescoffier"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/KafkaConsumerRebalanceListener.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package io.smallrye.reactive.messaging.kafka;\n+\n+import java.util.Set;\n+\n+import io.vertx.kafka.client.common.TopicPartition;\n+import io.vertx.mutiny.kafka.client.consumer.KafkaConsumer;\n+\n+/**\n+ *\n+ * When implemented by a managed bean annotated with {@link javax.inject.Named} and\n+ * configured against a consumer, ex:\n+ * mp.messaging.incoming.example.consumer-rebalance-listener.name=ExampleConsumerRebalanceListener\n+ *\n+ * Will be applied as a consumer rebalance listener to the consumer.\n+ *\n+ * For more details\n+ *\n+ * @see org.apache.kafka.clients.consumer.ConsumerRebalanceListener\n+ */\n+public interface KafkaConsumerRebalanceListener {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYzNTY3NQ=="}, "originalCommit": {"oid": "9129f94ea4e9bd60c5e655d70373ee2c77884cec"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg1MTQ3OA==", "bodyText": "For documentation's sake it's because most of the time you'll want to manipulate the consumer object (like seeking to an offset). The original listener interface is designed with an imperative synchronous style in mind https://kafka.apache.org/0100/javadoc/org/apache/kafka/clients/consumer/ConsumerRebalanceListener.html\nI originally wrote it with the the vanilla listener interface then saw the problem \ud83d\ude06\nWith an example in the docs it'll be clearer.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r438851478", "createdAt": "2020-06-11T15:01:08Z", "author": {"login": "pcasaes"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/KafkaConsumerRebalanceListener.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package io.smallrye.reactive.messaging.kafka;\n+\n+import java.util.Set;\n+\n+import io.vertx.kafka.client.common.TopicPartition;\n+import io.vertx.mutiny.kafka.client.consumer.KafkaConsumer;\n+\n+/**\n+ *\n+ * When implemented by a managed bean annotated with {@link javax.inject.Named} and\n+ * configured against a consumer, ex:\n+ * mp.messaging.incoming.example.consumer-rebalance-listener.name=ExampleConsumerRebalanceListener\n+ *\n+ * Will be applied as a consumer rebalance listener to the consumer.\n+ *\n+ * For more details\n+ *\n+ * @see org.apache.kafka.clients.consumer.ConsumerRebalanceListener\n+ */\n+public interface KafkaConsumerRebalanceListener {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYzNTY3NQ=="}, "originalCommit": {"oid": "9129f94ea4e9bd60c5e655d70373ee2c77884cec"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjMyOTk2OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/doc/modules/kafka/examples/inbound/KafkaRebalancedConsumerRebalanceListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNzoxMzo1OVrOGi5j8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNToyMDoxMFrOGjjhEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI0Nzg1OQ==", "bodyText": "Instead of \"void\" should it returns a Uni<Void> indicating when the action has completed?", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r439247859", "createdAt": "2020-06-12T07:13:59Z", "author": {"login": "cescoffier"}, "path": "documentation/src/main/doc/modules/kafka/examples/inbound/KafkaRebalancedConsumerRebalanceListener.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package inbound;\n+\n+import io.smallrye.reactive.messaging.kafka.IncomingKafkaRecord;\n+import io.smallrye.reactive.messaging.kafka.KafkaConsumerRebalanceListener;\n+import io.vertx.kafka.client.common.TopicPartition;\n+import io.vertx.mutiny.kafka.client.consumer.KafkaConsumer;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Named;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.logging.Logger;\n+\n+@ApplicationScoped\n+@Named(\"rebalanced-example.rebalancer\")\n+public class KafkaRebalancedConsumerRebalanceListener implements KafkaConsumerRebalanceListener {\n+\n+    private static final Logger LOGGER = Logger.getLogger(KafkaRebalancedConsumerRebalanceListener.class.getName());\n+\n+    /**\n+     * With this mapping we can keep track of which partitions have been set-up properly.\n+     */\n+    private final List<Long> offsetMap = new CopyOnWriteArrayList<>();\n+\n+    /**\n+     * When receiving a list of partitions will search for the earliest offset within 10 minutes\n+     * and seek the consumer to it. These operations are asynchronous so the inbound connector\n+     * WILL continue to receive messages from the subscribed topic that MIGHT be older than 10 minutes.\n+     *\n+     * @param consumer underlying consumer\n+     * @param topicPartitions set of assigned topic partitions\n+     */\n+    @Override\n+    public void onPartitionsAssigned(KafkaConsumer<?, ?> consumer, Set<TopicPartition> topicPartitions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30f6247ad752f4944c684f40c75cebe675ed3699"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzNTI1MQ==", "bodyText": "done", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r439935251", "createdAt": "2020-06-15T05:20:10Z", "author": {"login": "pcasaes"}, "path": "documentation/src/main/doc/modules/kafka/examples/inbound/KafkaRebalancedConsumerRebalanceListener.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package inbound;\n+\n+import io.smallrye.reactive.messaging.kafka.IncomingKafkaRecord;\n+import io.smallrye.reactive.messaging.kafka.KafkaConsumerRebalanceListener;\n+import io.vertx.kafka.client.common.TopicPartition;\n+import io.vertx.mutiny.kafka.client.consumer.KafkaConsumer;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Named;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.logging.Logger;\n+\n+@ApplicationScoped\n+@Named(\"rebalanced-example.rebalancer\")\n+public class KafkaRebalancedConsumerRebalanceListener implements KafkaConsumerRebalanceListener {\n+\n+    private static final Logger LOGGER = Logger.getLogger(KafkaRebalancedConsumerRebalanceListener.class.getName());\n+\n+    /**\n+     * With this mapping we can keep track of which partitions have been set-up properly.\n+     */\n+    private final List<Long> offsetMap = new CopyOnWriteArrayList<>();\n+\n+    /**\n+     * When receiving a list of partitions will search for the earliest offset within 10 minutes\n+     * and seek the consumer to it. These operations are asynchronous so the inbound connector\n+     * WILL continue to receive messages from the subscribed topic that MIGHT be older than 10 minutes.\n+     *\n+     * @param consumer underlying consumer\n+     * @param topicPartitions set of assigned topic partitions\n+     */\n+    @Override\n+    public void onPartitionsAssigned(KafkaConsumer<?, ?> consumer, Set<TopicPartition> topicPartitions) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI0Nzg1OQ=="}, "originalCommit": {"oid": "30f6247ad752f4944c684f40c75cebe675ed3699"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjMzMTQ2OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/doc/modules/kafka/examples/inbound/KafkaRebalancedConsumerRebalanceListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNzoxNDozM1rOGi5k0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNToxOTo1N1rOGjjg6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI0ODA4Mg==", "bodyText": "Returning Uni would remove the need for this method.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r439248082", "createdAt": "2020-06-12T07:14:33Z", "author": {"login": "cescoffier"}, "path": "documentation/src/main/doc/modules/kafka/examples/inbound/KafkaRebalancedConsumerRebalanceListener.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package inbound;\n+\n+import io.smallrye.reactive.messaging.kafka.IncomingKafkaRecord;\n+import io.smallrye.reactive.messaging.kafka.KafkaConsumerRebalanceListener;\n+import io.vertx.kafka.client.common.TopicPartition;\n+import io.vertx.mutiny.kafka.client.consumer.KafkaConsumer;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Named;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.logging.Logger;\n+\n+@ApplicationScoped\n+@Named(\"rebalanced-example.rebalancer\")\n+public class KafkaRebalancedConsumerRebalanceListener implements KafkaConsumerRebalanceListener {\n+\n+    private static final Logger LOGGER = Logger.getLogger(KafkaRebalancedConsumerRebalanceListener.class.getName());\n+\n+    /**\n+     * With this mapping we can keep track of which partitions have been set-up properly.\n+     */\n+    private final List<Long> offsetMap = new CopyOnWriteArrayList<>();\n+\n+    /**\n+     * When receiving a list of partitions will search for the earliest offset within 10 minutes\n+     * and seek the consumer to it. These operations are asynchronous so the inbound connector\n+     * WILL continue to receive messages from the subscribed topic that MIGHT be older than 10 minutes.\n+     *\n+     * @param consumer underlying consumer\n+     * @param topicPartitions set of assigned topic partitions\n+     */\n+    @Override\n+    public void onPartitionsAssigned(KafkaConsumer<?, ?> consumer, Set<TopicPartition> topicPartitions) {\n+        long now = System.currentTimeMillis();\n+        long shouldStartAt = now - 600_000L; //10 minute ago\n+\n+        topicPartitions\n+            .forEach(topicPartition -> {\n+                LOGGER.info(\"Assigned \" + topicPartition);\n+                final int partition = topicPartition.getPartition();\n+\n+                //clean the local offset map\n+                this.offsetMap.add(partition, null);\n+                consumer.offsetsForTimes(topicPartition, shouldStartAt)\n+                    .subscribe()\n+                    .with(offsetAndTimestamp -> {\n+                        LOGGER.info(\"Seeking to \" + offsetAndTimestamp);\n+                        if (offsetAndTimestamp == null) {\n+                            // no messages found in the request time period found so set\n+                            // local offset map to the 0th offset\n+                            this.offsetMap.add(partition, 0L);\n+                        } else {\n+                            this.offsetMap.add(partition, offsetAndTimestamp.getOffset());\n+                            consumer\n+                                .seek(topicPartition, offsetAndTimestamp.getOffset())\n+                                .subscribe()\n+                                .with(v -> LOGGER.info(\"Seeked to \" + offsetAndTimestamp));\n+                        }\n+                    });\n+            });\n+    }\n+\n+    @Override\n+    public void onPartitionsRevoked(KafkaConsumer<?, ?> consumer, Set<TopicPartition> topicPartitions) {\n+        // nothing to do here\n+    }\n+\n+    /**\n+     * Because the operations in {@link #onPartitionsAssigned(KafkaConsumer, Set)} are asynchronous we\n+     * MIGHT need a way to inform the inbound connector to ignore incoming messages until this listener\n+     * has done its job.\n+     *\n+     * @param message\n+     * @return true if the consumer has been properly set-up for the messages partition\n+     */\n+    public boolean isConsumerReady(IncomingKafkaRecord<?, ?> message) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30f6247ad752f4944c684f40c75cebe675ed3699"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzNTIwOQ==", "bodyText": "done", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r439935209", "createdAt": "2020-06-15T05:19:57Z", "author": {"login": "pcasaes"}, "path": "documentation/src/main/doc/modules/kafka/examples/inbound/KafkaRebalancedConsumerRebalanceListener.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package inbound;\n+\n+import io.smallrye.reactive.messaging.kafka.IncomingKafkaRecord;\n+import io.smallrye.reactive.messaging.kafka.KafkaConsumerRebalanceListener;\n+import io.vertx.kafka.client.common.TopicPartition;\n+import io.vertx.mutiny.kafka.client.consumer.KafkaConsumer;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Named;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.logging.Logger;\n+\n+@ApplicationScoped\n+@Named(\"rebalanced-example.rebalancer\")\n+public class KafkaRebalancedConsumerRebalanceListener implements KafkaConsumerRebalanceListener {\n+\n+    private static final Logger LOGGER = Logger.getLogger(KafkaRebalancedConsumerRebalanceListener.class.getName());\n+\n+    /**\n+     * With this mapping we can keep track of which partitions have been set-up properly.\n+     */\n+    private final List<Long> offsetMap = new CopyOnWriteArrayList<>();\n+\n+    /**\n+     * When receiving a list of partitions will search for the earliest offset within 10 minutes\n+     * and seek the consumer to it. These operations are asynchronous so the inbound connector\n+     * WILL continue to receive messages from the subscribed topic that MIGHT be older than 10 minutes.\n+     *\n+     * @param consumer underlying consumer\n+     * @param topicPartitions set of assigned topic partitions\n+     */\n+    @Override\n+    public void onPartitionsAssigned(KafkaConsumer<?, ?> consumer, Set<TopicPartition> topicPartitions) {\n+        long now = System.currentTimeMillis();\n+        long shouldStartAt = now - 600_000L; //10 minute ago\n+\n+        topicPartitions\n+            .forEach(topicPartition -> {\n+                LOGGER.info(\"Assigned \" + topicPartition);\n+                final int partition = topicPartition.getPartition();\n+\n+                //clean the local offset map\n+                this.offsetMap.add(partition, null);\n+                consumer.offsetsForTimes(topicPartition, shouldStartAt)\n+                    .subscribe()\n+                    .with(offsetAndTimestamp -> {\n+                        LOGGER.info(\"Seeking to \" + offsetAndTimestamp);\n+                        if (offsetAndTimestamp == null) {\n+                            // no messages found in the request time period found so set\n+                            // local offset map to the 0th offset\n+                            this.offsetMap.add(partition, 0L);\n+                        } else {\n+                            this.offsetMap.add(partition, offsetAndTimestamp.getOffset());\n+                            consumer\n+                                .seek(topicPartition, offsetAndTimestamp.getOffset())\n+                                .subscribe()\n+                                .with(v -> LOGGER.info(\"Seeked to \" + offsetAndTimestamp));\n+                        }\n+                    });\n+            });\n+    }\n+\n+    @Override\n+    public void onPartitionsRevoked(KafkaConsumer<?, ?> consumer, Set<TopicPartition> topicPartitions) {\n+        // nothing to do here\n+    }\n+\n+    /**\n+     * Because the operations in {@link #onPartitionsAssigned(KafkaConsumer, Set)} are asynchronous we\n+     * MIGHT need a way to inform the inbound connector to ignore incoming messages until this listener\n+     * has done its job.\n+     *\n+     * @param message\n+     * @return true if the consumer has been properly set-up for the messages partition\n+     */\n+    public boolean isConsumerReady(IncomingKafkaRecord<?, ?> message) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI0ODA4Mg=="}, "originalCommit": {"oid": "30f6247ad752f4944c684f40c75cebe675ed3699"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjMzMjMzOnYy", "diffSide": "RIGHT", "path": "documentation/src/main/doc/modules/kafka/examples/inbound/KafkaRebalancedConsumerRebalanceListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNzoxNDo1MVrOGi5lSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNToyMDowM1rOGjjg_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI0ODIwMw==", "bodyText": "Same, here, should it return a Uni<Void>?", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r439248203", "createdAt": "2020-06-12T07:14:51Z", "author": {"login": "cescoffier"}, "path": "documentation/src/main/doc/modules/kafka/examples/inbound/KafkaRebalancedConsumerRebalanceListener.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package inbound;\n+\n+import io.smallrye.reactive.messaging.kafka.IncomingKafkaRecord;\n+import io.smallrye.reactive.messaging.kafka.KafkaConsumerRebalanceListener;\n+import io.vertx.kafka.client.common.TopicPartition;\n+import io.vertx.mutiny.kafka.client.consumer.KafkaConsumer;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Named;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.logging.Logger;\n+\n+@ApplicationScoped\n+@Named(\"rebalanced-example.rebalancer\")\n+public class KafkaRebalancedConsumerRebalanceListener implements KafkaConsumerRebalanceListener {\n+\n+    private static final Logger LOGGER = Logger.getLogger(KafkaRebalancedConsumerRebalanceListener.class.getName());\n+\n+    /**\n+     * With this mapping we can keep track of which partitions have been set-up properly.\n+     */\n+    private final List<Long> offsetMap = new CopyOnWriteArrayList<>();\n+\n+    /**\n+     * When receiving a list of partitions will search for the earliest offset within 10 minutes\n+     * and seek the consumer to it. These operations are asynchronous so the inbound connector\n+     * WILL continue to receive messages from the subscribed topic that MIGHT be older than 10 minutes.\n+     *\n+     * @param consumer underlying consumer\n+     * @param topicPartitions set of assigned topic partitions\n+     */\n+    @Override\n+    public void onPartitionsAssigned(KafkaConsumer<?, ?> consumer, Set<TopicPartition> topicPartitions) {\n+        long now = System.currentTimeMillis();\n+        long shouldStartAt = now - 600_000L; //10 minute ago\n+\n+        topicPartitions\n+            .forEach(topicPartition -> {\n+                LOGGER.info(\"Assigned \" + topicPartition);\n+                final int partition = topicPartition.getPartition();\n+\n+                //clean the local offset map\n+                this.offsetMap.add(partition, null);\n+                consumer.offsetsForTimes(topicPartition, shouldStartAt)\n+                    .subscribe()\n+                    .with(offsetAndTimestamp -> {\n+                        LOGGER.info(\"Seeking to \" + offsetAndTimestamp);\n+                        if (offsetAndTimestamp == null) {\n+                            // no messages found in the request time period found so set\n+                            // local offset map to the 0th offset\n+                            this.offsetMap.add(partition, 0L);\n+                        } else {\n+                            this.offsetMap.add(partition, offsetAndTimestamp.getOffset());\n+                            consumer\n+                                .seek(topicPartition, offsetAndTimestamp.getOffset())\n+                                .subscribe()\n+                                .with(v -> LOGGER.info(\"Seeked to \" + offsetAndTimestamp));\n+                        }\n+                    });\n+            });\n+    }\n+\n+    @Override\n+    public void onPartitionsRevoked(KafkaConsumer<?, ?> consumer, Set<TopicPartition> topicPartitions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30f6247ad752f4944c684f40c75cebe675ed3699"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzNTIzMA==", "bodyText": "done", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r439935230", "createdAt": "2020-06-15T05:20:03Z", "author": {"login": "pcasaes"}, "path": "documentation/src/main/doc/modules/kafka/examples/inbound/KafkaRebalancedConsumerRebalanceListener.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package inbound;\n+\n+import io.smallrye.reactive.messaging.kafka.IncomingKafkaRecord;\n+import io.smallrye.reactive.messaging.kafka.KafkaConsumerRebalanceListener;\n+import io.vertx.kafka.client.common.TopicPartition;\n+import io.vertx.mutiny.kafka.client.consumer.KafkaConsumer;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Named;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.logging.Logger;\n+\n+@ApplicationScoped\n+@Named(\"rebalanced-example.rebalancer\")\n+public class KafkaRebalancedConsumerRebalanceListener implements KafkaConsumerRebalanceListener {\n+\n+    private static final Logger LOGGER = Logger.getLogger(KafkaRebalancedConsumerRebalanceListener.class.getName());\n+\n+    /**\n+     * With this mapping we can keep track of which partitions have been set-up properly.\n+     */\n+    private final List<Long> offsetMap = new CopyOnWriteArrayList<>();\n+\n+    /**\n+     * When receiving a list of partitions will search for the earliest offset within 10 minutes\n+     * and seek the consumer to it. These operations are asynchronous so the inbound connector\n+     * WILL continue to receive messages from the subscribed topic that MIGHT be older than 10 minutes.\n+     *\n+     * @param consumer underlying consumer\n+     * @param topicPartitions set of assigned topic partitions\n+     */\n+    @Override\n+    public void onPartitionsAssigned(KafkaConsumer<?, ?> consumer, Set<TopicPartition> topicPartitions) {\n+        long now = System.currentTimeMillis();\n+        long shouldStartAt = now - 600_000L; //10 minute ago\n+\n+        topicPartitions\n+            .forEach(topicPartition -> {\n+                LOGGER.info(\"Assigned \" + topicPartition);\n+                final int partition = topicPartition.getPartition();\n+\n+                //clean the local offset map\n+                this.offsetMap.add(partition, null);\n+                consumer.offsetsForTimes(topicPartition, shouldStartAt)\n+                    .subscribe()\n+                    .with(offsetAndTimestamp -> {\n+                        LOGGER.info(\"Seeking to \" + offsetAndTimestamp);\n+                        if (offsetAndTimestamp == null) {\n+                            // no messages found in the request time period found so set\n+                            // local offset map to the 0th offset\n+                            this.offsetMap.add(partition, 0L);\n+                        } else {\n+                            this.offsetMap.add(partition, offsetAndTimestamp.getOffset());\n+                            consumer\n+                                .seek(topicPartition, offsetAndTimestamp.getOffset())\n+                                .subscribe()\n+                                .with(v -> LOGGER.info(\"Seeked to \" + offsetAndTimestamp));\n+                        }\n+                    });\n+            });\n+    }\n+\n+    @Override\n+    public void onPartitionsRevoked(KafkaConsumer<?, ?> consumer, Set<TopicPartition> topicPartitions) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI0ODIwMw=="}, "originalCommit": {"oid": "30f6247ad752f4944c684f40c75cebe675ed3699"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTkyOTYyOnYy", "diffSide": "RIGHT", "path": "documentation/src/main/doc/modules/kafka/examples/inbound/KafkaRebalancedConsumerRebalanceListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwNzoyNzo1OFrOGjbS1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxNjoxMzoxNlrOGjeAZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgwMDUzMg==", "bodyText": "Do you want to resume on failure?", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r439800532", "createdAt": "2020-06-14T07:27:58Z", "author": {"login": "cescoffier"}, "path": "documentation/src/main/doc/modules/kafka/examples/inbound/KafkaRebalancedConsumerRebalanceListener.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package inbound;\n+\n+import io.smallrye.mutiny.Uni;\n+import io.smallrye.reactive.messaging.kafka.KafkaConsumerRebalanceListener;\n+import io.vertx.kafka.client.common.TopicPartition;\n+import io.vertx.mutiny.kafka.client.consumer.KafkaConsumer;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Named;\n+import java.util.Set;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+@ApplicationScoped\n+@Named(\"rebalanced-example.rebalancer\")\n+public class KafkaRebalancedConsumerRebalanceListener implements KafkaConsumerRebalanceListener {\n+\n+    private static final Logger LOGGER = Logger.getLogger(KafkaRebalancedConsumerRebalanceListener.class.getName());\n+\n+    /**\n+     * When receiving a list of partitions will search for the earliest offset within 10 minutes\n+     * and seek the consumer to it. These operations are asynchronous so the inbound connector's\n+     * consumer WILL be paused until they are complete.\n+     *\n+     * @param consumer        underlying consumer\n+     * @param topicPartitions set of assigned topic partitions\n+     * @return An observable\n+     */\n+    @Override\n+    public Uni<Void> onPartitionsAssigned(KafkaConsumer<?, ?> consumer, Set<TopicPartition> topicPartitions) {\n+        // we must pause the consumer otherwise the inbound connector will continue to receive messages\n+        // while we seek to the correct offset.\n+        consumer.pause();\n+\n+        long now = System.currentTimeMillis();\n+        long shouldStartAt = now - 600_000L; //10 minute ago\n+\n+        return Uni\n+            .combine()\n+            .all()\n+            .unis(topicPartitions\n+                .stream()\n+                .map(topicPartition -> {\n+                    LOGGER.info(\"Assigned \" + topicPartition);\n+                    return consumer.offsetsForTimes(topicPartition, shouldStartAt)\n+                        .onItem()\n+                        .invoke(o -> LOGGER.info(\"Seeking to \" + o))\n+                        .onItem()\n+                        .produceUni(o -> consumer\n+                            .seek(topicPartition, o == null ? 0L : o.getOffset())\n+                            .onItem()\n+                            .invoke(v -> LOGGER.info(\"Seeked to \" + o))\n+                        );\n+                })\n+                .collect(Collectors.toList()))\n+            .combinedWith(a -> null)\n+            .onItemOrFailure()\n+            .apply((a, t) -> {\n+                // once the seek is complete let's resume the consumer\n+                consumer.resume();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0d6ac5e1d1d240a11741b384e1cd491264f2858"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg0NDk2NA==", "bodyText": "That's up to the user really.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r439844964", "createdAt": "2020-06-14T16:13:16Z", "author": {"login": "pcasaes"}, "path": "documentation/src/main/doc/modules/kafka/examples/inbound/KafkaRebalancedConsumerRebalanceListener.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package inbound;\n+\n+import io.smallrye.mutiny.Uni;\n+import io.smallrye.reactive.messaging.kafka.KafkaConsumerRebalanceListener;\n+import io.vertx.kafka.client.common.TopicPartition;\n+import io.vertx.mutiny.kafka.client.consumer.KafkaConsumer;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Named;\n+import java.util.Set;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+@ApplicationScoped\n+@Named(\"rebalanced-example.rebalancer\")\n+public class KafkaRebalancedConsumerRebalanceListener implements KafkaConsumerRebalanceListener {\n+\n+    private static final Logger LOGGER = Logger.getLogger(KafkaRebalancedConsumerRebalanceListener.class.getName());\n+\n+    /**\n+     * When receiving a list of partitions will search for the earliest offset within 10 minutes\n+     * and seek the consumer to it. These operations are asynchronous so the inbound connector's\n+     * consumer WILL be paused until they are complete.\n+     *\n+     * @param consumer        underlying consumer\n+     * @param topicPartitions set of assigned topic partitions\n+     * @return An observable\n+     */\n+    @Override\n+    public Uni<Void> onPartitionsAssigned(KafkaConsumer<?, ?> consumer, Set<TopicPartition> topicPartitions) {\n+        // we must pause the consumer otherwise the inbound connector will continue to receive messages\n+        // while we seek to the correct offset.\n+        consumer.pause();\n+\n+        long now = System.currentTimeMillis();\n+        long shouldStartAt = now - 600_000L; //10 minute ago\n+\n+        return Uni\n+            .combine()\n+            .all()\n+            .unis(topicPartitions\n+                .stream()\n+                .map(topicPartition -> {\n+                    LOGGER.info(\"Assigned \" + topicPartition);\n+                    return consumer.offsetsForTimes(topicPartition, shouldStartAt)\n+                        .onItem()\n+                        .invoke(o -> LOGGER.info(\"Seeking to \" + o))\n+                        .onItem()\n+                        .produceUni(o -> consumer\n+                            .seek(topicPartition, o == null ? 0L : o.getOffset())\n+                            .onItem()\n+                            .invoke(v -> LOGGER.info(\"Seeked to \" + o))\n+                        );\n+                })\n+                .collect(Collectors.toList()))\n+            .combinedWith(a -> null)\n+            .onItemOrFailure()\n+            .apply((a, t) -> {\n+                // once the seek is complete let's resume the consumer\n+                consumer.resume();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgwMDUzMg=="}, "originalCommit": {"oid": "b0d6ac5e1d1d240a11741b384e1cd491264f2858"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTkzMDAzOnYy", "diffSide": "RIGHT", "path": "documentation/src/main/doc/modules/kafka/examples/inbound/KafkaRebalancedConsumerRebalanceListener.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwNzoyOTowMFrOGjbTFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxNjo0NzozOVrOGjeLfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgwMDU5Ng==", "bodyText": "Question: should it be done by the connector, or by the implementation of theKafkaConsumerRebalanceListener?", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r439800596", "createdAt": "2020-06-14T07:29:00Z", "author": {"login": "cescoffier"}, "path": "documentation/src/main/doc/modules/kafka/examples/inbound/KafkaRebalancedConsumerRebalanceListener.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package inbound;\n+\n+import io.smallrye.mutiny.Uni;\n+import io.smallrye.reactive.messaging.kafka.KafkaConsumerRebalanceListener;\n+import io.vertx.kafka.client.common.TopicPartition;\n+import io.vertx.mutiny.kafka.client.consumer.KafkaConsumer;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Named;\n+import java.util.Set;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+@ApplicationScoped\n+@Named(\"rebalanced-example.rebalancer\")\n+public class KafkaRebalancedConsumerRebalanceListener implements KafkaConsumerRebalanceListener {\n+\n+    private static final Logger LOGGER = Logger.getLogger(KafkaRebalancedConsumerRebalanceListener.class.getName());\n+\n+    /**\n+     * When receiving a list of partitions will search for the earliest offset within 10 minutes\n+     * and seek the consumer to it. These operations are asynchronous so the inbound connector's\n+     * consumer WILL be paused until they are complete.\n+     *\n+     * @param consumer        underlying consumer\n+     * @param topicPartitions set of assigned topic partitions\n+     * @return An observable\n+     */\n+    @Override\n+    public Uni<Void> onPartitionsAssigned(KafkaConsumer<?, ?> consumer, Set<TopicPartition> topicPartitions) {\n+        // we must pause the consumer otherwise the inbound connector will continue to receive messages\n+        // while we seek to the correct offset.\n+        consumer.pause();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0d6ac5e1d1d240a11741b384e1cd491264f2858"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg0NTExMw==", "bodyText": "I thought about this. The listener isn't always used to seek to separate offset, so it's really up to the user.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r439845113", "createdAt": "2020-06-14T16:15:09Z", "author": {"login": "pcasaes"}, "path": "documentation/src/main/doc/modules/kafka/examples/inbound/KafkaRebalancedConsumerRebalanceListener.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package inbound;\n+\n+import io.smallrye.mutiny.Uni;\n+import io.smallrye.reactive.messaging.kafka.KafkaConsumerRebalanceListener;\n+import io.vertx.kafka.client.common.TopicPartition;\n+import io.vertx.mutiny.kafka.client.consumer.KafkaConsumer;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Named;\n+import java.util.Set;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+@ApplicationScoped\n+@Named(\"rebalanced-example.rebalancer\")\n+public class KafkaRebalancedConsumerRebalanceListener implements KafkaConsumerRebalanceListener {\n+\n+    private static final Logger LOGGER = Logger.getLogger(KafkaRebalancedConsumerRebalanceListener.class.getName());\n+\n+    /**\n+     * When receiving a list of partitions will search for the earliest offset within 10 minutes\n+     * and seek the consumer to it. These operations are asynchronous so the inbound connector's\n+     * consumer WILL be paused until they are complete.\n+     *\n+     * @param consumer        underlying consumer\n+     * @param topicPartitions set of assigned topic partitions\n+     * @return An observable\n+     */\n+    @Override\n+    public Uni<Void> onPartitionsAssigned(KafkaConsumer<?, ?> consumer, Set<TopicPartition> topicPartitions) {\n+        // we must pause the consumer otherwise the inbound connector will continue to receive messages\n+        // while we seek to the correct offset.\n+        consumer.pause();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgwMDU5Ng=="}, "originalCommit": {"oid": "b0d6ac5e1d1d240a11741b384e1cd491264f2858"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg0NzA4MQ==", "bodyText": "On further thought. It does make sense to do it. By the kafka documentation it is expected that the operations in the listener are completed before receiving events. If the user wishes to override they can resume from withing their implementation.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r439847081", "createdAt": "2020-06-14T16:38:54Z", "author": {"login": "pcasaes"}, "path": "documentation/src/main/doc/modules/kafka/examples/inbound/KafkaRebalancedConsumerRebalanceListener.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package inbound;\n+\n+import io.smallrye.mutiny.Uni;\n+import io.smallrye.reactive.messaging.kafka.KafkaConsumerRebalanceListener;\n+import io.vertx.kafka.client.common.TopicPartition;\n+import io.vertx.mutiny.kafka.client.consumer.KafkaConsumer;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Named;\n+import java.util.Set;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+@ApplicationScoped\n+@Named(\"rebalanced-example.rebalancer\")\n+public class KafkaRebalancedConsumerRebalanceListener implements KafkaConsumerRebalanceListener {\n+\n+    private static final Logger LOGGER = Logger.getLogger(KafkaRebalancedConsumerRebalanceListener.class.getName());\n+\n+    /**\n+     * When receiving a list of partitions will search for the earliest offset within 10 minutes\n+     * and seek the consumer to it. These operations are asynchronous so the inbound connector's\n+     * consumer WILL be paused until they are complete.\n+     *\n+     * @param consumer        underlying consumer\n+     * @param topicPartitions set of assigned topic partitions\n+     * @return An observable\n+     */\n+    @Override\n+    public Uni<Void> onPartitionsAssigned(KafkaConsumer<?, ?> consumer, Set<TopicPartition> topicPartitions) {\n+        // we must pause the consumer otherwise the inbound connector will continue to receive messages\n+        // while we seek to the correct offset.\n+        consumer.pause();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgwMDU5Ng=="}, "originalCommit": {"oid": "b0d6ac5e1d1d240a11741b384e1cd491264f2858"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg0Nzc1OQ==", "bodyText": "Agreed.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r439847759", "createdAt": "2020-06-14T16:47:16Z", "author": {"login": "cescoffier"}, "path": "documentation/src/main/doc/modules/kafka/examples/inbound/KafkaRebalancedConsumerRebalanceListener.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package inbound;\n+\n+import io.smallrye.mutiny.Uni;\n+import io.smallrye.reactive.messaging.kafka.KafkaConsumerRebalanceListener;\n+import io.vertx.kafka.client.common.TopicPartition;\n+import io.vertx.mutiny.kafka.client.consumer.KafkaConsumer;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Named;\n+import java.util.Set;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+@ApplicationScoped\n+@Named(\"rebalanced-example.rebalancer\")\n+public class KafkaRebalancedConsumerRebalanceListener implements KafkaConsumerRebalanceListener {\n+\n+    private static final Logger LOGGER = Logger.getLogger(KafkaRebalancedConsumerRebalanceListener.class.getName());\n+\n+    /**\n+     * When receiving a list of partitions will search for the earliest offset within 10 minutes\n+     * and seek the consumer to it. These operations are asynchronous so the inbound connector's\n+     * consumer WILL be paused until they are complete.\n+     *\n+     * @param consumer        underlying consumer\n+     * @param topicPartitions set of assigned topic partitions\n+     * @return An observable\n+     */\n+    @Override\n+    public Uni<Void> onPartitionsAssigned(KafkaConsumer<?, ?> consumer, Set<TopicPartition> topicPartitions) {\n+        // we must pause the consumer otherwise the inbound connector will continue to receive messages\n+        // while we seek to the correct offset.\n+        consumer.pause();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgwMDU5Ng=="}, "originalCommit": {"oid": "b0d6ac5e1d1d240a11741b384e1cd491264f2858"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg0NzgwNw==", "bodyText": "So it needs to be changed in this example and explained in the doc.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r439847807", "createdAt": "2020-06-14T16:47:39Z", "author": {"login": "cescoffier"}, "path": "documentation/src/main/doc/modules/kafka/examples/inbound/KafkaRebalancedConsumerRebalanceListener.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package inbound;\n+\n+import io.smallrye.mutiny.Uni;\n+import io.smallrye.reactive.messaging.kafka.KafkaConsumerRebalanceListener;\n+import io.vertx.kafka.client.common.TopicPartition;\n+import io.vertx.mutiny.kafka.client.consumer.KafkaConsumer;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Named;\n+import java.util.Set;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+@ApplicationScoped\n+@Named(\"rebalanced-example.rebalancer\")\n+public class KafkaRebalancedConsumerRebalanceListener implements KafkaConsumerRebalanceListener {\n+\n+    private static final Logger LOGGER = Logger.getLogger(KafkaRebalancedConsumerRebalanceListener.class.getName());\n+\n+    /**\n+     * When receiving a list of partitions will search for the earliest offset within 10 minutes\n+     * and seek the consumer to it. These operations are asynchronous so the inbound connector's\n+     * consumer WILL be paused until they are complete.\n+     *\n+     * @param consumer        underlying consumer\n+     * @param topicPartitions set of assigned topic partitions\n+     * @return An observable\n+     */\n+    @Override\n+    public Uni<Void> onPartitionsAssigned(KafkaConsumer<?, ?> consumer, Set<TopicPartition> topicPartitions) {\n+        // we must pause the consumer otherwise the inbound connector will continue to receive messages\n+        // while we seek to the correct offset.\n+        consumer.pause();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgwMDU5Ng=="}, "originalCommit": {"oid": "b0d6ac5e1d1d240a11741b384e1cd491264f2858"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTkzMDE4OnYy", "diffSide": "RIGHT", "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/KafkaConsumerRebalanceListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwNzoyOTozOVrOGjbTLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwNzozMDowMlrOGjbTVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgwMDYyMg==", "bodyText": "so, it's not an observable, it's a Uni indicating when the operation has completed.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r439800622", "createdAt": "2020-06-14T07:29:39Z", "author": {"login": "cescoffier"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/KafkaConsumerRebalanceListener.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package io.smallrye.reactive.messaging.kafka;\n+\n+import java.util.Set;\n+\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.kafka.client.common.TopicPartition;\n+import io.vertx.mutiny.kafka.client.consumer.KafkaConsumer;\n+\n+/**\n+ *\n+ * When implemented by a managed bean annotated with {@link javax.inject.Named} and\n+ * configured against a consumer, ex:\n+ * mp.messaging.incoming.example.consumer-rebalance-listener.name=ExampleConsumerRebalanceListener\n+ *\n+ * Will be applied as a consumer rebalance listener to the inbound connector's consumer.\n+ *\n+ * For more details:\n+ * \n+ * @see org.apache.kafka.clients.consumer.ConsumerRebalanceListener\n+ */\n+public interface KafkaConsumerRebalanceListener {\n+\n+    /**\n+     * Called when the consumer is assigned topic partitions\n+     * This method might be called for each consumer available to the connector\n+     *\n+     * @param consumer underlying consumer\n+     * @param topicPartitions set of assigned topic partitions\n+     * @return An observable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0d6ac5e1d1d240a11741b384e1cd491264f2858"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgwMDY2Mw==", "bodyText": "or failed :-)", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r439800663", "createdAt": "2020-06-14T07:30:02Z", "author": {"login": "cescoffier"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/KafkaConsumerRebalanceListener.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package io.smallrye.reactive.messaging.kafka;\n+\n+import java.util.Set;\n+\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.kafka.client.common.TopicPartition;\n+import io.vertx.mutiny.kafka.client.consumer.KafkaConsumer;\n+\n+/**\n+ *\n+ * When implemented by a managed bean annotated with {@link javax.inject.Named} and\n+ * configured against a consumer, ex:\n+ * mp.messaging.incoming.example.consumer-rebalance-listener.name=ExampleConsumerRebalanceListener\n+ *\n+ * Will be applied as a consumer rebalance listener to the inbound connector's consumer.\n+ *\n+ * For more details:\n+ * \n+ * @see org.apache.kafka.clients.consumer.ConsumerRebalanceListener\n+ */\n+public interface KafkaConsumerRebalanceListener {\n+\n+    /**\n+     * Called when the consumer is assigned topic partitions\n+     * This method might be called for each consumer available to the connector\n+     *\n+     * @param consumer underlying consumer\n+     * @param topicPartitions set of assigned topic partitions\n+     * @return An observable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgwMDYyMg=="}, "originalCommit": {"oid": "b0d6ac5e1d1d240a11741b384e1cd491264f2858"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTkzMDI0OnYy", "diffSide": "RIGHT", "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/KafkaConsumerRebalanceListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwNzoyOTo0OFrOGjbTOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwNzoyOTo0OFrOGjbTOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgwMDYzMw==", "bodyText": "so, it's not an observable, it's a Uni indicating when the operation has completed.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r439800633", "createdAt": "2020-06-14T07:29:48Z", "author": {"login": "cescoffier"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/KafkaConsumerRebalanceListener.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package io.smallrye.reactive.messaging.kafka;\n+\n+import java.util.Set;\n+\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.kafka.client.common.TopicPartition;\n+import io.vertx.mutiny.kafka.client.consumer.KafkaConsumer;\n+\n+/**\n+ *\n+ * When implemented by a managed bean annotated with {@link javax.inject.Named} and\n+ * configured against a consumer, ex:\n+ * mp.messaging.incoming.example.consumer-rebalance-listener.name=ExampleConsumerRebalanceListener\n+ *\n+ * Will be applied as a consumer rebalance listener to the inbound connector's consumer.\n+ *\n+ * For more details:\n+ * \n+ * @see org.apache.kafka.clients.consumer.ConsumerRebalanceListener\n+ */\n+public interface KafkaConsumerRebalanceListener {\n+\n+    /**\n+     * Called when the consumer is assigned topic partitions\n+     * This method might be called for each consumer available to the connector\n+     *\n+     * @param consumer underlying consumer\n+     * @param topicPartitions set of assigned topic partitions\n+     * @return An observable\n+     */\n+    Uni<Void> onPartitionsAssigned(KafkaConsumer<?, ?> consumer, Set<TopicPartition> topicPartitions);\n+\n+    /**\n+     * Called when the consumer is revoked topic partitions\n+     * This method might be called for each consumer available to the connector\n+     *\n+     * @param consumer underlying consumer\n+     * @param topicPartitions set of revoked topic partitions\n+     * @return An observable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0d6ac5e1d1d240a11741b384e1cd491264f2858"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTkzMDg1OnYy", "diffSide": "RIGHT", "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/i18n/KafkaLogging.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwNzozMDoyOVrOGjbTgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwNzozMDoyOVrOGjbTgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgwMDcwNw==", "bodyText": "Great! You already use the new logging system!", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r439800707", "createdAt": "2020-06-14T07:30:29Z", "author": {"login": "cescoffier"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/i18n/KafkaLogging.java", "diffHunk": "@@ -93,4 +93,12 @@\n     @LogMessage(level = Logger.Level.DEBUG)\n     @Message(id = 18218, value = \"An exception has been caught while closing the Kafka consumer\")\n     void exceptionOnClose(@Cause Throwable t);\n+\n+    @LogMessage(level = Logger.Level.ERROR)\n+    @Message(id = 18219, value = \"Unable to execute consumer rebalance listener for group '%s'\")\n+    void unableToExecuteConsumerReblanceListener(String consumerGroup, @Cause Throwable t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0d6ac5e1d1d240a11741b384e1cd491264f2858"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTkzMjE5OnYy", "diffSide": "RIGHT", "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/impl/KafkaSource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwNzozMjo0M1rOGjbUMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxNjo0ODozOVrOGjeL0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgwMDg4MQ==", "bodyText": "Do we want to handle the case with multiple listeners for a single topic?", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r439800881", "createdAt": "2020-06-14T07:32:43Z", "author": {"login": "cescoffier"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/impl/KafkaSource.java", "diffHunk": "@@ -59,14 +68,47 @@ public KafkaSource(Vertx vertx, KafkaConnectorIncomingConfiguration config) {\n         kafkaConfiguration.remove(\"broadcast\");\n         kafkaConfiguration.remove(\"partitions\");\n \n-        this.consumer = KafkaConsumer.create(vertx, kafkaConfiguration);\n+        final KafkaConsumer<K, V> kafkaConsumer = KafkaConsumer.create(vertx, kafkaConfiguration);\n+        final List<Publisher<KafkaConsumerRecord<K, V>>> multis = new ArrayList<>();\n+        config\n+                .getConsumerRebalanceListenerName()\n+                .map(name -> {\n+                    log.info(\"Loading KafkaConsumerRebalanceListener \" + name);\n+                    return NamedLiteral.of(name);\n+                })\n+                .map(consumerRebalanceListeners::select)\n+                .map(Instance::get)\n+                .ifPresent(listener -> multis.add(Multi", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0d6ac5e1d1d240a11741b384e1cd491264f2858"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg0NDg0Ng==", "bodyText": "There won't be multiple listeners. But the listener is called whenever there's a rebalance not just during startup.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r439844846", "createdAt": "2020-06-14T16:12:14Z", "author": {"login": "pcasaes"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/impl/KafkaSource.java", "diffHunk": "@@ -59,14 +68,47 @@ public KafkaSource(Vertx vertx, KafkaConnectorIncomingConfiguration config) {\n         kafkaConfiguration.remove(\"broadcast\");\n         kafkaConfiguration.remove(\"partitions\");\n \n-        this.consumer = KafkaConsumer.create(vertx, kafkaConfiguration);\n+        final KafkaConsumer<K, V> kafkaConsumer = KafkaConsumer.create(vertx, kafkaConfiguration);\n+        final List<Publisher<KafkaConsumerRecord<K, V>>> multis = new ArrayList<>();\n+        config\n+                .getConsumerRebalanceListenerName()\n+                .map(name -> {\n+                    log.info(\"Loading KafkaConsumerRebalanceListener \" + name);\n+                    return NamedLiteral.of(name);\n+                })\n+                .map(consumerRebalanceListeners::select)\n+                .map(Instance::get)\n+                .ifPresent(listener -> multis.add(Multi", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgwMDg4MQ=="}, "originalCommit": {"oid": "b0d6ac5e1d1d240a11741b384e1cd491264f2858"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg0Nzg4OA==", "bodyText": "Got it!", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r439847888", "createdAt": "2020-06-14T16:48:39Z", "author": {"login": "cescoffier"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/impl/KafkaSource.java", "diffHunk": "@@ -59,14 +68,47 @@ public KafkaSource(Vertx vertx, KafkaConnectorIncomingConfiguration config) {\n         kafkaConfiguration.remove(\"broadcast\");\n         kafkaConfiguration.remove(\"partitions\");\n \n-        this.consumer = KafkaConsumer.create(vertx, kafkaConfiguration);\n+        final KafkaConsumer<K, V> kafkaConsumer = KafkaConsumer.create(vertx, kafkaConfiguration);\n+        final List<Publisher<KafkaConsumerRecord<K, V>>> multis = new ArrayList<>();\n+        config\n+                .getConsumerRebalanceListenerName()\n+                .map(name -> {\n+                    log.info(\"Loading KafkaConsumerRebalanceListener \" + name);\n+                    return NamedLiteral.of(name);\n+                })\n+                .map(consumerRebalanceListeners::select)\n+                .map(Instance::get)\n+                .ifPresent(listener -> multis.add(Multi", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgwMDg4MQ=="}, "originalCommit": {"oid": "b0d6ac5e1d1d240a11741b384e1cd491264f2858"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDk1NDk5OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/doc/modules/kafka/pages/consumer-rebalance-listener.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNTo1NjowMFrOGjkD4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNTowNjoyN1rOGj2YKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk0NDE2MQ==", "bodyText": "Could you add a line telling that no messages will be received while the operation is in progress (and mention the pause/resume trick).", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r439944161", "createdAt": "2020-06-15T05:56:00Z", "author": {"login": "cescoffier"}, "path": "documentation/src/main/doc/modules/kafka/pages/consumer-rebalance-listener.adoc", "diffHunk": "@@ -0,0 +1,32 @@\n+[#kafka-consumer-rebalance-listener]\n+=== Consumer Rebalance Listener\n+\n+An implementation of the consumer re-balance listener can be provided which affords us fine grain controls of the assigned\n+offset. Common uses are storing offsets in a separate store to enable deliver exactly-once semantics, and starting from\n+a specific time window.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2d1571f5305c9de2095e4a6e6582e6be0645df2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI0NDI2NQ==", "bodyText": "done", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r440244265", "createdAt": "2020-06-15T15:06:27Z", "author": {"login": "pcasaes"}, "path": "documentation/src/main/doc/modules/kafka/pages/consumer-rebalance-listener.adoc", "diffHunk": "@@ -0,0 +1,32 @@\n+[#kafka-consumer-rebalance-listener]\n+=== Consumer Rebalance Listener\n+\n+An implementation of the consumer re-balance listener can be provided which affords us fine grain controls of the assigned\n+offset. Common uses are storing offsets in a separate store to enable deliver exactly-once semantics, and starting from\n+a specific time window.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk0NDE2MQ=="}, "originalCommit": {"oid": "c2d1571f5305c9de2095e4a6e6582e6be0645df2"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDk1NzI2OnYy", "diffSide": "RIGHT", "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/KafkaConsumerRebalanceListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNTo1NzoxOFrOGjkFZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNTowNjozNFrOGj2Yfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk0NDU1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * To configure set the name in the inbound connector's consumer re-balance listener, ex:\n          \n          \n            \n             * To configure which listener you want to use, set the name in the inbound connector's consumer re-balance listener attribute, ex:", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r439944550", "createdAt": "2020-06-15T05:57:18Z", "author": {"login": "cescoffier"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/KafkaConsumerRebalanceListener.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package io.smallrye.reactive.messaging.kafka;\n+\n+import java.util.Set;\n+\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.kafka.client.common.TopicPartition;\n+import io.vertx.mutiny.kafka.client.consumer.KafkaConsumer;\n+\n+/**\n+ *\n+ * When implemented by a managed bean annotated with {@link javax.inject.Named} and\n+ * configured against an inbound connector will be applied as a consumer re-balance listener\n+ * to that inbound connector's consumer.\n+ *\n+ *\n+ * To configure set the name in the inbound connector's consumer re-balance listener, ex:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2d1571f5305c9de2095e4a6e6582e6be0645df2"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI0NDM1MQ==", "bodyText": "done", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r440244351", "createdAt": "2020-06-15T15:06:34Z", "author": {"login": "pcasaes"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/KafkaConsumerRebalanceListener.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package io.smallrye.reactive.messaging.kafka;\n+\n+import java.util.Set;\n+\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.kafka.client.common.TopicPartition;\n+import io.vertx.mutiny.kafka.client.consumer.KafkaConsumer;\n+\n+/**\n+ *\n+ * When implemented by a managed bean annotated with {@link javax.inject.Named} and\n+ * configured against an inbound connector will be applied as a consumer re-balance listener\n+ * to that inbound connector's consumer.\n+ *\n+ *\n+ * To configure set the name in the inbound connector's consumer re-balance listener, ex:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk0NDU1MA=="}, "originalCommit": {"oid": "c2d1571f5305c9de2095e4a6e6582e6be0645df2"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDk1OTM0OnYy", "diffSide": "RIGHT", "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/KafkaConsumerRebalanceListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNTo1ODoxOFrOGjkGjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNTowNjozOVrOGj2YvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk0NDg0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Or set the name to be the same as the group id, ex:\n          \n          \n            \n             * Alternatively, name your listened (using the {@code @Named} annotation) to be group id used by the connector, ex:", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r439944847", "createdAt": "2020-06-15T05:58:18Z", "author": {"login": "cescoffier"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/KafkaConsumerRebalanceListener.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package io.smallrye.reactive.messaging.kafka;\n+\n+import java.util.Set;\n+\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.kafka.client.common.TopicPartition;\n+import io.vertx.mutiny.kafka.client.consumer.KafkaConsumer;\n+\n+/**\n+ *\n+ * When implemented by a managed bean annotated with {@link javax.inject.Named} and\n+ * configured against an inbound connector will be applied as a consumer re-balance listener\n+ * to that inbound connector's consumer.\n+ *\n+ *\n+ * To configure set the name in the inbound connector's consumer re-balance listener, ex:\n+ * mp.messaging.incoming.example.consumer-rebalance-listener.name=ExampleConsumerRebalanceListener\n+ * @Named(\"ExampleConsumerRebalanceListener\")\n+ *\n+ * Or set the name to be the same as the group id, ex:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2d1571f5305c9de2095e4a6e6582e6be0645df2"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI0NDQxMg==", "bodyText": "done", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r440244412", "createdAt": "2020-06-15T15:06:39Z", "author": {"login": "pcasaes"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/KafkaConsumerRebalanceListener.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package io.smallrye.reactive.messaging.kafka;\n+\n+import java.util.Set;\n+\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.kafka.client.common.TopicPartition;\n+import io.vertx.mutiny.kafka.client.consumer.KafkaConsumer;\n+\n+/**\n+ *\n+ * When implemented by a managed bean annotated with {@link javax.inject.Named} and\n+ * configured against an inbound connector will be applied as a consumer re-balance listener\n+ * to that inbound connector's consumer.\n+ *\n+ *\n+ * To configure set the name in the inbound connector's consumer re-balance listener, ex:\n+ * mp.messaging.incoming.example.consumer-rebalance-listener.name=ExampleConsumerRebalanceListener\n+ * @Named(\"ExampleConsumerRebalanceListener\")\n+ *\n+ * Or set the name to be the same as the group id, ex:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk0NDg0Nw=="}, "originalCommit": {"oid": "c2d1571f5305c9de2095e4a6e6582e6be0645df2"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDk2MTI0OnYy", "diffSide": "RIGHT", "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/KafkaConsumerRebalanceListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNTo1OToxN1rOGjkHrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNTowNzoyM1rOGj2a2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk0NTEzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * mp.messaging.incoming.example.consumer-rebalance-listener.name=ExampleConsumerRebalanceListener\n          \n          \n            \n            {@code\n          \n          \n            \n             mp.messaging.incoming.example.consumer-rebalance- listener.name=ExampleConsumerRebalanceListener\n          \n          \n            \n            }\n          \n          \n            \n            \n          \n          \n            \n            {@code @Named(\"ExampleConsumerRebalanceListener\")}", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r439945135", "createdAt": "2020-06-15T05:59:17Z", "author": {"login": "cescoffier"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/KafkaConsumerRebalanceListener.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package io.smallrye.reactive.messaging.kafka;\n+\n+import java.util.Set;\n+\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.kafka.client.common.TopicPartition;\n+import io.vertx.mutiny.kafka.client.consumer.KafkaConsumer;\n+\n+/**\n+ *\n+ * When implemented by a managed bean annotated with {@link javax.inject.Named} and\n+ * configured against an inbound connector will be applied as a consumer re-balance listener\n+ * to that inbound connector's consumer.\n+ *\n+ *\n+ * To configure set the name in the inbound connector's consumer re-balance listener, ex:\n+ * mp.messaging.incoming.example.consumer-rebalance-listener.name=ExampleConsumerRebalanceListener", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2d1571f5305c9de2095e4a6e6582e6be0645df2"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI0NDk1NA==", "bodyText": "done", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r440244954", "createdAt": "2020-06-15T15:07:23Z", "author": {"login": "pcasaes"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/KafkaConsumerRebalanceListener.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package io.smallrye.reactive.messaging.kafka;\n+\n+import java.util.Set;\n+\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.kafka.client.common.TopicPartition;\n+import io.vertx.mutiny.kafka.client.consumer.KafkaConsumer;\n+\n+/**\n+ *\n+ * When implemented by a managed bean annotated with {@link javax.inject.Named} and\n+ * configured against an inbound connector will be applied as a consumer re-balance listener\n+ * to that inbound connector's consumer.\n+ *\n+ *\n+ * To configure set the name in the inbound connector's consumer re-balance listener, ex:\n+ * mp.messaging.incoming.example.consumer-rebalance-listener.name=ExampleConsumerRebalanceListener", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk0NTEzNQ=="}, "originalCommit": {"oid": "c2d1571f5305c9de2095e4a6e6582e6be0645df2"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDk2MjA4OnYy", "diffSide": "RIGHT", "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/KafkaConsumerRebalanceListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNTo1OTo0N1rOGjkINg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNTowNzozNFrOGj2baQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk0NTI3MA==", "bodyText": "Same code trick (or the javadoc will be wrong)", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r439945270", "createdAt": "2020-06-15T05:59:47Z", "author": {"login": "cescoffier"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/KafkaConsumerRebalanceListener.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package io.smallrye.reactive.messaging.kafka;\n+\n+import java.util.Set;\n+\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.kafka.client.common.TopicPartition;\n+import io.vertx.mutiny.kafka.client.consumer.KafkaConsumer;\n+\n+/**\n+ *\n+ * When implemented by a managed bean annotated with {@link javax.inject.Named} and\n+ * configured against an inbound connector will be applied as a consumer re-balance listener\n+ * to that inbound connector's consumer.\n+ *\n+ *\n+ * To configure set the name in the inbound connector's consumer re-balance listener, ex:\n+ * mp.messaging.incoming.example.consumer-rebalance-listener.name=ExampleConsumerRebalanceListener\n+ * @Named(\"ExampleConsumerRebalanceListener\")\n+ *\n+ * Or set the name to be the same as the group id, ex:\n+ * mp.messaging.incoming.example.group.id=my-group", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2d1571f5305c9de2095e4a6e6582e6be0645df2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI0NTA5Nw==", "bodyText": "done", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r440245097", "createdAt": "2020-06-15T15:07:34Z", "author": {"login": "pcasaes"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/KafkaConsumerRebalanceListener.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package io.smallrye.reactive.messaging.kafka;\n+\n+import java.util.Set;\n+\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.kafka.client.common.TopicPartition;\n+import io.vertx.mutiny.kafka.client.consumer.KafkaConsumer;\n+\n+/**\n+ *\n+ * When implemented by a managed bean annotated with {@link javax.inject.Named} and\n+ * configured against an inbound connector will be applied as a consumer re-balance listener\n+ * to that inbound connector's consumer.\n+ *\n+ *\n+ * To configure set the name in the inbound connector's consumer re-balance listener, ex:\n+ * mp.messaging.incoming.example.consumer-rebalance-listener.name=ExampleConsumerRebalanceListener\n+ * @Named(\"ExampleConsumerRebalanceListener\")\n+ *\n+ * Or set the name to be the same as the group id, ex:\n+ * mp.messaging.incoming.example.group.id=my-group", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk0NTI3MA=="}, "originalCommit": {"oid": "c2d1571f5305c9de2095e4a6e6582e6be0645df2"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDk2Mzg4OnYy", "diffSide": "RIGHT", "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/impl/KafkaSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjowMDozN1rOGjkJRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNTowNzoyOVrOGj2bKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk0NTU0Mw==", "bodyText": "The new attribute need to be removed from the kafkaConfiguration map. It avoids a warning.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r439945543", "createdAt": "2020-06-15T06:00:37Z", "author": {"login": "cescoffier"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/impl/KafkaSource.java", "diffHunk": "@@ -59,7 +66,74 @@ public KafkaSource(Vertx vertx, KafkaConnectorIncomingConfiguration config) {\n         kafkaConfiguration.remove(\"broadcast\");\n         kafkaConfiguration.remove(\"partitions\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2d1571f5305c9de2095e4a6e6582e6be0645df2"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI0NTAzMw==", "bodyText": "done", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r440245033", "createdAt": "2020-06-15T15:07:29Z", "author": {"login": "pcasaes"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/impl/KafkaSource.java", "diffHunk": "@@ -59,7 +66,74 @@ public KafkaSource(Vertx vertx, KafkaConnectorIncomingConfiguration config) {\n         kafkaConfiguration.remove(\"broadcast\");\n         kafkaConfiguration.remove(\"partitions\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk0NTU0Mw=="}, "originalCommit": {"oid": "c2d1571f5305c9de2095e4a6e6582e6be0645df2"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDk2NzIzOnYy", "diffSide": "RIGHT", "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/impl/KafkaSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjowMjoxOFrOGjkLUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNTowODowM1rOGj2cyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk0NjA2NA==", "bodyText": "You may resume twice (not sure if it's harmful). I would recommend moving the onFailure and onItem in the subscribe part.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r439946064", "createdAt": "2020-06-15T06:02:18Z", "author": {"login": "cescoffier"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/impl/KafkaSource.java", "diffHunk": "@@ -59,7 +66,74 @@ public KafkaSource(Vertx vertx, KafkaConnectorIncomingConfiguration config) {\n         kafkaConfiguration.remove(\"broadcast\");\n         kafkaConfiguration.remove(\"partitions\");\n \n-        this.consumer = KafkaConsumer.create(vertx, kafkaConfiguration);\n+        final KafkaConsumer<K, V> kafkaConsumer = KafkaConsumer.create(vertx, kafkaConfiguration);\n+        config\n+                .getConsumerRebalanceListenerName()\n+                .map(name -> {\n+                    log.loadingConsumerRebalanceListenerFromConfiguredName(name);\n+                    return NamedLiteral.of(name);\n+                })\n+                .map(consumerRebalanceListeners::select)\n+                .map(Instance::get)\n+                .map(Optional::of)\n+                .orElseGet(() -> {\n+                    Instance<KafkaConsumerRebalanceListener> rebalanceFromGroupListeners = consumerRebalanceListeners\n+                            .select(NamedLiteral.of(group));\n+\n+                    if (!rebalanceFromGroupListeners.isUnsatisfied()) {\n+                        log.loadingConsumerRebalanceListenerFromGroupId(group);\n+                        return Optional.of(rebalanceFromGroupListeners.get());\n+                    }\n+                    return Optional.empty();\n+                })\n+                .ifPresent(listener -> {\n+                    // If the re-balance assign fails we must resume the consumer in order to force a consumer group\n+                    // re-balance. To do so we must wait until after the poll interval time or\n+                    // poll interval time + session timeout if group instance id is not null.\n+                    final long consumerReEnableWaitTime = Long.parseLong(\n+                            kafkaConfiguration.getOrDefault(ConsumerConfig.MAX_POLL_INTERVAL_MS_CONFIG, \"300000\"))\n+                            + (kafkaConfiguration.get(ConsumerConfig.GROUP_INSTANCE_ID_CONFIG) == null ? 0L\n+                                    : Long.parseLong(\n+                                            kafkaConfiguration.getOrDefault(ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG,\n+                                                    \"10000\")));\n+\n+                    // We will retry the re-balance consumer listener on failure using an exponential backoff until\n+                    // we can allow the kafka consumer to do it on its own. We do this because by default it would take\n+                    // 5 minutes for kafka to do this which is too long. With defaults consumerReEnableWaitTime would be\n+                    // 500000 millis. We also can't simply retry indefinitely because once the consumer has been paused\n+                    // for consumerReEnableWaitTime kafka will force a re-balance once resumed.\n+                    // We are doing retries using the time intervals 2s, 4s, 8s, 10s, 10s, 10s, 10s...\n+                    // The following formula will give us a reasonable number for retry attempt that is just greater\n+                    // than consumerReEnableWaitTime\n+                    final long consumerReEnableRetryMaxAttempts = 1\n+                            + Math.max(0, 3 + (consumerReEnableWaitTime - 14_000) / 10_000);\n+\n+                    kafkaConsumer.partitionsAssignedHandler(set -> {\n+                        kafkaConsumer.pause();\n+                        log.executingConsumerAssignedRebalanceListener(group);\n+                        listener.onPartitionsAssigned(kafkaConsumer, set)\n+                                .onFailure().invoke(t -> log.unableToExecuteConsumerAssignedRebalanceListener(group, t))\n+                                .onFailure().retry().withBackOff(Duration.ofSeconds(1), Duration.ofSeconds(10)).withJitter(0.0)\n+                                .atMost(consumerReEnableRetryMaxAttempts)\n+                                .onFailure().invoke(t -> {\n+                                    log.reEnablingConsumerforGroup(group);\n+                                    kafkaConsumer.resume();\n+                                })\n+                                .onItem().invoke(a -> kafkaConsumer.resume())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2d1571f5305c9de2095e4a6e6582e6be0645df2"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI0NTQ1MQ==", "bodyText": "done", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r440245451", "createdAt": "2020-06-15T15:08:03Z", "author": {"login": "pcasaes"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/impl/KafkaSource.java", "diffHunk": "@@ -59,7 +66,74 @@ public KafkaSource(Vertx vertx, KafkaConnectorIncomingConfiguration config) {\n         kafkaConfiguration.remove(\"broadcast\");\n         kafkaConfiguration.remove(\"partitions\");\n \n-        this.consumer = KafkaConsumer.create(vertx, kafkaConfiguration);\n+        final KafkaConsumer<K, V> kafkaConsumer = KafkaConsumer.create(vertx, kafkaConfiguration);\n+        config\n+                .getConsumerRebalanceListenerName()\n+                .map(name -> {\n+                    log.loadingConsumerRebalanceListenerFromConfiguredName(name);\n+                    return NamedLiteral.of(name);\n+                })\n+                .map(consumerRebalanceListeners::select)\n+                .map(Instance::get)\n+                .map(Optional::of)\n+                .orElseGet(() -> {\n+                    Instance<KafkaConsumerRebalanceListener> rebalanceFromGroupListeners = consumerRebalanceListeners\n+                            .select(NamedLiteral.of(group));\n+\n+                    if (!rebalanceFromGroupListeners.isUnsatisfied()) {\n+                        log.loadingConsumerRebalanceListenerFromGroupId(group);\n+                        return Optional.of(rebalanceFromGroupListeners.get());\n+                    }\n+                    return Optional.empty();\n+                })\n+                .ifPresent(listener -> {\n+                    // If the re-balance assign fails we must resume the consumer in order to force a consumer group\n+                    // re-balance. To do so we must wait until after the poll interval time or\n+                    // poll interval time + session timeout if group instance id is not null.\n+                    final long consumerReEnableWaitTime = Long.parseLong(\n+                            kafkaConfiguration.getOrDefault(ConsumerConfig.MAX_POLL_INTERVAL_MS_CONFIG, \"300000\"))\n+                            + (kafkaConfiguration.get(ConsumerConfig.GROUP_INSTANCE_ID_CONFIG) == null ? 0L\n+                                    : Long.parseLong(\n+                                            kafkaConfiguration.getOrDefault(ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG,\n+                                                    \"10000\")));\n+\n+                    // We will retry the re-balance consumer listener on failure using an exponential backoff until\n+                    // we can allow the kafka consumer to do it on its own. We do this because by default it would take\n+                    // 5 minutes for kafka to do this which is too long. With defaults consumerReEnableWaitTime would be\n+                    // 500000 millis. We also can't simply retry indefinitely because once the consumer has been paused\n+                    // for consumerReEnableWaitTime kafka will force a re-balance once resumed.\n+                    // We are doing retries using the time intervals 2s, 4s, 8s, 10s, 10s, 10s, 10s...\n+                    // The following formula will give us a reasonable number for retry attempt that is just greater\n+                    // than consumerReEnableWaitTime\n+                    final long consumerReEnableRetryMaxAttempts = 1\n+                            + Math.max(0, 3 + (consumerReEnableWaitTime - 14_000) / 10_000);\n+\n+                    kafkaConsumer.partitionsAssignedHandler(set -> {\n+                        kafkaConsumer.pause();\n+                        log.executingConsumerAssignedRebalanceListener(group);\n+                        listener.onPartitionsAssigned(kafkaConsumer, set)\n+                                .onFailure().invoke(t -> log.unableToExecuteConsumerAssignedRebalanceListener(group, t))\n+                                .onFailure().retry().withBackOff(Duration.ofSeconds(1), Duration.ofSeconds(10)).withJitter(0.0)\n+                                .atMost(consumerReEnableRetryMaxAttempts)\n+                                .onFailure().invoke(t -> {\n+                                    log.reEnablingConsumerforGroup(group);\n+                                    kafkaConsumer.resume();\n+                                })\n+                                .onItem().invoke(a -> kafkaConsumer.resume())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk0NjA2NA=="}, "originalCommit": {"oid": "c2d1571f5305c9de2095e4a6e6582e6be0645df2"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDk2ODExOnYy", "diffSide": "RIGHT", "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/impl/KafkaSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjowMjo0OFrOGjkL0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNDoyMzo0OFrOGj0e9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk0NjE5NQ==", "bodyText": "Should we remove the jitter?", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r439946195", "createdAt": "2020-06-15T06:02:48Z", "author": {"login": "cescoffier"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/impl/KafkaSource.java", "diffHunk": "@@ -59,7 +66,74 @@ public KafkaSource(Vertx vertx, KafkaConnectorIncomingConfiguration config) {\n         kafkaConfiguration.remove(\"broadcast\");\n         kafkaConfiguration.remove(\"partitions\");\n \n-        this.consumer = KafkaConsumer.create(vertx, kafkaConfiguration);\n+        final KafkaConsumer<K, V> kafkaConsumer = KafkaConsumer.create(vertx, kafkaConfiguration);\n+        config\n+                .getConsumerRebalanceListenerName()\n+                .map(name -> {\n+                    log.loadingConsumerRebalanceListenerFromConfiguredName(name);\n+                    return NamedLiteral.of(name);\n+                })\n+                .map(consumerRebalanceListeners::select)\n+                .map(Instance::get)\n+                .map(Optional::of)\n+                .orElseGet(() -> {\n+                    Instance<KafkaConsumerRebalanceListener> rebalanceFromGroupListeners = consumerRebalanceListeners\n+                            .select(NamedLiteral.of(group));\n+\n+                    if (!rebalanceFromGroupListeners.isUnsatisfied()) {\n+                        log.loadingConsumerRebalanceListenerFromGroupId(group);\n+                        return Optional.of(rebalanceFromGroupListeners.get());\n+                    }\n+                    return Optional.empty();\n+                })\n+                .ifPresent(listener -> {\n+                    // If the re-balance assign fails we must resume the consumer in order to force a consumer group\n+                    // re-balance. To do so we must wait until after the poll interval time or\n+                    // poll interval time + session timeout if group instance id is not null.\n+                    final long consumerReEnableWaitTime = Long.parseLong(\n+                            kafkaConfiguration.getOrDefault(ConsumerConfig.MAX_POLL_INTERVAL_MS_CONFIG, \"300000\"))\n+                            + (kafkaConfiguration.get(ConsumerConfig.GROUP_INSTANCE_ID_CONFIG) == null ? 0L\n+                                    : Long.parseLong(\n+                                            kafkaConfiguration.getOrDefault(ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG,\n+                                                    \"10000\")));\n+\n+                    // We will retry the re-balance consumer listener on failure using an exponential backoff until\n+                    // we can allow the kafka consumer to do it on its own. We do this because by default it would take\n+                    // 5 minutes for kafka to do this which is too long. With defaults consumerReEnableWaitTime would be\n+                    // 500000 millis. We also can't simply retry indefinitely because once the consumer has been paused\n+                    // for consumerReEnableWaitTime kafka will force a re-balance once resumed.\n+                    // We are doing retries using the time intervals 2s, 4s, 8s, 10s, 10s, 10s, 10s...\n+                    // The following formula will give us a reasonable number for retry attempt that is just greater\n+                    // than consumerReEnableWaitTime\n+                    final long consumerReEnableRetryMaxAttempts = 1\n+                            + Math.max(0, 3 + (consumerReEnableWaitTime - 14_000) / 10_000);\n+\n+                    kafkaConsumer.partitionsAssignedHandler(set -> {\n+                        kafkaConsumer.pause();\n+                        log.executingConsumerAssignedRebalanceListener(group);\n+                        listener.onPartitionsAssigned(kafkaConsumer, set)\n+                                .onFailure().invoke(t -> log.unableToExecuteConsumerAssignedRebalanceListener(group, t))\n+                                .onFailure().retry().withBackOff(Duration.ofSeconds(1), Duration.ofSeconds(10)).withJitter(0.0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2d1571f5305c9de2095e4a6e6582e6be0645df2"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIxMzIzNw==", "bodyText": "I think so. I'm worried that it would cause the resume to start before the session times out. Unfortunately UniRetry doesn't have a untilTime method. That would've been super helpful. It has an until but that doesn't do an exponential backoff.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r440213237", "createdAt": "2020-06-15T14:23:48Z", "author": {"login": "pcasaes"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/impl/KafkaSource.java", "diffHunk": "@@ -59,7 +66,74 @@ public KafkaSource(Vertx vertx, KafkaConnectorIncomingConfiguration config) {\n         kafkaConfiguration.remove(\"broadcast\");\n         kafkaConfiguration.remove(\"partitions\");\n \n-        this.consumer = KafkaConsumer.create(vertx, kafkaConfiguration);\n+        final KafkaConsumer<K, V> kafkaConsumer = KafkaConsumer.create(vertx, kafkaConfiguration);\n+        config\n+                .getConsumerRebalanceListenerName()\n+                .map(name -> {\n+                    log.loadingConsumerRebalanceListenerFromConfiguredName(name);\n+                    return NamedLiteral.of(name);\n+                })\n+                .map(consumerRebalanceListeners::select)\n+                .map(Instance::get)\n+                .map(Optional::of)\n+                .orElseGet(() -> {\n+                    Instance<KafkaConsumerRebalanceListener> rebalanceFromGroupListeners = consumerRebalanceListeners\n+                            .select(NamedLiteral.of(group));\n+\n+                    if (!rebalanceFromGroupListeners.isUnsatisfied()) {\n+                        log.loadingConsumerRebalanceListenerFromGroupId(group);\n+                        return Optional.of(rebalanceFromGroupListeners.get());\n+                    }\n+                    return Optional.empty();\n+                })\n+                .ifPresent(listener -> {\n+                    // If the re-balance assign fails we must resume the consumer in order to force a consumer group\n+                    // re-balance. To do so we must wait until after the poll interval time or\n+                    // poll interval time + session timeout if group instance id is not null.\n+                    final long consumerReEnableWaitTime = Long.parseLong(\n+                            kafkaConfiguration.getOrDefault(ConsumerConfig.MAX_POLL_INTERVAL_MS_CONFIG, \"300000\"))\n+                            + (kafkaConfiguration.get(ConsumerConfig.GROUP_INSTANCE_ID_CONFIG) == null ? 0L\n+                                    : Long.parseLong(\n+                                            kafkaConfiguration.getOrDefault(ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG,\n+                                                    \"10000\")));\n+\n+                    // We will retry the re-balance consumer listener on failure using an exponential backoff until\n+                    // we can allow the kafka consumer to do it on its own. We do this because by default it would take\n+                    // 5 minutes for kafka to do this which is too long. With defaults consumerReEnableWaitTime would be\n+                    // 500000 millis. We also can't simply retry indefinitely because once the consumer has been paused\n+                    // for consumerReEnableWaitTime kafka will force a re-balance once resumed.\n+                    // We are doing retries using the time intervals 2s, 4s, 8s, 10s, 10s, 10s, 10s...\n+                    // The following formula will give us a reasonable number for retry attempt that is just greater\n+                    // than consumerReEnableWaitTime\n+                    final long consumerReEnableRetryMaxAttempts = 1\n+                            + Math.max(0, 3 + (consumerReEnableWaitTime - 14_000) / 10_000);\n+\n+                    kafkaConsumer.partitionsAssignedHandler(set -> {\n+                        kafkaConsumer.pause();\n+                        log.executingConsumerAssignedRebalanceListener(group);\n+                        listener.onPartitionsAssigned(kafkaConsumer, set)\n+                                .onFailure().invoke(t -> log.unableToExecuteConsumerAssignedRebalanceListener(group, t))\n+                                .onFailure().retry().withBackOff(Duration.ofSeconds(1), Duration.ofSeconds(10)).withJitter(0.0)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk0NjE5NQ=="}, "originalCommit": {"oid": "c2d1571f5305c9de2095e4a6e6582e6be0645df2"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDk2OTE2OnYy", "diffSide": "RIGHT", "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/impl/KafkaSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjowMzoyMFrOGjkMbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNTowODoxNVrOGj2dPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk0NjM1MA==", "bodyText": "I would recommend moving this to the subscribe.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r439946350", "createdAt": "2020-06-15T06:03:20Z", "author": {"login": "cescoffier"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/impl/KafkaSource.java", "diffHunk": "@@ -59,7 +66,74 @@ public KafkaSource(Vertx vertx, KafkaConnectorIncomingConfiguration config) {\n         kafkaConfiguration.remove(\"broadcast\");\n         kafkaConfiguration.remove(\"partitions\");\n \n-        this.consumer = KafkaConsumer.create(vertx, kafkaConfiguration);\n+        final KafkaConsumer<K, V> kafkaConsumer = KafkaConsumer.create(vertx, kafkaConfiguration);\n+        config\n+                .getConsumerRebalanceListenerName()\n+                .map(name -> {\n+                    log.loadingConsumerRebalanceListenerFromConfiguredName(name);\n+                    return NamedLiteral.of(name);\n+                })\n+                .map(consumerRebalanceListeners::select)\n+                .map(Instance::get)\n+                .map(Optional::of)\n+                .orElseGet(() -> {\n+                    Instance<KafkaConsumerRebalanceListener> rebalanceFromGroupListeners = consumerRebalanceListeners\n+                            .select(NamedLiteral.of(group));\n+\n+                    if (!rebalanceFromGroupListeners.isUnsatisfied()) {\n+                        log.loadingConsumerRebalanceListenerFromGroupId(group);\n+                        return Optional.of(rebalanceFromGroupListeners.get());\n+                    }\n+                    return Optional.empty();\n+                })\n+                .ifPresent(listener -> {\n+                    // If the re-balance assign fails we must resume the consumer in order to force a consumer group\n+                    // re-balance. To do so we must wait until after the poll interval time or\n+                    // poll interval time + session timeout if group instance id is not null.\n+                    final long consumerReEnableWaitTime = Long.parseLong(\n+                            kafkaConfiguration.getOrDefault(ConsumerConfig.MAX_POLL_INTERVAL_MS_CONFIG, \"300000\"))\n+                            + (kafkaConfiguration.get(ConsumerConfig.GROUP_INSTANCE_ID_CONFIG) == null ? 0L\n+                                    : Long.parseLong(\n+                                            kafkaConfiguration.getOrDefault(ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG,\n+                                                    \"10000\")));\n+\n+                    // We will retry the re-balance consumer listener on failure using an exponential backoff until\n+                    // we can allow the kafka consumer to do it on its own. We do this because by default it would take\n+                    // 5 minutes for kafka to do this which is too long. With defaults consumerReEnableWaitTime would be\n+                    // 500000 millis. We also can't simply retry indefinitely because once the consumer has been paused\n+                    // for consumerReEnableWaitTime kafka will force a re-balance once resumed.\n+                    // We are doing retries using the time intervals 2s, 4s, 8s, 10s, 10s, 10s, 10s...\n+                    // The following formula will give us a reasonable number for retry attempt that is just greater\n+                    // than consumerReEnableWaitTime\n+                    final long consumerReEnableRetryMaxAttempts = 1\n+                            + Math.max(0, 3 + (consumerReEnableWaitTime - 14_000) / 10_000);\n+\n+                    kafkaConsumer.partitionsAssignedHandler(set -> {\n+                        kafkaConsumer.pause();\n+                        log.executingConsumerAssignedRebalanceListener(group);\n+                        listener.onPartitionsAssigned(kafkaConsumer, set)\n+                                .onFailure().invoke(t -> log.unableToExecuteConsumerAssignedRebalanceListener(group, t))\n+                                .onFailure().retry().withBackOff(Duration.ofSeconds(1), Duration.ofSeconds(10)).withJitter(0.0)\n+                                .atMost(consumerReEnableRetryMaxAttempts)\n+                                .onFailure().invoke(t -> {\n+                                    log.reEnablingConsumerforGroup(group);\n+                                    kafkaConsumer.resume();\n+                                })\n+                                .onItem().invoke(a -> kafkaConsumer.resume())\n+                                .subscribe()\n+                                .with(a -> log.executedConsumerAssignedRebalanceListener(group));\n+                    });\n+\n+                    kafkaConsumer.partitionsRevokedHandler(set -> {\n+                        log.executingConsumerRevokedRebalanceListener(group);\n+                        listener.onPartitionsRevoked(kafkaConsumer, set)\n+                                .onFailure().invoke(t -> log.unableToExecuteConsumerRevokedRebalanceListener(group, t))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2d1571f5305c9de2095e4a6e6582e6be0645df2"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI0NTU2Ng==", "bodyText": "done", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r440245566", "createdAt": "2020-06-15T15:08:15Z", "author": {"login": "pcasaes"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/impl/KafkaSource.java", "diffHunk": "@@ -59,7 +66,74 @@ public KafkaSource(Vertx vertx, KafkaConnectorIncomingConfiguration config) {\n         kafkaConfiguration.remove(\"broadcast\");\n         kafkaConfiguration.remove(\"partitions\");\n \n-        this.consumer = KafkaConsumer.create(vertx, kafkaConfiguration);\n+        final KafkaConsumer<K, V> kafkaConsumer = KafkaConsumer.create(vertx, kafkaConfiguration);\n+        config\n+                .getConsumerRebalanceListenerName()\n+                .map(name -> {\n+                    log.loadingConsumerRebalanceListenerFromConfiguredName(name);\n+                    return NamedLiteral.of(name);\n+                })\n+                .map(consumerRebalanceListeners::select)\n+                .map(Instance::get)\n+                .map(Optional::of)\n+                .orElseGet(() -> {\n+                    Instance<KafkaConsumerRebalanceListener> rebalanceFromGroupListeners = consumerRebalanceListeners\n+                            .select(NamedLiteral.of(group));\n+\n+                    if (!rebalanceFromGroupListeners.isUnsatisfied()) {\n+                        log.loadingConsumerRebalanceListenerFromGroupId(group);\n+                        return Optional.of(rebalanceFromGroupListeners.get());\n+                    }\n+                    return Optional.empty();\n+                })\n+                .ifPresent(listener -> {\n+                    // If the re-balance assign fails we must resume the consumer in order to force a consumer group\n+                    // re-balance. To do so we must wait until after the poll interval time or\n+                    // poll interval time + session timeout if group instance id is not null.\n+                    final long consumerReEnableWaitTime = Long.parseLong(\n+                            kafkaConfiguration.getOrDefault(ConsumerConfig.MAX_POLL_INTERVAL_MS_CONFIG, \"300000\"))\n+                            + (kafkaConfiguration.get(ConsumerConfig.GROUP_INSTANCE_ID_CONFIG) == null ? 0L\n+                                    : Long.parseLong(\n+                                            kafkaConfiguration.getOrDefault(ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG,\n+                                                    \"10000\")));\n+\n+                    // We will retry the re-balance consumer listener on failure using an exponential backoff until\n+                    // we can allow the kafka consumer to do it on its own. We do this because by default it would take\n+                    // 5 minutes for kafka to do this which is too long. With defaults consumerReEnableWaitTime would be\n+                    // 500000 millis. We also can't simply retry indefinitely because once the consumer has been paused\n+                    // for consumerReEnableWaitTime kafka will force a re-balance once resumed.\n+                    // We are doing retries using the time intervals 2s, 4s, 8s, 10s, 10s, 10s, 10s...\n+                    // The following formula will give us a reasonable number for retry attempt that is just greater\n+                    // than consumerReEnableWaitTime\n+                    final long consumerReEnableRetryMaxAttempts = 1\n+                            + Math.max(0, 3 + (consumerReEnableWaitTime - 14_000) / 10_000);\n+\n+                    kafkaConsumer.partitionsAssignedHandler(set -> {\n+                        kafkaConsumer.pause();\n+                        log.executingConsumerAssignedRebalanceListener(group);\n+                        listener.onPartitionsAssigned(kafkaConsumer, set)\n+                                .onFailure().invoke(t -> log.unableToExecuteConsumerAssignedRebalanceListener(group, t))\n+                                .onFailure().retry().withBackOff(Duration.ofSeconds(1), Duration.ofSeconds(10)).withJitter(0.0)\n+                                .atMost(consumerReEnableRetryMaxAttempts)\n+                                .onFailure().invoke(t -> {\n+                                    log.reEnablingConsumerforGroup(group);\n+                                    kafkaConsumer.resume();\n+                                })\n+                                .onItem().invoke(a -> kafkaConsumer.resume())\n+                                .subscribe()\n+                                .with(a -> log.executedConsumerAssignedRebalanceListener(group));\n+                    });\n+\n+                    kafkaConsumer.partitionsRevokedHandler(set -> {\n+                        log.executingConsumerRevokedRebalanceListener(group);\n+                        listener.onPartitionsRevoked(kafkaConsumer, set)\n+                                .onFailure().invoke(t -> log.unableToExecuteConsumerRevokedRebalanceListener(group, t))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk0NjM1MA=="}, "originalCommit": {"oid": "c2d1571f5305c9de2095e4a6e6582e6be0645df2"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDk3MTcwOnYy", "diffSide": "RIGHT", "path": "smallrye-reactive-messaging-kafka/src/test/java/io/smallrye/reactive/messaging/kafka/KafkaSourceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjowNDozMFrOGjkN7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNToxMTo0MFrOGj2mVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk0NjczMw==", "bodyText": "A test checking that we fail if a listener is configured but cannot be found should be added.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r439946733", "createdAt": "2020-06-15T06:04:30Z", "author": {"login": "cescoffier"}, "path": "smallrye-reactive-messaging-kafka/src/test/java/io/smallrye/reactive/messaging/kafka/KafkaSourceTest.java", "diffHunk": "@@ -388,15 +506,64 @@ public void testSourceWithEmptyOptionalConfiguration() {\n                 .collect(Collectors.toList())).containsExactly(0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\n     }\n \n+    private BeanManager getBeanManager() {\n+        if (container == null) {\n+            Weld weld = baseWeld();\n+            addConfig(new MapBasedConfig(new HashMap<>()));\n+            weld.disableDiscovery();\n+            container = weld.initialize();\n+        }\n+        return container.getBeanManager();\n+    }\n+\n+    private Instance<KafkaConsumerRebalanceListener> getConsumerRebalanceListeners() {\n+        return getBeanManager()\n+                .createInstance()\n+                .select(KafkaConsumerRebalanceListener.class);\n+    }\n+\n+    private ConsumptionConsumerRebalanceListener getConsumptionConsumerRebalanceListener() {\n+        return getBeanManager()\n+                .createInstance()\n+                .select(ConsumptionConsumerRebalanceListener.class)\n+                .select(NamedLiteral.of(ConsumptionConsumerRebalanceListener.class.getSimpleName()))\n+                .get();\n+\n+    }\n+\n+    private StartFromFifthOffsetFromLatestConsumerRebalanceListener getStartFromFifthOffsetFromLatestConsumerRebalanceListener(\n+            String name) {\n+        return getBeanManager()\n+                .createInstance()\n+                .select(StartFromFifthOffsetFromLatestConsumerRebalanceListener.class)\n+                .select(NamedLiteral.of(name))\n+                .get();\n+\n+    }\n+\n     private ConsumptionBean deploy(MapBasedConfig config) {\n         Weld weld = baseWeld();\n         addConfig(config);\n         weld.addBeanClass(ConsumptionBean.class);\n+        weld.addBeanClass(ConsumptionConsumerRebalanceListener.class);\n         weld.disableDiscovery();\n         container = weld.initialize();\n         return container.getBeanManager().createInstance().select(ConsumptionBean.class).get();\n     }\n \n+    private ConsumptionBeanWithoutAck deployWithoutAck(MapBasedConfig config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2d1571f5305c9de2095e4a6e6582e6be0645df2"}, "originalPosition": 302}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI0Nzg5Mw==", "bodyText": "done", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/601#discussion_r440247893", "createdAt": "2020-06-15T15:11:40Z", "author": {"login": "pcasaes"}, "path": "smallrye-reactive-messaging-kafka/src/test/java/io/smallrye/reactive/messaging/kafka/KafkaSourceTest.java", "diffHunk": "@@ -388,15 +506,64 @@ public void testSourceWithEmptyOptionalConfiguration() {\n                 .collect(Collectors.toList())).containsExactly(0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\n     }\n \n+    private BeanManager getBeanManager() {\n+        if (container == null) {\n+            Weld weld = baseWeld();\n+            addConfig(new MapBasedConfig(new HashMap<>()));\n+            weld.disableDiscovery();\n+            container = weld.initialize();\n+        }\n+        return container.getBeanManager();\n+    }\n+\n+    private Instance<KafkaConsumerRebalanceListener> getConsumerRebalanceListeners() {\n+        return getBeanManager()\n+                .createInstance()\n+                .select(KafkaConsumerRebalanceListener.class);\n+    }\n+\n+    private ConsumptionConsumerRebalanceListener getConsumptionConsumerRebalanceListener() {\n+        return getBeanManager()\n+                .createInstance()\n+                .select(ConsumptionConsumerRebalanceListener.class)\n+                .select(NamedLiteral.of(ConsumptionConsumerRebalanceListener.class.getSimpleName()))\n+                .get();\n+\n+    }\n+\n+    private StartFromFifthOffsetFromLatestConsumerRebalanceListener getStartFromFifthOffsetFromLatestConsumerRebalanceListener(\n+            String name) {\n+        return getBeanManager()\n+                .createInstance()\n+                .select(StartFromFifthOffsetFromLatestConsumerRebalanceListener.class)\n+                .select(NamedLiteral.of(name))\n+                .get();\n+\n+    }\n+\n     private ConsumptionBean deploy(MapBasedConfig config) {\n         Weld weld = baseWeld();\n         addConfig(config);\n         weld.addBeanClass(ConsumptionBean.class);\n+        weld.addBeanClass(ConsumptionConsumerRebalanceListener.class);\n         weld.disableDiscovery();\n         container = weld.initialize();\n         return container.getBeanManager().createInstance().select(ConsumptionBean.class).get();\n     }\n \n+    private ConsumptionBeanWithoutAck deployWithoutAck(MapBasedConfig config) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk0NjczMw=="}, "originalCommit": {"oid": "c2d1571f5305c9de2095e4a6e6582e6be0645df2"}, "originalPosition": 302}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 78, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}