{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1OTg4OTY0", "number": 573, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNDoxOToyNVrOEBYUhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNzozNzozMlrOEBc9vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODgyNTAyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/eclipse/microprofile/reactive/messaging/Message.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNDoxOToyNVrOGdMO1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjoxMDowMFrOGdQ1Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI2MjI5Mw==", "bodyText": "What's the purpose of this extra assignment?", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/573#discussion_r433262293", "createdAt": "2020-06-01T14:19:25Z", "author": {"login": "kenfinnigan"}, "path": "api/src/main/java/org/eclipse/microprofile/reactive/messaging/Message.java", "diffHunk": "@@ -201,49 +210,179 @@ public Metadata getMetadata() {\n         };\n     }\n \n+    /**\n+     * Create a message with the given payload, ack and nack functions.\n+     *\n+     * @param payload The payload.\n+     * @param ack The ack function, this will be invoked when the returned messages {@link #ack()} method is invoked.\n+     * @param nack The negative-ack function, this will be invoked when the returned messages {@link #nack(Throwable)}\n+     *        method is invoked.\n+     * @param <T> the type of payload\n+     * @return A message with the given payload, metadata, ack and nack functions.\n+     */\n+    @Experimental(\"nack support is a SmallRye-only feature\")\n+    static <T> Message<T> of(T payload,\n+            Supplier<CompletionStage<Void>> ack, Function<Throwable, CompletionStage<Void>> nack) {\n+        return new Message<T>() {\n+            @Override\n+            public T getPayload() {\n+                return payload;\n+            }\n+\n+            @Override\n+            public Metadata getMetadata() {\n+                return Metadata.empty();\n+            }\n+\n+            @Override\n+            public Supplier<CompletionStage<Void>> getAck() {\n+                return ack;\n+            }\n+\n+            @Override\n+            public Function<Throwable, CompletionStage<Void>> getNack() {\n+                return nack;\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Create a message with the given payload, metadata and ack and nack functions.\n+     *\n+     * @param payload The payload.\n+     * @param metadata the metadata, must not be {@code null}, must not contain {@code null} values.\n+     * @param ack The ack function, this will be invoked when the returned messages {@link #ack()} method is invoked.\n+     * @param nack The negative-ack function, this will be invoked when the returned messages {@link #nack(Throwable)}\n+     *        method is invoked.\n+     * @param <T> the type of payload\n+     * @return A message with the given payload, metadata, ack and nack functions.\n+     */\n+    @Experimental(\"nack support is a SmallRye-only feature\")\n+    static <T> Message<T> of(T payload, Iterable<Object> metadata,\n+            Supplier<CompletionStage<Void>> ack, Function<Throwable, CompletionStage<Void>> nack) {\n+        Metadata validated = Metadata.from(metadata);\n+        return new Message<T>() {\n+            @Override\n+            public T getPayload() {\n+                return payload;\n+            }\n+\n+            @Override\n+            public Metadata getMetadata() {\n+                return validated;\n+            }\n+\n+            @Override\n+            public Supplier<CompletionStage<Void>> getAck() {\n+                return ack;\n+            }\n+\n+            @Override\n+            public Function<Throwable, CompletionStage<Void>> getNack() {\n+                return nack;\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Create a message with the given payload, metadata and ack and nack functions.\n+     *\n+     * @param payload The payload.\n+     * @param metadata the metadata, must not be {@code null}, must not contain {@code null} values.\n+     * @param ack The ack function, this will be invoked when the returned messages {@link #ack()} method is invoked.\n+     * @param nack The negative-ack function, this will be invoked when the returned messages {@link #nack(Throwable)}\n+     *        method is invoked.\n+     * @param <T> the type of payload\n+     * @return A message with the given payload, metadata, ack and nack functions.\n+     */\n+    @Experimental(\"nack support is a SmallRye-only feature\")\n+    static <T> Message<T> of(T payload, Metadata metadata,\n+            Supplier<CompletionStage<Void>> ack, Function<Throwable, CompletionStage<Void>> nack) {\n+        if (payload == null) {\n+            throw new IllegalArgumentException(\"`payload` must not be `null`\");\n+        }\n+        if (metadata == null) {\n+            metadata = Metadata.empty();\n+        }\n+        Metadata actual = metadata;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c491567015f74e8c0bbf368a700e0cd466fda0"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMzNzY2Ng==", "bodyText": "Because it must be (implicitly) final to be used in the inner class.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/573#discussion_r433337666", "createdAt": "2020-06-01T16:10:00Z", "author": {"login": "cescoffier"}, "path": "api/src/main/java/org/eclipse/microprofile/reactive/messaging/Message.java", "diffHunk": "@@ -201,49 +210,179 @@ public Metadata getMetadata() {\n         };\n     }\n \n+    /**\n+     * Create a message with the given payload, ack and nack functions.\n+     *\n+     * @param payload The payload.\n+     * @param ack The ack function, this will be invoked when the returned messages {@link #ack()} method is invoked.\n+     * @param nack The negative-ack function, this will be invoked when the returned messages {@link #nack(Throwable)}\n+     *        method is invoked.\n+     * @param <T> the type of payload\n+     * @return A message with the given payload, metadata, ack and nack functions.\n+     */\n+    @Experimental(\"nack support is a SmallRye-only feature\")\n+    static <T> Message<T> of(T payload,\n+            Supplier<CompletionStage<Void>> ack, Function<Throwable, CompletionStage<Void>> nack) {\n+        return new Message<T>() {\n+            @Override\n+            public T getPayload() {\n+                return payload;\n+            }\n+\n+            @Override\n+            public Metadata getMetadata() {\n+                return Metadata.empty();\n+            }\n+\n+            @Override\n+            public Supplier<CompletionStage<Void>> getAck() {\n+                return ack;\n+            }\n+\n+            @Override\n+            public Function<Throwable, CompletionStage<Void>> getNack() {\n+                return nack;\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Create a message with the given payload, metadata and ack and nack functions.\n+     *\n+     * @param payload The payload.\n+     * @param metadata the metadata, must not be {@code null}, must not contain {@code null} values.\n+     * @param ack The ack function, this will be invoked when the returned messages {@link #ack()} method is invoked.\n+     * @param nack The negative-ack function, this will be invoked when the returned messages {@link #nack(Throwable)}\n+     *        method is invoked.\n+     * @param <T> the type of payload\n+     * @return A message with the given payload, metadata, ack and nack functions.\n+     */\n+    @Experimental(\"nack support is a SmallRye-only feature\")\n+    static <T> Message<T> of(T payload, Iterable<Object> metadata,\n+            Supplier<CompletionStage<Void>> ack, Function<Throwable, CompletionStage<Void>> nack) {\n+        Metadata validated = Metadata.from(metadata);\n+        return new Message<T>() {\n+            @Override\n+            public T getPayload() {\n+                return payload;\n+            }\n+\n+            @Override\n+            public Metadata getMetadata() {\n+                return validated;\n+            }\n+\n+            @Override\n+            public Supplier<CompletionStage<Void>> getAck() {\n+                return ack;\n+            }\n+\n+            @Override\n+            public Function<Throwable, CompletionStage<Void>> getNack() {\n+                return nack;\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Create a message with the given payload, metadata and ack and nack functions.\n+     *\n+     * @param payload The payload.\n+     * @param metadata the metadata, must not be {@code null}, must not contain {@code null} values.\n+     * @param ack The ack function, this will be invoked when the returned messages {@link #ack()} method is invoked.\n+     * @param nack The negative-ack function, this will be invoked when the returned messages {@link #nack(Throwable)}\n+     *        method is invoked.\n+     * @param <T> the type of payload\n+     * @return A message with the given payload, metadata, ack and nack functions.\n+     */\n+    @Experimental(\"nack support is a SmallRye-only feature\")\n+    static <T> Message<T> of(T payload, Metadata metadata,\n+            Supplier<CompletionStage<Void>> ack, Function<Throwable, CompletionStage<Void>> nack) {\n+        if (payload == null) {\n+            throw new IllegalArgumentException(\"`payload` must not be `null`\");\n+        }\n+        if (metadata == null) {\n+            metadata = Metadata.empty();\n+        }\n+        Metadata actual = metadata;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI2MjI5Mw=="}, "originalCommit": {"oid": "f4c491567015f74e8c0bbf368a700e0cd466fda0"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODgzMzYxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/eclipse/microprofile/reactive/messaging/Message.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNDoyMjowMlrOGdMUkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjozMDozMFrOGdRhqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI2Mzc2MA==", "bodyText": "Has the throwable been logged anywhere prior to this point?\nWould it be beneficial to log out the throwable as we're swallowing it? How would a developer know something went wrong without a configured nack?", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/573#discussion_r433263760", "createdAt": "2020-06-01T14:22:02Z", "author": {"login": "kenfinnigan"}, "path": "api/src/main/java/org/eclipse/microprofile/reactive/messaging/Message.java", "diffHunk": "@@ -297,6 +444,24 @@ default Metadata getMetadata() {\n         }\n     }\n \n+    /**\n+     * Acknowledge negatively this message.\n+     * <code>nack</code> is used to indicate that the processing of a message failed. The reason is passed as parameter.\n+     *\n+     * @param reason the reason of the nack, must not be {@code null}\n+     * @return a completion stage completed when the message is negative-acknowledgement has completed. If the\n+     *         negative acknowledgement fails, the completion stage propagates the failure.\n+     */\n+    @Experimental(\"nack support is a SmallRye-only feature\")\n+    default CompletionStage<Void> nack(Throwable reason) {\n+        Function<Throwable, CompletionStage<Void>> nack = getNack();\n+        if (nack == null) {\n+            return CompletableFuture.completedFuture(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c491567015f74e8c0bbf368a700e0cd466fda0"}, "originalPosition": 310}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMzODkzMQ==", "bodyText": "That's a good point. When you create an instance of Message, you should pass the nack and ack function, but I agree. If by any chance you use this default implementation, we should log the reason (if there is no nack function)", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/573#discussion_r433338931", "createdAt": "2020-06-01T16:12:21Z", "author": {"login": "cescoffier"}, "path": "api/src/main/java/org/eclipse/microprofile/reactive/messaging/Message.java", "diffHunk": "@@ -297,6 +444,24 @@ default Metadata getMetadata() {\n         }\n     }\n \n+    /**\n+     * Acknowledge negatively this message.\n+     * <code>nack</code> is used to indicate that the processing of a message failed. The reason is passed as parameter.\n+     *\n+     * @param reason the reason of the nack, must not be {@code null}\n+     * @return a completion stage completed when the message is negative-acknowledgement has completed. If the\n+     *         negative acknowledgement fails, the completion stage propagates the failure.\n+     */\n+    @Experimental(\"nack support is a SmallRye-only feature\")\n+    default CompletionStage<Void> nack(Throwable reason) {\n+        Function<Throwable, CompletionStage<Void>> nack = getNack();\n+        if (nack == null) {\n+            return CompletableFuture.completedFuture(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI2Mzc2MA=="}, "originalCommit": {"oid": "f4c491567015f74e8c0bbf368a700e0cd466fda0"}, "originalPosition": 310}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM0OTAzMw==", "bodyText": "Fixed.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/573#discussion_r433349033", "createdAt": "2020-06-01T16:30:30Z", "author": {"login": "cescoffier"}, "path": "api/src/main/java/org/eclipse/microprofile/reactive/messaging/Message.java", "diffHunk": "@@ -297,6 +444,24 @@ default Metadata getMetadata() {\n         }\n     }\n \n+    /**\n+     * Acknowledge negatively this message.\n+     * <code>nack</code> is used to indicate that the processing of a message failed. The reason is passed as parameter.\n+     *\n+     * @param reason the reason of the nack, must not be {@code null}\n+     * @return a completion stage completed when the message is negative-acknowledgement has completed. If the\n+     *         negative acknowledgement fails, the completion stage propagates the failure.\n+     */\n+    @Experimental(\"nack support is a SmallRye-only feature\")\n+    default CompletionStage<Void> nack(Throwable reason) {\n+        Function<Throwable, CompletionStage<Void>> nack = getNack();\n+        if (nack == null) {\n+            return CompletableFuture.completedFuture(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI2Mzc2MA=="}, "originalCommit": {"oid": "f4c491567015f74e8c0bbf368a700e0cd466fda0"}, "originalPosition": 310}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTU4NTkxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/eclipse/microprofile/reactive/messaging/Message.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNzozNzozMlrOGdTstQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODowODoxM1rOGdUtPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM4NDYyOQ==", "bodyText": "Does {} bring in the message? Thought the format was %s or the like?", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/573#discussion_r433384629", "createdAt": "2020-06-01T17:37:32Z", "author": {"login": "kenfinnigan"}, "path": "api/src/main/java/org/eclipse/microprofile/reactive/messaging/Message.java", "diffHunk": "@@ -297,6 +449,32 @@ default Metadata getMetadata() {\n         }\n     }\n \n+    /**\n+     * Acknowledge negatively this message.\n+     * <code>nack</code> is used to indicate that the processing of a message failed. The reason is passed as parameter.\n+     *\n+     * @param reason the reason of the nack, must not be {@code null}\n+     * @return a completion stage completed when the message is negative-acknowledgement has completed. If the\n+     *         negative acknowledgement fails, the completion stage propagates the failure.\n+     */\n+    @Experimental(\"nack support is a SmallRye-only feature\")\n+    default CompletionStage<Void> nack(Throwable reason) {\n+        if (reason == null) {\n+            throw new IllegalArgumentException(\"The reason must not be `null`\");\n+        }\n+        Function<Throwable, CompletionStage<Void>> nack = getNack();\n+        if (nack == null) {\n+            LOGGER\n+                    .warn(\"A message has been nacked, but no nack function has been provided. The reason was: {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d7781fe15ce60c23df10417f0095088ab0b5e2f"}, "originalPosition": 324}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM5NjEyNA==", "bodyText": "Using SLF4J, not JBoss logging.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/573#discussion_r433396124", "createdAt": "2020-06-01T17:58:44Z", "author": {"login": "cescoffier"}, "path": "api/src/main/java/org/eclipse/microprofile/reactive/messaging/Message.java", "diffHunk": "@@ -297,6 +449,32 @@ default Metadata getMetadata() {\n         }\n     }\n \n+    /**\n+     * Acknowledge negatively this message.\n+     * <code>nack</code> is used to indicate that the processing of a message failed. The reason is passed as parameter.\n+     *\n+     * @param reason the reason of the nack, must not be {@code null}\n+     * @return a completion stage completed when the message is negative-acknowledgement has completed. If the\n+     *         negative acknowledgement fails, the completion stage propagates the failure.\n+     */\n+    @Experimental(\"nack support is a SmallRye-only feature\")\n+    default CompletionStage<Void> nack(Throwable reason) {\n+        if (reason == null) {\n+            throw new IllegalArgumentException(\"The reason must not be `null`\");\n+        }\n+        Function<Throwable, CompletionStage<Void>> nack = getNack();\n+        if (nack == null) {\n+            LOGGER\n+                    .warn(\"A message has been nacked, but no nack function has been provided. The reason was: {}\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM4NDYyOQ=="}, "originalCommit": {"oid": "6d7781fe15ce60c23df10417f0095088ab0b5e2f"}, "originalPosition": 324}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwMTE0OA==", "bodyText": "Ah ok, we may want to re-evaluate that in the future", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/573#discussion_r433401148", "createdAt": "2020-06-01T18:08:13Z", "author": {"login": "kenfinnigan"}, "path": "api/src/main/java/org/eclipse/microprofile/reactive/messaging/Message.java", "diffHunk": "@@ -297,6 +449,32 @@ default Metadata getMetadata() {\n         }\n     }\n \n+    /**\n+     * Acknowledge negatively this message.\n+     * <code>nack</code> is used to indicate that the processing of a message failed. The reason is passed as parameter.\n+     *\n+     * @param reason the reason of the nack, must not be {@code null}\n+     * @return a completion stage completed when the message is negative-acknowledgement has completed. If the\n+     *         negative acknowledgement fails, the completion stage propagates the failure.\n+     */\n+    @Experimental(\"nack support is a SmallRye-only feature\")\n+    default CompletionStage<Void> nack(Throwable reason) {\n+        if (reason == null) {\n+            throw new IllegalArgumentException(\"The reason must not be `null`\");\n+        }\n+        Function<Throwable, CompletionStage<Void>> nack = getNack();\n+        if (nack == null) {\n+            LOGGER\n+                    .warn(\"A message has been nacked, but no nack function has been provided. The reason was: {}\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM4NDYyOQ=="}, "originalCommit": {"oid": "6d7781fe15ce60c23df10417f0095088ab0b5e2f"}, "originalPosition": 324}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 65, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}