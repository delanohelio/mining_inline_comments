{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyNTE2MDEx", "number": 374, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxMzozNzozM1rODYLQZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNDowNTowMlrODYLyUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2Njc2ODM2OnYy", "diffSide": "RIGHT", "path": "smallrye-reactive-messaging-provider/src/main/java/io/smallrye/reactive/messaging/extension/EmitterImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxMzozNzozM1rOFd4d6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNDo1NDo1MVrOFd6_Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg3ODE4NQ==", "bodyText": "\"No one\" or \"Nothing\"?", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/374#discussion_r366878185", "createdAt": "2020-01-15T13:37:33Z", "author": {"login": "kenfinnigan"}, "path": "smallrye-reactive-messaging-provider/src/main/java/io/smallrye/reactive/messaging/extension/EmitterImpl.java", "diffHunk": "@@ -123,33 +124,34 @@ boolean isConnected() {\n         if (msg == null) {\n             throw new IllegalArgumentException(\"`null` is not a valid value\");\n         }\n-        FlowableEmitter<Message<? extends T>> emitter = verify(internal);\n+        FlowableEmitter<Message<? extends T>> emitter = verify(internal, name);\n         emitter.onNext(msg);\n \n     }\n \n-    static <T> FlowableEmitter<Message<? extends T>> verify(AtomicReference<FlowableEmitter<Message<? extends T>>> reference) {\n+    static <T> FlowableEmitter<Message<? extends T>> verify(AtomicReference<FlowableEmitter<Message<? extends T>>> reference,\n+            String name) {\n         FlowableEmitter<Message<? extends T>> emitter = reference.get();\n         if (emitter == null) {\n-            throw new IllegalStateException(\"Stream not yet connected\");\n+            throw new IllegalStateException(\"No one subscribed to channel \" + name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e0a8a32e4b299ba591927466056b8e2145e27bc"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg5MDU3MQ==", "bodyText": "How about \"No subscriber found for the channel \"?", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/374#discussion_r366890571", "createdAt": "2020-01-15T14:02:51Z", "author": {"login": "Emily-Jiang"}, "path": "smallrye-reactive-messaging-provider/src/main/java/io/smallrye/reactive/messaging/extension/EmitterImpl.java", "diffHunk": "@@ -123,33 +124,34 @@ boolean isConnected() {\n         if (msg == null) {\n             throw new IllegalArgumentException(\"`null` is not a valid value\");\n         }\n-        FlowableEmitter<Message<? extends T>> emitter = verify(internal);\n+        FlowableEmitter<Message<? extends T>> emitter = verify(internal, name);\n         emitter.onNext(msg);\n \n     }\n \n-    static <T> FlowableEmitter<Message<? extends T>> verify(AtomicReference<FlowableEmitter<Message<? extends T>>> reference) {\n+    static <T> FlowableEmitter<Message<? extends T>> verify(AtomicReference<FlowableEmitter<Message<? extends T>>> reference,\n+            String name) {\n         FlowableEmitter<Message<? extends T>> emitter = reference.get();\n         if (emitter == null) {\n-            throw new IllegalStateException(\"Stream not yet connected\");\n+            throw new IllegalStateException(\"No one subscribed to channel \" + name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg3ODE4NQ=="}, "originalCommit": {"oid": "4e0a8a32e4b299ba591927466056b8e2145e27bc"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjkxOTQ3NA==", "bodyText": "Much better, let me change this!", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/374#discussion_r366919474", "createdAt": "2020-01-15T14:54:51Z", "author": {"login": "cescoffier"}, "path": "smallrye-reactive-messaging-provider/src/main/java/io/smallrye/reactive/messaging/extension/EmitterImpl.java", "diffHunk": "@@ -123,33 +124,34 @@ boolean isConnected() {\n         if (msg == null) {\n             throw new IllegalArgumentException(\"`null` is not a valid value\");\n         }\n-        FlowableEmitter<Message<? extends T>> emitter = verify(internal);\n+        FlowableEmitter<Message<? extends T>> emitter = verify(internal, name);\n         emitter.onNext(msg);\n \n     }\n \n-    static <T> FlowableEmitter<Message<? extends T>> verify(AtomicReference<FlowableEmitter<Message<? extends T>>> reference) {\n+    static <T> FlowableEmitter<Message<? extends T>> verify(AtomicReference<FlowableEmitter<Message<? extends T>>> reference,\n+            String name) {\n         FlowableEmitter<Message<? extends T>> emitter = reference.get();\n         if (emitter == null) {\n-            throw new IllegalStateException(\"Stream not yet connected\");\n+            throw new IllegalStateException(\"No one subscribed to channel \" + name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg3ODE4NQ=="}, "originalCommit": {"oid": "4e0a8a32e4b299ba591927466056b8e2145e27bc"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2Njc3MDYwOnYy", "diffSide": "RIGHT", "path": "smallrye-reactive-messaging-provider/src/main/java/io/smallrye/reactive/messaging/extension/ReactiveMessagingExtension.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxMzozODoyMVrOFd4fQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNDo1Njo0NVrOFd7DEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg3ODUyOQ==", "bodyText": "Warning or just a trace?\nHow important is it for developers/debugging to know nothing is subscribed on creation?", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/374#discussion_r366878529", "createdAt": "2020-01-15T13:38:21Z", "author": {"login": "kenfinnigan"}, "path": "smallrye-reactive-messaging-provider/src/main/java/io/smallrye/reactive/messaging/extension/ReactiveMessagingExtension.java", "diffHunk": "@@ -110,9 +110,11 @@ void afterDeploymentValidation(@Observes AfterDeploymentValidation done, BeanMan\n             for (InjectionPoint ip : emitterInjectionPoints) {\n                 String name = ChannelProducer.getChannelName(ip);\n                 EmitterImpl<?> emitter = (EmitterImpl<?>) registry.getEmitter(name);\n-                if (!emitter.isConnected()) {\n-                    done.addDeploymentProblem(\n-                            new DeploymentException(\"No channel found for name: \" + name + \", injection point: \" + ip));\n+                if (!emitter.isSubscribed()) {\n+                    // Subscription may happen later, just print a warning.\n+                    // Attempting an emission without being subscribed would result in an error.\n+                    LOGGER.warn(\"No subscriber for channel {}  attached to the emitter {}.{}\", name,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e0a8a32e4b299ba591927466056b8e2145e27bc"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjkyMDQ2NQ==", "bodyText": "It can be important. In the previous version, it was failing the deployment, that's why I went for warning.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/374#discussion_r366920465", "createdAt": "2020-01-15T14:56:45Z", "author": {"login": "cescoffier"}, "path": "smallrye-reactive-messaging-provider/src/main/java/io/smallrye/reactive/messaging/extension/ReactiveMessagingExtension.java", "diffHunk": "@@ -110,9 +110,11 @@ void afterDeploymentValidation(@Observes AfterDeploymentValidation done, BeanMan\n             for (InjectionPoint ip : emitterInjectionPoints) {\n                 String name = ChannelProducer.getChannelName(ip);\n                 EmitterImpl<?> emitter = (EmitterImpl<?>) registry.getEmitter(name);\n-                if (!emitter.isConnected()) {\n-                    done.addDeploymentProblem(\n-                            new DeploymentException(\"No channel found for name: \" + name + \", injection point: \" + ip));\n+                if (!emitter.isSubscribed()) {\n+                    // Subscription may happen later, just print a warning.\n+                    // Attempting an emission without being subscribed would result in an error.\n+                    LOGGER.warn(\"No subscriber for channel {}  attached to the emitter {}.{}\", name,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg3ODUyOQ=="}, "originalCommit": {"oid": "4e0a8a32e4b299ba591927466056b8e2145e27bc"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2Njg1NTIyOnYy", "diffSide": "RIGHT", "path": "smallrye-reactive-messaging-provider/src/test/java/io/smallrye/reactive/messaging/inject/EmitterInjectionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNDowNTowMlrOFd5Sww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNDo1ODo0M1rOFd7Hkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg5MTcxNQ==", "bodyText": "I see what you meant. This will impact spec and tck change because the validation is at runtime instead of startup time.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/374#discussion_r366891715", "createdAt": "2020-01-15T14:05:02Z", "author": {"login": "Emily-Jiang"}, "path": "smallrye-reactive-messaging-provider/src/test/java/io/smallrye/reactive/messaging/inject/EmitterInjectionTest.java", "diffHunk": "@@ -137,14 +141,16 @@ public void testWithNull() {\n         assertThat(bean.hasCaughtNullMessage()).isTrue();\n     }\n \n-    @Test(expected = DeploymentException.class)\n+    @Test(expected = IllegalStateException.class)\n     public void testWithMissingStream() {\n-        installInitializeAndGet(BeanWithMissingStream.class);\n+        // The error is only thrown when a message is emitted as the subscription can be delayed.\n+        installInitializeAndGet(BeanWithMissingStream.class).emitter().send(Message.of(\"foo\"));\n     }\n \n-    @Test(expected = DeploymentException.class)\n+    @Test(expected = IllegalStateException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e0a8a32e4b299ba591927466056b8e2145e27bc"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjkyMTYxOQ==", "bodyText": "Yes, That's what I meant. This is actually required for eclipse/microprofile-reactive-messaging#3 where the subscription is handler by the user.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/374#discussion_r366921619", "createdAt": "2020-01-15T14:58:43Z", "author": {"login": "cescoffier"}, "path": "smallrye-reactive-messaging-provider/src/test/java/io/smallrye/reactive/messaging/inject/EmitterInjectionTest.java", "diffHunk": "@@ -137,14 +141,16 @@ public void testWithNull() {\n         assertThat(bean.hasCaughtNullMessage()).isTrue();\n     }\n \n-    @Test(expected = DeploymentException.class)\n+    @Test(expected = IllegalStateException.class)\n     public void testWithMissingStream() {\n-        installInitializeAndGet(BeanWithMissingStream.class);\n+        // The error is only thrown when a message is emitted as the subscription can be delayed.\n+        installInitializeAndGet(BeanWithMissingStream.class).emitter().send(Message.of(\"foo\"));\n     }\n \n-    @Test(expected = DeploymentException.class)\n+    @Test(expected = IllegalStateException.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg5MTcxNQ=="}, "originalCommit": {"oid": "4e0a8a32e4b299ba591927466056b8e2145e27bc"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 116, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}