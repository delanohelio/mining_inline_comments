{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxODIzNDI4", "number": 370, "title": "Messaging gcp pubsub", "bodyText": "This pull request adds a new transport for Google Cloud Platform Pub/Sub.\nResolves #369", "createdAt": "2020-01-12T12:08:10Z", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/370", "merged": true, "mergeCommit": {"oid": "e257ac0993f82ec3d0239be040f37a549e900794"}, "closed": true, "closedAt": "2020-01-21T19:04:53Z", "author": {"login": "newportd"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb5T7bNgH2gAyMzYxODIzNDI4Ojg4MmZlMThhMTk2YTg4MGU4Mzk5YmIyN2MyZDUxNTc5OWYzNmFiYWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb8l-EUAFqTM0NjExODc5MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "882fe18a196a880e8399bb27c2d515799f36abad", "author": {"user": {"login": "newportd", "name": "Daniel Newport"}}, "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/882fe18a196a880e8399bb27c2d515799f36abad", "committedDate": "2020-01-11T14:21:43Z", "message": "add google cloud pub/sub transport"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0504c3c6ce897c08c4ed661ea77294d062bec400", "author": {"user": {"login": "newportd", "name": "Daniel Newport"}}, "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/0504c3c6ce897c08c4ed661ea77294d062bec400", "committedDate": "2020-01-12T12:07:17Z", "message": "remove unnecessary commented code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNTg3MDQ4", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/370#pullrequestreview-341587048", "createdAt": "2020-01-12T17:00:39Z", "commit": {"oid": "0504c3c6ce897c08c4ed661ea77294d062bec400"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxNzowMDozOVrOFcqQcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxNzowMDo1OVrOFcqQig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU5Njc4Ng==", "bodyText": "This is going to block the F/J pool thread. Is it the intended behavior?", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/370#discussion_r365596786", "createdAt": "2020-01-12T17:00:39Z", "author": {"login": "cescoffier"}, "path": "smallrye-reactive-messaging-gcp-pubsub/src/main/java/io/smallrye/reactive/messaging/gcp/pubsub/PubSubConnector.java", "diffHunk": "@@ -0,0 +1,203 @@\n+package io.smallrye.reactive.messaging.gcp.pubsub;\n+\n+import com.google.api.gax.rpc.NotFoundException;\n+import com.google.cloud.pubsub.v1.Publisher;\n+import com.google.cloud.pubsub.v1.SubscriptionAdminClient;\n+import com.google.cloud.pubsub.v1.TopicAdminClient;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.ProjectSubscriptionName;\n+import com.google.pubsub.v1.ProjectTopicName;\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.pubsub.v1.PushConfig;\n+import io.reactivex.BackpressureStrategy;\n+import io.reactivex.Flowable;\n+import org.eclipse.microprofile.config.Config;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.spi.Connector;\n+import org.eclipse.microprofile.reactive.messaging.spi.ConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.IncomingConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.OutgoingConnectorFactory;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.eclipse.microprofile.reactive.streams.operators.SubscriberBuilder;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.Destroyed;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ForkJoinPool;\n+import java.util.concurrent.Future;\n+import java.util.function.Supplier;\n+\n+@ApplicationScoped\n+@Connector(PubSubConnector.CONNECTOR_NAME)\n+public class PubSubConnector implements IncomingConnectorFactory, OutgoingConnectorFactory {\n+\n+    static final String CONNECTOR_NAME = \"smallrye-gcp-pubsub\";\n+\n+    @Inject\n+    @ConfigProperty(name = \"gcp-pubsub-project-id\")\n+    private String projectId;\n+\n+    @Inject\n+    @ConfigProperty(name = \"mock-pubsub-topics\")\n+    private boolean mockPubSubTopics;\n+\n+    @Inject\n+    @ConfigProperty(name = \"mock-pubsub-host\")\n+    private Optional<String> host;\n+\n+    @Inject\n+    @ConfigProperty(name = \"mock-pubsub-port\")\n+    private Optional<Integer> port;\n+\n+    @Inject\n+    private PubSubManager pubSubManager;\n+\n+    private PubSubMessageReceiver messageReceiver;\n+\n+    @PostConstruct\n+    public void initialize() {\n+        messageReceiver = new PubSubMessageReceiver();\n+    }\n+\n+    public void destroy(@Observes @Destroyed(ApplicationScoped.class) final Object context) {\n+        messageReceiver.close();\n+    }\n+\n+    @Override\n+    public PublisherBuilder<? extends Message<?>> getPublisherBuilder(final Config config) {\n+        final PubSubConfig pubSubConfig = new PubSubConfig(projectId, getTopic(config), getCredentialPath(config),\n+            getSubscription(config),\n+            getAckDeadline(config), mockPubSubTopics, host.orElse(null), port.orElse(null));\n+\n+        createTopic(pubSubConfig);\n+        createSubscription(pubSubConfig);\n+\n+        pubSubManager.subscriber(pubSubConfig, messageReceiver);\n+        return ReactiveStreams.fromPublisher(Flowable.create(messageReceiver, BackpressureStrategy.BUFFER));\n+    }\n+\n+    @Override\n+    public SubscriberBuilder<? extends Message<?>, Void> getSubscriberBuilder(final Config config) {\n+        final PubSubConfig pubSubConfig = new PubSubConfig(projectId, getTopic(config), getCredentialPath(config),\n+            mockPubSubTopics, host.orElse(null), port.orElse(null));\n+\n+        createTopic(pubSubConfig);\n+\n+        final Publisher publisher = pubSubManager.publisher(pubSubConfig);\n+\n+        return ReactiveStreams.<Message<?>>builder()\n+            .flatMapCompletionStage(message -> {\n+                final PubsubMessage pubSubMessage = buildMessage(message);\n+\n+                final Future<String> future = publisher.publish(pubSubMessage);\n+\n+                return CompletableFuture.supplyAsync(await(future));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0504c3c6ce897c08c4ed661ea77294d062bec400"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU5NjgxMA==", "bodyText": "Are these calls blocking?", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/370#discussion_r365596810", "createdAt": "2020-01-12T17:00:59Z", "author": {"login": "cescoffier"}, "path": "smallrye-reactive-messaging-gcp-pubsub/src/main/java/io/smallrye/reactive/messaging/gcp/pubsub/PubSubConnector.java", "diffHunk": "@@ -0,0 +1,203 @@\n+package io.smallrye.reactive.messaging.gcp.pubsub;\n+\n+import com.google.api.gax.rpc.NotFoundException;\n+import com.google.cloud.pubsub.v1.Publisher;\n+import com.google.cloud.pubsub.v1.SubscriptionAdminClient;\n+import com.google.cloud.pubsub.v1.TopicAdminClient;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.ProjectSubscriptionName;\n+import com.google.pubsub.v1.ProjectTopicName;\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.pubsub.v1.PushConfig;\n+import io.reactivex.BackpressureStrategy;\n+import io.reactivex.Flowable;\n+import org.eclipse.microprofile.config.Config;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.spi.Connector;\n+import org.eclipse.microprofile.reactive.messaging.spi.ConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.IncomingConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.OutgoingConnectorFactory;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.eclipse.microprofile.reactive.streams.operators.SubscriberBuilder;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.Destroyed;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ForkJoinPool;\n+import java.util.concurrent.Future;\n+import java.util.function.Supplier;\n+\n+@ApplicationScoped\n+@Connector(PubSubConnector.CONNECTOR_NAME)\n+public class PubSubConnector implements IncomingConnectorFactory, OutgoingConnectorFactory {\n+\n+    static final String CONNECTOR_NAME = \"smallrye-gcp-pubsub\";\n+\n+    @Inject\n+    @ConfigProperty(name = \"gcp-pubsub-project-id\")\n+    private String projectId;\n+\n+    @Inject\n+    @ConfigProperty(name = \"mock-pubsub-topics\")\n+    private boolean mockPubSubTopics;\n+\n+    @Inject\n+    @ConfigProperty(name = \"mock-pubsub-host\")\n+    private Optional<String> host;\n+\n+    @Inject\n+    @ConfigProperty(name = \"mock-pubsub-port\")\n+    private Optional<Integer> port;\n+\n+    @Inject\n+    private PubSubManager pubSubManager;\n+\n+    private PubSubMessageReceiver messageReceiver;\n+\n+    @PostConstruct\n+    public void initialize() {\n+        messageReceiver = new PubSubMessageReceiver();\n+    }\n+\n+    public void destroy(@Observes @Destroyed(ApplicationScoped.class) final Object context) {\n+        messageReceiver.close();\n+    }\n+\n+    @Override\n+    public PublisherBuilder<? extends Message<?>> getPublisherBuilder(final Config config) {\n+        final PubSubConfig pubSubConfig = new PubSubConfig(projectId, getTopic(config), getCredentialPath(config),\n+            getSubscription(config),\n+            getAckDeadline(config), mockPubSubTopics, host.orElse(null), port.orElse(null));\n+\n+        createTopic(pubSubConfig);\n+        createSubscription(pubSubConfig);\n+\n+        pubSubManager.subscriber(pubSubConfig, messageReceiver);\n+        return ReactiveStreams.fromPublisher(Flowable.create(messageReceiver, BackpressureStrategy.BUFFER));\n+    }\n+\n+    @Override\n+    public SubscriberBuilder<? extends Message<?>, Void> getSubscriberBuilder(final Config config) {\n+        final PubSubConfig pubSubConfig = new PubSubConfig(projectId, getTopic(config), getCredentialPath(config),\n+            mockPubSubTopics, host.orElse(null), port.orElse(null));\n+\n+        createTopic(pubSubConfig);\n+\n+        final Publisher publisher = pubSubManager.publisher(pubSubConfig);\n+\n+        return ReactiveStreams.<Message<?>>builder()\n+            .flatMapCompletionStage(message -> {\n+                final PubsubMessage pubSubMessage = buildMessage(message);\n+\n+                final Future<String> future = publisher.publish(pubSubMessage);\n+\n+                return CompletableFuture.supplyAsync(await(future));\n+            })\n+            .ignore();\n+    }\n+\n+    private void createTopic(final PubSubConfig config) {\n+        final TopicAdminClient topicAdminClient = pubSubManager.topicAdminClient(config);\n+\n+        final ProjectTopicName topicName = ProjectTopicName.of(config.getProjectId(), config.getTopic());\n+\n+        try {\n+            topicAdminClient.getTopic(topicName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0504c3c6ce897c08c4ed661ea77294d062bec400"}, "originalPosition": 114}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6691a4c726a17441955d2081f22df456197eb7c3", "author": {"user": {"login": "newportd", "name": "Daniel Newport"}}, "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/6691a4c726a17441955d2081f22df456197eb7c3", "committedDate": "2020-01-16T10:32:23Z", "message": "handle blocking calls more asynchronously"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b0cb640d71608890768bd128631a55b2d83845b", "author": {"user": {"login": "newportd", "name": "Daniel Newport"}}, "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/7b0cb640d71608890768bd128631a55b2d83845b", "committedDate": "2020-01-20T15:20:14Z", "message": "refactor subscriber. ensure calls to FlowableEmitter.onNext are serialized across threads."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e955d709d9b1ebe264247798b15d4bb680f21f91", "author": {"user": {"login": "newportd", "name": "Daniel Newport"}}, "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/e955d709d9b1ebe264247798b15d4bb680f21f91", "committedDate": "2020-01-20T15:23:33Z", "message": "doc update to remove ack-deadline config option"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MTE4Nzkx", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/370#pullrequestreview-346118791", "createdAt": "2020-01-21T19:04:40Z", "commit": {"oid": "e955d709d9b1ebe264247798b15d4bb680f21f91"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2220, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}