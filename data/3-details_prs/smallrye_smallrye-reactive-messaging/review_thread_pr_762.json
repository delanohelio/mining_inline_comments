{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwMDY4NTQ0", "number": 762, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNzo0NDoyOFrOEliTIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNzo0ODoyNFrOEliYtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3Nzk0NzIwOnYy", "diffSide": "RIGHT", "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/commit/KafkaThrottledLatestProcessedCommit.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNzo0NDoyOFrOHVD5rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDowMTozNVrOHVRf4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg0NjA2Mw==", "bodyText": "while an object, a long with an initial value of -1 works well.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/762#discussion_r491846063", "createdAt": "2020-09-21T07:44:28Z", "author": {"login": "cescoffier"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/commit/KafkaThrottledLatestProcessedCommit.java", "diffHunk": "@@ -41,37 +42,27 @@\n  */\n public class KafkaThrottledLatestProcessedCommit implements KafkaCommitHandler {\n \n-    private static final long THROTTLE_TIME_IN_MILLIS = 5_000L;\n     private static final Map<String, Map<Integer, TopicPartition>> TOPIC_PARTITIONS_CACHE = new ConcurrentHashMap<>();\n \n     private final Map<TopicPartition, OffsetStore> offsetStores = new HashMap<>();\n \n     private final KafkaConsumer<?, ?> consumer;\n     private final KafkaSource<?, ?> source;\n-    private final int maxReceivedWithoutAckAllowed;\n+    private final int unprocessedRecordMaxAge;\n+    private final int autoCommitInterval;\n \n     private volatile Context context;\n-    private long nextCommitTime;\n+\n+    private Long timerId = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cad5346a11e89e7333fed0f071eb79d31387c393"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA2ODgzMw==", "bodyText": "Sure thing.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/762#discussion_r492068833", "createdAt": "2020-09-21T14:01:35Z", "author": {"login": "pcasaes"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/commit/KafkaThrottledLatestProcessedCommit.java", "diffHunk": "@@ -41,37 +42,27 @@\n  */\n public class KafkaThrottledLatestProcessedCommit implements KafkaCommitHandler {\n \n-    private static final long THROTTLE_TIME_IN_MILLIS = 5_000L;\n     private static final Map<String, Map<Integer, TopicPartition>> TOPIC_PARTITIONS_CACHE = new ConcurrentHashMap<>();\n \n     private final Map<TopicPartition, OffsetStore> offsetStores = new HashMap<>();\n \n     private final KafkaConsumer<?, ?> consumer;\n     private final KafkaSource<?, ?> source;\n-    private final int maxReceivedWithoutAckAllowed;\n+    private final int unprocessedRecordMaxAge;\n+    private final int autoCommitInterval;\n \n     private volatile Context context;\n-    private long nextCommitTime;\n+\n+    private Long timerId = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg0NjA2Mw=="}, "originalCommit": {"oid": "cad5346a11e89e7333fed0f071eb79d31387c393"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3Nzk1MDcyOnYy", "diffSide": "RIGHT", "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/commit/KafkaThrottledLatestProcessedCommit.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNzo0NToyMlrOHVD7rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDoyMjoxNFrOHVSqZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg0NjU3Mw==", "bodyText": "you should store the IncomingKAfkaConfiguration and use this object instead of accessing the config. Typically, alias and default values are managed for you.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/762#discussion_r491846573", "createdAt": "2020-09-21T07:45:22Z", "author": {"login": "cescoffier"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/commit/KafkaThrottledLatestProcessedCommit.java", "diffHunk": "@@ -82,10 +73,16 @@ public static KafkaThrottledLatestProcessedCommit create(KafkaConsumer<?, ?> con\n             Map<String, String> config,\n             KafkaSource<?, ?> source) {\n \n-        int maxPollRecords = Integer.parseInt(config.getOrDefault(ConsumerConfig.MAX_POLL_RECORDS_CONFIG, \"500\"));\n-        int maxReceivedWithoutAckAllowed = getNextPowerOfTwoEqualOrGreater(maxPollRecords * 2);\n-        log.settingMaxReceivedWithoutAckAllowed(config.get(ConsumerConfig.GROUP_ID_CONFIG), maxReceivedWithoutAckAllowed);\n-        return new KafkaThrottledLatestProcessedCommit(consumer, source, maxReceivedWithoutAckAllowed);\n+        int unprocessedRecordMaxAge = Integer.parseInt(config.getOrDefault(\"throttled.unprocessed-record-max-age\", \"60000\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cad5346a11e89e7333fed0f071eb79d31387c393"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA4NzkwOQ==", "bodyText": "I see it. thanks.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/762#discussion_r492087909", "createdAt": "2020-09-21T14:22:14Z", "author": {"login": "pcasaes"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/commit/KafkaThrottledLatestProcessedCommit.java", "diffHunk": "@@ -82,10 +73,16 @@ public static KafkaThrottledLatestProcessedCommit create(KafkaConsumer<?, ?> con\n             Map<String, String> config,\n             KafkaSource<?, ?> source) {\n \n-        int maxPollRecords = Integer.parseInt(config.getOrDefault(ConsumerConfig.MAX_POLL_RECORDS_CONFIG, \"500\"));\n-        int maxReceivedWithoutAckAllowed = getNextPowerOfTwoEqualOrGreater(maxPollRecords * 2);\n-        log.settingMaxReceivedWithoutAckAllowed(config.get(ConsumerConfig.GROUP_ID_CONFIG), maxReceivedWithoutAckAllowed);\n-        return new KafkaThrottledLatestProcessedCommit(consumer, source, maxReceivedWithoutAckAllowed);\n+        int unprocessedRecordMaxAge = Integer.parseInt(config.getOrDefault(\"throttled.unprocessed-record-max-age\", \"60000\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg0NjU3Mw=="}, "originalCommit": {"oid": "cad5346a11e89e7333fed0f071eb79d31387c393"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3Nzk1NjU0OnYy", "diffSide": "RIGHT", "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/commit/KafkaThrottledLatestProcessedCommit.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNzo0NzowNVrOHVD_Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDowMTo1N1rOHVRg4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg0NzQ3OQ==", "bodyText": "instead of using a periodic task, we may want to do a timed task starting a new timed task. So the gap between the end of the task and the beginning of the next one will be the configured time. Without it's the time between 2 beginning which might be too close.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/762#discussion_r491847479", "createdAt": "2020-09-21T07:47:05Z", "author": {"login": "cescoffier"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/commit/KafkaThrottledLatestProcessedCommit.java", "diffHunk": "@@ -106,25 +103,26 @@ public void partitionsAssigned(Context context, Set<TopicPartition> partitions)\n \n         offsetStores.clear();\n \n-        resetNextCommitTime();\n+        if (timerId != null) {\n+            context.owner().cancelTimer(timerId);\n+            timerId = null;\n+        }\n+\n+        if (!partitions.isEmpty()) {\n+            timerId = context\n+                    .owner()\n+                    .setPeriodic(autoCommitInterval, this::flushAndCheckHealth);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cad5346a11e89e7333fed0f071eb79d31387c393"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA2OTA5MQ==", "bodyText": "I wavered between the two options. I'll go with your suggestion.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/762#discussion_r492069091", "createdAt": "2020-09-21T14:01:57Z", "author": {"login": "pcasaes"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/commit/KafkaThrottledLatestProcessedCommit.java", "diffHunk": "@@ -106,25 +103,26 @@ public void partitionsAssigned(Context context, Set<TopicPartition> partitions)\n \n         offsetStores.clear();\n \n-        resetNextCommitTime();\n+        if (timerId != null) {\n+            context.owner().cancelTimer(timerId);\n+            timerId = null;\n+        }\n+\n+        if (!partitions.isEmpty()) {\n+            timerId = context\n+                    .owner()\n+                    .setPeriodic(autoCommitInterval, this::flushAndCheckHealth);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg0NzQ3OQ=="}, "originalCommit": {"oid": "cad5346a11e89e7333fed0f071eb79d31387c393"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3Nzk2MTQ5OnYy", "diffSide": "RIGHT", "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/impl/KafkaSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNzo0ODoyNFrOHVEB_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDoxNDo1M1rOHVSNxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg0ODE4OA==", "bodyText": "shouldn't we pause first?", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/762#discussion_r491848188", "createdAt": "2020-09-21T07:48:24Z", "author": {"login": "cescoffier"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/impl/KafkaSource.java", "diffHunk": "@@ -150,6 +150,7 @@ public KafkaSource(Vertx vertx,\n                     + 11_000L; // it's possible that it might expire 10 seconds before when we need it to\n \n             kafkaConsumer.partitionsAssignedHandler(set -> {\n+                commitHandler.partitionsAssigned(vertx.getOrCreateContext(), set);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cad5346a11e89e7333fed0f071eb79d31387c393"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA4MDU4Mg==", "bodyText": "Works either way since we are in the context's event thread. I'll move it if it makes it clearer.", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/762#discussion_r492080582", "createdAt": "2020-09-21T14:14:53Z", "author": {"login": "pcasaes"}, "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/impl/KafkaSource.java", "diffHunk": "@@ -150,6 +150,7 @@ public KafkaSource(Vertx vertx,\n                     + 11_000L; // it's possible that it might expire 10 seconds before when we need it to\n \n             kafkaConsumer.partitionsAssignedHandler(set -> {\n+                commitHandler.partitionsAssigned(vertx.getOrCreateContext(), set);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg0ODE4OA=="}, "originalCommit": {"oid": "cad5346a11e89e7333fed0f071eb79d31387c393"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 41, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}