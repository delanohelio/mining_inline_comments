{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4MTMyNjUy", "number": 1900, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNjoxNzoxOVrOEDBE1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNjoxNzoxOVrOEDBE1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTk4ODA2OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiLinkUpdaterSvcImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNjoxNzoxOVrOGf047A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNjoyMDozMVrOGf0_VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAyNTU4MA==", "bodyText": "Is this not handled via an interceptor already? Or are we worried about internal calls?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1900#discussion_r436025580", "createdAt": "2020-06-05T16:17:19Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiLinkUpdaterSvcImpl.java", "diffHunk": "@@ -111,4 +115,46 @@ private void validateUpdateLinkRequest(IAnyResource thePerson, IAnyResource theT\n \t\t\tthrow new InvalidRequestException(\"The target is marked with the \" + EmpiConstants.CODE_NO_EMPI_MANAGED + \" tag which means it may not be EMPI linked.\");\n \t\t}\n \t}\n+\n+\t@Transactional\n+\t@Override\n+\tpublic IBaseParameters notDuplicatePerson(IAnyResource thePerson, IAnyResource theTarget, EmpiTransactionContext theEmpiContext) {\n+\t\tvalidateNotDuplicatePersonRequest(thePerson, theTarget);\n+\n+\t\tLong personId = myIdHelperService.getPidOrThrowException(thePerson);\n+\t\tLong targetId = myIdHelperService.getPidOrThrowException(theTarget);\n+\n+\t\tOptional<EmpiLink> oEmpiLink = myEmpiLinkDaoSvc.getLinkByPersonPidAndTargetPid(personId, targetId);\n+\t\tif (!oEmpiLink.isPresent()) {\n+\t\t\tthrow new InvalidRequestException(\"No link exists between \" + thePerson.getIdElement().toVersionless() + \" and \" + theTarget.getIdElement().toVersionless());\n+\t\t}\n+\n+\t\tEmpiLink empiLink = oEmpiLink.get();\n+\t\tif (!empiLink.isPossibleDuplicate()) {\n+\t\t\tthrow new InvalidRequestException(thePerson.getIdElement().toVersionless() + \" and \" + theTarget.getIdElement().toVersionless() + \" are not linked as POSSIBLE_DUPLICATE.\");\n+\t\t}\n+\t\tempiLink.setMatchResult(EmpiMatchResultEnum.NO_MATCH);\n+\t\tempiLink.setLinkSource(EmpiLinkSourceEnum.MANUAL);\n+\t\tmyEmpiLinkDaoSvc.save(empiLink);\n+\n+\t\tParameters retval = (Parameters) ParametersUtil.newInstance(myFhirContext);\n+\t\tretval.addParameter(\"success\", true);\n+\t\treturn retval;\n+\t}\n+\n+\tprivate void validateNotDuplicatePersonRequest(IAnyResource thePerson, IAnyResource theTarget) {\n+\t\tString personType = myFhirContext.getResourceType(thePerson);\n+\t\tString targetType = myFhirContext.getResourceType(theTarget);\n+\t\tif (!\"Person\".equals(personType)) {\n+\t\t\tthrow new InvalidRequestException(\"First argument to \" + ProviderConstants.EMPI_UPDATE_LINK + \" must be a Person.  Was \" + personType);\n+\t\t}\n+\t\tif (!\"Person\".equals(targetType)) {\n+\t\t\tthrow new InvalidRequestException(\"Second argument to \" + ProviderConstants.EMPI_UPDATE_LINK + \" must be a Person .  Was \" + targetType);\n+\t\t}\n+\n+\t\tif (!EmpiUtil.isEmpiManaged(thePerson) || !EmpiUtil.isEmpiManaged(theTarget)) {\n+\t\t\tthrow new InvalidRequestException(\"Only EMPI Managed Person resources may be updated via this operation.  The Person resource provided is not tagged as managed by hapi-empi\");\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbea0972a949b9ee0c19d024301001e7fd61615a"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAyNzIyMQ==", "bodyText": "It's not expensive.  No harm checking on two layers.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1900#discussion_r436027221", "createdAt": "2020-06-05T16:20:31Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiLinkUpdaterSvcImpl.java", "diffHunk": "@@ -111,4 +115,46 @@ private void validateUpdateLinkRequest(IAnyResource thePerson, IAnyResource theT\n \t\t\tthrow new InvalidRequestException(\"The target is marked with the \" + EmpiConstants.CODE_NO_EMPI_MANAGED + \" tag which means it may not be EMPI linked.\");\n \t\t}\n \t}\n+\n+\t@Transactional\n+\t@Override\n+\tpublic IBaseParameters notDuplicatePerson(IAnyResource thePerson, IAnyResource theTarget, EmpiTransactionContext theEmpiContext) {\n+\t\tvalidateNotDuplicatePersonRequest(thePerson, theTarget);\n+\n+\t\tLong personId = myIdHelperService.getPidOrThrowException(thePerson);\n+\t\tLong targetId = myIdHelperService.getPidOrThrowException(theTarget);\n+\n+\t\tOptional<EmpiLink> oEmpiLink = myEmpiLinkDaoSvc.getLinkByPersonPidAndTargetPid(personId, targetId);\n+\t\tif (!oEmpiLink.isPresent()) {\n+\t\t\tthrow new InvalidRequestException(\"No link exists between \" + thePerson.getIdElement().toVersionless() + \" and \" + theTarget.getIdElement().toVersionless());\n+\t\t}\n+\n+\t\tEmpiLink empiLink = oEmpiLink.get();\n+\t\tif (!empiLink.isPossibleDuplicate()) {\n+\t\t\tthrow new InvalidRequestException(thePerson.getIdElement().toVersionless() + \" and \" + theTarget.getIdElement().toVersionless() + \" are not linked as POSSIBLE_DUPLICATE.\");\n+\t\t}\n+\t\tempiLink.setMatchResult(EmpiMatchResultEnum.NO_MATCH);\n+\t\tempiLink.setLinkSource(EmpiLinkSourceEnum.MANUAL);\n+\t\tmyEmpiLinkDaoSvc.save(empiLink);\n+\n+\t\tParameters retval = (Parameters) ParametersUtil.newInstance(myFhirContext);\n+\t\tretval.addParameter(\"success\", true);\n+\t\treturn retval;\n+\t}\n+\n+\tprivate void validateNotDuplicatePersonRequest(IAnyResource thePerson, IAnyResource theTarget) {\n+\t\tString personType = myFhirContext.getResourceType(thePerson);\n+\t\tString targetType = myFhirContext.getResourceType(theTarget);\n+\t\tif (!\"Person\".equals(personType)) {\n+\t\t\tthrow new InvalidRequestException(\"First argument to \" + ProviderConstants.EMPI_UPDATE_LINK + \" must be a Person.  Was \" + personType);\n+\t\t}\n+\t\tif (!\"Person\".equals(targetType)) {\n+\t\t\tthrow new InvalidRequestException(\"Second argument to \" + ProviderConstants.EMPI_UPDATE_LINK + \" must be a Person .  Was \" + targetType);\n+\t\t}\n+\n+\t\tif (!EmpiUtil.isEmpiManaged(thePerson) || !EmpiUtil.isEmpiManaged(theTarget)) {\n+\t\t\tthrow new InvalidRequestException(\"Only EMPI Managed Person resources may be updated via this operation.  The Person resource provided is not tagged as managed by hapi-empi\");\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAyNTU4MA=="}, "originalCommit": {"oid": "fbea0972a949b9ee0c19d024301001e7fd61615a"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1854, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}