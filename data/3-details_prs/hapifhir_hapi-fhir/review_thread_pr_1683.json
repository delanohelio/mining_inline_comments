{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NjI5ODAw", "number": 1683, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDozMDoyNlrODacaMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMTowOTo0NVrODadB-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDU1MDI3OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/BaseHapiFhirDao.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDozMDoyNlrOFhZlZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNzo0NDowNFrOFhlVKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2NjUwMw==", "bodyText": "Does this TODO still apply? Seems like it can be dropped now..", "url": "https://github.com/hapifhir/hapi-fhir/pull/1683#discussion_r370566503", "createdAt": "2020-01-24T10:30:26Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/BaseHapiFhirDao.java", "diffHunk": "@@ -456,8 +436,8 @@ public boolean isLogicalReference(IIdType theId) {\n \n \t// TODO KHS inject a searchBuilderFactory into callers of this method and delete this method", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b465a7b7819ac1c3348ecd04d73dad996a34458d"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1ODk1NA==", "bodyText": "It does.  I resolved it.  But it took WAAAY more effort to resolve than I anticipated.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1683#discussion_r370758954", "createdAt": "2020-01-24T17:44:04Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/BaseHapiFhirDao.java", "diffHunk": "@@ -456,8 +436,8 @@ public boolean isLogicalReference(IIdType theId) {\n \n \t// TODO KHS inject a searchBuilderFactory into callers of this method and delete this method", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2NjUwMw=="}, "originalCommit": {"oid": "b465a7b7819ac1c3348ecd04d73dad996a34458d"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDYxNTUzOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/BasePredicateBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDo1NDowMFrOFhaMlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODowNTozNlrOFhl3cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3NjUzMw==", "bodyText": "Nitpick: Are these fields all package protected deliberately? I'm not seeing any reason for them to need to be", "url": "https://github.com/hapifhir/hapi-fhir/pull/1683#discussion_r370576533", "createdAt": "2020-01-24T10:54:00Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/BasePredicateBuilder.java", "diffHunk": "@@ -0,0 +1,198 @@\n+package ca.uhn.fhir.jpa.dao.predicate;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.jpa.dao.BaseHapiFhirDao;\n+import ca.uhn.fhir.jpa.dao.DaoConfig;\n+import ca.uhn.fhir.jpa.dao.SearchBuilder;\n+import ca.uhn.fhir.jpa.model.entity.BaseResourceIndexedSearchParam;\n+import ca.uhn.fhir.jpa.model.entity.ResourceIndexedSearchParamDate;\n+import ca.uhn.fhir.jpa.model.entity.ResourceTable;\n+import ca.uhn.fhir.jpa.model.entity.SearchParamPresent;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.model.api.IQueryParameterType;\n+import ca.uhn.fhir.rest.param.ParamPrefixEnum;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import javax.annotation.PostConstruct;\n+import javax.persistence.criteria.*;\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.util.List;\n+\n+abstract class BasePredicateBuilder {\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(BasePredicateBuilder.class);\n+\t@Autowired\n+\tFhirContext myContext;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b465a7b7819ac1c3348ecd04d73dad996a34458d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2NzcyOQ==", "bodyText": "They need to be at least protected.  package-protected is stricter than protected and has two advantages: encourages people to put subclasses in the right package, and also it looks nicer.  If someone needs to relax to protected later on I assume they'll just do that.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1683#discussion_r370767729", "createdAt": "2020-01-24T18:05:36Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/BasePredicateBuilder.java", "diffHunk": "@@ -0,0 +1,198 @@\n+package ca.uhn.fhir.jpa.dao.predicate;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.jpa.dao.BaseHapiFhirDao;\n+import ca.uhn.fhir.jpa.dao.DaoConfig;\n+import ca.uhn.fhir.jpa.dao.SearchBuilder;\n+import ca.uhn.fhir.jpa.model.entity.BaseResourceIndexedSearchParam;\n+import ca.uhn.fhir.jpa.model.entity.ResourceIndexedSearchParamDate;\n+import ca.uhn.fhir.jpa.model.entity.ResourceTable;\n+import ca.uhn.fhir.jpa.model.entity.SearchParamPresent;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.model.api.IQueryParameterType;\n+import ca.uhn.fhir.rest.param.ParamPrefixEnum;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import javax.annotation.PostConstruct;\n+import javax.persistence.criteria.*;\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.util.List;\n+\n+abstract class BasePredicateBuilder {\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(BasePredicateBuilder.class);\n+\t@Autowired\n+\tFhirContext myContext;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3NjUzMw=="}, "originalCommit": {"oid": "b465a7b7819ac1c3348ecd04d73dad996a34458d"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDYxODg3OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/BasePredicateBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDo1NToyMVrOFhaOxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODowODowNlrOFhl7kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3NzA5NA==", "bodyText": "This is one of those moments when you can tell that the person who designed a web UI doesn't use tabs in their own editor.. :s", "url": "https://github.com/hapifhir/hapi-fhir/pull/1683#discussion_r370577094", "createdAt": "2020-01-24T10:55:21Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/BasePredicateBuilder.java", "diffHunk": "@@ -0,0 +1,198 @@\n+package ca.uhn.fhir.jpa.dao.predicate;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.jpa.dao.BaseHapiFhirDao;\n+import ca.uhn.fhir.jpa.dao.DaoConfig;\n+import ca.uhn.fhir.jpa.dao.SearchBuilder;\n+import ca.uhn.fhir.jpa.model.entity.BaseResourceIndexedSearchParam;\n+import ca.uhn.fhir.jpa.model.entity.ResourceIndexedSearchParamDate;\n+import ca.uhn.fhir.jpa.model.entity.ResourceTable;\n+import ca.uhn.fhir.jpa.model.entity.SearchParamPresent;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.model.api.IQueryParameterType;\n+import ca.uhn.fhir.rest.param.ParamPrefixEnum;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import javax.annotation.PostConstruct;\n+import javax.persistence.criteria.*;\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.util.List;\n+\n+abstract class BasePredicateBuilder {\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(BasePredicateBuilder.class);\n+\t@Autowired\n+\tFhirContext myContext;\n+\t@Autowired\n+\tDaoConfig myDaoConfig;\n+\n+\tboolean myDontUseHashesForSearch;\n+\tfinal BaseHapiFhirDao<?> myCallingDao;\n+\tfinal CriteriaBuilder myBuilder;\n+\tfinal QueryRoot myQueryRoot;\n+\tfinal Class<? extends IBaseResource> myResourceType;\n+\tfinal String myResourceName;\n+\tfinal SearchParameterMap myParams;\n+\n+\tBasePredicateBuilder(SearchBuilder theSearchBuilder) {\n+\t\tmyCallingDao = theSearchBuilder.getCallingDao();\n+\t\tmyBuilder = theSearchBuilder.getBuilder();\n+\t\tmyQueryRoot = theSearchBuilder.getQueryRoot();\n+\t\tmyResourceType = theSearchBuilder.getResourceType();\n+\t\tmyResourceName = theSearchBuilder.getResourceName();\n+\t\tmyParams = theSearchBuilder.getParams();\n+\t}\n+\n+\t@PostConstruct\n+\tprivate void postConstruct() {\n+\t\tmyDontUseHashesForSearch = myDaoConfig.getDisableHashBasedSearches();\n+\t}\n+\n+\t@SuppressWarnings(\"unchecked\")\n+\t<T> Join<ResourceTable, T> createJoin(SearchBuilderJoinEnum theType, String theSearchParameterName) {\n+\t\tJoin<ResourceTable, ResourceIndexedSearchParamDate> join = null;\n+\t\tswitch (theType) {\n+\t\t\tcase DATE:\n+\t\t\t\tjoin = myQueryRoot.join(\"myParamsDate\", JoinType.LEFT);\n+\t\t\t\tbreak;\n+\t\t\tcase NUMBER:\n+\t\t\t\tjoin = myQueryRoot.join(\"myParamsNumber\", JoinType.LEFT);\n+\t\t\t\tbreak;\n+\t\t\tcase QUANTITY:\n+\t\t\t\tjoin = myQueryRoot.join(\"myParamsQuantity\", JoinType.LEFT);\n+\t\t\t\tbreak;\n+\t\t\tcase REFERENCE:\n+\t\t\t\tjoin = myQueryRoot.join(\"myResourceLinks\", JoinType.LEFT);\n+\t\t\t\tbreak;\n+\t\t\tcase STRING:\n+\t\t\t\tjoin = myQueryRoot.join(\"myParamsString\", JoinType.LEFT);\n+\t\t\t\tbreak;\n+\t\t\tcase URI:\n+\t\t\t\tjoin = myQueryRoot.join(\"myParamsUri\", JoinType.LEFT);\n+\t\t\t\tbreak;\n+\t\t\tcase TOKEN:\n+\t\t\t\tjoin = myQueryRoot.join(\"myParamsToken\", JoinType.LEFT);\n+\t\t\t\tbreak;\n+\t\t\tcase COORDS:\n+\t\t\t\tjoin = myQueryRoot.join(\"myParamsCoords\", JoinType.LEFT);\n+\t\t\t\tbreak;\n+\t\t}\n+\n+\t\tSearchBuilderJoinKey key = new SearchBuilderJoinKey(theSearchParameterName, theType);\n+\t\tmyQueryRoot.putIndex(key, join);\n+\n+\t\treturn (Join<ResourceTable, T>) join;\n+\t}\n+\n+\tvoid addPredicateParamMissing(String theResourceName, String theParamName, boolean theMissing) {\n+//\t\tif (myDontUseHashesForSearch) {\n+//\t\t\tJoin<ResourceTable, SearchParamPresent> paramPresentJoin = myQueryRoot.join(\"mySearchParamPresents\", JoinType.LEFT);\n+//\t\t\tJoin<Object, Object> paramJoin = paramPresentJoin.join(\"mySearchParam\", JoinType.LEFT);\n+//\n+//\t\t\tmyQueryRoot.addPredicate(myBuilder.equal(paramJoin.get(\"myResourceName\"), theResourceName));\n+//\t\t\tmyQueryRoot.addPredicate(myBuilder.equal(paramJoin.get(\"myParamName\"), theParamName));\n+//\t\t\tmyQueryRoot.addPredicate(myBuilder.equal(paramPresentJoin.get(\"myPresent\"), !theMissing));\n+//\t\t}\n+\n+\t\tJoin<ResourceTable, SearchParamPresent> paramPresentJoin = myQueryRoot.join(\"mySearchParamPresents\", JoinType.LEFT);\n+\n+\t\tExpression<Long> hashPresence = paramPresentJoin.get(\"myHashPresence\").as(Long.class);\n+\t\tLong hash = SearchParamPresent.calculateHashPresence(theResourceName, theParamName, !theMissing);\n+\t\tmyQueryRoot.addPredicate(myBuilder.equal(hashPresence, hash));\n+\t}\n+\n+\tvoid addPredicateParamMissing(String theResourceName, String theParamName, boolean theMissing, Join<ResourceTable, ? extends BaseResourceIndexedSearchParam> theJoin) {\n+\n+\t\tmyQueryRoot.addPredicate(myBuilder.equal(theJoin.get(\"myResourceType\"), theResourceName));\n+\t\tmyQueryRoot.addPredicate(myBuilder.equal(theJoin.get(\"myParamName\"), theParamName));\n+\t\tmyQueryRoot.addPredicate(myBuilder.equal(theJoin.get(\"myMissing\"), theMissing));\n+\t}\n+\n+\tPredicate combineParamIndexPredicateWithParamNamePredicate(String theResourceName, String theParamName, From<?, ? extends BaseResourceIndexedSearchParam> theFrom, Predicate thePredicate) {\n+\t\tif (myDontUseHashesForSearch) {\n+\t\t\tPredicate resourceTypePredicate = myBuilder.equal(theFrom.get(\"myResourceType\"), theResourceName);\n+\t\t\tPredicate paramNamePredicate = myBuilder.equal(theFrom.get(\"myParamName\"), theParamName);\n+\t\t\tPredicate outerPredicate = myBuilder.and(resourceTypePredicate, paramNamePredicate, thePredicate);\n+\t\t\treturn outerPredicate;\n+\t\t}\n+\n+\t\tlong hashIdentity = BaseResourceIndexedSearchParam.calculateHashIdentity(theResourceName, theParamName);\n+\t\tPredicate hashIdentityPredicate = myBuilder.equal(theFrom.get(\"myHashIdentity\"), hashIdentity);\n+\t\treturn myBuilder.and(hashIdentityPredicate, thePredicate);\n+\t}\n+\n+\tPredicate createPredicateNumeric(String theResourceName,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t  String theParamName,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t  From<?, ? extends BaseResourceIndexedSearchParam> theFrom,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t  CriteriaBuilder builder,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t  IQueryParameterType theParam,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ParamPrefixEnum thePrefix,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t  BigDecimal theValue,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t  final Expression<BigDecimal> thePath,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t  String invalidMessageName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b465a7b7819ac1c3348ecd04d73dad996a34458d"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2ODc4Ng==", "bodyText": "heh", "url": "https://github.com/hapifhir/hapi-fhir/pull/1683#discussion_r370768786", "createdAt": "2020-01-24T18:08:06Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/BasePredicateBuilder.java", "diffHunk": "@@ -0,0 +1,198 @@\n+package ca.uhn.fhir.jpa.dao.predicate;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.jpa.dao.BaseHapiFhirDao;\n+import ca.uhn.fhir.jpa.dao.DaoConfig;\n+import ca.uhn.fhir.jpa.dao.SearchBuilder;\n+import ca.uhn.fhir.jpa.model.entity.BaseResourceIndexedSearchParam;\n+import ca.uhn.fhir.jpa.model.entity.ResourceIndexedSearchParamDate;\n+import ca.uhn.fhir.jpa.model.entity.ResourceTable;\n+import ca.uhn.fhir.jpa.model.entity.SearchParamPresent;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.model.api.IQueryParameterType;\n+import ca.uhn.fhir.rest.param.ParamPrefixEnum;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import javax.annotation.PostConstruct;\n+import javax.persistence.criteria.*;\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.util.List;\n+\n+abstract class BasePredicateBuilder {\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(BasePredicateBuilder.class);\n+\t@Autowired\n+\tFhirContext myContext;\n+\t@Autowired\n+\tDaoConfig myDaoConfig;\n+\n+\tboolean myDontUseHashesForSearch;\n+\tfinal BaseHapiFhirDao<?> myCallingDao;\n+\tfinal CriteriaBuilder myBuilder;\n+\tfinal QueryRoot myQueryRoot;\n+\tfinal Class<? extends IBaseResource> myResourceType;\n+\tfinal String myResourceName;\n+\tfinal SearchParameterMap myParams;\n+\n+\tBasePredicateBuilder(SearchBuilder theSearchBuilder) {\n+\t\tmyCallingDao = theSearchBuilder.getCallingDao();\n+\t\tmyBuilder = theSearchBuilder.getBuilder();\n+\t\tmyQueryRoot = theSearchBuilder.getQueryRoot();\n+\t\tmyResourceType = theSearchBuilder.getResourceType();\n+\t\tmyResourceName = theSearchBuilder.getResourceName();\n+\t\tmyParams = theSearchBuilder.getParams();\n+\t}\n+\n+\t@PostConstruct\n+\tprivate void postConstruct() {\n+\t\tmyDontUseHashesForSearch = myDaoConfig.getDisableHashBasedSearches();\n+\t}\n+\n+\t@SuppressWarnings(\"unchecked\")\n+\t<T> Join<ResourceTable, T> createJoin(SearchBuilderJoinEnum theType, String theSearchParameterName) {\n+\t\tJoin<ResourceTable, ResourceIndexedSearchParamDate> join = null;\n+\t\tswitch (theType) {\n+\t\t\tcase DATE:\n+\t\t\t\tjoin = myQueryRoot.join(\"myParamsDate\", JoinType.LEFT);\n+\t\t\t\tbreak;\n+\t\t\tcase NUMBER:\n+\t\t\t\tjoin = myQueryRoot.join(\"myParamsNumber\", JoinType.LEFT);\n+\t\t\t\tbreak;\n+\t\t\tcase QUANTITY:\n+\t\t\t\tjoin = myQueryRoot.join(\"myParamsQuantity\", JoinType.LEFT);\n+\t\t\t\tbreak;\n+\t\t\tcase REFERENCE:\n+\t\t\t\tjoin = myQueryRoot.join(\"myResourceLinks\", JoinType.LEFT);\n+\t\t\t\tbreak;\n+\t\t\tcase STRING:\n+\t\t\t\tjoin = myQueryRoot.join(\"myParamsString\", JoinType.LEFT);\n+\t\t\t\tbreak;\n+\t\t\tcase URI:\n+\t\t\t\tjoin = myQueryRoot.join(\"myParamsUri\", JoinType.LEFT);\n+\t\t\t\tbreak;\n+\t\t\tcase TOKEN:\n+\t\t\t\tjoin = myQueryRoot.join(\"myParamsToken\", JoinType.LEFT);\n+\t\t\t\tbreak;\n+\t\t\tcase COORDS:\n+\t\t\t\tjoin = myQueryRoot.join(\"myParamsCoords\", JoinType.LEFT);\n+\t\t\t\tbreak;\n+\t\t}\n+\n+\t\tSearchBuilderJoinKey key = new SearchBuilderJoinKey(theSearchParameterName, theType);\n+\t\tmyQueryRoot.putIndex(key, join);\n+\n+\t\treturn (Join<ResourceTable, T>) join;\n+\t}\n+\n+\tvoid addPredicateParamMissing(String theResourceName, String theParamName, boolean theMissing) {\n+//\t\tif (myDontUseHashesForSearch) {\n+//\t\t\tJoin<ResourceTable, SearchParamPresent> paramPresentJoin = myQueryRoot.join(\"mySearchParamPresents\", JoinType.LEFT);\n+//\t\t\tJoin<Object, Object> paramJoin = paramPresentJoin.join(\"mySearchParam\", JoinType.LEFT);\n+//\n+//\t\t\tmyQueryRoot.addPredicate(myBuilder.equal(paramJoin.get(\"myResourceName\"), theResourceName));\n+//\t\t\tmyQueryRoot.addPredicate(myBuilder.equal(paramJoin.get(\"myParamName\"), theParamName));\n+//\t\t\tmyQueryRoot.addPredicate(myBuilder.equal(paramPresentJoin.get(\"myPresent\"), !theMissing));\n+//\t\t}\n+\n+\t\tJoin<ResourceTable, SearchParamPresent> paramPresentJoin = myQueryRoot.join(\"mySearchParamPresents\", JoinType.LEFT);\n+\n+\t\tExpression<Long> hashPresence = paramPresentJoin.get(\"myHashPresence\").as(Long.class);\n+\t\tLong hash = SearchParamPresent.calculateHashPresence(theResourceName, theParamName, !theMissing);\n+\t\tmyQueryRoot.addPredicate(myBuilder.equal(hashPresence, hash));\n+\t}\n+\n+\tvoid addPredicateParamMissing(String theResourceName, String theParamName, boolean theMissing, Join<ResourceTable, ? extends BaseResourceIndexedSearchParam> theJoin) {\n+\n+\t\tmyQueryRoot.addPredicate(myBuilder.equal(theJoin.get(\"myResourceType\"), theResourceName));\n+\t\tmyQueryRoot.addPredicate(myBuilder.equal(theJoin.get(\"myParamName\"), theParamName));\n+\t\tmyQueryRoot.addPredicate(myBuilder.equal(theJoin.get(\"myMissing\"), theMissing));\n+\t}\n+\n+\tPredicate combineParamIndexPredicateWithParamNamePredicate(String theResourceName, String theParamName, From<?, ? extends BaseResourceIndexedSearchParam> theFrom, Predicate thePredicate) {\n+\t\tif (myDontUseHashesForSearch) {\n+\t\t\tPredicate resourceTypePredicate = myBuilder.equal(theFrom.get(\"myResourceType\"), theResourceName);\n+\t\t\tPredicate paramNamePredicate = myBuilder.equal(theFrom.get(\"myParamName\"), theParamName);\n+\t\t\tPredicate outerPredicate = myBuilder.and(resourceTypePredicate, paramNamePredicate, thePredicate);\n+\t\t\treturn outerPredicate;\n+\t\t}\n+\n+\t\tlong hashIdentity = BaseResourceIndexedSearchParam.calculateHashIdentity(theResourceName, theParamName);\n+\t\tPredicate hashIdentityPredicate = myBuilder.equal(theFrom.get(\"myHashIdentity\"), hashIdentity);\n+\t\treturn myBuilder.and(hashIdentityPredicate, thePredicate);\n+\t}\n+\n+\tPredicate createPredicateNumeric(String theResourceName,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t  String theParamName,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t  From<?, ? extends BaseResourceIndexedSearchParam> theFrom,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t  CriteriaBuilder builder,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t  IQueryParameterType theParam,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ParamPrefixEnum thePrefix,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t  BigDecimal theValue,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t  final Expression<BigDecimal> thePath,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t  String invalidMessageName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3NzA5NA=="}, "originalCommit": {"oid": "b465a7b7819ac1c3348ecd04d73dad996a34458d"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDYyMzgwOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/FuzzCalculator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDo1NzoyNVrOFhaR6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODowOToyMFrOFhl9aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3Nzg5OQ==", "bodyText": "nitpick: should probably make this a regular class with a private constructor and call it XxxUtil just to be consistent with how other collections of statics are named in hapi fhir.. not sure about the Xxx though. SearchFuzzUtil?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1683#discussion_r370577899", "createdAt": "2020-01-24T10:57:25Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/FuzzCalculator.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package ca.uhn.fhir.jpa.dao.predicate;\n+\n+import ca.uhn.fhir.rest.param.ParamPrefixEnum;\n+\n+import java.math.BigDecimal;\n+\n+public interface FuzzCalculator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b465a7b7819ac1c3348ecd04d73dad996a34458d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2OTI1OQ==", "bodyText": "Renamed to SearchFuzzUtil.  Kept as interface per offline discussion.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1683#discussion_r370769259", "createdAt": "2020-01-24T18:09:20Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/FuzzCalculator.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package ca.uhn.fhir.jpa.dao.predicate;\n+\n+import ca.uhn.fhir.rest.param.ParamPrefixEnum;\n+\n+import java.math.BigDecimal;\n+\n+public interface FuzzCalculator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3Nzg5OQ=="}, "originalCommit": {"oid": "b465a7b7819ac1c3348ecd04d73dad996a34458d"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDYzNzUyOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/util/CoordCalculator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMTowMzoyOFrOFhaabg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMTowMzoyOFrOFhaabg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4MDA3OA==", "bodyText": "huh. i totally thought the radius of the earth was way bigger than that.\ni love a PR that teaches me geography....", "url": "https://github.com/hapifhir/hapi-fhir/pull/1683#discussion_r370580078", "createdAt": "2020-01-24T11:03:28Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/util/CoordCalculator.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package ca.uhn.fhir.jpa.util;\n+\n+\n+import org.hibernate.search.spatial.impl.Point;\n+\n+public class CoordCalculator {\n+\tpublic static final double RADIUS_EARTH_KM = 6378.1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b465a7b7819ac1c3348ecd04d73dad996a34458d"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDY0MzE2OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/extractor/BaseSearchParamExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMTowNTo1NFrOFhad6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMTowNTo1NFrOFhad6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4MDk2OA==", "bodyText": "Presumably this can go", "url": "https://github.com/hapifhir/hapi-fhir/pull/1683#discussion_r370580968", "createdAt": "2020-01-24T11:05:54Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/extractor/BaseSearchParamExtractor.java", "diffHunk": "@@ -335,10 +319,19 @@ private void addUnexpectedDatatypeWarning(SearchParamSet<?> theParams, RuntimeSe\n \t\treturn extractSearchParams(theResource, extractor, RestSearchParameterTypeEnum.URI);\n \t}\n \n-\t@Override\n-\tpublic SearchParamSet<ResourceIndexedSearchParamCoords> extractSearchParamCoords(IBaseResource theResource) {\n-\t\treturn new SearchParamSet<>();\n-\t}\n+//\t@Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b465a7b7819ac1c3348ecd04d73dad996a34458d"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDY0NDIxOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/extractor/SearchParamExtractorService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMTowNjoyNFrOFhaemQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODoxMjowOFrOFhmByQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4MTE0NQ==", "bodyText": "..and this can go", "url": "https://github.com/hapifhir/hapi-fhir/pull/1683#discussion_r370581145", "createdAt": "2020-01-24T11:06:24Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/extractor/SearchParamExtractorService.java", "diffHunk": "@@ -67,20 +67,28 @@ public void extractFromResource(RequestDetails theRequestDetails, ResourceIndexe\n \t\thandleWarnings(theRequestDetails, myInterceptorBroadcaster, uris);\n \t\ttheParams.myUriParams.addAll(uris);\n \n-\t\tISearchParamExtractor.SearchParamSet<ResourceIndexedSearchParamCoords> coords = extractSearchParamCoords(theResource);\n-\t\thandleWarnings(theRequestDetails, myInterceptorBroadcaster, coords);\n-\t\ttheParams.myCoordsParams.addAll(coords);\n+//\t\tISearchParamExtractor.SearchParamSet<ResourceIndexedSearchParamCoords> coords = extractSearchParamCoords(theResource);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b465a7b7819ac1c3348ecd04d73dad996a34458d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc3MDM3Nw==", "bodyText": "done", "url": "https://github.com/hapifhir/hapi-fhir/pull/1683#discussion_r370770377", "createdAt": "2020-01-24T18:12:08Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/extractor/SearchParamExtractorService.java", "diffHunk": "@@ -67,20 +67,28 @@ public void extractFromResource(RequestDetails theRequestDetails, ResourceIndexe\n \t\thandleWarnings(theRequestDetails, myInterceptorBroadcaster, uris);\n \t\ttheParams.myUriParams.addAll(uris);\n \n-\t\tISearchParamExtractor.SearchParamSet<ResourceIndexedSearchParamCoords> coords = extractSearchParamCoords(theResource);\n-\t\thandleWarnings(theRequestDetails, myInterceptorBroadcaster, coords);\n-\t\ttheParams.myCoordsParams.addAll(coords);\n+//\t\tISearchParamExtractor.SearchParamSet<ResourceIndexedSearchParamCoords> coords = extractSearchParamCoords(theResource);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4MTE0NQ=="}, "originalCommit": {"oid": "b465a7b7819ac1c3348ecd04d73dad996a34458d"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDY1MjA5OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/rest/param/ParameterUtil.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMTowOTo0NVrOFhajTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxOTozNjozNlrOFhxF8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4MjM0OQ==", "bodyText": "Overall comment 1: Is there any impact on the in memory matcher for this change? Not necessarily that it needs to support location searches, but does it at least do something consistent if you try to use them?\nOverall comment 2: What do you think about throwing a page in here? It could completely just be a page with one paragraph explaining how these work and leaving it at that.. I feel like that will avoid confusion", "url": "https://github.com/hapifhir/hapi-fhir/pull/1683#discussion_r370582349", "createdAt": "2020-01-24T11:09:45Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/rest/param/ParameterUtil.java", "diffHunk": "@@ -98,6 +98,12 @@\n \t\t\t\tbinder = new QueryParameterAndBinder(HasAndListParam.class,\n \t\t\t\t\tCollections.<Class<? extends IQueryParameterType>>emptyList());\n \t\t\t\tbreak;\n+\t\t\tcase SPECIAL:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b465a7b7819ac1c3348ecd04d73dad996a34458d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwOTk4Nw==", "bodyText": "Good call on checking the in-memory matchers.  It worked fine for R4 and R5 (because the search param type is SPECIAL for those.) . But it failed for Dstu3.  I've added a failing test and will fix on the weekend sometime.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1683#discussion_r370909987", "createdAt": "2020-01-25T03:05:03Z", "author": {"login": "fil512"}, "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/rest/param/ParameterUtil.java", "diffHunk": "@@ -98,6 +98,12 @@\n \t\t\t\tbinder = new QueryParameterAndBinder(HasAndListParam.class,\n \t\t\t\t\tCollections.<Class<? extends IQueryParameterType>>emptyList());\n \t\t\t\tbreak;\n+\t\t\tcase SPECIAL:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4MjM0OQ=="}, "originalCommit": {"oid": "b465a7b7819ac1c3348ecd04d73dad996a34458d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0ODM3NQ==", "bodyText": "OK In-memory is working properly now.  (Unsupported for now.)", "url": "https://github.com/hapifhir/hapi-fhir/pull/1683#discussion_r370948375", "createdAt": "2020-01-25T18:31:52Z", "author": {"login": "fil512"}, "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/rest/param/ParameterUtil.java", "diffHunk": "@@ -98,6 +98,12 @@\n \t\t\t\tbinder = new QueryParameterAndBinder(HasAndListParam.class,\n \t\t\t\t\tCollections.<Class<? extends IQueryParameterType>>emptyList());\n \t\t\t\tbreak;\n+\t\t\tcase SPECIAL:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4MjM0OQ=="}, "originalCommit": {"oid": "b465a7b7819ac1c3348ecd04d73dad996a34458d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1MTY2Nw==", "bodyText": "Took the documentation a little further and added a JPA Server Search page and listed known limitations.  I'm sure I'm missing s few...", "url": "https://github.com/hapifhir/hapi-fhir/pull/1683#discussion_r370951667", "createdAt": "2020-01-25T19:36:36Z", "author": {"login": "fil512"}, "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/rest/param/ParameterUtil.java", "diffHunk": "@@ -98,6 +98,12 @@\n \t\t\t\tbinder = new QueryParameterAndBinder(HasAndListParam.class,\n \t\t\t\t\tCollections.<Class<? extends IQueryParameterType>>emptyList());\n \t\t\t\tbreak;\n+\t\t\tcase SPECIAL:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4MjM0OQ=="}, "originalCommit": {"oid": "b465a7b7819ac1c3348ecd04d73dad996a34458d"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1989, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}