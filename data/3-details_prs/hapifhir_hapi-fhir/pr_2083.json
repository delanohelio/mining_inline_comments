{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3NTE1ODQx", "number": 2083, "title": "SearchCoordinatorSvcImpl gets ExecutorService from injected ThreadPoolTaskExecutor", "bodyText": "This enables support for adding a TaskDecorator (e.g. to add/clear ThreadLocal logging context (MDC) variables).\nHere is an example of a useful TaskDecorator that adds logging context to the log statements produced by the search tasks spawned in SearchCoordinatorSvcImpl\nimport org.apache.logging.log4j.ThreadContext;\nimport org.springframework.core.task.TaskDecorator;\nimport org.springframework.stereotype.Component;\n\n/**\n * TaskDecorator that copies the ThreadContext from main thread to task thread.\n */\n@SuppressWarnings(\"unused\")\n@Component\npublic class LoggingContextTaskDecorator implements TaskDecorator {\n    @Override\n    public Runnable decorate(Runnable runnable) {\n        var contextMap = ThreadContext.getImmutableContext(); //get main thread context map\n        //return new runnable that is executed on task thread\n        return () -> {\n            try {\n                ThreadContext.putAll(contextMap); //set task thread context map\n                runnable.run();\n            } finally {\n                ThreadContext.removeAll(contextMap.keySet());\n            }\n        };\n    }\n}\n\nThe decorator can be added to the ThreadPoolTaskExecutor in user code\n    @Bean(\"searchCoordinatorThreadFactory\")\n    @Primary\n    public ThreadPoolTaskExecutor searchCoordinatorThreadFactory(TaskExecutorBuilder builder, LoggingContextTaskDecorator loggingContextTaskDecorator) {\n        return builder\n                .threadNamePrefix(\"search_coord_\")\n                .taskDecorator(loggingContextTaskDecorator)\n                .build();\n    }", "createdAt": "2020-09-15T19:33:50Z", "url": "https://github.com/hapifhir/hapi-fhir/pull/2083", "merged": true, "mergeCommit": {"oid": "c884f29112d1c8b73a631501d0de44bffc0e067f"}, "closed": true, "closedAt": "2020-09-16T13:05:28Z", "author": {"login": "ttntrifork"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJM2VrAH2gAyNDg3NTE1ODQxOjY5ZDZmNDk0Mzg3ZGYzODExYTRjMDI3Yzg3OTg2NTA0ODI2MDc4MzY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABeO3oPyAFqTYzOTUzNzQ5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "69d6f494387df3811a4c027c8798650482607836", "author": {"user": {"login": "ttntrifork", "name": "Tue Toft N\u00f8rg\u00e5rd"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/69d6f494387df3811a4c027c8798650482607836", "committedDate": "2020-09-15T19:20:46Z", "message": "Get ExecutorService from injected ThreadPoolTaskExecutor which enables support of TaskDecorators (e.g. to add/clear ThreadLocal logging context (MDC) variables)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aecbfff59dcc245ceb876d3b64593922063c8aea", "author": {"user": {"login": "ttntrifork", "name": "Tue Toft N\u00f8rg\u00e5rd"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/aecbfff59dcc245ceb876d3b64593922063c8aea", "committedDate": "2020-09-16T11:39:45Z", "message": "Properly initialize ThreadPoolTaskExecutor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NjAyNDQy", "url": "https://github.com/hapifhir/hapi-fhir/pull/2083#pullrequestreview-489602442", "createdAt": "2020-09-16T13:04:58Z", "commit": {"oid": "aecbfff59dcc245ceb876d3b64593922063c8aea"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM5NTM3NDk1", "url": "https://github.com/hapifhir/hapi-fhir/pull/2083#pullrequestreview-639537495", "createdAt": "2021-04-20T06:12:03Z", "commit": {"oid": "aecbfff59dcc245ceb876d3b64593922063c8aea"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yMFQwNjoxMjowM1rOJL0VUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yMFQwNjoxMjowM1rOJL0VUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjM3MTUzOA==", "bodyText": "I think this accidentally changes the way thread pool was working before. According to javadoc this acts similar to single thread executor (because core pool size is 1 and queue is unbounded -> it won't increase the thread count). This default leads to pretty large performance degradation because all searches are ran with the same thread. Before this change SearchCoordinatorSvcImpl used unbounded thread pool that always immediately created a new thread.\nhttps://www.baeldung.com/java-threadpooltaskexecutor-core-vs-max-poolsize (and also note the reject policy if queue is full and pool is in maximum)\nping @jamesagnew\nAt least I think this should be documented that the thread pool is now acting differently and may need configuration.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2083#discussion_r616371538", "createdAt": "2021-04-20T06:12:03Z", "author": {"login": "tuomoa"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/config/BaseConfig.java", "diffHunk": "@@ -262,6 +262,14 @@ public ISearchResultCacheSvc searchResultCacheSvc() {\n \t\treturn new DatabaseSearchResultCacheSvcImpl();\n \t}\n \n+\t@Bean\n+\tpublic ThreadPoolTaskExecutor searchCoordinatorThreadFactory() {\n+\t\tfinal ThreadPoolTaskExecutor threadPoolTaskExecutor = new ThreadPoolTaskExecutor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aecbfff59dcc245ceb876d3b64593922063c8aea"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3860, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}