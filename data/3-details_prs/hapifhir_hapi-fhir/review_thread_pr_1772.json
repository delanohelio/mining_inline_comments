{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNjYyMDQy", "number": 1772, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwOToxNTo1M1rODqs_0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwOTozMToxOVrODqtXuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTA0MDE2OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/changelog/4_3_0/1772-allow-chain-on-type.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwOToxNTo1NFrOF6nG6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwOTo1ODoxOVrOF6ow5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAwMjQ3NQ==", "bodyText": "Nice that you have this changelog!\nI didn't see context in Encounter: https://www.hl7.org/fhir/encounter.html. Perhaps you could use subject instead?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1772#discussion_r397002475", "createdAt": "2020-03-24T09:15:54Z", "author": {"login": "LishaZ"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/changelog/4_3_0/1772-allow-chain-on-type.yaml", "diffHunk": "@@ -0,0 +1,5 @@\n+---\n+type: add\n+issue: 1772\n+title: \"The JPA server now allows chained searches on the `_type` parameter. For example, the following\n+   could be used to find all Encounters with a context of type Group: `Encounter?context._type=Group`.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a067a2001d3f45afd9db87a199a428a5804eacde"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAyOTYwNA==", "bodyText": "Whoops! Will fix.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1772#discussion_r397029604", "createdAt": "2020-03-24T09:58:19Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/changelog/4_3_0/1772-allow-chain-on-type.yaml", "diffHunk": "@@ -0,0 +1,5 @@\n+---\n+type: add\n+issue: 1772\n+title: \"The JPA server now allows chained searches on the `_type` parameter. For example, the following\n+   could be used to find all Encounters with a context of type Group: `Encounter?context._type=Group`.\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAwMjQ3NQ=="}, "originalCommit": {"oid": "a067a2001d3f45afd9db87a199a428a5804eacde"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTA4MTUzOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/PredicateBuilderReference.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwOToyNjoyMVrOF6nhew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDowMjowN1rOF6o6jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAwOTI3NQ==", "bodyText": "Maybe you can refactor this into a method like you did for newInvalidResourceTypeException so it's a bit easier to read", "url": "https://github.com/hapifhir/hapi-fhir/pull/1772#discussion_r397009275", "createdAt": "2020-03-24T09:26:21Z", "author": {"login": "LishaZ"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/PredicateBuilderReference.java", "diffHunk": "@@ -273,20 +304,43 @@ private Predicate addPredicateReferenceWithChain(String theResourceName, String\n \t\t\t}\n \n \t\t} else {\n+\n \t\t\ttry {\n \t\t\t\tRuntimeResourceDefinition resDef = myContext.getResourceDefinition(theReferenceParam.getResourceType());\n \t\t\t\tresourceTypes = new ArrayList<>(1);\n \t\t\t\tresourceTypes.add(resDef.getImplementingClass());\n \t\t\t} catch (DataFormatException e) {\n-\t\t\t\tthrow new InvalidRequestException(\"Invalid resource type: \" + theReferenceParam.getResourceType());\n+\t\t\t\tthrow newInvalidResourceTypeException(theReferenceParam.getResourceType());\n+\t\t\t}\n+\n+\t\t}\n+\n+\t\t// Handle chain on _type\n+\t\tString chain = theReferenceParam.getChain();\n+\t\tif (Constants.PARAM_TYPE.equals(chain)) {\n+\t\t\tString typeValue = theReferenceParam.getValue();\n+\n+\t\t\tClass<? extends IBaseResource> wantedType;\n+\t\t\ttry {\n+\t\t\t\twantedType = myContext.getResourceDefinition(typeValue).getImplementingClass();\n+\t\t\t} catch (DataFormatException e) {\n+\t\t\t\tthrow newInvalidResourceTypeException(typeValue);\n+\t\t\t}\n+\t\t\tif (!resourceTypes.contains(wantedType)) {\n+\t\t\t\tString searchParamName = theResourceName + \":\" + theParamName;\n+\t\t\t\tString msg = myContext.getLocalizer().getMessage(PredicateBuilderReference.class, \"invalidTargetTypeForChain\", typeValue, searchParamName);\n+\t\t\t\tthrow new InvalidRequestException(msg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a067a2001d3f45afd9db87a199a428a5804eacde"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAzMjA3Ng==", "bodyText": "Makes sense, done", "url": "https://github.com/hapifhir/hapi-fhir/pull/1772#discussion_r397032076", "createdAt": "2020-03-24T10:02:07Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/PredicateBuilderReference.java", "diffHunk": "@@ -273,20 +304,43 @@ private Predicate addPredicateReferenceWithChain(String theResourceName, String\n \t\t\t}\n \n \t\t} else {\n+\n \t\t\ttry {\n \t\t\t\tRuntimeResourceDefinition resDef = myContext.getResourceDefinition(theReferenceParam.getResourceType());\n \t\t\t\tresourceTypes = new ArrayList<>(1);\n \t\t\t\tresourceTypes.add(resDef.getImplementingClass());\n \t\t\t} catch (DataFormatException e) {\n-\t\t\t\tthrow new InvalidRequestException(\"Invalid resource type: \" + theReferenceParam.getResourceType());\n+\t\t\t\tthrow newInvalidResourceTypeException(theReferenceParam.getResourceType());\n+\t\t\t}\n+\n+\t\t}\n+\n+\t\t// Handle chain on _type\n+\t\tString chain = theReferenceParam.getChain();\n+\t\tif (Constants.PARAM_TYPE.equals(chain)) {\n+\t\t\tString typeValue = theReferenceParam.getValue();\n+\n+\t\t\tClass<? extends IBaseResource> wantedType;\n+\t\t\ttry {\n+\t\t\t\twantedType = myContext.getResourceDefinition(typeValue).getImplementingClass();\n+\t\t\t} catch (DataFormatException e) {\n+\t\t\t\tthrow newInvalidResourceTypeException(typeValue);\n+\t\t\t}\n+\t\t\tif (!resourceTypes.contains(wantedType)) {\n+\t\t\t\tString searchParamName = theResourceName + \":\" + theParamName;\n+\t\t\t\tString msg = myContext.getLocalizer().getMessage(PredicateBuilderReference.class, \"invalidTargetTypeForChain\", typeValue, searchParamName);\n+\t\t\t\tthrow new InvalidRequestException(msg);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAwOTI3NQ=="}, "originalCommit": {"oid": "a067a2001d3f45afd9db87a199a428a5804eacde"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTEwMTM5OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4SearchNoFtTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwOTozMToxOVrOF6nuKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDowMjoxN1rOF6o6-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAxMjUyMA==", "bodyText": "I assume this means subject._type=Group", "url": "https://github.com/hapifhir/hapi-fhir/pull/1772#discussion_r397012520", "createdAt": "2020-03-24T09:31:19Z", "author": {"login": "LishaZ"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4SearchNoFtTest.java", "diffHunk": "@@ -316,6 +316,67 @@ public void testChainWithMultipleTypePossibilities() {\n \t\tassertThat(ids, empty());\n \t}\n \n+\t@Test\n+\tpublic void testChainOnType() {\n+\n+\t\tPatient sub1 = new Patient();\n+\t\tsub1.setActive(true);\n+\t\tsub1.addIdentifier().setSystem(\"foo\").setValue(\"bar\");\n+\t\tString sub1Id = myPatientDao.create(sub1).getId().toUnqualifiedVersionless().getValue();\n+\n+\t\tGroup sub2 = new Group();\n+\t\tsub2.setActive(true);\n+\t\tsub2.addIdentifier().setSystem(\"foo\").setValue(\"bar\");\n+\t\tString sub2Id = myGroupDao.create(sub2).getId().toUnqualifiedVersionless().getValue();\n+\n+\t\tEncounter enc1 = new Encounter();\n+\t\tenc1.getSubject().setReference(sub1Id);\n+\t\tString enc1Id = myEncounterDao.create(enc1).getId().toUnqualifiedVersionless().getValue();\n+\n+\t\tEncounter enc2 = new Encounter();\n+\t\tenc2.getSubject().setReference(sub2Id);\n+\t\tString enc2Id = myEncounterDao.create(enc2).getId().toUnqualifiedVersionless().getValue();\n+\n+\t\tList<String> ids;\n+\t\tSearchParameterMap map;\n+\t\tIBundleProvider results;\n+\n+\t\tmap = new SearchParameterMap();\n+\t\tmap.setLoadSynchronous(true);\n+\t\tmap.add(Encounter.SP_SUBJECT, new ReferenceParam(\"subject\", \"Patient\").setChain(\"_type\"));\n+\t\tresults = myEncounterDao.search(map);\n+\t\tids = toUnqualifiedVersionlessIdValues(results);\n+\t\tassertThat(ids, hasItems(enc1Id));\n+\n+\t\tmap = new SearchParameterMap();\n+\t\tmap.setLoadSynchronous(true);\n+\t\tmap.add(Encounter.SP_SUBJECT, new ReferenceParam(\"subject\", \"Group\").setChain(\"_type\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a067a2001d3f45afd9db87a199a428a5804eacde"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAzMjE4NQ==", "bodyText": "Yup!", "url": "https://github.com/hapifhir/hapi-fhir/pull/1772#discussion_r397032185", "createdAt": "2020-03-24T10:02:17Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4SearchNoFtTest.java", "diffHunk": "@@ -316,6 +316,67 @@ public void testChainWithMultipleTypePossibilities() {\n \t\tassertThat(ids, empty());\n \t}\n \n+\t@Test\n+\tpublic void testChainOnType() {\n+\n+\t\tPatient sub1 = new Patient();\n+\t\tsub1.setActive(true);\n+\t\tsub1.addIdentifier().setSystem(\"foo\").setValue(\"bar\");\n+\t\tString sub1Id = myPatientDao.create(sub1).getId().toUnqualifiedVersionless().getValue();\n+\n+\t\tGroup sub2 = new Group();\n+\t\tsub2.setActive(true);\n+\t\tsub2.addIdentifier().setSystem(\"foo\").setValue(\"bar\");\n+\t\tString sub2Id = myGroupDao.create(sub2).getId().toUnqualifiedVersionless().getValue();\n+\n+\t\tEncounter enc1 = new Encounter();\n+\t\tenc1.getSubject().setReference(sub1Id);\n+\t\tString enc1Id = myEncounterDao.create(enc1).getId().toUnqualifiedVersionless().getValue();\n+\n+\t\tEncounter enc2 = new Encounter();\n+\t\tenc2.getSubject().setReference(sub2Id);\n+\t\tString enc2Id = myEncounterDao.create(enc2).getId().toUnqualifiedVersionless().getValue();\n+\n+\t\tList<String> ids;\n+\t\tSearchParameterMap map;\n+\t\tIBundleProvider results;\n+\n+\t\tmap = new SearchParameterMap();\n+\t\tmap.setLoadSynchronous(true);\n+\t\tmap.add(Encounter.SP_SUBJECT, new ReferenceParam(\"subject\", \"Patient\").setChain(\"_type\"));\n+\t\tresults = myEncounterDao.search(map);\n+\t\tids = toUnqualifiedVersionlessIdValues(results);\n+\t\tassertThat(ids, hasItems(enc1Id));\n+\n+\t\tmap = new SearchParameterMap();\n+\t\tmap.setLoadSynchronous(true);\n+\t\tmap.add(Encounter.SP_SUBJECT, new ReferenceParam(\"subject\", \"Group\").setChain(\"_type\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAxMjUyMA=="}, "originalCommit": {"oid": "a067a2001d3f45afd9db87a199a428a5804eacde"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1932, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}