{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyMjQyOTY0", "number": 1826, "title": "Install external ig package at startup", "bodyText": "As discussed in https://chat.fhir.org/#narrow/stream/179167-hapi/topic/Upload.20of.20IG\nThe name of my branch is misleading - I've implemented the IgInstaller as a service in hapi-fhir-jpaserver-base, but left it up to applications to implement the logic of timing the installation.\nWill provide a reference implementation of this in jpaserver-starter as discussed.", "createdAt": "2020-05-01T18:24:43Z", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826", "merged": true, "mergeCommit": {"oid": "9bde517540287da195c4f5548698279e4085cbe3"}, "closed": true, "closedAt": "2020-05-24T13:25:46Z", "author": {"login": "mzgtrifork"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcad5j_AH2gAyNDEyMjQyOTY0OjI0NWMyMzAyYTQ0Yjk2MDZhMjQ1M2QwNmUyOTYyYjc0MDUwZGU2Y2U=", "endCursor": "Y3Vyc29yOnYyOpPPAAABckbcMJgFqTQxNzM1ODU2MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "245c2302a44b9606a2453d06e2962b74050de6ce", "author": {"user": {"login": "mzgtrifork", "name": "Martin Zacho Gr\u00f8nh\u00f8j"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/245c2302a44b9606a2453d06e2962b74050de6ce", "committedDate": "2020-04-23T14:38:14Z", "message": "Do not use deprecated methods in structures-r4 test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a073969a36eb5da0b5b10a29f0694680efe5c80a", "author": {"user": {"login": "mzgtrifork", "name": "Martin Zacho Gr\u00f8nh\u00f8j"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/a073969a36eb5da0b5b10a29f0694680efe5c80a", "committedDate": "2020-04-24T13:39:30Z", "message": "beginning development of feature Implementation Guide installer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9870e302a41ee13daeb10133c9e235b7e0abaeb3", "author": {"user": {"login": "mzgtrifork", "name": "Martin Zacho Gr\u00f8nh\u00f8j"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/9870e302a41ee13daeb10133c9e235b7e0abaeb3", "committedDate": "2020-04-28T14:46:20Z", "message": "fetch IG, generate snapshots of SDs of and persist conformance resources to db\n\nMissing initialization, error-handling and handling of NameSystems and Subscriptions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f2cd24432e7f09169d69cb5e0f991860a17aeb4", "author": {"user": {"login": "mzgtrifork", "name": "Martin Zacho Gr\u00f8nh\u00f8j"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/7f2cd24432e7f09169d69cb5e0f991860a17aeb4", "committedDate": "2020-04-30T13:19:13Z", "message": "Refactor IgInstaller and implement support for R4 and R5"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73c312e980e8e2c2b334d773b2f77a4ad97e74b1", "author": {"user": {"login": "mzgtrifork", "name": "Martin Zacho Gr\u00f8nh\u00f8j"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/73c312e980e8e2c2b334d773b2f77a4ad97e74b1", "committedDate": "2020-05-01T18:14:25Z", "message": "Error handling and removed logic for invoking IG installation\n\nIgInstaller should be invoked by applications"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e925b9e6f0c7d1491434283d64da22cb5bd6928", "author": {"user": {"login": "mzgtrifork", "name": "Martin Zacho Gr\u00f8nh\u00f8j"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/5e925b9e6f0c7d1491434283d64da22cb5bd6928", "committedDate": "2020-05-01T18:20:07Z", "message": "Merge remote-tracking branch 'jamesagnew/master' into install-external-ig-package-at-startup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2ODc5Mjgy", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826#pullrequestreview-406879282", "createdAt": "2020-05-06T18:29:33Z", "commit": {"oid": "5e925b9e6f0c7d1491434283d64da22cb5bd6928"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODoyOTozM1rOGRgBEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODo0Mjo0NVrOGRggoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwMzUzNg==", "bodyText": "We are in the process of removing the use of @Service and @Component and explicitly auto constructing all of our beans (too many issues over time caused by component auto-discovery glitches..). I'd be inclined to call this class IgInstallerSvc for consistency with how other services are named, and can it be created via  @Bean method in BaseConfig?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826#discussion_r421003536", "createdAt": "2020-05-06T18:29:33Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstaller.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package ca.uhn.fhir.jpa.packages;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.jpa.api.config.DaoConfig;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import com.google.gson.Gson;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.utilities.cache.NpmPackage;\n+import org.hl7.fhir.utilities.cache.PackageCacheManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.event.ContextStartedEvent;\n+import org.springframework.context.event.EventListener;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.util.*;\n+\n+@Service", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e925b9e6f0c7d1491434283d64da22cb5bd6928"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwMzg0Ng==", "bodyText": "Please use field autowiring for consistency", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826#discussion_r421003846", "createdAt": "2020-05-06T18:30:03Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstaller.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package ca.uhn.fhir.jpa.packages;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.jpa.api.config.DaoConfig;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import com.google.gson.Gson;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.utilities.cache.NpmPackage;\n+import org.hl7.fhir.utilities.cache.PackageCacheManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.event.ContextStartedEvent;\n+import org.springframework.context.event.EventListener;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.util.*;\n+\n+@Service\n+public class IgInstaller {\n+\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(IgInstaller.class);\n+\n+\tboolean enabled = true;\n+\tprivate FhirContext fhirContext;\n+\tprivate DaoRegistry daoRegistry;\n+\tprivate PackageCacheManager packageCacheManager;\n+\n+\tprivate String[] SUPPORTED_RESOURCE_TYPES = new String[]\n+\t\t{ \"NamingSystem\",\n+\t\t\t\"CodeSystem\",\n+\t\t\t\"ValueSet\",\n+\t\t\t\"StructureDefinition\",\n+\t\t\t\"ConceptMap\",\n+\t\t\t\"SearchParameter\",\n+\t\t\t\"Subscription\" };\n+\n+\tprivate SearchUtilities searchUtilities;\n+\tprivate SnapshotGenerator snapshotGenerator;\n+\n+\t@Autowired\n+\tpublic IgInstaller(FhirContext fhirContext, DaoRegistry daoRegistry) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e925b9e6f0c7d1491434283d64da22cb5bd6928"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwODMwNA==", "bodyText": "This could probably be made version independent by using the terser (FhirContext#newFhirTerser()) to access field values using paths (e.g. myCtx.newFhirTerser().getSingleValueOrNull(\"url\"); )\nThat would reduce the maintenance burden in the long run and avoid issues where a fix gets accidentally applied to one version only", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826#discussion_r421008304", "createdAt": "2020-05-06T18:37:14Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/SearchUtilitiesImpl.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package ca.uhn.fhir.jpa.packages;\n+\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import ca.uhn.fhir.rest.param.StringParam;\n+import ca.uhn.fhir.rest.param.TokenParam;\n+import ca.uhn.fhir.rest.param.UriParam;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SearchUtilitiesImpl {\n+\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(SearchUtilitiesImpl.class);\n+\n+\tprivate static final String WARNING_MULTIPLE_METADATA_RESOURCES_WITH_UNIQUE_URL =\n+\t\t\"Expected 1 MetadataResource with globally unique URL {}, found {}. Will not attempt to update resource.\";\n+\tprivate static final String WARNING_MULTIPLE_NAMINGSYSTEM_RESOURCES_WITH_UNIQUE_ID =\n+\t\t\"Expected 1 NamingSystem with unique ID {}, found {}. Will not attempt to update resource.\";\n+\tprivate static final String WARNING_MULTIPLE_SUBSCRIPTION_RESOURCES_WITH_ID =\n+\t\t\"Expected 1 Subscription with ID {}, found {}. Will not attempt to update resource.\";\n+\n+\tpublic static SearchUtilities forR5() {\n+\t\treturn new SearchUtilities() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e925b9e6f0c7d1491434283d64da22cb5bd6928"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwOTA2MQ==", "bodyText": "Could you just autowire in an instance of IValidationSupport and call its generateSnapshot method? I think that would replace this class entirely and avoid the use of an unwrapped snapshot generator", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826#discussion_r421009061", "createdAt": "2020-05-06T18:38:30Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/SnapshotGeneratorImpl.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package ca.uhn.fhir.jpa.packages;\n+\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDaoStructureDefinition;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+\n+import java.util.Collection;\n+import java.util.stream.Collectors;\n+\n+public class SnapshotGeneratorImpl {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e925b9e6f0c7d1491434283d64da22cb5bd6928"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwOTQ0Ng==", "bodyText": "We definitely can't have unit tests making external calls to an HTTP server outside the project. Could this be replaced with a local Jetty server simulating the right calls?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826#discussion_r421009446", "createdAt": "2020-05-06T18:39:11Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/packages/IgInstallerTestDstu3.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package ca.uhn.fhir.jpa.packages;\n+\n+import ca.uhn.fhir.jpa.api.config.DaoConfig;\n+import ca.uhn.fhir.jpa.dao.dstu3.BaseJpaDstu3Test;\n+import org.hl7.fhir.dstu3.model.StructureDefinition;\n+import org.hl7.fhir.utilities.cache.NpmPackage;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+\n+import static org.junit.Assert.*;\n+\n+public class IgInstallerTestDstu3 extends BaseJpaDstu3Test {\n+\n+\t@Autowired\n+\tprivate DaoConfig daoConfig;\n+\t@Autowired\n+\tprivate IgInstaller igInstaller;\n+\n+\t@Before\n+\tpublic void before() {\n+\t\tdaoConfig.addTreatReferencesAsLogical(\"http://ehealth.sundhed.dk/vs/*\");\n+\t\tdaoConfig.addTreatReferencesAsLogical(\"http://ehealth.sundhed.dk/cs/*\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e925b9e6f0c7d1491434283d64da22cb5bd6928"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxMDExMw==", "bodyText": "I'm always nervous about having boolean flags as an indicator of success. Could we just use exceptions? It would probably be sufficient to throw an InternalErrorException in the event that something fails", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826#discussion_r421010113", "createdAt": "2020-05-06T18:40:20Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstaller.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package ca.uhn.fhir.jpa.packages;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.jpa.api.config.DaoConfig;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import com.google.gson.Gson;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.utilities.cache.NpmPackage;\n+import org.hl7.fhir.utilities.cache.PackageCacheManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.event.ContextStartedEvent;\n+import org.springframework.context.event.EventListener;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.util.*;\n+\n+@Service\n+public class IgInstaller {\n+\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(IgInstaller.class);\n+\n+\tboolean enabled = true;\n+\tprivate FhirContext fhirContext;\n+\tprivate DaoRegistry daoRegistry;\n+\tprivate PackageCacheManager packageCacheManager;\n+\n+\tprivate String[] SUPPORTED_RESOURCE_TYPES = new String[]\n+\t\t{ \"NamingSystem\",\n+\t\t\t\"CodeSystem\",\n+\t\t\t\"ValueSet\",\n+\t\t\t\"StructureDefinition\",\n+\t\t\t\"ConceptMap\",\n+\t\t\t\"SearchParameter\",\n+\t\t\t\"Subscription\" };\n+\n+\tprivate SearchUtilities searchUtilities;\n+\tprivate SnapshotGenerator snapshotGenerator;\n+\n+\t@Autowired\n+\tpublic IgInstaller(FhirContext fhirContext, DaoRegistry daoRegistry) {\n+\t\tthis.fhirContext = fhirContext;\n+\t\tthis.daoRegistry = daoRegistry;\n+\n+\t\tIFhirResourceDao structureDefinitionDao = daoRegistry.getResourceDao(\"StructureDefinition\");\n+\n+\t\tswitch (fhirContext.getVersion().getVersion()) {\n+\t\t\tcase R5: {\n+\t\t\t\tsearchUtilities = SearchUtilitiesImpl.forR5();\n+\t\t\t\tsnapshotGenerator = SnapshotGeneratorImpl.forR5(structureDefinitionDao);\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tcase R4: {\n+\t\t\t\tsearchUtilities = SearchUtilitiesImpl.forR4();\n+\t\t\t\tsnapshotGenerator = SnapshotGeneratorImpl.forR4(structureDefinitionDao);\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tcase DSTU3: {\n+\t\t\t\tsearchUtilities = SearchUtilitiesImpl.forDstu3();\n+\t\t\t\tsnapshotGenerator = SnapshotGeneratorImpl.forDstu3(structureDefinitionDao);\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tdefault: {\n+\t\t\t\tourLog.info(\"IG installation not supported for version: {}\", fhirContext.getVersion().getVersion());\n+\t\t\t\tenabled = false;\n+\t\t\t}\n+\t\t}\n+\t\ttry {\n+\t\t\tpackageCacheManager = new PackageCacheManager(true, 1);\n+\t\t} catch (IOException e) {\n+\t\t\tourLog.error(\"Unable to initialize PackageCacheManager: {}\", e);\n+\t\t\tenabled = false;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Loads and installs an IG tarball (with its dependencies) from the specified url.\n+\t *\n+\t * Installs the IG by persisting instances of the following types of resources:\n+\t *\n+\t * - NamingSystem, CodeSystem, ValueSet, StructureDefinition (with snapshots),\n+\t *   ConceptMap, SearchParameter, Subscription\n+\t *\n+\t * Creates the resources if non-existent, updates them otherwise.\n+\t *\n+\t * @param url of IG tarball\n+\t * @return success of the installation\n+\t */\n+\tpublic boolean install(String url) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e925b9e6f0c7d1491434283d64da22cb5bd6928"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxMTYxNg==", "bodyText": "Just confirming- Do the unit tests cover this? (Not sure why codecov failed to run on this PR... definitely not your fault, it has been flaky lately..)", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826#discussion_r421011616", "createdAt": "2020-05-06T18:42:45Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstaller.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package ca.uhn.fhir.jpa.packages;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.jpa.api.config.DaoConfig;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import com.google.gson.Gson;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.utilities.cache.NpmPackage;\n+import org.hl7.fhir.utilities.cache.PackageCacheManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.event.ContextStartedEvent;\n+import org.springframework.context.event.EventListener;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.util.*;\n+\n+@Service\n+public class IgInstaller {\n+\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(IgInstaller.class);\n+\n+\tboolean enabled = true;\n+\tprivate FhirContext fhirContext;\n+\tprivate DaoRegistry daoRegistry;\n+\tprivate PackageCacheManager packageCacheManager;\n+\n+\tprivate String[] SUPPORTED_RESOURCE_TYPES = new String[]\n+\t\t{ \"NamingSystem\",\n+\t\t\t\"CodeSystem\",\n+\t\t\t\"ValueSet\",\n+\t\t\t\"StructureDefinition\",\n+\t\t\t\"ConceptMap\",\n+\t\t\t\"SearchParameter\",\n+\t\t\t\"Subscription\" };\n+\n+\tprivate SearchUtilities searchUtilities;\n+\tprivate SnapshotGenerator snapshotGenerator;\n+\n+\t@Autowired\n+\tpublic IgInstaller(FhirContext fhirContext, DaoRegistry daoRegistry) {\n+\t\tthis.fhirContext = fhirContext;\n+\t\tthis.daoRegistry = daoRegistry;\n+\n+\t\tIFhirResourceDao structureDefinitionDao = daoRegistry.getResourceDao(\"StructureDefinition\");\n+\n+\t\tswitch (fhirContext.getVersion().getVersion()) {\n+\t\t\tcase R5: {\n+\t\t\t\tsearchUtilities = SearchUtilitiesImpl.forR5();\n+\t\t\t\tsnapshotGenerator = SnapshotGeneratorImpl.forR5(structureDefinitionDao);\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tcase R4: {\n+\t\t\t\tsearchUtilities = SearchUtilitiesImpl.forR4();\n+\t\t\t\tsnapshotGenerator = SnapshotGeneratorImpl.forR4(structureDefinitionDao);\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tcase DSTU3: {\n+\t\t\t\tsearchUtilities = SearchUtilitiesImpl.forDstu3();\n+\t\t\t\tsnapshotGenerator = SnapshotGeneratorImpl.forDstu3(structureDefinitionDao);\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tdefault: {\n+\t\t\t\tourLog.info(\"IG installation not supported for version: {}\", fhirContext.getVersion().getVersion());\n+\t\t\t\tenabled = false;\n+\t\t\t}\n+\t\t}\n+\t\ttry {\n+\t\t\tpackageCacheManager = new PackageCacheManager(true, 1);\n+\t\t} catch (IOException e) {\n+\t\t\tourLog.error(\"Unable to initialize PackageCacheManager: {}\", e);\n+\t\t\tenabled = false;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Loads and installs an IG tarball (with its dependencies) from the specified url.\n+\t *\n+\t * Installs the IG by persisting instances of the following types of resources:\n+\t *\n+\t * - NamingSystem, CodeSystem, ValueSet, StructureDefinition (with snapshots),\n+\t *   ConceptMap, SearchParameter, Subscription\n+\t *\n+\t * Creates the resources if non-existent, updates them otherwise.\n+\t *\n+\t * @param url of IG tarball\n+\t * @return success of the installation\n+\t */\n+\tpublic boolean install(String url) {\n+\t\tif (enabled) {\n+\t\t\ttry  {\n+\t\t\t\treturn install(NpmPackage.fromPackage(toInputStream(url)));\n+\t\t\t} catch (IOException e) {\n+\t\t\t\tourLog.error(\"Could not load implementation guide from URL {}\", url, e);\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\tprivate InputStream toInputStream(String url) throws IOException {\n+\t\tURL u = new URL(url);\n+\t\tURLConnection c = u.openConnection();\n+\t\treturn c.getInputStream();\n+\t}\n+\n+\t/**\n+\t * Loads and installs an IG from a file on disk or the Simplifier repo using\n+\t * the {@link PackageCacheManager}.\n+\t *\n+\t * Installs the IG by persisting instances of the following types of resources:\n+\t *\n+\t * - NamingSystem, CodeSystem, ValueSet, StructureDefinition (with snapshots),\n+\t *   ConceptMap, SearchParameter, Subscription\n+\t *\n+\t * Creates the resources if non-existent, updates them otherwise.\n+\t *\n+\t * @param id of the package, or name of folder in filesystem\n+\t * @param version of package, or path to folder in filesystem\n+\t * @return success of the installation\n+\t */\n+\tpublic boolean install(String id, String version) {\n+\t\tif (enabled) {\n+\t\t\ttry {\n+\t\t\t\treturn install(packageCacheManager.loadPackage(id, version));\n+\t\t\t} catch (IOException e) {\n+\t\t\t\tourLog.error(\"Could not load implementation guide from packages.fhir.org or \" +\n+\t\t\t\t\t\"file on disk using ID {} and version {}\", id, version, e);\n+\t\t\t}\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\t/**\n+\t * Installs a package and its dependencies.\n+\t *\n+\t * Fails fast if one of its dependencies could not be installed.\n+\t *\n+\t * @return success of the installation\n+\t */\n+\tprivate boolean install(NpmPackage npmPackage) {\n+\t\tString name = npmPackage.getNpm().get(\"name\").getAsString();\n+\t\tString version = npmPackage.getNpm().get(\"version\").getAsString();\n+\t\tString packageFhirVersion = npmPackage.fhirVersion();\n+\t\tif (!isCompatibleWithCurrentFhirVersion(packageFhirVersion)) {\n+\t\t\tourLog.warn(\"Cannot install package {}#{}, FHIR versions mismatch (expected <={}, package uses {})\",\n+\t\t\t\tname, version, fhirContext.getVersion().getVersion().getFhirVersionString(), packageFhirVersion);\n+\t\t\treturn false;\n+\t\t}\n+\t\tboolean success = fetchAndInstallDependencies(npmPackage);\n+\t\tif (!success) {\n+\t\t\tourLog.error(\"An error occoured when installing dependencies for the package {}#{}\", name, version);\n+\t\t\treturn false;\n+\t\t}\n+\t\tourLog.info(\"Installing package: {}#{}\", name, version);\n+\t\tfor (String type : SUPPORTED_RESOURCE_TYPES) {\n+\t\t\tCollection<IBaseResource> resources = parseResourcesOfType(type, npmPackage);\n+\t\t\tif (type.equals(\"StructureDefinition\")) {\n+\t\t\t\tresources = snapshotGenerator.generateFrom(resources);\n+\t\t\t}\n+\t\t\tourLog.info(String.format(\"creating or updating %s resources of type %s\", resources.size(), type));\n+\n+\t\t\tresources.stream().forEach(r -> createOrUpdate(r));\n+\t\t}\n+\t\tourLog.info(String.format(\"Finished installation of package: %s#%s\", name, version));\n+\t\treturn true;\n+\t}\n+\n+\tprivate boolean fetchAndInstallDependencies(NpmPackage npmPackage) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e925b9e6f0c7d1491434283d64da22cb5bd6928"}, "originalPosition": 176}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4756b175a7da85317df6d61502584f23c48edf8", "author": {"user": {"login": "mzgtrifork", "name": "Martin Zacho Gr\u00f8nh\u00f8j"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/f4756b175a7da85317df6d61502584f23c48edf8", "committedDate": "2020-05-07T17:09:17Z", "message": "Implement pull request comments in IgInstaller\n\n1) Renamed IgInstaller -> IgInstallerSvc for consistency\n2) Use field autowiring and @PostConstruct for consistency\n3) Use exceptions instead of boolean flags for success indication\n4) Use IValidationSuport to generate snapshots of StructureDefinitions\nin a version independent way (less maintenance) instead of SnapshotGenerator.java\n5) Read IGs for tests from src/main/resources instead of external URL"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b5d46c8ec802d0763f40f3de22cc12bb9eb2587", "author": {"user": {"login": "mzgtrifork", "name": "Martin Zacho Gr\u00f8nh\u00f8j"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/7b5d46c8ec802d0763f40f3de22cc12bb9eb2587", "committedDate": "2020-05-07T17:19:35Z", "message": "Merge remote-tracking branch 'jamesagnew/master' into install-external-ig-package-at-startup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NjkxNTg1", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826#pullrequestreview-407691585", "createdAt": "2020-05-07T17:36:46Z", "commit": {"oid": "7b5d46c8ec802d0763f40f3de22cc12bb9eb2587"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb999bcb6fbf128b4cdb715734cb358c507f8d3e", "author": {"user": {"login": "mzgtrifork", "name": "Martin Zacho Gr\u00f8nh\u00f8j"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/fb999bcb6fbf128b4cdb715734cb358c507f8d3e", "committedDate": "2020-05-07T18:55:33Z", "message": "IG installation: Wrap exceptions during resource creation in custom class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56ee524348e7317dea8f7246335d067cf47aa425", "author": {"user": {"login": "mzgtrifork", "name": "Martin Zacho Gr\u00f8nh\u00f8j"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/56ee524348e7317dea8f7246335d067cf47aa425", "committedDate": "2020-05-11T08:19:25Z", "message": "IG installation: Improved logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35a9247bc833da81773e70d027ff8d6a2b33f0cf", "author": {"user": {"login": "mzgtrifork", "name": "Martin Zacho Gr\u00f8nh\u00f8j"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/35a9247bc833da81773e70d027ff8d6a2b33f0cf", "committedDate": "2020-05-14T06:31:38Z", "message": "IG installation: Search for existing resources in a version independent way"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "625127dbe732b09d1ce5b729bbc90e7792434cd1", "author": {"user": {"login": "mzgtrifork", "name": "Martin Zacho Gr\u00f8nh\u00f8j"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/625127dbe732b09d1ce5b729bbc90e7792434cd1", "committedDate": "2020-05-14T06:32:47Z", "message": "Merge remote-tracking branch 'jamesagnew/master' into install-external-ig-package-at-startup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MzU4NTYx", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826#pullrequestreview-417358561", "createdAt": "2020-05-24T13:25:35Z", "commit": {"oid": "625127dbe732b09d1ce5b729bbc90e7792434cd1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4064, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}