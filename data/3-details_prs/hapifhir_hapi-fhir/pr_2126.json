{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxMDkyMzIx", "number": 2126, "title": "add CorsInterceptorTest", "bodyText": "This pull request is related to a recent clinFHIR enhancement to enable use of an OAuth access token with clinFHIR, as discussed on chat.fhir.org here:\nhttps://chat.fhir.org/#narrow/stream/179176-clinFHIR/topic/OAuth.20access.20token\nWhen using an OAuth access token, clinFHIR adds an \"Authorization: Bearer <access_token>\" header to its FHIR API requests.  Additionally, it sends a CORS preflight HTTP OPTIONS request.\nWhen testing this using a FHIR server based on hapi-fhir v5.1.0, David Hay and I discovered the server was returning HTTP status 403 (Forbidden) in its response to the CORS preflight OPTIONS request.\nTo prevent the server from rejecting the CORS preflight OPTIONS request, instead of using the default CorsInterceptor configuration, it was necessary to customize the CorsConfiguration.\nIn short, this CorsInterceptor doesn't work:\n       CorsInterceptor corsInterceptor = new CorsInterceptor();\n\nBut this does:\n        CorsConfiguration corsConfiguration = new CorsConfiguration();\n        corsConfiguration.applyPermitDefaultValues();\n        corsConfiguration.setAllowedMethods(Arrays.asList(new String[] { \"*\" }));\n        CorsInterceptor corsInterceptor = new CorsInterceptor(corsConfiguration);\n\nThis pull request adds a CorsInterceptorTest which may be useful for exploring the CorsConfiguration topic.  (I wasn't sure what modification to the default CorsConfiguration might be most appropriate, but it appears the \"Authorization\" header is not among the allowedHeaders in the default CorsConfiguration.)", "createdAt": "2020-10-11T07:09:05Z", "url": "https://github.com/hapifhir/hapi-fhir/pull/2126", "merged": true, "mergeCommit": {"oid": "a32397d993b8499e6ff01cbdcb322c07723b9463"}, "closed": true, "closedAt": "2020-10-12T21:38:32Z", "author": {"login": "jschneid-nmdp"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdRZfSegH2gAyNTAxMDkyMzIxOjY4NWM1YjY5MTQ5YWRhNzE5NDRiNTM3N2Q4NDk5NWU2NTFmNTU4YjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdR6_6VgFqTUwNjkzMzgzOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "685c5b69149ada71944b5377d84995e651f558b4", "author": {"user": {"login": "jschneid-nmdp", "name": "Joel Schneider (NMDP)"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/685c5b69149ada71944b5377d84995e651f558b4", "committedDate": "2020-10-11T06:35:45Z", "message": "add simple CorsInterceptorTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbeeba9e4d2c8a57e0f1f0f5d901fb5963ceb30a", "author": {"user": {"login": "jschneid-nmdp", "name": "Joel Schneider (NMDP)"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/dbeeba9e4d2c8a57e0f1f0f5d901fb5963ceb30a", "committedDate": "2020-10-11T08:31:23Z", "message": "add relevant exposedHeaders to custom CorsConfiguration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MTc4Njky", "url": "https://github.com/hapifhir/hapi-fhir/pull/2126#pullrequestreview-506178692", "createdAt": "2020-10-11T13:17:51Z", "commit": {"oid": "dbeeba9e4d2c8a57e0f1f0f5d901fb5963ceb30a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxMzoxNzo1MVrOHfneLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxMzoxNzo1MVrOHfneLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkxNDYwNA==", "bodyText": "Output should be done with a logger, e.g. ourLog.info(\"Custom CorsConfiguration\");. See other tests in this project for examples.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2126#discussion_r502914604", "createdAt": "2020-10-11T13:17:51Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-server/src/test/java/ca/uhn/fhir/rest/server/interceptor/CorsInterceptorTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package ca.uhn.fhir.rest.server.interceptor;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+\n+import java.util.Arrays;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.web.cors.CorsConfiguration;\n+\n+public class CorsInterceptorTest {\n+\n+\t@Test\n+\tpublic void testCustomCorsConfig() {\n+\t\tCorsConfiguration corsConfiguration = new CorsConfiguration();\n+\t\tcorsConfiguration.applyPermitDefaultValues();\n+\t\tcorsConfiguration.setAllowedMethods(Arrays.asList(new String[] { \"*\" }));\n+\t\tcorsConfiguration.setExposedHeaders(Arrays.asList(new String[] {\n+\t\t\t\"Content-Location\",\n+\t\t\t\"Date\",\n+\t\t\t\"ETag\",\n+\t\t\t\"Location\",\n+\t\t\t\"X-Request-Id\",\n+\t\t\t\"X-Correlation-Id\"\n+\t\t}));\n+\t\tCorsInterceptor corsInterceptor = new CorsInterceptor(corsConfiguration);\n+\n+System.err.println(\"Custom CorsConfiguration\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbeeba9e4d2c8a57e0f1f0f5d901fb5963ceb30a"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b4cb1c450e7cbb92acdfe457a4e4767aa9b6689", "author": {"user": {"login": "jschneid-nmdp", "name": "Joel Schneider (NMDP)"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/4b4cb1c450e7cbb92acdfe457a4e4767aa9b6689", "committedDate": "2020-10-12T06:24:12Z", "message": "use SLF4J Logger.info() instead of System.err.println(), and run the test assertions first"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0821127b8124b3110444d19363c855a5c8fcf22", "author": {"user": {"login": "jschneid-nmdp", "name": "Joel Schneider (NMDP)"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/d0821127b8124b3110444d19363c855a5c8fcf22", "committedDate": "2020-10-12T06:29:00Z", "message": "Add logback-classic dependency to test scope, to enable SLF4J logging within unit tests.  (SLF4J defaults to NOP binding if no binding found on classpath, see also http://www.slf4j.org/codes.html#StaticLoggerBinder)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2OTMzODM4", "url": "https://github.com/hapifhir/hapi-fhir/pull/2126#pullrequestreview-506933838", "createdAt": "2020-10-12T21:38:15Z", "commit": {"oid": "d0821127b8124b3110444d19363c855a5c8fcf22"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3884, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}