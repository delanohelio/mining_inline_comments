{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0MTAzNjMx", "number": 1832, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODo1Nzo1N1rOD58_ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxOTowMzowN1rOD59Gyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDk0Nzc4OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/index/IdHelperService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODo1Nzo1N1rOGRhFLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMjowODoxMVrOGRnLRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAyMDk3NA==", "bodyText": "Was the optimization mostly just adding caching here?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1832#discussion_r421020974", "createdAt": "2020-05-06T18:57:57Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/index/IdHelperService.java", "diffHunk": "@@ -364,20 +364,42 @@ private Long resolveResourceIdentity(@Nonnull RequestPartitionId theRequestParti\n \t}\n \n \tprivate void resolvePids(@Nonnull RequestPartitionId theRequestPartitionId, List<Long> thePidsToResolve, List<IResourceLookup> theTarget) {\n-\t\tCollection<Object[]> lookup;\n-\t\tif (theRequestPartitionId.isAllPartitions()) {\n-\t\t\tlookup = myResourceTableDao.findLookupFieldsByResourcePid(thePidsToResolve);\n-\t\t} else {\n-\t\t\tif (theRequestPartitionId.getPartitionId() != null) {\n-\t\t\t\tlookup = myResourceTableDao.findLookupFieldsByResourcePidInPartition(thePidsToResolve, theRequestPartitionId.getPartitionId());\n+\n+\t\tif (!myDaoConfig.isDeleteEnabled()) {\n+\t\t\tfor (Iterator<Long> forcedIdIterator = thePidsToResolve.iterator(); forcedIdIterator.hasNext(); ) {\n+\t\t\t\tLong nextPid = forcedIdIterator.next();\n+\t\t\t\tString nextKey = Long.toString(nextPid);\n+\t\t\t\tIResourceLookup cachedLookup = myResourceLookupCache.getIfPresent(nextKey);\n+\t\t\t\tif (cachedLookup != null) {\n+\t\t\t\t\tforcedIdIterator.remove();\n+\t\t\t\t\ttheTarget.add(cachedLookup);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (thePidsToResolve.size() > 0) {\n+\t\t\tCollection<Object[]> lookup;\n+\t\t\tif (theRequestPartitionId.isAllPartitions()) {\n+\t\t\t\tlookup = myResourceTableDao.findLookupFieldsByResourcePid(thePidsToResolve);\n \t\t\t} else {\n-\t\t\t\tlookup = myResourceTableDao.findLookupFieldsByResourcePidInPartitionNull(thePidsToResolve);\n+\t\t\t\tif (theRequestPartitionId.getPartitionId() != null) {\n+\t\t\t\t\tlookup = myResourceTableDao.findLookupFieldsByResourcePidInPartition(thePidsToResolve, theRequestPartitionId.getPartitionId());\n+\t\t\t\t} else {\n+\t\t\t\t\tlookup = myResourceTableDao.findLookupFieldsByResourcePidInPartitionNull(thePidsToResolve);\n+\t\t\t\t}\n \t\t\t}\n+\t\t\tlookup\n+\t\t\t\t.stream()\n+\t\t\t\t.map(t -> new ResourceLookup((String) t[0], (Long) t[1], (Date) t[2]))\n+\t\t\t\t.forEach(t->{\n+\t\t\t\t\ttheTarget.add(t);\n+\t\t\t\t\tif (!myDaoConfig.isDeleteEnabled()) {\n+\t\t\t\t\t\tString nextKey = Long.toString(t.getResourceId());\n+\t\t\t\t\t\tmyResourceLookupCache.put(nextKey, t);\n+\t\t\t\t\t}\n+\t\t\t\t});\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93225a79dbc81ed31683b9abf646fbe2f9f63a96"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEyMDgzNg==", "bodyText": "Yup exactly.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1832#discussion_r421120836", "createdAt": "2020-05-06T22:08:11Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/index/IdHelperService.java", "diffHunk": "@@ -364,20 +364,42 @@ private Long resolveResourceIdentity(@Nonnull RequestPartitionId theRequestParti\n \t}\n \n \tprivate void resolvePids(@Nonnull RequestPartitionId theRequestPartitionId, List<Long> thePidsToResolve, List<IResourceLookup> theTarget) {\n-\t\tCollection<Object[]> lookup;\n-\t\tif (theRequestPartitionId.isAllPartitions()) {\n-\t\t\tlookup = myResourceTableDao.findLookupFieldsByResourcePid(thePidsToResolve);\n-\t\t} else {\n-\t\t\tif (theRequestPartitionId.getPartitionId() != null) {\n-\t\t\t\tlookup = myResourceTableDao.findLookupFieldsByResourcePidInPartition(thePidsToResolve, theRequestPartitionId.getPartitionId());\n+\n+\t\tif (!myDaoConfig.isDeleteEnabled()) {\n+\t\t\tfor (Iterator<Long> forcedIdIterator = thePidsToResolve.iterator(); forcedIdIterator.hasNext(); ) {\n+\t\t\t\tLong nextPid = forcedIdIterator.next();\n+\t\t\t\tString nextKey = Long.toString(nextPid);\n+\t\t\t\tIResourceLookup cachedLookup = myResourceLookupCache.getIfPresent(nextKey);\n+\t\t\t\tif (cachedLookup != null) {\n+\t\t\t\t\tforcedIdIterator.remove();\n+\t\t\t\t\ttheTarget.add(cachedLookup);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (thePidsToResolve.size() > 0) {\n+\t\t\tCollection<Object[]> lookup;\n+\t\t\tif (theRequestPartitionId.isAllPartitions()) {\n+\t\t\t\tlookup = myResourceTableDao.findLookupFieldsByResourcePid(thePidsToResolve);\n \t\t\t} else {\n-\t\t\t\tlookup = myResourceTableDao.findLookupFieldsByResourcePidInPartitionNull(thePidsToResolve);\n+\t\t\t\tif (theRequestPartitionId.getPartitionId() != null) {\n+\t\t\t\t\tlookup = myResourceTableDao.findLookupFieldsByResourcePidInPartition(thePidsToResolve, theRequestPartitionId.getPartitionId());\n+\t\t\t\t} else {\n+\t\t\t\t\tlookup = myResourceTableDao.findLookupFieldsByResourcePidInPartitionNull(thePidsToResolve);\n+\t\t\t\t}\n \t\t\t}\n+\t\t\tlookup\n+\t\t\t\t.stream()\n+\t\t\t\t.map(t -> new ResourceLookup((String) t[0], (Long) t[1], (Date) t[2]))\n+\t\t\t\t.forEach(t->{\n+\t\t\t\t\ttheTarget.add(t);\n+\t\t\t\t\tif (!myDaoConfig.isDeleteEnabled()) {\n+\t\t\t\t\t\tString nextKey = Long.toString(t.getResourceId());\n+\t\t\t\t\t\tmyResourceLookupCache.put(nextKey, t);\n+\t\t\t\t\t}\n+\t\t\t\t});\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAyMDk3NA=="}, "originalCommit": {"oid": "93225a79dbc81ed31683b9abf646fbe2f9f63a96"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDk2NTg3OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-model/src/main/java/ca/uhn/fhir/jpa/model/util/TransactionDetails.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxOTowMzowN1rOGRhQ2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNDo1NjozNFrOGSCqZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAyMzk2MA==", "bodyText": "withing -> within", "url": "https://github.com/hapifhir/hapi-fhir/pull/1832#discussion_r421023960", "createdAt": "2020-05-06T19:03:07Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-model/src/main/java/ca/uhn/fhir/jpa/model/util/TransactionDetails.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package ca.uhn.fhir.jpa.model.util;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR Model\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.jpa.model.cross.ResourcePersistentId;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * This object contains runtime information that is gathered and relevant to a single <i>database transaction</i>.\n+ * This doesn't mean a FHIR transaction necessarily, but rather any operation that happens withing a single DB transaction", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93225a79dbc81ed31683b9abf646fbe2f9f63a96"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU3MTE3NQ==", "bodyText": "Fixed", "url": "https://github.com/hapifhir/hapi-fhir/pull/1832#discussion_r421571175", "createdAt": "2020-05-07T14:56:34Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-model/src/main/java/ca/uhn/fhir/jpa/model/util/TransactionDetails.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package ca.uhn.fhir.jpa.model.util;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR Model\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.jpa.model.cross.ResourcePersistentId;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * This object contains runtime information that is gathered and relevant to a single <i>database transaction</i>.\n+ * This doesn't mean a FHIR transaction necessarily, but rather any operation that happens withing a single DB transaction", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAyMzk2MA=="}, "originalCommit": {"oid": "93225a79dbc81ed31683b9abf646fbe2f9f63a96"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1961, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}