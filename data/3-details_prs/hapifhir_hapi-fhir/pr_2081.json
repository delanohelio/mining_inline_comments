{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3Mjg1NDYz", "number": 2081, "title": "Feature 2020 09 02 term multi version support", "bodyText": "Includes changes so far for multi-versioning of ConceptMap (reviewed by @IanMMarshall).", "createdAt": "2020-09-15T13:10:19Z", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081", "merged": true, "mergeCommit": {"oid": "f1710fd0be9ff17899e386c36cf7b94672ef264d"}, "closed": true, "closedAt": "2020-10-01T16:24:41Z", "author": {"login": "IanMMarshall"}, "timelineItems": {"totalCount": 95, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc9PpOYAH2gAyNDg3Mjg1NDYzOmQzOTM0OGQ3YmQxZGJlMTNhMjk1NDgzNTQ2NmMyMjQyYWNmNDYwMTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOHnBcAH2gAyNDg3Mjg1NDYzOjc4OTk4MzdmZTAzMTNhODYwMWQxZWUzODdhMjAyNWQ1MmE4NTlhNmM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d39348d7bd1dbe13a2954835466c2242acf46014", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/d39348d7bd1dbe13a2954835466c2242acf46014", "committedDate": "2020-08-09T15:49:04Z", "message": "Initial changes to support multiple versions for code system."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd94ff96cc8e0331e25b017df6e49d2a1ed9d810", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/bd94ff96cc8e0331e25b017df6e49d2a1ed9d810", "committedDate": "2020-08-17T01:38:41Z", "message": "Merge remote-tracking branch 'remotes/origin/master' into im_20200728_term_multi_version_support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4db00fa604579abe1b4b64695c6ffda6a1da25c4", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/4db00fa604579abe1b4b64695c6ffda6a1da25c4", "committedDate": "2020-08-17T22:14:37Z", "message": "Fix broken test and cleanup."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1dcf0442c409b521bafd4664771ca11383dcb7f", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/c1dcf0442c409b521bafd4664771ca11383dcb7f", "committedDate": "2020-08-18T01:52:16Z", "message": "Fix broken tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2126c5c5564033949235c4da6392bc6da312ec9d", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/2126c5c5564033949235c4da6392bc6da312ec9d", "committedDate": "2020-08-18T15:15:09Z", "message": "Merge remote-tracking branch 'remotes/origin/master' into im_20200728_term_multi_version_support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc786eaff920b70c62500d30fb561e287c9e8bba", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/dc786eaff920b70c62500d30fb561e287c9e8bba", "committedDate": "2020-08-21T14:16:10Z", "message": "Refine model for storing multiple code versions."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29b293f179103b72ee8550d75adf1470d541d155", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/29b293f179103b72ee8550d75adf1470d541d155", "committedDate": "2020-08-21T14:16:49Z", "message": "Merge remote-tracking branch 'remotes/origin/master' into im_20200728_term_multi_version_support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "749c2bc4be43b23b06c6755c6d08ab6d01bc2445", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/749c2bc4be43b23b06c6755c6d08ab6d01bc2445", "committedDate": "2020-08-25T16:06:07Z", "message": "Changes to enable request delete of specific Code System version."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "796d2923e00ea1f5a30a6f60060f929358906dc9", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/796d2923e00ea1f5a30a6f60060f929358906dc9", "committedDate": "2020-08-25T16:07:13Z", "message": "Merge remote-tracking branch 'remotes/origin/master' into im_20200728_term_multi_version_support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a0bce915584881d0075cc3a71acf1549995e1b2", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/5a0bce915584881d0075cc3a71acf1549995e1b2", "committedDate": "2020-08-25T16:45:53Z", "message": "Changes to enable request delete of specific Code System version."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92313cd7703cb71c5e735fa0898b33677578fa8d", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/92313cd7703cb71c5e735fa0898b33677578fa8d", "committedDate": "2020-08-26T20:23:17Z", "message": "Tests and fixes to support versioned CodeSystem lookup and subsume operations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fef8f7befd51e01c8991c4667f2d7a5e6bb929a", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/3fef8f7befd51e01c8991c4667f2d7a5e6bb929a", "committedDate": "2020-08-30T19:29:57Z", "message": "Back out changes relating to validate operations. Cleanup of code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff7aab2924d61e8f07ccbcd589c0c686a3497adb", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/ff7aab2924d61e8f07ccbcd589c0c686a3497adb", "committedDate": "2020-08-30T19:30:47Z", "message": "Merge remote-tracking branch 'remotes/origin/master' into im_20200728_term_multi_version_support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c55d87b103778321766562bd43f44c64a1ad5e1", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/1c55d87b103778321766562bd43f44c64a1ad5e1", "committedDate": "2020-08-30T21:11:48Z", "message": "Problem found in LOINC loader."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94440c849fb1e61a193cae8a2d00b067eff450e4", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/94440c849fb1e61a193cae8a2d00b067eff450e4", "committedDate": "2020-08-31T01:53:38Z", "message": "Ensure that LOINC loader assigns a distinct ID for each version."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f005120c9990f281abdaddd7939317d6262c5fd", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/5f005120c9990f281abdaddd7939317d6262c5fd", "committedDate": "2020-09-04T02:36:15Z", "message": "Initial changes to support multi-version ValueSets"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "019d08a0640978ea289e4f1272ee198182dbe204", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/019d08a0640978ea289e4f1272ee198182dbe204", "committedDate": "2020-09-04T02:37:39Z", "message": "Merge remote-tracking branch 'remotes/origin/master' into im_20200728_term_multi_version_support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b707f97a9e5b0f2ae0fd386136dad98c48ef81c", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/5b707f97a9e5b0f2ae0fd386136dad98c48ef81c", "committedDate": "2020-09-04T13:25:35Z", "message": "Missing commits"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed2801dbaf48a5502868283774ac8a35e35364b0", "author": {"user": {"login": "frankjtao", "name": "Frank Tao"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/ed2801dbaf48a5502868283774ac8a35e35364b0", "committedDate": "2020-09-06T15:33:55Z", "message": "ConceptMap multi-version supported"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45b88de3b67e6536aad82fc6f119334ec83a6e28", "author": {"user": {"login": "frankjtao", "name": "Frank Tao"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/45b88de3b67e6536aad82fc6f119334ec83a6e28", "committedDate": "2020-09-06T15:47:07Z", "message": "Fixed typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ecec0abc923bedf44872324a2c3a5e4f878391c", "author": {"user": {"login": "frankjtao", "name": "Frank Tao"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/1ecec0abc923bedf44872324a2c3a5e4f878391c", "committedDate": "2020-09-06T19:23:26Z", "message": "Fixed duplicate ConceptMap URL only"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81cd73f820b6da861207c5eb3bcc630fd86f2c77", "author": {"user": {"login": "frankjtao", "name": "Frank Tao"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/81cd73f820b6da861207c5eb3bcc630fd86f2c77", "committedDate": "2020-09-06T19:27:29Z", "message": "Added test cases to for duplicate url and version of ConceptMap"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d019dee786b9c741a4d10cc348d9b320591f56b4", "author": {"user": {"login": "frankjtao", "name": "Frank Tao"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/d019dee786b9c741a4d10cc348d9b320591f56b4", "committedDate": "2020-09-06T20:11:09Z", "message": "Added url/conceptMapVersion for ConceptMap to support translate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54100426434b5feb9d99f41965ad8c5fbe6b91e7", "author": {"user": {"login": "frankjtao", "name": "Frank Tao"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/54100426434b5feb9d99f41965ad8c5fbe6b91e7", "committedDate": "2020-09-07T14:43:58Z", "message": "Multi-version supported for ConceptMap $translate operation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e17625a1bd8cc3032abefdc41cd36aa10ab25fb", "author": {"user": {"login": "frankjtao", "name": "Frank Tao"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/5e17625a1bd8cc3032abefdc41cd36aa10ab25fb", "committedDate": "2020-09-07T22:09:01Z", "message": "Fixed NullPointerException for reverse $translate operation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fd692f5bb134ec92042fea7eeb9fcffc7457993", "author": {"user": {"login": "frankjtao", "name": "Frank Tao"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/2fd692f5bb134ec92042fea7eeb9fcffc7457993", "committedDate": "2020-09-08T00:54:35Z", "message": "Updated R5 reverse $translate test case for more coverage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4a87adc640081b396658527a072178998021d2b", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/b4a87adc640081b396658527a072178998021d2b", "committedDate": "2020-09-09T20:53:14Z", "message": "Suggested test that includes case where ConceptVersion is not specified in $translate operation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d00db11586bab260d92a9c9e948688c47dfa904c", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/d00db11586bab260d92a9c9e948688c47dfa904c", "committedDate": "2020-09-09T21:38:24Z", "message": "Merge remote-tracking branch 'remotes/origin/master' into im_20200728_term_multi_version_support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c873b6d6dd382717ba5ff9c6683abfe9a4c6837e", "author": {"user": {"login": "frankjtao", "name": "Frank Tao"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/c873b6d6dd382717ba5ff9c6683abfe9a4c6837e", "committedDate": "2020-09-10T02:24:02Z", "message": "Fixed ConceptMap $translation without conceptMapVersion issue."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "972bdbd87d86c23f8c6800e5f6a2e438733547c2", "author": {"user": {"login": "frankjtao", "name": "Frank Tao"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/972bdbd87d86c23f8c6800e5f6a2e438733547c2", "committedDate": "2020-09-11T01:17:41Z", "message": "Updated based on code review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16a5f57ae955531b35926971a6b929ae48521809", "author": {"user": {"login": "frankjtao", "name": "Frank Tao"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/16a5f57ae955531b35926971a6b929ae48521809", "committedDate": "2020-09-11T01:41:06Z", "message": "Added for ConceptMap DB migration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "448caa3f938a4b62c4aa21ca8814174008474f0a", "author": {"user": {"login": "frankjtao", "name": "Frank Tao"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/448caa3f938a4b62c4aa21ca8814174008474f0a", "committedDate": "2020-09-11T13:02:46Z", "message": "Changed the ConceptMap.VER to nullable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "750cbf4ba3ffd22afbd71518e5b41d229bd66750", "author": {"user": {"login": "frankjtao", "name": "Frank Tao"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/750cbf4ba3ffd22afbd71518e5b41d229bd66750", "committedDate": "2020-09-11T13:20:01Z", "message": "@Deprecated the old findTermConceptMapByUrl method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b29d5388c6354cb0bef2dc97db086d4f712dbb43", "author": {"user": {"login": "IanMMarshall", "name": null}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/b29d5388c6354cb0bef2dc97db086d4f712dbb43", "committedDate": "2020-09-11T16:05:14Z", "message": "Merge pull request #2067 from jamesagnew/ft_2020_09_02_term_multi_version_support\n\nConceptMap multi version support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91c1df7ce48871d39a673d360361a450d629470a", "author": {"user": {"login": "frankjtao", "name": "Frank Tao"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/91c1df7ce48871d39a673d360361a450d629470a", "committedDate": "2020-09-12T01:38:42Z", "message": "Supported ConceptMap Version from the properties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "701fe81acf692eebe0acc7b8300c45eb62db2409", "author": {"user": {"login": "frankjtao", "name": "Frank Tao"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/701fe81acf692eebe0acc7b8300c45eb62db2409", "committedDate": "2020-09-14T13:13:12Z", "message": "Merge pull request #2072 from jamesagnew/ft_2020_09_10_term_multi_version_support_db_migration\n\nTerm multi version support db migration - ConceptMap table change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8551b33e8a00cdff0de93711a3c7a3e39bf67afa", "author": {"user": {"login": "frankjtao", "name": "Frank Tao"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/8551b33e8a00cdff0de93711a3c7a3e39bf67afa", "committedDate": "2020-09-14T13:15:12Z", "message": "Merge branch 'feature_2020_09_02_term_multi_version_support' into ft_2020_09_11_term_multi_version_support_loader"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d929d4d191e993b63ff085fb617d84ccc0d248d", "author": {"user": {"login": "frankjtao", "name": "Frank Tao"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/0d929d4d191e993b63ff085fb617d84ccc0d248d", "committedDate": "2020-09-14T13:30:03Z", "message": "Updated based on review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64d3e79a37ca86f0be605e919988e6389fe47c50", "author": {"user": {"login": "frankjtao", "name": "Frank Tao"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/64d3e79a37ca86f0be605e919988e6389fe47c50", "committedDate": "2020-09-14T20:00:27Z", "message": "Merge pull request #2075 from jamesagnew/ft_2020_09_11_term_multi_version_support_loader\n\nAdded to support term multi version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd104ad6358ba4d2bf350bed002945491bc3615a", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/cd104ad6358ba4d2bf350bed002945491bc3615a", "committedDate": "2020-09-15T14:21:42Z", "message": "Revised approach for versioning of ValueSet."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe684ee4c0c2066c086fde29586ed62add223010", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/fe684ee4c0c2066c086fde29586ed62add223010", "committedDate": "2020-09-15T16:26:17Z", "message": "Further cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4cd09a5b692a01ca239311f42ee45901bfd00cb", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/b4cd09a5b692a01ca239311f42ee45901bfd00cb", "committedDate": "2020-09-15T16:30:26Z", "message": "Further cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "087c9e3c3b49429eb58cf7b00c093df9491983b3", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/087c9e3c3b49429eb58cf7b00c093df9491983b3", "committedDate": "2020-09-15T16:34:11Z", "message": "Merge remote-tracking branch 'remotes/origin/master' into feature_2020_09_02_term_multi_version_support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b15f85fa127d9ad6848046a2a94dd83f1e20bc1", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/7b15f85fa127d9ad6848046a2a94dd83f1e20bc1", "committedDate": "2020-09-15T16:35:31Z", "message": "Merge remote-tracking branch 'remotes/origin/feature_20200830_term_multi_version_support' into feature_2020_09_02_term_multi_version_support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "539ef63fc09b74f570cfd9106128d23522432ea6", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/539ef63fc09b74f570cfd9106128d23522432ea6", "committedDate": "2020-09-15T20:24:47Z", "message": "Merge branch 'im_20200728_term_multi_version_support' into feature_2020_09_02_term_multi_version_support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca0bdc8e4c6b21f573f7dc065c6f7d683f6e8e6c", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/ca0bdc8e4c6b21f573f7dc065c6f7d683f6e8e6c", "committedDate": "2020-09-15T20:49:06Z", "message": "Merge remote-tracking branch 'remotes/origin/master' into im_20200728_term_multi_version_support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3add1320b7b8a1dc10259481f47c726a2e9e43ff", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/3add1320b7b8a1dc10259481f47c726a2e9e43ff", "committedDate": "2020-09-15T20:52:02Z", "message": "Merge remote-tracking branch 'remotes/origin/im_20200728_term_multi_version_support' into feature_2020_09_02_term_multi_version_support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2b63cbb02b98d1c30618af78ab9f447326262da", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/b2b63cbb02b98d1c30618af78ab9f447326262da", "committedDate": "2020-09-16T02:05:46Z", "message": "Fixed JUnit tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f7e1f39bc46c87561a947a38a9a885fc57f88e5", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/7f7e1f39bc46c87561a947a38a9a885fc57f88e5", "committedDate": "2020-09-16T02:06:43Z", "message": "Merge remote-tracking branch 'remotes/origin/im_20200728_term_multi_version_support' into feature_2020_09_02_term_multi_version_support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64f2bae2e7ed279df7bcfe7eb6ac2909a27e613c", "author": {"user": {"login": "frankjtao", "name": "Frank Tao"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/64f2bae2e7ed279df7bcfe7eb6ac2909a27e613c", "committedDate": "2020-09-19T02:30:59Z", "message": "Impl CodeSystem $validate-code for R4 with basic test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05de0c503124bd20bfe7081838d533ef68fb8dc5", "author": {"user": {"login": "frankjtao", "name": "Frank Tao"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/05de0c503124bd20bfe7081838d533ef68fb8dc5", "committedDate": "2020-09-19T16:36:14Z", "message": "Added more test cases for R4"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7db9f7475b4c9b6618edf3a6ae80316860bf3cf5", "author": {"user": {"login": "frankjtao", "name": "Frank Tao"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/7db9f7475b4c9b6618edf3a6ae80316860bf3cf5", "committedDate": "2020-09-19T16:52:18Z", "message": "Changed fetch size to 1 for CodeSystem $validate-code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01d88a665d4db8ff3d8a4abe9b65edeb5f373aae", "author": {"user": {"login": "frankjtao", "name": "Frank Tao"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/01d88a665d4db8ff3d8a4abe9b65edeb5f373aae", "committedDate": "2020-09-19T18:13:07Z", "message": "Added CodeSystem/$validate-code for R5"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3a032584bc8c083591f48a4176e94e56aa61860", "author": {"user": {"login": "frankjtao", "name": "Frank Tao"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/a3a032584bc8c083591f48a4176e94e56aa61860", "committedDate": "2020-09-19T19:18:28Z", "message": "Made Transactional"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f692a4776001ffce2b2ac2779bf106fd4f90775", "author": {"user": {"login": "frankjtao", "name": "Frank Tao"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/8f692a4776001ffce2b2ac2779bf106fd4f90775", "committedDate": "2020-09-20T02:54:39Z", "message": "CodeSystem/$validate-code not supported for DSTU2, DSTU3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "302bbca8fd4ef3a54aaa1ed11f50959c3bd1c762", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/302bbca8fd4ef3a54aaa1ed11f50959c3bd1c762", "committedDate": "2020-09-21T02:01:21Z", "message": "Changes to support multi-versioning in ValueSet $expand operation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9f8bf6515f7b1ae59b3a916f6e760c53d812779", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/f9f8bf6515f7b1ae59b3a916f6e760c53d812779", "committedDate": "2020-09-21T02:02:08Z", "message": "Merge remote-tracking branch 'origin/master' into im_20200728_term_multi_version_support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4216cee8c6409ec1e6779ab739379830497f7d19", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/4216cee8c6409ec1e6779ab739379830497f7d19", "committedDate": "2020-09-22T18:44:32Z", "message": "Added and enhanced tests plus fixes arising from tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b32c4f01a835386024c0254a549acc78640d4703", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/b32c4f01a835386024c0254a549acc78640d4703", "committedDate": "2020-09-22T22:46:16Z", "message": "Fixed lookupCode implementation in InMemoryTerminologyServerValidationSupport."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "673274a966580af4f02ad902514bc912bd973816", "author": {"user": {"login": "frankjtao", "name": "Frank Tao"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/673274a966580af4f02ad902514bc912bd973816", "committedDate": "2020-09-23T00:18:18Z", "message": "Added invalid test cases for CodeSystem/$validate-code R3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20661c7a2b906e67b17585fa9a2d5b72086520bf", "author": {"user": {"login": "frankjtao", "name": "Frank Tao"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/20661c7a2b906e67b17585fa9a2d5b72086520bf", "committedDate": "2020-09-23T00:19:43Z", "message": "Removed unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6d86dc5f2ef3f819e5c7c7b09b0cde5629260ac", "author": {"user": {"login": "frankjtao", "name": "Frank Tao"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/b6d86dc5f2ef3f819e5c7c7b09b0cde5629260ac", "committedDate": "2020-09-23T00:39:20Z", "message": "Added fail(); in the invalid test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6a669444d4278b98fde5c30a9ece182eba19af0", "author": {"user": {"login": "frankjtao", "name": "Frank Tao"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/e6a669444d4278b98fde5c30a9ece182eba19af0", "committedDate": "2020-09-23T00:51:20Z", "message": "Added invalid test cases for DSTU3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d3d013d72e6f4d7ca6665897c79641157486b2a", "author": {"user": {"login": "frankjtao", "name": "Frank Tao"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/3d3d013d72e6f4d7ca6665897c79641157486b2a", "committedDate": "2020-09-23T13:19:06Z", "message": "Changed import of IdType to r5."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "404abb2dcbe010a86ca90fc1dc2679a0c92d25f2", "author": {"user": {"login": "frankjtao", "name": "Frank Tao"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/404abb2dcbe010a86ca90fc1dc2679a0c92d25f2", "committedDate": "2020-09-23T19:34:38Z", "message": "Merge pull request #2094 from jamesagnew/ft_2020_09_16_codesystem_validate\n\nSupport CodeSystem/$validate-code for R4, R5"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ceb5ec63847c2bee832027ea93edd902a5356270", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/ceb5ec63847c2bee832027ea93edd902a5356270", "committedDate": "2020-09-23T20:42:29Z", "message": "Use canonical identifiers for code systems rather than specifying version separately."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "640ee94c5c0216d8c606646950426551885055d3", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/640ee94c5c0216d8c606646950426551885055d3", "committedDate": "2020-09-23T20:43:22Z", "message": "Merge remote-tracking branch 'origin/master' into im_20200728_term_multi_version_support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dffc02a12600ff670d4278e1e9fe94f481516586", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/dffc02a12600ff670d4278e1e9fe94f481516586", "committedDate": "2020-09-23T20:51:18Z", "message": "Missing fixes for DSTU3 and R5."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5daea17b7fc2c2e1539e73fefc3d6d13a020b77", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/e5daea17b7fc2c2e1539e73fefc3d6d13a020b77", "committedDate": "2020-09-23T21:17:07Z", "message": "Additional cleanup and migration tasks."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fe46be41cb8d0f455f3c5a32f3bc4a23fbaa2f2", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/5fe46be41cb8d0f455f3c5a32f3bc4a23fbaa2f2", "committedDate": "2020-09-24T22:51:47Z", "message": "Validate code changes and new tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bceacd9a6cacae20259445d7e7961072fe8e017", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/2bceacd9a6cacae20259445d7e7961072fe8e017", "committedDate": "2020-09-25T12:51:53Z", "message": "Update loader to ensure that ConceptMap and ValueSet Ids are unique for each version loaded."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f9874468a608165eb9263147c9f693f29805e7b", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/6f9874468a608165eb9263147c9f693f29805e7b", "committedDate": "2020-09-25T12:54:17Z", "message": "Merge remote-tracking branch 'origin/master' into feature_2020_09_02_term_multi_version_support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47244c54dc02cf76ef8b8dca7602d40c154a223a", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/47244c54dc02cf76ef8b8dca7602d40c154a223a", "committedDate": "2020-09-25T13:10:07Z", "message": "Merge remote-tracking branch 'origin/feature_2020_09_02_term_multi_version_support' into im_20200728_term_multi_version_support\n\n# Conflicts:\n#\thapi-fhir-jpaserver-api/src/main/java/ca/uhn/fhir/jpa/api/dao/IFhirResourceDaoCodeSystem.java\n#\thapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java\n#\thapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/loinc/BaseLoincHandler.java\n#\thapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/loinc/LoincIeeeMedicalDeviceCodeHandler.java\n#\thapi-fhir-jpaserver-migrate/src/main/java/ca/uhn/fhir/jpa/migrate/tasks/HapiFhirJpaMigrationTasks.java\n#\thapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/CommonCodeSystemsTerminologyService.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1dc4a533d61fd4b9573777e97a7bed714ba1cf70", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/1dc4a533d61fd4b9573777e97a7bed714ba1cf70", "committedDate": "2020-09-26T01:43:15Z", "message": "Fixes to terminology loader."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "732624bfaf1c5c80c902a806ede575c19771ca3b", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/732624bfaf1c5c80c902a806ede575c19771ca3b", "committedDate": "2020-09-26T02:55:01Z", "message": "Fix broken JUnit test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e86d9deaacbc37ca465738e1cd810add78e69f0b", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/e86d9deaacbc37ca465738e1cd810add78e69f0b", "committedDate": "2020-09-27T21:45:15Z", "message": "Additional tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d8664ccd84d7c5cd40f63faec3995632a13c151", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/9d8664ccd84d7c5cd40f63faec3995632a13c151", "committedDate": "2020-09-28T01:09:06Z", "message": "Additional tests and updates."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/42b4e9ae02f33baa02a49b523a10935275155b7f", "committedDate": "2020-09-28T12:45:59Z", "message": "Add change log."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3ODQzMTIw", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#pullrequestreview-497843120", "createdAt": "2020-09-28T19:45:58Z", "commit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 48, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxOTo0NTo1OFrOHZNIAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDoyNzozN1rOHZwCug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE5MTQ5MA==", "bodyText": "This is no longer a version-independent concept. Consider renaming this to something more appropriate (e.g. Concept or VersionOptionalConcept).", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496191490", "createdAt": "2020-09-28T19:45:58Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/util/VersionIndependentConcept.java", "diffHunk": "@@ -40,7 +41,12 @@ public VersionIndependentConcept(String theSystem, String theCode) {\n \t}\n \n \tpublic VersionIndependentConcept(String theSystem, String theCode, String theDisplay) {\n+\t\tthis(theSystem, theCode, theDisplay, null);\n+\t}\n+\n+\tpublic VersionIndependentConcept(String theSystem, String theCode, String theDisplay, String theSystemVersion) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE5MzU1NA==", "bodyText": "Nitpick: for consistency with similar messages.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ca.uhn.fhir.jpa.term.BaseTermReadSvcImpl.cannotCreateDuplicateConceptMapUrlAndVersion=Can not create multiple ConceptMap resources with ConceptMap.url \"{0}\", ConceptMap.version \"{1}\", already have one with resource ID: {2}\n          \n          \n            \n            ca.uhn.fhir.jpa.term.BaseTermReadSvcImpl.cannotCreateDuplicateConceptMapUrlAndVersion=Can not create multiple ConceptMap resources with ConceptMap.url \"{0}\" and ConceptMap.version \"{1}\", already have one with resource ID: {2}", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496193554", "createdAt": "2020-09-28T19:50:01Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-base/src/main/resources/ca/uhn/fhir/i18n/hapi-messages.properties", "diffHunk": "@@ -141,9 +143,13 @@ ca.uhn.fhir.jpa.binstore.BinaryAccessProvider.unknownType=Content in resource of\n \n \n ca.uhn.fhir.jpa.term.BaseTermReadSvcImpl.cannotCreateDuplicateCodeSystemUrl=Can not create multiple CodeSystem resources with CodeSystem.url \"{0}\", already have one with resource ID: {1}\n+ca.uhn.fhir.jpa.term.BaseTermReadSvcImpl.cannotCreateDuplicateCodeSystemUrlAndVersion=Can not create multiple CodeSystem resources with CodeSystem.url \"{0}\" and CodeSystem.version \"{1}\", already have one with resource ID: {2}\n ca.uhn.fhir.jpa.term.BaseTermReadSvcImpl.cannotCreateDuplicateConceptMapUrl=Can not create multiple ConceptMap resources with ConceptMap.url \"{0}\", already have one with resource ID: {1}\n+ca.uhn.fhir.jpa.term.BaseTermReadSvcImpl.cannotCreateDuplicateConceptMapUrlAndVersion=Can not create multiple ConceptMap resources with ConceptMap.url \"{0}\", ConceptMap.version \"{1}\", already have one with resource ID: {2}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE5NDYzMg==", "bodyText": "Consider separating this out into multiple changelog entries (e.g. one general to terminology, and one specific to LOINC).", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496194632", "createdAt": "2020-09-28T19:52:05Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/changelog/5_2_0/2081-multiple-version-code-systems.yaml", "diffHunk": "@@ -0,0 +1,5 @@\n+---\n+type: add\n+issue: 2081\n+title: \"Terminology loader for LOINC and operations for CodeSystem, ValueSet and ConcepMap will now support", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE5NTExNg==", "bodyText": "Surprised we didn't already support this. Good catch!", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496195116", "createdAt": "2020-09-28T19:52:51Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-api/src/main/java/ca/uhn/fhir/jpa/api/dao/IFhirResourceDaoCodeSystem.java", "diffHunk": "@@ -42,6 +42,8 @@\n \n \tSubsumesResult subsumes(IPrimitiveType<String> theCodeA, IPrimitiveType<String> theCodeB, IPrimitiveType<String> theSystem, CD theCodingA, CD theCodingB, RequestDetails theRequestDetails);\n \n+\tIValidationSupport.CodeValidationResult validateCode(IIdType theCodeSystemId, IPrimitiveType<String> theCodeSystemUrl, IPrimitiveType<String> theVersion, IPrimitiveType<String> theCode, IPrimitiveType<String> theDisplay, CD theCoding, CC theCodeableConcept, RequestDetails theRequestDetails);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE5NjUyNA==", "bodyText": "Nitpick: these kinds of comments add unnecessary visual noise; the method names should be descriptive enough.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496196524", "createdAt": "2020-09-28T19:55:33Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-api/src/main/java/ca/uhn/fhir/jpa/api/model/TranslationQuery.java", "diffHunk": "@@ -58,6 +61,32 @@ public void setResourceId(Long theResourceId) {\n \t\tmyResourceId = theResourceId;\n \t}\n \n+\t//-- url", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxMDY3Nw==", "bodyText": "This seems incomplete to me. It's good to store a ConceptMap version as you do for CodeSystem and ValueSet; this is equivalent to the conceptMapVersion in parameter in the spec for ConceptMap$translate. However, I think what's required is support for the version in parameter, which corresponds to CodeSystem.version. The response should then include CodeSystem.version in any matches. We rarely refer to a specific ConceptMap; but we are interested in mapping for a particular version of the concept's CodeSystem.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496210677", "createdAt": "2020-09-28T20:24:08Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-api/src/main/java/ca/uhn/fhir/jpa/api/model/TranslationRequest.java", "diffHunk": "@@ -24,15 +27,15 @@\n import org.hl7.fhir.r4.model.BooleanType;\n import org.hl7.fhir.r4.model.CodeableConcept;\n import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.StringType;\n import org.hl7.fhir.r4.model.UriType;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-\n public class TranslationRequest {\n \tprivate CodeableConcept myCodeableConcept;\n \tprivate Long myResourceId;\n \tprivate BooleanType myReverse;\n+\tprivate UriType myUrl;\n+\tprivate StringType myConceptMapVersion;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxMjQwNA==", "bodyText": "This looks like we're assuming the version most recently updated is also the latest/current version. This needs to be documented somewhere; or we need a clearer way of identifying the current version. For example, a flag supported by an enum with values such as historical|current|draft.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496212404", "createdAt": "2020-09-28T20:27:31Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/ITermConceptMapDao.java", "diffHunk": "@@ -36,6 +39,17 @@\n \t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myResourcePid = :resource_pid\")\n \tOptional<TermConceptMap> findTermConceptMapByResourcePid(@Param(\"resource_pid\") Long theResourcePid);\n \n-\t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myUrl = :url\")\n+\t// Keep backwards compatibility, recommend to use findTermConceptMapByUrlAndNullVersion instead\n+\t@Deprecated\n+\t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myUrl = :url and cm.myVersion is null\")\n \tOptional<TermConceptMap> findTermConceptMapByUrl(@Param(\"url\") String theUrl);\n+\t\n+\t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myUrl = :url and cm.myVersion is null\")\n+\tOptional<TermConceptMap> findTermConceptMapByUrlAndNullVersion(@Param(\"url\") String theUrl);\n+\t\n+\t@Query(value=\"SELECT cm FROM TermConceptMap cm INNER JOIN ResourceTable r ON r.myId = cm.myResourcePid WHERE cm.myUrl = :url ORDER BY r.myUpdated DESC\") ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxMzUwMg==", "bodyText": "It's best practice to include a comment why this was deprecated.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496213502", "createdAt": "2020-09-28T20:29:35Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/ITermValueSetDao.java", "diffHunk": "@@ -28,17 +28,29 @@\n import org.springframework.data.jpa.repository.Query;\n import org.springframework.data.repository.query.Param;\n \n+import java.util.List;\n import java.util.Optional;\n \n public interface ITermValueSetDao extends JpaRepository<TermValueSet, Long> {\n \n \t@Query(\"SELECT vs FROM TermValueSet vs WHERE vs.myResourcePid = :resource_pid\")\n \tOptional<TermValueSet> findByResourcePid(@Param(\"resource_pid\") Long theResourcePid);\n \n+\t@Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxODIxNg==", "bodyText": "I'm not sure I understand this change. Can you explain why it's necessary?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496218216", "createdAt": "2020-09-28T20:38:51Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/entity/TermCodeSystem.java", "diffHunk": "@@ -58,7 +58,7 @@\n \t@Column(name = \"PID\")\n \tprivate Long myPid;\n \t@OneToOne(fetch = FetchType.LAZY)\n-\t@JoinColumn(name = \"RES_ID\", referencedColumnName = \"RES_ID\", nullable = false, updatable = false, foreignKey = @ForeignKey(name = \"FK_TRMCODESYSTEM_RES\"))\n+\t@JoinColumn(name = \"RES_ID\", referencedColumnName = \"RES_ID\", nullable = false, updatable = true, foreignKey = @ForeignKey(name = \"FK_TRMCODESYSTEM_RES\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIyMDI3Nw==", "bodyText": "Nitpick: for consistency and easier reading.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t@OperationParam(name=\"version\", min=0, max=1) StringType theVersion,\n          \n          \n            \n            \t\t@OperationParam(name = \"version\", min = 0, max = 1) StringType theVersion,", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496220277", "createdAt": "2020-09-28T20:42:43Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/provider/dstu3/BaseJpaResourceProviderCodeSystemDstu3.java", "diffHunk": "@@ -84,13 +90,18 @@ public Parameters subsumes(\n \t\t@OperationParam(name = \"system\", min = 0, max = 1) UriType theSystem,\n \t\t@OperationParam(name = \"codingA\", min = 0, max = 1) Coding theCodingA,\n \t\t@OperationParam(name = \"codingB\", min = 0, max = 1) Coding theCodingB,\n+\t\t@OperationParam(name=\"version\", min=0, max=1) StringType theVersion,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIyNzI2Mg==", "bodyText": "Consider another name for this. This is CodeSystem.url and possibly also CodeSystem.version. CodeSystem.identifier is unrelated, and we probably want to avoid confusing the two.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496227262", "createdAt": "2020-09-28T20:56:19Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java", "diffHunk": "@@ -793,7 +845,13 @@ private Boolean expandValueSetHandleIncludeOrExcludeUsingDatabase(IValueSetConce\n \t\t/*\n \t\t * Filters\n \t\t */\n-\t\thandleFilters(bool, theSystem, qb, theIncludeOrExclude);\n+\t\tString codeSystemIdentifier;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIyNzY0Mg==", "bodyText": "Typo? Loing versus Loinc?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496227642", "createdAt": "2020-09-28T20:57:01Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java", "diffHunk": "@@ -926,36 +984,36 @@ private void handleFilter(String theSystem, QueryBuilder theQb, BooleanJunction<\n \t\t\t\tbreak;\n \t\t\tcase \"concept\":\n \t\t\tcase \"code\":\n-\t\t\t\thandleFilterConceptAndCode(theSystem, theQb, theBool, theFilter);\n+\t\t\t\thandleFilterConceptAndCode(theCodeSystemIdentifier, theQb, theBool, theFilter);\n \t\t\t\tbreak;\n \t\t\tcase \"parent\":\n \t\t\tcase \"child\":\n-\t\t\t\tisCodeSystemLoingOrThrowInvalidRequestException(theSystem, theFilter.getProperty());\n-\t\t\t\thandleFilterLoincParentChild(theQb, theBool, theFilter);\n+\t\t\t\tisCodeSystemLoingOrThrowInvalidRequestException(theCodeSystemIdentifier, theFilter.getProperty());\n+\t\t\t\thandleFilterLoincParentChild(theBool, theFilter);\n \t\t\t\tbreak;\n \t\t\tcase \"ancestor\":\n-\t\t\t\tisCodeSystemLoingOrThrowInvalidRequestException(theSystem, theFilter.getProperty());\n-\t\t\t\thandleFilterLoincAncestor(theSystem, theQb, theBool, theFilter);\n+\t\t\t\tisCodeSystemLoingOrThrowInvalidRequestException(theCodeSystemIdentifier, theFilter.getProperty());\n+\t\t\t\thandleFilterLoincAncestor(theCodeSystemIdentifier, theBool, theFilter);\n \t\t\t\tbreak;\n \t\t\tcase \"descendant\":\n-\t\t\t\tisCodeSystemLoingOrThrowInvalidRequestException(theSystem, theFilter.getProperty());\n-\t\t\t\thandleFilterLoincDescendant(theSystem, theQb, theBool, theFilter);\n+\t\t\t\tisCodeSystemLoingOrThrowInvalidRequestException(theCodeSystemIdentifier, theFilter.getProperty());\n+\t\t\t\thandleFilterLoincDescendant(theCodeSystemIdentifier, theBool, theFilter);\n \t\t\t\tbreak;\n \t\t\tcase \"copyright\":\n-\t\t\t\tisCodeSystemLoingOrThrowInvalidRequestException(theSystem, theFilter.getProperty());\n-\t\t\t\thandleFilterLoincCopyright(theQb, theBool, theFilter);\n+\t\t\t\tisCodeSystemLoingOrThrowInvalidRequestException(theCodeSystemIdentifier, theFilter.getProperty());\n+\t\t\t\thandleFilterLoincCopyright(theBool, theFilter);\n \t\t\t\tbreak;\n \t\t\tdefault:\n \t\t\t\thandleFilterRegex(theBool, theFilter);\n \t\t\t\tbreak;\n \t\t}\n \t}\n \n-\tprivate boolean isCodeSystemLoingOrThrowInvalidRequestException(String theSystem, String theProperty) {\n-\t\tif (!isCodeSystemLoinc(theSystem)) {\n-\t\t\tthrow new InvalidRequestException(\"Invalid filter, property \" + theProperty + \" is LOINC-specific and cannot be used with system: \" + theSystem);\n+\tprivate void isCodeSystemLoingOrThrowInvalidRequestException(String theSystemIdentifier, String theProperty) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 258}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIyODg0MQ==", "bodyText": "I'm not sure I understand this comment. What does it mean?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496228841", "createdAt": "2020-09-28T20:59:25Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java", "diffHunk": "@@ -1920,6 +2069,12 @@ ConceptSubsumptionOutcome testForSubsumption(FullTextEntityManager theEntityMana\n \t\tList<TermConceptMapGroupElementTarget> cachedTargets;\n \t\tArrayList<Predicate> predicates;\n \t\tCoding coding;\n+\n+\t\t//-- get the latest ConceptMapVersion if theTranslationRequest has url, but ConceptMapVersion", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 674}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIyOTE1MA==", "bodyText": "Same comment. What does it mean?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496229150", "createdAt": "2020-09-28T20:59:56Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java", "diffHunk": "@@ -2003,6 +2173,12 @@ ConceptSubsumptionOutcome testForSubsumption(FullTextEntityManager theEntityMana\n \t\tList<TermConceptMapGroupElement> cachedElements;\n \t\tArrayList<Predicate> predicates;\n \t\tCoding coding;\n+\n+\t\t//-- get the latest ConceptMapVersion if theTranslationRequest has url, but ConceptMapVersion", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 709}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIyOTU4OQ==", "bodyText": "What is the failure?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496229589", "createdAt": "2020-09-28T21:00:50Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java", "diffHunk": "@@ -2057,6 +2248,7 @@ ConceptSubsumptionOutcome testForSubsumption(FullTextEntityManager theEntityMana\n \n \t\t\t\t\twhile (scrollableResultsIterator.hasNext()) {\n \t\t\t\t\t\tTermConceptMapGroupElement nextElement = scrollableResultsIterator.next();\n+\t\t\t\t\t\t// TODO: The invocation of the size() below does not seem to be necessary but for some reason, removing it causes tests in TerminologySvcImplR4Test to fail.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 743}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzMTA1MQ==", "bodyText": "Is this referring to CodeSystem.version or a TermCodeSystemVersion? The log output may be misleading since TermCodeSystemVersion is internal and specific to HAPI FHIR whereas end-users will be more familiar with CodeSystem.version.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496231051", "createdAt": "2020-09-28T21:03:35Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/TermCodeSystemStorageSvcImpl.java", "diffHunk": "@@ -231,6 +231,15 @@ public void deleteCodeSystem(TermCodeSystem theCodeSystem) {\n \t\t});\n \t}\n \n+\t@Override\n+\t@Transactional(propagation = Propagation.NEVER)\n+\tpublic void deleteCodeSystemVersion(TermCodeSystemVersion theCodeSystemVersion) {\n+\t\t// Delete TermCodeSystemVersion\n+\t\tourLog.info(\" * Deleting code system version {}\", theCodeSystemVersion.getCodeSystemVersionId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzMzE4OQ==", "bodyText": "Is it safe to set a specific version when one wasn't provided? This seems dangerous to me. Perhaps this should be a required property that triggers a failure when omitted?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496233189", "createdAt": "2020-09-28T21:07:43Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/TermLoaderSvcImpl.java", "diffHunk": "@@ -494,12 +499,20 @@ UploadStatistics processLoincFiles(LoadedFileDescriptors theDescriptors, Request\n \t\treturn new UploadStatistics(conceptCount, target);\n \t}\n \n-\tprivate ValueSet getValueSetLoincAll() {\n+\tprivate ValueSet getValueSetLoincAll(Properties theUploadProperties) {\n \t\tValueSet retVal = new ValueSet();\n \n-\t\tretVal.setId(\"loinc-all\");\n+\t\tString codeSystemVersionId = theUploadProperties.getProperty(LOINC_CODESYSTEM_VERSION.getCode());\n+\t\tString valueSetId;\n+\t\tif (codeSystemVersionId != null) {\n+\t\t\tvalueSetId = \"loinc-all\" + \"-\" + codeSystemVersionId;\n+\t\t} else {\n+\t\t\tvalueSetId = \"loinc-all\";\n+\t\t\tcodeSystemVersionId = \"1.0.0\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzNTMyMQ==", "bodyText": "Will appending the version to the resource ID break existing solutions that depend on or expect the versionless resource ID?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496235321", "createdAt": "2020-09-28T21:11:59Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/loinc/BaseLoincTop2000LabResultsHandler.java", "diffHunk": "@@ -41,7 +42,12 @@\n \n \tpublic BaseLoincTop2000LabResultsHandler(Map<String, TermConcept> theCode2concept, List<ValueSet> theValueSets, String theValueSetId, String theValueSetUri, String theValueSetName, List<ConceptMap> theConceptMaps, Properties theUploadProperties) {\n \t\tsuper(theCode2concept, theValueSets, theConceptMaps, theUploadProperties);\n-\t\tmyValueSetId = theValueSetId;\n+\t\tString versionId = myUploadProperties.getProperty(LOINC_CODESYSTEM_VERSION.getCode());\n+\t\tif (versionId != null) {\n+\t\t\tmyValueSetId = theValueSetId + \"-\" + versionId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzNTczNQ==", "bodyText": "Same concern about appending version to the standard resource ID. I'm sure this happens repeatedly so I won't call it out again.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496235735", "createdAt": "2020-09-28T21:12:55Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/loinc/LoincAnswerListHandler.java", "diffHunk": "@@ -74,7 +74,14 @@ public void accept(CSVRecord theRecord) {\n \t\t}\n \n \t\t// Answer list ValueSet\n-\t\tValueSet vs = getValueSet(answerListId, \"http://loinc.org/vs/\" + answerListId, answerListName, LOINC_ANSWERLIST_VERSION.getCode());\n+\t\tString valueSetId;\n+\t\tString codeSystemVersionId = myUploadProperties.getProperty(LOINC_CODESYSTEM_VERSION.getCode());\n+\t\tif (codeSystemVersionId != null) {\n+\t\t\tvalueSetId = answerListId + \"-\" + codeSystemVersionId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzNjU1OA==", "bodyText": "This probably shouldn't be optional.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496236558", "createdAt": "2020-09-28T21:14:41Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/loinc/LoincUploadPropertiesEnum.java", "diffHunk": "@@ -96,6 +96,9 @@\n \t/*\n \t * OPTIONAL\n \t */\n+\t// This is the version identifier for the LOINC code system\n+\tLOINC_CODESYSTEM_VERSION(\"loinc.codesystem.version\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzNzgwMQ==", "bodyText": "So if this is omitted, the CodeSystem.version will always be 1.0.0 regardless of the version of LOINC loaded. Is that correct? Again, I'm not sure that's safe.\nWhat happens where CodeSystem.version is left unpopulated? Alternatively, perhaps we need a configuration item somewhere in DaoConfig that determines whether or not we keep multiple versions of LOINC.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496237801", "createdAt": "2020-09-28T21:17:14Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/main/resources/ca/uhn/fhir/jpa/term/loinc/loincupload.properties", "diffHunk": "@@ -61,6 +61,10 @@ loinc.universal.lab.order.valueset.file=AccessoryFiles/LoincUniversalLabOrdersVa\n ### OPTIONAL ###\n ################\n \n+# This is the version identifier for the LOINC code system\n+## Key may be omitted if only a single version of LOINC is being kept.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzOTAxMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testConcaptMapFindTermConceptMapByUrl() {\n          \n          \n            \n            \tpublic void testConceptMapFindTermConceptMapByUrl() {", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496239010", "createdAt": "2020-09-28T21:19:48Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoDstu3ConceptMapTest.java", "diffHunk": "@@ -98,4 +107,74 @@ protected void doInTransactionWithoutResult(TransactionStatus theStatus) {\n \t\t});\n \t}\n \n+\t@Test\n+\tpublic void testConcaptMapFindTermConceptMapByUrl() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzOTEwMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testConcaptMapTwoConceptMapWithSameUrlDifferentVersion() {\n          \n          \n            \n            \tpublic void testConceptMapTwoConceptMapWithSameUrlDifferentVersion() {", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496239102", "createdAt": "2020-09-28T21:19:59Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoDstu3ConceptMapTest.java", "diffHunk": "@@ -98,4 +107,74 @@ protected void doInTransactionWithoutResult(TransactionStatus theStatus) {\n \t\t});\n \t}\n \n+\t@Test\n+\tpublic void testConcaptMapFindTermConceptMapByUrl() {\n+\t\t\t\n+\t\tPageable page = PageRequest.of(0, 1);\n+\t\tList<TermConceptMap> theExpConceptMapList = myTermConceptMapDao.getTermConceptMapEntitiesByUrlOrderByVersion(page, CM_URL);\n+\t\tassertEquals(1, theExpConceptMapList.size());\n+\t\tassertEquals(CM_URL, theExpConceptMapList.get(0).getUrl());\n+\t\t\n+\t}\n+\n+\t@Test\n+\tpublic void testConcaptMapTwoConceptMapWithSameUrlDifferentVersion() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcwMjI5MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testConcaptMapFindTermConceptMapByUrl() {\n          \n          \n            \n            \tpublic void testConceptMapFindTermConceptMapByUrl() {", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496702290", "createdAt": "2020-09-29T13:09:10Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4ConceptMapTest.java", "diffHunk": "@@ -1148,5 +1154,74 @@ public void testUploadAndApplyR4DemoConceptMap() throws IOException {\n \t\tassertEquals(\"S52.209A\", outcome.getMatches().get(0).getConcept().getCode());\n \t}\n \n+\t@Test\n+\tpublic void testConcaptMapFindTermConceptMapByUrl() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcwMjQ1MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testConcaptMapTwoConceptMapWithSameUrlDifferentVersion() {\n          \n          \n            \n            \tpublic void testConceptMapTwoConceptMapWithSameUrlDifferentVersion() {", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496702450", "createdAt": "2020-09-29T13:09:24Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4ConceptMapTest.java", "diffHunk": "@@ -1148,5 +1154,74 @@ public void testUploadAndApplyR4DemoConceptMap() throws IOException {\n \t\tassertEquals(\"S52.209A\", outcome.getMatches().get(0).getConcept().getCode());\n \t}\n \n+\t@Test\n+\tpublic void testConcaptMapFindTermConceptMapByUrl() {\n+\t\t\t\n+\t\tPageable page = PageRequest.of(0, 1);\n+\t\tList<TermConceptMap> theExpConceptMapList = myTermConceptMapDao.getTermConceptMapEntitiesByUrlOrderByVersion(page, CM_URL);\n+\t\tassertEquals(1, theExpConceptMapList.size());\n+\t\tassertEquals(CM_URL, theExpConceptMapList.get(0).getUrl());\n+\t\t\n+\t}\n+\n+\t@Test\n+\tpublic void testConcaptMapTwoConceptMapWithSameUrlDifferentVersion() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcwMjgxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testConcaptMapTwoConceptMapWithSameUrlOneWithoutVersion() {\n          \n          \n            \n            \tpublic void testConceptMapTwoConceptMapWithSameUrlOneWithoutVersion() {", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496702812", "createdAt": "2020-09-29T13:09:58Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4ConceptMapTest.java", "diffHunk": "@@ -1148,5 +1154,74 @@ public void testUploadAndApplyR4DemoConceptMap() throws IOException {\n \t\tassertEquals(\"S52.209A\", outcome.getMatches().get(0).getConcept().getCode());\n \t}\n \n+\t@Test\n+\tpublic void testConcaptMapFindTermConceptMapByUrl() {\n+\t\t\t\n+\t\tPageable page = PageRequest.of(0, 1);\n+\t\tList<TermConceptMap> theExpConceptMapList = myTermConceptMapDao.getTermConceptMapEntitiesByUrlOrderByVersion(page, CM_URL);\n+\t\tassertEquals(1, theExpConceptMapList.size());\n+\t\tassertEquals(CM_URL, theExpConceptMapList.get(0).getUrl());\n+\t\t\n+\t}\n+\n+\t@Test\n+\tpublic void testConcaptMapTwoConceptMapWithSameUrlDifferentVersion() {\n+\t\t\t\t\n+\t\tString theUrl = \"http://loinc.org/property/analyte-suffix\";\n+\t\tConceptMap theConceptMap1 = new ConceptMap();\n+\t\tConceptMap theConceptMap2 = new ConceptMap();\n+\t\t\n+\t\ttheConceptMap1.setUrl(theUrl).setStatus(PublicationStatus.ACTIVE).setName(\"name1\").setVersion(\"v1\");\n+\t\ttheConceptMap2.setUrl(theUrl).setStatus(PublicationStatus.ACTIVE).setName(\"name2\").setVersion(\"v2\");\n+\t\t\n+\t\tmyConceptMapDao.create(theConceptMap1);\n+\t\tmyConceptMapDao.create(theConceptMap2);\n+\t\t\n+\t\tOptional<TermConceptMap> theExpConceptMapV1 = myTermConceptMapDao.findTermConceptMapByUrlAndVersion(theUrl, \"v1\");\n+\t\tOptional<TermConceptMap> theExpConceptMapV2 = myTermConceptMapDao.findTermConceptMapByUrlAndVersion(theUrl, \"v2\");\n+\t\t\n+\t\tassertTrue(theExpConceptMapV1.isPresent());\n+\t\tassertEquals(theUrl, theExpConceptMapV1.get().getUrl());\n+\t\tassertEquals(\"v1\", theExpConceptMapV1.get().getVersion());\n+\t\t\n+\t\tassertTrue(theExpConceptMapV2.isPresent());\n+\t\tassertEquals(theUrl, theExpConceptMapV2.get().getUrl());\n+\t\tassertEquals(\"v2\", theExpConceptMapV2.get().getVersion());\n+\n+\t\t// should return the latest one which is v2\n+\t\tPageable page = PageRequest.of(0, 1);\n+\t\tList<TermConceptMap> theExpSecondOne = myTermConceptMapDao.getTermConceptMapEntitiesByUrlOrderByVersion(page, theUrl);\n+\t\t\n+\t\tassertEquals(1, theExpSecondOne.size());\n+\t\tassertEquals(theUrl, theExpSecondOne.get(0).getUrl());\n+\t\tassertEquals(\"v2\", theExpSecondOne.get(0).getVersion());\n+\t}\n \n+\t@Test\n+\tpublic void testConcaptMapTwoConceptMapWithSameUrlOneWithoutVersion() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcwNjIxOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testTranslateWithVersionedConcaptMapUrl_v2() {\n          \n          \n            \n            \tpublic void testTranslateWithVersionedConceptMapUrl_v2() {", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496706219", "createdAt": "2020-09-29T13:14:56Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java", "diffHunk": "@@ -114,4 +126,550 @@ public void testTranslateByCodeSystemsAndSourceCodeOneToMany() {\n \t\tpart = getPartByName(param, \"source\");\n \t\tassertEquals(CM_URL, ((UriType) part.getValue()).getValueAsString());\n \t}\n+\t\n+\t@Test\n+\tpublic void testTranslateWithConceptMapUrlAndVersion() {\n+\t\t\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"conceptMapVersion\").setValue(new StringType(\"v2\"));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\t\t\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"13333\", coding.getCode());\n+\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_v2() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcwNjU2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testTranslateWithVersionedConcaptMapUrl_v1() {\n          \n          \n            \n            \tpublic void testTranslateWithVersionedConceptMapUrl_v1() {", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496706565", "createdAt": "2020-09-29T13:15:21Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java", "diffHunk": "@@ -114,4 +126,550 @@ public void testTranslateByCodeSystemsAndSourceCodeOneToMany() {\n \t\tpart = getPartByName(param, \"source\");\n \t\tassertEquals(CM_URL, ((UriType) part.getValue()).getValueAsString());\n \t}\n+\t\n+\t@Test\n+\tpublic void testTranslateWithConceptMapUrlAndVersion() {\n+\t\t\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"conceptMapVersion\").setValue(new StringType(\"v2\"));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\t\t\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"13333\", coding.getCode());\n+\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_v2() {\n+\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\t\t\n+\t\t// Call translate with ConceptMap v2.\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"conceptMapVersion\").setValue(new StringType(\"v2\"));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\n+\t\t// Should return v2 since v2 specified.\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"13333\", coding.getCode());\n+\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_v1() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcwNjgwMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testTranslateWithVersionedConcaptMapUrl_NoVersion() {\n          \n          \n            \n            \tpublic void testTranslateWithVersionedConceptMapUrl_NoVersion() {", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496706802", "createdAt": "2020-09-29T13:15:39Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java", "diffHunk": "@@ -114,4 +126,550 @@ public void testTranslateByCodeSystemsAndSourceCodeOneToMany() {\n \t\tpart = getPartByName(param, \"source\");\n \t\tassertEquals(CM_URL, ((UriType) part.getValue()).getValueAsString());\n \t}\n+\t\n+\t@Test\n+\tpublic void testTranslateWithConceptMapUrlAndVersion() {\n+\t\t\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"conceptMapVersion\").setValue(new StringType(\"v2\"));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\t\t\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"13333\", coding.getCode());\n+\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_v2() {\n+\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\t\t\n+\t\t// Call translate with ConceptMap v2.\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"conceptMapVersion\").setValue(new StringType(\"v2\"));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\n+\t\t// Should return v2 since v2 specified.\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"13333\", coding.getCode());\n+\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_v1() {\n+\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\t\t\n+\t\t// Call translate with ConceptMap v1.\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"conceptMapVersion\").setValue(new StringType(\"v1\"));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\n+\t\t// Should return v1 since v1 specified.\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"12222\", coding.getCode());\n+\t\tassertEquals(\"Target Code 12222\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_NoVersion() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcwNjk3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testTranslateWithVersionedConcaptMapUrl_NoVersion_null_v1() {\n          \n          \n            \n            \tpublic void testTranslateWithVersionedConceptMapUrl_NoVersion_null_v1() {", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496706974", "createdAt": "2020-09-29T13:15:54Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java", "diffHunk": "@@ -114,4 +126,550 @@ public void testTranslateByCodeSystemsAndSourceCodeOneToMany() {\n \t\tpart = getPartByName(param, \"source\");\n \t\tassertEquals(CM_URL, ((UriType) part.getValue()).getValueAsString());\n \t}\n+\t\n+\t@Test\n+\tpublic void testTranslateWithConceptMapUrlAndVersion() {\n+\t\t\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"conceptMapVersion\").setValue(new StringType(\"v2\"));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\t\t\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"13333\", coding.getCode());\n+\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_v2() {\n+\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\t\t\n+\t\t// Call translate with ConceptMap v2.\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"conceptMapVersion\").setValue(new StringType(\"v2\"));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\n+\t\t// Should return v2 since v2 specified.\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"13333\", coding.getCode());\n+\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_v1() {\n+\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\t\t\n+\t\t// Call translate with ConceptMap v1.\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"conceptMapVersion\").setValue(new StringType(\"v1\"));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\n+\t\t// Should return v1 since v1 specified.\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"12222\", coding.getCode());\n+\t\tassertEquals(\"Target Code 12222\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_NoVersion() {\n+\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\t\t\n+\t\t// Call translate with no ConceptMap version.\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\n+\t\t// Should return v2 since v2 is the most recently updated version.\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"13333\", coding.getCode());\n+\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\t}\n+\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_NoVersion_null_v1() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 237}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcwNzIyOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testTranslateWithVersionedConcaptMapUrl_NoVersion_null_v2() {\n          \n          \n            \n            \tpublic void testTranslateWithVersionedConceptMapUrl_NoVersion_null_v2() {", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496707229", "createdAt": "2020-09-29T13:16:17Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java", "diffHunk": "@@ -114,4 +126,550 @@ public void testTranslateByCodeSystemsAndSourceCodeOneToMany() {\n \t\tpart = getPartByName(param, \"source\");\n \t\tassertEquals(CM_URL, ((UriType) part.getValue()).getValueAsString());\n \t}\n+\t\n+\t@Test\n+\tpublic void testTranslateWithConceptMapUrlAndVersion() {\n+\t\t\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"conceptMapVersion\").setValue(new StringType(\"v2\"));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\t\t\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"13333\", coding.getCode());\n+\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_v2() {\n+\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\t\t\n+\t\t// Call translate with ConceptMap v2.\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"conceptMapVersion\").setValue(new StringType(\"v2\"));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\n+\t\t// Should return v2 since v2 specified.\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"13333\", coding.getCode());\n+\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_v1() {\n+\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\t\t\n+\t\t// Call translate with ConceptMap v1.\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"conceptMapVersion\").setValue(new StringType(\"v1\"));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\n+\t\t// Should return v1 since v1 specified.\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"12222\", coding.getCode());\n+\t\tassertEquals(\"Target Code 12222\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_NoVersion() {\n+\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\t\t\n+\t\t// Call translate with no ConceptMap version.\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\n+\t\t// Should return v2 since v2 is the most recently updated version.\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"13333\", coding.getCode());\n+\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\t}\n+\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_NoVersion_null_v1() {\n+\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, null, \"12222\", \"Target Code 12222\"); // first version is null\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\t\t\t\t \t\t\n+\t\t// Call translate with no ConceptMap version.\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\n+\t\t// Should return v2 since v2 is the most recently updated version.\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"13333\", coding.getCode());\n+\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\t}\n+\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_NoVersion_null_v2() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 285}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcxODI1OA==", "bodyText": "Is it actually a requirement to modify CodeSystem.name? It strikes me as unusual that we would be modifying the content of the resource beyond its version and timestamp.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496718258", "createdAt": "2020-09-29T13:31:08Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemTest.java", "diffHunk": "@@ -416,5 +426,25 @@ public void testSubsumesOnCodings_Disjoint() {\n \t\tassertEquals(ConceptSubsumptionOutcome.NOTSUBSUMED.toCode(), ((CodeType) respParam.getParameter().get(0).getValue()).getValue());\n \t}\n \n+\t@Test\n+\tpublic void testUpdateCodeSystemName() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcxODg2Nw==", "bodyText": "Nitpick:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate static final String CS_ACMS_URL = \"http://acme.org\";\n          \n          \n            \n            \tprivate static final String CS_ACME_URL = \"http://acme.org\";", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496718867", "createdAt": "2020-09-29T13:32:01Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java", "diffHunk": "@@ -0,0 +1,560 @@\n+package ca.uhn.fhir.jpa.provider.r4;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.hl7.fhir.r4.model.CodeSystem;\n+import org.hl7.fhir.r4.model.CodeSystem.ConceptDefinitionComponent;\n+import org.hl7.fhir.r4.model.CodeType;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.Parameters;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.hl7.fhir.r4.model.UriType;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.transaction.TransactionStatus;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.transaction.support.TransactionCallbackWithoutResult;\n+import org.springframework.transaction.support.TransactionTemplate;\n+\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+\n+public class ResourceProviderR4CodeSystemValidationTest extends BaseResourceProviderR4Test {\n+\n+\tprivate static final org.slf4j.Logger ourLog = org.slf4j.LoggerFactory.getLogger(ResourceProviderR4CodeSystemValidationTest.class);\n+\n+\tprivate IIdType myCsId;\n+\tprivate static final String CS_ACMS_URL = \"http://acme.org\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyMjIxNg==", "bodyText": "It looks like all of the tests in this class are related to the CodeSystem$validate-code operation, and not the validation of a CodeSystem itself. Consider renaming.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496722216", "createdAt": "2020-09-29T13:36:22Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java", "diffHunk": "@@ -0,0 +1,560 @@\n+package ca.uhn.fhir.jpa.provider.r4;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.hl7.fhir.r4.model.CodeSystem;\n+import org.hl7.fhir.r4.model.CodeSystem.ConceptDefinitionComponent;\n+import org.hl7.fhir.r4.model.CodeType;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.Parameters;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.hl7.fhir.r4.model.UriType;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.transaction.TransactionStatus;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.transaction.support.TransactionCallbackWithoutResult;\n+import org.springframework.transaction.support.TransactionTemplate;\n+\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+\n+public class ResourceProviderR4CodeSystemValidationTest extends BaseResourceProviderR4Test {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyNjM2MA==", "bodyText": "I'm curious: why did you chose to create ResourceProviderR4CodeSystemValidationTest and ResourceProviderR4CodeSystemVersionedTest instead of simply adding your tests to ResourceProviderR4CodeSystemTest?\nWith CodeSystem tests spread across multiple classes, discoverability is reduced. It also increases the likelihood that some tests might not be updated in light of future modifications. This goes for the multiple ValueSet and ConceptMap test classes as well; however, I won't call it out again. : )", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496726360", "createdAt": "2020-09-29T13:41:38Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java", "diffHunk": "@@ -0,0 +1,560 @@\n+package ca.uhn.fhir.jpa.provider.r4;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.hl7.fhir.r4.model.CodeSystem;\n+import org.hl7.fhir.r4.model.CodeSystem.ConceptDefinitionComponent;\n+import org.hl7.fhir.r4.model.CodeType;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.Parameters;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.hl7.fhir.r4.model.UriType;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.transaction.TransactionStatus;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.transaction.support.TransactionCallbackWithoutResult;\n+import org.springframework.transaction.support.TransactionTemplate;\n+\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+\n+public class ResourceProviderR4CodeSystemValidationTest extends BaseResourceProviderR4Test {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyODg2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testTranslateWithConcaptMapUrlAndVersion() {\n          \n          \n            \n            \tpublic void testTranslateWithConceptMapUrlAndVersion() {", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496728861", "createdAt": "2020-09-29T13:44:41Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4ConceptMapTest.java", "diffHunk": "@@ -870,6 +885,90 @@ public void testTranslateUsingPredicatesWithTargetValueSet() {\n \t\tassertEquals(CM_URL, ((UriType) part.getValue()).getValueAsString());\n \t}\n \n+\t@Test\n+\tpublic void testTranslateWithConcaptMapUrlAndVersion() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjczMDE0NA==", "bodyText": "Please do a search and replace for all instances of \"concapt\". Should be \"concept\". : )", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496730144", "createdAt": "2020-09-29T13:46:16Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4ConceptMapTest.java", "diffHunk": "@@ -1621,6 +1720,89 @@ public void testTranslateWithReverseUsingPredicatesWithTargetValueSet() {\n \t\tassertEquals(CM_URL, ((UriType) part.getValue()).getValueAsString());\n \t}\n \n+\t@Test\n+\tpublic void testTranslateWithReverseConcaptMapUrlAndVersion() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc0ODA4Nw==", "bodyText": "What is the difference between this class and TerminologyLoaderSvcLoincTest? Are these integration tests?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496748087", "createdAt": "2020-09-29T14:08:37Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/term/TerminologyLoaderSvcLoincIntegratedTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package ca.uhn.fhir.jpa.term;\n+\n+import ca.uhn.fhir.jpa.dao.r4.BaseJpaR4Test;\n+import ca.uhn.fhir.jpa.entity.TermCodeSystem;\n+import ca.uhn.fhir.jpa.entity.TermCodeSystemVersion;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.hl7.fhir.r4.model.CodeSystem;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class TerminologyLoaderSvcLoincIntegratedTest extends BaseJpaR4Test {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1MDEyNg==", "bodyText": "These are not integration tests. I'm not sure why they're in their own class.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496750126", "createdAt": "2020-09-29T14:11:15Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/term/TerminologyLoaderSvcLoincIntegratedTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package ca.uhn.fhir.jpa.term;\n+\n+import ca.uhn.fhir.jpa.dao.r4.BaseJpaR4Test;\n+import ca.uhn.fhir.jpa.entity.TermCodeSystem;\n+import ca.uhn.fhir.jpa.entity.TermCodeSystemVersion;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.hl7.fhir.r4.model.CodeSystem;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class TerminologyLoaderSvcLoincIntegratedTest extends BaseJpaR4Test {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc0ODA4Nw=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1MTQ2OA==", "bodyText": "FWIW, we usually add tests for new functionality to the tests for the latest version of FHIR, and only update older versions as necessary. It's nice to have all of the additional tests though. :D", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496751468", "createdAt": "2020-09-29T14:13:00Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r5/ResourceProviderR5CodeSystemTest.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package ca.uhn.fhir.jpa.provider.r5;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import ca.uhn.fhir.jpa.api.model.DaoMethodOutcome;\n+import ca.uhn.fhir.jpa.model.entity.ResourceTable;\n+import ca.uhn.fhir.jpa.model.util.JpaConstants;\n+import org.hl7.fhir.r4.model.codesystems.ConceptSubsumptionOutcome;\n+import org.hl7.fhir.r5.model.Enumerations;\n+import org.hl7.fhir.r5.model.Coding;\n+import org.hl7.fhir.r5.model.BooleanType;\n+import org.hl7.fhir.r5.model.CodeSystem;\n+import org.hl7.fhir.r5.model.CodeSystem.ConceptDefinitionComponent;\n+import org.hl7.fhir.r5.model.CodeType;\n+import org.hl7.fhir.r5.model.Parameters;\n+import org.hl7.fhir.r5.model.StringType;\n+import org.hl7.fhir.r5.model.UriType;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.io.IOException;\n+\n+public class ResourceProviderR5CodeSystemTest extends BaseResourceProviderR5Test {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1NTYwNg==", "bodyText": "Again, this should probably be mandatory.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496755606", "createdAt": "2020-09-29T14:17:59Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/resources/loinc/v267_loincupload.properties", "diffHunk": "@@ -0,0 +1,87 @@\n+#################\n+### MANDATORY ###\n+#################\n+\n+# Answer lists (ValueSets of potential answers/values for LOINC \"questions\")\n+## File must be present\n+loinc.answerlist.file=AccessoryFiles/AnswerFile/AnswerList.csv\n+# Answer list links (connects LOINC observation codes to answer list codes)\n+## File must be present\n+loinc.answerlist.link.file=AccessoryFiles/AnswerFile/LoincAnswerListLink.csv\n+\n+# Document ontology\n+## File must be present\n+loinc.document.ontology.file=AccessoryFiles/DocumentOntology/DocumentOntology.csv\n+\n+# LOINC codes\n+## File must be present\n+loinc.file=LoincTable/Loinc.csv\n+\n+# LOINC hierarchy\n+## File must be present\n+loinc.hierarchy.file=AccessoryFiles/MultiAxialHierarchy/MultiAxialHierarchy.csv\n+\n+# IEEE medical device codes\n+## File must be present\n+loinc.ieee.medical.device.code.mapping.table.file=AccessoryFiles/LoincIeeeMedicalDeviceCodeMappingTable/LoincIeeeMedicalDeviceCodeMappingTable.csv\n+\n+# Imaging document codes\n+## File must be present\n+loinc.imaging.document.codes.file=AccessoryFiles/ImagingDocuments/ImagingDocumentCodes.csv\n+\n+# Part\n+## File must be present\n+loinc.part.file=AccessoryFiles/PartFile/Part.csv\n+\n+# Part link\n+## File must be present\n+loinc.part.link.primary.file=AccessoryFiles/PartFile/LoincPartLink_Primary.csv\n+loinc.part.link.supplementary.file=AccessoryFiles/PartFile/LoincPartLink_Supplementary.csv\n+\n+# Part related code mapping\n+## File must be present\n+loinc.part.related.code.mapping.file=AccessoryFiles/PartFile/PartRelatedCodeMapping.csv\n+\n+# RSNA playbook\n+## File must be present\n+loinc.rsna.playbook.file=AccessoryFiles/LoincRsnaRadiologyPlaybook/LoincRsnaRadiologyPlaybook.csv\n+\n+# Top 2000 codes - SI\n+## File must be present\n+loinc.top2000.common.lab.results.si.file=AccessoryFiles/Top2000Results/SI/Top2000CommonLabResultsSi.csv\n+# Top 2000 codes - US\n+## File must be present\n+loinc.top2000.common.lab.results.us.file=AccessoryFiles/Top2000Results/US/Top2000CommonLabResultsUs.csv\n+\n+# Universal lab order ValueSet\n+## File must be present\n+loinc.universal.lab.order.valueset.file=AccessoryFiles/LoincUniversalLabOrdersValueSet/LoincUniversalLabOrdersValueSet.csv\n+\n+################\n+### OPTIONAL ###\n+################\n+\n+# This is the version identifier for the LOINC code system\n+## Key may be omitted if only a single version of LOINC is being kept.\n+loinc.codesystem.version=2.67", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1NjE2Nw==", "bodyText": "Worth investigating: will this version and the LOINC version above ever actually be different? Same goes for the loinc.conceptmap.version below.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496756167", "createdAt": "2020-09-29T14:18:42Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/resources/loinc/v267_loincupload.properties", "diffHunk": "@@ -0,0 +1,87 @@\n+#################\n+### MANDATORY ###\n+#################\n+\n+# Answer lists (ValueSets of potential answers/values for LOINC \"questions\")\n+## File must be present\n+loinc.answerlist.file=AccessoryFiles/AnswerFile/AnswerList.csv\n+# Answer list links (connects LOINC observation codes to answer list codes)\n+## File must be present\n+loinc.answerlist.link.file=AccessoryFiles/AnswerFile/LoincAnswerListLink.csv\n+\n+# Document ontology\n+## File must be present\n+loinc.document.ontology.file=AccessoryFiles/DocumentOntology/DocumentOntology.csv\n+\n+# LOINC codes\n+## File must be present\n+loinc.file=LoincTable/Loinc.csv\n+\n+# LOINC hierarchy\n+## File must be present\n+loinc.hierarchy.file=AccessoryFiles/MultiAxialHierarchy/MultiAxialHierarchy.csv\n+\n+# IEEE medical device codes\n+## File must be present\n+loinc.ieee.medical.device.code.mapping.table.file=AccessoryFiles/LoincIeeeMedicalDeviceCodeMappingTable/LoincIeeeMedicalDeviceCodeMappingTable.csv\n+\n+# Imaging document codes\n+## File must be present\n+loinc.imaging.document.codes.file=AccessoryFiles/ImagingDocuments/ImagingDocumentCodes.csv\n+\n+# Part\n+## File must be present\n+loinc.part.file=AccessoryFiles/PartFile/Part.csv\n+\n+# Part link\n+## File must be present\n+loinc.part.link.primary.file=AccessoryFiles/PartFile/LoincPartLink_Primary.csv\n+loinc.part.link.supplementary.file=AccessoryFiles/PartFile/LoincPartLink_Supplementary.csv\n+\n+# Part related code mapping\n+## File must be present\n+loinc.part.related.code.mapping.file=AccessoryFiles/PartFile/PartRelatedCodeMapping.csv\n+\n+# RSNA playbook\n+## File must be present\n+loinc.rsna.playbook.file=AccessoryFiles/LoincRsnaRadiologyPlaybook/LoincRsnaRadiologyPlaybook.csv\n+\n+# Top 2000 codes - SI\n+## File must be present\n+loinc.top2000.common.lab.results.si.file=AccessoryFiles/Top2000Results/SI/Top2000CommonLabResultsSi.csv\n+# Top 2000 codes - US\n+## File must be present\n+loinc.top2000.common.lab.results.us.file=AccessoryFiles/Top2000Results/US/Top2000CommonLabResultsUs.csv\n+\n+# Universal lab order ValueSet\n+## File must be present\n+loinc.universal.lab.order.valueset.file=AccessoryFiles/LoincUniversalLabOrdersValueSet/LoincUniversalLabOrdersValueSet.csv\n+\n+################\n+### OPTIONAL ###\n+################\n+\n+# This is the version identifier for the LOINC code system\n+## Key may be omitted if only a single version of LOINC is being kept.\n+loinc.codesystem.version=2.67\n+\n+# This is the version identifier for the answer list file\n+## Key may be omitted\n+loinc.answerlist.version=Beta.1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1Njg0OQ==", "bodyText": "This is in the mandatory section but the comment indicates it is optional.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496756849", "createdAt": "2020-09-29T14:19:29Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/resources/loinc/v268_loincupload.properties", "diffHunk": "@@ -0,0 +1,87 @@\n+#################\n+### MANDATORY ###\n+#################\n+\n+# This is the version identifier for the LOINC code system\n+## Key may be omitted if only a single version of LOINC is being kept.\n+loinc.codesystem.version=2.68", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1OTEzMQ==", "bodyText": "Is there a potential issue with migration when reusing an index name?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496759131", "createdAt": "2020-09-29T14:22:13Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-migrate/src/main/java/ca/uhn/fhir/jpa/migrate/tasks/HapiFhirJpaMigrationTasks.java", "diffHunk": "@@ -141,6 +143,20 @@ protected void init510() {\n \n \t\t//EMPI Target Type\n \t\tempiLink.addColumn(\"20200727.1\",\"TARGET_TYPE\").nullable().type(ColumnTypeEnum.STRING, EmpiLink.TARGET_TYPE_LENGTH);\n+\n+\t\t//ConceptMap add version for search\n+\t\tBuilder.BuilderWithTableName trmConceptMap = version.onTable(\"TRM_CONCEPT_MAP\");\n+\t\ttrmConceptMap.addColumn(\"20200910.1\", \"VER\").nullable().type(ColumnTypeEnum.STRING, TermConceptMap.MAX_VER_LENGTH);\n+\t\ttrmConceptMap.dropIndex(\"20200910.2\", \"IDX_CONCEPT_MAP_URL\");\n+\t\ttrmConceptMap.addIndex(\"20200910.3\", \"IDX_CONCEPT_MAP_URL\").unique(true).withColumns(\"URL\", \"VER\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1OTM1OQ==", "bodyText": "Same. Duplicate index name?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496759359", "createdAt": "2020-09-29T14:22:30Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-migrate/src/main/java/ca/uhn/fhir/jpa/migrate/tasks/HapiFhirJpaMigrationTasks.java", "diffHunk": "@@ -141,6 +143,20 @@ protected void init510() {\n \n \t\t//EMPI Target Type\n \t\tempiLink.addColumn(\"20200727.1\",\"TARGET_TYPE\").nullable().type(ColumnTypeEnum.STRING, EmpiLink.TARGET_TYPE_LENGTH);\n+\n+\t\t//ConceptMap add version for search\n+\t\tBuilder.BuilderWithTableName trmConceptMap = version.onTable(\"TRM_CONCEPT_MAP\");\n+\t\ttrmConceptMap.addColumn(\"20200910.1\", \"VER\").nullable().type(ColumnTypeEnum.STRING, TermConceptMap.MAX_VER_LENGTH);\n+\t\ttrmConceptMap.dropIndex(\"20200910.2\", \"IDX_CONCEPT_MAP_URL\");\n+\t\ttrmConceptMap.addIndex(\"20200910.3\", \"IDX_CONCEPT_MAP_URL\").unique(true).withColumns(\"URL\", \"VER\");\n+\n+\t\t//Term CodeSystem Version and Term ValueSet Version\n+\t\tBuilder.BuilderWithTableName trmCodeSystemVer = version.onTable(\"TRM_CODESYSTEM_VER\");\n+\t\ttrmCodeSystemVer.addIndex(\"20200923.1\", \"IDX_CODESYSTEM_AND_VER\").unique(true).withColumns(\"CODESYSTEM_PID\", \"CS_VERSION_ID\");\n+\t\tBuilder.BuilderWithTableName trmValueSet = version.onTable(\"TRM_VALUESET\");\n+\t\ttrmValueSet.addColumn(\"20200923.2\", \"VER\").nullable().type(ColumnTypeEnum.STRING, TermValueSet.MAX_VER_LENGTH);\n+\t\ttrmValueSet.dropIndex(\"20200923.3\", \"IDX_VALUESET_URL\");\n+\t\ttrmValueSet.addIndex(\"20200923.4\", \"IDX_VALUESET_URL\").unique(true).withColumns(\"URL\", \"VER\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc2MTUyNg==", "bodyText": "Neat. Codecov includes a warning right in the diff! I guess you need to add some tests.\nCheck warning on line 338 in hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/CommonCodeSystemsTerminologyService.java\nCodecov\n/ codecov/patch\nhapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/CommonCodeSystemsTerminologyService.java#L337-L338\nAdded lines #L337 - L338 were not covered by tests", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496761526", "createdAt": "2020-09-29T14:25:10Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/CommonCodeSystemsTerminologyService.java", "diffHunk": "@@ -326,6 +326,48 @@ public static String getValueSetUrl(@Nonnull IBaseResource theValueSet) {\n \t\treturn url;\n \t}\n \n+\tpublic static String getCodeSystemUrl(@Nonnull IBaseResource theCodeSystem) {\n+\t\tString url;\n+\t\tswitch (theCodeSystem.getStructureFhirVersionEnum()) {\n+\t\t\tcase R4: {\n+\t\t\t\turl = ((org.hl7.fhir.r4.model.CodeSystem) theCodeSystem).getUrl();\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tcase R5: {\n+\t\t\t\turl = ((org.hl7.fhir.r5.model.CodeSystem) theCodeSystem).getUrl();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc2MzE5OQ==", "bodyText": "theWantSystemIdentifier is the system and version? Not an actual identifier in the context of a resource. Consider a more appropriate name.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496763199", "createdAt": "2020-09-29T14:27:10Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/InMemoryTerminologyServerValidationSupport.java", "diffHunk": "@@ -91,23 +91,23 @@ public ValueSetExpansionOutcome expandValueSet(ValidationSupportContext theValid\n \t\treturn new ValueSetExpansionOutcome(expansion, null);\n \t}\n \n-\tprivate org.hl7.fhir.r5.model.ValueSet expandValueSetToCanonical(ValidationSupportContext theValidationSupportContext, IBaseResource theValueSetToExpand, @Nullable String theWantSystem, @Nullable String theWantCode) {\n+\tprivate org.hl7.fhir.r5.model.ValueSet expandValueSetToCanonical(ValidationSupportContext theValidationSupportContext, IBaseResource theValueSetToExpand, @Nullable String theWantSystemIdentifier, @Nullable String theWantCode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc2MzU3OA==", "bodyText": "There are more Codecov warnings in this class.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496763578", "createdAt": "2020-09-29T14:27:37Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/InMemoryTerminologyServerValidationSupport.java", "diffHunk": "@@ -145,26 +142,59 @@ public CodeValidationResult validateCode(ValidationSupportContext theValidationS\n \t\t\t\treturn null;\n \t\t\t}\n \t\t} else {\n+\t\t\tString codeSystemUrl;\n+\t\t\tString codeSystemVersion = null;\n+\t\t\tint codeSystemVersionIndex = theCodeSystem.indexOf(\"|\");\n+\t\t\tif (codeSystemVersionIndex > -1) {\n+\t\t\t\tcodeSystemUrl = theCodeSystem.substring(0, codeSystemVersionIndex);\n+\t\t\t\tcodeSystemVersion = theCodeSystem.substring(codeSystemVersionIndex + 1);\n+\t\t\t} else {\n+\t\t\t\tcodeSystemUrl = theCodeSystem;\n+\t\t\t}\n \t\t\tswitch (myCtx.getVersion().getVersion()) {\n \t\t\t\tcase DSTU2_HL7ORG:\n-\t\t\t\t\tvs = new org.hl7.fhir.dstu2.model.ValueSet()\n-\t\t\t\t\t\t.setCompose(new org.hl7.fhir.dstu2.model.ValueSet.ValueSetComposeComponent()\n-\t\t\t\t\t\t\t.addInclude(new org.hl7.fhir.dstu2.model.ValueSet.ConceptSetComponent().setSystem(theCodeSystem)));\n+\t\t\t\t\tif (codeSystemVersion != null) {\n+\t\t\t\t\t\tvs = new org.hl7.fhir.dstu2.model.ValueSet()\n+\t\t\t\t\t\t\t.setCompose(new org.hl7.fhir.dstu2.model.ValueSet.ValueSetComposeComponent()\n+\t\t\t\t\t\t\t\t.addInclude(new org.hl7.fhir.dstu2.model.ValueSet.ConceptSetComponent().setSystem(codeSystemUrl).setVersion(codeSystemVersion)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26688aac65204fcdbe41b3ebfa1f3c771cf20e6c", "author": {"user": {"login": "IanMMarshall", "name": null}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/26688aac65204fcdbe41b3ebfa1f3c771cf20e6c", "committedDate": "2020-09-29T16:11:56Z", "message": "Update hapi-fhir-base/src/main/resources/ca/uhn/fhir/i18n/hapi-messages.properties\n\nCo-authored-by: Diederik Muylwyk <diederik.muylwyk@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10620a8bb46ffc081aea3214772bc51faa17defd", "author": {"user": {"login": "IanMMarshall", "name": null}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/10620a8bb46ffc081aea3214772bc51faa17defd", "committedDate": "2020-09-29T18:16:13Z", "message": "Update hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/provider/dstu3/BaseJpaResourceProviderCodeSystemDstu3.java\n\nCo-authored-by: Diederik Muylwyk <diederik.muylwyk@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ebb3fa0ca1e0be3d9d7555b88c0c1bfa5c0bce3b", "author": {"user": {"login": "IanMMarshall", "name": null}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/ebb3fa0ca1e0be3d9d7555b88c0c1bfa5c0bce3b", "committedDate": "2020-09-29T18:16:56Z", "message": "Update hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoDstu3ConceptMapTest.java\n\nCo-authored-by: Diederik Muylwyk <diederik.muylwyk@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6aa1a5ec3fcbcc9851b27c66a70868b13015440c", "author": {"user": {"login": "IanMMarshall", "name": null}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/6aa1a5ec3fcbcc9851b27c66a70868b13015440c", "committedDate": "2020-09-29T18:17:19Z", "message": "Update hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoDstu3ConceptMapTest.java\n\nCo-authored-by: Diederik Muylwyk <diederik.muylwyk@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3940e7526fb6fc2e2087ae91a334fb9c6430e029", "author": {"user": {"login": "IanMMarshall", "name": null}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/3940e7526fb6fc2e2087ae91a334fb9c6430e029", "committedDate": "2020-09-29T18:17:36Z", "message": "Update hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4ConceptMapTest.java\n\nCo-authored-by: Diederik Muylwyk <diederik.muylwyk@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8531e599f99f48f6a400029cb92f7808e8dcc82", "author": {"user": {"login": "IanMMarshall", "name": null}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/b8531e599f99f48f6a400029cb92f7808e8dcc82", "committedDate": "2020-09-29T18:18:00Z", "message": "Update hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4ConceptMapTest.java\n\nCo-authored-by: Diederik Muylwyk <diederik.muylwyk@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2be47b5567b373061a601942b516de5220a2aedf", "author": {"user": {"login": "IanMMarshall", "name": null}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/2be47b5567b373061a601942b516de5220a2aedf", "committedDate": "2020-09-29T18:18:21Z", "message": "Update hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4ConceptMapTest.java\n\nCo-authored-by: Diederik Muylwyk <diederik.muylwyk@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43b6bd38ff456fe0119cb4346d5f19426ca5f0cb", "author": {"user": {"login": "IanMMarshall", "name": null}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/43b6bd38ff456fe0119cb4346d5f19426ca5f0cb", "committedDate": "2020-09-29T18:26:30Z", "message": "Update hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java\n\nCo-authored-by: Diederik Muylwyk <diederik.muylwyk@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43c16e17372e9abd34238cb59313c6a9a97aa56a", "author": {"user": {"login": "IanMMarshall", "name": null}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/43c16e17372e9abd34238cb59313c6a9a97aa56a", "committedDate": "2020-09-29T18:27:03Z", "message": "Update hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java\n\nCo-authored-by: Diederik Muylwyk <diederik.muylwyk@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d63c15ef096b7401ae9422f278f33ca5d0a2c438", "author": {"user": {"login": "IanMMarshall", "name": null}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/d63c15ef096b7401ae9422f278f33ca5d0a2c438", "committedDate": "2020-09-29T18:27:57Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Diederik Muylwyk <diederik.muylwyk@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c593958d2c45b16ed7328eed815ab71c99f6269b", "author": {"user": {"login": "IanMMarshall", "name": null}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/c593958d2c45b16ed7328eed815ab71c99f6269b", "committedDate": "2020-09-29T19:16:46Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Diederik Muylwyk <diederik.muylwyk@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e7b4e8437bb7f09b3cd14f57f3d9cb5231e61b8", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/8e7b4e8437bb7f09b3cd14f57f3d9cb5231e61b8", "committedDate": "2020-09-30T01:05:28Z", "message": "Changes per code review."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc3443665cebadb957d29caa0a7c8ea9a26bc9f3", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/dc3443665cebadb957d29caa0a7c8ea9a26bc9f3", "committedDate": "2020-09-30T01:12:27Z", "message": "Changes per code review."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5NTczMTU2", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#pullrequestreview-499573156", "createdAt": "2020-09-30T15:47:08Z", "commit": {"oid": "dc3443665cebadb957d29caa0a7c8ea9a26bc9f3"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNTo0NzowOFrOHakEKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNTo0NzowOFrOHakEKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYxNTkxNA==", "bodyText": "You changed some but not all of theWantSystemIdentifier to theWantSystemUrlAndVersion. Quick search across the project found 19 instances of theWantSystemIdentifier remaining.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497615914", "createdAt": "2020-09-30T15:47:08Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/InMemoryTerminologyServerValidationSupport.java", "diffHunk": "@@ -314,7 +349,7 @@ public LookupCodeResult lookupCode(ValidationSupportContext theValidationSupport\n \t}\n \n \t@Nullable\n-\tprivate org.hl7.fhir.r5.model.ValueSet expandValueSetDstu2Hl7Org(ValidationSupportContext theValidationSupportContext, ValueSet theInput, @Nullable String theWantSystem, @Nullable String theWantCode) {\n+\tprivate org.hl7.fhir.r5.model.ValueSet expandValueSetDstu2Hl7Org(ValidationSupportContext theValidationSupportContext, ValueSet theInput, @Nullable String theWantSystemIdentifier, @Nullable String theWantCode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc3443665cebadb957d29caa0a7c8ea9a26bc9f3"}, "originalPosition": 275}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90f198181744253e1231e27c0c54f1a17132c882", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/90f198181744253e1231e27c0c54f1a17132c882", "committedDate": "2020-09-30T22:10:57Z", "message": "Updated tests for missed dstu2 code coverage."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7899837fe0313a8601d1ee387a2025d52a859a6c", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/7899837fe0313a8601d1ee387a2025d52a859a6c", "committedDate": "2020-10-01T02:04:08Z", "message": "Replaced references to SystemIdentifier with SystemUrlAndVersion."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3857, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}