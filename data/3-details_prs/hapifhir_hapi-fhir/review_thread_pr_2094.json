{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5ODEzMTM2", "number": 2094, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMjo0MDozM1rOEmEFVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzowOToyN1rOEmlpvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzQ4MjQ1OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/FhirResourceDaoValueSetDstu2.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMjo0MDozM1rOHV4Bbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDowOToxMFrOHWQf8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjcwMDAxNA==", "bodyText": "Minor suggestion: Create a unit test to validate that an exception is thrown for this method just to ensure that this does not bring down our test coverage statistics.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2094#discussion_r492700014", "createdAt": "2020-09-22T12:40:33Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/FhirResourceDaoValueSetDstu2.java", "diffHunk": "@@ -312,4 +314,10 @@ public static String toStringOrNull(IPrimitiveType<String> thePrimitive) {\n \t\treturn myTerminologySvc.validateCode(vsValidateCodeOptions(), theId, toStringOrNull(theValueSetIdentifier), toStringOrNull(theSystem), toStringOrNull(theCode), toStringOrNull(theDisplay), theCoding, theCodeableConcept);\n \t}\n \n+\t@Override\n+\tpublic CodeValidationResult validateCode(IIdType theCodeSystemId, IPrimitiveType<String> theCodeSystemUrl, IPrimitiveType<String> theVersion, IPrimitiveType<String> theCode, \n+\t\t\tIPrimitiveType<String> theDisplay, CodingDt theCoding, CodeableConceptDt theCodeableConcept, RequestDetails theRequestDetails) {\n+\t\tthrow new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f692a4776001ffce2b2ac2779bf106fd4f90775"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwMTA0Mw==", "bodyText": "For dust2, CodeSystem Resource does not exists. Can't create test case.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2094#discussion_r493101043", "createdAt": "2020-09-23T00:09:10Z", "author": {"login": "frankjtao"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/FhirResourceDaoValueSetDstu2.java", "diffHunk": "@@ -312,4 +314,10 @@ public static String toStringOrNull(IPrimitiveType<String> thePrimitive) {\n \t\treturn myTerminologySvc.validateCode(vsValidateCodeOptions(), theId, toStringOrNull(theValueSetIdentifier), toStringOrNull(theSystem), toStringOrNull(theCode), toStringOrNull(theDisplay), theCoding, theCodeableConcept);\n \t}\n \n+\t@Override\n+\tpublic CodeValidationResult validateCode(IIdType theCodeSystemId, IPrimitiveType<String> theCodeSystemUrl, IPrimitiveType<String> theVersion, IPrimitiveType<String> theCode, \n+\t\t\tIPrimitiveType<String> theDisplay, CodingDt theCoding, CodeableConceptDt theCodeableConcept, RequestDetails theRequestDetails) {\n+\t\tthrow new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjcwMDAxNA=="}, "originalCommit": {"oid": "8f692a4776001ffce2b2ac2779bf106fd4f90775"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzQ4MzM2OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoCodeSystemDstu3.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMjo0MDo0NVrOHV4B9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDoxODoyOVrOHWQqCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjcwMDE1MA==", "bodyText": "Minor suggestion: Create a unit test to validate that an exception is thrown for this method just to ensure that this does not bring down our test coverage statistics.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2094#discussion_r492700150", "createdAt": "2020-09-22T12:40:45Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoCodeSystemDstu3.java", "diffHunk": "@@ -169,4 +172,10 @@ public ResourceTable updateEntity(RequestDetails theRequest, IBaseResource theRe\n \t\treturn retVal;\n \t}\n \n+\t@Override\n+\tpublic CodeValidationResult validateCode(IIdType theCodeSystemId, IPrimitiveType<String> theCodeSystemUrl, IPrimitiveType<String> theVersion, IPrimitiveType<String> theCode, \n+\t\t\tIPrimitiveType<String> theDisplay, Coding theCoding, CodeableConcept theCodeableConcept, RequestDetails theRequestDetails) {\t\n+\t\tthrow new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f692a4776001ffce2b2ac2779bf106fd4f90775"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwMzYyNA==", "bodyText": "New test case added", "url": "https://github.com/hapifhir/hapi-fhir/pull/2094#discussion_r493103624", "createdAt": "2020-09-23T00:18:29Z", "author": {"login": "frankjtao"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoCodeSystemDstu3.java", "diffHunk": "@@ -169,4 +172,10 @@ public ResourceTable updateEntity(RequestDetails theRequest, IBaseResource theRe\n \t\treturn retVal;\n \t}\n \n+\t@Override\n+\tpublic CodeValidationResult validateCode(IIdType theCodeSystemId, IPrimitiveType<String> theCodeSystemUrl, IPrimitiveType<String> theVersion, IPrimitiveType<String> theCode, \n+\t\t\tIPrimitiveType<String> theDisplay, Coding theCoding, CodeableConcept theCodeableConcept, RequestDetails theRequestDetails) {\t\n+\t\tthrow new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjcwMDE1MA=="}, "originalCommit": {"oid": "8f692a4776001ffce2b2ac2779bf106fd4f90775"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzQ5NzY1OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoCodeSystemDstu3.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMjo0NDoxNFrOHV4Khw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDoxOTo0OVrOHWQrjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjcwMjM0Mw==", "bodyText": "Maybe consider moving this method to a common dao package-level utility so as to avoid dependency on a version-specific dao class.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2094#discussion_r492702343", "createdAt": "2020-09-22T12:44:14Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoCodeSystemDstu3.java", "diffHunk": "@@ -51,6 +52,8 @@\n import java.util.List;\n import java.util.Set;\n \n+import static ca.uhn.fhir.jpa.dao.FhirResourceDaoValueSetDstu2.toStringOrNull;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f692a4776001ffce2b2ac2779bf106fd4f90775"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwNDAxNA==", "bodyText": "The import is unused, removed", "url": "https://github.com/hapifhir/hapi-fhir/pull/2094#discussion_r493104014", "createdAt": "2020-09-23T00:19:49Z", "author": {"login": "frankjtao"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoCodeSystemDstu3.java", "diffHunk": "@@ -51,6 +52,8 @@\n import java.util.List;\n import java.util.Set;\n \n+import static ca.uhn.fhir.jpa.dao.FhirResourceDaoValueSetDstu2.toStringOrNull;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjcwMjM0Mw=="}, "originalCommit": {"oid": "8f692a4776001ffce2b2ac2779bf106fd4f90775"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzUxOTEwOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoCodeSystemDstu3.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMjo0OToxN1rOHV4Xaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDoyMDo1M1rOHWQssA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjcwNTY0Mw==", "bodyText": "Maybe consider moving this method to a common dao package-level utility so as to avoid dependency on ValueSet class.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2094#discussion_r492705643", "createdAt": "2020-09-22T12:49:17Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoCodeSystemDstu3.java", "diffHunk": "@@ -51,6 +52,8 @@\n import java.util.List;\n import java.util.Set;\n \n+import static ca.uhn.fhir.jpa.dao.FhirResourceDaoValueSetDstu2.toStringOrNull;\n+import static ca.uhn.fhir.jpa.dao.dstu3.FhirResourceDaoValueSetDstu3.vsValidateCodeOptions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f692a4776001ffce2b2ac2779bf106fd4f90775"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwNDMwNA==", "bodyText": "The import is not needed, it's removed from the class", "url": "https://github.com/hapifhir/hapi-fhir/pull/2094#discussion_r493104304", "createdAt": "2020-09-23T00:20:53Z", "author": {"login": "frankjtao"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoCodeSystemDstu3.java", "diffHunk": "@@ -51,6 +52,8 @@\n import java.util.List;\n import java.util.Set;\n \n+import static ca.uhn.fhir.jpa.dao.FhirResourceDaoValueSetDstu2.toStringOrNull;\n+import static ca.uhn.fhir.jpa.dao.dstu3.FhirResourceDaoValueSetDstu3.vsValidateCodeOptions;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjcwNTY0Mw=="}, "originalCommit": {"oid": "8f692a4776001ffce2b2ac2779bf106fd4f90775"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzUyNDEyOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoCodeSystemR4.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMjo1MDozMFrOHV4ahQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMjo1MDozMFrOHV4ahQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjcwNjQzNw==", "bodyText": "See my comments above about moving these two methods to a common dao utility. I think we should avoid dependencies between FHIR versions and between ValueSet and CodeSystem classes.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2094#discussion_r492706437", "createdAt": "2020-09-22T12:50:30Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoCodeSystemR4.java", "diffHunk": "@@ -50,6 +51,8 @@\n import java.util.List;\n import java.util.Set;\n \n+import static ca.uhn.fhir.jpa.dao.FhirResourceDaoValueSetDstu2.toStringOrNull;\n+import static ca.uhn.fhir.jpa.dao.dstu3.FhirResourceDaoValueSetDstu3.vsValidateCodeOptions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f692a4776001ffce2b2ac2779bf106fd4f90775"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzU4NTQxOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/provider/r4/BaseJpaResourceProviderCodeSystemR4.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMzowNDo0MlrOHV4_-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDoyNzoxN1rOHWQzZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjcxNjAyNQ==", "bodyText": "This method maybe could also be moved into a dao package level utility .", "url": "https://github.com/hapifhir/hapi-fhir/pull/2094#discussion_r492716025", "createdAt": "2020-09-22T13:04:42Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/provider/r4/BaseJpaResourceProviderCodeSystemR4.java", "diffHunk": "@@ -23,20 +37,11 @@\n import ca.uhn.fhir.context.support.IValidationSupport;\n import ca.uhn.fhir.jpa.api.dao.IFhirResourceDaoCodeSystem;\n import ca.uhn.fhir.jpa.model.util.JpaConstants;\n+import ca.uhn.fhir.jpa.provider.BaseJpaResourceProviderValueSetDstu2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f692a4776001ffce2b2ac2779bf106fd4f90775"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwNjAyMg==", "bodyText": "This is provider level class, it's already in the ca.uhn.fhir.jpa.provider package.  Please check the package ca.uhn.fhir.jpa.provider . All classes under this package has Dstu2 at the end. I just followed the class name pattern. I don't think we need rename all the classes under this package", "url": "https://github.com/hapifhir/hapi-fhir/pull/2094#discussion_r493106022", "createdAt": "2020-09-23T00:27:17Z", "author": {"login": "frankjtao"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/provider/r4/BaseJpaResourceProviderCodeSystemR4.java", "diffHunk": "@@ -23,20 +37,11 @@\n import ca.uhn.fhir.context.support.IValidationSupport;\n import ca.uhn.fhir.jpa.api.dao.IFhirResourceDaoCodeSystem;\n import ca.uhn.fhir.jpa.model.util.JpaConstants;\n+import ca.uhn.fhir.jpa.provider.BaseJpaResourceProviderValueSetDstu2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjcxNjAyNQ=="}, "originalCommit": {"oid": "8f692a4776001ffce2b2ac2779bf106fd4f90775"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzY4MTI1OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMzoyNTo1OVrOHV57Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDozMTo0NFrOHWQ4BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjczMTE4Mw==", "bodyText": "Should this not create a failure CodeValidationResult instead of throwing an exception? This could be considered a validation failure as opposed to an error in usage of the $validate-code operation like the previous exceptions.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2094#discussion_r492731183", "createdAt": "2020-09-22T13:25:59Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java", "diffHunk": "@@ -2555,5 +2561,120 @@ static boolean isOurLastResultsFromTranslationWithReverseCache() {\n \t\treturn ourLastResultsFromTranslationWithReverseCache;\n \t}\n \n+\t@Override\n+\t@Transactional\n+\tpublic CodeValidationResult codeSystemValidateCode(IIdType theCodeSystemId, String theCodeSystemUrl, String theVersion, String theCode, String theDisplay, IBaseDatatype theCoding, IBaseDatatype theCodeableConcept) {\n+\n+\t\tCodeableConcept codeableConcept = toCanonicalCodeableConcept(theCodeableConcept);\n+\t\tboolean haveCodeableConcept = codeableConcept != null && codeableConcept.getCoding().size() > 0;\n+\n+\t\tCoding coding = toCanonicalCoding(theCoding);\n+\t\tboolean haveCoding = coding != null && coding.isEmpty() == false;\n+\n+\t\tboolean haveCode = theCode != null && theCode.isEmpty() == false;\n+\n+\t\tif (!haveCodeableConcept && !haveCoding && !haveCode) {\n+\t\t\tthrow new InvalidRequestException(\"No code, coding, or codeableConcept provided to validate.\");\n+\t\t}\n+\t\tif (!LogicUtil.multiXor(haveCodeableConcept, haveCoding, haveCode)) {\n+\t\t\tthrow new InvalidRequestException(\"$validate-code can only validate (code) OR (coding) OR (codeableConcept)\");\n+\t\t}\n+\n+\t\tboolean haveIdentifierParam = isNotBlank(theCodeSystemUrl);\n+\t\tString codeSystemUrl;\n+\t\tif (theCodeSystemId != null) {\n+\t\t\tIBaseResource codeSystem = myDaoRegistry.getResourceDao(\"CodeSystem\").read(theCodeSystemId);\n+\t\t\tcodeSystemUrl = CommonCodeSystemsTerminologyService.getCodeSystemUrl(codeSystem);\n+\t\t} else if (haveIdentifierParam) {\n+\t\t\tcodeSystemUrl = theCodeSystemUrl;\n+\t\t} else {\n+\t\t\tthrow new InvalidRequestException(\"Either CodeSystem ID or CodeSystem identifier must be provided. Unable to validate.\");\n+\t\t}\n+\n+\t\t\n+\t\tString code = theCode;\n+\t\tString version = theVersion;\n+\t\tString display = theDisplay;\n+\t\t\n+\t\tif (haveCodeableConcept) {\n+\t\t\tfor (int i = 0; i < codeableConcept.getCoding().size(); i++) {\n+\t\t\t\tCoding nextCoding = codeableConcept.getCoding().get(i);\n+\t\t\t\tif (nextCoding.hasSystem()) {\n+\t\t\t\t\tif (!codeSystemUrl.equalsIgnoreCase(nextCoding.getSystem())) {\n+\t\t\t\t\t\tthrow new InvalidRequestException(\"Coding.system '\" + nextCoding.getSystem() + \"' does not equal with CodeSystem.url '\" + theCodeSystemUrl + \"'. Unable to validate.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f692a4776001ffce2b2ac2779bf106fd4f90775"}, "originalPosition": 242}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwNzIwNA==", "bodyText": "InvalidRequestException and createFailureCodeValidationResult are different. InvalidRequestException is at the request level, and createFailureCodeValidationResult  is at the result level according to the FHIR spec. I followed the code pattern of ValueSet/$validate-code, please review validateCode() method for valueSet at same class of line 1737", "url": "https://github.com/hapifhir/hapi-fhir/pull/2094#discussion_r493107204", "createdAt": "2020-09-23T00:31:44Z", "author": {"login": "frankjtao"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java", "diffHunk": "@@ -2555,5 +2561,120 @@ static boolean isOurLastResultsFromTranslationWithReverseCache() {\n \t\treturn ourLastResultsFromTranslationWithReverseCache;\n \t}\n \n+\t@Override\n+\t@Transactional\n+\tpublic CodeValidationResult codeSystemValidateCode(IIdType theCodeSystemId, String theCodeSystemUrl, String theVersion, String theCode, String theDisplay, IBaseDatatype theCoding, IBaseDatatype theCodeableConcept) {\n+\n+\t\tCodeableConcept codeableConcept = toCanonicalCodeableConcept(theCodeableConcept);\n+\t\tboolean haveCodeableConcept = codeableConcept != null && codeableConcept.getCoding().size() > 0;\n+\n+\t\tCoding coding = toCanonicalCoding(theCoding);\n+\t\tboolean haveCoding = coding != null && coding.isEmpty() == false;\n+\n+\t\tboolean haveCode = theCode != null && theCode.isEmpty() == false;\n+\n+\t\tif (!haveCodeableConcept && !haveCoding && !haveCode) {\n+\t\t\tthrow new InvalidRequestException(\"No code, coding, or codeableConcept provided to validate.\");\n+\t\t}\n+\t\tif (!LogicUtil.multiXor(haveCodeableConcept, haveCoding, haveCode)) {\n+\t\t\tthrow new InvalidRequestException(\"$validate-code can only validate (code) OR (coding) OR (codeableConcept)\");\n+\t\t}\n+\n+\t\tboolean haveIdentifierParam = isNotBlank(theCodeSystemUrl);\n+\t\tString codeSystemUrl;\n+\t\tif (theCodeSystemId != null) {\n+\t\t\tIBaseResource codeSystem = myDaoRegistry.getResourceDao(\"CodeSystem\").read(theCodeSystemId);\n+\t\t\tcodeSystemUrl = CommonCodeSystemsTerminologyService.getCodeSystemUrl(codeSystem);\n+\t\t} else if (haveIdentifierParam) {\n+\t\t\tcodeSystemUrl = theCodeSystemUrl;\n+\t\t} else {\n+\t\t\tthrow new InvalidRequestException(\"Either CodeSystem ID or CodeSystem identifier must be provided. Unable to validate.\");\n+\t\t}\n+\n+\t\t\n+\t\tString code = theCode;\n+\t\tString version = theVersion;\n+\t\tString display = theDisplay;\n+\t\t\n+\t\tif (haveCodeableConcept) {\n+\t\t\tfor (int i = 0; i < codeableConcept.getCoding().size(); i++) {\n+\t\t\t\tCoding nextCoding = codeableConcept.getCoding().get(i);\n+\t\t\t\tif (nextCoding.hasSystem()) {\n+\t\t\t\t\tif (!codeSystemUrl.equalsIgnoreCase(nextCoding.getSystem())) {\n+\t\t\t\t\t\tthrow new InvalidRequestException(\"Coding.system '\" + nextCoding.getSystem() + \"' does not equal with CodeSystem.url '\" + theCodeSystemUrl + \"'. Unable to validate.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjczMTE4Mw=="}, "originalCommit": {"oid": "8f692a4776001ffce2b2ac2779bf106fd4f90775"}, "originalPosition": 242}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzY4ODA3OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMzoyNzoyMFrOHV5_WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDozMTo1OVrOHWQ4XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjczMjI0OQ==", "bodyText": "Once again, I would argue that this could potentially be considered a validation failure rather than a usage error and therefore should result in the creation of a failure CodeValidationResult instead of throwing an exception.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2094#discussion_r492732249", "createdAt": "2020-09-22T13:27:20Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java", "diffHunk": "@@ -2555,5 +2561,120 @@ static boolean isOurLastResultsFromTranslationWithReverseCache() {\n \t\treturn ourLastResultsFromTranslationWithReverseCache;\n \t}\n \n+\t@Override\n+\t@Transactional\n+\tpublic CodeValidationResult codeSystemValidateCode(IIdType theCodeSystemId, String theCodeSystemUrl, String theVersion, String theCode, String theDisplay, IBaseDatatype theCoding, IBaseDatatype theCodeableConcept) {\n+\n+\t\tCodeableConcept codeableConcept = toCanonicalCodeableConcept(theCodeableConcept);\n+\t\tboolean haveCodeableConcept = codeableConcept != null && codeableConcept.getCoding().size() > 0;\n+\n+\t\tCoding coding = toCanonicalCoding(theCoding);\n+\t\tboolean haveCoding = coding != null && coding.isEmpty() == false;\n+\n+\t\tboolean haveCode = theCode != null && theCode.isEmpty() == false;\n+\n+\t\tif (!haveCodeableConcept && !haveCoding && !haveCode) {\n+\t\t\tthrow new InvalidRequestException(\"No code, coding, or codeableConcept provided to validate.\");\n+\t\t}\n+\t\tif (!LogicUtil.multiXor(haveCodeableConcept, haveCoding, haveCode)) {\n+\t\t\tthrow new InvalidRequestException(\"$validate-code can only validate (code) OR (coding) OR (codeableConcept)\");\n+\t\t}\n+\n+\t\tboolean haveIdentifierParam = isNotBlank(theCodeSystemUrl);\n+\t\tString codeSystemUrl;\n+\t\tif (theCodeSystemId != null) {\n+\t\t\tIBaseResource codeSystem = myDaoRegistry.getResourceDao(\"CodeSystem\").read(theCodeSystemId);\n+\t\t\tcodeSystemUrl = CommonCodeSystemsTerminologyService.getCodeSystemUrl(codeSystem);\n+\t\t} else if (haveIdentifierParam) {\n+\t\t\tcodeSystemUrl = theCodeSystemUrl;\n+\t\t} else {\n+\t\t\tthrow new InvalidRequestException(\"Either CodeSystem ID or CodeSystem identifier must be provided. Unable to validate.\");\n+\t\t}\n+\n+\t\t\n+\t\tString code = theCode;\n+\t\tString version = theVersion;\n+\t\tString display = theDisplay;\n+\t\t\n+\t\tif (haveCodeableConcept) {\n+\t\t\tfor (int i = 0; i < codeableConcept.getCoding().size(); i++) {\n+\t\t\t\tCoding nextCoding = codeableConcept.getCoding().get(i);\n+\t\t\t\tif (nextCoding.hasSystem()) {\n+\t\t\t\t\tif (!codeSystemUrl.equalsIgnoreCase(nextCoding.getSystem())) {\n+\t\t\t\t\t\tthrow new InvalidRequestException(\"Coding.system '\" + nextCoding.getSystem() + \"' does not equal with CodeSystem.url '\" + theCodeSystemUrl + \"'. Unable to validate.\");\n+\t\t\t\t\t}\n+\t\t\t\t\tcodeSystemUrl = nextCoding.getSystem();\n+\t\t\t\t}\n+\t\t\t\tcode = nextCoding.getCode();\n+\t\t\t\tdisplay = nextCoding.getDisplay();\n+\t\t\t\tCodeValidationResult nextValidation = codeSystemValidateCode(codeSystemUrl, version, code, display);\n+\t\t\t\tif (nextValidation.isOk() || i == codeableConcept.getCoding().size() - 1) {\n+\t\t\t\t\treturn nextValidation;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else if (haveCoding) {\n+\t\t\tif (coding.hasSystem()) {\n+\t\t\t\tif (!codeSystemUrl.equalsIgnoreCase(coding.getSystem())) {\n+\t\t\t\t\tthrow new InvalidRequestException(\"Coding.system '\" + coding.getSystem() + \"' does not equal with CodeSystem.url '\" + theCodeSystemUrl + \"'. Unable to validate.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f692a4776001ffce2b2ac2779bf106fd4f90775"}, "originalPosition": 256}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwNzI5Mw==", "bodyText": "Same as above", "url": "https://github.com/hapifhir/hapi-fhir/pull/2094#discussion_r493107293", "createdAt": "2020-09-23T00:31:59Z", "author": {"login": "frankjtao"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java", "diffHunk": "@@ -2555,5 +2561,120 @@ static boolean isOurLastResultsFromTranslationWithReverseCache() {\n \t\treturn ourLastResultsFromTranslationWithReverseCache;\n \t}\n \n+\t@Override\n+\t@Transactional\n+\tpublic CodeValidationResult codeSystemValidateCode(IIdType theCodeSystemId, String theCodeSystemUrl, String theVersion, String theCode, String theDisplay, IBaseDatatype theCoding, IBaseDatatype theCodeableConcept) {\n+\n+\t\tCodeableConcept codeableConcept = toCanonicalCodeableConcept(theCodeableConcept);\n+\t\tboolean haveCodeableConcept = codeableConcept != null && codeableConcept.getCoding().size() > 0;\n+\n+\t\tCoding coding = toCanonicalCoding(theCoding);\n+\t\tboolean haveCoding = coding != null && coding.isEmpty() == false;\n+\n+\t\tboolean haveCode = theCode != null && theCode.isEmpty() == false;\n+\n+\t\tif (!haveCodeableConcept && !haveCoding && !haveCode) {\n+\t\t\tthrow new InvalidRequestException(\"No code, coding, or codeableConcept provided to validate.\");\n+\t\t}\n+\t\tif (!LogicUtil.multiXor(haveCodeableConcept, haveCoding, haveCode)) {\n+\t\t\tthrow new InvalidRequestException(\"$validate-code can only validate (code) OR (coding) OR (codeableConcept)\");\n+\t\t}\n+\n+\t\tboolean haveIdentifierParam = isNotBlank(theCodeSystemUrl);\n+\t\tString codeSystemUrl;\n+\t\tif (theCodeSystemId != null) {\n+\t\t\tIBaseResource codeSystem = myDaoRegistry.getResourceDao(\"CodeSystem\").read(theCodeSystemId);\n+\t\t\tcodeSystemUrl = CommonCodeSystemsTerminologyService.getCodeSystemUrl(codeSystem);\n+\t\t} else if (haveIdentifierParam) {\n+\t\t\tcodeSystemUrl = theCodeSystemUrl;\n+\t\t} else {\n+\t\t\tthrow new InvalidRequestException(\"Either CodeSystem ID or CodeSystem identifier must be provided. Unable to validate.\");\n+\t\t}\n+\n+\t\t\n+\t\tString code = theCode;\n+\t\tString version = theVersion;\n+\t\tString display = theDisplay;\n+\t\t\n+\t\tif (haveCodeableConcept) {\n+\t\t\tfor (int i = 0; i < codeableConcept.getCoding().size(); i++) {\n+\t\t\t\tCoding nextCoding = codeableConcept.getCoding().get(i);\n+\t\t\t\tif (nextCoding.hasSystem()) {\n+\t\t\t\t\tif (!codeSystemUrl.equalsIgnoreCase(nextCoding.getSystem())) {\n+\t\t\t\t\t\tthrow new InvalidRequestException(\"Coding.system '\" + nextCoding.getSystem() + \"' does not equal with CodeSystem.url '\" + theCodeSystemUrl + \"'. Unable to validate.\");\n+\t\t\t\t\t}\n+\t\t\t\t\tcodeSystemUrl = nextCoding.getSystem();\n+\t\t\t\t}\n+\t\t\t\tcode = nextCoding.getCode();\n+\t\t\t\tdisplay = nextCoding.getDisplay();\n+\t\t\t\tCodeValidationResult nextValidation = codeSystemValidateCode(codeSystemUrl, version, code, display);\n+\t\t\t\tif (nextValidation.isOk() || i == codeableConcept.getCoding().size() - 1) {\n+\t\t\t\t\treturn nextValidation;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else if (haveCoding) {\n+\t\t\tif (coding.hasSystem()) {\n+\t\t\t\tif (!codeSystemUrl.equalsIgnoreCase(coding.getSystem())) {\n+\t\t\t\t\tthrow new InvalidRequestException(\"Coding.system '\" + coding.getSystem() + \"' does not equal with CodeSystem.url '\" + theCodeSystemUrl + \"'. Unable to validate.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjczMjI0OQ=="}, "originalCommit": {"oid": "8f692a4776001ffce2b2ac2779bf106fd4f90775"}, "originalPosition": 256}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4Mzc1MDg1OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMzo0MDozMFrOHV6lug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDozNjoyMFrOHWQ8zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc0MjA3NA==", "bodyText": "Suggestion: Would include a JUnit fail() statement after this statement, just in case the exception is not thrown as expected.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2094#discussion_r492742074", "createdAt": "2020-09-22T13:40:30Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java", "diffHunk": "@@ -0,0 +1,553 @@\n+package ca.uhn.fhir.jpa.provider.r4;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.hl7.fhir.r4.model.CodeSystem;\n+import org.hl7.fhir.r4.model.CodeSystem.ConceptDefinitionComponent;\n+import org.hl7.fhir.r4.model.CodeType;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.Parameters;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.hl7.fhir.r4.model.UriType;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.transaction.TransactionStatus;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.transaction.support.TransactionCallbackWithoutResult;\n+import org.springframework.transaction.support.TransactionTemplate;\n+\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+\n+public class ResourceProviderR4CodeSystemValidationTest extends BaseResourceProviderR4Test {\n+\n+\tprivate static final org.slf4j.Logger ourLog = org.slf4j.LoggerFactory.getLogger(ResourceProviderR4CodeSystemValidationTest.class);\n+\n+\tprivate IIdType myCsId;\n+\tprivate static final String CS_ACMS_URL = \"http://acme.org\";\n+\n+\t@BeforeEach\n+\t@Transactional\n+\tpublic void before02() throws IOException {\n+\t\tloadAndPersistCodeSystem();\n+\t}\n+\t\n+\tprivate void loadAndPersistCodeSystem() throws IOException {\n+\t\tCodeSystem codeSystem = loadResourceFromClasspath(CodeSystem.class, \"/extensional-case-3-cs.xml\");\n+\t\tcodeSystem.setId(\"CodeSystem/cs\");\n+\t\tpersistCodeSystem(codeSystem);\n+\t}\n+\n+\tprivate void persistCodeSystem(CodeSystem theCodeSystem) {\n+\t\tnew TransactionTemplate(myTxManager).execute(new TransactionCallbackWithoutResult() {\n+\t\t\t@Override\n+\t\t\tprotected void doInTransactionWithoutResult(@Nonnull TransactionStatus theStatus) {\n+\t\t\t\tmyCsId = myCodeSystemDao.create(theCodeSystem, mySrd).getId().toUnqualifiedVersionless();\n+\t\t\t}\n+\t\t});\n+\t\tmyCodeSystemDao.readEntity(myCsId, null).getId();\n+\t}\n+\n+\t@Test\n+\tpublic void testValidateCodeFoundByCode() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeNotFoundByCode() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5-a\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(false, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Unknown code {http://acme.org}8452-5-a\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeMatchDisplay() throws Exception {\n+\t\t\t\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\tinParams.addParameter().setName(\"display\").setValue(new StringType(\"Systolic blood pressure.inspiration - expiration\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeNotMatchDisplay() throws Exception {\n+\t\t\t\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\tinParams.addParameter().setName(\"display\").setValue(new StringType(\"Old Systolic blood pressure.inspiration - expiration\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(false, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Unknown code {http://acme.org}8452-5 - Concept Display : Old Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeWithoutUrl() throws Exception {\n+\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\n+\t\ttry {\n+\t\t\tmyClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f692a4776001ffce2b2ac2779bf106fd4f90775"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwODQyOQ==", "bodyText": "added fail();", "url": "https://github.com/hapifhir/hapi-fhir/pull/2094#discussion_r493108429", "createdAt": "2020-09-23T00:36:20Z", "author": {"login": "frankjtao"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java", "diffHunk": "@@ -0,0 +1,553 @@\n+package ca.uhn.fhir.jpa.provider.r4;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.hl7.fhir.r4.model.CodeSystem;\n+import org.hl7.fhir.r4.model.CodeSystem.ConceptDefinitionComponent;\n+import org.hl7.fhir.r4.model.CodeType;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.Parameters;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.hl7.fhir.r4.model.UriType;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.transaction.TransactionStatus;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.transaction.support.TransactionCallbackWithoutResult;\n+import org.springframework.transaction.support.TransactionTemplate;\n+\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+\n+public class ResourceProviderR4CodeSystemValidationTest extends BaseResourceProviderR4Test {\n+\n+\tprivate static final org.slf4j.Logger ourLog = org.slf4j.LoggerFactory.getLogger(ResourceProviderR4CodeSystemValidationTest.class);\n+\n+\tprivate IIdType myCsId;\n+\tprivate static final String CS_ACMS_URL = \"http://acme.org\";\n+\n+\t@BeforeEach\n+\t@Transactional\n+\tpublic void before02() throws IOException {\n+\t\tloadAndPersistCodeSystem();\n+\t}\n+\t\n+\tprivate void loadAndPersistCodeSystem() throws IOException {\n+\t\tCodeSystem codeSystem = loadResourceFromClasspath(CodeSystem.class, \"/extensional-case-3-cs.xml\");\n+\t\tcodeSystem.setId(\"CodeSystem/cs\");\n+\t\tpersistCodeSystem(codeSystem);\n+\t}\n+\n+\tprivate void persistCodeSystem(CodeSystem theCodeSystem) {\n+\t\tnew TransactionTemplate(myTxManager).execute(new TransactionCallbackWithoutResult() {\n+\t\t\t@Override\n+\t\t\tprotected void doInTransactionWithoutResult(@Nonnull TransactionStatus theStatus) {\n+\t\t\t\tmyCsId = myCodeSystemDao.create(theCodeSystem, mySrd).getId().toUnqualifiedVersionless();\n+\t\t\t}\n+\t\t});\n+\t\tmyCodeSystemDao.readEntity(myCsId, null).getId();\n+\t}\n+\n+\t@Test\n+\tpublic void testValidateCodeFoundByCode() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeNotFoundByCode() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5-a\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(false, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Unknown code {http://acme.org}8452-5-a\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeMatchDisplay() throws Exception {\n+\t\t\t\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\tinParams.addParameter().setName(\"display\").setValue(new StringType(\"Systolic blood pressure.inspiration - expiration\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeNotMatchDisplay() throws Exception {\n+\t\t\t\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\tinParams.addParameter().setName(\"display\").setValue(new StringType(\"Old Systolic blood pressure.inspiration - expiration\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(false, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Unknown code {http://acme.org}8452-5 - Concept Display : Old Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeWithoutUrl() throws Exception {\n+\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\n+\t\ttry {\n+\t\t\tmyClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc0MjA3NA=="}, "originalCommit": {"oid": "8f692a4776001ffce2b2ac2779bf106fd4f90775"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4Mzc1MjIzOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMzo0MDo0NlrOHV6mlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDozNjoyNVrOHWQ85w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc0MjI5Mg==", "bodyText": "Suggestion: Would include a JUnit fail() statement after this statement, just in case the exception is not thrown as expected.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2094#discussion_r492742292", "createdAt": "2020-09-22T13:40:46Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java", "diffHunk": "@@ -0,0 +1,553 @@\n+package ca.uhn.fhir.jpa.provider.r4;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.hl7.fhir.r4.model.CodeSystem;\n+import org.hl7.fhir.r4.model.CodeSystem.ConceptDefinitionComponent;\n+import org.hl7.fhir.r4.model.CodeType;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.Parameters;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.hl7.fhir.r4.model.UriType;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.transaction.TransactionStatus;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.transaction.support.TransactionCallbackWithoutResult;\n+import org.springframework.transaction.support.TransactionTemplate;\n+\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+\n+public class ResourceProviderR4CodeSystemValidationTest extends BaseResourceProviderR4Test {\n+\n+\tprivate static final org.slf4j.Logger ourLog = org.slf4j.LoggerFactory.getLogger(ResourceProviderR4CodeSystemValidationTest.class);\n+\n+\tprivate IIdType myCsId;\n+\tprivate static final String CS_ACMS_URL = \"http://acme.org\";\n+\n+\t@BeforeEach\n+\t@Transactional\n+\tpublic void before02() throws IOException {\n+\t\tloadAndPersistCodeSystem();\n+\t}\n+\t\n+\tprivate void loadAndPersistCodeSystem() throws IOException {\n+\t\tCodeSystem codeSystem = loadResourceFromClasspath(CodeSystem.class, \"/extensional-case-3-cs.xml\");\n+\t\tcodeSystem.setId(\"CodeSystem/cs\");\n+\t\tpersistCodeSystem(codeSystem);\n+\t}\n+\n+\tprivate void persistCodeSystem(CodeSystem theCodeSystem) {\n+\t\tnew TransactionTemplate(myTxManager).execute(new TransactionCallbackWithoutResult() {\n+\t\t\t@Override\n+\t\t\tprotected void doInTransactionWithoutResult(@Nonnull TransactionStatus theStatus) {\n+\t\t\t\tmyCsId = myCodeSystemDao.create(theCodeSystem, mySrd).getId().toUnqualifiedVersionless();\n+\t\t\t}\n+\t\t});\n+\t\tmyCodeSystemDao.readEntity(myCsId, null).getId();\n+\t}\n+\n+\t@Test\n+\tpublic void testValidateCodeFoundByCode() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeNotFoundByCode() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5-a\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(false, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Unknown code {http://acme.org}8452-5-a\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeMatchDisplay() throws Exception {\n+\t\t\t\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\tinParams.addParameter().setName(\"display\").setValue(new StringType(\"Systolic blood pressure.inspiration - expiration\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeNotMatchDisplay() throws Exception {\n+\t\t\t\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\tinParams.addParameter().setName(\"display\").setValue(new StringType(\"Old Systolic blood pressure.inspiration - expiration\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(false, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Unknown code {http://acme.org}8452-5 - Concept Display : Old Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeWithoutUrl() throws Exception {\n+\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\n+\t\ttry {\n+\t\t\tmyClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\t\t} catch (InvalidRequestException e) {\n+\t\t\tassertEquals(\"HTTP 400 Bad Request: Either CodeSystem ID or CodeSystem identifier must be provided. Unable to validate.\",e.getMessage());\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeWithId() throws Exception {\n+\t\t\t\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onInstance(myCsId).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeWithoutCodeOrCodingOrCodeableConcept() throws Exception {\n+\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"display\").setValue(new StringType(\"Systolic blood pressure.inspiration - expiration\"));\n+\n+\t\ttry {\n+\t\t\tmyClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f692a4776001ffce2b2ac2779bf106fd4f90775"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwODQ1NQ==", "bodyText": "added fail();", "url": "https://github.com/hapifhir/hapi-fhir/pull/2094#discussion_r493108455", "createdAt": "2020-09-23T00:36:25Z", "author": {"login": "frankjtao"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java", "diffHunk": "@@ -0,0 +1,553 @@\n+package ca.uhn.fhir.jpa.provider.r4;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.hl7.fhir.r4.model.CodeSystem;\n+import org.hl7.fhir.r4.model.CodeSystem.ConceptDefinitionComponent;\n+import org.hl7.fhir.r4.model.CodeType;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.Parameters;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.hl7.fhir.r4.model.UriType;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.transaction.TransactionStatus;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.transaction.support.TransactionCallbackWithoutResult;\n+import org.springframework.transaction.support.TransactionTemplate;\n+\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+\n+public class ResourceProviderR4CodeSystemValidationTest extends BaseResourceProviderR4Test {\n+\n+\tprivate static final org.slf4j.Logger ourLog = org.slf4j.LoggerFactory.getLogger(ResourceProviderR4CodeSystemValidationTest.class);\n+\n+\tprivate IIdType myCsId;\n+\tprivate static final String CS_ACMS_URL = \"http://acme.org\";\n+\n+\t@BeforeEach\n+\t@Transactional\n+\tpublic void before02() throws IOException {\n+\t\tloadAndPersistCodeSystem();\n+\t}\n+\t\n+\tprivate void loadAndPersistCodeSystem() throws IOException {\n+\t\tCodeSystem codeSystem = loadResourceFromClasspath(CodeSystem.class, \"/extensional-case-3-cs.xml\");\n+\t\tcodeSystem.setId(\"CodeSystem/cs\");\n+\t\tpersistCodeSystem(codeSystem);\n+\t}\n+\n+\tprivate void persistCodeSystem(CodeSystem theCodeSystem) {\n+\t\tnew TransactionTemplate(myTxManager).execute(new TransactionCallbackWithoutResult() {\n+\t\t\t@Override\n+\t\t\tprotected void doInTransactionWithoutResult(@Nonnull TransactionStatus theStatus) {\n+\t\t\t\tmyCsId = myCodeSystemDao.create(theCodeSystem, mySrd).getId().toUnqualifiedVersionless();\n+\t\t\t}\n+\t\t});\n+\t\tmyCodeSystemDao.readEntity(myCsId, null).getId();\n+\t}\n+\n+\t@Test\n+\tpublic void testValidateCodeFoundByCode() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeNotFoundByCode() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5-a\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(false, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Unknown code {http://acme.org}8452-5-a\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeMatchDisplay() throws Exception {\n+\t\t\t\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\tinParams.addParameter().setName(\"display\").setValue(new StringType(\"Systolic blood pressure.inspiration - expiration\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeNotMatchDisplay() throws Exception {\n+\t\t\t\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\tinParams.addParameter().setName(\"display\").setValue(new StringType(\"Old Systolic blood pressure.inspiration - expiration\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(false, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Unknown code {http://acme.org}8452-5 - Concept Display : Old Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeWithoutUrl() throws Exception {\n+\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\n+\t\ttry {\n+\t\t\tmyClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\t\t} catch (InvalidRequestException e) {\n+\t\t\tassertEquals(\"HTTP 400 Bad Request: Either CodeSystem ID or CodeSystem identifier must be provided. Unable to validate.\",e.getMessage());\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeWithId() throws Exception {\n+\t\t\t\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onInstance(myCsId).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeWithoutCodeOrCodingOrCodeableConcept() throws Exception {\n+\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"display\").setValue(new StringType(\"Systolic blood pressure.inspiration - expiration\"));\n+\n+\t\ttry {\n+\t\t\tmyClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc0MjI5Mg=="}, "originalCommit": {"oid": "8f692a4776001ffce2b2ac2779bf106fd4f90775"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4Mzc1Mzg1OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMzo0MTowMlrOHV6nhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDozNjozMFrOHWQ8-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc0MjUzMg==", "bodyText": "Suggestion: Would include a JUnit fail() statement after this statement, just in case the exception is not thrown as expected.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2094#discussion_r492742532", "createdAt": "2020-09-22T13:41:02Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java", "diffHunk": "@@ -0,0 +1,553 @@\n+package ca.uhn.fhir.jpa.provider.r4;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.hl7.fhir.r4.model.CodeSystem;\n+import org.hl7.fhir.r4.model.CodeSystem.ConceptDefinitionComponent;\n+import org.hl7.fhir.r4.model.CodeType;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.Parameters;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.hl7.fhir.r4.model.UriType;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.transaction.TransactionStatus;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.transaction.support.TransactionCallbackWithoutResult;\n+import org.springframework.transaction.support.TransactionTemplate;\n+\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+\n+public class ResourceProviderR4CodeSystemValidationTest extends BaseResourceProviderR4Test {\n+\n+\tprivate static final org.slf4j.Logger ourLog = org.slf4j.LoggerFactory.getLogger(ResourceProviderR4CodeSystemValidationTest.class);\n+\n+\tprivate IIdType myCsId;\n+\tprivate static final String CS_ACMS_URL = \"http://acme.org\";\n+\n+\t@BeforeEach\n+\t@Transactional\n+\tpublic void before02() throws IOException {\n+\t\tloadAndPersistCodeSystem();\n+\t}\n+\t\n+\tprivate void loadAndPersistCodeSystem() throws IOException {\n+\t\tCodeSystem codeSystem = loadResourceFromClasspath(CodeSystem.class, \"/extensional-case-3-cs.xml\");\n+\t\tcodeSystem.setId(\"CodeSystem/cs\");\n+\t\tpersistCodeSystem(codeSystem);\n+\t}\n+\n+\tprivate void persistCodeSystem(CodeSystem theCodeSystem) {\n+\t\tnew TransactionTemplate(myTxManager).execute(new TransactionCallbackWithoutResult() {\n+\t\t\t@Override\n+\t\t\tprotected void doInTransactionWithoutResult(@Nonnull TransactionStatus theStatus) {\n+\t\t\t\tmyCsId = myCodeSystemDao.create(theCodeSystem, mySrd).getId().toUnqualifiedVersionless();\n+\t\t\t}\n+\t\t});\n+\t\tmyCodeSystemDao.readEntity(myCsId, null).getId();\n+\t}\n+\n+\t@Test\n+\tpublic void testValidateCodeFoundByCode() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeNotFoundByCode() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5-a\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(false, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Unknown code {http://acme.org}8452-5-a\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeMatchDisplay() throws Exception {\n+\t\t\t\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\tinParams.addParameter().setName(\"display\").setValue(new StringType(\"Systolic blood pressure.inspiration - expiration\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeNotMatchDisplay() throws Exception {\n+\t\t\t\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\tinParams.addParameter().setName(\"display\").setValue(new StringType(\"Old Systolic blood pressure.inspiration - expiration\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(false, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Unknown code {http://acme.org}8452-5 - Concept Display : Old Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeWithoutUrl() throws Exception {\n+\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\n+\t\ttry {\n+\t\t\tmyClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\t\t} catch (InvalidRequestException e) {\n+\t\t\tassertEquals(\"HTTP 400 Bad Request: Either CodeSystem ID or CodeSystem identifier must be provided. Unable to validate.\",e.getMessage());\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeWithId() throws Exception {\n+\t\t\t\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onInstance(myCsId).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeWithoutCodeOrCodingOrCodeableConcept() throws Exception {\n+\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"display\").setValue(new StringType(\"Systolic blood pressure.inspiration - expiration\"));\n+\n+\t\ttry {\n+\t\t\tmyClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\t\t} catch (InvalidRequestException e) {\n+\t\t\tassertEquals(\"HTTP 400 Bad Request: No code, coding, or codeableConcept provided to validate.\",e.getMessage());\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeWithCodeAndCoding() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\tinParams.addParameter().setName(\"coding\").setValue((new Coding().setCode(\"8452-1\")));\n+\n+\t\ttry {\n+\t\t\tmyClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f692a4776001ffce2b2ac2779bf106fd4f90775"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwODQ3NA==", "bodyText": "added fail();", "url": "https://github.com/hapifhir/hapi-fhir/pull/2094#discussion_r493108474", "createdAt": "2020-09-23T00:36:30Z", "author": {"login": "frankjtao"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java", "diffHunk": "@@ -0,0 +1,553 @@\n+package ca.uhn.fhir.jpa.provider.r4;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.hl7.fhir.r4.model.CodeSystem;\n+import org.hl7.fhir.r4.model.CodeSystem.ConceptDefinitionComponent;\n+import org.hl7.fhir.r4.model.CodeType;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.Parameters;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.hl7.fhir.r4.model.UriType;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.transaction.TransactionStatus;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.transaction.support.TransactionCallbackWithoutResult;\n+import org.springframework.transaction.support.TransactionTemplate;\n+\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+\n+public class ResourceProviderR4CodeSystemValidationTest extends BaseResourceProviderR4Test {\n+\n+\tprivate static final org.slf4j.Logger ourLog = org.slf4j.LoggerFactory.getLogger(ResourceProviderR4CodeSystemValidationTest.class);\n+\n+\tprivate IIdType myCsId;\n+\tprivate static final String CS_ACMS_URL = \"http://acme.org\";\n+\n+\t@BeforeEach\n+\t@Transactional\n+\tpublic void before02() throws IOException {\n+\t\tloadAndPersistCodeSystem();\n+\t}\n+\t\n+\tprivate void loadAndPersistCodeSystem() throws IOException {\n+\t\tCodeSystem codeSystem = loadResourceFromClasspath(CodeSystem.class, \"/extensional-case-3-cs.xml\");\n+\t\tcodeSystem.setId(\"CodeSystem/cs\");\n+\t\tpersistCodeSystem(codeSystem);\n+\t}\n+\n+\tprivate void persistCodeSystem(CodeSystem theCodeSystem) {\n+\t\tnew TransactionTemplate(myTxManager).execute(new TransactionCallbackWithoutResult() {\n+\t\t\t@Override\n+\t\t\tprotected void doInTransactionWithoutResult(@Nonnull TransactionStatus theStatus) {\n+\t\t\t\tmyCsId = myCodeSystemDao.create(theCodeSystem, mySrd).getId().toUnqualifiedVersionless();\n+\t\t\t}\n+\t\t});\n+\t\tmyCodeSystemDao.readEntity(myCsId, null).getId();\n+\t}\n+\n+\t@Test\n+\tpublic void testValidateCodeFoundByCode() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeNotFoundByCode() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5-a\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(false, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Unknown code {http://acme.org}8452-5-a\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeMatchDisplay() throws Exception {\n+\t\t\t\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\tinParams.addParameter().setName(\"display\").setValue(new StringType(\"Systolic blood pressure.inspiration - expiration\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeNotMatchDisplay() throws Exception {\n+\t\t\t\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\tinParams.addParameter().setName(\"display\").setValue(new StringType(\"Old Systolic blood pressure.inspiration - expiration\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(false, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Unknown code {http://acme.org}8452-5 - Concept Display : Old Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeWithoutUrl() throws Exception {\n+\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\n+\t\ttry {\n+\t\t\tmyClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\t\t} catch (InvalidRequestException e) {\n+\t\t\tassertEquals(\"HTTP 400 Bad Request: Either CodeSystem ID or CodeSystem identifier must be provided. Unable to validate.\",e.getMessage());\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeWithId() throws Exception {\n+\t\t\t\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onInstance(myCsId).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeWithoutCodeOrCodingOrCodeableConcept() throws Exception {\n+\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"display\").setValue(new StringType(\"Systolic blood pressure.inspiration - expiration\"));\n+\n+\t\ttry {\n+\t\t\tmyClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\t\t} catch (InvalidRequestException e) {\n+\t\t\tassertEquals(\"HTTP 400 Bad Request: No code, coding, or codeableConcept provided to validate.\",e.getMessage());\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeWithCodeAndCoding() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\tinParams.addParameter().setName(\"coding\").setValue((new Coding().setCode(\"8452-1\")));\n+\n+\t\ttry {\n+\t\t\tmyClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc0MjUzMg=="}, "originalCommit": {"oid": "8f692a4776001ffce2b2ac2779bf106fd4f90775"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4Mzc1NTg0OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMzo0MToyNVrOHV6otw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDozNjozNVrOHWQ9Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc0MjgzOQ==", "bodyText": "Suggestion: Would include a JUnit fail() statement after this statement, just in case the exception is not thrown as expected.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2094#discussion_r492742839", "createdAt": "2020-09-22T13:41:25Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java", "diffHunk": "@@ -0,0 +1,553 @@\n+package ca.uhn.fhir.jpa.provider.r4;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.hl7.fhir.r4.model.CodeSystem;\n+import org.hl7.fhir.r4.model.CodeSystem.ConceptDefinitionComponent;\n+import org.hl7.fhir.r4.model.CodeType;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.Parameters;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.hl7.fhir.r4.model.UriType;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.transaction.TransactionStatus;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.transaction.support.TransactionCallbackWithoutResult;\n+import org.springframework.transaction.support.TransactionTemplate;\n+\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+\n+public class ResourceProviderR4CodeSystemValidationTest extends BaseResourceProviderR4Test {\n+\n+\tprivate static final org.slf4j.Logger ourLog = org.slf4j.LoggerFactory.getLogger(ResourceProviderR4CodeSystemValidationTest.class);\n+\n+\tprivate IIdType myCsId;\n+\tprivate static final String CS_ACMS_URL = \"http://acme.org\";\n+\n+\t@BeforeEach\n+\t@Transactional\n+\tpublic void before02() throws IOException {\n+\t\tloadAndPersistCodeSystem();\n+\t}\n+\t\n+\tprivate void loadAndPersistCodeSystem() throws IOException {\n+\t\tCodeSystem codeSystem = loadResourceFromClasspath(CodeSystem.class, \"/extensional-case-3-cs.xml\");\n+\t\tcodeSystem.setId(\"CodeSystem/cs\");\n+\t\tpersistCodeSystem(codeSystem);\n+\t}\n+\n+\tprivate void persistCodeSystem(CodeSystem theCodeSystem) {\n+\t\tnew TransactionTemplate(myTxManager).execute(new TransactionCallbackWithoutResult() {\n+\t\t\t@Override\n+\t\t\tprotected void doInTransactionWithoutResult(@Nonnull TransactionStatus theStatus) {\n+\t\t\t\tmyCsId = myCodeSystemDao.create(theCodeSystem, mySrd).getId().toUnqualifiedVersionless();\n+\t\t\t}\n+\t\t});\n+\t\tmyCodeSystemDao.readEntity(myCsId, null).getId();\n+\t}\n+\n+\t@Test\n+\tpublic void testValidateCodeFoundByCode() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeNotFoundByCode() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5-a\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(false, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Unknown code {http://acme.org}8452-5-a\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeMatchDisplay() throws Exception {\n+\t\t\t\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\tinParams.addParameter().setName(\"display\").setValue(new StringType(\"Systolic blood pressure.inspiration - expiration\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeNotMatchDisplay() throws Exception {\n+\t\t\t\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\tinParams.addParameter().setName(\"display\").setValue(new StringType(\"Old Systolic blood pressure.inspiration - expiration\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(false, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Unknown code {http://acme.org}8452-5 - Concept Display : Old Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeWithoutUrl() throws Exception {\n+\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\n+\t\ttry {\n+\t\t\tmyClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\t\t} catch (InvalidRequestException e) {\n+\t\t\tassertEquals(\"HTTP 400 Bad Request: Either CodeSystem ID or CodeSystem identifier must be provided. Unable to validate.\",e.getMessage());\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeWithId() throws Exception {\n+\t\t\t\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onInstance(myCsId).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeWithoutCodeOrCodingOrCodeableConcept() throws Exception {\n+\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"display\").setValue(new StringType(\"Systolic blood pressure.inspiration - expiration\"));\n+\n+\t\ttry {\n+\t\t\tmyClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\t\t} catch (InvalidRequestException e) {\n+\t\t\tassertEquals(\"HTTP 400 Bad Request: No code, coding, or codeableConcept provided to validate.\",e.getMessage());\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeWithCodeAndCoding() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\tinParams.addParameter().setName(\"coding\").setValue((new Coding().setCode(\"8452-1\")));\n+\n+\t\ttry {\n+\t\t\tmyClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\t\t} catch (InvalidRequestException e) {\n+\t\t\tassertEquals(\"HTTP 400 Bad Request: $validate-code can only validate (code) OR (coding) OR (codeableConcept)\",e.getMessage());\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodingWithUrlNotMatch() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"coding\").setValue((new Coding().setCode(\"8452-5\").setSystem(\"http://url2\")));\n+\n+\t\ttry {\n+\t\t\tmyClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f692a4776001ffce2b2ac2779bf106fd4f90775"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwODQ5MA==", "bodyText": "added fail();", "url": "https://github.com/hapifhir/hapi-fhir/pull/2094#discussion_r493108490", "createdAt": "2020-09-23T00:36:35Z", "author": {"login": "frankjtao"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java", "diffHunk": "@@ -0,0 +1,553 @@\n+package ca.uhn.fhir.jpa.provider.r4;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.hl7.fhir.r4.model.CodeSystem;\n+import org.hl7.fhir.r4.model.CodeSystem.ConceptDefinitionComponent;\n+import org.hl7.fhir.r4.model.CodeType;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.Parameters;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.hl7.fhir.r4.model.UriType;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.transaction.TransactionStatus;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.transaction.support.TransactionCallbackWithoutResult;\n+import org.springframework.transaction.support.TransactionTemplate;\n+\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+\n+public class ResourceProviderR4CodeSystemValidationTest extends BaseResourceProviderR4Test {\n+\n+\tprivate static final org.slf4j.Logger ourLog = org.slf4j.LoggerFactory.getLogger(ResourceProviderR4CodeSystemValidationTest.class);\n+\n+\tprivate IIdType myCsId;\n+\tprivate static final String CS_ACMS_URL = \"http://acme.org\";\n+\n+\t@BeforeEach\n+\t@Transactional\n+\tpublic void before02() throws IOException {\n+\t\tloadAndPersistCodeSystem();\n+\t}\n+\t\n+\tprivate void loadAndPersistCodeSystem() throws IOException {\n+\t\tCodeSystem codeSystem = loadResourceFromClasspath(CodeSystem.class, \"/extensional-case-3-cs.xml\");\n+\t\tcodeSystem.setId(\"CodeSystem/cs\");\n+\t\tpersistCodeSystem(codeSystem);\n+\t}\n+\n+\tprivate void persistCodeSystem(CodeSystem theCodeSystem) {\n+\t\tnew TransactionTemplate(myTxManager).execute(new TransactionCallbackWithoutResult() {\n+\t\t\t@Override\n+\t\t\tprotected void doInTransactionWithoutResult(@Nonnull TransactionStatus theStatus) {\n+\t\t\t\tmyCsId = myCodeSystemDao.create(theCodeSystem, mySrd).getId().toUnqualifiedVersionless();\n+\t\t\t}\n+\t\t});\n+\t\tmyCodeSystemDao.readEntity(myCsId, null).getId();\n+\t}\n+\n+\t@Test\n+\tpublic void testValidateCodeFoundByCode() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeNotFoundByCode() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5-a\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(false, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Unknown code {http://acme.org}8452-5-a\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeMatchDisplay() throws Exception {\n+\t\t\t\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\tinParams.addParameter().setName(\"display\").setValue(new StringType(\"Systolic blood pressure.inspiration - expiration\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeNotMatchDisplay() throws Exception {\n+\t\t\t\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\tinParams.addParameter().setName(\"display\").setValue(new StringType(\"Old Systolic blood pressure.inspiration - expiration\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(false, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Unknown code {http://acme.org}8452-5 - Concept Display : Old Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeWithoutUrl() throws Exception {\n+\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\n+\t\ttry {\n+\t\t\tmyClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\t\t} catch (InvalidRequestException e) {\n+\t\t\tassertEquals(\"HTTP 400 Bad Request: Either CodeSystem ID or CodeSystem identifier must be provided. Unable to validate.\",e.getMessage());\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeWithId() throws Exception {\n+\t\t\t\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onInstance(myCsId).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeWithoutCodeOrCodingOrCodeableConcept() throws Exception {\n+\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"display\").setValue(new StringType(\"Systolic blood pressure.inspiration - expiration\"));\n+\n+\t\ttry {\n+\t\t\tmyClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\t\t} catch (InvalidRequestException e) {\n+\t\t\tassertEquals(\"HTTP 400 Bad Request: No code, coding, or codeableConcept provided to validate.\",e.getMessage());\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeWithCodeAndCoding() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\tinParams.addParameter().setName(\"coding\").setValue((new Coding().setCode(\"8452-1\")));\n+\n+\t\ttry {\n+\t\t\tmyClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\t\t} catch (InvalidRequestException e) {\n+\t\t\tassertEquals(\"HTTP 400 Bad Request: $validate-code can only validate (code) OR (coding) OR (codeableConcept)\",e.getMessage());\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodingWithUrlNotMatch() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"coding\").setValue((new Coding().setCode(\"8452-5\").setSystem(\"http://url2\")));\n+\n+\t\ttry {\n+\t\t\tmyClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc0MjgzOQ=="}, "originalCommit": {"oid": "8f692a4776001ffce2b2ac2779bf106fd4f90775"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4Mzc2MDQ3OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMzo0MjoxOVrOHV6rhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDozNzoxNlrOHWQ9xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc0MzU1OQ==", "bodyText": "Suggestion: Once again, would include a JUnit fail() statement after this statement, just in case the exception is not thrown as expected.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2094#discussion_r492743559", "createdAt": "2020-09-22T13:42:19Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java", "diffHunk": "@@ -0,0 +1,553 @@\n+package ca.uhn.fhir.jpa.provider.r4;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.hl7.fhir.r4.model.CodeSystem;\n+import org.hl7.fhir.r4.model.CodeSystem.ConceptDefinitionComponent;\n+import org.hl7.fhir.r4.model.CodeType;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.Parameters;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.hl7.fhir.r4.model.UriType;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.transaction.TransactionStatus;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.transaction.support.TransactionCallbackWithoutResult;\n+import org.springframework.transaction.support.TransactionTemplate;\n+\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+\n+public class ResourceProviderR4CodeSystemValidationTest extends BaseResourceProviderR4Test {\n+\n+\tprivate static final org.slf4j.Logger ourLog = org.slf4j.LoggerFactory.getLogger(ResourceProviderR4CodeSystemValidationTest.class);\n+\n+\tprivate IIdType myCsId;\n+\tprivate static final String CS_ACMS_URL = \"http://acme.org\";\n+\n+\t@BeforeEach\n+\t@Transactional\n+\tpublic void before02() throws IOException {\n+\t\tloadAndPersistCodeSystem();\n+\t}\n+\t\n+\tprivate void loadAndPersistCodeSystem() throws IOException {\n+\t\tCodeSystem codeSystem = loadResourceFromClasspath(CodeSystem.class, \"/extensional-case-3-cs.xml\");\n+\t\tcodeSystem.setId(\"CodeSystem/cs\");\n+\t\tpersistCodeSystem(codeSystem);\n+\t}\n+\n+\tprivate void persistCodeSystem(CodeSystem theCodeSystem) {\n+\t\tnew TransactionTemplate(myTxManager).execute(new TransactionCallbackWithoutResult() {\n+\t\t\t@Override\n+\t\t\tprotected void doInTransactionWithoutResult(@Nonnull TransactionStatus theStatus) {\n+\t\t\t\tmyCsId = myCodeSystemDao.create(theCodeSystem, mySrd).getId().toUnqualifiedVersionless();\n+\t\t\t}\n+\t\t});\n+\t\tmyCodeSystemDao.readEntity(myCsId, null).getId();\n+\t}\n+\n+\t@Test\n+\tpublic void testValidateCodeFoundByCode() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeNotFoundByCode() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5-a\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(false, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Unknown code {http://acme.org}8452-5-a\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeMatchDisplay() throws Exception {\n+\t\t\t\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\tinParams.addParameter().setName(\"display\").setValue(new StringType(\"Systolic blood pressure.inspiration - expiration\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeNotMatchDisplay() throws Exception {\n+\t\t\t\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\tinParams.addParameter().setName(\"display\").setValue(new StringType(\"Old Systolic blood pressure.inspiration - expiration\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(false, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Unknown code {http://acme.org}8452-5 - Concept Display : Old Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeWithoutUrl() throws Exception {\n+\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\n+\t\ttry {\n+\t\t\tmyClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\t\t} catch (InvalidRequestException e) {\n+\t\t\tassertEquals(\"HTTP 400 Bad Request: Either CodeSystem ID or CodeSystem identifier must be provided. Unable to validate.\",e.getMessage());\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeWithId() throws Exception {\n+\t\t\t\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onInstance(myCsId).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeWithoutCodeOrCodingOrCodeableConcept() throws Exception {\n+\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"display\").setValue(new StringType(\"Systolic blood pressure.inspiration - expiration\"));\n+\n+\t\ttry {\n+\t\t\tmyClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\t\t} catch (InvalidRequestException e) {\n+\t\t\tassertEquals(\"HTTP 400 Bad Request: No code, coding, or codeableConcept provided to validate.\",e.getMessage());\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeWithCodeAndCoding() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\tinParams.addParameter().setName(\"coding\").setValue((new Coding().setCode(\"8452-1\")));\n+\n+\t\ttry {\n+\t\t\tmyClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\t\t} catch (InvalidRequestException e) {\n+\t\t\tassertEquals(\"HTTP 400 Bad Request: $validate-code can only validate (code) OR (coding) OR (codeableConcept)\",e.getMessage());\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodingWithUrlNotMatch() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"coding\").setValue((new Coding().setCode(\"8452-5\").setSystem(\"http://url2\")));\n+\n+\t\ttry {\n+\t\t\tmyClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\t\t} catch (InvalidRequestException e) {\n+\t\t\tassertEquals(\"HTTP 400 Bad Request: Coding.system 'http://url2' does not equal with CodeSystem.url 'http://acme.org'. Unable to validate.\",e.getMessage());\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCoding() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"coding\").setValue((new Coding().setCode(\"8452-5\")));\n+\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodingWithSystem() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"coding\").setValue((new Coding().setCode(\"8452-5\").setSystem(CS_ACMS_URL)));\n+\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodingUrlNotMatch() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"coding\").setValue((new Coding().setCode(\"8452-5\").setSystem(\"http://url2\")));\n+\n+\t\ttry {\n+\t\t\tmyClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f692a4776001ffce2b2ac2779bf106fd4f90775"}, "originalPosition": 239}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwODY3Ng==", "bodyText": "added fail();", "url": "https://github.com/hapifhir/hapi-fhir/pull/2094#discussion_r493108676", "createdAt": "2020-09-23T00:37:16Z", "author": {"login": "frankjtao"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java", "diffHunk": "@@ -0,0 +1,553 @@\n+package ca.uhn.fhir.jpa.provider.r4;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.hl7.fhir.r4.model.CodeSystem;\n+import org.hl7.fhir.r4.model.CodeSystem.ConceptDefinitionComponent;\n+import org.hl7.fhir.r4.model.CodeType;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.Parameters;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.hl7.fhir.r4.model.UriType;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.transaction.TransactionStatus;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.transaction.support.TransactionCallbackWithoutResult;\n+import org.springframework.transaction.support.TransactionTemplate;\n+\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+\n+public class ResourceProviderR4CodeSystemValidationTest extends BaseResourceProviderR4Test {\n+\n+\tprivate static final org.slf4j.Logger ourLog = org.slf4j.LoggerFactory.getLogger(ResourceProviderR4CodeSystemValidationTest.class);\n+\n+\tprivate IIdType myCsId;\n+\tprivate static final String CS_ACMS_URL = \"http://acme.org\";\n+\n+\t@BeforeEach\n+\t@Transactional\n+\tpublic void before02() throws IOException {\n+\t\tloadAndPersistCodeSystem();\n+\t}\n+\t\n+\tprivate void loadAndPersistCodeSystem() throws IOException {\n+\t\tCodeSystem codeSystem = loadResourceFromClasspath(CodeSystem.class, \"/extensional-case-3-cs.xml\");\n+\t\tcodeSystem.setId(\"CodeSystem/cs\");\n+\t\tpersistCodeSystem(codeSystem);\n+\t}\n+\n+\tprivate void persistCodeSystem(CodeSystem theCodeSystem) {\n+\t\tnew TransactionTemplate(myTxManager).execute(new TransactionCallbackWithoutResult() {\n+\t\t\t@Override\n+\t\t\tprotected void doInTransactionWithoutResult(@Nonnull TransactionStatus theStatus) {\n+\t\t\t\tmyCsId = myCodeSystemDao.create(theCodeSystem, mySrd).getId().toUnqualifiedVersionless();\n+\t\t\t}\n+\t\t});\n+\t\tmyCodeSystemDao.readEntity(myCsId, null).getId();\n+\t}\n+\n+\t@Test\n+\tpublic void testValidateCodeFoundByCode() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeNotFoundByCode() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5-a\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(false, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Unknown code {http://acme.org}8452-5-a\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeMatchDisplay() throws Exception {\n+\t\t\t\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\tinParams.addParameter().setName(\"display\").setValue(new StringType(\"Systolic blood pressure.inspiration - expiration\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeNotMatchDisplay() throws Exception {\n+\t\t\t\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\tinParams.addParameter().setName(\"display\").setValue(new StringType(\"Old Systolic blood pressure.inspiration - expiration\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(false, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Unknown code {http://acme.org}8452-5 - Concept Display : Old Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeWithoutUrl() throws Exception {\n+\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\n+\t\ttry {\n+\t\t\tmyClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\t\t} catch (InvalidRequestException e) {\n+\t\t\tassertEquals(\"HTTP 400 Bad Request: Either CodeSystem ID or CodeSystem identifier must be provided. Unable to validate.\",e.getMessage());\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeWithId() throws Exception {\n+\t\t\t\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onInstance(myCsId).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeWithoutCodeOrCodingOrCodeableConcept() throws Exception {\n+\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"display\").setValue(new StringType(\"Systolic blood pressure.inspiration - expiration\"));\n+\n+\t\ttry {\n+\t\t\tmyClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\t\t} catch (InvalidRequestException e) {\n+\t\t\tassertEquals(\"HTTP 400 Bad Request: No code, coding, or codeableConcept provided to validate.\",e.getMessage());\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeWithCodeAndCoding() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\tinParams.addParameter().setName(\"coding\").setValue((new Coding().setCode(\"8452-1\")));\n+\n+\t\ttry {\n+\t\t\tmyClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\t\t} catch (InvalidRequestException e) {\n+\t\t\tassertEquals(\"HTTP 400 Bad Request: $validate-code can only validate (code) OR (coding) OR (codeableConcept)\",e.getMessage());\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodingWithUrlNotMatch() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"coding\").setValue((new Coding().setCode(\"8452-5\").setSystem(\"http://url2\")));\n+\n+\t\ttry {\n+\t\t\tmyClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\t\t} catch (InvalidRequestException e) {\n+\t\t\tassertEquals(\"HTTP 400 Bad Request: Coding.system 'http://url2' does not equal with CodeSystem.url 'http://acme.org'. Unable to validate.\",e.getMessage());\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCoding() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"coding\").setValue((new Coding().setCode(\"8452-5\")));\n+\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodingWithSystem() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"coding\").setValue((new Coding().setCode(\"8452-5\").setSystem(CS_ACMS_URL)));\n+\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodingUrlNotMatch() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"coding\").setValue((new Coding().setCode(\"8452-5\").setSystem(\"http://url2\")));\n+\n+\t\ttry {\n+\t\t\tmyClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc0MzU1OQ=="}, "originalCommit": {"oid": "8f692a4776001ffce2b2ac2779bf106fd4f90775"}, "originalPosition": 239}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4Mzc2NzY0OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMzo0Mzo1NVrOHV6wMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMzo0Mzo1NVrOHV6wMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc0NDc1Mw==", "bodyText": "Very impressed by the thoroughness of your testing. Nice!", "url": "https://github.com/hapifhir/hapi-fhir/pull/2094#discussion_r492744753", "createdAt": "2020-09-22T13:43:55Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java", "diffHunk": "@@ -0,0 +1,553 @@\n+package ca.uhn.fhir.jpa.provider.r4;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.hl7.fhir.r4.model.CodeSystem;\n+import org.hl7.fhir.r4.model.CodeSystem.ConceptDefinitionComponent;\n+import org.hl7.fhir.r4.model.CodeType;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.Parameters;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.hl7.fhir.r4.model.UriType;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.transaction.TransactionStatus;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.transaction.support.TransactionCallbackWithoutResult;\n+import org.springframework.transaction.support.TransactionTemplate;\n+\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+\n+public class ResourceProviderR4CodeSystemValidationTest extends BaseResourceProviderR4Test {\n+\n+\tprivate static final org.slf4j.Logger ourLog = org.slf4j.LoggerFactory.getLogger(ResourceProviderR4CodeSystemValidationTest.class);\n+\n+\tprivate IIdType myCsId;\n+\tprivate static final String CS_ACMS_URL = \"http://acme.org\";\n+\n+\t@BeforeEach\n+\t@Transactional\n+\tpublic void before02() throws IOException {\n+\t\tloadAndPersistCodeSystem();\n+\t}\n+\t\n+\tprivate void loadAndPersistCodeSystem() throws IOException {\n+\t\tCodeSystem codeSystem = loadResourceFromClasspath(CodeSystem.class, \"/extensional-case-3-cs.xml\");\n+\t\tcodeSystem.setId(\"CodeSystem/cs\");\n+\t\tpersistCodeSystem(codeSystem);\n+\t}\n+\n+\tprivate void persistCodeSystem(CodeSystem theCodeSystem) {\n+\t\tnew TransactionTemplate(myTxManager).execute(new TransactionCallbackWithoutResult() {\n+\t\t\t@Override\n+\t\t\tprotected void doInTransactionWithoutResult(@Nonnull TransactionStatus theStatus) {\n+\t\t\t\tmyCsId = myCodeSystemDao.create(theCodeSystem, mySrd).getId().toUnqualifiedVersionless();\n+\t\t\t}\n+\t\t});\n+\t\tmyCodeSystemDao.readEntity(myCsId, null).getId();\n+\t}\n+\n+\t@Test\n+\tpublic void testValidateCodeFoundByCode() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeNotFoundByCode() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5-a\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(false, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Unknown code {http://acme.org}8452-5-a\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeMatchDisplay() throws Exception {\n+\t\t\t\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\tinParams.addParameter().setName(\"display\").setValue(new StringType(\"Systolic blood pressure.inspiration - expiration\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeNotMatchDisplay() throws Exception {\n+\t\t\t\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\tinParams.addParameter().setName(\"display\").setValue(new StringType(\"Old Systolic blood pressure.inspiration - expiration\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(false, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Unknown code {http://acme.org}8452-5 - Concept Display : Old Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeWithoutUrl() throws Exception {\n+\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\n+\t\ttry {\n+\t\t\tmyClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\t\t} catch (InvalidRequestException e) {\n+\t\t\tassertEquals(\"HTTP 400 Bad Request: Either CodeSystem ID or CodeSystem identifier must be provided. Unable to validate.\",e.getMessage());\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeWithId() throws Exception {\n+\t\t\t\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\t\n+\t\tParameters respParam = myClient.operation().onInstance(myCsId).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeWithoutCodeOrCodingOrCodeableConcept() throws Exception {\n+\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"display\").setValue(new StringType(\"Systolic blood pressure.inspiration - expiration\"));\n+\n+\t\ttry {\n+\t\t\tmyClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\t\t} catch (InvalidRequestException e) {\n+\t\t\tassertEquals(\"HTTP 400 Bad Request: No code, coding, or codeableConcept provided to validate.\",e.getMessage());\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeWithCodeAndCoding() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"8452-5\"));\n+\t\tinParams.addParameter().setName(\"coding\").setValue((new Coding().setCode(\"8452-1\")));\n+\n+\t\ttry {\n+\t\t\tmyClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\t\t} catch (InvalidRequestException e) {\n+\t\t\tassertEquals(\"HTTP 400 Bad Request: $validate-code can only validate (code) OR (coding) OR (codeableConcept)\",e.getMessage());\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodingWithUrlNotMatch() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"coding\").setValue((new Coding().setCode(\"8452-5\").setSystem(\"http://url2\")));\n+\n+\t\ttry {\n+\t\t\tmyClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\t\t} catch (InvalidRequestException e) {\n+\t\t\tassertEquals(\"HTTP 400 Bad Request: Coding.system 'http://url2' does not equal with CodeSystem.url 'http://acme.org'. Unable to validate.\",e.getMessage());\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCoding() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"coding\").setValue((new Coding().setCode(\"8452-5\")));\n+\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodingWithSystem() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"coding\").setValue((new Coding().setCode(\"8452-5\").setSystem(CS_ACMS_URL)));\n+\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodingUrlNotMatch() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"coding\").setValue((new Coding().setCode(\"8452-5\").setSystem(\"http://url2\")));\n+\n+\t\ttry {\n+\t\t\tmyClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\t\t} catch (InvalidRequestException e) {\n+\t\t\tassertEquals(\"HTTP 400 Bad Request: Coding.system 'http://url2' does not equal with CodeSystem.url 'http://acme.org'. Unable to validate.\",e.getMessage());\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodingWithDisplay() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"coding\").setValue((new Coding().setCode(\"8452-5\").setDisplay(\"Systolic blood pressure.inspiration - expiration\")));\n+\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeNotFoundByCoding() throws Exception {\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"coding\").setValue((new Coding().setCode(\"8452-5-a\")));\n+\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(false, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Unknown code {http://acme.org}8452-5-a\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeableConcept() throws Exception {\n+\t\t\n+\t\tCodeableConcept cc = new CodeableConcept();\n+\t\tcc.addCoding().setCode(\"8452-5\");\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"codeableConcept\").setValue(cc);\n+\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeableConceptWithSystem() throws Exception {\n+\t\t\n+\t\tCodeableConcept cc = new CodeableConcept();\n+\t\tcc.addCoding().setCode(\"8452-5\").setSystem(CS_ACMS_URL);\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"codeableConcept\").setValue(cc);\n+\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeableConceptWithDisplay() throws Exception {\n+\t\t\n+\t\tCodeableConcept cc = new CodeableConcept();\n+\t\tcc.addCoding().setCode(\"8452-5\").setSystem(CS_ACMS_URL).setDisplay(\"Systolic blood pressure.inspiration - expiration\");\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"codeableConcept\").setValue(cc);\n+\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeNotFoundByCodeableConcept() throws Exception {\n+\t\t\n+\t\tCodeableConcept cc = new CodeableConcept();\n+\t\tcc.addCoding().setCode(\"8452-5-a\");\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"codeableConcept\").setValue(cc);\n+\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(false, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Unknown code {http://acme.org}8452-5-a\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeableConceptUrlNotMatch() throws Exception {\n+\t\t\n+\t\tCodeableConcept cc = new CodeableConcept();\n+\t\tcc.addCoding().setCode(\"8452-5\").setSystem(\"http://url2\").setDisplay(\"Systolic blood pressure.inspiration - expiration\");\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"codeableConcept\").setValue(cc);\n+\n+\t\ttry {\n+\t\t\tmyClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\t\t} catch (InvalidRequestException e) {\n+\t\t\tassertEquals(\"HTTP 400 Bad Request: Coding.system 'http://url2' does not equal with CodeSystem.url 'http://acme.org'. Unable to validate.\",e.getMessage());\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeableConceptWithMultipleMatchedEntries() throws Exception {\n+\t\t\n+\t\tCodeableConcept cc = new CodeableConcept();\n+\t\tcc.addCoding().setCode(\"8452-5\").setSystem(CS_ACMS_URL).setDisplay(\"Systolic blood pressure.inspiration - expiration\");\n+\t\tcc.addCoding().setCode(\"8451-7\").setSystem(CS_ACMS_URL).setDisplay(\"Systolic blood pressure--inspiration\");\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"codeableConcept\").setValue(cc);\n+\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeableConceptWithMultipleMatchedFirstEntry() throws Exception {\n+\t\t\n+\t\tCodeableConcept cc = new CodeableConcept();\n+\t\tcc.addCoding().setCode(\"8452-5\").setSystem(CS_ACMS_URL).setDisplay(\"Systolic blood pressure.inspiration - expiration\");\n+\t\tcc.addCoding().setCode(\"8451-7-a\").setSystem(CS_ACMS_URL).setDisplay(\"Systolic blood pressure--inspiration\");\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"codeableConcept\").setValue(cc);\n+\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure.inspiration - expiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeFoundByCodeableConceptWithMultipleMatchedSecondEntry() throws Exception {\n+\t\t\n+\t\tCodeableConcept cc = new CodeableConcept();\n+\t\tcc.addCoding().setCode(\"8452-5-a\").setSystem(CS_ACMS_URL).setDisplay(\"Systolic blood pressure.inspiration - expiration\");\n+\t\tcc.addCoding().setCode(\"8451-7\").setSystem(CS_ACMS_URL).setDisplay(\"Systolic blood pressure--inspiration\");\n+\t\t\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CS_ACMS_URL));\n+\t\tinParams.addParameter().setName(\"codeableConcept\").setValue(cc);\n+\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tString resp = myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(respParam);\n+\t\tourLog.info(resp);\n+\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Systolic blood pressure--inspiration\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeWithUrlAndVersion_v1() {\n+\t\t\n+\t\tString url = \"http://url\";\n+\t\tcreateCodeSystem(url, \"v1\", \"1\", \"Code v1 display\");\n+\t\tcreateCodeSystem(url, \"v2\", \"1\", \"Code v2 display\");\n+\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"version\").setValue(new StringType(\"v1\"));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"1\"));\n+\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParam));\n+\t\t\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Code v1 display\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void testValidateCodeWithUrlAndVersion_v2() {\n+\t\t\n+\t\tString url = \"http://url\";\n+\t\tcreateCodeSystem(url, \"v1\", \"1\", \"Code v1 display\");\n+\t\tcreateCodeSystem(url, \"v2\", \"1\", \"Code v2 display\");\n+\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"version\").setValue(new StringType(\"v2\"));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"1\"));\n+\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParam));\n+\t\t\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Code v2 display\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void testValidateCodeWithUrlAndVersion_noVersion() {\n+\t\t\n+\t\tString url = \"http://url\";\n+\t\tcreateCodeSystem(url, \"v1\", \"1\", \"Code v1 display\");\n+\t\tcreateCodeSystem(url, \"v2\", \"1\", \"Code v2 display\");\n+\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"1\"));\n+\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParam));\n+\t\t\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Code v2 display\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCodeWithUrlAndVersion_noVersion_null_v1() {\n+\t\t\n+\t\tString url = \"http://url\";\n+\t\tcreateCodeSystem(url, null, \"1\", \"Code v1 display\");\n+\t\tcreateCodeSystem(url, \"v2\", \"1\", \"Code v2 display\");\n+\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"1\"));\n+\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParam));\n+\t\t\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Code v2 display\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t}\n+\t\n+\t\n+\t@Test\n+\tpublic void testValidateCodeWithUrlAndVersion_noVersion_null_v2() {\n+\t\t\n+\t\tString url = \"http://url\";\n+\t\tcreateCodeSystem(url, \"v1\", \"1\", \"Code v1 display\");\n+\t\tcreateCodeSystem(url, null, \"1\", \"Code v2 display\");\n+\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"1\"));\n+\n+\t\tParameters respParam = myClient.operation().onType(CodeSystem.class).named(\"validate-code\").withParameters(inParams).execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParam));\n+\t\t\n+\t\tassertEquals(true, ((BooleanType) respParam.getParameter().get(0).getValue()).booleanValue());\n+\t\tassertEquals(\"Code v2 display\", ((StringType) respParam.getParameter().get(1).getValue()).getValueAsString());\n+\t}\n+\t\n+\tprivate void createCodeSystem(String url, String version, String code, String display) {\n+\t\t\n+\t\tCodeSystem codeSystem = new CodeSystem();\n+\t\tcodeSystem.setUrl(url).setVersion(version);\n+\n+\t\tConceptDefinitionComponent concept1 = codeSystem.addConcept();\n+\t\tconcept1.setCode(\"1000\").setDisplay(\"Code Dispaly 1000\");\n+\n+\t\tConceptDefinitionComponent concept = codeSystem.addConcept();\n+\t\tconcept.setCode(code).setDisplay(display);\n+\n+\t\tConceptDefinitionComponent concept2 = codeSystem.addConcept();\n+\t\tconcept2.setCode(\"2000\").setDisplay(\"Code Dispaly 2000\");\n+\n+\t\tourLog.info(\"CodeSystem: \\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(codeSystem));\n+\t\t\n+\t\t myCodeSystemDao.create(codeSystem, mySrd);\n+\t}\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f692a4776001ffce2b2ac2779bf106fd4f90775"}, "originalPosition": 553}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzgxOTQyOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/CommonCodeSystemsTerminologyService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMzo1NDoyMVrOHV7Qlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDo0MDoxOVrOHWRBDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc1MzA0Ng==", "bodyText": "To maintain the current level of test coverage, we either need to add a test for this or perhaps remove this case since CodeSystem code-validation is not being supported for DSTU2 and DSTU3.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2094#discussion_r492753046", "createdAt": "2020-09-22T13:54:21Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/CommonCodeSystemsTerminologyService.java", "diffHunk": "@@ -332,6 +332,32 @@ public static String getValueSetUrl(@Nonnull IBaseResource theValueSet) {\n \t\treturn url;\n \t}\n \n+\tpublic static String getCodeSystemUrl(@Nonnull IBaseResource theCodeSystem) {\n+\t\tString url;\n+\t\tswitch (theCodeSystem.getStructureFhirVersionEnum()) {\n+\t\t\tcase DSTU2_HL7ORG: {\n+\t\t\t\turl = ((CodeSystem) theCodeSystem).getUrl();\n+\t\t\t\tbreak;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f692a4776001ffce2b2ac2779bf106fd4f90775"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwOTUxNg==", "bodyText": "Removed", "url": "https://github.com/hapifhir/hapi-fhir/pull/2094#discussion_r493109516", "createdAt": "2020-09-23T00:40:19Z", "author": {"login": "frankjtao"}, "path": "hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/CommonCodeSystemsTerminologyService.java", "diffHunk": "@@ -332,6 +332,32 @@ public static String getValueSetUrl(@Nonnull IBaseResource theValueSet) {\n \t\treturn url;\n \t}\n \n+\tpublic static String getCodeSystemUrl(@Nonnull IBaseResource theCodeSystem) {\n+\t\tString url;\n+\t\tswitch (theCodeSystem.getStructureFhirVersionEnum()) {\n+\t\t\tcase DSTU2_HL7ORG: {\n+\t\t\t\turl = ((CodeSystem) theCodeSystem).getUrl();\n+\t\t\t\tbreak;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc1MzA0Ng=="}, "originalCommit": {"oid": "8f692a4776001ffce2b2ac2779bf106fd4f90775"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzgyMDIxOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/CommonCodeSystemsTerminologyService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMzo1NDoyOVrOHV7RBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMzo1NDoyOVrOHV7RBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc1MzE1Nw==", "bodyText": "To maintain the current level of test coverage, we either need to add a test for this or perhaps remove this case since CodeSystem code-validation is not being supported for DSTU2 and DSTU3.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2094#discussion_r492753157", "createdAt": "2020-09-22T13:54:29Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/CommonCodeSystemsTerminologyService.java", "diffHunk": "@@ -332,6 +332,32 @@ public static String getValueSetUrl(@Nonnull IBaseResource theValueSet) {\n \t\treturn url;\n \t}\n \n+\tpublic static String getCodeSystemUrl(@Nonnull IBaseResource theCodeSystem) {\n+\t\tString url;\n+\t\tswitch (theCodeSystem.getStructureFhirVersionEnum()) {\n+\t\t\tcase DSTU2_HL7ORG: {\n+\t\t\t\turl = ((CodeSystem) theCodeSystem).getUrl();\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tcase DSTU3: {\n+\t\t\t\turl = ((org.hl7.fhir.dstu3.model.CodeSystem) theCodeSystem).getUrl();\n+\t\t\t\tbreak;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f692a4776001ffce2b2ac2779bf106fd4f90775"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzgzODI0OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/CommonCodeSystemsTerminologyService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMzo1Nzo1NVrOHV7b7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDo0MDoyNlrOHWRBIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc1NTk1MA==", "bodyText": "Perhaps augment the R5 provider test to include a case that includes CodeSystem ID so that this code is also included in the tests.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2094#discussion_r492755950", "createdAt": "2020-09-22T13:57:55Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/CommonCodeSystemsTerminologyService.java", "diffHunk": "@@ -332,6 +332,32 @@ public static String getValueSetUrl(@Nonnull IBaseResource theValueSet) {\n \t\treturn url;\n \t}\n \n+\tpublic static String getCodeSystemUrl(@Nonnull IBaseResource theCodeSystem) {\n+\t\tString url;\n+\t\tswitch (theCodeSystem.getStructureFhirVersionEnum()) {\n+\t\t\tcase DSTU2_HL7ORG: {\n+\t\t\t\turl = ((CodeSystem) theCodeSystem).getUrl();\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tcase DSTU3: {\n+\t\t\t\turl = ((org.hl7.fhir.dstu3.model.CodeSystem) theCodeSystem).getUrl();\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tcase R4: {\n+\t\t\t\turl = ((org.hl7.fhir.r4.model.CodeSystem) theCodeSystem).getUrl();\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tcase R5: {\n+\t\t\t\turl = ((org.hl7.fhir.r5.model.CodeSystem) theCodeSystem).getUrl();\n+\t\t\t\tbreak;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f692a4776001ffce2b2ac2779bf106fd4f90775"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwOTUzNw==", "bodyText": "Removed", "url": "https://github.com/hapifhir/hapi-fhir/pull/2094#discussion_r493109537", "createdAt": "2020-09-23T00:40:26Z", "author": {"login": "frankjtao"}, "path": "hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/CommonCodeSystemsTerminologyService.java", "diffHunk": "@@ -332,6 +332,32 @@ public static String getValueSetUrl(@Nonnull IBaseResource theValueSet) {\n \t\treturn url;\n \t}\n \n+\tpublic static String getCodeSystemUrl(@Nonnull IBaseResource theCodeSystem) {\n+\t\tString url;\n+\t\tswitch (theCodeSystem.getStructureFhirVersionEnum()) {\n+\t\t\tcase DSTU2_HL7ORG: {\n+\t\t\t\turl = ((CodeSystem) theCodeSystem).getUrl();\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tcase DSTU3: {\n+\t\t\t\turl = ((org.hl7.fhir.dstu3.model.CodeSystem) theCodeSystem).getUrl();\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tcase R4: {\n+\t\t\t\turl = ((org.hl7.fhir.r4.model.CodeSystem) theCodeSystem).getUrl();\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tcase R5: {\n+\t\t\t\turl = ((org.hl7.fhir.r5.model.CodeSystem) theCodeSystem).getUrl();\n+\t\t\t\tbreak;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc1NTk1MA=="}, "originalCommit": {"oid": "8f692a4776001ffce2b2ac2779bf106fd4f90775"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NDE2OTYxOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/CommonCodeSystemsTerminologyService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNTowMjo1OVrOHV-qAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDo1MDo0OVrOHWRLZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgwODcwNg==", "bodyText": "May need a dedicated test case here to maintain the test coverage level.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2094#discussion_r492808706", "createdAt": "2020-09-22T15:02:59Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/CommonCodeSystemsTerminologyService.java", "diffHunk": "@@ -332,6 +332,32 @@ public static String getValueSetUrl(@Nonnull IBaseResource theValueSet) {\n \t\treturn url;\n \t}\n \n+\tpublic static String getCodeSystemUrl(@Nonnull IBaseResource theCodeSystem) {\n+\t\tString url;\n+\t\tswitch (theCodeSystem.getStructureFhirVersionEnum()) {\n+\t\t\tcase DSTU2_HL7ORG: {\n+\t\t\t\turl = ((CodeSystem) theCodeSystem).getUrl();\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tcase DSTU3: {\n+\t\t\t\turl = ((org.hl7.fhir.dstu3.model.CodeSystem) theCodeSystem).getUrl();\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tcase R4: {\n+\t\t\t\turl = ((org.hl7.fhir.r4.model.CodeSystem) theCodeSystem).getUrl();\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tcase R5: {\n+\t\t\t\turl = ((org.hl7.fhir.r5.model.CodeSystem) theCodeSystem).getUrl();\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tcase DSTU2:\n+\t\t\tcase DSTU2_1:\n+\t\t\tdefault:\n+\t\t\t\tthrow new IllegalArgumentException(\"Can not handle version: \" + theCodeSystem.getStructureFhirVersionEnum());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f692a4776001ffce2b2ac2779bf106fd4f90775"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzExMjE2Ng==", "bodyText": "Removed DSTU2, and DSTU2_1 since there is no CodeSystem resource for the FHIR version. Added test case for DTU3", "url": "https://github.com/hapifhir/hapi-fhir/pull/2094#discussion_r493112166", "createdAt": "2020-09-23T00:50:49Z", "author": {"login": "frankjtao"}, "path": "hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/CommonCodeSystemsTerminologyService.java", "diffHunk": "@@ -332,6 +332,32 @@ public static String getValueSetUrl(@Nonnull IBaseResource theValueSet) {\n \t\treturn url;\n \t}\n \n+\tpublic static String getCodeSystemUrl(@Nonnull IBaseResource theCodeSystem) {\n+\t\tString url;\n+\t\tswitch (theCodeSystem.getStructureFhirVersionEnum()) {\n+\t\t\tcase DSTU2_HL7ORG: {\n+\t\t\t\turl = ((CodeSystem) theCodeSystem).getUrl();\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tcase DSTU3: {\n+\t\t\t\turl = ((org.hl7.fhir.dstu3.model.CodeSystem) theCodeSystem).getUrl();\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tcase R4: {\n+\t\t\t\turl = ((org.hl7.fhir.r4.model.CodeSystem) theCodeSystem).getUrl();\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tcase R5: {\n+\t\t\t\turl = ((org.hl7.fhir.r5.model.CodeSystem) theCodeSystem).getUrl();\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tcase DSTU2:\n+\t\t\tcase DSTU2_1:\n+\t\t\tdefault:\n+\t\t\t\tthrow new IllegalArgumentException(\"Can not handle version: \" + theCodeSystem.getStructureFhirVersionEnum());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgwODcwNg=="}, "originalCommit": {"oid": "8f692a4776001ffce2b2ac2779bf106fd4f90775"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4ODk4MjM4OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/provider/r5/BaseJpaResourceProviderCodeSystemR5.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzowOToyN1rOHWtDsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzowOToyN1rOHWtDsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU2ODk0NQ==", "bodyText": "I think I may have missed this in my previous review. I think the above import should be for the r5 IdType.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2094#discussion_r493568945", "createdAt": "2020-09-23T13:09:27Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/provider/r5/BaseJpaResourceProviderCodeSystemR5.java", "diffHunk": "@@ -23,9 +23,13 @@\n import ca.uhn.fhir.context.support.IValidationSupport;\n import ca.uhn.fhir.jpa.api.dao.IFhirResourceDaoCodeSystem;\n import ca.uhn.fhir.jpa.model.util.JpaConstants;\n+import ca.uhn.fhir.jpa.provider.BaseJpaResourceProviderValueSetDstu2;\n+import ca.uhn.fhir.rest.annotation.IdParam;\n import ca.uhn.fhir.rest.annotation.Operation;\n import ca.uhn.fhir.rest.annotation.OperationParam;\n import ca.uhn.fhir.rest.api.server.RequestDetails;\n+\n+import org.hl7.fhir.r4.model.IdType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6a669444d4278b98fde5c30a9ece182eba19af0"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1796, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}