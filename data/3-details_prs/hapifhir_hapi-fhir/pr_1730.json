{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5ODM2OTAx", "number": 1730, "title": "Add integer date fields to ResourceIndexedSearchParamDate", "bodyText": "This addresses #1499. By adding two integer fields representing the low and high date of the DateParam, which we can then use  during searches which need only DAY-precision granularity.\n\nAdd SP_VALUE_LOW_DATE_ORDINAL and SP_VALUE_HIGH_DATE_ORDINAL to ResrouceIndexedSearchParamDate\nAdd flag to DaoConfig controlling this behaviour.\nAdd database migration task. This includes a mild rework of CalculateHashesTask, in which I extract out the common functionality to BaseColumnCalculatorTask.\nModify broken test to reflect new reality.\nAdd changelog entry.\n\nBefore:\nDepending on time of ingestion, queries for Observation?date=2020-02-25 could miss some observations.\nAfter:\nAnything incoming with date 2020-02-25 at time of ingestion will show up in the search results.", "createdAt": "2020-02-25T22:22:35Z", "url": "https://github.com/hapifhir/hapi-fhir/pull/1730", "merged": true, "mergeCommit": {"oid": "8fce86bba514535a8d7d5891427d1459149e0106"}, "closed": true, "closedAt": "2020-04-30T15:53:36Z", "author": {"login": "tadgh"}, "timelineItems": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABbVOhAuAH2gAyMzc5ODM2OTAxOjYxNDU4NWNjMWY4MmJmNzU1MGFhZjUyNGJhNmYwNzhiNTQ4NTExNmM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABccg7nBAH2gAyMzc5ODM2OTAxOmE1ZTFiM2QxNTliNTQ1ZjU4MDY5MTNjY2EyMWJhNjlhMTc4NGFmYTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "614585cc1f82bf7550aaf524ba6f078b5485116c", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/614585cc1f82bf7550aaf524ba6f078b5485116c", "committedDate": "2019-09-21T11:42:04Z", "message": "added failing test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18d859281ede8147554f30885210c059d28df790", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/18d859281ede8147554f30885210c059d28df790", "committedDate": "2020-02-24T16:47:43Z", "message": "Merge remote-tracking branch 'remotes/origin/master' into date-match-bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f5b3394e001aa115e30cf5857cef7d4203c2280", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/7f5b3394e001aa115e30cf5857cef7d4203c2280", "committedDate": "2020-02-25T00:34:16Z", "message": "Hacky first-pass of adding ordinal date field to ResourceIndexedSearchParamDate and using it for search"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34d5925393f2fae9b0edee790a24563422acbfae", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/34d5925393f2fae9b0edee790a24563422acbfae", "committedDate": "2020-02-25T14:37:57Z", "message": "Move common work to DateUtils. Rename function for clarity."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b41b5b9601a69b4febbd4152f412abc435bc107", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/3b41b5b9601a69b4febbd4152f412abc435bc107", "committedDate": "2020-02-25T16:18:39Z", "message": "Type migration to boxed integer to avoid int defaulting to 0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13cc8b69aaaa3c825e1a2931a8b895bb4eb9dadb", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/13cc8b69aaaa3c825e1a2931a8b895bb4eb9dadb", "committedDate": "2020-02-25T16:27:08Z", "message": "Add schema migration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ec772b527f89dc40ff7d632cdb906e72a0d28c8", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/3ec772b527f89dc40ff7d632cdb906e72a0d28c8", "committedDate": "2020-02-25T19:06:36Z", "message": "rework ResourceIndexedSearchParamDate constructor to support incoming string values"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da7224ff89ef6c5218399a96ef5944a1efe124da", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/da7224ff89ef6c5218399a96ef5944a1efe124da", "committedDate": "2020-02-25T19:07:03Z", "message": "update broken test to reflect new reality of business logic of ordinal date comparison"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "512af5b87d21fd9f7dfd1ad1ea8c53b2725ca527", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/512af5b87d21fd9f7dfd1ad1ea8c53b2725ca527", "committedDate": "2020-02-25T19:09:51Z", "message": "Add changelog entry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97c98254d0db82b0b34140e99e9ef85262ca931a", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/97c98254d0db82b0b34140e99e9ef85262ca931a", "committedDate": "2020-02-25T21:09:08Z", "message": " Extract Common functionality out of CalculateHashesTask, build CalculateOrdinalDatesTask based on it"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f56e38148b6b48f18059dbd9c0b307be051b3174", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/f56e38148b6b48f18059dbd9c0b307be051b3174", "committedDate": "2020-02-25T21:43:17Z", "message": "Add flag to DaoConfig controlling behaviour"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1b6e37395746b006594ef144e2b33fab754feaf", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/a1b6e37395746b006594ef144e2b33fab754feaf", "committedDate": "2020-02-25T22:03:50Z", "message": "Fix bug with Period bounds not counting as first value"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e833af5f046c464414821011f66921ceb5460cf", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/1e833af5f046c464414821011f66921ceb5460cf", "committedDate": "2020-02-25T22:06:38Z", "message": "Variable reuse"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2204fbeabd84a75ffd9171daa6c3a7251bd3ee11", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/2204fbeabd84a75ffd9171daa6c3a7251bd3ee11", "committedDate": "2020-02-25T22:08:11Z", "message": "Adding some comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df9e86ec66386e00b2e25779e80cfbab83fe3218", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/df9e86ec66386e00b2e25779e80cfbab83fe3218", "committedDate": "2020-02-25T22:26:53Z", "message": "Merge branch 'master' into date-match-bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "165f5fd808a4d6cf5907bf5d8d915629e7e11224", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/165f5fd808a4d6cf5907bf5d8d915629e7e11224", "committedDate": "2020-02-26T14:32:20Z", "message": "fix bugs in calculating ordinal date"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a97443b1ed075845b501a7f42354a1a941ec1e35", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/a97443b1ed075845b501a7f42354a1a941ec1e35", "committedDate": "2020-02-26T16:12:27Z", "message": "Fix test failures. One caused by invalid test. One caused by granularity need LT not LTE"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "077f9df814640d37be47af9acfa5b9afbd846ccc", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/077f9df814640d37be47af9acfa5b9afbd846ccc", "committedDate": "2020-02-26T17:04:33Z", "message": "I keep finding more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2dc94de6bb13962c715e626f0b95c8ac41805b59", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/2dc94de6bb13962c715e626f0b95c8ac41805b59", "committedDate": "2020-02-26T19:31:35Z", "message": "roll back change to inmemory matcher test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f86a4c9fa1cad9b1c3e2dd39ac400812ef3568f6", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/f86a4c9fa1cad9b1c3e2dd39ac400812ef3568f6", "committedDate": "2020-02-26T22:05:23Z", "message": "Add date ordinals to subscription matching checker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1d7072c42d20e15d319675a923c51961b30e6c3", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/b1d7072c42d20e15d319675a923c51961b30e6c3", "committedDate": "2020-02-27T03:22:42Z", "message": "Add precision checker for ordinal date returning on DateRangeParam"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1Njc3MDY0", "url": "https://github.com/hapifhir/hapi-fhir/pull/1730#pullrequestreview-365677064", "createdAt": "2020-02-27T13:26:57Z", "commit": {"oid": "b1d7072c42d20e15d319675a923c51961b30e6c3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMzoyNjo1N1rOFvSGdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxOTo1NzoxMVrOFwBIZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEyMzk1OQ==", "bodyText": "This should probably get switched back down prior to merge", "url": "https://github.com/hapifhir/hapi-fhir/pull/1730#discussion_r385123959", "createdAt": "2020-02-27T13:26:57Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/test/resources/logback-test.xml", "diffHunk": "@@ -27,7 +27,7 @@\n \t\t<appender-ref ref=\"STDOUT\" />\n \t</logger>\n \n-\t<logger name=\"ca.uhn.fhir.jpa.dao\" additivity=\"false\" level=\"info\">\n+\t<logger name=\"ca.uhn.fhir.jpa.dao\" additivity=\"false\" level=\"trace\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1d7072c42d20e15d319675a923c51961b30e6c3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg5MTY1Nw==", "bodyText": "I feel like instead of having a whole bunch of if (isOrdinalComparison) for each of these, you could have one at the top where you say\nif (isOrdinalComparison) {\n   lowFieldName = \"myValueLowDateOrdinal\";\n} else {\n   lowFieldName = \"myValueLow\";\n... and avoid most of the duplication below.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1730#discussion_r385891657", "createdAt": "2020-02-28T19:52:20Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/PredicateBuilderDate.java", "diffHunk": "@@ -150,67 +152,111 @@ private Predicate createPredicateDate(IQueryParameterType theParam,\n \t\treturn p;\n \t}\n \n+\tprivate boolean isNullOrDayPrecision(DateParam theDateParam) {\n+\t\treturn theDateParam == null || theDateParam.getPrecision().ordinal() == TemporalPrecisionEnum.DAY.ordinal();\n+\t}\n \tprivate Predicate createPredicateDateFromRange(CriteriaBuilder theBuilder,\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  From<?, ResourceIndexedSearchParamDate> theFrom,\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  DateRangeParam theRange,\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  SearchFilterParser.CompareOperation operation) {\n-\t\tDate lowerBound = theRange.getLowerBoundAsInstant();\n-\t\tDate upperBound = theRange.getUpperBoundAsInstant();\n+\t\tDate lowerBoundInstant = theRange.getLowerBoundAsInstant();\n+\t\tDate upperBoundInstant = theRange.getUpperBoundAsInstant();\n+\n+\t\tDateParam lowerBound = theRange.getLowerBound();\n+\t\tDateParam upperBound = theRange.getUpperBound();\n+\t\tInteger lowerBoundAsOrdinal = theRange.getLowerBoundAsDateInteger();\n+\t\tInteger upperBoundAsOrdinal = theRange.getUpperBoundAsDateInteger();\n+\n+\t\t/**\n+\t\t * If all present search parameters are of DAY precision, and {@link DaoConfig#getUseOrdinalDatesForDayPrecisionSearches()} is true,\n+\t\t * then we attempt to use the ordinal field for date comparisons instead of the date field.\n+\t\t */\n+\t\tboolean isOrdinalComparison = isNullOrDayPrecision(lowerBound) && isNullOrDayPrecision(upperBound) && myDaoConfig.getModelConfig().getUseOrdinalDatesForDayPrecisionSearches();\n+\n \t\tPredicate lt = null;\n \t\tPredicate gt = null;\n \t\tPredicate lb = null;\n \t\tPredicate ub = null;\n \n \t\tif (operation == SearchFilterParser.CompareOperation.lt) {\n-\t\t\tif (lowerBound == null) {\n+\t\t\tif (lowerBoundInstant == null) {\n \t\t\t\tthrow new InvalidRequestException(\"lowerBound value not correctly specified for compare operation\");\n \t\t\t}\n-\t\t\tlb = theBuilder.lessThan(theFrom.get(\"myValueLow\"), lowerBound);\n+\t\t\t//im like 80% sure this should be ub and not lb, as it is an UPPER bound.\n+\t\t\tif (isOrdinalComparison) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1d7072c42d20e15d319675a923c51961b30e6c3"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg5MjUyMg==", "bodyText": "this should probably be an else", "url": "https://github.com/hapifhir/hapi-fhir/pull/1730#discussion_r385892522", "createdAt": "2020-02-28T19:53:27Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/PredicateBuilderDate.java", "diffHunk": "@@ -221,8 +267,10 @@ private Predicate createPredicateDateFromRange(CriteriaBuilder theBuilder,\n \t\t\tthrow new InvalidRequestException(String.format(\"Unsupported operator specified, operator=%s\",\n \t\t\t\toperation.name()));\n \t\t}\n-\n-\t\tourLog.trace(\"Date range is {} - {}\", lowerBound, upperBound);\n+\t\tif (isOrdinalComparison) {\n+\t\t\tourLog.trace(\"Ordinal date range is {} - {} \", lowerBoundAsOrdinal, upperBoundAsOrdinal);\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1d7072c42d20e15d319675a923c51961b30e6c3"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg5NDUwMg==", "bodyText": "I'm actually not sure this will work for the dates.. The reason is that it's possible for one of the dates (either SP_VALUE_HIGH or SP_VALUE_LOW to be saved as null even if the other isn't. For example if we were indexing a Period with a start date but no finish date...\nIt's probably gonna require something like SELECT FROM HFJ_SPIDX_DATE WHERE SP_VALUE_LOW IS NOT NULL AND SP_VALUE_LOW_ORDINAL IS NULL", "url": "https://github.com/hapifhir/hapi-fhir/pull/1730#discussion_r385894502", "createdAt": "2020-02-28T19:57:11Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-migrate/src/main/java/ca/uhn/fhir/jpa/migrate/taskdef/BaseColumnCalculatorTask.java", "diffHunk": "@@ -0,0 +1,271 @@\n+package ca.uhn.fhir.jpa.migrate.taskdef;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR JPA Server - Migration\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.jpa.migrate.JdbcUtils;\n+import ca.uhn.fhir.util.StopWatch;\n+import ca.uhn.fhir.util.VersionEnum;\n+import com.google.common.collect.ForwardingMap;\n+import org.apache.commons.lang3.Validate;\n+import org.apache.commons.lang3.concurrent.BasicThreadFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.jdbc.core.ColumnMapRowMapper;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.RowCallbackHandler;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import java.util.function.Function;\n+\n+public abstract class BaseColumnCalculatorTask extends BaseTableColumnTask<BaseColumnCalculatorTask> {\n+\n+\tprotected static final Logger ourLog = LoggerFactory.getLogger(BaseColumnCalculatorTask.class);\n+\tprivate int myBatchSize = 10000;\n+\tprivate Map<String, Function<MandatoryKeyMap<String, Object>, Object>> myCalculators = new HashMap<>();\n+\tprivate ThreadPoolExecutor myExecutor;\n+\n+\tpublic void setBatchSize(int theBatchSize) {\n+\t\tmyBatchSize = theBatchSize;\n+\t}\n+\n+\t/**\n+\t * Constructor\n+\t */\n+\tpublic BaseColumnCalculatorTask(VersionEnum theRelease, String theVersion) {\n+\t\tsuper(theRelease.toString(), theVersion);\n+\t}\n+\n+\t/**\n+\t * Allows concrete implementations to decide if they should be skipped.\n+\t * @return a boolean indicating whether or not to skip execution of the task.\n+\t */\n+\tprotected abstract boolean shouldSkipTask();\n+\n+\t@Override\n+\tpublic synchronized void doExecute() throws SQLException {\n+\t\tif (isDryRun() || shouldSkipTask()) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tinitializeExecutor();\n+\n+\t\ttry {\n+\n+\t\t\twhile(true) {\n+\t\t\t\tMyRowCallbackHandler rch = new MyRowCallbackHandler();\n+\t\t\t\tgetTxTemplate().execute(t -> {\n+\t\t\t\t\tJdbcTemplate jdbcTemplate = newJdbcTemplate();\n+\t\t\t\t\tjdbcTemplate.setMaxRows(100000);\n+\t\t\t\t\tString sql = \"SELECT * FROM \" + getTableName() + \" WHERE \" + getColumnName() + \" IS NULL\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1d7072c42d20e15d319675a923c51961b30e6c3"}, "originalPosition": 80}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6123e4b189e450952043cf29c705ccda0ad1a12e", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/6123e4b189e450952043cf29c705ccda0ad1a12e", "committedDate": "2020-02-28T21:31:16Z", "message": "rework based on PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df7a9916c39d66422eb8a67f7d3fa4ebf4accaf3", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/df7a9916c39d66422eb8a67f7d3fa4ebf4accaf3", "committedDate": "2020-03-03T22:01:12Z", "message": "Swap from trace to info logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5105439339d6cb94ed22308c97822932d20ad0e", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/a5105439339d6cb94ed22308c97822932d20ad0e", "committedDate": "2020-03-03T22:03:55Z", "message": "Fix log conditional"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b223a1fd9d7a34f22fdb688472ae59db524e93e", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/8b223a1fd9d7a34f22fdb688472ae59db524e93e", "committedDate": "2020-03-04T00:07:25Z", "message": "Rework selection generation of calculator. Add null check for empty dates"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NDUxNTIx", "url": "https://github.com/hapifhir/hapi-fhir/pull/1730#pullrequestreview-368451521", "createdAt": "2020-03-04T01:41:57Z", "commit": {"oid": "8b223a1fd9d7a34f22fdb688472ae59db524e93e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14f671ec0bfc158a4dd3b5909983733dd15b744c", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/14f671ec0bfc158a4dd3b5909983733dd15b744c", "committedDate": "2020-03-04T06:31:37Z", "message": "Fix SQL Typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "598bf56e871604eec1cdcf841de19990e4706c1e", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/598bf56e871604eec1cdcf841de19990e4706c1e", "committedDate": "2020-03-04T16:56:03Z", "message": "Broken SQL Statement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "828ddd51854164d18b0f276af45cff0ac78330aa", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/828ddd51854164d18b0f276af45cff0ac78330aa", "committedDate": "2020-03-04T20:14:55Z", "message": "Update docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f8a8a3dc29713ea4fff94bac2447634ca36328c", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/8f8a8a3dc29713ea4fff94bac2447634ca36328c", "committedDate": "2020-04-29T23:17:50Z", "message": "Merge branch 'master' into date-match-bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5e1b3d159b545f5806913cca21ba69a1784afa7", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/a5e1b3d159b545f5806913cca21ba69a1784afa7", "committedDate": "2020-04-29T23:18:02Z", "message": "Minor changes for merge conflicts"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4009, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}