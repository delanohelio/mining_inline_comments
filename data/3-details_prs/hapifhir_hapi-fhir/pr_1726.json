{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NjQwMDk4", "number": 1726, "title": "Collapse date joins", "bodyText": "", "createdAt": "2020-02-22T22:58:54Z", "url": "https://github.com/hapifhir/hapi-fhir/pull/1726", "merged": true, "mergeCommit": {"oid": "b2b0ff22b4a8b3bccc3c322c96ed32448e85b51c"}, "closed": true, "closedAt": "2020-02-25T22:17:15Z", "author": {"login": "jamesagnew"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcG8fllAH2gAyMzc4NjQwMDk4Ojg5NDYwNWE2OTc0MzNhOGQ5OWJlZmQyYzYzZjMxZTU3OGZiYTVkODA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcH4MtVgH2gAyMzc4NjQwMDk4OjA4ZDVlMzc3Y2EzYzI0ZjAyMGNiNTdkZTNjN2FhNGJkMzBjYmQ5ODM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "894605a697433a8d99befd2c63f31e578fba5d80", "author": {"user": {"login": "jamesagnew", "name": "James Agnew"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/894605a697433a8d99befd2c63f31e578fba5d80", "committedDate": "2020-02-22T22:58:26Z", "message": "Collapse date joins"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1698ba7a3672a5fa1cf7b86ca18651ed9f1261c", "author": {"user": {"login": "jamesagnew", "name": "James Agnew"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/f1698ba7a3672a5fa1cf7b86ca18651ed9f1261c", "committedDate": "2020-02-22T23:00:19Z", "message": "Add changelog"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMTMwNzgx", "url": "https://github.com/hapifhir/hapi-fhir/pull/1726#pullrequestreview-363130781", "createdAt": "2020-02-23T23:14:51Z", "commit": {"oid": "f1698ba7a3672a5fa1cf7b86ca18651ed9f1261c"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QyMzoxNDo1MlrOFtTb7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QyMzoyMjo0M1rOFtTe5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA0ODY4Nw==", "bodyText": "if it wasn't for the newJoin flag, I'd suggest a putIfAbsent here...", "url": "https://github.com/hapifhir/hapi-fhir/pull/1726#discussion_r383048687", "createdAt": "2020-02-23T23:14:52Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/PredicateBuilderDate.java", "diffHunk": "@@ -56,7 +60,18 @@ public Predicate addPredicate(String theResourceName,\n \t\t\t\t\t\t\t\t\t\t\tList<? extends IQueryParameterType> theList,\n \t\t\t\t\t\t\t\t\t\t\tSearchFilterParser.CompareOperation operation) {\n \n-\t\tJoin<ResourceTable, ResourceIndexedSearchParamDate> join = createJoin(SearchBuilderJoinEnum.DATE, theParamName);\n+\t\tboolean newJoin = false;\n+\t\tif (myJoinMap == null) {\n+\t\t\tmyJoinMap = new HashMap<>();\n+\t\t}\n+\t\tString key = theResourceName + \" \" + theParamName;\n+\n+\t\tJoin<ResourceTable, ResourceIndexedSearchParamDate> join = myJoinMap.get(key);\n+\t\tif (join == null) {\n+\t\t\tjoin = createJoin(SearchBuilderJoinEnum.DATE, theParamName);\n+\t\t\tmyJoinMap.put(key, join);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1698ba7a3672a5fa1cf7b86ca18651ed9f1261c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA0ODkxOQ==", "bodyText": "The fact this change was so easy is a testament to how well designed your solution was in the first place.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1726#discussion_r383048919", "createdAt": "2020-02-23T23:17:06Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/PredicateBuilderDate.java", "diffHunk": "@@ -77,7 +92,14 @@ public Predicate addPredicate(String theResourceName,\n \t\t}\n \n \t\tPredicate orPredicates = myBuilder.or(toArray(codePredicates));\n-\t\tmyQueryRoot.addPredicate(orPredicates);\n+\n+\t\tif (newJoin) {\n+\t\t\tPredicate identityAndValuePredicate = combineParamIndexPredicateWithParamNamePredicate(theResourceName, theParamName, join, orPredicates);\n+\t\t\tmyQueryRoot.addPredicate(identityAndValuePredicate);\n+\t\t} else {\n+\t\t\tmyQueryRoot.addPredicate(orPredicates);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1698ba7a3672a5fa1cf7b86ca18651ed9f1261c"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA0OTExOQ==", "bodyText": "calling this obs1 is confusing.  I'd just call them both obs", "url": "https://github.com/hapifhir/hapi-fhir/pull/1726#discussion_r383049119", "createdAt": "2020-02-23T23:19:15Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4SearchNoFtTest.java", "diffHunk": "@@ -3258,6 +3258,73 @@ public void testSearchWithDate() {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testSearchWithDateAndReusesExistingJoin() {\n+\t\t// Add a search parameter to Observation.issued, so that between that one\n+\t\t// and the existing one on Observation.effective, we have 2 date search parameters\n+\t\t// on the same resource\n+\t\t{\n+\t\t\tSearchParameter sp = new SearchParameter();\n+\t\t\tsp.setStatus(Enumerations.PublicationStatus.ACTIVE);\n+\t\t\tsp.addBase(\"Observation\");\n+\t\t\tsp.setType(Enumerations.SearchParamType.DATE);\n+\t\t\tsp.setCode(\"issued\");\n+\t\t\tsp.setExpression(\"Observation.issued\");\n+\t\t\tmySearchParameterDao.create(sp);\n+\t\t\tmySearchParamRegistry.forceRefresh();\n+\t\t}\n+\n+\t\t// Dates are reversed on these two observations\n+\t\tIIdType obsId1;\n+\t\t{\n+\t\t\tObservation obs1 = new Observation();\n+\t\t\tobs1.setIssuedElement(new InstantType(\"2020-06-06T12:00:00Z\"));\n+\t\t\tobs1.setEffective(new InstantType(\"2019-06-06T12:00:00Z\"));\n+\t\t\tobsId1 = myObservationDao.create(obs1).getId().toUnqualifiedVersionless();\n+\t\t}\n+\t\tIIdType obsId2;\n+\t\t{\n+\t\t\tObservation obs1 = new Observation();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1698ba7a3672a5fa1cf7b86ca18651ed9f1261c"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA0OTI3NA==", "bodyText": "This is beautiful.  That captures query listener is the best!", "url": "https://github.com/hapifhir/hapi-fhir/pull/1726#discussion_r383049274", "createdAt": "2020-02-23T23:20:49Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4SearchNoFtTest.java", "diffHunk": "@@ -3258,6 +3258,73 @@ public void testSearchWithDate() {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testSearchWithDateAndReusesExistingJoin() {\n+\t\t// Add a search parameter to Observation.issued, so that between that one\n+\t\t// and the existing one on Observation.effective, we have 2 date search parameters\n+\t\t// on the same resource\n+\t\t{\n+\t\t\tSearchParameter sp = new SearchParameter();\n+\t\t\tsp.setStatus(Enumerations.PublicationStatus.ACTIVE);\n+\t\t\tsp.addBase(\"Observation\");\n+\t\t\tsp.setType(Enumerations.SearchParamType.DATE);\n+\t\t\tsp.setCode(\"issued\");\n+\t\t\tsp.setExpression(\"Observation.issued\");\n+\t\t\tmySearchParameterDao.create(sp);\n+\t\t\tmySearchParamRegistry.forceRefresh();\n+\t\t}\n+\n+\t\t// Dates are reversed on these two observations\n+\t\tIIdType obsId1;\n+\t\t{\n+\t\t\tObservation obs1 = new Observation();\n+\t\t\tobs1.setIssuedElement(new InstantType(\"2020-06-06T12:00:00Z\"));\n+\t\t\tobs1.setEffective(new InstantType(\"2019-06-06T12:00:00Z\"));\n+\t\t\tobsId1 = myObservationDao.create(obs1).getId().toUnqualifiedVersionless();\n+\t\t}\n+\t\tIIdType obsId2;\n+\t\t{\n+\t\t\tObservation obs1 = new Observation();\n+\t\t\tobs1.setIssuedElement(new InstantType(\"2019-06-06T12:00:00Z\"));\n+\t\t\tobs1.setEffective(new InstantType(\"2020-06-06T12:00:00Z\"));\n+\t\t\tobsId2 = myObservationDao.create(obs1).getId().toUnqualifiedVersionless();\n+\t\t}\n+\n+\t\t// Two AND instances of 1 SP\n+\t\t{\n+\t\t\tmyCaptureQueriesListener.clear();\n+\t\t\tSearchParameterMap params = new SearchParameterMap();\n+\t\t\tparams.setLoadSynchronous(true);\n+\t\t\tparams.add(\"issued\", new DateParam(\"ge2020-06-05\"));\n+\t\t\tparams.add(\"issued\", new DateParam(\"lt2020-06-07\"));\n+\t\t\tList<IIdType> patients = toUnqualifiedVersionlessIds(myObservationDao.search(params));\n+\t\t\tassertThat(patients, contains(obsId1));\n+\t\t\tString searchQuery = myCaptureQueriesListener.getSelectQueriesForCurrentThread().get(0).getSql(true, true);\n+\t\t\tourLog.info(\"Search query:\\n{}\", searchQuery);\n+\t\t\tassertEquals(searchQuery, 1, StringUtils.countMatches(searchQuery.toLowerCase(), \"join\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1698ba7a3672a5fa1cf7b86ca18651ed9f1261c"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA0OTQ0NA==", "bodyText": "Consider adding a couple of period searches for good measure.  I'd recommend a test with two periods that overlap.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1726#discussion_r383049444", "createdAt": "2020-02-23T23:22:43Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4SearchNoFtTest.java", "diffHunk": "@@ -3258,6 +3258,73 @@ public void testSearchWithDate() {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testSearchWithDateAndReusesExistingJoin() {\n+\t\t// Add a search parameter to Observation.issued, so that between that one\n+\t\t// and the existing one on Observation.effective, we have 2 date search parameters\n+\t\t// on the same resource\n+\t\t{\n+\t\t\tSearchParameter sp = new SearchParameter();\n+\t\t\tsp.setStatus(Enumerations.PublicationStatus.ACTIVE);\n+\t\t\tsp.addBase(\"Observation\");\n+\t\t\tsp.setType(Enumerations.SearchParamType.DATE);\n+\t\t\tsp.setCode(\"issued\");\n+\t\t\tsp.setExpression(\"Observation.issued\");\n+\t\t\tmySearchParameterDao.create(sp);\n+\t\t\tmySearchParamRegistry.forceRefresh();\n+\t\t}\n+\n+\t\t// Dates are reversed on these two observations\n+\t\tIIdType obsId1;\n+\t\t{\n+\t\t\tObservation obs1 = new Observation();\n+\t\t\tobs1.setIssuedElement(new InstantType(\"2020-06-06T12:00:00Z\"));\n+\t\t\tobs1.setEffective(new InstantType(\"2019-06-06T12:00:00Z\"));\n+\t\t\tobsId1 = myObservationDao.create(obs1).getId().toUnqualifiedVersionless();\n+\t\t}\n+\t\tIIdType obsId2;\n+\t\t{\n+\t\t\tObservation obs1 = new Observation();\n+\t\t\tobs1.setIssuedElement(new InstantType(\"2019-06-06T12:00:00Z\"));\n+\t\t\tobs1.setEffective(new InstantType(\"2020-06-06T12:00:00Z\"));\n+\t\t\tobsId2 = myObservationDao.create(obs1).getId().toUnqualifiedVersionless();\n+\t\t}\n+\n+\t\t// Two AND instances of 1 SP\n+\t\t{\n+\t\t\tmyCaptureQueriesListener.clear();\n+\t\t\tSearchParameterMap params = new SearchParameterMap();\n+\t\t\tparams.setLoadSynchronous(true);\n+\t\t\tparams.add(\"issued\", new DateParam(\"ge2020-06-05\"));\n+\t\t\tparams.add(\"issued\", new DateParam(\"lt2020-06-07\"));\n+\t\t\tList<IIdType> patients = toUnqualifiedVersionlessIds(myObservationDao.search(params));\n+\t\t\tassertThat(patients, contains(obsId1));\n+\t\t\tString searchQuery = myCaptureQueriesListener.getSelectQueriesForCurrentThread().get(0).getSql(true, true);\n+\t\t\tourLog.info(\"Search query:\\n{}\", searchQuery);\n+\t\t\tassertEquals(searchQuery, 1, StringUtils.countMatches(searchQuery.toLowerCase(), \"join\"));\n+\t\t\tassertEquals(searchQuery, 1, StringUtils.countMatches(searchQuery.toLowerCase(), \"hash_identity\"));\n+\t\t\tassertEquals(searchQuery, 2, StringUtils.countMatches(searchQuery.toLowerCase(), \"sp_value_low\"));\n+\t\t}\n+\n+\t\t// Two AND instances of 1 SP and 1 instance of another\n+\t\t{\n+\t\t\tmyCaptureQueriesListener.clear();\n+\t\t\tSearchParameterMap params = new SearchParameterMap();\n+\t\t\tparams.setLoadSynchronous(true);\n+\t\t\tparams.add(\"issued\", new DateParam(\"ge2020-06-05\"));\n+\t\t\tparams.add(\"issued\", new DateParam(\"lt2020-06-07\"));\n+\t\t\tparams.add(\"date\", new DateParam(\"gt2019-06-05\"));\n+\t\t\tparams.add(\"date\", new DateParam(\"lt2019-06-07\"));\n+\t\t\tList<IIdType> patients = toUnqualifiedVersionlessIds(myObservationDao.search(params));\n+\t\t\tassertThat(patients, contains(obsId1));\n+\t\t\tString searchQuery = myCaptureQueriesListener.getSelectQueriesForCurrentThread().get(0).getSql(true, true);\n+\t\t\tourLog.info(\"Search query:\\n{}\", searchQuery);\n+\t\t\tassertEquals(searchQuery, 2, StringUtils.countMatches(searchQuery.toLowerCase(), \"join\"));\n+\t\t\tassertEquals(searchQuery, 2, StringUtils.countMatches(searchQuery.toLowerCase(), \"hash_identity\"));\n+\t\t\tassertEquals(searchQuery, 4, StringUtils.countMatches(searchQuery.toLowerCase(), \"sp_value_low\"));\n+\t\t}\n+\t}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1698ba7a3672a5fa1cf7b86ca18651ed9f1261c"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0229c0c6a442384cb8e34df7a597abb8e4936c9", "author": {"user": {"login": "jamesagnew", "name": "James Agnew"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/b0229c0c6a442384cb8e34df7a597abb8e4936c9", "committedDate": "2020-02-25T19:06:52Z", "message": "Address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c12572e7004e823435ca5cc6e982f52cfabfa92f", "author": {"user": {"login": "jamesagnew", "name": "James Agnew"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/c12572e7004e823435ca5cc6e982f52cfabfa92f", "committedDate": "2020-02-25T19:47:51Z", "message": "Add whitespace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "627032d222399b280c877a3c9d10fd0798aaa6db", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/627032d222399b280c877a3c9d10fd0798aaa6db", "committedDate": "2020-02-25T20:29:19Z", "message": "Merge remote-tracking branch 'remotes/origin/master' into ja_20200222_collapse_date_joins"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08d5e377ca3c24f020cb57de3c7aa4bd30cbd983", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/08d5e377ca3c24f020cb57de3c7aa4bd30cbd983", "committedDate": "2020-02-25T20:32:07Z", "message": "fix test"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4003, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}