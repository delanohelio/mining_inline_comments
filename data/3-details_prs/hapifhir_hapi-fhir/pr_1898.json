{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3OTk5NTU0", "number": 1898, "title": "Empi 58 no match create person", "bodyText": "$update-link NO_MATCH needs to create a new Person and link to it", "createdAt": "2020-06-04T18:02:58Z", "url": "https://github.com/hapifhir/hapi-fhir/pull/1898", "merged": true, "mergeCommit": {"oid": "eb7b8e816bb421f9145d52307c529187c10d8ca6"}, "closed": true, "closedAt": "2020-06-04T20:07:51Z", "author": {"login": "fil512"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcoB8LGgH2gAyNDI3OTk5NTU0OmIxZTRhOTM1YzRlYWNmMDg2MDkwN2IxOGM3N2M5ODc3NTE4Njk1ZDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcoC3oxAH2gAyNDI3OTk5NTU0OjFlMmZmODEzMTZkNzE3ZDk5MzdlNmQyZGFhMTdkNjYyZGRmOGUwY2I=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b1e4a935c4eacf0860907b18c77c9877518695d9", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/b1e4a935c4eacf0860907b18c77c9877518695d9", "committedDate": "2020-06-04T17:58:41Z", "message": "done"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a77f495285345e8ac0e263bd2243c23c108ce327", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/a77f495285345e8ac0e263bd2243c23c108ce327", "committedDate": "2020-06-04T18:01:58Z", "message": "pre-review cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0Njk5NTg4", "url": "https://github.com/hapifhir/hapi-fhir/pull/1898#pullrequestreview-424699588", "createdAt": "2020-06-04T18:04:39Z", "commit": {"oid": "a77f495285345e8ac0e263bd2243c23c108ce327"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxODowNDozOVrOGfRq2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxODoyODo1OVrOGfSoxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ0ODUzNg==", "bodyText": "Does this nullable annotation provide us anything here? Normally I see these on the surface of the API, not inside the impl.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1898#discussion_r435448536", "createdAt": "2020-06-04T18:04:39Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/EmpiLinkDaoSvc.java", "diffHunk": "@@ -192,4 +193,14 @@ public EmpiLink save(EmpiLink theEmpiLink) {\n    public List<EmpiLink> findEmpiLinkByExample(Example<EmpiLink> theExampleLink) {\n \t\treturn myEmpiLinkDao.findAll(theExampleLink);\n    }\n+\n+\tpublic List<EmpiLink> findEmpiLinksByTarget(Patient theTargetResource) {\n+\t\t@Nullable Long pid = myIdHelperService.getPidOrNull(theTargetResource);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a77f495285345e8ac0e263bd2243c23c108ce327"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ1ODczMQ==", "bodyText": "One thing I'm wondering with regards to transactionality. Are we sure the DB has flushed at this point? If not, is it possible that this call will just return the same existing link?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1898#discussion_r435458731", "createdAt": "2020-06-04T18:21:58Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiLinkUpdaterSvcImpl.java", "diffHunk": "@@ -98,6 +82,33 @@ public IAnyResource updateLink(IAnyResource thePerson, IAnyResource theTarget, E\n \t\tmyEmpiLinkDaoSvc.save(empiLink);\n \t\tmyEmpiLinkSvc.syncEmpiLinksToPersonLinks(thePerson, theEmpiContext);\n \t\tmyEmpiResourceDaoSvc.updatePerson(thePerson);\n+\t\tif (theMatchResult == EmpiMatchResultEnum.NO_MATCH) {\n+\t\t\t// Need to find a new Person to link this target to\n+\t\t\tmyEmpiMatchLinkSvc.updateEmpiLinksForEmpiTarget(theTarget, theEmpiContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a77f495285345e8ac0e263bd2243c23c108ce327"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ2NDA5Nw==", "bodyText": "\ud83d\udc4d for breaking this into its own function", "url": "https://github.com/hapifhir/hapi-fhir/pull/1898#discussion_r435464097", "createdAt": "2020-06-04T18:28:39Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiLinkUpdaterSvcImpl.java", "diffHunk": "@@ -98,6 +82,33 @@ public IAnyResource updateLink(IAnyResource thePerson, IAnyResource theTarget, E\n \t\tmyEmpiLinkDaoSvc.save(empiLink);\n \t\tmyEmpiLinkSvc.syncEmpiLinksToPersonLinks(thePerson, theEmpiContext);\n \t\tmyEmpiResourceDaoSvc.updatePerson(thePerson);\n+\t\tif (theMatchResult == EmpiMatchResultEnum.NO_MATCH) {\n+\t\t\t// Need to find a new Person to link this target to\n+\t\t\tmyEmpiMatchLinkSvc.updateEmpiLinksForEmpiTarget(theTarget, theEmpiContext);\n+\t\t}\n \t\treturn thePerson;\n \t}\n+\n+\tprivate void validateUpdateLinkRequest(IAnyResource thePerson, IAnyResource theTarget, EmpiMatchResultEnum theMatchResult, String theTargetType) {\n+\t\tString personType = myFhirContext.getResourceType(thePerson);\n+\t\tif (theMatchResult != EmpiMatchResultEnum.NO_MATCH &&\n+\t\ttheMatchResult != EmpiMatchResultEnum.MATCH) {\n+\t\t\tthrow new InvalidRequestException(\"Match Result may only be set to \" + EmpiMatchResultEnum.NO_MATCH + \" or \" + EmpiMatchResultEnum.MATCH);\n+\t\t}\n+\n+\t\tif (!\"Person\".equals(personType)) {\n+\t\t\tthrow new InvalidRequestException(\"First argument to updateLink must be a Person.  Was \" + personType);\n+\t\t}\n+\t\tif (!EmpiUtil.supportedTargetType(theTargetType)) {\n+\t\t\tthrow new InvalidRequestException(\"Second argument to updateLink must be a Patient or Practitioner.  Was \" + theTargetType);\n+\t\t}\n+\n+\t\tif (!EmpiUtil.isEmpiManaged(thePerson)) {\n+\t\t\tthrow new InvalidRequestException(\"Only EMPI Managed Person resources may be updated via this operation.  The Person resource provided is not tagged as managed by hapi-empi\");\n+\t\t}\n+\n+\t\tif (!EmpiUtil.isEmpiAccessible(theTarget)) {\n+\t\t\tthrow new InvalidRequestException(\"The target is marked with the \" + EmpiConstants.CODE_NO_EMPI_MANAGED + \" tag which means it may not be EMPI linked.\");\n+\t\t}\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a77f495285345e8ac0e263bd2243c23c108ce327"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ2NDM5MA==", "bodyText": "TODO?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1898#discussion_r435464390", "createdAt": "2020-06-04T18:28:59Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/svc/EmpiLinkUpdaterSvcImplTest.java", "diffHunk": "@@ -0,0 +1,9 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+import ca.uhn.fhir.jpa.empi.provider.EmpiProviderUpdateLinkR4Test;\n+\n+/**\n+ * @see EmpiProviderUpdateLinkR4Test\n+ */\n+public class EmpiLinkUpdaterSvcImplTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a77f495285345e8ac0e263bd2243c23c108ce327"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60f0f4353351b918a3aedd256e25def8ef2f1e2d", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/60f0f4353351b918a3aedd256e25def8ef2f1e2d", "committedDate": "2020-06-04T18:58:53Z", "message": "review feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e2ff81316d717d9937e6d2daa17d662ddf8e0cb", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/1e2ff81316d717d9937e6d2daa17d662ddf8e0cb", "committedDate": "2020-06-04T19:03:38Z", "message": "review feedback"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3925, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}