{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5NzczMDk5", "number": 1984, "title": "Batch empi job", "bodyText": "This introduces batch run functionality to EMPI in a similar spirit to expunge. The following operations were added:\n\n/$empi-clear: Removes all EMPI links, and related Person resources from the server.\n/$empi-submit : Run EMPI processing over all valid targets.\n/Patient/$empi-submit: Run EMPI on all Patients.\n/Patient/[id]/$empi-submit: Run EMPI on one specific Patient.\n/Practitioner/$empi-submit: Run EMPI on all Practitioners.\n/Practitioner/[id]/$empi-submit: Run EMPI on one specific Practitioner\n\nBoth the server-level and type-level $empi-submit operations support a criteria parameter, to allow FHIR-search-style filtering of the resources that will be submitted for EMPI processing. E.g.\nPOST /fhir/Patient/$empi-submit\n{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"criteria\",\n      \"valueString\": \"birthDate=2020-05-20\"\n    }\n  ]\n}\n\nThis criteria parameter is unavailable on instance-level operations. Each of these operations will return the count of resources that have been submitted to EMPI.\nDocumentation as rendered is attached", "createdAt": "2020-07-15T22:25:01Z", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984", "merged": true, "mergeCommit": {"oid": "750d693fc3e2c2396c06a7f2a8684580c5583f9a"}, "closed": true, "closedAt": "2020-08-04T20:21:26Z", "author": {"login": "tadgh"}, "timelineItems": {"totalCount": 88, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwc43VAH2gAyNDQ5NzczMDk5OjFiN2U1Yjc1ZjFmYTc1MWU3MjQyZDU4MWU1ZGU5ZGJlYjAzNDAyN2U=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc7fAfAAH2gAyNDQ5NzczMDk5OjNiOWY5ZTZjYzM5YzNjYTgwYTRlNjIwMjlmYjNmZmFhMDQyYmFlZWU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1b7e5b75f1fa751e7242d581e5de9dbeb034027e", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/1b7e5b75f1fa751e7242d581e5de9dbeb034027e", "committedDate": "2020-06-30T21:53:54Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19f3b7b1213d763bdb82a22021a3d17dfbb5a7b1", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/19f3b7b1213d763bdb82a22021a3d17dfbb5a7b1", "committedDate": "2020-07-03T17:34:45Z", "message": "Merge branch 'master' into batch-empi-job"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6259eada3c92d0975fb60449b47e4b63dfead021", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/6259eada3c92d0975fb60449b47e4b63dfead021", "committedDate": "2020-07-03T20:18:48Z", "message": "Fix parameter names. These are not partitions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25d8668f55cf15b0347e94b7178a61740dea7098", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/25d8668f55cf15b0347e94b7178a61740dea7098", "committedDate": "2020-07-03T22:21:32Z", "message": "Add Basic provider method, skeleton of tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db127ab32ffa28896a4e9557da7288f05c40d57e", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/db127ab32ffa28896a4e9557da7288f05c40d57e", "committedDate": "2020-07-06T18:01:53Z", "message": "tidy test file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f82a53e6f93cd0646a0197db95f080c2ebabdfdf", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/f82a53e6f93cd0646a0197db95f080c2ebabdfdf", "committedDate": "2020-07-06T20:12:20Z", "message": "Merge branch 'master' into batch-empi-job"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7e5705f5764883c0d487589a57f49f9fff5c8b4", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/b7e5705f5764883c0d487589a57f49f9fff5c8b4", "committedDate": "2020-07-06T21:57:28Z", "message": "Fix tests to cover other scenarios"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b402de581ad90ba49bc27cf39b27e30ca791e61", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/5b402de581ad90ba49bc27cf39b27e30ca791e61", "committedDate": "2020-07-07T14:51:41Z", "message": "Add EmpiTargetType to link"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86f276158090d000683fa3572f95738cf7aff6cb", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/86f276158090d000683fa3572f95738cf7aff6cb", "committedDate": "2020-07-07T14:52:42Z", "message": "Merge branch 'master' into batch-empi-job"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57f5c10bcaab62ea311a3d81b499397da1131c15", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/57f5c10bcaab62ea311a3d81b499397da1131c15", "committedDate": "2020-07-07T14:56:43Z", "message": "Add migration for MPI Score/TargetType"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a7e1de367e094c5220566b44230e3941e523a38", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/5a7e1de367e094c5220566b44230e3941e523a38", "committedDate": "2020-07-07T17:15:38Z", "message": "Flesh out tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3b89b4ad5a816399c494aad420294c9d10e7198", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/c3b89b4ad5a816399c494aad420294c9d10e7198", "committedDate": "2020-07-09T22:56:41Z", "message": "Get basic tests running"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "677bc5577bbb85fc308ec682082718a3afc689de", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/677bc5577bbb85fc308ec682082718a3afc689de", "committedDate": "2020-07-13T19:00:19Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d7df0cdda3bb8b0e38462455ded9ddbadc8aab6", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/9d7df0cdda3bb8b0e38462455ded9ddbadc8aab6", "committedDate": "2020-07-14T21:49:16Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80b59599fcb547abb31a118e62797cbf0854789a", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/80b59599fcb547abb31a118e62797cbf0854789a", "committedDate": "2020-07-15T19:27:49Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f965b26f0d2f31f0c3e278930c7753610e2c0a11", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/f965b26f0d2f31f0c3e278930c7753610e2c0a11", "committedDate": "2020-07-15T21:03:27Z", "message": "add more tests for criteria conversion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acd881ca76d3883853977b1dc4493b06e3e8c8d7", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/acd881ca76d3883853977b1dc4493b06e3e8c8d7", "committedDate": "2020-07-15T22:20:26Z", "message": "Adds queue submitter class, for simplicity of manual triggers of Empi Runs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31e9f140ad68cd3f5334f532c768dafb46c991b3", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/31e9f140ad68cd3f5334f532c768dafb46c991b3", "committedDate": "2020-07-16T16:48:58Z", "message": "Fix operation name. Remove unnecessary beans"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6bb92717f52a6c04a29893f5999865c30af6501c", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/6bb92717f52a6c04a29893f5999865c30af6501c", "committedDate": "2020-07-16T18:00:32Z", "message": "Merge branch 'master' into batch-empi-job"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92461b63466def1b1671f215a6167321811f035e", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/92461b63466def1b1671f215a6167321811f035e", "committedDate": "2020-07-17T16:00:15Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e12c740f64c4baa1dd069000182e74910bd45bd", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/1e12c740f64c4baa1dd069000182e74910bd45bd", "committedDate": "2020-07-17T16:28:10Z", "message": "Merge branch 'master' into batch-empi-job"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aebdef1e3fbc79ecf490c115b5430bce70007e6a", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/aebdef1e3fbc79ecf490c115b5430bce70007e6a", "committedDate": "2020-07-17T16:36:08Z", "message": "Fix import issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e540e4b0a2a82e0e1a320bb02d22ff5df51c8e71", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/e540e4b0a2a82e0e1a320bb02d22ff5df51c8e71", "committedDate": "2020-07-17T19:06:19Z", "message": "Minor addition to PointcutLatch to support an inline runnable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fec50686ec4cb535096e887677bf8193adcd2001", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/fec50686ec4cb535096e887677bf8193adcd2001", "committedDate": "2020-07-17T20:18:27Z", "message": "Forgot to unregister interceptor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fa4dd1c48aef67c027f1ff5ca24f79bc4f25a96", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/4fa4dd1c48aef67c027f1ff5ca24f79bc4f25a96", "committedDate": "2020-07-17T20:39:39Z", "message": "Update Javadocs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62b5221c3f7a12be62da97e881d2b3ee7faa46aa", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/62b5221c3f7a12be62da97e881d2b3ee7faa46aa", "committedDate": "2020-07-18T20:36:14Z", "message": "Move Empi Batch work to the BaseHapiResourceProvider, allowing manual EMPI runs on a server/type/ID basis."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b79ed2167213de0cf5fb04d581bf73d43f56c3ac", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/b79ed2167213de0cf5fb04d581bf73d43f56c3ac", "committedDate": "2020-07-18T20:36:31Z", "message": "Add forgotten bean"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de9621602b315671a3f9eba16cef3fdca827ed12", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/de9621602b315671a3f9eba16cef3fdca827ed12", "committedDate": "2020-07-19T01:18:21Z", "message": "Update provider and create test skeletons for empi batch run"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e82451533fd00686d035ae60f835efe52b4bfce3", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/e82451533fd00686d035ae60f835efe52b4bfce3", "committedDate": "2020-07-21T14:52:51Z", "message": "Move provider logic. Fix tests to reflect. Remove now-dead methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ec2be4ff59e9409b365222af2726a0f8f2d18cf", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/4ec2be4ff59e9409b365222af2726a0f8f2d18cf", "committedDate": "2020-07-21T14:54:18Z", "message": "Merge branch 'master' into batch-empi-job"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "249f5e5947e3b5486e9644bc88a07edb8f3cb787", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/249f5e5947e3b5486e9644bc88a07edb8f3cb787", "committedDate": "2020-07-21T15:51:18Z", "message": "Add two new tests. Fix non-jupiter-tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNDI3OTkx", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#pullrequestreview-453427991", "createdAt": "2020-07-22T15:23:57Z", "commit": {"oid": "249f5e5947e3b5486e9644bc88a07edb8f3cb787"}, "state": "APPROVED", "comments": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNToyMzo1N1rOG1nm6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjozNjoxMFrOG1q2_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg3NjY1MA==", "bodyText": "Smart.  I wonder if, in anticipation of MPI for arbitrary resource types, should we make this a string?  I suggest String length 40 (like ResourceTable.myResourceType)", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458876650", "createdAt": "2020-07-22T15:23:57Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/entity/EmpiLink.java", "diffHunk": "@@ -111,6 +111,9 @@ public EmpiLink(String theVersion) {\n \t\tmyVersion = theVersion;\n \t}\n \n+\t@Column(name = \"TARGET_TYPE\", nullable = true)\n+\tprivate EmpiTargetType myEmpiTargetType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249f5e5947e3b5486e9644bc88a07edb8f3cb787"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg3Nzc0MQ==", "bodyText": "Woah.  Nice!", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458877741", "createdAt": "2020-07-22T15:25:24Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/broker/EmpiMessageHandler.java", "diffHunk": "@@ -106,6 +107,9 @@ private EmpiTransactionContext createEmpiContext(ResourceModifiedMessage theMsg)\n \t\t\tcase UPDATE:\n \t\t\t\tempiOperation = EmpiTransactionContext.OperationType.UPDATE;\n \t\t\t\tbreak;\n+\t\t\tcase MANUALLY_TRIGGERED:\n+\t\t\t\tempiOperation = EmpiTransactionContext.OperationType.BATCH;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249f5e5947e3b5486e9644bc88a07edb8f3cb787"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg3OTQ2OQ==", "bodyText": "I have mixed feelings about calling this an ExpungeSvc.  Technically it's accurate, but I'm worried future devs might assume it has something to do with the FHIR expunge operation.\nIEmpiResetSvc?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458879469", "createdAt": "2020-07-22T15:27:48Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/config/EmpiConsumerConfig.java", "diffHunk": "@@ -159,6 +175,11 @@ IEmpiLinkQuerySvc empiLinkQuerySvc() {\n \t\treturn new EmpiLinkQuerySvcImpl();\n \t}\n \n+\t@Bean\n+\tIEmpiExpungeSvc empiExpungeSvc() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249f5e5947e3b5486e9644bc88a07edb8f3cb787"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg4Mzc2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * Given a Target Pid, and a match result, return all links which match these criteria.\n          \n          \n            \n            \t * Given a Target Pid, and a match result, return all links that match these criteria.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458883764", "createdAt": "2020-07-22T15:33:34Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/dao/EmpiLinkDaoSvc.java", "diffHunk": "@@ -103,6 +114,14 @@ public EmpiLink getOrCreateEmpiLinkByPersonPidAndTargetPid(Long thePersonPid, Lo\n \t\treturn myEmpiLinkDao.findOne(example);\n \t}\n \n+\t/**\n+\t * Given a Target Pid, and a match result, return all links which match these criteria.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249f5e5947e3b5486e9644bc88a07edb8f3cb787"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg4OTI2NA==", "bodyText": "for numbers that can get big, long is safer than int.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458889264", "createdAt": "2020-07-22T15:41:08Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiBatchSvcImpl.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+import ca.uhn.fhir.empi.api.IEmpiBatchService;\n+import ca.uhn.fhir.empi.api.IEmpiQueueSubmitterSvc;\n+import ca.uhn.fhir.interceptor.model.RequestPartitionId;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.jpa.dao.IResultIterator;\n+import ca.uhn.fhir.jpa.dao.ISearchBuilder;\n+import ca.uhn.fhir.jpa.dao.SearchBuilderFactory;\n+import ca.uhn.fhir.jpa.model.search.SearchRuntimeDetails;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.rest.api.server.storage.ResourcePersistentId;\n+import ca.uhn.fhir.rest.server.exceptions.InternalErrorException;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.provider.ProviderConstants;\n+import org.apache.commons.lang3.StringUtils;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class EmpiBatchSvcImpl implements IEmpiBatchService {\n+\n+\t@Autowired\n+\tprivate DaoRegistry myDaoRegistry;\n+\n+\t@Autowired\n+\tprivate EmpiSearchParamSvc myEmpiSearchParamSvc;\n+\n+\t@Autowired\n+\tprivate IEmpiQueueSubmitterSvc myEmpiQueueSubmitterSvc;\n+\n+\t@Autowired\n+\tprivate SearchBuilderFactory mySearchBuilderFactory;\n+\n+\tprivate static final int QUEUE_ADDING_PAGE_SIZE = 100;\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnAllTargetTypes(String theCriteria) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249f5e5947e3b5486e9644bc88a07edb8f3cb787"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg5MTg2MQ==", "bodyText": "as above, recommend long over int", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458891861", "createdAt": "2020-07-22T15:44:51Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiBatchSvcImpl.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+import ca.uhn.fhir.empi.api.IEmpiBatchService;\n+import ca.uhn.fhir.empi.api.IEmpiQueueSubmitterSvc;\n+import ca.uhn.fhir.interceptor.model.RequestPartitionId;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.jpa.dao.IResultIterator;\n+import ca.uhn.fhir.jpa.dao.ISearchBuilder;\n+import ca.uhn.fhir.jpa.dao.SearchBuilderFactory;\n+import ca.uhn.fhir.jpa.model.search.SearchRuntimeDetails;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.rest.api.server.storage.ResourcePersistentId;\n+import ca.uhn.fhir.rest.server.exceptions.InternalErrorException;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.provider.ProviderConstants;\n+import org.apache.commons.lang3.StringUtils;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class EmpiBatchSvcImpl implements IEmpiBatchService {\n+\n+\t@Autowired\n+\tprivate DaoRegistry myDaoRegistry;\n+\n+\t@Autowired\n+\tprivate EmpiSearchParamSvc myEmpiSearchParamSvc;\n+\n+\t@Autowired\n+\tprivate IEmpiQueueSubmitterSvc myEmpiQueueSubmitterSvc;\n+\n+\t@Autowired\n+\tprivate SearchBuilderFactory mySearchBuilderFactory;\n+\n+\tprivate static final int QUEUE_ADDING_PAGE_SIZE = 100;\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnAllTargetTypes(String theCriteria) {\n+\t\tint submittedCount = 0;\n+\t\tsubmittedCount += runEmpiOnPatientType(theCriteria);\n+\t\tsubmittedCount += runEmpiOnPractitionerType(theCriteria);\n+\t\treturn submittedCount;\n+\t}\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnTargetType(String theTargetType, String theCriteria) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249f5e5947e3b5486e9644bc88a07edb8f3cb787"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg5Mzk0NQ==", "bodyText": "What function does this if clause play?  It looks wrong to me.  Can we just remove this if and always execute the block?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458893945", "createdAt": "2020-07-22T15:47:48Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiBatchSvcImpl.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+import ca.uhn.fhir.empi.api.IEmpiBatchService;\n+import ca.uhn.fhir.empi.api.IEmpiQueueSubmitterSvc;\n+import ca.uhn.fhir.interceptor.model.RequestPartitionId;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.jpa.dao.IResultIterator;\n+import ca.uhn.fhir.jpa.dao.ISearchBuilder;\n+import ca.uhn.fhir.jpa.dao.SearchBuilderFactory;\n+import ca.uhn.fhir.jpa.model.search.SearchRuntimeDetails;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.rest.api.server.storage.ResourcePersistentId;\n+import ca.uhn.fhir.rest.server.exceptions.InternalErrorException;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.provider.ProviderConstants;\n+import org.apache.commons.lang3.StringUtils;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class EmpiBatchSvcImpl implements IEmpiBatchService {\n+\n+\t@Autowired\n+\tprivate DaoRegistry myDaoRegistry;\n+\n+\t@Autowired\n+\tprivate EmpiSearchParamSvc myEmpiSearchParamSvc;\n+\n+\t@Autowired\n+\tprivate IEmpiQueueSubmitterSvc myEmpiQueueSubmitterSvc;\n+\n+\t@Autowired\n+\tprivate SearchBuilderFactory mySearchBuilderFactory;\n+\n+\tprivate static final int QUEUE_ADDING_PAGE_SIZE = 100;\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnAllTargetTypes(String theCriteria) {\n+\t\tint submittedCount = 0;\n+\t\tsubmittedCount += runEmpiOnPatientType(theCriteria);\n+\t\tsubmittedCount += runEmpiOnPractitionerType(theCriteria);\n+\t\treturn submittedCount;\n+\t}\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnTargetType(String theTargetType, String theCriteria) {\n+\t\tresolveTargetTypeOrThrowException(theTargetType);\n+\t\tSearchParameterMap spMap = getSearchParameterMapFromCriteria(theTargetType, theCriteria);\n+\t\tspMap.setLoadSynchronousUpTo(QUEUE_ADDING_PAGE_SIZE);\n+\t\tint total = 0;\n+\t\tISearchBuilder mySearchBuilder = mySearchBuilderFactory.newSearchBuilder(myDaoRegistry.getResourceDao(theTargetType), theTargetType, Patient.class);\n+\t\tSearchRuntimeDetails searchRuntimeDetails = new SearchRuntimeDetails(null, UUID.randomUUID().toString());\n+\t\ttry (IResultIterator query = mySearchBuilder.createQuery(spMap, searchRuntimeDetails, null, RequestPartitionId.defaultPartition())) {\n+\n+\t\t\tCollection<ResourcePersistentId> pidsToSubmit = new ArrayList<>();\n+\t\t\tList<IBaseResource> resourceToBeSubmitted = new ArrayList<>();\n+\n+\t\t\twhile (query.hasNext()) {\n+\t\t\t\tpidsToSubmit.add(query.next());\n+\t\t\t\tif (pidsToSubmit.size() == QUEUE_ADDING_PAGE_SIZE || !query.hasNext()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249f5e5947e3b5486e9644bc88a07edb8f3cb787"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg5NTI4Mg==", "bodyText": "Not clear what's \"manual\" about this...", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458895282", "createdAt": "2020-07-22T15:49:42Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiBatchSvcImpl.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+import ca.uhn.fhir.empi.api.IEmpiBatchService;\n+import ca.uhn.fhir.empi.api.IEmpiQueueSubmitterSvc;\n+import ca.uhn.fhir.interceptor.model.RequestPartitionId;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.jpa.dao.IResultIterator;\n+import ca.uhn.fhir.jpa.dao.ISearchBuilder;\n+import ca.uhn.fhir.jpa.dao.SearchBuilderFactory;\n+import ca.uhn.fhir.jpa.model.search.SearchRuntimeDetails;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.rest.api.server.storage.ResourcePersistentId;\n+import ca.uhn.fhir.rest.server.exceptions.InternalErrorException;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.provider.ProviderConstants;\n+import org.apache.commons.lang3.StringUtils;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class EmpiBatchSvcImpl implements IEmpiBatchService {\n+\n+\t@Autowired\n+\tprivate DaoRegistry myDaoRegistry;\n+\n+\t@Autowired\n+\tprivate EmpiSearchParamSvc myEmpiSearchParamSvc;\n+\n+\t@Autowired\n+\tprivate IEmpiQueueSubmitterSvc myEmpiQueueSubmitterSvc;\n+\n+\t@Autowired\n+\tprivate SearchBuilderFactory mySearchBuilderFactory;\n+\n+\tprivate static final int QUEUE_ADDING_PAGE_SIZE = 100;\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnAllTargetTypes(String theCriteria) {\n+\t\tint submittedCount = 0;\n+\t\tsubmittedCount += runEmpiOnPatientType(theCriteria);\n+\t\tsubmittedCount += runEmpiOnPractitionerType(theCriteria);\n+\t\treturn submittedCount;\n+\t}\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnTargetType(String theTargetType, String theCriteria) {\n+\t\tresolveTargetTypeOrThrowException(theTargetType);\n+\t\tSearchParameterMap spMap = getSearchParameterMapFromCriteria(theTargetType, theCriteria);\n+\t\tspMap.setLoadSynchronousUpTo(QUEUE_ADDING_PAGE_SIZE);\n+\t\tint total = 0;\n+\t\tISearchBuilder mySearchBuilder = mySearchBuilderFactory.newSearchBuilder(myDaoRegistry.getResourceDao(theTargetType), theTargetType, Patient.class);\n+\t\tSearchRuntimeDetails searchRuntimeDetails = new SearchRuntimeDetails(null, UUID.randomUUID().toString());\n+\t\ttry (IResultIterator query = mySearchBuilder.createQuery(spMap, searchRuntimeDetails, null, RequestPartitionId.defaultPartition())) {\n+\n+\t\t\tCollection<ResourcePersistentId> pidsToSubmit = new ArrayList<>();\n+\t\t\tList<IBaseResource> resourceToBeSubmitted = new ArrayList<>();\n+\n+\t\t\twhile (query.hasNext()) {\n+\t\t\t\tpidsToSubmit.add(query.next());\n+\t\t\t\tif (pidsToSubmit.size() == QUEUE_ADDING_PAGE_SIZE || !query.hasNext()) {\n+\t\t\t\t\ttotal = loadResourcesAndSubmitToEmpi(total, mySearchBuilder, pidsToSubmit, resourceToBeSubmitted);\n+\t\t\t\t\tresourceToBeSubmitted.clear();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (IOException theE) {\n+\t\t\tthrow new InternalErrorException(\"Failure while attempting to query resources for \" + ProviderConstants.OPERATION_EMPI_BATCH_RUN, theE);\n+\t\t}\n+\t\treturn total;\n+\t}\n+\n+\tprivate int loadResourcesAndSubmitToEmpi(int theTotal, ISearchBuilder theMySearchBuilder, Collection<ResourcePersistentId> thePidsToSubmit, List<IBaseResource> theResourceToBeSubmitted) {\n+\t\t//TODO GGG ask ken how this works. specifically includePids?\n+\t\ttheMySearchBuilder.loadResourcesByPid(thePidsToSubmit, thePidsToSubmit, theResourceToBeSubmitted, false, null);\n+\t\ttheResourceToBeSubmitted\n+\t\t\t.forEach(resource -> myEmpiQueueSubmitterSvc.manuallySubmitResourceToEmpi(resource));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249f5e5947e3b5486e9644bc88a07edb8f3cb787"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkwMTc3Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate int loadResourcesAndSubmitToEmpi(int theTotal, ISearchBuilder theMySearchBuilder, Collection<ResourcePersistentId> thePidsToSubmit, List<IBaseResource> theResourceToBeSubmitted) {\n          \n          \n            \n            \tprivate int loadResourcesAndSubmitToEmpi(int theTotal, ISearchBuilder theSearchBuilder, Collection<ResourcePersistentId> thePidsToSubmit, List<IBaseResource> theResourcesToBeSubmitted) {", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458901777", "createdAt": "2020-07-22T15:58:47Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiBatchSvcImpl.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+import ca.uhn.fhir.empi.api.IEmpiBatchService;\n+import ca.uhn.fhir.empi.api.IEmpiQueueSubmitterSvc;\n+import ca.uhn.fhir.interceptor.model.RequestPartitionId;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.jpa.dao.IResultIterator;\n+import ca.uhn.fhir.jpa.dao.ISearchBuilder;\n+import ca.uhn.fhir.jpa.dao.SearchBuilderFactory;\n+import ca.uhn.fhir.jpa.model.search.SearchRuntimeDetails;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.rest.api.server.storage.ResourcePersistentId;\n+import ca.uhn.fhir.rest.server.exceptions.InternalErrorException;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.provider.ProviderConstants;\n+import org.apache.commons.lang3.StringUtils;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class EmpiBatchSvcImpl implements IEmpiBatchService {\n+\n+\t@Autowired\n+\tprivate DaoRegistry myDaoRegistry;\n+\n+\t@Autowired\n+\tprivate EmpiSearchParamSvc myEmpiSearchParamSvc;\n+\n+\t@Autowired\n+\tprivate IEmpiQueueSubmitterSvc myEmpiQueueSubmitterSvc;\n+\n+\t@Autowired\n+\tprivate SearchBuilderFactory mySearchBuilderFactory;\n+\n+\tprivate static final int QUEUE_ADDING_PAGE_SIZE = 100;\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnAllTargetTypes(String theCriteria) {\n+\t\tint submittedCount = 0;\n+\t\tsubmittedCount += runEmpiOnPatientType(theCriteria);\n+\t\tsubmittedCount += runEmpiOnPractitionerType(theCriteria);\n+\t\treturn submittedCount;\n+\t}\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnTargetType(String theTargetType, String theCriteria) {\n+\t\tresolveTargetTypeOrThrowException(theTargetType);\n+\t\tSearchParameterMap spMap = getSearchParameterMapFromCriteria(theTargetType, theCriteria);\n+\t\tspMap.setLoadSynchronousUpTo(QUEUE_ADDING_PAGE_SIZE);\n+\t\tint total = 0;\n+\t\tISearchBuilder mySearchBuilder = mySearchBuilderFactory.newSearchBuilder(myDaoRegistry.getResourceDao(theTargetType), theTargetType, Patient.class);\n+\t\tSearchRuntimeDetails searchRuntimeDetails = new SearchRuntimeDetails(null, UUID.randomUUID().toString());\n+\t\ttry (IResultIterator query = mySearchBuilder.createQuery(spMap, searchRuntimeDetails, null, RequestPartitionId.defaultPartition())) {\n+\n+\t\t\tCollection<ResourcePersistentId> pidsToSubmit = new ArrayList<>();\n+\t\t\tList<IBaseResource> resourceToBeSubmitted = new ArrayList<>();\n+\n+\t\t\twhile (query.hasNext()) {\n+\t\t\t\tpidsToSubmit.add(query.next());\n+\t\t\t\tif (pidsToSubmit.size() == QUEUE_ADDING_PAGE_SIZE || !query.hasNext()) {\n+\t\t\t\t\ttotal = loadResourcesAndSubmitToEmpi(total, mySearchBuilder, pidsToSubmit, resourceToBeSubmitted);\n+\t\t\t\t\tresourceToBeSubmitted.clear();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (IOException theE) {\n+\t\t\tthrow new InternalErrorException(\"Failure while attempting to query resources for \" + ProviderConstants.OPERATION_EMPI_BATCH_RUN, theE);\n+\t\t}\n+\t\treturn total;\n+\t}\n+\n+\tprivate int loadResourcesAndSubmitToEmpi(int theTotal, ISearchBuilder theMySearchBuilder, Collection<ResourcePersistentId> thePidsToSubmit, List<IBaseResource> theResourceToBeSubmitted) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249f5e5947e3b5486e9644bc88a07edb8f3cb787"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkwMzUxOA==", "bodyText": "Should be able to drop theTargetType here.  IIdType should include the resource type", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458903518", "createdAt": "2020-07-22T16:01:17Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiBatchSvcImpl.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+import ca.uhn.fhir.empi.api.IEmpiBatchService;\n+import ca.uhn.fhir.empi.api.IEmpiQueueSubmitterSvc;\n+import ca.uhn.fhir.interceptor.model.RequestPartitionId;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.jpa.dao.IResultIterator;\n+import ca.uhn.fhir.jpa.dao.ISearchBuilder;\n+import ca.uhn.fhir.jpa.dao.SearchBuilderFactory;\n+import ca.uhn.fhir.jpa.model.search.SearchRuntimeDetails;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.rest.api.server.storage.ResourcePersistentId;\n+import ca.uhn.fhir.rest.server.exceptions.InternalErrorException;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.provider.ProviderConstants;\n+import org.apache.commons.lang3.StringUtils;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class EmpiBatchSvcImpl implements IEmpiBatchService {\n+\n+\t@Autowired\n+\tprivate DaoRegistry myDaoRegistry;\n+\n+\t@Autowired\n+\tprivate EmpiSearchParamSvc myEmpiSearchParamSvc;\n+\n+\t@Autowired\n+\tprivate IEmpiQueueSubmitterSvc myEmpiQueueSubmitterSvc;\n+\n+\t@Autowired\n+\tprivate SearchBuilderFactory mySearchBuilderFactory;\n+\n+\tprivate static final int QUEUE_ADDING_PAGE_SIZE = 100;\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnAllTargetTypes(String theCriteria) {\n+\t\tint submittedCount = 0;\n+\t\tsubmittedCount += runEmpiOnPatientType(theCriteria);\n+\t\tsubmittedCount += runEmpiOnPractitionerType(theCriteria);\n+\t\treturn submittedCount;\n+\t}\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnTargetType(String theTargetType, String theCriteria) {\n+\t\tresolveTargetTypeOrThrowException(theTargetType);\n+\t\tSearchParameterMap spMap = getSearchParameterMapFromCriteria(theTargetType, theCriteria);\n+\t\tspMap.setLoadSynchronousUpTo(QUEUE_ADDING_PAGE_SIZE);\n+\t\tint total = 0;\n+\t\tISearchBuilder mySearchBuilder = mySearchBuilderFactory.newSearchBuilder(myDaoRegistry.getResourceDao(theTargetType), theTargetType, Patient.class);\n+\t\tSearchRuntimeDetails searchRuntimeDetails = new SearchRuntimeDetails(null, UUID.randomUUID().toString());\n+\t\ttry (IResultIterator query = mySearchBuilder.createQuery(spMap, searchRuntimeDetails, null, RequestPartitionId.defaultPartition())) {\n+\n+\t\t\tCollection<ResourcePersistentId> pidsToSubmit = new ArrayList<>();\n+\t\t\tList<IBaseResource> resourceToBeSubmitted = new ArrayList<>();\n+\n+\t\t\twhile (query.hasNext()) {\n+\t\t\t\tpidsToSubmit.add(query.next());\n+\t\t\t\tif (pidsToSubmit.size() == QUEUE_ADDING_PAGE_SIZE || !query.hasNext()) {\n+\t\t\t\t\ttotal = loadResourcesAndSubmitToEmpi(total, mySearchBuilder, pidsToSubmit, resourceToBeSubmitted);\n+\t\t\t\t\tresourceToBeSubmitted.clear();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (IOException theE) {\n+\t\t\tthrow new InternalErrorException(\"Failure while attempting to query resources for \" + ProviderConstants.OPERATION_EMPI_BATCH_RUN, theE);\n+\t\t}\n+\t\treturn total;\n+\t}\n+\n+\tprivate int loadResourcesAndSubmitToEmpi(int theTotal, ISearchBuilder theMySearchBuilder, Collection<ResourcePersistentId> thePidsToSubmit, List<IBaseResource> theResourceToBeSubmitted) {\n+\t\t//TODO GGG ask ken how this works. specifically includePids?\n+\t\ttheMySearchBuilder.loadResourcesByPid(thePidsToSubmit, thePidsToSubmit, theResourceToBeSubmitted, false, null);\n+\t\ttheResourceToBeSubmitted\n+\t\t\t.forEach(resource -> myEmpiQueueSubmitterSvc.manuallySubmitResourceToEmpi(resource));\n+\t\ttheTotal += theResourceToBeSubmitted.size();\n+\t\treturn theTotal;\n+\t}\n+\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnPractitionerType(String theCriteria) {\n+\t\treturn runEmpiOnTargetType(\"Practitioner\", theCriteria);\n+\t}\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnPatientType(String theCriteria) {\n+\t\treturn runEmpiOnTargetType(\"Patient\", theCriteria);\n+\t}\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnTarget(IIdType theId, String theTargetType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249f5e5947e3b5486e9644bc88a07edb8f3cb787"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkwNDE4Mw==", "bodyText": "maybe move this logic right into myEmpiSearchParamSvc.mapFromCriteria  and remove this method?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458904183", "createdAt": "2020-07-22T16:02:23Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiBatchSvcImpl.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+import ca.uhn.fhir.empi.api.IEmpiBatchService;\n+import ca.uhn.fhir.empi.api.IEmpiQueueSubmitterSvc;\n+import ca.uhn.fhir.interceptor.model.RequestPartitionId;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.jpa.dao.IResultIterator;\n+import ca.uhn.fhir.jpa.dao.ISearchBuilder;\n+import ca.uhn.fhir.jpa.dao.SearchBuilderFactory;\n+import ca.uhn.fhir.jpa.model.search.SearchRuntimeDetails;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.rest.api.server.storage.ResourcePersistentId;\n+import ca.uhn.fhir.rest.server.exceptions.InternalErrorException;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.provider.ProviderConstants;\n+import org.apache.commons.lang3.StringUtils;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class EmpiBatchSvcImpl implements IEmpiBatchService {\n+\n+\t@Autowired\n+\tprivate DaoRegistry myDaoRegistry;\n+\n+\t@Autowired\n+\tprivate EmpiSearchParamSvc myEmpiSearchParamSvc;\n+\n+\t@Autowired\n+\tprivate IEmpiQueueSubmitterSvc myEmpiQueueSubmitterSvc;\n+\n+\t@Autowired\n+\tprivate SearchBuilderFactory mySearchBuilderFactory;\n+\n+\tprivate static final int QUEUE_ADDING_PAGE_SIZE = 100;\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnAllTargetTypes(String theCriteria) {\n+\t\tint submittedCount = 0;\n+\t\tsubmittedCount += runEmpiOnPatientType(theCriteria);\n+\t\tsubmittedCount += runEmpiOnPractitionerType(theCriteria);\n+\t\treturn submittedCount;\n+\t}\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnTargetType(String theTargetType, String theCriteria) {\n+\t\tresolveTargetTypeOrThrowException(theTargetType);\n+\t\tSearchParameterMap spMap = getSearchParameterMapFromCriteria(theTargetType, theCriteria);\n+\t\tspMap.setLoadSynchronousUpTo(QUEUE_ADDING_PAGE_SIZE);\n+\t\tint total = 0;\n+\t\tISearchBuilder mySearchBuilder = mySearchBuilderFactory.newSearchBuilder(myDaoRegistry.getResourceDao(theTargetType), theTargetType, Patient.class);\n+\t\tSearchRuntimeDetails searchRuntimeDetails = new SearchRuntimeDetails(null, UUID.randomUUID().toString());\n+\t\ttry (IResultIterator query = mySearchBuilder.createQuery(spMap, searchRuntimeDetails, null, RequestPartitionId.defaultPartition())) {\n+\n+\t\t\tCollection<ResourcePersistentId> pidsToSubmit = new ArrayList<>();\n+\t\t\tList<IBaseResource> resourceToBeSubmitted = new ArrayList<>();\n+\n+\t\t\twhile (query.hasNext()) {\n+\t\t\t\tpidsToSubmit.add(query.next());\n+\t\t\t\tif (pidsToSubmit.size() == QUEUE_ADDING_PAGE_SIZE || !query.hasNext()) {\n+\t\t\t\t\ttotal = loadResourcesAndSubmitToEmpi(total, mySearchBuilder, pidsToSubmit, resourceToBeSubmitted);\n+\t\t\t\t\tresourceToBeSubmitted.clear();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (IOException theE) {\n+\t\t\tthrow new InternalErrorException(\"Failure while attempting to query resources for \" + ProviderConstants.OPERATION_EMPI_BATCH_RUN, theE);\n+\t\t}\n+\t\treturn total;\n+\t}\n+\n+\tprivate int loadResourcesAndSubmitToEmpi(int theTotal, ISearchBuilder theMySearchBuilder, Collection<ResourcePersistentId> thePidsToSubmit, List<IBaseResource> theResourceToBeSubmitted) {\n+\t\t//TODO GGG ask ken how this works. specifically includePids?\n+\t\ttheMySearchBuilder.loadResourcesByPid(thePidsToSubmit, thePidsToSubmit, theResourceToBeSubmitted, false, null);\n+\t\ttheResourceToBeSubmitted\n+\t\t\t.forEach(resource -> myEmpiQueueSubmitterSvc.manuallySubmitResourceToEmpi(resource));\n+\t\ttheTotal += theResourceToBeSubmitted.size();\n+\t\treturn theTotal;\n+\t}\n+\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnPractitionerType(String theCriteria) {\n+\t\treturn runEmpiOnTargetType(\"Practitioner\", theCriteria);\n+\t}\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnPatientType(String theCriteria) {\n+\t\treturn runEmpiOnTargetType(\"Patient\", theCriteria);\n+\t}\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnTarget(IIdType theId, String theTargetType) {\n+\t\tIFhirResourceDao resourceDao = myDaoRegistry.getResourceDao(theTargetType);\n+\t\tIBaseResource read = resourceDao.read(theId);\n+\t\tmyEmpiQueueSubmitterSvc.manuallySubmitResourceToEmpi(read);\n+\t\treturn 1;\n+\t}\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnTargetPractitioner(IIdType theId) {\n+\t\treturn runEmpiOnTarget(theId, \"Practitioner\");\n+\t}\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnTargetPatient(IIdType theId) {\n+\t\treturn runEmpiOnTarget(theId, \"Patient\");\n+\t}\n+\n+\tprivate SearchParameterMap getSearchParameterMapFromCriteria(String theTargetType, String theCriteria) {\n+\t\tSearchParameterMap spMap;\n+\t\tif (!StringUtils.isBlank(theCriteria)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249f5e5947e3b5486e9644bc88a07edb8f3cb787"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkwNTAyMQ==", "bodyText": "use EmpiUtil.supportedTargetType()", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458905021", "createdAt": "2020-07-22T16:03:41Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiBatchSvcImpl.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+import ca.uhn.fhir.empi.api.IEmpiBatchService;\n+import ca.uhn.fhir.empi.api.IEmpiQueueSubmitterSvc;\n+import ca.uhn.fhir.interceptor.model.RequestPartitionId;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.jpa.dao.IResultIterator;\n+import ca.uhn.fhir.jpa.dao.ISearchBuilder;\n+import ca.uhn.fhir.jpa.dao.SearchBuilderFactory;\n+import ca.uhn.fhir.jpa.model.search.SearchRuntimeDetails;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.rest.api.server.storage.ResourcePersistentId;\n+import ca.uhn.fhir.rest.server.exceptions.InternalErrorException;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.provider.ProviderConstants;\n+import org.apache.commons.lang3.StringUtils;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class EmpiBatchSvcImpl implements IEmpiBatchService {\n+\n+\t@Autowired\n+\tprivate DaoRegistry myDaoRegistry;\n+\n+\t@Autowired\n+\tprivate EmpiSearchParamSvc myEmpiSearchParamSvc;\n+\n+\t@Autowired\n+\tprivate IEmpiQueueSubmitterSvc myEmpiQueueSubmitterSvc;\n+\n+\t@Autowired\n+\tprivate SearchBuilderFactory mySearchBuilderFactory;\n+\n+\tprivate static final int QUEUE_ADDING_PAGE_SIZE = 100;\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnAllTargetTypes(String theCriteria) {\n+\t\tint submittedCount = 0;\n+\t\tsubmittedCount += runEmpiOnPatientType(theCriteria);\n+\t\tsubmittedCount += runEmpiOnPractitionerType(theCriteria);\n+\t\treturn submittedCount;\n+\t}\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnTargetType(String theTargetType, String theCriteria) {\n+\t\tresolveTargetTypeOrThrowException(theTargetType);\n+\t\tSearchParameterMap spMap = getSearchParameterMapFromCriteria(theTargetType, theCriteria);\n+\t\tspMap.setLoadSynchronousUpTo(QUEUE_ADDING_PAGE_SIZE);\n+\t\tint total = 0;\n+\t\tISearchBuilder mySearchBuilder = mySearchBuilderFactory.newSearchBuilder(myDaoRegistry.getResourceDao(theTargetType), theTargetType, Patient.class);\n+\t\tSearchRuntimeDetails searchRuntimeDetails = new SearchRuntimeDetails(null, UUID.randomUUID().toString());\n+\t\ttry (IResultIterator query = mySearchBuilder.createQuery(spMap, searchRuntimeDetails, null, RequestPartitionId.defaultPartition())) {\n+\n+\t\t\tCollection<ResourcePersistentId> pidsToSubmit = new ArrayList<>();\n+\t\t\tList<IBaseResource> resourceToBeSubmitted = new ArrayList<>();\n+\n+\t\t\twhile (query.hasNext()) {\n+\t\t\t\tpidsToSubmit.add(query.next());\n+\t\t\t\tif (pidsToSubmit.size() == QUEUE_ADDING_PAGE_SIZE || !query.hasNext()) {\n+\t\t\t\t\ttotal = loadResourcesAndSubmitToEmpi(total, mySearchBuilder, pidsToSubmit, resourceToBeSubmitted);\n+\t\t\t\t\tresourceToBeSubmitted.clear();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (IOException theE) {\n+\t\t\tthrow new InternalErrorException(\"Failure while attempting to query resources for \" + ProviderConstants.OPERATION_EMPI_BATCH_RUN, theE);\n+\t\t}\n+\t\treturn total;\n+\t}\n+\n+\tprivate int loadResourcesAndSubmitToEmpi(int theTotal, ISearchBuilder theMySearchBuilder, Collection<ResourcePersistentId> thePidsToSubmit, List<IBaseResource> theResourceToBeSubmitted) {\n+\t\t//TODO GGG ask ken how this works. specifically includePids?\n+\t\ttheMySearchBuilder.loadResourcesByPid(thePidsToSubmit, thePidsToSubmit, theResourceToBeSubmitted, false, null);\n+\t\ttheResourceToBeSubmitted\n+\t\t\t.forEach(resource -> myEmpiQueueSubmitterSvc.manuallySubmitResourceToEmpi(resource));\n+\t\ttheTotal += theResourceToBeSubmitted.size();\n+\t\treturn theTotal;\n+\t}\n+\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnPractitionerType(String theCriteria) {\n+\t\treturn runEmpiOnTargetType(\"Practitioner\", theCriteria);\n+\t}\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnPatientType(String theCriteria) {\n+\t\treturn runEmpiOnTargetType(\"Patient\", theCriteria);\n+\t}\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnTarget(IIdType theId, String theTargetType) {\n+\t\tIFhirResourceDao resourceDao = myDaoRegistry.getResourceDao(theTargetType);\n+\t\tIBaseResource read = resourceDao.read(theId);\n+\t\tmyEmpiQueueSubmitterSvc.manuallySubmitResourceToEmpi(read);\n+\t\treturn 1;\n+\t}\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnTargetPractitioner(IIdType theId) {\n+\t\treturn runEmpiOnTarget(theId, \"Practitioner\");\n+\t}\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnTargetPatient(IIdType theId) {\n+\t\treturn runEmpiOnTarget(theId, \"Patient\");\n+\t}\n+\n+\tprivate SearchParameterMap getSearchParameterMapFromCriteria(String theTargetType, String theCriteria) {\n+\t\tSearchParameterMap spMap;\n+\t\tif (!StringUtils.isBlank(theCriteria)) {\n+\t\t\tspMap = myEmpiSearchParamSvc.mapFromCriteria(theTargetType, theCriteria);\n+\t\t} else {\n+\t\t\tspMap = new SearchParameterMap();\n+\t\t}\n+\t\treturn spMap;\n+\t}\n+\n+\tprivate void resolveTargetTypeOrThrowException(String theResourceType) {\n+\t\tif (!theResourceType.equalsIgnoreCase(\"Patient\") && !theResourceType.equalsIgnoreCase(\"Practitioner\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249f5e5947e3b5486e9644bc88a07edb8f3cb787"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkwNTYzMw==", "bodyText": "I like this method name :-)", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458905633", "createdAt": "2020-07-22T16:04:37Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiExpungeSvcImpl.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR JPA Server - Enterprise Master Patient Index\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.empi.api.IEmpiExpungeSvc;\n+import ca.uhn.fhir.jpa.dao.expunge.IResourceExpungeService;\n+import ca.uhn.fhir.jpa.empi.dao.EmpiLinkDaoSvc;\n+import ca.uhn.fhir.jpa.entity.EmpiTargetType;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.provider.ProviderConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * This class is in charge of Clearing out existing EMPI links, as well as deleting all persons related to those EMPI Links.\n+ *\n+ */\n+public class EmpiExpungeSvcImpl implements IEmpiExpungeSvc {\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(EmpiExpungeSvcImpl.class);\n+\n+\t@Autowired\n+\tEmpiLinkDaoSvc myEmpiLinkDaoSvc;\n+\n+\t@Autowired\n+\tprivate IResourceExpungeService myResourceExpungeService;\n+\n+\n+\t@Override\n+\tpublic void expungeEmpiLinks(String theResourceType) {\n+\t\tEmpiTargetType targetType = getTargetTypeOrThrowException(theResourceType);\n+\t\tList<Long> longs = myEmpiLinkDaoSvc.deleteAllEmpiLinksOfTypeAndReturnPersonPids(targetType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249f5e5947e3b5486e9644bc88a07edb8f3cb787"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkwOTA4NA==", "bodyText": "expungeAllEmpiLinks() ?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458909084", "createdAt": "2020-07-22T16:09:37Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiExpungeSvcImpl.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR JPA Server - Enterprise Master Patient Index\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.empi.api.IEmpiExpungeSvc;\n+import ca.uhn.fhir.jpa.dao.expunge.IResourceExpungeService;\n+import ca.uhn.fhir.jpa.empi.dao.EmpiLinkDaoSvc;\n+import ca.uhn.fhir.jpa.entity.EmpiTargetType;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.provider.ProviderConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * This class is in charge of Clearing out existing EMPI links, as well as deleting all persons related to those EMPI Links.\n+ *\n+ */\n+public class EmpiExpungeSvcImpl implements IEmpiExpungeSvc {\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(EmpiExpungeSvcImpl.class);\n+\n+\t@Autowired\n+\tEmpiLinkDaoSvc myEmpiLinkDaoSvc;\n+\n+\t@Autowired\n+\tprivate IResourceExpungeService myResourceExpungeService;\n+\n+\n+\t@Override\n+\tpublic void expungeEmpiLinks(String theResourceType) {\n+\t\tEmpiTargetType targetType = getTargetTypeOrThrowException(theResourceType);\n+\t\tList<Long> longs = myEmpiLinkDaoSvc.deleteAllEmpiLinksOfTypeAndReturnPersonPids(targetType);\n+\t\tmyResourceExpungeService.expungeCurrentVersionOfResources(null, longs, new AtomicInteger(longs.size()));\n+\t}\n+\n+\tprivate EmpiTargetType getTargetTypeOrThrowException(String theResourceType) {\n+\t\tif (theResourceType.equalsIgnoreCase(\"Patient\")) {\n+\t\t\treturn EmpiTargetType.PATIENT;\n+\t\t} else if(theResourceType.equalsIgnoreCase(\"Practitioner\")) {\n+\t\t\treturn EmpiTargetType.PRACTITIONER;\n+\t\t} else {\n+\t\t\tthrow new InvalidRequestException(ProviderConstants.EMPI_CLEAR + \" does not support resource type: \" + theResourceType);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void expungeEmpiLinks() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249f5e5947e3b5486e9644bc88a07edb8f3cb787"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxMDI3OQ==", "bodyText": "This might not scale when we move to other resource types, but for Person it's totally fine.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458910279", "createdAt": "2020-07-22T16:11:20Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiExpungeSvcImpl.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR JPA Server - Enterprise Master Patient Index\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.empi.api.IEmpiExpungeSvc;\n+import ca.uhn.fhir.jpa.dao.expunge.IResourceExpungeService;\n+import ca.uhn.fhir.jpa.empi.dao.EmpiLinkDaoSvc;\n+import ca.uhn.fhir.jpa.entity.EmpiTargetType;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.provider.ProviderConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * This class is in charge of Clearing out existing EMPI links, as well as deleting all persons related to those EMPI Links.\n+ *\n+ */\n+public class EmpiExpungeSvcImpl implements IEmpiExpungeSvc {\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(EmpiExpungeSvcImpl.class);\n+\n+\t@Autowired\n+\tEmpiLinkDaoSvc myEmpiLinkDaoSvc;\n+\n+\t@Autowired\n+\tprivate IResourceExpungeService myResourceExpungeService;\n+\n+\n+\t@Override\n+\tpublic void expungeEmpiLinks(String theResourceType) {\n+\t\tEmpiTargetType targetType = getTargetTypeOrThrowException(theResourceType);\n+\t\tList<Long> longs = myEmpiLinkDaoSvc.deleteAllEmpiLinksOfTypeAndReturnPersonPids(targetType);\n+\t\tmyResourceExpungeService.expungeCurrentVersionOfResources(null, longs, new AtomicInteger(longs.size()));\n+\t}\n+\n+\tprivate EmpiTargetType getTargetTypeOrThrowException(String theResourceType) {\n+\t\tif (theResourceType.equalsIgnoreCase(\"Patient\")) {\n+\t\t\treturn EmpiTargetType.PATIENT;\n+\t\t} else if(theResourceType.equalsIgnoreCase(\"Practitioner\")) {\n+\t\t\treturn EmpiTargetType.PRACTITIONER;\n+\t\t} else {\n+\t\t\tthrow new InvalidRequestException(ProviderConstants.EMPI_CLEAR + \" does not support resource type: \" + theResourceType);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void expungeEmpiLinks() {\n+\t\tList<Long> longs = myEmpiLinkDaoSvc.deleteAllEmpiLinksAndReturnPersonPids();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249f5e5947e3b5486e9644bc88a07edb8f3cb787"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxMjE1Mw==", "bodyText": "Nice reuse of MANUALLY_TRIGGERED.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458912153", "createdAt": "2020-07-22T16:14:03Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiQueueSubmitterSvcImpl.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.empi.api.IEmpiQueueSubmitterSvc;\n+import ca.uhn.fhir.jpa.subscription.channel.api.ChannelProducerSettings;\n+import ca.uhn.fhir.jpa.subscription.channel.api.IChannelFactory;\n+import ca.uhn.fhir.jpa.subscription.channel.subscription.IChannelNamer;\n+import ca.uhn.fhir.jpa.subscription.model.ResourceModifiedJsonMessage;\n+import ca.uhn.fhir.jpa.subscription.model.ResourceModifiedMessage;\n+import org.hl7.fhir.instance.model.api.IAnyResource;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.messaging.MessageChannel;\n+\n+import javax.annotation.PostConstruct;\n+\n+import static ca.uhn.fhir.empi.api.IEmpiSettings.EMPI_CHANNEL_NAME;\n+\n+/**\n+ * This class is responsible for manual submissions of {@link IAnyResource} resources onto the Empi Queue.\n+ */\n+public class EmpiQueueSubmitterSvcImpl implements IEmpiQueueSubmitterSvc {\n+\t@Autowired\n+\tprivate IChannelNamer myChannelNamer;\n+\n+\tprivate MessageChannel myEmpiChannelProducer;\n+\n+\t@Autowired\n+\tprivate FhirContext myFhirContext;\n+\n+\t@Autowired\n+\tprivate IChannelFactory myChannelFactory;\n+\n+\t@Override\n+\tpublic void manuallySubmitResourceToEmpi(IBaseResource theResource) {\n+\t\tResourceModifiedJsonMessage resourceModifiedJsonMessage = new ResourceModifiedJsonMessage();\n+\t\tResourceModifiedMessage resourceModifiedMessage = new ResourceModifiedMessage(myFhirContext, theResource, ResourceModifiedMessage.OperationTypeEnum.MANUALLY_TRIGGERED);\n+\t\tresourceModifiedMessage.setOperationType(ResourceModifiedMessage.OperationTypeEnum.MANUALLY_TRIGGERED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249f5e5947e3b5486e9644bc88a07edb8f3cb787"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxMzAwNw==", "bodyText": "Rather than @PostConstruct initializing this, can you lazy load it?  95% of installations will never use this.  Some installations do not have a broker.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458913007", "createdAt": "2020-07-22T16:15:16Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiQueueSubmitterSvcImpl.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.empi.api.IEmpiQueueSubmitterSvc;\n+import ca.uhn.fhir.jpa.subscription.channel.api.ChannelProducerSettings;\n+import ca.uhn.fhir.jpa.subscription.channel.api.IChannelFactory;\n+import ca.uhn.fhir.jpa.subscription.channel.subscription.IChannelNamer;\n+import ca.uhn.fhir.jpa.subscription.model.ResourceModifiedJsonMessage;\n+import ca.uhn.fhir.jpa.subscription.model.ResourceModifiedMessage;\n+import org.hl7.fhir.instance.model.api.IAnyResource;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.messaging.MessageChannel;\n+\n+import javax.annotation.PostConstruct;\n+\n+import static ca.uhn.fhir.empi.api.IEmpiSettings.EMPI_CHANNEL_NAME;\n+\n+/**\n+ * This class is responsible for manual submissions of {@link IAnyResource} resources onto the Empi Queue.\n+ */\n+public class EmpiQueueSubmitterSvcImpl implements IEmpiQueueSubmitterSvc {\n+\t@Autowired\n+\tprivate IChannelNamer myChannelNamer;\n+\n+\tprivate MessageChannel myEmpiChannelProducer;\n+\n+\t@Autowired\n+\tprivate FhirContext myFhirContext;\n+\n+\t@Autowired\n+\tprivate IChannelFactory myChannelFactory;\n+\n+\t@Override\n+\tpublic void manuallySubmitResourceToEmpi(IBaseResource theResource) {\n+\t\tResourceModifiedJsonMessage resourceModifiedJsonMessage = new ResourceModifiedJsonMessage();\n+\t\tResourceModifiedMessage resourceModifiedMessage = new ResourceModifiedMessage(myFhirContext, theResource, ResourceModifiedMessage.OperationTypeEnum.MANUALLY_TRIGGERED);\n+\t\tresourceModifiedMessage.setOperationType(ResourceModifiedMessage.OperationTypeEnum.MANUALLY_TRIGGERED);\n+\t\tresourceModifiedJsonMessage.setPayload(resourceModifiedMessage);\n+\t\tmyEmpiChannelProducer.send(resourceModifiedJsonMessage);\n+\t}\n+\n+\t@PostConstruct\n+\tprivate void init() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249f5e5947e3b5486e9644bc88a07edb8f3cb787"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxNDY2Mw==", "bodyText": "I like this syntax!  You should demo it at our next cdr core dev meeting", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458914663", "createdAt": "2020-07-22T16:17:58Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/provider/EmpiProviderBatchR4Test.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package ca.uhn.fhir.jpa.empi.provider;\n+\n+import ca.uhn.fhir.interceptor.api.IInterceptorService;\n+import ca.uhn.fhir.interceptor.api.Pointcut;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import ca.uhn.test.concurrency.PointcutLatch;\n+import org.hl7.fhir.r4.model.IdType;\n+import org.hl7.fhir.r4.model.Person;\n+import org.hl7.fhir.r4.model.Practitioner;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class EmpiProviderBatchR4Test extends BaseLinkR4Test {\n+\n+\tprotected Practitioner myPractitioner;\n+\tprotected StringType myPractitionerId;\n+\tprotected Person myPractitionerPerson;\n+\tprotected StringType myPractitionerPersonId;\n+\n+\t@Autowired\n+\tIInterceptorService myInterceptorService;\n+\tPointcutLatch afterEmpiLatch = new PointcutLatch(Pointcut.EMPI_AFTER_PERSISTED_RESOURCE_CHECKED);\n+\n+\n+\t@BeforeEach\n+\tpublic void before() {\n+\t\tsuper.before();\n+\t\tmyPractitioner = createPractitionerAndUpdateLinks(new Practitioner());\n+\t\tmyPractitionerId = new StringType(myPractitioner.getIdElement().getValue());\n+\t\tmyPractitionerPerson = getPersonFromTarget(myPractitioner);\n+\t\tmyPractitionerPersonId = new StringType(myPractitionerPerson.getIdElement().getValue());\n+\t\tmyInterceptorService.registerAnonymousInterceptor(Pointcut.EMPI_AFTER_PERSISTED_RESOURCE_CHECKED, afterEmpiLatch);\n+\t}\n+\n+\t@AfterEach\n+\tpublic void after() {\n+\t\tmyInterceptorService.unregisterInterceptor(afterEmpiLatch);\n+\t\tsuper.after();\n+\t}\n+\n+\t@Test\n+\tpublic void testBatchRunOnAllPractitioners() {\n+\t\tassertLinkCount(2);\n+\t\tStringType criteria = null;\n+\t\tmyEmpiProviderR4.clearEmpiLinks(null);\n+\n+\t\tafterEmpiLatch.runWithExpectedCount(1, () -> myEmpiProviderR4.empiBatchPractitionerType(criteria, null));\n+\t\tassertLinkCount(1);\n+\t}\n+\t@Test\n+\tpublic void testBatchRunOnSpecificPractitioner() {\n+\t\tassertLinkCount(2);\n+\t\tmyEmpiProviderR4.clearEmpiLinks(null);\n+\t\tafterEmpiLatch.runWithExpectedCount(1, () -> myEmpiProviderR4.empiBatchPractitionerInstance(myPractitioner.getIdElement(), null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249f5e5947e3b5486e9644bc88a07edb8f3cb787"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxNjQ2NQ==", "bodyText": "nice tests!\ndid you measure coverage?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458916465", "createdAt": "2020-07-22T16:20:38Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/provider/EmpiProviderBatchR4Test.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package ca.uhn.fhir.jpa.empi.provider;\n+\n+import ca.uhn.fhir.interceptor.api.IInterceptorService;\n+import ca.uhn.fhir.interceptor.api.Pointcut;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import ca.uhn.test.concurrency.PointcutLatch;\n+import org.hl7.fhir.r4.model.IdType;\n+import org.hl7.fhir.r4.model.Person;\n+import org.hl7.fhir.r4.model.Practitioner;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class EmpiProviderBatchR4Test extends BaseLinkR4Test {\n+\n+\tprotected Practitioner myPractitioner;\n+\tprotected StringType myPractitionerId;\n+\tprotected Person myPractitionerPerson;\n+\tprotected StringType myPractitionerPersonId;\n+\n+\t@Autowired\n+\tIInterceptorService myInterceptorService;\n+\tPointcutLatch afterEmpiLatch = new PointcutLatch(Pointcut.EMPI_AFTER_PERSISTED_RESOURCE_CHECKED);\n+\n+\n+\t@BeforeEach\n+\tpublic void before() {\n+\t\tsuper.before();\n+\t\tmyPractitioner = createPractitionerAndUpdateLinks(new Practitioner());\n+\t\tmyPractitionerId = new StringType(myPractitioner.getIdElement().getValue());\n+\t\tmyPractitionerPerson = getPersonFromTarget(myPractitioner);\n+\t\tmyPractitionerPersonId = new StringType(myPractitionerPerson.getIdElement().getValue());\n+\t\tmyInterceptorService.registerAnonymousInterceptor(Pointcut.EMPI_AFTER_PERSISTED_RESOURCE_CHECKED, afterEmpiLatch);\n+\t}\n+\n+\t@AfterEach\n+\tpublic void after() {\n+\t\tmyInterceptorService.unregisterInterceptor(afterEmpiLatch);\n+\t\tsuper.after();\n+\t}\n+\n+\t@Test\n+\tpublic void testBatchRunOnAllPractitioners() {\n+\t\tassertLinkCount(2);\n+\t\tStringType criteria = null;\n+\t\tmyEmpiProviderR4.clearEmpiLinks(null);\n+\n+\t\tafterEmpiLatch.runWithExpectedCount(1, () -> myEmpiProviderR4.empiBatchPractitionerType(criteria, null));\n+\t\tassertLinkCount(1);\n+\t}\n+\t@Test\n+\tpublic void testBatchRunOnSpecificPractitioner() {\n+\t\tassertLinkCount(2);\n+\t\tmyEmpiProviderR4.clearEmpiLinks(null);\n+\t\tafterEmpiLatch.runWithExpectedCount(1, () -> myEmpiProviderR4.empiBatchPractitionerInstance(myPractitioner.getIdElement(), null));\n+\t\tassertLinkCount(1);\n+\t}\n+\n+\t@Test\n+\tpublic void testBatchRunOnNonExistentSpecificPractitioner() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249f5e5947e3b5486e9644bc88a07edb8f3cb787"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxNzEyNw==", "bodyText": "you didn't use your fancy new syntax :-)", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458917127", "createdAt": "2020-07-22T16:21:31Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/svc/EmpiBatchSvcImplTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+import ca.uhn.fhir.empi.api.IEmpiBatchService;\n+import ca.uhn.fhir.interceptor.api.IInterceptorService;\n+import ca.uhn.fhir.interceptor.api.Pointcut;\n+import ca.uhn.fhir.jpa.empi.BaseEmpiR4Test;\n+import ca.uhn.test.concurrency.PointcutLatch;\n+import org.apache.commons.lang3.time.DateUtils;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import java.util.Date;\n+\n+class EmpiBatchSvcImplTest extends BaseEmpiR4Test {\n+\n+\t@Autowired\n+\tIEmpiBatchService myEmpiBatchSvc;\n+\n+\t@Autowired\n+\tIInterceptorService myInterceptorService;\n+\n+\tPointcutLatch afterEmpiLatch = new PointcutLatch(Pointcut.EMPI_AFTER_PERSISTED_RESOURCE_CHECKED);\n+\n+\t@BeforeEach\n+\tpublic void before() {\n+\t\tmyInterceptorService.registerAnonymousInterceptor(Pointcut.EMPI_AFTER_PERSISTED_RESOURCE_CHECKED, afterEmpiLatch);\n+\t}\n+\t@AfterEach\n+\tpublic void after() {\n+\t\tmyInterceptorService.unregisterInterceptor(afterEmpiLatch);\n+\t\tafterEmpiLatch.clear();\n+\t\tsuper.after();\n+\t}\n+\n+\t@Test\n+\tpublic void testEmpiBatchRunWorksOverMultipleTargetTypes() throws InterruptedException {\n+\n+\t\tfor (int i =0; i < 10; i++) {\n+\t\t\tcreatePatient(buildJanePatient());\n+\t\t}\n+\n+\t\tfor(int i = 0; i< 10; i++) {\n+\t\t\tcreatePractitioner(buildPractitionerWithNameAndId(\"test\", \"id\"));\n+\t\t}\n+\n+\t\tassertLinkCount(0);\n+\t\tafterEmpiLatch.setExpectedCount(20);\n+\n+\t\t//SUT\n+\t\tmyEmpiBatchSvc.runEmpiOnAllTargetTypes(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249f5e5947e3b5486e9644bc88a07edb8f3cb787"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxODkyOQ==", "bodyText": "Tests like this read a bit nicer if they start with a successful read before clearEmpiLinks() is called", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458918929", "createdAt": "2020-07-22T16:23:18Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/provider/EmpiProviderClearLinkR4Test.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package ca.uhn.fhir.jpa.empi.provider;\n+\n+import ca.uhn.fhir.jpa.entity.EmpiLink;\n+import ca.uhn.fhir.model.primitive.IdDt;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import org.hl7.fhir.r4.model.Person;\n+import org.hl7.fhir.r4.model.Practitioner;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import javax.annotation.Nonnull;\n+import java.util.List;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class EmpiProviderClearLinkR4Test extends BaseLinkR4Test {\n+\n+\n+\tprotected Practitioner myPractitioner;\n+\tprotected StringType myPractitionerId;\n+\tprotected Person myPractitionerPerson;\n+\tprotected StringType myPractitionerPersonId;\n+\n+\t@BeforeEach\n+\tpublic void before() {\n+\t\tsuper.before();\n+\t\tmyPractitioner = createPractitionerAndUpdateLinks(new Practitioner());\n+\t\tmyPractitionerId = new StringType(myPractitioner.getIdElement().getValue());\n+\t\tmyPractitionerPerson = getPersonFromTarget(myPractitioner);\n+\t\tmyPractitionerPersonId = new StringType(myPractitionerPerson.getIdElement().getValue());\n+\t}\n+\n+\t@Test\n+\tpublic void testClearAllLinks() {\n+\t\tassertLinkCount(2);\n+\t\tmyEmpiProviderR4.clearEmpiLinks(null);\n+\t\tassertNoLinksExist();\n+\t}\n+\n+\tprivate void assertNoLinksExist() {\n+\t\tassertNoPatientLinksExist();\n+\t\tassertNoPractitionerLinksExist();\n+\t}\n+\n+\tprivate void assertNoPatientLinksExist() {\n+\t\tassertThat(getPatientLinks(), hasSize(0));\n+\t}\n+\n+\tprivate void assertNoPractitionerLinksExist() {\n+\t\tassertThat(getPractitionerLinks(), hasSize(0));\n+\t}\n+\n+\t@Test\n+\tpublic void testClearPatientLinks() {\n+\t\tassertLinkCount(2);\n+\n+\t\tPerson read = myPersonDao.read(new IdDt(myPersonId.getValueAsString()).toVersionless());\n+\t\tassertThat(read, is(notNullValue()));\n+\t\tmyEmpiProviderR4.clearEmpiLinks(new StringType(\"patient\"));\n+\t\tassertNoPatientLinksExist();\n+\t\ttry {\n+\t\t\tmyPersonDao.read(new IdDt(myPersonId.getValueAsString()).toVersionless());\n+\t\t\tfail();\n+\t\t} catch (ResourceNotFoundException e) {}\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testClearPractitionerLinks() {\n+\t\tassertLinkCount(2);\n+\t\tmyEmpiProviderR4.clearEmpiLinks(new StringType(\"practitioner\"));\n+\t\tassertNoPractitionerLinksExist();\n+\t\ttry {\n+\t\t\tmyPersonDao.read(new IdDt(myPractitionerPersonId.getValueAsString()).toVersionless());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249f5e5947e3b5486e9644bc88a07edb8f3cb787"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxOTYzMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t *                    run this with the criteria birthDate=1990-06-28, it will fail, as Practitioner's do not have a birthday.\n          \n          \n            \n            \t *                    run this with the criteria birthDate=1990-06-28, it will fail, as Practitioners do not have a birthday.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458919633", "createdAt": "2020-07-22T16:23:59Z", "author": {"login": "fil512"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/api/IEmpiBatchService.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package ca.uhn.fhir.empi.api;\n+\n+import org.hl7.fhir.instance.model.api.IIdType;\n+\n+public interface IEmpiBatchService {\n+\n+\t/**\n+\t * Submit all eligible resources for EMPI processing.\n+\t *  @param theCriteria The FHIR search critieria for filtering the resources to be submitted for EMPI. NOTE:\n+\t *                    When using this function, the criteria supplied must be valid for all EMPI types. e.g. , if you\n+\t *                    run this with the criteria birthDate=1990-06-28, it will fail, as Practitioner's do not have a birthday.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249f5e5947e3b5486e9644bc88a07edb8f3cb787"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxOTk2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t *  @param theCriteria The FHIR search critieria for filtering the resources to be submitted for EMPI. NOTE:\n          \n          \n            \n            \t *  @param theCriteria The FHIR search critieria for filtering the resources to be submitted for EMPI processing. NOTE:", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458919964", "createdAt": "2020-07-22T16:24:18Z", "author": {"login": "fil512"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/api/IEmpiBatchService.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package ca.uhn.fhir.empi.api;\n+\n+import org.hl7.fhir.instance.model.api.IIdType;\n+\n+public interface IEmpiBatchService {\n+\n+\t/**\n+\t * Submit all eligible resources for EMPI processing.\n+\t *  @param theCriteria The FHIR search critieria for filtering the resources to be submitted for EMPI. NOTE:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249f5e5947e3b5486e9644bc88a07edb8f3cb787"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkyMTY1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * Convenience method which calls {@link #runEmpiOnTargetType(String, String)} with the type pre-populated.\n          \n          \n            \n            \t * Convenience method that calls {@link #runEmpiOnTargetType(String, String)} with the type pre-populated.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458921658", "createdAt": "2020-07-22T16:25:59Z", "author": {"login": "fil512"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/api/IEmpiBatchService.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package ca.uhn.fhir.empi.api;\n+\n+import org.hl7.fhir.instance.model.api.IIdType;\n+\n+public interface IEmpiBatchService {\n+\n+\t/**\n+\t * Submit all eligible resources for EMPI processing.\n+\t *  @param theCriteria The FHIR search critieria for filtering the resources to be submitted for EMPI. NOTE:\n+\t *                    When using this function, the criteria supplied must be valid for all EMPI types. e.g. , if you\n+\t *                    run this with the criteria birthDate=1990-06-28, it will fail, as Practitioner's do not have a birthday.\n+\t *                    Use with caution.\n+\t *\n+\t */\n+\tint runEmpiOnAllTargetTypes(String theCriteria);\n+\n+\t/**\n+\t * Given a type and a search criteria, submit all found resources for EMPI processing.\n+\t *\n+\t * @param theTargetType the resource type that you wish to execute a search over for submission to EMPI.\n+\t * @param theCriteria The FHIR search critieria for filtering the resources to be submitted for EMPI.\n+\t * @return the number of resources submitted for EMPI processing.\n+\t */\n+\tint runEmpiOnTargetType(String theTargetType, String theCriteria);\n+\n+\t/**\n+\t * Convenience method which calls {@link #runEmpiOnTargetType(String, String)} with the type pre-populated.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249f5e5947e3b5486e9644bc88a07edb8f3cb787"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkyMTgxNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * Convenience method which calls {@link #runEmpiOnTargetType(String, String)} with the type pre-populated.\n          \n          \n            \n            \t * Convenience method that calls {@link #runEmpiOnTargetType(String, String)} with the type pre-populated.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458921816", "createdAt": "2020-07-22T16:26:10Z", "author": {"login": "fil512"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/api/IEmpiBatchService.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package ca.uhn.fhir.empi.api;\n+\n+import org.hl7.fhir.instance.model.api.IIdType;\n+\n+public interface IEmpiBatchService {\n+\n+\t/**\n+\t * Submit all eligible resources for EMPI processing.\n+\t *  @param theCriteria The FHIR search critieria for filtering the resources to be submitted for EMPI. NOTE:\n+\t *                    When using this function, the criteria supplied must be valid for all EMPI types. e.g. , if you\n+\t *                    run this with the criteria birthDate=1990-06-28, it will fail, as Practitioner's do not have a birthday.\n+\t *                    Use with caution.\n+\t *\n+\t */\n+\tint runEmpiOnAllTargetTypes(String theCriteria);\n+\n+\t/**\n+\t * Given a type and a search criteria, submit all found resources for EMPI processing.\n+\t *\n+\t * @param theTargetType the resource type that you wish to execute a search over for submission to EMPI.\n+\t * @param theCriteria The FHIR search critieria for filtering the resources to be submitted for EMPI.\n+\t * @return the number of resources submitted for EMPI processing.\n+\t */\n+\tint runEmpiOnTargetType(String theTargetType, String theCriteria);\n+\n+\t/**\n+\t * Convenience method which calls {@link #runEmpiOnTargetType(String, String)} with the type pre-populated.\n+\t *\n+\t * @param theCriteria The FHIR search critieria for filtering the resources to be submitted for EMPI.\n+\t * @return the number of resources submitted for EMPI processing.\n+\t */\n+\tint runEmpiOnPractitionerType(String theCriteria);\n+\n+\t/**\n+\t * Convenience method which calls {@link #runEmpiOnTargetType(String, String)} with the type pre-populated.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249f5e5947e3b5486e9644bc88a07edb8f3cb787"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkyMjI5MA==", "bodyText": "per my comments in the implementation, change to long and drop the second arg.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458922290", "createdAt": "2020-07-22T16:26:41Z", "author": {"login": "fil512"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/api/IEmpiBatchService.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package ca.uhn.fhir.empi.api;\n+\n+import org.hl7.fhir.instance.model.api.IIdType;\n+\n+public interface IEmpiBatchService {\n+\n+\t/**\n+\t * Submit all eligible resources for EMPI processing.\n+\t *  @param theCriteria The FHIR search critieria for filtering the resources to be submitted for EMPI. NOTE:\n+\t *                    When using this function, the criteria supplied must be valid for all EMPI types. e.g. , if you\n+\t *                    run this with the criteria birthDate=1990-06-28, it will fail, as Practitioner's do not have a birthday.\n+\t *                    Use with caution.\n+\t *\n+\t */\n+\tint runEmpiOnAllTargetTypes(String theCriteria);\n+\n+\t/**\n+\t * Given a type and a search criteria, submit all found resources for EMPI processing.\n+\t *\n+\t * @param theTargetType the resource type that you wish to execute a search over for submission to EMPI.\n+\t * @param theCriteria The FHIR search critieria for filtering the resources to be submitted for EMPI.\n+\t * @return the number of resources submitted for EMPI processing.\n+\t */\n+\tint runEmpiOnTargetType(String theTargetType, String theCriteria);\n+\n+\t/**\n+\t * Convenience method which calls {@link #runEmpiOnTargetType(String, String)} with the type pre-populated.\n+\t *\n+\t * @param theCriteria The FHIR search critieria for filtering the resources to be submitted for EMPI.\n+\t * @return the number of resources submitted for EMPI processing.\n+\t */\n+\tint runEmpiOnPractitionerType(String theCriteria);\n+\n+\t/**\n+\t * Convenience method which calls {@link #runEmpiOnTargetType(String, String)} with the type pre-populated.\n+\t *\n+\t * @param theCriteria The FHIR search critieria for filtering the resources to be submitted for EMPI.\n+\t * @return the number of resources submitted for EMPI processing.\n+\t */\n+\tint runEmpiOnPatientType(String theCriteria);\n+\n+\t/**\n+\t * Given an ID and a target type valid for EMPI, manually submit the given ID for EMPI processing.\n+\t * @param theId the ID of the resource to process for EMPI.\n+\t * @param theTargetType The type of this resource.\n+\t * @return the constant `1`, as if this function returns successfully, it will have processed one resource for EMPI.\n+\t */\n+\tint runEmpiOnTarget(IIdType theId, String theTargetType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249f5e5947e3b5486e9644bc88a07edb8f3cb787"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkyMjcxOA==", "bodyText": "nitpick: I'd drop manually", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458922718", "createdAt": "2020-07-22T16:27:12Z", "author": {"login": "fil512"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/api/IEmpiQueueSubmitterSvc.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package ca.uhn.fhir.empi.api;\n+\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+\n+public interface IEmpiQueueSubmitterSvc {\n+\n+\tvoid manuallySubmitResourceToEmpi(IBaseResource theResource);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249f5e5947e3b5486e9644bc88a07edb8f3cb787"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkyMzkzMA==", "bodyText": "Safer to check theTargetType isn't blank", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458923930", "createdAt": "2020-07-22T16:28:49Z", "author": {"login": "fil512"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/provider/EmpiProviderR4.java", "diffHunk": "@@ -117,6 +127,16 @@ public Person updateLink(@OperationParam(name=ProviderConstants.EMPI_UPDATE_LINK\n \t\treturn (Person) myEmpiLinkUpdaterSvc.updateLink(person, target, matchResult, createEmpiContext(theRequestDetails));\n \t}\n \n+\t@Operation(name = ProviderConstants.EMPI_CLEAR)\n+\tpublic Parameters clearEmpiLinks(@OperationParam(name=ProviderConstants.EMPI_CLEAR_TARGET_TYPE, min = 0, max = 1) StringType theTargetType) {\n+\t\tif (theTargetType == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249f5e5947e3b5486e9644bc88a07edb8f3cb787"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkyOTI1NA==", "bodyText": "This is my favourite part of this PR", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458929254", "createdAt": "2020-07-22T16:35:09Z", "author": {"login": "fil512"}, "path": "hapi-fhir-test-utilities/src/main/java/ca/uhn/test/concurrency/PointcutLatch.java", "diffHunk": "@@ -67,6 +67,18 @@ public PointcutLatch(String theName) {\n \t\tmyPointcut = null;\n \t}\n \n+\tpublic void runWithExpectedCount(int theExpectedCount, Runnable r) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249f5e5947e3b5486e9644bc88a07edb8f3cb787"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkyOTkxOQ==", "bodyText": "I strongly recommend you remove this.clear();\nIf you clear the latch before calling setExpectedCount then you are hiding an entire category of failures from the latch.  Better to expose those failures.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458929919", "createdAt": "2020-07-22T16:36:10Z", "author": {"login": "fil512"}, "path": "hapi-fhir-test-utilities/src/main/java/ca/uhn/test/concurrency/PointcutLatch.java", "diffHunk": "@@ -67,6 +67,18 @@ public PointcutLatch(String theName) {\n \t\tmyPointcut = null;\n \t}\n \n+\tpublic void runWithExpectedCount(int theExpectedCount, Runnable r) {\n+\t\tthis.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249f5e5947e3b5486e9644bc88a07edb8f3cb787"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbe6d5600eeec58415ab512984de11d52fa90cc6", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/bbe6d5600eeec58415ab512984de11d52fa90cc6", "committedDate": "2020-07-22T18:58:08Z", "message": "Address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "198385a7b478b88073722f01e100aad6abda1215", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/198385a7b478b88073722f01e100aad6abda1215", "committedDate": "2020-07-22T19:01:34Z", "message": "Dead space"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16c6071062daa3519f1e7729b682b757539bdff3", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/16c6071062daa3519f1e7729b682b757539bdff3", "committedDate": "2020-07-22T19:43:36Z", "message": "Fix migration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60e5d9783e0f74d7e89aa270cb0272bf5866180d", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/60e5d9783e0f74d7e89aa270cb0272bf5866180d", "committedDate": "2020-07-22T21:00:39Z", "message": "Narrowing catch by LGTM"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9236cdc211474a7322c374ad4f0dfab0ba4f55a6", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/9236cdc211474a7322c374ad4f0dfab0ba4f55a6", "committedDate": "2020-07-22T21:02:03Z", "message": "Add length to migration to string type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1454364d4e3829562cb7b76e1532d04c6e49cec7", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/1454364d4e3829562cb7b76e1532d04c6e49cec7", "committedDate": "2020-07-22T21:41:45Z", "message": "Add DSTU3 equivalent provider functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9adebc412c5186b3c9f209f7d5aae9a38f3acf7", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/e9adebc412c5186b3c9f209f7d5aae9a38f3acf7", "committedDate": "2020-07-22T23:19:55Z", "message": "Move SearchBuilderFactory into EmpiSearchParamSvc to avoid module loading issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9491a3e4992d166f688de7a3779b441476b382e7", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/9491a3e4992d166f688de7a3779b441476b382e7", "committedDate": "2020-07-23T16:37:11Z", "message": "Add DSTU3 clear operation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90e96c1fb4851b9ed77de58f33756c861709fec6", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/90e96c1fb4851b9ed77de58f33756c861709fec6", "committedDate": "2020-07-23T21:35:28Z", "message": "Fix bug caused by Persons with >1 historical version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e694ded3f0bf2367d386d798db936afa3514db5", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/7e694ded3f0bf2367d386d798db936afa3514db5", "committedDate": "2020-07-25T00:18:59Z", "message": "Add failing test showing issue with related persons"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fac14240c8526b7c603124969af562c204090fd4", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/fac14240c8526b7c603124969af562c204090fd4", "committedDate": "2020-07-27T21:18:40Z", "message": "Add circular reference handling, and DeleteConflict handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82dcc395eca7bddcbdd072e3b7ee17fb626ebcbe", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/82dcc395eca7bddcbdd072e3b7ee17fb626ebcbe", "committedDate": "2020-07-27T21:59:27Z", "message": "Merge branch 'master' into batch-empi-job"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "606b642b1eb1ad7d58a9c571507843fc72bf9895", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/606b642b1eb1ad7d58a9c571507843fc72bf9895", "committedDate": "2020-07-28T00:29:27Z", "message": "Turns out expunge atomic integer didn't do what I expected for historical versions..."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6d44fe50c49d9078fca7975cfea30349fb421a2", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/f6d44fe50c49d9078fca7975cfea30349fb421a2", "committedDate": "2020-07-28T15:42:45Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e48ded61b2d9d30cb447df7b492bde973a503e6", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/2e48ded61b2d9d30cb447df7b492bde973a503e6", "committedDate": "2020-07-29T01:05:17Z", "message": "Add license, change bean name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e88f359f54b117eb6eb855d2bce9392b3d5250f", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/0e88f359f54b117eb6eb855d2bce9392b3d5250f", "committedDate": "2020-07-29T16:42:12Z", "message": "Merge remote-tracking branch 'remotes/origin/master' into batch-empi-job"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "102f936156a60b29ffaba8c34287304ddcf4662f", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/102f936156a60b29ffaba8c34287304ddcf4662f", "committedDate": "2020-07-29T19:17:07Z", "message": "Rework into new person deleting service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bfe3ce15ff0fc5ff4e8fa7171612d94aa17cdad", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/5bfe3ce15ff0fc5ff4e8fa7171612d94aa17cdad", "committedDate": "2020-07-29T21:16:49Z", "message": "move transactional method to persistence"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcc5c59d458fabbe372dde12894f2918f649ab55", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/bcc5c59d458fabbe372dde12894f2918f649ab55", "committedDate": "2020-07-30T00:05:57Z", "message": "Move batch svc to the submitter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30b517f0d5bf0e7a3aa755659cd74a28774c2673", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/30b517f0d5bf0e7a3aa755659cd74a28774c2673", "committedDate": "2020-07-30T00:21:36Z", "message": "Migrate the channel submitter to SubmitterConfig, (duh)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8c000b3a1117215269c588a7b0ed6562f6435e2", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/b8c000b3a1117215269c588a7b0ed6562f6435e2", "committedDate": "2020-07-30T00:43:53Z", "message": "Rename queue to channel"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83d4035ca1673d4e311f1df9aa8faf83278a5c45", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/83d4035ca1673d4e311f1df9aa8faf83278a5c45", "committedDate": "2020-07-30T01:45:40Z", "message": "Remove naming outside of cchannelproducer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48bf78e972a322314d11849395544d8e843a3c89", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/48bf78e972a322314d11849395544d8e843a3c89", "committedDate": "2020-07-30T19:17:14Z", "message": "Rename service interface name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b4fa8048f039422150759a98d8a0c896c090f4b", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/8b4fa8048f039422150759a98d8a0c896c090f4b", "committedDate": "2020-07-30T21:42:25Z", "message": "Add changelog"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07f9e8466b42c3409582b4661b8b7d71040ad8d4", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/07f9e8466b42c3409582b4661b8b7d71040ad8d4", "committedDate": "2020-07-30T22:23:43Z", "message": "Add documentation for -clear"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f731e4430371bb41487c64d81ae1f769fecdb79a", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/f731e4430371bb41487c64d81ae1f769fecdb79a", "committedDate": "2020-07-31T01:21:35Z", "message": "Partial addition of docs for batch run"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f0af3c21c7565afff729ce423f2707e3098707f", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/9f0af3c21c7565afff729ce423f2707e3098707f", "committedDate": "2020-07-31T02:25:30Z", "message": "docs for batch run"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63cc10c919a082ad8fa3f37336fadc5bd0a3b64b", "author": {"user": null}, "url": "https://github.com/hapifhir/hapi-fhir/commit/63cc10c919a082ad8fa3f37336fadc5bd0a3b64b", "committedDate": "2020-07-31T05:10:59Z", "message": "Updare license"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd22b0239f6b59994959b648e75744b6d9dcf272", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/bd22b0239f6b59994959b648e75744b6d9dcf272", "committedDate": "2020-07-31T16:13:38Z", "message": "Add caveat"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NTg1OTc4", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#pullrequestreview-459585978", "createdAt": "2020-08-01T15:36:04Z", "commit": {"oid": "bd22b0239f6b59994959b648e75744b6d9dcf272"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNTozNjowNFrOG6er7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNzo0NDoxOFrOG6fVRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3MzM1OA==", "bodyText": "I personally like casual language like this, but I know some people prefer more formal sounding text.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463973358", "createdAt": "2020-08-01T15:36:04Z", "author": {"login": "fil512"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_operations.md", "diffHunk": "@@ -447,3 +447,146 @@ This might result in a response such as the following:\n   ]\n }\n ```\n+\n+## Clearing EMPI Links\n+\n+The `$empi-clear` operation is used to batch-delete EMPI links and related persons from the database. This operation is meant to \n+be used during the rules-tuning phase of the EMPI implementation so that you can quickly test your ruleset.\n+It permits the user to essentially \"start fresh\" without too much fuss. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd22b0239f6b59994959b648e75744b6d9dcf272"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3MzM4Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            After the operation is complete, all targeted EMPI links will be removed from the system, and the Person resources which were involves in those links will be deleted and expunged \n          \n          \n            \n            After the operation is complete, all targeted EMPI links are removed from the system, and their related Person resources are deleted and expunged", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463973387", "createdAt": "2020-08-01T15:36:42Z", "author": {"login": "fil512"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_operations.md", "diffHunk": "@@ -447,3 +447,146 @@ This might result in a response such as the following:\n   ]\n }\n ```\n+\n+## Clearing EMPI Links\n+\n+The `$empi-clear` operation is used to batch-delete EMPI links and related persons from the database. This operation is meant to \n+be used during the rules-tuning phase of the EMPI implementation so that you can quickly test your ruleset.\n+It permits the user to essentially \"start fresh\" without too much fuss. \n+\n+After the operation is complete, all targeted EMPI links will be removed from the system, and the Person resources which were involves in those links will be deleted and expunged ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd22b0239f6b59994959b648e75744b6d9dcf272"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3MzYyMQ==", "bodyText": "Can we change \"reset\" to \"removed\" or \"deleted\"?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463973621", "createdAt": "2020-08-01T15:39:19Z", "author": {"login": "fil512"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_operations.md", "diffHunk": "@@ -447,3 +447,146 @@ This might result in a response such as the following:\n   ]\n }\n ```\n+\n+## Clearing EMPI Links\n+\n+The `$empi-clear` operation is used to batch-delete EMPI links and related persons from the database. This operation is meant to \n+be used during the rules-tuning phase of the EMPI implementation so that you can quickly test your ruleset.\n+It permits the user to essentially \"start fresh\" without too much fuss. \n+\n+After the operation is complete, all targeted EMPI links will be removed from the system, and the Person resources which were involves in those links will be deleted and expunged \n+from the server. \n+\n+This operation takes a single optional Parameter.\n+\n+<table class=\"table table-striped table-condensed\">\n+    <thead>\n+        <tr>\n+            <th>Name</th>\n+            <th>Type</th>\n+            <th>Cardinality</th>\n+            <th>Description</th>\n+        </tr>\n+    </thead>\n+    <tbody>\n+        <tr>\n+            <td>resourceType</td>\n+            <td>String</td>\n+            <td>0..1</td>\n+            <td>\n+                The target Resource type you would like to clear. Currently limited to Patient/Practitioner. If omitted, will operate over all links.\n+            </td>\n+        </tr>\n+    </tbody>\n+</table>\n+\n+### Example\n+\n+Use an HTTP POST to the following URL to invoke this operation:\n+\n+```url\n+http://example.com/$empi-clear\n+```\n+\n+The following request body could be used:\n+\n+```json\n+{\n+  \"resourceType\": \"Parameters\",\n+  \"parameter\": [ {\n+    \"name\": \"resourceType\",\n+    \"valueString\": \"Patient\"\n+  } ]\n+}\n+```\n+\n+This operation returns the number of EMPI links that were cleared. The following is a sample response: \n+\n+```json\n+{\n+  \"resourceType\": \"Parameters\",\n+  \"parameter\": [ {\n+    \"name\": \"reset\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd22b0239f6b59994959b648e75744b6d9dcf272"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3Mzk1NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `$empi-batch-run` operation is used to batch-process patients and practitioners. In normal operation, an interceptor will \n          \n          \n            \n            run EMPI processing over Resources when they are updated or created, but this is not the only context in which you would want to \n          \n          \n            \n            execute EMPI processing against resources. In the rules-tuning phase of your setup, you may use `$empi-batch-run` to quickly apply EMPI rules across multiple Resources.\n          \n          \n            \n            Call the `$empi-batch-run` operation to batch-process patients and practitioners. In the rules-tuning phase of your setup, you can use `$empi-batch-run` to apply EMPI rules across multiple Resources.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463973954", "createdAt": "2020-08-01T15:42:43Z", "author": {"login": "fil512"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_operations.md", "diffHunk": "@@ -447,3 +447,146 @@ This might result in a response such as the following:\n   ]\n }\n ```\n+\n+## Clearing EMPI Links\n+\n+The `$empi-clear` operation is used to batch-delete EMPI links and related persons from the database. This operation is meant to \n+be used during the rules-tuning phase of the EMPI implementation so that you can quickly test your ruleset.\n+It permits the user to essentially \"start fresh\" without too much fuss. \n+\n+After the operation is complete, all targeted EMPI links will be removed from the system, and the Person resources which were involves in those links will be deleted and expunged \n+from the server. \n+\n+This operation takes a single optional Parameter.\n+\n+<table class=\"table table-striped table-condensed\">\n+    <thead>\n+        <tr>\n+            <th>Name</th>\n+            <th>Type</th>\n+            <th>Cardinality</th>\n+            <th>Description</th>\n+        </tr>\n+    </thead>\n+    <tbody>\n+        <tr>\n+            <td>resourceType</td>\n+            <td>String</td>\n+            <td>0..1</td>\n+            <td>\n+                The target Resource type you would like to clear. Currently limited to Patient/Practitioner. If omitted, will operate over all links.\n+            </td>\n+        </tr>\n+    </tbody>\n+</table>\n+\n+### Example\n+\n+Use an HTTP POST to the following URL to invoke this operation:\n+\n+```url\n+http://example.com/$empi-clear\n+```\n+\n+The following request body could be used:\n+\n+```json\n+{\n+  \"resourceType\": \"Parameters\",\n+  \"parameter\": [ {\n+    \"name\": \"resourceType\",\n+    \"valueString\": \"Patient\"\n+  } ]\n+}\n+```\n+\n+This operation returns the number of EMPI links that were cleared. The following is a sample response: \n+\n+```json\n+{\n+  \"resourceType\": \"Parameters\",\n+  \"parameter\": [ {\n+    \"name\": \"reset\",\n+    \"valueDecimal\": 5\n+  } ]\n+}\n+```\n+\n+## Batch-creating EMPI Links\n+\n+The `$empi-batch-run` operation is used to batch-process patients and practitioners. In normal operation, an interceptor will \n+run EMPI processing over Resources when they are updated or created, but this is not the only context in which you would want to \n+execute EMPI processing against resources. In the rules-tuning phase of your setup, you may use `$empi-batch-run` to quickly apply EMPI rules across multiple Resources.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd22b0239f6b59994959b648e75744b6d9dcf272"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3NDAzMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            After the operation is complete, all resources which matched the criteria will have been processed EMPI and will now have at least one EMPI link attached to them. \n          \n          \n            \n            After the operation is complete, all resources that matched the criteria will now have at least one EMPI link attached to them.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463974032", "createdAt": "2020-08-01T15:43:49Z", "author": {"login": "fil512"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_operations.md", "diffHunk": "@@ -447,3 +447,146 @@ This might result in a response such as the following:\n   ]\n }\n ```\n+\n+## Clearing EMPI Links\n+\n+The `$empi-clear` operation is used to batch-delete EMPI links and related persons from the database. This operation is meant to \n+be used during the rules-tuning phase of the EMPI implementation so that you can quickly test your ruleset.\n+It permits the user to essentially \"start fresh\" without too much fuss. \n+\n+After the operation is complete, all targeted EMPI links will be removed from the system, and the Person resources which were involves in those links will be deleted and expunged \n+from the server. \n+\n+This operation takes a single optional Parameter.\n+\n+<table class=\"table table-striped table-condensed\">\n+    <thead>\n+        <tr>\n+            <th>Name</th>\n+            <th>Type</th>\n+            <th>Cardinality</th>\n+            <th>Description</th>\n+        </tr>\n+    </thead>\n+    <tbody>\n+        <tr>\n+            <td>resourceType</td>\n+            <td>String</td>\n+            <td>0..1</td>\n+            <td>\n+                The target Resource type you would like to clear. Currently limited to Patient/Practitioner. If omitted, will operate over all links.\n+            </td>\n+        </tr>\n+    </tbody>\n+</table>\n+\n+### Example\n+\n+Use an HTTP POST to the following URL to invoke this operation:\n+\n+```url\n+http://example.com/$empi-clear\n+```\n+\n+The following request body could be used:\n+\n+```json\n+{\n+  \"resourceType\": \"Parameters\",\n+  \"parameter\": [ {\n+    \"name\": \"resourceType\",\n+    \"valueString\": \"Patient\"\n+  } ]\n+}\n+```\n+\n+This operation returns the number of EMPI links that were cleared. The following is a sample response: \n+\n+```json\n+{\n+  \"resourceType\": \"Parameters\",\n+  \"parameter\": [ {\n+    \"name\": \"reset\",\n+    \"valueDecimal\": 5\n+  } ]\n+}\n+```\n+\n+## Batch-creating EMPI Links\n+\n+The `$empi-batch-run` operation is used to batch-process patients and practitioners. In normal operation, an interceptor will \n+run EMPI processing over Resources when they are updated or created, but this is not the only context in which you would want to \n+execute EMPI processing against resources. In the rules-tuning phase of your setup, you may use `$empi-batch-run` to quickly apply EMPI rules across multiple Resources.\n+An important thing to note is that this operation only submits the resources for processing. Actual EMPI processing is run asynchronously, and depending on the size \n+of the affected bundle of resources, may take some time to complete.\n+\n+After the operation is complete, all resources which matched the criteria will have been processed EMPI and will now have at least one EMPI link attached to them. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd22b0239f6b59994959b648e75744b6d9dcf272"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3NDI0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This operation takes a single optional Parameter when used at the Resource of Server level.\n          \n          \n            \n            This operation takes a single optional criteria parameter unless it is called on a specific instance.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463974247", "createdAt": "2020-08-01T15:46:32Z", "author": {"login": "fil512"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_operations.md", "diffHunk": "@@ -447,3 +447,146 @@ This might result in a response such as the following:\n   ]\n }\n ```\n+\n+## Clearing EMPI Links\n+\n+The `$empi-clear` operation is used to batch-delete EMPI links and related persons from the database. This operation is meant to \n+be used during the rules-tuning phase of the EMPI implementation so that you can quickly test your ruleset.\n+It permits the user to essentially \"start fresh\" without too much fuss. \n+\n+After the operation is complete, all targeted EMPI links will be removed from the system, and the Person resources which were involves in those links will be deleted and expunged \n+from the server. \n+\n+This operation takes a single optional Parameter.\n+\n+<table class=\"table table-striped table-condensed\">\n+    <thead>\n+        <tr>\n+            <th>Name</th>\n+            <th>Type</th>\n+            <th>Cardinality</th>\n+            <th>Description</th>\n+        </tr>\n+    </thead>\n+    <tbody>\n+        <tr>\n+            <td>resourceType</td>\n+            <td>String</td>\n+            <td>0..1</td>\n+            <td>\n+                The target Resource type you would like to clear. Currently limited to Patient/Practitioner. If omitted, will operate over all links.\n+            </td>\n+        </tr>\n+    </tbody>\n+</table>\n+\n+### Example\n+\n+Use an HTTP POST to the following URL to invoke this operation:\n+\n+```url\n+http://example.com/$empi-clear\n+```\n+\n+The following request body could be used:\n+\n+```json\n+{\n+  \"resourceType\": \"Parameters\",\n+  \"parameter\": [ {\n+    \"name\": \"resourceType\",\n+    \"valueString\": \"Patient\"\n+  } ]\n+}\n+```\n+\n+This operation returns the number of EMPI links that were cleared. The following is a sample response: \n+\n+```json\n+{\n+  \"resourceType\": \"Parameters\",\n+  \"parameter\": [ {\n+    \"name\": \"reset\",\n+    \"valueDecimal\": 5\n+  } ]\n+}\n+```\n+\n+## Batch-creating EMPI Links\n+\n+The `$empi-batch-run` operation is used to batch-process patients and practitioners. In normal operation, an interceptor will \n+run EMPI processing over Resources when they are updated or created, but this is not the only context in which you would want to \n+execute EMPI processing against resources. In the rules-tuning phase of your setup, you may use `$empi-batch-run` to quickly apply EMPI rules across multiple Resources.\n+An important thing to note is that this operation only submits the resources for processing. Actual EMPI processing is run asynchronously, and depending on the size \n+of the affected bundle of resources, may take some time to complete.\n+\n+After the operation is complete, all resources which matched the criteria will have been processed EMPI and will now have at least one EMPI link attached to them. \n+\n+This operation takes a single optional Parameter when used at the Resource of Server level.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd22b0239f6b59994959b648e75744b6d9dcf272"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3NDMwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Use an HTTP POST to the following URL to invoke this operation with criteria:\n          \n          \n            \n            Use an HTTP POST to the following URL to invoke this operation with matching criteria:", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463974305", "createdAt": "2020-08-01T15:47:08Z", "author": {"login": "fil512"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_operations.md", "diffHunk": "@@ -447,3 +447,146 @@ This might result in a response such as the following:\n   ]\n }\n ```\n+\n+## Clearing EMPI Links\n+\n+The `$empi-clear` operation is used to batch-delete EMPI links and related persons from the database. This operation is meant to \n+be used during the rules-tuning phase of the EMPI implementation so that you can quickly test your ruleset.\n+It permits the user to essentially \"start fresh\" without too much fuss. \n+\n+After the operation is complete, all targeted EMPI links will be removed from the system, and the Person resources which were involves in those links will be deleted and expunged \n+from the server. \n+\n+This operation takes a single optional Parameter.\n+\n+<table class=\"table table-striped table-condensed\">\n+    <thead>\n+        <tr>\n+            <th>Name</th>\n+            <th>Type</th>\n+            <th>Cardinality</th>\n+            <th>Description</th>\n+        </tr>\n+    </thead>\n+    <tbody>\n+        <tr>\n+            <td>resourceType</td>\n+            <td>String</td>\n+            <td>0..1</td>\n+            <td>\n+                The target Resource type you would like to clear. Currently limited to Patient/Practitioner. If omitted, will operate over all links.\n+            </td>\n+        </tr>\n+    </tbody>\n+</table>\n+\n+### Example\n+\n+Use an HTTP POST to the following URL to invoke this operation:\n+\n+```url\n+http://example.com/$empi-clear\n+```\n+\n+The following request body could be used:\n+\n+```json\n+{\n+  \"resourceType\": \"Parameters\",\n+  \"parameter\": [ {\n+    \"name\": \"resourceType\",\n+    \"valueString\": \"Patient\"\n+  } ]\n+}\n+```\n+\n+This operation returns the number of EMPI links that were cleared. The following is a sample response: \n+\n+```json\n+{\n+  \"resourceType\": \"Parameters\",\n+  \"parameter\": [ {\n+    \"name\": \"reset\",\n+    \"valueDecimal\": 5\n+  } ]\n+}\n+```\n+\n+## Batch-creating EMPI Links\n+\n+The `$empi-batch-run` operation is used to batch-process patients and practitioners. In normal operation, an interceptor will \n+run EMPI processing over Resources when they are updated or created, but this is not the only context in which you would want to \n+execute EMPI processing against resources. In the rules-tuning phase of your setup, you may use `$empi-batch-run` to quickly apply EMPI rules across multiple Resources.\n+An important thing to note is that this operation only submits the resources for processing. Actual EMPI processing is run asynchronously, and depending on the size \n+of the affected bundle of resources, may take some time to complete.\n+\n+After the operation is complete, all resources which matched the criteria will have been processed EMPI and will now have at least one EMPI link attached to them. \n+\n+This operation takes a single optional Parameter when used at the Resource of Server level.\n+\n+<table class=\"table table-striped table-condensed\">\n+    <thead>\n+        <tr>\n+            <th>Name</th>\n+            <th>Type</th>\n+            <th>Cardinality</th>\n+            <th>Description</th>\n+        </tr>\n+    </thead>\n+    <tbody>\n+        <tr>\n+            <td>criteria</td>\n+            <td>String</td>\n+            <td>0..1</td>\n+            <td>\n+            The search critiera used to filter resources.\n+            </td>\n+        </tr>\n+    </tbody>\n+</table>\n+\n+### Example\n+\n+This operation can be executed at the Server level, Resource level, or Instance level.\n+Use an HTTP POST to the following URL to invoke this operation with criteria:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd22b0239f6b59994959b648e75744b6d9dcf272"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3NDM5Ng==", "bodyText": "Nice!", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463974396", "createdAt": "2020-08-01T15:48:05Z", "author": {"login": "fil512"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_operations.md", "diffHunk": "@@ -447,3 +447,146 @@ This might result in a response such as the following:\n   ]\n }\n ```\n+\n+## Clearing EMPI Links\n+\n+The `$empi-clear` operation is used to batch-delete EMPI links and related persons from the database. This operation is meant to \n+be used during the rules-tuning phase of the EMPI implementation so that you can quickly test your ruleset.\n+It permits the user to essentially \"start fresh\" without too much fuss. \n+\n+After the operation is complete, all targeted EMPI links will be removed from the system, and the Person resources which were involves in those links will be deleted and expunged \n+from the server. \n+\n+This operation takes a single optional Parameter.\n+\n+<table class=\"table table-striped table-condensed\">\n+    <thead>\n+        <tr>\n+            <th>Name</th>\n+            <th>Type</th>\n+            <th>Cardinality</th>\n+            <th>Description</th>\n+        </tr>\n+    </thead>\n+    <tbody>\n+        <tr>\n+            <td>resourceType</td>\n+            <td>String</td>\n+            <td>0..1</td>\n+            <td>\n+                The target Resource type you would like to clear. Currently limited to Patient/Practitioner. If omitted, will operate over all links.\n+            </td>\n+        </tr>\n+    </tbody>\n+</table>\n+\n+### Example\n+\n+Use an HTTP POST to the following URL to invoke this operation:\n+\n+```url\n+http://example.com/$empi-clear\n+```\n+\n+The following request body could be used:\n+\n+```json\n+{\n+  \"resourceType\": \"Parameters\",\n+  \"parameter\": [ {\n+    \"name\": \"resourceType\",\n+    \"valueString\": \"Patient\"\n+  } ]\n+}\n+```\n+\n+This operation returns the number of EMPI links that were cleared. The following is a sample response: \n+\n+```json\n+{\n+  \"resourceType\": \"Parameters\",\n+  \"parameter\": [ {\n+    \"name\": \"reset\",\n+    \"valueDecimal\": 5\n+  } ]\n+}\n+```\n+\n+## Batch-creating EMPI Links\n+\n+The `$empi-batch-run` operation is used to batch-process patients and practitioners. In normal operation, an interceptor will \n+run EMPI processing over Resources when they are updated or created, but this is not the only context in which you would want to \n+execute EMPI processing against resources. In the rules-tuning phase of your setup, you may use `$empi-batch-run` to quickly apply EMPI rules across multiple Resources.\n+An important thing to note is that this operation only submits the resources for processing. Actual EMPI processing is run asynchronously, and depending on the size \n+of the affected bundle of resources, may take some time to complete.\n+\n+After the operation is complete, all resources which matched the criteria will have been processed EMPI and will now have at least one EMPI link attached to them. \n+\n+This operation takes a single optional Parameter when used at the Resource of Server level.\n+\n+<table class=\"table table-striped table-condensed\">\n+    <thead>\n+        <tr>\n+            <th>Name</th>\n+            <th>Type</th>\n+            <th>Cardinality</th>\n+            <th>Description</th>\n+        </tr>\n+    </thead>\n+    <tbody>\n+        <tr>\n+            <td>criteria</td>\n+            <td>String</td>\n+            <td>0..1</td>\n+            <td>\n+            The search critiera used to filter resources.\n+            </td>\n+        </tr>\n+    </tbody>\n+</table>\n+\n+### Example\n+\n+This operation can be executed at the Server level, Resource level, or Instance level.\n+Use an HTTP POST to the following URL to invoke this operation with criteria:\n+\n+```url\n+http://example.com/$empi-batch-run\n+http://example.com/Patient/$empi-batch-run\n+http://example.com/Practitioner/$empi-batch-run\n+```\n+\n+The following request body could be used:\n+\n+```json\n+{\n+  \"resourceType\": \"Parameters\",\n+  \"parameter\": [ {\n+    \"criteria\": \"\",\n+    \"valueString\": \"birthDate=2020-07-28\"\n+  } ]\n+}\n+```\n+This operation returns the number of resources that were submitted for EMPI processing. The following is a sample response:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd22b0239f6b59994959b648e75744b6d9dcf272"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3NDQ3Mw==", "bodyText": "Seeing this makes me wonder if \"batch\" is really the right name for this operation....  Would $empi-submit be a better name than $empi-batch-run ?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463974473", "createdAt": "2020-08-01T15:49:04Z", "author": {"login": "fil512"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_operations.md", "diffHunk": "@@ -447,3 +447,146 @@ This might result in a response such as the following:\n   ]\n }\n ```\n+\n+## Clearing EMPI Links\n+\n+The `$empi-clear` operation is used to batch-delete EMPI links and related persons from the database. This operation is meant to \n+be used during the rules-tuning phase of the EMPI implementation so that you can quickly test your ruleset.\n+It permits the user to essentially \"start fresh\" without too much fuss. \n+\n+After the operation is complete, all targeted EMPI links will be removed from the system, and the Person resources which were involves in those links will be deleted and expunged \n+from the server. \n+\n+This operation takes a single optional Parameter.\n+\n+<table class=\"table table-striped table-condensed\">\n+    <thead>\n+        <tr>\n+            <th>Name</th>\n+            <th>Type</th>\n+            <th>Cardinality</th>\n+            <th>Description</th>\n+        </tr>\n+    </thead>\n+    <tbody>\n+        <tr>\n+            <td>resourceType</td>\n+            <td>String</td>\n+            <td>0..1</td>\n+            <td>\n+                The target Resource type you would like to clear. Currently limited to Patient/Practitioner. If omitted, will operate over all links.\n+            </td>\n+        </tr>\n+    </tbody>\n+</table>\n+\n+### Example\n+\n+Use an HTTP POST to the following URL to invoke this operation:\n+\n+```url\n+http://example.com/$empi-clear\n+```\n+\n+The following request body could be used:\n+\n+```json\n+{\n+  \"resourceType\": \"Parameters\",\n+  \"parameter\": [ {\n+    \"name\": \"resourceType\",\n+    \"valueString\": \"Patient\"\n+  } ]\n+}\n+```\n+\n+This operation returns the number of EMPI links that were cleared. The following is a sample response: \n+\n+```json\n+{\n+  \"resourceType\": \"Parameters\",\n+  \"parameter\": [ {\n+    \"name\": \"reset\",\n+    \"valueDecimal\": 5\n+  } ]\n+}\n+```\n+\n+## Batch-creating EMPI Links\n+\n+The `$empi-batch-run` operation is used to batch-process patients and practitioners. In normal operation, an interceptor will \n+run EMPI processing over Resources when they are updated or created, but this is not the only context in which you would want to \n+execute EMPI processing against resources. In the rules-tuning phase of your setup, you may use `$empi-batch-run` to quickly apply EMPI rules across multiple Resources.\n+An important thing to note is that this operation only submits the resources for processing. Actual EMPI processing is run asynchronously, and depending on the size \n+of the affected bundle of resources, may take some time to complete.\n+\n+After the operation is complete, all resources which matched the criteria will have been processed EMPI and will now have at least one EMPI link attached to them. \n+\n+This operation takes a single optional Parameter when used at the Resource of Server level.\n+\n+<table class=\"table table-striped table-condensed\">\n+    <thead>\n+        <tr>\n+            <th>Name</th>\n+            <th>Type</th>\n+            <th>Cardinality</th>\n+            <th>Description</th>\n+        </tr>\n+    </thead>\n+    <tbody>\n+        <tr>\n+            <td>criteria</td>\n+            <td>String</td>\n+            <td>0..1</td>\n+            <td>\n+            The search critiera used to filter resources.\n+            </td>\n+        </tr>\n+    </tbody>\n+</table>\n+\n+### Example\n+\n+This operation can be executed at the Server level, Resource level, or Instance level.\n+Use an HTTP POST to the following URL to invoke this operation with criteria:\n+\n+```url\n+http://example.com/$empi-batch-run\n+http://example.com/Patient/$empi-batch-run\n+http://example.com/Practitioner/$empi-batch-run\n+```\n+\n+The following request body could be used:\n+\n+```json\n+{\n+  \"resourceType\": \"Parameters\",\n+  \"parameter\": [ {\n+    \"criteria\": \"\",\n+    \"valueString\": \"birthDate=2020-07-28\"\n+  } ]\n+}\n+```\n+This operation returns the number of resources that were submitted for EMPI processing. The following is a sample response:\n+\n+```json\n+{\n+  \"resourceType\": \"Parameters\",\n+  \"parameter\": [ {\n+    \"name\": \"submitted\",\n+    \"valueDecimal\": 5\n+  } ]\n+}\n+```\n+\n+This operation can also be done at the Instance level. When this is the case, the operations accepts no parameters. \n+The following are examples of Instance level POSTs, which require no parameters.\n+\n+```url\n+http://example.com/Patient/123/$empi-batch-run", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd22b0239f6b59994959b648e75744b6d9dcf272"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3NDYxMg==", "bodyText": "Thank you!  Love it when these get fixed.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463974612", "createdAt": "2020-08-01T15:50:20Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/expunge/IResourceExpungeService.java", "diffHunk": "@@ -33,9 +33,9 @@\n \n \tvoid expungeHistoricalVersions(RequestDetails theRequestDetails, List<Long> thePartition, AtomicInteger theRemainingCount);\n \n-\tvoid expungeCurrentVersionOfResources(RequestDetails theRequestDetails, List<Long> thePartition, AtomicInteger theRemainingCount);\n+\tvoid expungeCurrentVersionOfResources(RequestDetails theRequestDetails, List<Long> theResourceIds, AtomicInteger theRemainingCount);\n \n-\tvoid expungeHistoricalVersionsOfIds(RequestDetails theRequestDetails, List<Long> thePartition, AtomicInteger theRemainingCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd22b0239f6b59994959b648e75744b6d9dcf272"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3NDcwNg==", "bodyText": "IntelliJ is telling me this class isn't used.  If that's the case, can you delete it?  (Maybe CDR uses it?)", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463974706", "createdAt": "2020-08-01T15:51:35Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/expunge/ResourceExpungeService.java", "diffHunk": "@@ -67,7 +67,7 @@\n import java.util.concurrent.atomic.AtomicInteger;\n \n @Service\n-class ResourceExpungeService implements IResourceExpungeService {\n+public class ResourceExpungeService implements IResourceExpungeService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd22b0239f6b59994959b648e75744b6d9dcf272"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3NTUxNg==", "bodyText": "um wat?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463975516", "createdAt": "2020-08-01T16:01:26Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/entity/EmpiLink.java", "diffHunk": "@@ -89,7 +89,7 @@\n \tprivate Date myUpdated;\n \n \t@Column(name = \"VERSION\", nullable = false, length = VERSION_LENGTH)\n-\tprivate String myVersion;\n+\tprivate java.lang.String myVersion;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd22b0239f6b59994959b648e75744b6d9dcf272"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3NTUxOQ==", "bodyText": "moar wat?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463975519", "createdAt": "2020-08-01T16:01:33Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/entity/EmpiLink.java", "diffHunk": "@@ -107,10 +107,13 @@\n \n \tpublic EmpiLink() {}\n \n-\tpublic EmpiLink(String theVersion) {\n+\tpublic EmpiLink(java.lang.String theVersion) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd22b0239f6b59994959b648e75744b6d9dcf272"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3NTYwNg==", "bodyText": "ders more.  pls find all and scrub", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463975606", "createdAt": "2020-08-01T16:02:29Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/entity/EmpiLink.java", "diffHunk": "@@ -218,11 +221,11 @@ public EmpiLink setUpdated(Date theUpdated) {\n \t\treturn this;\n \t}\n \n-\tpublic String getVersion() {\n+\tpublic java.lang.String getVersion() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd22b0239f6b59994959b648e75744b6d9dcf272"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3NTcwMw==", "bodyText": "Make length constant and use this constant in the migrator", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463975703", "createdAt": "2020-08-01T16:04:03Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/entity/EmpiLink.java", "diffHunk": "@@ -107,10 +107,13 @@\n \n \tpublic EmpiLink() {}\n \n-\tpublic EmpiLink(String theVersion) {\n+\tpublic EmpiLink(java.lang.String theVersion) {\n \t\tmyVersion = theVersion;\n \t}\n \n+\t@Column(name = \"TARGET_TYPE\", nullable = true, length = 40)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd22b0239f6b59994959b648e75744b6d9dcf272"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3NjA4Mw==", "bodyText": "IntelliJ says this method is not used", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463976083", "createdAt": "2020-08-01T16:08:35Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/dao/EmpiLinkDaoSvc.java", "diffHunk": "@@ -178,6 +226,64 @@ public void deleteLink(EmpiLink theEmpiLink) {\n \t\treturn myEmpiLinkDao.findAll(example);\n \t}\n \n+\t/**\n+\t * Delete all {@link EmpiLink} entities, and return all resource PIDs from the source of the relationship.\n+\t *\n+\t * @return A list of Long representing the related Person Pids.\n+\t */\n+\t@Transactional\n+\tpublic List<Long> deleteAllEmpiLinksAndReturnPersonPids() {\n+\t\tList<EmpiLink> all = myEmpiLinkDao.findAll();\n+\t\treturn deleteEmpiLinksAndReturnPersonPids(all);\n+\t}\n+\n+\tprivate List<Long> deleteEmpiLinksAndReturnPersonPids(List<EmpiLink> theLinks) {\n+\t\tList<Long> collect = theLinks.stream().map(EmpiLink::getPersonPid).distinct().collect(Collectors.toList());\n+\t\tmyEmpiLinkDao.deleteAll(theLinks);\n+\t\treturn collect;\n+\t}\n+\n+\t/**\n+\t * Given a valid {@link String}, delete all {@link EmpiLink} entities for that type, and get the Pids\n+\t * for the Person resources which were the sources of the links.\n+\t *\n+\t * @param theTargetType the type of relationship you would like to delete.\n+\t *\n+\t * @return A list of longs representing the Pids of the Person resources used as the sources of the relationships that were deleted.\n+\t */\n+\tpublic List<Long> deleteAllEmpiLinksOfTypeAndReturnPersonPids(String theTargetType) {\n+\t\tEmpiLink link = new EmpiLink();\n+\t\tlink.setEmpiTargetType(theTargetType);\n+\t\tExample<EmpiLink> exampleLink = Example.of(link);\n+\t\tList<EmpiLink> allOfType = myEmpiLinkDao.findAll(exampleLink);\n+\t\treturn deleteEmpiLinksAndReturnPersonPids(allOfType);\n+\t}\n+\n+\t/**\n+\t * Given a target type, and a resource ID, delete the target's {@link EmpiLink} entities, and return the Person Pids\n+\t * that were on the source end of each relationship.\n+\t *\n+\t * @param theTargetType The empi target type of the resource\n+\t * @param theId The particular target resource ID.\n+\t *\n+\t * @return A list of longs, each representing the source person of an {@link EmpiLink} that was deleted.\n+\t */\n+\tpublic List<Long> deleteEmpiLinksAndReturnPersonPidsForTypeAndTarget(String theTargetType, IIdType theId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd22b0239f6b59994959b648e75744b6d9dcf272"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3NjY0Mw==", "bodyText": "This method is an example of why your code is such a joy to read.  It's refreshing to read code where it's immediately obvious exactly what it's trying to do.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463976643", "createdAt": "2020-08-01T16:14:55Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiBatchSvcImpl.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR JPA Server - Enterprise Master Patient Index\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.empi.api.IEmpiBatchSvc;\n+import ca.uhn.fhir.empi.api.IEmpiChannelSubmitterSvc;\n+import ca.uhn.fhir.empi.util.EmpiUtil;\n+import ca.uhn.fhir.interceptor.model.RequestPartitionId;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.jpa.dao.IResultIterator;\n+import ca.uhn.fhir.jpa.dao.ISearchBuilder;\n+import ca.uhn.fhir.jpa.model.search.SearchRuntimeDetails;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.rest.api.server.storage.ResourcePersistentId;\n+import ca.uhn.fhir.rest.server.exceptions.InternalErrorException;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.provider.ProviderConstants;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class EmpiBatchSvcImpl implements IEmpiBatchSvc {\n+\n+\t@Autowired\n+\tprivate DaoRegistry myDaoRegistry;\n+\n+\t@Autowired\n+\tprivate EmpiSearchParamSvc myEmpiSearchParamSvc;\n+\n+\t@Autowired\n+\tprivate IEmpiChannelSubmitterSvc myEmpiQueueSubmitterSvc;\n+\n+\tprivate static final int BUFFER_SIZE = 100;\n+\n+\t@Override\n+\t@Transactional\n+\tpublic long runEmpiOnAllTargetTypes(String theCriteria) {\n+\t\tlong submittedCount = 0;\n+\t\tsubmittedCount += runEmpiOnPatientType(theCriteria);\n+\t\tsubmittedCount += runEmpiOnPractitionerType(theCriteria);\n+\t\treturn submittedCount;\n+\t}\n+\n+\t@Override\n+\t@Transactional\n+\tpublic long runEmpiOnTargetType(String theTargetType, String theCriteria) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd22b0239f6b59994959b648e75744b6d9dcf272"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3NzAwMg==", "bodyText": "Hope I'm not driving you crazy with endless iterations on this, but it feels to me like this method really belongs in IResultIterator.  I.e.\nCollection<ResourcePersistentId> batch = theQuery.getNextResultBatch(long theBatchSize)", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463977002", "createdAt": "2020-08-01T16:19:18Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiBatchSvcImpl.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR JPA Server - Enterprise Master Patient Index\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.empi.api.IEmpiBatchSvc;\n+import ca.uhn.fhir.empi.api.IEmpiChannelSubmitterSvc;\n+import ca.uhn.fhir.empi.util.EmpiUtil;\n+import ca.uhn.fhir.interceptor.model.RequestPartitionId;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.jpa.dao.IResultIterator;\n+import ca.uhn.fhir.jpa.dao.ISearchBuilder;\n+import ca.uhn.fhir.jpa.model.search.SearchRuntimeDetails;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.rest.api.server.storage.ResourcePersistentId;\n+import ca.uhn.fhir.rest.server.exceptions.InternalErrorException;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.provider.ProviderConstants;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class EmpiBatchSvcImpl implements IEmpiBatchSvc {\n+\n+\t@Autowired\n+\tprivate DaoRegistry myDaoRegistry;\n+\n+\t@Autowired\n+\tprivate EmpiSearchParamSvc myEmpiSearchParamSvc;\n+\n+\t@Autowired\n+\tprivate IEmpiChannelSubmitterSvc myEmpiQueueSubmitterSvc;\n+\n+\tprivate static final int BUFFER_SIZE = 100;\n+\n+\t@Override\n+\t@Transactional\n+\tpublic long runEmpiOnAllTargetTypes(String theCriteria) {\n+\t\tlong submittedCount = 0;\n+\t\tsubmittedCount += runEmpiOnPatientType(theCriteria);\n+\t\tsubmittedCount += runEmpiOnPractitionerType(theCriteria);\n+\t\treturn submittedCount;\n+\t}\n+\n+\t@Override\n+\t@Transactional\n+\tpublic long runEmpiOnTargetType(String theTargetType, String theCriteria) {\n+\t\tresolveTargetTypeOrThrowException(theTargetType);\n+\t\tSearchParameterMap spMap = myEmpiSearchParamSvc.getSearchParameterMapFromCriteria(theTargetType, theCriteria);\n+\t\tspMap.setLoadSynchronousUpTo(BUFFER_SIZE);\n+\t\tISearchBuilder searchBuilder = myEmpiSearchParamSvc.generateSearchBuilderForType(theTargetType);\n+\t\treturn submitAllMatchingResourcesToEmpiChannel(spMap, searchBuilder);\n+\t}\n+\n+\tprivate long submitAllMatchingResourcesToEmpiChannel(SearchParameterMap theSpMap, ISearchBuilder theSearchBuilder) {\n+\t\tSearchRuntimeDetails searchRuntimeDetails = new SearchRuntimeDetails(null, UUID.randomUUID().toString());\n+\t\tlong total = 0;\n+\t\ttry (IResultIterator query = theSearchBuilder.createQuery(theSpMap, searchRuntimeDetails, null, RequestPartitionId.defaultPartition())) {\n+\t\t\tCollection<ResourcePersistentId> pidBatch;\n+\t\t\tdo {\n+\t\t\t\tpidBatch = getPidBatch(query);\n+\t\t\t\ttotal += loadPidsAndSubmitToEmpiChannel(theSearchBuilder, pidBatch);\n+\t\t\t} while (query.hasNext());\n+\t\t} catch (IOException theE) {\n+\t\t\tthrow new InternalErrorException(\"Failure while attempting to query resources for \" + ProviderConstants.OPERATION_EMPI_BATCH_RUN, theE);\n+\t\t}\n+\t\treturn total;\n+\t}\n+\n+\t/**\n+\t * Given an iterator, get a batch of max size BUFFER_SIZE.\n+\t *\n+\t * @param theQuery the iterator.\n+\t *\n+\t * @return a collection of ResourcePersistentId entities.\n+\t */\n+\tpublic Collection<ResourcePersistentId> getPidBatch(IResultIterator theQuery) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd22b0239f6b59994959b648e75744b6d9dcf272"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MTMyMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * This class is responsible for manual submissions of {@link IAnyResource} resources onto the Empi Queue.\n          \n          \n            \n             * This class is responsible for manual submissions of {@link IAnyResource} resources onto the Empi Channel.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463981322", "createdAt": "2020-08-01T17:11:14Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiChannelSubmitterSvcImpl.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR JPA Server - Enterprise Master Patient Index\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.empi.api.IEmpiChannelSubmitterSvc;\n+import ca.uhn.fhir.jpa.subscription.channel.api.ChannelProducerSettings;\n+import ca.uhn.fhir.jpa.subscription.channel.api.IChannelFactory;\n+import ca.uhn.fhir.jpa.subscription.channel.subscription.IChannelNamer;\n+import ca.uhn.fhir.jpa.subscription.model.ResourceModifiedJsonMessage;\n+import ca.uhn.fhir.jpa.subscription.model.ResourceModifiedMessage;\n+import org.hl7.fhir.instance.model.api.IAnyResource;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.messaging.MessageChannel;\n+\n+import static ca.uhn.fhir.empi.api.IEmpiSettings.EMPI_CHANNEL_NAME;\n+\n+/**\n+ * This class is responsible for manual submissions of {@link IAnyResource} resources onto the Empi Queue.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd22b0239f6b59994959b648e75744b6d9dcf272"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MTM4MA==", "bodyText": "theChannelNamer unused", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463981380", "createdAt": "2020-08-01T17:11:56Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiChannelSubmitterSvcImpl.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR JPA Server - Enterprise Master Patient Index\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.empi.api.IEmpiChannelSubmitterSvc;\n+import ca.uhn.fhir.jpa.subscription.channel.api.ChannelProducerSettings;\n+import ca.uhn.fhir.jpa.subscription.channel.api.IChannelFactory;\n+import ca.uhn.fhir.jpa.subscription.channel.subscription.IChannelNamer;\n+import ca.uhn.fhir.jpa.subscription.model.ResourceModifiedJsonMessage;\n+import ca.uhn.fhir.jpa.subscription.model.ResourceModifiedMessage;\n+import org.hl7.fhir.instance.model.api.IAnyResource;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.messaging.MessageChannel;\n+\n+import static ca.uhn.fhir.empi.api.IEmpiSettings.EMPI_CHANNEL_NAME;\n+\n+/**\n+ * This class is responsible for manual submissions of {@link IAnyResource} resources onto the Empi Queue.\n+ */\n+public class EmpiChannelSubmitterSvcImpl implements IEmpiChannelSubmitterSvc {\n+\tprivate MessageChannel myEmpiChannelProducer;\n+\n+\tprivate FhirContext myFhirContext;\n+\n+\tprivate IChannelFactory myChannelFactory;\n+\n+\t@Override\n+\tpublic void submitResourceToEmpiChannel(IBaseResource theResource) {\n+\t\tResourceModifiedJsonMessage resourceModifiedJsonMessage = new ResourceModifiedJsonMessage();\n+\t\tResourceModifiedMessage resourceModifiedMessage = new ResourceModifiedMessage(myFhirContext, theResource, ResourceModifiedMessage.OperationTypeEnum.MANUALLY_TRIGGERED);\n+\t\tresourceModifiedMessage.setOperationType(ResourceModifiedMessage.OperationTypeEnum.MANUALLY_TRIGGERED);\n+\t\tresourceModifiedJsonMessage.setPayload(resourceModifiedMessage);\n+\t\tgetEmpiChannelProducer().send(resourceModifiedJsonMessage);\n+\t}\n+\n+\t@Autowired\n+\tpublic EmpiChannelSubmitterSvcImpl(IChannelNamer theChannelNamer, FhirContext theFhirContext, IChannelFactory theIChannelFactory) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd22b0239f6b59994959b648e75744b6d9dcf272"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MTUxOQ==", "bodyText": "Possible infinite loop.  Add a counter (can be really big, like 100,000) and if this loop iterates more than that number of times, throw an exception.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463981519", "createdAt": "2020-08-01T17:14:09Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiPersonDeletingSvc.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR JPA Server - Enterprise Master Patient Index\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.jpa.api.model.DeleteConflict;\n+import ca.uhn.fhir.jpa.api.model.DeleteConflictList;\n+import ca.uhn.fhir.jpa.api.model.ExpungeOptions;\n+import ca.uhn.fhir.jpa.dao.expunge.ExpungeService;\n+import ca.uhn.fhir.model.primitive.IdDt;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.r4.model.IdType;\n+import org.slf4j.Logger;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.util.List;\n+\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+@Service\n+public class EmpiPersonDeletingSvc {\n+\tprivate static final Logger ourLog = getLogger(EmpiPersonDeletingSvc.class);\n+\n+\t@Autowired\n+\tprivate DaoRegistry myDaoRegistry;\n+\t@Autowired\n+\tprivate ExpungeService myExpungeService;\n+\n+\t/**\n+\t * Function which will delete all resources by their PIDs, and also delete any resources that were undeletable due to\n+\t * VersionConflictException\n+\t *\n+\t * @param theLongs\n+\t */\n+\t@Transactional\n+\tpublic void deleteResourcesAndHandleConflicts(List<Long> theLongs) {\n+\t\tDeleteConflictList\n+\t\t\tdeleteConflictList = new DeleteConflictList();\n+\t\ttheLongs.stream().forEach(pid -> deleteCascade(pid, deleteConflictList));\n+\n+\t\tIFhirResourceDao personDao = myDaoRegistry.getResourceDao(\"Person\");\n+\t\twhile (!deleteConflictList.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd22b0239f6b59994959b648e75744b6d9dcf272"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MTU4OQ==", "bodyText": "code comments here and below", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463981589", "createdAt": "2020-08-01T17:14:55Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiPersonDeletingSvc.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR JPA Server - Enterprise Master Patient Index\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.jpa.api.model.DeleteConflict;\n+import ca.uhn.fhir.jpa.api.model.DeleteConflictList;\n+import ca.uhn.fhir.jpa.api.model.ExpungeOptions;\n+import ca.uhn.fhir.jpa.dao.expunge.ExpungeService;\n+import ca.uhn.fhir.model.primitive.IdDt;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.r4.model.IdType;\n+import org.slf4j.Logger;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.util.List;\n+\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+@Service\n+public class EmpiPersonDeletingSvc {\n+\tprivate static final Logger ourLog = getLogger(EmpiPersonDeletingSvc.class);\n+\n+\t@Autowired\n+\tprivate DaoRegistry myDaoRegistry;\n+\t@Autowired\n+\tprivate ExpungeService myExpungeService;\n+\n+\t/**\n+\t * Function which will delete all resources by their PIDs, and also delete any resources that were undeletable due to\n+\t * VersionConflictException\n+\t *\n+\t * @param theLongs\n+\t */\n+\t@Transactional\n+\tpublic void deleteResourcesAndHandleConflicts(List<Long> theLongs) {\n+\t\tDeleteConflictList\n+\t\t\tdeleteConflictList = new DeleteConflictList();\n+\t\ttheLongs.stream().forEach(pid -> deleteCascade(pid, deleteConflictList));\n+\n+\t\tIFhirResourceDao personDao = myDaoRegistry.getResourceDao(\"Person\");\n+\t\twhile (!deleteConflictList.isEmpty()) {\n+\t\t\tdeleteConflictBatch(deleteConflictList, personDao);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Use the expunge service to expunge all historical and current versions of the resources associated to the PIDs.\n+\t */\n+\tpublic void expungeHistoricalAndCurrentVersionsOfIds(List<Long> theLongs) {\n+\t\tExpungeOptions options = new ExpungeOptions();\n+\t\toptions.setExpungeDeletedResources(true);\n+\t\toptions.setExpungeOldVersions(true);\n+\t\t//myResourceExpungeService.expungeHistoricalVersionsOfIds(null, theLongs, new AtomicInteger(Integer.MAX_VALUE - 1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd22b0239f6b59994959b648e75744b6d9dcf272"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MTcwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tourLog.info(\"Have delete conflict {} - Cascading delete\", next);\n          \n          \n            \n            \t\t\tourLog.info(\"Have delete conflict {} - Cascading delete\", nextSource);", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463981705", "createdAt": "2020-08-01T17:16:20Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiPersonDeletingSvc.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR JPA Server - Enterprise Master Patient Index\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.jpa.api.model.DeleteConflict;\n+import ca.uhn.fhir.jpa.api.model.DeleteConflictList;\n+import ca.uhn.fhir.jpa.api.model.ExpungeOptions;\n+import ca.uhn.fhir.jpa.dao.expunge.ExpungeService;\n+import ca.uhn.fhir.model.primitive.IdDt;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.r4.model.IdType;\n+import org.slf4j.Logger;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.util.List;\n+\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+@Service\n+public class EmpiPersonDeletingSvc {\n+\tprivate static final Logger ourLog = getLogger(EmpiPersonDeletingSvc.class);\n+\n+\t@Autowired\n+\tprivate DaoRegistry myDaoRegistry;\n+\t@Autowired\n+\tprivate ExpungeService myExpungeService;\n+\n+\t/**\n+\t * Function which will delete all resources by their PIDs, and also delete any resources that were undeletable due to\n+\t * VersionConflictException\n+\t *\n+\t * @param theLongs\n+\t */\n+\t@Transactional\n+\tpublic void deleteResourcesAndHandleConflicts(List<Long> theLongs) {\n+\t\tDeleteConflictList\n+\t\t\tdeleteConflictList = new DeleteConflictList();\n+\t\ttheLongs.stream().forEach(pid -> deleteCascade(pid, deleteConflictList));\n+\n+\t\tIFhirResourceDao personDao = myDaoRegistry.getResourceDao(\"Person\");\n+\t\twhile (!deleteConflictList.isEmpty()) {\n+\t\t\tdeleteConflictBatch(deleteConflictList, personDao);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Use the expunge service to expunge all historical and current versions of the resources associated to the PIDs.\n+\t */\n+\tpublic void expungeHistoricalAndCurrentVersionsOfIds(List<Long> theLongs) {\n+\t\tExpungeOptions options = new ExpungeOptions();\n+\t\toptions.setExpungeDeletedResources(true);\n+\t\toptions.setExpungeOldVersions(true);\n+\t\t//myResourceExpungeService.expungeHistoricalVersionsOfIds(null, theLongs, new AtomicInteger(Integer.MAX_VALUE - 1));\n+\t\ttheLongs.stream()\n+\t\t\t.forEach(personId -> {\n+\t\t\t\tmyExpungeService.expunge(\"Person\", personId, null, options, null);\n+\t\t\t});\n+\t\t//myResourceExpungeService.expungeCurrentVersionOfResources(null, theLongs, new AtomicInteger(Integer.MAX_VALUE - 1));\n+\t}\n+\n+\tprivate void deleteCascade(Long pid, DeleteConflictList theDeleteConflictList) {\n+\t\tourLog.debug(\"About to cascade delete: \" + pid);\n+\t\tIFhirResourceDao resourceDao = myDaoRegistry.getResourceDao(\"Person\");\n+\t\tresourceDao.delete(new IdType(\"Person/\" + pid), theDeleteConflictList, null, null);\n+\t}\n+\n+\tprivate void deleteConflictBatch(DeleteConflictList theDcl, IFhirResourceDao<IBaseResource> theDao) {\n+\t\tDeleteConflictList newBatch = new DeleteConflictList();\n+\t\tfor (DeleteConflict next : theDcl) {\n+\t\t\tIdDt nextSource = next.getSourceId();\n+\t\t\tourLog.info(\"Have delete conflict {} - Cascading delete\", next);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd22b0239f6b59994959b648e75744b6d9dcf272"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MTgwNw==", "bodyText": "If it doesn't already exist, please add a removeAll() function.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463981807", "createdAt": "2020-08-01T17:17:52Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiPersonDeletingSvc.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR JPA Server - Enterprise Master Patient Index\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.jpa.api.model.DeleteConflict;\n+import ca.uhn.fhir.jpa.api.model.DeleteConflictList;\n+import ca.uhn.fhir.jpa.api.model.ExpungeOptions;\n+import ca.uhn.fhir.jpa.dao.expunge.ExpungeService;\n+import ca.uhn.fhir.model.primitive.IdDt;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.r4.model.IdType;\n+import org.slf4j.Logger;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.util.List;\n+\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+@Service\n+public class EmpiPersonDeletingSvc {\n+\tprivate static final Logger ourLog = getLogger(EmpiPersonDeletingSvc.class);\n+\n+\t@Autowired\n+\tprivate DaoRegistry myDaoRegistry;\n+\t@Autowired\n+\tprivate ExpungeService myExpungeService;\n+\n+\t/**\n+\t * Function which will delete all resources by their PIDs, and also delete any resources that were undeletable due to\n+\t * VersionConflictException\n+\t *\n+\t * @param theLongs\n+\t */\n+\t@Transactional\n+\tpublic void deleteResourcesAndHandleConflicts(List<Long> theLongs) {\n+\t\tDeleteConflictList\n+\t\t\tdeleteConflictList = new DeleteConflictList();\n+\t\ttheLongs.stream().forEach(pid -> deleteCascade(pid, deleteConflictList));\n+\n+\t\tIFhirResourceDao personDao = myDaoRegistry.getResourceDao(\"Person\");\n+\t\twhile (!deleteConflictList.isEmpty()) {\n+\t\t\tdeleteConflictBatch(deleteConflictList, personDao);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Use the expunge service to expunge all historical and current versions of the resources associated to the PIDs.\n+\t */\n+\tpublic void expungeHistoricalAndCurrentVersionsOfIds(List<Long> theLongs) {\n+\t\tExpungeOptions options = new ExpungeOptions();\n+\t\toptions.setExpungeDeletedResources(true);\n+\t\toptions.setExpungeOldVersions(true);\n+\t\t//myResourceExpungeService.expungeHistoricalVersionsOfIds(null, theLongs, new AtomicInteger(Integer.MAX_VALUE - 1));\n+\t\ttheLongs.stream()\n+\t\t\t.forEach(personId -> {\n+\t\t\t\tmyExpungeService.expunge(\"Person\", personId, null, options, null);\n+\t\t\t});\n+\t\t//myResourceExpungeService.expungeCurrentVersionOfResources(null, theLongs, new AtomicInteger(Integer.MAX_VALUE - 1));\n+\t}\n+\n+\tprivate void deleteCascade(Long pid, DeleteConflictList theDeleteConflictList) {\n+\t\tourLog.debug(\"About to cascade delete: \" + pid);\n+\t\tIFhirResourceDao resourceDao = myDaoRegistry.getResourceDao(\"Person\");\n+\t\tresourceDao.delete(new IdType(\"Person/\" + pid), theDeleteConflictList, null, null);\n+\t}\n+\n+\tprivate void deleteConflictBatch(DeleteConflictList theDcl, IFhirResourceDao<IBaseResource> theDao) {\n+\t\tDeleteConflictList newBatch = new DeleteConflictList();\n+\t\tfor (DeleteConflict next : theDcl) {\n+\t\t\tIdDt nextSource = next.getSourceId();\n+\t\t\tourLog.info(\"Have delete conflict {} - Cascading delete\", next);\n+\t\t\ttheDao.delete(nextSource.toVersionless(), newBatch, null, null);\n+\t\t}\n+\t\ttheDcl.removeIf(x -> true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd22b0239f6b59994959b648e75744b6d9dcf272"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MjA2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * This class is in charge of Clearing out existing EMPI links, as well as deleting all persons related to those EMPI Links.\n          \n          \n            \n             * This class is responsible for Clearing out existing EMPI links, as well as deleting all persons related to those EMPI Links.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463982064", "createdAt": "2020-08-01T17:21:23Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiResetSvcImpl.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR JPA Server - Enterprise Master Patient Index\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.empi.api.IEmpiResetSvc;\n+import ca.uhn.fhir.empi.util.EmpiUtil;\n+import ca.uhn.fhir.jpa.empi.dao.EmpiLinkDaoSvc;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.provider.ProviderConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import java.util.List;\n+\n+/**\n+ * This class is in charge of Clearing out existing EMPI links, as well as deleting all persons related to those EMPI Links.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd22b0239f6b59994959b648e75744b6d9dcf272"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MjIxMg==", "bodyText": "nitpick: I think code reads easier when you put the positive case first rather than negating a conditional", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463982212", "createdAt": "2020-08-01T17:23:19Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiSearchParamSvc.java", "diffHunk": "@@ -60,4 +71,28 @@ public SearchParameterMap mapFromCriteria(String theResourceType, String theReso\n \tpublic RuntimeSearchParam getActiveSearchParam(String theResourceName, String theParamName) {\n \t\treturn mySearchParamRegistry.getActiveSearchParam(theResourceName, theParamName);\n \t}\n+\n+\t/**\n+\t * Given a target type, and a criteria string of the shape name=x&birthDate=y, generate a {@link SearchParameterMap}\n+\t * that represents this query.\n+\t *\n+\t * @param theTargetType the resource type to execute the search on\n+\t * @param theCriteria the string search criteria.\n+\t *\n+\t * @return the generated SearchParameterMap, or an empty one if there is no criteria.\n+\t */\n+\tpublic SearchParameterMap getSearchParameterMapFromCriteria(String theTargetType, String theCriteria) {\n+\t\tSearchParameterMap spMap;\n+\t\tif (!StringUtils.isBlank(theCriteria)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd22b0239f6b59994959b648e75744b6d9dcf272"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MzE0Mg==", "bodyText": "assert there are links to delete", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463983142", "createdAt": "2020-08-01T17:34:24Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/provider/EmpiProviderClearLinkR4Test.java", "diffHunk": "@@ -0,0 +1,172 @@\n+package ca.uhn.fhir.jpa.empi.provider;\n+\n+import ca.uhn.fhir.jpa.entity.EmpiLink;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.model.primitive.IdDt;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import org.hl7.fhir.r4.model.Parameters;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.hl7.fhir.r4.model.Person;\n+import org.hl7.fhir.r4.model.Practitioner;\n+import org.hl7.fhir.r4.model.Reference;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import javax.annotation.Nonnull;\n+import java.util.List;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class EmpiProviderClearLinkR4Test extends BaseLinkR4Test {\n+\n+\n+\tprotected Practitioner myPractitioner;\n+\tprotected StringType myPractitionerId;\n+\tprotected Person myPractitionerPerson;\n+\tprotected StringType myPractitionerPersonId;\n+\n+\t@BeforeEach\n+\tpublic void before() {\n+\t\tsuper.before();\n+\t\tmyPractitioner = createPractitionerAndUpdateLinks(new Practitioner());\n+\t\tmyPractitionerId = new StringType(myPractitioner.getIdElement().getValue());\n+\t\tmyPractitionerPerson = getPersonFromTarget(myPractitioner);\n+\t\tmyPractitionerPersonId = new StringType(myPractitionerPerson.getIdElement().getValue());\n+\t}\n+\n+\t@Test\n+\tpublic void testClearAllLinks() {\n+\t\tassertLinkCount(2);\n+\t\tmyEmpiProviderR4.clearEmpiLinks(null);\n+\t\tassertNoLinksExist();\n+\t}\n+\n+\tprivate void assertNoLinksExist() {\n+\t\tassertNoPatientLinksExist();\n+\t\tassertNoPractitionerLinksExist();\n+\t}\n+\n+\tprivate void assertNoPatientLinksExist() {\n+\t\tassertThat(getPatientLinks(), hasSize(0));\n+\t}\n+\n+\tprivate void assertNoPractitionerLinksExist() {\n+\t\tassertThat(getPractitionerLinks(), hasSize(0));\n+\t}\n+\n+\t@Test\n+\tpublic void testClearPatientLinks() {\n+\t\tassertLinkCount(2);\n+\t\tPerson read = myPersonDao.read(new IdDt(myPersonId.getValueAsString()).toVersionless());\n+\t\tassertThat(read, is(notNullValue()));\n+\t\tmyEmpiProviderR4.clearEmpiLinks(new StringType(\"Patient\"));\n+\t\tassertNoPatientLinksExist();\n+\t\ttry {\n+\t\t\tmyPersonDao.read(new IdDt(myPersonId.getValueAsString()).toVersionless());\n+\t\t\tfail();\n+\t\t} catch (ResourceNotFoundException e) {}\n+\n+\t}\n+\t@Test\n+\tpublic void testPersonsWithMultipleHistoricalVersionsCanBeDeleted() {\n+\t\tcreatePatientAndUpdateLinks(buildJanePatient());\n+\t\tcreatePatientAndUpdateLinks(buildJanePatient());\n+\t\tcreatePatientAndUpdateLinks(buildJanePatient());\n+\t\tcreatePatientAndUpdateLinks(buildJanePatient());\n+\t\tcreatePatientAndUpdateLinks(buildJanePatient());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd22b0239f6b59994959b648e75744b6d9dcf272"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MzIwNA==", "bodyText": "nice", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463983204", "createdAt": "2020-08-01T17:34:58Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/provider/EmpiProviderClearLinkR4Test.java", "diffHunk": "@@ -0,0 +1,172 @@\n+package ca.uhn.fhir.jpa.empi.provider;\n+\n+import ca.uhn.fhir.jpa.entity.EmpiLink;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.model.primitive.IdDt;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import org.hl7.fhir.r4.model.Parameters;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.hl7.fhir.r4.model.Person;\n+import org.hl7.fhir.r4.model.Practitioner;\n+import org.hl7.fhir.r4.model.Reference;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import javax.annotation.Nonnull;\n+import java.util.List;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class EmpiProviderClearLinkR4Test extends BaseLinkR4Test {\n+\n+\n+\tprotected Practitioner myPractitioner;\n+\tprotected StringType myPractitionerId;\n+\tprotected Person myPractitionerPerson;\n+\tprotected StringType myPractitionerPersonId;\n+\n+\t@BeforeEach\n+\tpublic void before() {\n+\t\tsuper.before();\n+\t\tmyPractitioner = createPractitionerAndUpdateLinks(new Practitioner());\n+\t\tmyPractitionerId = new StringType(myPractitioner.getIdElement().getValue());\n+\t\tmyPractitionerPerson = getPersonFromTarget(myPractitioner);\n+\t\tmyPractitionerPersonId = new StringType(myPractitionerPerson.getIdElement().getValue());\n+\t}\n+\n+\t@Test\n+\tpublic void testClearAllLinks() {\n+\t\tassertLinkCount(2);\n+\t\tmyEmpiProviderR4.clearEmpiLinks(null);\n+\t\tassertNoLinksExist();\n+\t}\n+\n+\tprivate void assertNoLinksExist() {\n+\t\tassertNoPatientLinksExist();\n+\t\tassertNoPractitionerLinksExist();\n+\t}\n+\n+\tprivate void assertNoPatientLinksExist() {\n+\t\tassertThat(getPatientLinks(), hasSize(0));\n+\t}\n+\n+\tprivate void assertNoPractitionerLinksExist() {\n+\t\tassertThat(getPractitionerLinks(), hasSize(0));\n+\t}\n+\n+\t@Test\n+\tpublic void testClearPatientLinks() {\n+\t\tassertLinkCount(2);\n+\t\tPerson read = myPersonDao.read(new IdDt(myPersonId.getValueAsString()).toVersionless());\n+\t\tassertThat(read, is(notNullValue()));\n+\t\tmyEmpiProviderR4.clearEmpiLinks(new StringType(\"Patient\"));\n+\t\tassertNoPatientLinksExist();\n+\t\ttry {\n+\t\t\tmyPersonDao.read(new IdDt(myPersonId.getValueAsString()).toVersionless());\n+\t\t\tfail();\n+\t\t} catch (ResourceNotFoundException e) {}\n+\n+\t}\n+\t@Test\n+\tpublic void testPersonsWithMultipleHistoricalVersionsCanBeDeleted() {\n+\t\tcreatePatientAndUpdateLinks(buildJanePatient());\n+\t\tcreatePatientAndUpdateLinks(buildJanePatient());\n+\t\tcreatePatientAndUpdateLinks(buildJanePatient());\n+\t\tcreatePatientAndUpdateLinks(buildJanePatient());\n+\t\tcreatePatientAndUpdateLinks(buildJanePatient());\n+\n+\t\tmyEmpiProviderR4.clearEmpiLinks(null);\n+\t\tassertNoPatientLinksExist();\n+\t}\n+\n+\t@Test\n+\tpublic void testPersonWithLinksToOtherPersonsCanBeDeleted() {\n+\t\tcreatePatientAndUpdateLinks(buildJanePatient());\n+\t\tPatient patientAndUpdateLinks1 = createPatientAndUpdateLinks(buildJanePatient());\n+\t\tPatient patientAndUpdateLinks = createPatientAndUpdateLinks(buildPaulPatient());\n+\n+\t\tPerson personFromTarget = getPersonFromTarget(patientAndUpdateLinks);\n+\t\tPerson personFromTarget2 = getPersonFromTarget(patientAndUpdateLinks1);\n+\t\tlinkPersons(personFromTarget, personFromTarget2);\n+\n+\t\t//SUT\n+\t\tmyEmpiProviderR4.clearEmpiLinks(null);\n+\n+\t\tassertNoPatientLinksExist();\n+\t\tIBundleProvider search = myPersonDao.search(new SearchParameterMap().setLoadSynchronous(true));\n+\t\tassertThat(search.size(), is(equalTo(0)));\n+\t}\n+\n+\t@Test\n+\tpublic void testPersonsWithCircularReferenceCanBeCleared() {\n+\t\tPatient patientAndUpdateLinks = createPatientAndUpdateLinks(buildPaulPatient());\n+\t\tPatient patientAndUpdateLinks1 = createPatientAndUpdateLinks(buildJanePatient());\n+\t\tPatient patientAndUpdateLinks2 = createPatientAndUpdateLinks(buildFrankPatient());\n+\n+\t\tPerson personFromTarget = getPersonFromTarget(patientAndUpdateLinks);\n+\t\tPerson personFromTarget1 = getPersonFromTarget(patientAndUpdateLinks1);\n+\t\tPerson personFromTarget2 = getPersonFromTarget(patientAndUpdateLinks2);\n+\n+\t\t// A -> B -> C -> A linkages.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd22b0239f6b59994959b648e75744b6d9dcf272"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MzI0MQ==", "bodyText": "unused", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463983241", "createdAt": "2020-08-01T17:35:18Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/provider/EmpiProviderClearLinkR4Test.java", "diffHunk": "@@ -0,0 +1,172 @@\n+package ca.uhn.fhir.jpa.empi.provider;\n+\n+import ca.uhn.fhir.jpa.entity.EmpiLink;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.model.primitive.IdDt;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import org.hl7.fhir.r4.model.Parameters;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.hl7.fhir.r4.model.Person;\n+import org.hl7.fhir.r4.model.Practitioner;\n+import org.hl7.fhir.r4.model.Reference;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import javax.annotation.Nonnull;\n+import java.util.List;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class EmpiProviderClearLinkR4Test extends BaseLinkR4Test {\n+\n+\n+\tprotected Practitioner myPractitioner;\n+\tprotected StringType myPractitionerId;\n+\tprotected Person myPractitionerPerson;\n+\tprotected StringType myPractitionerPersonId;\n+\n+\t@BeforeEach\n+\tpublic void before() {\n+\t\tsuper.before();\n+\t\tmyPractitioner = createPractitionerAndUpdateLinks(new Practitioner());\n+\t\tmyPractitionerId = new StringType(myPractitioner.getIdElement().getValue());\n+\t\tmyPractitionerPerson = getPersonFromTarget(myPractitioner);\n+\t\tmyPractitionerPersonId = new StringType(myPractitionerPerson.getIdElement().getValue());\n+\t}\n+\n+\t@Test\n+\tpublic void testClearAllLinks() {\n+\t\tassertLinkCount(2);\n+\t\tmyEmpiProviderR4.clearEmpiLinks(null);\n+\t\tassertNoLinksExist();\n+\t}\n+\n+\tprivate void assertNoLinksExist() {\n+\t\tassertNoPatientLinksExist();\n+\t\tassertNoPractitionerLinksExist();\n+\t}\n+\n+\tprivate void assertNoPatientLinksExist() {\n+\t\tassertThat(getPatientLinks(), hasSize(0));\n+\t}\n+\n+\tprivate void assertNoPractitionerLinksExist() {\n+\t\tassertThat(getPractitionerLinks(), hasSize(0));\n+\t}\n+\n+\t@Test\n+\tpublic void testClearPatientLinks() {\n+\t\tassertLinkCount(2);\n+\t\tPerson read = myPersonDao.read(new IdDt(myPersonId.getValueAsString()).toVersionless());\n+\t\tassertThat(read, is(notNullValue()));\n+\t\tmyEmpiProviderR4.clearEmpiLinks(new StringType(\"Patient\"));\n+\t\tassertNoPatientLinksExist();\n+\t\ttry {\n+\t\t\tmyPersonDao.read(new IdDt(myPersonId.getValueAsString()).toVersionless());\n+\t\t\tfail();\n+\t\t} catch (ResourceNotFoundException e) {}\n+\n+\t}\n+\t@Test\n+\tpublic void testPersonsWithMultipleHistoricalVersionsCanBeDeleted() {\n+\t\tcreatePatientAndUpdateLinks(buildJanePatient());\n+\t\tcreatePatientAndUpdateLinks(buildJanePatient());\n+\t\tcreatePatientAndUpdateLinks(buildJanePatient());\n+\t\tcreatePatientAndUpdateLinks(buildJanePatient());\n+\t\tcreatePatientAndUpdateLinks(buildJanePatient());\n+\n+\t\tmyEmpiProviderR4.clearEmpiLinks(null);\n+\t\tassertNoPatientLinksExist();\n+\t}\n+\n+\t@Test\n+\tpublic void testPersonWithLinksToOtherPersonsCanBeDeleted() {\n+\t\tcreatePatientAndUpdateLinks(buildJanePatient());\n+\t\tPatient patientAndUpdateLinks1 = createPatientAndUpdateLinks(buildJanePatient());\n+\t\tPatient patientAndUpdateLinks = createPatientAndUpdateLinks(buildPaulPatient());\n+\n+\t\tPerson personFromTarget = getPersonFromTarget(patientAndUpdateLinks);\n+\t\tPerson personFromTarget2 = getPersonFromTarget(patientAndUpdateLinks1);\n+\t\tlinkPersons(personFromTarget, personFromTarget2);\n+\n+\t\t//SUT\n+\t\tmyEmpiProviderR4.clearEmpiLinks(null);\n+\n+\t\tassertNoPatientLinksExist();\n+\t\tIBundleProvider search = myPersonDao.search(new SearchParameterMap().setLoadSynchronous(true));\n+\t\tassertThat(search.size(), is(equalTo(0)));\n+\t}\n+\n+\t@Test\n+\tpublic void testPersonsWithCircularReferenceCanBeCleared() {\n+\t\tPatient patientAndUpdateLinks = createPatientAndUpdateLinks(buildPaulPatient());\n+\t\tPatient patientAndUpdateLinks1 = createPatientAndUpdateLinks(buildJanePatient());\n+\t\tPatient patientAndUpdateLinks2 = createPatientAndUpdateLinks(buildFrankPatient());\n+\n+\t\tPerson personFromTarget = getPersonFromTarget(patientAndUpdateLinks);\n+\t\tPerson personFromTarget1 = getPersonFromTarget(patientAndUpdateLinks1);\n+\t\tPerson personFromTarget2 = getPersonFromTarget(patientAndUpdateLinks2);\n+\n+\t\t// A -> B -> C -> A linkages.\n+\t\tlinkPersons(personFromTarget, personFromTarget1);\n+\t\tlinkPersons(personFromTarget1, personFromTarget2);\n+\t\tlinkPersons(personFromTarget2, personFromTarget);\n+\n+\t\t//SUT\n+\t\tParameters parameters = myEmpiProviderR4.clearEmpiLinks(null);\n+\t\tassertNoPatientLinksExist();\n+\t\tIBundleProvider search = myPersonDao.search(new SearchParameterMap().setLoadSynchronous(true));\n+\t\tassertThat(search.size(), is(equalTo(0)));\n+\n+\t}\n+\n+\tprivate void linkPersons(Person theSourcePerson, Person theTargetPerson) {\n+\t\tPerson.PersonLinkComponent plc1 = new Person.PersonLinkComponent();\n+\t\tplc1.setAssurance(Person.IdentityAssuranceLevel.LEVEL2);\n+\t\tplc1.setTarget(new Reference(theTargetPerson.getIdElement().toUnqualifiedVersionless()));\n+\t\ttheSourcePerson.getLink().add(plc1);\n+\t\tmyPersonDao.update(theSourcePerson);\n+\t}\n+\n+\t@Test\n+\tpublic void testClearPractitionerLinks() {\n+\t\tassertLinkCount(2);\n+\t\tPerson read = myPersonDao.read(new IdDt(myPractitionerPersonId.getValueAsString()).toVersionless());\n+\t\tassertThat(read, is(notNullValue()));\n+\t\tmyEmpiProviderR4.clearEmpiLinks(new StringType(\"Practitioner\"));\n+\t\tassertNoPractitionerLinksExist();\n+\t\ttry {\n+\t\t\tmyPersonDao.read(new IdDt(myPractitionerPersonId.getValueAsString()).toVersionless());\n+\t\t\tfail();\n+\t\t} catch (ResourceNotFoundException e) {}\n+\t}\n+\n+\t@Test\n+\tpublic void testClearInvalidTargetType() {\n+\t\ttry {\n+\t\t\tmyEmpiProviderR4.clearEmpiLinks(new StringType(\"Observation\"));\n+\t\t\tfail();\n+\t\t} catch (InvalidRequestException e) {\n+\t\t\tassertThat(e.getMessage(), is(equalTo(\"$empi-clear does not support resource type: Observation\")));\n+\t\t}\n+\t}\n+\n+\n+\t@Nonnull\n+\tprotected EmpiLink getOnlyPractitionerLink() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd22b0239f6b59994959b648e75744b6d9dcf272"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MzMzMw==", "bodyText": "unused", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463983333", "createdAt": "2020-08-01T17:36:44Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/BaseEmpiR4Test.java", "diffHunk": "@@ -101,6 +104,8 @@\n \tEmpiSearchParameterLoader myEmpiSearchParameterLoader;\n \t@Autowired\n \tSearchParamRegistryImpl mySearchParamRegistry;\n+\t@Autowired\n+\tprivate IEmpiBatchSvc myEmpiBatchService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd22b0239f6b59994959b648e75744b6d9dcf272"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MzQyOQ==", "bodyText": "use constant from entity class for length", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463983429", "createdAt": "2020-08-01T17:37:54Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-migrate/src/main/java/ca/uhn/fhir/jpa/migrate/tasks/HapiFhirJpaMigrationTasks.java", "diffHunk": "@@ -138,6 +138,9 @@ protected void init510() {\n \t\tempiLink.addColumn(\"20200715.5\", \"SCORE\").nullable().type(ColumnTypeEnum.FLOAT);\n \n \t\tinit510_20200725();\n+\n+\t\t//EMPI Target Type\n+\t\tempiLink.addColumn(\"20200727.1\",\"TARGET_TYPE\").nullable().type(ColumnTypeEnum.STRING, 40);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd22b0239f6b59994959b648e75744b6d9dcf272"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MzYyNA==", "bodyText": "unused", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463983624", "createdAt": "2020-08-01T17:40:24Z", "author": {"login": "fil512"}, "path": "hapi-fhir-server/src/main/java/ca/uhn/fhir/rest/server/provider/ProviderConstants.java", "diffHunk": "@@ -81,4 +81,13 @@\n \n \tpublic static final String EMPI_DUPLICATE_PERSONS = \"$empi-duplicate-persons\";\n \tpublic static final String EMPI_NOT_DUPLICATE = \"$empi-not-duplicate\";\n+\n+\tpublic static final String EMPI_CLEAR = \"$empi-clear\";\n+\tpublic static final String EMPI_CLEAR_TARGET_TYPE = \"targetType\";\n+\tpublic static final String OPERATION_EMPI_BATCH_RUN = \"$empi-batch-run\";\n+\tpublic static final String EMPI_BATCH_RUN_TARGET_TYPE = \"targetType\" ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd22b0239f6b59994959b648e75744b6d9dcf272"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MzYzNw==", "bodyText": "unused", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463983637", "createdAt": "2020-08-01T17:40:31Z", "author": {"login": "fil512"}, "path": "hapi-fhir-server/src/main/java/ca/uhn/fhir/rest/server/provider/ProviderConstants.java", "diffHunk": "@@ -81,4 +81,13 @@\n \n \tpublic static final String EMPI_DUPLICATE_PERSONS = \"$empi-duplicate-persons\";\n \tpublic static final String EMPI_NOT_DUPLICATE = \"$empi-not-duplicate\";\n+\n+\tpublic static final String EMPI_CLEAR = \"$empi-clear\";\n+\tpublic static final String EMPI_CLEAR_TARGET_TYPE = \"targetType\";\n+\tpublic static final String OPERATION_EMPI_BATCH_RUN = \"$empi-batch-run\";\n+\tpublic static final String EMPI_BATCH_RUN_TARGET_TYPE = \"targetType\" ;\n+\tpublic static final String EMPI_BATCH_RUN_CRITERIA= \"criteria\" ;\n+\tpublic static final String EMPI_BATCH_RUN_RESOURCE_IDS = \"resourceIds\" ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd22b0239f6b59994959b648e75744b6d9dcf272"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4Mzc1OA==", "bodyText": "TODO", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463983758", "createdAt": "2020-08-01T17:41:53Z", "author": {"login": "fil512"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/api/IEmpiChannelSubmitterSvc.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package ca.uhn.fhir.empi.api;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR - Enterprise Master Patient Index\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+\n+public interface IEmpiChannelSubmitterSvc {\n+\n+\t/**\n+\t * TODO GGG write javadoc", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd22b0239f6b59994959b648e75744b6d9dcf272"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4Mzk0MQ==", "bodyText": "Oops missed this the first time around.\nPlease remove the try/catch.  This needs to throw an exception if it fails so the test fails.\nAs written, junit has no way of knowing the assertion failed.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463983941", "createdAt": "2020-08-01T17:44:18Z", "author": {"login": "fil512"}, "path": "hapi-fhir-test-utilities/src/main/java/ca/uhn/test/concurrency/PointcutLatch.java", "diffHunk": "@@ -67,6 +67,17 @@ public PointcutLatch(String theName) {\n \t\tmyPointcut = null;\n \t}\n \n+\tpublic void runWithExpectedCount(int theExpectedCount, Runnable r) {\n+\t\tthis.setExpectedCount(theExpectedCount);\n+\t\tr.run();\n+\t\ttry {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd22b0239f6b59994959b648e75744b6d9dcf272"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d3cecaab289bc5327cd2a3f7bf9a8f19be93e72", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/4d3cecaab289bc5327cd2a3f7bf9a8f19be93e72", "committedDate": "2020-08-01T18:12:28Z", "message": "Fix pointcutlatch issue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NTk1Mzgz", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#pullrequestreview-459595383", "createdAt": "2020-08-01T18:28:18Z", "commit": {"oid": "4d3cecaab289bc5327cd2a3f7bf9a8f19be93e72"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7299162f10ea9ad4b80a8d1a420f86a719dd0421", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/7299162f10ea9ad4b80a8d1a420f86a719dd0421", "committedDate": "2020-08-01T18:31:28Z", "message": "Update doc phrasing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfecca33bcd9d271b1bb0f5f5e5299eb60f3cb53", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/dfecca33bcd9d271b1bb0f5f5e5299eb60f3cb53", "committedDate": "2020-08-01T18:32:30Z", "message": "Update hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_operations.md\n\nCo-authored-by: Ken Stevens <khstevens@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e67ee364920f75d4cb294594e4f221403a9de634", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/e67ee364920f75d4cb294594e4f221403a9de634", "committedDate": "2020-08-01T18:36:14Z", "message": "Renamed and modified reset constant for better naming"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3179e34bcece06a85049316f345deafa3849ac57", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/3179e34bcece06a85049316f345deafa3849ac57", "committedDate": "2020-08-01T18:36:21Z", "message": "Merge branch 'batch-empi-job' of github.com:jamesagnew/hapi-fhir into batch-empi-job"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c5b69bb6e9b972fef32a428cb0bebc87aabdd71", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/9c5b69bb6e9b972fef32a428cb0bebc87aabdd71", "committedDate": "2020-08-01T18:37:11Z", "message": "Update hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_operations.md\n\nCo-authored-by: Ken Stevens <khstevens@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c64cec8facbfc04919733942424b176d0089ce5", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/4c64cec8facbfc04919733942424b176d0089ce5", "committedDate": "2020-08-01T18:40:24Z", "message": "Update hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_operations.md\n\nCo-authored-by: Ken Stevens <khstevens@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b378995b2e71fbf415b91759502a1056fb73d6a", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/8b378995b2e71fbf415b91759502a1056fb73d6a", "committedDate": "2020-08-01T18:45:47Z", "message": "Doc updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efaf09fbfac34e7d8d5fc82b35c357a54b616e6c", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/efaf09fbfac34e7d8d5fc82b35c357a54b616e6c", "committedDate": "2020-08-01T18:47:00Z", "message": "Fix java.lang.string in empiLink entity"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ef1665061ce7a5e6ddc2fb0d1dd2f32e2398eb3", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/0ef1665061ce7a5e6ddc2fb0d1dd2f32e2398eb3", "committedDate": "2020-08-01T18:48:27Z", "message": "Merge branch 'batch-empi-job' of github.com:jamesagnew/hapi-fhir into batch-empi-job"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d6a26bf1deb30c9b3a1f409b56a0574f52d7bea", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/1d6a26bf1deb30c9b3a1f409b56a0574f52d7bea", "committedDate": "2020-08-01T18:49:07Z", "message": "Remove unused method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a4d81eb850c0fe2d2164839c8fe8f774def8b16", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/0a4d81eb850c0fe2d2164839c8fe8f774def8b16", "committedDate": "2020-08-01T20:00:55Z", "message": "Move getNextBatch into IResultIterator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "995c188305b7223baceefaa8780f4be65df066ef", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/995c188305b7223baceefaa8780f4be65df066ef", "committedDate": "2020-08-01T20:03:37Z", "message": "implement function for all concrete classe"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0d301b2450fe8cb0ae2b0da602db7e6878b4c39", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/b0d301b2450fe8cb0ae2b0da602db7e6878b4c39", "committedDate": "2020-08-01T20:04:22Z", "message": "Remove constructor argument that was unused"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d90bbcc9c3af740a700fd4ceb69c39e14f1d6f7", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/0d90bbcc9c3af740a700fd4ceb69c39e14f1d6f7", "committedDate": "2020-08-01T20:06:25Z", "message": "Add escape hatch to while loop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3068fe8c1aac329c0f2441a40b56f081fcc465c1", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/3068fe8c1aac329c0f2441a40b56f081fcc465c1", "committedDate": "2020-08-01T20:08:29Z", "message": "Rework escape hatch to error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8dfd0086438cbbf3e719d1e2e14c4c99dee9532", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/c8dfd0086438cbbf3e719d1e2e14c4c99dee9532", "committedDate": "2020-08-01T20:09:23Z", "message": "Remove dead comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cf48eb9b9577146e6fd2636d3a0d3b4e745aafc", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/2cf48eb9b9577146e6fd2636d3a0d3b4e745aafc", "committedDate": "2020-08-01T20:11:33Z", "message": "Move field length into constants"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46251af81aea5691bfba9993b4178b1437831575", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/46251af81aea5691bfba9993b4178b1437831575", "committedDate": "2020-08-01T20:12:32Z", "message": "Rename queue to channel"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad887428b382d5d7c6e2b15f18e09d8ec917d015", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/ad887428b382d5d7c6e2b15f18e09d8ec917d015", "committedDate": "2020-08-01T20:15:22Z", "message": "Add removeAll function to DeleteConflictList"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac5d261a7feb35b7e23aeed0963854c5d603ca4c", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/ac5d261a7feb35b7e23aeed0963854c5d603ca4c", "committedDate": "2020-08-01T20:16:50Z", "message": "Doc updates and flip logic order in SearchParamSVc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "160155bd8f1ea695eba2fd00c99a7c242100c2ec", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/160155bd8f1ea695eba2fd00c99a7c242100c2ec", "committedDate": "2020-08-01T20:17:51Z", "message": "Update test to ensure start state is correct"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da30772a017b50e48d684c24b6480485c83f5c24", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/da30772a017b50e48d684c24b6480485c83f5c24", "committedDate": "2020-08-01T20:19:52Z", "message": "Remove dead methods, constants, and add a javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8a3a6e356424f284c0c9f3855287c9605941c93", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/b8a3a6e356424f284c0c9f3855287c9605941c93", "committedDate": "2020-08-02T00:35:04Z", "message": "Update test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b9f9e6cc39c3ca80a4e62029fb3ffaa042baeee", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/3b9f9e6cc39c3ca80a4e62029fb3ffaa042baeee", "committedDate": "2020-08-04T04:35:12Z", "message": "Rename operation"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3995, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}