{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4NDIxMjkx", "number": 1978, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjoxNDo1N1rOEOVGtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzo0NjozNFrOEOXVqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDYxMzAyOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiLinkSvcImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjoxNDo1N1rOGxa-9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMjo0NzoxNVrOGxn-pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ3NTUwOA==", "bodyText": "rename variable to theMatchOutcome to match type", "url": "https://github.com/hapifhir/hapi-fhir/pull/1978#discussion_r454475508", "createdAt": "2020-07-14T16:14:57Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiLinkSvcImpl.java", "diffHunk": "@@ -63,24 +64,25 @@\n \n \t@Override\n \t@Transactional\n-\tpublic void updateLink(IAnyResource thePerson, IAnyResource theTarget, EmpiMatchResultEnum theMatchResult, EmpiLinkSourceEnum theLinkSource, EmpiTransactionContext theEmpiTransactionContext) {\n+\tpublic void updateLink(IAnyResource thePerson, IAnyResource theTarget, EmpiMatchOutcome theMatchResult, EmpiLinkSourceEnum theLinkSource, EmpiTransactionContext theEmpiTransactionContext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acf4f5672542522d3b80ecd7835559790fd98a5f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY4ODQyMw==", "bodyText": "done", "url": "https://github.com/hapifhir/hapi-fhir/pull/1978#discussion_r454688423", "createdAt": "2020-07-14T22:47:15Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiLinkSvcImpl.java", "diffHunk": "@@ -63,24 +64,25 @@\n \n \t@Override\n \t@Transactional\n-\tpublic void updateLink(IAnyResource thePerson, IAnyResource theTarget, EmpiMatchResultEnum theMatchResult, EmpiLinkSourceEnum theLinkSource, EmpiTransactionContext theEmpiTransactionContext) {\n+\tpublic void updateLink(IAnyResource thePerson, IAnyResource theTarget, EmpiMatchOutcome theMatchResult, EmpiLinkSourceEnum theLinkSource, EmpiTransactionContext theEmpiTransactionContext) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ3NTUwOA=="}, "originalCommit": {"oid": "acf4f5672542522d3b80ecd7835559790fd98a5f"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDYyNDU2OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiMatchLinkSvc.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjoxNzo0NlrOGxbGJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMjowNzo0NFrOGxnFUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ3NzM1MA==", "bodyText": "Any particular reason to rework this? Seems odd to have a wrapped class for a list. For the helper functions on it?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1978#discussion_r454477350", "createdAt": "2020-07-14T16:17:46Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiMatchLinkSvc.java", "diffHunk": "@@ -72,46 +75,47 @@ public EmpiTransactionContext updateEmpiLinksForEmpiTarget(IAnyResource theResou\n \t}\n \n \tprivate EmpiTransactionContext doEmpiUpdate(IAnyResource theResource, EmpiTransactionContext theEmpiTransactionContext) {\n-\t\tList<MatchedPersonCandidate> personCandidates = myEmpiPersonFindingSvc.findPersonCandidates(theResource);\n-\t\tif (personCandidates.isEmpty()) {\n+\t\tCandidateList candidateList = myEmpiPersonFindingSvc.findPersonCandidates(theResource);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acf4f5672542522d3b80ecd7835559790fd98a5f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY3Mzc0NA==", "bodyText": "There are places where we need to know if this is an EID CandidateList.  For debugging I found it really helpful to know the type of CandidateList it is--we now have the enum with the type in it.  But also as a general rule, I find as soon as a list becomes a thing, it's almost always beneficial to wrap it in a class, if for no other reason than you control how that list is managed.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1978#discussion_r454673744", "createdAt": "2020-07-14T22:07:44Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiMatchLinkSvc.java", "diffHunk": "@@ -72,46 +75,47 @@ public EmpiTransactionContext updateEmpiLinksForEmpiTarget(IAnyResource theResou\n \t}\n \n \tprivate EmpiTransactionContext doEmpiUpdate(IAnyResource theResource, EmpiTransactionContext theEmpiTransactionContext) {\n-\t\tList<MatchedPersonCandidate> personCandidates = myEmpiPersonFindingSvc.findPersonCandidates(theResource);\n-\t\tif (personCandidates.isEmpty()) {\n+\t\tCandidateList candidateList = myEmpiPersonFindingSvc.findPersonCandidates(theResource);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ3NzM1MA=="}, "originalCommit": {"oid": "acf4f5672542522d3b80ecd7835559790fd98a5f"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDY1NzcyOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiMatchLinkSvc.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjoyNTo0MFrOGxbbMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMjowODo0MVrOGxnG0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ4MjczOQ==", "bodyText": "wait, EID_POSSIBLE_MATCH ? How can an EID be a possible match, or am I misunderstanding something here?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1978#discussion_r454482739", "createdAt": "2020-07-14T16:25:40Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiMatchLinkSvc.java", "diffHunk": "@@ -72,46 +75,47 @@ public EmpiTransactionContext updateEmpiLinksForEmpiTarget(IAnyResource theResou\n \t}\n \n \tprivate EmpiTransactionContext doEmpiUpdate(IAnyResource theResource, EmpiTransactionContext theEmpiTransactionContext) {\n-\t\tList<MatchedPersonCandidate> personCandidates = myEmpiPersonFindingSvc.findPersonCandidates(theResource);\n-\t\tif (personCandidates.isEmpty()) {\n+\t\tCandidateList candidateList = myEmpiPersonFindingSvc.findPersonCandidates(theResource);\n+\t\tif (candidateList.isEmpty()) {\n \t\t\thandleEmpiWithNoCandidates(theResource, theEmpiTransactionContext);\n-\t\t} else if (personCandidates.size() == 1) {\n-\t\t\thandleEmpiWithSingleCandidate(theResource, personCandidates, theEmpiTransactionContext);\n+\t\t} else if (candidateList.exactlyOneMatch()) {\n+\t\t\thandleEmpiWithSingleCandidate(theResource, candidateList.getOnlyMatch(), theEmpiTransactionContext);\n \t\t} else {\n-\t\t\thandleEmpiWithMultipleCandidates(theResource, personCandidates, theEmpiTransactionContext);\n+\t\t\thandleEmpiWithMultipleCandidates(theResource, candidateList, theEmpiTransactionContext);\n \t\t}\n \t\treturn theEmpiTransactionContext;\n \t}\n \n-\tprivate void handleEmpiWithMultipleCandidates(IAnyResource theResource, List<MatchedPersonCandidate> thePersonCandidates, EmpiTransactionContext theEmpiTransactionContext) {\n-\t\tLong samplePersonPid = thePersonCandidates.get(0).getCandidatePersonPid().getIdAsLong();\n-\t\tboolean allSamePerson = thePersonCandidates.stream()\n+\tprivate void handleEmpiWithMultipleCandidates(IAnyResource theResource, CandidateList theCandidateList, EmpiTransactionContext theEmpiTransactionContext) {\n+\t\tMatchedPersonCandidate firstMatch = theCandidateList.getFirstMatch();\n+\t\tLong samplePersonPid = firstMatch.getCandidatePersonPid().getIdAsLong();\n+\t\tboolean allSamePerson = theCandidateList.stream()\n \t\t\t.allMatch(candidate -> candidate.getCandidatePersonPid().getIdAsLong().equals(samplePersonPid));\n \n \t\tif (allSamePerson) {\n \t\t\tlog(theEmpiTransactionContext, \"EMPI received multiple match candidates, but they are all linked to the same person.\");\n-\t\t\thandleEmpiWithSingleCandidate(theResource, thePersonCandidates, theEmpiTransactionContext);\n+\t\t\thandleEmpiWithSingleCandidate(theResource, firstMatch, theEmpiTransactionContext);\n \t\t} else {\n \t\t\tlog(theEmpiTransactionContext, \"EMPI received multiple match candidates, that were linked to different Persons. Setting POSSIBLE_DUPLICATES and POSSIBLE_MATCHES.\");\n \t\t\t//Set them all as POSSIBLE_MATCH\n-\t\t\tList<IAnyResource> persons = thePersonCandidates.stream().map((MatchedPersonCandidate matchedPersonCandidate) -> myEmpiPersonFindingSvc.getPersonFromMatchedPersonCandidate(matchedPersonCandidate)).collect(Collectors.toList());\n-\t\t\t\tpersons.forEach(person -> {\n-\t\t\t\t\tmyEmpiLinkSvc.updateLink(person, theResource, EmpiMatchResultEnum.POSSIBLE_MATCH, EmpiLinkSourceEnum.AUTO, theEmpiTransactionContext);\n-\t\t\t\t});\n+\t\t\tList<IAnyResource> persons = new ArrayList<>();\n+\t\t\tfor (MatchedPersonCandidate matchedPersonCandidate : theCandidateList.getCandidates()) {\n+\t\t\t\tIAnyResource person = myEmpiPersonFindingSvc.getPersonFromMatchedPersonCandidate(matchedPersonCandidate);\n+\t\t\t\tmyEmpiLinkSvc.updateLink(person, theResource, EmpiMatchOutcome.EID_POSSIBLE_MATCH, EmpiLinkSourceEnum.AUTO, theEmpiTransactionContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acf4f5672542522d3b80ecd7835559790fd98a5f"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY3NDEyOQ==", "bodyText": "It's a thing.  If you look at how we got there you'll see the path.  I think it happens when one Patient matches two Persons both via EID because of a strange EID update.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1978#discussion_r454674129", "createdAt": "2020-07-14T22:08:41Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiMatchLinkSvc.java", "diffHunk": "@@ -72,46 +75,47 @@ public EmpiTransactionContext updateEmpiLinksForEmpiTarget(IAnyResource theResou\n \t}\n \n \tprivate EmpiTransactionContext doEmpiUpdate(IAnyResource theResource, EmpiTransactionContext theEmpiTransactionContext) {\n-\t\tList<MatchedPersonCandidate> personCandidates = myEmpiPersonFindingSvc.findPersonCandidates(theResource);\n-\t\tif (personCandidates.isEmpty()) {\n+\t\tCandidateList candidateList = myEmpiPersonFindingSvc.findPersonCandidates(theResource);\n+\t\tif (candidateList.isEmpty()) {\n \t\t\thandleEmpiWithNoCandidates(theResource, theEmpiTransactionContext);\n-\t\t} else if (personCandidates.size() == 1) {\n-\t\t\thandleEmpiWithSingleCandidate(theResource, personCandidates, theEmpiTransactionContext);\n+\t\t} else if (candidateList.exactlyOneMatch()) {\n+\t\t\thandleEmpiWithSingleCandidate(theResource, candidateList.getOnlyMatch(), theEmpiTransactionContext);\n \t\t} else {\n-\t\t\thandleEmpiWithMultipleCandidates(theResource, personCandidates, theEmpiTransactionContext);\n+\t\t\thandleEmpiWithMultipleCandidates(theResource, candidateList, theEmpiTransactionContext);\n \t\t}\n \t\treturn theEmpiTransactionContext;\n \t}\n \n-\tprivate void handleEmpiWithMultipleCandidates(IAnyResource theResource, List<MatchedPersonCandidate> thePersonCandidates, EmpiTransactionContext theEmpiTransactionContext) {\n-\t\tLong samplePersonPid = thePersonCandidates.get(0).getCandidatePersonPid().getIdAsLong();\n-\t\tboolean allSamePerson = thePersonCandidates.stream()\n+\tprivate void handleEmpiWithMultipleCandidates(IAnyResource theResource, CandidateList theCandidateList, EmpiTransactionContext theEmpiTransactionContext) {\n+\t\tMatchedPersonCandidate firstMatch = theCandidateList.getFirstMatch();\n+\t\tLong samplePersonPid = firstMatch.getCandidatePersonPid().getIdAsLong();\n+\t\tboolean allSamePerson = theCandidateList.stream()\n \t\t\t.allMatch(candidate -> candidate.getCandidatePersonPid().getIdAsLong().equals(samplePersonPid));\n \n \t\tif (allSamePerson) {\n \t\t\tlog(theEmpiTransactionContext, \"EMPI received multiple match candidates, but they are all linked to the same person.\");\n-\t\t\thandleEmpiWithSingleCandidate(theResource, thePersonCandidates, theEmpiTransactionContext);\n+\t\t\thandleEmpiWithSingleCandidate(theResource, firstMatch, theEmpiTransactionContext);\n \t\t} else {\n \t\t\tlog(theEmpiTransactionContext, \"EMPI received multiple match candidates, that were linked to different Persons. Setting POSSIBLE_DUPLICATES and POSSIBLE_MATCHES.\");\n \t\t\t//Set them all as POSSIBLE_MATCH\n-\t\t\tList<IAnyResource> persons = thePersonCandidates.stream().map((MatchedPersonCandidate matchedPersonCandidate) -> myEmpiPersonFindingSvc.getPersonFromMatchedPersonCandidate(matchedPersonCandidate)).collect(Collectors.toList());\n-\t\t\t\tpersons.forEach(person -> {\n-\t\t\t\t\tmyEmpiLinkSvc.updateLink(person, theResource, EmpiMatchResultEnum.POSSIBLE_MATCH, EmpiLinkSourceEnum.AUTO, theEmpiTransactionContext);\n-\t\t\t\t});\n+\t\t\tList<IAnyResource> persons = new ArrayList<>();\n+\t\t\tfor (MatchedPersonCandidate matchedPersonCandidate : theCandidateList.getCandidates()) {\n+\t\t\t\tIAnyResource person = myEmpiPersonFindingSvc.getPersonFromMatchedPersonCandidate(matchedPersonCandidate);\n+\t\t\t\tmyEmpiLinkSvc.updateLink(person, theResource, EmpiMatchOutcome.EID_POSSIBLE_MATCH, EmpiLinkSourceEnum.AUTO, theEmpiTransactionContext);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ4MjczOQ=="}, "originalCommit": {"oid": "acf4f5672542522d3b80ecd7835559790fd98a5f"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDY2MDA0OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiMatchLinkSvc.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjoyNjoxN1rOGxbcqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjoyNjoxN1rOGxbcqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ4MzExNQ==", "bodyText": "Same here", "url": "https://github.com/hapifhir/hapi-fhir/pull/1978#discussion_r454483115", "createdAt": "2020-07-14T16:26:17Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiMatchLinkSvc.java", "diffHunk": "@@ -72,46 +75,47 @@ public EmpiTransactionContext updateEmpiLinksForEmpiTarget(IAnyResource theResou\n \t}\n \n \tprivate EmpiTransactionContext doEmpiUpdate(IAnyResource theResource, EmpiTransactionContext theEmpiTransactionContext) {\n-\t\tList<MatchedPersonCandidate> personCandidates = myEmpiPersonFindingSvc.findPersonCandidates(theResource);\n-\t\tif (personCandidates.isEmpty()) {\n+\t\tCandidateList candidateList = myEmpiPersonFindingSvc.findPersonCandidates(theResource);\n+\t\tif (candidateList.isEmpty()) {\n \t\t\thandleEmpiWithNoCandidates(theResource, theEmpiTransactionContext);\n-\t\t} else if (personCandidates.size() == 1) {\n-\t\t\thandleEmpiWithSingleCandidate(theResource, personCandidates, theEmpiTransactionContext);\n+\t\t} else if (candidateList.exactlyOneMatch()) {\n+\t\t\thandleEmpiWithSingleCandidate(theResource, candidateList.getOnlyMatch(), theEmpiTransactionContext);\n \t\t} else {\n-\t\t\thandleEmpiWithMultipleCandidates(theResource, personCandidates, theEmpiTransactionContext);\n+\t\t\thandleEmpiWithMultipleCandidates(theResource, candidateList, theEmpiTransactionContext);\n \t\t}\n \t\treturn theEmpiTransactionContext;\n \t}\n \n-\tprivate void handleEmpiWithMultipleCandidates(IAnyResource theResource, List<MatchedPersonCandidate> thePersonCandidates, EmpiTransactionContext theEmpiTransactionContext) {\n-\t\tLong samplePersonPid = thePersonCandidates.get(0).getCandidatePersonPid().getIdAsLong();\n-\t\tboolean allSamePerson = thePersonCandidates.stream()\n+\tprivate void handleEmpiWithMultipleCandidates(IAnyResource theResource, CandidateList theCandidateList, EmpiTransactionContext theEmpiTransactionContext) {\n+\t\tMatchedPersonCandidate firstMatch = theCandidateList.getFirstMatch();\n+\t\tLong samplePersonPid = firstMatch.getCandidatePersonPid().getIdAsLong();\n+\t\tboolean allSamePerson = theCandidateList.stream()\n \t\t\t.allMatch(candidate -> candidate.getCandidatePersonPid().getIdAsLong().equals(samplePersonPid));\n \n \t\tif (allSamePerson) {\n \t\t\tlog(theEmpiTransactionContext, \"EMPI received multiple match candidates, but they are all linked to the same person.\");\n-\t\t\thandleEmpiWithSingleCandidate(theResource, thePersonCandidates, theEmpiTransactionContext);\n+\t\t\thandleEmpiWithSingleCandidate(theResource, firstMatch, theEmpiTransactionContext);\n \t\t} else {\n \t\t\tlog(theEmpiTransactionContext, \"EMPI received multiple match candidates, that were linked to different Persons. Setting POSSIBLE_DUPLICATES and POSSIBLE_MATCHES.\");\n \t\t\t//Set them all as POSSIBLE_MATCH\n-\t\t\tList<IAnyResource> persons = thePersonCandidates.stream().map((MatchedPersonCandidate matchedPersonCandidate) -> myEmpiPersonFindingSvc.getPersonFromMatchedPersonCandidate(matchedPersonCandidate)).collect(Collectors.toList());\n-\t\t\t\tpersons.forEach(person -> {\n-\t\t\t\t\tmyEmpiLinkSvc.updateLink(person, theResource, EmpiMatchResultEnum.POSSIBLE_MATCH, EmpiLinkSourceEnum.AUTO, theEmpiTransactionContext);\n-\t\t\t\t});\n+\t\t\tList<IAnyResource> persons = new ArrayList<>();\n+\t\t\tfor (MatchedPersonCandidate matchedPersonCandidate : theCandidateList.getCandidates()) {\n+\t\t\t\tIAnyResource person = myEmpiPersonFindingSvc.getPersonFromMatchedPersonCandidate(matchedPersonCandidate);\n+\t\t\t\tmyEmpiLinkSvc.updateLink(person, theResource, EmpiMatchOutcome.EID_POSSIBLE_MATCH, EmpiLinkSourceEnum.AUTO, theEmpiTransactionContext);\n+\t\t\t\tpersons.add(person);\n+\t\t\t}\n \n-\t\t\t//Set all Persons as POSSIBLE_DUPLICATE of the first person.\n-\t\t\tIAnyResource samplePerson = persons.get(0);\n-\t\t\tpersons.subList(1, persons.size()).stream()\n-\t\t\t\t.forEach(possibleDuplicatePerson -> {\n-\t\t\t\t\tmyEmpiLinkSvc.updateLink(samplePerson, possibleDuplicatePerson, EmpiMatchResultEnum.POSSIBLE_DUPLICATE, EmpiLinkSourceEnum.AUTO, theEmpiTransactionContext);\n-\t\t\t\t});\n+\t\t\t//Set all Persons as POSSIBLE_DUPLICATE of the last person.\n+\t\t\tIAnyResource firstPerson = persons.get(0);\n+\t\t\tpersons.subList(1, persons.size())\n+\t\t\t\t.forEach(possibleDuplicatePerson -> myEmpiLinkSvc.updateLink(firstPerson, possibleDuplicatePerson, EmpiMatchOutcome.EID_POSSIBLE_DUPLICATE, EmpiLinkSourceEnum.AUTO, theEmpiTransactionContext));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acf4f5672542522d3b80ecd7835559790fd98a5f"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDY5ODI4OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/candidate/CandidateStrategyEnum.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjozNTo1MlrOGxb0_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMjo1MDowMlrOGxoCpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ4OTM0MQ==", "bodyText": "These could all do with docs indicating in what scenarios these would be used. e.g EID is used when a match occurs strictly due to an externally assigned EID, or something like that.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1978#discussion_r454489341", "createdAt": "2020-07-14T16:35:52Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/candidate/CandidateStrategyEnum.java", "diffHunk": "@@ -0,0 +1,7 @@\n+package ca.uhn.fhir.jpa.empi.svc.candidate;\n+\n+public enum CandidateStrategyEnum {\n+\tEID,\n+\tLINK,\n+\tSCORE\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acf4f5672542522d3b80ecd7835559790fd98a5f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY4OTQ0Nw==", "bodyText": "done", "url": "https://github.com/hapifhir/hapi-fhir/pull/1978#discussion_r454689447", "createdAt": "2020-07-14T22:50:02Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/candidate/CandidateStrategyEnum.java", "diffHunk": "@@ -0,0 +1,7 @@\n+package ca.uhn.fhir.jpa.empi.svc.candidate;\n+\n+public enum CandidateStrategyEnum {\n+\tEID,\n+\tLINK,\n+\tSCORE\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ4OTM0MQ=="}, "originalCommit": {"oid": "acf4f5672542522d3b80ecd7835559790fd98a5f"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDkxMzk2OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/candidate/BaseCandidateFinder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzozMDoyNVrOGxd7JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzozMDoyNVrOGxd7JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUyMzY4NA==", "bodyText": "Clever!", "url": "https://github.com/hapifhir/hapi-fhir/pull/1978#discussion_r454523684", "createdAt": "2020-07-14T17:30:25Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/candidate/BaseCandidateFinder.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package ca.uhn.fhir.jpa.empi.svc.candidate;\n+\n+import ca.uhn.fhir.jpa.dao.empi.EmpiLinkDaoSvc;\n+import ca.uhn.fhir.jpa.dao.index.IdHelperService;\n+import org.hl7.fhir.instance.model.api.IAnyResource;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import java.util.List;\n+\n+public abstract class BaseCandidateFinder {\n+\t@Autowired\n+\tIdHelperService myIdHelperService;\n+\t@Autowired\n+\tEmpiLinkDaoSvc myEmpiLinkDaoSvc;\n+\n+\tCandidateList findCandidates(IAnyResource theTarget) {\n+\t\tCandidateList candidateList = new CandidateList(getStrategy());\n+\t\tcandidateList.addAll(findMatchPersonCandidates(theTarget));\n+\t\treturn candidateList;\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acf4f5672542522d3b80ecd7835559790fd98a5f"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDk3ODk4OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/api/EmpiMatchOutcome.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzo0NjozNFrOGxeiIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMjo1NDo1N1rOGxoJhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUzMzY2Ng==", "bodyText": "A Javadoc explaining the purpose of this class would be nice", "url": "https://github.com/hapifhir/hapi-fhir/pull/1978#discussion_r454533666", "createdAt": "2020-07-14T17:46:34Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/api/EmpiMatchOutcome.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package ca.uhn.fhir.empi.api;\n+\n+public final class EmpiMatchOutcome {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acf4f5672542522d3b80ecd7835559790fd98a5f"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY5MTIwNg==", "bodyText": "good call done.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1978#discussion_r454691206", "createdAt": "2020-07-14T22:54:57Z", "author": {"login": "fil512"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/api/EmpiMatchOutcome.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package ca.uhn.fhir.empi.api;\n+\n+public final class EmpiMatchOutcome {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUzMzY2Ng=="}, "originalCommit": {"oid": "acf4f5672542522d3b80ecd7835559790fd98a5f"}, "originalPosition": 3}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1893, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}