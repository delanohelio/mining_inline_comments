{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1Mzc0Njc3", "number": 2191, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMDoxOTo1MlrOE-dSrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMDozNDoxMlrOE-dY0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzOTI3MDg3OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/context/FhirContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMDoxOTo1MlrOH7ojrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMDoxOTo1MlrOH7ojrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI5MjUyNA==", "bodyText": "getFhirVersionPropertiesFile returns an inputstream, so it should be closed. I'll commit a fix to do that.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2191#discussion_r532292524", "createdAt": "2020-11-30T00:19:52Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/context/FhirContext.java", "diffHunk": "@@ -553,29 +555,29 @@ public RuntimeResourceDefinition getResourceDefinitionById(final String theId) {\n \t * @since 5.1.0\n \t */\n \tpublic Set<String> getResourceTypes() {\n-\t\tSet<String> resourceNames = new HashSet<>();\n-\n-\t\tif (myNameToResourceDefinition.isEmpty()) {\n-\t\t\tProperties props = new Properties();\n-\t\t\ttry {\n-\t\t\t\tprops.load(myVersion.getFhirVersionPropertiesFile());\n-\t\t\t} catch (IOException theE) {\n-\t\t\t\tthrow new ConfigurationException(\"Failed to load version properties file\");\n-\t\t\t}\n-\t\t\tEnumeration<?> propNames = props.propertyNames();\n-\t\t\twhile (propNames.hasMoreElements()) {\n-\t\t\t\tString next = (String) propNames.nextElement();\n-\t\t\t\tif (next.startsWith(\"resource.\")) {\n-\t\t\t\t\tresourceNames.add(next.substring(\"resource.\".length()).trim());\n-\t\t\t\t}\n-\t\t\t}\n+\t\tif (myResourceNames == null) {\n+\t\t\tmyResourceNames = buildResourceNames();\n \t\t}\n+\t\treturn myResourceNames;\n+\t}\n \n-\t\tfor (RuntimeResourceDefinition next : myNameToResourceDefinition.values()) {\n-\t\t\tresourceNames.add(next.getName());\n+\t@Nonnull\n+\tprivate Set<String> buildResourceNames() {\n+\t\tSet<String> retval = new HashSet<>();\n+\t\tProperties props = new Properties();\n+\t\ttry {\n+\t\t\tprops.load(myVersion.getFhirVersionPropertiesFile());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34731120deb482ae0bb11ffa473a18c5ec8dd081"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzOTI3NDEyOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/context/FhirContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMDoyMjo0NFrOH7olPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMDoyMjo0NFrOH7olPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI5MjkyNw==", "bodyText": "This isn't threadsafe - Also fixing", "url": "https://github.com/hapifhir/hapi-fhir/pull/2191#discussion_r532292927", "createdAt": "2020-11-30T00:22:44Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/context/FhirContext.java", "diffHunk": "@@ -553,29 +555,29 @@ public RuntimeResourceDefinition getResourceDefinitionById(final String theId) {\n \t * @since 5.1.0\n \t */\n \tpublic Set<String> getResourceTypes() {\n-\t\tSet<String> resourceNames = new HashSet<>();\n-\n-\t\tif (myNameToResourceDefinition.isEmpty()) {\n-\t\t\tProperties props = new Properties();\n-\t\t\ttry {\n-\t\t\t\tprops.load(myVersion.getFhirVersionPropertiesFile());\n-\t\t\t} catch (IOException theE) {\n-\t\t\t\tthrow new ConfigurationException(\"Failed to load version properties file\");\n-\t\t\t}\n-\t\t\tEnumeration<?> propNames = props.propertyNames();\n-\t\t\twhile (propNames.hasMoreElements()) {\n-\t\t\t\tString next = (String) propNames.nextElement();\n-\t\t\t\tif (next.startsWith(\"resource.\")) {\n-\t\t\t\t\tresourceNames.add(next.substring(\"resource.\".length()).trim());\n-\t\t\t\t}\n-\t\t\t}\n+\t\tif (myResourceNames == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34731120deb482ae0bb11ffa473a18c5ec8dd081"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzOTI3Nzk4OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/model/primitive/IdDt.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMDoyNjowN1rOH7onMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMDoyNjowN1rOH7onMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI5MzQyNA==", "bodyText": "I'm curious about the intention of this change (the whole change to IdDt, not this line in particular) - I don't see anything wrong with it but I'm also unclear on what it does for this ticket. Do we need to make the same change for the other versions of FHIR's IdTypes?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2191#discussion_r532293424", "createdAt": "2020-11-30T00:26:07Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/model/primitive/IdDt.java", "diffHunk": "@@ -154,10 +156,15 @@ public IdDt(String theBaseUrl, String theResourceType, String theId, String theV\n \t\tmyResourceType = theResourceType;\n \t\tmyUnqualifiedId = theId;\n \t\tmyUnqualifiedVersionId = StringUtils.defaultIfBlank(theVersionId, null);\n-\t\tmyHaveComponentParts = true;\n-\t\tif (isBlank(myBaseUrl) && isBlank(myResourceType) && isBlank(myUnqualifiedId) && isBlank(myUnqualifiedVersionId)) {\n-\t\t\tmyHaveComponentParts = false;\n-\t\t}\n+\t\tsetHaveComponentParts(this);\n+\t}\n+\n+\tpublic IdDt(IIdType theId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34731120deb482ae0bb11ffa473a18c5ec8dd081"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzOTI4NjU3OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/cache/ResourceChangeListenerCacheRefresherImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMDozNDoxMlrOH7orew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMDozNDoxMlrOH7orew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI5NDUyMw==", "bodyText": "This is a fun javadoc :)", "url": "https://github.com/hapifhir/hapi-fhir/pull/2191#discussion_r532294523", "createdAt": "2020-11-30T00:34:12Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/cache/ResourceChangeListenerCacheRefresherImpl.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package ca.uhn.fhir.jpa.cache;\n+\n+import ca.uhn.fhir.jpa.model.sched.HapiJob;\n+import ca.uhn.fhir.jpa.model.sched.ISchedulerService;\n+import ca.uhn.fhir.jpa.model.sched.ScheduledJobDefinition;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.commons.lang3.time.DateUtils;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.quartz.JobExecutionContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import javax.annotation.PostConstruct;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+/**\n+ * This service refreshes the {@link IResourceChangeListenerCache} caches and notifies their listener when\n+ * those caches change.\n+ *\n+ * Think of it like a Ferris Wheel that completes a full rotation once every 10 seconds.\n+ * Every time a chair passes the bottom it checks to see if it's time to refresh that seat.  If so,\n+ * the Ferris Wheel stops, removes the riders, and loads a fresh cache for that chair, and calls the listener\n+ * if any entries in the new cache are different from the last time that cache was loaded.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34731120deb482ae0bb11ffa473a18c5ec8dd081"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1738, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}