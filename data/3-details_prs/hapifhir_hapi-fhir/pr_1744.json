{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNzEyNjE0", "number": 1744, "title": "fix near-distance for chained searches in dstu3", "bodyText": "ready for review", "createdAt": "2020-03-03T02:40:20Z", "url": "https://github.com/hapifhir/hapi-fhir/pull/1744", "merged": true, "mergeCommit": {"oid": "b42502ae3ce516488e85808286ef1de1a8b5ddac"}, "closed": true, "closedAt": "2020-03-03T19:48:55Z", "author": {"login": "fil512"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcJ12-agH2gAyMzgyNzEyNjE0OjI0YWNiNTdmM2I3MGU1YWJmM2VlNDI5ZjZhNWQwMDNlYzUzMDdiZjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKG4bBgH2gAyMzgyNzEyNjE0OmNjZDk4M2FiNDI5YzljOTdkYmMxODIxZGIyNDZkZTIxOGI0ZWJjMDQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "24acb57f3b70e5abf3ee429f6a5d003ec5307bf8", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/24acb57f3b70e5abf3ee429f6a5d003ec5307bf8", "committedDate": "2020-03-02T22:56:25Z", "message": "began with failing test.\ntest now passes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27dcafe4f247fd1c43c5078168d5252b6bc6c2c0", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/27dcafe4f247fd1c43c5078168d5252b6bc6c2c0", "committedDate": "2020-03-03T02:27:50Z", "message": "all but unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1b54a966827956bec879a6e01c004957ab8533a", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/d1b54a966827956bec879a6e01c004957ab8533a", "committedDate": "2020-03-03T02:32:27Z", "message": "pre-review cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e1be80525bcbe178183b09ad46033cdd0c20258", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/4e1be80525bcbe178183b09ad46033cdd0c20258", "committedDate": "2020-03-03T02:39:28Z", "message": "fixme"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a56df030556d4d60fa194c60f1b4fcc4b5e58fe8", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/a56df030556d4d60fa194c60f1b4fcc4b5e58fe8", "committedDate": "2020-03-03T02:50:57Z", "message": "restrict near-distance extraction to DSTU3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bce1716c6cd6cb9dff4943b23bc0ad4fa38729c0", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/bce1716c6cd6cb9dff4943b23bc0ad4fa38729c0", "committedDate": "2020-03-03T03:13:21Z", "message": "documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b5ef08500470fac599a5a061142d9df2e195cbd", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/5b5ef08500470fac599a5a061142d9df2e195cbd", "committedDate": "2020-03-03T14:44:52Z", "message": "Merge remote-tracking branch 'remotes/origin/master' into ks-20200302-near-chain"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MTYzMDEw", "url": "https://github.com/hapifhir/hapi-fhir/pull/1744#pullrequestreview-368163010", "createdAt": "2020-03-03T17:07:09Z", "commit": {"oid": "5b5ef08500470fac599a5a061142d9df2e195cbd"}, "state": "APPROVED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzowNzoxMFrOFxOuJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODowODozMFrOFxQzfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE2NTczNA==", "bodyText": "Any clue why this was commented out in the first place? Seems this test is just a test to see if searching by code text works...", "url": "https://github.com/hapifhir/hapi-fhir/pull/1744#discussion_r387165734", "createdAt": "2020-03-03T17:07:10Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoDstu3ContainedTest.java", "diffHunk": "@@ -47,12 +51,9 @@ public void testIndexContained() {\n \t\tourLog.info(myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(o2));\n \t\t\n \t\t\n-\t\tSearchParameterMap map;\n-\t\t\n-//\t\tmap = new SearchParameterMap();\n-//\t\tmap.add(Observation.SP_CODE, new TokenParam(null, \"some observation\").setModifier(TokenParamModifier.TEXT));\n-//\t\tassertThat(toUnqualifiedVersionlessIdValues(myObservationDao.search(map)), containsInAnyOrder(toValues(id1, id2)));\n-\n+\t\tSearchParameterMap map = new SearchParameterMap();\n+\t\tmap.add(Observation.SP_CODE, new TokenParam(null, \"some observation\").setModifier(TokenParamModifier.TEXT));\n+\t\tassertThat(toUnqualifiedVersionlessIdValues(myObservationDao.search(map)), containsInAnyOrder(toValues(oid1, oid2)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5ef08500470fac599a5a061142d9df2e195cbd"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE2Njc2OA==", "bodyText": "Ha, I like these example coordinates", "url": "https://github.com/hapifhir/hapi-fhir/pull/1744#discussion_r387166768", "createdAt": "2020-03-03T17:08:47Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3DistanceTest.java", "diffHunk": "@@ -0,0 +1,153 @@\n+package ca.uhn.fhir.jpa.provider.dstu3;\n+\n+import ca.uhn.fhir.jpa.util.CoordCalculatorTest;\n+import org.hl7.fhir.dstu3.model.Bundle;\n+import org.hl7.fhir.dstu3.model.Location;\n+import org.hl7.fhir.dstu3.model.PractitionerRole;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.junit.Test;\n+\n+import java.net.URLEncoder;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class ResourceProviderDstu3DistanceTest extends BaseResourceProviderDstu3Test {\n+\n+\t@Override\n+\tpublic void before() throws Exception {\n+\t\tsuper.before();\n+\t\tmyDaoConfig.setReuseCachedSearchResultsForMillis(null);\n+\t}\n+\n+\t@Test\n+\tpublic void testNearSearchApproximate() {\n+\t\tLocation loc = new Location();\n+\t\tdouble latitude = CoordCalculatorTest.LATITUDE_UHN;\n+\t\tdouble longitude = CoordCalculatorTest.LONGITUDE_UHN;\n+\t\tLocation.LocationPositionComponent position = new Location.LocationPositionComponent().setLatitude(latitude).setLongitude(longitude);\n+\t\tloc.setPosition(position);\n+\t\tIIdType locId = ourClient.create().resource(loc).execute().getId().toUnqualifiedVersionless();\n+\n+\t\t{ // In the box\n+\t\t\tdouble bigEnoughDistance = CoordCalculatorTest.DISTANCE_KM_CHIN_TO_UHN * 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5ef08500470fac599a5a061142d9df2e195cbd"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE3MTUwOA==", "bodyText": "Suggestion: would be great if we could get docstrings on public methods and the class, explaining what's going on inside.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1744#discussion_r387171508", "createdAt": "2020-03-03T17:16:37Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/util/DistanceHelper.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package ca.uhn.fhir.jpa.searchparam.util;\n+\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.model.api.IQueryParameterType;\n+import ca.uhn.fhir.rest.param.QuantityParam;\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import org.hl7.fhir.dstu3.model.Location;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+\n+import java.util.List;\n+\n+public class DistanceHelper {\n+\tpublic static void setNearDistance(Class<? extends IBaseResource> theResourceType, SearchParameterMap theParams) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5ef08500470fac599a5a061142d9df2e195cbd"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE3MjA5Mg==", "bodyText": "Question: Is location ripped into a constant somewhere? If so, would be nice to use that here instead of the hard-coded string.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1744#discussion_r387172092", "createdAt": "2020-03-03T17:17:37Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/util/DistanceHelper.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package ca.uhn.fhir.jpa.searchparam.util;\n+\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.model.api.IQueryParameterType;\n+import ca.uhn.fhir.rest.param.QuantityParam;\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import org.hl7.fhir.dstu3.model.Location;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+\n+import java.util.List;\n+\n+public class DistanceHelper {\n+\tpublic static void setNearDistance(Class<? extends IBaseResource> theResourceType, SearchParameterMap theParams) {\n+\t\tif (theResourceType == Location.class && theParams.containsKey(Location.SP_NEAR_DISTANCE)) {\n+\t\t\tList<List<IQueryParameterType>> paramAndList = theParams.get(Location.SP_NEAR_DISTANCE);\n+\t\t\tQuantityParam quantityParam = getNearDistanceParam(paramAndList);\n+\t\t\ttheParams.setNearDistanceParam(quantityParam);\n+\n+\t\t\t// Need to remove near-distance or it we'll get a hashcode predicate for it\n+\t\t\ttheParams.remove(Location.SP_NEAR_DISTANCE);\n+\t\t} else if (theParams.containsKey(\"location\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5ef08500470fac599a5a061142d9df2e195cbd"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE3NDgyMQ==", "bodyText": "I'm sure they are identical, but since this is an STU3 issue based on what you said, should we use the dstu3.resource.Location.SP_NEAR_DISTANCE ?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1744#discussion_r387174821", "createdAt": "2020-03-03T17:22:27Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/util/DistanceHelper.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package ca.uhn.fhir.jpa.searchparam.util;\n+\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.model.api.IQueryParameterType;\n+import ca.uhn.fhir.rest.param.QuantityParam;\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import org.hl7.fhir.dstu3.model.Location;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+\n+import java.util.List;\n+\n+public class DistanceHelper {\n+\tpublic static void setNearDistance(Class<? extends IBaseResource> theResourceType, SearchParameterMap theParams) {\n+\t\tif (theResourceType == Location.class && theParams.containsKey(Location.SP_NEAR_DISTANCE)) {\n+\t\t\tList<List<IQueryParameterType>> paramAndList = theParams.get(Location.SP_NEAR_DISTANCE);\n+\t\t\tQuantityParam quantityParam = getNearDistanceParam(paramAndList);\n+\t\t\ttheParams.setNearDistanceParam(quantityParam);\n+\n+\t\t\t// Need to remove near-distance or it we'll get a hashcode predicate for it\n+\t\t\ttheParams.remove(Location.SP_NEAR_DISTANCE);\n+\t\t} else if (theParams.containsKey(\"location\")) {\n+\t\t\tList<List<IQueryParameterType>> paramAndList = theParams.get(\"location\");\n+\t\t\tReferenceParam referenceParam = getChainedLocationNearDistanceParam(paramAndList);\n+\t\t\tif (referenceParam != null) {\n+\t\t\t\tQuantityParam quantityParam = new QuantityParam(referenceParam.getValue());\n+\t\t\t\ttheParams.setNearDistanceParam(quantityParam);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate static ReferenceParam getChainedLocationNearDistanceParam(List<List<IQueryParameterType>> theParamAndList) {\n+\t\tReferenceParam retval = null;\n+\t\tList<IQueryParameterType> andParamToRemove = null;\n+\t\tfor (List<IQueryParameterType> paramOrList : theParamAndList) {\n+\t\t\tIQueryParameterType orParamToRemove = null;\n+\t\t\tfor (IQueryParameterType param : paramOrList) {\n+\t\t\t\tif (param instanceof ReferenceParam) {\n+\t\t\t\t\tReferenceParam referenceParam = (ReferenceParam) param;\n+\t\t\t\t\tif (Location.SP_NEAR_DISTANCE.equals(referenceParam.getChain())) {\n+\t\t\t\t\t\tif (retval != null) {\n+\t\t\t\t\t\t\tthrow new IllegalArgumentException(\"Only one \" + ca.uhn.fhir.model.dstu2.resource.Location.SP_NEAR_DISTANCE + \" parameter may be present\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5ef08500470fac599a5a061142d9df2e195cbd"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5ODk0Ng==", "bodyText": "This function is a tad messy. I'm trying to think of ways in which we could simplify this, as its starting to look like arrow code. Am I right in thinking the pseudocode For this is essentially:\n1. Stream over all ParamAndLists and their child ParamOrLists\n2. if more than a single Param of type SP_NEAR_DISTANCE  exists, cumulatively, over any of the ParamOrLists, then throw illegal argument exception. \n3. If 0 exist, return null, \n4. If exactly 1 exists, return it, but also remove it from its paramOrList, and if that causes the subsequent parent ParamAndList to be empty, remove it too.\n\nHave I got the gist?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1744#discussion_r387198946", "createdAt": "2020-03-03T18:06:38Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/util/DistanceHelper.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package ca.uhn.fhir.jpa.searchparam.util;\n+\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.model.api.IQueryParameterType;\n+import ca.uhn.fhir.rest.param.QuantityParam;\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import org.hl7.fhir.dstu3.model.Location;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+\n+import java.util.List;\n+\n+public class DistanceHelper {\n+\tpublic static void setNearDistance(Class<? extends IBaseResource> theResourceType, SearchParameterMap theParams) {\n+\t\tif (theResourceType == Location.class && theParams.containsKey(Location.SP_NEAR_DISTANCE)) {\n+\t\t\tList<List<IQueryParameterType>> paramAndList = theParams.get(Location.SP_NEAR_DISTANCE);\n+\t\t\tQuantityParam quantityParam = getNearDistanceParam(paramAndList);\n+\t\t\ttheParams.setNearDistanceParam(quantityParam);\n+\n+\t\t\t// Need to remove near-distance or it we'll get a hashcode predicate for it\n+\t\t\ttheParams.remove(Location.SP_NEAR_DISTANCE);\n+\t\t} else if (theParams.containsKey(\"location\")) {\n+\t\t\tList<List<IQueryParameterType>> paramAndList = theParams.get(\"location\");\n+\t\t\tReferenceParam referenceParam = getChainedLocationNearDistanceParam(paramAndList);\n+\t\t\tif (referenceParam != null) {\n+\t\t\t\tQuantityParam quantityParam = new QuantityParam(referenceParam.getValue());\n+\t\t\t\ttheParams.setNearDistanceParam(quantityParam);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate static ReferenceParam getChainedLocationNearDistanceParam(List<List<IQueryParameterType>> theParamAndList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5ef08500470fac599a5a061142d9df2e195cbd"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5OTg3MA==", "bodyText": "Is this functionally equivalent to\nlong sum = theParamAndList.stream().mapToLong(Collection::size).sum();\n//No Near Distance Param\nif (sum  == 0) {\n\treturn null;\n// A single Near Distance Param\n} else if (sum == 1) {\n\treturn (QuantityParam) theParamAndList.get(0).get(0);\n//too many near distance params\n} else {\n\tthrow new IllegalArgumentException(\"Only one \" + ca.uhn.fhir.model.dstu2.resource.Location.SP_NEAR_DISTANCE + \" parameter may be present\");\nOr are there some possible cases I'm missing?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1744#discussion_r387199870", "createdAt": "2020-03-03T18:08:30Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/util/DistanceHelper.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package ca.uhn.fhir.jpa.searchparam.util;\n+\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.model.api.IQueryParameterType;\n+import ca.uhn.fhir.rest.param.QuantityParam;\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import org.hl7.fhir.dstu3.model.Location;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+\n+import java.util.List;\n+\n+public class DistanceHelper {\n+\tpublic static void setNearDistance(Class<? extends IBaseResource> theResourceType, SearchParameterMap theParams) {\n+\t\tif (theResourceType == Location.class && theParams.containsKey(Location.SP_NEAR_DISTANCE)) {\n+\t\t\tList<List<IQueryParameterType>> paramAndList = theParams.get(Location.SP_NEAR_DISTANCE);\n+\t\t\tQuantityParam quantityParam = getNearDistanceParam(paramAndList);\n+\t\t\ttheParams.setNearDistanceParam(quantityParam);\n+\n+\t\t\t// Need to remove near-distance or it we'll get a hashcode predicate for it\n+\t\t\ttheParams.remove(Location.SP_NEAR_DISTANCE);\n+\t\t} else if (theParams.containsKey(\"location\")) {\n+\t\t\tList<List<IQueryParameterType>> paramAndList = theParams.get(\"location\");\n+\t\t\tReferenceParam referenceParam = getChainedLocationNearDistanceParam(paramAndList);\n+\t\t\tif (referenceParam != null) {\n+\t\t\t\tQuantityParam quantityParam = new QuantityParam(referenceParam.getValue());\n+\t\t\t\ttheParams.setNearDistanceParam(quantityParam);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate static ReferenceParam getChainedLocationNearDistanceParam(List<List<IQueryParameterType>> theParamAndList) {\n+\t\tReferenceParam retval = null;\n+\t\tList<IQueryParameterType> andParamToRemove = null;\n+\t\tfor (List<IQueryParameterType> paramOrList : theParamAndList) {\n+\t\t\tIQueryParameterType orParamToRemove = null;\n+\t\t\tfor (IQueryParameterType param : paramOrList) {\n+\t\t\t\tif (param instanceof ReferenceParam) {\n+\t\t\t\t\tReferenceParam referenceParam = (ReferenceParam) param;\n+\t\t\t\t\tif (Location.SP_NEAR_DISTANCE.equals(referenceParam.getChain())) {\n+\t\t\t\t\t\tif (retval != null) {\n+\t\t\t\t\t\t\tthrow new IllegalArgumentException(\"Only one \" + ca.uhn.fhir.model.dstu2.resource.Location.SP_NEAR_DISTANCE + \" parameter may be present\");\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tretval = referenceParam;\n+\t\t\t\t\t\t\torParamToRemove = param;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (orParamToRemove != null) {\n+\t\t\t\tparamOrList.remove(orParamToRemove);\n+\t\t\t\tif (paramOrList.isEmpty()) {\n+\t\t\t\t\tandParamToRemove = paramOrList;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tif (andParamToRemove != null) {\n+\t\t\ttheParamAndList.remove(andParamToRemove);\n+\t\t}\n+\t\treturn retval;\n+\t}\n+\n+\tprivate static QuantityParam getNearDistanceParam(List<List<IQueryParameterType>> theParamAndList) {\n+\t\tif (theParamAndList.isEmpty()) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (theParamAndList.size() > 1) {\n+\t\t\tthrow new IllegalArgumentException(\"Only one \" + ca.uhn.fhir.model.dstu2.resource.Location.SP_NEAR_DISTANCE + \" parameter may be present\");\n+\t\t}\n+\t\tList<IQueryParameterType> paramOrList = theParamAndList.get(0);\n+\t\tif (paramOrList.isEmpty()) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (paramOrList.size() > 1) {\n+\t\t\tthrow new IllegalArgumentException(\"Only one \" + ca.uhn.fhir.model.dstu2.resource.Location.SP_NEAR_DISTANCE + \" parameter may be present\");\n+\t\t}\n+\t\treturn (QuantityParam) paramOrList.get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5ef08500470fac599a5a061142d9df2e195cbd"}, "originalPosition": 76}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "705735b9c08c82e5c2eda46e81bb0acf7f2140c7", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/705735b9c08c82e5c2eda46e81bb0acf7f2140c7", "committedDate": "2020-03-03T18:29:10Z", "message": "review feedback: javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccd983ab429c9c97dbc1821db246de218b4ebc04", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/ccd983ab429c9c97dbc1821db246de218b4ebc04", "committedDate": "2020-03-03T18:46:23Z", "message": "review feedback: code improvement"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4017, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}