{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyMDkyNTYx", "number": 2177, "title": "Remove all references to Person from EMPI.", "bodyText": "Closes #2161.\nMany large scale changes. The primary purpose of this PR is to change the EMPI solution to an MDM solution. In broad strokes, this means that the Person resource is no longer special.\nThe new solution (MDM) involves creating another resource where Person used to be used. For example, if MDM is occurring on a patient, we will create a new Patient for them, and tag that patient as a Golden Record. This means that several things ahve changed:\n\nProvider methods that used to point to type of Person are now server-level operations in which you specify a resource type.\nLink updating and querying no longer rely on Person IDs, but instead on arbitrary resource ids, depending on the resource type youre referring to in MDM.\nChange to the EMPI config to require a list of mdmTypes", "createdAt": "2020-11-17T02:20:23Z", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177", "merged": true, "mergeCommit": {"oid": "9bf0afd19b436cd0eed4b800ab5c2ace341f67fc"}, "closed": true, "closedAt": "2020-12-09T17:34:48Z", "author": {"login": "tadgh"}, "timelineItems": {"totalCount": 128, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdgvDOEAH2gAyNTIyMDkyNTYxOmM2NGNhODEzNzM5ZmZhMTExNDU4ZjE2ODRhNWY3ODNlMzE0OWVkZTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkfa6tAH2gAyNTIyMDkyNTYxOjUyZmQ4M2M2NTRhOTUzMzlmZDU5NzVkNmUxYjQzMjU3ZDEwZTE1NmE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c64ca813739ffa111458f1684a5f783e3149ede4", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/c64ca813739ffa111458f1684a5f783e3149ede4", "committedDate": "2020-11-27T22:11:52Z", "message": "Removed obsolete tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwMjAyMjM0", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#pullrequestreview-540202234", "createdAt": "2020-11-27T22:13:23Z", "commit": {"oid": "c64ca813739ffa111458f1684a5f783e3149ede4"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da3df490890b22bc48ae320d5efc3d1d1c98b420", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/da3df490890b22bc48ae320d5efc3d1d1c98b420", "committedDate": "2020-11-27T23:00:24Z", "message": "Fixed build failures"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db28a94eee60b0096390775565cdeec72337144d", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/db28a94eee60b0096390775565cdeec72337144d", "committedDate": "2020-11-30T14:09:38Z", "message": "Resolved alerts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f3b811b16f5f19df1e7d104393f4aa2bbc2a351", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/3f3b811b16f5f19df1e7d104393f4aa2bbc2a351", "committedDate": "2020-11-30T22:21:56Z", "message": "Fixed Foreign Key references"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d63c580e82da79ec426eabf2758831a219f1a8f9", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/d63c580e82da79ec426eabf2758831a219f1a8f9", "committedDate": "2020-12-01T18:18:42Z", "message": "Merge remote-tracking branch 'origin/master' into gg_20201105-remove-person-references"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "417ae55cb4a5eba7462138f4fa3ccfcf6f2a3d1d", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/417ae55cb4a5eba7462138f4fa3ccfcf6f2a3d1d", "committedDate": "2020-12-02T14:29:47Z", "message": "Merge remote-tracking branch 'origin/master' into gg_20201105-remove-person-references"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyOTQ1OTg4", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#pullrequestreview-542945988", "createdAt": "2020-12-02T15:22:17Z", "commit": {"oid": "417ae55cb4a5eba7462138f4fa3ccfcf6f2a3d1d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffee7a894ff0a1f4d48cfbb17ed8a31e6c60a84f", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/ffee7a894ff0a1f4d48cfbb17ed8a31e6c60a84f", "committedDate": "2020-12-02T22:41:42Z", "message": "Removed person refs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d74f4f39899a182bea792a834b4bd6fec641fa7", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/6d74f4f39899a182bea792a834b4bd6fec641fa7", "committedDate": "2020-12-03T02:00:49Z", "message": "Fixed alert"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4352e0a61fa89058b5bab14493d857adb4f4b60c", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/4352e0a61fa89058b5bab14493d857adb4f4b60c", "committedDate": "2020-12-03T16:28:21Z", "message": "Merge remote-tracking branch 'origin/master' into gg_20201105-remove-person-references"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "499a68a093f8dd25b04b32c2199389c290ed1659", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/499a68a093f8dd25b04b32c2199389c290ed1659", "committedDate": "2020-12-03T20:53:06Z", "message": "Reviewed docs and added change entry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c40afb0c905ea93bd7d1f156fa77d3a4eddb4fb", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/5c40afb0c905ea93bd7d1f156fa77d3a4eddb4fb", "committedDate": "2020-12-03T21:11:10Z", "message": "Updated doc headers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51b3fb05250cbd209c0aa60555285fa8e83b4ba3", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/51b3fb05250cbd209c0aa60555285fa8e83b4ba3", "committedDate": "2020-12-04T16:57:40Z", "message": "Synced Provider impl bw R4 and Dstu3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5f7f2df14f732c131b360087deaa0b4827b05b5", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/f5f7f2df14f732c131b360087deaa0b4827b05b5", "committedDate": "2020-12-07T16:55:51Z", "message": "Merge remote-tracking branch 'origin/master' into gg_20201105-remove-person-references"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2Mjc4MjUz", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#pullrequestreview-546278253", "createdAt": "2020-12-07T15:48:02Z", "commit": {"oid": "51b3fb05250cbd209c0aa60555285fa8e83b4ba3"}, "state": "APPROVED", "comments": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNTo0ODowMlrOIAtOJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxODozMToxM1rOIA0nZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYxMTgxNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            title: \"Refactoring of the Enterprise Master Patient Index solution to a Master Data Management solution. The new MDM solution supports other FHIR resources where EMPI only allowed Person resource to be used. For example, if MDM is occurring on a patient, we will create a new Patient, and tag that patient as a Golden Record. This means that several things have changed:\n          \n          \n            \n            title: \"Redesigning the Enterprise Master Patient Index solution to a Master Data Management solution. The new MDM solution supports other FHIR resources where EMPI only allowed Person resource to be used. For example, if MDM is occurring on a patient, we will create a new Patient, and tag that patient as a Golden Record. This means that several things have changed:", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r537611815", "createdAt": "2020-12-07T15:48:02Z", "author": {"login": "fil512"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/changelog/5_3_0/2177-remove-Person-references-to-support-MDM.yaml", "diffHunk": "@@ -0,0 +1,19 @@\n+---\n+type: add\n+issue: 2177\n+title: \"Refactoring of the Enterprise Master Patient Index solution to a Master Data Management solution. The new MDM solution supports other FHIR resources where EMPI only allowed Person resource to be used. For example, if MDM is occurring on a patient, we will create a new Patient, and tag that patient as a Golden Record. This means that several things have changed:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51b3fb05250cbd209c0aa60555285fa8e83b4ba3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzcwMjE3Mw==", "bodyText": "s/Golden resource/Golden Resource/", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r537702173", "createdAt": "2020-12-07T17:45:47Z", "author": {"login": "fil512"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_mdm/mdm.md", "diffHunk": "@@ -0,0 +1,35 @@\n+# MDM Getting Started \n+ \n+## Introduction \n+ \n+A Master Data Management (MDM) module allows for links to be created and maintained among FHIR resources. These links indicate the fact that different FHIR resources are known or believed to refer to the same actual (real world) resource. The links are created and updated using different combinations of automatic and manual linking. \n+ \n+The real-world resource is referred to as the Golden Resource in this context. The resource believed to be a duplicate is said to be a target resource.\n+\n+## Working Example\n+\n+A complete working example of HAPI MDM can be found in the [JPA Server Starter](/hapi-fhir/docs/server_jpa/get_started.html) project. You may wish to browse its source to see how it is set up.\n+\n+## Overview\n+\n+To get up and running with HAPI MDM, either enable it using the `hapi.properties` file in the JPA Server Starter, or follow the instructions below to (enable it in HAPI FHIR directly)[#mdm-settings].  \n+\n+Once MDM is enabled, the next thing you will want to do is configure your [MDM Rules](/hapi-fhir/docs/server_jpa_mdm/mdm_rules.html)\n+\n+HAPI MDM watches for incoming target resources and automatically links them to the appropriate Golden resources based on these rules.  For example, if the rules indicate that any two patients with the same SSN, birthdate and first and last name are the same patients, then two different Patient resources with matching values for these attributes will automatically be linked to the same Golden Patient resource. If no existing resources match the incoming Patient, then a new Golden Patient resource will be created and linked to the incoming Patient.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f7f2df14f732c131b360087deaa0b4827b05b5"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzcwMjc0NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            HAPI MDM watches for incoming target resources and automatically links them to the appropriate Golden resources based on these rules.  For example, if the rules indicate that any two patients with the same SSN, birthdate and first and last name are the same patients, then two different Patient resources with matching values for these attributes will automatically be linked to the same Golden Patient resource. If no existing resources match the incoming Patient, then a new Golden Patient resource will be created and linked to the incoming Patient.\n          \n          \n            \n            HAPI MDM watches for incoming target resources and automatically links them to the appropriate Golden Resources based on these rules.  For example, if the rules indicate that any two patients with the same SSN, birthdate and first and last name are the same patient, then two different Patient resources with matching values for these attributes will automatically be linked to the same Golden Patient resource. If no existing resources match the incoming Patient, then a new Golden Patient resource will be created and linked to the incoming Patient.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r537702745", "createdAt": "2020-12-07T17:46:36Z", "author": {"login": "fil512"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_mdm/mdm.md", "diffHunk": "@@ -0,0 +1,35 @@\n+# MDM Getting Started \n+ \n+## Introduction \n+ \n+A Master Data Management (MDM) module allows for links to be created and maintained among FHIR resources. These links indicate the fact that different FHIR resources are known or believed to refer to the same actual (real world) resource. The links are created and updated using different combinations of automatic and manual linking. \n+ \n+The real-world resource is referred to as the Golden Resource in this context. The resource believed to be a duplicate is said to be a target resource.\n+\n+## Working Example\n+\n+A complete working example of HAPI MDM can be found in the [JPA Server Starter](/hapi-fhir/docs/server_jpa/get_started.html) project. You may wish to browse its source to see how it is set up.\n+\n+## Overview\n+\n+To get up and running with HAPI MDM, either enable it using the `hapi.properties` file in the JPA Server Starter, or follow the instructions below to (enable it in HAPI FHIR directly)[#mdm-settings].  \n+\n+Once MDM is enabled, the next thing you will want to do is configure your [MDM Rules](/hapi-fhir/docs/server_jpa_mdm/mdm_rules.html)\n+\n+HAPI MDM watches for incoming target resources and automatically links them to the appropriate Golden resources based on these rules.  For example, if the rules indicate that any two patients with the same SSN, birthdate and first and last name are the same patients, then two different Patient resources with matching values for these attributes will automatically be linked to the same Golden Patient resource. If no existing resources match the incoming Patient, then a new Golden Patient resource will be created and linked to the incoming Patient.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f7f2df14f732c131b360087deaa0b4827b05b5"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzcwMzIzMQ==", "bodyText": "Search the documentation for \"Person\".", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r537703231", "createdAt": "2020-12-07T17:47:15Z", "author": {"login": "fil512"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_mdm/mdm.md", "diffHunk": "@@ -0,0 +1,35 @@\n+# MDM Getting Started \n+ \n+## Introduction \n+ \n+A Master Data Management (MDM) module allows for links to be created and maintained among FHIR resources. These links indicate the fact that different FHIR resources are known or believed to refer to the same actual (real world) resource. The links are created and updated using different combinations of automatic and manual linking. \n+ \n+The real-world resource is referred to as the Golden Resource in this context. The resource believed to be a duplicate is said to be a target resource.\n+\n+## Working Example\n+\n+A complete working example of HAPI MDM can be found in the [JPA Server Starter](/hapi-fhir/docs/server_jpa/get_started.html) project. You may wish to browse its source to see how it is set up.\n+\n+## Overview\n+\n+To get up and running with HAPI MDM, either enable it using the `hapi.properties` file in the JPA Server Starter, or follow the instructions below to (enable it in HAPI FHIR directly)[#mdm-settings].  \n+\n+Once MDM is enabled, the next thing you will want to do is configure your [MDM Rules](/hapi-fhir/docs/server_jpa_mdm/mdm_rules.html)\n+\n+HAPI MDM watches for incoming target resources and automatically links them to the appropriate Golden resources based on these rules.  For example, if the rules indicate that any two patients with the same SSN, birthdate and first and last name are the same patients, then two different Patient resources with matching values for these attributes will automatically be linked to the same Golden Patient resource. If no existing resources match the incoming Patient, then a new Golden Patient resource will be created and linked to the incoming Patient.\n+\n+Based on how well two patients match, the MDM Rules may link the Patient to the Golden Patient as a MATCH or a \n+POSSIBLE_MATCH. In the case of a POSSIBLE_MATCH, a user will need to later use [MDM Operations](/hapi-fhir/docs/server_jpa_mdm/mdm_operations.html) to either confirm the link as a MATCH, or mark the link as a NO_MATCH in which case HAPI MDM will create a new Person for them.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f7f2df14f732c131b360087deaa0b4827b05b5"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzcwNTgxNQ==", "bodyText": "\"Source resource\" is now a better term than \"Target resource\".  We used \"Target\" before because of Person.link.target.  But I don't think it's relevant any more.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r537705815", "createdAt": "2020-12-07T17:50:58Z", "author": {"login": "fil512"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_mdm/mdm_details.md", "diffHunk": "@@ -0,0 +1,92 @@\n+# MDM Implementation Details\n+\n+This section describes details of how MDM functionality is implemented in HAPI FHIR.\n+\n+## Resource linking in FHIR\n+\n+Because HAPI MDM is implemented on the HAPI JPA Server, it uses the FHIR model to represent links. The following illustration shows an example of how these links work.\n+\n+<a href=\"/hapi-fhir/docs/images/empi-links.svg\"><img src=\"/hapi-fhir/docs/images/empi-links.svg\" alt=\"MDM links\" style=\"margin-left: 15px; margin-bottom: 15px; width: 500px;\" /></a>\n+\n+There are several resources that are used:\n+\n+* Target resource - Represents the record in being matched. For example, it can be a Patient resource who receives healthcare services and that should be mapped to a master record.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f7f2df14f732c131b360087deaa0b4827b05b5"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzcwNzMyMw==", "bodyText": "I recommend renaming to: myNewGoldenResource", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r537707323", "createdAt": "2020-12-07T17:53:04Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/entity/MdmLink.java", "diffHunk": "@@ -99,56 +107,67 @@\n \n \t/** This link created a new person **/\n \t@Column(name = \"NEW_PERSON\")\n-\tprivate Boolean myNewPerson;\n+\tprivate Boolean myHadToCreateNewResource;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f7f2df14f732c131b360087deaa0b4827b05b5"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzcwODc0OA==", "bodyText": "these can be removed", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r537708748", "createdAt": "2020-12-07T17:55:09Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-mdm/src/main/java/ca/uhn/fhir/jpa/mdm/config/MdmLoader.java", "diffHunk": "@@ -31,34 +31,35 @@\n import org.springframework.stereotype.Service;\n \n @Service\n-public class EmpiLoader {\n-\tprivate static final Logger ourLog = LoggerFactory.getLogger(EmpiLoader.class);\n+public class MdmLoader {\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(MdmLoader.class);\n \n \t@Autowired\n-\tIEmpiSettings myEmpiProperties;\n+\tIMdmSettings myMdmSettings;\n \t@Autowired\n-\tEmpiProviderLoader myEmpiProviderLoader;\n+\tMdmProviderLoader myMdmProviderLoader;\n \t@Autowired\n-\tEmpiSubscriptionLoader myEmpiSubscriptionLoader;\n+\tMdmSubscriptionLoader myMdmSubscriptionLoader;\n \t@Autowired\n-\tEmpiSearchParameterLoader myEmpiSearchParameterLoader;\n+\tMdmSearchParameterLoader myMdmSearchParameterLoader;\n \n \t@EventListener(classes = {ContextRefreshedEvent.class})\n \t// This @Order is here to ensure that MatchingQueueSubscriberLoader has initialized before we initialize this.\n-\t// Otherwise the EMPI subscriptions won't get loaded into the SubscriptionRegistry\n+\t// Otherwise the MDM subscriptions won't get loaded into the SubscriptionRegistry\n \t@Order\n \tpublic void updateSubscriptions() {\n-\t\tif (!myEmpiProperties.isEnabled()) {\n+\t\tif (!myMdmSettings.isEnabled()) {\n \t\t\treturn;\n \t\t}\n \n-\t\tmyEmpiProviderLoader.loadProvider();\n-\t\tourLog.info(\"EMPI provider registered\");\n+\t\tmyMdmProviderLoader.loadProvider();\n+\t\tourLog.info(\"MDM provider registered\");\n \n-\t\tmyEmpiSubscriptionLoader.daoUpdateEmpiSubscriptions();\n-\t\tourLog.info(\"EMPI subscriptions updated\");\n+\t\tmyMdmSubscriptionLoader.daoUpdateMdmSubscriptions();\n+\t\tourLog.info(\"MDM subscriptions updated\");\n \n-\t\tmyEmpiSearchParameterLoader.daoUpdateEmpiSearchParameters();\n-\t\tourLog.info(\"EMPI search parameters updated\");\n+\t\t//TODO GGG MDM: Do we need these search parameters, or equivalent, anymore? Don't think so... ask @fil512\n+\t\tmyMdmSearchParameterLoader.daoUpdateMdmSearchParameters();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f7f2df14f732c131b360087deaa0b4827b05b5"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzcwOTE1Ng==", "bodyText": "remove this class", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r537709156", "createdAt": "2020-12-07T17:55:38Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-mdm/src/main/java/ca/uhn/fhir/jpa/mdm/config/MdmSearchParameterLoader.java", "diffHunk": "@@ -32,40 +32,42 @@\n import org.springframework.stereotype.Service;\n \n @Service\n-public class EmpiSearchParameterLoader {\n-\tpublic static final String EMPI_PERSON_ASSURANCE_SEARCH_PARAMETER_ID = \"person-assurance\";\n-\tpublic static final String EMPI_PERSON_ACTIVE_SEARCH_PARAMETER_ID = \"person-active\";\n+public class MdmSearchParameterLoader {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f7f2df14f732c131b360087deaa0b4827b05b5"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzcxMDQ0Ng==", "bodyText": "Git is seeing these as delete / add which makes it harder to review.  If possible, it's better to rename and move classes in a git aware fashion so it can track the deltas.  It's possible that git just isn't able to do this...", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r537710446", "createdAt": "2020-12-07T17:57:22Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-mdm/src/main/java/ca/uhn/fhir/jpa/mdm/dao/MdmLinkDaoSvc.java", "diffHunk": "@@ -0,0 +1,338 @@\n+package ca.uhn.fhir.jpa.mdm.dao;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR JPA Server - Master Data Management\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.jpa.dao.data.IMdmLinkDao;\n+import ca.uhn.fhir.jpa.dao.index.IdHelperService;\n+import ca.uhn.fhir.jpa.entity.MdmLink;\n+import ca.uhn.fhir.mdm.api.MdmLinkSourceEnum;\n+import ca.uhn.fhir.mdm.api.MdmMatchOutcome;\n+import ca.uhn.fhir.mdm.api.MdmMatchResultEnum;\n+import ca.uhn.fhir.mdm.log.Logs;\n+import ca.uhn.fhir.mdm.model.MdmTransactionContext;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.slf4j.Logger;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Example;\n+import org.springframework.transaction.annotation.Propagation;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class MdmLinkDaoSvc {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f7f2df14f732c131b360087deaa0b4827b05b5"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzcxMTQ2NQ==", "bodyText": "What's the plan with these TODOs?  Will they be addressed in a future PR?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r537711465", "createdAt": "2020-12-07T17:58:49Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-mdm/src/main/java/ca/uhn/fhir/jpa/mdm/interceptor/MdmStorageInterceptor.java", "diffHunk": "@@ -45,72 +45,71 @@\n import java.util.concurrent.atomic.AtomicInteger;\n \n @Service\n-public class EmpiStorageInterceptor implements IEmpiStorageInterceptor {\n-\tprivate static final Logger ourLog = LoggerFactory.getLogger(EmpiStorageInterceptor.class);\n+public class MdmStorageInterceptor implements IMdmStorageInterceptor {\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(MdmStorageInterceptor.class);\n \t@Autowired\n \tprivate ExpungeEverythingService myExpungeEverythingService;\n \t@Autowired\n-\tprivate EmpiLinkDeleteSvc myEmpiLinkDeleteSvc;\n+\tprivate MdmLinkDeleteSvc myMdmLinkDeleteSvc;\n \t@Autowired\n \tprivate FhirContext myFhirContext;\n \t@Autowired\n \tprivate EIDHelper myEIDHelper;\n \t@Autowired\n-\tprivate IEmpiSettings myEmpiSettings;\n+\tprivate IMdmSettings myMdmSettings;\n \t@Autowired\n-\tprivate PersonHelper myPersonHelper;\n+\tprivate GoldenResourceHelper myGoldenResourceHelper;\n \n \n \t@Hook(Pointcut.STORAGE_PRESTORAGE_RESOURCE_CREATED)\n-\tpublic void blockManualPersonManipulationOnCreate(IBaseResource theBaseResource, RequestDetails theRequestDetails, ServletRequestDetails theServletRequestDetails) {\n+\tpublic void blockManualResourceManipulationOnCreate(IBaseResource theBaseResource, RequestDetails theRequestDetails, ServletRequestDetails theServletRequestDetails) {\n \n \t\t//If running in single EID mode, forbid multiple eids.\n-\t\tif (myEmpiSettings.isPreventMultipleEids()) {\n+\t\tif (myMdmSettings.isPreventMultipleEids()) {\n \t\t\tforbidIfHasMultipleEids(theBaseResource);\n \t\t}\n \n-\t\t// TODO EMPI find a better way to identify EMPI calls\n+\t\t// TODO GGG MDM find a better way to identify i nternal calls?\n \t\tif (isInternalRequest(theRequestDetails)) {\n \t\t\treturn;\n \t\t}\n \n-\t\tforbidIfEmpiManagedTagIsPresent(theBaseResource);\n+\t\tforbidIfMdmManagedTagIsPresent(theBaseResource);\n \t}\n \n \t@Hook(Pointcut.STORAGE_PRESTORAGE_RESOURCE_UPDATED)\n-\tpublic void blockManualPersonManipulationOnUpdate(IBaseResource theOldResource, IBaseResource theNewResource, RequestDetails theRequestDetails, ServletRequestDetails theServletRequestDetails) {\n-\n+\tpublic void blockManualGoldenResourceManipulationOnUpdate(IBaseResource theOldResource, IBaseResource theUpdatedResource, RequestDetails theRequestDetails, ServletRequestDetails theServletRequestDetails) {\n \t\t//If running in single EID mode, forbid multiple eids.\n-\t\tif (myEmpiSettings.isPreventMultipleEids()) {\n-\t\t\tforbidIfHasMultipleEids(theNewResource);\n+\t\tif (myMdmSettings.isPreventMultipleEids()) {\n+\t\t\tforbidIfHasMultipleEids(theUpdatedResource);\n \t\t}\n \n-\t\tif (EmpiUtil.isEmpiManagedPerson(myFhirContext, theNewResource) &&\n-\t\t\tmyPersonHelper.isDeactivated(theNewResource)) {\n-\t\t\tourLog.debug(\"Deleting empi links to deactivated Person {}\", theNewResource.getIdElement().toUnqualifiedVersionless());\n-\t\t\tint deleted = myEmpiLinkDeleteSvc.deleteNonRedirectWithWithAnyReferenceTo(theNewResource);\n+\t\t//TODO GGG MDM: Check if this is actually handled already in mdm update code or not.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f7f2df14f732c131b360087deaa0b4827b05b5"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzcxMzkxMA==", "bodyText": "I was initially thrown by the term \"deactivated\" but I think it's a good term here.  It does make me wonder if there's a better one.  What do other mdm systems call this...?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r537713910", "createdAt": "2020-12-07T18:02:10Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-mdm/src/main/java/ca/uhn/fhir/jpa/mdm/interceptor/MdmStorageInterceptor.java", "diffHunk": "@@ -45,72 +45,71 @@\n import java.util.concurrent.atomic.AtomicInteger;\n \n @Service\n-public class EmpiStorageInterceptor implements IEmpiStorageInterceptor {\n-\tprivate static final Logger ourLog = LoggerFactory.getLogger(EmpiStorageInterceptor.class);\n+public class MdmStorageInterceptor implements IMdmStorageInterceptor {\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(MdmStorageInterceptor.class);\n \t@Autowired\n \tprivate ExpungeEverythingService myExpungeEverythingService;\n \t@Autowired\n-\tprivate EmpiLinkDeleteSvc myEmpiLinkDeleteSvc;\n+\tprivate MdmLinkDeleteSvc myMdmLinkDeleteSvc;\n \t@Autowired\n \tprivate FhirContext myFhirContext;\n \t@Autowired\n \tprivate EIDHelper myEIDHelper;\n \t@Autowired\n-\tprivate IEmpiSettings myEmpiSettings;\n+\tprivate IMdmSettings myMdmSettings;\n \t@Autowired\n-\tprivate PersonHelper myPersonHelper;\n+\tprivate GoldenResourceHelper myGoldenResourceHelper;\n \n \n \t@Hook(Pointcut.STORAGE_PRESTORAGE_RESOURCE_CREATED)\n-\tpublic void blockManualPersonManipulationOnCreate(IBaseResource theBaseResource, RequestDetails theRequestDetails, ServletRequestDetails theServletRequestDetails) {\n+\tpublic void blockManualResourceManipulationOnCreate(IBaseResource theBaseResource, RequestDetails theRequestDetails, ServletRequestDetails theServletRequestDetails) {\n \n \t\t//If running in single EID mode, forbid multiple eids.\n-\t\tif (myEmpiSettings.isPreventMultipleEids()) {\n+\t\tif (myMdmSettings.isPreventMultipleEids()) {\n \t\t\tforbidIfHasMultipleEids(theBaseResource);\n \t\t}\n \n-\t\t// TODO EMPI find a better way to identify EMPI calls\n+\t\t// TODO GGG MDM find a better way to identify i nternal calls?\n \t\tif (isInternalRequest(theRequestDetails)) {\n \t\t\treturn;\n \t\t}\n \n-\t\tforbidIfEmpiManagedTagIsPresent(theBaseResource);\n+\t\tforbidIfMdmManagedTagIsPresent(theBaseResource);\n \t}\n \n \t@Hook(Pointcut.STORAGE_PRESTORAGE_RESOURCE_UPDATED)\n-\tpublic void blockManualPersonManipulationOnUpdate(IBaseResource theOldResource, IBaseResource theNewResource, RequestDetails theRequestDetails, ServletRequestDetails theServletRequestDetails) {\n-\n+\tpublic void blockManualGoldenResourceManipulationOnUpdate(IBaseResource theOldResource, IBaseResource theUpdatedResource, RequestDetails theRequestDetails, ServletRequestDetails theServletRequestDetails) {\n \t\t//If running in single EID mode, forbid multiple eids.\n-\t\tif (myEmpiSettings.isPreventMultipleEids()) {\n-\t\t\tforbidIfHasMultipleEids(theNewResource);\n+\t\tif (myMdmSettings.isPreventMultipleEids()) {\n+\t\t\tforbidIfHasMultipleEids(theUpdatedResource);\n \t\t}\n \n-\t\tif (EmpiUtil.isEmpiManagedPerson(myFhirContext, theNewResource) &&\n-\t\t\tmyPersonHelper.isDeactivated(theNewResource)) {\n-\t\t\tourLog.debug(\"Deleting empi links to deactivated Person {}\", theNewResource.getIdElement().toUnqualifiedVersionless());\n-\t\t\tint deleted = myEmpiLinkDeleteSvc.deleteNonRedirectWithWithAnyReferenceTo(theNewResource);\n+\t\t//TODO GGG MDM: Check if this is actually handled already in mdm update code or not.\n+\t\tif (myGoldenResourceHelper.isDeactivated(theUpdatedResource)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f7f2df14f732c131b360087deaa0b4827b05b5"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzcxNjg5Mw==", "bodyText": "hmm.  I don't understand the question", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r537716893", "createdAt": "2020-12-07T18:06:43Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-mdm/src/main/java/ca/uhn/fhir/jpa/mdm/svc/MdmResourceFilteringSvc.java", "diffHunk": "@@ -32,43 +33,48 @@\n import java.util.List;\n \n @Service\n-public class EmpiResourceFilteringSvc {\n-\tprivate static final Logger ourLog = Logs.getEmpiTroubleshootingLog();\n+public class MdmResourceFilteringSvc {\n+\tprivate static final Logger ourLog = Logs.getMdmTroubleshootingLog();\n \n \t@Autowired\n-\tprivate IEmpiSettings myEmpiSettings;\n+\tprivate IMdmSettings myMdmSettings;\n \t@Autowired\n-\tEmpiSearchParamSvc myEmpiSearchParamSvc;\n+\tMdmSearchParamSvc myMdmSearchParamSvc;\n \t@Autowired\n \tFhirContext myFhirContext;\n \n \t/**\n-\t * Given a resource from the EMPI Channel, determine whether or not EMPI processing should occur on it.\n+\t * Given a resource from the MDM Channel, determine whether or not MDM processing should occur on it.\n \t *\n-\t * EMPI processing should occur if for any {@link EmpiResourceSearchParamJson) Search Param, the resource contains a value.\n+\t * MDM processing should occur if for any {@link MdmResourceSearchParamJson ) Search Param, the resource contains a value.\n \t *\n \t * If the resource has no attributes that appear in the candidate search params, processing should be skipped, as there is not\n-\t * sufficient information to perform meaningful EMPI processing. (For example, how can EMPI processing occur on a patient that has _no_ attributes?)\n+\t * sufficient information to perform meaningful MDM processing. (For example, how can MDM processing occur on a patient that has _no_ attributes?)\n \t *\n-\t * @param theResource the resource that you wish to check against EMPI rules.\n+\t * @param theResource the resource that you wish to check against MDM rules.\n \t *\n-\t * @return whether or not EMPI processing should proceed\n+\t * @return whether or not MDM processing should proceed\n \t */\n \tpublic boolean shouldBeProcessed(IAnyResource theResource) {\n+\t\t//TODO GGG ask KHS: Skip the infinite loop, whoops. Better way to do this? tighter subscription criteria?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f7f2df14f732c131b360087deaa0b4827b05b5"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzcxNzYwNA==", "bodyText": "Consider renaming to FindCandidateByExampleSvc", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r537717604", "createdAt": "2020-12-07T18:07:49Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-mdm/src/main/java/ca/uhn/fhir/jpa/mdm/svc/candidate/FindCandidateByScoreSvc.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package ca.uhn.fhir.jpa.mdm.svc.candidate;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR JPA Server - Master Data Management\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.mdm.api.MdmMatchResultEnum;\n+import ca.uhn.fhir.mdm.api.IMdmMatchFinderSvc;\n+import ca.uhn.fhir.mdm.api.MatchedTarget;\n+import ca.uhn.fhir.mdm.log.Logs;\n+import ca.uhn.fhir.jpa.dao.index.IdHelperService;\n+import ca.uhn.fhir.jpa.mdm.dao.MdmLinkDaoSvc;\n+import ca.uhn.fhir.jpa.entity.MdmLink;\n+import ca.uhn.fhir.rest.api.server.storage.ResourcePersistentId;\n+import org.hl7.fhir.instance.model.api.IAnyResource;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.slf4j.Logger;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+@Service\n+public class FindCandidateByScoreSvc extends BaseCandidateFinder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f7f2df14f732c131b360087deaa0b4827b05b5"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzcyMDAzMA==", "bodyText": "delete this class", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r537720030", "createdAt": "2020-12-07T18:11:38Z", "author": {"login": "fil512"}, "path": "hapi-fhir-server-mdm/src/main/java/ca/uhn/fhir/mdm/model/CanonicalIdentityAssuranceLevel.java", "diffHunk": "@@ -1,8 +1,8 @@\n-package ca.uhn.fhir.empi.model;\n+package ca.uhn.fhir.mdm.model;\n \n /*-\n  * #%L\n- * HAPI FHIR - Enterprise Master Patient Index\n+ * HAPI FHIR - Master Data Management", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f7f2df14f732c131b360087deaa0b4827b05b5"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzcyMTI5Mw==", "bodyText": "Delete all mdm classes concerning assurance level", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r537721293", "createdAt": "2020-12-07T18:13:32Z", "author": {"login": "fil512"}, "path": "hapi-fhir-server-mdm/src/main/java/ca/uhn/fhir/mdm/util/AssuranceLevelUtil.java", "diffHunk": "@@ -20,21 +20,21 @@\n  * #L%\n  */\n \n-import ca.uhn.fhir.empi.api.EmpiLinkSourceEnum;\n-import ca.uhn.fhir.empi.api.EmpiMatchResultEnum;\n-import ca.uhn.fhir.empi.model.CanonicalIdentityAssuranceLevel;\n+import ca.uhn.fhir.mdm.api.MdmLinkSourceEnum;\n+import ca.uhn.fhir.mdm.api.MdmMatchResultEnum;\n+import ca.uhn.fhir.mdm.model.CanonicalIdentityAssuranceLevel;\n import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n \n /**\n  * Helper class to determine assurance level based on Link Source and Match Result.\n- * This is strictly for use in populating Person links.\n+ * This is strictly for use in populating Golden Resource links.\n  */\n public final class AssuranceLevelUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f7f2df14f732c131b360087deaa0b4827b05b5"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzcyNDk0OA==", "bodyText": "Is this actually a PrimitiveTypeEqualsPredicate ?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r537724948", "createdAt": "2020-12-07T18:19:12Z", "author": {"login": "fil512"}, "path": "hapi-fhir-server-mdm/src/main/java/ca/uhn/fhir/mdm/util/GoldenResourceHelper.java", "diffHunk": "@@ -0,0 +1,377 @@\n+package ca.uhn.fhir.mdm.util;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR - Master Data Management\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.context.BaseRuntimeChildDefinition;\n+import ca.uhn.fhir.context.BaseRuntimeElementCompositeDefinition;\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.context.FhirVersionEnum;\n+import ca.uhn.fhir.context.RuntimeResourceDefinition;\n+import ca.uhn.fhir.fhirpath.IFhirPath;\n+import ca.uhn.fhir.mdm.api.IMdmSettings;\n+import ca.uhn.fhir.mdm.log.Logs;\n+import ca.uhn.fhir.mdm.model.CanonicalEID;\n+import ca.uhn.fhir.mdm.model.MdmTransactionContext;\n+import ca.uhn.fhir.util.FhirTerser;\n+import org.hl7.fhir.instance.model.api.IAnyResource;\n+import org.hl7.fhir.instance.model.api.IBase;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.IPrimitiveType;\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.slf4j.Logger;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import static ca.uhn.fhir.context.FhirVersionEnum.DSTU3;\n+import static ca.uhn.fhir.context.FhirVersionEnum.R4;\n+\n+@Service\n+public class GoldenResourceHelper {\n+\n+\tprivate static final Logger ourLog = Logs.getMdmTroubleshootingLog();\n+\n+\tprivate static final String FIELD_NAME_IDENTIFIER = \"identifier\";\n+\n+\t@Autowired\n+\tprivate IMdmSettings myMdmSettings;\n+\t@Autowired\n+\tprivate EIDHelper myEIDHelper;\n+\n+\n+\tprivate final FhirContext myFhirContext;\n+\n+\t@Autowired\n+\tpublic GoldenResourceHelper(FhirContext theFhirContext) {\n+\t\tmyFhirContext = theFhirContext;\n+\t}\n+\n+\t/**\n+\t * Creates a copy of the specified resource. This method will carry over resource EID if it exists. If it does not exist,\n+\t * a randomly generated UUID EID will be created.\n+\t *\n+\t * @param <T>                 Supported MDM resource type (e.g. Patient, Practitioner)\n+\t * @param theIncomingResource The resource that will be used as the starting point for the MDM linking.\n+\t */\n+\tpublic <T extends IAnyResource> T createGoldenResourceFromMdmTarget(T theIncomingResource) {\n+\t\tvalidateContextSupported();\n+\n+\t\t// get a ref to the actual ID Field\n+\t\tRuntimeResourceDefinition resourceDefinition = myFhirContext.getResourceDefinition(theIncomingResource);\n+\t\tIBaseResource newGoldenResource = resourceDefinition.newInstance();\n+\n+\t\t// hapi has 2 metamodels: for children and types\n+\t\tBaseRuntimeChildDefinition goldenResourceIdentifier = resourceDefinition.getChildByName(FIELD_NAME_IDENTIFIER);\n+\n+\t\tcloneAllExternalEidsIntoNewGoldenResource(goldenResourceIdentifier, theIncomingResource, newGoldenResource);\n+\n+\t\taddHapiEidIfNoExternalEidIsPresent(newGoldenResource, goldenResourceIdentifier, theIncomingResource);\n+\n+\t\tMdmUtil.setMdmManaged(newGoldenResource);\n+\t\tMdmUtil.setGoldenResource(newGoldenResource);\n+\n+\t\treturn (T) newGoldenResource;\n+\t}\n+\n+\t/**\n+\t * If there are no external EIDs on the incoming resource, create a new HAPI EID on the new Golden Resource.\n+\t */\n+\t//TODO GGG ask james if there is any way we can convert this canonical EID into a generic STU-agnostic IBase.\n+\tprivate <T extends IAnyResource> void addHapiEidIfNoExternalEidIsPresent(\n+\t\tIBaseResource theNewGoldenResource, BaseRuntimeChildDefinition theGoldenResourceIdentifier, IAnyResource theTargetResource) {\n+\n+\t\tList<CanonicalEID> eidsToApply = myEIDHelper.getExternalEid(theNewGoldenResource);\n+\t\tif (!eidsToApply.isEmpty()) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tCanonicalEID hapiEid = myEIDHelper.createHapiEid();\n+\t\ttheGoldenResourceIdentifier.getMutator().addValue(theNewGoldenResource, toId(hapiEid));\n+\n+\t\t// set identifier on the target resource\n+\t\tcloneEidIntoResource(theTargetResource, hapiEid);\n+\t}\n+\n+\tprivate void cloneEidIntoResource(IBaseResource theResourceToCloneInto, CanonicalEID theEid) {\n+\t\t// get a ref to the actual ID Field\n+\t\tRuntimeResourceDefinition resourceDefinition = myFhirContext.getResourceDefinition(theResourceToCloneInto);\n+\t\t// hapi has 2 metamodels: for children and types\n+\t\tBaseRuntimeChildDefinition resourceIdentifier = resourceDefinition.getChildByName(FIELD_NAME_IDENTIFIER);\n+\t\tcloneEidIntoResource(resourceIdentifier, toId(theEid), theResourceToCloneInto);\n+\t}\n+\n+\t/**\n+\t * Given an Child Definition of `identifier`, a R4/DSTU3 EID Identifier, and a new resource, clone the EID into that resources' identifier list.\n+\t */\n+\tprivate void cloneEidIntoResource(BaseRuntimeChildDefinition theIdentifierDefinition, IBase theEid, IBase theResourceToCloneEidInto) {\n+\t\t// FHIR choice types - fields within fhir where we have a choice of ids\n+\t\tBaseRuntimeElementCompositeDefinition<?> childIdentifier = (BaseRuntimeElementCompositeDefinition<?>) theIdentifierDefinition.getChildByName(FIELD_NAME_IDENTIFIER);\n+\t\tIBase resourceNewIdentifier = childIdentifier.newInstance();\n+\n+\t\tFhirTerser terser = myFhirContext.newTerser();\n+\t\tterser.cloneInto(theEid, resourceNewIdentifier, true);\n+\t\ttheIdentifierDefinition.getMutator().addValue(theResourceToCloneEidInto, resourceNewIdentifier);\n+\t}\n+\n+\t/**\n+\t * Clones specified composite field (collection). Composite field values must confirm to the collections\n+\t * contract.\n+\t *\n+\t * @param theFrom Resource to clone the specified filed from\n+\t * @param theTo   Resource to clone the specified filed to\n+\t * @param field   Field name to be copied\n+\t */\n+\tprivate void cloneCompositeField(IBaseResource theFrom, IBaseResource theTo, String field) {\n+\t\tFhirTerser terser = myFhirContext.newTerser();\n+\n+\t\tRuntimeResourceDefinition definition = myFhirContext.getResourceDefinition(theFrom);\n+\t\tBaseRuntimeChildDefinition childDefinition = definition.getChildByName(field);\n+\n+\t\tIFhirPath fhirPath = myFhirContext.newFhirPath();\n+\t\tList<IBase> theFromFieldValues = childDefinition.getAccessor().getValues(theFrom);\n+\t\tList<IBase> theToFieldValues = childDefinition.getAccessor().getValues(theTo);\n+\n+\t\tfor (IBase theFromFieldValue : theFromFieldValues) {\n+\t\t\tif (contains(theFromFieldValue, theToFieldValues)) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\n+\t\t\tBaseRuntimeElementCompositeDefinition<?> compositeDefinition = (BaseRuntimeElementCompositeDefinition<?>) childDefinition.getChildByName(field);\n+\t\t\tIBase newFieldValue = compositeDefinition.newInstance();\n+\t\t\tterser.cloneInto(theFromFieldValue, newFieldValue, true);\n+\n+\t\t\ttheToFieldValues.add(newFieldValue);\n+\t\t}\n+\t}\n+\n+\tprivate boolean contains(IBase theItem, List<IBase> theItems) {\n+\t\tPrimitiveTypeComparingPredicate predicate = new PrimitiveTypeComparingPredicate();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f7f2df14f732c131b360087deaa0b4827b05b5"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzcyNTY2MA==", "bodyText": "This should probably be a static util function so we can use it elsewhere..", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r537725660", "createdAt": "2020-12-07T18:20:18Z", "author": {"login": "fil512"}, "path": "hapi-fhir-server-mdm/src/main/java/ca/uhn/fhir/mdm/util/GoldenResourceHelper.java", "diffHunk": "@@ -0,0 +1,377 @@\n+package ca.uhn.fhir.mdm.util;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR - Master Data Management\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.context.BaseRuntimeChildDefinition;\n+import ca.uhn.fhir.context.BaseRuntimeElementCompositeDefinition;\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.context.FhirVersionEnum;\n+import ca.uhn.fhir.context.RuntimeResourceDefinition;\n+import ca.uhn.fhir.fhirpath.IFhirPath;\n+import ca.uhn.fhir.mdm.api.IMdmSettings;\n+import ca.uhn.fhir.mdm.log.Logs;\n+import ca.uhn.fhir.mdm.model.CanonicalEID;\n+import ca.uhn.fhir.mdm.model.MdmTransactionContext;\n+import ca.uhn.fhir.util.FhirTerser;\n+import org.hl7.fhir.instance.model.api.IAnyResource;\n+import org.hl7.fhir.instance.model.api.IBase;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.IPrimitiveType;\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.slf4j.Logger;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import static ca.uhn.fhir.context.FhirVersionEnum.DSTU3;\n+import static ca.uhn.fhir.context.FhirVersionEnum.R4;\n+\n+@Service\n+public class GoldenResourceHelper {\n+\n+\tprivate static final Logger ourLog = Logs.getMdmTroubleshootingLog();\n+\n+\tprivate static final String FIELD_NAME_IDENTIFIER = \"identifier\";\n+\n+\t@Autowired\n+\tprivate IMdmSettings myMdmSettings;\n+\t@Autowired\n+\tprivate EIDHelper myEIDHelper;\n+\n+\n+\tprivate final FhirContext myFhirContext;\n+\n+\t@Autowired\n+\tpublic GoldenResourceHelper(FhirContext theFhirContext) {\n+\t\tmyFhirContext = theFhirContext;\n+\t}\n+\n+\t/**\n+\t * Creates a copy of the specified resource. This method will carry over resource EID if it exists. If it does not exist,\n+\t * a randomly generated UUID EID will be created.\n+\t *\n+\t * @param <T>                 Supported MDM resource type (e.g. Patient, Practitioner)\n+\t * @param theIncomingResource The resource that will be used as the starting point for the MDM linking.\n+\t */\n+\tpublic <T extends IAnyResource> T createGoldenResourceFromMdmTarget(T theIncomingResource) {\n+\t\tvalidateContextSupported();\n+\n+\t\t// get a ref to the actual ID Field\n+\t\tRuntimeResourceDefinition resourceDefinition = myFhirContext.getResourceDefinition(theIncomingResource);\n+\t\tIBaseResource newGoldenResource = resourceDefinition.newInstance();\n+\n+\t\t// hapi has 2 metamodels: for children and types\n+\t\tBaseRuntimeChildDefinition goldenResourceIdentifier = resourceDefinition.getChildByName(FIELD_NAME_IDENTIFIER);\n+\n+\t\tcloneAllExternalEidsIntoNewGoldenResource(goldenResourceIdentifier, theIncomingResource, newGoldenResource);\n+\n+\t\taddHapiEidIfNoExternalEidIsPresent(newGoldenResource, goldenResourceIdentifier, theIncomingResource);\n+\n+\t\tMdmUtil.setMdmManaged(newGoldenResource);\n+\t\tMdmUtil.setGoldenResource(newGoldenResource);\n+\n+\t\treturn (T) newGoldenResource;\n+\t}\n+\n+\t/**\n+\t * If there are no external EIDs on the incoming resource, create a new HAPI EID on the new Golden Resource.\n+\t */\n+\t//TODO GGG ask james if there is any way we can convert this canonical EID into a generic STU-agnostic IBase.\n+\tprivate <T extends IAnyResource> void addHapiEidIfNoExternalEidIsPresent(\n+\t\tIBaseResource theNewGoldenResource, BaseRuntimeChildDefinition theGoldenResourceIdentifier, IAnyResource theTargetResource) {\n+\n+\t\tList<CanonicalEID> eidsToApply = myEIDHelper.getExternalEid(theNewGoldenResource);\n+\t\tif (!eidsToApply.isEmpty()) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tCanonicalEID hapiEid = myEIDHelper.createHapiEid();\n+\t\ttheGoldenResourceIdentifier.getMutator().addValue(theNewGoldenResource, toId(hapiEid));\n+\n+\t\t// set identifier on the target resource\n+\t\tcloneEidIntoResource(theTargetResource, hapiEid);\n+\t}\n+\n+\tprivate void cloneEidIntoResource(IBaseResource theResourceToCloneInto, CanonicalEID theEid) {\n+\t\t// get a ref to the actual ID Field\n+\t\tRuntimeResourceDefinition resourceDefinition = myFhirContext.getResourceDefinition(theResourceToCloneInto);\n+\t\t// hapi has 2 metamodels: for children and types\n+\t\tBaseRuntimeChildDefinition resourceIdentifier = resourceDefinition.getChildByName(FIELD_NAME_IDENTIFIER);\n+\t\tcloneEidIntoResource(resourceIdentifier, toId(theEid), theResourceToCloneInto);\n+\t}\n+\n+\t/**\n+\t * Given an Child Definition of `identifier`, a R4/DSTU3 EID Identifier, and a new resource, clone the EID into that resources' identifier list.\n+\t */\n+\tprivate void cloneEidIntoResource(BaseRuntimeChildDefinition theIdentifierDefinition, IBase theEid, IBase theResourceToCloneEidInto) {\n+\t\t// FHIR choice types - fields within fhir where we have a choice of ids\n+\t\tBaseRuntimeElementCompositeDefinition<?> childIdentifier = (BaseRuntimeElementCompositeDefinition<?>) theIdentifierDefinition.getChildByName(FIELD_NAME_IDENTIFIER);\n+\t\tIBase resourceNewIdentifier = childIdentifier.newInstance();\n+\n+\t\tFhirTerser terser = myFhirContext.newTerser();\n+\t\tterser.cloneInto(theEid, resourceNewIdentifier, true);\n+\t\ttheIdentifierDefinition.getMutator().addValue(theResourceToCloneEidInto, resourceNewIdentifier);\n+\t}\n+\n+\t/**\n+\t * Clones specified composite field (collection). Composite field values must confirm to the collections\n+\t * contract.\n+\t *\n+\t * @param theFrom Resource to clone the specified filed from\n+\t * @param theTo   Resource to clone the specified filed to\n+\t * @param field   Field name to be copied\n+\t */\n+\tprivate void cloneCompositeField(IBaseResource theFrom, IBaseResource theTo, String field) {\n+\t\tFhirTerser terser = myFhirContext.newTerser();\n+\n+\t\tRuntimeResourceDefinition definition = myFhirContext.getResourceDefinition(theFrom);\n+\t\tBaseRuntimeChildDefinition childDefinition = definition.getChildByName(field);\n+\n+\t\tIFhirPath fhirPath = myFhirContext.newFhirPath();\n+\t\tList<IBase> theFromFieldValues = childDefinition.getAccessor().getValues(theFrom);\n+\t\tList<IBase> theToFieldValues = childDefinition.getAccessor().getValues(theTo);\n+\n+\t\tfor (IBase theFromFieldValue : theFromFieldValues) {\n+\t\t\tif (contains(theFromFieldValue, theToFieldValues)) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\n+\t\t\tBaseRuntimeElementCompositeDefinition<?> compositeDefinition = (BaseRuntimeElementCompositeDefinition<?>) childDefinition.getChildByName(field);\n+\t\t\tIBase newFieldValue = compositeDefinition.newInstance();\n+\t\t\tterser.cloneInto(theFromFieldValue, newFieldValue, true);\n+\n+\t\t\ttheToFieldValues.add(newFieldValue);\n+\t\t}\n+\t}\n+\n+\tprivate boolean contains(IBase theItem, List<IBase> theItems) {\n+\t\tPrimitiveTypeComparingPredicate predicate = new PrimitiveTypeComparingPredicate();\n+\t\treturn theItems.stream().filter(i -> {\n+\t\t\treturn predicate.test(i, theItem);\n+\t\t}).findFirst().isPresent();\n+\t}\n+\n+\tprivate void cloneAllExternalEidsIntoNewGoldenResource(BaseRuntimeChildDefinition theGoldenResourceIdentifier,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t IBase theGoldenResource, IBase theNewGoldenResource) {\n+\t\t// FHIR choice types - fields within fhir where we have a choice of ids\n+\t\tIFhirPath fhirPath = myFhirContext.newFhirPath();\n+\t\tList<IBase> goldenResourceIdentifiers = theGoldenResourceIdentifier.getAccessor().getValues(theGoldenResource);\n+\n+\t\tfor (IBase base : goldenResourceIdentifiers) {\n+\t\t\tOptional<IPrimitiveType> system = fhirPath.evaluateFirst(base, \"system\", IPrimitiveType.class);\n+\t\t\tif (system.isPresent()) {\n+\t\t\t\tString mdmSystem = myMdmSettings.getMdmRules().getEnterpriseEIDSystem();\n+\t\t\t\tString baseSystem = system.get().getValueAsString();\n+\t\t\t\tif (Objects.equals(baseSystem, mdmSystem)) {\n+\t\t\t\t\tcloneEidIntoResource(theGoldenResourceIdentifier, base, theNewGoldenResource);\n+\t\t\t\t\tourLog.debug(\"System {} differs from system in the MDM rules {}\", baseSystem, mdmSystem);\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tourLog.debug(\"System is missing, skipping\");\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate void validateContextSupported() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f7f2df14f732c131b360087deaa0b4827b05b5"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzcyNzA1NQ==", "bodyText": "nitpick this class is getting kind of long.  is there a distinct responsibility in here that could be carved out into a separate class?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r537727055", "createdAt": "2020-12-07T18:22:09Z", "author": {"login": "fil512"}, "path": "hapi-fhir-server-mdm/src/main/java/ca/uhn/fhir/mdm/util/GoldenResourceHelper.java", "diffHunk": "@@ -0,0 +1,377 @@\n+package ca.uhn.fhir.mdm.util;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR - Master Data Management\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.context.BaseRuntimeChildDefinition;\n+import ca.uhn.fhir.context.BaseRuntimeElementCompositeDefinition;\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.context.FhirVersionEnum;\n+import ca.uhn.fhir.context.RuntimeResourceDefinition;\n+import ca.uhn.fhir.fhirpath.IFhirPath;\n+import ca.uhn.fhir.mdm.api.IMdmSettings;\n+import ca.uhn.fhir.mdm.log.Logs;\n+import ca.uhn.fhir.mdm.model.CanonicalEID;\n+import ca.uhn.fhir.mdm.model.MdmTransactionContext;\n+import ca.uhn.fhir.util.FhirTerser;\n+import org.hl7.fhir.instance.model.api.IAnyResource;\n+import org.hl7.fhir.instance.model.api.IBase;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.IPrimitiveType;\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.slf4j.Logger;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import static ca.uhn.fhir.context.FhirVersionEnum.DSTU3;\n+import static ca.uhn.fhir.context.FhirVersionEnum.R4;\n+\n+@Service\n+public class GoldenResourceHelper {\n+\n+\tprivate static final Logger ourLog = Logs.getMdmTroubleshootingLog();\n+\n+\tprivate static final String FIELD_NAME_IDENTIFIER = \"identifier\";\n+\n+\t@Autowired\n+\tprivate IMdmSettings myMdmSettings;\n+\t@Autowired\n+\tprivate EIDHelper myEIDHelper;\n+\n+\n+\tprivate final FhirContext myFhirContext;\n+\n+\t@Autowired\n+\tpublic GoldenResourceHelper(FhirContext theFhirContext) {\n+\t\tmyFhirContext = theFhirContext;\n+\t}\n+\n+\t/**\n+\t * Creates a copy of the specified resource. This method will carry over resource EID if it exists. If it does not exist,\n+\t * a randomly generated UUID EID will be created.\n+\t *\n+\t * @param <T>                 Supported MDM resource type (e.g. Patient, Practitioner)\n+\t * @param theIncomingResource The resource that will be used as the starting point for the MDM linking.\n+\t */\n+\tpublic <T extends IAnyResource> T createGoldenResourceFromMdmTarget(T theIncomingResource) {\n+\t\tvalidateContextSupported();\n+\n+\t\t// get a ref to the actual ID Field\n+\t\tRuntimeResourceDefinition resourceDefinition = myFhirContext.getResourceDefinition(theIncomingResource);\n+\t\tIBaseResource newGoldenResource = resourceDefinition.newInstance();\n+\n+\t\t// hapi has 2 metamodels: for children and types\n+\t\tBaseRuntimeChildDefinition goldenResourceIdentifier = resourceDefinition.getChildByName(FIELD_NAME_IDENTIFIER);\n+\n+\t\tcloneAllExternalEidsIntoNewGoldenResource(goldenResourceIdentifier, theIncomingResource, newGoldenResource);\n+\n+\t\taddHapiEidIfNoExternalEidIsPresent(newGoldenResource, goldenResourceIdentifier, theIncomingResource);\n+\n+\t\tMdmUtil.setMdmManaged(newGoldenResource);\n+\t\tMdmUtil.setGoldenResource(newGoldenResource);\n+\n+\t\treturn (T) newGoldenResource;\n+\t}\n+\n+\t/**\n+\t * If there are no external EIDs on the incoming resource, create a new HAPI EID on the new Golden Resource.\n+\t */\n+\t//TODO GGG ask james if there is any way we can convert this canonical EID into a generic STU-agnostic IBase.\n+\tprivate <T extends IAnyResource> void addHapiEidIfNoExternalEidIsPresent(\n+\t\tIBaseResource theNewGoldenResource, BaseRuntimeChildDefinition theGoldenResourceIdentifier, IAnyResource theTargetResource) {\n+\n+\t\tList<CanonicalEID> eidsToApply = myEIDHelper.getExternalEid(theNewGoldenResource);\n+\t\tif (!eidsToApply.isEmpty()) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tCanonicalEID hapiEid = myEIDHelper.createHapiEid();\n+\t\ttheGoldenResourceIdentifier.getMutator().addValue(theNewGoldenResource, toId(hapiEid));\n+\n+\t\t// set identifier on the target resource\n+\t\tcloneEidIntoResource(theTargetResource, hapiEid);\n+\t}\n+\n+\tprivate void cloneEidIntoResource(IBaseResource theResourceToCloneInto, CanonicalEID theEid) {\n+\t\t// get a ref to the actual ID Field\n+\t\tRuntimeResourceDefinition resourceDefinition = myFhirContext.getResourceDefinition(theResourceToCloneInto);\n+\t\t// hapi has 2 metamodels: for children and types\n+\t\tBaseRuntimeChildDefinition resourceIdentifier = resourceDefinition.getChildByName(FIELD_NAME_IDENTIFIER);\n+\t\tcloneEidIntoResource(resourceIdentifier, toId(theEid), theResourceToCloneInto);\n+\t}\n+\n+\t/**\n+\t * Given an Child Definition of `identifier`, a R4/DSTU3 EID Identifier, and a new resource, clone the EID into that resources' identifier list.\n+\t */\n+\tprivate void cloneEidIntoResource(BaseRuntimeChildDefinition theIdentifierDefinition, IBase theEid, IBase theResourceToCloneEidInto) {\n+\t\t// FHIR choice types - fields within fhir where we have a choice of ids\n+\t\tBaseRuntimeElementCompositeDefinition<?> childIdentifier = (BaseRuntimeElementCompositeDefinition<?>) theIdentifierDefinition.getChildByName(FIELD_NAME_IDENTIFIER);\n+\t\tIBase resourceNewIdentifier = childIdentifier.newInstance();\n+\n+\t\tFhirTerser terser = myFhirContext.newTerser();\n+\t\tterser.cloneInto(theEid, resourceNewIdentifier, true);\n+\t\ttheIdentifierDefinition.getMutator().addValue(theResourceToCloneEidInto, resourceNewIdentifier);\n+\t}\n+\n+\t/**\n+\t * Clones specified composite field (collection). Composite field values must confirm to the collections\n+\t * contract.\n+\t *\n+\t * @param theFrom Resource to clone the specified filed from\n+\t * @param theTo   Resource to clone the specified filed to\n+\t * @param field   Field name to be copied\n+\t */\n+\tprivate void cloneCompositeField(IBaseResource theFrom, IBaseResource theTo, String field) {\n+\t\tFhirTerser terser = myFhirContext.newTerser();\n+\n+\t\tRuntimeResourceDefinition definition = myFhirContext.getResourceDefinition(theFrom);\n+\t\tBaseRuntimeChildDefinition childDefinition = definition.getChildByName(field);\n+\n+\t\tIFhirPath fhirPath = myFhirContext.newFhirPath();\n+\t\tList<IBase> theFromFieldValues = childDefinition.getAccessor().getValues(theFrom);\n+\t\tList<IBase> theToFieldValues = childDefinition.getAccessor().getValues(theTo);\n+\n+\t\tfor (IBase theFromFieldValue : theFromFieldValues) {\n+\t\t\tif (contains(theFromFieldValue, theToFieldValues)) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\n+\t\t\tBaseRuntimeElementCompositeDefinition<?> compositeDefinition = (BaseRuntimeElementCompositeDefinition<?>) childDefinition.getChildByName(field);\n+\t\t\tIBase newFieldValue = compositeDefinition.newInstance();\n+\t\t\tterser.cloneInto(theFromFieldValue, newFieldValue, true);\n+\n+\t\t\ttheToFieldValues.add(newFieldValue);\n+\t\t}\n+\t}\n+\n+\tprivate boolean contains(IBase theItem, List<IBase> theItems) {\n+\t\tPrimitiveTypeComparingPredicate predicate = new PrimitiveTypeComparingPredicate();\n+\t\treturn theItems.stream().filter(i -> {\n+\t\t\treturn predicate.test(i, theItem);\n+\t\t}).findFirst().isPresent();\n+\t}\n+\n+\tprivate void cloneAllExternalEidsIntoNewGoldenResource(BaseRuntimeChildDefinition theGoldenResourceIdentifier,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t IBase theGoldenResource, IBase theNewGoldenResource) {\n+\t\t// FHIR choice types - fields within fhir where we have a choice of ids\n+\t\tIFhirPath fhirPath = myFhirContext.newFhirPath();\n+\t\tList<IBase> goldenResourceIdentifiers = theGoldenResourceIdentifier.getAccessor().getValues(theGoldenResource);\n+\n+\t\tfor (IBase base : goldenResourceIdentifiers) {\n+\t\t\tOptional<IPrimitiveType> system = fhirPath.evaluateFirst(base, \"system\", IPrimitiveType.class);\n+\t\t\tif (system.isPresent()) {\n+\t\t\t\tString mdmSystem = myMdmSettings.getMdmRules().getEnterpriseEIDSystem();\n+\t\t\t\tString baseSystem = system.get().getValueAsString();\n+\t\t\t\tif (Objects.equals(baseSystem, mdmSystem)) {\n+\t\t\t\t\tcloneEidIntoResource(theGoldenResourceIdentifier, base, theNewGoldenResource);\n+\t\t\t\t\tourLog.debug(\"System {} differs from system in the MDM rules {}\", baseSystem, mdmSystem);\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tourLog.debug(\"System is missing, skipping\");\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate void validateContextSupported() {\n+\t\tFhirVersionEnum fhirVersion = myFhirContext.getVersion().getVersion();\n+\t\tif (fhirVersion == R4 || fhirVersion == DSTU3) {\n+\t\t\treturn;\n+\t\t}\n+\t\tthrow new UnsupportedOperationException(\"Version not supported: \" + myFhirContext.getVersion().getVersion());\n+\t}\n+\n+\t/**\n+\t * Updates EID on Golden Resource, based on the incoming target resource. If the incoming resource has an external EID, it is applied\n+\t * to the Golden Resource, unless that golden resource already has an external EID which does not match, in which case throw {@link IllegalArgumentException}\n+\t * <p>\n+\t * If running in multiple EID mode, then incoming EIDs are simply added to the Golden Resource without checking for matches.\n+\t *\n+\t * @param theGoldenResource The golden resource to update the external EID on.\n+\t * @param theTargetResource The target we will retrieve the external EID from.\n+\t * @return the modified {@link IBaseResource} representing the Golden Resource.\n+\t */\n+\tpublic IAnyResource updateGoldenResourceExternalEidFromTargetResource(IAnyResource theGoldenResource, IAnyResource\n+\t\ttheTargetResource, MdmTransactionContext theMdmTransactionContext) {\n+\t\t//This handles overwriting an automatically assigned EID if a patient that links is coming in with an official EID.\n+\t\tList<CanonicalEID> incomingTargetEid = myEIDHelper.getExternalEid(theTargetResource);\n+\t\tList<CanonicalEID> goldenResourceOfficialEid = myEIDHelper.getExternalEid(theGoldenResource);\n+\n+\t\tif (incomingTargetEid.isEmpty()) {\n+\t\t\treturn theGoldenResource;\n+\t\t}\n+\n+\t\tif (goldenResourceOfficialEid.isEmpty() || !myMdmSettings.isPreventMultipleEids()) {\n+\t\t\tlog(theMdmTransactionContext, \"Incoming resource:\" + theTargetResource.getIdElement().toUnqualifiedVersionless() + \" + with EID \" + incomingTargetEid.stream().map(CanonicalEID::toString).collect(Collectors.joining(\",\"))\n+\t\t\t\t+ \" is applying this EIDs to its related Target Resource, as this Target Resource does not yet have an external EID\");\n+\t\t\taddCanonicalEidsToGoldenResourceIfAbsent(theGoldenResource, incomingTargetEid);\n+\t\t} else if (!goldenResourceOfficialEid.isEmpty() && myEIDHelper.eidMatchExists(goldenResourceOfficialEid, incomingTargetEid)) {\n+\t\t\tlog(theMdmTransactionContext, \"incoming resource:\" + theTargetResource.getIdElement().toVersionless() + \" with EIDs \" + incomingTargetEid.stream().map(CanonicalEID::toString).collect(Collectors.joining(\",\")) + \" does not need to overwrite Golden Resource, as this EID is already present\");\n+\t\t} else {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\tString.format(\"Target EIDs %s would create a duplicate golden resource, as EIDs %s already exist!\",\n+\t\t\t\t\tincomingTargetEid.toString(), goldenResourceOfficialEid.toString()));\n+\t\t}\n+\t\treturn theGoldenResource;\n+\t}\n+\n+\tpublic IBaseResource overwriteExternalEids(IBaseResource theGoldenResource, List<CanonicalEID> theNewEid) {\n+\t\tclearExternalEids(theGoldenResource);\n+\t\taddCanonicalEidsToGoldenResourceIfAbsent(theGoldenResource, theNewEid);\n+\t\treturn theGoldenResource;\n+\t}\n+\n+\tprivate void clearExternalEidsFromTheGoldenResource(BaseRuntimeChildDefinition theGoldenResourceIdentifier, IBase theGoldenResource) {\n+\t\tIFhirPath fhirPath = myFhirContext.newFhirPath();\n+\t\tList<IBase> goldenResourceIdentifiers = theGoldenResourceIdentifier.getAccessor().getValues(theGoldenResource);\n+\t\tList<IBase> clonedIdentifiers = new ArrayList<>();\n+\t\tFhirTerser terser = myFhirContext.newTerser();\n+\n+\t\tfor (IBase base : goldenResourceIdentifiers) {\n+\t\t\tOptional<IPrimitiveType> system = fhirPath.evaluateFirst(base, \"system\", IPrimitiveType.class);\n+\t\t\tif (system.isPresent()) {\n+\t\t\t\tString mdmSystem = myMdmSettings.getMdmRules().getEnterpriseEIDSystem();\n+\t\t\t\tString baseSystem = system.get().getValueAsString();\n+\t\t\t\tif (Objects.equals(baseSystem, mdmSystem)) {\n+\t\t\t\t\tourLog.debug(\"Found EID confirming to MDM rules {}. It should not be copied, skipping\", baseSystem);\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tBaseRuntimeElementCompositeDefinition<?> childIdentifier = (BaseRuntimeElementCompositeDefinition<?>)\n+\t\t\t\ttheGoldenResourceIdentifier.getChildByName(FIELD_NAME_IDENTIFIER);\n+\t\t\tIBase goldenResourceNewIdentifier = childIdentifier.newInstance();\n+\t\t\tterser.cloneInto(base, goldenResourceNewIdentifier, true);\n+\n+\t\t\tclonedIdentifiers.add(goldenResourceNewIdentifier);\n+\t\t}\n+\n+\t\tgoldenResourceIdentifiers.clear();\n+\t\tgoldenResourceIdentifiers.addAll(clonedIdentifiers);\n+\t}\n+\n+\tprivate void clearExternalEids(IBaseResource theGoldenResource) {\n+\t\t// validate the system - if it's set to EID system - then clear it - type and STU version\n+\t\tvalidateContextSupported();\n+\n+\t\t// get a ref to the actual ID Field\n+\t\tRuntimeResourceDefinition resourceDefinition = myFhirContext.getResourceDefinition(theGoldenResource);\n+\t\tBaseRuntimeChildDefinition goldenResourceIdentifier = resourceDefinition.getChildByName(FIELD_NAME_IDENTIFIER);\n+\t\tclearExternalEidsFromTheGoldenResource(goldenResourceIdentifier, theGoldenResource);\n+\t}\n+\n+\t/**\n+\t * Given a list of incoming External EIDs, and a Golden Resource, apply all the EIDs to this resource, which did not already exist on it.\n+\t */\n+\tprivate void addCanonicalEidsToGoldenResourceIfAbsent(IBaseResource theGoldenResource, List<CanonicalEID> theIncomingTargetExternalEids) {\n+\t\tList<CanonicalEID> goldenResourceExternalEids = myEIDHelper.getExternalEid(theGoldenResource);\n+\n+\t\tfor (CanonicalEID incomingExternalEid : theIncomingTargetExternalEids) {\n+\t\t\tif (goldenResourceExternalEids.contains(incomingExternalEid)) {\n+\t\t\t\tcontinue;\n+\t\t\t} else {\n+\t\t\t\tcloneEidIntoResource(theGoldenResource, incomingExternalEid);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate <T extends IBase> T toId(CanonicalEID eid) {\n+\t\tswitch (myFhirContext.getVersion().getVersion()) {\n+\t\t\tcase R4:\n+\t\t\t\treturn (T) eid.toR4();\n+\t\t\tcase DSTU3:\n+\t\t\t\treturn (T) eid.toDSTU3();\n+\t\t}\n+\t\tthrow new IllegalStateException(\"Unsupported FHIR version \" + myFhirContext.getVersion().getVersion());\n+\t}\n+\n+\n+\tprivate <T extends IBase> T toBooleanType(boolean theFlag) {\n+\t\tswitch (myFhirContext.getVersion().getVersion()) {\n+\t\t\tcase R4:\n+\t\t\t\treturn (T) new BooleanType(theFlag);\n+\t\t\tcase DSTU3:\n+\t\t\t\treturn (T) new org.hl7.fhir.dstu3.model.BooleanType(theFlag);\n+\t\t}\n+\t\tthrow new IllegalStateException(\"Unsupported FHIR version \" + myFhirContext.getVersion().getVersion());\n+\t}\n+\n+\tprivate <T extends IBase> boolean fromBooleanType(T theFlag) {\n+\t\tswitch (myFhirContext.getVersion().getVersion()) {\n+\t\t\tcase R4:\n+\t\t\t\treturn ((BooleanType) theFlag).booleanValue();\n+\t\t\tcase DSTU3:\n+\t\t\t\treturn ((org.hl7.fhir.dstu3.model.BooleanType) theFlag).booleanValue();\n+\t\t}\n+\t\tthrow new IllegalStateException(\"Unsupported FHIR version \" + myFhirContext.getVersion().getVersion());\n+\t}\n+\n+\tpublic void mergeFields(IBaseResource theFromGoldenResource, IBaseResource theToGoldenResource) {\n+\t\t//\tTODO NG - Revisit when merge rules are defined\n+\t\tcloneCompositeField(theFromGoldenResource, theToGoldenResource, FIELD_NAME_IDENTIFIER);\n+\n+//\t\tswitch (myFhirContext.getVersion().getVersion()) {\n+//\t\t\tcase R4:\n+//\t\t\t\tmergeR4PersonFields(theFromGoldenResource, theToGoldenResource);\n+//\t\t\t\tbreak;\n+//\t\t\tcase DSTU3:\n+//\t\t\t\tmergeDstu3PersonFields(theFromGoldenResource, theToGoldenResource);\n+//\t\t\t\tbreak;\n+//\t\t\tdefault:\n+//\t\t\t\tthrow new UnsupportedOperationException(\"Version not supported: \" + myFhirContext.getVersion().getVersion());\n+//\t\t}\n+\t}\n+\n+\t/**\n+\t * An incoming resource is a potential duplicate if it matches a target that has a golden resource with an official\n+\t * EID, but the incoming resource also has an EID that does not match.\n+\t */\n+\tpublic boolean isPotentialDuplicate(IAnyResource theExistingGoldenResource, IAnyResource theComparingGoldenResource) {\n+\t\tList<CanonicalEID> externalEidsGoldenResource = myEIDHelper.getExternalEid(theExistingGoldenResource);\n+\t\tList<CanonicalEID> externalEidsResource = myEIDHelper.getExternalEid(theComparingGoldenResource);\n+\t\treturn !externalEidsGoldenResource.isEmpty() && !externalEidsResource.isEmpty() && !myEIDHelper.eidMatchExists(externalEidsResource, externalEidsGoldenResource);\n+\t}\n+\n+\tprivate void log(MdmTransactionContext theMdmTransactionContext, String theMessage) {\n+\t\ttheMdmTransactionContext.addTransactionLogMessage(theMessage);\n+\t\tourLog.debug(theMessage);\n+\t}\n+\n+\tpublic void handleExternalEidAddition(IAnyResource theGoldenResource, IAnyResource theTargetResource, MdmTransactionContext\n+\t\ttheMdmTransactionContext) {\n+\t\tList<CanonicalEID> eidFromResource = myEIDHelper.getExternalEid(theTargetResource);\n+\t\tif (!eidFromResource.isEmpty()) {\n+\t\t\tupdateGoldenResourceExternalEidFromTargetResource(theGoldenResource, theTargetResource, theMdmTransactionContext);\n+\t\t}\n+\t}\n+\n+\tpublic void deactivateResource(IAnyResource theResource) {\n+\t\tMdmUtil.setGoldenResourceRedirected(theResource);\n+\t}\n+\n+\tpublic boolean isDeactivated(IBaseResource theGoldenResource) {\n+\t\treturn MdmUtil.isGoldenRecordRedirected(theGoldenResource);\n+\t}\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f7f2df14f732c131b360087deaa0b4827b05b5"}, "originalPosition": 377}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzcyNzM2NQ==", "bodyText": "MdmResourceUtil?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r537727365", "createdAt": "2020-12-07T18:22:39Z", "author": {"login": "fil512"}, "path": "hapi-fhir-server-mdm/src/main/java/ca/uhn/fhir/mdm/util/MdmUtil.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package ca.uhn.fhir.mdm.util;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR - Master Data Management\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.mdm.api.MdmConstants;\n+import org.hl7.fhir.instance.model.api.IBaseCoding;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Optional;\n+\n+public final class MdmUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f7f2df14f732c131b360087deaa0b4827b05b5"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzcyNzkxNQ==", "bodyText": "nitpick: rename to PrimitiveTypeEqualsPredicate", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r537727915", "createdAt": "2020-12-07T18:23:33Z", "author": {"login": "fil512"}, "path": "hapi-fhir-server-mdm/src/main/java/ca/uhn/fhir/mdm/util/PrimitiveTypeComparingPredicate.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package ca.uhn.fhir.mdm.util;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR - Master Data Management\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import org.hl7.fhir.instance.model.api.IPrimitiveType;\n+\n+import java.lang.reflect.Field;\n+import java.util.function.BiPredicate;\n+\n+public class PrimitiveTypeComparingPredicate implements BiPredicate {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f7f2df14f732c131b360087deaa0b4827b05b5"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzcyOTU1OA==", "bodyText": "why is there a Patient patient?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r537729558", "createdAt": "2020-12-07T18:26:05Z", "author": {"login": "fil512"}, "path": "hapi-fhir-server-mdm/src/test/java/ca/uhn/fhir/mdm/util/PrimitiveTypeComparingPredicateTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package ca.uhn.fhir.mdm.util;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.util.FhirTerser;\n+import org.hl7.fhir.instance.model.api.IBase;\n+import org.hl7.fhir.r4.model.Address;\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.hl7.fhir.r4.model.DateType;\n+import org.hl7.fhir.r4.model.Enumerations;\n+import org.hl7.fhir.r4.model.Identifier;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Collections;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+class PrimitiveTypeComparingPredicateTest {\n+\n+\tprivate static FhirContext myFhirContext;\n+\n+\tprivate FhirTerser myTerser;\n+\n+\tprivate IBase myPositiveTest1;\n+\n+\tprivate IBase myPositiveTest2;\n+\n+\tprivate IBase myPositiveTest3;\n+\n+\tprivate IBase myNegativeTest;\n+\n+\tprivate PrimitiveTypeComparingPredicate cut = new PrimitiveTypeComparingPredicate();\n+\n+\t@BeforeAll\n+\tpublic static void initContext() {\n+\t\tmyFhirContext = FhirContext.forR4();\n+\t}\n+\n+\t@BeforeEach\n+\tpublic void init() {\n+\t\tmyTerser = myFhirContext.newTerser();\n+\n+\t\tmyPositiveTest1 = newPatient();\n+\t\tmyPositiveTest2 = newPatient();\n+\t\tmyPositiveTest3 = newPatient();\n+\n+\t\tPatient patient = newPatient();\n+\t\tpatient.setActive(false);\n+\t\tpatient.setMultipleBirth(new BooleanType(false));\n+\t\tmyNegativeTest = patient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f7f2df14f732c131b360087deaa0b4827b05b5"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzczMTkwOQ==", "bodyText": "Nitpick: This test is misleading.  It's not testing transitivity.  It's just testing that three identical resources are all equal to each other.  It doesn't do anything beyond testing that assertTrue(cut.test(myPositiveTest1, myPositiveTest2));", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r537731909", "createdAt": "2020-12-07T18:29:33Z", "author": {"login": "fil512"}, "path": "hapi-fhir-server-mdm/src/test/java/ca/uhn/fhir/mdm/util/PrimitiveTypeComparingPredicateTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package ca.uhn.fhir.mdm.util;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.util.FhirTerser;\n+import org.hl7.fhir.instance.model.api.IBase;\n+import org.hl7.fhir.r4.model.Address;\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.hl7.fhir.r4.model.DateType;\n+import org.hl7.fhir.r4.model.Enumerations;\n+import org.hl7.fhir.r4.model.Identifier;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Collections;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+class PrimitiveTypeComparingPredicateTest {\n+\n+\tprivate static FhirContext myFhirContext;\n+\n+\tprivate FhirTerser myTerser;\n+\n+\tprivate IBase myPositiveTest1;\n+\n+\tprivate IBase myPositiveTest2;\n+\n+\tprivate IBase myPositiveTest3;\n+\n+\tprivate IBase myNegativeTest;\n+\n+\tprivate PrimitiveTypeComparingPredicate cut = new PrimitiveTypeComparingPredicate();\n+\n+\t@BeforeAll\n+\tpublic static void initContext() {\n+\t\tmyFhirContext = FhirContext.forR4();\n+\t}\n+\n+\t@BeforeEach\n+\tpublic void init() {\n+\t\tmyTerser = myFhirContext.newTerser();\n+\n+\t\tmyPositiveTest1 = newPatient();\n+\t\tmyPositiveTest2 = newPatient();\n+\t\tmyPositiveTest3 = newPatient();\n+\n+\t\tPatient patient = newPatient();\n+\t\tpatient.setActive(false);\n+\t\tpatient.setMultipleBirth(new BooleanType(false));\n+\t\tmyNegativeTest = patient;\n+\t}\n+\n+\tprivate Patient newPatient() {\n+\t\tPatient patient;\n+\t\tpatient = new Patient();\n+\t\tpatient.setActive(true);\n+\t\tpatient.setGender(Enumerations.AdministrativeGender.FEMALE);\n+\t\tpatient.setBirthDateElement(new DateType(\"1901-01-01\"));\n+\n+\t\tAddress address = new Address();\n+\t\taddress.addLine(\"Somwhere\");\n+\t\taddress.setCity(\"Toronto\");\n+\t\taddress.setCountry(\"Canada\");\n+\t\tpatient.setAddress(Collections.singletonList(address));\n+\t\treturn patient;\n+\t}\n+\n+\t@Test\n+\tpublic void testNegativeMatchOnTheSameType() {\n+\t\tassertFalse(cut.test(myPositiveTest1, myNegativeTest));\n+\t\tassertFalse(cut.test(myNegativeTest, myPositiveTest1));\n+\t}\n+\n+\t@Test\n+\tpublic void testNegativeMatchOnDifferentTypes() {\n+\t\tPatient patient = newPatient();\n+\t\tIdentifier identifier = patient.addIdentifier();\n+\t\tidentifier.setValue(\"TEST_VALUE\");\n+\t\tassertFalse(cut.test(myNegativeTest, identifier));\n+\t}\n+\n+\t@Test\n+\tpublic void testSymmetry() {\n+\t\tassertTrue(cut.test(myPositiveTest1, myPositiveTest2));\n+\t\tassertTrue(cut.test(myPositiveTest2, myPositiveTest1));\n+\t}\n+\n+\t@Test\n+\tpublic void testReflexivity() {\n+\t\tassertTrue(cut.test(myPositiveTest1, myPositiveTest1));\n+\t}\n+\n+\t@Test\n+\tpublic void testTransitivity() {\n+\t\tassertTrue(cut.test(myPositiveTest1, myPositiveTest2));\n+\t\tassertTrue(cut.test(myPositiveTest2, myPositiveTest3));\n+\t\tassertTrue(cut.test(myPositiveTest1, myPositiveTest3));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f7f2df14f732c131b360087deaa0b4827b05b5"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzczMjk2NA==", "bodyText": "This is really nice!  Will be interesting to see how it evolves as we add survivability rules!", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r537732964", "createdAt": "2020-12-07T18:31:13Z", "author": {"login": "fil512"}, "path": "hapi-fhir-server-mdm/src/main/java/ca/uhn/fhir/mdm/util/GoldenResourceHelper.java", "diffHunk": "@@ -0,0 +1,377 @@\n+package ca.uhn.fhir.mdm.util;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR - Master Data Management\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.context.BaseRuntimeChildDefinition;\n+import ca.uhn.fhir.context.BaseRuntimeElementCompositeDefinition;\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.context.FhirVersionEnum;\n+import ca.uhn.fhir.context.RuntimeResourceDefinition;\n+import ca.uhn.fhir.fhirpath.IFhirPath;\n+import ca.uhn.fhir.mdm.api.IMdmSettings;\n+import ca.uhn.fhir.mdm.log.Logs;\n+import ca.uhn.fhir.mdm.model.CanonicalEID;\n+import ca.uhn.fhir.mdm.model.MdmTransactionContext;\n+import ca.uhn.fhir.util.FhirTerser;\n+import org.hl7.fhir.instance.model.api.IAnyResource;\n+import org.hl7.fhir.instance.model.api.IBase;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.IPrimitiveType;\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.slf4j.Logger;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import static ca.uhn.fhir.context.FhirVersionEnum.DSTU3;\n+import static ca.uhn.fhir.context.FhirVersionEnum.R4;\n+\n+@Service\n+public class GoldenResourceHelper {\n+\n+\tprivate static final Logger ourLog = Logs.getMdmTroubleshootingLog();\n+\n+\tprivate static final String FIELD_NAME_IDENTIFIER = \"identifier\";\n+\n+\t@Autowired\n+\tprivate IMdmSettings myMdmSettings;\n+\t@Autowired\n+\tprivate EIDHelper myEIDHelper;\n+\n+\n+\tprivate final FhirContext myFhirContext;\n+\n+\t@Autowired\n+\tpublic GoldenResourceHelper(FhirContext theFhirContext) {\n+\t\tmyFhirContext = theFhirContext;\n+\t}\n+\n+\t/**\n+\t * Creates a copy of the specified resource. This method will carry over resource EID if it exists. If it does not exist,\n+\t * a randomly generated UUID EID will be created.\n+\t *\n+\t * @param <T>                 Supported MDM resource type (e.g. Patient, Practitioner)\n+\t * @param theIncomingResource The resource that will be used as the starting point for the MDM linking.\n+\t */\n+\tpublic <T extends IAnyResource> T createGoldenResourceFromMdmTarget(T theIncomingResource) {\n+\t\tvalidateContextSupported();\n+\n+\t\t// get a ref to the actual ID Field\n+\t\tRuntimeResourceDefinition resourceDefinition = myFhirContext.getResourceDefinition(theIncomingResource);\n+\t\tIBaseResource newGoldenResource = resourceDefinition.newInstance();\n+\n+\t\t// hapi has 2 metamodels: for children and types\n+\t\tBaseRuntimeChildDefinition goldenResourceIdentifier = resourceDefinition.getChildByName(FIELD_NAME_IDENTIFIER);\n+\n+\t\tcloneAllExternalEidsIntoNewGoldenResource(goldenResourceIdentifier, theIncomingResource, newGoldenResource);\n+\n+\t\taddHapiEidIfNoExternalEidIsPresent(newGoldenResource, goldenResourceIdentifier, theIncomingResource);\n+\n+\t\tMdmUtil.setMdmManaged(newGoldenResource);\n+\t\tMdmUtil.setGoldenResource(newGoldenResource);\n+\n+\t\treturn (T) newGoldenResource;\n+\t}\n+\n+\t/**\n+\t * If there are no external EIDs on the incoming resource, create a new HAPI EID on the new Golden Resource.\n+\t */\n+\t//TODO GGG ask james if there is any way we can convert this canonical EID into a generic STU-agnostic IBase.\n+\tprivate <T extends IAnyResource> void addHapiEidIfNoExternalEidIsPresent(\n+\t\tIBaseResource theNewGoldenResource, BaseRuntimeChildDefinition theGoldenResourceIdentifier, IAnyResource theTargetResource) {\n+\n+\t\tList<CanonicalEID> eidsToApply = myEIDHelper.getExternalEid(theNewGoldenResource);\n+\t\tif (!eidsToApply.isEmpty()) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tCanonicalEID hapiEid = myEIDHelper.createHapiEid();\n+\t\ttheGoldenResourceIdentifier.getMutator().addValue(theNewGoldenResource, toId(hapiEid));\n+\n+\t\t// set identifier on the target resource\n+\t\tcloneEidIntoResource(theTargetResource, hapiEid);\n+\t}\n+\n+\tprivate void cloneEidIntoResource(IBaseResource theResourceToCloneInto, CanonicalEID theEid) {\n+\t\t// get a ref to the actual ID Field\n+\t\tRuntimeResourceDefinition resourceDefinition = myFhirContext.getResourceDefinition(theResourceToCloneInto);\n+\t\t// hapi has 2 metamodels: for children and types\n+\t\tBaseRuntimeChildDefinition resourceIdentifier = resourceDefinition.getChildByName(FIELD_NAME_IDENTIFIER);\n+\t\tcloneEidIntoResource(resourceIdentifier, toId(theEid), theResourceToCloneInto);\n+\t}\n+\n+\t/**\n+\t * Given an Child Definition of `identifier`, a R4/DSTU3 EID Identifier, and a new resource, clone the EID into that resources' identifier list.\n+\t */\n+\tprivate void cloneEidIntoResource(BaseRuntimeChildDefinition theIdentifierDefinition, IBase theEid, IBase theResourceToCloneEidInto) {\n+\t\t// FHIR choice types - fields within fhir where we have a choice of ids\n+\t\tBaseRuntimeElementCompositeDefinition<?> childIdentifier = (BaseRuntimeElementCompositeDefinition<?>) theIdentifierDefinition.getChildByName(FIELD_NAME_IDENTIFIER);\n+\t\tIBase resourceNewIdentifier = childIdentifier.newInstance();\n+\n+\t\tFhirTerser terser = myFhirContext.newTerser();\n+\t\tterser.cloneInto(theEid, resourceNewIdentifier, true);\n+\t\ttheIdentifierDefinition.getMutator().addValue(theResourceToCloneEidInto, resourceNewIdentifier);\n+\t}\n+\n+\t/**\n+\t * Clones specified composite field (collection). Composite field values must confirm to the collections\n+\t * contract.\n+\t *\n+\t * @param theFrom Resource to clone the specified filed from\n+\t * @param theTo   Resource to clone the specified filed to\n+\t * @param field   Field name to be copied\n+\t */\n+\tprivate void cloneCompositeField(IBaseResource theFrom, IBaseResource theTo, String field) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f7f2df14f732c131b360087deaa0b4827b05b5"}, "originalPosition": 147}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af461cd343b6a0b93ff501ee91a0100646e4d37c", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/af461cd343b6a0b93ff501ee91a0100646e4d37c", "committedDate": "2020-12-07T19:04:04Z", "message": "Apply doc update suggestions from code review\n\nCo-authored-by: Ken Stevens <khstevens@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd90eb699ff1f65f37b1fffbd3e672a915086ad8", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/fd90eb699ff1f65f37b1fffbd3e672a915086ad8", "committedDate": "2020-12-07T23:03:56Z", "message": "Review updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b503d50b6726074f923169943d418960c02c84cd", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/b503d50b6726074f923169943d418960c02c84cd", "committedDate": "2020-12-08T00:18:58Z", "message": "Addressed failures"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61c1b6cfb273170f3e7224b87ce28d8cd9d39d56", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/61c1b6cfb273170f3e7224b87ce28d8cd9d39d56", "committedDate": "2020-12-08T00:30:18Z", "message": "Updated docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3c094438855b18cbd8c0a5e647367414a1e6e38", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/d3c094438855b18cbd8c0a5e647367414a1e6e38", "committedDate": "2020-12-08T03:02:45Z", "message": "Merge remote-tracking branch 'origin/master' into gg_20201105-remove-person-references"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6018dd053787f424a7646ac1a7b0b76beec86fd3", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/6018dd053787f424a7646ac1a7b0b76beec86fd3", "committedDate": "2020-12-08T15:44:11Z", "message": "Fixed ambitious schema update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aef84c9fe9ce9045bc132c7f568f591f796e54b7", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/aef84c9fe9ce9045bc132c7f568f591f796e54b7", "committedDate": "2020-12-08T16:24:40Z", "message": "Updated docs yet again"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efb429b319b4164f72588810ac9102e240161803", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/efb429b319b4164f72588810ac9102e240161803", "committedDate": "2020-12-08T18:00:02Z", "message": "Fixed todos and reverted FK check in the test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c7b59798332ea79bab653e2b8180290b26b3308", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/4c7b59798332ea79bab653e2b8180290b26b3308", "committedDate": "2020-12-08T20:32:01Z", "message": "Addressed more code review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b610801fa30d02c27eeb2544e09834062caa9f4", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/4b610801fa30d02c27eeb2544e09834062caa9f4", "committedDate": "2020-12-08T21:47:19Z", "message": "Added header"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3a9ab20dcdffae8550b5bae1aa2132a331eb1ad", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/b3a9ab20dcdffae8550b5bae1aa2132a331eb1ad", "committedDate": "2020-12-09T00:05:21Z", "message": "Updated wording assertion in exception tracing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52fd83c654a95339fd5975d6e1b43257d10e156a", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/52fd83c654a95339fd5975d6e1b43257d10e156a", "committedDate": "2020-12-09T14:14:58Z", "message": "Merge remote-tracking branch 'origin/master' into gg_20201105-remove-person-references"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0dfc4597e8941367f141824865d10f98976566aa", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/0dfc4597e8941367f141824865d10f98976566aa", "committedDate": "2020-11-05T14:24:53Z", "message": "comment fixes and removing dead code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef2041d89d5e4b6e2207f0ec625e771d9f53167c", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/ef2041d89d5e4b6e2207f0ec625e771d9f53167c", "committedDate": "2020-11-05T14:25:38Z", "message": "Merge remote-tracking branch 'origin/master' into 2161-refactor-empi"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5797cd0682bf6e12aa79f6230eedb1240778704f", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/5797cd0682bf6e12aa79f6230eedb1240778704f", "committedDate": "2020-11-05T18:07:45Z", "message": "* Add source_resource_id column\n* Add source_resource columm\nStill need to depracate the old columns.\nReworked a Matcher to ignore Person"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "656b8aeba706ed3f7dcfd71b305629c82188f489", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/656b8aeba706ed3f7dcfd71b305629c82188f489", "committedDate": "2020-11-05T18:41:01Z", "message": "Partial removal of getPersonFromTarget"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bfc62804cd55a3c4d740219cd63c82402867295", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/4bfc62804cd55a3c4d740219cd63c82402867295", "committedDate": "2020-11-05T19:23:53Z", "message": "WIP removing Person"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9509f99634d4899ca2c9e40b9e84e1763bc8912", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/e9509f99634d4899ca2c9e40b9e84e1763bc8912", "committedDate": "2020-11-05T19:46:30Z", "message": "WIP removing Person - ID cloning"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b4f6475204ed139e2144322c4fa10c6d756633b", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/0b4f6475204ed139e2144322c4fa10c6d756633b", "committedDate": "2020-11-05T22:39:25Z", "message": "EID copy magic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aba69533600db47f8146889302a986ec51040477", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/aba69533600db47f8146889302a986ec51040477", "committedDate": "2020-11-06T04:06:54Z", "message": "Mild comment :)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71856dbd64d7126dbf6edf3433d6a23a81ba2959", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/71856dbd64d7126dbf6edf3433d6a23a81ba2959", "committedDate": "2020-11-06T17:29:11Z", "message": "WIP Refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79793f9c403b059fb68274cf63952406dd635ee7", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/79793f9c403b059fb68274cf63952406dd635ee7", "committedDate": "2020-11-06T18:16:50Z", "message": "WIP Refactoring 2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "063d04cc79f274da0434ab184eeca17652ecd999", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/063d04cc79f274da0434ab184eeca17652ecd999", "committedDate": "2020-11-06T19:54:37Z", "message": "One more test passing. rework EID updates to support the terser method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27afbe93b3ae19dee64116a8bc31ff49fc550840", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/27afbe93b3ae19dee64116a8bc31ff49fc550840", "committedDate": "2020-11-06T20:39:33Z", "message": "Cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9422ba7a025f18273d72babf0d65b22a02c9b202", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/9422ba7a025f18273d72babf0d65b22a02c9b202", "committedDate": "2020-11-06T22:02:07Z", "message": "WIP Refactoring 3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c0fab8cec786d435760e5bf1e271e298e3b869c", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/4c0fab8cec786d435760e5bf1e271e298e3b869c", "committedDate": "2020-11-09T14:06:50Z", "message": "Merge remote-tracking branch 'origin/master' into gg_20201105-remove-person-references"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d6ede660be921ea2eb12c6223c9e1eafddb47f1", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/5d6ede660be921ea2eb12c6223c9e1eafddb47f1", "committedDate": "2020-11-09T16:07:58Z", "message": "Use case #3 testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac3b1e3e17adb53600637fea8e40f3dbeb8cf1c0", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/ac3b1e3e17adb53600637fea8e40f3dbeb8cf1c0", "committedDate": "2020-11-09T16:46:56Z", "message": "Fixed code for use case #3 test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4865e8a4101e6492a2bca3706a143249ee8163ce", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/4865e8a4101e6492a2bca3706a143249ee8163ce", "committedDate": "2020-11-09T20:29:50Z", "message": "Fixed code for use case #2 test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06446ae0bfd5b9d892ebe9bec7e671081a89def8", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/06446ae0bfd5b9d892ebe9bec7e671081a89def8", "committedDate": "2020-11-09T20:29:50Z", "message": "Address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a73d0421ba81523e92bfa16d4b0f8256250f035c", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/a73d0421ba81523e92bfa16d4b0f8256250f035c", "committedDate": "2020-11-09T20:31:13Z", "message": "Merge branch 'gg_20201105-remove-person-references' of github.com:jamesagnew/hapi-fhir into gg_20201105-remove-person-references"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e82602be9ef469d927fb972cd0bb554cd99031f", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/9e82602be9ef469d927fb972cd0bb554cd99031f", "committedDate": "2020-11-09T21:14:02Z", "message": "Begin refactor of provider tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c55de80c6aec722c54cd4e696b63e57a7191a1f0", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/c55de80c6aec722c54cd4e696b63e57a7191a1f0", "committedDate": "2020-11-09T21:14:06Z", "message": "Merge branch 'gg_20201105-remove-person-references' of github.com:jamesagnew/hapi-fhir into gg_20201105-remove-person-references"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99e3dbaccd7d35fa6ed82805db9359799b4dbb5e", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/99e3dbaccd7d35fa6ed82805db9359799b4dbb5e", "committedDate": "2020-11-09T22:35:04Z", "message": "Removed link matching from PersonHelper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8efafa112a1271ce41d986a3431714f60fd6b17b", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/8efafa112a1271ce41d986a3431714f60fd6b17b", "committedDate": "2020-11-09T22:54:49Z", "message": "Debugging case 4"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7974a6f1d9ca01a85c082af1df41e046879c03b", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/d7974a6f1d9ca01a85c082af1df41e046879c03b", "committedDate": "2020-11-10T02:44:11Z", "message": "continue refactor of providers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "625744b23dae486f60e8914beca93a3844b4833e", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/625744b23dae486f60e8914beca93a3844b4833e", "committedDate": "2020-11-10T02:45:18Z", "message": "Merge branch 'gg_20201105-remove-person-references' of github.com:jamesagnew/hapi-fhir into gg_20201105-remove-person-references"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2e9201f1156679ee5c09d41554664212e0c944e", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/d2e9201f1156679ee5c09d41554664212e0c944e", "committedDate": "2020-11-10T02:49:38Z", "message": "Code is compiling again :)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a67b3a8298236be307b6fc05f688459c20b93871", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/a67b3a8298236be307b6fc05f688459c20b93871", "committedDate": "2020-11-10T15:46:43Z", "message": "Fixed possible-matcher"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bd222af7fc169f0068a2d1d80b169b097d11f04", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/9bd222af7fc169f0068a2d1d80b169b097d11f04", "committedDate": "2020-11-10T17:13:04Z", "message": "Manual match debuggging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffbe35e2cddacbb74cb0bea76087e41176784182", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/ffbe35e2cddacbb74cb0bea76087e41176784182", "committedDate": "2020-11-10T17:26:20Z", "message": "Partial refactor of Provider"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16022107c65844d36732e788650921e266abcf70", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/16022107c65844d36732e788650921e266abcf70", "committedDate": "2020-11-10T17:26:22Z", "message": "Merge branch 'gg_20201105-remove-person-references' of github.com:jamesagnew/hapi-fhir into gg_20201105-remove-person-references"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40fc2973e465d63b2ebd5748141cf545d5475e37", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/40fc2973e465d63b2ebd5748141cf545d5475e37", "committedDate": "2020-11-10T17:47:38Z", "message": "Manual match debuggging 2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8b0afa626fd1ce8802dc6a9ad35e85441180352", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/a8b0afa626fd1ce8802dc6a9ad35e85441180352", "committedDate": "2020-11-10T20:37:16Z", "message": "Match link passing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bde163b7e82ecbbe1506cf9c6d036eb2d3a0f6f9", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/bde163b7e82ecbbe1506cf9c6d036eb2d3a0f6f9", "committedDate": "2020-11-10T21:18:25Z", "message": "Merge branch 'gg_20201105-remove-person-references' of github.com:jamesagnew/hapi-fhir into gg_20201105-remove-person-references"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a9b853beb2558664d4e363807ff01c1c43cc49b", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/4a9b853beb2558664d4e363807ff01c1c43cc49b", "committedDate": "2020-11-10T23:00:01Z", "message": "Fix compilation error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d1612eef4d7528dc94891c6c36e1d6ce4146c6a", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/5d1612eef4d7528dc94891c6c36e1d6ce4146c6a", "committedDate": "2020-11-10T23:38:26Z", "message": "Remove target version 9"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57c0e10a53d4df989eaedcd6505f91334e8b8a20", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/57c0e10a53d4df989eaedcd6505f91334e8b8a20", "committedDate": "2020-11-11T01:31:04Z", "message": "More tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0f449ff5e5fbb87470aa2aed6ef886b6624a271", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/b0f449ff5e5fbb87470aa2aed6ef886b6624a271", "committedDate": "2020-11-11T15:17:03Z", "message": "MergerSvcTest WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "331acc1b554f02bd279248d1f706b63237eb2443", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/331acc1b554f02bd279248d1f706b63237eb2443", "committedDate": "2020-11-11T19:15:35Z", "message": "Attempting to perform MDM on a new resource type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d34502fae3a7c72d48f5545251274387e1f786e", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/3d34502fae3a7c72d48f5545251274387e1f786e", "committedDate": "2020-11-11T19:15:58Z", "message": "Merge branch 'gg_20201105-remove-person-references' of github.com:jamesagnew/hapi-fhir into gg_20201105-remove-person-references"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46235226cf31e53146e3c576ac4490760c00304a", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/46235226cf31e53146e3c576ac4490760c00304a", "committedDate": "2020-11-11T19:25:36Z", "message": "Whack of matcher changes for vector calculation to only count _relevant_ field matchers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71ab400006265052967838cd4e73005437805363", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/71ab400006265052967838cd4e73005437805363", "committedDate": "2020-11-11T20:26:41Z", "message": "Fix matcher. Add another medication test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bbfb6dfaa05ab149bf9740a771594270ba6cd45", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/2bbfb6dfaa05ab149bf9740a771594270ba6cd45", "committedDate": "2020-11-11T20:27:57Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84d9d080dff890d72f7630b8a35cc346a20fa55b", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/84d9d080dff890d72f7630b8a35cc346a20fa55b", "committedDate": "2020-11-11T20:28:04Z", "message": "Merge branch 'gg_20201105-remove-person-references' of github.com:jamesagnew/hapi-fhir into gg_20201105-remove-person-references"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae3040415cdc102c6d53beb25551d9491ed2f334", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/ae3040415cdc102c6d53beb25551d9491ed2f334", "committedDate": "2020-11-11T21:36:54Z", "message": "Fix vector map bug i just wrote. woopsie doopsie"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a28e9e736acbfabec2051e67676619db40ee3434", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/a28e9e736acbfabec2051e67676619db40ee3434", "committedDate": "2020-11-11T22:25:44Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7c47f911bd8006690206f25a9e5caf803413c6b", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/f7c47f911bd8006690206f25a9e5caf803413c6b", "committedDate": "2020-11-12T20:59:00Z", "message": "Merge Service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d530c6517e942a0b8deca03e4c0399f2b4bd060", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/1d530c6517e942a0b8deca03e4c0399f2b4bd060", "committedDate": "2020-11-12T22:22:04Z", "message": "Added tests and cleaned test code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e490011a1f7253d0b8c790aade9cab01ed178578", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/e490011a1f7253d0b8c790aade9cab01ed178578", "committedDate": "2020-11-12T23:36:52Z", "message": "Begin large rename"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "687e24fa83a9d756fb15e4e92188070c748983fb", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/687e24fa83a9d756fb15e4e92188070c748983fb", "committedDate": "2020-11-12T23:37:53Z", "message": "Merge branch 'gg_20201105-remove-person-references' of github.com:jamesagnew/hapi-fhir into gg_20201105-remove-person-references"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f648d8ec2baa06f0730a66f4ce11f9999330f9dd", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/f648d8ec2baa06f0730a66f4ce11f9999330f9dd", "committedDate": "2020-11-13T14:44:15Z", "message": "renaming in personsvc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68fad00a299dc55a1c68c6f4b423887507c4bacf", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/68fad00a299dc55a1c68c6f4b423887507c4bacf", "committedDate": "2020-11-13T16:45:24Z", "message": "Correct bug with attempting to modify an EID"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dadd5f3caf357be07340e2a5685c5e30462b9d05", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/dadd5f3caf357be07340e2a5685c5e30462b9d05", "committedDate": "2020-11-13T19:22:45Z", "message": "Resolved EmpiLinkSvcTest failures"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fc96899436ce51b5ebcfd52f79e770ab061bc1f", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/1fc96899436ce51b5ebcfd52f79e770ab061bc1f", "committedDate": "2020-11-13T19:28:24Z", "message": "Renamed source to golden"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9df0c16b95cda8b5836ce3aee8403ec43c133152", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/9df0c16b95cda8b5836ce3aee8403ec43c133152", "committedDate": "2020-11-13T20:13:14Z", "message": "Resolved EmpiProviderClearLinkR4Tests and misc src to gld renames"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0bef70e12c44246326e39c7ef06211b13f84043", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/c0bef70e12c44246326e39c7ef06211b13f84043", "committedDate": "2020-11-13T21:42:09Z", "message": "Add optional resource type to EMPI provider method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa0e87b56c69cc810b96b730876bc718d604b6c7", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/fa0e87b56c69cc810b96b730876bc718d604b6c7", "committedDate": "2020-11-13T21:56:13Z", "message": "Links WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "176f7f041274778c7c08dd79e56b36a65ad0dadb", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/176f7f041274778c7c08dd79e56b36a65ad0dadb", "committedDate": "2020-11-13T21:57:23Z", "message": "Merge branch 'gg_20201105-remove-person-references' of github.com:jamesagnew/hapi-fhir into gg_20201105-remove-person-references"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ad0246c2a60e69c016c3a41731bc07738e3db44", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/1ad0246c2a60e69c016c3a41731bc07738e3db44", "committedDate": "2020-11-13T22:16:10Z", "message": "Added config fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ad1b129d3dd750fddd1c79b6eb8fc0eac2f8c4e", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/0ad1b129d3dd750fddd1c79b6eb8fc0eac2f8c4e", "committedDate": "2020-11-13T22:47:56Z", "message": "Links WIP 2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "514dab77840cf91d9884925108943d276a7ceffb", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/514dab77840cf91d9884925108943d276a7ceffb", "committedDate": "2020-11-16T16:26:31Z", "message": "Updated resource type handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54f0021b29a59a139c3aec800240bb2eb32cd7fe", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/54f0021b29a59a139c3aec800240bb2eb32cd7fe", "committedDate": "2020-11-16T17:50:28Z", "message": "All Batch tests now passing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "869814606d9be6bd488609d7235e7d63280ab15e", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/869814606d9be6bd488609d7235e7d63280ab15e", "committedDate": "2020-11-16T20:08:34Z", "message": "Fixed code for UpdateLinkR4Test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "799f6adecbe5b54e967a5362fde886e490c890f0", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/799f6adecbe5b54e967a5362fde886e490c890f0", "committedDate": "2020-11-16T20:45:50Z", "message": "Finish tests in BatchSvcImplTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a481242c75f4e3a5b5e4354765bdb9f3917152a", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/9a481242c75f4e3a5b5e4354765bdb9f3917152a", "committedDate": "2020-11-16T22:42:09Z", "message": "Resolved MergePersonsR4Test failures"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fa12bb947144a3ef1c4f2c7bed91cff0e12562e", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/6fa12bb947144a3ef1c4f2c7bed91cff0e12562e", "committedDate": "2020-11-16T23:26:44Z", "message": "Finish tests in EmpiResourceDaoSvcTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36d7dde2e1a6b184e8b522cbebc2408f13fff81d", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/36d7dde2e1a6b184e8b522cbebc2408f13fff81d", "committedDate": "2020-11-16T23:27:18Z", "message": "Merge branch 'gg_20201105-remove-person-references' of github.com:jamesagnew/hapi-fhir into gg_20201105-remove-person-references"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc6940fd6aaecdd7f0c599dda4bd314eab53a326", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/bc6940fd6aaecdd7f0c599dda4bd314eab53a326", "committedDate": "2020-11-16T23:47:39Z", "message": "Finish tests for provider"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dae587912d6bb431942f3debb19a9055ab518d82", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/dae587912d6bb431942f3debb19a9055ab518d82", "committedDate": "2020-11-16T23:50:14Z", "message": "Update test json files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45ec435c8f660b4f4bb67ba7f4123b852bbdde6e", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/45ec435c8f660b4f4bb67ba7f4123b852bbdde6e", "committedDate": "2020-11-17T00:00:27Z", "message": "Fixed code to pass FieldMatcherTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "406bbafafe5eb66d7cc19035d81d4e7878ef0a85", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/406bbafafe5eb66d7cc19035d81d4e7878ef0a85", "committedDate": "2020-11-17T00:00:33Z", "message": "Merge branch 'gg_20201105-remove-person-references' of github.com:jamesagnew/hapi-fhir into gg_20201105-remove-person-references"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "511696bd84876dba6a9143aa0b78cc2919b9a84a", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/511696bd84876dba6a9143aa0b78cc2919b9a84a", "committedDate": "2020-11-17T00:11:19Z", "message": "Fix validator error messages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9940d4c4eb98072d3f6cc5a8a48ebf9600e9a286", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/9940d4c4eb98072d3f6cc5a8a48ebf9600e9a286", "committedDate": "2020-11-17T00:12:08Z", "message": "Merge branch 'gg_20201105-remove-person-references' of github.com:jamesagnew/hapi-fhir into gg_20201105-remove-person-references"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d9414597b4e560f384737eafcf2da6f0260e803", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/4d9414597b4e560f384737eafcf2da6f0260e803", "committedDate": "2020-11-17T00:19:14Z", "message": "Updated mocks for EID helper test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70284b257434e639bf8b2cdd0555c2860e229db7", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/70284b257434e639bf8b2cdd0555c2860e229db7", "committedDate": "2020-11-17T00:19:19Z", "message": "Merge branch 'gg_20201105-remove-person-references' of github.com:jamesagnew/hapi-fhir into gg_20201105-remove-person-references"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23898579bd54490a15c389a193d9402d645a219b", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/23898579bd54490a15c389a193d9402d645a219b", "committedDate": "2020-11-17T00:42:11Z", "message": "fix customresourcematcher test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d15ce0db0835ef4313db06476f0af3c3d72639a3", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/d15ce0db0835ef4313db06476f0af3c3d72639a3", "committedDate": "2020-11-17T00:42:16Z", "message": "Merge branch 'gg_20201105-remove-person-references' of github.com:jamesagnew/hapi-fhir into gg_20201105-remove-person-references"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4ce94bc7cb9c0ce4c5739bb82629073fdc90b5e", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/e4ce94bc7cb9c0ce4c5739bb82629073fdc90b5e", "committedDate": "2020-11-17T01:06:46Z", "message": "Fix resourcemastchersvc tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "676f6315e6fbe6e7edaea0f40716246da1f396a3", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/676f6315e6fbe6e7edaea0f40716246da1f396a3", "committedDate": "2020-11-17T01:21:42Z", "message": "Fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c50c4edea4c849d1ee38ff2a4169e0d59014509c", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/c50c4edea4c849d1ee38ff2a4169e0d59014509c", "committedDate": "2020-11-17T14:27:39Z", "message": "Merge remote-tracking branch 'origin/master' into 2161-refactor-empi"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/805d5b1d6c1c800295cbe99af777b53f6290dd71", "committedDate": "2020-11-17T14:28:37Z", "message": "Merge branch '2161-refactor-empi' into gg_20201105-remove-person-references"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyNjI2OTk5", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#pullrequestreview-532626999", "createdAt": "2020-11-17T17:41:09Z", "commit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 56, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNzo0MTowOVrOH1BQug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxOTo0ODozOFrOH1G_2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM1NzI0Mg==", "bodyText": "Consider changing to GOLDEN_RESOURCE_PID and renaming variable to myGoldenResourcePid", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525357242", "createdAt": "2020-11-17T17:41:09Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/entity/EmpiLink.java", "diffHunk": "@@ -60,6 +60,13 @@\n \t@Column(name = \"PID\")\n \tprivate Long myId;\n \n+\t@ManyToOne(optional = false, fetch = FetchType.LAZY, cascade = {})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM1NzkwMQ==", "bodyText": "Change to myGoldenResourcePid, and add rule count", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525357901", "createdAt": "2020-11-17T17:42:07Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/entity/EmpiLink.java", "diffHunk": "@@ -289,18 +303,27 @@ public EmpiLink setEmpiTargetType(String theEmpiTargetType) {\n \tpublic String toString() {\n \t\treturn new ToStringBuilder(this)\n \t\t\t.append(\"myId\", myId)\n-\t\t\t.append(\"myPersonPid\", myPersonPid)\n+\t\t\t.append(\"myPersonPid\", mySourceResourcePid)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM1ODA1MQ==", "bodyText": "Should be removed", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525358051", "createdAt": "2020-11-17T17:42:21Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-jpaserver-empi/smile.basedir_IS_UNDEFINED/Link Service.puml", "diffHunk": "@@ -0,0 +1,26 @@\n+@startuml", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM1ODM5OA==", "bodyText": "Rename to myMdmSettings", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525358398", "createdAt": "2020-11-17T17:42:52Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/broker/EmpiMessageHandler.java", "diffHunk": "@@ -106,51 +108,51 @@ public void matchEmpiAndUpdateLinks(ResourceModifiedMessage theMsg) {\n \t\t}\n \t}\n \n-\tprivate EmpiTransactionContext createEmpiContext(ResourceModifiedMessage theMsg) {\n+\tprivate MdmTransactionContext createEmpiContext(ResourceModifiedMessage theMsg, String theResourceType) {\n \t\tTransactionLogMessages transactionLogMessages = TransactionLogMessages.createFromTransactionGuid(theMsg.getTransactionId());\n-\t\tEmpiTransactionContext.OperationType empiOperation;\n+\t\tMdmTransactionContext.OperationType empiOperation;\n \t\tswitch (theMsg.getOperationType()) {\n \t\t\tcase CREATE:\n-\t\t\t\tempiOperation = EmpiTransactionContext.OperationType.CREATE_RESOURCE;\n+\t\t\t\tempiOperation = MdmTransactionContext.OperationType.CREATE_RESOURCE;\n \t\t\t\tbreak;\n \t\t\tcase UPDATE:\n-\t\t\t\tempiOperation = EmpiTransactionContext.OperationType.UPDATE_RESOURCE;\n+\t\t\t\tempiOperation = MdmTransactionContext.OperationType.UPDATE_RESOURCE;\n \t\t\t\tbreak;\n \t\t\tcase MANUALLY_TRIGGERED:\n-\t\t\t\tempiOperation = EmpiTransactionContext.OperationType.SUBMIT_RESOURCE_TO_EMPI;\n+\t\t\t\tempiOperation = MdmTransactionContext.OperationType.SUBMIT_RESOURCE_TO_EMPI;\n \t\t\t\tbreak;\n \t\t\tcase DELETE:\n \t\t\tdefault:\n \t\t\t\tourLog.trace(\"Not creating an EmpiTransactionContext for {}\", theMsg.getOperationType());\n \t\t\t\tthrow new InvalidRequestException(\"We can't handle non-update/create operations in EMPI\");\n \t\t}\n-\t\treturn new EmpiTransactionContext(transactionLogMessages, empiOperation);\n+\t\treturn new MdmTransactionContext(transactionLogMessages, empiOperation, theResourceType);\n \t}\n \n \tprivate void validateResourceType(String theResourceType) {\n-\t\tif (!EmpiUtil.supportedTargetType(theResourceType)) {\n+\t\tif (!myEmpiSettings.isSupportedMdmType(theResourceType)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM1ODg1OQ==", "bodyText": "Chance Empi prefix to Mdm and rename variables appropriately.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525358859", "createdAt": "2020-11-17T17:43:36Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/config/EmpiConsumerConfig.java", "diffHunk": "@@ -168,8 +174,8 @@ IEmpiLinkQuerySvc empiLinkQuerySvc() {\n \t}\n \n \t@Bean\n-\tIEmpiExpungeSvc empiResetSvc(EmpiLinkDaoSvc theEmpiLinkDaoSvc, EmpiPersonDeletingSvc theEmpiPersonDeletingSvcImpl ) {\n-\t\treturn new EmpiClearSvcImpl(theEmpiLinkDaoSvc, theEmpiPersonDeletingSvcImpl);\n+\tIEmpiExpungeSvc empiResetSvc(EmpiLinkDaoSvc theEmpiLinkDaoSvc, EmpiPersonDeletingSvc theEmpiPersonDeletingSvcImpl, IEmpiSettings theIEmpiSettings) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM1OTE4Mg==", "bodyText": "Change Empi prefix to Mdm and rename variables appropriately.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525359182", "createdAt": "2020-11-17T17:44:05Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/config/EmpiConsumerConfig.java", "diffHunk": "@@ -223,8 +229,12 @@ EmpiResourceFilteringSvc empiResourceFilteringSvc() {\n \t}\n \n \t@Bean\n-\tEmpiControllerHelper empiProviderHelper(FhirContext theFhirContext, IResourceLoader theResourceLoader) { return new EmpiControllerHelper(theFhirContext, theResourceLoader); }\n+\tEmpiControllerHelper empiProviderHelper(FhirContext theFhirContext, IResourceLoader theResourceLoader, IEmpiSettings theEmpiSettings, MessageHelper messageHelper) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM2MTcxOQ==", "bodyText": "This functionality is pending further requirements elicitation?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525361719", "createdAt": "2020-11-17T17:47:50Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/config/EmpiSearchParameterLoader.java", "diffHunk": "@@ -78,7 +78,7 @@ private SearchParameter buildAssuranceEmpiSearchParameterR4() {\n \t\tSearchParameter retval = new SearchParameter();\n \t\tretval.setId(EMPI_PERSON_ASSURANCE_SEARCH_PARAMETER_ID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM2MjI5Nw==", "bodyText": "Rename source to golden", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525362297", "createdAt": "2020-11-17T17:48:20Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/dao/EmpiLinkDaoSvc.java", "diffHunk": "@@ -59,61 +60,60 @@\n \tprivate FhirContext myFhirContext;\n \n \t@Transactional\n-\tpublic EmpiLink createOrUpdateLinkEntity(IBaseResource thePerson, IBaseResource theTarget, EmpiMatchOutcome theMatchOutcome, EmpiLinkSourceEnum theLinkSource, @Nullable EmpiTransactionContext theEmpiTransactionContext) {\n-\t\tLong personPid = myIdHelperService.getPidOrNull(thePerson);\n-\t\tLong resourcePid = myIdHelperService.getPidOrNull(theTarget);\n+\tpublic EmpiLink createOrUpdateLinkEntity(IBaseResource theSourceResource, IBaseResource theTargetResource, EmpiMatchOutcome theMatchOutcome, EmpiLinkSourceEnum theLinkSource, @Nullable MdmTransactionContext theMdmTransactionContext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM2MjY2Mw==", "bodyText": "Rename source to golden", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525362663", "createdAt": "2020-11-17T17:48:37Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/dao/EmpiLinkDaoSvc.java", "diffHunk": "@@ -59,61 +60,60 @@\n \tprivate FhirContext myFhirContext;\n \n \t@Transactional\n-\tpublic EmpiLink createOrUpdateLinkEntity(IBaseResource thePerson, IBaseResource theTarget, EmpiMatchOutcome theMatchOutcome, EmpiLinkSourceEnum theLinkSource, @Nullable EmpiTransactionContext theEmpiTransactionContext) {\n-\t\tLong personPid = myIdHelperService.getPidOrNull(thePerson);\n-\t\tLong resourcePid = myIdHelperService.getPidOrNull(theTarget);\n+\tpublic EmpiLink createOrUpdateLinkEntity(IBaseResource theSourceResource, IBaseResource theTargetResource, EmpiMatchOutcome theMatchOutcome, EmpiLinkSourceEnum theLinkSource, @Nullable MdmTransactionContext theMdmTransactionContext) {\n+\t\tLong sourceResourcePid = myIdHelperService.getPidOrNull(theSourceResource);\n+\t\tLong targetResourcePid = myIdHelperService.getPidOrNull(theTargetResource);\n \n-\t\tEmpiLink empiLink = getOrCreateEmpiLinkByPersonPidAndTargetPid(personPid, resourcePid);\n+\t\tEmpiLink empiLink = getOrCreateEmpiLinkBySourceResourcePidAndTargetResourcePid(sourceResourcePid, targetResourcePid);\n \t\tempiLink.setLinkSource(theLinkSource);\n \t\tempiLink.setMatchResult(theMatchOutcome.getMatchResultEnum());\n \t\t// Preserve these flags for link updates\n \t\tempiLink.setEidMatch(theMatchOutcome.isEidMatch() | empiLink.isEidMatch());\n-\t\tempiLink.setNewPerson(theMatchOutcome.isNewPerson() | empiLink.isNewPerson());\n-\t\tempiLink.setEmpiTargetType(myFhirContext.getResourceType(theTarget));\n+\t\tempiLink.setHadToCreateNewResource(theMatchOutcome.isNewPerson() | empiLink.getHadToCreateNewResource());\n+\t\tempiLink.setEmpiTargetType(myFhirContext.getResourceType(theTargetResource));\n \t\tif (empiLink.getScore() != null) {\n \t\t\tempiLink.setScore(Math.max(theMatchOutcome.score, empiLink.getScore()));\n \t\t} else {\n \t\t\tempiLink.setScore(theMatchOutcome.score);\n \t\t}\n \n-\t\tString message = String.format(\"Creating EmpiLink from %s to %s -> %s\", thePerson.getIdElement().toUnqualifiedVersionless(), theTarget.getIdElement().toUnqualifiedVersionless(), theMatchOutcome);\n-\t\ttheEmpiTransactionContext.addTransactionLogMessage(message);\n+\t\tString message = String.format(\"Creating EmpiLink from %s to %s -> %s\", theSourceResource.getIdElement().toUnqualifiedVersionless(), theTargetResource.getIdElement().toUnqualifiedVersionless(), theMatchOutcome);\n+\t\ttheMdmTransactionContext.addTransactionLogMessage(message);\n \t\tourLog.debug(message);\n \t\tsave(empiLink);\n \t\treturn empiLink;\n \t}\n \n \t@Nonnull\n-\tpublic EmpiLink getOrCreateEmpiLinkByPersonPidAndTargetPid(Long thePersonPid, Long theResourcePid) {\n-\t\tOptional<EmpiLink> oExisting = getLinkByPersonPidAndTargetPid(thePersonPid, theResourcePid);\n+\tpublic EmpiLink getOrCreateEmpiLinkBySourceResourcePidAndTargetResourcePid(Long theSourceResourcePid, Long theTargetResourcePid) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM2NDg2MQ==", "bodyText": "Rename source to golden and update comments", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525364861", "createdAt": "2020-11-17T17:50:19Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/dao/EmpiLinkDaoSvc.java", "diffHunk": "@@ -162,15 +162,14 @@ public EmpiLink getOrCreateEmpiLinkByPersonPidAndTargetPid(Long thePersonPid, Lo\n \t/**\n \t * Given a person a target and a match result, return the matching EmpiLink, if it exists.\n \t *\n-\t * @param thePersonPid The Pid of the Person in the relationship\n-\t * @param theTargetPid The Pid of the target in the relationship\n+\t * @param thePersonPid   The Pid of the Person in the relationship\n+\t * @param theTargetPid   The Pid of the target in the relationship\n \t * @param theMatchResult The MatchResult you are looking for.\n-\t *\n \t * @return an Optional {@link EmpiLink} containing the matched link if it exists.\n \t */\n \tpublic Optional<EmpiLink> getEmpiLinksByPersonPidTargetPidAndMatchResult(Long thePersonPid, Long theTargetPid, EmpiMatchResultEnum theMatchResult) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM2NjY3MA==", "bodyText": "rename to goldenResources", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525366670", "createdAt": "2020-11-17T17:51:53Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/dao/EmpiLinkDaoSvc.java", "diffHunk": "@@ -233,14 +231,20 @@ public void deleteLink(EmpiLink theEmpiLink) {\n \t * @return A list of Long representing the related Person Pids.\n \t */\n \t@Transactional\n-\tpublic List<Long> deleteAllEmpiLinksAndReturnPersonPids() {\n+\tpublic List<Long> deleteAllEmpiLinksAndReturnGoldenResourcePids() {\n \t\tList<EmpiLink> all = myEmpiLinkDao.findAll();\n-\t\treturn deleteEmpiLinksAndReturnPersonPids(all);\n+\t\treturn deleteEmpiLinksAndReturnGoldenResourcePids(all);\n \t}\n \n-\tprivate List<Long> deleteEmpiLinksAndReturnPersonPids(List<EmpiLink> theLinks) {\n-\t\tSet<Long> persons = theLinks.stream().map(EmpiLink::getPersonPid).collect(Collectors.toSet());\n-\t\tpersons.addAll(theLinks.stream().filter(link -> \"Person\".equals(link.getEmpiTargetType())).map(EmpiLink::getTargetPid).collect(Collectors.toSet()));\n+\tprivate List<Long> deleteEmpiLinksAndReturnGoldenResourcePids(List<EmpiLink> theLinks) {\n+\t\tSet<Long> persons = theLinks.stream().map(EmpiLink::getSourceResourcePid).collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM2NzA2NQ==", "bodyText": "rename source to golden, update javadocs", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525367065", "createdAt": "2020-11-17T17:52:28Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/dao/EmpiLinkDaoSvc.java", "diffHunk": "@@ -308,12 +308,55 @@ public EmpiLink save(EmpiLink theEmpiLink) {\n \t\treturn myEmpiLinkDao.findAll(example);\n \t}\n \n+\t/**\n+\t * Finds all links pointing from the target resource to the source resource.\n+\t *\n+\t * @param theTargetResource Resource referencing the source resource\n+\t * @param theSourceResource Resource being referenced by the source resource\n+\t *\n+\t * @return\n+\t * \t\tReturns all EMPI links pointing to the source from target resource\n+\t */\n+\tpublic List<EmpiLink> findEmpiLinksByTargetAndSource(IBaseResource theTargetResource, IBaseResource theSourceResource) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM2ODkyNw==", "bodyText": "May be a good idea to pull todo out of javadocs", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525368927", "createdAt": "2020-11-17T17:55:10Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/dao/EmpiLinkDaoSvc.java", "diffHunk": "@@ -308,12 +308,55 @@ public EmpiLink save(EmpiLink theEmpiLink) {\n \t\treturn myEmpiLinkDao.findAll(example);\n \t}\n \n+\t/**\n+\t * Finds all links pointing from the target resource to the source resource.\n+\t *\n+\t * @param theTargetResource Resource referencing the source resource\n+\t * @param theSourceResource Resource being referenced by the source resource\n+\t *\n+\t * @return\n+\t * \t\tReturns all EMPI links pointing to the source from target resource\n+\t */\n+\tpublic List<EmpiLink> findEmpiLinksByTargetAndSource(IBaseResource theTargetResource, IBaseResource theSourceResource) {\n+\t\tLong targetPid = myIdHelperService.getPidOrNull(theTargetResource);\n+\t\tif (targetPid == null) {\n+\t\t\treturn Collections.emptyList();\n+\t\t}\n+\t\tLong sourcePid = myIdHelperService.getPidOrNull(theSourceResource);\n+\t\tif (sourcePid == null) {\n+\t\t\treturn Collections.emptyList();\n+\t\t}\n+\t\tEmpiLink exampleLink = myEmpiLinkFactory.newEmpiLink().setTargetPid(targetPid).setGoldenResourcePid(sourcePid);\n+\t\tExample<EmpiLink> example = Example.of(exampleLink);\n+\t\treturn myEmpiLinkDao.findAll(example);\n+\t}\n+\n+\t/**\n+\t * Finds all {@link EmpiLink} entities in which theSourceResource's PID is the source\n+\t * of the relationship.\n+\t *\n+\t * @param theSourceResource the source resource to find links for.\n+\t * @return all links for the source.\n+\t */\n+\tpublic List<EmpiLink> findEmpiMatchLinksBySource(IBaseResource theSourceResource) {\n+\t\tLong pid = myIdHelperService.getPidOrNull(theSourceResource);\n+\t\tif (pid == null) {\n+\t\t\treturn Collections.emptyList();\n+\t\t}\n+\t\tEmpiLink exampleLink = myEmpiLinkFactory.newEmpiLink().setGoldenResourcePid(pid);\n+\t\texampleLink.setMatchResult(EmpiMatchResultEnum.MATCH);\n+\t\tExample<EmpiLink> example = Example.of(exampleLink);\n+\t\treturn myEmpiLinkDao.findAll(example);\n+\t}\n+\n \t/**\n \t * Factory delegation method, whenever you need a new EmpiLink, use this factory method.\n \t * //TODO Should we make the constructor private for EmpiLink? or work out some way to ensure they can only be instantiated via factory.\n+\t *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 261}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM2OTQ3OA==", "bodyText": "Fix empi/person in the naming", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525369478", "createdAt": "2020-11-17T17:55:56Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiClearSvcImpl.java", "diffHunk": "@@ -42,15 +42,17 @@\n \n \tfinal EmpiLinkDaoSvc myEmpiLinkDaoSvc;\n \tfinal EmpiPersonDeletingSvc myEmpiPersonDeletingSvcImpl;\n+\tfinal IEmpiSettings myEmpiSettings;\n \n \t@Autowired\n-\tpublic EmpiClearSvcImpl(EmpiLinkDaoSvc theEmpiLinkDaoSvc, EmpiPersonDeletingSvc theEmpiPersonDeletingSvcImpl) {\n+\tpublic EmpiClearSvcImpl(EmpiLinkDaoSvc theEmpiLinkDaoSvc, EmpiPersonDeletingSvc theEmpiPersonDeletingSvcImpl, IEmpiSettings theIEmpiSettings) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM2OTY2Ng==", "bodyText": "Address empi", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525369666", "createdAt": "2020-11-17T17:56:15Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiClearSvcImpl.java", "diffHunk": "@@ -60,15 +62,15 @@ public long expungeAllEmpiLinksOfTargetType(String theResourceType, ServletReque\n \t}\n \n \tprivate void throwExceptionIfInvalidTargetType(String theResourceType) {\n-\t\tif (!EmpiUtil.supportedTargetType(theResourceType)) {\n-\t\t\tthrow new InvalidRequestException(ProviderConstants.EMPI_CLEAR + \" does not support resource type: \" + theResourceType);\n+\t\tif (!myEmpiSettings.isSupportedMdmType(theResourceType)) {\n+\t\t\tthrow new InvalidRequestException(ProviderConstants.MDM_CLEAR + \" does not support resource type: \" + theResourceType);\n \t\t}\n \t}\n \n \t@Override\n \tpublic long expungeAllEmpiLinks(ServletRequestDetails theRequestDetails) {\n \t\tourLog.info(\"Clearing all EMPI Links...\");\n-\t\tList<Long> personPids = myEmpiLinkDaoSvc.deleteAllEmpiLinksAndReturnPersonPids();\n+\t\tList<Long> personPids = myEmpiLinkDaoSvc.deleteAllEmpiLinksAndReturnGoldenResourcePids();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM2OTgyNg==", "bodyText": "rename params", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525369826", "createdAt": "2020-11-17T17:56:29Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiControllerSvcImpl.java", "diffHunk": "@@ -47,53 +47,53 @@\n \t@Autowired\n \tEmpiControllerHelper myEmpiControllerHelper;\n \t@Autowired\n-\tIEmpiPersonMergerSvc myEmpiPersonMergerSvc;\n+\tIGoldenResourceMergerSvc myEmpiPersonMergerSvc;\n \t@Autowired\n \tIEmpiLinkQuerySvc myEmpiLinkQuerySvc;\n \t@Autowired\n \tIEmpiLinkUpdaterSvc myIEmpiLinkUpdaterSvc;\n \n \t@Override\n-\tpublic IAnyResource mergePersons(String theFromPersonId, String theToPersonId, EmpiTransactionContext theEmpiTransactionContext) {\n-\t\tIAnyResource fromPerson = myEmpiControllerHelper.getLatestPersonFromIdOrThrowException(ProviderConstants.EMPI_MERGE_PERSONS_FROM_PERSON_ID, theFromPersonId);\n-\t\tIAnyResource toPerson = myEmpiControllerHelper.getLatestPersonFromIdOrThrowException(ProviderConstants.EMPI_MERGE_PERSONS_TO_PERSON_ID, theToPersonId);\n+\tpublic IAnyResource mergeGoldenResources(String theFromPersonId, String theToPersonId, MdmTransactionContext theMdmTransactionContext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM3MDkwOA==", "bodyText": "Remove EMPI / SourceResource", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525370908", "createdAt": "2020-11-17T17:58:05Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiEidUpdateService.java", "diffHunk": "@@ -51,7 +51,7 @@\n \t@Autowired\n \tprivate IEmpiLinkSvc myEmpiLinkSvc;\n \t@Autowired\n-\tprivate EmpiPersonFindingSvc myEmpiPersonFindingSvc;\n+\tprivate EmpiSourceResourceFindingSvc myEmpiSourceResourceFindingSvc;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM3Mzk2Mw==", "bodyText": "Introduce a boolean flag to remove comments, along the lines of \"isOverwritableEidResource\", may be?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525373963", "createdAt": "2020-11-17T18:02:42Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiEidUpdateService.java", "diffHunk": "@@ -61,68 +61,70 @@\n \t@Autowired\n \tprivate IEmpiSettings myEmpiSettings;\n \n-\tvoid handleEmpiUpdate(IAnyResource theResource, MatchedPersonCandidate theMatchedPersonCandidate, EmpiTransactionContext theEmpiTransactionContext) {\n-\n-\t\tEmpiUpdateContext updateContext = new EmpiUpdateContext(theMatchedPersonCandidate, theResource);\n-\n+\tvoid handleEmpiUpdate(IAnyResource theResource, MatchedSourceResourceCandidate theMatchedSourceResourceCandidate, MdmTransactionContext theMdmTransactionContext) {\n+\t\tEmpiUpdateContext updateContext = new EmpiUpdateContext(theMatchedSourceResourceCandidate, theResource);\n \t\tif (updateContext.isRemainsMatchedToSamePerson()) {\n-\t\t\tmyPersonHelper.updatePersonFromUpdatedEmpiTarget(updateContext.getMatchedPerson(), theResource, theEmpiTransactionContext);\n+\t\t\t// Copy over any new external EIDs which don't already exist.\n+\t\t\t// TODO NG - Eventually this call will use terser to clone data in, once the surviorship rules for copying data will be confirmed\n+\t\t\t// myPersonHelper.updatePersonFromUpdatedEmpiTarget(updateContext.getMatchedPerson(), theResource, theEmpiTransactionContext);\n \t\t\tif (!updateContext.isIncomingResourceHasAnEid() || updateContext.isHasEidsInCommon()) {\n \t\t\t\t//update to patient that uses internal EIDs only.\n-\t\t\t\tmyEmpiLinkSvc.updateLink(updateContext.getMatchedPerson(), theResource, theMatchedPersonCandidate.getMatchResult(), EmpiLinkSourceEnum.AUTO, theEmpiTransactionContext);\n+\t\t\t\tmyEmpiLinkSvc.updateLink(updateContext.getMatchedSourceResource(), theResource, theMatchedSourceResourceCandidate.getMatchResult(), EmpiLinkSourceEnum.AUTO, theMdmTransactionContext);\n \t\t\t} else if (!updateContext.isHasEidsInCommon()) {\n-\t\t\t\thandleNoEidsInCommon(theResource, theMatchedPersonCandidate, theEmpiTransactionContext, updateContext);\n+\t\t\t\thandleNoEidsInCommon(theResource, theMatchedSourceResourceCandidate, theMdmTransactionContext, updateContext);\n \t\t\t}\n \t\t} else {\n \t\t\t//This is a new linking scenario. we have to break the existing link and link to the new person. For now, we create duplicate.\n \t\t\t//updated patient has an EID that matches to a new candidate. Link them, and set the persons possible duplicates\n-\t\t\tlinkToNewPersonAndFlagAsDuplicate(theResource, updateContext.getExistingPerson(), updateContext.getMatchedPerson(), theEmpiTransactionContext);\n+\t\t\tlinkToNewPersonAndFlagAsDuplicate(theResource, updateContext.getExistingPerson(), updateContext.getMatchedSourceResource(), theMdmTransactionContext);\n \t\t}\n \t}\n \n-\tprivate void handleNoEidsInCommon(IAnyResource theResource, MatchedPersonCandidate theMatchedPersonCandidate, EmpiTransactionContext theEmpiTransactionContext, EmpiUpdateContext theUpdateContext) {\n+\tprivate void handleNoEidsInCommon(IAnyResource theResource, MatchedSourceResourceCandidate theMatchedSourceResourceCandidate, MdmTransactionContext theMdmTransactionContext, EmpiUpdateContext theUpdateContext) {\n \t\t// the user is simply updating their EID. We propagate this change to the Person.\n \t\t//overwrite. No EIDS in common, but still same person.\n \t\tif (myEmpiSettings.isPreventMultipleEids()) {\n-\t\t\tif (myPersonHelper.getLinkCount(theUpdateContext.getMatchedPerson()) <= 1) { // If there is only 0/1 link on the person, we can safely overwrite the EID.\n-\t\t\t\thandleExternalEidOverwrite(theUpdateContext.getMatchedPerson(), theResource, theEmpiTransactionContext);\n+\t\t\tif (myEmpiLinkDaoSvc.findEmpiMatchLinksBySource(theUpdateContext.getMatchedSourceResource()).size() <= 1) { // If there is only 0/1 link on the person, we can safely overwrite the EID.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM3NDEwOQ==", "bodyText": "Fix SourceResource", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525374109", "createdAt": "2020-11-17T18:02:57Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiEidUpdateService.java", "diffHunk": "@@ -61,68 +61,70 @@\n \t@Autowired\n \tprivate IEmpiSettings myEmpiSettings;\n \n-\tvoid handleEmpiUpdate(IAnyResource theResource, MatchedPersonCandidate theMatchedPersonCandidate, EmpiTransactionContext theEmpiTransactionContext) {\n-\n-\t\tEmpiUpdateContext updateContext = new EmpiUpdateContext(theMatchedPersonCandidate, theResource);\n-\n+\tvoid handleEmpiUpdate(IAnyResource theResource, MatchedSourceResourceCandidate theMatchedSourceResourceCandidate, MdmTransactionContext theMdmTransactionContext) {\n+\t\tEmpiUpdateContext updateContext = new EmpiUpdateContext(theMatchedSourceResourceCandidate, theResource);\n \t\tif (updateContext.isRemainsMatchedToSamePerson()) {\n-\t\t\tmyPersonHelper.updatePersonFromUpdatedEmpiTarget(updateContext.getMatchedPerson(), theResource, theEmpiTransactionContext);\n+\t\t\t// Copy over any new external EIDs which don't already exist.\n+\t\t\t// TODO NG - Eventually this call will use terser to clone data in, once the surviorship rules for copying data will be confirmed\n+\t\t\t// myPersonHelper.updatePersonFromUpdatedEmpiTarget(updateContext.getMatchedPerson(), theResource, theEmpiTransactionContext);\n \t\t\tif (!updateContext.isIncomingResourceHasAnEid() || updateContext.isHasEidsInCommon()) {\n \t\t\t\t//update to patient that uses internal EIDs only.\n-\t\t\t\tmyEmpiLinkSvc.updateLink(updateContext.getMatchedPerson(), theResource, theMatchedPersonCandidate.getMatchResult(), EmpiLinkSourceEnum.AUTO, theEmpiTransactionContext);\n+\t\t\t\tmyEmpiLinkSvc.updateLink(updateContext.getMatchedSourceResource(), theResource, theMatchedSourceResourceCandidate.getMatchResult(), EmpiLinkSourceEnum.AUTO, theMdmTransactionContext);\n \t\t\t} else if (!updateContext.isHasEidsInCommon()) {\n-\t\t\t\thandleNoEidsInCommon(theResource, theMatchedPersonCandidate, theEmpiTransactionContext, updateContext);\n+\t\t\t\thandleNoEidsInCommon(theResource, theMatchedSourceResourceCandidate, theMdmTransactionContext, updateContext);\n \t\t\t}\n \t\t} else {\n \t\t\t//This is a new linking scenario. we have to break the existing link and link to the new person. For now, we create duplicate.\n \t\t\t//updated patient has an EID that matches to a new candidate. Link them, and set the persons possible duplicates\n-\t\t\tlinkToNewPersonAndFlagAsDuplicate(theResource, updateContext.getExistingPerson(), updateContext.getMatchedPerson(), theEmpiTransactionContext);\n+\t\t\tlinkToNewPersonAndFlagAsDuplicate(theResource, updateContext.getExistingPerson(), updateContext.getMatchedSourceResource(), theMdmTransactionContext);\n \t\t}\n \t}\n \n-\tprivate void handleNoEidsInCommon(IAnyResource theResource, MatchedPersonCandidate theMatchedPersonCandidate, EmpiTransactionContext theEmpiTransactionContext, EmpiUpdateContext theUpdateContext) {\n+\tprivate void handleNoEidsInCommon(IAnyResource theResource, MatchedSourceResourceCandidate theMatchedSourceResourceCandidate, MdmTransactionContext theMdmTransactionContext, EmpiUpdateContext theUpdateContext) {\n \t\t// the user is simply updating their EID. We propagate this change to the Person.\n \t\t//overwrite. No EIDS in common, but still same person.\n \t\tif (myEmpiSettings.isPreventMultipleEids()) {\n-\t\t\tif (myPersonHelper.getLinkCount(theUpdateContext.getMatchedPerson()) <= 1) { // If there is only 0/1 link on the person, we can safely overwrite the EID.\n-\t\t\t\thandleExternalEidOverwrite(theUpdateContext.getMatchedPerson(), theResource, theEmpiTransactionContext);\n+\t\t\tif (myEmpiLinkDaoSvc.findEmpiMatchLinksBySource(theUpdateContext.getMatchedSourceResource()).size() <= 1) { // If there is only 0/1 link on the person, we can safely overwrite the EID.\n+\t\t\t// if (myPersonHelper.getLinkCount(theUpdateContext.getMatchedSourceResource()) <= 1) { // If there is only 0/1 link on the person, we can safely overwrite the EID.\n+\t\t\t\thandleExternalEidOverwrite(theUpdateContext.getMatchedSourceResource(), theResource, theMdmTransactionContext);\n \t\t\t} else { // If the person has multiple patients tied to it, we can't just overwrite the EID, so we split the person.\n-\t\t\t\tcreateNewPersonAndFlagAsDuplicate(theResource, theEmpiTransactionContext, theUpdateContext.getExistingPerson());\n+\t\t\t\tcreateNewPersonAndFlagAsDuplicate(theResource, theMdmTransactionContext, theUpdateContext.getExistingPerson());\n \t\t\t}\n \t\t} else {\n-\t\t\tmyPersonHelper.handleExternalEidAddition(theUpdateContext.getMatchedPerson(), theResource, theEmpiTransactionContext);\n+\t\t\tmyPersonHelper.handleExternalEidAddition(theUpdateContext.getMatchedSourceResource(), theResource, theMdmTransactionContext);\n \t\t}\n-\t\tmyEmpiLinkSvc.updateLink(theUpdateContext.getMatchedPerson(), theResource, theMatchedPersonCandidate.getMatchResult(), EmpiLinkSourceEnum.AUTO, theEmpiTransactionContext);\n+\t\tmyEmpiLinkSvc.updateLink(theUpdateContext.getMatchedSourceResource(), theResource, theMatchedSourceResourceCandidate.getMatchResult(), EmpiLinkSourceEnum.AUTO, theMdmTransactionContext);\n \t}\n \n-\tprivate void handleExternalEidOverwrite(IAnyResource thePerson, IAnyResource theResource, EmpiTransactionContext theEmpiTransactionContext) {\n+\tprivate void handleExternalEidOverwrite(IAnyResource thePerson, IAnyResource theResource, MdmTransactionContext theMdmTransactionContext) {\n \t\tList<CanonicalEID> eidFromResource = myEIDHelper.getExternalEid(theResource);\n \t\tif (!eidFromResource.isEmpty()) {\n \t\t\tmyPersonHelper.overwriteExternalEids(thePerson, eidFromResource);\n \t\t}\n \t}\n \n-\tprivate boolean candidateIsSameAsEmpiLinkPerson(EmpiLink theExistingMatchLink, MatchedPersonCandidate thePersonCandidate) {\n-\t\treturn theExistingMatchLink.getPersonPid().equals(thePersonCandidate.getCandidatePersonPid().getIdAsLong());\n+\tprivate boolean candidateIsSameAsEmpiLinkPerson(EmpiLink theExistingMatchLink, MatchedSourceResourceCandidate thePersonCandidate) {\n+\t\treturn theExistingMatchLink.getSourceResourcePid().equals(thePersonCandidate.getCandidatePersonPid().getIdAsLong());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM3NDk3Mg==", "bodyText": "Do we need to update EmpiMatchOutcome into MdmMatchOutcome and fix enum literals?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525374972", "createdAt": "2020-11-17T18:04:26Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiEidUpdateService.java", "diffHunk": "@@ -61,68 +61,70 @@\n \t@Autowired\n \tprivate IEmpiSettings myEmpiSettings;\n \n-\tvoid handleEmpiUpdate(IAnyResource theResource, MatchedPersonCandidate theMatchedPersonCandidate, EmpiTransactionContext theEmpiTransactionContext) {\n-\n-\t\tEmpiUpdateContext updateContext = new EmpiUpdateContext(theMatchedPersonCandidate, theResource);\n-\n+\tvoid handleEmpiUpdate(IAnyResource theResource, MatchedSourceResourceCandidate theMatchedSourceResourceCandidate, MdmTransactionContext theMdmTransactionContext) {\n+\t\tEmpiUpdateContext updateContext = new EmpiUpdateContext(theMatchedSourceResourceCandidate, theResource);\n \t\tif (updateContext.isRemainsMatchedToSamePerson()) {\n-\t\t\tmyPersonHelper.updatePersonFromUpdatedEmpiTarget(updateContext.getMatchedPerson(), theResource, theEmpiTransactionContext);\n+\t\t\t// Copy over any new external EIDs which don't already exist.\n+\t\t\t// TODO NG - Eventually this call will use terser to clone data in, once the surviorship rules for copying data will be confirmed\n+\t\t\t// myPersonHelper.updatePersonFromUpdatedEmpiTarget(updateContext.getMatchedPerson(), theResource, theEmpiTransactionContext);\n \t\t\tif (!updateContext.isIncomingResourceHasAnEid() || updateContext.isHasEidsInCommon()) {\n \t\t\t\t//update to patient that uses internal EIDs only.\n-\t\t\t\tmyEmpiLinkSvc.updateLink(updateContext.getMatchedPerson(), theResource, theMatchedPersonCandidate.getMatchResult(), EmpiLinkSourceEnum.AUTO, theEmpiTransactionContext);\n+\t\t\t\tmyEmpiLinkSvc.updateLink(updateContext.getMatchedSourceResource(), theResource, theMatchedSourceResourceCandidate.getMatchResult(), EmpiLinkSourceEnum.AUTO, theMdmTransactionContext);\n \t\t\t} else if (!updateContext.isHasEidsInCommon()) {\n-\t\t\t\thandleNoEidsInCommon(theResource, theMatchedPersonCandidate, theEmpiTransactionContext, updateContext);\n+\t\t\t\thandleNoEidsInCommon(theResource, theMatchedSourceResourceCandidate, theMdmTransactionContext, updateContext);\n \t\t\t}\n \t\t} else {\n \t\t\t//This is a new linking scenario. we have to break the existing link and link to the new person. For now, we create duplicate.\n \t\t\t//updated patient has an EID that matches to a new candidate. Link them, and set the persons possible duplicates\n-\t\t\tlinkToNewPersonAndFlagAsDuplicate(theResource, updateContext.getExistingPerson(), updateContext.getMatchedPerson(), theEmpiTransactionContext);\n+\t\t\tlinkToNewPersonAndFlagAsDuplicate(theResource, updateContext.getExistingPerson(), updateContext.getMatchedSourceResource(), theMdmTransactionContext);\n \t\t}\n \t}\n \n-\tprivate void handleNoEidsInCommon(IAnyResource theResource, MatchedPersonCandidate theMatchedPersonCandidate, EmpiTransactionContext theEmpiTransactionContext, EmpiUpdateContext theUpdateContext) {\n+\tprivate void handleNoEidsInCommon(IAnyResource theResource, MatchedSourceResourceCandidate theMatchedSourceResourceCandidate, MdmTransactionContext theMdmTransactionContext, EmpiUpdateContext theUpdateContext) {\n \t\t// the user is simply updating their EID. We propagate this change to the Person.\n \t\t//overwrite. No EIDS in common, but still same person.\n \t\tif (myEmpiSettings.isPreventMultipleEids()) {\n-\t\t\tif (myPersonHelper.getLinkCount(theUpdateContext.getMatchedPerson()) <= 1) { // If there is only 0/1 link on the person, we can safely overwrite the EID.\n-\t\t\t\thandleExternalEidOverwrite(theUpdateContext.getMatchedPerson(), theResource, theEmpiTransactionContext);\n+\t\t\tif (myEmpiLinkDaoSvc.findEmpiMatchLinksBySource(theUpdateContext.getMatchedSourceResource()).size() <= 1) { // If there is only 0/1 link on the person, we can safely overwrite the EID.\n+\t\t\t// if (myPersonHelper.getLinkCount(theUpdateContext.getMatchedSourceResource()) <= 1) { // If there is only 0/1 link on the person, we can safely overwrite the EID.\n+\t\t\t\thandleExternalEidOverwrite(theUpdateContext.getMatchedSourceResource(), theResource, theMdmTransactionContext);\n \t\t\t} else { // If the person has multiple patients tied to it, we can't just overwrite the EID, so we split the person.\n-\t\t\t\tcreateNewPersonAndFlagAsDuplicate(theResource, theEmpiTransactionContext, theUpdateContext.getExistingPerson());\n+\t\t\t\tcreateNewPersonAndFlagAsDuplicate(theResource, theMdmTransactionContext, theUpdateContext.getExistingPerson());\n \t\t\t}\n \t\t} else {\n-\t\t\tmyPersonHelper.handleExternalEidAddition(theUpdateContext.getMatchedPerson(), theResource, theEmpiTransactionContext);\n+\t\t\tmyPersonHelper.handleExternalEidAddition(theUpdateContext.getMatchedSourceResource(), theResource, theMdmTransactionContext);\n \t\t}\n-\t\tmyEmpiLinkSvc.updateLink(theUpdateContext.getMatchedPerson(), theResource, theMatchedPersonCandidate.getMatchResult(), EmpiLinkSourceEnum.AUTO, theEmpiTransactionContext);\n+\t\tmyEmpiLinkSvc.updateLink(theUpdateContext.getMatchedSourceResource(), theResource, theMatchedSourceResourceCandidate.getMatchResult(), EmpiLinkSourceEnum.AUTO, theMdmTransactionContext);\n \t}\n \n-\tprivate void handleExternalEidOverwrite(IAnyResource thePerson, IAnyResource theResource, EmpiTransactionContext theEmpiTransactionContext) {\n+\tprivate void handleExternalEidOverwrite(IAnyResource thePerson, IAnyResource theResource, MdmTransactionContext theMdmTransactionContext) {\n \t\tList<CanonicalEID> eidFromResource = myEIDHelper.getExternalEid(theResource);\n \t\tif (!eidFromResource.isEmpty()) {\n \t\t\tmyPersonHelper.overwriteExternalEids(thePerson, eidFromResource);\n \t\t}\n \t}\n \n-\tprivate boolean candidateIsSameAsEmpiLinkPerson(EmpiLink theExistingMatchLink, MatchedPersonCandidate thePersonCandidate) {\n-\t\treturn theExistingMatchLink.getPersonPid().equals(thePersonCandidate.getCandidatePersonPid().getIdAsLong());\n+\tprivate boolean candidateIsSameAsEmpiLinkPerson(EmpiLink theExistingMatchLink, MatchedSourceResourceCandidate thePersonCandidate) {\n+\t\treturn theExistingMatchLink.getSourceResourcePid().equals(thePersonCandidate.getCandidatePersonPid().getIdAsLong());\n \t}\n \n-\tprivate void createNewPersonAndFlagAsDuplicate(IAnyResource theResource, EmpiTransactionContext theEmpiTransactionContext, IAnyResource theOldPerson) {\n-\t\tlog(theEmpiTransactionContext, \"Duplicate detected based on the fact that both resources have different external EIDs.\");\n-\t\tIAnyResource newPerson = myPersonHelper.createPersonFromEmpiTarget(theResource);\n-\t\tmyEmpiLinkSvc.updateLink(newPerson, theResource, EmpiMatchOutcome.NEW_PERSON_MATCH, EmpiLinkSourceEnum.AUTO, theEmpiTransactionContext);\n-\t\tmyEmpiLinkSvc.updateLink(newPerson, theOldPerson, EmpiMatchOutcome.POSSIBLE_DUPLICATE, EmpiLinkSourceEnum.AUTO, theEmpiTransactionContext);\n+\tprivate void createNewPersonAndFlagAsDuplicate(IAnyResource theResource, MdmTransactionContext theMdmTransactionContext, IAnyResource theOldPerson) {\n+\t\tlog(theMdmTransactionContext, \"Duplicate detected based on the fact that both resources have different external EIDs.\");\n+\t\tIAnyResource newPerson = myPersonHelper.createGoldenResourceFromMdmTarget(theResource);\n+\n+\t\tmyEmpiLinkSvc.updateLink(newPerson, theResource, EmpiMatchOutcome.NEW_PERSON_MATCH, EmpiLinkSourceEnum.AUTO, theMdmTransactionContext);\n+\t\tmyEmpiLinkSvc.updateLink(newPerson, theOldPerson, EmpiMatchOutcome.POSSIBLE_DUPLICATE, EmpiLinkSourceEnum.AUTO, theMdmTransactionContext);\n \t}\n \n-\tprivate void linkToNewPersonAndFlagAsDuplicate(IAnyResource theResource, IAnyResource theOldPerson, IAnyResource theNewPerson, EmpiTransactionContext theEmpiTransactionContext) {\n-\t\tlog(theEmpiTransactionContext, \"Changing a match link!\");\n-\t\tmyEmpiLinkSvc.deleteLink(theOldPerson, theResource, theEmpiTransactionContext);\n-\t\tmyEmpiLinkSvc.updateLink(theNewPerson, theResource, EmpiMatchOutcome.NEW_PERSON_MATCH, EmpiLinkSourceEnum.AUTO, theEmpiTransactionContext);\n-\t\tlog(theEmpiTransactionContext, \"Duplicate detected based on the fact that both resources have different external EIDs.\");\n-\t\tmyEmpiLinkSvc.updateLink(theNewPerson, theOldPerson, EmpiMatchOutcome.POSSIBLE_DUPLICATE, EmpiLinkSourceEnum.AUTO, theEmpiTransactionContext);\n+\tprivate void linkToNewPersonAndFlagAsDuplicate(IAnyResource theResource, IAnyResource theOldPerson, IAnyResource theNewPerson, MdmTransactionContext theMdmTransactionContext) {\n+\t\tlog(theMdmTransactionContext, \"Changing a match link!\");\n+\t\tmyEmpiLinkSvc.deleteLink(theOldPerson, theResource, theMdmTransactionContext);\n+\t\tmyEmpiLinkSvc.updateLink(theNewPerson, theResource, EmpiMatchOutcome.NEW_PERSON_MATCH, EmpiLinkSourceEnum.AUTO, theMdmTransactionContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM3NjE2OQ==", "bodyText": "Remove obsolete code", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525376169", "createdAt": "2020-11-17T18:06:04Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiLinkSvcImpl.java", "diffHunk": "@@ -102,33 +101,36 @@ private boolean personsLinkedAsNoMatch(IAnyResource thePerson, IAnyResource theT\n \t\t\tmyEmpiLinkDaoSvc.getEmpiLinksByPersonPidTargetPidAndMatchResult(targetId, personId, EmpiMatchResultEnum.NO_MATCH).isPresent();\n \t}\n \n-\t@Override\n-\t@Transactional\n-\tpublic void syncEmpiLinksToPersonLinks(IAnyResource thePersonResource, EmpiTransactionContext theEmpiTransactionContext) {\n-\t\tint origLinkCount = myPersonHelper.getLinkCount(thePersonResource);\n-\n-\t\tList<EmpiLink> empiLinks = myEmpiLinkDaoSvc.findEmpiLinksByPerson(thePersonResource);\n-\n-\t\tList<IBaseBackboneElement> newLinks = empiLinks.stream()\n-\t\t\t.filter(link -> link.isMatch() || link.isPossibleMatch() || link.isRedirect())\n-\t\t\t.map(this::personLinkFromEmpiLink)\n-\t\t\t.collect(Collectors.toList());\n-\t\tmyPersonHelper.setLinks(thePersonResource, newLinks);\n-\t\tif (newLinks.size() > origLinkCount) {\n-\t\t\tlog(theEmpiTransactionContext, thePersonResource.getIdElement().toVersionless() + \" links increased from \" + origLinkCount + \" to \" + newLinks.size());\n-\t\t} else if (newLinks.size() < origLinkCount) {\n-\t\t\tlog(theEmpiTransactionContext, thePersonResource.getIdElement().toVersionless() + \" links decreased from \" + origLinkCount + \" to \" + newLinks.size());\n-\t\t}\n-\n-\t}\n+//\t@Override\n+//\t@Transactional\n+//\tpublic void syncEmpiLinksToPersonLinks(IAnyResource thePersonResource, EmpiTransactionContext theEmpiTransactionContext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM3NjMxNA==", "bodyText": "handle S/R", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525376314", "createdAt": "2020-11-17T18:06:19Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiLinkSvcImpl.java", "diffHunk": "@@ -102,33 +101,36 @@ private boolean personsLinkedAsNoMatch(IAnyResource thePerson, IAnyResource theT\n \t\t\tmyEmpiLinkDaoSvc.getEmpiLinksByPersonPidTargetPidAndMatchResult(targetId, personId, EmpiMatchResultEnum.NO_MATCH).isPresent();\n \t}\n \n-\t@Override\n-\t@Transactional\n-\tpublic void syncEmpiLinksToPersonLinks(IAnyResource thePersonResource, EmpiTransactionContext theEmpiTransactionContext) {\n-\t\tint origLinkCount = myPersonHelper.getLinkCount(thePersonResource);\n-\n-\t\tList<EmpiLink> empiLinks = myEmpiLinkDaoSvc.findEmpiLinksByPerson(thePersonResource);\n-\n-\t\tList<IBaseBackboneElement> newLinks = empiLinks.stream()\n-\t\t\t.filter(link -> link.isMatch() || link.isPossibleMatch() || link.isRedirect())\n-\t\t\t.map(this::personLinkFromEmpiLink)\n-\t\t\t.collect(Collectors.toList());\n-\t\tmyPersonHelper.setLinks(thePersonResource, newLinks);\n-\t\tif (newLinks.size() > origLinkCount) {\n-\t\t\tlog(theEmpiTransactionContext, thePersonResource.getIdElement().toVersionless() + \" links increased from \" + origLinkCount + \" to \" + newLinks.size());\n-\t\t} else if (newLinks.size() < origLinkCount) {\n-\t\t\tlog(theEmpiTransactionContext, thePersonResource.getIdElement().toVersionless() + \" links decreased from \" + origLinkCount + \" to \" + newLinks.size());\n-\t\t}\n-\n-\t}\n+//\t@Override\n+//\t@Transactional\n+//\tpublic void syncEmpiLinksToPersonLinks(IAnyResource thePersonResource, EmpiTransactionContext theEmpiTransactionContext) {\n+//\t\t// int origLinkCount = myPersonHelper.getLinkCount(thePersonResource);\n+//\t\tint origLinkCount = myEmpiLinkDaoSvc.findEmpiMatchLinksBySource(thePersonResource).size();\n+//\n+//\t\tList<EmpiLink> empiLinks = myEmpiLinkDaoSvc.findEmpiLinksBySourceResource(thePersonResource);\n+//\n+//\t\tList<IBaseBackboneElement> newLinks = empiLinks.stream()\n+//\t\t\t.filter(link -> link.isMatch() || link.isPossibleMatch() || link.isRedirect())\n+//\t\t\t.map(this::personLinkFromEmpiLink)\n+//\t\t\t.collect(Collectors.toList());\n+//\t\tmyPersonHelper.setLinks(thePersonResource, newLinks);\n+//\t\tif (newLinks.size() > origLinkCount) {\n+//\t\t\tlog(theEmpiTransactionContext, thePersonResource.getIdElement().toVersionless() + \" links increased from \" + origLinkCount + \" to \" + newLinks.size());\n+//\t\t} else if (newLinks.size() < origLinkCount) {\n+//\t\t\tlog(theEmpiTransactionContext, thePersonResource.getIdElement().toVersionless() + \" links decreased from \" + origLinkCount + \" to \" + newLinks.size());\n+//\t\t}\n+//\n+//\t}\n \n \t@Override\n-\tpublic void deleteLink(IAnyResource theExistingPerson, IAnyResource theResource, EmpiTransactionContext theEmpiTransactionContext) {\n-\t\tmyPersonHelper.removeLink(theExistingPerson, theResource.getIdElement(), theEmpiTransactionContext);\n-\t\tOptional<EmpiLink> oEmpiLink = getEmpiLinkForPersonTargetPair(theExistingPerson, theResource);\n+\tpublic void deleteLink(IAnyResource theSourceResource, IAnyResource theTargetResource, MdmTransactionContext theMdmTransactionContext) {\n+\t\t// myPersonHelper.removeLink(theExistingPerson, theResource.getIdElement(), theEmpiTransactionContext);\n+//\t\t myEmpiLinkDaoSvc.deleteEmpiLinks(theSourceResource, theTargetResource);\n+\n+\t\tOptional<EmpiLink> oEmpiLink = getEmpiLinkForPersonTargetPair(theSourceResource, theTargetResource);\n \t\tif (oEmpiLink.isPresent()) {\n \t\t\tEmpiLink empiLink = oEmpiLink.get();\n-\t\t\tlog(theEmpiTransactionContext, \"Deleting EmpiLink [\" + theExistingPerson.getIdElement().toVersionless() + \" -> \" + theResource.getIdElement().toVersionless() + \"] with result: \" + empiLink.getMatchResult());\n+\t\t\tlog(theMdmTransactionContext, \"Deleting EmpiLink [\" + theSourceResource.getIdElement().toVersionless() + \" -> \" + theTargetResource.getIdElement().toVersionless() + \"] with result: \" + empiLink.getMatchResult());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM3NzQxMg==", "bodyText": "rename EMPI previx", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525377412", "createdAt": "2020-11-17T18:08:01Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiMatchLinkSvc.java", "diffHunk": "@@ -63,48 +63,49 @@\n \t * Does nothing if resource is determined to be not managed by EMPI.\n \t *\n \t * @param theResource the incoming EMPI target, which is either a Patient or Practitioner.\n-\t * @param theEmpiTransactionContext\n+\t * @param theMdmTransactionContext\n \t * @return an {@link TransactionLogMessages} which contains all informational messages related to EMPI processing of this resource.\n \t */\n-\tpublic EmpiTransactionContext updateEmpiLinksForEmpiTarget(IAnyResource theResource, EmpiTransactionContext theEmpiTransactionContext) {\n+\tpublic MdmTransactionContext updateEmpiLinksForEmpiTarget(IAnyResource theResource, MdmTransactionContext theMdmTransactionContext) {\n \t\tif (EmpiUtil.isEmpiAccessible(theResource)) {\n-\t\t\treturn doEmpiUpdate(theResource, theEmpiTransactionContext);\n+\t\t\treturn doEmpiUpdate(theResource, theMdmTransactionContext);\n \t\t} else {\n \t\t\treturn null;\n \t\t}\n \t}\n \n-\tprivate EmpiTransactionContext doEmpiUpdate(IAnyResource theResource, EmpiTransactionContext theEmpiTransactionContext) {\n-\t\tCandidateList candidateList = myEmpiPersonFindingSvc.findPersonCandidates(theResource);\n+\tprivate MdmTransactionContext doEmpiUpdate(IAnyResource theResource, MdmTransactionContext theMdmTransactionContext) {\n+\t\tCandidateList candidateList = myEmpiSourceResourceFindingSvc.findSourceResourceCandidates(theResource);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM3NzgyMA==", "bodyText": "Remove import", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525377820", "createdAt": "2020-11-17T18:08:42Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiResourceDaoSvc.java", "diffHunk": "@@ -22,96 +22,89 @@\n \n import ca.uhn.fhir.empi.api.EmpiConstants;\n import ca.uhn.fhir.empi.api.IEmpiSettings;\n-import ca.uhn.fhir.empi.util.EmpiUtil;\n import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n import ca.uhn.fhir.jpa.api.model.DaoMethodOutcome;\n+import ca.uhn.fhir.jpa.model.entity.TagTypeEnum;\n import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n import ca.uhn.fhir.rest.api.server.IBundleProvider;\n import ca.uhn.fhir.rest.api.server.storage.ResourcePersistentId;\n import ca.uhn.fhir.rest.param.TokenParam;\n import ca.uhn.fhir.rest.server.exceptions.InternalErrorException;\n import org.hl7.fhir.instance.model.api.IAnyResource;\n import org.hl7.fhir.instance.model.api.IBaseResource;\n-import org.hl7.fhir.instance.model.api.IIdType;\n+import org.jetbrains.annotations.NotNull;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM3Nzk1Mg==", "bodyText": "Fix S/R", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525377952", "createdAt": "2020-11-17T18:08:58Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiResourceDaoSvc.java", "diffHunk": "@@ -22,96 +22,89 @@\n \n import ca.uhn.fhir.empi.api.EmpiConstants;\n import ca.uhn.fhir.empi.api.IEmpiSettings;\n-import ca.uhn.fhir.empi.util.EmpiUtil;\n import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n import ca.uhn.fhir.jpa.api.model.DaoMethodOutcome;\n+import ca.uhn.fhir.jpa.model.entity.TagTypeEnum;\n import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n import ca.uhn.fhir.rest.api.server.IBundleProvider;\n import ca.uhn.fhir.rest.api.server.storage.ResourcePersistentId;\n import ca.uhn.fhir.rest.param.TokenParam;\n import ca.uhn.fhir.rest.server.exceptions.InternalErrorException;\n import org.hl7.fhir.instance.model.api.IAnyResource;\n import org.hl7.fhir.instance.model.api.IBaseResource;\n-import org.hl7.fhir.instance.model.api.IIdType;\n+import org.jetbrains.annotations.NotNull;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n-import javax.annotation.PostConstruct;\n import java.util.List;\n import java.util.Optional;\n-import java.util.stream.Collectors;\n \n @Service\n public class EmpiResourceDaoSvc {\n+\n \tprivate static final int MAX_MATCHING_PERSONS = 1000;\n+\n \t@Autowired\n \tDaoRegistry myDaoRegistry;\n \t@Autowired\n \tIEmpiSettings myEmpiConfig;\n \n-\tprivate IFhirResourceDao<IBaseResource> myPatientDao;\n-\tprivate IFhirResourceDao<IBaseResource> myPersonDao;\n-\tprivate IFhirResourceDao<IBaseResource> myPractitionerDao;\n-\n-\t@PostConstruct\n-\tpublic void postConstruct() {\n-\t\tmyPatientDao = myDaoRegistry.getResourceDao(\"Patient\");\n-\t\tmyPersonDao = myDaoRegistry.getResourceDao(\"Person\");\n-\t\tmyPractitionerDao = myDaoRegistry.getResourceDao(\"Practitioner\");\n-\t}\n-\n-\tpublic IAnyResource readPatient(IIdType theId) {\n-\t\treturn (IAnyResource) myPatientDao.read(theId);\n-\t}\n-\n-\tpublic IAnyResource readPerson(IIdType theId) {\n-\t\treturn (IAnyResource) myPersonDao.read(theId);\n-\t}\n-\n-\tpublic IAnyResource readPractitioner(IIdType theId) {\n-\t\treturn (IAnyResource) myPractitionerDao.read(theId);\n-\t}\n-\n-\tpublic DaoMethodOutcome updatePerson(IAnyResource thePerson) {\n-\t\tif (thePerson.getIdElement().hasIdPart()) {\n-\t\t\treturn myPersonDao.update(thePerson);\n+\tpublic DaoMethodOutcome upsertSourceResource(IAnyResource theSourceResource, String theResourceType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4MDUzMQ==", "bodyText": "removeTargetLinks can be removed altogether?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525380531", "createdAt": "2020-11-17T18:12:52Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/GoldenResourceMergerSvcImpl.java", "diffHunk": "@@ -0,0 +1,181 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR JPA Server - Enterprise Master Patient Index\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.empi.api.EmpiLinkSourceEnum;\n+import ca.uhn.fhir.empi.api.EmpiMatchResultEnum;\n+import ca.uhn.fhir.empi.api.IEmpiLinkSvc;\n+import ca.uhn.fhir.empi.api.IGoldenResourceMergerSvc;\n+import ca.uhn.fhir.empi.log.Logs;\n+import ca.uhn.fhir.empi.model.MdmTransactionContext;\n+import ca.uhn.fhir.empi.util.PersonHelper;\n+import ca.uhn.fhir.jpa.dao.index.IdHelperService;\n+import ca.uhn.fhir.jpa.empi.dao.EmpiLinkDaoSvc;\n+import ca.uhn.fhir.jpa.entity.EmpiLink;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import org.hl7.fhir.instance.model.api.IAnyResource;\n+import org.slf4j.Logger;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+@Service\n+public class GoldenResourceMergerSvcImpl implements IGoldenResourceMergerSvc {\n+\tprivate static final Logger ourLog = Logs.getEmpiTroubleshootingLog();\n+\n+\t@Autowired\n+\tPersonHelper myPersonHelper;\n+\t@Autowired\n+\tEmpiLinkDaoSvc myEmpiLinkDaoSvc;\n+\t@Autowired\n+\tIEmpiLinkSvc myEmpiLinkSvc;\n+\t@Autowired\n+\tIdHelperService myIdHelperService;\n+\t@Autowired\n+\tEmpiResourceDaoSvc myEmpiResourceDaoSvc;\n+\n+\t@Override\n+\t@Transactional\n+\tpublic IAnyResource mergeGoldenResources(IAnyResource theFromGoldenResource, IAnyResource theToGoldenResource, MdmTransactionContext theMdmTransactionContext) {\n+\t\tLong fromGoldenResourcePid = myIdHelperService.getPidOrThrowException(theFromGoldenResource);\n+\t\tLong toGoldenResourcePid = myIdHelperService.getPidOrThrowException(theToGoldenResource);\n+\t\tString resourceType = theMdmTransactionContext.getResourceType();\n+\n+\t\t//Merge attributes, to be determined when survivorship is solved.\n+\t\tmyPersonHelper.mergeFields(theFromGoldenResource, theToGoldenResource);\n+\n+\t\t//Merge the links from the FROM to the TO resource. Clean up dangling links.\n+\t\tmergeGoldenResourceLinks(theFromGoldenResource, theToGoldenResource, toGoldenResourcePid, theMdmTransactionContext);\n+\n+\t\t//Create the new REDIRECT link\n+\t\taddMergeLink(toGoldenResourcePid, fromGoldenResourcePid, resourceType);\n+\n+\t\t//Strip the golden resource tag from the now-deprecated resource.\n+\t\tmyEmpiResourceDaoSvc.removeGoldenResourceTag(theFromGoldenResource, resourceType);\n+\n+\t\t//Add the REDIRECT tag to that same deprecated resource.\n+\t\tmyPersonHelper.deactivateResource(theFromGoldenResource);\n+\n+\t\t//Save the deprecated resource.\n+\t\tmyEmpiResourceDaoSvc.upsertSourceResource(theFromGoldenResource, resourceType);\n+\n+\t\tlog(theMdmTransactionContext, \"Merged \" + theFromGoldenResource.getIdElement().toVersionless() + \" into \" + theToGoldenResource.getIdElement().toVersionless());\n+\t\treturn theToGoldenResource;\n+\t}\n+\n+\t/**\n+\t * Removes non-manual links from source to target\n+\t *\n+\t * @param theFrom                   Target of the link\n+\t * @param theTo                     Source resource of the link\n+\t * @param theMdmTransactionContext Context to keep track of the deletions\n+\t */\n+\tprivate void removeTargetLinks(IAnyResource theFrom, IAnyResource theTo, MdmTransactionContext theMdmTransactionContext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4MDkzMQ==", "bodyText": "address S/R", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525380931", "createdAt": "2020-11-17T18:13:35Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/candidate/BaseCandidateFinder.java", "diffHunk": "@@ -35,11 +35,11 @@\n \n \tCandidateList findCandidates(IAnyResource theTarget) {\n \t\tCandidateList candidateList = new CandidateList(getStrategy());\n-\t\tcandidateList.addAll(findMatchPersonCandidates(theTarget));\n+\t\tcandidateList.addAll(findMatchSourceResourceCandidates(theTarget));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4MTEwMg==", "bodyText": "Rename to MdmGoldenResourceFindingSvc", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525381102", "createdAt": "2020-11-17T18:13:53Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/candidate/EmpiSourceResourceFindingSvc.java", "diffHunk": "@@ -30,7 +30,7 @@\n import org.springframework.stereotype.Service;\n \n @Service\n-public class EmpiPersonFindingSvc {\n+public class EmpiSourceResourceFindingSvc {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4MTg0OA==", "bodyText": "Rename to MatchedGoldenResourceCandidate", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525381848", "createdAt": "2020-11-17T18:15:01Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/candidate/MatchedSourceResourceCandidate.java", "diffHunk": "@@ -24,22 +24,23 @@\n import ca.uhn.fhir.jpa.entity.EmpiLink;\n import ca.uhn.fhir.rest.api.server.storage.ResourcePersistentId;\n \n-public class MatchedPersonCandidate {\n-\tprivate final ResourcePersistentId myCandidatePersonPid;\n+public class MatchedSourceResourceCandidate {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4MjE0OA==", "bodyText": "Fix person / empi", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525382148", "createdAt": "2020-11-17T18:15:26Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/candidate/MatchedSourceResourceCandidate.java", "diffHunk": "@@ -24,22 +24,23 @@\n import ca.uhn.fhir.jpa.entity.EmpiLink;\n import ca.uhn.fhir.rest.api.server.storage.ResourcePersistentId;\n \n-public class MatchedPersonCandidate {\n-\tprivate final ResourcePersistentId myCandidatePersonPid;\n+public class MatchedSourceResourceCandidate {\n+\n+\tprivate final ResourcePersistentId myCandidateSourceResourcePid;\n \tprivate final EmpiMatchOutcome myEmpiMatchOutcome;\n \n-\tpublic MatchedPersonCandidate(ResourcePersistentId theCandidate, EmpiMatchOutcome theEmpiMatchOutcome) {\n-\t\tmyCandidatePersonPid = theCandidate;\n+\tpublic MatchedSourceResourceCandidate(ResourcePersistentId theCandidate, EmpiMatchOutcome theEmpiMatchOutcome) {\n+\t\tmyCandidateSourceResourcePid = theCandidate;\n \t\tmyEmpiMatchOutcome = theEmpiMatchOutcome;\n \t}\n \n-\tpublic MatchedPersonCandidate(ResourcePersistentId thePersonPid, EmpiLink theEmpiLink) {\n-\t\tmyCandidatePersonPid = thePersonPid;\n+\tpublic MatchedSourceResourceCandidate(ResourcePersistentId thePersonPid, EmpiLink theEmpiLink) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4MjcwNw==", "bodyText": "fix S/R", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525382707", "createdAt": "2020-11-17T18:16:13Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/BaseEmpiR4Test.java", "diffHunk": "@@ -269,71 +316,91 @@ protected void assertLinkCount(long theExpectedCount) {\n \t\tassertEquals(theExpectedCount, myEmpiLinkDao.count());\n \t}\n \n-\tprotected Person getPersonFromTarget(IAnyResource theBaseResource) {\n+\tprotected IAnyResource getGoldenResourceFromTargetResource(IAnyResource theBaseResource) {\n+\t\tString resourceType = theBaseResource.getIdElement().getResourceType();\n+\t\tIFhirResourceDao relevantDao = myDaoRegistry.getResourceDao(resourceType);\n+\n \t\tOptional<EmpiLink> matchedLinkForTargetPid = myEmpiLinkDaoSvc.getMatchedLinkForTargetPid(myIdHelperService.getPidOrNull(theBaseResource));\n \t\tif (matchedLinkForTargetPid.isPresent()) {\n-\t\t\tLong personPid = matchedLinkForTargetPid.get().getPersonPid();\n-\t\t\treturn (Person) myPersonDao.readByPid(new ResourcePersistentId(personPid));\n+\t\t\tLong sourceResourcePid = matchedLinkForTargetPid.get().getSourceResourcePid();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 234}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4NjIzMg==", "bodyText": "Rename S/R -> Golden?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525386232", "createdAt": "2020-11-17T18:21:28Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/matcher/BaseSourceResourceMatcher.java", "diffHunk": "@@ -16,40 +18,41 @@\n import java.util.List;\n import java.util.stream.Collectors;\n \n-public abstract class BasePersonMatcher extends TypeSafeMatcher<IAnyResource> {\n-\tprivate static final Logger ourLog = LoggerFactory.getLogger(BasePersonMatcher.class);\n+public abstract class BaseSourceResourceMatcher extends TypeSafeMatcher<IAnyResource> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4NjQ5MQ==", "bodyText": "S/R to Golden?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525386491", "createdAt": "2020-11-17T18:21:52Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/matcher/IsLinkedTo.java", "diffHunk": "@@ -14,7 +14,7 @@\n  * is linked to a set of patients/practitioners via a person.\n  *\n  */\n-public class IsLinkedTo extends BasePersonMatcher {\n+public class IsLinkedTo extends BaseSourceResourceMatcher {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4Njc0Mw==", "bodyText": "S/R to Golden?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525386743", "createdAt": "2020-11-17T18:22:14Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/matcher/IsSameSourceResourceAs.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package ca.uhn.fhir.jpa.empi.matcher;\n+\n+import ca.uhn.fhir.jpa.dao.index.IdHelperService;\n+import ca.uhn.fhir.jpa.empi.dao.EmpiLinkDaoSvc;\n+import org.hamcrest.Description;\n+import org.hamcrest.Matcher;\n+import org.hl7.fhir.instance.model.api.IAnyResource;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+public class IsSameSourceResourceAs extends BaseSourceResourceMatcher {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4NzE1OQ==", "bodyText": "S/R to Golden?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525387159", "createdAt": "2020-11-17T18:22:53Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/provider/EmpiProviderClearLinkR4Test.java", "diffHunk": "@@ -29,16 +32,16 @@\n public class EmpiProviderClearLinkR4Test extends BaseLinkR4Test {\n \tprotected Practitioner myPractitioner;\n \tprotected StringType myPractitionerId;\n-\tprotected Person myPractitionerPerson;\n-\tprotected StringType myPractitionerPersonId;\n+\tprotected IAnyResource myPractitionerSourceResource;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4NzQ5Nw==", "bodyText": "can be removed", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525387497", "createdAt": "2020-11-17T18:23:27Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/provider/EmpiProviderClearLinkR4Test.java", "diffHunk": "@@ -124,29 +135,31 @@ public void testPersonsWithCircularReferenceCanBeCleared() {\n \n \t\t//SUT\n \t\tParameters parameters = myEmpiProviderR4.clearEmpiLinks(null, myRequestDetails);\n+\n+\t\tprintLinks();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4NzgxMw==", "bodyText": "clean up comments", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525387813", "createdAt": "2020-11-17T18:23:59Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/provider/EmpiProviderMergePersonsR4Test.java", "diffHunk": "@@ -3,132 +3,164 @@\n import ca.uhn.fhir.empi.api.EmpiLinkSourceEnum;\n import ca.uhn.fhir.empi.api.EmpiMatchResultEnum;\n import ca.uhn.fhir.empi.util.AssuranceLevelUtil;\n+import ca.uhn.fhir.empi.util.EmpiUtil;\n+import ca.uhn.fhir.jpa.entity.EmpiLink;\n import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n-import org.hl7.fhir.r4.model.Person;\n+import org.hl7.fhir.instance.model.api.IAnyResource;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.r4.model.Identifier;\n+import org.hl7.fhir.r4.model.Patient;\n import org.hl7.fhir.r4.model.StringType;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n import java.util.List;\n+import java.util.Optional;\n \n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.endsWith;\n-import static org.hamcrest.Matchers.hasSize;\n-import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.*;\n+import static org.junit.Assert.assertTrue;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.fail;\n \n public class EmpiProviderMergePersonsR4Test extends BaseProviderR4Test {\n \n-\tprivate Person myFromPerson;\n-\tprivate StringType myFromPersonId;\n-\tprivate Person myToPerson;\n-\tprivate StringType myToPersonId;\n+\tprivate Patient myFromSourcePatient;\n+\tprivate StringType myFromSourcePatientId;\n+\tprivate Patient myToSourcePatient;\n+\tprivate StringType myToSourcePatientId;\n \n \t@Override\n \t@BeforeEach\n \tpublic void before() {\n \t\tsuper.before();\n \t\tsuper.loadEmpiSearchParameters();\n \n-\t\tmyFromPerson = createPerson();\n-\t\tmyFromPersonId = new StringType(myFromPerson.getIdElement().getValue());\n-\t\tmyToPerson = createPerson();\n-\t\tmyToPersonId = new StringType(myToPerson.getIdElement().getValue());\n+\t\tmyFromSourcePatient = createGoldenPatient();\n+\t\tmyFromSourcePatientId = new StringType(myFromSourcePatient.getIdElement().getValue());\n+\t\tmyToSourcePatient = createGoldenPatient();\n+\t\tmyToSourcePatientId = new StringType(myToSourcePatient.getIdElement().getValue());\n \t}\n \n \t@Test\n \tpublic void testMerge() {\n-\t\tPerson mergedPerson = myEmpiProviderR4.mergePersons(myFromPersonId, myToPersonId, myRequestDetails);\n-\t\tassertEquals(myToPerson.getIdElement(), mergedPerson.getIdElement());\n-\t\tassertThat(mergedPerson, is(samePersonAs(myToPerson)));\n-\t\tassertEquals(2, getAllPersons().size());\n-\t\tassertEquals(1, getAllActivePersons().size());\n-\n-\t\tPerson fromPerson = myPersonDao.read(myFromPerson.getIdElement().toUnqualifiedVersionless());\n-\t\tassertThat(fromPerson.getActive(), is(false));\n-\t\tList<Person.PersonLinkComponent> links = fromPerson.getLink();\n+\t\tPatient mergedSourcePatient = (Patient) myEmpiProviderR4.mergeGoldenResources(myFromSourcePatientId,\n+\t\t\tmyToSourcePatientId, myRequestDetails);\n+\n+\t\tassertTrue(EmpiUtil.isGoldenRecord(myFromSourcePatient));\n+\t\tassertEquals(myToSourcePatient.getIdElement(), mergedSourcePatient.getIdElement());\n+\t\tassertThat(mergedSourcePatient, is(sameSourceResourceAs(myToSourcePatient)));\n+\t\tassertEquals(1, getAllRedirectedGoldenPatients().size());\n+\t\tassertEquals(1, getAllGoldenPatients().size());\n+\n+\t\tPatient fromSourcePatient = myPatientDao.read(myFromSourcePatient.getIdElement().toUnqualifiedVersionless());\n+\t\tassertThat(fromSourcePatient.getActive(), is(false));\n+\t\tassertTrue(EmpiUtil.isGoldenRecordRedirected(fromSourcePatient));\n+\n+\t\t//TODO GGG eventually this will need to check a redirect... this is a hack which doesnt work\n+\t\t// Optional<Identifier> redirect = fromSourcePatient.getIdentifier().stream().filter(theIdentifier -> theIdentifier.getSystem().equals(\"REDIRECT\")).findFirst();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4ODU2NQ==", "bodyText": "rename S/R to Golden", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525388565", "createdAt": "2020-11-17T18:25:07Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/provider/EmpiProviderUpdateLinkR4Test.java", "diffHunk": "@@ -49,91 +50,114 @@ public void testUpdateLinkMatch() {\n \n \t@Test\n \tpublic void testUpdateLinkTwiceFailsDueToWrongVersion() {\n-\t\tmyEmpiProviderR4.updateLink(myPersonId, myPatientId, MATCH_RESULT, myRequestDetails);\n+\t\tmyEmpiProviderR4.updateLink(mySourcePatientId, myPatientId, MATCH_RESULT, myRequestDetails);\n+\n+\t\tmateriallyChangeGoldenPatient();\n+\n \t\ttry {\n-\t\t\tmyEmpiProviderR4.updateLink(myPersonId, myPatientId, NO_MATCH_RESULT, myRequestDetails);\n+\t\t\tmyEmpiProviderR4.updateLink(mySourcePatientId, myPatientId, NO_MATCH_RESULT, myRequestDetails);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM5MDUyMw==", "bodyText": "clean up comments", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525390523", "createdAt": "2020-11-17T18:27:53Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/svc/EmpiLinkSvcTest.java", "diffHunk": "@@ -47,76 +53,78 @@ public void compareEmptyPatients() {\n \t@Test\n \tpublic void testCreateRemoveLink() {\n \t\tassertLinkCount(0);\n-\t\tPerson person = createPerson();\n-\t\tIdType personId = person.getIdElement().toUnqualifiedVersionless();\n-\t\tassertEquals(0, person.getLink().size());\n+\t\tPatient goldenPatient = createGoldenPatient();\n+\t\tIdType sourcePatientId = goldenPatient.getIdElement().toUnqualifiedVersionless();\n+\t\t// TODO NG should be ok to remove - assertEquals(0, goldenPatient.getLink().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM5MjE2Mg==", "bodyText": "S/R to Golden", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525392162", "createdAt": "2020-11-17T18:30:32Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/svc/EmpiMatchLinkSvcTest.java", "diffHunk": "@@ -87,54 +110,54 @@ public void testAddPatientLinksToExistingPersonIfMatch() {\n \t\tPatient patient2 = createPatientAndUpdateLinks(buildJanePatient());\n \t\tassertLinkCount(2);\n \n-\t\tassertThat(patient1, is(samePersonAs(patient2)));\n+\t\tassertThat(patient1, is(sameSourceResourceAs(patient2)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQyMjY1Ng==", "bodyText": "Do we need to adjust those to use MDM terminology?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525422656", "createdAt": "2020-11-17T19:16:23Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/api/EmpiConstants.java", "diffHunk": "@@ -25,13 +25,20 @@\n \t * TAG system for Person resources which are managed by HAPI EMPI.\n \t */\n \n-\tpublic static final String SYSTEM_EMPI_MANAGED = \"https://hapifhir.org/NamingSystem/managing-empi-system\";\n-\tpublic static final String CODE_HAPI_EMPI_MANAGED = \"HAPI-EMPI\";\n+\tpublic static final String SYSTEM_MDM_MANAGED = \"https://hapifhir.org/NamingSystem/managing-mdm-system\";\n+\tpublic static final String CODE_HAPI_MDM_MANAGED = \"HAPI-MDM\";\n \tpublic static final String DISPLAY_HAPI_EMPI_MANAGED = \"This Person can only be modified by Smile CDR's EMPI system.\";\n \tpublic static final String CODE_NO_EMPI_MANAGED = \"NO-EMPI\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQyMzM3MA==", "bodyText": "Reaming to MDM?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525423370", "createdAt": "2020-11-17T19:17:34Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/api/IEmpiSettings.java", "diffHunk": "@@ -22,6 +22,8 @@\n \n import ca.uhn.fhir.empi.rules.json.EmpiRulesJson;\n \n+import java.util.stream.Collectors;\n+\n public interface IEmpiSettings {\n \tString EMPI_CHANNEL_NAME = \"empi\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQyNDIwMg==", "bodyText": "Move to MessageHelper and change to use proper terminology", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525424202", "createdAt": "2020-11-17T19:19:10Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/provider/BaseEmpiProvider.java", "diffHunk": "@@ -43,43 +43,48 @@ public BaseEmpiProvider(FhirContext theFhirContext) {\n \t\tmyFhirContext = theFhirContext;\n \t}\n \n-\tprotected void validateMergeParameters(IPrimitiveType<String> theFromPersonId, IPrimitiveType<String> theToPersonId) {\n-\t\tvalidateNotNull(ProviderConstants.EMPI_MERGE_PERSONS_FROM_PERSON_ID, theFromPersonId);\n-\t\tvalidateNotNull(ProviderConstants.EMPI_MERGE_PERSONS_TO_PERSON_ID, theToPersonId);\n-\t\tif (theFromPersonId.getValue().equals(theToPersonId.getValue())) {\n+\tprotected void validateMergeParameters(IPrimitiveType<String> theFromGoldenResourceId, IPrimitiveType<String> theToGoldenResourceId) {\n+\t\t// TODO NG - Add validation to check that types are the same?\n+\t\tvalidateNotNull(ProviderConstants.MDM_MERGE_GR_FROM_GOLDEN_RESOURCE_ID, theFromGoldenResourceId);\n+\t\tvalidateNotNull(ProviderConstants.MDM_MERGE_GR_TO_GOLDEN_RESOURCE_ID, theToGoldenResourceId);\n+\t\tif (theFromGoldenResourceId.getValue().equals(theToGoldenResourceId.getValue())) {\n \t\t\tthrow new InvalidRequestException(\"fromPersonId must be different from toPersonId\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQyNTIwOQ==", "bodyText": "rename to validateIsMdmManaged", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525425209", "createdAt": "2020-11-17T19:20:41Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/provider/EmpiControllerHelper.java", "diffHunk": "@@ -73,20 +84,24 @@ protected IAnyResource loadResource(IIdType theResourceId) {\n \t}\n \n \tpublic void validateMergeResources(IAnyResource theFromPerson, IAnyResource theToPerson) {\n-\t\tvalidateIsEmpiManaged(ProviderConstants.EMPI_MERGE_PERSONS_FROM_PERSON_ID, theFromPerson);\n-\t\tvalidateIsEmpiManaged(ProviderConstants.EMPI_MERGE_PERSONS_TO_PERSON_ID, theToPerson);\n+\t\tvalidateIsEmpiManaged(ProviderConstants.MDM_MERGE_GR_FROM_GOLDEN_RESOURCE_ID, theFromPerson);\n+\t\tvalidateIsEmpiManaged(ProviderConstants.MDM_MERGE_GR_TO_GOLDEN_RESOURCE_ID, theToPerson);\n \t}\n \n \tpublic String toJson(IAnyResource theAnyResource) {\n \t\treturn myFhirContext.newJsonParser().encodeResourceToString(theAnyResource);\n \t}\n \n-\tprivate void validateIsEmpiManaged(String theName, IAnyResource thePerson) {\n-\t\tif (!\"Person\".equals(myFhirContext.getResourceType(thePerson))) {\n-\t\t\tthrow new InvalidRequestException(\"Only Person resources can be merged.  The \" + theName + \" points to a \" + myFhirContext.getResourceType(thePerson));\n+\tpublic void validateIsEmpiManaged(String theName, IAnyResource theResource) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQyNjEwMA==", "bodyText": "rename Empi to MDM", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525426100", "createdAt": "2020-11-17T19:22:13Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/provider/EmpiProviderDstu3.java", "diffHunk": "@@ -79,107 +79,100 @@ public EmpiProviderDstu3(FhirContext theFhirContext, IEmpiControllerSvc theEmpiC\n \t}\n \n \t@Operation(name = ProviderConstants.EMPI_MATCH, type = Patient.class)\n-\tpublic Bundle match(@OperationParam(name = ProviderConstants.EMPI_MATCH_RESOURCE, min = 1, max = 1) Patient thePatient) {\n+\tpublic Bundle match(@OperationParam(name = ProviderConstants.MDM_MATCH_RESOURCE, min = 1, max = 1) Patient thePatient) {\n \t\tif (thePatient == null) {\n \t\t\tthrow new InvalidRequestException(\"resource may not be null\");\n \t\t}\n \n-\t\tList<MatchedTarget> matches = myEmpiMatchFinderSvc.getMatchedTargets(\"Patient\", thePatient);\n-\t\tmatches.sort(Comparator.comparing((MatchedTarget m) -> m.getMatchResult().getNormalizedScore()).reversed());\n-\n-\t\tBundle retVal = new Bundle();\n-\t\tretVal.setType(Bundle.BundleType.SEARCHSET);\n-\t\tretVal.setId(UUID.randomUUID().toString());\n-\t\tretVal.getMeta().setLastUpdatedElement(InstantType.now());\n-\n-\t\tfor (MatchedTarget next : matches) {\n-\t\t\tboolean shouldKeepThisEntry = next.isMatch() || next.isPossibleMatch();\n-\t\t\tif (!shouldKeepThisEntry) {\n-\t\t\t\tcontinue;\n-\t\t\t}\n-\n-\t\t\tBundle.BundleEntryComponent entry = new Bundle.BundleEntryComponent();\n-\t\t\tentry.setResource((Resource) next.getTarget());\n-\t\t\tentry.setSearch(toBundleEntrySearchComponent(next));\n+\t\treturn getMatchesAndPossibleMatchesForResource(thePatient, \"Patient\");\n+\t}\n \n-\t\t\tretVal.addEntry(entry);\n+\t@Operation(name = ProviderConstants.MDM_MATCH)\n+\tpublic Bundle serverMatch(@OperationParam(name = ProviderConstants.MDM_MATCH_RESOURCE, min = 1, max = 1) IAnyResource theResource,\n+\t\t\t\t\t\t\t\t\t  @OperationParam(name = ProviderConstants.MDM_RESOURCE_TYPE, min = 1, max = 1) StringType theResourceType\n+\t) {\n+\t\tif (theResource == null) {\n+\t\t\tthrow new InvalidRequestException(\"resource may not be null\");\n \t\t}\n+\t\treturn getMatchesAndPossibleMatchesForResource(theResource, theResourceType.getValueNotNull());\n \n-\t\treturn retVal;\n \t}\n \n \tprivate Bundle.BundleEntrySearchComponent toBundleEntrySearchComponent(MatchedTarget theMatchedTarget) {\n \t\tBundle.BundleEntrySearchComponent searchComponent = new Bundle.BundleEntrySearchComponent();\n \t\tsearchComponent.setMode(Bundle.SearchEntryMode.MATCH);\n \t\tsearchComponent.setScore(theMatchedTarget.getMatchResult().getNormalizedScore());\n \n-\t\tMatchGrade matchGrade = MatchGrade.PROBABLE;\n-\t\tif (theMatchedTarget.isMatch()) {\n-\t\t\tmatchGrade = MatchGrade.CERTAIN;\n-\t\t} else if (theMatchedTarget.isPossibleMatch()) {\n-\t\t\tmatchGrade = MatchGrade.POSSIBLE;\n-\t\t}\n+\t\tMatchGrade matchGrade = getMatchGrade(theMatchedTarget);\n \n \t\tsearchComponent.addExtension(EmpiConstants.FIHR_STRUCTURE_DEF_MATCH_GRADE_URL_NAMESPACE, new CodeType(matchGrade.toCode()));\n \t\treturn searchComponent;\n \t}\n \n-\t@Operation(name = ProviderConstants.EMPI_MERGE_PERSONS, type = Person.class)\n-\tpublic Person mergePerson(@OperationParam(name=ProviderConstants.EMPI_MERGE_PERSONS_FROM_PERSON_ID, min = 1, max = 1) StringType theFromPersonId,\n-\t\t\t\t\t\t\t\t\t  @OperationParam(name=ProviderConstants.EMPI_MERGE_PERSONS_TO_PERSON_ID, min = 1, max = 1) StringType theToPersonId,\n-\t\t\t\t\t\t\t\t\t  RequestDetails theRequestDetails) {\n-\t\tvalidateMergeParameters(theFromPersonId, theToPersonId);\n+\t@Operation(name = ProviderConstants.MDM_MERGE_GOLDEN_RESOURCES)\n+\tpublic IBaseResource mergeGoldenResource(@OperationParam(name=ProviderConstants.MDM_MERGE_GR_FROM_GOLDEN_RESOURCE_ID, min = 1, max = 1) StringType theFromGoldenResourceId,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t  @OperationParam(name=ProviderConstants.MDM_MERGE_GR_TO_GOLDEN_RESOURCE_ID, min = 1, max = 1) StringType theToGoldenResourceId,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t  RequestDetails theRequestDetails) {\n+\t\tvalidateMergeParameters(theFromGoldenResourceId, theToGoldenResourceId);\n \n-\t\treturn (Person) myEmpiControllerSvc.mergePersons(theFromPersonId.getValue(), theToPersonId.getValue(), createEmpiContext(theRequestDetails, EmpiTransactionContext.OperationType.MERGE_PERSONS));\n+\t\tString resourceType = getResourceType(ProviderConstants.MDM_MERGE_GR_FROM_GOLDEN_RESOURCE_ID, theFromGoldenResourceId);\n+\n+\t\treturn myEmpiControllerSvc.mergeGoldenResources(theFromGoldenResourceId.getValue(), theToGoldenResourceId.getValue(),\n+\t\t\tcreateMdmContext(theRequestDetails, MdmTransactionContext.OperationType.MERGE_PERSONS, resourceType));\n \t}\n \n-\t@Operation(name = ProviderConstants.EMPI_UPDATE_LINK, type = Person.class)\n-\tpublic Person updateLink(@OperationParam(name=ProviderConstants.EMPI_UPDATE_LINK_PERSON_ID, min = 1, max = 1) StringType thePersonId,\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  @OperationParam(name=ProviderConstants.EMPI_UPDATE_LINK_TARGET_ID, min = 1, max = 1) StringType theTargetId,\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  @OperationParam(name=ProviderConstants.EMPI_UPDATE_LINK_MATCH_RESULT, min = 1, max = 1) StringType theMatchResult,\n+\t@Operation(name = ProviderConstants.MDM_UPDATE_LINK)\n+\tpublic IBaseResource updateLink(@OperationParam(name=ProviderConstants.MDM_UPDATE_LINK_GOLDEN_RESOURCE_ID, min = 1, max = 1) StringType theGoldenResourceId,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  @OperationParam(name=ProviderConstants.MDM_UPDATE_LINK_RESOURCE_ID, min = 1, max = 1) StringType theTargetId,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  @OperationParam(name=ProviderConstants.MDM_UPDATE_LINK_MATCH_RESULT, min = 1, max = 1) StringType theMatchResult,\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ServletRequestDetails theRequestDetails) {\n \n-\t\tvalidateUpdateLinkParameters(thePersonId, theTargetId, theMatchResult);\n+\t\tvalidateUpdateLinkParameters(theGoldenResourceId, theTargetId, theMatchResult);\n \n-\t\treturn (Person) myEmpiControllerSvc.updateLink(thePersonId.getValue(), theTargetId.getValue(), theMatchResult.getValue(), createEmpiContext(theRequestDetails, EmpiTransactionContext.OperationType.UPDATE_LINK));\n+\t\treturn myEmpiControllerSvc.updateLink(theGoldenResourceId.getValue(), theTargetId.getValue(), theMatchResult.getValue(),\n+\t\t\tcreateMdmContext(theRequestDetails, MdmTransactionContext.OperationType.UPDATE_LINK,\n+\t\t\t\tgetResourceType(ProviderConstants.MDM_UPDATE_LINK_GOLDEN_RESOURCE_ID, theGoldenResourceId)));\n \t}\n \n-\t@Operation(name = ProviderConstants.EMPI_QUERY_LINKS)\n-\tpublic Parameters queryLinks(@OperationParam(name=ProviderConstants.EMPI_QUERY_LINKS_PERSON_ID, min = 0, max = 1) StringType thePersonId,\n-\t\t\t\t\t\t\t\t\t\t  @OperationParam(name=ProviderConstants.EMPI_QUERY_LINKS_TARGET_ID, min = 0, max = 1) StringType theTargetId,\n+\t@Operation(name = ProviderConstants.MDM_QUERY_LINKS)\n+\tpublic Parameters queryLinks(@OperationParam(name=ProviderConstants.MDM_QUERY_LINKS_GOLDEN_RESOURCE_ID, min = 0, max = 1) StringType theGoldenResourceId,\n+\t\t\t\t\t\t\t\t\t\t  @OperationParam(name=ProviderConstants.MDM_QUERY_LINKS_RESOURCE_ID, min = 0, max = 1) StringType theTargetResourceId,\n \t\t\t\t\t\t\t\t\t\t  @OperationParam(name=ProviderConstants.EMPI_QUERY_LINKS_MATCH_RESULT, min = 0, max = 1) StringType theMatchResult,\n \t\t\t\t\t\t\t\t\t\t  @OperationParam(name=ProviderConstants.EMPI_QUERY_LINKS_MATCH_RESULT, min = 0, max = 1) StringType theLinkSource,\n \t\t\t\t\t\t\t\t\t\t  ServletRequestDetails theRequestDetails) {\n \n-\t\tStream<EmpiLinkJson> empiLinkJson = myEmpiControllerSvc.queryLinks(extractStringOrNull(thePersonId), extractStringOrNull(theTargetId), extractStringOrNull(theMatchResult), extractStringOrNull(theLinkSource), createEmpiContext(theRequestDetails, EmpiTransactionContext.OperationType.QUERY_LINKS));\n+\t\tStream<EmpiLinkJson> empiLinkJson = myEmpiControllerSvc.queryLinks(extractStringOrNull(theGoldenResourceId), extractStringOrNull(theTargetResourceId),\n+\t\t\textractStringOrNull(theMatchResult), extractStringOrNull(theLinkSource), createMdmContext(theRequestDetails,\n+\t\t\t\tMdmTransactionContext.OperationType.QUERY_LINKS, getResourceType(ProviderConstants.MDM_QUERY_LINKS_GOLDEN_RESOURCE_ID, theGoldenResourceId)));\n \t\treturn (Parameters) parametersFromEmpiLinks(empiLinkJson, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQyNjk5OQ==", "bodyText": "MdmProviderR4?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525426999", "createdAt": "2020-11-17T19:23:45Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/provider/EmpiProviderR4.java", "diffHunk": "@@ -63,30 +62,54 @@\n public class EmpiProviderR4 extends BaseEmpiProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQyODk4NQ==", "bodyText": "Empi -> MDM", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525428985", "createdAt": "2020-11-17T19:26:54Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/util/EmpiUtil.java", "diffHunk": "@@ -55,7 +56,70 @@ public static boolean isEmpiAccessible(IBaseResource theBaseResource) {\n \t * @return a boolean indicating whether or not EMPI manages this Person.\n \t */\n \tpublic static boolean isEmpiManaged(IBaseResource theBaseResource) {\n-\t\treturn theBaseResource.getMeta().getTag(EmpiConstants.SYSTEM_EMPI_MANAGED, EmpiConstants.CODE_HAPI_EMPI_MANAGED) != null;\n+\t\treturn resourceHasTag(theBaseResource, EmpiConstants.SYSTEM_MDM_MANAGED, EmpiConstants.CODE_HAPI_MDM_MANAGED);\n+\t}\n+\n+\tpublic static boolean isGoldenRecord(IBaseResource theBaseResource) {\n+\t\treturn resourceHasTag(theBaseResource, EmpiConstants.SYSTEM_GOLDEN_RECORD_STATUS, EmpiConstants.CODE_GOLDEN_RECORD);\n+\t}\n+\n+\tpublic static boolean isGoldenRecordRedirected(IBaseResource theBaseResource) {\n+\t\treturn resourceHasTag(theBaseResource, EmpiConstants.SYSTEM_GOLDEN_RECORD_STATUS, EmpiConstants.CODE_GOLDEN_RECORD_REDIRECTED);\n+\t}\n+\n+\tprivate static boolean resourceHasTag(IBaseResource theTheBaseResource, String theSystem, String theCode) {\n+\t\treturn theTheBaseResource.getMeta().getTag(theSystem, theCode) != null;\n+\t}\n+\n+\tprivate static Optional<? extends IBaseCoding> getTagWithSystem(IBaseResource theResource, String theSystem) {\n+\t\treturn theResource.getMeta().getTag().stream().filter(tag -> tag.getSystem().equalsIgnoreCase(theSystem)).findFirst();\n+\t}\n+\n+\tpublic static void removeTagWithSystem(IBaseResource theResource, String theSystem) {\n+\t\ttheResource.getMeta().getTag().removeIf(tag -> tag.getSystem().equalsIgnoreCase(theSystem));\n+\t}\n+\n+\n+\t/**\n+\t * Sets the EMPI-managed tag, indicating the EMPI system has ownership of this\n+\t * Resource. No changes are made if resource is already maanged by EMPI.\n+\t *\n+\t * @param theBaseResource resource to set the tag for\n+\t * @return\n+\t * \t\tReturns resource with the tag set.\n+\t */\n+\tpublic static IBaseResource setEmpiManaged(IBaseResource theBaseResource) {\n+\t\treturn setTagOnResource(theBaseResource, EmpiConstants.SYSTEM_MDM_MANAGED, EmpiConstants.CODE_HAPI_MDM_MANAGED, EmpiConstants.DISPLAY_HAPI_EMPI_MANAGED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQyOTg2OQ==", "bodyText": "rename S/R to Golden", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525429869", "createdAt": "2020-11-17T19:28:19Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/util/PersonHelper.java", "diffHunk": "@@ -73,374 +82,261 @@ public PersonHelper(FhirContext theFhirContext) {\n \t}\n \n \t/**\n-\t * Given a Person, extract all {@link IIdType}s for the linked targets.\n-\t *\n-\t * @param thePerson the Person to extract link IDs from.\n-\t * @return a Stream of {@link IIdType}.\n-\t */\n-\tpublic Stream<IIdType> getLinkIds(IBaseResource thePerson) {\n-\t\tswitch (myFhirContext.getVersion().getVersion()) {\n-\t\t\tcase R4:\n-\t\t\t\tPerson personR4 = (Person) thePerson;\n-\t\t\t\treturn personR4.getLink().stream()\n-\t\t\t\t\t.map(Person.PersonLinkComponent::getTarget)\n-\t\t\t\t\t.map(IBaseReference::getReferenceElement)\n-\t\t\t\t\t.map(IIdType::toUnqualifiedVersionless);\n-\t\t\tcase DSTU3:\n-\t\t\t\torg.hl7.fhir.dstu3.model.Person personStu3 = (org.hl7.fhir.dstu3.model.Person) thePerson;\n-\t\t\t\treturn personStu3.getLink().stream()\n-\t\t\t\t\t.map(org.hl7.fhir.dstu3.model.Person.PersonLinkComponent::getTarget)\n-\t\t\t\t\t.map(IBaseReference::getReferenceElement)\n-\t\t\t\t\t.map(IIdType::toUnqualifiedVersionless);\n-\t\t\tdefault:\n-\t\t\t\tthrow new UnsupportedOperationException(\"Version not supported: \" + myFhirContext.getVersion().getVersion());\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Determine whether or not the given {@link IBaseResource} person contains a link to a particular {@link IIdType}\n+\t * Creates a copy of the specified resource. This method will carry over resource EID if it exists. If it does not exist,\n+\t * a randomly generated UUID EID will be created.\n \t *\n-\t * @param thePerson     The person to check\n-\t * @param theResourceId The ID to check.\n-\t * @return A boolean indicating whether or not there was a contained link.\n+\t * @param <T>                 Supported MDM resource type (e.g. Patient, Practitioner)\n+\t * @param theIncomingResource The resource that will be used as the starting point for the MDM linking.\n \t */\n-\tpublic boolean containsLinkTo(IBaseResource thePerson, IIdType theResourceId) {\n-\t\tStream<IIdType> links = getLinkIds(thePerson);\n-\t\treturn links.anyMatch(link -> link.getValue().equals(theResourceId.getValue()));\n-\t}\n+\tpublic <T extends IAnyResource> T createGoldenResourceFromMdmTarget(T theIncomingResource) {\n+\t\tvalidateContextSupported();\n \n-\t/**\n-\t * Create or update a link from source {@link IBaseResource} to the target {@link IIdType}, with the given {@link CanonicalIdentityAssuranceLevel}.\n-\t * @param thePerson The person who's link needs to be updated.\n-\t * @param theResourceId The target of the link\n-\t * @param canonicalAssuranceLevel The level of certainty of this link.\n-\t * @param theEmpiTransactionContext\n-\t */\n-\tpublic void addOrUpdateLink(IBaseResource thePerson, IIdType theResourceId, @Nonnull CanonicalIdentityAssuranceLevel canonicalAssuranceLevel, EmpiTransactionContext theEmpiTransactionContext) {\n-\t\tswitch (myFhirContext.getVersion().getVersion()) {\n-\t\t\tcase R4:\n-\t\t\t\thandleLinkUpdateR4(thePerson, theResourceId, canonicalAssuranceLevel, theEmpiTransactionContext);\n-\t\t\t\tbreak;\n-\t\t\tcase DSTU3:\n-\t\t\t\thandleLinkUpdateDSTU3(thePerson, theResourceId, canonicalAssuranceLevel, theEmpiTransactionContext);\n-\t\t\t\tbreak;\n-\t\t\tdefault:\n-\t\t\t\tthrow new UnsupportedOperationException(\"Version not supported: \" + myFhirContext.getVersion().getVersion());\n-\t\t}\n-\t}\n+\t\t// get a ref to the actual ID Field\n+\t\tRuntimeResourceDefinition resourceDefinition = myFhirContext.getResourceDefinition(theIncomingResource);\n+\t\tIBaseResource newSourceResource = resourceDefinition.newInstance();\n \n-\tprivate void handleLinkUpdateDSTU3(IBaseResource thePerson, IIdType theResourceId, CanonicalIdentityAssuranceLevel theCanonicalAssuranceLevel, EmpiTransactionContext theTransactionLogMessages) {\n-\t\tif (theCanonicalAssuranceLevel == null) {\n-\t\t\tourLog.warn(\"Refusing to update or add a link without an Assurance Level.\");\n-\t\t\treturn;\n-\t\t}\n+\t\t// hapi has 2 metamodels: for children and types\n+\t\tBaseRuntimeChildDefinition sourceResourceIdentifier = resourceDefinition.getChildByName(FIELD_NAME_IDENTIFIER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQzMDE0OA==", "bodyText": "S/R to Golden", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525430148", "createdAt": "2020-11-17T19:28:46Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/util/PersonHelper.java", "diffHunk": "@@ -73,374 +82,261 @@ public PersonHelper(FhirContext theFhirContext) {\n \t}\n \n \t/**\n-\t * Given a Person, extract all {@link IIdType}s for the linked targets.\n-\t *\n-\t * @param thePerson the Person to extract link IDs from.\n-\t * @return a Stream of {@link IIdType}.\n-\t */\n-\tpublic Stream<IIdType> getLinkIds(IBaseResource thePerson) {\n-\t\tswitch (myFhirContext.getVersion().getVersion()) {\n-\t\t\tcase R4:\n-\t\t\t\tPerson personR4 = (Person) thePerson;\n-\t\t\t\treturn personR4.getLink().stream()\n-\t\t\t\t\t.map(Person.PersonLinkComponent::getTarget)\n-\t\t\t\t\t.map(IBaseReference::getReferenceElement)\n-\t\t\t\t\t.map(IIdType::toUnqualifiedVersionless);\n-\t\t\tcase DSTU3:\n-\t\t\t\torg.hl7.fhir.dstu3.model.Person personStu3 = (org.hl7.fhir.dstu3.model.Person) thePerson;\n-\t\t\t\treturn personStu3.getLink().stream()\n-\t\t\t\t\t.map(org.hl7.fhir.dstu3.model.Person.PersonLinkComponent::getTarget)\n-\t\t\t\t\t.map(IBaseReference::getReferenceElement)\n-\t\t\t\t\t.map(IIdType::toUnqualifiedVersionless);\n-\t\t\tdefault:\n-\t\t\t\tthrow new UnsupportedOperationException(\"Version not supported: \" + myFhirContext.getVersion().getVersion());\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Determine whether or not the given {@link IBaseResource} person contains a link to a particular {@link IIdType}\n+\t * Creates a copy of the specified resource. This method will carry over resource EID if it exists. If it does not exist,\n+\t * a randomly generated UUID EID will be created.\n \t *\n-\t * @param thePerson     The person to check\n-\t * @param theResourceId The ID to check.\n-\t * @return A boolean indicating whether or not there was a contained link.\n+\t * @param <T>                 Supported MDM resource type (e.g. Patient, Practitioner)\n+\t * @param theIncomingResource The resource that will be used as the starting point for the MDM linking.\n \t */\n-\tpublic boolean containsLinkTo(IBaseResource thePerson, IIdType theResourceId) {\n-\t\tStream<IIdType> links = getLinkIds(thePerson);\n-\t\treturn links.anyMatch(link -> link.getValue().equals(theResourceId.getValue()));\n-\t}\n+\tpublic <T extends IAnyResource> T createGoldenResourceFromMdmTarget(T theIncomingResource) {\n+\t\tvalidateContextSupported();\n \n-\t/**\n-\t * Create or update a link from source {@link IBaseResource} to the target {@link IIdType}, with the given {@link CanonicalIdentityAssuranceLevel}.\n-\t * @param thePerson The person who's link needs to be updated.\n-\t * @param theResourceId The target of the link\n-\t * @param canonicalAssuranceLevel The level of certainty of this link.\n-\t * @param theEmpiTransactionContext\n-\t */\n-\tpublic void addOrUpdateLink(IBaseResource thePerson, IIdType theResourceId, @Nonnull CanonicalIdentityAssuranceLevel canonicalAssuranceLevel, EmpiTransactionContext theEmpiTransactionContext) {\n-\t\tswitch (myFhirContext.getVersion().getVersion()) {\n-\t\t\tcase R4:\n-\t\t\t\thandleLinkUpdateR4(thePerson, theResourceId, canonicalAssuranceLevel, theEmpiTransactionContext);\n-\t\t\t\tbreak;\n-\t\t\tcase DSTU3:\n-\t\t\t\thandleLinkUpdateDSTU3(thePerson, theResourceId, canonicalAssuranceLevel, theEmpiTransactionContext);\n-\t\t\t\tbreak;\n-\t\t\tdefault:\n-\t\t\t\tthrow new UnsupportedOperationException(\"Version not supported: \" + myFhirContext.getVersion().getVersion());\n-\t\t}\n-\t}\n+\t\t// get a ref to the actual ID Field\n+\t\tRuntimeResourceDefinition resourceDefinition = myFhirContext.getResourceDefinition(theIncomingResource);\n+\t\tIBaseResource newSourceResource = resourceDefinition.newInstance();\n \n-\tprivate void handleLinkUpdateDSTU3(IBaseResource thePerson, IIdType theResourceId, CanonicalIdentityAssuranceLevel theCanonicalAssuranceLevel, EmpiTransactionContext theTransactionLogMessages) {\n-\t\tif (theCanonicalAssuranceLevel == null) {\n-\t\t\tourLog.warn(\"Refusing to update or add a link without an Assurance Level.\");\n-\t\t\treturn;\n-\t\t}\n+\t\t// hapi has 2 metamodels: for children and types\n+\t\tBaseRuntimeChildDefinition sourceResourceIdentifier = resourceDefinition.getChildByName(FIELD_NAME_IDENTIFIER);\n \n-\t\torg.hl7.fhir.dstu3.model.Person person = (org.hl7.fhir.dstu3.model.Person) thePerson;\n-\t\tif (!containsLinkTo(thePerson, theResourceId)) {\n-\t\t\tperson.addLink().setTarget(new org.hl7.fhir.dstu3.model.Reference(theResourceId)).setAssurance(theCanonicalAssuranceLevel.toDstu3());\n-\t\t\tlogLinkAddMessage(thePerson, theResourceId, theCanonicalAssuranceLevel, theTransactionLogMessages);\n-\t\t} else {\n-\t\t\tperson.getLink().stream()\n-\t\t\t\t.filter(link -> link.getTarget().getReference().equalsIgnoreCase(theResourceId.getValue()))\n-\t\t\t\t.findFirst()\n-\t\t\t\t.ifPresent(link -> {\n-\t\t\t\t\tlogLinkUpdateMessage(thePerson, theResourceId, theCanonicalAssuranceLevel, theTransactionLogMessages, link.getAssurance().toCode());\n-\t\t\t\t\tlink.setAssurance(theCanonicalAssuranceLevel.toDstu3());\n-\t\t\t\t});\n-\t\t}\n-\t}\n+\t\tcloneAllExternalEidsIntoNewSourceResource(sourceResourceIdentifier, theIncomingResource, newSourceResource);\n \n-\tprivate void logLinkAddMessage(IBaseResource thePerson, IIdType theResourceId, CanonicalIdentityAssuranceLevel theCanonicalAssuranceLevel, EmpiTransactionContext theEmpiTransactionContext) {\n-\t\ttheEmpiTransactionContext.addTransactionLogMessage(\"Creating new link from \" + (StringUtils.isBlank(thePerson.getIdElement().toUnqualifiedVersionless().getValue()) ? \"new Person\" : thePerson.getIdElement().toUnqualifiedVersionless()) + \" -> \" + theResourceId.toUnqualifiedVersionless() + \" with IdentityAssuranceLevel: \" + theCanonicalAssuranceLevel.name());\n-\t}\n+\t\taddHapiEidIfNoExternalEidIsPresent(newSourceResource, sourceResourceIdentifier, theIncomingResource);\n \n-\tprivate void logLinkUpdateMessage(IBaseResource thePerson, IIdType theResourceId, CanonicalIdentityAssuranceLevel canonicalAssuranceLevel, EmpiTransactionContext theEmpiTransactionContext, String theOriginalAssuranceLevel) {\n-\t\ttheEmpiTransactionContext.addTransactionLogMessage(\"Updating link from \" + thePerson.getIdElement().toUnqualifiedVersionless() + \" -> \" + theResourceId.toUnqualifiedVersionless() + \". Changing IdentityAssuranceLevel: \" + theOriginalAssuranceLevel + \" -> \" + canonicalAssuranceLevel.name());\n-\t}\n+\t\t//setGoldenResource(newSourceResource, resourceDefinition, true);\n \n-\tprivate void handleLinkUpdateR4(IBaseResource thePerson, IIdType theResourceId, CanonicalIdentityAssuranceLevel canonicalAssuranceLevel, EmpiTransactionContext theEmpiTransactionContext) {\n-\t\tif (canonicalAssuranceLevel == null) {\n-\t\t\tourLog.warn(\"Refusing to update or add a link without an Assurance Level.\");\n-\t\t\treturn;\n-\t\t}\n+\t\tEmpiUtil.setEmpiManaged(newSourceResource);\n+\t\tEmpiUtil.setGoldenResource(newSourceResource);\n \n-\t\tPerson person = (Person) thePerson;\n-\t\tif (!containsLinkTo(thePerson, theResourceId)) {\n-\t\t\tperson.addLink().setTarget(new Reference(theResourceId)).setAssurance(canonicalAssuranceLevel.toR4());\n-\t\t\tlogLinkAddMessage(thePerson, theResourceId, canonicalAssuranceLevel, theEmpiTransactionContext);\n-\t\t} else {\n-\t\t\tperson.getLink().stream()\n-\t\t\t\t.filter(link -> link.getTarget().getReference().equalsIgnoreCase(theResourceId.getValue()))\n-\t\t\t\t.findFirst()\n-\t\t\t\t.ifPresent(link -> {\n-\t\t\t\t\tlogLinkUpdateMessage(thePerson, theResourceId, canonicalAssuranceLevel, theEmpiTransactionContext, link.getAssurance().toCode());\n-\t\t\t\t\tlink.setAssurance(canonicalAssuranceLevel.toR4());\n-\t\t\t\t});\n-\t\t}\n+\t\treturn (T) newSourceResource;\n \t}\n \n-\n \t/**\n-\t * Removes a link from the given {@link IBaseResource} to the target {@link IIdType}.\n-\t * @param thePerson The person to remove the link from.\n-\t * @param theResourceId The target ID to remove.\n-\t * @param theEmpiTransactionContext\n+\t * If there are no external EIDs on the incoming resource, create a new HAPI EID on the new SourceResource.\n \t */\n-\tpublic void removeLink(IBaseResource thePerson, IIdType theResourceId, EmpiTransactionContext theEmpiTransactionContext) {\n-\t\tif (!containsLinkTo(thePerson, theResourceId)) {\n+\t//TODO GGG ask james if there is any way we can convert this canonical EID into a generic STU-agnostic IBase.\n+\tprivate <T extends IAnyResource> void addHapiEidIfNoExternalEidIsPresent(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQzMDQ2OQ==", "bodyText": "s/r to golden", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525430469", "createdAt": "2020-11-17T19:29:17Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/util/PersonHelper.java", "diffHunk": "@@ -73,374 +82,261 @@ public PersonHelper(FhirContext theFhirContext) {\n \t}\n \n \t/**\n-\t * Given a Person, extract all {@link IIdType}s for the linked targets.\n-\t *\n-\t * @param thePerson the Person to extract link IDs from.\n-\t * @return a Stream of {@link IIdType}.\n-\t */\n-\tpublic Stream<IIdType> getLinkIds(IBaseResource thePerson) {\n-\t\tswitch (myFhirContext.getVersion().getVersion()) {\n-\t\t\tcase R4:\n-\t\t\t\tPerson personR4 = (Person) thePerson;\n-\t\t\t\treturn personR4.getLink().stream()\n-\t\t\t\t\t.map(Person.PersonLinkComponent::getTarget)\n-\t\t\t\t\t.map(IBaseReference::getReferenceElement)\n-\t\t\t\t\t.map(IIdType::toUnqualifiedVersionless);\n-\t\t\tcase DSTU3:\n-\t\t\t\torg.hl7.fhir.dstu3.model.Person personStu3 = (org.hl7.fhir.dstu3.model.Person) thePerson;\n-\t\t\t\treturn personStu3.getLink().stream()\n-\t\t\t\t\t.map(org.hl7.fhir.dstu3.model.Person.PersonLinkComponent::getTarget)\n-\t\t\t\t\t.map(IBaseReference::getReferenceElement)\n-\t\t\t\t\t.map(IIdType::toUnqualifiedVersionless);\n-\t\t\tdefault:\n-\t\t\t\tthrow new UnsupportedOperationException(\"Version not supported: \" + myFhirContext.getVersion().getVersion());\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Determine whether or not the given {@link IBaseResource} person contains a link to a particular {@link IIdType}\n+\t * Creates a copy of the specified resource. This method will carry over resource EID if it exists. If it does not exist,\n+\t * a randomly generated UUID EID will be created.\n \t *\n-\t * @param thePerson     The person to check\n-\t * @param theResourceId The ID to check.\n-\t * @return A boolean indicating whether or not there was a contained link.\n+\t * @param <T>                 Supported MDM resource type (e.g. Patient, Practitioner)\n+\t * @param theIncomingResource The resource that will be used as the starting point for the MDM linking.\n \t */\n-\tpublic boolean containsLinkTo(IBaseResource thePerson, IIdType theResourceId) {\n-\t\tStream<IIdType> links = getLinkIds(thePerson);\n-\t\treturn links.anyMatch(link -> link.getValue().equals(theResourceId.getValue()));\n-\t}\n+\tpublic <T extends IAnyResource> T createGoldenResourceFromMdmTarget(T theIncomingResource) {\n+\t\tvalidateContextSupported();\n \n-\t/**\n-\t * Create or update a link from source {@link IBaseResource} to the target {@link IIdType}, with the given {@link CanonicalIdentityAssuranceLevel}.\n-\t * @param thePerson The person who's link needs to be updated.\n-\t * @param theResourceId The target of the link\n-\t * @param canonicalAssuranceLevel The level of certainty of this link.\n-\t * @param theEmpiTransactionContext\n-\t */\n-\tpublic void addOrUpdateLink(IBaseResource thePerson, IIdType theResourceId, @Nonnull CanonicalIdentityAssuranceLevel canonicalAssuranceLevel, EmpiTransactionContext theEmpiTransactionContext) {\n-\t\tswitch (myFhirContext.getVersion().getVersion()) {\n-\t\t\tcase R4:\n-\t\t\t\thandleLinkUpdateR4(thePerson, theResourceId, canonicalAssuranceLevel, theEmpiTransactionContext);\n-\t\t\t\tbreak;\n-\t\t\tcase DSTU3:\n-\t\t\t\thandleLinkUpdateDSTU3(thePerson, theResourceId, canonicalAssuranceLevel, theEmpiTransactionContext);\n-\t\t\t\tbreak;\n-\t\t\tdefault:\n-\t\t\t\tthrow new UnsupportedOperationException(\"Version not supported: \" + myFhirContext.getVersion().getVersion());\n-\t\t}\n-\t}\n+\t\t// get a ref to the actual ID Field\n+\t\tRuntimeResourceDefinition resourceDefinition = myFhirContext.getResourceDefinition(theIncomingResource);\n+\t\tIBaseResource newSourceResource = resourceDefinition.newInstance();\n \n-\tprivate void handleLinkUpdateDSTU3(IBaseResource thePerson, IIdType theResourceId, CanonicalIdentityAssuranceLevel theCanonicalAssuranceLevel, EmpiTransactionContext theTransactionLogMessages) {\n-\t\tif (theCanonicalAssuranceLevel == null) {\n-\t\t\tourLog.warn(\"Refusing to update or add a link without an Assurance Level.\");\n-\t\t\treturn;\n-\t\t}\n+\t\t// hapi has 2 metamodels: for children and types\n+\t\tBaseRuntimeChildDefinition sourceResourceIdentifier = resourceDefinition.getChildByName(FIELD_NAME_IDENTIFIER);\n \n-\t\torg.hl7.fhir.dstu3.model.Person person = (org.hl7.fhir.dstu3.model.Person) thePerson;\n-\t\tif (!containsLinkTo(thePerson, theResourceId)) {\n-\t\t\tperson.addLink().setTarget(new org.hl7.fhir.dstu3.model.Reference(theResourceId)).setAssurance(theCanonicalAssuranceLevel.toDstu3());\n-\t\t\tlogLinkAddMessage(thePerson, theResourceId, theCanonicalAssuranceLevel, theTransactionLogMessages);\n-\t\t} else {\n-\t\t\tperson.getLink().stream()\n-\t\t\t\t.filter(link -> link.getTarget().getReference().equalsIgnoreCase(theResourceId.getValue()))\n-\t\t\t\t.findFirst()\n-\t\t\t\t.ifPresent(link -> {\n-\t\t\t\t\tlogLinkUpdateMessage(thePerson, theResourceId, theCanonicalAssuranceLevel, theTransactionLogMessages, link.getAssurance().toCode());\n-\t\t\t\t\tlink.setAssurance(theCanonicalAssuranceLevel.toDstu3());\n-\t\t\t\t});\n-\t\t}\n-\t}\n+\t\tcloneAllExternalEidsIntoNewSourceResource(sourceResourceIdentifier, theIncomingResource, newSourceResource);\n \n-\tprivate void logLinkAddMessage(IBaseResource thePerson, IIdType theResourceId, CanonicalIdentityAssuranceLevel theCanonicalAssuranceLevel, EmpiTransactionContext theEmpiTransactionContext) {\n-\t\ttheEmpiTransactionContext.addTransactionLogMessage(\"Creating new link from \" + (StringUtils.isBlank(thePerson.getIdElement().toUnqualifiedVersionless().getValue()) ? \"new Person\" : thePerson.getIdElement().toUnqualifiedVersionless()) + \" -> \" + theResourceId.toUnqualifiedVersionless() + \" with IdentityAssuranceLevel: \" + theCanonicalAssuranceLevel.name());\n-\t}\n+\t\taddHapiEidIfNoExternalEidIsPresent(newSourceResource, sourceResourceIdentifier, theIncomingResource);\n \n-\tprivate void logLinkUpdateMessage(IBaseResource thePerson, IIdType theResourceId, CanonicalIdentityAssuranceLevel canonicalAssuranceLevel, EmpiTransactionContext theEmpiTransactionContext, String theOriginalAssuranceLevel) {\n-\t\ttheEmpiTransactionContext.addTransactionLogMessage(\"Updating link from \" + thePerson.getIdElement().toUnqualifiedVersionless() + \" -> \" + theResourceId.toUnqualifiedVersionless() + \". Changing IdentityAssuranceLevel: \" + theOriginalAssuranceLevel + \" -> \" + canonicalAssuranceLevel.name());\n-\t}\n+\t\t//setGoldenResource(newSourceResource, resourceDefinition, true);\n \n-\tprivate void handleLinkUpdateR4(IBaseResource thePerson, IIdType theResourceId, CanonicalIdentityAssuranceLevel canonicalAssuranceLevel, EmpiTransactionContext theEmpiTransactionContext) {\n-\t\tif (canonicalAssuranceLevel == null) {\n-\t\t\tourLog.warn(\"Refusing to update or add a link without an Assurance Level.\");\n-\t\t\treturn;\n-\t\t}\n+\t\tEmpiUtil.setEmpiManaged(newSourceResource);\n+\t\tEmpiUtil.setGoldenResource(newSourceResource);\n \n-\t\tPerson person = (Person) thePerson;\n-\t\tif (!containsLinkTo(thePerson, theResourceId)) {\n-\t\t\tperson.addLink().setTarget(new Reference(theResourceId)).setAssurance(canonicalAssuranceLevel.toR4());\n-\t\t\tlogLinkAddMessage(thePerson, theResourceId, canonicalAssuranceLevel, theEmpiTransactionContext);\n-\t\t} else {\n-\t\t\tperson.getLink().stream()\n-\t\t\t\t.filter(link -> link.getTarget().getReference().equalsIgnoreCase(theResourceId.getValue()))\n-\t\t\t\t.findFirst()\n-\t\t\t\t.ifPresent(link -> {\n-\t\t\t\t\tlogLinkUpdateMessage(thePerson, theResourceId, canonicalAssuranceLevel, theEmpiTransactionContext, link.getAssurance().toCode());\n-\t\t\t\t\tlink.setAssurance(canonicalAssuranceLevel.toR4());\n-\t\t\t\t});\n-\t\t}\n+\t\treturn (T) newSourceResource;\n \t}\n \n-\n \t/**\n-\t * Removes a link from the given {@link IBaseResource} to the target {@link IIdType}.\n-\t * @param thePerson The person to remove the link from.\n-\t * @param theResourceId The target ID to remove.\n-\t * @param theEmpiTransactionContext\n+\t * If there are no external EIDs on the incoming resource, create a new HAPI EID on the new SourceResource.\n \t */\n-\tpublic void removeLink(IBaseResource thePerson, IIdType theResourceId, EmpiTransactionContext theEmpiTransactionContext) {\n-\t\tif (!containsLinkTo(thePerson, theResourceId)) {\n+\t//TODO GGG ask james if there is any way we can convert this canonical EID into a generic STU-agnostic IBase.\n+\tprivate <T extends IAnyResource> void addHapiEidIfNoExternalEidIsPresent(\n+\t\tIBaseResource theNewSourceResource, BaseRuntimeChildDefinition theSourceResourceIdentifier, IAnyResource theTargetResource) {\n+\n+\t\tList<CanonicalEID> eidsToApply = myEIDHelper.getExternalEid(theNewSourceResource);\n+\t\tif (!eidsToApply.isEmpty()) {\n \t\t\treturn;\n \t\t}\n-\t\ttheEmpiTransactionContext.addTransactionLogMessage(\"Removing PersonLinkComponent from \" + thePerson.getIdElement().toUnqualifiedVersionless() + \" -> \" + theResourceId.toUnqualifiedVersionless());\n-\t\tswitch (myFhirContext.getVersion().getVersion()) {\n-\t\t\tcase R4:\n-\t\t\t\tPerson person = (Person) thePerson;\n-\t\t\t\tList<Person.PersonLinkComponent> links = person.getLink();\n-\t\t\t\tlinks.removeIf(component -> component.hasTarget() && component.getTarget().getReference().equals(theResourceId.getValue()));\n-\t\t\t\tbreak;\n-\t\t\tcase DSTU3:\n-\t\t\t\torg.hl7.fhir.dstu3.model.Person personDstu3 = (org.hl7.fhir.dstu3.model.Person) thePerson;\n-\t\t\t\tpersonDstu3.getLink().removeIf(component -> component.hasTarget() && component.getTarget().getReference().equalsIgnoreCase(theResourceId.getValue()));\n-\t\t\t\tbreak;\n-\t\t\tdefault:\n-\t\t\t\tthrow new UnsupportedOperationException(\"Version not supported: \" + myFhirContext.getVersion().getVersion());\n-\t\t}\n+\n+\t\tCanonicalEID hapiEid = myEIDHelper.createHapiEid();\n+\t\ttheSourceResourceIdentifier.getMutator().addValue(theNewSourceResource, toId(hapiEid));\n+\n+\t\t// set identifier on the target resource\n+\t\tcloneEidIntoResource(theTargetResource, hapiEid);\n+\t}\n+\n+\tprivate void cloneEidIntoResource(IBaseResource theResourceToCloneInto, CanonicalEID theEid) {\n+\t\t// get a ref to the actual ID Field\n+\t\tRuntimeResourceDefinition resourceDefinition = myFhirContext.getResourceDefinition(theResourceToCloneInto);\n+\t\t// hapi has 2 metamodels: for children and types\n+\t\tBaseRuntimeChildDefinition resourceIdentifier = resourceDefinition.getChildByName(FIELD_NAME_IDENTIFIER);\n+\t\tcloneEidIntoResource(resourceIdentifier, toId(theEid), theResourceToCloneInto);\n \t}\n \n \t/**\n-\t * Create a Person from a given patient. This will carry over the Patient's EID if it exists. If it does not exist,\n-\t * a randomly generated UUID EID will be created.\n-\t *\n-\t * @param theSourceResource The Patient that will be used as the starting point for the person.\n-\t * @return the Person that is created.\n+\t * Given an Child Definition of `identifier`, a R4/DSTU3 EID Identifier, and a new resource, clone the EID into that resources' identifier list.\n \t */\n-\tpublic IAnyResource createPersonFromEmpiTarget(IAnyResource theSourceResource) {\n-\t\tList<CanonicalEID> eidsToApply = myEIDHelper.getExternalEid(theSourceResource);\n-\t\tif (eidsToApply.isEmpty()) {\n-\t\t\teidsToApply.add(myEIDHelper.createHapiEid());\n-\t\t}\n-\t\tswitch (myFhirContext.getVersion().getVersion()) {\n-\t\t\tcase R4:\n-\t\t\t\tPerson personR4 = new Person();\n+\tprivate void cloneEidIntoResource(BaseRuntimeChildDefinition theIdentifierDefinition, IBase theEid, IBase theResourceToCloneEidInto) {\n+\t\t// FHIR choice types - fields within fhir where we have a choice of ids\n+\t\tBaseRuntimeElementCompositeDefinition<?> childIdentifier = (BaseRuntimeElementCompositeDefinition<?>) theIdentifierDefinition.getChildByName(FIELD_NAME_IDENTIFIER);\n+\t\tIBase resourceNewIdentifier = childIdentifier.newInstance();\n \n-\t\t\t\tpersonR4.setActive(true);\n-\t\t\t\teidsToApply.forEach(eid -> personR4.addIdentifier(eid.toR4()));\n-\t\t\t\tpersonR4.getMeta().addTag((Coding) buildEmpiManagedTag());\n-\t\t\t\tcopyEmpiTargetDataIntoPerson(theSourceResource, personR4, true);\n-\t\t\t\treturn personR4;\n-\t\t\tcase DSTU3:\n-\t\t\t\torg.hl7.fhir.dstu3.model.Person personDstu3 = new org.hl7.fhir.dstu3.model.Person();\n-\t\t\t\tpersonDstu3.setActive(true);\n-\t\t\t\teidsToApply.forEach(eid -> personDstu3.addIdentifier(eid.toDSTU3()));\n-\t\t\t\tpersonDstu3.getMeta().addTag((org.hl7.fhir.dstu3.model.Coding) buildEmpiManagedTag());\n-\t\t\t\tcopyEmpiTargetDataIntoPerson(theSourceResource, personDstu3, true);\n-\t\t\t\treturn personDstu3;\n-\t\t\tdefault:\n-\t\t\t\tthrow new UnsupportedOperationException(\"Version not supported: \" + myFhirContext.getVersion().getVersion());\n-\t\t}\n+\t\tFhirTerser terser = myFhirContext.newTerser();\n+\t\tterser.cloneInto(theEid, resourceNewIdentifier, true);\n+\t\ttheIdentifierDefinition.getMutator().addValue(theResourceToCloneEidInto, resourceNewIdentifier);\n \t}\n \n \t/**\n-\t * This will copy over all attributes that are copiable from Patient/Practitioner to Person.\n-\t *\n-\t * @param theBaseResource The incoming {@link Patient} or {@link Practitioner} who's data we want to copy into Person.\n-\t * @param thePerson       The incoming {@link Person} who needs to have their data updated.\n-\t * @param theAllowOverwriting If enabled, will overwrite existing values on the person. Otherwise, will set them only if they are currently empty/null.\n+\t * Clones specified composite field (collection). Composite field values must confirm to the collections\n+\t * contract.\n \t *\n+\t * @param theFrom Resource to clone the specified filed from\n+\t * @param theTo Resource to clone the specified filed to\n+\t * @param field Field name to be copied\n \t */\n-\tprivate void copyEmpiTargetDataIntoPerson(IBaseResource theBaseResource, IBaseResource thePerson, Boolean theAllowOverwriting) {\n-\t\tswitch (myFhirContext.getVersion().getVersion()) {\n-\t\t\tcase R4:\n-\t\t\t\tcopyR4TargetInformation(theBaseResource, thePerson, theAllowOverwriting);\n-\t\t\t\tbreak;\n-\t\t\tcase DSTU3:\n-\t\t\t\tcopyDSTU3TargetInformation(theBaseResource, thePerson, theAllowOverwriting);\n-\t\t\t\tbreak;\n-\t\t\tdefault:\n-\t\t\t\tthrow new UnsupportedOperationException(\"Version not supported: \" + myFhirContext.getVersion().getVersion());\n+\tprivate void cloneCompositeField(IBaseResource theFrom, IBaseResource theTo, String field) {\n+\t\tFhirTerser terser = myFhirContext.newTerser();\n+\n+\t\tRuntimeResourceDefinition definition = myFhirContext.getResourceDefinition(theFrom);\n+\t\tBaseRuntimeChildDefinition childDefinition = definition.getChildByName(field);\n+\n+\t\tIFhirPath fhirPath = myFhirContext.newFhirPath();\n+\t\tList<IBase> theFromFieldValues = childDefinition.getAccessor().getValues(theFrom);\n+\t\tList<IBase> theToFieldValues = childDefinition.getAccessor().getValues(theTo);\n+\n+\t\tfor (IBase theFromFieldValue: theFromFieldValues) {\n+\t\t\tif (contains(theFromFieldValue, theToFieldValues)) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\n+\t\t\tBaseRuntimeElementCompositeDefinition<?> compositeDefinition = (BaseRuntimeElementCompositeDefinition<?>) childDefinition.getChildByName(field);\n+\t\t\tIBase newFieldValue = compositeDefinition.newInstance();\n+\t\t\tterser.cloneInto(theFromFieldValue, newFieldValue, true);\n+\n+\t\t\ttheToFieldValues.add(newFieldValue);\n \t\t}\n \t}\n \n-\tprivate void copyR4TargetInformation(IBaseResource theBaseResource, IBaseResource thePerson, boolean theAllowOverwriting) {\n-\t\tPerson person = (Person) thePerson;\n-\t\tswitch (myFhirContext.getResourceType(theBaseResource)) {\n-\t\t\tcase \"Patient\":\n-\t\t\t\tPatient patient = (Patient) theBaseResource;\n-\t\t\t\tif (theAllowOverwriting || person.getName().isEmpty()) {\n-\t\t\t\t\tperson.setName(patient.getName());\n-\t\t\t\t}\n-\t\t\t\tif (theAllowOverwriting || person.getAddress().isEmpty()) {\n-\t\t\t\t\tperson.setAddress(patient.getAddress());\n-\t\t\t\t}\n-\t\t\t\tif (theAllowOverwriting || person.getTelecom().isEmpty()) {\n-\t\t\t\t\tperson.setTelecom(patient.getTelecom());\n-\t\t\t\t}\n-\t\t\t\tif (theAllowOverwriting || person.getBirthDate() == null) {\n-\t\t\t\t\tperson.setBirthDate(patient.getBirthDate());\n-\t\t\t\t}\n-\t\t\t\tif (theAllowOverwriting || person.getGender() == null) {\n-\t\t\t\t\tperson.setGender(patient.getGender());\n-\t\t\t\t}\n-\t\t\t\tif (theAllowOverwriting || person.getPhoto().isEmpty()) {\n-\t\t\t\t\tperson.setPhoto(patient.getPhotoFirstRep());\n-\t\t\t\t}\n-\t\t\t\tbreak;\n-\t\t\tcase \"Practitioner\":\n-\t\t\t\tPractitioner practitioner = (Practitioner) theBaseResource;\n-\t\t\t\tif (theAllowOverwriting || person.getName().isEmpty()) {\n-\t\t\t\t\tperson.setName(practitioner.getName());\n-\t\t\t\t}\n-\t\t\t\tif (theAllowOverwriting || person.getAddress().isEmpty()) {\n-\t\t\t\t\tperson.setAddress(practitioner.getAddress());\n-\t\t\t\t}\n-\t\t\t\tif (theAllowOverwriting || person.getTelecom().isEmpty()) {\n-\t\t\t\t\tperson.setTelecom(practitioner.getTelecom());\n-\t\t\t\t}\n-\t\t\t\tif (theAllowOverwriting || person.getBirthDate() == null) {\n-\t\t\t\t\tperson.setBirthDate(practitioner.getBirthDate());\n-\t\t\t\t}\n-\t\t\t\tif (theAllowOverwriting || person.getGender() == null) {\n-\t\t\t\t\tperson.setGender(practitioner.getGender());\n-\t\t\t\t}\n-\t\t\t\tif (theAllowOverwriting || person.getPhoto().isEmpty()) {\n-\t\t\t\t\tperson.setPhoto(practitioner.getPhotoFirstRep());\n-\t\t\t\t}\n-\t\t\t\tbreak;\n-\t\t\tdefault:\n-\t\t\t\tthrow new UnsupportedOperationException(\"EMPI targets are limited to Practitioner/Patient. This is a : \" + myFhirContext.getResourceType(theBaseResource));\n-\t\t}\n+\tprivate boolean contains(IBase theItem, List<IBase> theItems) {\n+\t\tPrimitiveTypeComparingPredicate predicate = new PrimitiveTypeComparingPredicate();\n+\t\treturn theItems.stream().filter(i -> {\n+\t\t\treturn predicate.test(i, theItem);\n+\t\t}).findFirst().isPresent();\n \t}\n \n-\tprivate void copyDSTU3TargetInformation(IBaseResource theBaseResource, IBaseResource thePerson, boolean theAllowOverwriting) {\n-\t\torg.hl7.fhir.dstu3.model.Person person = (org.hl7.fhir.dstu3.model.Person) thePerson;\n-\t\tswitch (myFhirContext.getResourceType(theBaseResource)) {\n-\t\t\tcase \"Patient\":\n-\t\t\t\torg.hl7.fhir.dstu3.model.Patient patient = (org.hl7.fhir.dstu3.model.Patient) theBaseResource;\n+\tprivate void cloneAllExternalEidsIntoNewSourceResource(BaseRuntimeChildDefinition theSourceResourceIdentifier, IBase theSourceResource, IBase theNewSourceResource) {\n+\t\t// FHIR choice types - fields within fhir where we have a choice of ids\n+\t\tIFhirPath fhirPath = myFhirContext.newFhirPath();\n+\t\tList<IBase> sourceResourceIdentifiers = theSourceResourceIdentifier.getAccessor().getValues(theSourceResource);\n \n-\t\t\t\tif (theAllowOverwriting || person.getName().isEmpty()) {\n-\t\t\t\t\tperson.setName(patient.getName());\n-\t\t\t\t}\n-\t\t\t\tif (theAllowOverwriting || person.getAddress().isEmpty()) {\n-\t\t\t\t\tperson.setAddress(patient.getAddress());\n-\t\t\t\t}\n-\t\t\t\tif (theAllowOverwriting || person.getTelecom().isEmpty()) {\n-\t\t\t\t\tperson.setTelecom(patient.getTelecom());\n-\t\t\t\t}\n-\t\t\t\tif (theAllowOverwriting || person.getBirthDate() == null ) {\n-\t\t\t\t\tperson.setBirthDate(patient.getBirthDate());\n-\t\t\t\t}\n-\t\t\t\tif (theAllowOverwriting || person.getGender() == null ) {\n-\t\t\t\t\tperson.setGender(patient.getGender());\n+\t\tfor (IBase base : sourceResourceIdentifiers) {\n+\t\t\tOptional<IPrimitiveType> system = fhirPath.evaluateFirst(base, \"system\", IPrimitiveType.class);\n+\t\t\tif (system.isPresent()) {\n+\t\t\t\tString empiSystem = myEmpiConfig.getEmpiRules().getEnterpriseEIDSystem();\n+\t\t\t\tString baseSystem = system.get().getValueAsString();\n+\t\t\t\tif (Objects.equals(baseSystem, empiSystem)) {\n+\t\t\t\t\tcloneEidIntoResource(theSourceResourceIdentifier, base, theNewSourceResource);\n+\t\t\t\t} else if (ourLog.isDebugEnabled()) {\n+\t\t\t\t\tourLog.debug(String.format(\"System %s differs from system in the EMPI rules %s\", baseSystem, empiSystem));\n \t\t\t\t}\n-\t\t\t\tif (theAllowOverwriting || person.getPhoto().isEmpty()) {\n-\t\t\t\t\tperson.setPhoto(patient.getPhotoFirstRep());\n-\t\t\t\t}\n-\t\t\t\tbreak;\n-\t\t\tcase \"Practitioner\":\n-\t\t\t\torg.hl7.fhir.dstu3.model.Practitioner practitioner = (org.hl7.fhir.dstu3.model.Practitioner) theBaseResource;\n-\t\t\t\tif (theAllowOverwriting || person.getName().isEmpty()) {\n-\t\t\t\t\tperson.setName(practitioner.getName());\n-\t\t\t\t}\n-\t\t\t\tif (theAllowOverwriting || person.getAddress().isEmpty()) {\n-\t\t\t\t\tperson.setAddress(practitioner.getAddress());\n-\t\t\t\t}\n-\t\t\t\tif (theAllowOverwriting || person.getTelecom().isEmpty()) {\n-\t\t\t\t\tperson.setTelecom(practitioner.getTelecom());\n-\t\t\t\t}\n-\t\t\t\tif (theAllowOverwriting || person.getBirthDate() == null) {\n-\t\t\t\t\tperson.setBirthDate(practitioner.getBirthDate());\n-\t\t\t\t}\n-\t\t\t\tif (theAllowOverwriting || person.getGender() == null) {\n-\t\t\t\t\tperson.setGender(practitioner.getGender());\n-\t\t\t\t}\n-\t\t\t\tif (theAllowOverwriting || person.getPhoto().isEmpty()) {\n-\t\t\t\t\tperson.setPhoto(practitioner.getPhotoFirstRep());\n-\t\t\t\t}\n-\t\t\t\tbreak;\n-\t\t\tdefault:\n-\t\t\t\tthrow new UnsupportedOperationException(\"EMPI targets are limited to Practitioner/Patient. This is a : \" + myFhirContext.getResourceType(theBaseResource));\n+\t\t\t} else {\n+\t\t\t\tourLog.debug(\"System is missing, skipping\");\n+\t\t\t}\n \t\t}\n \t}\n \n-\tprivate IBaseCoding buildEmpiManagedTag() {\n-\t\tswitch (myFhirContext.getVersion().getVersion()) {\n-\t\t\tcase R4:\n-\t\t\t\tCoding empiManagedCoding = new Coding();\n-\t\t\t\tempiManagedCoding.setSystem(EmpiConstants.SYSTEM_EMPI_MANAGED);\n-\t\t\t\tempiManagedCoding.setCode(EmpiConstants.CODE_HAPI_EMPI_MANAGED);\n-\t\t\t\tempiManagedCoding.setDisplay(EmpiConstants.DISPLAY_HAPI_EMPI_MANAGED);\n-\t\t\t\treturn empiManagedCoding;\n-\t\t\tcase DSTU3:\n-\t\t\t\torg.hl7.fhir.dstu3.model.Coding empiManagedCodingDstu3 = new org.hl7.fhir.dstu3.model.Coding();\n-\t\t\t\tempiManagedCodingDstu3.setSystem(EmpiConstants.SYSTEM_EMPI_MANAGED);\n-\t\t\t\tempiManagedCodingDstu3.setCode(EmpiConstants.CODE_HAPI_EMPI_MANAGED);\n-\t\t\t\tempiManagedCodingDstu3.setDisplay(EmpiConstants.DISPLAY_HAPI_EMPI_MANAGED);\n-\t\t\t\treturn empiManagedCodingDstu3;\n-\t\t\tdefault:\n-\t\t\t\tthrow new UnsupportedOperationException(\"Version not supported: \" + myFhirContext.getVersion().getVersion());\n-\n+\tprivate void validateContextSupported() {\n+\t\tFhirVersionEnum fhirVersion = myFhirContext.getVersion().getVersion();\n+\t\tif (fhirVersion == R4 || fhirVersion == DSTU3) {\n+\t\t\treturn;\n \t\t}\n+\t\tthrow new UnsupportedOperationException(\"Version not supported: \" + myFhirContext.getVersion().getVersion());\n \t}\n \n \t/**\n \t * Update a Person's EID based on the incoming target resource. If the incoming resource has an external EID, it is applied\n \t * to the Person, unless that person already has an external EID which does not match, in which case throw {@link IllegalArgumentException}\n-\t *\n+\t * <p>\n \t * If running in multiple EID mode, then incoming EIDs are simply added to the Person without checking for matches.\n \t *\n-\t * @param thePerson     The person to update the external EID on.\n-\t * @param theEmpiTarget The target we will retrieve the external EID from.\n+\t * @param theSourceResource The person to update the external EID on.\n+\t * @param theTargetResource The target we will retrieve the external EID from.\n \t * @return the modified {@link IBaseResource} representing the person.\n \t */\n-\tpublic IAnyResource updatePersonExternalEidFromEmpiTarget(IAnyResource thePerson, IAnyResource theEmpiTarget, EmpiTransactionContext theEmpiTransactionContext) {\n+\tpublic IAnyResource updateSourceResourceExternalEidFromTargetResource(IAnyResource theSourceResource, IAnyResource", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 494}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQzMTU2Nw==", "bodyText": "Rename to ResourceHelper or GoldenResourceHelper?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525431567", "createdAt": "2020-11-17T19:31:05Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/util/PersonHelper.java", "diffHunk": "@@ -20,51 +20,60 @@\n  * #L%\n  */\n \n+import ca.uhn.fhir.context.BaseRuntimeChildDefinition;\n+import ca.uhn.fhir.context.BaseRuntimeElementCompositeDefinition;\n import ca.uhn.fhir.context.FhirContext;\n-import ca.uhn.fhir.empi.api.EmpiConstants;\n+import ca.uhn.fhir.context.FhirVersionEnum;\n+import ca.uhn.fhir.context.RuntimeResourceDefinition;\n+import ca.uhn.fhir.empi.api.IEmpiLinkQuerySvc;\n import ca.uhn.fhir.empi.api.IEmpiSettings;\n import ca.uhn.fhir.empi.log.Logs;\n import ca.uhn.fhir.empi.model.CanonicalEID;\n import ca.uhn.fhir.empi.model.CanonicalIdentityAssuranceLevel;\n-import ca.uhn.fhir.empi.model.EmpiTransactionContext;\n-import org.apache.commons.lang3.StringUtils;\n+import ca.uhn.fhir.empi.model.MdmTransactionContext;\n+import ca.uhn.fhir.fhirpath.IFhirPath;\n+import ca.uhn.fhir.util.FhirTerser;\n import org.hl7.fhir.instance.model.api.IAnyResource;\n+import org.hl7.fhir.instance.model.api.IBase;\n import org.hl7.fhir.instance.model.api.IBaseBackboneElement;\n-import org.hl7.fhir.instance.model.api.IBaseCoding;\n-import org.hl7.fhir.instance.model.api.IBaseReference;\n import org.hl7.fhir.instance.model.api.IBaseResource;\n import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.instance.model.api.IPrimitiveType;\n import org.hl7.fhir.r4.model.Address;\n-import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.BooleanType;\n import org.hl7.fhir.r4.model.ContactPoint;\n import org.hl7.fhir.r4.model.HumanName;\n import org.hl7.fhir.r4.model.Identifier;\n-import org.hl7.fhir.r4.model.Patient;\n import org.hl7.fhir.r4.model.Person;\n-import org.hl7.fhir.r4.model.Practitioner;\n import org.hl7.fhir.r4.model.Reference;\n import org.slf4j.Logger;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n-import javax.annotation.Nonnull;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Objects;\n import java.util.Optional;\n import java.util.function.BiPredicate;\n import java.util.function.Function;\n import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n+\n+import static ca.uhn.fhir.context.FhirVersionEnum.DSTU3;\n+import static ca.uhn.fhir.context.FhirVersionEnum.R4;\n \n @Service\n public class PersonHelper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ0MzI0Mw==", "bodyText": "rename person to golden resource", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525443243", "createdAt": "2020-11-17T19:42:11Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/util/PersonHelper.java", "diffHunk": "@@ -458,26 +355,20 @@ private void addIdentifierIfAbsent(org.hl7.fhir.dstu3.model.Person thePerson, or\n \t\t}\n \t}\n \n-\tprivate void addIdentifierIfAbsent(Person thePerson, Identifier theIdentifier) {\n-\t\tOptional<Identifier> first = thePerson.getIdentifier().stream().filter(identifier -> identifier.getSystem().equals(theIdentifier.getSystem())).filter(identifier -> identifier.getValue().equals(theIdentifier.getValue())).findFirst();\n-\t\tif (first.isPresent()) {\n-\t\t\treturn;\n-\t\t} else {\n-\t\t\tthePerson.addIdentifier(theIdentifier);\n-\t\t}\n-\t}\n+\tpublic void mergeFields(IBaseResource theFromPerson, IBaseResource theToPerson) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 655}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ0Mzc3OA==", "bodyText": "This can be removed?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525443778", "createdAt": "2020-11-17T19:42:36Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/util/PersonHelper.java", "diffHunk": "@@ -585,75 +479,35 @@ public void setLinks(IAnyResource thePersonResource, List<IBaseBackboneElement>\n \t}\n \n \tprivate void setLinksDstu3(IAnyResource thePersonResource, List<IBaseBackboneElement> theLinks) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 715}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ0OTg4Mw==", "bodyText": "This test can be removed - linking is done via EmpiLink class", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525449883", "createdAt": "2020-11-17T19:47:25Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-server-empi/src/test/java/ca/uhn/fhir/empi/svc/PersonHelperDSTU3Test.java", "diffHunk": "@@ -33,52 +35,55 @@ public void testGetLinks() {\n \t\tperson.addLink().setTarget(new Reference(PATIENT_1));\n \t\tperson.addLink().setTarget(new Reference(PATIENT_2));\n \n-\t\t{\n-\t\t\tList<IIdType> links = MY_PERSON_HELPER.getLinkIds(person).collect(Collectors.toList());\n-\t\t\tassertEquals(2, links.size());\n-\t\t\tassertEquals(PATIENT_1, links.get(0).getValue());\n-\t\t\tassertEquals(PATIENT_2, links.get(1).getValue());\n-\t\t\tassertTrue(MY_PERSON_HELPER.containsLinkTo(person, new IdDt(PATIENT_1)));\n-\t\t\tassertTrue(MY_PERSON_HELPER.containsLinkTo(person, new IdDt(PATIENT_2)));\n-\t\t\tassertFalse(MY_PERSON_HELPER.containsLinkTo(person, new IdDt(PATIENT_BAD)));\n-\t\t}\n-\n-\t\t{\n-\t\t\tMY_PERSON_HELPER.removeLink(person, new IdDt(PATIENT_1), createDummyContext());\n-\t\t\tList<IIdType> links = MY_PERSON_HELPER.getLinkIds(person).collect(Collectors.toList());\n-\t\t\tassertEquals(1, links.size());\n-\t\t\tassertEquals(PATIENT_2, links.get(0).getValue());\n+\t\t// TODO NG - check if we need similar functionality in JPA DAO", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ1MDI0NQ==", "bodyText": "Obsolete test", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525450245", "createdAt": "2020-11-17T19:47:44Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-server-empi/src/test/java/ca/uhn/fhir/empi/svc/PersonHelperR4Test.java", "diffHunk": "@@ -30,52 +30,61 @@\n \n \t@Test\n \tpublic void testGetLinks() {\n+\t\t// TODO NG - Revisit this code checking if we need to keep it - if yes - push to the JPA level, delete otherwise", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ1MTIyNg==", "bodyText": "Rename to MDM", "url": "https://github.com/hapifhir/hapi-fhir/pull/2177#discussion_r525451226", "createdAt": "2020-11-17T19:48:38Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-server/src/main/java/ca/uhn/fhir/rest/server/provider/ProviderConstants.java", "diffHunk": "@@ -62,30 +62,35 @@\n \t * EMPI Operations\n \t */\n \tpublic static final String EMPI_MATCH = \"$match\";\n-\tpublic static final String EMPI_MATCH_RESOURCE = \"resource\";\n+\t//TODO GGG MDM: implement a server-level MDM match to complement the FHIR-spec $match for /Patient\n+\tpublic static final String MDM_MATCH = \"$mdm-match\";\n+\tpublic static final String MDM_MATCH_RESOURCE = \"resource\";\n+\tpublic static final String MDM_RESOURCE_TYPE = \"resourceType\";\n \n-\tpublic static final String EMPI_MERGE_PERSONS = \"$empi-merge-persons\";\n-\tpublic static final String EMPI_MERGE_PERSONS_FROM_PERSON_ID = \"fromPersonId\";\n-\tpublic static final String EMPI_MERGE_PERSONS_TO_PERSON_ID = \"toPersonId\";\n+\t//TODO GGG MDM: rename all these vars\n+\tpublic static final String MDM_MERGE_GOLDEN_RESOURCES = \"$mdm-merge-golden-resources\";\n+\tpublic static final String MDM_MERGE_GR_FROM_GOLDEN_RESOURCE_ID = \"fromGoldenResourceId\";\n+\tpublic static final String MDM_MERGE_GR_TO_GOLDEN_RESOURCE_ID = \"toGoldenResourceId\";\n \n-\tpublic static final String EMPI_UPDATE_LINK = \"$empi-update-link\";\n-\tpublic static final String EMPI_UPDATE_LINK_PERSON_ID = \"personId\";\n-\tpublic static final String EMPI_UPDATE_LINK_TARGET_ID = \"targetId\";\n-\tpublic static final String EMPI_UPDATE_LINK_MATCH_RESULT = \"matchResult\";\n+\tpublic static final String MDM_UPDATE_LINK = \"$mdm-update-link\";\n+\tpublic static final String MDM_UPDATE_LINK_GOLDEN_RESOURCE_ID = \"goldenResourceId\";\n+\tpublic static final String MDM_UPDATE_LINK_RESOURCE_ID = \"resourceId\";\n+\tpublic static final String MDM_UPDATE_LINK_MATCH_RESULT = \"matchResult\";\n \n-\tpublic static final String EMPI_QUERY_LINKS = \"$empi-query-links\";\n-\tpublic static final String EMPI_QUERY_LINKS_PERSON_ID = \"personId\";\n-\tpublic static final String EMPI_QUERY_LINKS_TARGET_ID = \"targetId\";\n+\tpublic static final String MDM_QUERY_LINKS = \"$mdm-query-links\";\n+\tpublic static final String MDM_QUERY_LINKS_GOLDEN_RESOURCE_ID = \"goldenResourceId\";\n+\tpublic static final String MDM_QUERY_LINKS_RESOURCE_ID = \"resourceId\";\n \tpublic static final String EMPI_QUERY_LINKS_MATCH_RESULT = \"matchResult\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805d5b1d6c1c800295cbe99af777b53f6290dd71"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f470c343c56603f4a4ea803f4833267c51c75da8", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/f470c343c56603f4a4ea803f4833267c51c75da8", "committedDate": "2020-11-17T22:22:06Z", "message": "Docs - first pass"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d50687d4c8f11ecd8db3330a8401b47c633cc49", "author": {"user": {"login": "nvg", "name": null}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/6d50687d4c8f11ecd8db3330a8401b47c633cc49", "committedDate": "2020-11-18T18:49:17Z", "message": "Renamed EMPI to MDM in the docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f21220e398e128256dc46aa8ece471daf7f7797", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/1f21220e398e128256dc46aa8ece471daf7f7797", "committedDate": "2020-11-18T20:57:05Z", "message": "Updated MDM create use cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75c0c25d7b08de83b03e5660d63f07d7053d7bb7", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/75c0c25d7b08de83b03e5660d63f07d7053d7bb7", "committedDate": "2020-11-19T00:50:00Z", "message": "remove references to EMPI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d97d4b63a0800a479fd152729b2269f84c1721ef", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/d97d4b63a0800a479fd152729b2269f84c1721ef", "committedDate": "2020-11-19T00:53:21Z", "message": "Merge branch 'gg_20201105-remove-person-references' of github.com:jamesagnew/hapi-fhir into gg_20201105-remove-person-references"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3209faf2fb2090b3590431dba77c27db8a1a4baa", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/3209faf2fb2090b3590431dba77c27db8a1a4baa", "committedDate": "2020-11-19T02:55:29Z", "message": "Rename package and module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b44ae49dd288af7bb42484bbdb3b99c6a88825ed", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/b44ae49dd288af7bb42484bbdb3b99c6a88825ed", "committedDate": "2020-11-19T18:37:45Z", "message": "Removed hardcoded references to the supported MDM types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f11f8a38ac3b54d2efa843fe0616a1a77d4b3bd4", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/f11f8a38ac3b54d2efa843fe0616a1a77d4b3bd4", "committedDate": "2020-11-19T19:23:47Z", "message": "Add licenses"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ad0fa8fda380fa004476a34cb2775f0e2bd5768", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/3ad0fa8fda380fa004476a34cb2775f0e2bd5768", "committedDate": "2020-11-19T19:23:50Z", "message": "Merge branch 'gg_20201105-remove-person-references' of github.com:jamesagnew/hapi-fhir into gg_20201105-remove-person-references"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b62ebe7bd5c9026e117cbef1ab454c1345d9e2d1", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/b62ebe7bd5c9026e117cbef1ab454c1345d9e2d1", "committedDate": "2020-11-19T19:24:26Z", "message": "Merge remote-tracking branch 'origin/master' into 2161-refactor-empi"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "953b662827439bd8de93a718687e034226066ffa", "author": {"user": {"login": "tadgh", "name": "Tadgh"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/953b662827439bd8de93a718687e034226066ffa", "committedDate": "2020-11-19T19:24:51Z", "message": "Merge branch '2161-refactor-empi' into gg_20201105-remove-person-references"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4378df7dcb00762269628f995f065204dd7d5e03", "author": {"user": {"login": "nvg", "name": null}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/4378df7dcb00762269628f995f065204dd7d5e03", "committedDate": "2020-11-19T19:56:18Z", "message": "Removed more EMPI refs from the docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bbe4a3ef733f036fa7136628f193d4bebe7dab5", "author": {"user": {"login": "nvg", "name": null}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/4bbe4a3ef733f036fa7136628f193d4bebe7dab5", "committedDate": "2020-11-19T19:56:31Z", "message": "Merge branch 'gg_20201105-remove-person-references' of https://github.com/jamesagnew/hapi-fhir into gg_20201105-remove-person-references"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f97428d38b0aec2a5bc5927e5907726f9d4f93e", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/5f97428d38b0aec2a5bc5927e5907726f9d4f93e", "committedDate": "2020-11-24T20:50:56Z", "message": "Added schema migration steps for MDM"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03643a7b3cf394c9627a7ec8046db514f1794997", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/03643a7b3cf394c9627a7ec8046db514f1794997", "committedDate": "2020-11-25T22:37:37Z", "message": "Fix for bean scope inconsistenices"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a7dc4e80b9c22532519fff921daeeba99e69949", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/8a7dc4e80b9c22532519fff921daeeba99e69949", "committedDate": "2020-11-27T20:12:21Z", "message": "EMPI to MDM"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36ce84335a175ab2106d380ad6c154e2720f7dbf", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/36ce84335a175ab2106d380ad6c154e2720f7dbf", "committedDate": "2020-11-27T21:53:21Z", "message": "Renamed sourceResource to goldenResource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc2a9e55c550f1764d6538f90797acd2eb0d99b5", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/dc2a9e55c550f1764d6538f90797acd2eb0d99b5", "committedDate": "2020-11-27T21:53:47Z", "message": "Renamed sourceResource to goldenResource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a3b72db17a3a2ad3a03df89be42272a62c5e971", "author": {"user": {"login": "nvg-smile", "name": "Nick Goupinets"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/2a3b72db17a3a2ad3a03df89be42272a62c5e971", "committedDate": "2020-11-27T21:54:04Z", "message": "Merge remote-tracking branch 'origin/master' into gg_20201105-remove-person-references"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3791, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}