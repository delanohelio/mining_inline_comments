{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2MDI1NTk1", "number": 1997, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjo0MToxOVrOER5GcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjo0OTozM1rOER5RaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTk2Nzg0OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/candidate/EmpiCandidateSearchCriteriaBuilderSvc.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjo0MToxOVrOG22VuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzo0MjozN1rOG24P6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2NjU4NQ==", "bodyText": "this doesn't look right to me.  if there are no criteria, then we still need to add the filter to cover the case where there is a filter but no criteria", "url": "https://github.com/hapifhir/hapi-fhir/pull/1997#discussion_r460166585", "createdAt": "2020-07-24T16:41:19Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/candidate/EmpiCandidateSearchCriteriaBuilderSvc.java", "diffHunk": "@@ -43,19 +44,25 @@\n \t * Patient?active=true&name.given=Gary,Grant&name.family=Graham\n \t */\n \t@Nonnull\n-\tpublic Optional<String> buildResourceQueryString(String theResourceType, IAnyResource theResource, List<String> theFilterCriteria, EmpiResourceSearchParamJson resourceSearchParam) {\n+\tpublic Optional<String> buildResourceQueryString(String theResourceType, IAnyResource theResource, List<String> theFilterCriteria, @Nullable EmpiResourceSearchParamJson resourceSearchParam) {\n \t\tList<String> criteria = new ArrayList<>();\n \n-\t\tresourceSearchParam.iterator().forEachRemaining(searchParam -> {\n-\t\t\t//to compare it to all known PERSON objects, using the overlapping search parameters that they have.\n-\t\t\tList<String> valuesFromResourceForSearchParam = myEmpiSearchParamSvc.getValueFromResourceForSearchParam(theResource, searchParam);\n-\t\t\tif (!valuesFromResourceForSearchParam.isEmpty()) {\n-\t\t\t\tcriteria.add(buildResourceMatchQuery(searchParam, valuesFromResourceForSearchParam));\n+\t\t// If there are candidate search params, then make use of them, otherwise, search with only the filters.\n+\t\tif (resourceSearchParam != null) {\n+\t\t\tresourceSearchParam.iterator().forEachRemaining(searchParam -> {\n+\t\t\t\t//to compare it to all known PERSON objects, using the overlapping search parameters that they have.\n+\t\t\t\tList<String> valuesFromResourceForSearchParam = myEmpiSearchParamSvc.getValueFromResourceForSearchParam(theResource, searchParam);\n+\t\t\t\tif (!valuesFromResourceForSearchParam.isEmpty()) {\n+\t\t\t\t\tcriteria.add(buildResourceMatchQuery(searchParam, valuesFromResourceForSearchParam));\n+\t\t\t\t}\n+\t\t\t});\n+\n+\t\t\tif (criteria.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d0ed3ac19b5ef5ba777e1009bfa49dfa49e1f7"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3NDE3Mw==", "bodyText": "This isn't that case. This logical block says:  If there are candidate search params, but the resource has no value for any of them, leave early. That's what this block is doing. The case where there are no candidate search params is covered by the null check on L51", "url": "https://github.com/hapifhir/hapi-fhir/pull/1997#discussion_r460174173", "createdAt": "2020-07-24T16:55:12Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/candidate/EmpiCandidateSearchCriteriaBuilderSvc.java", "diffHunk": "@@ -43,19 +44,25 @@\n \t * Patient?active=true&name.given=Gary,Grant&name.family=Graham\n \t */\n \t@Nonnull\n-\tpublic Optional<String> buildResourceQueryString(String theResourceType, IAnyResource theResource, List<String> theFilterCriteria, EmpiResourceSearchParamJson resourceSearchParam) {\n+\tpublic Optional<String> buildResourceQueryString(String theResourceType, IAnyResource theResource, List<String> theFilterCriteria, @Nullable EmpiResourceSearchParamJson resourceSearchParam) {\n \t\tList<String> criteria = new ArrayList<>();\n \n-\t\tresourceSearchParam.iterator().forEachRemaining(searchParam -> {\n-\t\t\t//to compare it to all known PERSON objects, using the overlapping search parameters that they have.\n-\t\t\tList<String> valuesFromResourceForSearchParam = myEmpiSearchParamSvc.getValueFromResourceForSearchParam(theResource, searchParam);\n-\t\t\tif (!valuesFromResourceForSearchParam.isEmpty()) {\n-\t\t\t\tcriteria.add(buildResourceMatchQuery(searchParam, valuesFromResourceForSearchParam));\n+\t\t// If there are candidate search params, then make use of them, otherwise, search with only the filters.\n+\t\tif (resourceSearchParam != null) {\n+\t\t\tresourceSearchParam.iterator().forEachRemaining(searchParam -> {\n+\t\t\t\t//to compare it to all known PERSON objects, using the overlapping search parameters that they have.\n+\t\t\t\tList<String> valuesFromResourceForSearchParam = myEmpiSearchParamSvc.getValueFromResourceForSearchParam(theResource, searchParam);\n+\t\t\t\tif (!valuesFromResourceForSearchParam.isEmpty()) {\n+\t\t\t\t\tcriteria.add(buildResourceMatchQuery(searchParam, valuesFromResourceForSearchParam));\n+\t\t\t\t}\n+\t\t\t});\n+\n+\t\t\tif (criteria.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2NjU4NQ=="}, "originalCommit": {"oid": "31d0ed3ac19b5ef5ba777e1009bfa49dfa49e1f7"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE5Nzg2NA==", "bodyText": "I've removed the null check and instead just do an emptiness check", "url": "https://github.com/hapifhir/hapi-fhir/pull/1997#discussion_r460197864", "createdAt": "2020-07-24T17:42:37Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/candidate/EmpiCandidateSearchCriteriaBuilderSvc.java", "diffHunk": "@@ -43,19 +44,25 @@\n \t * Patient?active=true&name.given=Gary,Grant&name.family=Graham\n \t */\n \t@Nonnull\n-\tpublic Optional<String> buildResourceQueryString(String theResourceType, IAnyResource theResource, List<String> theFilterCriteria, EmpiResourceSearchParamJson resourceSearchParam) {\n+\tpublic Optional<String> buildResourceQueryString(String theResourceType, IAnyResource theResource, List<String> theFilterCriteria, @Nullable EmpiResourceSearchParamJson resourceSearchParam) {\n \t\tList<String> criteria = new ArrayList<>();\n \n-\t\tresourceSearchParam.iterator().forEachRemaining(searchParam -> {\n-\t\t\t//to compare it to all known PERSON objects, using the overlapping search parameters that they have.\n-\t\t\tList<String> valuesFromResourceForSearchParam = myEmpiSearchParamSvc.getValueFromResourceForSearchParam(theResource, searchParam);\n-\t\t\tif (!valuesFromResourceForSearchParam.isEmpty()) {\n-\t\t\t\tcriteria.add(buildResourceMatchQuery(searchParam, valuesFromResourceForSearchParam));\n+\t\t// If there are candidate search params, then make use of them, otherwise, search with only the filters.\n+\t\tif (resourceSearchParam != null) {\n+\t\t\tresourceSearchParam.iterator().forEachRemaining(searchParam -> {\n+\t\t\t\t//to compare it to all known PERSON objects, using the overlapping search parameters that they have.\n+\t\t\t\tList<String> valuesFromResourceForSearchParam = myEmpiSearchParamSvc.getValueFromResourceForSearchParam(theResource, searchParam);\n+\t\t\t\tif (!valuesFromResourceForSearchParam.isEmpty()) {\n+\t\t\t\t\tcriteria.add(buildResourceMatchQuery(searchParam, valuesFromResourceForSearchParam));\n+\t\t\t\t}\n+\t\t\t});\n+\n+\t\t\tif (criteria.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2NjU4NQ=="}, "originalCommit": {"oid": "31d0ed3ac19b5ef5ba777e1009bfa49dfa49e1f7"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTk2OTcwOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/candidate/EmpiCandidateSearchSvc.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjo0MTo1NFrOG22W6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjo0MTo1NFrOG22W6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2Njg4OQ==", "bodyText": "is it possible for candidateSearchParams to ever be null?  I thought we validated this on json deserialization, but I could be wrong.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1997#discussion_r460166889", "createdAt": "2020-07-24T16:41:54Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/candidate/EmpiCandidateSearchSvc.java", "diffHunk": "@@ -75,18 +75,23 @@ public EmpiCandidateSearchSvc() {\n \t */\n \tpublic Collection<IAnyResource> findCandidates(String theResourceType, IAnyResource theResource) {\n \t\tMap<Long, IAnyResource> matchedPidsToResources = new HashMap<>();\n-\n \t\tList<EmpiFilterSearchParamJson> filterSearchParams = myEmpiConfig.getEmpiRules().getCandidateFilterSearchParams();\n-\n \t\tList<String> filterCriteria = buildFilterQuery(filterSearchParams, theResourceType);\n+\t\tList<EmpiResourceSearchParamJson> candidateSearchParams = myEmpiConfig.getEmpiRules().getCandidateSearchParams();\n \n-\t\tfor (EmpiResourceSearchParamJson resourceSearchParam : myEmpiConfig.getEmpiRules().getCandidateSearchParams()) {\n+\t\t//If there are zero EmpiResourceSearchParamJson, we end up only making a single search, otherwise we\n+\t\t//must perform one search per EmpiResourceSearchParamJson.\n+\t\tif (candidateSearchParams == null || candidateSearchParams.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d0ed3ac19b5ef5ba777e1009bfa49dfa49e1f7"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTk5NTkyOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/svc/EmpiCandidateSearchCriteriaBuilderSvcTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjo0OTozM1rOG22nDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjo0OTozM1rOG22nDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3MTAyMA==", "bodyText": "these two tests definitely seem to cover the key issue", "url": "https://github.com/hapifhir/hapi-fhir/pull/1997#discussion_r460171020", "createdAt": "2020-07-24T16:49:33Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/svc/EmpiCandidateSearchCriteriaBuilderSvcTest.java", "diffHunk": "@@ -67,4 +69,21 @@ public void testIdentifier() {\n \t\tassertTrue(result.isPresent());\n \t\tassertEquals(result.get(), \"Patient?identifier=urn:oid:1.2.36.146.595.217.0.1|12345\");\n \t}\n+\n+\t@Test\n+\tpublic void testOmittingCandidateSearchParamsIsAllowed() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d0ed3ac19b5ef5ba777e1009bfa49dfa49e1f7"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1763, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}