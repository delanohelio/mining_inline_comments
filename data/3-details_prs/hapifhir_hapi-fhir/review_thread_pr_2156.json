{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0MDk2NzIx", "number": 2156, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNDoyOToxMFrOE01PTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNDozMDo0MlrOE01SaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzODMzNjc3OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/api/EmpiMatchOutcome.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNDoyOToxMFrOHsxTdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNzo1OTozNVrOHs6bMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcwNzE5MA==", "bodyText": "Add a getter for myEmpiRuleCount", "url": "https://github.com/hapifhir/hapi-fhir/pull/2156#discussion_r516707190", "createdAt": "2020-11-03T14:29:10Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/api/EmpiMatchOutcome.java", "diffHunk": "@@ -99,6 +105,19 @@ public boolean isEidMatch() {\n \t\treturn myEidMatch;\n \t}\n \n+\t/**\n+\t * Sets the number of EMPI rules checked for this match outcome\n+\t *\n+\t * @param theEmpiRuleCount\n+\t * \tNumber of EMPI rules that were checked for this match outcome\n+\t * @return\n+\t * \tReturns this instance\n+\t */\n+\tpublic EmpiMatchOutcome setEmpiRuleCount(int theEmpiRuleCount) {\n+\t\tmyEmpiRuleCount = theEmpiRuleCount;\n+\t\treturn this;\n+\t}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52e8761701c1c02e9a7b52ba731c212afb2d4c3b"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg1NjYyNg==", "bodyText": "Thank you, done.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2156#discussion_r516856626", "createdAt": "2020-11-03T17:59:35Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/api/EmpiMatchOutcome.java", "diffHunk": "@@ -99,6 +105,19 @@ public boolean isEidMatch() {\n \t\treturn myEidMatch;\n \t}\n \n+\t/**\n+\t * Sets the number of EMPI rules checked for this match outcome\n+\t *\n+\t * @param theEmpiRuleCount\n+\t * \tNumber of EMPI rules that were checked for this match outcome\n+\t * @return\n+\t * \tReturns this instance\n+\t */\n+\tpublic EmpiMatchOutcome setEmpiRuleCount(int theEmpiRuleCount) {\n+\t\tmyEmpiRuleCount = theEmpiRuleCount;\n+\t\treturn this;\n+\t}\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcwNzE5MA=="}, "originalCommit": {"oid": "52e8761701c1c02e9a7b52ba731c212afb2d4c3b"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzODM0NDczOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/api/EmpiMatchOutcome.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNDozMDo0MlrOHsxYTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxODowNDoxOFrOHs6llw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcwODQzMQ==", "bodyText": "This should be impossible now, no? e.g. 5 rules, all match, 5/5 == 1.0. I appreciate the gate, but I'm worried it may be masking potential insidious bugs. A score of >1 should be an error yeah?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2156#discussion_r516708431", "createdAt": "2020-11-03T14:30:42Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/api/EmpiMatchOutcome.java", "diffHunk": "@@ -112,15 +131,15 @@ public EmpiMatchOutcome setEidMatch(boolean theEidMatch) {\n \t * \tReturns the normalized score\n \t */\n \tpublic Double getNormalizedScore() {\n-\t\tif (vector == 0) {\n+\t\tif (myEmpiRuleCount == 0) {\n \t\t\treturn 0.0;\n-\t\t} else if (score > vector) {\n-\t\t\treturn 1.0;\n \t\t}\n \n-\t\tdouble retVal = score / vector;\n+\t\tdouble retVal = score / myEmpiRuleCount;\n \t\tif (retVal < 0) {\n \t\t\tretVal = 0.0;\n+\t\t} else if (retVal > 1.0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52e8761701c1c02e9a7b52ba731c212afb2d4c3b"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcxMTc3NQ==", "bodyText": "Or at least normalized down with a big warning log if we don't want to call it an error", "url": "https://github.com/hapifhir/hapi-fhir/pull/2156#discussion_r516711775", "createdAt": "2020-11-03T14:34:53Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/api/EmpiMatchOutcome.java", "diffHunk": "@@ -112,15 +131,15 @@ public EmpiMatchOutcome setEidMatch(boolean theEidMatch) {\n \t * \tReturns the normalized score\n \t */\n \tpublic Double getNormalizedScore() {\n-\t\tif (vector == 0) {\n+\t\tif (myEmpiRuleCount == 0) {\n \t\t\treturn 0.0;\n-\t\t} else if (score > vector) {\n-\t\t\treturn 1.0;\n \t\t}\n \n-\t\tdouble retVal = score / vector;\n+\t\tdouble retVal = score / myEmpiRuleCount;\n \t\tif (retVal < 0) {\n \t\t\tretVal = 0.0;\n+\t\t} else if (retVal > 1.0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcwODQzMQ=="}, "originalCommit": {"oid": "52e8761701c1c02e9a7b52ba731c212afb2d4c3b"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg1OTI4Nw==", "bodyText": "Makes perfect sense. Current code adds unnecessary complexity. Updated", "url": "https://github.com/hapifhir/hapi-fhir/pull/2156#discussion_r516859287", "createdAt": "2020-11-03T18:04:18Z", "author": {"login": "nvg-smile"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/api/EmpiMatchOutcome.java", "diffHunk": "@@ -112,15 +131,15 @@ public EmpiMatchOutcome setEidMatch(boolean theEidMatch) {\n \t * \tReturns the normalized score\n \t */\n \tpublic Double getNormalizedScore() {\n-\t\tif (vector == 0) {\n+\t\tif (myEmpiRuleCount == 0) {\n \t\t\treturn 0.0;\n-\t\t} else if (score > vector) {\n-\t\t\treturn 1.0;\n \t\t}\n \n-\t\tdouble retVal = score / vector;\n+\t\tdouble retVal = score / myEmpiRuleCount;\n \t\tif (retVal < 0) {\n \t\t\tretVal = 0.0;\n+\t\t} else if (retVal > 1.0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcwODQzMQ=="}, "originalCommit": {"oid": "52e8761701c1c02e9a7b52ba731c212afb2d4c3b"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1828, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}