{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxNDI0Njcx", "number": 1905, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzowNzozMlrOEDqBPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzoyMjowNlrOEDqL4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjY5NjI5OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa/lastn.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzowNzozMlrOGgzXyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzoxMzozOFrOGhJJug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA0OTI5MQ==", "bodyText": "Is the point of allowing this to be configurable so that they can plug this into their own ES clusters? If so, we should specify what permission levels are needed to do the storing/querying we require", "url": "https://github.com/hapifhir/hapi-fhir/pull/1905#discussion_r437049291", "createdAt": "2020-06-08T23:07:32Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa/lastn.md", "diffHunk": "@@ -0,0 +1,41 @@\n+# LastN Operation\n+\n+HAPI FHIR 5.1.0 introduced preliminary support for the `$lastn` operation described [here](http://hl7.org/fhir/observation-operation-lastn.html).\n+\n+This implementation of the `$lastn` operation requires an external Elasticsearch server implementation which is used to implement the indexes required by this operation. The following sections describe the current functionality supported by this operation and the configuration needed to enable this operation.\n+\n+# Functional Overview and Parameters\n+\n+As described in the [FHIR specification](http://hl7.org/fhir/observation-operation-lastn.html), the `$lastn` can be used to retrieve the most recent or last n=number of observations for one or more subjects. This implementation supports the following search parameters:\n+\n+* `subject=` or `patient=`: Identifier(s) of patient(s) to return Observation resources for. If not specified, returns most recent observations for all patients.\n+* `category=`: One or more category code search parameters used to filter Observations.\n+* `Observation.code=`: One or more `Observation.code` search parameters use to filter and group observations. If not specified, returns most recent observations for all `Observation.code` values.\n+* `date=`: Date search parameters used to filter Observations by `Observation.effectiveDtm`.\n+* `max=`: The maximum number of observations to return for each `Observation.code`. If not specified, returns only the most recent observation in each group.\n+\n+# Limitations\n+\n+Search parameters other than those listed above are currently not supported.\n+\n+The grouping of Observation resources by `Observation.code` means that the `$lastn` operation will not work in cases where `Observation.code` has more than one coding.\n+\n+# Deployment and Configuration\n+\n+The `$lastn` operation is disabled by default. The operation can be enabled by setting the DaoConfig#setLastNEnabled property (see [JavaDoc](/hapi-fhir/apidocs/hapi-fhir-jpaserver-api/ca/uhn/fhir/jpa/api/config/DaoConfig.html#setLastNEnabled(boolean))).\n+\n+In addition, the Elasticsearch client service, `ElasticsearchSvcImpl` will need to be instantiated with parameters specifying how to connect to the Elasticsearch server, for e.g.:\n+\n+```java\n+  @Bean()\n+  public ElasticsearchSvcImpl elasticsearchSvc() {\n+     String elasticsearchHost = \"localhost\";\n+     String elasticsearchUserId = \"elastic\";\n+     String elasticsearchPassword = \"changeme\";\n+     int elasticsearchPort = 9301;\n+\n+     return new ElasticsearchSvcImpl(elasticsearchHost, elasticsearchPort, elasticsearchUserId, elasticsearchPassword);\n+  }\n+```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c600e06d47ef58bf8647dfb5f5608398c14a283"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQwNjEzOA==", "bodyText": "Good point. I have added a couple sentences indicating the requirements to enable security in ES and the minimum permissions required for the ES user.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1905#discussion_r437406138", "createdAt": "2020-06-09T13:13:38Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa/lastn.md", "diffHunk": "@@ -0,0 +1,41 @@\n+# LastN Operation\n+\n+HAPI FHIR 5.1.0 introduced preliminary support for the `$lastn` operation described [here](http://hl7.org/fhir/observation-operation-lastn.html).\n+\n+This implementation of the `$lastn` operation requires an external Elasticsearch server implementation which is used to implement the indexes required by this operation. The following sections describe the current functionality supported by this operation and the configuration needed to enable this operation.\n+\n+# Functional Overview and Parameters\n+\n+As described in the [FHIR specification](http://hl7.org/fhir/observation-operation-lastn.html), the `$lastn` can be used to retrieve the most recent or last n=number of observations for one or more subjects. This implementation supports the following search parameters:\n+\n+* `subject=` or `patient=`: Identifier(s) of patient(s) to return Observation resources for. If not specified, returns most recent observations for all patients.\n+* `category=`: One or more category code search parameters used to filter Observations.\n+* `Observation.code=`: One or more `Observation.code` search parameters use to filter and group observations. If not specified, returns most recent observations for all `Observation.code` values.\n+* `date=`: Date search parameters used to filter Observations by `Observation.effectiveDtm`.\n+* `max=`: The maximum number of observations to return for each `Observation.code`. If not specified, returns only the most recent observation in each group.\n+\n+# Limitations\n+\n+Search parameters other than those listed above are currently not supported.\n+\n+The grouping of Observation resources by `Observation.code` means that the `$lastn` operation will not work in cases where `Observation.code` has more than one coding.\n+\n+# Deployment and Configuration\n+\n+The `$lastn` operation is disabled by default. The operation can be enabled by setting the DaoConfig#setLastNEnabled property (see [JavaDoc](/hapi-fhir/apidocs/hapi-fhir-jpaserver-api/ca/uhn/fhir/jpa/api/config/DaoConfig.html#setLastNEnabled(boolean))).\n+\n+In addition, the Elasticsearch client service, `ElasticsearchSvcImpl` will need to be instantiated with parameters specifying how to connect to the Elasticsearch server, for e.g.:\n+\n+```java\n+  @Bean()\n+  public ElasticsearchSvcImpl elasticsearchSvc() {\n+     String elasticsearchHost = \"localhost\";\n+     String elasticsearchUserId = \"elastic\";\n+     String elasticsearchPassword = \"changeme\";\n+     int elasticsearchPort = 9301;\n+\n+     return new ElasticsearchSvcImpl(elasticsearchHost, elasticsearchPort, elasticsearchUserId, elasticsearchPassword);\n+  }\n+```", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA0OTI5MQ=="}, "originalCommit": {"oid": "3c600e06d47ef58bf8647dfb5f5608398c14a283"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjY5OTQzOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/lastn/ElasticsearchSvcImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzowOToyOVrOGgzZ4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo1NToyNFrOGhLRlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA0OTgyNg==", "bodyText": "All these strings should probably be ripped into constants", "url": "https://github.com/hapifhir/hapi-fhir/pull/1905#discussion_r437049826", "createdAt": "2020-06-08T23:09:29Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/lastn/ElasticsearchSvcImpl.java", "diffHunk": "@@ -504,15 +517,50 @@ private void addObservationCodeCriteria(BoolQueryBuilder theBoolQueryBuilder, Se\n \t\t\tif (textOnlyList.size() > 0) {\n \t\t\t\tBoolQueryBuilder myTextBoolQueryBuilder = QueryBuilders.boolQuery();\n \t\t\t\tfor (String textOnlyParam : textOnlyList) {\n-\t\t\t\t\tmyTextBoolQueryBuilder.should(QueryBuilders.matchPhraseQuery(\"codeconceptcodingdisplay\", textOnlyParam));\n-\t\t\t\t\tmyTextBoolQueryBuilder.should(QueryBuilders.matchPhraseQuery(\"codeconcepttext\", textOnlyParam));\n+\t\t\t\t\tmyTextBoolQueryBuilder.should(QueryBuilders.matchPhrasePrefixQuery(\"codeconceptcodingdisplay\", textOnlyParam));\n+\t\t\t\t\tmyTextBoolQueryBuilder.should(QueryBuilders.matchPhrasePrefixQuery(\"codeconcepttext\", textOnlyParam));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c600e06d47ef58bf8647dfb5f5608398c14a283"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0MDkxNw==", "bodyText": "Done (along with other similar constants in this class).", "url": "https://github.com/hapifhir/hapi-fhir/pull/1905#discussion_r437440917", "createdAt": "2020-06-09T13:55:24Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/lastn/ElasticsearchSvcImpl.java", "diffHunk": "@@ -504,15 +517,50 @@ private void addObservationCodeCriteria(BoolQueryBuilder theBoolQueryBuilder, Se\n \t\t\tif (textOnlyList.size() > 0) {\n \t\t\t\tBoolQueryBuilder myTextBoolQueryBuilder = QueryBuilders.boolQuery();\n \t\t\t\tfor (String textOnlyParam : textOnlyList) {\n-\t\t\t\t\tmyTextBoolQueryBuilder.should(QueryBuilders.matchPhraseQuery(\"codeconceptcodingdisplay\", textOnlyParam));\n-\t\t\t\t\tmyTextBoolQueryBuilder.should(QueryBuilders.matchPhraseQuery(\"codeconcepttext\", textOnlyParam));\n+\t\t\t\t\tmyTextBoolQueryBuilder.should(QueryBuilders.matchPhrasePrefixQuery(\"codeconceptcodingdisplay\", textOnlyParam));\n+\t\t\t\t\tmyTextBoolQueryBuilder.should(QueryBuilders.matchPhrasePrefixQuery(\"codeconcepttext\", textOnlyParam));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA0OTgyNg=="}, "originalCommit": {"oid": "3c600e06d47ef58bf8647dfb5f5608398c14a283"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjcyMzU1OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/BaseR4SearchLastN.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzoyMjowNlrOGgzooQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzoyNzoxM1rOGhJuqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1MzYwMQ==", "bodyText": "What is this calculation doing? Consider ripping the math out into a constant that explains the purpose", "url": "https://github.com/hapifhir/hapi-fhir/pull/1905#discussion_r437053601", "createdAt": "2020-06-08T23:22:06Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/BaseR4SearchLastN.java", "diffHunk": "@@ -154,15 +160,13 @@ private void createObservationsForPatient(IIdType thePatientId) {\n \n \tprivate void createFiveObservationsForPatientCodeCategory(IIdType thePatientId, String theObservationCode, String theCategoryCode,\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t Integer theTimeOffset) {\n-\t\tCalendar observationDate = new GregorianCalendar();\n \n \t\tfor (int idx=0; idx<5; idx++ ) {\n \t\t\tObservation obs = new Observation();\n \t\t\tobs.getSubject().setReferenceElement(thePatientId);\n \t\t\tobs.getCode().addCoding().setCode(theObservationCode).setSystem(codeSystem);\n \t\t\tobs.setValue(new StringType(theObservationCode + \"_0\"));\n-\t\t\tobservationDate.add(Calendar.HOUR, -theTimeOffset+idx);\n-\t\t\tDate effectiveDtm = observationDate.getTime();\n+\t\t\tDate effectiveDtm = new Date(observationDate.getTimeInMillis() - (3600*1000*(theTimeOffset+idx)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c600e06d47ef58bf8647dfb5f5608398c14a283"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQxNTU5NQ==", "bodyText": "The idea here was to generate a new and distinct observation effective date time for each Observation by subtracting a calculated and unique offset value from a constant Date value. To make this more clear,  I have moved this coding into a separate method, broken up the calculation and added some comments.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1905#discussion_r437415595", "createdAt": "2020-06-09T13:27:13Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/BaseR4SearchLastN.java", "diffHunk": "@@ -154,15 +160,13 @@ private void createObservationsForPatient(IIdType thePatientId) {\n \n \tprivate void createFiveObservationsForPatientCodeCategory(IIdType thePatientId, String theObservationCode, String theCategoryCode,\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t Integer theTimeOffset) {\n-\t\tCalendar observationDate = new GregorianCalendar();\n \n \t\tfor (int idx=0; idx<5; idx++ ) {\n \t\t\tObservation obs = new Observation();\n \t\t\tobs.getSubject().setReferenceElement(thePatientId);\n \t\t\tobs.getCode().addCoding().setCode(theObservationCode).setSystem(codeSystem);\n \t\t\tobs.setValue(new StringType(theObservationCode + \"_0\"));\n-\t\t\tobservationDate.add(Calendar.HOUR, -theTimeOffset+idx);\n-\t\t\tDate effectiveDtm = observationDate.getTime();\n+\t\t\tDate effectiveDtm = new Date(observationDate.getTimeInMillis() - (3600*1000*(theTimeOffset+idx)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1MzYwMQ=="}, "originalCommit": {"oid": "3c600e06d47ef58bf8647dfb5f5608398c14a283"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1859, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}