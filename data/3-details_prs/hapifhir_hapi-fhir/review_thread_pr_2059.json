{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2MjUyNzcz", "number": 2059, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMzozMDo0NVrOEeTxIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMjo1NTo1N1rOEfcOwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjE2NjA4OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/rest/gclient/IQuery.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMzozMDo0NVrOHJ48ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMzozMDo0NVrOHJ48ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDEzMjIzNA==", "bodyText": "It should defnitely be noted in the javadoc that _offset is a nonstandard FHIR parameter and may not be supported on all servers.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2059#discussion_r480132234", "createdAt": "2020-08-31T13:30:45Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/rest/gclient/IQuery.java", "diffHunk": "@@ -49,6 +49,14 @@\n \t */\n \tIQuery<Y> count(int theCount);\n \n+\t/**\n+\t * Specifies the <code>_offset</code> parameter, which indicates to the server the offset of the query. Use\n+\t * with {@link #count(int)}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "166e82ceb9a3c9a1749dd28078a1cd0e2dd9b5a5"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjIzOTU4OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-server/src/main/java/ca/uhn/fhir/rest/server/method/BaseResourceReturningMethodBinding.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMzo0OToxNFrOHJ5oxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOTo0NToxN1rOHgecoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE0MzU1Ng==", "bodyText": "I'm not sure I love the idea of this being the default if no paging provider exists- This feels like a significant change in behaviour from the current default.\nWhat if we modified IPagingProvider to have a new method along the lines of\ndefault boolean supportsOffsetQueries() { return false; }\n...and the provider could basically declare itself stateless?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2059#discussion_r480143556", "createdAt": "2020-08-31T13:49:14Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-server/src/main/java/ca/uhn/fhir/rest/server/method/BaseResourceReturningMethodBinding.java", "diffHunk": "@@ -200,7 +210,18 @@ IBaseResource createBundleFromBundleProvider(IRestfulServer<?> theServer, Reques\n \t\tString linkPrev = null;\n \t\tString linkNext = null;\n \n-\t\tif (isNotBlank(theResult.getCurrentPageId())) {\n+\t\tif (theServer.getPagingProvider() == null || requestOffset != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "166e82ceb9a3c9a1749dd28078a1cd0e2dd9b5a5"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDg1Mzg1OA==", "bodyText": "My reasoning was that actually one wouldn't need the \"extra\" paging provider at all if this is used (and maybe if one wants to use database cached paging, it could be implemented later on on top of this? instead of splitting search logic to asynchronous search etc.). And if one did not define the maximumPageSize and/or defaultPageSize in the RestfulServer this wouldn't change the current behaviour (as the actual query would still fetch everything). What do you think?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2059#discussion_r480853858", "createdAt": "2020-09-01T06:02:32Z", "author": {"login": "tuomoa"}, "path": "hapi-fhir-server/src/main/java/ca/uhn/fhir/rest/server/method/BaseResourceReturningMethodBinding.java", "diffHunk": "@@ -200,7 +210,18 @@ IBaseResource createBundleFromBundleProvider(IRestfulServer<?> theServer, Reques\n \t\tString linkPrev = null;\n \t\tString linkNext = null;\n \n-\t\tif (isNotBlank(theResult.getCurrentPageId())) {\n+\t\tif (theServer.getPagingProvider() == null || requestOffset != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE0MzU1Ng=="}, "originalCommit": {"oid": "166e82ceb9a3c9a1749dd28078a1cd0e2dd9b5a5"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU0ODQ2NA==", "bodyText": "I'm going to merge this as is - But I do remain nervous that we're changing behaviour for existing clients. Depending on community feedback we may rework this to require an explicit setting.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2059#discussion_r503548464", "createdAt": "2020-10-12T21:39:50Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-server/src/main/java/ca/uhn/fhir/rest/server/method/BaseResourceReturningMethodBinding.java", "diffHunk": "@@ -200,7 +210,18 @@ IBaseResource createBundleFromBundleProvider(IRestfulServer<?> theServer, Reques\n \t\tString linkPrev = null;\n \t\tString linkNext = null;\n \n-\t\tif (isNotBlank(theResult.getCurrentPageId())) {\n+\t\tif (theServer.getPagingProvider() == null || requestOffset != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE0MzU1Ng=="}, "originalCommit": {"oid": "166e82ceb9a3c9a1749dd28078a1cd0e2dd9b5a5"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgxNTMyOA==", "bodyText": "All right that sounds good to me. \ud83d\udc4d", "url": "https://github.com/hapifhir/hapi-fhir/pull/2059#discussion_r503815328", "createdAt": "2020-10-13T09:45:17Z", "author": {"login": "tuomoa"}, "path": "hapi-fhir-server/src/main/java/ca/uhn/fhir/rest/server/method/BaseResourceReturningMethodBinding.java", "diffHunk": "@@ -200,7 +210,18 @@ IBaseResource createBundleFromBundleProvider(IRestfulServer<?> theServer, Reques\n \t\tString linkPrev = null;\n \t\tString linkNext = null;\n \n-\t\tif (isNotBlank(theResult.getCurrentPageId())) {\n+\t\tif (theServer.getPagingProvider() == null || requestOffset != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE0MzU1Ng=="}, "originalCommit": {"oid": "166e82ceb9a3c9a1749dd28078a1cd0e2dd9b5a5"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjI1NjQ4OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-client/src/main/java/ca/uhn/fhir/rest/client/method/MethodUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMzo1MzoyMlrOHJ5y4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDo0NTo0NVrOHROHmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE0NjE0Ng==", "bodyText": "This new annotation should probably get a mention in the search page and perhaps a section on stateless paging would be good on the paging page", "url": "https://github.com/hapifhir/hapi-fhir/pull/2059#discussion_r480146146", "createdAt": "2020-08-31T13:53:22Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-client/src/main/java/ca/uhn/fhir/rest/client/method/MethodUtil.java", "diffHunk": "@@ -340,6 +340,8 @@ public static StringBuilder createUrl(String theResourceType, Map<String, List<S\n \t\t\t\t\t\t\t\touterCollectionType);\n \t\t\t\t\t} else if (nextAnnotation instanceof Count) {\n \t\t\t\t\t\tparam = new CountParameter();\n+\t\t\t\t\t} else if (nextAnnotation instanceof Offset) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "166e82ceb9a3c9a1749dd28078a1cd0e2dd9b5a5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDg1NDQyNg==", "bodyText": "Yeah sure, I'll update the relevant documentation after the implementation is working.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2059#discussion_r480854426", "createdAt": "2020-09-01T06:03:23Z", "author": {"login": "tuomoa"}, "path": "hapi-fhir-client/src/main/java/ca/uhn/fhir/rest/client/method/MethodUtil.java", "diffHunk": "@@ -340,6 +340,8 @@ public static StringBuilder createUrl(String theResourceType, Map<String, List<S\n \t\t\t\t\t\t\t\touterCollectionType);\n \t\t\t\t\t} else if (nextAnnotation instanceof Count) {\n \t\t\t\t\t\tparam = new CountParameter();\n+\t\t\t\t\t} else if (nextAnnotation instanceof Offset) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE0NjE0Ng=="}, "originalCommit": {"oid": "166e82ceb9a3c9a1749dd28078a1cd0e2dd9b5a5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgxOTE2MA==", "bodyText": "I updated those docs to include mentions about count and offset parameters (and also something about the paging providers).", "url": "https://github.com/hapifhir/hapi-fhir/pull/2059#discussion_r487819160", "createdAt": "2020-09-14T10:45:45Z", "author": {"login": "tuomoa"}, "path": "hapi-fhir-client/src/main/java/ca/uhn/fhir/rest/client/method/MethodUtil.java", "diffHunk": "@@ -340,6 +340,8 @@ public static StringBuilder createUrl(String theResourceType, Map<String, List<S\n \t\t\t\t\t\t\t\touterCollectionType);\n \t\t\t\t\t} else if (nextAnnotation instanceof Count) {\n \t\t\t\t\t\tparam = new CountParameter();\n+\t\t\t\t\t} else if (nextAnnotation instanceof Offset) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE0NjE0Ng=="}, "originalCommit": {"oid": "166e82ceb9a3c9a1749dd28078a1cd0e2dd9b5a5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwODI4OTEzOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/SearchCoordinatorSvcImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMzowMTowOVrOHK1MAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNjowMToyN1rOHLcDaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTExOTIzMg==", "bodyText": "I'm not sure I get the issue being fixed here - Synchronous calls are performed when we're trying to minimize database load because we're expecting the call to be made a lot, so forcing a count goes against the whole objective.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2059#discussion_r481119232", "createdAt": "2020-09-01T13:01:09Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/SearchCoordinatorSvcImpl.java", "diffHunk": "@@ -473,9 +474,22 @@ private IBundleProvider executeQuery(String theResourceType, SearchParameterMap\n \t\t\tRequestPartitionId requestPartitionId = myRequestPartitionHelperService.determineReadPartitionForRequest(theRequestDetails, theResourceType);\n \n \t\t\tLong count = 0L;\n-\t\t\tif (wantCount) {\n+\t\t\t// TODO not sure if this is good idea or not? synchronous is mostly used on internal operations, maybe count is not needed\n+\t\t\t//  but code has to be fixed. Most operations are looking for one resource. Those that are fetching larger could be  fixed to\n+\t\t\t//  handle size nullability and pages correctly.\n+\t\t\tif (wantCount || theParams.isLoadSynchronous()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1fe2c2e68f5b9fd3007980acb30755b6a23bb54"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTY5NzY1Ng==", "bodyText": "That's a valid point, I'll refactor the tests to work without accurate count. There is some tests that are checking that the result bundle contains for example 1 item and size 1, but the size is not known if accurate count was not requested (if query limit wasn't greater than returned items). But I'll see what I can do about this.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2059#discussion_r481697656", "createdAt": "2020-09-02T05:02:27Z", "author": {"login": "tuomoa"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/SearchCoordinatorSvcImpl.java", "diffHunk": "@@ -473,9 +474,22 @@ private IBundleProvider executeQuery(String theResourceType, SearchParameterMap\n \t\t\tRequestPartitionId requestPartitionId = myRequestPartitionHelperService.determineReadPartitionForRequest(theRequestDetails, theResourceType);\n \n \t\t\tLong count = 0L;\n-\t\t\tif (wantCount) {\n+\t\t\t// TODO not sure if this is good idea or not? synchronous is mostly used on internal operations, maybe count is not needed\n+\t\t\t//  but code has to be fixed. Most operations are looking for one resource. Those that are fetching larger could be  fixed to\n+\t\t\t//  handle size nullability and pages correctly.\n+\t\t\tif (wantCount || theParams.isLoadSynchronous()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTExOTIzMg=="}, "originalCommit": {"oid": "b1fe2c2e68f5b9fd3007980acb30755b6a23bb54"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc1NjAwOQ==", "bodyText": "Actually most cases just uses loadSynchronous true, and do not define count and therefore the limit is the fetchSizeDefaultMaximum (or if it's not defined then everything. I'll refactor this.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2059#discussion_r481756009", "createdAt": "2020-09-02T06:01:27Z", "author": {"login": "tuomoa"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/SearchCoordinatorSvcImpl.java", "diffHunk": "@@ -473,9 +474,22 @@ private IBundleProvider executeQuery(String theResourceType, SearchParameterMap\n \t\t\tRequestPartitionId requestPartitionId = myRequestPartitionHelperService.determineReadPartitionForRequest(theRequestDetails, theResourceType);\n \n \t\t\tLong count = 0L;\n-\t\t\tif (wantCount) {\n+\t\t\t// TODO not sure if this is good idea or not? synchronous is mostly used on internal operations, maybe count is not needed\n+\t\t\t//  but code has to be fixed. Most operations are looking for one resource. Those that are fetching larger could be  fixed to\n+\t\t\t//  handle size nullability and pages correctly.\n+\t\t\tif (wantCount || theParams.isLoadSynchronous()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTExOTIzMg=="}, "originalCommit": {"oid": "b1fe2c2e68f5b9fd3007980acb30755b6a23bb54"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwODI5NDU3OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4SearchNoHashesTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMzowMjozN1rOHK1PbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QyMDowOTowNlrOHQ_BSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEyMDEwOA==", "bodyText": "Wrong how? It's incomplete sure, but that's only because you're seeing only the first 5 results as configured.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2059#discussion_r481120108", "createdAt": "2020-09-01T13:02:37Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4SearchNoHashesTest.java", "diffHunk": "@@ -2655,6 +2655,7 @@ public void testSearchWithDate() {\n \t}\n \n \t@Test\n+\t// TODO What does this mean? The size in the result is actually wrong if we are hitting the fetchSizeDefaultMaximum?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1fe2c2e68f5b9fd3007980acb30755b6a23bb54"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTcwMDE3OA==", "bodyText": "I think it's okay to just return 5 results, but saying the the search total is also 5 seems to be wrong if there is actually more in the db? If we are hitting the fetchSizeDefaultMaximum shouldn't we null the size in bundle provider -> requester will see that I got N entries but there might be more (or not).\nWhen using offset paging, if we would like to actually limit every search to some value, we would need to decrease the query limit when offset is increased which seems to me would just bring more complexity without any real benefit?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2059#discussion_r481700178", "createdAt": "2020-09-02T05:05:03Z", "author": {"login": "tuomoa"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4SearchNoHashesTest.java", "diffHunk": "@@ -2655,6 +2655,7 @@ public void testSearchWithDate() {\n \t}\n \n \t@Test\n+\t// TODO What does this mean? The size in the result is actually wrong if we are hitting the fetchSizeDefaultMaximum?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEyMDEwOA=="}, "originalCommit": {"oid": "b1fe2c2e68f5b9fd3007980acb30755b6a23bb54"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU3MTc4Ng==", "bodyText": "Ok yeah I could see that. I'd say adjusting the test to check that size() returns null in this case is reasonable.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2059#discussion_r487571786", "createdAt": "2020-09-13T20:09:06Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4SearchNoHashesTest.java", "diffHunk": "@@ -2655,6 +2655,7 @@ public void testSearchWithDate() {\n \t}\n \n \t@Test\n+\t// TODO What does this mean? The size in the result is actually wrong if we are hitting the fetchSizeDefaultMaximum?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEyMDEwOA=="}, "originalCommit": {"oid": "b1fe2c2e68f5b9fd3007980acb30755b6a23bb54"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDAzODQwOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4Test.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMjo1NTo1N1rOHLtxVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwODo1NTozM1rOHRKPUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA0NjI5NQ==", "bodyText": "I'm not really sure why this is not working. I'm not sure but maybe it seems that the actual query returns duplicate pids and when that's combined to LIMIT 10 we are only getting 6 pids. The same test with DSTU3 works.. Maybe there is some kind of new include param in R4 which causes query to find duplicates or something..", "url": "https://github.com/hapifhir/hapi-fhir/pull/2059#discussion_r482046295", "createdAt": "2020-09-02T12:55:57Z", "author": {"login": "tuomoa"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4Test.java", "diffHunk": "@@ -2919,6 +2919,8 @@ public void testPagingOverEverythingSet() throws InterruptedException {\n \t}\n \n \t@Test\n+\t@Disabled\n+\t// FIXME no idea why this is returning only 6 results. stu2/3 tests are working..", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57f1fed14d0f988b970355977c257309e8bd7060"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU3OTkyOA==", "bodyText": "I checked out this branch and played with this a bit- The issue is that in R4 there are multiple ResourceLink rows created for each Observation (one to satisfy the subject parameter, and another to satisfy the patient parameter.\nThe ultimate SQL that goes to the DB is this:\nselect resourceta0_.RES_ID as col_0_0_ from HFJ_RESOURCE resourceta0_ left outer join HFJ_RES_LINK myresource1_ on resourceta0_.RES_ID=myresource1_.SRC_RESOURCE_ID where myresource1_.TARGET_RESOURCE_ID=1 and (resourceta0_.RES_DELETED_AT is null) limit 10\n..but within the first 10 rows there are some duplicates because of the duplicate ResLink rows, and these get filtered out leaving you with 6 results.\nI suspect adding a distinct to the query would fix this, but we have definitely heard lots of reports that distinct is a performance killer on large hapi fhir deployments.. so it would need to appear in the SQL only in cases where paging is turned off", "url": "https://github.com/hapifhir/hapi-fhir/pull/2059#discussion_r487579928", "createdAt": "2020-09-13T21:32:47Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4Test.java", "diffHunk": "@@ -2919,6 +2919,8 @@ public void testPagingOverEverythingSet() throws InterruptedException {\n \t}\n \n \t@Test\n+\t@Disabled\n+\t// FIXME no idea why this is returning only 6 results. stu2/3 tests are working..", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA0NjI5NQ=="}, "originalCommit": {"oid": "57f1fed14d0f988b970355977c257309e8bd7060"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc1NTYwMg==", "bodyText": "Seems like I was on the right track here, I added the DISTINCT clause only if using synchronous loading (usually when doing offset paging). This way if one is using the DatabaseBackedPagingProvider the everything query works as it did before. This seems to do the trick here.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2059#discussion_r487755602", "createdAt": "2020-09-14T08:55:33Z", "author": {"login": "tuomoa"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4Test.java", "diffHunk": "@@ -2919,6 +2919,8 @@ public void testPagingOverEverythingSet() throws InterruptedException {\n \t}\n \n \t@Test\n+\t@Disabled\n+\t// FIXME no idea why this is returning only 6 results. stu2/3 tests are working..", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA0NjI5NQ=="}, "originalCommit": {"oid": "57f1fed14d0f988b970355977c257309e8bd7060"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1768, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}