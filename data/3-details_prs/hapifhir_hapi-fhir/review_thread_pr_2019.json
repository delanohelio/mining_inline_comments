{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0MTg0MTE5", "number": 2019, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODozOTo1N1rOEV8qBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODozOTo1N1rOEV8qBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDQ5MzUwOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/svc/EmpiResourceFilteringSvcTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODozOTo1N1rOG8_vLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODo0MDoyN1rOG8_wIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYxMjAxNA==", "bodyText": "sut?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2019#discussion_r466612014", "createdAt": "2020-08-06T18:39:57Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/svc/EmpiResourceFilteringSvcTest.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+import ca.uhn.fhir.jpa.empi.BaseEmpiR4Test;\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+class EmpiResourceFilteringSvcTest extends BaseEmpiR4Test {\n+\n+\t@Autowired\n+\tprivate EmpiResourceFilteringSvc myEmpiResourceFilteringSvc;\n+\n+\t@Test\n+\tpublic void testFilterResourcesWhichHaveNoRelevantAttributes() {\n+\t\tPatient patient = new Patient();\n+\t\tpatient.setDeceased(new BooleanType(true)); //EMPI rules defined do not care about the deceased attribute.\n+\n+\t\t//SUT", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a720d45c3deee7c37e47fedfaafc696f92be314"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYxMjI1Ng==", "bodyText": "ah, system under test. I picked it up from somewhere", "url": "https://github.com/hapifhir/hapi-fhir/pull/2019#discussion_r466612256", "createdAt": "2020-08-06T18:40:27Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/svc/EmpiResourceFilteringSvcTest.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+import ca.uhn.fhir.jpa.empi.BaseEmpiR4Test;\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+class EmpiResourceFilteringSvcTest extends BaseEmpiR4Test {\n+\n+\t@Autowired\n+\tprivate EmpiResourceFilteringSvc myEmpiResourceFilteringSvc;\n+\n+\t@Test\n+\tpublic void testFilterResourcesWhichHaveNoRelevantAttributes() {\n+\t\tPatient patient = new Patient();\n+\t\tpatient.setDeceased(new BooleanType(true)); //EMPI rules defined do not care about the deceased attribute.\n+\n+\t\t//SUT", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYxMjAxNA=="}, "originalCommit": {"oid": "5a720d45c3deee7c37e47fedfaafc696f92be314"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1766, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}