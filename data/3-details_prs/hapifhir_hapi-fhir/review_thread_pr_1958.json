{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzNjE4OTYz", "number": 1958, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNDowOTo1MVrOELQx-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNDozODowMVrOELRQwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMjQ0NzMxOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/term/TermCodeSystemStorageSvcTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNDowOTo1MVrOGsxj2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNTowODowOVrOGszD6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYwMjUyMQ==", "bodyText": "nitpick: Convention is to put helper methods below the place where they are first used.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1958#discussion_r449602521", "createdAt": "2020-07-03T14:09:51Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/term/TermCodeSystemStorageSvcTest.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package ca.uhn.fhir.jpa.term;\n+\n+import ca.uhn.fhir.jpa.dao.r4.BaseJpaR4Test;\n+import ca.uhn.fhir.jpa.model.entity.ResourceTable;\n+import org.hl7.fhir.r4.model.CodeSystem;\n+import org.hl7.fhir.r4.model.CodeType;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class TermCodeSystemStorageSvcTest extends BaseJpaR4Test {\n+\n+\tpublic static final String URL_MY_CODE_SYSTEM = \"http://example.com/my_code_system\";\n+\n+\tprivate CodeSystem createCodeSystemWithMoreThan100Concepts() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46abdfafe0c71921ccb61e53ed531b114137fd0b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYyNzExNQ==", "bodyText": "Good point - forgot my Clean Code principles here...", "url": "https://github.com/hapifhir/hapi-fhir/pull/1958#discussion_r449627115", "createdAt": "2020-07-03T15:08:09Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/term/TermCodeSystemStorageSvcTest.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package ca.uhn.fhir.jpa.term;\n+\n+import ca.uhn.fhir.jpa.dao.r4.BaseJpaR4Test;\n+import ca.uhn.fhir.jpa.model.entity.ResourceTable;\n+import org.hl7.fhir.r4.model.CodeSystem;\n+import org.hl7.fhir.r4.model.CodeType;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class TermCodeSystemStorageSvcTest extends BaseJpaR4Test {\n+\n+\tpublic static final String URL_MY_CODE_SYSTEM = \"http://example.com/my_code_system\";\n+\n+\tprivate CodeSystem createCodeSystemWithMoreThan100Concepts() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYwMjUyMQ=="}, "originalCommit": {"oid": "46abdfafe0c71921ccb61e53ed531b114137fd0b"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMjQ1NDIxOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/term/TermCodeSystemStorageSvcTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNDoxMjoxMlrOGsxoKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNToxNzo0NFrOGszSZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYwMzYyNw==", "bodyText": "Some comments in this test would help clarify the race condition it's testing", "url": "https://github.com/hapifhir/hapi-fhir/pull/1958#discussion_r449603627", "createdAt": "2020-07-03T14:12:12Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/term/TermCodeSystemStorageSvcTest.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package ca.uhn.fhir.jpa.term;\n+\n+import ca.uhn.fhir.jpa.dao.r4.BaseJpaR4Test;\n+import ca.uhn.fhir.jpa.model.entity.ResourceTable;\n+import org.hl7.fhir.r4.model.CodeSystem;\n+import org.hl7.fhir.r4.model.CodeType;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class TermCodeSystemStorageSvcTest extends BaseJpaR4Test {\n+\n+\tpublic static final String URL_MY_CODE_SYSTEM = \"http://example.com/my_code_system\";\n+\n+\tprivate CodeSystem createCodeSystemWithMoreThan100Concepts() {\n+\t\tCodeSystem codeSystem = new CodeSystem();\n+\t\tcodeSystem.setUrl(URL_MY_CODE_SYSTEM);\n+\t\tcodeSystem.setContent(CodeSystem.CodeSystemContentMode.NOTPRESENT);\n+\n+\t\tfor (int i = 0; i < 125; i++) {\n+\t\t\tcodeSystem.addConcept(new CodeSystem.ConceptDefinitionComponent(new CodeType(\"codeA \" + i)));\n+\t\t}\n+\n+\t\treturn codeSystem;\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testStoreNewCodeSystemVersionForExistingCodeSystem() {\n+\t\tCodeSystem upload = createCodeSystemWithMoreThan100Concepts();\n+\n+\t\tResourceTable codeSystemResourceEntity = (ResourceTable)myCodeSystemDao.create(upload, mySrd).getEntity();\n+\n+\t\trunInTransaction(() -> myTermCodeSystemStorageSvc.storeNewCodeSystemVersionIfNeeded(upload, codeSystemResourceEntity));\n+\n+\t\tmyTerminologyDeferredStorageSvc.setProcessDeferred(true);\n+\t\tmyTerminologyDeferredStorageSvc.saveDeferred();\n+\t\tmyTerminologyDeferredStorageSvc.saveDeferred();\n+\n+\t\tassertEquals(125, myTermConceptDao.count());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46abdfafe0c71921ccb61e53ed531b114137fd0b"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYzMDgyMQ==", "bodyText": "Good point. Done.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1958#discussion_r449630821", "createdAt": "2020-07-03T15:17:44Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/term/TermCodeSystemStorageSvcTest.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package ca.uhn.fhir.jpa.term;\n+\n+import ca.uhn.fhir.jpa.dao.r4.BaseJpaR4Test;\n+import ca.uhn.fhir.jpa.model.entity.ResourceTable;\n+import org.hl7.fhir.r4.model.CodeSystem;\n+import org.hl7.fhir.r4.model.CodeType;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class TermCodeSystemStorageSvcTest extends BaseJpaR4Test {\n+\n+\tpublic static final String URL_MY_CODE_SYSTEM = \"http://example.com/my_code_system\";\n+\n+\tprivate CodeSystem createCodeSystemWithMoreThan100Concepts() {\n+\t\tCodeSystem codeSystem = new CodeSystem();\n+\t\tcodeSystem.setUrl(URL_MY_CODE_SYSTEM);\n+\t\tcodeSystem.setContent(CodeSystem.CodeSystemContentMode.NOTPRESENT);\n+\n+\t\tfor (int i = 0; i < 125; i++) {\n+\t\t\tcodeSystem.addConcept(new CodeSystem.ConceptDefinitionComponent(new CodeType(\"codeA \" + i)));\n+\t\t}\n+\n+\t\treturn codeSystem;\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testStoreNewCodeSystemVersionForExistingCodeSystem() {\n+\t\tCodeSystem upload = createCodeSystemWithMoreThan100Concepts();\n+\n+\t\tResourceTable codeSystemResourceEntity = (ResourceTable)myCodeSystemDao.create(upload, mySrd).getEntity();\n+\n+\t\trunInTransaction(() -> myTermCodeSystemStorageSvc.storeNewCodeSystemVersionIfNeeded(upload, codeSystemResourceEntity));\n+\n+\t\tmyTerminologyDeferredStorageSvc.setProcessDeferred(true);\n+\t\tmyTerminologyDeferredStorageSvc.saveDeferred();\n+\t\tmyTerminologyDeferredStorageSvc.saveDeferred();\n+\n+\t\tassertEquals(125, myTermConceptDao.count());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYwMzYyNw=="}, "originalCommit": {"oid": "46abdfafe0c71921ccb61e53ed531b114137fd0b"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMjUwMTU4OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/TermDeferredStorageSvcImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNDoyOToxOVrOGsyEzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNTozNDo0MFrOGszp8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYxMDk1Ng==", "bodyText": "This doesn't eliminate the race condition, but greatly reduces it.  If both the findById and save are in the same transaction with the right isolation level, that last gap could be closed.  Or it might be cleaner to just put the save in a try block so one failure doesn't interfere with the following saves in the loop.\nI don't think it's worth the effort, but if you really wanted to test this final tiny race condition gap, you could create a version of your test where your mock returns a valid findById but then by the time the save is called it is no longer valid.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1958#discussion_r449610956", "createdAt": "2020-07-03T14:29:19Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/TermDeferredStorageSvcImpl.java", "diffHunk": "@@ -142,7 +145,12 @@ private void processDeferredConcepts() {\n \t\tourLog.info(\"Saving {} deferred concepts...\", count);\n \t\twhile (codeCount < count && myDeferredConcepts.size() > 0) {\n \t\t\tTermConcept next = myDeferredConcepts.remove(0);\n-\t\t\tcodeCount += myCodeSystemStorageSvc.saveConcept(next);\n+\t\t\tif(myCodeSystemVersionDao.findById(next.getCodeSystemVersion().getPid()).isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46abdfafe0c71921ccb61e53ed531b114137fd0b"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYzNjg1MA==", "bodyText": "Good call. I will use the try block per your suggestion. It's a little more blunt than what I had, but it should be cleaner and perform better than my original solution.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1958#discussion_r449636850", "createdAt": "2020-07-03T15:34:40Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/TermDeferredStorageSvcImpl.java", "diffHunk": "@@ -142,7 +145,12 @@ private void processDeferredConcepts() {\n \t\tourLog.info(\"Saving {} deferred concepts...\", count);\n \t\twhile (codeCount < count && myDeferredConcepts.size() > 0) {\n \t\t\tTermConcept next = myDeferredConcepts.remove(0);\n-\t\t\tcodeCount += myCodeSystemStorageSvc.saveConcept(next);\n+\t\t\tif(myCodeSystemVersionDao.findById(next.getCodeSystemVersion().getPid()).isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYxMDk1Ng=="}, "originalCommit": {"oid": "46abdfafe0c71921ccb61e53ed531b114137fd0b"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMjUyNjA5OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/term/TermDeferredStorageSvcImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNDozODowMVrOGsyTIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNzowNjoyOFrOGs1MVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYxNDYyNQ==", "bodyText": "Another option you can use for this pattern is rather than using setXYZForUnitTest is you can use the MockBean pattern.  See SearchParamRegistryImplTest for an example.  Totally optional, but what I like about this pattern is it means you can remove all the setXYZForUnitTest methods.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1958#discussion_r449614625", "createdAt": "2020-07-03T14:38:01Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/term/TermDeferredStorageSvcImplTest.java", "diffHunk": "@@ -38,16 +44,45 @@ public void testSaveDeferred_Concept() {\n \t\tTermConcept concept = new TermConcept();\n \t\tconcept.setCode(\"CODE_A\");\n \n+\t\tTermCodeSystemVersion myTermCodeSystemVersion = new TermCodeSystemVersion();\n+\t\tmyTermCodeSystemVersion.setId(1L);\n+\t\tconcept.setCodeSystemVersion(myTermCodeSystemVersion);\n+\n \t\tTermDeferredStorageSvcImpl svc = new TermDeferredStorageSvcImpl();\n \t\tsvc.setTransactionManagerForUnitTest(myTxManager);\n \t\tsvc.setCodeSystemStorageSvcForUnitTest(myTermConceptStorageSvc);\n \t\tsvc.setDaoConfigForUnitTest(new DaoConfig());\n+\n+\t\twhen(myTermCodeSystemVersionDao.findById(anyLong())).thenReturn(Optional.of(myTermCodeSystemVersion));\n+\t\tsvc.setCodeSystemVersionDaoForUnitTest(myTermCodeSystemVersionDao);\n \t\tsvc.setProcessDeferred(true);\n \t\tsvc.addConceptToStorageQueue(concept);\n \t\tsvc.saveDeferred();\n-\n \t\tverify(myTermConceptStorageSvc, times(1)).saveConcept(same(concept));\n \t\tverifyNoMoreInteractions(myTermConceptStorageSvc);\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testSaveDeferred_Concept_StaleCodeSystemVersion() {\n+\t\tTermConcept concept = new TermConcept();\n+\t\tconcept.setCode(\"CODE_A\");\n+\n+\t\tTermCodeSystemVersion myTermCodeSystemVersion = new TermCodeSystemVersion();\n+\t\tconcept.setCodeSystemVersion(myTermCodeSystemVersion);\n+\n+\t\tTermDeferredStorageSvcImpl svc = new TermDeferredStorageSvcImpl();\n+\t\tsvc.setTransactionManagerForUnitTest(myTxManager);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46abdfafe0c71921ccb61e53ed531b114137fd0b"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY2MjAzNw==", "bodyText": "I like this idea, but found that it got complicated rather quickly (a surprisingly large number of dependencies that would need to be mocked here to make this work). Will note this for later.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1958#discussion_r449662037", "createdAt": "2020-07-03T17:06:28Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/term/TermDeferredStorageSvcImplTest.java", "diffHunk": "@@ -38,16 +44,45 @@ public void testSaveDeferred_Concept() {\n \t\tTermConcept concept = new TermConcept();\n \t\tconcept.setCode(\"CODE_A\");\n \n+\t\tTermCodeSystemVersion myTermCodeSystemVersion = new TermCodeSystemVersion();\n+\t\tmyTermCodeSystemVersion.setId(1L);\n+\t\tconcept.setCodeSystemVersion(myTermCodeSystemVersion);\n+\n \t\tTermDeferredStorageSvcImpl svc = new TermDeferredStorageSvcImpl();\n \t\tsvc.setTransactionManagerForUnitTest(myTxManager);\n \t\tsvc.setCodeSystemStorageSvcForUnitTest(myTermConceptStorageSvc);\n \t\tsvc.setDaoConfigForUnitTest(new DaoConfig());\n+\n+\t\twhen(myTermCodeSystemVersionDao.findById(anyLong())).thenReturn(Optional.of(myTermCodeSystemVersion));\n+\t\tsvc.setCodeSystemVersionDaoForUnitTest(myTermCodeSystemVersionDao);\n \t\tsvc.setProcessDeferred(true);\n \t\tsvc.addConceptToStorageQueue(concept);\n \t\tsvc.saveDeferred();\n-\n \t\tverify(myTermConceptStorageSvc, times(1)).saveConcept(same(concept));\n \t\tverifyNoMoreInteractions(myTermConceptStorageSvc);\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testSaveDeferred_Concept_StaleCodeSystemVersion() {\n+\t\tTermConcept concept = new TermConcept();\n+\t\tconcept.setCode(\"CODE_A\");\n+\n+\t\tTermCodeSystemVersion myTermCodeSystemVersion = new TermCodeSystemVersion();\n+\t\tconcept.setCodeSystemVersion(myTermCodeSystemVersion);\n+\n+\t\tTermDeferredStorageSvcImpl svc = new TermDeferredStorageSvcImpl();\n+\t\tsvc.setTransactionManagerForUnitTest(myTxManager);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYxNDYyNQ=="}, "originalCommit": {"oid": "46abdfafe0c71921ccb61e53ed531b114137fd0b"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1888, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}