{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxMDkyMzIx", "number": 2126, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxMzoxNzo1MVrOEsYeDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxMzoxNzo1MVrOEsYeDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTczNzA5OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-server/src/test/java/ca/uhn/fhir/rest/server/interceptor/CorsInterceptorTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxMzoxNzo1MVrOHfneLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMTozODoyNlrOHgOIWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkxNDYwNA==", "bodyText": "Output should be done with a logger, e.g. ourLog.info(\"Custom CorsConfiguration\");. See other tests in this project for examples.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2126#discussion_r502914604", "createdAt": "2020-10-11T13:17:51Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-server/src/test/java/ca/uhn/fhir/rest/server/interceptor/CorsInterceptorTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package ca.uhn.fhir.rest.server.interceptor;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+\n+import java.util.Arrays;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.web.cors.CorsConfiguration;\n+\n+public class CorsInterceptorTest {\n+\n+\t@Test\n+\tpublic void testCustomCorsConfig() {\n+\t\tCorsConfiguration corsConfiguration = new CorsConfiguration();\n+\t\tcorsConfiguration.applyPermitDefaultValues();\n+\t\tcorsConfiguration.setAllowedMethods(Arrays.asList(new String[] { \"*\" }));\n+\t\tcorsConfiguration.setExposedHeaders(Arrays.asList(new String[] {\n+\t\t\t\"Content-Location\",\n+\t\t\t\"Date\",\n+\t\t\t\"ETag\",\n+\t\t\t\"Location\",\n+\t\t\t\"X-Request-Id\",\n+\t\t\t\"X-Correlation-Id\"\n+\t\t}));\n+\t\tCorsInterceptor corsInterceptor = new CorsInterceptor(corsConfiguration);\n+\n+System.err.println(\"Custom CorsConfiguration\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbeeba9e4d2c8a57e0f1f0f5d901fb5963ceb30a"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA2ODIyMQ==", "bodyText": "Ok, done ...\nI revised the code to use SLF4J Logger.info() instead of System.err.println(), and also modified the code to run the test assertions before executing the potentially brittle log output code.\nAdditionally, in pom.xml I added a test-scoped logback-classic dependency, because SLF4J was defaulting to a NOP logger implementation without it (see also http://www.slf4j.org/codes.html#StaticLoggerBinder).", "url": "https://github.com/hapifhir/hapi-fhir/pull/2126#discussion_r503068221", "createdAt": "2020-10-12T06:39:09Z", "author": {"login": "jschneid-nmdp"}, "path": "hapi-fhir-server/src/test/java/ca/uhn/fhir/rest/server/interceptor/CorsInterceptorTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package ca.uhn.fhir.rest.server.interceptor;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+\n+import java.util.Arrays;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.web.cors.CorsConfiguration;\n+\n+public class CorsInterceptorTest {\n+\n+\t@Test\n+\tpublic void testCustomCorsConfig() {\n+\t\tCorsConfiguration corsConfiguration = new CorsConfiguration();\n+\t\tcorsConfiguration.applyPermitDefaultValues();\n+\t\tcorsConfiguration.setAllowedMethods(Arrays.asList(new String[] { \"*\" }));\n+\t\tcorsConfiguration.setExposedHeaders(Arrays.asList(new String[] {\n+\t\t\t\"Content-Location\",\n+\t\t\t\"Date\",\n+\t\t\t\"ETag\",\n+\t\t\t\"Location\",\n+\t\t\t\"X-Request-Id\",\n+\t\t\t\"X-Correlation-Id\"\n+\t\t}));\n+\t\tCorsInterceptor corsInterceptor = new CorsInterceptor(corsConfiguration);\n+\n+System.err.println(\"Custom CorsConfiguration\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkxNDYwNA=="}, "originalCommit": {"oid": "dbeeba9e4d2c8a57e0f1f0f5d901fb5963ceb30a"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU0Nzk5Mw==", "bodyText": "Thanks! Merging now", "url": "https://github.com/hapifhir/hapi-fhir/pull/2126#discussion_r503547993", "createdAt": "2020-10-12T21:38:26Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-server/src/test/java/ca/uhn/fhir/rest/server/interceptor/CorsInterceptorTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package ca.uhn.fhir.rest.server.interceptor;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+\n+import java.util.Arrays;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.web.cors.CorsConfiguration;\n+\n+public class CorsInterceptorTest {\n+\n+\t@Test\n+\tpublic void testCustomCorsConfig() {\n+\t\tCorsConfiguration corsConfiguration = new CorsConfiguration();\n+\t\tcorsConfiguration.applyPermitDefaultValues();\n+\t\tcorsConfiguration.setAllowedMethods(Arrays.asList(new String[] { \"*\" }));\n+\t\tcorsConfiguration.setExposedHeaders(Arrays.asList(new String[] {\n+\t\t\t\"Content-Location\",\n+\t\t\t\"Date\",\n+\t\t\t\"ETag\",\n+\t\t\t\"Location\",\n+\t\t\t\"X-Request-Id\",\n+\t\t\t\"X-Correlation-Id\"\n+\t\t}));\n+\t\tCorsInterceptor corsInterceptor = new CorsInterceptor(corsConfiguration);\n+\n+System.err.println(\"Custom CorsConfiguration\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkxNDYwNA=="}, "originalCommit": {"oid": "dbeeba9e4d2c8a57e0f1f0f5d901fb5963ceb30a"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1811, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}