{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNjYwNjI3", "number": 1945, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxOTowNjoyN1rOEJeWog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxOTowOTozNFrOEJeXyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzY5OTU0OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/PartitioningR4Test.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxOTowNjoyN1rOGp_kjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDo1MjoxM1rOGqhxew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4NjM1MA==", "bodyText": "This is the opposite scenario of what FMC requires.  They are trying to do a PUT with a non-null partition in the request when the pre-existing resource had a null partition.\nI tried adding the following test, but it failed with an error:\n\t@Test\n\tpublic void testUpdate_ResourcePreExistsInNullPartition() {\n\t\tIIdType patientId = createPatient(withPutPartition(1), withId(\"ONE\"), withBirthdate(\"2020-01-01\"));\n\t\taddReadDefaultPartition();\n\t\taddCreateDefaultPartition();\n\n\t\tPatient p = new Patient();\n\t\tp.setId(patientId.toUnqualifiedVersionless());\n\t\tp.setGender(Enumerations.AdministrativeGender.MALE);\n\t\tmyPatientDao.update(p);\n\t}", "url": "https://github.com/hapifhir/hapi-fhir/pull/1945#discussion_r446686350", "createdAt": "2020-06-28T19:06:27Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/PartitioningR4Test.java", "diffHunk": "@@ -2073,12 +2082,24 @@ public void testSearch_RefParam_TargetForcedId_SearchDefaultPartition() {\n \n \t}\n \n+\t@Test\n+\tpublic void testUpdate_ResourcePreExistsInWrongPartition() {\n+\t\tIIdType patientId = createPatient(withPutPartition(null), withId(\"ONE\"), withBirthdate(\"2020-01-01\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49b85541e200313300590947805c52afe47f5805"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzMDkwOQ==", "bodyText": "I think the existing test is the scenario you describe and the test you added is the opposite actually...\nPrecondition: A resource exists, and it's in the\nIIdType patientId = createPatient(withPutPartition(null), withId(\"ONE\"), withBirthdate(\"2020-01-01\"));\nTest:  Have a resource come in with a PUT where the ID already exists. User has read-all-partitions permission, but no write permission at all (since none is needed- nothing will be written).\naddReadAllPartitions();\n\nPatient p = new Patient();\np.setId(patientId.toUnqualifiedVersionless());\np.setGender(Enumerations.AdministrativeGender.MALE);\nmyPatientDao.update(p);", "url": "https://github.com/hapifhir/hapi-fhir/pull/1945#discussion_r447130909", "createdAt": "2020-06-29T17:21:14Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/PartitioningR4Test.java", "diffHunk": "@@ -2073,12 +2082,24 @@ public void testSearch_RefParam_TargetForcedId_SearchDefaultPartition() {\n \n \t}\n \n+\t@Test\n+\tpublic void testUpdate_ResourcePreExistsInWrongPartition() {\n+\t\tIIdType patientId = createPatient(withPutPartition(null), withId(\"ONE\"), withBirthdate(\"2020-01-01\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4NjM1MA=="}, "originalCommit": {"oid": "49b85541e200313300590947805c52afe47f5805"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI0NjcxNQ==", "bodyText": "Ah ok.  Looks like I read the test backwards.  Sounds like it's all good.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1945#discussion_r447246715", "createdAt": "2020-06-29T20:52:13Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/PartitioningR4Test.java", "diffHunk": "@@ -2073,12 +2082,24 @@ public void testSearch_RefParam_TargetForcedId_SearchDefaultPartition() {\n \n \t}\n \n+\t@Test\n+\tpublic void testUpdate_ResourcePreExistsInWrongPartition() {\n+\t\tIIdType patientId = createPatient(withPutPartition(null), withId(\"ONE\"), withBirthdate(\"2020-01-01\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4NjM1MA=="}, "originalCommit": {"oid": "49b85541e200313300590947805c52afe47f5805"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzcwMjQ4OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/changelog/5_1_0/1945-use-read-partition-for-upsert-read.yaml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxOTowOTozNFrOGp_mBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDo1MDo0MVrOGqhuag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4NjcyNQ==", "bodyText": "This reads different from the FMC scenario, but maybe it amounts to the same thing?\nFMC is not using an interceptor; all partition id requests are coming in through http headers.  They can't add partitions to pre-existing resources because there's too much data, so they're leaving all pre-existing resources in the null partition.  New resources coming in (that may pre-exist) have a non-null requested partition id in the header of the request.  This currently throws an error when the resource already exists in the null partition.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1945#discussion_r446686725", "createdAt": "2020-06-28T19:09:34Z", "author": {"login": "fil512"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/changelog/5_1_0/1945-use-read-partition-for-upsert-read.yaml", "diffHunk": "@@ -0,0 +1,7 @@\n+---\n+type: change\n+issue: 1945\n+title: \"When performing a JPA 'upsert' (a PUT to an ID that may or may not already exist) on a partitioned system,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49b85541e200313300590947805c52afe47f5805"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzMTU5MA==", "bodyText": "It's not possible to use partitioning without an interceptor. They have to be using one unless they're doing URL based multitenancy (whcih they aren't).\nTheir interceptor should be allowing all partitions for all reads, and setting the write partition based on the incoming header.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1945#discussion_r447131590", "createdAt": "2020-06-29T17:22:27Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/changelog/5_1_0/1945-use-read-partition-for-upsert-read.yaml", "diffHunk": "@@ -0,0 +1,7 @@\n+---\n+type: change\n+issue: 1945\n+title: \"When performing a JPA 'upsert' (a PUT to an ID that may or may not already exist) on a partitioned system,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4NjcyNQ=="}, "originalCommit": {"oid": "49b85541e200313300590947805c52afe47f5805"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI0NTkzMA==", "bodyText": "I just spoke with Rakesh and he confirmed his interceptor works as you describe.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1945#discussion_r447245930", "createdAt": "2020-06-29T20:50:41Z", "author": {"login": "fil512"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/changelog/5_1_0/1945-use-read-partition-for-upsert-read.yaml", "diffHunk": "@@ -0,0 +1,7 @@\n+---\n+type: change\n+issue: 1945\n+title: \"When performing a JPA 'upsert' (a PUT to an ID that may or may not already exist) on a partitioned system,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4NjcyNQ=="}, "originalCommit": {"oid": "49b85541e200313300590947805c52afe47f5805"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1883, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}