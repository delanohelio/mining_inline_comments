{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3OTg0MDk0", "number": 1759, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMToxODoxNlrODn--sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMToyOToxM1rODn_QSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjUyOTEyOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/ISearchDao.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMToxODoxNlrOF2TTxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTozNjo1OFrOF3h3Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ4Mzc4Mw==", "bodyText": "Would putting IS NULL ahead of = false be faster?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1759#discussion_r392483783", "createdAt": "2020-03-13T21:18:16Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/ISearchDao.java", "diffHunk": "@@ -37,17 +37,24 @@\n \t@Query(\"SELECT s FROM Search s LEFT OUTER JOIN FETCH s.myIncludes WHERE s.myUuid = :uuid\")\n \tOptional<Search> findByUuidAndFetchIncludes(@Param(\"uuid\") String theUuid);\n \n-\t@Query(\"SELECT s.myId FROM Search s WHERE (s.myCreated < :cutoff) AND (s.myExpiryOrNull IS NULL OR s.myExpiryOrNull < :now)\")\n+\t@Query(\"SELECT s.myId FROM Search s WHERE (s.myCreated < :cutoff) AND (s.myExpiryOrNull IS NULL OR s.myExpiryOrNull < :now) AND (s.myDeleted = FALSE OR s.myDeleted IS NULL)\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ed926f3de5d33cdd68b09cc3e3c60c3f57b4e87"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc3MDc5OQ==", "bodyText": "Good question. I expect the null case to be the more common one so possibly? I'll swap them", "url": "https://github.com/hapifhir/hapi-fhir/pull/1759#discussion_r393770799", "createdAt": "2020-03-17T15:36:58Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/ISearchDao.java", "diffHunk": "@@ -37,17 +37,24 @@\n \t@Query(\"SELECT s FROM Search s LEFT OUTER JOIN FETCH s.myIncludes WHERE s.myUuid = :uuid\")\n \tOptional<Search> findByUuidAndFetchIncludes(@Param(\"uuid\") String theUuid);\n \n-\t@Query(\"SELECT s.myId FROM Search s WHERE (s.myCreated < :cutoff) AND (s.myExpiryOrNull IS NULL OR s.myExpiryOrNull < :now)\")\n+\t@Query(\"SELECT s.myId FROM Search s WHERE (s.myCreated < :cutoff) AND (s.myExpiryOrNull IS NULL OR s.myExpiryOrNull < :now) AND (s.myDeleted = FALSE OR s.myDeleted IS NULL)\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ4Mzc4Mw=="}, "originalCommit": {"oid": "3ed926f3de5d33cdd68b09cc3e3c60c3f57b4e87"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjUzNDkwOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/cache/DatabaseSearchCacheSvcImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMToxOTo0M1rOF2TXRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMToxOTo0M1rOF2TXRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ4NDY3OQ==", "bodyText": "nice!", "url": "https://github.com/hapifhir/hapi-fhir/pull/1759#discussion_r392484679", "createdAt": "2020-03-13T21:19:43Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/cache/DatabaseSearchCacheSvcImpl.java", "diffHunk": "@@ -56,17 +56,18 @@\n \tpublic static final int DEFAULT_MAX_RESULTS_TO_DELETE_IN_ONE_STMT = 500;\n \tpublic static final int DEFAULT_MAX_RESULTS_TO_DELETE_IN_ONE_PAS = 20000;\n \tpublic static final long SEARCH_CLEANUP_JOB_INTERVAL_MILLIS = 10 * DateUtils.MILLIS_PER_SECOND;\n+\tpublic static final int DEFAULT_MAX_DELETE_CANDIDATES_TO_FIND = 2000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ed926f3de5d33cdd68b09cc3e3c60c3f57b4e87"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjU0NjA1OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/cache/DatabaseSearchCacheSvcImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMToyMjoxNlrOF2Tdhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMToyMjoxNlrOF2Tdhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ4NjI3OQ==", "bodyText": "typo.  ONE_PAS", "url": "https://github.com/hapifhir/hapi-fhir/pull/1759#discussion_r392486279", "createdAt": "2020-03-13T21:22:16Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/cache/DatabaseSearchCacheSvcImpl.java", "diffHunk": "@@ -56,17 +56,18 @@\n \tpublic static final int DEFAULT_MAX_RESULTS_TO_DELETE_IN_ONE_STMT = 500;\n \tpublic static final int DEFAULT_MAX_RESULTS_TO_DELETE_IN_ONE_PAS = 20000;\n \tpublic static final long SEARCH_CLEANUP_JOB_INTERVAL_MILLIS = 10 * DateUtils.MILLIS_PER_SECOND;\n+\tpublic static final int DEFAULT_MAX_DELETE_CANDIDATES_TO_FIND = 2000;\n \tprivate static final Logger ourLog = LoggerFactory.getLogger(DatabaseSearchCacheSvcImpl.class);\n \tprivate static int ourMaximumResultsToDeleteInOneStatement = DEFAULT_MAX_RESULTS_TO_DELETE_IN_ONE_STMT;\n \tprivate static int ourMaximumResultsToDeleteInOnePass = DEFAULT_MAX_RESULTS_TO_DELETE_IN_ONE_PAS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ed926f3de5d33cdd68b09cc3e3c60c3f57b4e87"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjU3NDE2OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/SearchCoordinatorSvcImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMToyOToxM1rOF2TuFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTozNzo0NVrOF3h5hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ5MDUxOA==", "bodyText": "this doesn't appear to be used anywhere", "url": "https://github.com/hapifhir/hapi-fhir/pull/1759#discussion_r392490518", "createdAt": "2020-03-13T21:29:13Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/SearchCoordinatorSvcImplTest.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package ca.uhn.fhir.jpa.dao.r4;\n+\n+import ca.uhn.fhir.jpa.dao.IFulltextSearchSvc;\n+import ca.uhn.fhir.jpa.dao.data.ISearchDao;\n+import ca.uhn.fhir.jpa.dao.data.ISearchResultDao;\n+import ca.uhn.fhir.jpa.entity.Search;\n+import ca.uhn.fhir.jpa.entity.SearchResult;\n+import ca.uhn.fhir.jpa.entity.SearchTypeEnum;\n+import ca.uhn.fhir.jpa.model.cross.ResourcePersistentId;\n+import ca.uhn.fhir.jpa.model.search.SearchStatusEnum;\n+import ca.uhn.fhir.jpa.search.ISearchCoordinatorSvc;\n+import ca.uhn.fhir.jpa.search.cache.DatabaseSearchCacheSvcImpl;\n+import ca.uhn.fhir.jpa.search.cache.ISearchCacheSvc;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.rest.api.Constants;\n+import ca.uhn.fhir.rest.param.StringAndListParam;\n+import ca.uhn.fhir.rest.param.StringOrListParam;\n+import ca.uhn.fhir.rest.param.StringParam;\n+import ca.uhn.fhir.util.TestUtil;\n+import org.apache.commons.lang3.time.DateUtils;\n+import org.hl7.fhir.r4.model.Organization;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import static ca.uhn.fhir.jpa.search.cache.DatabaseSearchCacheSvcImpl.DEFAULT_MAX_DELETE_CANDIDATES_TO_FIND;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.empty;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThat;\n+\n+public class SearchCoordinatorSvcImplTest extends BaseJpaR4Test {\n+\n+\t@AfterClass\n+\tpublic static void afterClassClearContext() {\n+\t\tTestUtil.clearAllStaticFieldsForUnitTest();\n+\t}\n+\n+\n+\t@Autowired\n+\tprivate ISearchDao mySearchDao;\n+\n+\t@Autowired\n+\tprivate ISearchResultDao mySearchResultDao;\n+\n+\t@Autowired\n+\tprivate ISearchCoordinatorSvc mySearchCoordinator;\n+\n+\t@Autowired\n+\tprivate ISearchCacheSvc myDataaseCacheSvc;\n+\n+\t@After\n+\tpublic void after() {\n+\t\tDatabaseSearchCacheSvcImpl.setMaximumResultsToDeleteInOnePassForUnitTest(DatabaseSearchCacheSvcImpl.DEFAULT_MAX_RESULTS_TO_DELETE_IN_ONE_PAS);\n+\t\tDatabaseSearchCacheSvcImpl.setMaximumSearchesToCheckForDeletionCandidacyForUnitTest(DEFAULT_MAX_DELETE_CANDIDATES_TO_FIND);\n+\t}\n+\n+\t@Test\n+\tpublic void testDeleteDontMarkPreviouslyMarkedSearchesAsDeleted() {\n+\t\tDatabaseSearchCacheSvcImpl.setMaximumResultsToDeleteInOnePassForUnitTest(5);\n+\t\tDatabaseSearchCacheSvcImpl.setMaximumSearchesToCheckForDeletionCandidacyForUnitTest(10);\n+\n+\t\t// Create lots of searches\n+\t\trunInTransaction(()->{\n+\t\t\tfor (int i = 0; i < 20; i++) {\n+\t\t\t\tSearch search = new Search();\n+\t\t\t\tsearch.setCreated(DateUtils.addDays(new Date(), -1));\n+\t\t\t\tsearch.setLastUpdated(DateUtils.addDays(new Date(), -1), DateUtils.addDays(new Date(), -1));\n+\t\t\t\tsearch.setUuid(UUID.randomUUID().toString());\n+\t\t\t\tsearch.setSearchType(SearchTypeEnum.SEARCH);\n+\t\t\t\tsearch.setStatus(SearchStatusEnum.FINISHED);\n+\t\t\t\tmySearchDao.save(search);\n+\n+\t\t\t\t// Add a bunch of search results to a few (enough that it will take multiple passes)\n+\t\t\t\tif (i < 3) {\n+\t\t\t\t\tfor (int j = 0; j < 10; j++) {\n+\t\t\t\t\t\tSearchResult sr = new SearchResult(search);\n+\t\t\t\t\t\tsr.setOrder(j);\n+\t\t\t\t\t\tsr.setResourcePid((long) j);\n+\t\t\t\t\t\tmySearchResultDao.save(sr);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t}\n+\t\t});\n+\n+\t\trunInTransaction(()->{\n+\t\t\tassertEquals(20, mySearchDao.count());\n+\t\t\tassertEquals(30, mySearchResultDao.count());\n+\t\t});\n+\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tmyDataaseCacheSvc.pollForStaleSearchesAndDeleteThem();\n+\t\trunInTransaction(()->{\n+\t\t\t// We should delete up to 10, but 3 don't get deleted since they have too many results to delete in one pass\n+\t\t\tassertEquals(13, mySearchDao.count());\n+\t\t\tassertEquals(3, mySearchDao.countDeleted());\n+\t\t\t// We delete a max of 5 results per search, so half are gone\n+\t\t\tassertEquals(15, mySearchResultDao.count());\n+\t\t});\n+\n+\t\tmyCaptureQueriesListener.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ed926f3de5d33cdd68b09cc3e3c60c3f57b4e87"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc3MTM5OQ==", "bodyText": "will remove", "url": "https://github.com/hapifhir/hapi-fhir/pull/1759#discussion_r393771399", "createdAt": "2020-03-17T15:37:45Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/SearchCoordinatorSvcImplTest.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package ca.uhn.fhir.jpa.dao.r4;\n+\n+import ca.uhn.fhir.jpa.dao.IFulltextSearchSvc;\n+import ca.uhn.fhir.jpa.dao.data.ISearchDao;\n+import ca.uhn.fhir.jpa.dao.data.ISearchResultDao;\n+import ca.uhn.fhir.jpa.entity.Search;\n+import ca.uhn.fhir.jpa.entity.SearchResult;\n+import ca.uhn.fhir.jpa.entity.SearchTypeEnum;\n+import ca.uhn.fhir.jpa.model.cross.ResourcePersistentId;\n+import ca.uhn.fhir.jpa.model.search.SearchStatusEnum;\n+import ca.uhn.fhir.jpa.search.ISearchCoordinatorSvc;\n+import ca.uhn.fhir.jpa.search.cache.DatabaseSearchCacheSvcImpl;\n+import ca.uhn.fhir.jpa.search.cache.ISearchCacheSvc;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.rest.api.Constants;\n+import ca.uhn.fhir.rest.param.StringAndListParam;\n+import ca.uhn.fhir.rest.param.StringOrListParam;\n+import ca.uhn.fhir.rest.param.StringParam;\n+import ca.uhn.fhir.util.TestUtil;\n+import org.apache.commons.lang3.time.DateUtils;\n+import org.hl7.fhir.r4.model.Organization;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import static ca.uhn.fhir.jpa.search.cache.DatabaseSearchCacheSvcImpl.DEFAULT_MAX_DELETE_CANDIDATES_TO_FIND;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.empty;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThat;\n+\n+public class SearchCoordinatorSvcImplTest extends BaseJpaR4Test {\n+\n+\t@AfterClass\n+\tpublic static void afterClassClearContext() {\n+\t\tTestUtil.clearAllStaticFieldsForUnitTest();\n+\t}\n+\n+\n+\t@Autowired\n+\tprivate ISearchDao mySearchDao;\n+\n+\t@Autowired\n+\tprivate ISearchResultDao mySearchResultDao;\n+\n+\t@Autowired\n+\tprivate ISearchCoordinatorSvc mySearchCoordinator;\n+\n+\t@Autowired\n+\tprivate ISearchCacheSvc myDataaseCacheSvc;\n+\n+\t@After\n+\tpublic void after() {\n+\t\tDatabaseSearchCacheSvcImpl.setMaximumResultsToDeleteInOnePassForUnitTest(DatabaseSearchCacheSvcImpl.DEFAULT_MAX_RESULTS_TO_DELETE_IN_ONE_PAS);\n+\t\tDatabaseSearchCacheSvcImpl.setMaximumSearchesToCheckForDeletionCandidacyForUnitTest(DEFAULT_MAX_DELETE_CANDIDATES_TO_FIND);\n+\t}\n+\n+\t@Test\n+\tpublic void testDeleteDontMarkPreviouslyMarkedSearchesAsDeleted() {\n+\t\tDatabaseSearchCacheSvcImpl.setMaximumResultsToDeleteInOnePassForUnitTest(5);\n+\t\tDatabaseSearchCacheSvcImpl.setMaximumSearchesToCheckForDeletionCandidacyForUnitTest(10);\n+\n+\t\t// Create lots of searches\n+\t\trunInTransaction(()->{\n+\t\t\tfor (int i = 0; i < 20; i++) {\n+\t\t\t\tSearch search = new Search();\n+\t\t\t\tsearch.setCreated(DateUtils.addDays(new Date(), -1));\n+\t\t\t\tsearch.setLastUpdated(DateUtils.addDays(new Date(), -1), DateUtils.addDays(new Date(), -1));\n+\t\t\t\tsearch.setUuid(UUID.randomUUID().toString());\n+\t\t\t\tsearch.setSearchType(SearchTypeEnum.SEARCH);\n+\t\t\t\tsearch.setStatus(SearchStatusEnum.FINISHED);\n+\t\t\t\tmySearchDao.save(search);\n+\n+\t\t\t\t// Add a bunch of search results to a few (enough that it will take multiple passes)\n+\t\t\t\tif (i < 3) {\n+\t\t\t\t\tfor (int j = 0; j < 10; j++) {\n+\t\t\t\t\t\tSearchResult sr = new SearchResult(search);\n+\t\t\t\t\t\tsr.setOrder(j);\n+\t\t\t\t\t\tsr.setResourcePid((long) j);\n+\t\t\t\t\t\tmySearchResultDao.save(sr);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t}\n+\t\t});\n+\n+\t\trunInTransaction(()->{\n+\t\t\tassertEquals(20, mySearchDao.count());\n+\t\t\tassertEquals(30, mySearchResultDao.count());\n+\t\t});\n+\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tmyDataaseCacheSvc.pollForStaleSearchesAndDeleteThem();\n+\t\trunInTransaction(()->{\n+\t\t\t// We should delete up to 10, but 3 don't get deleted since they have too many results to delete in one pass\n+\t\t\tassertEquals(13, mySearchDao.count());\n+\t\t\tassertEquals(3, mySearchDao.countDeleted());\n+\t\t\t// We delete a max of 5 results per search, so half are gone\n+\t\t\tassertEquals(15, mySearchResultDao.count());\n+\t\t});\n+\n+\t\tmyCaptureQueriesListener.clear();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ5MDUxOA=="}, "originalCommit": {"oid": "3ed926f3de5d33cdd68b09cc3e3c60c3f57b4e87"}, "originalPosition": 108}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1924, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}