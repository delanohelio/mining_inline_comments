{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2Nzc1Nzc5", "number": 2076, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo0MDoxOFrOEjRGJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxOToyODoxN1rOEjSHzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDE1NzE3OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/broker/EmpiMessageHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo0MDoxOFrOHRh6-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxOTo0NDoxM1rOHRkAkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0MzYxMQ==", "bodyText": "is the upcast really necessary?  So strange...", "url": "https://github.com/hapifhir/hapi-fhir/pull/2076#discussion_r488143611", "createdAt": "2020-09-14T18:40:18Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/broker/EmpiMessageHandler.java", "diffHunk": "@@ -95,7 +96,8 @@ public void matchEmpiAndUpdateLinks(ResourceModifiedMessage theMsg) {\n \t\t} finally {\n \t\t\t// Interceptor call: EMPI_AFTER_PERSISTED_RESOURCE_CHECKED\n \t\t\tHookParams params = new HookParams()\n-\t\t\t\t.add(ResourceModifiedMessage.class, theMsg)\n+\t\t\t\t//Janky upcast.\n+\t\t\t\t.add(BaseResourceModifiedMessage.class, (BaseResourceModifiedMessage) theMsg)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f20c42a8bd92167c322950f98ce2fa29361124f6"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE3MzM5Mw==", "bodyText": "Investigating...", "url": "https://github.com/hapifhir/hapi-fhir/pull/2076#discussion_r488173393", "createdAt": "2020-09-14T19:35:19Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/broker/EmpiMessageHandler.java", "diffHunk": "@@ -95,7 +96,8 @@ public void matchEmpiAndUpdateLinks(ResourceModifiedMessage theMsg) {\n \t\t} finally {\n \t\t\t// Interceptor call: EMPI_AFTER_PERSISTED_RESOURCE_CHECKED\n \t\t\tHookParams params = new HookParams()\n-\t\t\t\t.add(ResourceModifiedMessage.class, theMsg)\n+\t\t\t\t//Janky upcast.\n+\t\t\t\t.add(BaseResourceModifiedMessage.class, (BaseResourceModifiedMessage) theMsg)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0MzYxMQ=="}, "originalCommit": {"oid": "f20c42a8bd92167c322950f98ce2fa29361124f6"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE3NzgxMA==", "bodyText": "This was indeed a waste of characters", "url": "https://github.com/hapifhir/hapi-fhir/pull/2076#discussion_r488177810", "createdAt": "2020-09-14T19:44:13Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/broker/EmpiMessageHandler.java", "diffHunk": "@@ -95,7 +96,8 @@ public void matchEmpiAndUpdateLinks(ResourceModifiedMessage theMsg) {\n \t\t} finally {\n \t\t\t// Interceptor call: EMPI_AFTER_PERSISTED_RESOURCE_CHECKED\n \t\t\tHookParams params = new HookParams()\n-\t\t\t\t.add(ResourceModifiedMessage.class, theMsg)\n+\t\t\t\t//Janky upcast.\n+\t\t\t\t.add(BaseResourceModifiedMessage.class, (BaseResourceModifiedMessage) theMsg)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0MzYxMQ=="}, "originalCommit": {"oid": "f20c42a8bd92167c322950f98ce2fa29361124f6"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDE2NjIyOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/match/deliver/message/SubscriptionDeliveringMessageSubscriber.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo0Mjo0OVrOHRiAag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxOTozMDowMVrOHRjk1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0NTAwMg==", "bodyText": "The subscription id could be useful to the recipient.  I would leave it in and populate it if possible.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2076#discussion_r488145002", "createdAt": "2020-09-14T18:42:49Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/match/deliver/message/SubscriptionDeliveringMessageSubscriber.java", "diffHunk": "@@ -63,6 +63,7 @@ protected void deliverPayload(ResourceDeliveryMessage theMsg, CanonicalSubscript\n \t}\n \n \tprotected void doDelivery(ResourceDeliveryMessage theMsg, CanonicalSubscription theSubscription, IChannelProducer theChannelProducer, IBaseResource thePayloadResource) {\n+\t\t//TODO GGG/KHS Question: is this the point at which we can use a BaseResourceModifiedMessage, since technically we no longer have need of a subscriptionId?\n \t\tResourceModifiedMessage payload = new ResourceModifiedMessage(myFhirContext, thePayloadResource, theMsg.getOperationType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f20c42a8bd92167c322950f98ce2fa29361124f6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE3MDcwOQ==", "bodyText": "Righto, so no change is required here.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2076#discussion_r488170709", "createdAt": "2020-09-14T19:30:01Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/match/deliver/message/SubscriptionDeliveringMessageSubscriber.java", "diffHunk": "@@ -63,6 +63,7 @@ protected void deliverPayload(ResourceDeliveryMessage theMsg, CanonicalSubscript\n \t}\n \n \tprotected void doDelivery(ResourceDeliveryMessage theMsg, CanonicalSubscription theSubscription, IChannelProducer theChannelProducer, IBaseResource thePayloadResource) {\n+\t\t//TODO GGG/KHS Question: is this the point at which we can use a BaseResourceModifiedMessage, since technically we no longer have need of a subscriptionId?\n \t\tResourceModifiedMessage payload = new ResourceModifiedMessage(myFhirContext, thePayloadResource, theMsg.getOperationType());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0NTAwMg=="}, "originalCommit": {"oid": "f20c42a8bd92167c322950f98ce2fa29361124f6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDE2ODQ2OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/match/matcher/subscriber/SubscriptionMatchingSubscriber.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo0MzoyM1rOHRiBog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxOTozNDowNVrOHRjszA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0NTMxNA==", "bodyText": "That TODO should probably be a FIXME", "url": "https://github.com/hapifhir/hapi-fhir/pull/2076#discussion_r488145314", "createdAt": "2020-09-14T18:43:23Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/match/matcher/subscriber/SubscriptionMatchingSubscriber.java", "diffHunk": "@@ -79,14 +79,14 @@ public SubscriptionMatchingSubscriber() {\n \tpublic void handleMessage(@Nonnull Message<?> theMessage) throws MessagingException {\n \t\tourLog.trace(\"Handling resource modified message: {}\", theMessage);\n \n+\t\t//TODO ADD BACKPORT FOR HANDLING OLD LEGACY SUBSCRIPTIONS HERE\n \t\tif (!(theMessage instanceof ResourceModifiedJsonMessage)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f20c42a8bd92167c322950f98ce2fa29361124f6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE3Mjc0OA==", "bodyText": "Actually this was a dead comment. Earlier we agreed that the class won't change, because of the issue of the Pointcuts having their arguments changed, while there are messages in flight.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2076#discussion_r488172748", "createdAt": "2020-09-14T19:34:05Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/match/matcher/subscriber/SubscriptionMatchingSubscriber.java", "diffHunk": "@@ -79,14 +79,14 @@ public SubscriptionMatchingSubscriber() {\n \tpublic void handleMessage(@Nonnull Message<?> theMessage) throws MessagingException {\n \t\tourLog.trace(\"Handling resource modified message: {}\", theMessage);\n \n+\t\t//TODO ADD BACKPORT FOR HANDLING OLD LEGACY SUBSCRIPTIONS HERE\n \t\tif (!(theMessage instanceof ResourceModifiedJsonMessage)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0NTMxNA=="}, "originalCommit": {"oid": "f20c42a8bd92167c322950f98ce2fa29361124f6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDIyNjQ5OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-server/src/main/java/ca/uhn/fhir/rest/server/messaging/BaseResourceModifiedMessage.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo1OTo1NlrOHRilSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMjowMjoyMFrOHRoQfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE1NDQ0MQ==", "bodyText": "I thought we agreed this would only be in the EMPI class", "url": "https://github.com/hapifhir/hapi-fhir/pull/2076#discussion_r488154441", "createdAt": "2020-09-14T18:59:56Z", "author": {"login": "fil512"}, "path": "hapi-fhir-server/src/main/java/ca/uhn/fhir/rest/server/messaging/BaseResourceModifiedMessage.java", "diffHunk": "@@ -0,0 +1,184 @@\n+package ca.uhn.fhir.rest.server.messaging;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.model.api.IModelJson;\n+import ca.uhn.fhir.parser.IParser;\n+import ca.uhn.fhir.rest.api.EncodingEnum;\n+import ca.uhn.fhir.rest.api.server.RequestDetails;\n+import ca.uhn.fhir.util.ResourceReferenceInfo;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+\n+import java.util.List;\n+\n+import static org.apache.commons.lang3.StringUtils.isBlank;\n+import static org.apache.commons.lang3.StringUtils.isNotBlank;\n+\n+public class BaseResourceModifiedMessage extends BaseResourceMessage implements IResourceMessage, IModelJson {\n+\n+\t@JsonProperty(\"resourceId\")\n+\tprotected String myId;\n+\t@JsonProperty(\"operationType\")\n+\tprotected OperationTypeEnum myOperationType;\n+\t@JsonProperty(\"payload\")\n+\tprotected String myPayload;\n+\t@JsonProperty(\"payloadId\")\n+\tprotected String myPayloadId;\n+\t@JsonProperty(\"parentTransactionGuid\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f20c42a8bd92167c322950f98ce2fa29361124f6"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE3MjA3NA==", "bodyText": "For now the only thing that cares about the parentTransactionGuid is EMPI, but I feel it is helpful to know which original transaction caused hooks to fire. Seems to me like something we will want. If you disagree, that's fine, I can subclass it out. Let me know", "url": "https://github.com/hapifhir/hapi-fhir/pull/2076#discussion_r488172074", "createdAt": "2020-09-14T19:32:44Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-server/src/main/java/ca/uhn/fhir/rest/server/messaging/BaseResourceModifiedMessage.java", "diffHunk": "@@ -0,0 +1,184 @@\n+package ca.uhn.fhir.rest.server.messaging;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.model.api.IModelJson;\n+import ca.uhn.fhir.parser.IParser;\n+import ca.uhn.fhir.rest.api.EncodingEnum;\n+import ca.uhn.fhir.rest.api.server.RequestDetails;\n+import ca.uhn.fhir.util.ResourceReferenceInfo;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+\n+import java.util.List;\n+\n+import static org.apache.commons.lang3.StringUtils.isBlank;\n+import static org.apache.commons.lang3.StringUtils.isNotBlank;\n+\n+public class BaseResourceModifiedMessage extends BaseResourceMessage implements IResourceMessage, IModelJson {\n+\n+\t@JsonProperty(\"resourceId\")\n+\tprotected String myId;\n+\t@JsonProperty(\"operationType\")\n+\tprotected OperationTypeEnum myOperationType;\n+\t@JsonProperty(\"payload\")\n+\tprotected String myPayload;\n+\t@JsonProperty(\"payloadId\")\n+\tprotected String myPayloadId;\n+\t@JsonProperty(\"parentTransactionGuid\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE1NDQ0MQ=="}, "originalCommit": {"oid": "f20c42a8bd92167c322950f98ce2fa29361124f6"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE3NDMzNw==", "bodyText": "it isn't relevant to channel import so it shouldn't be on that one", "url": "https://github.com/hapifhir/hapi-fhir/pull/2076#discussion_r488174337", "createdAt": "2020-09-14T19:37:14Z", "author": {"login": "fil512"}, "path": "hapi-fhir-server/src/main/java/ca/uhn/fhir/rest/server/messaging/BaseResourceModifiedMessage.java", "diffHunk": "@@ -0,0 +1,184 @@\n+package ca.uhn.fhir.rest.server.messaging;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.model.api.IModelJson;\n+import ca.uhn.fhir.parser.IParser;\n+import ca.uhn.fhir.rest.api.EncodingEnum;\n+import ca.uhn.fhir.rest.api.server.RequestDetails;\n+import ca.uhn.fhir.util.ResourceReferenceInfo;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+\n+import java.util.List;\n+\n+import static org.apache.commons.lang3.StringUtils.isBlank;\n+import static org.apache.commons.lang3.StringUtils.isNotBlank;\n+\n+public class BaseResourceModifiedMessage extends BaseResourceMessage implements IResourceMessage, IModelJson {\n+\n+\t@JsonProperty(\"resourceId\")\n+\tprotected String myId;\n+\t@JsonProperty(\"operationType\")\n+\tprotected OperationTypeEnum myOperationType;\n+\t@JsonProperty(\"payload\")\n+\tprotected String myPayload;\n+\t@JsonProperty(\"payloadId\")\n+\tprotected String myPayloadId;\n+\t@JsonProperty(\"parentTransactionGuid\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE1NDQ0MQ=="}, "originalCommit": {"oid": "f20c42a8bd92167c322950f98ce2fa29361124f6"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE3NTY5NQ==", "bodyText": "\ud83d\ude46\u200d\u2642\ufe0f", "url": "https://github.com/hapifhir/hapi-fhir/pull/2076#discussion_r488175695", "createdAt": "2020-09-14T19:39:54Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-server/src/main/java/ca/uhn/fhir/rest/server/messaging/BaseResourceModifiedMessage.java", "diffHunk": "@@ -0,0 +1,184 @@\n+package ca.uhn.fhir.rest.server.messaging;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.model.api.IModelJson;\n+import ca.uhn.fhir.parser.IParser;\n+import ca.uhn.fhir.rest.api.EncodingEnum;\n+import ca.uhn.fhir.rest.api.server.RequestDetails;\n+import ca.uhn.fhir.util.ResourceReferenceInfo;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+\n+import java.util.List;\n+\n+import static org.apache.commons.lang3.StringUtils.isBlank;\n+import static org.apache.commons.lang3.StringUtils.isNotBlank;\n+\n+public class BaseResourceModifiedMessage extends BaseResourceMessage implements IResourceMessage, IModelJson {\n+\n+\t@JsonProperty(\"resourceId\")\n+\tprotected String myId;\n+\t@JsonProperty(\"operationType\")\n+\tprotected OperationTypeEnum myOperationType;\n+\t@JsonProperty(\"payload\")\n+\tprotected String myPayload;\n+\t@JsonProperty(\"payloadId\")\n+\tprotected String myPayloadId;\n+\t@JsonProperty(\"parentTransactionGuid\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE1NDQ0MQ=="}, "originalCommit": {"oid": "f20c42a8bd92167c322950f98ce2fa29361124f6"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI0NzQyMw==", "bodyText": "as per our conversation, I am going to move this attribute to a parent class and document it. See a9fb849", "url": "https://github.com/hapifhir/hapi-fhir/pull/2076#discussion_r488247423", "createdAt": "2020-09-14T22:02:20Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-server/src/main/java/ca/uhn/fhir/rest/server/messaging/BaseResourceModifiedMessage.java", "diffHunk": "@@ -0,0 +1,184 @@\n+package ca.uhn.fhir.rest.server.messaging;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.model.api.IModelJson;\n+import ca.uhn.fhir.parser.IParser;\n+import ca.uhn.fhir.rest.api.EncodingEnum;\n+import ca.uhn.fhir.rest.api.server.RequestDetails;\n+import ca.uhn.fhir.util.ResourceReferenceInfo;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+\n+import java.util.List;\n+\n+import static org.apache.commons.lang3.StringUtils.isBlank;\n+import static org.apache.commons.lang3.StringUtils.isNotBlank;\n+\n+public class BaseResourceModifiedMessage extends BaseResourceMessage implements IResourceMessage, IModelJson {\n+\n+\t@JsonProperty(\"resourceId\")\n+\tprotected String myId;\n+\t@JsonProperty(\"operationType\")\n+\tprotected OperationTypeEnum myOperationType;\n+\t@JsonProperty(\"payload\")\n+\tprotected String myPayload;\n+\t@JsonProperty(\"payloadId\")\n+\tprotected String myPayloadId;\n+\t@JsonProperty(\"parentTransactionGuid\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE1NDQ0MQ=="}, "originalCommit": {"oid": "f20c42a8bd92167c322950f98ce2fa29361124f6"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDMyMzM4OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-server/src/main/java/ca/uhn/fhir/rest/server/messaging/json/HapiMessageHeaders.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxOToyNzo0MlrOHRjgXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxOToyNzo0MlrOHRjgXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE2OTU2NQ==", "bodyText": "RETRY_COUNT_KEY", "url": "https://github.com/hapifhir/hapi-fhir/pull/2076#discussion_r488169565", "createdAt": "2020-09-14T19:27:42Z", "author": {"login": "fil512"}, "path": "hapi-fhir-server/src/main/java/ca/uhn/fhir/rest/server/messaging/json/HapiMessageHeaders.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package ca.uhn.fhir.rest.server.messaging.json;\n+\n+import ca.uhn.fhir.model.api.IModelJson;\n+\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * This class is for holding headers for BaseJsonMessages. Any serializable data can be thrown into\n+ * the header map. There are also three special headers, defined by the constants in this class, which are for use\n+ * in message handling retrying. There are also matching helper functions for fetching those special variables; however\n+ * they can also be accessed in standard map fashion with a `get` on the map.\n+ */\n+public class HapiMessageHeaders implements Map<String, Object>, IModelJson {\n+    public static String RETRY_COUNT_HEADER = \"retryCount\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f20c42a8bd92167c322950f98ce2fa29361124f6"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDMyNDMzOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-server/src/main/java/ca/uhn/fhir/rest/server/messaging/json/HapiMessageHeaders.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxOToyNzo1OFrOHRjg4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxOToyNzo1OFrOHRjg4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE2OTY5OA==", "bodyText": "FIRST_FAILURE_TIMESTAMP_KEY", "url": "https://github.com/hapifhir/hapi-fhir/pull/2076#discussion_r488169698", "createdAt": "2020-09-14T19:27:58Z", "author": {"login": "fil512"}, "path": "hapi-fhir-server/src/main/java/ca/uhn/fhir/rest/server/messaging/json/HapiMessageHeaders.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package ca.uhn.fhir.rest.server.messaging.json;\n+\n+import ca.uhn.fhir.model.api.IModelJson;\n+\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * This class is for holding headers for BaseJsonMessages. Any serializable data can be thrown into\n+ * the header map. There are also three special headers, defined by the constants in this class, which are for use\n+ * in message handling retrying. There are also matching helper functions for fetching those special variables; however\n+ * they can also be accessed in standard map fashion with a `get` on the map.\n+ */\n+public class HapiMessageHeaders implements Map<String, Object>, IModelJson {\n+    public static String RETRY_COUNT_HEADER = \"retryCount\";\n+    public static String FIRST_FAILURE_HEADER = \"firstFailure\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f20c42a8bd92167c322950f98ce2fa29361124f6"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDMyNTI3OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-server/src/main/java/ca/uhn/fhir/rest/server/messaging/json/HapiMessageHeaders.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxOToyODoxN1rOHRjheA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxOToyODoxN1rOHRjheA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE2OTg0OA==", "bodyText": "LAST_FAILURE_TIMESTAMP_KEY", "url": "https://github.com/hapifhir/hapi-fhir/pull/2076#discussion_r488169848", "createdAt": "2020-09-14T19:28:17Z", "author": {"login": "fil512"}, "path": "hapi-fhir-server/src/main/java/ca/uhn/fhir/rest/server/messaging/json/HapiMessageHeaders.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package ca.uhn.fhir.rest.server.messaging.json;\n+\n+import ca.uhn.fhir.model.api.IModelJson;\n+\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * This class is for holding headers for BaseJsonMessages. Any serializable data can be thrown into\n+ * the header map. There are also three special headers, defined by the constants in this class, which are for use\n+ * in message handling retrying. There are also matching helper functions for fetching those special variables; however\n+ * they can also be accessed in standard map fashion with a `get` on the map.\n+ */\n+public class HapiMessageHeaders implements Map<String, Object>, IModelJson {\n+    public static String RETRY_COUNT_HEADER = \"retryCount\";\n+    public static String FIRST_FAILURE_HEADER = \"firstFailure\";\n+    public static String LAST_FAILURE_HEADER = \"lastFailure\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f20c42a8bd92167c322950f98ce2fa29361124f6"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1779, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}